==========mod==========
#[version = "0.0.5"]
def @func_6839(%var_6830: Tensor[(6, 1, 6), int64]) -> (Tensor[(6, 1, 6), int16], Tensor[(14, 1, 10), float32]) {
  %0 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="int16") /* ty=int16 */;
  %3 = cast(%var_6830, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %4 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %5 = bitwise_and(%2, %3) /* ty=Tensor[(6, 1, 6), int16] */;
  %6 = %4.0;
  (%5, %6)
}

def @func_10780(%var_10778: Tensor[(420), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32], int64, Tensor[(660), uint64], Tensor[(480, 2), float32], Tensor[(3, 5, 9), int8], Tensor[(420), float32]) {
  %7 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %9 = reshape(%8, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %10 = @func_2243(%9) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
  %14 = reshape(%11, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %15 = reshape(%12, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %16 = reshape(%13, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %17 = @func_7659(%14, %15, %16) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
  %18 = cast(%var_10778, dtype="float32") /* ty=Tensor[(420), float32] */;
  %19 = reshape(%18, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
  %20 = @func_4249(%19) /* ty=(Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %21 = %7.0;
  %22 = %10.1;
  %23 = %17.3;
  %24 = %20.2;
  (%21, %22, meta[relay.Constant][0] /* ty=Tensor[(48), float32] */, %23, meta[relay.Constant][1] /* ty=Tensor[(660), uint64] */, meta[relay.Constant][2] /* ty=Tensor[(480, 2), float32] */, %24, %var_10778)
}

def @func_6303(%var_6291: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), bool], Tensor[(14, 1, 10), float32]) {
  %25 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %28 = cast(%var_6291, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %29 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %30 = logical_and(%27, %28) /* ty=Tensor[(14, 16, 10), bool] */;
  %31 = %29.0;
  (%30, %31)
}

def @func_13610() -> Tensor[(100), uint32] {
  %32 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %32.1
}

def @func_4057() -> (int64, Tensor[(45, 3), int8]) {
  %33 = @func_2777() /* ty=(int64,) */;
  %34 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %35 = %33.0;
  %36 = %34.1;
  (%35, %36)
}

def @func_2777() -> (int64,) {
  %37 = @func_1859() /* ty=(int64,) */;
  %38 = %37.0;
  (%38,)
}

def @func_11963() -> Tensor[(14, 1, 10), float32] {
  %39 = @func_9036() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
  %39.0
}

def @func_5467() -> int64 {
  %40 = @func_1603() /* ty=(int64,) */;
  %40.0
}

def @func_1748() -> (int64,) {
  %41 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %42 = %41.3;
  (%42,)
}

def @func_3402(%var_3387: Tensor[(6, 7, 10), float32], %var_3388: Tensor[(6, 7, 10), float32]) -> (Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) {
  %43 = cast(%var_3388, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %44 = shape_of(%var_3387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_3387, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %47 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %48 = power(%45, %46) /* ty=Tensor[(6, 7, 10), float32] */;
  %49 = %47.1;
  (%48, %49)
}

def @func_12339() -> Tensor[(13, 16, 11), float32] {
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 11), float32] */;
  log10(%50) /* ty=Tensor[(13, 16, 11), float32] */
}

def @func_5634() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
  %51 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %53 = reshape(%52, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %54 = @func_2243(%53) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %55 = %51.0;
  %56 = %54.0;
  (%55, %56, meta[relay.Constant][4] /* ty=Tensor[(48, 1), float32] */)
}

def @func_1178() -> Tensor[(14, 1, 10), float32] {
  %57 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %57.0
}

def @func_5392() -> (Tensor[(14, 1, 10), float32],) {
  %58 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%58,)
}

def @func_9932() -> Tensor[(14, 1, 10), float32] {
  %59 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %59.0
}

def @func_5311(%var_5294: int64, %var_5298: Tensor[(48), float32]) -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) {
  %60 = @func_3793() /* ty=(Tensor[(16), float64],) */;
  %61 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %62 = cast(%var_5294, dtype="int64") /* ty=int64 */;
  %63 = reshape(%62, newshape=[]) /* ty=int64 */;
  %64 = @func_24(%63) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %65 = cast(%var_5298, dtype="float32") /* ty=Tensor[(48), float32] */;
  %66 = reshape(%65, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %67 = @func_4398(%66) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %68 = %60.0;
  %69 = %61.0;
  %70 = %64.0;
  %71 = %67.1;
  %72 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  (%68, %69, %70, %var_5294, %71, %var_5298, %72)
}

def @func_11858(%var_11844: Tensor[(468), float64]) -> (Tensor[(2, 16, 12), float64], int64, int8, Tensor[(468), float64]) {
  %73 = @func_11795() /* ty=(Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) */;
  %74 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %75 = cast(%var_11844, dtype="float64") /* ty=Tensor[(468), float64] */;
  %76 = reshape(%74, newshape=[]) /* ty=int8 */;
  %77 = reshape(%75, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %78 = @func_5749(%76, %77) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
  %79 = %73.1;
  %80 = %78.1;
  (%79, %80, meta[relay.Constant][5] /* ty=int8 */, %var_11844)
}

def @main(%var_14232: Tensor[(420), float32], %var_14286: Tensor[(15, 468), float64]) -> (int64, Tensor[(6, 1, 8), float32], Tensor[(420), float32], Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(15, 468), float32]) {
  %81 = cast(%var_14232, dtype="float32") /* ty=Tensor[(420), float32] */;
  %82 = cast(%var_14232, dtype="float32") /* ty=Tensor[(420), float32] */;
  %83 = reshape(%81, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %84 = reshape(%82, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %85 = @func_3402(%83, %84) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
  %86 = @func_9036() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
  %87 = @func_10292() /* ty=int64 */;
  %88 = cast(%87, dtype="int8") /* ty=int8 */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %90 = reshape(%88, newshape=[]) /* ty=int8 */;
  %91 = reshape(%89, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %92 = @func_5749(%90, %91) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
  %93 = %92.0;
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(468), float64] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %95 = cast(%93, dtype="int8") /* ty=Tensor[(15, 1), int8] */;
  %96 = bitwise_xor(%94, %95) /* ty=Tensor[(15, 468), int8] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(15, 468), float64] */;
  %98 = acosh(%97) /* ty=Tensor[(15, 468), float64] */;
  %99 = cast(%var_14286, dtype="float32") /* ty=Tensor[(15, 468), float32] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
  %101 = cast(%98, dtype="float32") /* ty=Tensor[(15, 468), float32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %103 = %85.1;
  %104 = @func_11132() /* ty=Tensor[(16, 11, 12), float64] */;
  %105 = %86.2;
  %106 = floor_mod(%101, %102) /* ty=Tensor[(15, 468), float32] */;
  (%87, %103, %var_14232, %104, %105, %106)
}

def @func_4689() -> Tensor[(16), float64] {
  %107 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %107.0
}

def @func_3903(%var_3859: Tensor[(15, 7, 8), int16], %var_3860: Tensor[(15, 7, 8), int16], %var_3891: int64) -> (Tensor[(15, 7, 8), bool], Tensor[(135), int8], Tensor[(135), int8], int64, int64) {
  %108 = cast(%var_3860, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %109 = shape_of(%var_3859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_3859, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = cast(meta[relay.Constant][7] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %113 = cast(%var_3891, dtype="int64") /* ty=int64 */;
  %114 = reshape(%112, newshape=[135]) /* ty=Tensor[(135), int8] */;
  %115 = reshape(%113, newshape=[]) /* ty=int64 */;
  %116 = @func_3610(%114, %115) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) */;
  %117 = less_equal(%110, %111) /* ty=Tensor[(15, 7, 8), bool] */;
  %118 = %116.2;
  %119 = @func_2737() /* ty=int64 */;
  (%117, %118, meta[relay.Constant][7] /* ty=Tensor[(135), int8] */, %var_3891, %119)
}

def @func_1140() -> (Tensor[(14, 1, 10), float32],) {
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %121 = sinh(%120) /* ty=Tensor[(14, 1, 10), float32] */;
  (%121,)
}

def @func_11328() -> (Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) {
  %122 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 10), float32] */, dtype="float64") /* ty=Tensor[(14, 9, 10), float64] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %126 = reshape(%125, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %127 = @func_2351(%126) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %129 = acosh(%128) /* ty=Tensor[(14, 9, 10), float32] */;
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 10), float32] */, dtype="uint32") /* ty=Tensor[(14, 9, 10), uint32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint32") /* ty=Tensor[(14, 9, 10), uint32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %134 = divide(%123, %124) /* ty=Tensor[(14, 9, 10), float64] */;
  %135 = %127.3;
  %136 = logical_xor(%132, %133) /* ty=Tensor[(14, 9, 10), uint32] */;
  (%134, %135, meta[relay.Constant][10] /* ty=Tensor[(960), float32] */, %136)
}

def @func_13233(%var_13186: Tensor[(1260), float32], %var_13198: Tensor[(18, 50), int8]) -> (int64, int64, Tensor[(1260), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(18, 50), float32]) {
  %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(18, 50), int8] */, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %138 = cast(%var_13186, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %139 = reshape(%137, newshape=[9, 100]) /* ty=Tensor[(9, 100), int8] */;
  %140 = reshape(%138, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
  %141 = @func_7100(%139, %140) /* ty=(Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) */;
  %142 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %143 = reshape(%142, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %144 = @func_6258(%143) /* ty=(Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) */;
  %145 = cast(%var_13198, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %146 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(18, 50), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %147 = cast(meta[relay.Constant][11] /* ty=Tensor[(18, 50), int8] */, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %149 = bitwise_xor(%147, %148) /* ty=Tensor[(18, 50), int8] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
  %151 = cos(%150) /* ty=Tensor[(18, 50), float64] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(18, 50), float32] */;
  %153 = @func_7990() /* ty=int64 */;
  %154 = %141.2;
  %155 = %144.1;
  %156 = tan(%152) /* ty=Tensor[(18, 50), float32] */;
  (%153, %154, %var_13186, %155, meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, %156)
}

def @func_5020(%var_4997: Tensor[(6, 4, 8), float32]) -> (Tensor[(6, 4, 8), float32],) {
  %157 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %158 = %157.1;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %160 = cast(%var_4997, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %161 = floor_mod(%159, %160) /* ty=Tensor[(6, 4, 8), float32] */;
  (%161,)
}

def @func_12503() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(400), float32], Tensor[(48), float32], int64) {
  %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %163 = cast(meta[relay.Constant][14] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %164 = reshape(%162, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
  %165 = reshape(%163, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %166 = @func_4504(%164, %165) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
  %167 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %168 = %166.2;
  %169 = @func_7990() /* ty=int64 */;
  (%167, %168, meta[relay.Constant][13] /* ty=Tensor[(400), float32] */, meta[relay.Constant][14] /* ty=Tensor[(48), float32] */, %169)
}

def @func_7289() -> (Tensor[(14, 1, 10), float32],) {
  %170 = @func_5763() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32]) */;
  %171 = %170.1;
  (%171,)
}

def @func_3925() -> (int64,) {
  %172 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %173 = %172.1;
  (%173,)
}

def @func_13338() -> (Tensor[(14, 1, 10), float32],) {
  %174 = @func_12397() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %175 = %174.0;
  (%175,)
}

def @func_7540() -> (Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
  %176 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %177 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %178 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
  %179 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %180 = reshape(%179, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %181 = @func_2243(%180) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %182 = %176.0;
  %183 = %177.0;
  %184 = %178.1;
  %185 = %181.0;
  (%182, %183, %184, %185, meta[relay.Constant][15] /* ty=Tensor[(48, 1), float32] */)
}

def @func_1429(%var_1414: Tensor[(16), float64], %var_1415: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) {
  %186 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %187 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %188 = cast(meta[relay.Constant][16] /* ty=Tensor[(91, 6), int8] */, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
  %189 = reshape(%188, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
  %190 = @func_341(%189) /* ty=(Tensor[(7, 13, 6), int8],) */;
  %191 = cast(%var_1414, dtype="float64") /* ty=Tensor[(16), float64] */;
  %192 = cast(%var_1415, dtype="int64") /* ty=int64 */;
  %193 = reshape(%191, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %194 = reshape(%192, newshape=[]) /* ty=int64 */;
  %195 = @func_386(%193, %194) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %196 = %186.0;
  %197 = %187.0;
  %198 = %190.0;
  %199 = %195.2;
  (%196, %197, %198, meta[relay.Constant][16] /* ty=Tensor[(91, 6), int8] */, %199, %var_1414, %var_1415)
}

def @func_9906(%var_9899: Tensor[(400), float32], %var_9900: Tensor[(24, 2), float32]) -> (Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(400), float32], Tensor[(24, 2), float32]) {
  %200 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
  %201 = cast(%var_9899, dtype="float32") /* ty=Tensor[(400), float32] */;
  %202 = cast(%var_9900, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %203 = reshape(%201, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
  %204 = reshape(%202, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %205 = @func_4504(%203, %204) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
  %206 = %200.0;
  %207 = %205.2;
  (%206, %207, %var_9899, %var_9900)
}

def @func_11628() -> (int64, int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %208 = @func_7959() /* ty=(int64, int64) */;
  %209 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %210 = %208.1;
  %211 = @func_5951() /* ty=int64 */;
  %212 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
  %213 = %209.0;
  (%210, %211, %212, %213)
}

def @func_903(%var_886: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %214 = cast(%var_886, dtype="float32") /* ty=Tensor[(6, 16, 10), float32] */;
  %215 = cast(meta[relay.Constant][17] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %216 = reshape(%215, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %217 = log(%214) /* ty=Tensor[(6, 16, 10), float32] */;
  %218 = @func_607(%216) /* ty=Tensor[(3, 5, 9), int8] */;
  (%217, %218, meta[relay.Constant][17] /* ty=Tensor[(135), int8] */)
}

def @func_13473() -> Tensor[(14, 1, 10), float32] {
  %219 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %219.0
}

def @func_7501() -> (int64, Tensor[(14, 1, 10), float32]) {
  %220 = @func_1859() /* ty=(int64,) */;
  %221 = %220.0;
  %222 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  (%221, %222)
}

def @func_9708() -> (Tensor[(14, 15, 10), int8], Tensor[(14, 15, 10), int8]) {
  %223 = @func_6975() /* ty=Tensor[(14, 15, 10), int8] */;
  %224 = @func_5441() /* ty=Tensor[(14, 15, 10), int8] */;
  (%223, %224)
}

def @func_10412() -> (Tensor[(14, 1, 10), float32],) {
  %225 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %226 = %225.0;
  (%226,)
}

def @func_4735() -> (int64,) {
  %227 = @func_2737() /* ty=int64 */;
  (%227,)
}

def @func_11397(%var_11365: Tensor[(280), float64]) -> (Tensor[(14, 1, 10), float64], int64, Tensor[(280), float64], Tensor[(14, 1, 10), float32], int64) {
  %228 = cast(%var_11365, dtype="float64") /* ty=Tensor[(280), float64] */;
  %229 = reshape(%228, newshape=[1, 280]) /* ty=Tensor[(1, 280), float64] */;
  %230 = @func_4302(%229) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) */;
  %231 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
  %232 = %230.1;
  %233 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %234 = @func_8017() /* ty=int64 */;
  (%231, %232, %var_11365, %233, %234)
}

def @func_9477() -> (Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) {
  %235 = @func_9457() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %236 = @func_6503() /* ty=(Tensor[(15, 10, 6), bool],) */;
  %237 = %235.0;
  %238 = %236.0;
  (%237, %238)
}

def @func_8652(%var_8646: Tensor[(48, 14), float32]) -> (Tensor[(48, 14), uint64],) {
  %239 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %240 = %239.2;
  %241 = cast(%240, dtype="uint64") /* ty=Tensor[(48, 1), uint64] */;
  %242 = cast(%var_8646, dtype="uint64") /* ty=Tensor[(48, 14), uint64] */;
  %243 = maximum(%241, %242) /* ty=Tensor[(48, 14), uint64] */;
  (%243,)
}

def @func_6494() -> (int64,) {
  %244 = @func_1859() /* ty=(int64,) */;
  %245 = %244.0;
  (%245,)
}

def @func_3721(%var_3714: float64, %var_3715: Tensor[(2, 10, 14), float64]) -> (Tensor[(2, 10, 14), float64],) {
  %246 = cast(%var_3714, dtype="float64") /* ty=float64 */;
  %247 = cast(%var_3715, dtype="float64") /* ty=Tensor[(2, 10, 14), float64] */;
  %248 = divide(%246, %247) /* ty=Tensor[(2, 10, 14), float64] */;
  (%248,)
}

def @func_3028(%var_3026: Tensor[(900), int8]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) {
  %249 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %250 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %251 = cast(%var_3026, dtype="int8") /* ty=Tensor[(900), int8] */;
  %252 = reshape(%251, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
  %253 = @func_522(%252) /* ty=(Tensor[(15, 10, 6), bool],) */;
  %254 = %249.0;
  %255 = %250.1;
  %256 = %253.0;
  (%254, %255, %256, %var_3026)
}

def @func_5520(%var_5499: Tensor[(2, 200), float32], %var_5515: Tensor[(468), float64]) -> (Tensor[(100), uint32], Tensor[(4, 12), float32], Tensor[(10, 4, 10), float32], Tensor[(2, 200), bool], int64, Tensor[(468), float64], int64) {
  %257 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %258 = reshape(%257, newshape=[2, 24]) /* ty=Tensor[(2, 24), float32] */;
  %259 = @func_1486(%258) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %260 = cast(%var_5499, dtype="float32") /* ty=Tensor[(2, 200), float32] */;
  %261 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %262 = reshape(%260, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
  %263 = reshape(%261, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %264 = @func_4504(%262, %263) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
  %265 = @func_2777() /* ty=(int64,) */;
  %266 = %265.0;
  %267 = cast(%var_5499, dtype="bool") /* ty=Tensor[(2, 200), bool] */;
  %268 = cast(%266, dtype="bool") /* ty=bool */;
  %269 = cast(%var_5515, dtype="float64") /* ty=Tensor[(468), float64] */;
  %270 = cast(%266, dtype="int64") /* ty=int64 */;
  %271 = reshape(%269, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %272 = reshape(%270, newshape=[]) /* ty=int64 */;
  %273 = @func_4955(%271, %272) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) */;
  %274 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %275 = reshape(%274, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %276 = @func_2196(%275) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
  %277 = %259.4;
  %278 = %264.0;
  %279 = logical_or(%267, %268) /* ty=Tensor[(2, 200), bool] */;
  %280 = %273.3;
  %281 = %276.3;
  (%277, meta[relay.Constant][18] /* ty=Tensor[(4, 12), float32] */, %278, %279, %280, %var_5515, %281)
}

def @func_8736() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %282 = @func_7540() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %283 = cast(meta[relay.Constant][19] /* ty=Tensor[(900), int8] */, dtype="int8") /* ty=Tensor[(900), int8] */;
  %284 = reshape(%283, newshape=[900]) /* ty=Tensor[(900), int8] */;
  %285 = @func_2956(%284) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) */;
  %286 = @func_8617() /* ty=(Tensor[(16), float64], int64) */;
  %287 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %288 = @func_4837() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %289 = %282.1;
  %290 = %285.1;
  %291 = %286.0;
  %292 = %287.0;
  %293 = %288.0;
  (%289, %290, meta[relay.Constant][19] /* ty=Tensor[(900), int8] */, %291, %292, %293)
}

def @func_4302(%var_4300: Tensor[(1, 280), float64]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) {
  %294 = @func_1748() /* ty=(int64,) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="float64") /* ty=float64 */;
  %297 = cast(%var_4300, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %298 = reshape(%296, newshape=[]) /* ty=float64 */;
  %299 = reshape(%297, newshape=[2, 10, 14]) /* ty=Tensor[(2, 10, 14), float64] */;
  %300 = @func_3721(%298, %299) /* ty=(Tensor[(2, 10, 14), float64],) */;
  %301 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
  %302 = %300.0;
  (%301, %295, %302, %var_4300)
}

def @func_10058() -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) {
  %303 = @func_7971() /* ty=(Tensor[(16), float64],) */;
  %304 = @func_7289() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %305 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %306 = %303.0;
  %307 = %304.0;
  %308 = %305.0;
  (%306, %307, %308)
}

def @func_5674() -> (Tensor[(14, 1, 10), float32], int64) {
  %309 = @func_3925() /* ty=(int64,) */;
  %310 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  %311 = %309.0;
  (%310, %311)
}

def @func_7959() -> (int64, int64) {
  %312 = @func_3925() /* ty=(int64,) */;
  %313 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %314 = %312.0;
  %315 = %313.1;
  (%314, %315)
}

def @func_11159(%var_11145: Tensor[(14, 2, 1), float32]) -> (Tensor[(14, 2, 1), float32],) {
  %316 = cast(%var_11145, dtype="float32") /* ty=Tensor[(14, 2, 1), float32] */;
  %317 = exp(%316) /* ty=Tensor[(14, 2, 1), float32] */;
  (%317,)
}

def @func_3508() -> Tensor[(14, 1, 10), float32] {
  %318 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %318.0
}

def @func_8682() -> Tensor[(45, 3), int8] {
  %319 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %319.1
}

def @func_6785() -> Tensor[(14, 1, 10), float32] {
  %320 = @func_5674() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %320.0
}

def @func_1603() -> (int64,) {
  %321 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %322 = %321.3;
  (%322,)
}

def @func_3040() -> Tensor[(14, 1, 10), float32] {
  %323 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %323.0
}

def @func_10292() -> int64 {
  @func_5951() /* ty=int64 */
}

def @func_6449(%var_6414: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), float32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(240, 4), float32], Tensor[(14, 1, 10), float32]) {
  %324 = cast(%var_6414, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
  %325 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %327 = reshape(%326, newshape=[2, 480]) /* ty=Tensor[(2, 480), float32] */;
  %328 = @func_6386(%327) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) */;
  %329 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %330 = atan(%324) /* ty=Tensor[(15, 12, 14), float32] */;
  %331 = %325.2;
  %332 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %333 = %328.3;
  %334 = %329.0;
  (%330, %331, %332, %333, meta[relay.Constant][20] /* ty=Tensor[(240, 4), float32] */, %334)
}

def @func_10072() -> int64 {
  %335 = @func_4735() /* ty=(int64,) */;
  %335.0
}

def @func_8546(%var_8524: int64) -> (Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], Tensor[(16), float64], int64, int64, Tensor[(14, 1, 10), float64]) {
  %336 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(16, 11, 12), float64] */;
  %339 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %340 = cast(meta[relay.Constant][21] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %341 = cast(%var_8524, dtype="int64") /* ty=int64 */;
  %342 = reshape(%340, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %343 = reshape(%341, newshape=[]) /* ty=int64 */;
  %344 = @func_386(%342, %343) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %345 = @func_1859() /* ty=(int64,) */;
  %346 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %347 = log10(%338) /* ty=Tensor[(16, 11, 12), float64] */;
  %348 = %339.0;
  %349 = %344.1;
  %350 = %345.0;
  %351 = %346.0;
  (%347, %348, %349, meta[relay.Constant][21] /* ty=Tensor[(16), float64] */, %var_8524, %350, %351)
}

def @func_11493() -> Tensor[(14, 1, 10), float32] {
  %352 = @func_10058() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) */;
  %352.1
}

def @func_4005(%var_3999: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(16, 11, 12), int64], int64) {
  %353 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %354 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %355 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %356 = cast(%var_3999, dtype="int64") /* ty=int64 */;
  %357 = reshape(%356, newshape=[]) /* ty=int64 */;
  %358 = @func_24(%357) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %359 = %353.0;
  %360 = %354.0;
  %361 = %355.2;
  %362 = %358.0;
  (%359, %360, %361, %362, %var_3999)
}

def @func_2737() -> int64 {
  %363 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %363.0
}

def @func_6701() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) {
  %364 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %365 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %366 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %367 = %364.0;
  %368 = %365.0;
  %369 = %366.1;
  (%367, %368, %369)
}

def @func_4603(%var_4581: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) {
  %370 = cast(%var_4581, dtype="float32") /* ty=Tensor[(48), float32] */;
  %371 = reshape(%370, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %372 = @func_994(%371) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %373 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %374 = %372.1;
  %375 = @func_2737() /* ty=int64 */;
  (%373, %374, %var_4581, %375)
}

def @func_386(%var_354: Tensor[(1, 4, 4), float64], %var_377: int64) -> (Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) {
  %376 = cast(%var_354, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
  %377 = cast(%var_377, dtype="int64") /* ty=int64 */;
  %378 = reshape(%377, newshape=[]) /* ty=int64 */;
  %379 = @func_24(%378) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %380 = sigmoid(%376) /* ty=Tensor[(1, 4, 4), float64] */;
  %381 = %379.0;
  (%380, %381, %var_377)
}

def @func_13625() -> (int64,) {
  %382 = @func_12229() /* ty=int64 */;
  (%382,)
}

def @func_6386(%var_6384: Tensor[(2, 480), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) {
  %383 = cast(meta[relay.Constant][22] /* ty=Tensor[(280, 1), float64] */, dtype="float64") /* ty=Tensor[(280, 1), float64] */;
  %384 = reshape(%383, newshape=[1, 280]) /* ty=Tensor[(1, 280), float64] */;
  %385 = @func_4302(%384) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) */;
  %386 = cast(%var_6384, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
  %387 = reshape(%386, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %388 = @func_903(%387) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %389 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %390 = %385.3;
  %391 = %388.2;
  (%389, %390, meta[relay.Constant][22] /* ty=Tensor[(280, 1), float64] */, %391, %var_6384)
}

def @func_10870() -> (int64,) {
  %392 = @func_4735() /* ty=(int64,) */;
  %393 = %392.0;
  (%393,)
}

def @func_11443() -> Tensor[(14, 1, 10), float32] {
  @func_6785() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_12668() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %394 = @func_12183() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %395 = @func_4837() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %396 = %394.0;
  %397 = %395.0;
  (%396, %397)
}

def @func_12366() -> int64 {
  %398 = @func_4735() /* ty=(int64,) */;
  %398.0
}

def @func_12792() -> int64 {
  @func_10601() /* ty=int64 */
}

def @func_11795() -> (Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) {
  %399 = cast(meta[relay.Constant][23] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %400 = reshape(%399, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), int8] */;
  %401 = @func_4765(%400) /* ty=(Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) */;
  %402 = @func_5441() /* ty=Tensor[(14, 15, 10), int8] */;
  %403 = %401.1;
  (%402, %403, meta[relay.Constant][23] /* ty=Tensor[(384), int8] */)
}

def @func_10336(%var_10323: uint16) -> (Tensor[(13, 1, 9), uint16], Tensor[(6, 1, 8), float32], Tensor[(420), float32]) {
  %404 = cast(%var_10323, dtype="uint16") /* ty=uint16 */;
  %405 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 1, 9), uint16] */, dtype="uint16") /* ty=Tensor[(13, 1, 9), uint16] */;
  %406 = cast(meta[relay.Constant][25] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %407 = cast(meta[relay.Constant][25] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %408 = reshape(%406, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %409 = reshape(%407, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %410 = @func_3402(%408, %409) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
  %411 = subtract(%404, %405) /* ty=Tensor[(13, 1, 9), uint16] */;
  %412 = %410.1;
  (%411, %412, meta[relay.Constant][25] /* ty=Tensor[(420), float32] */)
}

def @func_11660() -> (Tensor[(14, 1, 10), float32],) {
  %413 = @func_8022() /* ty=Tensor[(14, 1, 10), float32] */;
  (%413,)
}

def @func_13699() -> Tensor[(14, 1, 10), float32] {
  @func_12330() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_2009() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) {
  %414 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %415 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %416 = %415.0;
  %417 = @func_1748() /* ty=(int64,) */;
  %418 = %417.0;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %420 = cast(%418, dtype="bool") /* ty=bool */;
  %421 = %414.0;
  %422 = greater_equal(%419, %420) /* ty=Tensor[(14, 1, 10), bool] */;
  (%421, %422)
}

def @func_12183() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %423 = @func_7289() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %424 = %423.0;
  %425 = @func_11895() /* ty=Tensor[(14, 1, 10), float32] */;
  (%424, %425)
}

def @func_13578() -> Tensor[(14, 1, 10), float32] {
  @func_12330() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_1187() -> (Tensor[(14, 1, 10), float32],) {
  %426 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %427 = %426.0;
  (%427,)
}

def @func_8355() -> (Tensor[(14, 1, 10), float32], int64, int64) {
  %428 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %429 = @func_3925() /* ty=(int64,) */;
  %430 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %431 = %428.0;
  %432 = %429.0;
  %433 = %430.1;
  (%431, %432, %433)
}

def @func_6123() -> (Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) {
  %434 = cast(meta[relay.Constant][26] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
  %435 = reshape(%434, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
  %436 = @func_759(%435) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
  %437 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  %438 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %440 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%437, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %443 = %436.0;
  %444 = floor_divide(%441, %442) /* ty=Tensor[(14, ?, 10), float32] */;
  %445 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%443, meta[relay.Constant][26] /* ty=Tensor[(100), uint32] */, %444, %445)
}

def @func_7821(%var_7795: Tensor[(14, 14, 10), float32], %var_7808: Tensor[(14, 5, 10), float32]) -> (Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) {
  %446 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
  %447 = cast(%446, dtype="uint32") /* ty=Tensor[(14, 1, 10), uint32] */;
  %448 = cast(%var_7795, dtype="uint32") /* ty=Tensor[(14, 14, 10), uint32] */;
  %449 = cast(%446, dtype="uint64") /* ty=Tensor[(14, 1, 10), uint64] */;
  %450 = cast(%var_7808, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %451 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %452 = logical_xor(%447, %448) /* ty=Tensor[(14, 14, 10), uint32] */;
  %453 = logical_xor(%449, %450) /* ty=Tensor[(14, 5, 10), uint64] */;
  %454 = %451.0;
  (%452, %453, %454)
}

def @func_9048() -> (int64,) {
  %455 = @func_4319() /* ty=(int64,) */;
  %456 = %455.0;
  (%456,)
}

def @func_7563() -> (Tensor[(14, 1, 10), float32],) {
  %457 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  (%457,)
}

def @func_11132() -> Tensor[(16, 11, 12), float64] {
  %458 = @func_9642() /* ty=(Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */;
  %458.0
}

def @func_8022() -> Tensor[(14, 1, 10), float32] {
  %459 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %459.0
}

def @func_13514() -> (int64, Tensor[(14, 1, 10), float64]) {
  %460 = @func_12090() /* ty=(int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) */;
  %461 = %460.0;
  %462 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
  (%461, %462)
}

def @func_3196(%var_3164: Tensor[(7, 1, 16), float32], %var_3185: Tensor[(7, 1, 16), float64]) -> (Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) {
  %463 = cast(meta[relay.Constant][27] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %464 = reshape(%463, newshape=[8, 2]) /* ty=Tensor[(8, 2), float64] */;
  %465 = @func_3123(%464) /* ty=(Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
  %466 = cast(%var_3164, dtype="float32") /* ty=Tensor[(7, 1, 16), float32] */;
  %467 = atanh(%466) /* ty=Tensor[(7, 1, 16), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 1, 16), float64] */;
  %469 = exp(%468) /* ty=Tensor[(7, 1, 16), float64] */;
  %470 = cast(%var_3185, dtype="int64") /* ty=Tensor[(7, 1, 16), int64] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="int64") /* ty=Tensor[(7, 1, 16), int64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %474 = %465.8;
  %475 = left_shift(%472, %473) /* ty=Tensor[(7, ?, 16), int64] */;
  (%474, meta[relay.Constant][27] /* ty=Tensor[(16), float64] */, %475)
}

def @func_3610(%var_3593: Tensor[(135), int8], %var_3606: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) {
  %476 = cast(%var_3593, dtype="int8") /* ty=Tensor[(135), int8] */;
  %477 = reshape(%476, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %478 = cast(%var_3606, dtype="int64") /* ty=int64 */;
  %479 = reshape(%478, newshape=[]) /* ty=int64 */;
  %480 = @func_24(%479) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %481 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %482 = @func_607(%477) /* ty=Tensor[(3, 5, 9), int8] */;
  %483 = %480.0;
  (%481, %482, %var_3593, %483, %var_3606)
}

def @func_8892(%var_8872: Tensor[(3, 3, 3), int64], %var_8885: Tensor[(1960), float32], %var_8886: Tensor[(700), float32]) -> (Tensor[(3, 3, 3), uint8], Tensor[(14, 14, 10), uint32], Tensor[(1960), float32], Tensor[(700), float32]) {
  %484 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="uint8") /* ty=uint8 */;
  %487 = cast(%var_8872, dtype="uint8") /* ty=Tensor[(3, 3, 3), uint8] */;
  %488 = cast(%var_8885, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %489 = cast(%var_8886, dtype="float32") /* ty=Tensor[(700), float32] */;
  %490 = reshape(%488, newshape=[14, 14, 10]) /* ty=Tensor[(14, 14, 10), float32] */;
  %491 = reshape(%489, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float32] */;
  %492 = @func_7821(%490, %491) /* ty=(Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) */;
  %493 = add(%486, %487) /* ty=Tensor[(3, 3, 3), uint8] */;
  %494 = %492.0;
  (%493, %494, %var_8885, %var_8886)
}

def @func_6019(%var_6008: Tensor[(112), float32]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(96), int8], Tensor[(384), int8], Tensor[(100), uint32], Tensor[(112), float32]) {
  %495 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
  %496 = cast(meta[relay.Constant][29] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %497 = cast(meta[relay.Constant][29] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %498 = reshape(%495, newshape=[6, 16, 1]) /* ty=Tensor[(6, 16, 1), int8] */;
  %499 = reshape(%496, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %500 = reshape(%497, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %501 = @func_2498(%498, %499, %500) /* ty=(Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) */;
  %502 = cast(%var_6008, dtype="float32") /* ty=Tensor[(112), float32] */;
  %503 = cast(%var_6008, dtype="float64") /* ty=Tensor[(112), float64] */;
  %504 = reshape(%502, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), float32] */;
  %505 = reshape(%503, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), float64] */;
  %506 = @func_3196(%504, %505) /* ty=(Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) */;
  %507 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %508 = %501.1;
  %509 = %506.0;
  (%507, %508, meta[relay.Constant][28] /* ty=Tensor[(96), int8] */, meta[relay.Constant][29] /* ty=Tensor[(384), int8] */, %509, %var_6008)
}

def @func_9838() -> (Tensor[(45, 3), int8],) {
  %510 = @func_8682() /* ty=Tensor[(45, 3), int8] */;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %512 = rsqrt(%511) /* ty=Tensor[(45, 3), float64] */;
  %513 = cast(%512, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %514 = shape_of(%510, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(%510, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %517 = left_shift(%515, %516) /* ty=Tensor[(45, 3), int8] */;
  (%517,)
}

def @func_11895() -> Tensor[(14, 1, 10), float32] {
  @func_1178() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_2401() -> (Tensor[(14, 1, 10), float32], int64) {
  %518 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %519 = @func_1603() /* ty=(int64,) */;
  %520 = %518.0;
  %521 = %519.0;
  (%520, %521)
}

def @func_2863() -> (Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) {
  %522 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %524 = cast(meta[relay.Constant][30] /* ty=Tensor[(45, 3), int8] */, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %525 = reshape(%524, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %526 = @func_607(%525) /* ty=Tensor[(3, 5, 9), int8] */;
  %527 = @func_2777() /* ty=(int64,) */;
  %528 = %527.0;
  %529 = cast(%526, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %530 = cast(%528, dtype="float64") /* ty=float64 */;
  %531 = atan(%523) /* ty=Tensor[(14, 1, 10), float64] */;
  %532 = divide(%529, %530) /* ty=Tensor[(3, 5, 9), float64] */;
  (%531, meta[relay.Constant][30] /* ty=Tensor[(45, 3), int8] */, %532)
}

def @func_7990() -> int64 {
  @func_2737() /* ty=int64 */
}

def @func_2514() -> Tensor[(14, 1, 10), float32] {
  @func_1178() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_1486(%var_1470: Tensor[(2, 24), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %533 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %534 = cast(%var_1470, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %535 = reshape(%534, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %536 = @func_994(%535) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %537 = cast(meta[relay.Constant][31] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
  %538 = reshape(%537, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
  %539 = @func_759(%538) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
  %540 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %541 = %533.0;
  %542 = %536.0;
  %543 = %539.0;
  %544 = %540.0;
  %545 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  (%541, %542, %var_1470, %543, meta[relay.Constant][31] /* ty=Tensor[(100), uint32] */, %544, %545)
}

def @func_9642() -> (Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
  %546 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
  %547 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
  %548 = %547.2;
  %549 = @func_6503() /* ty=(Tensor[(15, 10, 6), bool],) */;
  %550 = %549.0;
  %551 = cast(%548, dtype="int16") /* ty=int16 */;
  %552 = cast(%550, dtype="int16") /* ty=Tensor[(15, 10, 6), int16] */;
  %553 = %546.0;
  %554 = bitwise_and(%551, %552) /* ty=Tensor[(15, 10, 6), int16] */;
  %555 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  (%553, %554, %555)
}

def @func_6975() -> Tensor[(14, 15, 10), int8] {
  @func_5441() /* ty=Tensor[(14, 15, 10), int8] */
}

def @func_12397() -> (Tensor[(14, 1, 10), float32],) {
  %556 = @func_8736() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %557 = %556.5;
  (%557,)
}

def @func_12899(%var_12887: Tensor[(5, 10, 8), int64]) -> (Tensor[(16), float64], Tensor[(5, 10, 8), uint16]) {
  %558 = @func_7971() /* ty=(Tensor[(16), float64],) */;
  %559 = @func_10292() /* ty=int64 */;
  %560 = cast(%559, dtype="uint16") /* ty=uint16 */;
  %561 = cast(%var_12887, dtype="uint16") /* ty=Tensor[(5, 10, 8), uint16] */;
  %562 = %558.0;
  %563 = left_shift(%560, %561) /* ty=Tensor[(5, 10, 8), uint16] */;
  (%562, %563)
}

def @func_1674() -> (int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) {
  %564 = @func_1603() /* ty=(int64,) */;
  %565 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %566 = cast(meta[relay.Constant][32] /* ty=Tensor[(900), int8] */, dtype="int8") /* ty=Tensor[(900), int8] */;
  %567 = reshape(%566, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
  %568 = @func_522(%567) /* ty=(Tensor[(15, 10, 6), bool],) */;
  %569 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %570 = %564.0;
  %571 = %565.1;
  %572 = %568.0;
  %573 = %569.0;
  (%570, %571, %572, meta[relay.Constant][32] /* ty=Tensor[(900), int8] */, %573)
}

def @func_11551() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(24, 2), float32]) {
  %574 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %575 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %576 = reshape(%575, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %577 = @func_4603(%576) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) */;
  %578 = %574.0;
  %579 = %577.0;
  (%578, %579, meta[relay.Constant][33] /* ty=Tensor[(24, 2), float32] */)
}

def @func_847(%var_837: Tensor[(13, 4, 9), float64], %var_842: int64) -> (Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
  %580 = cast(%var_837, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %581 = cast(meta[relay.Constant][34] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %582 = cast(%var_842, dtype="int64") /* ty=int64 */;
  %583 = reshape(%581, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %584 = reshape(%582, newshape=[]) /* ty=int64 */;
  %585 = @func_386(%583, %584) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %586 = asinh(%580) /* ty=Tensor[(13, 4, 9), float64] */;
  %587 = %585.0;
  (%586, %587, meta[relay.Constant][34] /* ty=Tensor[(16), float64] */, %var_842)
}

def @func_4249(%var_4222: Tensor[(14, 3, 10), float32]) -> (Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %588 = @func_2514() /* ty=Tensor[(14, 1, 10), float32] */;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %590 = cast(%var_4222, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %592 = cast(%var_4222, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %593 = cast(meta[relay.Constant][35] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %594 = reshape(%593, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %595 = not_equal(%589, %590) /* ty=Tensor[(14, 3, 10), bool] */;
  %596 = greater_equal(%591, %592) /* ty=Tensor[(14, 3, 10), bool] */;
  %597 = @func_607(%594) /* ty=Tensor[(3, 5, 9), int8] */;
  (%595, %596, %597, meta[relay.Constant][35] /* ty=Tensor[(135), int8] */)
}

def @func_13029(%var_12986: Tensor[(11, 1, 12), float32], %var_13008: Tensor[(16), float64]) -> (Tensor[(11, ?, 12), float32], Tensor[(16), float64], Tensor[(900), bool], Tensor[(16), float64], Tensor[(11, ?, 12), bool]) {
  %598 = cast(%var_12986, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %599 = acosh(%598) /* ty=Tensor[(11, 1, 12), float32] */;
  %600 = cast(%var_12986, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %604 = cast(meta[relay.Constant][36] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %605 = cast(%var_13008, dtype="float64") /* ty=Tensor[(16), float64] */;
  %606 = reshape(%604, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %607 = reshape(%605, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %608 = @func_10137(%606, %607) /* ty=(Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %609 = cast(%599, dtype="bool") /* ty=Tensor[(11, 1, 12), bool] */;
  %610 = shape_of(%var_12986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_12986, dtype="bool") /* ty=Tensor[(11, 1, 12), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = divide(%602, %603) /* ty=Tensor[(11, ?, 12), float32] */;
  %614 = %608.3;
  %615 = not_equal(%611, %612) /* ty=Tensor[(11, ?, 12), bool] */;
  (%613, %614, meta[relay.Constant][36] /* ty=Tensor[(900), bool] */, %var_13008, %615)
}

def @func_12983() -> (int64, int64) {
  %616 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %617 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %618 = %616.3;
  %619 = %617.1;
  (%618, %619)
}

def @func_12622() -> (int64, Tensor[(14, 1, 10), float32]) {
  %620 = @func_12366() /* ty=int64 */;
  %621 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  (%620, %621)
}

def @func_7141(%var_7110: Tensor[(900), int8], %var_7138: Tensor[(16), float64]) -> (Tensor[(14, 9, 10), uint8], Tensor[(900), int8], Tensor[(1260), float32], Tensor[(14, 4, 10), float32], Tensor[(546), int8], Tensor[(16), float64]) {
  %622 = cast(%var_7110, dtype="int8") /* ty=Tensor[(900), int8] */;
  %623 = cast(meta[relay.Constant][37] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %624 = reshape(%622, newshape=[9, 100]) /* ty=Tensor[(9, 100), int8] */;
  %625 = reshape(%623, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
  %626 = @func_7100(%624, %625) /* ty=(Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) */;
  %627 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %630 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %631 = cast(%var_7138, dtype="float64") /* ty=Tensor[(16), float64] */;
  %632 = reshape(%631, newshape=[8, 2]) /* ty=Tensor[(8, 2), float64] */;
  %633 = @func_3123(%632) /* ty=(Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
  %634 = %626.3;
  %635 = power(%629, %630) /* ty=Tensor[(14, 4, 10), float32] */;
  %636 = %633.6;
  (%634, %var_7110, meta[relay.Constant][37] /* ty=Tensor[(1260), float32] */, %635, %636, %var_7138)
}

def @func_5441() -> Tensor[(14, 15, 10), int8] {
  %637 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %638 = cast(%637, dtype="int8") /* ty=Tensor[(14, 1, 10), int8] */;
  %639 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 15, 10), float32] */, dtype="int8") /* ty=Tensor[(14, 15, 10), int8] */;
  logical_xor(%638, %639) /* ty=Tensor[(14, 15, 10), int8] */
}

def @func_9135() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], uint16, Tensor[(42), uint16], int64) {
  %640 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %641 = cast(meta[relay.Constant][40] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %642 = cast(meta[relay.Constant][41] /* ty=Tensor[(42), uint16] */, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %643 = reshape(%641, newshape=[]) /* ty=uint16 */;
  %644 = reshape(%642, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint16] */;
  %645 = @func_5924(%643, %644) /* ty=(Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) */;
  %646 = @func_4319() /* ty=(int64,) */;
  %647 = %640.0;
  %648 = %645.2;
  %649 = %646.0;
  (%647, %648, meta[relay.Constant][40] /* ty=uint16 */, meta[relay.Constant][41] /* ty=Tensor[(42), uint16] */, %649)
}

def @func_9552(%var_9521: Tensor[(14, 12, 10), float32]) -> (Tensor[(14, 12, 10), int64], Tensor[(100), uint32]) {
  %650 = @func_8022() /* ty=Tensor[(14, 1, 10), float32] */;
  %651 = cast(%650, dtype="int64") /* ty=Tensor[(14, 1, 10), int64] */;
  %652 = cast(%var_9521, dtype="int64") /* ty=Tensor[(14, 12, 10), int64] */;
  %653 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %654 = logical_xor(%651, %652) /* ty=Tensor[(14, 12, 10), int64] */;
  %655 = %653.1;
  (%654, %655)
}

def @func_1940() -> (Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
  %656 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %657 = cast(meta[relay.Constant][42] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %658 = reshape(%657, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %659 = @func_994(%658) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %660 = %656.2;
  %661 = %659.0;
  (%660, %661, meta[relay.Constant][42] /* ty=Tensor[(48), float32] */)
}

def @func_5178(%var_5133: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(48), float32], Tensor[(48), float32], int64, Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32]) {
  %662 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %663 = cast(%var_5133, dtype="float32") /* ty=Tensor[(48), float32] */;
  %664 = reshape(%663, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %665 = @func_3345(%664) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
  %666 = @func_4319() /* ty=(int64,) */;
  %667 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %668 = @func_1859() /* ty=(int64,) */;
  %669 = %665.4;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(48), float32] */;
  %671 = reshape(%670, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %672 = @func_4398(%671) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %673 = %662.0;
  %674 = %666.0;
  %675 = %667.1;
  %676 = %668.0;
  %677 = %672.1;
  (%673, %669, %var_5133, %674, %675, %676, %677)
}

def @func_4319() -> (int64,) {
  %678 = @func_1859() /* ty=(int64,) */;
  %679 = %678.0;
  (%679,)
}

def @func_9105(%var_9062: Tensor[(900, 1), bool], %var_9084: Tensor[(16), float64]) -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
  %680 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %681 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %682 = cast(%var_9062, dtype="bool") /* ty=Tensor[(900, 1), bool] */;
  %683 = reshape(%681, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %684 = reshape(%682, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %685 = @func_8247(%683, %684) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) */;
  %686 = cast(%var_9084, dtype="float64") /* ty=Tensor[(16), float64] */;
  %687 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %688 = reshape(%686, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %689 = reshape(%687, newshape=[]) /* ty=int64 */;
  %690 = @func_386(%688, %689) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %691 = %680.0;
  %692 = %685.8;
  %693 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %694 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %695 = %690.0;
  (%691, %692, meta[relay.Constant][43] /* ty=Tensor[(192), float32] */, %var_9062, %693, %694, %695, %var_9084, 7 /* ty=int64 */)
}

def @func_7100(%var_7051: Tensor[(9, 100), int8], %var_7055: Tensor[(14, 9, 10), float32]) -> (Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) {
  %696 = @func_6624() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */;
  %697 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
  %698 = cast(%var_7051, dtype="int8") /* ty=Tensor[(9, 100), int8] */;
  %699 = reshape(%698, newshape=[900]) /* ty=Tensor[(900), int8] */;
  %700 = @func_3028(%699) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) */;
  %701 = %700.1;
  %702 = cast(%701, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  %703 = cast(%var_7055, dtype="uint16") /* ty=Tensor[(14, 9, 10), uint16] */;
  %704 = bitwise_xor(%702, %703) /* ty=Tensor[(14, 9, 10), uint16] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %706 = sinh(%705) /* ty=Tensor[(14, 9, 10), float32] */;
  %707 = cast(%var_7055, dtype="uint8") /* ty=Tensor[(14, 9, 10), uint8] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="uint8") /* ty=Tensor[(14, 9, 10), uint8] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %711 = %696.1;
  %712 = %697.0;
  %713 = add(%709, %710) /* ty=Tensor[(14, 9, 10), uint8] */;
  (%711, %var_7051, %712, %713)
}

def @func_13671() -> (int64, int64, Tensor[(660), uint64], Tensor[(1, 960), float32], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
  %714 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
  %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %716 = cast(meta[relay.Constant][44] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %717 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 960), float32] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
  %718 = reshape(%715, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %719 = reshape(%716, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %720 = reshape(%717, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %721 = @func_7659(%718, %719, %720) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
  %722 = @func_6701() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) */;
  %723 = %714.1;
  %724 = %721.3;
  %725 = @func_13437() /* ty=Tensor[(15, 10, 6), int16] */;
  %726 = %722.0;
  (%723, %724, meta[relay.Constant][44] /* ty=Tensor[(660), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(1, 960), float32] */, %725, %726)
}

def @func_11751() -> (Tensor[(14, 5, 10), int16], Tensor[(14, 1, 10), float32]) {
  %727 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="int16") /* ty=Tensor[(14, 1, 10), int16] */;
  %730 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 5, 10), float32] */, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %731 = right_shift(%729, %730) /* ty=Tensor[(14, 5, 10), int16] */;
  %732 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  (%731, %732)
}

def @func_4125() -> Tensor[(14, 1, 10), float32] {
  @func_2282() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_9036() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) {
  %733 = cast(meta[relay.Constant][47] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %734 = reshape(%733, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %735 = @func_2243(%734) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %736 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %737 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %738 = %735.2;
  %739 = %736.0;
  (%737, %738, meta[relay.Constant][47] /* ty=Tensor[(48), float32] */, %739)
}

def @func_11040() -> (Tensor[(14, 1, 10), float32],) {
  %740 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
  %741 = %740.0;
  (%741,)
}

def @func_13350() -> Tensor[(14, 1, 10), float64] {
  %742 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %742.0
}

def @func_4398(%var_4389: Tensor[(24, 2), float32]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) {
  %743 = @func_1603() /* ty=(int64,) */;
  %744 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %745 = cast(%var_4389, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %746 = reshape(%745, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %747 = @func_994(%746) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %748 = @func_1859() /* ty=(int64,) */;
  %749 = %743.0;
  %750 = %744.0;
  %751 = %747.1;
  %752 = %748.0;
  (%749, %750, %751, %var_4389, %752)
}

def @func_10137(%var_10097: Tensor[(900), bool], %var_10098: Tensor[(16), float64]) -> (Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %753 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %754 = cast(%var_10097, dtype="bool") /* ty=Tensor[(900), bool] */;
  %755 = cast(%var_10098, dtype="float64") /* ty=Tensor[(16), float64] */;
  %756 = reshape(%754, newshape=[900, 1]) /* ty=Tensor[(900, 1), bool] */;
  %757 = reshape(%755, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %758 = @func_9105(%756, %757) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %759 = cast(meta[relay.Constant][49] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %760 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %761 = reshape(%759, newshape=[135]) /* ty=Tensor[(135), int8] */;
  %762 = reshape(%760, newshape=[]) /* ty=int64 */;
  %763 = @func_3610(%761, %762) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) */;
  %764 = cos(%753) /* ty=Tensor[(4, 9, 10), float64] */;
  %765 = %758.4;
  %766 = %763.1;
  %767 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  %768 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  (%764, %765, %var_10097, %var_10098, %766, meta[relay.Constant][49] /* ty=Tensor[(135), int8] */, 2 /* ty=int64 */, %767, %768)
}

def @func_13839() -> (Tensor[(14, 1, 10), float32], int64) {
  %769 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
  %770 = %769.0;
  %771 = @func_5951() /* ty=int64 */;
  (%770, %771)
}

def @func_12330() -> Tensor[(14, 1, 10), float32] {
  %772 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %772.0
}

def @func_3793() -> (Tensor[(16), float64],) {
  %773 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %774 = %773.0;
  (%774,)
}

def @func_5951() -> int64 {
  %775 = @func_1859() /* ty=(int64,) */;
  %775.0
}

def @func_5763() -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32]) {
  %776 = @func_4689() /* ty=Tensor[(16), float64] */;
  %777 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  (%776, %777)
}

def @func_4910() -> Tensor[(14, 1, 10), float32] {
  @func_3040() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7360(%var_7324: Tensor[(4, 8, 16), uint16], %var_7353: Tensor[(5, 8, 16), float64]) -> (Tensor[(4, 8, 16), uint16], Tensor[(14, 1, 10), float32], Tensor[(?, 8, 16), int8], Tensor[(14, 1, 10), float32], Tensor[(5, 8, 16), int32]) {
  %778 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="uint16") /* ty=Tensor[(1, 8, 16), uint16] */;
  %779 = cast(%var_7324, dtype="uint16") /* ty=Tensor[(4, 8, 16), uint16] */;
  %780 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %781 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="float64") /* ty=Tensor[(1, 8, 16), float64] */;
  %782 = log2(%781) /* ty=Tensor[(1, 8, 16), float64] */;
  %783 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="int8") /* ty=Tensor[(1, 8, 16), int8] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="int8") /* ty=Tensor[(1, 8, 16), int8] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %787 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %788 = cast(%782, dtype="int32") /* ty=Tensor[(1, 8, 16), int32] */;
  %789 = cast(%var_7353, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
  %790 = bitwise_or(%778, %779) /* ty=Tensor[(4, 8, 16), uint16] */;
  %791 = %780.0;
  %792 = bitwise_or(%785, %786) /* ty=Tensor[(?, 8, 16), int8] */;
  %793 = %787.0;
  %794 = left_shift(%788, %789) /* ty=Tensor[(5, 8, 16), int32] */;
  (%790, %791, %792, %793, %794)
}

def @func_8276() -> (Tensor[(14, 1, 10), float32],) {
  %795 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %796 = %795.0;
  (%796,)
}

def @func_2498(%var_2459: Tensor[(6, 16, 1), int8], %var_2460: Tensor[(6, 16, 4), int8], %var_2471: Tensor[(6, 16, 4), int8]) -> (Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) {
  %797 = cast(%var_2459, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
  %798 = cast(%var_2460, dtype="int8") /* ty=Tensor[(6, 16, 4), int8] */;
  %799 = right_shift(%797, %798) /* ty=Tensor[(6, 16, 4), int8] */;
  %800 = cast(%var_2471, dtype="uint8") /* ty=Tensor[(6, 16, 4), uint8] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="uint8") /* ty=Tensor[(6, 16, 4), uint8] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %804 = cast(meta[relay.Constant][51] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %805 = reshape(%804, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %806 = @func_2351(%805) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
  %807 = minimum(%802, %803) /* ty=Tensor[(6, 16, 4), uint8] */;
  %808 = %806.1;
  (%807, %808, meta[relay.Constant][51] /* ty=Tensor[(960), float32] */)
}

def @func_12820() -> (Tensor[(14, 1, 10), float64], int64) {
  %809 = @func_9457() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %810 = @func_7410() /* ty=(int64, int64) */;
  %811 = %809.0;
  %812 = %810.0;
  (%811, %812)
}

def @func_7410() -> (int64, int64) {
  %813 = @func_4735() /* ty=(int64,) */;
  %814 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %815 = %813.0;
  %816 = %814.2;
  (%815, %816)
}

def @func_10240() -> int64 {
  %817 = @func_9036() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
  %817.3
}

def @func_4765(%var_4739: Tensor[(2, 16, 12), int8]) -> (Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) {
  %818 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 16, 12), int8] */, dtype="int8") /* ty=Tensor[(2, 16, 12), int8] */;
  %819 = shape_of(%var_4739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_4739, dtype="int8") /* ty=Tensor[(2, 16, 12), int8] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %822 = cast(%var_4739, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %823 = multiply(%820, %821) /* ty=Tensor[(2, 16, 12), int8] */;
  %824 = erf(%822) /* ty=Tensor[(2, 16, 12), float64] */;
  (%823, %824)
}

def @func_6200() -> (int64, int64, Tensor[(14, 1, 10), float32]) {
  %825 = @func_1748() /* ty=(int64,) */;
  %826 = @func_1748() /* ty=(int64,) */;
  %827 = %825.0;
  %828 = %826.0;
  %829 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%827, %828, %829)
}

def @func_1859() -> (int64,) {
  %830 = @func_1748() /* ty=(int64,) */;
  %831 = %830.0;
  (%831,)
}

def @func_6352() -> (int64, int64, Tensor[(1, 16), float64], int64) {
  %832 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %833 = @func_5411() /* ty=int64 */;
  %834 = cast(%833, dtype="int64") /* ty=int64 */;
  %835 = reshape(%832, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %836 = reshape(%834, newshape=[]) /* ty=int64 */;
  %837 = @func_386(%835, %836) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %838 = %837.2;
  %839 = @func_5951() /* ty=int64 */;
  (%833, %838, meta[relay.Constant][53] /* ty=Tensor[(1, 16), float64] */, %839)
}

def @func_2956(%var_2943: Tensor[(900), int8]) -> (Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) {
  %840 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %841 = %840.1;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %843 = reshape(%842, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %844 = @func_2243(%843) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %845 = cast(%var_2943, dtype="int8") /* ty=Tensor[(900), int8] */;
  %846 = reshape(%845, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
  %847 = @func_522(%846) /* ty=(Tensor[(15, 10, 6), bool],) */;
  %848 = cast(meta[relay.Constant][54] /* ty=Tensor[(468, 1), float64] */, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %849 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %850 = reshape(%848, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %851 = reshape(%849, newshape=[]) /* ty=int64 */;
  %852 = @func_847(%850, %851) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %853 = %844.0;
  %854 = %847.0;
  %855 = %852.0;
  (%841, %853, %854, %var_2943, %855, meta[relay.Constant][54] /* ty=Tensor[(468, 1), float64] */, -5 /* ty=int64 */)
}

def @func_3444(%var_3424: Tensor[(2, 7, 10), uint32], %var_3438: Tensor[(1200), float64]) -> (Tensor[(2, 7, 10), uint32], Tensor[(135), int8], Tensor[(48), float32], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  %856 = cast(%var_3424, dtype="uint32") /* ty=Tensor[(2, 7, 10), uint32] */;
  %857 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(2, 7, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(2, 7, 10), uint32] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %860 = cast(meta[relay.Constant][56] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %861 = reshape(%860, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %862 = @func_2196(%861) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
  %863 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %864 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %865 = reshape(%863, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %866 = reshape(%864, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %867 = bitwise_xor(%858, %859) /* ty=Tensor[(2, 7, 10), uint32] */;
  %868 = %862.1;
  %869 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %870 = @func_1449(%865, %866) /* ty=Tensor[(5, 15, 16), float64] */;
  (%867, %868, meta[relay.Constant][56] /* ty=Tensor[(48), float32] */, %869, %870, %var_3438)
}

def @func_14158() -> (int64, int64) {
  %871 = @func_9048() /* ty=(int64,) */;
  %872 = @func_14084() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %873 = %871.0;
  %874 = %872.1;
  (%873, %874)
}

def @func_6774() -> (Tensor[(48, 1), float64], Tensor[(48), float32], int64, int64, Tensor[(2, 24), float32]) {
  %875 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %876 = %875.2;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %878 = cast(%876, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %879 = reshape(%878, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %880 = @func_2243(%879) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %881 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %882 = %880.2;
  %883 = cast(%882, dtype="float32") /* ty=Tensor[(48), float32] */;
  %884 = reshape(%881, newshape=[]) /* ty=int64 */;
  %885 = reshape(%883, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %886 = @func_5311(%884, %885) /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) */;
  %887 = cast(%876, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %888 = reshape(%887, newshape=[2, 24]) /* ty=Tensor[(2, 24), float32] */;
  %889 = @func_1486(%888) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %890 = asin(%877) /* ty=Tensor[(48, 1), float64] */;
  %891 = %886.3;
  %892 = %889.2;
  (%890, %882, %891, 5 /* ty=int64 */, %892)
}

def @func_12744(%var_12673: Tensor[(12, 11, 9), int64], %var_12674: Tensor[(12, 11, 9), int64]) -> (Tensor[(12, 11, 9), float32], Tensor[(14, 1, 10), float64], Tensor[(15, 11, 4), bool], Tensor[(960), float32]) {
  %893 = cast(%var_12674, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %894 = shape_of(%var_12673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%var_12673, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %897 = left_shift(%895, %896) /* ty=Tensor[(12, 11, 9), int64] */;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %899 = cast(meta[relay.Constant][57] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %900 = reshape(%899, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %901 = @func_9292(%900) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) */;
  %902 = sinh(%898) /* ty=Tensor[(12, 11, 9), float32] */;
  %903 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
  %904 = %901.1;
  (%902, %903, %904, meta[relay.Constant][57] /* ty=Tensor[(960), float32] */)
}

def @func_14084() -> (Tensor[(14, 1, 10), float32], int64) {
  %905 = @func_11660() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %906 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %907 = %905.0;
  %908 = %906.0;
  (%907, %908)
}

def @func_10368() -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) {
  %909 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %910 = reshape(%909, newshape=[]) /* ty=int64 */;
  %911 = @func_24(%910) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %912 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  %913 = %911.0;
  (%912, %913, -10 /* ty=int64 */)
}

def @func_10448(%var_10440: Tensor[(1, 15, 10), int64]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 15, 10), bool]) {
  %914 = @func_4735() /* ty=(int64,) */;
  %915 = %914.0;
  %916 = cast(%915, dtype="bool") /* ty=bool */;
  %917 = cast(%var_10440, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
  %918 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %919 = less_equal(%916, %917) /* ty=Tensor[(1, 15, 10), bool] */;
  (%918, %919)
}

def @func_8127() -> (int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
  %920 = @func_1603() /* ty=(int64,) */;
  %921 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
  %922 = cast(meta[relay.Constant][58] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
  %923 = reshape(%922, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
  %924 = @func_759(%923) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
  %925 = %920.0;
  %926 = %921.0;
  %927 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %928 = @func_8017() /* ty=int64 */;
  %929 = %924.0;
  (%925, %926, %927, %928, %929, meta[relay.Constant][58] /* ty=Tensor[(100), uint32] */)
}

def @func_10978() -> (int64, Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool]) {
  %930 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %931 = @func_7540() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %932 = cast(meta[relay.Constant][59] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %933 = reshape(%932, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), bool] */;
  %934 = @func_4569(%933) /* ty=(Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %935 = %930.1;
  %936 = %931.0;
  %937 = %934.1;
  (%935, %936, %937, meta[relay.Constant][59] /* ty=Tensor[(900), bool] */)
}

def @func_1920() -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) {
  %938 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %939 = reshape(%938, newshape=[]) /* ty=int64 */;
  %940 = @func_24(%939) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %941 = cast(meta[relay.Constant][60] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %942 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %943 = reshape(%941, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %944 = reshape(%942, newshape=[]) /* ty=int64 */;
  %945 = @func_1429(%943, %944) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) */;
  %946 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %947 = %940.0;
  %948 = %945.2;
  (%946, %947, -7 /* ty=int64 */, %948, meta[relay.Constant][60] /* ty=Tensor[(16), float64] */)
}

def @func_5379() -> Tensor[(14, 1, 10), float32] {
  %949 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %949.0
}

def @func_4569(%var_4532: Tensor[(15, 10, 6), bool]) -> (Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %950 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %951 = %950.2;
  %952 = cast(%var_4532, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%951, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %956 = logical_or(%954, %955) /* ty=Tensor[(15, 10, 6), bool] */;
  %957 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  %958 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  (%956, %957, %958)
}

def @func_4151() -> (Tensor[(14, 1, 10), float32],) {
  %959 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%959,)
}

def @func_10229() -> Tensor[(14, 1, 10), float32] {
  @func_6785() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_522(%var_481: Tensor[(15, 10, 6), int8]) -> (Tensor[(15, 10, 6), bool],) {
  %960 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 10, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %961 = shape_of(%var_481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%var_481, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %964 = equal(%962, %963) /* ty=Tensor[(15, 10, 6), bool] */;
  (%964,)
}

def @func_6637(%var_6633: Tensor[(7, 16, 6), float32]) -> Tensor[(7, 16, 6), float32] {
  %965 = cast(%var_6633, dtype="float32") /* ty=Tensor[(7, 16, 6), float32] */;
  rsqrt(%965) /* ty=Tensor[(7, 16, 6), float32] */
}

def @func_11409() -> (Tensor[(14, 1, 10), float32],) {
  %966 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %967 = %966.0;
  (%967,)
}

def @func_8405() -> (Tensor[(14, 1, 10), float32],) {
  %968 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %969 = %968.0;
  (%969,)
}

def @func_3670() -> (Tensor[(16), float64],) {
  %970 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %971 = %970.4;
  (%971,)
}

def @func_4955(%var_4946: Tensor[(234, 2), float64], %var_4947: int64) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) {
  %972 = cast(%var_4946, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %973 = cast(%var_4947, dtype="int64") /* ty=int64 */;
  %974 = reshape(%972, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %975 = reshape(%973, newshape=[]) /* ty=int64 */;
  %976 = @func_847(%974, %975) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %977 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %978 = %976.3;
  (%977, %978, %var_4946, %var_4947)
}

def @func_2282() -> Tensor[(14, 1, 10), float32] {
  %979 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %979.0
}

def @func_14010() -> int64 {
  %980 = @func_13625() /* ty=(int64,) */;
  %980.0
}

def @func_12867(%var_12849: Tensor[(8, 12), int8], %var_12850: Tensor[(384), int8]) -> (int64, Tensor[(960), float32], Tensor[(8, 12), int8], Tensor[(384), int8], Tensor[(16), float64]) {
  %981 = @func_3925() /* ty=(int64,) */;
  %982 = cast(%var_12849, dtype="int8") /* ty=Tensor[(8, 12), int8] */;
  %983 = cast(%var_12850, dtype="int8") /* ty=Tensor[(384), int8] */;
  %984 = cast(%var_12850, dtype="int8") /* ty=Tensor[(384), int8] */;
  %985 = reshape(%982, newshape=[6, 16, 1]) /* ty=Tensor[(6, 16, 1), int8] */;
  %986 = reshape(%983, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %987 = reshape(%984, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %988 = @func_2498(%985, %986, %987) /* ty=(Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) */;
  %989 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %990 = %981.0;
  %991 = %988.2;
  %992 = %989.0;
  (%990, %991, %var_12849, %var_12850, %992)
}

def @func_13388() -> Tensor[(14, 1, 10), float32] {
  %993 = @func_11660() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %993.0
}

def @func_11533() -> (Tensor[(14, 1, 10), float32], Tensor[(6, 4, 8), float32], Tensor[(8, 24), float32]) {
  %994 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 24), float32] */, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %995 = reshape(%994, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %996 = @func_6258(%995) /* ty=(Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) */;
  %997 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  %998 = %996.2;
  (%997, %998, meta[relay.Constant][62] /* ty=Tensor[(8, 24), float32] */)
}

def @func_341(%var_324: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), int8],) {
  %999 = cast(%var_324, dtype="int8") /* ty=Tensor[(7, 13, 6), int8] */;
  %1000 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1001 = cast(meta[relay.Constant][63] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int8") /* ty=Tensor[(7, 13, 6), int8] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1003 = logical_xor(%1001, %1002) /* ty=Tensor[(7, 13, 6), int8] */;
  (%1003,)
}

def @func_13437() -> Tensor[(15, 10, 6), int16] {
  %1004 = @func_9642() /* ty=(Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */;
  %1004.1
}

def @func_3533() -> (Tensor[(14, 1, 10), float32],) {
  %1005 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_4082() -> (Tensor[(14, 1, 10), float32],) {
  %1007 = @func_2514() /* ty=Tensor[(14, 1, 10), float32] */;
  (%1007,)
}

def @func_4504(%var_4472: Tensor[(10, 4, 10), float32], %var_4501: Tensor[(48), float32]) -> (Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) {
  %1008 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 10), float32] */;
  %1009 = shape_of(%var_4472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1010 = cast(%var_4472, dtype="float32") /* ty=Tensor[(10, 4, 10), float32] */;
  %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1012 = cast(%var_4501, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1013 = reshape(%1012, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %1014 = @func_4398(%1013) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %1015 = divide(%1010, %1011) /* ty=Tensor[(10, 4, 10), float32] */;
  %1016 = %1014.0;
  (%1015, %1016, %var_4501)
}

def @func_7200() -> Tensor[(14, 1, 10), float32] {
  @func_4910() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_1580() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) {
  %1017 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1018 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %1019 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1020 = reshape(%1018, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %1021 = reshape(%1019, newshape=[]) /* ty=int64 */;
  %1022 = @func_386(%1020, %1021) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %1023 = %1017.0;
  %1024 = %1022.2;
  (%1023, %1024, meta[relay.Constant][65] /* ty=Tensor[(1, 16), float64] */, -9 /* ty=int64 */)
}

def @func_1449(%var_1443: Tensor[(5, 15, 16), float64], %var_1444: Tensor[(5, 15, 16), float64]) -> Tensor[(5, 15, 16), float64] {
  %1025 = cast(%var_1444, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %1026 = shape_of(%var_1443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1027 = cast(%var_1443, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%1027, %1028) /* ty=Tensor[(5, 15, 16), float64] */
}

def @func_9457() -> (Tensor[(14, 1, 10), float64],) {
  %1029 = @func_6624() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_4785() -> Tensor[(14, 1, 10), float64] {
  %1031 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %1031.0
}

def @func_8617() -> (Tensor[(16), float64], int64) {
  %1032 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %1033 = %1032.0;
  %1034 = @func_5951() /* ty=int64 */;
  (%1033, %1034)
}

def @func_12229() -> int64 {
  @func_10292() /* ty=int64 */
}

def @func_6624() -> (Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  %1035 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %1036 = cast(meta[relay.Constant][66] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1037 = cast(meta[relay.Constant][66] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1038 = reshape(%1036, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1039 = reshape(%1037, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1040 = %1035.0;
  %1041 = @func_1449(%1038, %1039) /* ty=Tensor[(5, 15, 16), float64] */;
  (%1040, %1041, meta[relay.Constant][66] /* ty=Tensor[(1200), float64] */)
}

def @func_7971() -> (Tensor[(16), float64],) {
  %1042 = @func_4689() /* ty=Tensor[(16), float64] */;
  (%1042,)
}

def @func_6258(%var_6226: Tensor[(192), float32]) -> (Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) {
  %1043 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %1044 = cast(%var_6226, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1045 = reshape(%1044, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %1046 = @func_5020(%1045) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %1047 = %1046.0;
  %1048 = cast(%1047, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %1049 = %1043.1;
  %1050 = cosh(%1048) /* ty=Tensor[(6, 4, 8), float32] */;
  (%1049, %var_6226, %1050)
}

def @func_8017() -> int64 {
  %1051 = @func_4319() /* ty=(int64,) */;
  %1051.0
}

def @func_2145() -> (Tensor[(14, 1, 10), float32],) {
  %1052 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1053 = %1052.0;
  %1054 = cast(%1053, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %1055 = atanh(%1054) /* ty=Tensor[(14, 1, 10), float32] */;
  (%1055,)
}

def @func_3345(%var_3322: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) {
  %1056 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1057 = cast(meta[relay.Constant][67] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %1058 = reshape(%1057, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %1059 = @func_2351(%1058) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
  %1060 = %1059.3;
  %1061 = cast(meta[relay.Constant][68] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int32") /* ty=Tensor[(3, 5, 9), int32] */;
  %1062 = shape_of(%1060, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1063 = cast(%1060, dtype="int32") /* ty=Tensor[(3, 5, 9), int32] */;
  %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1065 = cast(%var_3322, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1066 = reshape(%1065, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %1067 = @func_994(%1066) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1068 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1069 = %1056.0;
  %1070 = multiply(%1063, %1064) /* ty=Tensor[(3, 5, 9), int32] */;
  %1071 = %1067.2;
  %1072 = %1068.1;
  (%1069, meta[relay.Constant][67] /* ty=Tensor[(10, 96), float32] */, %1070, %1071, %var_3322, %1072)
}

def @func_994(%var_973: Tensor[(6, 1, 8), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %1073 = cast(%var_973, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %1074 = cast(meta[relay.Constant][69] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %1075 = reshape(%1074, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %1076 = log(%1073) /* ty=Tensor[(6, 1, 8), float32] */;
  %1077 = @func_607(%1075) /* ty=Tensor[(3, 5, 9), int8] */;
  (%1076, %1077, meta[relay.Constant][69] /* ty=Tensor[(135), int8] */)
}

def @func_8385(%var_8374: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
  %1078 = cast(%var_8374, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %1079 = asin(%1078) /* ty=Tensor[(11, 4, 14), float64] */;
  %1080 = cast(%1079, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  acosh(%1080) /* ty=Tensor[(11, 4, 14), float64] */
}

def @func_7906() -> (Tensor[(1, 16), float64], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64], Tensor[(6, 4, 8), float32], Tensor[(192), float32]) {
  %1081 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1082 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1083 = cast(meta[relay.Constant][70] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1084 = cast(meta[relay.Constant][70] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1085 = reshape(%1083, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1086 = reshape(%1084, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1087 = cast(meta[relay.Constant][71] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1088 = reshape(%1087, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %1089 = @func_5020(%1088) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %1090 = %1081.2;
  %1091 = %1082.0;
  %1092 = @func_1449(%1085, %1086) /* ty=Tensor[(5, 15, 16), float64] */;
  %1093 = %1089.0;
  (%1090, %1091, %1092, meta[relay.Constant][70] /* ty=Tensor[(1200), float64] */, %1093, meta[relay.Constant][71] /* ty=Tensor[(192), float32] */)
}

def @func_2243(%var_2240: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
  %1094 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1095 = cast(%var_2240, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1096 = reshape(%1095, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %1097 = @func_994(%1096) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1098 = %1094.0;
  %1099 = %1097.0;
  (%1098, %1099, %var_2240)
}

def @func_5040() -> Tensor[(16), float64] {
  @func_4689() /* ty=Tensor[(16), float64] */
}

def @func_607(%var_590: Tensor[(3, 5, 9), int8]) -> Tensor[(3, 5, 9), int8] {
  %1100 = cast(%var_590, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %1101 = shape_of(meta[relay.Constant][72] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1102 = cast(meta[relay.Constant][72] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%1102, %1103) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_4178() -> Tensor[(6, 1, 8), float32] {
  %1104 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %1104.1
}

def @func_10929() -> Tensor[(14, 1, 10), float32] {
  %1105 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
  %1105.0
}

def @func_3650() -> (Tensor[(14, 1, 10), float64],) {
  %1106 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1107 = %1106.0;
  %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %1109 = cosh(%1108) /* ty=Tensor[(14, 1, 10), float64] */;
  (%1109,)
}

def @func_7689() -> (Tensor[(16, 11, 12), float64],) {
  %1110 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %1111 = %1110.1;
  %1112 = cast(%1111, dtype="float64") /* ty=Tensor[(16, 11, 12), float64] */;
  %1113 = exp(%1112) /* ty=Tensor[(16, 11, 12), float64] */;
  (%1113,)
}

def @func_9292(%var_9290: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) {
  %1114 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1115 = cast(meta[relay.Constant][73] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %1116 = cast(meta[relay.Constant][73] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %1117 = cast(%var_9290, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1118 = reshape(%1115, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %1119 = reshape(%1116, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %1120 = reshape(%1117, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %1121 = @func_7659(%1118, %1119, %1120) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
  %1122 = %1114.0;
  %1123 = %1121.0;
  (%1122, %1123, meta[relay.Constant][73] /* ty=Tensor[(660), uint64] */, %var_9290)
}

def @func_11705(%var_11683: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 9, 10), float64], Tensor[(14, 12, 10), bool]) {
  %1124 = @func_11328() /* ty=(Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) */;
  %1125 = @func_9477() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) */;
  %1126 = %1125.0;
  %1127 = cast(%1126, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %1128 = cast(%var_11683, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %1129 = %1124.0;
  %1130 = less_equal(%1127, %1128) /* ty=Tensor[(14, 12, 10), bool] */;
  (%1129, %1130)
}

def @func_4645(%var_4640: Tensor[(14, 1, 10), float64]) -> (Tensor[(14, 1, 10), float64], Tensor[(14, ?, 10), uint16]) {
  %1131 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %1132 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1133 = %1132.1;
  %1134 = cast(%1133, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %1135 = log2(%1134) /* ty=Tensor[(14, 1, 10), float64] */;
  %1136 = cast(%var_4640, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  %1137 = shape_of(%1135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1138 = cast(%1135, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  %1139 = dyn.reshape(%1136, %1137, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1140 = %1131.0;
  %1141 = minimum(%1138, %1139) /* ty=Tensor[(14, ?, 10), uint16] */;
  (%1140, %1141)
}

def @func_24(%var_0: int64) -> (Tensor[(16, 11, 12), int64],) {
  %1142 = cast(%var_0, dtype="int64") /* ty=int64 */;
  %1143 = cast(meta[relay.Constant][74] /* ty=Tensor[(16, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(16, 11, 12), int64] */;
  %1144 = maximum(%1142, %1143) /* ty=Tensor[(16, 11, 12), int64] */;
  (%1144,)
}

def @func_2196(%var_2185: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) {
  %1145 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1146 = cast(%var_2185, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1147 = reshape(%1146, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %1148 = @func_994(%1147) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1149 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %1150 = %1145.0;
  %1151 = %1148.2;
  %1152 = %1149.1;
  (%1150, %1151, %var_2185, %1152)
}

def @func_4837() -> (Tensor[(14, 1, 10), float32],) {
  %1153 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1154 = %1153.0;
  (%1154,)
}

def @func_6503() -> (Tensor[(15, 10, 6), bool],) {
  %1155 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %1156 = %1155.2;
  (%1156,)
}

def @func_10601() -> int64 {
  %1157 = @func_1603() /* ty=(int64,) */;
  %1157.0
}

def @func_12097() -> Tensor[(100), uint32] {
  %1158 = @func_8127() /* ty=(int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
  %1158.5
}

def @func_12249() -> (int64, Tensor[(468), float64], Tensor[(468), float64]) {
  %1159 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
  %1160 = %1159.0;
  %1161 = cast(%1160, dtype="int8") /* ty=int8 */;
  %1162 = cast(meta[relay.Constant][75] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1163 = reshape(%1161, newshape=[]) /* ty=int8 */;
  %1164 = reshape(%1162, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1165 = @func_5749(%1163, %1164) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
  %1166 = %1165.2;
  (%1160, %1166, meta[relay.Constant][75] /* ty=Tensor[(468), float64] */)
}

def @func_12438() -> (Tensor[(12, 12, 6), int16],) {
  %1167 = cast(meta[relay.Constant][77] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 12, 6), int16] */;
  %1168 = shape_of(meta[relay.Constant][76] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1169 = cast(meta[relay.Constant][76] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 12, 6), int16] */;
  %1170 = dyn.reshape(%1167, %1168, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1171 = maximum(%1169, %1170) /* ty=Tensor[(12, 12, 6), int16] */;
  (%1171,)
}

def @func_5924(%var_5911: uint16, %var_5912: Tensor[(7, 6, 1), uint16]) -> (Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) {
  %1172 = cast(%var_5911, dtype="uint16") /* ty=uint16 */;
  %1173 = cast(%var_5912, dtype="uint16") /* ty=Tensor[(7, 6, 1), uint16] */;
  %1174 = cast(%var_5911, dtype="int64") /* ty=int64 */;
  %1175 = cast(meta[relay.Constant][78] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1176 = reshape(%1174, newshape=[]) /* ty=int64 */;
  %1177 = reshape(%1175, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1178 = @func_5311(%1176, %1177) /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) */;
  %1179 = maximum(%1172, %1173) /* ty=Tensor[(7, 6, 1), uint16] */;
  %1180 = %1178.2;
  (%1179, %1180, meta[relay.Constant][78] /* ty=Tensor[(48), float32] */)
}

def @func_2351(%var_2348: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) {
  %1181 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1182 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %1183 = cast(%var_2348, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1184 = reshape(%1183, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %1185 = @func_903(%1184) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1186 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %1187 = %1181.1;
  %1188 = %1182.1;
  %1189 = %1185.1;
  (%1186, %1187, %1188, %1189, %var_2348)
}

def @func_10696(%var_10612: Tensor[(1, 11, 9), bool]) -> (Tensor[(?, 11, 9), int32], int64) {
  %1190 = cast(meta[relay.Constant][79] /* ty=Tensor[(1, 11, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %1191 = shape_of(%var_10612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1192 = cast(%var_10612, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %1193 = dyn.reshape(%1190, %1191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1194 = logical_and(%1192, %1193) /* ty=Tensor[(?, 11, 9), bool] */;
  %1195 = cast(%var_10612, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
  %1196 = shape_of(%1194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1197 = cast(%1194, dtype="int32") /* ty=Tensor[(?, 11, 9), int32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1199 = multiply(%1197, %1198) /* ty=Tensor[(?, 11, 9), int32] */;
  %1200 = @func_2737() /* ty=int64 */;
  (%1199, %1200)
}

def @func_12590() -> (int64, int64, Tensor[(6, 7, 10), float32], Tensor[(420), float32]) {
  %1201 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %1202 = cast(meta[relay.Constant][80] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %1203 = cast(meta[relay.Constant][80] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %1204 = reshape(%1202, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %1205 = reshape(%1203, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %1206 = @func_3402(%1204, %1205) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
  %1207 = %1201.0;
  %1208 = @func_12229() /* ty=int64 */;
  %1209 = %1206.0;
  (%1207, %1208, %1209, meta[relay.Constant][80] /* ty=Tensor[(420), float32] */)
}

def @func_5411() -> int64 {
  %1210 = @func_4319() /* ty=(int64,) */;
  %1210.0
}

def @func_5749(%var_5718: int8, %var_5738: Tensor[(468), float64]) -> (Tensor[(15, 1), bool], int64, Tensor[(468), float64]) {
  %1211 = cast(%var_5718, dtype="bool") /* ty=bool */;
  %1212 = cast(meta[relay.Constant][81] /* ty=Tensor[(15, 1), int8] */, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %1213 = cast(%var_5738, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1214 = cast(%var_5718, dtype="int64") /* ty=int64 */;
  %1215 = reshape(%1213, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %1216 = reshape(%1214, newshape=[]) /* ty=int64 */;
  %1217 = @func_4955(%1215, %1216) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) */;
  %1218 = less_equal(%1211, %1212) /* ty=Tensor[(15, 1), bool] */;
  %1219 = %1217.3;
  (%1218, %1219, %var_5738)
}

def @func_3123(%var_3061: Tensor[(8, 2), float64]) -> (Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
  %1220 = @func_2777() /* ty=(int64,) */;
  %1221 = %1220.0;
  %1222 = cast(%var_3061, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %1223 = cast(%1221, dtype="int64") /* ty=int64 */;
  %1224 = reshape(%1222, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %1225 = reshape(%1223, newshape=[]) /* ty=int64 */;
  %1226 = @func_1429(%1224, %1225) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) */;
  %1227 = %1226.1;
  %1228 = cast(%1221, dtype="bool") /* ty=bool */;
  %1229 = cast(%1227, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %1230 = cast(meta[relay.Constant][82] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1231 = cast(%1221, dtype="int64") /* ty=int64 */;
  %1232 = reshape(%1230, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %1233 = reshape(%1231, newshape=[]) /* ty=int64 */;
  %1234 = @func_847(%1232, %1233) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %1235 = cast(meta[relay.Constant][83] /* ty=Tensor[(546), int8] */, dtype="int8") /* ty=Tensor[(546), int8] */;
  %1236 = reshape(%1235, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
  %1237 = @func_341(%1236) /* ty=(Tensor[(7, 13, 6), int8],) */;
  %1238 = cast(meta[relay.Constant][84] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
  %1239 = reshape(%1238, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
  %1240 = @func_759(%1239) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
  %1241 = logical_and(%1228, %1229) /* ty=Tensor[(14, 1, 10), bool] */;
  %1242 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %1243 = %1234.2;
  %1244 = %1237.0;
  %1245 = %1240.0;
  (%var_3061, %1241, %1242, %1243, meta[relay.Constant][82] /* ty=Tensor[(468), float64] */, %1244, meta[relay.Constant][83] /* ty=Tensor[(546), int8] */, %1245, meta[relay.Constant][84] /* ty=Tensor[(100), uint32] */)
}

def @func_8247(%var_8180: Tensor[(192), float32], %var_8201: Tensor[(900), bool]) -> (Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) {
  %1246 = @func_5763() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32]) */;
  %1247 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %1248 = cast(%var_8201, dtype="bool") /* ty=Tensor[(900), bool] */;
  %1249 = reshape(%1248, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), bool] */;
  %1250 = @func_4569(%1249) /* ty=(Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %1251 = @func_6494() /* ty=(int64,) */;
  %1252 = cast(%var_8180, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1253 = reshape(%1252, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %1254 = @func_5020(%1253) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %1255 = %1254.0;
  %1256 = cast(%1255, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %1257 = cast(meta[relay.Constant][85] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1258 = reshape(%1257, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %1259 = @func_994(%1258) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1260 = %1246.1;
  %1261 = %1247.1;
  %1262 = %1250.0;
  %1263 = %1251.0;
  %1264 = sin(%1256) /* ty=Tensor[(6, 4, 8), float32] */;
  %1265 = %1259.1;
  (%1260, %var_8180, %1261, %1262, %var_8201, %1263, %1264, %1265, meta[relay.Constant][85] /* ty=Tensor[(48), float32] */)
}

def @func_7659(%var_7604: Tensor[(15, 11, 4), uint64], %var_7605: Tensor[(15, 11, 4), uint64], %var_7611: Tensor[(10, 96), float32]) -> (Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) {
  %1266 = cast(%var_7605, dtype="bool") /* ty=Tensor[(15, 11, 4), bool] */;
  %1267 = shape_of(%var_7604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1268 = cast(%var_7604, dtype="bool") /* ty=Tensor[(15, 11, 4), bool] */;
  %1269 = dyn.reshape(%1266, %1267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1270 = cast(%var_7611, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %1271 = reshape(%1270, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %1272 = @func_903(%1271) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %1273 = @func_1859() /* ty=(int64,) */;
  %1274 = less_equal(%1268, %1269) /* ty=Tensor[(15, 11, 4), bool] */;
  %1275 = %1272.2;
  %1276 = %1273.0;
  (%1274, %1275, %var_7611, %1276)
}

def @func_759(%var_736: Tensor[(5, 4, 5), uint32]) -> (Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) {
  %1277 = cast(%var_736, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %1278 = shape_of(meta[relay.Constant][86] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1279 = cast(meta[relay.Constant][86] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %1280 = dyn.reshape(%1277, %1278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1281 = cast(meta[relay.Constant][86] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="int16") /* ty=Tensor[(5, 4, 5), int16] */;
  %1282 = shape_of(%var_736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1283 = cast(%var_736, dtype="int16") /* ty=Tensor[(5, 4, 5), int16] */;
  %1284 = dyn.reshape(%1281, %1282, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1285 = multiply(%1283, %1284) /* ty=Tensor[(5, 4, 5), int16] */;
  %1286 = cast(%1285, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
  %1287 = greater(%1279, %1280) /* ty=Tensor[(5, 4, 5), bool] */;
  %1288 = asinh(%1286) /* ty=Tensor[(5, 4, 5), float64] */;
  (%1287, %1288)
}

def @func_1984() -> (int64, Tensor[(14, 1, 10), float32]) {
  %1289 = @func_1603() /* ty=(int64,) */;
  %1290 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1291 = %1289.0;
  %1292 = %1290.0;
  (%1291, %1292)
}

def @func_10582(%var_10494: Tensor[(3, 11, 6), uint16]) -> (Tensor[(3, 11, 6), uint16], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %1293 = cast(%var_10494, dtype="uint16") /* ty=Tensor[(3, 11, 6), uint16] */;
  %1294 = shape_of(meta[relay.Constant][87] /* ty=Tensor[(3, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1295 = cast(meta[relay.Constant][87] /* ty=Tensor[(3, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(3, 11, 6), uint16] */;
  %1296 = dyn.reshape(%1293, %1294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1297 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
  %1298 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1299 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1300 = add(%1295, %1296) /* ty=Tensor[(3, 11, 6), uint16] */;
  %1301 = %1297.0;
  %1302 = %1298.0;
  %1303 = @func_6785() /* ty=Tensor[(14, 1, 10), float32] */;
  %1304 = %1299.0;
  (%1300, %1301, %1302, %1303, %1304)
}

def @func_1801() -> Tensor[(14, 1, 10), float32] {
  %1305 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %1305.4
}

def @func_6959(%var_6920: Tensor[(14, 13, 10), float32], %var_6926: Tensor[(48, 1), float32]) -> (Tensor[(3, 5, 9), int8], Tensor[(48, 1), float32], int64, Tensor[(14, 13, 10), float32]) {
  %1306 = cast(%var_6926, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %1307 = reshape(%1306, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %1308 = @func_4398(%1307) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %1309 = @func_1859() /* ty=(int64,) */;
  %1310 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %1311 = cast(%1310, dtype="int16") /* ty=Tensor[(14, 1, 10), int16] */;
  %1312 = cast(%var_6920, dtype="int16") /* ty=Tensor[(14, 13, 10), int16] */;
  %1313 = logical_xor(%1311, %1312) /* ty=Tensor[(14, 13, 10), int16] */;
  %1314 = cast(%1313, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %1315 = sinh(%1314) /* ty=Tensor[(14, 13, 10), float64] */;
  %1316 = cast(%1315, dtype="float32") /* ty=Tensor[(14, 13, 10), float32] */;
  %1317 = %1308.2;
  %1318 = %1309.0;
  %1319 = atanh(%1316) /* ty=Tensor[(14, 13, 10), float32] */;
  (%1317, %var_6926, %1318, %1319)
}

def @func_12090() -> (int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) {
  %1320 = @func_6494() /* ty=(int64,) */;
  %1321 = @func_4735() /* ty=(int64,) */;
  %1322 = %1320.0;
  %1323 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  %1324 = %1321.0;
  %1325 = @func_11132() /* ty=Tensor[(16, 11, 12), float64] */;
  (%1322, %1323, %1324, %1325)
}

def @func_12028() -> (int64,) {
  %1326 = @func_7990() /* ty=int64 */;
  (%1326,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4910() -> Tensor[(14, 1, 10), float32] {
  @func_3040() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7103(%var_7101: Tensor[(9, 100), int8], %var_7102: Tensor[(14, 9, 10), float32]) -> (Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) {
  %18 = fn (%var_7051: Tensor[(9, 100), int8], %var_7055: Tensor[(14, 9, 10), float32]) -> (Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) {
    %0 = @func_6624() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */;
    %1 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
    %2 = cast(%var_7051, dtype="int8") /* ty=Tensor[(9, 100), int8] */;
    %3 = reshape(%2, newshape=[900]) /* ty=Tensor[(900), int8] */;
    %4 = @func_3028(%3) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) */;
    %5 = %4.1;
    %6 = cast(%5, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
    %7 = cast(%var_7055, dtype="uint16") /* ty=Tensor[(14, 9, 10), uint16] */;
    %8 = bitwise_xor(%6, %7) /* ty=Tensor[(14, 9, 10), uint16] */;
    %9 = cast(%8, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
    %10 = sinh(%9) /* ty=Tensor[(14, 9, 10), float32] */;
    %11 = cast(%var_7055, dtype="uint8") /* ty=Tensor[(14, 9, 10), uint8] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="uint8") /* ty=Tensor[(14, 9, 10), uint8] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %15 = %0.1;
    %16 = %1.0;
    %17 = add(%13, %14) /* ty=Tensor[(14, 9, 10), uint8] */;
    (%15, %var_7051, %16, %17)
  };
  %18(%var_7101, %var_7102) /* ty=(Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) */
}

def @func_8619() -> (Tensor[(16), float64], int64) {
  @func_8617() /* ty=(Tensor[(16), float64], int64) */
}

def @func_10929() -> Tensor[(14, 1, 10), float32] {
  %19 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
  %19.0
}

def @func_13029(%var_12986: Tensor[(11, 1, 12), float32], %var_13008: Tensor[(16), float64]) -> (Tensor[(11, ?, 12), float32], Tensor[(16), float64], Tensor[(900), bool], Tensor[(16), float64], Tensor[(11, ?, 12), bool]) {
  %20 = cast(%var_12986, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %21 = acosh(%20) /* ty=Tensor[(11, 1, 12), float32] */;
  %22 = cast(%var_12986, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %27 = cast(%var_13008, dtype="float64") /* ty=Tensor[(16), float64] */;
  %28 = reshape(%26, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %29 = reshape(%27, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %30 = @func_10137(%28, %29) /* ty=(Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %31 = cast(%21, dtype="bool") /* ty=Tensor[(11, 1, 12), bool] */;
  %32 = shape_of(%var_12986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_12986, dtype="bool") /* ty=Tensor[(11, 1, 12), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = divide(%24, %25) /* ty=Tensor[(11, ?, 12), float32] */;
  %36 = %30.3;
  %37 = not_equal(%33, %34) /* ty=Tensor[(11, ?, 12), bool] */;
  (%35, %36, meta[relay.Constant][0] /* ty=Tensor[(900), bool] */, %var_13008, %37)
}

def @func_3613(%var_3611: Tensor[(135), int8], %var_3612: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) {
  %46 = fn (%var_3593: Tensor[(135), int8], %var_3606: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) {
    %38 = cast(%var_3593, dtype="int8") /* ty=Tensor[(135), int8] */;
    %39 = reshape(%38, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
    %40 = cast(%var_3606, dtype="int64") /* ty=int64 */;
    %41 = reshape(%40, newshape=[]) /* ty=int64 */;
    %42 = @func_24(%41) /* ty=(Tensor[(16, 11, 12), int64],) */;
    %43 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
    %44 = @func_607(%39) /* ty=Tensor[(3, 5, 9), int8] */;
    %45 = %42.0;
    (%43, %44, %var_3593, %45, %var_3606)
  };
  %46(%var_3611, %var_3612) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) */
}

def @func_7971() -> (Tensor[(16), float64],) {
  %47 = @func_4689() /* ty=Tensor[(16), float64] */;
  (%47,)
}

def @func_13625() -> (int64,) {
  %48 = @func_12229() /* ty=int64 */;
  (%48,)
}

def @func_3200(%var_3198: Tensor[(7, 1, 16), float32], %var_3199: Tensor[(7, 1, 16), float64]) -> (Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) {
  @func_3196(%var_3198, %var_3199) /* ty=(Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) */
}

def @func_12871(%var_12869: Tensor[(8, 12), int8], %var_12870: Tensor[(384), int8]) -> (int64, Tensor[(960), float32], Tensor[(8, 12), int8], Tensor[(384), int8], Tensor[(16), float64]) {
  @func_12867(%var_12869, %var_12870) /* ty=(int64, Tensor[(960), float32], Tensor[(8, 12), int8], Tensor[(384), int8], Tensor[(16), float64]) */
}

def @func_6388(%var_6387: Tensor[(2, 480), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) {
  %58 = fn (%var_6384: Tensor[(2, 480), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) {
    %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(280, 1), float64] */, dtype="float64") /* ty=Tensor[(280, 1), float64] */;
    %50 = reshape(%49, newshape=[1, 280]) /* ty=Tensor[(1, 280), float64] */;
    %51 = @func_4302(%50) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) */;
    %52 = cast(%var_6384, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
    %53 = reshape(%52, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
    %54 = @func_903(%53) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %55 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
    %56 = %51.3;
    %57 = %54.2;
    (%55, %56, meta[relay.Constant][1] /* ty=Tensor[(280, 1), float64] */, %57, %var_6384)
  };
  %58(%var_6387) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) */
}

def @func_13672() -> (int64, int64, Tensor[(660), uint64], Tensor[(1, 960), float32], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
  %72 = fn () -> (int64, int64, Tensor[(660), uint64], Tensor[(1, 960), float32], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
    %59 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
    %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
    %61 = cast(meta[relay.Constant][2] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
    %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 960), float32] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
    %63 = reshape(%60, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
    %64 = reshape(%61, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
    %65 = reshape(%62, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %66 = @func_7659(%63, %64, %65) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
    %67 = @func_6701() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) */;
    %68 = %59.1;
    %69 = %66.3;
    %70 = @func_13437() /* ty=Tensor[(15, 10, 6), int16] */;
    %71 = %67.0;
    (%68, %69, meta[relay.Constant][2] /* ty=Tensor[(660), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(1, 960), float32] */, %70, %71)
  };
  %72() /* ty=(int64, int64, Tensor[(660), uint64], Tensor[(1, 960), float32], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */
}

def @func_3405(%var_3403: Tensor[(6, 7, 10), float32], %var_3404: Tensor[(6, 7, 10), float32]) -> (Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) {
  %80 = fn (%var_3387: Tensor[(6, 7, 10), float32], %var_3388: Tensor[(6, 7, 10), float32]) -> (Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) {
    %73 = cast(%var_3388, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
    %74 = shape_of(%var_3387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_3387, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %77 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
    %78 = power(%75, %76) /* ty=Tensor[(6, 7, 10), float32] */;
    %79 = %77.1;
    (%78, %79)
  };
  %80(%var_3403, %var_3404) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */
}

def @func_5674() -> (Tensor[(14, 1, 10), float32], int64) {
  %81 = @func_3925() /* ty=(int64,) */;
  %82 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_5635() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
  %90 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
    %84 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
    %86 = reshape(%85, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %87 = @func_2243(%86) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
    %88 = %84.0;
    %89 = %87.0;
    (%88, %89, meta[relay.Constant][4] /* ty=Tensor[(48, 1), float32] */)
  };
  %90() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */
}

def @func_5311(%var_5294: int64, %var_5298: Tensor[(48), float32]) -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) {
  %91 = @func_3793() /* ty=(Tensor[(16), float64],) */;
  %92 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %93 = cast(%var_5294, dtype="int64") /* ty=int64 */;
  %94 = reshape(%93, newshape=[]) /* ty=int64 */;
  %95 = @func_24(%94) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %96 = cast(%var_5298, dtype="float32") /* ty=Tensor[(48), float32] */;
  %97 = reshape(%96, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %98 = @func_4398(%97) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %99 = %91.0;
  %100 = %92.0;
  %101 = %95.0;
  %102 = %98.1;
  %103 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  (%99, %100, %101, %var_5294, %102, %var_5298, %103)
}

def @func_1985() -> (int64, Tensor[(14, 1, 10), float32]) {
  %108 = fn () -> (int64, Tensor[(14, 1, 10), float32]) {
    %104 = @func_1603() /* ty=(int64,) */;
    %105 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %106 = %104.0;
    %107 = %105.0;
    (%106, %107)
  };
  %108() /* ty=(int64, Tensor[(14, 1, 10), float32]) */
}

def @main(%var_14232: Tensor[(420), float32], %var_14286: Tensor[(15, 468), float64]) -> (int64, Tensor[(6, 1, 8), float32], Tensor[(420), float32], Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(15, 468), float32]) {
  %109 = cast(%var_14232, dtype="float32") /* ty=Tensor[(420), float32] */;
  %110 = cast(%var_14232, dtype="float32") /* ty=Tensor[(420), float32] */;
  %111 = reshape(%109, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %112 = reshape(%110, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %113 = @func_3405(%111, %112) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
  %114 = @func_9037() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
  %115 = @func_10292() /* ty=int64 */;
  %116 = cast(%115, dtype="int8") /* ty=int8 */;
  %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %118 = reshape(%116, newshape=[]) /* ty=int8 */;
  %119 = reshape(%117, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %120 = @func_5753(%118, %119) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
  %121 = %120.0;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(468), float64] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %123 = cast(%121, dtype="int8") /* ty=Tensor[(15, 1), int8] */;
  %124 = bitwise_xor(%122, %123) /* ty=Tensor[(15, 468), int8] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(15, 468), float64] */;
  %126 = acosh(%125) /* ty=Tensor[(15, 468), float64] */;
  %127 = cast(%var_14286, dtype="float32") /* ty=Tensor[(15, 468), float32] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(2), int32] */;
  %129 = cast(%126, dtype="float32") /* ty=Tensor[(15, 468), float32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %131 = @func_10292() /* ty=int64 */;
  %132 = %113.1;
  %133 = @func_11132() /* ty=Tensor[(16, 11, 12), float64] */;
  %134 = %114.2;
  %135 = floor_mod(%129, %130) /* ty=Tensor[(15, 468), float32] */;
  (%131, %132, %var_14232, %133, %134, %135)
}

def @func_12183() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %136 = @func_7289() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %137 = %136.0;
  %138 = @func_11895() /* ty=Tensor[(14, 1, 10), float32] */;
  (%137, %138)
}

def @func_3534() -> (Tensor[(14, 1, 10), float32],) {
  %141 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %139 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %140 = %139.0;
    (%140,)
  };
  %141() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_13351() -> Tensor[(14, 1, 10), float64] {
  %143 = fn () -> Tensor[(14, 1, 10), float64] {
    %142 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
    %142.0
  };
  %143() /* ty=Tensor[(14, 1, 10), float64] */
}

def @func_1180() -> Tensor[(14, 1, 10), float32] {
  @func_1178() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_2283() -> Tensor[(14, 1, 10), float32] {
  %145 = fn () -> Tensor[(14, 1, 10), float32] {
    %144 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %144.0
  };
  %145() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_3672() -> (Tensor[(16), float64],) {
  @func_3670() /* ty=(Tensor[(16), float64],) */
}

def @func_8276() -> (Tensor[(14, 1, 10), float32],) {
  %146 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %147 = %146.0;
  (%147,)
}

def @func_11708(%var_11706: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 9, 10), float64], Tensor[(14, 12, 10), bool]) {
  @func_11705(%var_11706) /* ty=(Tensor[(14, 9, 10), float64], Tensor[(14, 12, 10), bool]) */
}

def @func_12983() -> (int64, int64) {
  %148 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %149 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %150 = %148.3;
  %151 = %149.1;
  (%150, %151)
}

def @func_1453(%var_1451: Tensor[(5, 15, 16), float64], %var_1452: Tensor[(5, 15, 16), float64]) -> Tensor[(5, 15, 16), float64] {
  @func_1449(%var_1451, %var_1452) /* ty=Tensor[(5, 15, 16), float64] */
}

def @func_6258(%var_6226: Tensor[(192), float32]) -> (Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) {
  %152 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %153 = cast(%var_6226, dtype="float32") /* ty=Tensor[(192), float32] */;
  %154 = reshape(%153, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %155 = @func_5020(%154) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %158 = %152.1;
  %159 = cosh(%157) /* ty=Tensor[(6, 4, 8), float32] */;
  (%158, %var_6226, %159)
}

def @func_8387(%var_8386: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
  %163 = fn (%var_8374: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
    %160 = cast(%var_8374, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
    %161 = asin(%160) /* ty=Tensor[(11, 4, 14), float64] */;
    %162 = cast(%161, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
    acosh(%162) /* ty=Tensor[(11, 4, 14), float64] */
  };
  %163(%var_8386) /* ty=Tensor[(11, 4, 14), float64] */
}

def @func_6201() -> (int64, int64, Tensor[(14, 1, 10), float32]) {
  %169 = fn () -> (int64, int64, Tensor[(14, 1, 10), float32]) {
    %164 = @func_1748() /* ty=(int64,) */;
    %165 = @func_1748() /* ty=(int64,) */;
    %166 = %164.0;
    %167 = %165.0;
    %168 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
    (%166, %167, %168)
  };
  %169() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */
}

def @func_610(%var_608: Tensor[(3, 5, 9), int8]) -> Tensor[(3, 5, 9), int8] {
  @func_607(%var_608) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_5523(%var_5521: Tensor[(2, 200), float32], %var_5522: Tensor[(468), float64]) -> (Tensor[(100), uint32], Tensor[(4, 12), float32], Tensor[(10, 4, 10), float32], Tensor[(2, 200), bool], int64, Tensor[(468), float64], int64) {
  %195 = fn (%var_5499: Tensor[(2, 200), float32], %var_5515: Tensor[(468), float64]) -> (Tensor[(100), uint32], Tensor[(4, 12), float32], Tensor[(10, 4, 10), float32], Tensor[(2, 200), bool], int64, Tensor[(468), float64], int64) {
    %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %171 = reshape(%170, newshape=[2, 24]) /* ty=Tensor[(2, 24), float32] */;
    %172 = @func_1486(%171) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
    %173 = cast(%var_5499, dtype="float32") /* ty=Tensor[(2, 200), float32] */;
    %174 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %175 = reshape(%173, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
    %176 = reshape(%174, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %177 = @func_4504(%175, %176) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
    %178 = @func_2777() /* ty=(int64,) */;
    %179 = %178.0;
    %180 = cast(%var_5499, dtype="bool") /* ty=Tensor[(2, 200), bool] */;
    %181 = cast(%179, dtype="bool") /* ty=bool */;
    %182 = cast(%var_5515, dtype="float64") /* ty=Tensor[(468), float64] */;
    %183 = cast(%179, dtype="int64") /* ty=int64 */;
    %184 = reshape(%182, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
    %185 = reshape(%183, newshape=[]) /* ty=int64 */;
    %186 = @func_4955(%184, %185) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) */;
    %187 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %188 = reshape(%187, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %189 = @func_2196(%188) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
    %190 = %172.4;
    %191 = %177.0;
    %192 = logical_or(%180, %181) /* ty=Tensor[(2, 200), bool] */;
    %193 = %186.3;
    %194 = %189.3;
    (%190, meta[relay.Constant][6] /* ty=Tensor[(4, 12), float32] */, %191, %192, %193, %var_5515, %194)
  };
  %195(%var_5521, %var_5522) /* ty=(Tensor[(100), uint32], Tensor[(4, 12), float32], Tensor[(10, 4, 10), float32], Tensor[(2, 200), bool], int64, Tensor[(468), float64], int64) */
}

def @func_11495() -> Tensor[(14, 1, 10), float32] {
  @func_11493() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_12748(%var_12746: Tensor[(12, 11, 9), int64], %var_12747: Tensor[(12, 11, 9), int64]) -> (Tensor[(12, 11, 9), float32], Tensor[(14, 1, 10), float64], Tensor[(15, 11, 4), bool], Tensor[(960), float32]) {
  @func_12744(%var_12746, %var_12747) /* ty=(Tensor[(12, 11, 9), float32], Tensor[(14, 1, 10), float64], Tensor[(15, 11, 4), bool], Tensor[(960), float32]) */
}

def @func_12332() -> Tensor[(14, 1, 10), float32] {
  @func_12330() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_12744(%var_12673: Tensor[(12, 11, 9), int64], %var_12674: Tensor[(12, 11, 9), int64]) -> (Tensor[(12, 11, 9), float32], Tensor[(14, 1, 10), float64], Tensor[(15, 11, 4), bool], Tensor[(960), float32]) {
  %196 = cast(%var_12674, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %197 = shape_of(%var_12673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_12673, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %200 = left_shift(%198, %199) /* ty=Tensor[(12, 11, 9), int64] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %202 = cast(meta[relay.Constant][7] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %203 = reshape(%202, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %204 = @func_9292(%203) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) */;
  %205 = sinh(%201) /* ty=Tensor[(12, 11, 9), float32] */;
  %206 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
  %207 = %204.1;
  (%205, %206, %207, meta[relay.Constant][7] /* ty=Tensor[(960), float32] */)
}

def @func_10229() -> Tensor[(14, 1, 10), float32] {
  @func_6785() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_9838() -> (Tensor[(45, 3), int8],) {
  %208 = @func_8682() /* ty=Tensor[(45, 3), int8] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %210 = rsqrt(%209) /* ty=Tensor[(45, 3), float64] */;
  %211 = cast(%210, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %212 = shape_of(%208, dtype="int32") /* ty=Tensor[(2), int32] */;
  %213 = cast(%208, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %215 = left_shift(%213, %214) /* ty=Tensor[(45, 3), int8] */;
  (%215,)
}

def @func_12794() -> int64 {
  @func_12792() /* ty=int64 */
}

def @func_3347(%var_3346: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) {
  %233 = fn (%var_3322: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) {
    %216 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %217 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
    %218 = reshape(%217, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %219 = @func_2351(%218) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
    %220 = %219.3;
    %221 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int32") /* ty=Tensor[(3, 5, 9), int32] */;
    %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
    %223 = cast(%220, dtype="int32") /* ty=Tensor[(3, 5, 9), int32] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %225 = cast(%var_3322, dtype="float32") /* ty=Tensor[(48), float32] */;
    %226 = reshape(%225, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %227 = @func_994(%226) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %228 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %229 = %216.0;
    %230 = multiply(%223, %224) /* ty=Tensor[(3, 5, 9), int32] */;
    %231 = %227.2;
    %232 = %228.1;
    (%229, meta[relay.Constant][8] /* ty=Tensor[(10, 96), float32] */, %230, %231, %var_3322, %232)
  };
  %233(%var_3346) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) */
}

def @func_5469() -> int64 {
  @func_5467() /* ty=int64 */
}

def @func_1188() -> (Tensor[(14, 1, 10), float32],) {
  %236 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %234 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %235 = %234.0;
    (%235,)
  };
  %236() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_8251(%var_8249: Tensor[(192), float32], %var_8250: Tensor[(900), bool]) -> (Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) {
  @func_8247(%var_8249, %var_8250) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) */
}

def @func_6303(%var_6291: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), bool], Tensor[(14, 1, 10), float32]) {
  %237 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %240 = cast(%var_6291, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %241 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %242 = logical_and(%239, %240) /* ty=Tensor[(14, 16, 10), bool] */;
  %243 = %241.0;
  (%242, %243)
}

def @func_2146() -> (Tensor[(14, 1, 10), float32],) {
  %248 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %244 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
    %245 = %244.0;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
    %247 = atanh(%246) /* ty=Tensor[(14, 1, 10), float32] */;
    (%247,)
  };
  %248() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_3125(%var_3124: Tensor[(8, 2), float64]) -> (Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
  %275 = fn (%var_3061: Tensor[(8, 2), float64]) -> (Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
    %249 = @func_2777() /* ty=(int64,) */;
    %250 = %249.0;
    %251 = cast(%var_3061, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
    %252 = cast(%250, dtype="int64") /* ty=int64 */;
    %253 = reshape(%251, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %254 = reshape(%252, newshape=[]) /* ty=int64 */;
    %255 = @func_1429(%253, %254) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) */;
    %256 = %255.1;
    %257 = cast(%250, dtype="bool") /* ty=bool */;
    %258 = cast(%256, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
    %259 = cast(meta[relay.Constant][10] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %260 = cast(%250, dtype="int64") /* ty=int64 */;
    %261 = reshape(%259, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %262 = reshape(%260, newshape=[]) /* ty=int64 */;
    %263 = @func_847(%261, %262) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
    %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(546), int8] */, dtype="int8") /* ty=Tensor[(546), int8] */;
    %265 = reshape(%264, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
    %266 = @func_341(%265) /* ty=(Tensor[(7, 13, 6), int8],) */;
    %267 = cast(meta[relay.Constant][12] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
    %268 = reshape(%267, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
    %269 = @func_759(%268) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
    %270 = logical_and(%257, %258) /* ty=Tensor[(14, 1, 10), bool] */;
    %271 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
    %272 = %263.2;
    %273 = %266.0;
    %274 = %269.0;
    (%var_3061, %270, %271, %272, meta[relay.Constant][10] /* ty=Tensor[(468), float64] */, %273, meta[relay.Constant][11] /* ty=Tensor[(546), int8] */, %274, meta[relay.Constant][12] /* ty=Tensor[(100), uint32] */)
  };
  %275(%var_3124) /* ty=(Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */
}

def @func_6703() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) {
  @func_6701() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) */
}

def @func_8684() -> Tensor[(45, 3), int8] {
  @func_8682() /* ty=Tensor[(45, 3), int8] */
}

def @func_6123() -> (Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) {
  %276 = cast(meta[relay.Constant][13] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
  %277 = reshape(%276, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
  %278 = @func_759(%277) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
  %279 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  %280 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %282 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%279, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = %278.0;
  %286 = floor_divide(%283, %284) /* ty=Tensor[(14, ?, 10), float32] */;
  %287 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%285, meta[relay.Constant][13] /* ty=Tensor[(100), uint32] */, %286, %287)
}

def @func_4125() -> Tensor[(14, 1, 10), float32] {
  @func_2282() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7992() -> int64 {
  @func_7990() /* ty=int64 */
}

def @func_8548(%var_8547: int64) -> (Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], Tensor[(16), float64], int64, int64, Tensor[(14, 1, 10), float64]) {
  %304 = fn (%var_8524: int64) -> (Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], Tensor[(16), float64], int64, int64, Tensor[(14, 1, 10), float64]) {
    %288 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
    %289 = %288.0;
    %290 = cast(%289, dtype="float64") /* ty=Tensor[(16, 11, 12), float64] */;
    %291 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %293 = cast(%var_8524, dtype="int64") /* ty=int64 */;
    %294 = reshape(%292, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %295 = reshape(%293, newshape=[]) /* ty=int64 */;
    %296 = @func_386(%294, %295) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
    %297 = @func_1859() /* ty=(int64,) */;
    %298 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
    %299 = log10(%290) /* ty=Tensor[(16, 11, 12), float64] */;
    %300 = %291.0;
    %301 = %296.1;
    %302 = %297.0;
    %303 = %298.0;
    (%299, %300, %301, meta[relay.Constant][14] /* ty=Tensor[(16), float64] */, %var_8524, %302, %303)
  };
  %304(%var_8547) /* ty=(Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], Tensor[(16), float64], int64, int64, Tensor[(14, 1, 10), float64]) */
}

def @func_10058() -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) {
  %305 = @func_7971() /* ty=(Tensor[(16), float64],) */;
  %306 = @func_7289() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %307 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %308 = %305.0;
  %309 = %306.0;
  %310 = %307.0;
  (%308, %309, %310)
}

def @func_4571(%var_4570: Tensor[(15, 10, 6), bool]) -> (Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %320 = fn (%var_4532: Tensor[(15, 10, 6), bool]) -> (Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
    %311 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
    %312 = %311.2;
    %313 = cast(%var_4532, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%312, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %317 = logical_or(%315, %316) /* ty=Tensor[(15, 10, 6), bool] */;
    %318 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
    %319 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
    (%317, %318, %319)
  };
  %320(%var_4570) /* ty=(Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_13437() -> Tensor[(15, 10, 6), int16] {
  %321 = @func_9642() /* ty=(Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */;
  %321.1
}

def @func_4691() -> Tensor[(16), float64] {
  @func_4689() /* ty=Tensor[(16), float64] */
}

def @func_2503(%var_2500: Tensor[(6, 16, 1), int8], %var_2501: Tensor[(6, 16, 4), int8], %var_2502: Tensor[(6, 16, 4), int8]) -> (Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) {
  @func_2498(%var_2500, %var_2501, %var_2502) /* ty=(Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) */
}

def @func_6963(%var_6961: Tensor[(14, 13, 10), float32], %var_6962: Tensor[(48, 1), float32]) -> (Tensor[(3, 5, 9), int8], Tensor[(48, 1), float32], int64, Tensor[(14, 13, 10), float32]) {
  @func_6959(%var_6961, %var_6962) /* ty=(Tensor[(3, 5, 9), int8], Tensor[(48, 1), float32], int64, Tensor[(14, 13, 10), float32]) */
}

def @func_4398(%var_4389: Tensor[(24, 2), float32]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) {
  %322 = @func_1603() /* ty=(int64,) */;
  %323 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %324 = cast(%var_4389, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %325 = reshape(%324, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %326 = @func_994(%325) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %327 = @func_1859() /* ty=(int64,) */;
  %328 = %322.0;
  %329 = %323.0;
  %330 = %326.1;
  %331 = %327.0;
  (%328, %329, %330, %var_4389, %331)
}

def @func_7540() -> (Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
  %332 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %333 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %334 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %336 = reshape(%335, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %337 = @func_2243(%336) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %338 = %332.0;
  %339 = %333.0;
  %340 = %334.1;
  %341 = %337.0;
  (%338, %339, %340, %341, meta[relay.Constant][15] /* ty=Tensor[(48, 1), float32] */)
}

def @func_3794() -> (Tensor[(16), float64],) {
  %344 = fn () -> (Tensor[(16), float64],) {
    %342 = @func_3670() /* ty=(Tensor[(16), float64],) */;
    %343 = %342.0;
    (%343,)
  };
  %344() /* ty=(Tensor[(16), float64],) */
}

def @func_4252(%var_4250: Tensor[(14, 3, 10), float32]) -> (Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  @func_4249(%var_4250) /* ty=(Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */
}

def @func_9037() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) {
  %352 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) {
    %345 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %346 = reshape(%345, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %347 = @func_2243(%346) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
    %348 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
    %349 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
    %350 = %347.2;
    %351 = %348.0;
    (%349, %350, meta[relay.Constant][16] /* ty=Tensor[(48), float32] */, %351)
  };
  %352() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */
}

def @func_5927(%var_5925: uint16, %var_5926: Tensor[(7, 6, 1), uint16]) -> (Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) {
  %362 = fn (%var_5911: uint16, %var_5912: Tensor[(7, 6, 1), uint16]) -> (Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) {
    %353 = cast(%var_5911, dtype="uint16") /* ty=uint16 */;
    %354 = cast(%var_5912, dtype="uint16") /* ty=Tensor[(7, 6, 1), uint16] */;
    %355 = cast(%var_5911, dtype="int64") /* ty=int64 */;
    %356 = cast(meta[relay.Constant][17] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %357 = reshape(%355, newshape=[]) /* ty=int64 */;
    %358 = reshape(%356, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %359 = @func_5311(%357, %358) /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) */;
    %360 = maximum(%353, %354) /* ty=Tensor[(7, 6, 1), uint16] */;
    %361 = %359.2;
    (%360, %361, meta[relay.Constant][17] /* ty=Tensor[(48), float32] */)
  };
  %362(%var_5925, %var_5926) /* ty=(Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) */
}

def @func_11328() -> (Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) {
  %363 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %365 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 9, 10), float32] */, dtype="float64") /* ty=Tensor[(14, 9, 10), float64] */;
  %366 = cast(meta[relay.Constant][19] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %367 = reshape(%366, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %368 = @func_2351(%367) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
  %369 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %370 = acosh(%369) /* ty=Tensor[(14, 9, 10), float32] */;
  %371 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 9, 10), float32] */, dtype="uint32") /* ty=Tensor[(14, 9, 10), uint32] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="uint32") /* ty=Tensor[(14, 9, 10), uint32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %375 = divide(%364, %365) /* ty=Tensor[(14, 9, 10), float64] */;
  %376 = %368.3;
  %377 = logical_xor(%373, %374) /* ty=Tensor[(14, 9, 10), uint32] */;
  (%375, %376, meta[relay.Constant][19] /* ty=Tensor[(960), float32] */, %377)
}

def @func_11133() -> Tensor[(16, 11, 12), float64] {
  %379 = fn () -> Tensor[(16, 11, 12), float64] {
    %378 = @func_9642() /* ty=(Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */;
    %378.0
  };
  %379() /* ty=Tensor[(16, 11, 12), float64] */
}

def @func_1675() -> (int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) {
  %390 = fn () -> (int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) {
    %380 = @func_1603() /* ty=(int64,) */;
    %381 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %382 = cast(meta[relay.Constant][20] /* ty=Tensor[(900), int8] */, dtype="int8") /* ty=Tensor[(900), int8] */;
    %383 = reshape(%382, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
    %384 = @func_522(%383) /* ty=(Tensor[(15, 10, 6), bool],) */;
    %385 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %386 = %380.0;
    %387 = %381.1;
    %388 = %384.0;
    %389 = %385.0;
    (%386, %387, %388, meta[relay.Constant][20] /* ty=Tensor[(900), int8] */, %389)
  };
  %390() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */
}

def @func_13237(%var_13235: Tensor[(1260), float32], %var_13236: Tensor[(18, 50), int8]) -> (int64, int64, Tensor[(1260), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(18, 50), float32]) {
  @func_13233(%var_13235, %var_13236) /* ty=(int64, int64, Tensor[(1260), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(18, 50), float32]) */
}

def @func_6701() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), bool]) {
  %391 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %392 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %393 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %394 = %391.0;
  %395 = %392.0;
  %396 = %393.1;
  (%394, %395, %396)
}

def @func_5467() -> int64 {
  %397 = @func_1603() /* ty=(int64,) */;
  %397.0
}

def @func_4151() -> (Tensor[(14, 1, 10), float32],) {
  %398 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%398,)
}

def @func_6959(%var_6920: Tensor[(14, 13, 10), float32], %var_6926: Tensor[(48, 1), float32]) -> (Tensor[(3, 5, 9), int8], Tensor[(48, 1), float32], int64, Tensor[(14, 13, 10), float32]) {
  %399 = cast(%var_6926, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %400 = reshape(%399, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %401 = @func_4398(%400) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %402 = @func_1859() /* ty=(int64,) */;
  %403 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %404 = cast(%403, dtype="int16") /* ty=Tensor[(14, 1, 10), int16] */;
  %405 = cast(%var_6920, dtype="int16") /* ty=Tensor[(14, 13, 10), int16] */;
  %406 = logical_xor(%404, %405) /* ty=Tensor[(14, 13, 10), int16] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %408 = sinh(%407) /* ty=Tensor[(14, 13, 10), float64] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(14, 13, 10), float32] */;
  %410 = %401.2;
  %411 = %402.0;
  %412 = atanh(%409) /* ty=Tensor[(14, 13, 10), float32] */;
  (%410, %var_6926, %411, %412)
}

def @func_5023(%var_5021: Tensor[(6, 4, 8), float32]) -> (Tensor[(6, 4, 8), float32],) {
  @func_5020(%var_5021) /* ty=(Tensor[(6, 4, 8), float32],) */
}

def @func_10450(%var_10449: Tensor[(1, 15, 10), int64]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 15, 10), bool]) {
  %419 = fn (%var_10440: Tensor[(1, 15, 10), int64]) -> (Tensor[(14, 1, 10), float32], Tensor[(1, 15, 10), bool]) {
    %413 = @func_4735() /* ty=(int64,) */;
    %414 = %413.0;
    %415 = cast(%414, dtype="bool") /* ty=bool */;
    %416 = cast(%var_10440, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
    %417 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
    %418 = less_equal(%415, %416) /* ty=Tensor[(1, 15, 10), bool] */;
    (%417, %418)
  };
  %419(%var_10449) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(1, 15, 10), bool]) */
}

def @func_11330() -> (Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) {
  @func_11328() /* ty=(Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) */
}

def @func_10060() -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) {
  @func_10058() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) */
}

def @func_11397(%var_11365: Tensor[(280), float64]) -> (Tensor[(14, 1, 10), float64], int64, Tensor[(280), float64], Tensor[(14, 1, 10), float32], int64) {
  %420 = cast(%var_11365, dtype="float64") /* ty=Tensor[(280), float64] */;
  %421 = reshape(%420, newshape=[1, 280]) /* ty=Tensor[(1, 280), float64] */;
  %422 = @func_4302(%421) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) */;
  %423 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
  %424 = %422.1;
  %425 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %426 = @func_8017() /* ty=int64 */;
  (%423, %424, %var_11365, %425, %426)
}

def @func_994(%var_973: Tensor[(6, 1, 8), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %427 = cast(%var_973, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %428 = cast(meta[relay.Constant][21] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %429 = reshape(%428, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %430 = log(%427) /* ty=Tensor[(6, 1, 8), float32] */;
  %431 = @func_607(%429) /* ty=Tensor[(3, 5, 9), int8] */;
  (%430, %431, meta[relay.Constant][21] /* ty=Tensor[(135), int8] */)
}

def @func_344(%var_342: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), int8],) {
  @func_341(%var_342) /* ty=(Tensor[(7, 13, 6), int8],) */
}

def @func_2402() -> (Tensor[(14, 1, 10), float32], int64) {
  %436 = fn () -> (Tensor[(14, 1, 10), float32], int64) {
    %432 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %433 = @func_1603() /* ty=(int64,) */;
    %434 = %432.0;
    %435 = %433.0;
    (%434, %435)
  };
  %436() /* ty=(Tensor[(14, 1, 10), float32], int64) */
}

def @func_6786() -> Tensor[(14, 1, 10), float32] {
  %438 = fn () -> Tensor[(14, 1, 10), float32] {
    %437 = @func_5674() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
    %437.0
  };
  %438() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_10783(%var_10781: Tensor[(420), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32], int64, Tensor[(660), uint64], Tensor[(480, 2), float32], Tensor[(3, 5, 9), int8], Tensor[(420), float32]) {
  @func_10780(%var_10781) /* ty=(Tensor[(14, 1, 10), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32], int64, Tensor[(660), uint64], Tensor[(480, 2), float32], Tensor[(3, 5, 9), int8], Tensor[(420), float32]) */
}

def @func_1178() -> Tensor[(14, 1, 10), float32] {
  %439 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %439.0
}

def @func_8737() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %452 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
    %440 = @func_7540() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
    %441 = cast(meta[relay.Constant][22] /* ty=Tensor[(900), int8] */, dtype="int8") /* ty=Tensor[(900), int8] */;
    %442 = reshape(%441, newshape=[900]) /* ty=Tensor[(900), int8] */;
    %443 = @func_2956(%442) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) */;
    %444 = @func_8617() /* ty=(Tensor[(16), float64], int64) */;
    %445 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %446 = @func_4837() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %447 = %440.1;
    %448 = %443.1;
    %449 = %444.0;
    %450 = %445.0;
    %451 = %446.0;
    (%447, %448, meta[relay.Constant][22] /* ty=Tensor[(900), int8] */, %449, %450, %451)
  };
  %452() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_24(%var_0: int64) -> (Tensor[(16, 11, 12), int64],) {
  %453 = cast(%var_0, dtype="int64") /* ty=int64 */;
  %454 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(16, 11, 12), int64] */;
  %455 = maximum(%453, %454) /* ty=Tensor[(16, 11, 12), int64] */;
  (%455,)
}

def @func_2959(%var_2957: Tensor[(900), int8]) -> (Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) {
  @func_2956(%var_2957) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) */
}

def @func_9137() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], uint16, Tensor[(42), uint16], int64) {
  @func_9135() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], uint16, Tensor[(42), uint16], int64) */
}

def @func_10698(%var_10697: Tensor[(1, 11, 9), bool]) -> (Tensor[(?, 11, 9), int32], int64) {
  %467 = fn (%var_10612: Tensor[(1, 11, 9), bool]) -> (Tensor[(?, 11, 9), int32], int64) {
    %456 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 11, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
    %457 = shape_of(%var_10612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_10612, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %460 = logical_and(%458, %459) /* ty=Tensor[(?, 11, 9), bool] */;
    %461 = cast(%var_10612, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="int32") /* ty=Tensor[(?, 11, 9), int32] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %465 = multiply(%463, %464) /* ty=Tensor[(?, 11, 9), int32] */;
    %466 = @func_2737() /* ty=int64 */;
    (%465, %466)
  };
  %467(%var_10697) /* ty=(Tensor[(?, 11, 9), int32], int64) */
}

def @func_12091() -> (int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) {
  %474 = fn () -> (int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) {
    %468 = @func_6494() /* ty=(int64,) */;
    %469 = @func_4735() /* ty=(int64,) */;
    %470 = %468.0;
    %471 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
    %472 = %469.0;
    %473 = @func_11132() /* ty=Tensor[(16, 11, 12), float64] */;
    (%470, %471, %472, %473)
  };
  %474() /* ty=(int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) */
}

def @func_10074() -> int64 {
  @func_10072() /* ty=int64 */
}

def @func_13389() -> Tensor[(14, 1, 10), float32] {
  %476 = fn () -> Tensor[(14, 1, 10), float32] {
    %475 = @func_11660() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %475.0
  };
  %476() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_11705(%var_11683: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 9, 10), float64], Tensor[(14, 12, 10), bool]) {
  %477 = @func_11328() /* ty=(Tensor[(14, 9, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(960), float32], Tensor[(14, 9, 10), uint32]) */;
  %478 = @func_9477() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %481 = cast(%var_11683, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %482 = %477.0;
  %483 = less_equal(%480, %481) /* ty=Tensor[(14, 12, 10), bool] */;
  (%482, %483)
}

def @func_11444() -> Tensor[(14, 1, 10), float32] {
  %484 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_6785() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %484() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_13627() -> (int64,) {
  @func_13625() /* ty=(int64,) */
}

def @func_5392() -> (Tensor[(14, 1, 10), float32],) {
  %485 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  (%485,)
}

def @func_341(%var_324: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), int8],) {
  %486 = cast(%var_324, dtype="int8") /* ty=Tensor[(7, 13, 6), int8] */;
  %487 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int8") /* ty=Tensor[(7, 13, 6), int8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %490 = logical_xor(%488, %489) /* ty=Tensor[(7, 13, 6), int8] */;
  (%490,)
}

def @func_9909(%var_9907: Tensor[(400), float32], %var_9908: Tensor[(24, 2), float32]) -> (Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(400), float32], Tensor[(24, 2), float32]) {
  %499 = fn (%var_9899: Tensor[(400), float32], %var_9900: Tensor[(24, 2), float32]) -> (Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(400), float32], Tensor[(24, 2), float32]) {
    %491 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
    %492 = cast(%var_9899, dtype="float32") /* ty=Tensor[(400), float32] */;
    %493 = cast(%var_9900, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
    %494 = reshape(%492, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
    %495 = reshape(%493, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %496 = @func_4504(%494, %495) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
    %497 = %491.0;
    %498 = %496.2;
    (%497, %498, %var_9899, %var_9900)
  };
  %499(%var_9907, %var_9908) /* ty=(Tensor[(16, 11, 12), float64], Tensor[(48), float32], Tensor[(400), float32], Tensor[(24, 2), float32]) */
}

def @func_4304(%var_4303: Tensor[(1, 280), float64]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) {
  %509 = fn (%var_4300: Tensor[(1, 280), float64]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) {
    %500 = @func_1748() /* ty=(int64,) */;
    %501 = %500.0;
    %502 = cast(%501, dtype="float64") /* ty=float64 */;
    %503 = cast(%var_4300, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
    %504 = reshape(%502, newshape=[]) /* ty=float64 */;
    %505 = reshape(%503, newshape=[2, 10, 14]) /* ty=Tensor[(2, 10, 14), float64] */;
    %506 = @func_3721(%504, %505) /* ty=(Tensor[(2, 10, 14), float64],) */;
    %507 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
    %508 = %506.0;
    (%507, %501, %508, %var_4300)
  };
  %509(%var_4303) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(2, 10, 14), float64], Tensor[(1, 280), float64]) */
}

def @func_7563() -> (Tensor[(14, 1, 10), float32],) {
  %510 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  (%510,)
}

def @func_8017() -> int64 {
  %511 = @func_4319() /* ty=(int64,) */;
  %511.0
}

def @func_5753(%var_5751: int8, %var_5752: Tensor[(468), float64]) -> (Tensor[(15, 1), bool], int64, Tensor[(468), float64]) {
  @func_5749(%var_5751, %var_5752) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */
}

def @func_5441() -> Tensor[(14, 15, 10), int8] {
  %512 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %513 = cast(%512, dtype="int8") /* ty=Tensor[(14, 1, 10), int8] */;
  %514 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 15, 10), float32] */, dtype="int8") /* ty=Tensor[(14, 15, 10), int8] */;
  logical_xor(%513, %514) /* ty=Tensor[(14, 15, 10), int8] */
}

def @func_3042() -> Tensor[(14, 1, 10), float32] {
  @func_3040() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7961() -> (int64, int64) {
  @func_7959() /* ty=(int64, int64) */
}

def @func_10338(%var_10337: uint16) -> (Tensor[(13, 1, 9), uint16], Tensor[(6, 1, 8), float32], Tensor[(420), float32]) {
  %524 = fn (%var_10323: uint16) -> (Tensor[(13, 1, 9), uint16], Tensor[(6, 1, 8), float32], Tensor[(420), float32]) {
    %515 = cast(%var_10323, dtype="uint16") /* ty=uint16 */;
    %516 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 1, 9), uint16] */, dtype="uint16") /* ty=Tensor[(13, 1, 9), uint16] */;
    %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %518 = cast(meta[relay.Constant][28] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %519 = reshape(%517, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
    %520 = reshape(%518, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
    %521 = @func_3402(%519, %520) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
    %522 = subtract(%515, %516) /* ty=Tensor[(13, 1, 9), uint16] */;
    %523 = %521.1;
    (%522, %523, meta[relay.Constant][28] /* ty=Tensor[(420), float32] */)
  };
  %524(%var_10337) /* ty=(Tensor[(13, 1, 9), uint16], Tensor[(6, 1, 8), float32], Tensor[(420), float32]) */
}

def @func_4736() -> (int64,) {
  %526 = fn () -> (int64,) {
    %525 = @func_2737() /* ty=int64 */;
    (%525,)
  };
  %526() /* ty=(int64,) */
}

def @func_5412() -> int64 {
  %528 = fn () -> int64 {
    %527 = @func_4319() /* ty=(int64,) */;
    %527.0
  };
  %528() /* ty=int64 */
}

def @func_5749(%var_5718: int8, %var_5738: Tensor[(468), float64]) -> (Tensor[(15, 1), bool], int64, Tensor[(468), float64]) {
  %529 = cast(%var_5718, dtype="bool") /* ty=bool */;
  %530 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 1), int8] */, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %531 = cast(%var_5738, dtype="float64") /* ty=Tensor[(468), float64] */;
  %532 = cast(%var_5718, dtype="int64") /* ty=int64 */;
  %533 = reshape(%531, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %534 = reshape(%532, newshape=[]) /* ty=int64 */;
  %535 = @func_4955(%533, %534) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) */;
  %536 = less_equal(%529, %530) /* ty=Tensor[(15, 1), bool] */;
  %537 = %535.3;
  (%536, %537, %var_5738)
}

def @func_9555(%var_9553: Tensor[(14, 12, 10), float32]) -> (Tensor[(14, 12, 10), int64], Tensor[(100), uint32]) {
  @func_9552(%var_9553) /* ty=(Tensor[(14, 12, 10), int64], Tensor[(100), uint32]) */
}

def @func_9049() -> (int64,) {
  %540 = fn () -> (int64,) {
    %538 = @func_4319() /* ty=(int64,) */;
    %539 = %538.0;
    (%539,)
  };
  %540() /* ty=(int64,) */
}

def @func_11400(%var_11398: Tensor[(280), float64]) -> (Tensor[(14, 1, 10), float64], int64, Tensor[(280), float64], Tensor[(14, 1, 10), float32], int64) {
  @func_11397(%var_11398) /* ty=(Tensor[(14, 1, 10), float64], int64, Tensor[(280), float64], Tensor[(14, 1, 10), float32], int64) */
}

def @func_6353() -> (int64, int64, Tensor[(1, 16), float64], int64) {
  %549 = fn () -> (int64, int64, Tensor[(1, 16), float64], int64) {
    %541 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
    %542 = @func_5411() /* ty=int64 */;
    %543 = cast(%542, dtype="int64") /* ty=int64 */;
    %544 = reshape(%541, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %545 = reshape(%543, newshape=[]) /* ty=int64 */;
    %546 = @func_386(%544, %545) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
    %547 = %546.2;
    %548 = @func_5951() /* ty=int64 */;
    (%542, %547, meta[relay.Constant][30] /* ty=Tensor[(1, 16), float64] */, %548)
  };
  %549() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */
}

def @func_10369() -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) {
  %555 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) {
    %550 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %551 = reshape(%550, newshape=[]) /* ty=int64 */;
    %552 = @func_24(%551) /* ty=(Tensor[(16, 11, 12), int64],) */;
    %553 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
    %554 = %552.0;
    (%553, %554, -10 /* ty=int64 */)
  };
  %555() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */
}

def @func_13233(%var_13186: Tensor[(1260), float32], %var_13198: Tensor[(18, 50), int8]) -> (int64, int64, Tensor[(1260), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(18, 50), float32]) {
  %556 = cast(meta[relay.Constant][31] /* ty=Tensor[(18, 50), int8] */, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %557 = cast(%var_13186, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %558 = reshape(%556, newshape=[9, 100]) /* ty=Tensor[(9, 100), int8] */;
  %559 = reshape(%557, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
  %560 = @func_7100(%558, %559) /* ty=(Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) */;
  %561 = cast(meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %562 = reshape(%561, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %563 = @func_6258(%562) /* ty=(Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) */;
  %564 = cast(%var_13198, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %565 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(18, 50), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %566 = cast(meta[relay.Constant][31] /* ty=Tensor[(18, 50), int8] */, dtype="int8") /* ty=Tensor[(18, 50), int8] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %568 = bitwise_xor(%566, %567) /* ty=Tensor[(18, 50), int8] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
  %570 = cos(%569) /* ty=Tensor[(18, 50), float64] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(18, 50), float32] */;
  %572 = @func_7990() /* ty=int64 */;
  %573 = %560.2;
  %574 = %563.1;
  %575 = tan(%571) /* ty=Tensor[(18, 50), float32] */;
  (%572, %573, %var_13186, %574, meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, %575)
}

def @func_6774() -> (Tensor[(48, 1), float64], Tensor[(48), float32], int64, int64, Tensor[(2, 24), float32]) {
  %576 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %577 = %576.2;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %579 = cast(%577, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %580 = reshape(%579, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %581 = @func_2243(%580) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %582 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %583 = %581.2;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(48), float32] */;
  %585 = reshape(%582, newshape=[]) /* ty=int64 */;
  %586 = reshape(%584, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %587 = @func_5311(%585, %586) /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) */;
  %588 = cast(%577, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %589 = reshape(%588, newshape=[2, 24]) /* ty=Tensor[(2, 24), float32] */;
  %590 = @func_1486(%589) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %591 = asin(%578) /* ty=Tensor[(48, 1), float64] */;
  %592 = %587.3;
  %593 = %590.2;
  (%591, %583, %592, 5 /* ty=int64 */, %593)
}

def @func_11860(%var_11859: Tensor[(468), float64]) -> (Tensor[(2, 16, 12), float64], int64, int8, Tensor[(468), float64]) {
  %602 = fn (%var_11844: Tensor[(468), float64]) -> (Tensor[(2, 16, 12), float64], int64, int8, Tensor[(468), float64]) {
    %594 = @func_11795() /* ty=(Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) */;
    %595 = cast(meta[relay.Constant][33] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %596 = cast(%var_11844, dtype="float64") /* ty=Tensor[(468), float64] */;
    %597 = reshape(%595, newshape=[]) /* ty=int8 */;
    %598 = reshape(%596, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %599 = @func_5749(%597, %598) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
    %600 = %594.1;
    %601 = %599.1;
    (%600, %601, meta[relay.Constant][33] /* ty=int8 */, %var_11844)
  };
  %602(%var_11859) /* ty=(Tensor[(2, 16, 12), float64], int64, int8, Tensor[(468), float64]) */
}

def @func_7664(%var_7661: Tensor[(15, 11, 4), uint64], %var_7662: Tensor[(15, 11, 4), uint64], %var_7663: Tensor[(10, 96), float32]) -> (Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) {
  @func_7659(%var_7661, %var_7662, %var_7663) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */
}

def @func_11662() -> (Tensor[(14, 1, 10), float32],) {
  @func_11660() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_8247(%var_8180: Tensor[(192), float32], %var_8201: Tensor[(900), bool]) -> (Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) {
  %603 = @func_5763() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32]) */;
  %604 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %605 = cast(%var_8201, dtype="bool") /* ty=Tensor[(900), bool] */;
  %606 = reshape(%605, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), bool] */;
  %607 = @func_4569(%606) /* ty=(Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %608 = @func_6494() /* ty=(int64,) */;
  %609 = cast(%var_8180, dtype="float32") /* ty=Tensor[(192), float32] */;
  %610 = reshape(%609, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %611 = @func_5020(%610) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %614 = cast(meta[relay.Constant][34] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %615 = reshape(%614, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %616 = @func_994(%615) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %617 = %603.1;
  %618 = %604.1;
  %619 = %607.0;
  %620 = %608.0;
  %621 = sin(%613) /* ty=Tensor[(6, 4, 8), float32] */;
  %622 = %616.1;
  (%617, %var_8180, %618, %619, %var_8201, %620, %621, %622, meta[relay.Constant][34] /* ty=Tensor[(48), float32] */)
}

def @func_12590() -> (int64, int64, Tensor[(6, 7, 10), float32], Tensor[(420), float32]) {
  %623 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
  %624 = cast(meta[relay.Constant][35] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %625 = cast(meta[relay.Constant][35] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %626 = reshape(%624, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %627 = reshape(%625, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float32] */;
  %628 = @func_3402(%626, %627) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(6, 1, 8), float32]) */;
  %629 = %623.0;
  %630 = @func_12229() /* ty=int64 */;
  %631 = %628.0;
  (%629, %630, %631, meta[relay.Constant][35] /* ty=Tensor[(420), float32] */)
}

def @func_11493() -> Tensor[(14, 1, 10), float32] {
  %632 = @func_10058() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16), float64]) */;
  %632.1
}

def @func_1449(%var_1443: Tensor[(5, 15, 16), float64], %var_1444: Tensor[(5, 15, 16), float64]) -> Tensor[(5, 15, 16), float64] {
  %633 = cast(%var_1444, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %634 = shape_of(%var_1443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_1443, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%635, %636) /* ty=Tensor[(5, 15, 16), float64] */
}

def @func_10137(%var_10097: Tensor[(900), bool], %var_10098: Tensor[(16), float64]) -> (Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %638 = cast(%var_10097, dtype="bool") /* ty=Tensor[(900), bool] */;
  %639 = cast(%var_10098, dtype="float64") /* ty=Tensor[(16), float64] */;
  %640 = reshape(%638, newshape=[900, 1]) /* ty=Tensor[(900, 1), bool] */;
  %641 = reshape(%639, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %642 = @func_9105(%640, %641) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %643 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %644 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %645 = reshape(%643, newshape=[135]) /* ty=Tensor[(135), int8] */;
  %646 = reshape(%644, newshape=[]) /* ty=int64 */;
  %647 = @func_3610(%645, %646) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) */;
  %648 = cos(%637) /* ty=Tensor[(4, 9, 10), float64] */;
  %649 = %642.4;
  %650 = %647.1;
  %651 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  %652 = @func_7200() /* ty=Tensor[(14, 1, 10), float32] */;
  (%648, %649, %var_10097, %var_10098, %650, meta[relay.Constant][37] /* ty=Tensor[(135), int8] */, 2 /* ty=int64 */, %651, %652)
}

def @func_4959(%var_4957: Tensor[(234, 2), float64], %var_4958: int64) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) {
  @func_4955(%var_4957, %var_4958) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) */
}

def @func_7412() -> (int64, int64) {
  @func_7410() /* ty=(int64, int64) */
}

def @func_14158() -> (int64, int64) {
  %653 = @func_9048() /* ty=(int64,) */;
  %654 = @func_14084() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %655 = %653.0;
  %656 = %654.1;
  (%655, %656)
}

def @func_9108(%var_9106: Tensor[(900, 1), bool], %var_9107: Tensor[(16), float64]) -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
  %673 = fn (%var_9062: Tensor[(900, 1), bool], %var_9084: Tensor[(16), float64]) -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
    %657 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %658 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %659 = cast(%var_9062, dtype="bool") /* ty=Tensor[(900, 1), bool] */;
    %660 = reshape(%658, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %661 = reshape(%659, newshape=[900]) /* ty=Tensor[(900), bool] */;
    %662 = @func_8247(%660, %661) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(192), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), bool], int64, Tensor[(6, 4, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32]) */;
    %663 = cast(%var_9084, dtype="float64") /* ty=Tensor[(16), float64] */;
    %664 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %665 = reshape(%663, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %666 = reshape(%664, newshape=[]) /* ty=int64 */;
    %667 = @func_386(%665, %666) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
    %668 = %657.0;
    %669 = %662.8;
    %670 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
    %671 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
    %672 = %667.0;
    (%668, %669, meta[relay.Constant][38] /* ty=Tensor[(192), float32] */, %var_9062, %670, %671, %672, %var_9084, 7 /* ty=int64 */)
  };
  %673(%var_9106, %var_9107) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(900, 1), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */
}

def @func_13579() -> Tensor[(14, 1, 10), float32] {
  %674 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_12330() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %674() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_1750() -> (int64,) {
  @func_1748() /* ty=(int64,) */
}

def @func_997(%var_995: Tensor[(6, 1, 8), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  @func_994(%var_995) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */
}

def @func_9642() -> (Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
  %675 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
  %676 = @func_8355() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */;
  %677 = %676.2;
  %678 = @func_6503() /* ty=(Tensor[(15, 10, 6), bool],) */;
  %679 = %678.0;
  %680 = cast(%677, dtype="int16") /* ty=int16 */;
  %681 = cast(%679, dtype="int16") /* ty=Tensor[(15, 10, 6), int16] */;
  %682 = %675.0;
  %683 = bitwise_and(%680, %681) /* ty=Tensor[(15, 10, 6), int16] */;
  %684 = @func_3508() /* ty=Tensor[(14, 1, 10), float32] */;
  (%682, %683, %684)
}

def @func_4955(%var_4946: Tensor[(234, 2), float64], %var_4947: int64) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(234, 2), float64], int64) {
  %685 = cast(%var_4946, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %686 = cast(%var_4947, dtype="int64") /* ty=int64 */;
  %687 = reshape(%685, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %688 = reshape(%686, newshape=[]) /* ty=int64 */;
  %689 = @func_847(%687, %688) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %690 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
  %691 = %689.3;
  (%690, %691, %var_4946, %var_4947)
}

def @func_13841() -> (Tensor[(14, 1, 10), float32], int64) {
  @func_13839() /* ty=(Tensor[(14, 1, 10), float32], int64) */
}

def @func_12669() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %696 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
    %692 = @func_12183() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
    %693 = @func_4837() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %694 = %692.0;
    %695 = %693.0;
    (%694, %695)
  };
  %696() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_14086() -> (Tensor[(14, 1, 10), float32], int64) {
  @func_14084() /* ty=(Tensor[(14, 1, 10), float32], int64) */
}

def @func_905(%var_904: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %702 = fn (%var_886: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
    %697 = cast(%var_886, dtype="float32") /* ty=Tensor[(6, 16, 10), float32] */;
    %698 = cast(meta[relay.Constant][39] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
    %699 = reshape(%698, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
    %700 = log(%697) /* ty=Tensor[(6, 16, 10), float32] */;
    %701 = @func_607(%699) /* ty=Tensor[(3, 5, 9), int8] */;
    (%700, %701, meta[relay.Constant][39] /* ty=Tensor[(135), int8] */)
  };
  %702(%var_904) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */
}

def @func_12592() -> (int64, int64, Tensor[(6, 7, 10), float32], Tensor[(420), float32]) {
  @func_12590() /* ty=(int64, int64, Tensor[(6, 7, 10), float32], Tensor[(420), float32]) */
}

def @func_10585(%var_10583: Tensor[(3, 11, 6), uint16]) -> (Tensor[(3, 11, 6), uint16], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  @func_10582(%var_10583) /* ty=(Tensor[(3, 11, 6), uint16], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_7410() -> (int64, int64) {
  %703 = @func_4735() /* ty=(int64,) */;
  %704 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %705 = %703.0;
  %706 = %704.2;
  (%705, %706)
}

def @func_9933() -> Tensor[(14, 1, 10), float32] {
  %708 = fn () -> Tensor[(14, 1, 10), float32] {
    %707 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %707.0
  };
  %708() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_5380() -> Tensor[(14, 1, 10), float32] {
  %710 = fn () -> Tensor[(14, 1, 10), float32] {
    %709 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %709.0
  };
  %710() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7542() -> (Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) {
  @func_7540() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */
}

def @func_1580() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) {
  %711 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %712 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %713 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %714 = reshape(%712, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %715 = reshape(%713, newshape=[]) /* ty=int64 */;
  %716 = @func_386(%714, %715) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
  %717 = %711.0;
  %718 = %716.2;
  (%717, %718, meta[relay.Constant][40] /* ty=Tensor[(1, 16), float64] */, -9 /* ty=int64 */)
}

def @func_1920() -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) {
  %719 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %720 = reshape(%719, newshape=[]) /* ty=int64 */;
  %721 = @func_24(%720) /* ty=(Tensor[(16, 11, 12), int64],) */;
  %722 = cast(meta[relay.Constant][41] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %723 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %724 = reshape(%722, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %725 = reshape(%723, newshape=[]) /* ty=int64 */;
  %726 = @func_1429(%724, %725) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) */;
  %727 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %728 = %721.0;
  %729 = %726.2;
  (%727, %728, -7 /* ty=int64 */, %729, meta[relay.Constant][41] /* ty=Tensor[(16), float64] */)
}

def @func_6495() -> (int64,) {
  %732 = fn () -> (int64,) {
    %730 = @func_1859() /* ty=(int64,) */;
    %731 = %730.0;
    (%731,)
  };
  %732() /* ty=(int64,) */
}

def @func_13475() -> Tensor[(14, 1, 10), float32] {
  @func_13473() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_6125() -> (Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) {
  @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_8356() -> (Tensor[(14, 1, 10), float32], int64, int64) {
  %739 = fn () -> (Tensor[(14, 1, 10), float32], int64, int64) {
    %733 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %734 = @func_3925() /* ty=(int64,) */;
    %735 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
    %736 = %733.0;
    %737 = %734.0;
    %738 = %735.1;
    (%736, %737, %738)
  };
  %739() /* ty=(Tensor[(14, 1, 10), float32], int64, int64) */
}

def @func_7363(%var_7361: Tensor[(4, 8, 16), uint16], %var_7362: Tensor[(5, 8, 16), float64]) -> (Tensor[(4, 8, 16), uint16], Tensor[(14, 1, 10), float32], Tensor[(?, 8, 16), int8], Tensor[(14, 1, 10), float32], Tensor[(5, 8, 16), int32]) {
  %757 = fn (%var_7324: Tensor[(4, 8, 16), uint16], %var_7353: Tensor[(5, 8, 16), float64]) -> (Tensor[(4, 8, 16), uint16], Tensor[(14, 1, 10), float32], Tensor[(?, 8, 16), int8], Tensor[(14, 1, 10), float32], Tensor[(5, 8, 16), int32]) {
    %740 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="uint16") /* ty=Tensor[(1, 8, 16), uint16] */;
    %741 = cast(%var_7324, dtype="uint16") /* ty=Tensor[(4, 8, 16), uint16] */;
    %742 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %743 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="float64") /* ty=Tensor[(1, 8, 16), float64] */;
    %744 = log2(%743) /* ty=Tensor[(1, 8, 16), float64] */;
    %745 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 8, 16), uint16] */, dtype="int8") /* ty=Tensor[(1, 8, 16), int8] */;
    %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%744, dtype="int8") /* ty=Tensor[(1, 8, 16), int8] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %749 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %750 = cast(%744, dtype="int32") /* ty=Tensor[(1, 8, 16), int32] */;
    %751 = cast(%var_7353, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
    %752 = bitwise_or(%740, %741) /* ty=Tensor[(4, 8, 16), uint16] */;
    %753 = %742.0;
    %754 = bitwise_or(%747, %748) /* ty=Tensor[(?, 8, 16), int8] */;
    %755 = %749.0;
    %756 = left_shift(%750, %751) /* ty=Tensor[(5, 8, 16), int32] */;
    (%752, %753, %754, %755, %756)
  };
  %757(%var_7361, %var_7362) /* ty=(Tensor[(4, 8, 16), uint16], Tensor[(14, 1, 10), float32], Tensor[(?, 8, 16), int8], Tensor[(14, 1, 10), float32], Tensor[(5, 8, 16), int32]) */
}

def @func_6626() -> (Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  @func_6624() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */
}

def @func_10870() -> (int64,) {
  %758 = @func_4735() /* ty=(int64,) */;
  %759 = %758.0;
  (%759,)
}

def @func_12229() -> int64 {
  @func_10292() /* ty=int64 */
}

def @func_4127() -> Tensor[(14, 1, 10), float32] {
  @func_4125() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7908() -> (Tensor[(1, 16), float64], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64], Tensor[(6, 4, 8), float32], Tensor[(192), float32]) {
  @func_7906() /* ty=(Tensor[(1, 16), float64], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64], Tensor[(6, 4, 8), float32], Tensor[(192), float32]) */
}

def @func_12029() -> (int64,) {
  %761 = fn () -> (int64,) {
    %760 = @func_7990() /* ty=int64 */;
    (%760,)
  };
  %761() /* ty=(int64,) */
}

def @func_7659(%var_7604: Tensor[(15, 11, 4), uint64], %var_7605: Tensor[(15, 11, 4), uint64], %var_7611: Tensor[(10, 96), float32]) -> (Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) {
  %762 = cast(%var_7605, dtype="bool") /* ty=Tensor[(15, 11, 4), bool] */;
  %763 = shape_of(%var_7604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_7604, dtype="bool") /* ty=Tensor[(15, 11, 4), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = cast(%var_7611, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %767 = reshape(%766, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %768 = @func_903(%767) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %769 = @func_1859() /* ty=(int64,) */;
  %770 = less_equal(%764, %765) /* ty=Tensor[(15, 11, 4), bool] */;
  %771 = %768.2;
  %772 = %769.0;
  (%770, %771, %var_7611, %772)
}

def @func_3444(%var_3424: Tensor[(2, 7, 10), uint32], %var_3438: Tensor[(1200), float64]) -> (Tensor[(2, 7, 10), uint32], Tensor[(135), int8], Tensor[(48), float32], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  %773 = cast(%var_3424, dtype="uint32") /* ty=Tensor[(2, 7, 10), uint32] */;
  %774 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(2, 7, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(2, 7, 10), uint32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %777 = cast(meta[relay.Constant][44] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %778 = reshape(%777, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %779 = @func_2196(%778) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
  %780 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %781 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %782 = reshape(%780, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %783 = reshape(%781, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %784 = bitwise_xor(%775, %776) /* ty=Tensor[(2, 7, 10), uint32] */;
  %785 = %779.1;
  %786 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %787 = @func_1449(%782, %783) /* ty=Tensor[(5, 15, 16), float64] */;
  (%784, %785, meta[relay.Constant][44] /* ty=Tensor[(48), float32] */, %786, %787, %var_3438)
}

def @func_12438() -> (Tensor[(12, 12, 6), int16],) {
  %788 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 12, 6), int16] */;
  %789 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 12, 6), int16] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %792 = maximum(%790, %791) /* ty=Tensor[(12, 12, 6), int16] */;
  (%792,)
}

def @func_9478() -> (Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) {
  %797 = fn () -> (Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) {
    %793 = @func_9457() /* ty=(Tensor[(14, 1, 10), float64],) */;
    %794 = @func_6503() /* ty=(Tensor[(15, 10, 6), bool],) */;
    %795 = %793.0;
    %796 = %794.0;
    (%795, %796)
  };
  %797() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(15, 10, 6), bool]) */
}

def @func_5180(%var_5179: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(48), float32], Tensor[(48), float32], int64, Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32]) {
  %814 = fn (%var_5133: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(48), float32], Tensor[(48), float32], int64, Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32]) {
    %798 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
    %799 = cast(%var_5133, dtype="float32") /* ty=Tensor[(48), float32] */;
    %800 = reshape(%799, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %801 = @func_3345(%800) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(10, 96), float32], Tensor[(3, 5, 9), int32], Tensor[(135), int8], Tensor[(48), float32], int64) */;
    %802 = @func_4319() /* ty=(int64,) */;
    %803 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
    %804 = @func_1859() /* ty=(int64,) */;
    %805 = %801.4;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(48), float32] */;
    %807 = reshape(%806, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
    %808 = @func_4398(%807) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
    %809 = %798.0;
    %810 = %802.0;
    %811 = %803.1;
    %812 = %804.0;
    %813 = %808.1;
    (%809, %805, %var_5133, %810, %811, %812, %813)
  };
  %814(%var_5179) /* ty=(Tensor[(14, 1, 10), float64], Tensor[(48), float32], Tensor[(48), float32], int64, Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32]) */
}

def @func_10141(%var_10139: Tensor[(900), bool], %var_10140: Tensor[(16), float64]) -> (Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  @func_10137(%var_10139, %var_10140) /* ty=(Tensor[(4, 9, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool], Tensor[(16), float64], Tensor[(3, 5, 9), int8], Tensor[(135), int8], int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_5020(%var_4997: Tensor[(6, 4, 8), float32]) -> (Tensor[(6, 4, 8), float32],) {
  %815 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %816 = %815.1;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %818 = cast(%var_4997, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %819 = floor_mod(%817, %818) /* ty=Tensor[(6, 4, 8), float32] */;
  (%819,)
}

def @func_6637(%var_6633: Tensor[(7, 16, 6), float32]) -> Tensor[(7, 16, 6), float32] {
  %820 = cast(%var_6633, dtype="float32") /* ty=Tensor[(7, 16, 6), float32] */;
  rsqrt(%820) /* ty=Tensor[(7, 16, 6), float32] */
}

def @func_607(%var_590: Tensor[(3, 5, 9), int8]) -> Tensor[(3, 5, 9), int8] {
  %821 = cast(%var_590, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %822 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 5, 9), int8] */, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%823, %824) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_2351(%var_2348: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) {
  %825 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %826 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %827 = cast(%var_2348, dtype="float32") /* ty=Tensor[(960), float32] */;
  %828 = reshape(%827, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %829 = @func_903(%828) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %830 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
  %831 = %825.1;
  %832 = %826.1;
  %833 = %829.1;
  (%830, %831, %832, %833, %var_2348)
}

def @func_1942() -> (Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
  @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */
}

def @func_2245(%var_2244: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
  %840 = fn (%var_2240: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
    %834 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %835 = cast(%var_2240, dtype="float32") /* ty=Tensor[(48), float32] */;
    %836 = reshape(%835, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %837 = @func_994(%836) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %838 = %834.0;
    %839 = %837.0;
    (%838, %839, %var_2240)
  };
  %840(%var_2244) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */
}

def @func_1488(%var_1487: Tensor[(2, 24), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %854 = fn (%var_1470: Tensor[(2, 24), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
    %841 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %842 = cast(%var_1470, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
    %843 = reshape(%842, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %844 = @func_994(%843) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %845 = cast(meta[relay.Constant][48] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
    %846 = reshape(%845, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
    %847 = @func_759(%846) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
    %848 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %849 = %841.0;
    %850 = %844.0;
    %851 = %847.0;
    %852 = %848.0;
    %853 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
    (%849, %850, %var_1470, %851, meta[relay.Constant][48] /* ty=Tensor[(100), uint32] */, %852, %853)
  };
  %854(%var_1487) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(2, 24), float32], Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_4838() -> (Tensor[(14, 1, 10), float32],) {
  %857 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %855 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %856 = %855.0;
    (%856,)
  };
  %857() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_4765(%var_4739: Tensor[(2, 16, 12), int8]) -> (Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) {
  %858 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 16, 12), int8] */, dtype="int8") /* ty=Tensor[(2, 16, 12), int8] */;
  %859 = shape_of(%var_4739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%var_4739, dtype="int8") /* ty=Tensor[(2, 16, 12), int8] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %862 = cast(%var_4739, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %863 = multiply(%860, %861) /* ty=Tensor[(2, 16, 12), int8] */;
  %864 = erf(%862) /* ty=Tensor[(2, 16, 12), float64] */;
  (%863, %864)
}

def @func_11751() -> (Tensor[(14, 5, 10), int16], Tensor[(14, 1, 10), float32]) {
  %865 = @func_4082() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %866 = %865.0;
  %867 = cast(%866, dtype="int16") /* ty=Tensor[(14, 1, 10), int16] */;
  %868 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 5, 10), float32] */, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %869 = right_shift(%867, %868) /* ty=Tensor[(14, 5, 10), int16] */;
  %870 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  (%869, %870)
}

def @func_13700() -> Tensor[(14, 1, 10), float32] {
  %871 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_12330() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %871() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_2778() -> (int64,) {
  %874 = fn () -> (int64,) {
    %872 = @func_1859() /* ty=(int64,) */;
    %873 = %872.0;
    (%873,)
  };
  %874() /* ty=(int64,) */
}

def @func_11660() -> (Tensor[(14, 1, 10), float32],) {
  %875 = @func_8022() /* ty=Tensor[(14, 1, 10), float32] */;
  (%875,)
}

def @func_6842(%var_6840: Tensor[(6, 1, 6), int64]) -> (Tensor[(6, 1, 6), int16], Tensor[(14, 1, 10), float32]) {
  @func_6839(%var_6840) /* ty=(Tensor[(6, 1, 6), int16], Tensor[(14, 1, 10), float32]) */
}

def @func_4689() -> Tensor[(16), float64] {
  %876 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %876.0
}

def @func_10603() -> int64 {
  @func_10601() /* ty=int64 */
}

def @func_7144(%var_7142: Tensor[(900), int8], %var_7143: Tensor[(16), float64]) -> (Tensor[(14, 9, 10), uint8], Tensor[(900), int8], Tensor[(1260), float32], Tensor[(14, 4, 10), float32], Tensor[(546), int8], Tensor[(16), float64]) {
  %892 = fn (%var_7110: Tensor[(900), int8], %var_7138: Tensor[(16), float64]) -> (Tensor[(14, 9, 10), uint8], Tensor[(900), int8], Tensor[(1260), float32], Tensor[(14, 4, 10), float32], Tensor[(546), int8], Tensor[(16), float64]) {
    %877 = cast(%var_7110, dtype="int8") /* ty=Tensor[(900), int8] */;
    %878 = cast(meta[relay.Constant][51] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %879 = reshape(%877, newshape=[9, 100]) /* ty=Tensor[(9, 100), int8] */;
    %880 = reshape(%878, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
    %881 = @func_7100(%879, %880) /* ty=(Tensor[(5, 15, 16), float64], Tensor[(9, 100), int8], int64, Tensor[(14, 9, 10), uint8]) */;
    %882 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
    %883 = %882.0;
    %884 = cast(%883, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
    %885 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
    %886 = cast(%var_7138, dtype="float64") /* ty=Tensor[(16), float64] */;
    %887 = reshape(%886, newshape=[8, 2]) /* ty=Tensor[(8, 2), float64] */;
    %888 = @func_3123(%887) /* ty=(Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
    %889 = %881.3;
    %890 = power(%884, %885) /* ty=Tensor[(14, 4, 10), float32] */;
    %891 = %888.6;
    (%889, %var_7110, meta[relay.Constant][51] /* ty=Tensor[(1260), float32] */, %890, %891, %var_7138)
  };
  %892(%var_7142, %var_7143) /* ty=(Tensor[(14, 9, 10), uint8], Tensor[(900), int8], Tensor[(1260), float32], Tensor[(14, 4, 10), float32], Tensor[(546), int8], Tensor[(16), float64]) */
}

def @func_8896(%var_8893: Tensor[(3, 3, 3), int64], %var_8894: Tensor[(1960), float32], %var_8895: Tensor[(700), float32]) -> (Tensor[(3, 3, 3), uint8], Tensor[(14, 14, 10), uint32], Tensor[(1960), float32], Tensor[(700), float32]) {
  %904 = fn (%var_8872: Tensor[(3, 3, 3), int64], %var_8885: Tensor[(1960), float32], %var_8886: Tensor[(700), float32]) -> (Tensor[(3, 3, 3), uint8], Tensor[(14, 14, 10), uint32], Tensor[(1960), float32], Tensor[(700), float32]) {
    %893 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
    %894 = %893.0;
    %895 = cast(%894, dtype="uint8") /* ty=uint8 */;
    %896 = cast(%var_8872, dtype="uint8") /* ty=Tensor[(3, 3, 3), uint8] */;
    %897 = cast(%var_8885, dtype="float32") /* ty=Tensor[(1960), float32] */;
    %898 = cast(%var_8886, dtype="float32") /* ty=Tensor[(700), float32] */;
    %899 = reshape(%897, newshape=[14, 14, 10]) /* ty=Tensor[(14, 14, 10), float32] */;
    %900 = reshape(%898, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float32] */;
    %901 = @func_7821(%899, %900) /* ty=(Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) */;
    %902 = add(%895, %896) /* ty=Tensor[(3, 3, 3), uint8] */;
    %903 = %901.0;
    (%902, %903, %var_8885, %var_8886)
  };
  %904(%var_8893, %var_8894, %var_8895) /* ty=(Tensor[(3, 3, 3), uint8], Tensor[(14, 14, 10), uint32], Tensor[(1960), float32], Tensor[(700), float32]) */
}

def @func_850(%var_848: Tensor[(13, 4, 9), float64], %var_849: int64) -> (Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
  %913 = fn (%var_837: Tensor[(13, 4, 9), float64], %var_842: int64) -> (Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) {
    %905 = cast(%var_837, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %906 = cast(meta[relay.Constant][53] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %907 = cast(%var_842, dtype="int64") /* ty=int64 */;
    %908 = reshape(%906, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %909 = reshape(%907, newshape=[]) /* ty=int64 */;
    %910 = @func_386(%908, %909) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
    %911 = asinh(%905) /* ty=Tensor[(13, 4, 9), float64] */;
    %912 = %910.0;
    (%911, %912, meta[relay.Constant][53] /* ty=Tensor[(16), float64] */, %var_842)
  };
  %913(%var_848, %var_849) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */
}

def @func_1940() -> (Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) {
  %914 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %915 = cast(meta[relay.Constant][54] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %916 = reshape(%915, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %917 = @func_994(%916) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %918 = %914.2;
  %919 = %917.0;
  (%918, %919, meta[relay.Constant][54] /* ty=Tensor[(48), float32] */)
}

def @func_4912() -> Tensor[(14, 1, 10), float32] {
  @func_4910() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_2011() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) {
  @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */
}

def @func_6021(%var_6020: Tensor[(112), float32]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(96), int8], Tensor[(384), int8], Tensor[(100), uint32], Tensor[(112), float32]) {
  %935 = fn (%var_6008: Tensor[(112), float32]) -> (Tensor[(14, 1, 10), float32], int64, Tensor[(96), int8], Tensor[(384), int8], Tensor[(100), uint32], Tensor[(112), float32]) {
    %920 = cast(meta[relay.Constant][55] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
    %921 = cast(meta[relay.Constant][56] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
    %922 = cast(meta[relay.Constant][56] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
    %923 = reshape(%920, newshape=[6, 16, 1]) /* ty=Tensor[(6, 16, 1), int8] */;
    %924 = reshape(%921, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
    %925 = reshape(%922, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
    %926 = @func_2498(%923, %924, %925) /* ty=(Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) */;
    %927 = cast(%var_6008, dtype="float32") /* ty=Tensor[(112), float32] */;
    %928 = cast(%var_6008, dtype="float64") /* ty=Tensor[(112), float64] */;
    %929 = reshape(%927, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), float32] */;
    %930 = reshape(%928, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), float64] */;
    %931 = @func_3196(%929, %930) /* ty=(Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) */;
    %932 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
    %933 = %926.1;
    %934 = %931.0;
    (%932, %933, meta[relay.Constant][55] /* ty=Tensor[(96), int8] */, meta[relay.Constant][56] /* ty=Tensor[(384), int8] */, %934, %var_6008)
  };
  %935(%var_6020) /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(96), int8], Tensor[(384), int8], Tensor[(100), uint32], Tensor[(112), float32]) */
}

def @func_9294(%var_9293: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) {
  %946 = fn (%var_9290: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) {
    %936 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %937 = cast(meta[relay.Constant][57] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
    %938 = cast(meta[relay.Constant][57] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
    %939 = cast(%var_9290, dtype="float32") /* ty=Tensor[(960), float32] */;
    %940 = reshape(%937, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
    %941 = reshape(%938, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
    %942 = reshape(%939, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %943 = @func_7659(%940, %941, %942) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
    %944 = %936.0;
    %945 = %943.0;
    (%944, %945, meta[relay.Constant][57] /* ty=Tensor[(660), uint64] */, %var_9290)
  };
  %946(%var_9293) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(15, 11, 4), bool], Tensor[(660), uint64], Tensor[(960), float32]) */
}

def @func_10780(%var_10778: Tensor[(420), float32]) -> (Tensor[(14, 1, 10), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32], int64, Tensor[(660), uint64], Tensor[(480, 2), float32], Tensor[(3, 5, 9), int8], Tensor[(420), float32]) {
  %947 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %948 = cast(meta[relay.Constant][58] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %949 = reshape(%948, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %950 = @func_2243(%949) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %951 = cast(meta[relay.Constant][59] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %952 = cast(meta[relay.Constant][59] /* ty=Tensor[(660), uint64] */, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %953 = cast(meta[relay.Constant][60] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
  %954 = reshape(%951, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %955 = reshape(%952, newshape=[15, 11, 4]) /* ty=Tensor[(15, 11, 4), uint64] */;
  %956 = reshape(%953, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %957 = @func_7659(%954, %955, %956) /* ty=(Tensor[(15, 11, 4), bool], Tensor[(135), int8], Tensor[(10, 96), float32], int64) */;
  %958 = cast(%var_10778, dtype="float32") /* ty=Tensor[(420), float32] */;
  %959 = reshape(%958, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
  %960 = @func_4249(%959) /* ty=(Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
  %961 = %947.0;
  %962 = %950.1;
  %963 = %957.3;
  %964 = %960.2;
  (%961, %962, meta[relay.Constant][58] /* ty=Tensor[(48), float32] */, %963, meta[relay.Constant][59] /* ty=Tensor[(660), uint64] */, meta[relay.Constant][60] /* ty=Tensor[(480, 2), float32] */, %964, %var_10778)
}

def @func_1922() -> (Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) {
  @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */
}

def @func_7973() -> (Tensor[(16), float64],) {
  @func_7971() /* ty=(Tensor[(16), float64],) */
}

def @func_12792() -> int64 {
  @func_10601() /* ty=int64 */
}

def @func_12820() -> (Tensor[(14, 1, 10), float64], int64) {
  %965 = @func_9457() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %966 = @func_7410() /* ty=(int64, int64) */;
  %967 = %965.0;
  %968 = %966.0;
  (%967, %968)
}

def @func_10931() -> Tensor[(14, 1, 10), float32] {
  @func_10929() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_14011() -> int64 {
  %970 = fn () -> int64 {
    %969 = @func_13625() /* ty=(int64,) */;
    %969.0
  };
  %970() /* ty=int64 */
}

def @func_11964() -> Tensor[(14, 1, 10), float32] {
  %972 = fn () -> Tensor[(14, 1, 10), float32] {
    %971 = @func_9036() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
    %971.0
  };
  %972() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_8024() -> Tensor[(14, 1, 10), float32] {
  @func_8022() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_14160() -> (int64, int64) {
  @func_14158() /* ty=(int64, int64) */
}

def @func_7290() -> (Tensor[(14, 1, 10), float32],) {
  %975 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %973 = @func_5763() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32]) */;
    %974 = %973.1;
    (%974,)
  };
  %975() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_9644() -> (Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) {
  @func_9642() /* ty=(Tensor[(16, 11, 12), float64], Tensor[(15, 10, 6), int16], Tensor[(14, 1, 10), float32]) */
}

def @func_4508(%var_4506: Tensor[(10, 4, 10), float32], %var_4507: Tensor[(48), float32]) -> (Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) {
  @func_4504(%var_4506, %var_4507) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */
}

def @func_9552(%var_9521: Tensor[(14, 12, 10), float32]) -> (Tensor[(14, 12, 10), int64], Tensor[(100), uint32]) {
  %976 = @func_8022() /* ty=Tensor[(14, 1, 10), float32] */;
  %977 = cast(%976, dtype="int64") /* ty=Tensor[(14, 1, 10), int64] */;
  %978 = cast(%var_9521, dtype="int64") /* ty=Tensor[(14, 12, 10), int64] */;
  %979 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %980 = logical_xor(%977, %978) /* ty=Tensor[(14, 12, 10), int64] */;
  %981 = %979.1;
  (%980, %981)
}

def @func_27(%var_25: int64) -> (Tensor[(16, 11, 12), int64],) {
  @func_24(%var_25) /* ty=(Tensor[(16, 11, 12), int64],) */
}

def @func_6976() -> Tensor[(14, 15, 10), int8] {
  %982 = fn () -> Tensor[(14, 15, 10), int8] {
    @func_5441() /* ty=Tensor[(14, 15, 10), int8] */
  };
  %982() /* ty=Tensor[(14, 15, 10), int8] */
}

def @func_11410() -> (Tensor[(14, 1, 10), float32],) {
  %985 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %983 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
    %984 = %983.0;
    (%984,)
  };
  %985() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_7690() -> (Tensor[(16, 11, 12), float64],) {
  %990 = fn () -> (Tensor[(16, 11, 12), float64],) {
    %986 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
    %987 = %986.1;
    %988 = cast(%987, dtype="float64") /* ty=Tensor[(16, 11, 12), float64] */;
    %989 = exp(%988) /* ty=Tensor[(16, 11, 12), float64] */;
    (%989,)
  };
  %990() /* ty=(Tensor[(16, 11, 12), float64],) */
}

def @func_8278() -> (Tensor[(14, 1, 10), float32],) {
  @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_4179() -> Tensor[(6, 1, 8), float32] {
  %992 = fn () -> Tensor[(6, 1, 8), float32] {
    %991 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
    %991.1
  };
  %992() /* ty=Tensor[(6, 1, 8), float32] */
}

def @func_13473() -> Tensor[(14, 1, 10), float32] {
  %993 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %993.0
}

def @func_5764() -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32]) {
  %996 = fn () -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32]) {
    %994 = @func_4689() /* ty=Tensor[(16), float64] */;
    %995 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
    (%994, %995)
  };
  %996() /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32]) */
}

def @func_10294() -> int64 {
  @func_10292() /* ty=int64 */
}

def @func_11159(%var_11145: Tensor[(14, 2, 1), float32]) -> (Tensor[(14, 2, 1), float32],) {
  %997 = cast(%var_11145, dtype="float32") /* ty=Tensor[(14, 2, 1), float32] */;
  %998 = exp(%997) /* ty=Tensor[(14, 2, 1), float32] */;
  (%998,)
}

def @func_3725(%var_3723: float64, %var_3724: Tensor[(2, 10, 14), float64]) -> (Tensor[(2, 10, 14), float64],) {
  @func_3721(%var_3723, %var_3724) /* ty=(Tensor[(2, 10, 14), float64],) */
}

def @func_5041() -> Tensor[(16), float64] {
  %999 = fn () -> Tensor[(16), float64] {
    @func_4689() /* ty=Tensor[(16), float64] */
  };
  %999() /* ty=Tensor[(16), float64] */
}

def @func_389(%var_387: Tensor[(1, 4, 4), float64], %var_388: int64) -> (Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) {
  %1006 = fn (%var_354: Tensor[(1, 4, 4), float64], %var_377: int64) -> (Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) {
    %1000 = cast(%var_354, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
    %1001 = cast(%var_377, dtype="int64") /* ty=int64 */;
    %1002 = reshape(%1001, newshape=[]) /* ty=int64 */;
    %1003 = @func_24(%1002) /* ty=(Tensor[(16, 11, 12), int64],) */;
    %1004 = sigmoid(%1000) /* ty=Tensor[(1, 4, 4), float64] */;
    %1005 = %1003.0;
    (%1004, %1005, %var_377)
  };
  %1006(%var_387, %var_388) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */
}

def @func_1582() -> (Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) {
  @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */
}

def @func_12901(%var_12900: Tensor[(5, 10, 8), int64]) -> (Tensor[(16), float64], Tensor[(5, 10, 8), uint16]) {
  %1013 = fn (%var_12887: Tensor[(5, 10, 8), int64]) -> (Tensor[(16), float64], Tensor[(5, 10, 8), uint16]) {
    %1007 = @func_7971() /* ty=(Tensor[(16), float64],) */;
    %1008 = @func_10292() /* ty=int64 */;
    %1009 = cast(%1008, dtype="uint16") /* ty=uint16 */;
    %1010 = cast(%var_12887, dtype="uint16") /* ty=Tensor[(5, 10, 8), uint16] */;
    %1011 = %1007.0;
    %1012 = left_shift(%1009, %1010) /* ty=Tensor[(5, 10, 8), uint16] */;
    (%1011, %1012)
  };
  %1013(%var_12900) /* ty=(Tensor[(16), float64], Tensor[(5, 10, 8), uint16]) */
}

def @func_3926() -> (int64,) {
  %1016 = fn () -> (int64,) {
    %1014 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
    %1015 = %1014.1;
    (%1015,)
  };
  %1016() /* ty=(int64,) */
}

def @func_11041() -> (Tensor[(14, 1, 10), float32],) {
  %1019 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %1017 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
    %1018 = %1017.0;
    (%1018,)
  };
  %1019() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_5315(%var_5313: int64, %var_5314: Tensor[(48), float32]) -> (Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) {
  @func_5311(%var_5313, %var_5314) /* ty=(Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_2354(%var_2352: Tensor[(960), float32]) -> (Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) {
  @func_2351(%var_2352) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */
}

def @func_2515() -> Tensor[(14, 1, 10), float32] {
  %1020 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_1178() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %1020() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_13033(%var_13031: Tensor[(11, 1, 12), float32], %var_13032: Tensor[(16), float64]) -> (Tensor[(11, ?, 12), float32], Tensor[(16), float64], Tensor[(900), bool], Tensor[(16), float64], Tensor[(11, ?, 12), bool]) {
  @func_13029(%var_13031, %var_13032) /* ty=(Tensor[(11, ?, 12), float32], Tensor[(16), float64], Tensor[(900), bool], Tensor[(16), float64], Tensor[(11, ?, 12), bool]) */
}

def @func_12398() -> (Tensor[(14, 1, 10), float32],) {
  %1023 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %1021 = @func_8736() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(900), int8], Tensor[(16), float64], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
    %1022 = %1021.5;
    (%1022,)
  };
  %1023() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_13515() -> (int64, Tensor[(14, 1, 10), float64]) {
  %1027 = fn () -> (int64, Tensor[(14, 1, 10), float64]) {
    %1024 = @func_12090() /* ty=(int64, Tensor[(14, 1, 10), float32], int64, Tensor[(16, 11, 12), float64]) */;
    %1025 = %1024.0;
    %1026 = @func_4785() /* ty=Tensor[(14, 1, 10), float64] */;
    (%1025, %1026)
  };
  %1027() /* ty=(int64, Tensor[(14, 1, 10), float64]) */
}

def @func_7565() -> (Tensor[(14, 1, 10), float32],) {
  @func_7563() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_12339() -> Tensor[(13, 16, 11), float32] {
  %1028 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 11), float32] */;
  log10(%1028) /* ty=Tensor[(13, 16, 11), float32] */
}

def @func_4249(%var_4222: Tensor[(14, 3, 10), float32]) -> (Tensor[(14, 3, 10), bool], Tensor[(14, 3, 10), bool], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) {
  %1029 = @func_2514() /* ty=Tensor[(14, 1, 10), float32] */;
  %1030 = cast(%1029, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %1031 = cast(%var_4222, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %1032 = cast(%1029, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %1033 = cast(%var_4222, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %1034 = cast(meta[relay.Constant][62] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %1035 = reshape(%1034, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %1036 = not_equal(%1030, %1031) /* ty=Tensor[(14, 3, 10), bool] */;
  %1037 = greater_equal(%1032, %1033) /* ty=Tensor[(14, 3, 10), bool] */;
  %1038 = @func_607(%1035) /* ty=Tensor[(3, 5, 9), int8] */;
  (%1036, %1037, %1038, meta[relay.Constant][62] /* ty=Tensor[(135), int8] */)
}

def @func_10072() -> int64 {
  %1039 = @func_4735() /* ty=(int64,) */;
  %1039.0
}

def @func_10292() -> int64 {
  @func_5951() /* ty=int64 */
}

def @func_7201() -> Tensor[(14, 1, 10), float32] {
  %1040 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_4910() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %1040() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7959() -> (int64, int64) {
  %1041 = @func_3925() /* ty=(int64,) */;
  %1042 = @func_2401() /* ty=(Tensor[(14, 1, 10), float32], int64) */;
  %1043 = %1041.0;
  %1044 = %1042.1;
  (%1043, %1044)
}

def @func_4007(%var_4006: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(16, 11, 12), int64], int64) {
  %1055 = fn (%var_3999: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(16, 11, 12), int64], int64) {
    %1045 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1046 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1047 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
    %1048 = cast(%var_3999, dtype="int64") /* ty=int64 */;
    %1049 = reshape(%1048, newshape=[]) /* ty=int64 */;
    %1050 = @func_24(%1049) /* ty=(Tensor[(16, 11, 12), int64],) */;
    %1051 = %1045.0;
    %1052 = %1046.0;
    %1053 = %1047.2;
    %1054 = %1050.0;
    (%1051, %1052, %1053, %1054, %var_3999)
  };
  %1055(%var_4006) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(16, 11, 12), int64], int64) */
}

def @func_13611() -> Tensor[(100), uint32] {
  %1057 = fn () -> Tensor[(100), uint32] {
    %1056 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
    %1056.1
  };
  %1057() /* ty=Tensor[(100), uint32] */
}

def @func_3721(%var_3714: float64, %var_3715: Tensor[(2, 10, 14), float64]) -> (Tensor[(2, 10, 14), float64],) {
  %1058 = cast(%var_3714, dtype="float64") /* ty=float64 */;
  %1059 = cast(%var_3715, dtype="float64") /* ty=Tensor[(2, 10, 14), float64] */;
  %1060 = divide(%1058, %1059) /* ty=Tensor[(2, 10, 14), float64] */;
  (%1060,)
}

def @func_10582(%var_10494: Tensor[(3, 11, 6), uint16]) -> (Tensor[(3, 11, 6), uint16], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %1061 = cast(%var_10494, dtype="uint16") /* ty=Tensor[(3, 11, 6), uint16] */;
  %1062 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(3, 11, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1063 = cast(meta[relay.Constant][63] /* ty=Tensor[(3, 11, 6), uint16] */, dtype="uint16") /* ty=Tensor[(3, 11, 6), uint16] */;
  %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1065 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
  %1066 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1067 = @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1068 = add(%1063, %1064) /* ty=Tensor[(3, 11, 6), uint16] */;
  %1069 = %1065.0;
  %1070 = %1066.0;
  %1071 = @func_6785() /* ty=Tensor[(14, 1, 10), float32] */;
  %1072 = %1067.0;
  (%1068, %1069, %1070, %1071, %1072)
}

def @func_8019() -> int64 {
  @func_8017() /* ty=int64 */
}

def @func_4058() -> (int64, Tensor[(45, 3), int8]) {
  %1077 = fn () -> (int64, Tensor[(45, 3), int8]) {
    %1073 = @func_2777() /* ty=(int64,) */;
    %1074 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
    %1075 = %1073.0;
    %1076 = %1074.1;
    (%1075, %1076)
  };
  %1077() /* ty=(int64, Tensor[(45, 3), int8]) */
}

def @func_11535() -> (Tensor[(14, 1, 10), float32], Tensor[(6, 4, 8), float32], Tensor[(8, 24), float32]) {
  @func_11533() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 4, 8), float32], Tensor[(8, 24), float32]) */
}

def @func_12367() -> int64 {
  %1079 = fn () -> int64 {
    %1078 = @func_4735() /* ty=(int64,) */;
    %1078.0
  };
  %1079() /* ty=int64 */
}

def @func_11753() -> (Tensor[(14, 5, 10), int16], Tensor[(14, 1, 10), float32]) {
  @func_11751() /* ty=(Tensor[(14, 5, 10), int16], Tensor[(14, 1, 10), float32]) */
}

def @func_10979() -> (int64, Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool]) {
  %1088 = fn () -> (int64, Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool]) {
    %1080 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %1081 = @func_7540() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
    %1082 = cast(meta[relay.Constant][64] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
    %1083 = reshape(%1082, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), bool] */;
    %1084 = @func_4569(%1083) /* ty=(Tensor[(15, 10, 6), bool], Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */;
    %1085 = %1080.1;
    %1086 = %1081.0;
    %1087 = %1084.1;
    (%1085, %1086, %1087, meta[relay.Constant][64] /* ty=Tensor[(900), bool] */)
  };
  %1088() /* ty=(int64, Tensor[(14, 1, 10), float64], Tensor[(14, 1, 10), float32], Tensor[(900), bool]) */
}

def @func_10872() -> (int64,) {
  @func_10870() /* ty=(int64,) */
}

def @func_6624() -> (Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  %1089 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %1090 = cast(meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1091 = cast(meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1092 = reshape(%1090, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1093 = reshape(%1091, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1094 = %1089.0;
  %1095 = @func_1449(%1092, %1093) /* ty=Tensor[(5, 15, 16), float64] */;
  (%1094, %1095, meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */)
}

def @func_3907(%var_3904: Tensor[(15, 7, 8), int16], %var_3905: Tensor[(15, 7, 8), int16], %var_3906: int64) -> (Tensor[(15, 7, 8), bool], Tensor[(135), int8], Tensor[(135), int8], int64, int64) {
  %1108 = fn (%var_3859: Tensor[(15, 7, 8), int16], %var_3860: Tensor[(15, 7, 8), int16], %var_3891: int64) -> (Tensor[(15, 7, 8), bool], Tensor[(135), int8], Tensor[(135), int8], int64, int64) {
    %1096 = cast(%var_3860, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %1097 = shape_of(%var_3859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1098 = cast(%var_3859, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %1099 = dyn.reshape(%1096, %1097, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1100 = cast(meta[relay.Constant][66] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
    %1101 = cast(%var_3891, dtype="int64") /* ty=int64 */;
    %1102 = reshape(%1100, newshape=[135]) /* ty=Tensor[(135), int8] */;
    %1103 = reshape(%1101, newshape=[]) /* ty=int64 */;
    %1104 = @func_3610(%1102, %1103) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8], Tensor[(16, 11, 12), int64], int64) */;
    %1105 = less_equal(%1098, %1099) /* ty=Tensor[(15, 7, 8), bool] */;
    %1106 = %1104.2;
    %1107 = @func_2737() /* ty=int64 */;
    (%1105, %1106, meta[relay.Constant][66] /* ty=Tensor[(135), int8] */, %var_3891, %1107)
  };
  %1108(%var_3904, %var_3905, %var_3906) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(135), int8], Tensor[(135), int8], int64, int64) */
}

def @func_12249() -> (int64, Tensor[(468), float64], Tensor[(468), float64]) {
  %1109 = @func_6200() /* ty=(int64, int64, Tensor[(14, 1, 10), float32]) */;
  %1110 = %1109.0;
  %1111 = cast(%1110, dtype="int8") /* ty=int8 */;
  %1112 = cast(meta[relay.Constant][67] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1113 = reshape(%1111, newshape=[]) /* ty=int8 */;
  %1114 = reshape(%1112, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1115 = @func_5749(%1113, %1114) /* ty=(Tensor[(15, 1), bool], int64, Tensor[(468), float64]) */;
  %1116 = %1115.2;
  (%1110, %1116, meta[relay.Constant][67] /* ty=Tensor[(468), float64] */)
}

def @func_12624() -> (int64, Tensor[(14, 1, 10), float32]) {
  @func_12622() /* ty=(int64, Tensor[(14, 1, 10), float32]) */
}

def @func_13338() -> (Tensor[(14, 1, 10), float32],) {
  %1117 = @func_12397() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1118 = %1117.0;
  (%1118,)
}

def @func_11533() -> (Tensor[(14, 1, 10), float32], Tensor[(6, 4, 8), float32], Tensor[(8, 24), float32]) {
  %1119 = cast(meta[relay.Constant][68] /* ty=Tensor[(8, 24), float32] */, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %1120 = reshape(%1119, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %1121 = @func_6258(%1120) /* ty=(Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) */;
  %1122 = @func_9932() /* ty=Tensor[(14, 1, 10), float32] */;
  %1123 = %1121.2;
  (%1122, %1123, meta[relay.Constant][68] /* ty=Tensor[(8, 24), float32] */)
}

def @func_11162(%var_11160: Tensor[(14, 2, 1), float32]) -> (Tensor[(14, 2, 1), float32],) {
  @func_11159(%var_11160) /* ty=(Tensor[(14, 2, 1), float32],) */
}

def @func_6449(%var_6414: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), float32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(240, 4), float32], Tensor[(14, 1, 10), float32]) {
  %1124 = cast(%var_6414, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
  %1125 = @func_6123() /* ty=(Tensor[(5, 4, 5), bool], Tensor[(100), uint32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32]) */;
  %1126 = cast(meta[relay.Constant][69] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %1127 = reshape(%1126, newshape=[2, 480]) /* ty=Tensor[(2, 480), float32] */;
  %1128 = @func_6386(%1127) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(1, 280), float64], Tensor[(280, 1), float64], Tensor[(135), int8], Tensor[(2, 480), float32]) */;
  %1129 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1130 = atan(%1124) /* ty=Tensor[(15, 12, 14), float32] */;
  %1131 = %1125.2;
  %1132 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
  %1133 = %1128.3;
  %1134 = %1129.0;
  (%1130, %1131, %1132, %1133, meta[relay.Constant][69] /* ty=Tensor[(240, 4), float32] */, %1134)
}

def @func_4153() -> (Tensor[(14, 1, 10), float32],) {
  @func_4151() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_10231() -> Tensor[(14, 1, 10), float32] {
  @func_10229() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_8407() -> (Tensor[(14, 1, 10), float32],) {
  @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_13439() -> Tensor[(15, 10, 6), int16] {
  @func_13437() /* ty=Tensor[(15, 10, 6), int16] */
}

def @func_8617() -> (Tensor[(16), float64], int64) {
  %1135 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %1136 = %1135.0;
  %1137 = @func_5951() /* ty=int64 */;
  (%1136, %1137)
}

def @func_12985() -> (int64, int64) {
  @func_12983() /* ty=(int64, int64) */
}

def @func_6839(%var_6830: Tensor[(6, 1, 6), int64]) -> (Tensor[(6, 1, 6), int16], Tensor[(14, 1, 10), float32]) {
  %1138 = @func_6352() /* ty=(int64, int64, Tensor[(1, 16), float64], int64) */;
  %1139 = %1138.1;
  %1140 = cast(%1139, dtype="int16") /* ty=int16 */;
  %1141 = cast(%var_6830, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %1142 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1143 = bitwise_and(%1140, %1141) /* ty=Tensor[(6, 1, 6), int16] */;
  %1144 = %1142.0;
  (%1143, %1144)
}

def @func_2198(%var_2197: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) {
  %1153 = fn (%var_2185: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) {
    %1145 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %1146 = cast(%var_2185, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1147 = reshape(%1146, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %1148 = @func_994(%1147) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %1149 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
    %1150 = %1145.0;
    %1151 = %1148.2;
    %1152 = %1149.1;
    (%1150, %1151, %var_2185, %1152)
  };
  %1153(%var_2197) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(48), float32], int64) */
}

def @func_3651() -> (Tensor[(14, 1, 10), float64],) {
  %1158 = fn () -> (Tensor[(14, 1, 10), float64],) {
    %1154 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1155 = %1154.0;
    %1156 = cast(%1155, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
    %1157 = cosh(%1156) /* ty=Tensor[(14, 1, 10), float64] */;
    (%1157,)
  };
  %1158() /* ty=(Tensor[(14, 1, 10), float64],) */
}

def @func_3196(%var_3164: Tensor[(7, 1, 16), float32], %var_3185: Tensor[(7, 1, 16), float64]) -> (Tensor[(100), uint32], Tensor[(16), float64], Tensor[(7, ?, 16), int64]) {
  %1159 = cast(meta[relay.Constant][70] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %1160 = reshape(%1159, newshape=[8, 2]) /* ty=Tensor[(8, 2), float64] */;
  %1161 = @func_3123(%1160) /* ty=(Tensor[(8, 2), float64], Tensor[(14, 1, 10), bool], Tensor[(14, 1, 10), float32], Tensor[(16), float64], Tensor[(468), float64], Tensor[(7, 13, 6), int8], Tensor[(546), int8], Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
  %1162 = cast(%var_3164, dtype="float32") /* ty=Tensor[(7, 1, 16), float32] */;
  %1163 = atanh(%1162) /* ty=Tensor[(7, 1, 16), float32] */;
  %1164 = cast(%1163, dtype="float64") /* ty=Tensor[(7, 1, 16), float64] */;
  %1165 = exp(%1164) /* ty=Tensor[(7, 1, 16), float64] */;
  %1166 = cast(%var_3185, dtype="int64") /* ty=Tensor[(7, 1, 16), int64] */;
  %1167 = shape_of(%1165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1168 = cast(%1165, dtype="int64") /* ty=Tensor[(7, 1, 16), int64] */;
  %1169 = dyn.reshape(%1166, %1167, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1170 = %1161.8;
  %1171 = left_shift(%1168, %1169) /* ty=Tensor[(7, ?, 16), int64] */;
  (%1170, meta[relay.Constant][70] /* ty=Tensor[(16), float64] */, %1171)
}

def @func_4605(%var_4604: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) {
  %1178 = fn (%var_4581: Tensor[(48), float32]) -> (Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) {
    %1172 = cast(%var_4581, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1173 = reshape(%1172, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %1174 = @func_994(%1173) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(3, 5, 9), int8], Tensor[(135), int8]) */;
    %1175 = @func_2282() /* ty=Tensor[(14, 1, 10), float32] */;
    %1176 = %1174.1;
    %1177 = @func_2737() /* ty=int64 */;
    (%1175, %1176, %var_4581, %1177)
  };
  %1178(%var_4604) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) */
}

def @func_8682() -> Tensor[(45, 3), int8] {
  %1179 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %1179.1
}

def @func_1861() -> (int64,) {
  @func_1859() /* ty=(int64,) */
}

def @func_761(%var_760: Tensor[(5, 4, 5), uint32]) -> (Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) {
  %1192 = fn (%var_736: Tensor[(5, 4, 5), uint32]) -> (Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) {
    %1180 = cast(%var_736, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
    %1181 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1182 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
    %1183 = dyn.reshape(%1180, %1181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1184 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 4, 5), uint32] */, dtype="int16") /* ty=Tensor[(5, 4, 5), int16] */;
    %1185 = shape_of(%var_736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1186 = cast(%var_736, dtype="int16") /* ty=Tensor[(5, 4, 5), int16] */;
    %1187 = dyn.reshape(%1184, %1185, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1188 = multiply(%1186, %1187) /* ty=Tensor[(5, 4, 5), int16] */;
    %1189 = cast(%1188, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
    %1190 = greater(%1182, %1183) /* ty=Tensor[(5, 4, 5), bool] */;
    %1191 = asinh(%1189) /* ty=Tensor[(5, 4, 5), float64] */;
    (%1190, %1191)
  };
  %1192(%var_760) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */
}

def @func_2865() -> (Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) {
  @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */
}

def @func_1748() -> (int64,) {
  %1193 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1194 = %1193.3;
  (%1194,)
}

def @func_6504() -> (Tensor[(15, 10, 6), bool],) {
  %1197 = fn () -> (Tensor[(15, 10, 6), bool],) {
    %1195 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
    %1196 = %1195.2;
    (%1196,)
  };
  %1197() /* ty=(Tensor[(15, 10, 6), bool],) */
}

def @func_3448(%var_3446: Tensor[(2, 7, 10), uint32], %var_3447: Tensor[(1200), float64]) -> (Tensor[(2, 7, 10), uint32], Tensor[(135), int8], Tensor[(48), float32], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) {
  @func_3444(%var_3446, %var_3447) /* ty=(Tensor[(2, 7, 10), uint32], Tensor[(135), int8], Tensor[(48), float32], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */
}

def @func_11896() -> Tensor[(14, 1, 10), float32] {
  %1198 = fn () -> Tensor[(14, 1, 10), float32] {
    @func_1178() /* ty=Tensor[(14, 1, 10), float32] */
  };
  %1198() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_7990() -> int64 {
  @func_2737() /* ty=int64 */
}

def @func_8652(%var_8646: Tensor[(48, 14), float32]) -> (Tensor[(48, 14), uint64],) {
  %1199 = @func_5634() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(48, 1), float32]) */;
  %1200 = %1199.2;
  %1201 = cast(%1200, dtype="uint64") /* ty=Tensor[(48, 1), uint64] */;
  %1202 = cast(%var_8646, dtype="uint64") /* ty=Tensor[(48, 14), uint64] */;
  %1203 = maximum(%1201, %1202) /* ty=Tensor[(48, 14), uint64] */;
  (%1203,)
}

def @func_522(%var_481: Tensor[(15, 10, 6), int8]) -> (Tensor[(15, 10, 6), bool],) {
  %1204 = cast(meta[relay.Constant][72] /* ty=Tensor[(15, 10, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %1205 = shape_of(%var_481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(%var_481, dtype="bool") /* ty=Tensor[(15, 10, 6), bool] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1208 = equal(%1206, %1207) /* ty=Tensor[(15, 10, 6), bool] */;
  (%1208,)
}

def @func_9135() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], uint16, Tensor[(42), uint16], int64) {
  %1209 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1210 = cast(meta[relay.Constant][73] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1211 = cast(meta[relay.Constant][74] /* ty=Tensor[(42), uint16] */, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %1212 = reshape(%1210, newshape=[]) /* ty=uint16 */;
  %1213 = reshape(%1211, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint16] */;
  %1214 = @func_5924(%1212, %1213) /* ty=(Tensor[(7, 6, 1), uint16], Tensor[(16, 11, 12), int64], Tensor[(48), float32]) */;
  %1215 = @func_4319() /* ty=(int64,) */;
  %1216 = %1209.0;
  %1217 = %1214.2;
  %1218 = %1215.0;
  (%1216, %1217, meta[relay.Constant][73] /* ty=uint16 */, meta[relay.Constant][74] /* ty=Tensor[(42), uint16] */, %1218)
}

def @func_11628() -> (int64, int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  %1219 = @func_7959() /* ty=(int64, int64) */;
  %1220 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1221 = %1219.1;
  %1222 = @func_5951() /* ty=int64 */;
  %1223 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
  %1224 = %1220.0;
  (%1221, %1222, %1223, %1224)
}

def @func_14084() -> (Tensor[(14, 1, 10), float32], int64) {
  %1225 = @func_11660() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1226 = @func_4057() /* ty=(int64, Tensor[(45, 3), int8]) */;
  %1227 = %1225.0;
  %1228 = %1226.0;
  (%1227, %1228)
}

def @func_11796() -> (Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) {
  %1234 = fn () -> (Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) {
    %1229 = cast(meta[relay.Constant][75] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
    %1230 = reshape(%1229, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), int8] */;
    %1231 = @func_4765(%1230) /* ty=(Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) */;
    %1232 = @func_5441() /* ty=Tensor[(14, 15, 10), int8] */;
    %1233 = %1231.1;
    (%1232, %1233, meta[relay.Constant][75] /* ty=Tensor[(384), int8] */)
  };
  %1234() /* ty=(Tensor[(14, 15, 10), int8], Tensor[(2, 16, 12), float64], Tensor[(384), int8]) */
}

def @func_3040() -> Tensor[(14, 1, 10), float32] {
  %1235 = @func_2145() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1235.0
}

def @func_8405() -> (Tensor[(14, 1, 10), float32],) {
  %1236 = @func_3533() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1237 = %1236.0;
  (%1237,)
}

def @func_5443() -> Tensor[(14, 15, 10), int8] {
  @func_5441() /* ty=Tensor[(14, 15, 10), int8] */
}

def @func_10242() -> int64 {
  @func_10240() /* ty=int64 */
}

def @func_7906() -> (Tensor[(1, 16), float64], Tensor[(14, 1, 10), float32], Tensor[(5, 15, 16), float64], Tensor[(1200), float64], Tensor[(6, 4, 8), float32], Tensor[(192), float32]) {
  %1238 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1239 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1240 = cast(meta[relay.Constant][76] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1241 = cast(meta[relay.Constant][76] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1242 = reshape(%1240, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1243 = reshape(%1241, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %1244 = cast(meta[relay.Constant][77] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1245 = reshape(%1244, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float32] */;
  %1246 = @func_5020(%1245) /* ty=(Tensor[(6, 4, 8), float32],) */;
  %1247 = %1238.2;
  %1248 = %1239.0;
  %1249 = @func_1449(%1242, %1243) /* ty=Tensor[(5, 15, 16), float64] */;
  %1250 = %1246.0;
  (%1247, %1248, %1249, meta[relay.Constant][76] /* ty=Tensor[(1200), float64] */, %1250, meta[relay.Constant][77] /* ty=Tensor[(192), float32] */)
}

def @func_4401(%var_4399: Tensor[(24, 2), float32]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) {
  @func_4398(%var_4399) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */
}

def @func_11630() -> (int64, int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  @func_11628() /* ty=(int64, int64, Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_3670() -> (Tensor[(16), float64],) {
  %1251 = @func_1920() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64, Tensor[(7, 13, 6), int8], Tensor[(16), float64]) */;
  %1252 = %1251.4;
  (%1252,)
}

def @func_4648(%var_4646: Tensor[(14, 1, 10), float64]) -> (Tensor[(14, 1, 10), float64], Tensor[(14, ?, 10), uint16]) {
  @func_4645(%var_4646) /* ty=(Tensor[(14, 1, 10), float64], Tensor[(14, ?, 10), uint16]) */
}

def @func_12330() -> Tensor[(14, 1, 10), float32] {
  %1253 = @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1253.0
}

def @func_2863() -> (Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) {
  %1254 = @func_1801() /* ty=Tensor[(14, 1, 10), float32] */;
  %1255 = cast(%1254, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %1256 = cast(meta[relay.Constant][78] /* ty=Tensor[(45, 3), int8] */, dtype="int8") /* ty=Tensor[(45, 3), int8] */;
  %1257 = reshape(%1256, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), int8] */;
  %1258 = @func_607(%1257) /* ty=Tensor[(3, 5, 9), int8] */;
  %1259 = @func_2777() /* ty=(int64,) */;
  %1260 = %1259.0;
  %1261 = cast(%1258, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %1262 = cast(%1260, dtype="float64") /* ty=float64 */;
  %1263 = atan(%1255) /* ty=Tensor[(14, 1, 10), float64] */;
  %1264 = divide(%1261, %1262) /* ty=Tensor[(3, 5, 9), float64] */;
  (%1263, meta[relay.Constant][78] /* ty=Tensor[(45, 3), int8] */, %1264)
}

def @func_12341() -> Tensor[(13, 16, 11), float32] {
  @func_12339() /* ty=Tensor[(13, 16, 11), float32] */
}

def @func_3510() -> Tensor[(14, 1, 10), float32] {
  @func_3508() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_12231() -> int64 {
  @func_12229() /* ty=int64 */
}

def @func_1141() -> (Tensor[(14, 1, 10), float32],) {
  %1267 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %1265 = cast(meta[relay.Constant][79] /* ty=Tensor[(14, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
    %1266 = sinh(%1265) /* ty=Tensor[(14, 1, 10), float32] */;
    (%1266,)
  };
  %1267() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_10601() -> int64 {
  %1268 = @func_1603() /* ty=(int64,) */;
  %1268.0
}

def @func_12822() -> (Tensor[(14, 1, 10), float64], int64) {
  @func_12820() /* ty=(Tensor[(14, 1, 10), float64], int64) */
}

def @func_6452(%var_6450: Tensor[(15, 12, 14), float32]) -> (Tensor[(15, 12, 14), float32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(240, 4), float32], Tensor[(14, 1, 10), float32]) {
  @func_6449(%var_6450) /* ty=(Tensor[(15, 12, 14), float32], Tensor[(14, ?, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(135), int8], Tensor[(240, 4), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_4083() -> (Tensor[(14, 1, 10), float32],) {
  %1270 = fn () -> (Tensor[(14, 1, 10), float32],) {
    %1269 = @func_2514() /* ty=Tensor[(14, 1, 10), float32] */;
    (%1269,)
  };
  %1270() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_1604() -> (int64,) {
  %1273 = fn () -> (int64,) {
    %1271 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
    %1272 = %1271.3;
    (%1272,)
  };
  %1273() /* ty=(int64,) */
}

def @func_4645(%var_4640: Tensor[(14, 1, 10), float64]) -> (Tensor[(14, 1, 10), float64], Tensor[(14, ?, 10), uint16]) {
  %1274 = @func_2863() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(45, 3), int8], Tensor[(3, 5, 9), float64]) */;
  %1275 = @func_2009() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) */;
  %1276 = %1275.1;
  %1277 = cast(%1276, dtype="float64") /* ty=Tensor[(14, 1, 10), float64] */;
  %1278 = log2(%1277) /* ty=Tensor[(14, 1, 10), float64] */;
  %1279 = cast(%var_4640, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  %1280 = shape_of(%1278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1281 = cast(%1278, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  %1282 = dyn.reshape(%1279, %1280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1283 = %1274.0;
  %1284 = minimum(%1281, %1282) /* ty=Tensor[(14, ?, 10), uint16] */;
  (%1283, %1284)
}

def @func_9840() -> (Tensor[(45, 3), int8],) {
  @func_9838() /* ty=(Tensor[(45, 3), int8],) */
}

def @func_3508() -> Tensor[(14, 1, 10), float32] {
  %1285 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1285.0
}

def @func_2009() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), bool]) {
  %1286 = @func_1580() /* ty=(Tensor[(14, 1, 10), float32], int64, Tensor[(1, 16), float64], int64) */;
  %1287 = @func_1187() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1288 = %1287.0;
  %1289 = @func_1748() /* ty=(int64,) */;
  %1290 = %1289.0;
  %1291 = cast(%1288, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %1292 = cast(%1290, dtype="bool") /* ty=bool */;
  %1293 = %1286.0;
  %1294 = greater_equal(%1291, %1292) /* ty=Tensor[(14, 1, 10), bool] */;
  (%1293, %1294)
}

def @func_4320() -> (int64,) {
  %1297 = fn () -> (int64,) {
    %1295 = @func_1859() /* ty=(int64,) */;
    %1296 = %1295.0;
    (%1296,)
  };
  %1297() /* ty=(int64,) */
}

def @func_10414() -> (Tensor[(14, 1, 10), float32],) {
  @func_10412() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_13340() -> (Tensor[(14, 1, 10), float32],) {
  @func_13338() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_12622() -> (int64, Tensor[(14, 1, 10), float32]) {
  %1298 = @func_12366() /* ty=int64 */;
  %1299 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  (%1298, %1299)
}

def @func_4787() -> Tensor[(14, 1, 10), float64] {
  @func_4785() /* ty=Tensor[(14, 1, 10), float64] */
}

def @func_5952() -> int64 {
  %1301 = fn () -> int64 {
    %1300 = @func_1859() /* ty=(int64,) */;
    %1300.0
  };
  %1301() /* ty=int64 */
}

def @func_9457() -> (Tensor[(14, 1, 10), float64],) {
  %1302 = @func_6624() /* ty=(Tensor[(14, 1, 10), float64], Tensor[(5, 15, 16), float64], Tensor[(1200), float64]) */;
  %1303 = %1302.0;
  (%1303,)
}

def @func_7824(%var_7822: Tensor[(14, 14, 10), float32], %var_7823: Tensor[(14, 5, 10), float32]) -> (Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) {
  %1313 = fn (%var_7795: Tensor[(14, 14, 10), float32], %var_7808: Tensor[(14, 5, 10), float32]) -> (Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) {
    %1304 = @func_3040() /* ty=Tensor[(14, 1, 10), float32] */;
    %1305 = cast(%1304, dtype="uint32") /* ty=Tensor[(14, 1, 10), uint32] */;
    %1306 = cast(%var_7795, dtype="uint32") /* ty=Tensor[(14, 14, 10), uint32] */;
    %1307 = cast(%1304, dtype="uint64") /* ty=Tensor[(14, 1, 10), uint64] */;
    %1308 = cast(%var_7808, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
    %1309 = @func_3670() /* ty=(Tensor[(16), float64],) */;
    %1310 = logical_xor(%1305, %1306) /* ty=Tensor[(14, 14, 10), uint32] */;
    %1311 = logical_xor(%1307, %1308) /* ty=Tensor[(14, 5, 10), uint64] */;
    %1312 = %1309.0;
    (%1310, %1311, %1312)
  };
  %1313(%var_7822, %var_7823) /* ty=(Tensor[(14, 14, 10), uint32], Tensor[(14, 5, 10), uint64], Tensor[(16), float64]) */
}

def @func_11552() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(24, 2), float32]) {
  %1320 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(24, 2), float32]) {
    %1314 = @func_8405() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1315 = cast(meta[relay.Constant][80] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
    %1316 = reshape(%1315, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1317 = @func_4603(%1316) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(48), float32], int64) */;
    %1318 = %1314.0;
    %1319 = %1317.0;
    (%1318, %1319, meta[relay.Constant][80] /* ty=Tensor[(24, 2), float32] */)
  };
  %1320() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(24, 2), float32]) */
}

def @func_1803() -> Tensor[(14, 1, 10), float32] {
  @func_1801() /* ty=Tensor[(14, 1, 10), float32] */
}

def @func_12098() -> Tensor[(100), uint32] {
  %1322 = fn () -> Tensor[(100), uint32] {
    %1321 = @func_8127() /* ty=(int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */;
    %1321.5
  };
  %1322() /* ty=Tensor[(100), uint32] */
}

def @func_6261(%var_6259: Tensor[(192), float32]) -> (Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) {
  @func_6258(%var_6259) /* ty=(Tensor[(45, 3), int8], Tensor[(192), float32], Tensor[(6, 4, 8), float32]) */
}

def @func_8022() -> Tensor[(14, 1, 10), float32] {
  %1323 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1323.0
}

def @func_10240() -> int64 {
  %1324 = @func_9036() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(48), float32], int64) */;
  %1324.3
}

def @func_12185() -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) {
  @func_12183() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32]) */
}

def @func_6776() -> (Tensor[(48, 1), float64], Tensor[(48), float32], int64, int64, Tensor[(2, 24), float32]) {
  @func_6774() /* ty=(Tensor[(48, 1), float64], Tensor[(48), float32], int64, int64, Tensor[(2, 24), float32]) */
}

def @func_8655(%var_8653: Tensor[(48, 14), float32]) -> (Tensor[(48, 14), uint64],) {
  @func_8652(%var_8653) /* ty=(Tensor[(48, 14), uint64],) */
}

def @func_4768(%var_4766: Tensor[(2, 16, 12), int8]) -> (Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) {
  @func_4765(%var_4766) /* ty=(Tensor[(2, 16, 12), int8], Tensor[(2, 16, 12), float64]) */
}

def @func_6306(%var_6304: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), bool], Tensor[(14, 1, 10), float32]) {
  @func_6303(%var_6304) /* ty=(Tensor[(14, 16, 10), bool], Tensor[(14, 1, 10), float32]) */
}

def @func_10412() -> (Tensor[(14, 1, 10), float32],) {
  %1325 = @func_8276() /* ty=(Tensor[(14, 1, 10), float32],) */;
  %1326 = %1325.0;
  (%1326,)
}

def @func_4785() -> Tensor[(14, 1, 10), float64] {
  %1327 = @func_3650() /* ty=(Tensor[(14, 1, 10), float64],) */;
  %1327.0
}

def @func_1859() -> (int64,) {
  %1328 = @func_1748() /* ty=(int64,) */;
  %1329 = %1328.0;
  (%1329,)
}

def @func_9709() -> (Tensor[(14, 15, 10), int8], Tensor[(14, 15, 10), int8]) {
  %1332 = fn () -> (Tensor[(14, 15, 10), int8], Tensor[(14, 15, 10), int8]) {
    %1330 = @func_6975() /* ty=Tensor[(14, 15, 10), int8] */;
    %1331 = @func_5441() /* ty=Tensor[(14, 15, 10), int8] */;
    (%1330, %1331)
  };
  %1332() /* ty=(Tensor[(14, 15, 10), int8], Tensor[(14, 15, 10), int8]) */
}

def @func_2738() -> int64 {
  %1334 = fn () -> int64 {
    %1333 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
    %1333.0
  };
  %1334() /* ty=int64 */
}

def @func_12440() -> (Tensor[(12, 12, 6), int16],) {
  @func_12438() /* ty=(Tensor[(12, 12, 6), int16],) */
}

def @func_5394() -> (Tensor[(14, 1, 10), float32],) {
  @func_5392() /* ty=(Tensor[(14, 1, 10), float32],) */
}

def @func_7503() -> (int64, Tensor[(14, 1, 10), float32]) {
  @func_7501() /* ty=(int64, Tensor[(14, 1, 10), float32]) */
}

def @func_6640(%var_6638: Tensor[(7, 16, 6), float32]) -> Tensor[(7, 16, 6), float32] {
  @func_6637(%var_6638) /* ty=Tensor[(7, 16, 6), float32] */
}

def @func_2498(%var_2459: Tensor[(6, 16, 1), int8], %var_2460: Tensor[(6, 16, 4), int8], %var_2471: Tensor[(6, 16, 4), int8]) -> (Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) {
  %1335 = cast(%var_2459, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
  %1336 = cast(%var_2460, dtype="int8") /* ty=Tensor[(6, 16, 4), int8] */;
  %1337 = right_shift(%1335, %1336) /* ty=Tensor[(6, 16, 4), int8] */;
  %1338 = cast(%var_2471, dtype="uint8") /* ty=Tensor[(6, 16, 4), uint8] */;
  %1339 = shape_of(%1337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1340 = cast(%1337, dtype="uint8") /* ty=Tensor[(6, 16, 4), uint8] */;
  %1341 = dyn.reshape(%1338, %1339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1342 = cast(meta[relay.Constant][81] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1343 = reshape(%1342, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %1344 = @func_2351(%1343) /* ty=(Tensor[(14, 1, 10), float32], int64, int64, Tensor[(3, 5, 9), int8], Tensor[(960), float32]) */;
  %1345 = minimum(%1340, %1341) /* ty=Tensor[(6, 16, 4), uint8] */;
  %1346 = %1344.1;
  (%1345, %1346, meta[relay.Constant][81] /* ty=Tensor[(960), float32] */)
}

def @func_8128() -> (int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
  %1357 = fn () -> (int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) {
    %1347 = @func_1603() /* ty=(int64,) */;
    %1348 = @func_7689() /* ty=(Tensor[(16, 11, 12), float64],) */;
    %1349 = cast(meta[relay.Constant][82] /* ty=Tensor[(100), uint32] */, dtype="uint32") /* ty=Tensor[(100), uint32] */;
    %1350 = reshape(%1349, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), uint32] */;
    %1351 = @func_759(%1350) /* ty=(Tensor[(5, 4, 5), bool], Tensor[(5, 4, 5), float64]) */;
    %1352 = %1347.0;
    %1353 = %1348.0;
    %1354 = @func_1178() /* ty=Tensor[(14, 1, 10), float32] */;
    %1355 = @func_8017() /* ty=int64 */;
    %1356 = %1351.0;
    (%1352, %1353, %1354, %1355, %1356, meta[relay.Constant][82] /* ty=Tensor[(100), uint32] */)
  };
  %1357() /* ty=(int64, Tensor[(16, 11, 12), float64], Tensor[(14, 1, 10), float32], int64, Tensor[(5, 4, 5), bool], Tensor[(100), uint32]) */
}

def @func_5676() -> (Tensor[(14, 1, 10), float32], int64) {
  @func_5674() /* ty=(Tensor[(14, 1, 10), float32], int64) */
}

def @func_12504() -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(400), float32], Tensor[(48), float32], int64) {
  %1366 = fn () -> (Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(400), float32], Tensor[(48), float32], int64) {
    %1358 = cast(meta[relay.Constant][83] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
    %1359 = cast(meta[relay.Constant][84] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1360 = reshape(%1358, newshape=[10, 4, 10]) /* ty=Tensor[(10, 4, 10), float32] */;
    %1361 = reshape(%1359, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1362 = @func_4504(%1360, %1361) /* ty=(Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) */;
    %1363 = @func_5379() /* ty=Tensor[(14, 1, 10), float32] */;
    %1364 = %1362.2;
    %1365 = @func_7990() /* ty=int64 */;
    (%1363, %1364, meta[relay.Constant][83] /* ty=Tensor[(400), float32] */, meta[relay.Constant][84] /* ty=Tensor[(48), float32] */, %1365)
  };
  %1366() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(48), float32], Tensor[(400), float32], Tensor[(48), float32], int64) */
}

def @func_2956(%var_2943: Tensor[(900), int8]) -> (Tensor[(6, 1, 8), float32], Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(13, 4, 9), float64], Tensor[(468, 1), float64], int64) {
  %1367 = @func_1940() /* ty=(Tensor[(1, 16), float64], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %1368 = %1367.1;
  %1369 = cast(%1368, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %1370 = reshape(%1369, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1371 = @func_2243(%1370) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(6, 1, 8), float32], Tensor[(48), float32]) */;
  %1372 = cast(%var_2943, dtype="int8") /* ty=Tensor[(900), int8] */;
  %1373 = reshape(%1372, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
  %1374 = @func_522(%1373) /* ty=(Tensor[(15, 10, 6), bool],) */;
  %1375 = cast(meta[relay.Constant][85] /* ty=Tensor[(468, 1), float64] */, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %1376 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1377 = reshape(%1375, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %1378 = reshape(%1376, newshape=[]) /* ty=int64 */;
  %1379 = @func_847(%1377, %1378) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(1, 4, 4), float64], Tensor[(16), float64], int64) */;
  %1380 = %1371.0;
  %1381 = %1374.0;
  %1382 = %1379.0;
  (%1368, %1380, %1381, %var_2943, %1382, meta[relay.Constant][85] /* ty=Tensor[(468, 1), float64] */, -5 /* ty=int64 */)
}

def @func_13839() -> (Tensor[(14, 1, 10), float32], int64) {
  %1383 = @func_10368() /* ty=(Tensor[(14, 1, 10), float32], Tensor[(16, 11, 12), int64], int64) */;
  %1384 = %1383.0;
  %1385 = @func_5951() /* ty=int64 */;
  (%1384, %1385)
}

def @func_3030(%var_3029: Tensor[(900), int8]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) {
  %1394 = fn (%var_3026: Tensor[(900), int8]) -> (int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) {
    %1386 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
    %1387 = @func_1984() /* ty=(int64, Tensor[(14, 1, 10), float32]) */;
    %1388 = cast(%var_3026, dtype="int8") /* ty=Tensor[(900), int8] */;
    %1389 = reshape(%1388, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), int8] */;
    %1390 = @func_522(%1389) /* ty=(Tensor[(15, 10, 6), bool],) */;
    %1391 = %1386.0;
    %1392 = %1387.1;
    %1393 = %1390.0;
    (%1391, %1392, %1393, %var_3026)
  };
  %1394(%var_3029) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(15, 10, 6), bool], Tensor[(900), int8]) */
}

def @func_7501() -> (int64, Tensor[(14, 1, 10), float32]) {
  %1395 = @func_1859() /* ty=(int64,) */;
  %1396 = %1395.0;
  %1397 = @func_4910() /* ty=Tensor[(14, 1, 10), float32] */;
  (%1396, %1397)
}

def @func_1801() -> Tensor[(14, 1, 10), float32] {
  %1398 = @func_1674() /* ty=(int64, int64, Tensor[(15, 10, 6), bool], Tensor[(900), int8], Tensor[(14, 1, 10), float32]) */;
  %1398.4
}

def @func_12867(%var_12849: Tensor[(8, 12), int8], %var_12850: Tensor[(384), int8]) -> (int64, Tensor[(960), float32], Tensor[(8, 12), int8], Tensor[(384), int8], Tensor[(16), float64]) {
  %1399 = @func_3925() /* ty=(int64,) */;
  %1400 = cast(%var_12849, dtype="int8") /* ty=Tensor[(8, 12), int8] */;
  %1401 = cast(%var_12850, dtype="int8") /* ty=Tensor[(384), int8] */;
  %1402 = cast(%var_12850, dtype="int8") /* ty=Tensor[(384), int8] */;
  %1403 = reshape(%1400, newshape=[6, 16, 1]) /* ty=Tensor[(6, 16, 1), int8] */;
  %1404 = reshape(%1401, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %1405 = reshape(%1402, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), int8] */;
  %1406 = @func_2498(%1403, %1404, %1405) /* ty=(Tensor[(6, 16, 4), uint8], int64, Tensor[(960), float32]) */;
  %1407 = @func_3670() /* ty=(Tensor[(16), float64],) */;
  %1408 = %1399.0;
  %1409 = %1406.2;
  %1410 = %1407.0;
  (%1408, %1409, %var_12849, %var_12850, %1410)
}

def @func_9459() -> (Tensor[(14, 1, 10), float64],) {
  @func_9457() /* ty=(Tensor[(14, 1, 10), float64],) */
}

def @func_4504(%var_4472: Tensor[(10, 4, 10), float32], %var_4501: Tensor[(48), float32]) -> (Tensor[(10, 4, 10), float32], int64, Tensor[(48), float32]) {
  %1411 = cast(meta[relay.Constant][86] /* ty=Tensor[(10, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 10), float32] */;
  %1412 = shape_of(%var_4472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1413 = cast(%var_4472, dtype="float32") /* ty=Tensor[(10, 4, 10), float32] */;
  %1414 = dyn.reshape(%1411, %1412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1415 = cast(%var_4501, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1416 = reshape(%1415, newshape=[24, 2]) /* ty=Tensor[(24, 2), float32] */;
  %1417 = @func_4398(%1416) /* ty=(int64, Tensor[(14, 1, 10), float32], Tensor[(3, 5, 9), int8], Tensor[(24, 2), float32], int64) */;
  %1418 = divide(%1413, %1414) /* ty=Tensor[(10, 4, 10), float32] */;
  %1419 = %1417.0;
  (%1418, %1419, %var_4501)
}

def @func_525(%var_523: Tensor[(15, 10, 6), int8]) -> (Tensor[(15, 10, 6), bool],) {
  @func_522(%var_523) /* ty=(Tensor[(15, 10, 6), bool],) */
}

def @func_12251() -> (int64, Tensor[(468), float64], Tensor[(468), float64]) {
  @func_12249() /* ty=(int64, Tensor[(468), float64], Tensor[(468), float64]) */
}

def @func_1432(%var_1430: Tensor[(16), float64], %var_1431: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) {
  %1434 = fn (%var_1414: Tensor[(16), float64], %var_1415: int64) -> (Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) {
    %1420 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1421 = @func_1140() /* ty=(Tensor[(14, 1, 10), float32],) */;
    %1422 = cast(meta[relay.Constant][87] /* ty=Tensor[(91, 6), int8] */, dtype="int8") /* ty=Tensor[(91, 6), int8] */;
    %1423 = reshape(%1422, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
    %1424 = @func_341(%1423) /* ty=(Tensor[(7, 13, 6), int8],) */;
    %1425 = cast(%var_1414, dtype="float64") /* ty=Tensor[(16), float64] */;
    %1426 = cast(%var_1415, dtype="int64") /* ty=int64 */;
    %1427 = reshape(%1425, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %1428 = reshape(%1426, newshape=[]) /* ty=int64 */;
    %1429 = @func_386(%1427, %1428) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(16, 11, 12), int64], int64) */;
    %1430 = %1420.0;
    %1431 = %1421.0;
    %1432 = %1424.0;
    %1433 = %1429.2;
    (%1430, %1431, %1432, meta[relay.Constant][87] /* ty=Tensor[(91, 6), int8] */, %1433, %var_1414, %var_1415)
  };
  %1434(%var_1430, %var_1431) /* ty=(Tensor[(14, 1, 10), float32], Tensor[(14, 1, 10), float32], Tensor[(7, 13, 6), int8], Tensor[(91, 6), int8], int64, Tensor[(16), float64], int64) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen789/build/output.py", line 4671, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:12:51] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

