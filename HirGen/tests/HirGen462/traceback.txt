==========mod==========
#[version = "0.0.5"]
def @func_2501(%var_2478: Tensor[(14, 9, 15), bool]) -> Tensor[(14, 9, 15), float32] {
  %0 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %1 = cast(%var_2478, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%3, %4) /* ty=Tensor[(14, 9, 15), float32] */
}

def @func_8601() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) {
  %5 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
  %6 = @func_7212() /* ty=Tensor[(2, 3, 16), float32] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(2, 3, 16), float32] */;
  %8 = %5.1;
  %9 = @func_7080() /* ty=Tensor[(14, 9, 15), bool] */;
  %10 = rsqrt(%7) /* ty=Tensor[(2, 3, 16), float32] */;
  (%8, %9, %10)
}

def @func_2833() -> Tensor[(2, 3, 16), float64] {
  @func_2552() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_3004(%var_2999: Tensor[(2, 16, 7), uint64]) -> Tensor[(2, 16, 7), uint64] {
  %11 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %12 = cast(%var_2999, dtype="uint64") /* ty=Tensor[(2, 16, 7), uint64] */;
  add(%11, %12) /* ty=Tensor[(2, 16, 7), uint64] */
}

def @func_6369() -> (Tensor[(14, 9, 15), bool],) {
  %13 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %14 = %13.0;
  (%14,)
}

def @func_1517(%var_1485: Tensor[(39, 4), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) {
  %15 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %16 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %17 = cast(%var_1485, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %18 = reshape(%17, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %21 = reshape(%19, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float64] */;
  %22 = reshape(%20, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float64] */;
  %23 = @func_255(%21, %22) /* ty=(Tensor[(7, 6, 15), float64],) */;
  %24 = %15.0;
  %25 = %16.0;
  %26 = @func_1211(%18) /* ty=Tensor[(1, 13, 12), float64] */;
  %27 = %23.0;
  (%24, %25, %26, %var_1485, %27, meta[relay.Constant][1] /* ty=Tensor[(630), float64] */)
}

def @func_7555() -> (Tensor[(2, 3, 16), float64],) {
  %28 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%28,)
}

def @func_7006() -> Tensor[(2, 3, 16), float32] {
  %29 = @func_4094() /* ty=(Tensor[(2, 3, 16), float32],) */;
  %29.0
}

def @func_4880(%var_4861: Tensor[(3, 15, 2), int8]) -> Tensor[(3, 15, 2), bool] {
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %31 = shape_of(%var_4861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_4861, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%32, %33) /* ty=Tensor[(3, 15, 2), bool] */
}

def @func_2611() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) {
  %34 = @func_2020() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %35 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
  %37 = %34.0;
  %38 = acosh(%36) /* ty=Tensor[(14, 9, 15), float32] */;
  (%37, %38)
}

def @func_6475() -> (Tensor[(2, 3, 16), float64], Tensor[(325), float64]) {
  %39 = @func_6308() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %40 = %39.0;
  %41 = @func_6033() /* ty=Tensor[(325), float64] */;
  (%40, %41)
}

def @func_1345() -> Tensor[(2, 3, 16), float64] {
  %42 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %42.0
}

def @func_2408(%var_2392: Tensor[(13, 5, 5), float64]) -> (Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) {
  %43 = cast(%var_2392, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %44 = acos(%43) /* ty=Tensor[(13, 5, 5), float64] */;
  %45 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  (%44, %45)
}

def @func_1211(%var_1192: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
  %46 = cast(%var_1192, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  asinh(%46) /* ty=Tensor[(1, 13, 12), float64] */
}

def @func_3802() -> (Tensor[(14, 9, 15), float64],) {
  %47 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %48 = %47.0;
  (%48,)
}

def @func_6411() -> (Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), bool]) {
  %49 = @func_3226() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) */;
  %50 = @func_6290() /* ty=Tensor[(2, 3, 16), float64] */;
  %51 = %49.1;
  (%50, %51)
}

def @func_1725() -> (int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) {
  %52 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 52), float64] */, dtype="float64") /* ty=Tensor[(3, 52), float64] */;
  %54 = reshape(%53, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float64] */;
  %55 = %52.1;
  %56 = @func_1211(%54) /* ty=Tensor[(1, 13, 12), float64] */;
  (%55, %56, meta[relay.Constant][3] /* ty=Tensor[(3, 52), float64] */)
}

def @func_6356(%var_6348: Tensor[(7, 1, 10), float64]) -> (Tensor[(7, ?, 10), int64],) {
  %57 = cast(%var_6348, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %58 = sinh(%57) /* ty=Tensor[(7, 1, 10), float64] */;
  %59 = cast(%var_6348, dtype="int64") /* ty=Tensor[(7, 1, 10), int64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="int64") /* ty=Tensor[(7, 1, 10), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %63 = multiply(%61, %62) /* ty=Tensor[(7, ?, 10), int64] */;
  (%63,)
}

def @func_7754() -> Tensor[(14, 9, 15), bool] {
  %64 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %64.0
}

def @func_7179() -> (int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) {
  %65 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %67 = reshape(%66, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), float64] */;
  %68 = @func_5422(%67) /* ty=(Tensor[(14, 11, 1), float64],) */;
  %69 = %68.0;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %71 = asin(%70) /* ty=Tensor[(14, 11, 1), float64] */;
  %72 = cast(%69, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %76 = %65.3;
  %77 = @func_3358() /* ty=Tensor[(14, 9, 15), bool] */;
  %78 = mod(%74, %75) /* ty=Tensor[(14, 11, ?), float32] */;
  (%76, meta[relay.Constant][4] /* ty=Tensor[(154), float64] */, %77, %78)
}

def @func_1660() -> Tensor[(2, 3, 16), float64] {
  %79 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %79.0
}

def @func_6846() -> (Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) {
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 4, 10), float64] */;
  %81 = @func_4165() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) */;
  %82 = sqrt(%80) /* ty=Tensor[(8, 4, 10), float64] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_3607() -> (Tensor[(14, 9, 15), bool],) {
  %84 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
  (%84,)
}

def @func_7080() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_4094() -> (Tensor[(2, 3, 16), float32],) {
  %85 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(2, 3, 16), float32] */;
  %88 = sigmoid(%87) /* ty=Tensor[(2, 3, 16), float32] */;
  (%88,)
}

def @func_8074(%var_8068: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
  %89 = cast(%var_8068, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  sin(%89) /* ty=Tensor[(6, 3, 3), float64] */
}

def @func_4709(%var_4702: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %90 = cast(%var_4702, dtype="float64") /* ty=Tensor[(90), float64] */;
  %91 = reshape(%90, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %92 = @func_3063(%91) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %93 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
  %94 = %92.0;
  (%93, %94, %var_4702)
}

def @func_9191() -> (Tensor[(14, 9, 15), bool],) {
  %95 = @func_6171() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %96 = %95.0;
  (%96,)
}

def @func_7223() -> Tensor[(2, 3, 16), float64] {
  %97 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %97.0
}

def @func_9225() -> (Tensor[(14, 9, 15), bool], Tensor[(5, 11, 14), float32]) {
  %98 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %100 = asin(%99) /* ty=Tensor[(5, 11, 14), float64] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
  %102 = log10(%101) /* ty=Tensor[(5, 11, 14), float32] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
  %104 = %98.1;
  %105 = acosh(%103) /* ty=Tensor[(5, 11, 14), float32] */;
  (%104, %105)
}

def @func_10563(%var_10554: Tensor[(351), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(3, 9, 13), bool], Tensor[(351), float64]) {
  %106 = cast(%var_10554, dtype="float64") /* ty=Tensor[(351), float64] */;
  %107 = cast(%var_10554, dtype="float64") /* ty=Tensor[(351), float64] */;
  %108 = reshape(%106, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), float64] */;
  %109 = reshape(%107, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), float64] */;
  %110 = @func_8421(%108, %109) /* ty=(Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) */;
  %111 = @func_1345() /* ty=Tensor[(2, 3, 16), float64] */;
  %112 = %110.0;
  (%111, %112, %var_10554)
}

def @func_7898(%var_7878: Tensor[(360), float64]) -> (Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) {
  %113 = @func_3226() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) */;
  %114 = %113.1;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 6, 5), bool] */, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%114, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %119 = @func_6754() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) */;
  %120 = cast(%var_7878, dtype="float64") /* ty=Tensor[(360), float64] */;
  %121 = cast(meta[relay.Constant][8] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %122 = reshape(%120, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
  %123 = reshape(%121, newshape=[]) /* ty=int8 */;
  %124 = @func_1076(%122, %123) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) */;
  %125 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %126 = left_shift(%117, %118) /* ty=Tensor[(3, 6, 5), int16] */;
  %127 = %119.6;
  %128 = %124.3;
  %129 = %125.0;
  (%126, %127, %128, %var_7878, meta[relay.Constant][8] /* ty=int8 */, %129)
}

def @func_4214(%var_4175: Tensor[(8, 1, 11), int8], %var_4176: Tensor[(8, 2, 11), int8], %var_4196: Tensor[(8, 2, 11), int8]) -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), float32]) {
  %130 = cast(%var_4175, dtype="bool") /* ty=Tensor[(8, 1, 11), bool] */;
  %131 = cast(%var_4176, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %132 = cast(%var_4196, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %133 = shape_of(%var_4176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%var_4176, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %136 = less(%130, %131) /* ty=Tensor[(8, 2, 11), bool] */;
  %137 = floor_mod(%134, %135) /* ty=Tensor[(8, 2, 11), float32] */;
  (%136, %137)
}

def @func_2300() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %138 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %139 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %140 = %138.0;
  %141 = %139.0;
  (%140, %141)
}

def @func_3792() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) {
  %142 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %143 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %145 = %142.0;
  %146 = rsqrt(%144) /* ty=Tensor[(14, 9, 15), float64] */;
  (%145, %146)
}

def @func_8667() -> (Tensor[(2, 3, 16), float64],) {
  %147 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
  (%147,)
}

def @func_4291() -> (int8, Tensor[(14, 9, 15), bool]) {
  %148 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %149 = %148.1;
  %150 = @func_1575() /* ty=Tensor[(14, 9, 15), bool] */;
  (%149, %150)
}

def @func_4690(%var_4685: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), float64],) {
  %151 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
  %152 = cast(%var_4685, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %156 = mod(%154, %155) /* ty=Tensor[(14, 9, 15), float64] */;
  (%156,)
}

def @func_10095() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32], Tensor[(1890), bool], Tensor[(15, 13, 2), uint64], int8) {
  %157 = @func_8667() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %158 = cast(meta[relay.Constant][9] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %159 = reshape(%158, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %160 = cast(meta[relay.Constant][10] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %161 = reshape(%160, newshape=[]) /* ty=int8 */;
  %162 = @func_4664(%161) /* ty=(Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %163 = %157.0;
  %164 = @func_2501(%159) /* ty=Tensor[(14, 9, 15), float32] */;
  %165 = %162.0;
  (%163, %164, meta[relay.Constant][9] /* ty=Tensor[(1890), bool] */, %165, meta[relay.Constant][10] /* ty=int8 */)
}

def @func_3480(%var_3464: uint16, %var_3465: Tensor[(6, 4, 14), uint16]) -> Tensor[(6, 4, 14), bool] {
  %166 = cast(%var_3464, dtype="bool") /* ty=bool */;
  %167 = cast(%var_3465, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  greater(%166, %167) /* ty=Tensor[(6, 4, 14), bool] */
}

def @func_2005() -> (Tensor[(14, 9, 15), bool],) {
  %168 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  (%168,)
}

def @func_1181(%var_1172: uint8, %var_1173: Tensor[(12, 3, 3), uint8]) -> (Tensor[(12, 3, 3), bool],) {
  %169 = cast(%var_1172, dtype="bool") /* ty=bool */;
  %170 = cast(%var_1173, dtype="bool") /* ty=Tensor[(12, 3, 3), bool] */;
  %171 = less_equal(%169, %170) /* ty=Tensor[(12, 3, 3), bool] */;
  (%171,)
}

def @func_7399() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %172 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %173 = @func_2454() /* ty=Tensor[(14, 9, 15), bool] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_1575() -> Tensor[(14, 9, 15), bool] {
  %175 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %175.0
}

def @func_4065(%var_4032: Tensor[(336), uint16]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16], Tensor[(1890), int64], Tensor[(6, 4, 14), bool], Tensor[(?, 6, 3), bool], Tensor[(2, 3, 16), float64], Tensor[(728), int8]) {
  %176 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %177 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %178 = cast(%var_4032, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %179 = reshape(%177, newshape=[]) /* ty=uint16 */;
  %180 = reshape(%178, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %182 = reshape(%181, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %183 = @func_2501(%182) /* ty=Tensor[(14, 9, 15), float32] */;
  %184 = cast(%183, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
  %185 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(1890), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(1890), bool] */, dtype="int64") /* ty=Tensor[(1890), int64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), int64] */;
  %188 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %189 = @func_3480(%179, %180) /* ty=Tensor[(6, 4, 14), bool] */;
  %190 = cast(%189, dtype="uint16") /* ty=Tensor[(6, 4, 14), uint16] */;
  %191 = reshape(%188, newshape=[]) /* ty=uint16 */;
  %192 = reshape(%190, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %193 = cast(meta[relay.Constant][13] /* ty=Tensor[(728), int8] */, dtype="int8") /* ty=Tensor[(728), int8] */;
  %194 = reshape(%193, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int8] */;
  %195 = @func_3121(%194) /* ty=(Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %196 = %176.1;
  %197 = right_shift(%186, %187) /* ty=Tensor[(1890), int64] */;
  %198 = @func_3480(%191, %192) /* ty=Tensor[(6, 4, 14), bool] */;
  %199 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
  %200 = %195.2;
  (%196, %189, meta[relay.Constant][11] /* ty=uint16 */, %var_4032, %197, %198, %199, %200, meta[relay.Constant][13] /* ty=Tensor[(728), int8] */)
}

def @func_10424() -> Tensor[(14, 9, 15), bool] {
  @func_3818() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_8940(%var_8907: Tensor[(8, 4, 10), float64], %var_8922: Tensor[(455), int16]) -> (Tensor[(8, 4, 10), uint64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(2, 3, 16), float64]) {
  %201 = @func_6846() /* ty=(Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) */;
  %202 = %201.0;
  %203 = cast(%var_8907, dtype="uint64") /* ty=Tensor[(8, 4, 10), uint64] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="uint64") /* ty=Tensor[(8, 4, 10), uint64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %207 = cast(%var_8922, dtype="int16") /* ty=Tensor[(455), int16] */;
  %208 = reshape(%207, newshape=[455, 1]) /* ty=Tensor[(455, 1), int16] */;
  %209 = @func_6143(%208) /* ty=(int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) */;
  %210 = @func_8667() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %211 = logical_xor(%205, %206) /* ty=Tensor[(8, 4, 10), uint64] */;
  %212 = %209.1;
  %213 = %210.0;
  (%211, %212, %var_8922, %213)
}

def @func_6171() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %214 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %215 = %214.1;
  %216 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  (%215, %216)
}

def @func_2171(%var_2110: Tensor[(3, 7, 14), float32], %var_2162: Tensor[(390), uint64], %var_2167: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float32], Tensor[(1, 13, 12), float64], Tensor[(156), float64], Tensor[(15, 13, 2), float64], Tensor[(390), uint64], Tensor[(3, 7, 14), uint32]) {
  %217 = cast(%var_2110, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
  %218 = cast(meta[relay.Constant][14] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %219 = reshape(%218, newshape=[39, 4]) /* ty=Tensor[(39, 4), float64] */;
  %220 = @func_1517(%219) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) */;
  %221 = cast(%var_2162, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %222 = reshape(%221, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), uint64] */;
  %223 = cast(%var_2110, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %224 = cosh(%223) /* ty=Tensor[(3, 7, 14), float64] */;
  %225 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(3, 7, 14), uint32] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="uint32") /* ty=Tensor[(3, 7, 14), uint32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %229 = acos(%217) /* ty=Tensor[(3, 7, 14), float32] */;
  %230 = %220.2;
  %231 = @func_2086(%222) /* ty=Tensor[(15, 13, 2), float64] */;
  %232 = left_shift(%227, %228) /* ty=Tensor[(3, 7, 14), uint32] */;
  (%229, %230, meta[relay.Constant][14] /* ty=Tensor[(156), float64] */, %231, %var_2162, %232)
}

def @func_3226() -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) {
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %234 = reshape(%233, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %235 = @func_3063(%234) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %236 = %235.0;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(3, 6, 5), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = @func_1575() /* ty=Tensor[(14, 9, 15), bool] */;
  %242 = greater(%239, %240) /* ty=Tensor[(3, 6, 5), bool] */;
  (%241, %242)
}

def @func_10348(%var_10344: Tensor[(13, 6, 8), float32]) -> Tensor[(13, 6, 8), float32] {
  %243 = cast(%var_10344, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %244 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%245, %246) /* ty=Tensor[(13, 6, 8), float32] */
}

def @func_1262() -> Tensor[(2, 3, 16), float64] {
  %247 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %247.0
}

def @func_4591() -> (Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) {
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %249 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(6, 9, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %253 = less_equal(%250, %251) /* ty=Tensor[(6, 9, 3), bool] */;
  %254 = %252.0;
  (%253, %254)
}

def @func_888() -> (Tensor[(2, 3, 16), float64],) {
  %255 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 16), float64] */;
  %256 = atan(%255) /* ty=Tensor[(2, 3, 16), float64] */;
  (%256,)
}

def @func_8507() -> (Tensor[(2, 3, 16), float64], Tensor[(7, 10, 11), int32]) {
  %257 = @func_3792() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) */;
  %258 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %259 = exp(%258) /* ty=Tensor[(7, 10, 11), float32] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %261 = acos(%260) /* ty=Tensor[(7, 10, 11), float32] */;
  %262 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 10, 11), float32] */, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %266 = %257.0;
  %267 = right_shift(%264, %265) /* ty=Tensor[(7, 10, 11), int32] */;
  (%266, %267)
}

def @func_3358() -> Tensor[(14, 9, 15), bool] {
  @func_1877() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_6928() -> (Tensor[(14, 9, 15), bool],) {
  %268 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %269 = %268.0;
  (%269,)
}

def @func_1877() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @main(%var_10765: Tensor[(4, 2, 6), int8], %var_10766: Tensor[(4, 2, 6), int8]) -> (Tensor[(4, 2, 6), int8],) {
  %270 = cast(%var_10766, dtype="int8") /* ty=Tensor[(4, 2, 6), int8] */;
  %271 = shape_of(%var_10765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_10765, dtype="int8") /* ty=Tensor[(4, 2, 6), int8] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %274 = subtract(%272, %273) /* ty=Tensor[(4, 2, 6), int8] */;
  (%274,)
}

def @func_8193() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_4491() -> Tensor[(2, 3, 16), float64] {
  %275 = @func_4165() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) */;
  %275.0
}

def @func_1412() -> Tensor[(2, 3, 16), float64] {
  @func_1262() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_932(%var_922: Tensor[(15, 13, 2), int32]) -> (Tensor[(15, 13, 2), uint64],) {
  %276 = cast(%var_922, dtype="bool") /* ty=Tensor[(15, 13, 2), bool] */;
  %277 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 13, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 13, 2), int32] */, dtype="bool") /* ty=Tensor[(15, 13, 2), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = less_equal(%278, %279) /* ty=Tensor[(15, 13, 2), bool] */;
  %281 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 13, 2), int32] */, dtype="uint64") /* ty=Tensor[(15, 13, 2), uint64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="uint64") /* ty=Tensor[(15, 13, 2), uint64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %285 = add(%283, %284) /* ty=Tensor[(15, 13, 2), uint64] */;
  (%285,)
}

def @func_2225() -> Tensor[(14, 9, 15), bool] {
  %286 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %286.0
}

def @func_10676() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(2184), float32], Tensor[(13), float64]) {
  %287 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %288 = @func_4094() /* ty=(Tensor[(2, 3, 16), float32],) */;
  %289 = cast(meta[relay.Constant][22] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %290 = reshape(%289, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), float64] */;
  %291 = @func_2238(%290) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) */;
  %292 = %287.1;
  %293 = %288.0;
  %294 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %295 = %291.2;
  (%292, %293, %294, %295, meta[relay.Constant][22] /* ty=Tensor[(13), float64] */)
}

def @func_8097() -> uint8 {
  %296 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
  %296.3
}

def @func_337(%var_324: Tensor[(6, 15, 5), uint8], %var_325: Tensor[(6, 15, 5), uint8], %var_333: Tensor[(6, 15, 5), bool]) -> (Tensor[(6, 15, 5), float32],) {
  %297 = cast(%var_325, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
  %298 = shape_of(%var_324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_324, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = not_equal(%299, %300) /* ty=Tensor[(6, 15, 5), bool] */;
  %302 = cast(%var_333, dtype="float32") /* ty=Tensor[(6, 15, 5), float32] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="float32") /* ty=Tensor[(6, 15, 5), float32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %306 = divide(%304, %305) /* ty=Tensor[(6, 15, 5), float32] */;
  (%306,)
}

def @func_4664(%var_4638: int8) -> (Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %307 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %308 = cast(%var_4638, dtype="int8") /* ty=int8 */;
  %309 = reshape(%308, newshape=[]) /* ty=int8 */;
  %310 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %311 = %307.1;
  %312 = @func_232(%309) /* ty=Tensor[(14, 9, 15), bool] */;
  %313 = %310.0;
  %314 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
  (%311, %312, %var_4638, %313, %314)
}

def @func_3322() -> Tensor[(10, 1, 9), uint64] {
  %315 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %316 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 1, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 1, 9), uint64] */;
  bitwise_or(%315, %316) /* ty=Tensor[(10, 1, 9), uint64] */
}

def @func_6024(%var_6020: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) {
  %317 = @func_3607() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %318 = cast(%var_6020, dtype="float64") /* ty=Tensor[(90), float64] */;
  %319 = reshape(%318, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %320 = @func_5368(%319) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) */;
  %321 = %317.0;
  %322 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  %323 = %320.0;
  (%321, %322, %323, %var_6020)
}

def @func_10472(%var_10463: Tensor[(360), float64]) -> (Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64]) {
  %324 = cast(%var_10463, dtype="float64") /* ty=Tensor[(360), float64] */;
  %325 = reshape(%324, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %326 = @func_7898(%325) /* ty=(Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) */;
  %327 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %328 = %326.4;
  (%327, %328, %var_10463)
}

def @func_10210() -> Tensor[(2, 3, 16), float64] {
  %329 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %329.0
}

def @func_6683(%var_6681: Tensor[(1, 80), uint64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 10, 4), bool], Tensor[(1, 80), uint64]) {
  %330 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %331 = cast(%var_6681, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %332 = cast(%var_6681, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %333 = reshape(%331, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %334 = reshape(%332, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %335 = %330.0;
  %336 = @func_1848(%333, %334) /* ty=Tensor[(2, 10, 4), bool] */;
  (%335, %336, %var_6681)
}

def @func_8421(%var_8406: Tensor[(3, 9, 13), float64], %var_8416: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) {
  %337 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 9, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %338 = shape_of(%var_8406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_8406, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = cast(%var_8416, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %342 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 9, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %345 = greater_equal(%339, %340) /* ty=Tensor[(3, 9, 13), bool] */;
  %346 = power(%343, %344) /* ty=Tensor[(3, 9, 13), float64] */;
  (%345, %346)
}

def @func_5517() -> Tensor[(14, 9, 15), bool] {
  %347 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %347.0
}

def @func_9796() -> (int8,) {
  %348 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %349 = %348.3;
  (%349,)
}

def @func_10246() -> Tensor[(2, 3, 16), float64] {
  %350 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %350.0
}

def @func_5191() -> Tensor[(3, 6, 5), float64] {
  %351 = @func_3964() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) */;
  %351.2
}

def @func_8774() -> (Tensor[(2, 3, 16), float32],) {
  %352 = @func_7006() /* ty=Tensor[(2, 3, 16), float32] */;
  (%352,)
}

def @func_3550() -> (Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) {
  %353 = cast(meta[relay.Constant][26] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %354 = cast(meta[relay.Constant][26] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %355 = reshape(%353, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %356 = reshape(%354, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %357 = @func_548(%355, %356) /* ty=(Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) */;
  %358 = cast(meta[relay.Constant][27] /* ty=Tensor[(325), float64] */, dtype="float64") /* ty=Tensor[(325), float64] */;
  %359 = reshape(%358, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float64] */;
  %360 = @func_2408(%359) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) */;
  %361 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  %362 = %357.0;
  %363 = %360.0;
  %364 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
  (%361, %362, meta[relay.Constant][26] /* ty=Tensor[(2184), float32] */, %363, meta[relay.Constant][27] /* ty=Tensor[(325), float64] */, %364)
}

def @func_3964() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) {
  %365 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %366 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
  %367 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 14, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %370 = floor_mod(%368, %369) /* ty=Tensor[(6, 14, 11), float32] */;
  %371 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
  %376 = @func_1262() /* ty=Tensor[(2, 3, 16), float64] */;
  %377 = %365.1;
  %378 = less_equal(%373, %374) /* ty=Tensor[(6, 14, 11), bool] */;
  (%375, %376, %377, %378)
}

def @func_6290() -> Tensor[(2, 3, 16), float64] {
  %379 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
  %379.5
}

def @func_8148() -> (Tensor[(2, 3, 16), float64],) {
  %380 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
  (%380,)
}

def @func_2387() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %381 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %382 = @func_1660() /* ty=Tensor[(2, 3, 16), float64] */;
  %383 = %381.0;
  (%382, %383)
}

def @func_10716(%var_10710: float64) -> (Tensor[(14, 9, 15), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 1, 1), bool], float64, Tensor[(2, 1), float64]) {
  %384 = @func_3802() /* ty=(Tensor[(14, 9, 15), float64],) */;
  %385 = cast(%var_10710, dtype="float64") /* ty=float64 */;
  %386 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %387 = reshape(%385, newshape=[]) /* ty=float64 */;
  %388 = reshape(%386, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float64] */;
  %389 = @func_7494(%387, %388) /* ty=(Tensor[(2, 1, 1), bool],) */;
  %390 = %384.0;
  %391 = @func_5517() /* ty=Tensor[(14, 9, 15), bool] */;
  %392 = %389.0;
  (%390, %391, %392, %var_10710, meta[relay.Constant][30] /* ty=Tensor[(2, 1), float64] */)
}

def @func_6453() -> (Tensor[(1, 390), int32],) {
  %393 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
  %394 = %393.2;
  (%394,)
}

def @func_10651(%var_10639: Tensor[(360), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(360), float64]) {
  %395 = @func_8311() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %396 = cast(%var_10639, dtype="float64") /* ty=Tensor[(360), float64] */;
  %397 = reshape(%396, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %398 = @func_7898(%397) /* ty=(Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) */;
  %399 = %395.0;
  %400 = @func_7006() /* ty=Tensor[(2, 3, 16), float32] */;
  %401 = %398.1;
  (%399, %400, %401, %var_10639)
}

def @func_6603(%var_6589: Tensor[(1, 1890), bool]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) {
  %402 = cast(meta[relay.Constant][31] /* ty=Tensor[(450), uint8] */, dtype="uint8") /* ty=Tensor[(450), uint8] */;
  %403 = cast(meta[relay.Constant][31] /* ty=Tensor[(450), uint8] */, dtype="uint8") /* ty=Tensor[(450), uint8] */;
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(450), uint8] */, dtype="bool") /* ty=Tensor[(450), bool] */;
  %405 = reshape(%402, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
  %406 = reshape(%403, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
  %407 = reshape(%404, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), bool] */;
  %408 = @func_337(%405, %406, %407) /* ty=(Tensor[(6, 15, 5), float32],) */;
  %409 = cast(%var_6589, dtype="bool") /* ty=Tensor[(1, 1890), bool] */;
  %410 = reshape(%409, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %411 = @func_3999() /* ty=(Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) */;
  %412 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
  %413 = %408.0;
  %414 = @func_2501(%410) /* ty=Tensor[(14, 9, 15), float32] */;
  %415 = %411.1;
  (%412, %413, meta[relay.Constant][31] /* ty=Tensor[(450), uint8] */, %414, %var_6589, %415)
}

def @func_3373(%var_3366: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
  %416 = cast(%var_3366, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
  cos(%416) /* ty=Tensor[(1, 8, 14), float64] */
}

def @func_9883() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %417 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %418 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %419 = %417.0;
  %420 = %418.0;
  (%419, %420)
}

def @func_6545(%var_6501: Tensor[(1, 3, 10), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(8, 42), bool], Tensor[(?, 3, 10), float32]) {
  %421 = @func_3607() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %422 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 42), uint8] */, dtype="uint8") /* ty=Tensor[(8, 42), uint8] */;
  %423 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 42), uint8] */, dtype="uint8") /* ty=Tensor[(8, 42), uint8] */;
  %424 = reshape(%422, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint8] */;
  %425 = reshape(%423, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint8] */;
  %426 = @func_5011(%424, %425) /* ty=Tensor[(12, 2, 14), uint8] */;
  %427 = cast(%426, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %428 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(8, 42), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %429 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 42), uint8] */, dtype="bool") /* ty=Tensor[(8, 42), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %431 = cast(%var_6501, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
  %432 = cosh(%431) /* ty=Tensor[(1, 3, 10), float64] */;
  %433 = cast(%var_6501, dtype="bool") /* ty=Tensor[(1, 3, 10), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(1, 3, 10), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = greater_equal(%435, %436) /* ty=Tensor[(?, 3, 10), bool] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(?, 3, 10), float32] */;
  %439 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%432, dtype="float32") /* ty=Tensor[(1, 3, 10), float32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %442 = %421.0;
  %443 = logical_or(%429, %430) /* ty=Tensor[(8, 42), bool] */;
  %444 = multiply(%440, %441) /* ty=Tensor[(?, 3, 10), float32] */;
  (%442, %443, %444)
}

def @func_7212() -> Tensor[(2, 3, 16), float32] {
  @func_7006() /* ty=Tensor[(2, 3, 16), float32] */
}

def @func_9438() -> Tensor[(2, 3, 16), float64] {
  %445 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %445.0
}

def @func_548(%var_535: Tensor[(12, 14, 13), float32], %var_536: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) {
  %446 = cast(%var_536, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
  %447 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_535, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %450 = cast(%var_536, dtype="int16") /* ty=Tensor[(12, 14, 13), int16] */;
  %451 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_535, dtype="int16") /* ty=Tensor[(12, 14, 13), int16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %454 = power(%448, %449) /* ty=Tensor[(12, 14, 13), float32] */;
  %455 = multiply(%452, %453) /* ty=Tensor[(12, 14, 13), int16] */;
  (%454, %455)
}

def @func_10189() -> (Tensor[(2, 3, 16), float64], uint8) {
  %456 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %457 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
  %458 = %456.0;
  %459 = %457.3;
  (%458, %459)
}

def @func_7991() -> Tensor[(14, 9, 15), bool] {
  @func_7080() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1170() -> (Tensor[(2, 3, 16), float64],) {
  %460 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %461 = %460.0;
  (%461,)
}

def @func_5442() -> (Tensor[(2, 3, 16), float64],) {
  %462 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %463 = %462.1;
  (%463,)
}

def @func_5485(%var_5453: Tensor[(14, 13, 9), int16]) -> (Tensor[(14, 13, 9), int16], Tensor[(390), int32]) {
  %464 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 13, 9), int16] */, dtype="int16") /* ty=Tensor[(14, 13, 9), int16] */;
  %465 = shape_of(%var_5453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_5453, dtype="int16") /* ty=Tensor[(14, 13, 9), int16] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %468 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %469 = left_shift(%466, %467) /* ty=Tensor[(14, 13, 9), int16] */;
  %470 = %468.2;
  (%469, %470)
}

def @func_7747() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 90), float64]) {
  %471 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %472 = reshape(%471, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %473 = @func_6024(%472) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) */;
  %474 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  %475 = %473.2;
  (%474, %475, meta[relay.Constant][34] /* ty=Tensor[(1, 90), float64] */)
}

def @func_2719(%var_2673: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
  %476 = cast(%var_2673, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
  %477 = cast(%var_2673, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
  %478 = rsqrt(%477) /* ty=Tensor[(2, 10, 11), float32] */;
  %479 = cast(%var_2673, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
  %480 = cos(%479) /* ty=Tensor[(2, 10, 11), float32] */;
  %481 = cast(%480, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %482 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%478, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = cosh(%476) /* ty=Tensor[(2, 10, 11), float64] */;
  %486 = greater_equal(%483, %484) /* ty=Tensor[(2, 10, 11), bool] */;
  (%485, %486)
}

def @func_1076(%var_1039: Tensor[(180, 2), float64], %var_1054: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) {
  %487 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %488 = cast(%var_1039, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
  %489 = reshape(%488, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %490 = @func_30(%489) /* ty=Tensor[(2, 12, 15), float64] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %492 = shape_of(%var_1039, dtype="int32") /* ty=Tensor[(2), int32] */;
  %493 = cast(%var_1039, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %495 = cast(%var_1054, dtype="int8") /* ty=int8 */;
  %496 = reshape(%495, newshape=[]) /* ty=int8 */;
  %497 = @func_906(%496) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
  %498 = cast(%var_1039, dtype="float32") /* ty=Tensor[(180, 2), float32] */;
  %499 = %497.2;
  %500 = cast(%499, dtype="int8") /* ty=int8 */;
  %501 = reshape(%500, newshape=[]) /* ty=int8 */;
  %502 = @func_906(%501) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
  %503 = cast(%var_1054, dtype="int8") /* ty=int8 */;
  %504 = reshape(%503, newshape=[]) /* ty=int8 */;
  %505 = @func_906(%504) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
  %506 = %487.0;
  %507 = mod(%493, %494) /* ty=Tensor[(180, 2), float64] */;
  %508 = asin(%498) /* ty=Tensor[(180, 2), float32] */;
  %509 = %502.0;
  %510 = %505.2;
  (%506, %507, %499, %var_1054, %508, %509, %510)
}

def @func_2311() -> Tensor[(2, 3, 16), float64] {
  %511 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %511.0
}

def @func_1389() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %512 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %513 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %514 = %512.0;
  %515 = %513.0;
  (%514, %515)
}

def @func_8525() -> (Tensor[(14, 9, 15), bool], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16]) {
  %516 = @func_7399() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %517 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %518 = cast(meta[relay.Constant][36] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %519 = reshape(%517, newshape=[]) /* ty=uint16 */;
  %520 = reshape(%518, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %521 = %516.0;
  %522 = @func_3480(%519, %520) /* ty=Tensor[(6, 4, 14), bool] */;
  (%521, %522, meta[relay.Constant][35] /* ty=uint16 */, meta[relay.Constant][36] /* ty=Tensor[(336), uint16] */)
}

def @func_4798(%var_4783: int16, %var_4784: Tensor[(7, 13, 5), int16]) -> (Tensor[(7, 13, 5), int16],) {
  %523 = cast(%var_4783, dtype="int16") /* ty=int16 */;
  %524 = cast(%var_4784, dtype="int16") /* ty=Tensor[(7, 13, 5), int16] */;
  %525 = bitwise_and(%523, %524) /* ty=Tensor[(7, 13, 5), int16] */;
  (%525,)
}

def @func_7466(%var_7448: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), int64], Tensor[(2, 3, 16), float64]) {
  %526 = @func_2454() /* ty=Tensor[(14, 9, 15), bool] */;
  %527 = cast(%var_7448, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %531 = bitwise_or(%529, %530) /* ty=Tensor[(14, 9, 15), int64] */;
  %532 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%531, %532)
}

def @func_5368(%var_5349: Tensor[(90), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) {
  %533 = cast(%var_5349, dtype="float64") /* ty=Tensor[(90), float64] */;
  %534 = reshape(%533, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %535 = @func_4709(%534) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %536 = cast(meta[relay.Constant][37] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %537 = reshape(%536, newshape=[12, 8, 13]) /* ty=Tensor[(12, 8, 13), float32] */;
  %538 = @func_1151(%537) /* ty=(Tensor[(12, 8, 13), float32],) */;
  %539 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  %540 = %535.2;
  %541 = %538.0;
  (%539, %540, %var_5349, %541, meta[relay.Constant][37] /* ty=Tensor[(1248), float32] */)
}

def @func_2814(%var_2742: int16, %var_2743: Tensor[(13, 16, 4), int16]) -> (int8, Tensor[(6, 15, 5), float32], Tensor[(10, 45), uint8], Tensor[(13, 16, 4), float64]) {
  %542 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %543 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 45), uint8] */, dtype="uint8") /* ty=Tensor[(10, 45), uint8] */;
  %544 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 45), uint8] */, dtype="uint8") /* ty=Tensor[(10, 45), uint8] */;
  %545 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 45), uint8] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
  %546 = reshape(%543, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
  %547 = reshape(%544, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
  %548 = reshape(%545, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), bool] */;
  %549 = @func_337(%546, %547, %548) /* ty=(Tensor[(6, 15, 5), float32],) */;
  %550 = cast(%var_2742, dtype="bool") /* ty=bool */;
  %551 = cast(%var_2743, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
  %552 = greater(%550, %551) /* ty=Tensor[(13, 16, 4), bool] */;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
  %554 = asin(%553) /* ty=Tensor[(13, 16, 4), float64] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  %556 = cosh(%555) /* ty=Tensor[(13, 16, 4), float32] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
  %558 = %542.1;
  %559 = %549.0;
  %560 = sqrt(%557) /* ty=Tensor[(13, 16, 4), float64] */;
  (%558, %559, meta[relay.Constant][38] /* ty=Tensor[(10, 45), uint8] */, %560)
}

def @func_6213() -> Tensor[(4, 16, 16), float64] {
  %561 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  erf(%561) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_8749() -> (Tensor[(2, 3, 16), float64],) {
  %562 = @func_7223() /* ty=Tensor[(2, 3, 16), float64] */;
  (%562,)
}

def @func_9782() -> (Tensor[(14, 9, 15), bool], Tensor[(?, 6, 3), bool], Tensor[(15, 13, 2), uint64]) {
  %563 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %564 = @func_5225() /* ty=Tensor[(14, 9, 15), bool] */;
  %565 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
  %566 = %563.1;
  (%564, %565, %566)
}

def @func_2454() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1792() -> (Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) {
  %567 = cast(meta[relay.Constant][40] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %568 = reshape(%567, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %569 = @func_1335(%568) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) */;
  %570 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
  %571 = %569.1;
  (%570, %571, meta[relay.Constant][40] /* ty=Tensor[(390), int32] */)
}

def @func_255(%var_241: Tensor[(7, 6, 15), float64], %var_242: Tensor[(7, 6, 15), float64]) -> (Tensor[(7, 6, 15), float64],) {
  %572 = cast(%var_242, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
  %573 = shape_of(%var_241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_241, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %576 = power(%574, %575) /* ty=Tensor[(7, 6, 15), float64] */;
  (%576,)
}

def @func_8849() -> Tensor[(14, 9, 15), float32] {
  %577 = @func_4951() /* ty=(Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %577.0
}

def @func_4521(%var_4505: int8, %var_4506: Tensor[(1, 11, 8), int8]) -> (Tensor[(1, 11, 8), bool],) {
  %578 = cast(%var_4505, dtype="bool") /* ty=bool */;
  %579 = cast(%var_4506, dtype="bool") /* ty=Tensor[(1, 11, 8), bool] */;
  %580 = equal(%578, %579) /* ty=Tensor[(1, 11, 8), bool] */;
  (%580,)
}

def @func_9709() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(2, 3, 16), float64]) {
  %581 = @func_8148() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %582 = @func_8601() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) */;
  %583 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %584 = %581.0;
  %585 = %582.2;
  %586 = %583.1;
  (%584, %585, %586)
}

def @func_7026() -> (Tensor[(325), float64],) {
  %587 = @func_6475() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(325), float64]) */;
  %588 = %587.1;
  (%588,)
}

def @func_3526() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %589 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %591 = cast(meta[relay.Constant][41] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %592 = reshape(%591, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %593 = @func_3063(%592) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %594 = erf(%590) /* ty=Tensor[(14, 9, 15), float64] */;
  %595 = %593.0;
  (%594, %595, meta[relay.Constant][41] /* ty=Tensor[(90), float64] */)
}

def @func_7356() -> (Tensor[(14, 9, 15), float64], Tensor[(1, 1890), bool]) {
  %596 = @func_6086() /* ty=(Tensor[(14, 9, 15), float64],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
  %599 = reshape(%598, newshape=[1, 1890]) /* ty=Tensor[(1, 1890), bool] */;
  %600 = @func_6603(%599) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) */;
  %601 = %600.4;
  (%597, %601)
}

def @func_6674(%var_6653: int16) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(7, 13, 5), int16], int16, Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %602 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %603 = cast(meta[relay.Constant][42] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
  %604 = reshape(%603, newshape=[455, 1]) /* ty=Tensor[(455, 1), int16] */;
  %605 = @func_6143(%604) /* ty=(int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) */;
  %606 = cast(%var_6653, dtype="int16") /* ty=int16 */;
  %607 = cast(meta[relay.Constant][42] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
  %608 = reshape(%606, newshape=[]) /* ty=int16 */;
  %609 = reshape(%607, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), int16] */;
  %610 = @func_4798(%608, %609) /* ty=(Tensor[(7, 13, 5), int16],) */;
  %611 = cast(meta[relay.Constant][43] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %612 = reshape(%611, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %613 = @func_3063(%612) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %614 = @func_3358() /* ty=Tensor[(14, 9, 15), bool] */;
  %615 = %602.0;
  %616 = %605.1;
  %617 = %610.0;
  %618 = %613.0;
  (%614, %615, %616, meta[relay.Constant][42] /* ty=Tensor[(455), int16] */, %617, %var_6653, %618, meta[relay.Constant][43] /* ty=Tensor[(90), float64] */)
}

def @func_9451() -> (Tensor[(2, 3, 16), float64],) {
  %619 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %620 = %619.0;
  (%620,)
}

def @func_10288() -> (Tensor[(1, 390), int32], Tensor[(2, 3, 16), float64]) {
  %621 = @func_6453() /* ty=(Tensor[(1, 390), int32],) */;
  %622 = %621.0;
  %623 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%622, %623)
}

def @func_5829() -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) {
  %624 = @func_2611() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) */;
  %625 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 390), int32] */, dtype="int32") /* ty=Tensor[(1, 390), int32] */;
  %626 = reshape(%625, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), int32] */;
  %627 = @func_932(%626) /* ty=(Tensor[(15, 13, 2), uint64],) */;
  %628 = %624.0;
  %629 = %627.0;
  (%628, %629, meta[relay.Constant][44] /* ty=Tensor[(1, 390), int32] */)
}

def @func_1991(%var_1980: Tensor[(16, 15, 1), int32]) -> (Tensor[(16, 15, 2), float32],) {
  %630 = cast(%var_1980, dtype="int32") /* ty=Tensor[(16, 15, 1), int32] */;
  %631 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(16, 15, 2), int32] */;
  %632 = multiply(%630, %631) /* ty=Tensor[(16, 15, 2), int32] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %634 = log(%633) /* ty=Tensor[(16, 15, 2), float32] */;
  (%634,)
}

def @func_4951() -> (Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %635 = @func_2611() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) */;
  %636 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %637 = %635.1;
  %638 = %636.1;
  %639 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%637, %638, %639)
}

def @func_10392(%var_10386: Tensor[(16, 10, 16), float32]) -> (Tensor[(16, 10, 16), float32],) {
  %640 = cast(%var_10386, dtype="float32") /* ty=Tensor[(16, 10, 16), float32] */;
  %641 = tan(%640) /* ty=Tensor[(16, 10, 16), float32] */;
  (%641,)
}

def @func_3121(%var_3079: Tensor[(4, 14, 13), int8]) -> (Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %642 = cast(meta[relay.Constant][46] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %643 = cast(%var_3079, dtype="int8") /* ty=Tensor[(4, 14, 13), int8] */;
  %644 = logical_xor(%642, %643) /* ty=Tensor[(4, 14, 13), int8] */;
  %645 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
  %646 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%644, %645, %646)
}

def @func_6308() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %647 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
  %648 = %647.0;
  %649 = @func_6290() /* ty=Tensor[(2, 3, 16), float64] */;
  (%648, %649)
}

def @func_3818() -> Tensor[(14, 9, 15), bool] {
  @func_2454() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1688() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_5225() -> Tensor[(14, 9, 15), bool] {
  @func_1877() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_906(%var_899: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) {
  %650 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %651 = cast(%var_899, dtype="int8") /* ty=int8 */;
  %652 = reshape(%651, newshape=[]) /* ty=int8 */;
  %653 = %650.0;
  %654 = @func_232(%652) /* ty=Tensor[(14, 9, 15), bool] */;
  (%653, %654, %var_899)
}

def @func_2086(%var_2077: Tensor[(15, 13, 2), uint64]) -> Tensor[(15, 13, 2), float64] {
  %655 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %656 = %655.1;
  %657 = cast(%var_2077, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%659, %660) /* ty=Tensor[(15, 13, 2), float64] */
}

def @func_7058(%var_7038: int8, %var_7039: Tensor[(10, 12, 13), int8]) -> (Tensor[(10, 12, 13), int8], Tensor[(?, 6, 3), int32]) {
  %661 = cast(%var_7038, dtype="int8") /* ty=int8 */;
  %662 = cast(%var_7039, dtype="int8") /* ty=Tensor[(10, 12, 13), int8] */;
  %663 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
  %664 = cast(%663, dtype="int32") /* ty=Tensor[(?, 6, 3), int32] */;
  %665 = cast(%var_7038, dtype="int32") /* ty=int32 */;
  %666 = bitwise_and(%661, %662) /* ty=Tensor[(10, 12, 13), int8] */;
  %667 = subtract(%664, %665) /* ty=Tensor[(?, 6, 3), int32] */;
  (%666, %667)
}

def @func_2238(%var_2229: Tensor[(1, 1, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) {
  %668 = cast(%var_2229, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %669 = cast(meta[relay.Constant][47] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %670 = cast(meta[relay.Constant][47] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %671 = reshape(%669, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %672 = reshape(%670, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %673 = @func_548(%671, %672) /* ty=(Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) */;
  %674 = rsqrt(%668) /* ty=Tensor[(1, 1, 13), float64] */;
  %675 = %673.0;
  (%674, %675, meta[relay.Constant][47] /* ty=Tensor[(2184), float32] */)
}

def @func_5785() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) {
  %676 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %677 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %678 = %677.1;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %680 = %676.0;
  %681 = sin(%679) /* ty=Tensor[(3, 6, 5), float64] */;
  (%680, %681)
}

def @func_1151(%var_1105: Tensor[(12, 8, 13), float32]) -> (Tensor[(12, 8, 13), float32],) {
  %682 = cast(%var_1105, dtype="float32") /* ty=Tensor[(12, 8, 13), float32] */;
  %683 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(12, 8, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 13), float32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %686 = maximum(%684, %685) /* ty=Tensor[(12, 8, 13), float32] */;
  (%686,)
}

def @func_30(%var_16: Tensor[(2, 12, 15), float64]) -> Tensor[(2, 12, 15), float64] {
  %687 = cast(%var_16, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %688 = atanh(%687) /* ty=Tensor[(2, 12, 15), float64] */;
  %689 = cast(%688, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %690 = cos(%689) /* ty=Tensor[(2, 12, 15), float64] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
  %692 = log(%691) /* ty=Tensor[(2, 12, 15), float32] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  sin(%693) /* ty=Tensor[(2, 12, 15), float64] */
}

def @func_5972() -> (Tensor[(14, 9, 15), bool],) {
  %694 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
  (%694,)
}

def @func_1626() -> (Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) {
  %695 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %696 = cast(meta[relay.Constant][49] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %697 = cast(meta[relay.Constant][50] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %698 = reshape(%696, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
  %699 = reshape(%697, newshape=[]) /* ty=int8 */;
  %700 = @func_1076(%698, %699) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) */;
  %701 = %695.0;
  %702 = %700.6;
  (%701, %702, meta[relay.Constant][49] /* ty=Tensor[(360), float64] */, meta[relay.Constant][50] /* ty=int8 */)
}

def @func_10228() -> Tensor[(14, 11, ?), float32] {
  %703 = @func_7179() /* ty=(int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) */;
  %703.3
}

def @func_9107() -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64]) {
  %704 = @func_8148() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %705 = cast(meta[relay.Constant][51] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %706 = reshape(%705, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %707 = @func_5368(%706) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) */;
  %708 = %704.0;
  %709 = %707.2;
  (%708, %709, meta[relay.Constant][51] /* ty=Tensor[(90), float64] */)
}

def @func_10009() -> (Tensor[(2, 3, 16), bool], Tensor[(6, 9, 3), bool], int8, Tensor[(2, 3, 16), float64]) {
  %710 = @func_6171() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %711 = %710.1;
  %712 = @func_9477() /* ty=Tensor[(2, 3, 16), float64] */;
  %713 = cast(%712, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
  %714 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%711, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %717 = @func_4591() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) */;
  %718 = @func_9796() /* ty=(int8,) */;
  %719 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
  %720 = not_equal(%715, %716) /* ty=Tensor[(2, 3, 16), bool] */;
  %721 = %717.0;
  %722 = %718.0;
  %723 = %719.0;
  (%720, %721, %722, %723)
}

def @func_2965(%var_2897: Tensor[(80, 1), uint64], %var_2960: uint8) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  %724 = cast(meta[relay.Constant][52] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %725 = reshape(%724, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %726 = @func_1335(%725) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) */;
  %727 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %728 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %729 = reshape(%727, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %730 = reshape(%728, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %731 = cast(meta[relay.Constant][52] /* ty=Tensor[(390), int32] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %732 = asinh(%731) /* ty=Tensor[(390), float64] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(390), float32] */;
  %734 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %735 = cast(%var_2960, dtype="uint8") /* ty=uint8 */;
  %736 = cast(meta[relay.Constant][53] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %737 = reshape(%735, newshape=[]) /* ty=uint8 */;
  %738 = reshape(%736, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), uint8] */;
  %739 = @func_1181(%737, %738) /* ty=(Tensor[(12, 3, 3), bool],) */;
  %740 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  %741 = %726.0;
  %742 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %743 = @func_1848(%729, %730) /* ty=Tensor[(2, 10, 4), bool] */;
  %744 = cos(%733) /* ty=Tensor[(390), float32] */;
  %745 = %734.1;
  %746 = %739.0;
  (%740, %741, %742, %743, %var_2897, %744, %745, %746, %var_2960, meta[relay.Constant][53] /* ty=Tensor[(108), uint8] */)
}

def @func_5746() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %747 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  %748 = @func_1262() /* ty=Tensor[(2, 3, 16), float64] */;
  %749 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
  (%747, %748, %749)
}

def @func_7494(%var_7486: float64, %var_7487: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 1, 1), bool],) {
  %750 = cast(%var_7486, dtype="bool") /* ty=bool */;
  %751 = cast(%var_7487, dtype="bool") /* ty=Tensor[(2, 1, 1), bool] */;
  %752 = greater_equal(%750, %751) /* ty=Tensor[(2, 1, 1), bool] */;
  (%752,)
}

def @func_9489() -> (Tensor[(14, 9, 15), bool],) {
  %753 = @func_5225() /* ty=Tensor[(14, 9, 15), bool] */;
  (%753,)
}

def @func_2020() -> (Tensor[(2, 3, 16), float64],) {
  %754 = @func_1660() /* ty=Tensor[(2, 3, 16), float64] */;
  (%754,)
}

def @func_7688() -> Tensor[(2, 3, 16), float64] {
  %755 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %755.0
}

def @func_1251() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) {
  %756 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %757 = reshape(%756, newshape=[]) /* ty=int8 */;
  %758 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
  %761 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %762 = @func_232(%757) /* ty=Tensor[(14, 9, 15), bool] */;
  %763 = equal(%760, %761) /* ty=Tensor[(2, 3, 16), bool] */;
  (%762, %763)
}

def @func_6754() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) {
  %764 = cast(meta[relay.Constant][55] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %765 = reshape(%764, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %766 = @func_4690(%765) /* ty=(Tensor[(14, 9, 15), float64],) */;
  %767 = cast(meta[relay.Constant][56] /* ty=Tensor[(728), int8] */, dtype="int8") /* ty=Tensor[(728), int8] */;
  %768 = reshape(%767, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int8] */;
  %769 = @func_3121(%768) /* ty=(Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %770 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %771 = @func_1725() /* ty=(int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) */;
  %772 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  %773 = %766.0;
  %774 = %769.0;
  %775 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
  %776 = %770.0;
  %777 = %771.2;
  (%772, %773, meta[relay.Constant][55] /* ty=Tensor[(1890), bool] */, %774, meta[relay.Constant][56] /* ty=Tensor[(728), int8] */, %775, %776, %777)
}

def @func_9943() -> (Tensor[(2, 3, 16), float64],) {
  %778 = @func_7096() /* ty=Tensor[(2, 3, 16), float64] */;
  (%778,)
}

def @func_2067() -> (Tensor[(2, 3, 16), float64],) {
  %779 = @func_2020() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %780 = %779.0;
  (%780,)
}

def @func_232(%var_225: int8) -> Tensor[(14, 9, 15), bool] {
  %781 = cast(%var_225, dtype="bool") /* ty=bool */;
  %782 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 9, 15), int8] */, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
  less_equal(%781, %782) /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1335(%var_1302: Tensor[(390), int32]) -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) {
  %783 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %784 = cast(%var_1302, dtype="int32") /* ty=Tensor[(390), int32] */;
  %785 = reshape(%784, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), int32] */;
  %786 = @func_932(%785) /* ty=(Tensor[(15, 13, 2), uint64],) */;
  %787 = cast(meta[relay.Constant][58] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %788 = reshape(%787, newshape=[12, 8, 13]) /* ty=Tensor[(12, 8, 13), float32] */;
  %789 = @func_1151(%788) /* ty=(Tensor[(12, 8, 13), float32],) */;
  %790 = cast(meta[relay.Constant][58] /* ty=Tensor[(1248), float32] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %791 = %783.0;
  %792 = %786.0;
  %793 = %789.0;
  %794 = log(%790) /* ty=Tensor[(1248), float64] */;
  (%791, %792, %var_1302, %793, %794)
}

def @func_1597() -> Tensor[(?, 6, 3), bool] {
  %795 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 6, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %796 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(1, 6, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 6, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%797, %798) /* ty=Tensor[(?, 6, 3), bool] */
}

def @func_7307() -> Tensor[(3, 6, 5), float64] {
  %799 = @func_5785() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) */;
  %799.1
}

def @func_5150() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %800 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %801 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %802 = %800.0;
  %803 = %801.0;
  (%802, %803)
}

def @func_1286() -> (Tensor[(2, 3, 16), float64],) {
  %804 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %805 = %804.0;
  (%805,)
}

def @func_7618(%var_7599: Tensor[(156), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(156), float64], Tensor[(14, 9, 15), bool]) {
  %806 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
  %807 = cast(%var_7599, dtype="float64") /* ty=Tensor[(156), float64] */;
  %808 = reshape(%807, newshape=[39, 4]) /* ty=Tensor[(39, 4), float64] */;
  %809 = @func_1517(%808) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) */;
  %810 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %811 = %806.0;
  %812 = %809.1;
  %813 = %810.0;
  (%811, %812, %var_7599, %813)
}

def @func_6061() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) {
  %814 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %815 = cast(meta[relay.Constant][61] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %816 = cast(meta[relay.Constant][62] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %817 = reshape(%815, newshape=[80, 1]) /* ty=Tensor[(80, 1), uint64] */;
  %818 = reshape(%816, newshape=[]) /* ty=uint8 */;
  %819 = @func_2965(%817, %818) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) */;
  %820 = %814.1;
  %821 = %819.0;
  (%820, %821, meta[relay.Constant][61] /* ty=Tensor[(80), uint64] */, meta[relay.Constant][62] /* ty=uint8 */)
}

def @func_9540() -> Tensor[(14, 9, 15), bool] {
  @func_2454() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_8833() -> (Tensor[(14, 9, 15), bool],) {
  %822 = @func_7754() /* ty=Tensor[(14, 9, 15), bool] */;
  (%822,)
}

def @func_10517() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %823 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %824 = @func_4491() /* ty=Tensor[(2, 3, 16), float64] */;
  %825 = %823.0;
  (%824, %825)
}

def @func_3063(%var_3054: Tensor[(3, 6, 5), float64]) -> (Tensor[(3, 6, 5), float64],) {
  %826 = cast(%var_3054, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %827 = tan(%826) /* ty=Tensor[(3, 6, 5), float64] */;
  (%827,)
}

def @func_5914(%var_5884: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), int8], Tensor[(2, 3, 16), float64]) {
  %828 = cast(%var_5884, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
  %829 = sqrt(%828) /* ty=Tensor[(5, 13, 4), float32] */;
  %830 = cast(%829, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
  %831 = shape_of(%var_5884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_5884, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = not_equal(%832, %833) /* ty=Tensor[(5, 13, 4), bool] */;
  %835 = cast(%829, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %839 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %840 = bitwise_xor(%837, %838) /* ty=Tensor[(5, 13, 4), int8] */;
  %841 = %839.0;
  (%840, %841)
}

def @func_8021() -> Tensor[(2, 3, 16), float64] {
  %842 = @func_6846() /* ty=(Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) */;
  %842.1
}

def @func_7096() -> Tensor[(2, 3, 16), float64] {
  @func_2833() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_3424() -> Tensor[(2, 3, 16), float64] {
  @func_2552() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_8311() -> (Tensor[(2, 3, 16), float64],) {
  %843 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  (%843,)
}

def @func_2552() -> Tensor[(2, 3, 16), float64] {
  %844 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %844.1
}

def @func_5422(%var_5417: Tensor[(14, 11, 1), float64]) -> (Tensor[(14, 11, 1), float64],) {
  %845 = cast(%var_5417, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %846 = cos(%845) /* ty=Tensor[(14, 11, 1), float64] */;
  (%846,)
}

def @func_5447() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_9143() -> Tensor[(390), int32] {
  %847 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %847.2
}

def @func_9899() -> (Tensor[(2, 3, 16), float64],) {
  %848 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  (%848,)
}

def @func_6033() -> Tensor[(325), float64] {
  %849 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
  %849.4
}

def @func_9477() -> Tensor[(2, 3, 16), float64] {
  %850 = @func_8749() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %850.0
}

def @func_1848(%var_1843: Tensor[(2, 10, 4), uint64], %var_1844: Tensor[(2, 10, 4), uint64]) -> Tensor[(2, 10, 4), bool] {
  %851 = cast(%var_1844, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %852 = shape_of(%var_1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_1843, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%853, %854) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_4856() -> (Tensor[(14, 9, 15), bool],) {
  %855 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %856 = %855.0;
  (%856,)
}

def @func_3999() -> (Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) {
  %857 = @func_1725() /* ty=(int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) */;
  %858 = %857.2;
  %859 = @func_3322() /* ty=Tensor[(10, 1, 9), uint64] */;
  (%858, %859)
}

def @func_5011(%var_5001: Tensor[(12, 2, 14), uint8], %var_5002: Tensor[(12, 2, 14), uint8]) -> Tensor[(12, 2, 14), uint8] {
  %860 = cast(%var_5002, dtype="uint8") /* ty=Tensor[(12, 2, 14), uint8] */;
  %861 = shape_of(%var_5001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%var_5001, dtype="uint8") /* ty=Tensor[(12, 2, 14), uint8] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%862, %863) /* ty=Tensor[(12, 2, 14), uint8] */
}

def @func_4165() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) {
  %864 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %865 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %866 = %864.1;
  %867 = %865.1;
  (%866, %867)
}

def @func_3579() -> (Tensor[(2, 3, 16), float64],) {
  %868 = @func_1345() /* ty=Tensor[(2, 3, 16), float64] */;
  (%868,)
}

def @func_6984(%var_6977: Tensor[(108), uint8]) -> (Tensor[(2, 3, 16), float64], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  %869 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %870 = cast(meta[relay.Constant][63] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %871 = cast(%var_6977, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %872 = reshape(%870, newshape=[]) /* ty=uint8 */;
  %873 = reshape(%871, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), uint8] */;
  %874 = @func_1181(%872, %873) /* ty=(Tensor[(12, 3, 3), bool],) */;
  %875 = %869.1;
  %876 = %874.0;
  (%875, %876, meta[relay.Constant][63] /* ty=uint8 */, %var_6977)
}

def @func_6086() -> (Tensor[(14, 9, 15), float64],) {
  %877 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
  %878 = cast(%877, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %879 = sigmoid(%878) /* ty=Tensor[(14, 9, 15), float64] */;
  (%879,)
}

def @func_6143(%var_6118: Tensor[(455, 1), int16]) -> (int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) {
  %880 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %881 = @func_3792() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) */;
  %882 = %880.1;
  %883 = cast(%882, dtype="int16") /* ty=int16 */;
  %884 = cast(%var_6118, dtype="int16") /* ty=Tensor[(455, 1), int16] */;
  %885 = reshape(%883, newshape=[]) /* ty=int16 */;
  %886 = reshape(%884, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), int16] */;
  %887 = @func_4798(%885, %886) /* ty=(Tensor[(7, 13, 5), int16],) */;
  %888 = %881.0;
  %889 = %887.0;
  (%882, %888, %889, %var_6118)
}

def @func_4405() -> Tensor[(2, 3, 16), float64] {
  @func_2833() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_8379() -> (Tensor[(14, 9, 15), bool],) {
  %890 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %891 = %890.1;
  (%891,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2387() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %0 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %1 = @func_1660() /* ty=Tensor[(2, 3, 16), float64] */;
  %2 = %0.0;
  (%1, %2)
}

def @func_6359(%var_6357: Tensor[(7, 1, 10), float64]) -> (Tensor[(7, ?, 10), int64],) {
  @func_6356(%var_6357) /* ty=(Tensor[(7, ?, 10), int64],) */
}

def @func_10211() -> Tensor[(2, 3, 16), float64] {
  %4 = fn () -> Tensor[(2, 3, 16), float64] {
    %3 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %3.0
  };
  %4() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_3484(%var_3482: uint16, %var_3483: Tensor[(6, 4, 14), uint16]) -> Tensor[(6, 4, 14), bool] {
  @func_3480(%var_3482, %var_3483) /* ty=Tensor[(6, 4, 14), bool] */
}

def @func_1725() -> (int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) {
  %5 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 52), float64] */, dtype="float64") /* ty=Tensor[(3, 52), float64] */;
  %7 = reshape(%6, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float64] */;
  %8 = %5.1;
  %9 = @func_1211(%7) /* ty=Tensor[(1, 13, 12), float64] */;
  (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(3, 52), float64] */)
}

def @func_8851() -> Tensor[(14, 9, 15), float32] {
  @func_8849() /* ty=Tensor[(14, 9, 15), float32] */
}

def @func_3063(%var_3054: Tensor[(3, 6, 5), float64]) -> (Tensor[(3, 6, 5), float64],) {
  %10 = cast(%var_3054, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %11 = tan(%10) /* ty=Tensor[(3, 6, 5), float64] */;
  (%11,)
}

def @func_8525() -> (Tensor[(14, 9, 15), bool], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16]) {
  %12 = @func_7399() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %13 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %15 = reshape(%13, newshape=[]) /* ty=uint16 */;
  %16 = reshape(%14, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %17 = %12.0;
  %18 = @func_3480(%15, %16) /* ty=Tensor[(6, 4, 14), bool] */;
  (%17, %18, meta[relay.Constant][1] /* ty=uint16 */, meta[relay.Constant][2] /* ty=Tensor[(336), uint16] */)
}

def @func_3550() -> (Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) {
  %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %20 = cast(meta[relay.Constant][3] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %21 = reshape(%19, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %22 = reshape(%20, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %23 = @func_548(%21, %22) /* ty=(Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(325), float64] */, dtype="float64") /* ty=Tensor[(325), float64] */;
  %25 = reshape(%24, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float64] */;
  %26 = @func_2408(%25) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) */;
  %27 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  %28 = %23.0;
  %29 = %26.0;
  %30 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
  (%27, %28, meta[relay.Constant][3] /* ty=Tensor[(2184), float32] */, %29, meta[relay.Constant][4] /* ty=Tensor[(325), float64] */, %30)
}

def @func_1171() -> (Tensor[(2, 3, 16), float64],) {
  %33 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %31 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %32 = %31.0;
    (%32,)
  };
  %33() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_8194() -> Tensor[(14, 9, 15), bool] {
  %34 = fn () -> Tensor[(14, 9, 15), bool] {
    @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
  };
  %34() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_7755() -> Tensor[(14, 9, 15), bool] {
  %36 = fn () -> Tensor[(14, 9, 15), bool] {
    %35 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
    %35.0
  };
  %36() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1251() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) {
  %37 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %38 = reshape(%37, newshape=[]) /* ty=int8 */;
  %39 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
  %42 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %43 = @func_232(%38) /* ty=Tensor[(14, 9, 15), bool] */;
  %44 = equal(%41, %42) /* ty=Tensor[(2, 3, 16), bool] */;
  (%43, %44)
}

def @func_7225() -> Tensor[(2, 3, 16), float64] {
  @func_7223() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_6548(%var_6546: Tensor[(1, 3, 10), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(8, 42), bool], Tensor[(?, 3, 10), float32]) {
  @func_6545(%var_6546) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(8, 42), bool], Tensor[(?, 3, 10), float32]) */
}

def @func_7498(%var_7496: float64, %var_7497: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 1, 1), bool],) {
  @func_7494(%var_7496, %var_7497) /* ty=(Tensor[(2, 1, 1), bool],) */
}

def @func_4593() -> (Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) {
  @func_4591() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) */
}

def @func_4951() -> (Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %45 = @func_2611() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) */;
  %46 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %47 = %45.1;
  %48 = %46.1;
  %49 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%47, %48, %49)
}

def @func_932(%var_922: Tensor[(15, 13, 2), int32]) -> (Tensor[(15, 13, 2), uint64],) {
  %50 = cast(%var_922, dtype="bool") /* ty=Tensor[(15, 13, 2), bool] */;
  %51 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 2), int32] */, dtype="bool") /* ty=Tensor[(15, 13, 2), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = less_equal(%52, %53) /* ty=Tensor[(15, 13, 2), bool] */;
  %55 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 2), int32] */, dtype="uint64") /* ty=Tensor[(15, 13, 2), uint64] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="uint64") /* ty=Tensor[(15, 13, 2), uint64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %59 = add(%57, %58) /* ty=Tensor[(15, 13, 2), uint64] */;
  (%59,)
}

def @func_6173() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  @func_6171() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */
}

def @func_8421(%var_8406: Tensor[(3, 9, 13), float64], %var_8416: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) {
  %60 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 9, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %61 = shape_of(%var_8406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_8406, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = cast(%var_8416, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %65 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(3, 9, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %68 = greater_equal(%62, %63) /* ty=Tensor[(3, 9, 13), bool] */;
  %69 = power(%66, %67) /* ty=Tensor[(3, 9, 13), float64] */;
  (%68, %69)
}

def @func_5368(%var_5349: Tensor[(90), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) {
  %70 = cast(%var_5349, dtype="float64") /* ty=Tensor[(90), float64] */;
  %71 = reshape(%70, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %72 = @func_4709(%71) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %73 = cast(meta[relay.Constant][8] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %74 = reshape(%73, newshape=[12, 8, 13]) /* ty=Tensor[(12, 8, 13), float32] */;
  %75 = @func_1151(%74) /* ty=(Tensor[(12, 8, 13), float32],) */;
  %76 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  %77 = %72.2;
  %78 = %75.0;
  (%76, %77, %var_5349, %78, meta[relay.Constant][8] /* ty=Tensor[(1248), float32] */)
}

def @func_10228() -> Tensor[(14, 11, ?), float32] {
  %79 = @func_7179() /* ty=(int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) */;
  %79.3
}

def @func_1994(%var_1992: Tensor[(16, 15, 1), int32]) -> (Tensor[(16, 15, 2), float32],) {
  @func_1991(%var_1992) /* ty=(Tensor[(16, 15, 2), float32],) */
}

def @func_8669() -> (Tensor[(2, 3, 16), float64],) {
  @func_8667() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @main(%var_10765: Tensor[(4, 2, 6), int8], %var_10766: Tensor[(4, 2, 6), int8]) -> (Tensor[(4, 2, 6), int8],) {
  %80 = cast(%var_10766, dtype="int8") /* ty=Tensor[(4, 2, 6), int8] */;
  %81 = shape_of(%var_10765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_10765, dtype="int8") /* ty=Tensor[(4, 2, 6), int8] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %84 = subtract(%82, %83) /* ty=Tensor[(4, 2, 6), int8] */;
  (%84,)
}

def @func_5449() -> Tensor[(14, 9, 15), bool] {
  @func_5447() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_2612() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) {
  %90 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) {
    %85 = @func_2020() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %86 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
    %87 = cast(%86, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
    %88 = %85.0;
    %89 = acosh(%87) /* ty=Tensor[(14, 9, 15), float32] */;
    (%88, %89)
  };
  %90() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) */
}

def @func_5785() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) {
  %91 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %92 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
  %93 = %92.1;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %95 = %91.0;
  %96 = sin(%94) /* ty=Tensor[(3, 6, 5), float64] */;
  (%95, %96)
}

def @func_9900() -> (Tensor[(2, 3, 16), float64],) {
  %98 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %97 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
    (%97,)
  };
  %98() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_3526() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %99 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %101 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %102 = reshape(%101, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %103 = @func_3063(%102) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %104 = erf(%100) /* ty=Tensor[(14, 9, 15), float64] */;
  %105 = %103.0;
  (%104, %105, meta[relay.Constant][9] /* ty=Tensor[(90), float64] */)
}

def @func_1181(%var_1172: uint8, %var_1173: Tensor[(12, 3, 3), uint8]) -> (Tensor[(12, 3, 3), bool],) {
  %106 = cast(%var_1172, dtype="bool") /* ty=bool */;
  %107 = cast(%var_1173, dtype="bool") /* ty=Tensor[(12, 3, 3), bool] */;
  %108 = less_equal(%106, %107) /* ty=Tensor[(12, 3, 3), bool] */;
  (%108,)
}

def @func_2301() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %113 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
    %109 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %110 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
    %111 = %109.0;
    %112 = %110.0;
    (%111, %112)
  };
  %113() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */
}

def @func_4068(%var_4066: Tensor[(336), uint16]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16], Tensor[(1890), int64], Tensor[(6, 4, 14), bool], Tensor[(?, 6, 3), bool], Tensor[(2, 3, 16), float64], Tensor[(728), int8]) {
  @func_4065(%var_4066) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16], Tensor[(1890), int64], Tensor[(6, 4, 14), bool], Tensor[(?, 6, 3), bool], Tensor[(2, 3, 16), float64], Tensor[(728), int8]) */
}

def @func_5517() -> Tensor[(14, 9, 15), bool] {
  %114 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %114.0
}

def @func_9109() -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64]) {
  @func_9107() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64]) */
}

def @func_5151() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %119 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
    %115 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
    %116 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %117 = %115.0;
    %118 = %116.0;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_7688() -> Tensor[(2, 3, 16), float64] {
  %120 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %120.0
}

def @func_5747() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %124 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
    %121 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
    %122 = @func_1262() /* ty=Tensor[(2, 3, 16), float64] */;
    %123 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
    (%121, %122, %123)
  };
  %124() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */
}

def @func_6846() -> (Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) {
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 4, 10), float64] */;
  %126 = @func_4165() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) */;
  %127 = sqrt(%125) /* ty=Tensor[(8, 4, 10), float64] */;
  %128 = %126.0;
  (%127, %128)
}

def @func_10350(%var_10349: Tensor[(13, 6, 8), float32]) -> Tensor[(13, 6, 8), float32] {
  %133 = fn (%var_10344: Tensor[(13, 6, 8), float32]) -> Tensor[(13, 6, 8), float32] {
    %129 = cast(%var_10344, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %130 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%131, %132) /* ty=Tensor[(13, 6, 8), float32] */
  };
  %133(%var_10349) /* ty=Tensor[(13, 6, 8), float32] */
}

def @func_4666(%var_4665: int8) -> (Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %142 = fn (%var_4638: int8) -> (Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
    %134 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
    %135 = cast(%var_4638, dtype="int8") /* ty=int8 */;
    %136 = reshape(%135, newshape=[]) /* ty=int8 */;
    %137 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %138 = %134.1;
    %139 = @func_232(%136) /* ty=Tensor[(14, 9, 15), bool] */;
    %140 = %137.0;
    %141 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
    (%138, %139, %var_4638, %140, %141)
  };
  %142(%var_4665) /* ty=(Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_10230() -> Tensor[(14, 11, ?), float32] {
  @func_10228() /* ty=Tensor[(14, 11, ?), float32] */
}

def @func_6027(%var_6025: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) {
  @func_6024(%var_6025) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) */
}

def @func_258(%var_256: Tensor[(7, 6, 15), float64], %var_257: Tensor[(7, 6, 15), float64]) -> (Tensor[(7, 6, 15), float64],) {
  %148 = fn (%var_241: Tensor[(7, 6, 15), float64], %var_242: Tensor[(7, 6, 15), float64]) -> (Tensor[(7, 6, 15), float64],) {
    %143 = cast(%var_242, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
    %144 = shape_of(%var_241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %145 = cast(%var_241, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %147 = power(%145, %146) /* ty=Tensor[(7, 6, 15), float64] */;
    (%147,)
  };
  %148(%var_256, %var_257) /* ty=(Tensor[(7, 6, 15), float64],) */
}

def @func_1660() -> Tensor[(2, 3, 16), float64] {
  %149 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %149.0
}

def @func_3552() -> (Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) {
  @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_2455() -> Tensor[(14, 9, 15), bool] {
  %150 = fn () -> Tensor[(14, 9, 15), bool] {
    @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
  };
  %150() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_2006() -> (Tensor[(14, 9, 15), bool],) {
  %152 = fn () -> (Tensor[(14, 9, 15), bool],) {
    %151 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
    (%151,)
  };
  %152() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_1991(%var_1980: Tensor[(16, 15, 1), int32]) -> (Tensor[(16, 15, 2), float32],) {
  %153 = cast(%var_1980, dtype="int32") /* ty=Tensor[(16, 15, 1), int32] */;
  %154 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(16, 15, 2), int32] */;
  %155 = multiply(%153, %154) /* ty=Tensor[(16, 15, 2), int32] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %157 = log(%156) /* ty=Tensor[(16, 15, 2), float32] */;
  (%157,)
}

def @func_3528() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */
}

def @func_6370() -> (Tensor[(14, 9, 15), bool],) {
  %160 = fn () -> (Tensor[(14, 9, 15), bool],) {
    %158 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
    %159 = %158.0;
    (%159,)
  };
  %160() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_8833() -> (Tensor[(14, 9, 15), bool],) {
  %161 = @func_7754() /* ty=Tensor[(14, 9, 15), bool] */;
  (%161,)
}

def @func_9883() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  %162 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %163 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %164 = %162.0;
  %165 = %163.0;
  (%164, %165)
}

def @func_10425() -> Tensor[(14, 9, 15), bool] {
  %166 = fn () -> Tensor[(14, 9, 15), bool] {
    @func_3818() /* ty=Tensor[(14, 9, 15), bool] */
  };
  %166() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_2021() -> (Tensor[(2, 3, 16), float64],) {
  %168 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %167 = @func_1660() /* ty=Tensor[(2, 3, 16), float64] */;
    (%167,)
  };
  %168() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_2411(%var_2409: Tensor[(13, 5, 5), float64]) -> (Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) {
  @func_2408(%var_2409) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_6756() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) {
  @func_6754() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) */
}

def @func_10190() -> (Tensor[(2, 3, 16), float64], uint8) {
  %173 = fn () -> (Tensor[(2, 3, 16), float64], uint8) {
    %169 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %170 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
    %171 = %169.0;
    %172 = %170.3;
    (%171, %172)
  };
  %173() /* ty=(Tensor[(2, 3, 16), float64], uint8) */
}

def @func_4095() -> (Tensor[(2, 3, 16), float32],) {
  %178 = fn () -> (Tensor[(2, 3, 16), float32],) {
    %174 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %175 = %174.0;
    %176 = cast(%175, dtype="float32") /* ty=Tensor[(2, 3, 16), float32] */;
    %177 = sigmoid(%176) /* ty=Tensor[(2, 3, 16), float32] */;
    (%177,)
  };
  %178() /* ty=(Tensor[(2, 3, 16), float32],) */
}

def @func_6475() -> (Tensor[(2, 3, 16), float64], Tensor[(325), float64]) {
  %179 = @func_6308() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %180 = %179.0;
  %181 = @func_6033() /* ty=Tensor[(325), float64] */;
  (%180, %181)
}

def @func_7080() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_9479() -> Tensor[(2, 3, 16), float64] {
  @func_9477() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_4882(%var_4881: Tensor[(3, 15, 2), int8]) -> Tensor[(3, 15, 2), bool] {
  %186 = fn (%var_4861: Tensor[(3, 15, 2), int8]) -> Tensor[(3, 15, 2), bool] {
    %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
    %183 = shape_of(%var_4861, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%var_4861, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%184, %185) /* ty=Tensor[(3, 15, 2), bool] */
  };
  %186(%var_4881) /* ty=Tensor[(3, 15, 2), bool] */
}

def @func_6063() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) {
  @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */
}

def @func_3124(%var_3122: Tensor[(4, 14, 13), int8]) -> (Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  @func_3121(%var_3122) /* ty=(Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */
}

def @func_1390() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %191 = fn () -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
    %187 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
    %188 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %189 = %187.0;
    %190 = %188.0;
    (%189, %190)
  };
  %191() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */
}

def @func_6309() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %195 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
    %192 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
    %193 = %192.0;
    %194 = @func_6290() /* ty=Tensor[(2, 3, 16), float64] */;
    (%193, %194)
  };
  %195() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_935(%var_933: Tensor[(15, 13, 2), int32]) -> (Tensor[(15, 13, 2), uint64],) {
  @func_932(%var_933) /* ty=(Tensor[(15, 13, 2), uint64],) */
}

def @func_3322() -> Tensor[(10, 1, 9), uint64] {
  %196 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %197 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 1, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 1, 9), uint64] */;
  bitwise_or(%196, %197) /* ty=Tensor[(10, 1, 9), uint64] */
}

def @func_3820() -> Tensor[(14, 9, 15), bool] {
  @func_3818() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1627() -> (Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) {
  %206 = fn () -> (Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) {
    %198 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %199 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %200 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %201 = reshape(%199, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
    %202 = reshape(%200, newshape=[]) /* ty=int8 */;
    %203 = @func_1076(%201, %202) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) */;
    %204 = %198.0;
    %205 = %203.6;
    (%204, %205, meta[relay.Constant][16] /* ty=Tensor[(360), float64] */, meta[relay.Constant][17] /* ty=int8 */)
  };
  %206() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */
}

def @func_4525(%var_4523: int8, %var_4524: Tensor[(1, 11, 8), int8]) -> (Tensor[(1, 11, 8), bool],) {
  @func_4521(%var_4523, %var_4524) /* ty=(Tensor[(1, 11, 8), bool],) */
}

def @func_4293() -> (int8, Tensor[(14, 9, 15), bool]) {
  @func_4291() /* ty=(int8, Tensor[(14, 9, 15), bool]) */
}

def @func_6215() -> Tensor[(4, 16, 16), float64] {
  @func_6213() /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_1848(%var_1843: Tensor[(2, 10, 4), uint64], %var_1844: Tensor[(2, 10, 4), uint64]) -> Tensor[(2, 10, 4), bool] {
  %207 = cast(%var_1844, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %208 = shape_of(%var_1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_1843, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%209, %210) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_3581() -> (Tensor[(2, 3, 16), float64],) {
  @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_8940(%var_8907: Tensor[(8, 4, 10), float64], %var_8922: Tensor[(455), int16]) -> (Tensor[(8, 4, 10), uint64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(2, 3, 16), float64]) {
  %211 = @func_6846() /* ty=(Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) */;
  %212 = %211.0;
  %213 = cast(%var_8907, dtype="uint64") /* ty=Tensor[(8, 4, 10), uint64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="uint64") /* ty=Tensor[(8, 4, 10), uint64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %217 = cast(%var_8922, dtype="int16") /* ty=Tensor[(455), int16] */;
  %218 = reshape(%217, newshape=[455, 1]) /* ty=Tensor[(455, 1), int16] */;
  %219 = @func_6143(%218) /* ty=(int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) */;
  %220 = @func_8667() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %221 = logical_xor(%215, %216) /* ty=Tensor[(8, 4, 10), uint64] */;
  %222 = %219.1;
  %223 = %220.0;
  (%221, %222, %var_8922, %223)
}

def @func_1338(%var_1336: Tensor[(390), int32]) -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) {
  @func_1335(%var_1336) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) */
}

def @func_6987(%var_6985: Tensor[(108), uint8]) -> (Tensor[(2, 3, 16), float64], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  @func_6984(%var_6985) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) */
}

def @func_4167() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) {
  @func_4165() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) */
}

def @func_1793() -> (Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) {
  %229 = fn () -> (Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) {
    %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
    %225 = reshape(%224, newshape=[390]) /* ty=Tensor[(390), int32] */;
    %226 = @func_1335(%225) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) */;
    %227 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
    %228 = %226.1;
    (%227, %228, meta[relay.Constant][18] /* ty=Tensor[(390), int32] */)
  };
  %229() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */
}

def @func_9107() -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64]) {
  %230 = @func_8148() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %231 = cast(meta[relay.Constant][19] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %232 = reshape(%231, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %233 = @func_5368(%232) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) */;
  %234 = %230.0;
  %235 = %233.2;
  (%234, %235, meta[relay.Constant][19] /* ty=Tensor[(90), float64] */)
}

def @func_3324() -> Tensor[(10, 1, 9), uint64] {
  @func_3322() /* ty=Tensor[(10, 1, 9), uint64] */
}

def @func_4492() -> Tensor[(2, 3, 16), float64] {
  %237 = fn () -> Tensor[(2, 3, 16), float64] {
    %236 = @func_4165() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) */;
    %236.0
  };
  %237() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_1412() -> Tensor[(2, 3, 16), float64] {
  @func_1262() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_7214() -> Tensor[(2, 3, 16), float32] {
  @func_7212() /* ty=Tensor[(2, 3, 16), float32] */
}

def @func_9453() -> (Tensor[(2, 3, 16), float64],) {
  @func_9451() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_4801(%var_4799: int16, %var_4800: Tensor[(7, 13, 5), int16]) -> (Tensor[(7, 13, 5), int16],) {
  %241 = fn (%var_4783: int16, %var_4784: Tensor[(7, 13, 5), int16]) -> (Tensor[(7, 13, 5), int16],) {
    %238 = cast(%var_4783, dtype="int16") /* ty=int16 */;
    %239 = cast(%var_4784, dtype="int16") /* ty=Tensor[(7, 13, 5), int16] */;
    %240 = bitwise_and(%238, %239) /* ty=Tensor[(7, 13, 5), int16] */;
    (%240,)
  };
  %241(%var_4799, %var_4800) /* ty=(Tensor[(7, 13, 5), int16],) */
}

def @func_6356(%var_6348: Tensor[(7, 1, 10), float64]) -> (Tensor[(7, ?, 10), int64],) {
  %242 = cast(%var_6348, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %243 = sinh(%242) /* ty=Tensor[(7, 1, 10), float64] */;
  %244 = cast(%var_6348, dtype="int64") /* ty=Tensor[(7, 1, 10), int64] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="int64") /* ty=Tensor[(7, 1, 10), int64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %248 = multiply(%246, %247) /* ty=Tensor[(7, ?, 10), int64] */;
  (%248,)
}

def @func_1288() -> (Tensor[(2, 3, 16), float64],) {
  @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_10392(%var_10386: Tensor[(16, 10, 16), float32]) -> (Tensor[(16, 10, 16), float32],) {
  %249 = cast(%var_10386, dtype="float32") /* ty=Tensor[(16, 10, 16), float32] */;
  %250 = tan(%249) /* ty=Tensor[(16, 10, 16), float32] */;
  (%250,)
}

def @func_3358() -> Tensor[(14, 9, 15), bool] {
  @func_1877() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_4591() -> (Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) {
  %251 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %252 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 9, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = @func_3579() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %256 = less_equal(%253, %254) /* ty=Tensor[(6, 9, 3), bool] */;
  %257 = %255.0;
  (%256, %257)
}

def @func_8312() -> (Tensor[(2, 3, 16), float64],) {
  %259 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %258 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
    (%258,)
  };
  %259() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_1877() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_10519() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  @func_10517() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_10676() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(2184), float32], Tensor[(13), float64]) {
  %260 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %261 = @func_4094() /* ty=(Tensor[(2, 3, 16), float32],) */;
  %262 = cast(meta[relay.Constant][22] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %263 = reshape(%262, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), float64] */;
  %264 = @func_2238(%263) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) */;
  %265 = %260.1;
  %266 = %261.0;
  %267 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %268 = %264.2;
  (%265, %266, %267, %268, meta[relay.Constant][22] /* ty=Tensor[(13), float64] */)
}

def @func_1262() -> Tensor[(2, 3, 16), float64] {
  %269 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %269.0
}

def @func_2817(%var_2815: int16, %var_2816: Tensor[(13, 16, 4), int16]) -> (int8, Tensor[(6, 15, 5), float32], Tensor[(10, 45), uint8], Tensor[(13, 16, 4), float64]) {
  %289 = fn (%var_2742: int16, %var_2743: Tensor[(13, 16, 4), int16]) -> (int8, Tensor[(6, 15, 5), float32], Tensor[(10, 45), uint8], Tensor[(13, 16, 4), float64]) {
    %270 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
    %271 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 45), uint8] */, dtype="uint8") /* ty=Tensor[(10, 45), uint8] */;
    %272 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 45), uint8] */, dtype="uint8") /* ty=Tensor[(10, 45), uint8] */;
    %273 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 45), uint8] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
    %274 = reshape(%271, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
    %275 = reshape(%272, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
    %276 = reshape(%273, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), bool] */;
    %277 = @func_337(%274, %275, %276) /* ty=(Tensor[(6, 15, 5), float32],) */;
    %278 = cast(%var_2742, dtype="bool") /* ty=bool */;
    %279 = cast(%var_2743, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
    %280 = greater(%278, %279) /* ty=Tensor[(13, 16, 4), bool] */;
    %281 = cast(%280, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
    %282 = asin(%281) /* ty=Tensor[(13, 16, 4), float64] */;
    %283 = cast(%282, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
    %284 = cosh(%283) /* ty=Tensor[(13, 16, 4), float32] */;
    %285 = cast(%284, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
    %286 = %270.1;
    %287 = %277.0;
    %288 = sqrt(%285) /* ty=Tensor[(13, 16, 4), float64] */;
    (%286, %287, meta[relay.Constant][23] /* ty=Tensor[(10, 45), uint8] */, %288)
  };
  %289(%var_2815, %var_2816) /* ty=(int8, Tensor[(6, 15, 5), float32], Tensor[(10, 45), uint8], Tensor[(13, 16, 4), float64]) */
}

def @func_10565(%var_10564: Tensor[(351), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(3, 9, 13), bool], Tensor[(351), float64]) {
  %297 = fn (%var_10554: Tensor[(351), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(3, 9, 13), bool], Tensor[(351), float64]) {
    %290 = cast(%var_10554, dtype="float64") /* ty=Tensor[(351), float64] */;
    %291 = cast(%var_10554, dtype="float64") /* ty=Tensor[(351), float64] */;
    %292 = reshape(%290, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), float64] */;
    %293 = reshape(%291, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), float64] */;
    %294 = @func_8421(%292, %293) /* ty=(Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) */;
    %295 = @func_1345() /* ty=Tensor[(2, 3, 16), float64] */;
    %296 = %294.0;
    (%295, %296, %var_10554)
  };
  %297(%var_10564) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(3, 9, 13), bool], Tensor[(351), float64]) */
}

def @func_6213() -> Tensor[(4, 16, 16), float64] {
  %298 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  erf(%298) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_8749() -> (Tensor[(2, 3, 16), float64],) {
  %299 = @func_7223() /* ty=Tensor[(2, 3, 16), float64] */;
  (%299,)
}

def @func_551(%var_549: Tensor[(12, 14, 13), float32], %var_550: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) {
  %310 = fn (%var_535: Tensor[(12, 14, 13), float32], %var_536: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) {
    %300 = cast(%var_536, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
    %301 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%var_535, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %304 = cast(%var_536, dtype="int16") /* ty=Tensor[(12, 14, 13), int16] */;
    %305 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%var_535, dtype="int16") /* ty=Tensor[(12, 14, 13), int16] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %308 = power(%302, %303) /* ty=Tensor[(12, 14, 13), float32] */;
    %309 = multiply(%306, %307) /* ty=Tensor[(12, 14, 13), int16] */;
    (%308, %309)
  };
  %310(%var_549, %var_550) /* ty=(Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) */
}

def @func_2175(%var_2172: Tensor[(3, 7, 14), float32], %var_2173: Tensor[(390), uint64], %var_2174: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float32], Tensor[(1, 13, 12), float64], Tensor[(156), float64], Tensor[(15, 13, 2), float64], Tensor[(390), uint64], Tensor[(3, 7, 14), uint32]) {
  %327 = fn (%var_2110: Tensor[(3, 7, 14), float32], %var_2162: Tensor[(390), uint64], %var_2167: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float32], Tensor[(1, 13, 12), float64], Tensor[(156), float64], Tensor[(15, 13, 2), float64], Tensor[(390), uint64], Tensor[(3, 7, 14), uint32]) {
    %311 = cast(%var_2110, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
    %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %313 = reshape(%312, newshape=[39, 4]) /* ty=Tensor[(39, 4), float64] */;
    %314 = @func_1517(%313) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) */;
    %315 = cast(%var_2162, dtype="uint64") /* ty=Tensor[(390), uint64] */;
    %316 = reshape(%315, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), uint64] */;
    %317 = cast(%var_2110, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
    %318 = cosh(%317) /* ty=Tensor[(3, 7, 14), float64] */;
    %319 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(3, 7, 14), uint32] */;
    %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%318, dtype="uint32") /* ty=Tensor[(3, 7, 14), uint32] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %323 = acos(%311) /* ty=Tensor[(3, 7, 14), float32] */;
    %324 = %314.2;
    %325 = @func_2086(%316) /* ty=Tensor[(15, 13, 2), float64] */;
    %326 = left_shift(%321, %322) /* ty=Tensor[(3, 7, 14), uint32] */;
    (%323, %324, meta[relay.Constant][25] /* ty=Tensor[(156), float64] */, %325, %var_2162, %326)
  };
  %327(%var_2172, %var_2173, %var_2174) /* ty=(Tensor[(3, 7, 14), float32], Tensor[(1, 13, 12), float64], Tensor[(156), float64], Tensor[(15, 13, 2), float64], Tensor[(390), uint64], Tensor[(3, 7, 14), uint32]) */
}

def @func_1151(%var_1105: Tensor[(12, 8, 13), float32]) -> (Tensor[(12, 8, 13), float32],) {
  %328 = cast(%var_1105, dtype="float32") /* ty=Tensor[(12, 8, 13), float32] */;
  %329 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 8, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 13), float32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %332 = maximum(%330, %331) /* ty=Tensor[(12, 8, 13), float32] */;
  (%332,)
}

def @func_4065(%var_4032: Tensor[(336), uint16]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16], Tensor[(1890), int64], Tensor[(6, 4, 14), bool], Tensor[(?, 6, 3), bool], Tensor[(2, 3, 16), float64], Tensor[(728), int8]) {
  %333 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %334 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %335 = cast(%var_4032, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %336 = reshape(%334, newshape=[]) /* ty=uint16 */;
  %337 = reshape(%335, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %338 = cast(meta[relay.Constant][28] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %339 = reshape(%338, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %340 = @func_2501(%339) /* ty=Tensor[(14, 9, 15), float32] */;
  %341 = cast(%340, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
  %342 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(1890), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %343 = cast(meta[relay.Constant][28] /* ty=Tensor[(1890), bool] */, dtype="int64") /* ty=Tensor[(1890), int64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?), int64] */;
  %345 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %346 = @func_3480(%336, %337) /* ty=Tensor[(6, 4, 14), bool] */;
  %347 = cast(%346, dtype="uint16") /* ty=Tensor[(6, 4, 14), uint16] */;
  %348 = reshape(%345, newshape=[]) /* ty=uint16 */;
  %349 = reshape(%347, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), uint16] */;
  %350 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), int8] */, dtype="int8") /* ty=Tensor[(728), int8] */;
  %351 = reshape(%350, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int8] */;
  %352 = @func_3121(%351) /* ty=(Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %353 = %333.1;
  %354 = right_shift(%343, %344) /* ty=Tensor[(1890), int64] */;
  %355 = @func_3480(%348, %349) /* ty=Tensor[(6, 4, 14), bool] */;
  %356 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
  %357 = %352.2;
  (%353, %346, meta[relay.Constant][27] /* ty=uint16 */, %var_4032, %354, %355, %356, %357, meta[relay.Constant][29] /* ty=Tensor[(728), int8] */)
}

def @func_4214(%var_4175: Tensor[(8, 1, 11), int8], %var_4176: Tensor[(8, 2, 11), int8], %var_4196: Tensor[(8, 2, 11), int8]) -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), float32]) {
  %358 = cast(%var_4175, dtype="bool") /* ty=Tensor[(8, 1, 11), bool] */;
  %359 = cast(%var_4176, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %360 = cast(%var_4196, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %361 = shape_of(%var_4176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_4176, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = less(%358, %359) /* ty=Tensor[(8, 2, 11), bool] */;
  %365 = floor_mod(%362, %363) /* ty=Tensor[(8, 2, 11), float32] */;
  (%364, %365)
}

def @func_5829() -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) {
  %366 = @func_2611() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32]) */;
  %367 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 390), int32] */, dtype="int32") /* ty=Tensor[(1, 390), int32] */;
  %368 = reshape(%367, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), int32] */;
  %369 = @func_932(%368) /* ty=(Tensor[(15, 13, 2), uint64],) */;
  %370 = %366.0;
  %371 = %369.0;
  (%370, %371, meta[relay.Constant][30] /* ty=Tensor[(1, 390), int32] */)
}

def @func_234(%var_233: int8) -> Tensor[(14, 9, 15), bool] {
  %374 = fn (%var_225: int8) -> Tensor[(14, 9, 15), bool] {
    %372 = cast(%var_225, dtype="bool") /* ty=bool */;
    %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 9, 15), int8] */, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
    less_equal(%372, %373) /* ty=Tensor[(14, 9, 15), bool] */
  };
  %374(%var_233) /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_6685(%var_6684: Tensor[(1, 80), uint64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 10, 4), bool], Tensor[(1, 80), uint64]) {
  %382 = fn (%var_6681: Tensor[(1, 80), uint64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 10, 4), bool], Tensor[(1, 80), uint64]) {
    %375 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
    %376 = cast(%var_6681, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
    %377 = cast(%var_6681, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
    %378 = reshape(%376, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
    %379 = reshape(%377, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
    %380 = %375.0;
    %381 = @func_1848(%378, %379) /* ty=Tensor[(2, 10, 4), bool] */;
    (%380, %381, %var_6681)
  };
  %382(%var_6684) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 10, 4), bool], Tensor[(1, 80), uint64]) */
}

def @func_7358() -> (Tensor[(14, 9, 15), float64], Tensor[(1, 1890), bool]) {
  @func_7356() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(1, 1890), bool]) */
}

def @func_4405() -> Tensor[(2, 3, 16), float64] {
  @func_2833() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_7097() -> Tensor[(2, 3, 16), float64] {
  %383 = fn () -> Tensor[(2, 3, 16), float64] {
    @func_2833() /* ty=Tensor[(2, 3, 16), float64] */
  };
  %383() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_1727() -> (int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) {
  @func_1725() /* ty=(int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) */
}

def @func_9144() -> Tensor[(390), int32] {
  %385 = fn () -> Tensor[(390), int32] {
    %384 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
    %384.2
  };
  %385() /* ty=Tensor[(390), int32] */
}

def @func_4856() -> (Tensor[(14, 9, 15), bool],) {
  %386 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %387 = %386.0;
  (%387,)
}

def @func_1335(%var_1302: Tensor[(390), int32]) -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) {
  %388 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %389 = cast(%var_1302, dtype="int32") /* ty=Tensor[(390), int32] */;
  %390 = reshape(%389, newshape=[15, 13, 2]) /* ty=Tensor[(15, 13, 2), int32] */;
  %391 = @func_932(%390) /* ty=(Tensor[(15, 13, 2), uint64],) */;
  %392 = cast(meta[relay.Constant][32] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %393 = reshape(%392, newshape=[12, 8, 13]) /* ty=Tensor[(12, 8, 13), float32] */;
  %394 = @func_1151(%393) /* ty=(Tensor[(12, 8, 13), float32],) */;
  %395 = cast(meta[relay.Constant][32] /* ty=Tensor[(1248), float32] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %396 = %388.0;
  %397 = %391.0;
  %398 = %394.0;
  %399 = log(%395) /* ty=Tensor[(1248), float64] */;
  (%396, %397, %var_1302, %398, %399)
}

def @func_5972() -> (Tensor[(14, 9, 15), bool],) {
  %400 = @func_1688() /* ty=Tensor[(14, 9, 15), bool] */;
  (%400,)
}

def @func_2719(%var_2673: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
  %401 = cast(%var_2673, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
  %402 = cast(%var_2673, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
  %403 = rsqrt(%402) /* ty=Tensor[(2, 10, 11), float32] */;
  %404 = cast(%var_2673, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
  %405 = cos(%404) /* ty=Tensor[(2, 10, 11), float32] */;
  %406 = cast(%405, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %407 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%403, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = cosh(%401) /* ty=Tensor[(2, 10, 11), float64] */;
  %411 = greater_equal(%408, %409) /* ty=Tensor[(2, 10, 11), bool] */;
  (%410, %411)
}

def @func_6413() -> (Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), bool]) {
  @func_6411() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), bool]) */
}

def @func_33(%var_31: Tensor[(2, 12, 15), float64]) -> Tensor[(2, 12, 15), float64] {
  @func_30(%var_31) /* ty=Tensor[(2, 12, 15), float64] */
}

def @func_6605(%var_6604: Tensor[(1, 1890), bool]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) {
  %426 = fn (%var_6589: Tensor[(1, 1890), bool]) -> (Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) {
    %412 = cast(meta[relay.Constant][33] /* ty=Tensor[(450), uint8] */, dtype="uint8") /* ty=Tensor[(450), uint8] */;
    %413 = cast(meta[relay.Constant][33] /* ty=Tensor[(450), uint8] */, dtype="uint8") /* ty=Tensor[(450), uint8] */;
    %414 = cast(meta[relay.Constant][33] /* ty=Tensor[(450), uint8] */, dtype="bool") /* ty=Tensor[(450), bool] */;
    %415 = reshape(%412, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
    %416 = reshape(%413, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), uint8] */;
    %417 = reshape(%414, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), bool] */;
    %418 = @func_337(%415, %416, %417) /* ty=(Tensor[(6, 15, 5), float32],) */;
    %419 = cast(%var_6589, dtype="bool") /* ty=Tensor[(1, 1890), bool] */;
    %420 = reshape(%419, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
    %421 = @func_3999() /* ty=(Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) */;
    %422 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
    %423 = %418.0;
    %424 = @func_2501(%420) /* ty=Tensor[(14, 9, 15), float32] */;
    %425 = %421.1;
    (%422, %423, meta[relay.Constant][33] /* ty=Tensor[(450), uint8] */, %424, %var_6589, %425)
  };
  %426(%var_6604) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) */
}

def @func_8527() -> (Tensor[(14, 9, 15), bool], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16]) {
  @func_8525() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(6, 4, 14), bool], uint16, Tensor[(336), uint16]) */
}

def @func_6291() -> Tensor[(2, 3, 16), float64] {
  %428 = fn () -> Tensor[(2, 3, 16), float64] {
    %427 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
    %427.5
  };
  %428() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_9226() -> (Tensor[(14, 9, 15), bool], Tensor[(5, 11, 14), float32]) {
  %437 = fn () -> (Tensor[(14, 9, 15), bool], Tensor[(5, 11, 14), float32]) {
    %429 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
    %430 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
    %431 = asin(%430) /* ty=Tensor[(5, 11, 14), float64] */;
    %432 = cast(%431, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
    %433 = log10(%432) /* ty=Tensor[(5, 11, 14), float32] */;
    %434 = cast(%433, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
    %435 = %429.1;
    %436 = acosh(%434) /* ty=Tensor[(5, 11, 14), float32] */;
    (%435, %436)
  };
  %437() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(5, 11, 14), float32]) */
}

def @func_8508() -> (Tensor[(2, 3, 16), float64], Tensor[(7, 10, 11), int32]) {
  %449 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(7, 10, 11), int32]) {
    %438 = @func_3792() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) */;
    %439 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
    %440 = exp(%439) /* ty=Tensor[(7, 10, 11), float32] */;
    %441 = cast(%440, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
    %442 = acos(%441) /* ty=Tensor[(7, 10, 11), float32] */;
    %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 10, 11), float32] */, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %447 = %438.0;
    %448 = right_shift(%445, %446) /* ty=Tensor[(7, 10, 11), int32] */;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(7, 10, 11), int32]) */
}

def @func_8849() -> Tensor[(14, 9, 15), float32] {
  %450 = @func_4951() /* ty=(Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %450.0
}

def @func_4291() -> (int8, Tensor[(14, 9, 15), bool]) {
  %451 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %452 = %451.1;
  %453 = @func_1575() /* ty=Tensor[(14, 9, 15), bool] */;
  (%452, %453)
}

def @func_4165() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), bool]) {
  %454 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %455 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %456 = %454.1;
  %457 = %455.1;
  (%456, %457)
}

def @func_5914(%var_5884: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), int8], Tensor[(2, 3, 16), float64]) {
  %458 = cast(%var_5884, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
  %459 = sqrt(%458) /* ty=Tensor[(5, 13, 4), float32] */;
  %460 = cast(%459, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
  %461 = shape_of(%var_5884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_5884, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = not_equal(%462, %463) /* ty=Tensor[(5, 13, 4), bool] */;
  %465 = cast(%459, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %469 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %470 = bitwise_xor(%467, %468) /* ty=Tensor[(5, 13, 4), int8] */;
  %471 = %469.0;
  (%470, %471)
}

def @func_5444() -> (Tensor[(2, 3, 16), float64],) {
  @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_8751() -> (Tensor[(2, 3, 16), float64],) {
  @func_8749() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_2068() -> (Tensor[(2, 3, 16), float64],) {
  %474 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %472 = @func_2020() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %473 = %472.0;
    (%473,)
  };
  %474() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_1662() -> Tensor[(2, 3, 16), float64] {
  @func_1660() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_3579() -> (Tensor[(2, 3, 16), float64],) {
  %475 = @func_1345() /* ty=Tensor[(2, 3, 16), float64] */;
  (%475,)
}

def @func_7223() -> Tensor[(2, 3, 16), float64] {
  %476 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %476.0
}

def @func_7556() -> (Tensor[(2, 3, 16), float64],) {
  %478 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %477 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
    (%477,)
  };
  %478() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_6171() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %479 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
  %480 = %479.1;
  %481 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  (%480, %481)
}

def @func_30(%var_16: Tensor[(2, 12, 15), float64]) -> Tensor[(2, 12, 15), float64] {
  %482 = cast(%var_16, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %483 = atanh(%482) /* ty=Tensor[(2, 12, 15), float64] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %485 = cos(%484) /* ty=Tensor[(2, 12, 15), float64] */;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
  %487 = log(%486) /* ty=Tensor[(2, 12, 15), float32] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  sin(%488) /* ty=Tensor[(2, 12, 15), float64] */
}

def @func_2835() -> Tensor[(2, 3, 16), float64] {
  @func_2833() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_7180() -> (int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) {
  %503 = fn () -> (int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) {
    %489 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
    %490 = cast(meta[relay.Constant][36] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
    %491 = reshape(%490, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), float64] */;
    %492 = @func_5422(%491) /* ty=(Tensor[(14, 11, 1), float64],) */;
    %493 = %492.0;
    %494 = cast(%493, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
    %495 = asin(%494) /* ty=Tensor[(14, 11, 1), float64] */;
    %496 = cast(%493, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %500 = %489.3;
    %501 = @func_3358() /* ty=Tensor[(14, 9, 15), bool] */;
    %502 = mod(%498, %499) /* ty=Tensor[(14, 11, ?), float32] */;
    (%500, meta[relay.Constant][36] /* ty=Tensor[(154), float64] */, %501, %502)
  };
  %503() /* ty=(int8, Tensor[(154), float64], Tensor[(14, 9, 15), bool], Tensor[(14, 11, ?), float32]) */
}

def @func_9944() -> (Tensor[(2, 3, 16), float64],) {
  %505 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %504 = @func_7096() /* ty=Tensor[(2, 3, 16), float64] */;
    (%504,)
  };
  %505() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_1690() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_7401() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  @func_7399() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */
}

def @func_7494(%var_7486: float64, %var_7487: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 1, 1), bool],) {
  %506 = cast(%var_7486, dtype="bool") /* ty=bool */;
  %507 = cast(%var_7487, dtype="bool") /* ty=Tensor[(2, 1, 1), bool] */;
  %508 = greater_equal(%506, %507) /* ty=Tensor[(2, 1, 1), bool] */;
  (%508,)
}

def @func_7747() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 90), float64]) {
  %509 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %510 = reshape(%509, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %511 = @func_6024(%510) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) */;
  %512 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  %513 = %511.2;
  (%512, %513, meta[relay.Constant][37] /* ty=Tensor[(1, 90), float64] */)
}

def @func_1852(%var_1850: Tensor[(2, 10, 4), uint64], %var_1851: Tensor[(2, 10, 4), uint64]) -> Tensor[(2, 10, 4), bool] {
  @func_1848(%var_1850, %var_1851) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_2086(%var_2077: Tensor[(15, 13, 2), uint64]) -> Tensor[(15, 13, 2), float64] {
  %514 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %515 = %514.1;
  %516 = cast(%var_2077, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float64") /* ty=Tensor[(15, 13, 2), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%518, %519) /* ty=Tensor[(15, 13, 2), float64] */
}

def @func_1577() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_3480(%var_3464: uint16, %var_3465: Tensor[(6, 4, 14), uint16]) -> Tensor[(6, 4, 14), bool] {
  %520 = cast(%var_3464, dtype="bool") /* ty=bool */;
  %521 = cast(%var_3465, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  greater(%520, %521) /* ty=Tensor[(6, 4, 14), bool] */
}

def @func_7008() -> Tensor[(2, 3, 16), float32] {
  @func_7006() /* ty=Tensor[(2, 3, 16), float32] */
}

def @func_8944(%var_8942: Tensor[(8, 4, 10), float64], %var_8943: Tensor[(455), int16]) -> (Tensor[(8, 4, 10), uint64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(2, 3, 16), float64]) {
  @func_8940(%var_8942, %var_8943) /* ty=(Tensor[(8, 4, 10), uint64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(2, 3, 16), float64]) */
}

def @func_5831() -> (Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) {
  @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */
}

def @func_1598() -> Tensor[(?, 6, 3), bool] {
  %526 = fn () -> Tensor[(?, 6, 3), bool] {
    %522 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 6, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
    %523 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(1, 6, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 6, 3), int32] */, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%524, %525) /* ty=Tensor[(?, 6, 3), bool] */
  };
  %526() /* ty=Tensor[(?, 6, 3), bool] */
}

def @func_8667() -> (Tensor[(2, 3, 16), float64],) {
  %527 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
  (%527,)
}

def @func_1414() -> Tensor[(2, 3, 16), float64] {
  @func_1412() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_2552() -> Tensor[(2, 3, 16), float64] {
  %528 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %528.1
}

def @func_2969(%var_2967: Tensor[(80, 1), uint64], %var_2968: uint8) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  @func_2965(%var_2967, %var_2968) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) */
}

def @func_1346() -> Tensor[(2, 3, 16), float64] {
  %530 = fn () -> Tensor[(2, 3, 16), float64] {
    %529 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %529.0
  };
  %530() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_9783() -> (Tensor[(14, 9, 15), bool], Tensor[(?, 6, 3), bool], Tensor[(15, 13, 2), uint64]) {
  %535 = fn () -> (Tensor[(14, 9, 15), bool], Tensor[(?, 6, 3), bool], Tensor[(15, 13, 2), uint64]) {
    %531 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
    %532 = @func_5225() /* ty=Tensor[(14, 9, 15), bool] */;
    %533 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
    %534 = %531.1;
    (%532, %533, %534)
  };
  %535() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(?, 6, 3), bool], Tensor[(15, 13, 2), uint64]) */
}

def @func_6411() -> (Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), bool]) {
  %536 = @func_3226() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) */;
  %537 = @func_6290() /* ty=Tensor[(2, 3, 16), float64] */;
  %538 = %536.1;
  (%537, %538)
}

def @func_10395(%var_10393: Tensor[(16, 10, 16), float32]) -> (Tensor[(16, 10, 16), float32],) {
  @func_10392(%var_10393) /* ty=(Tensor[(16, 10, 16), float32],) */
}

def @func_7901(%var_7899: Tensor[(360), float64]) -> (Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) {
  @func_7898(%var_7899) /* ty=(Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) */
}

def @func_6086() -> (Tensor[(14, 9, 15), float64],) {
  %539 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
  %541 = sigmoid(%540) /* ty=Tensor[(14, 9, 15), float64] */;
  (%541,)
}

def @func_1185(%var_1183: uint8, %var_1184: Tensor[(12, 3, 3), uint8]) -> (Tensor[(12, 3, 3), bool],) {
  @func_1181(%var_1183, %var_1184) /* ty=(Tensor[(12, 3, 3), bool],) */
}

def @func_3375(%var_3374: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
  %543 = fn (%var_3366: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
    %542 = cast(%var_3366, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
    cos(%542) /* ty=Tensor[(1, 8, 14), float64] */
  };
  %543(%var_3374) /* ty=Tensor[(1, 8, 14), float64] */
}

def @func_7399() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %544 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %545 = @func_2454() /* ty=Tensor[(14, 9, 15), bool] */;
  %546 = %544.0;
  (%545, %546)
}

def @func_1253() -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) {
  @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */
}

def @func_1286() -> (Tensor[(2, 3, 16), float64],) {
  %547 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %548 = %547.0;
  (%548,)
}

def @func_7058(%var_7038: int8, %var_7039: Tensor[(10, 12, 13), int8]) -> (Tensor[(10, 12, 13), int8], Tensor[(?, 6, 3), int32]) {
  %549 = cast(%var_7038, dtype="int8") /* ty=int8 */;
  %550 = cast(%var_7039, dtype="int8") /* ty=Tensor[(10, 12, 13), int8] */;
  %551 = @func_1597() /* ty=Tensor[(?, 6, 3), bool] */;
  %552 = cast(%551, dtype="int32") /* ty=Tensor[(?, 6, 3), int32] */;
  %553 = cast(%var_7038, dtype="int32") /* ty=int32 */;
  %554 = bitwise_and(%549, %550) /* ty=Tensor[(10, 12, 13), int8] */;
  %555 = subtract(%552, %553) /* ty=Tensor[(?, 6, 3), int32] */;
  (%554, %555)
}

def @func_6454() -> (Tensor[(1, 390), int32],) {
  %558 = fn () -> (Tensor[(1, 390), int32],) {
    %556 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
    %557 = %556.2;
    (%557,)
  };
  %558() /* ty=(Tensor[(1, 390), int32],) */
}

def @func_5225() -> Tensor[(14, 9, 15), bool] {
  @func_1877() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_5974() -> (Tensor[(14, 9, 15), bool],) {
  @func_5972() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_2389() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_6848() -> (Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) {
  @func_6846() /* ty=(Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_2089(%var_2087: Tensor[(15, 13, 2), uint64]) -> Tensor[(15, 13, 2), float64] {
  @func_2086(%var_2087) /* ty=Tensor[(15, 13, 2), float64] */
}

def @func_9451() -> (Tensor[(2, 3, 16), float64],) {
  %559 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %560 = %559.0;
  (%560,)
}

def @func_3818() -> Tensor[(14, 9, 15), bool] {
  @func_2454() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_889() -> (Tensor[(2, 3, 16), float64],) {
  %563 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %561 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 16), float64] */;
    %562 = atan(%561) /* ty=Tensor[(2, 3, 16), float64] */;
    (%562,)
  };
  %563() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_341(%var_338: Tensor[(6, 15, 5), uint8], %var_339: Tensor[(6, 15, 5), uint8], %var_340: Tensor[(6, 15, 5), bool]) -> (Tensor[(6, 15, 5), float32],) {
  %574 = fn (%var_324: Tensor[(6, 15, 5), uint8], %var_325: Tensor[(6, 15, 5), uint8], %var_333: Tensor[(6, 15, 5), bool]) -> (Tensor[(6, 15, 5), float32],) {
    %564 = cast(%var_325, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
    %565 = shape_of(%var_324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%var_324, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %568 = not_equal(%566, %567) /* ty=Tensor[(6, 15, 5), bool] */;
    %569 = cast(%var_333, dtype="float32") /* ty=Tensor[(6, 15, 5), float32] */;
    %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%568, dtype="float32") /* ty=Tensor[(6, 15, 5), float32] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %573 = divide(%571, %572) /* ty=Tensor[(6, 15, 5), float32] */;
    (%573,)
  };
  %574(%var_338, %var_339, %var_340) /* ty=(Tensor[(6, 15, 5), float32],) */
}

def @func_9541() -> Tensor[(14, 9, 15), bool] {
  %575 = fn () -> Tensor[(14, 9, 15), bool] {
    @func_2454() /* ty=Tensor[(14, 9, 15), bool] */
  };
  %575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_10290() -> (Tensor[(1, 390), int32], Tensor[(2, 3, 16), float64]) {
  @func_10288() /* ty=(Tensor[(1, 390), int32], Tensor[(2, 3, 16), float64]) */
}

def @func_8380() -> (Tensor[(14, 9, 15), bool],) {
  %578 = fn () -> (Tensor[(14, 9, 15), bool],) {
    %576 = @func_2300() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
    %577 = %576.1;
    (%577,)
  };
  %578() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_2226() -> Tensor[(14, 9, 15), bool] {
  %580 = fn () -> Tensor[(14, 9, 15), bool] {
    %579 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
    %579.0
  };
  %580() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_3803() -> (Tensor[(14, 9, 15), float64],) {
  %583 = fn () -> (Tensor[(14, 9, 15), float64],) {
    %581 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
    %582 = %581.0;
    (%582,)
  };
  %583() /* ty=(Tensor[(14, 9, 15), float64],) */
}

def @func_9885() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) {
  @func_9883() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */
}

def @func_1079(%var_1077: Tensor[(180, 2), float64], %var_1078: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) {
  %608 = fn (%var_1039: Tensor[(180, 2), float64], %var_1054: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) {
    %584 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %585 = cast(%var_1039, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
    %586 = reshape(%585, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
    %587 = @func_30(%586) /* ty=Tensor[(2, 12, 15), float64] */;
    %588 = cast(%587, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
    %589 = shape_of(%var_1039, dtype="int32") /* ty=Tensor[(2), int32] */;
    %590 = cast(%var_1039, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %592 = cast(%var_1054, dtype="int8") /* ty=int8 */;
    %593 = reshape(%592, newshape=[]) /* ty=int8 */;
    %594 = @func_906(%593) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
    %595 = cast(%var_1039, dtype="float32") /* ty=Tensor[(180, 2), float32] */;
    %596 = %594.2;
    %597 = cast(%596, dtype="int8") /* ty=int8 */;
    %598 = reshape(%597, newshape=[]) /* ty=int8 */;
    %599 = @func_906(%598) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
    %600 = cast(%var_1054, dtype="int8") /* ty=int8 */;
    %601 = reshape(%600, newshape=[]) /* ty=int8 */;
    %602 = @func_906(%601) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */;
    %603 = %584.0;
    %604 = mod(%590, %591) /* ty=Tensor[(180, 2), float64] */;
    %605 = asin(%595) /* ty=Tensor[(180, 2), float32] */;
    %606 = %599.0;
    %607 = %602.2;
    (%603, %604, %596, %var_1054, %605, %606, %607)
  };
  %608(%var_1077, %var_1078) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) */
}

def @func_2722(%var_2720: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
  @func_2719(%var_2720) /* ty=(Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) */
}

def @func_3006(%var_3005: Tensor[(2, 16, 7), uint64]) -> Tensor[(2, 16, 7), uint64] {
  %611 = fn (%var_2999: Tensor[(2, 16, 7), uint64]) -> Tensor[(2, 16, 7), uint64] {
    %609 = cast(meta[relay.Constant][41] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %610 = cast(%var_2999, dtype="uint64") /* ty=Tensor[(2, 16, 7), uint64] */;
    add(%609, %610) /* ty=Tensor[(2, 16, 7), uint64] */
  };
  %611(%var_3005) /* ty=Tensor[(2, 16, 7), uint64] */
}

def @func_7006() -> Tensor[(2, 3, 16), float32] {
  %612 = @func_4094() /* ty=(Tensor[(2, 3, 16), float32],) */;
  %612.0
}

def @func_9490() -> (Tensor[(14, 9, 15), bool],) {
  %614 = fn () -> (Tensor[(14, 9, 15), bool],) {
    %613 = @func_5225() /* ty=Tensor[(14, 9, 15), bool] */;
    (%613,)
  };
  %614() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_8601() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) {
  %615 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
  %616 = @func_7212() /* ty=Tensor[(2, 3, 16), float32] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(2, 3, 16), float32] */;
  %618 = %615.1;
  %619 = @func_7080() /* ty=Tensor[(14, 9, 15), bool] */;
  %620 = rsqrt(%617) /* ty=Tensor[(2, 3, 16), float32] */;
  (%618, %619, %620)
}

def @func_10678() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(2184), float32], Tensor[(13), float64]) {
  @func_10676() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(2184), float32], Tensor[(13), float64]) */
}

def @func_5371(%var_5369: Tensor[(90), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) {
  @func_5368(%var_5369) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) */
}

def @func_5227() -> Tensor[(14, 9, 15), bool] {
  @func_5225() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_1879() -> Tensor[(14, 9, 15), bool] {
  @func_1877() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_4712(%var_4710: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  @func_4709(%var_4710) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */
}

def @func_7993() -> Tensor[(14, 9, 15), bool] {
  @func_7991() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_9193() -> (Tensor[(14, 9, 15), bool],) {
  @func_9191() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_3793() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) {
  %626 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) {
    %621 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %622 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
    %623 = cast(%622, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
    %624 = %621.0;
    %625 = rsqrt(%623) /* ty=Tensor[(14, 9, 15), float64] */;
    (%624, %625)
  };
  %626() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) */
}

def @func_10288() -> (Tensor[(1, 390), int32], Tensor[(2, 3, 16), float64]) {
  %627 = @func_6453() /* ty=(Tensor[(1, 390), int32],) */;
  %628 = %627.0;
  %629 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%628, %629)
}

def @func_1213(%var_1212: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
  %631 = fn (%var_1192: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
    %630 = cast(%var_1192, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
    asinh(%630) /* ty=Tensor[(1, 13, 12), float64] */
  };
  %631(%var_1212) /* ty=Tensor[(1, 13, 12), float64] */
}

def @func_10474(%var_10473: Tensor[(360), float64]) -> (Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64]) {
  %637 = fn (%var_10463: Tensor[(360), float64]) -> (Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64]) {
    %632 = cast(%var_10463, dtype="float64") /* ty=Tensor[(360), float64] */;
    %633 = reshape(%632, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %634 = @func_7898(%633) /* ty=(Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) */;
    %635 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
    %636 = %634.4;
    (%635, %636, %var_10463)
  };
  %637(%var_10473) /* ty=(Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64]) */
}

def @func_8425(%var_8423: Tensor[(3, 9, 13), float64], %var_8424: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) {
  @func_8421(%var_8423, %var_8424) /* ty=(Tensor[(3, 9, 13), bool], Tensor[(3, 9, 13), float64]) */
}

def @func_2503(%var_2502: Tensor[(14, 9, 15), bool]) -> Tensor[(14, 9, 15), float32] {
  %643 = fn (%var_2478: Tensor[(14, 9, 15), bool]) -> Tensor[(14, 9, 15), float32] {
    %638 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
    %639 = cast(%var_2478, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
    %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%638, dtype="float32") /* ty=Tensor[(14, 9, 15), float32] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%641, %642) /* ty=Tensor[(14, 9, 15), float32] */
  };
  %643(%var_2502) /* ty=Tensor[(14, 9, 15), float32] */
}

def @func_7356() -> (Tensor[(14, 9, 15), float64], Tensor[(1, 1890), bool]) {
  %644 = @func_6086() /* ty=(Tensor[(14, 9, 15), float64],) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
  %647 = reshape(%646, newshape=[1, 1890]) /* ty=Tensor[(1, 1890), bool] */;
  %648 = @func_6603(%647) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(6, 15, 5), float32], Tensor[(450), uint8], Tensor[(14, 9, 15), float32], Tensor[(1, 1890), bool], Tensor[(10, 1, 9), uint64]) */;
  %649 = %648.4;
  (%645, %649)
}

def @func_5485(%var_5453: Tensor[(14, 13, 9), int16]) -> (Tensor[(14, 13, 9), int16], Tensor[(390), int32]) {
  %650 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 13, 9), int16] */, dtype="int16") /* ty=Tensor[(14, 13, 9), int16] */;
  %651 = shape_of(%var_5453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_5453, dtype="int16") /* ty=Tensor[(14, 13, 9), int16] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %654 = @func_1792() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(15, 13, 2), uint64], Tensor[(390), int32]) */;
  %655 = left_shift(%652, %653) /* ty=Tensor[(14, 13, 9), int16] */;
  %656 = %654.2;
  (%655, %656)
}

def @func_2240(%var_2239: Tensor[(1, 1, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) {
  %665 = fn (%var_2229: Tensor[(1, 1, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) {
    %657 = cast(%var_2229, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
    %658 = cast(meta[relay.Constant][43] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %659 = cast(meta[relay.Constant][43] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %660 = reshape(%658, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
    %661 = reshape(%659, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
    %662 = @func_548(%660, %661) /* ty=(Tensor[(12, 14, 13), float32], Tensor[(12, 14, 13), int16]) */;
    %663 = rsqrt(%657) /* ty=Tensor[(1, 1, 13), float64] */;
    %664 = %662.0;
    (%663, %664, meta[relay.Constant][43] /* ty=Tensor[(2184), float32] */)
  };
  %665(%var_2239) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32]) */
}

def @func_4692(%var_4691: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), float64],) {
  %672 = fn (%var_4685: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), float64],) {
    %666 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
    %667 = cast(%var_4685, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
    %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%666, dtype="float64") /* ty=Tensor[(14, 9, 15), float64] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %671 = mod(%669, %670) /* ty=Tensor[(14, 9, 15), float64] */;
    (%671,)
  };
  %672(%var_4691) /* ty=(Tensor[(14, 9, 15), float64],) */
}

def @func_10095() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32], Tensor[(1890), bool], Tensor[(15, 13, 2), uint64], int8) {
  %673 = @func_8667() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %674 = cast(meta[relay.Constant][44] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %675 = reshape(%674, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %676 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %677 = reshape(%676, newshape=[]) /* ty=int8 */;
  %678 = @func_4664(%677) /* ty=(Tensor[(15, 13, 2), uint64], Tensor[(14, 9, 15), bool], int8, Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %679 = %673.0;
  %680 = @func_2501(%675) /* ty=Tensor[(14, 9, 15), float32] */;
  %681 = %678.0;
  (%679, %680, meta[relay.Constant][44] /* ty=Tensor[(1890), bool] */, %681, meta[relay.Constant][45] /* ty=int8 */)
}

def @func_2554() -> Tensor[(2, 3, 16), float64] {
  @func_2552() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_6034() -> Tensor[(325), float64] {
  %683 = fn () -> Tensor[(325), float64] {
    %682 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
    %682.4
  };
  %683() /* ty=Tensor[(325), float64] */
}

def @func_9710() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(2, 3, 16), float64]) {
  %690 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(2, 3, 16), float64]) {
    %684 = @func_8148() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %685 = @func_8601() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) */;
    %686 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
    %687 = %684.0;
    %688 = %685.2;
    %689 = %686.1;
    (%687, %688, %689)
  };
  %690() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(2, 3, 16), float64]) */
}

def @func_2408(%var_2392: Tensor[(13, 5, 5), float64]) -> (Tensor[(13, 5, 5), float64], Tensor[(2, 3, 16), float64]) {
  %691 = cast(%var_2392, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %692 = acos(%691) /* ty=Tensor[(13, 5, 5), float64] */;
  %693 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  (%692, %693)
}

def @func_7991() -> Tensor[(14, 9, 15), bool] {
  @func_7080() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_5014(%var_5012: Tensor[(12, 2, 14), uint8], %var_5013: Tensor[(12, 2, 14), uint8]) -> Tensor[(12, 2, 14), uint8] {
  %698 = fn (%var_5001: Tensor[(12, 2, 14), uint8], %var_5002: Tensor[(12, 2, 14), uint8]) -> Tensor[(12, 2, 14), uint8] {
    %694 = cast(%var_5002, dtype="uint8") /* ty=Tensor[(12, 2, 14), uint8] */;
    %695 = shape_of(%var_5001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%var_5001, dtype="uint8") /* ty=Tensor[(12, 2, 14), uint8] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%696, %697) /* ty=Tensor[(12, 2, 14), uint8] */
  };
  %698(%var_5012, %var_5013) /* ty=Tensor[(12, 2, 14), uint8] */
}

def @func_6545(%var_6501: Tensor[(1, 3, 10), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(8, 42), bool], Tensor[(?, 3, 10), float32]) {
  %699 = @func_3607() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %700 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 42), uint8] */, dtype="uint8") /* ty=Tensor[(8, 42), uint8] */;
  %701 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 42), uint8] */, dtype="uint8") /* ty=Tensor[(8, 42), uint8] */;
  %702 = reshape(%700, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint8] */;
  %703 = reshape(%701, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint8] */;
  %704 = @func_5011(%702, %703) /* ty=Tensor[(12, 2, 14), uint8] */;
  %705 = cast(%704, dtype="bool") /* ty=Tensor[(12, 2, 14), bool] */;
  %706 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(8, 42), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %707 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 42), uint8] */, dtype="bool") /* ty=Tensor[(8, 42), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %709 = cast(%var_6501, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
  %710 = cosh(%709) /* ty=Tensor[(1, 3, 10), float64] */;
  %711 = cast(%var_6501, dtype="bool") /* ty=Tensor[(1, 3, 10), bool] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="bool") /* ty=Tensor[(1, 3, 10), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = greater_equal(%713, %714) /* ty=Tensor[(?, 3, 10), bool] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(?, 3, 10), float32] */;
  %717 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%710, dtype="float32") /* ty=Tensor[(1, 3, 10), float32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %720 = %699.0;
  %721 = logical_or(%707, %708) /* ty=Tensor[(8, 42), bool] */;
  %722 = multiply(%718, %719) /* ty=Tensor[(?, 3, 10), float32] */;
  (%720, %721, %722)
}

def @func_4521(%var_4505: int8, %var_4506: Tensor[(1, 11, 8), int8]) -> (Tensor[(1, 11, 8), bool],) {
  %723 = cast(%var_4505, dtype="bool") /* ty=bool */;
  %724 = cast(%var_4506, dtype="bool") /* ty=Tensor[(1, 11, 8), bool] */;
  %725 = equal(%723, %724) /* ty=Tensor[(1, 11, 8), bool] */;
  (%725,)
}

def @func_9439() -> Tensor[(2, 3, 16), float64] {
  %727 = fn () -> Tensor[(2, 3, 16), float64] {
    %726 = @func_5746() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool]) */;
    %726.0
  };
  %727() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_7307() -> Tensor[(3, 6, 5), float64] {
  %728 = @func_5785() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) */;
  %728.1
}

def @func_2965(%var_2897: Tensor[(80, 1), uint64], %var_2960: uint8) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  %729 = cast(meta[relay.Constant][47] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %730 = reshape(%729, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %731 = @func_1335(%730) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(390), int32], Tensor[(12, 8, 13), float32], Tensor[(1248), float64]) */;
  %732 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %733 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %734 = reshape(%732, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %735 = reshape(%733, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), uint64] */;
  %736 = cast(meta[relay.Constant][47] /* ty=Tensor[(390), int32] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %737 = asinh(%736) /* ty=Tensor[(390), float64] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(390), float32] */;
  %739 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
  %740 = cast(%var_2960, dtype="uint8") /* ty=uint8 */;
  %741 = cast(meta[relay.Constant][48] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %742 = reshape(%740, newshape=[]) /* ty=uint8 */;
  %743 = reshape(%741, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), uint8] */;
  %744 = @func_1181(%742, %743) /* ty=(Tensor[(12, 3, 3), bool],) */;
  %745 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  %746 = %731.0;
  %747 = @func_1877() /* ty=Tensor[(14, 9, 15), bool] */;
  %748 = @func_1848(%734, %735) /* ty=Tensor[(2, 10, 4), bool] */;
  %749 = cos(%738) /* ty=Tensor[(390), float32] */;
  %750 = %739.1;
  %751 = %744.0;
  (%745, %746, %747, %748, %var_2897, %749, %750, %751, %var_2960, meta[relay.Constant][48] /* ty=Tensor[(108), uint8] */)
}

def @func_5519() -> Tensor[(14, 9, 15), bool] {
  @func_5517() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_3121(%var_3079: Tensor[(4, 14, 13), int8]) -> (Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) {
  %752 = cast(meta[relay.Constant][49] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %753 = cast(%var_3079, dtype="int8") /* ty=Tensor[(4, 14, 13), int8] */;
  %754 = logical_xor(%752, %753) /* ty=Tensor[(4, 14, 13), int8] */;
  %755 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
  %756 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
  (%754, %755, %756)
}

def @func_7212() -> Tensor[(2, 3, 16), float32] {
  @func_7006() /* ty=Tensor[(2, 3, 16), float32] */
}

def @func_6061() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) {
  %757 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %758 = cast(meta[relay.Constant][50] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %759 = cast(meta[relay.Constant][51] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %760 = reshape(%758, newshape=[80, 1]) /* ty=Tensor[(80, 1), uint64] */;
  %761 = reshape(%759, newshape=[]) /* ty=uint8 */;
  %762 = @func_2965(%760, %761) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 10, 4), bool], Tensor[(80, 1), uint64], Tensor[(390), float32], Tensor[(2, 3, 16), bool], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) */;
  %763 = %757.1;
  %764 = %762.0;
  (%763, %764, meta[relay.Constant][50] /* ty=Tensor[(80), uint64] */, meta[relay.Constant][51] /* ty=uint8 */)
}

def @func_6477() -> (Tensor[(2, 3, 16), float64], Tensor[(325), float64]) {
  @func_6475() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(325), float64]) */
}

def @func_5488(%var_5486: Tensor[(14, 13, 9), int16]) -> (Tensor[(14, 13, 9), int16], Tensor[(390), int32]) {
  @func_5485(%var_5486) /* ty=(Tensor[(14, 13, 9), int16], Tensor[(390), int32]) */
}

def @func_6930() -> (Tensor[(14, 9, 15), bool],) {
  @func_6928() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_10719(%var_10717: float64) -> (Tensor[(14, 9, 15), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 1, 1), bool], float64, Tensor[(2, 1), float64]) {
  @func_10716(%var_10717) /* ty=(Tensor[(14, 9, 15), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 1, 1), bool], float64, Tensor[(2, 1), float64]) */
}

def @func_8077(%var_8075: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
  @func_8074(%var_8075) /* ty=Tensor[(6, 3, 3), float64] */
}

def @func_3965() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) {
  %779 = fn () -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) {
    %765 = @func_3526() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */;
    %766 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
    %767 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(6, 14, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %770 = floor_mod(%768, %769) /* ty=Tensor[(6, 14, 11), float32] */;
    %771 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %775 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
    %776 = @func_1262() /* ty=Tensor[(2, 3, 16), float64] */;
    %777 = %765.1;
    %778 = less_equal(%773, %774) /* ty=Tensor[(6, 14, 11), bool] */;
    (%775, %776, %777, %778)
  };
  %779() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) */
}

def @func_5424(%var_5423: Tensor[(14, 11, 1), float64]) -> (Tensor[(14, 11, 1), float64],) {
  %782 = fn (%var_5417: Tensor[(14, 11, 1), float64]) -> (Tensor[(14, 11, 1), float64],) {
    %780 = cast(%var_5417, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
    %781 = cos(%780) /* ty=Tensor[(14, 11, 1), float64] */;
    (%781,)
  };
  %782(%var_5423) /* ty=(Tensor[(14, 11, 1), float64],) */
}

def @func_4219(%var_4216: Tensor[(8, 1, 11), int8], %var_4217: Tensor[(8, 2, 11), int8], %var_4218: Tensor[(8, 2, 11), int8]) -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), float32]) {
  @func_4214(%var_4216, %var_4217, %var_4218) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), float32]) */
}

def @func_6146(%var_6144: Tensor[(455, 1), int16]) -> (int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) {
  @func_6143(%var_6144) /* ty=(int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) */
}

def @func_3227() -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) {
  %793 = fn () -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) {
    %783 = cast(meta[relay.Constant][54] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %784 = reshape(%783, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
    %785 = @func_3063(%784) /* ty=(Tensor[(3, 6, 5), float64],) */;
    %786 = %785.0;
    %787 = cast(meta[relay.Constant][54] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%786, dtype="bool") /* ty=Tensor[(3, 6, 5), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %791 = @func_1575() /* ty=Tensor[(14, 9, 15), bool] */;
    %792 = greater(%789, %790) /* ty=Tensor[(3, 6, 5), bool] */;
    (%791, %792)
  };
  %793() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) */
}

def @func_7690() -> Tensor[(2, 3, 16), float64] {
  @func_7688() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_1154(%var_1152: Tensor[(12, 8, 13), float32]) -> (Tensor[(12, 8, 13), float32],) {
  @func_1151(%var_1152) /* ty=(Tensor[(12, 8, 13), float32],) */
}

def @func_8149() -> (Tensor[(2, 3, 16), float64],) {
  %795 = fn () -> (Tensor[(2, 3, 16), float64],) {
    %794 = @func_3424() /* ty=Tensor[(2, 3, 16), float64] */;
    (%794,)
  };
  %795() /* ty=(Tensor[(2, 3, 16), float64],) */
}

def @func_4709(%var_4702: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %796 = cast(%var_4702, dtype="float64") /* ty=Tensor[(90), float64] */;
  %797 = reshape(%796, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
  %798 = @func_3063(%797) /* ty=(Tensor[(3, 6, 5), float64],) */;
  %799 = @func_3818() /* ty=Tensor[(14, 9, 15), bool] */;
  %800 = %798.0;
  (%799, %800, %var_4702)
}

def @func_6984(%var_6977: Tensor[(108), uint8]) -> (Tensor[(2, 3, 16), float64], Tensor[(12, 3, 3), bool], uint8, Tensor[(108), uint8]) {
  %801 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %802 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %803 = cast(%var_6977, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %804 = reshape(%802, newshape=[]) /* ty=uint8 */;
  %805 = reshape(%803, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), uint8] */;
  %806 = @func_1181(%804, %805) /* ty=(Tensor[(12, 3, 3), bool],) */;
  %807 = %801.1;
  %808 = %806.0;
  (%807, %808, meta[relay.Constant][55] /* ty=uint8 */, %var_6977)
}

def @func_9477() -> Tensor[(2, 3, 16), float64] {
  %809 = @func_8749() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %809.0
}

def @func_7027() -> (Tensor[(325), float64],) {
  %812 = fn () -> (Tensor[(325), float64],) {
    %810 = @func_6475() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(325), float64]) */;
    %811 = %810.1;
    (%811,)
  };
  %812() /* ty=(Tensor[(325), float64],) */
}

def @func_1688() -> Tensor[(14, 9, 15), bool] {
  @func_1575() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_5442() -> (Tensor[(2, 3, 16), float64],) {
  %813 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %814 = %813.1;
  (%814,)
}

def @func_10517() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  %815 = @func_2387() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */;
  %816 = @func_4491() /* ty=Tensor[(2, 3, 16), float64] */;
  %817 = %815.0;
  (%816, %817)
}

def @func_8603() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) {
  @func_8601() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float32]) */
}

def @func_8775() -> (Tensor[(2, 3, 16), float32],) {
  %819 = fn () -> (Tensor[(2, 3, 16), float32],) {
    %818 = @func_7006() /* ty=Tensor[(2, 3, 16), float32] */;
    (%818,)
  };
  %819() /* ty=(Tensor[(2, 3, 16), float32],) */
}

def @func_3425() -> Tensor[(2, 3, 16), float64] {
  %820 = fn () -> Tensor[(2, 3, 16), float64] {
    @func_2552() /* ty=Tensor[(2, 3, 16), float64] */
  };
  %820() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_2833() -> Tensor[(2, 3, 16), float64] {
  @func_2552() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_1575() -> Tensor[(14, 9, 15), bool] {
  %821 = @func_1389() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %821.0
}

def @func_9797() -> (int8,) {
  %824 = fn () -> (int8,) {
    %822 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
    %823 = %822.3;
    (%823,)
  };
  %824() /* ty=(int8,) */
}

def @func_4000() -> (Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) {
  %828 = fn () -> (Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) {
    %825 = @func_1725() /* ty=(int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) */;
    %826 = %825.2;
    %827 = @func_3322() /* ty=Tensor[(10, 1, 9), uint64] */;
    (%826, %827)
  };
  %828() /* ty=(Tensor[(3, 52), float64], Tensor[(10, 1, 9), uint64]) */
}

def @func_3360() -> Tensor[(14, 9, 15), bool] {
  @func_3358() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_8098() -> uint8 {
  %830 = fn () -> uint8 {
    %829 = @func_6061() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(80), uint64], uint8) */;
    %829.3
  };
  %830() /* ty=uint8 */
}

def @func_5917(%var_5915: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), int8], Tensor[(2, 3, 16), float64]) {
  @func_5914(%var_5915) /* ty=(Tensor[(5, 13, 4), int8], Tensor[(2, 3, 16), float64]) */
}

def @func_908(%var_907: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) {
  %836 = fn (%var_899: int8) -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) {
    %831 = @func_888() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %832 = cast(%var_899, dtype="int8") /* ty=int8 */;
    %833 = reshape(%832, newshape=[]) /* ty=int8 */;
    %834 = %831.0;
    %835 = @func_232(%833) /* ty=Tensor[(14, 9, 15), bool] */;
    (%834, %835, %var_899)
  };
  %836(%var_907) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], int8) */
}

def @func_6088() -> (Tensor[(14, 9, 15), float64],) {
  @func_6086() /* ty=(Tensor[(14, 9, 15), float64],) */
}

def @func_8835() -> (Tensor[(14, 9, 15), bool],) {
  @func_8833() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_5787() -> (Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) {
  @func_5785() /* ty=(Tensor[(14, 9, 15), float64], Tensor[(3, 6, 5), float64]) */
}

def @func_5192() -> Tensor[(3, 6, 5), float64] {
  %838 = fn () -> Tensor[(3, 6, 5), float64] {
    %837 = @func_3964() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(3, 6, 5), float64], Tensor[(6, 14, 11), bool]) */;
    %837.2
  };
  %838() /* ty=Tensor[(3, 6, 5), float64] */
}

def @func_10097() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32], Tensor[(1890), bool], Tensor[(15, 13, 2), uint64], int8) {
  @func_10095() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float32], Tensor[(1890), bool], Tensor[(15, 13, 2), uint64], int8) */
}

def @func_8021() -> Tensor[(2, 3, 16), float64] {
  %839 = @func_6846() /* ty=(Tensor[(8, 4, 10), float64], Tensor[(2, 3, 16), float64]) */;
  %839.1
}

def @func_6024(%var_6020: Tensor[(90), float64]) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(90), float64]) {
  %840 = @func_3607() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %841 = cast(%var_6020, dtype="float64") /* ty=Tensor[(90), float64] */;
  %842 = reshape(%841, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %843 = @func_5368(%842) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(90), float64], Tensor[(90), float64], Tensor[(12, 8, 13), float32], Tensor[(1248), float32]) */;
  %844 = %840.0;
  %845 = @func_1412() /* ty=Tensor[(2, 3, 16), float64] */;
  %846 = %843.0;
  (%844, %845, %846, %var_6020)
}

def @func_8023() -> Tensor[(2, 3, 16), float64] {
  @func_8021() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_1264() -> Tensor[(2, 3, 16), float64] {
  @func_1262() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_6754() -> (Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) {
  %847 = cast(meta[relay.Constant][56] /* ty=Tensor[(1890), bool] */, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %848 = reshape(%847, newshape=[14, 9, 15]) /* ty=Tensor[(14, 9, 15), bool] */;
  %849 = @func_4690(%848) /* ty=(Tensor[(14, 9, 15), float64],) */;
  %850 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), int8] */, dtype="int8") /* ty=Tensor[(728), int8] */;
  %851 = reshape(%850, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int8] */;
  %852 = @func_3121(%851) /* ty=(Tensor[(4, 14, 13), int8], Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %853 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %854 = @func_1725() /* ty=(int8, Tensor[(1, 13, 12), float64], Tensor[(3, 52), float64]) */;
  %855 = @func_2311() /* ty=Tensor[(2, 3, 16), float64] */;
  %856 = %849.0;
  %857 = %852.0;
  %858 = @func_2833() /* ty=Tensor[(2, 3, 16), float64] */;
  %859 = %853.0;
  %860 = %854.2;
  (%855, %856, meta[relay.Constant][56] /* ty=Tensor[(1890), bool] */, %857, meta[relay.Constant][57] /* ty=Tensor[(728), int8] */, %858, %859, %860)
}

def @func_7898(%var_7878: Tensor[(360), float64]) -> (Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) {
  %861 = @func_3226() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(3, 6, 5), bool]) */;
  %862 = %861.1;
  %863 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 6, 5), bool] */, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %867 = @func_6754() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64], Tensor[(1890), bool], Tensor[(4, 14, 13), int8], Tensor[(728), int8], Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), bool], Tensor[(3, 52), float64]) */;
  %868 = cast(%var_7878, dtype="float64") /* ty=Tensor[(360), float64] */;
  %869 = cast(meta[relay.Constant][59] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %870 = reshape(%868, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
  %871 = reshape(%869, newshape=[]) /* ty=int8 */;
  %872 = @func_1076(%870, %871) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(180, 2), float64], int8, int8, Tensor[(180, 2), float32], Tensor[(2, 3, 16), float64], int8) */;
  %873 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
  %874 = left_shift(%865, %866) /* ty=Tensor[(3, 6, 5), int16] */;
  %875 = %867.6;
  %876 = %872.3;
  %877 = %873.0;
  (%874, %875, %876, %var_7878, meta[relay.Constant][59] /* ty=int8 */, %877)
}

def @func_6676(%var_6675: int16) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(7, 13, 5), int16], int16, Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
  %895 = fn (%var_6653: int16) -> (Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(7, 13, 5), int16], int16, Tensor[(3, 6, 5), float64], Tensor[(90), float64]) {
    %878 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %879 = cast(meta[relay.Constant][60] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
    %880 = reshape(%879, newshape=[455, 1]) /* ty=Tensor[(455, 1), int16] */;
    %881 = @func_6143(%880) /* ty=(int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) */;
    %882 = cast(%var_6653, dtype="int16") /* ty=int16 */;
    %883 = cast(meta[relay.Constant][60] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
    %884 = reshape(%882, newshape=[]) /* ty=int16 */;
    %885 = reshape(%883, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), int16] */;
    %886 = @func_4798(%884, %885) /* ty=(Tensor[(7, 13, 5), int16],) */;
    %887 = cast(meta[relay.Constant][61] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %888 = reshape(%887, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float64] */;
    %889 = @func_3063(%888) /* ty=(Tensor[(3, 6, 5), float64],) */;
    %890 = @func_3358() /* ty=Tensor[(14, 9, 15), bool] */;
    %891 = %878.0;
    %892 = %881.1;
    %893 = %886.0;
    %894 = %889.0;
    (%890, %891, %892, meta[relay.Constant][60] /* ty=Tensor[(455), int16] */, %893, %var_6653, %894, meta[relay.Constant][61] /* ty=Tensor[(90), float64] */)
  };
  %895(%var_6675) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(455), int16], Tensor[(7, 13, 5), int16], int16, Tensor[(3, 6, 5), float64], Tensor[(90), float64]) */
}

def @func_5447() -> Tensor[(14, 9, 15), bool] {
  @func_1688() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_7749() -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 90), float64]) {
  @func_7747() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 90), float64]) */
}

def @func_10247() -> Tensor[(2, 3, 16), float64] {
  %897 = fn () -> Tensor[(2, 3, 16), float64] {
    %896 = @func_5442() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %896.0
  };
  %897() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_6928() -> (Tensor[(14, 9, 15), bool],) {
  %898 = @func_2005() /* ty=(Tensor[(14, 9, 15), bool],) */;
  %899 = %898.0;
  (%899,)
}

def @func_10653(%var_10652: Tensor[(360), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(360), float64]) {
  %907 = fn (%var_10639: Tensor[(360), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(360), float64]) {
    %900 = @func_8311() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %901 = cast(%var_10639, dtype="float64") /* ty=Tensor[(360), float64] */;
    %902 = reshape(%901, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %903 = @func_7898(%902) /* ty=(Tensor[(3, 6, 5), int16], Tensor[(14, 9, 15), bool], int8, Tensor[(360), float64], int8, Tensor[(2, 3, 16), float64]) */;
    %904 = %900.0;
    %905 = @func_7006() /* ty=Tensor[(2, 3, 16), float32] */;
    %906 = %903.1;
    (%904, %905, %906, %var_10639)
  };
  %907(%var_10652) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float32], Tensor[(14, 9, 15), bool], Tensor[(360), float64]) */
}

def @func_4858() -> (Tensor[(14, 9, 15), bool],) {
  @func_4856() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_10010() -> (Tensor[(2, 3, 16), bool], Tensor[(6, 9, 3), bool], int8, Tensor[(2, 3, 16), float64]) {
  %922 = fn () -> (Tensor[(2, 3, 16), bool], Tensor[(6, 9, 3), bool], int8, Tensor[(2, 3, 16), float64]) {
    %908 = @func_6171() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
    %909 = %908.1;
    %910 = @func_9477() /* ty=Tensor[(2, 3, 16), float64] */;
    %911 = cast(%910, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
    %912 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
    %913 = cast(%909, dtype="bool") /* ty=Tensor[(2, 3, 16), bool] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %915 = @func_4591() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(2, 3, 16), float64]) */;
    %916 = @func_9796() /* ty=(int8,) */;
    %917 = @func_3550() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(13, 5, 5), float64], Tensor[(325), float64], Tensor[(2, 3, 16), float64]) */;
    %918 = not_equal(%913, %914) /* ty=Tensor[(2, 3, 16), bool] */;
    %919 = %915.0;
    %920 = %916.0;
    %921 = %917.0;
    (%918, %919, %920, %921)
  };
  %922() /* ty=(Tensor[(2, 3, 16), bool], Tensor[(6, 9, 3), bool], int8, Tensor[(2, 3, 16), float64]) */
}

def @func_7309() -> Tensor[(3, 6, 5), float64] {
  @func_7307() /* ty=Tensor[(3, 6, 5), float64] */
}

def @func_8074(%var_8068: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
  %923 = cast(%var_8068, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  sin(%923) /* ty=Tensor[(6, 3, 3), float64] */
}

def @func_3608() -> (Tensor[(14, 9, 15), bool],) {
  %925 = fn () -> (Tensor[(14, 9, 15), bool],) {
    %924 = @func_2225() /* ty=Tensor[(14, 9, 15), bool] */;
    (%924,)
  };
  %925() /* ty=(Tensor[(14, 9, 15), bool],) */
}

def @func_1519(%var_1518: Tensor[(39, 4), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) {
  %939 = fn (%var_1485: Tensor[(39, 4), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) {
    %926 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %927 = @func_1286() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %928 = cast(%var_1485, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
    %929 = reshape(%928, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float64] */;
    %930 = cast(meta[relay.Constant][62] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %931 = cast(meta[relay.Constant][62] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %932 = reshape(%930, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float64] */;
    %933 = reshape(%931, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float64] */;
    %934 = @func_255(%932, %933) /* ty=(Tensor[(7, 6, 15), float64],) */;
    %935 = %926.0;
    %936 = %927.0;
    %937 = @func_1211(%929) /* ty=Tensor[(1, 13, 12), float64] */;
    %938 = %934.0;
    (%935, %936, %937, %var_1485, %938, meta[relay.Constant][62] /* ty=Tensor[(630), float64] */)
  };
  %939(%var_1518) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) */
}

def @func_7062(%var_7060: int8, %var_7061: Tensor[(10, 12, 13), int8]) -> (Tensor[(10, 12, 13), int8], Tensor[(?, 6, 3), int32]) {
  @func_7058(%var_7060, %var_7061) /* ty=(Tensor[(10, 12, 13), int8], Tensor[(?, 6, 3), int32]) */
}

def @func_2312() -> Tensor[(2, 3, 16), float64] {
  %941 = fn () -> Tensor[(2, 3, 16), float64] {
    %940 = @func_1170() /* ty=(Tensor[(2, 3, 16), float64],) */;
    %940.0
  };
  %941() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_4407() -> Tensor[(2, 3, 16), float64] {
  @func_4405() /* ty=Tensor[(2, 3, 16), float64] */
}

def @func_10716(%var_10710: float64) -> (Tensor[(14, 9, 15), float64], Tensor[(14, 9, 15), bool], Tensor[(2, 1, 1), bool], float64, Tensor[(2, 1), float64]) {
  %942 = @func_3802() /* ty=(Tensor[(14, 9, 15), float64],) */;
  %943 = cast(%var_10710, dtype="float64") /* ty=float64 */;
  %944 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %945 = reshape(%943, newshape=[]) /* ty=float64 */;
  %946 = reshape(%944, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float64] */;
  %947 = @func_7494(%945, %946) /* ty=(Tensor[(2, 1, 1), bool],) */;
  %948 = %942.0;
  %949 = @func_5517() /* ty=Tensor[(14, 9, 15), bool] */;
  %950 = %947.0;
  (%948, %949, %950, %var_10710, meta[relay.Constant][63] /* ty=Tensor[(2, 1), float64] */)
}

def @func_7082() -> Tensor[(14, 9, 15), bool] {
  @func_7080() /* ty=Tensor[(14, 9, 15), bool] */
}

def @func_6143(%var_6118: Tensor[(455, 1), int16]) -> (int8, Tensor[(2, 3, 16), float64], Tensor[(7, 13, 5), int16], Tensor[(455, 1), int16]) {
  %951 = @func_1626() /* ty=(Tensor[(2, 3, 16), float64], int8, Tensor[(360), float64], int8) */;
  %952 = @func_3792() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(14, 9, 15), float64]) */;
  %953 = %951.1;
  %954 = cast(%953, dtype="int16") /* ty=int16 */;
  %955 = cast(%var_6118, dtype="int16") /* ty=Tensor[(455, 1), int16] */;
  %956 = reshape(%954, newshape=[]) /* ty=int16 */;
  %957 = reshape(%955, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), int16] */;
  %958 = @func_4798(%956, %957) /* ty=(Tensor[(7, 13, 5), int16],) */;
  %959 = %952.0;
  %960 = %958.0;
  (%953, %959, %960, %var_6118)
}

def @func_7468(%var_7467: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), int64], Tensor[(2, 3, 16), float64]) {
  %968 = fn (%var_7448: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), int64], Tensor[(2, 3, 16), float64]) {
    %961 = @func_2454() /* ty=Tensor[(14, 9, 15), bool] */;
    %962 = cast(%var_7448, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
    %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
    %964 = cast(%961, dtype="int64") /* ty=Tensor[(14, 9, 15), int64] */;
    %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %966 = bitwise_or(%964, %965) /* ty=Tensor[(14, 9, 15), int64] */;
    %967 = @func_2552() /* ty=Tensor[(2, 3, 16), float64] */;
    (%966, %967)
  };
  %968(%var_7467) /* ty=(Tensor[(14, 9, 15), int64], Tensor[(2, 3, 16), float64]) */
}

def @func_9191() -> (Tensor[(14, 9, 15), bool],) {
  %969 = @func_6171() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), float64]) */;
  %970 = %969.0;
  (%970,)
}

def @func_4953() -> (Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) {
  @func_4951() /* ty=(Tensor[(14, 9, 15), float32], Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64]) */
}

def @func_7620(%var_7619: Tensor[(156), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(156), float64], Tensor[(14, 9, 15), bool]) {
  %979 = fn (%var_7599: Tensor[(156), float64]) -> (Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(156), float64], Tensor[(14, 9, 15), bool]) {
    %971 = @func_5829() /* ty=(Tensor[(2, 3, 16), float64], Tensor[(15, 13, 2), uint64], Tensor[(1, 390), int32]) */;
    %972 = cast(%var_7599, dtype="float64") /* ty=Tensor[(156), float64] */;
    %973 = reshape(%972, newshape=[39, 4]) /* ty=Tensor[(39, 4), float64] */;
    %974 = @func_1517(%973) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(1, 13, 12), float64], Tensor[(39, 4), float64], Tensor[(7, 6, 15), float64], Tensor[(630), float64]) */;
    %975 = @func_1251() /* ty=(Tensor[(14, 9, 15), bool], Tensor[(2, 3, 16), bool]) */;
    %976 = %971.0;
    %977 = %974.1;
    %978 = %975.0;
    (%976, %977, %var_7599, %978)
  };
  %979(%var_7619) /* ty=(Tensor[(2, 3, 16), float64], Tensor[(2, 3, 16), float64], Tensor[(156), float64], Tensor[(14, 9, 15), bool]) */
}

def @func_3066(%var_3064: Tensor[(3, 6, 5), float64]) -> (Tensor[(3, 6, 5), float64],) {
  @func_3063(%var_3064) /* ty=(Tensor[(3, 6, 5), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen462/build/output.py:3587: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen462/build/output.py", line 3592, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(48) tvmgen_default_fused_reshape_subtract_kernel0(signed char* __restrict__ T_subtract, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_subtract[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] - placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

