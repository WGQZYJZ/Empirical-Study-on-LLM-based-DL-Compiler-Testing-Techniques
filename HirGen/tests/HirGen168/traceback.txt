==========mod==========
#[version = "0.0.5"]
def @func_1659(%var_1648: Tensor[(14, 7, 2), float32], %var_1652: Tensor[(24), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) {
  %0 = cast(%var_1648, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %1 = cast(%var_1652, dtype="float64") /* ty=Tensor[(24), float64] */;
  %2 = reshape(%1, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %3 = @func_1533(%2) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) */;
  %4 = acos(%0) /* ty=Tensor[(14, 7, 2), float32] */;
  %5 = %3.1;
  (%4, %5, %var_1652)
}

def @func_1031(%var_1007: Tensor[(5, 5, 4), float32], %var_1029: Tensor[(110), int8]) -> (Tensor[(5, 5, 4), float32], Tensor[(5, 11, 2), int8], float64, Tensor[(110), int8]) {
  %6 = cast(%var_1007, dtype="float32") /* ty=Tensor[(5, 5, 4), float32] */;
  %7 = cast(5.32077f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %8 = cast(%var_1029, dtype="int8") /* ty=Tensor[(110), int8] */;
  %9 = reshape(%7, newshape=[]) /* ty=float64 */;
  %10 = reshape(%8, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %11 = @func_430(%9, %10) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %12 = cos(%6) /* ty=Tensor[(5, 5, 4), float32] */;
  %13 = %11.3;
  (%12, %13, 5.32077f64 /* ty=float64 */, %var_1029)
}

def @func_6175() -> (Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) {
  %14 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
  %15 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %16 = %14.1;
  %17 = %15.0;
  (%16, %17)
}

def @func_4518(%var_4495: Tensor[(4, 14, 8), bool], %var_4496: Tensor[(4, 14, 8), bool], %var_4507: Tensor[(180), bool], %var_4516: Tensor[(24), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(180), bool], Tensor[(4, 14, 8), bool], Tensor[(2, 4, 3), float64], Tensor[(24), float64]) {
  %18 = cast(%var_4507, dtype="bool") /* ty=Tensor[(180), bool] */;
  %19 = cast(%var_4507, dtype="bool") /* ty=Tensor[(180), bool] */;
  %20 = reshape(%18, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), bool] */;
  %21 = reshape(%19, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), bool] */;
  %22 = @func_3023(%20, %21) /* ty=(Tensor[(12, 5, 3), bool],) */;
  %23 = cast(%var_4496, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %24 = shape_of(%var_4495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_4495, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %27 = logical_and(%25, %26) /* ty=Tensor[(4, 14, 8), bool] */;
  %28 = cast(%27, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %29 = shape_of(%var_4496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_4496, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = cast(%var_4516, dtype="float64") /* ty=Tensor[(24), float64] */;
  %33 = reshape(%32, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
  %34 = @func_4049(%33) /* ty=(Tensor[(2, 4, 3), float64],) */;
  %35 = %22.0;
  %36 = logical_or(%30, %31) /* ty=Tensor[(4, 14, 8), bool] */;
  %37 = %34.0;
  (%35, %var_4507, %36, %37, %var_4516)
}

def @func_6247() -> (Tensor[(5, 10, 13), uint32], Tensor[(12, 11, 4), bool], uint8, Tensor[(2, 264), uint8]) {
  %38 = cast(meta[relay.Constant][0] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 264), uint8] */, dtype="uint8") /* ty=Tensor[(2, 264), uint8] */;
  %40 = reshape(%38, newshape=[]) /* ty=uint8 */;
  %41 = reshape(%39, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), uint8] */;
  %42 = @func_2385(%40, %41) /* ty=(Tensor[(12, 11, 4), bool],) */;
  %43 = @func_5645() /* ty=Tensor[(5, 10, 13), uint32] */;
  %44 = %42.0;
  (%43, %44, meta[relay.Constant][0] /* ty=uint8 */, meta[relay.Constant][1] /* ty=Tensor[(2, 264), uint8] */)
}

def @func_6408(%var_6395: float64) -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 11, 2), float32], float64, Tensor[(110, 1), int8]) {
  %45 = cast(%var_6395, dtype="float64") /* ty=float64 */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(110, 1), int8] */, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %47 = reshape(%45, newshape=[]) /* ty=float64 */;
  %48 = reshape(%46, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %49 = @func_430(%47, %48) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %50 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  %51 = %49.4;
  (%50, %51, %var_6395, meta[relay.Constant][2] /* ty=Tensor[(110, 1), int8] */)
}

def @func_6554() -> (Tensor[(5, 10, 13), float64],) {
  %52 = @func_5448() /* ty=Tensor[(5, 10, 13), uint32] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %54 = asin(%53) /* ty=Tensor[(5, 10, 13), float64] */;
  (%54,)
}

def @func_4390(%var_4384: Tensor[(8, 8, 8), bool], %var_4385: Tensor[(8, 8, 8), bool]) -> Tensor[(8, 8, 8), bool] {
  %55 = cast(%var_4385, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %56 = shape_of(%var_4384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_4384, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%57, %58) /* ty=Tensor[(8, 8, 8), bool] */
}

def @func_5345(%var_5330: Tensor[(15, 13, 1), bool], %var_5331: Tensor[(15, 13, 5), bool]) -> Tensor[(15, 13, 5), bool] {
  %59 = cast(%var_5330, dtype="bool") /* ty=Tensor[(15, 13, 1), bool] */;
  %60 = cast(%var_5331, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  logical_and(%59, %60) /* ty=Tensor[(15, 13, 5), bool] */
}

def @func_1797(%var_1729: Tensor[(2, 15, 9), uint64], %var_1730: Tensor[(2, 15, 9), uint64], %var_1768: Tensor[(196), float32], %var_1777: Tensor[(1, 110), int8]) -> (Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) {
  %61 = cast(%var_1730, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %62 = shape_of(%var_1729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_1729, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %65 = multiply(%63, %64) /* ty=Tensor[(2, 15, 9), uint64] */;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %67 = exp(%66) /* ty=Tensor[(2, 15, 9), float64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %69 = cast(%var_1768, dtype="float32") /* ty=Tensor[(196), float32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %71 = reshape(%69, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
  %72 = reshape(%70, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %73 = @func_1659(%71, %72) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
  %74 = cast(-0.898348f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %75 = cast(%var_1777, dtype="int8") /* ty=Tensor[(1, 110), int8] */;
  %76 = reshape(%74, newshape=[]) /* ty=float64 */;
  %77 = reshape(%75, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %78 = @func_430(%76, %77) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %79 = cast(%67, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %80 = cast(%var_1768, dtype="float32") /* ty=Tensor[(196), float32] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %82 = reshape(%80, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
  %83 = reshape(%81, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %84 = @func_1659(%82, %83) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
  %85 = log(%68) /* ty=Tensor[(2, 15, 9), float64] */;
  %86 = %73.1;
  %87 = %78.1;
  %88 = rsqrt(%79) /* ty=Tensor[(2, 15, 9), float32] */;
  %89 = %84.1;
  (%85, %86, %var_1768, meta[relay.Constant][3] /* ty=Tensor[(24), float64] */, %87, -0.898348f64 /* ty=float64 */, %var_1777, %88, %89)
}

def @main(%var_6853: Tensor[(6, 16, 13), float64]) -> (Tensor[(6, 16, 13), float64],) {
  %90 = cast(%var_6853, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %91 = cosh(%90) /* ty=Tensor[(6, 16, 13), float64] */;
  (%91,)
}

def @func_6583(%var_6570: Tensor[(196), float32], %var_6575: Tensor[(2, 12, 110), bool]) -> (Tensor[(5, 10, 13), uint32], Tensor[(196), float32], Tensor[(2, 12, 110), float32]) {
  %92 = @func_6540() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) */;
  %93 = cast(%var_6570, dtype="float32") /* ty=Tensor[(196), float32] */;
  %94 = reshape(%93, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %95 = @func_4345(%94) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) */;
  %96 = %95.1;
  %97 = cast(%var_6575, dtype="float32") /* ty=Tensor[(2, 12, 110), float32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="float32") /* ty=Tensor[(2, 12, 110), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %101 = %92.0;
  %102 = power(%99, %100) /* ty=Tensor[(2, 12, 110), float32] */;
  (%101, %var_6570, %102)
}

def @func_485(%var_469: Tensor[(2, 3, 4), float32], %var_473: float64, %var_474: Tensor[(110), int8]) -> (Tensor[(1, 3), int32], float64, Tensor[(110), int8], Tensor[(2, 3, 4), float64]) {
  %103 = cast(%var_473, dtype="float64") /* ty=float64 */;
  %104 = cast(%var_474, dtype="int8") /* ty=Tensor[(110), int8] */;
  %105 = reshape(%103, newshape=[]) /* ty=float64 */;
  %106 = reshape(%104, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %107 = @func_430(%105, %106) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %108 = cast(%var_469, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %109 = erf(%108) /* ty=Tensor[(2, 3, 4), float32] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %111 = %107.6;
  %112 = acos(%110) /* ty=Tensor[(2, 3, 4), float64] */;
  (%111, %var_473, %var_474, %112)
}

def @func_4416() -> (Tensor[(5, 10, 13), uint32],) {
  %113 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%113,)
}

def @func_6821(%var_6782: Tensor[(6, 13, 9), int32], %var_6796: Tensor[(110, 1), int8]) -> (Tensor[(6, 13, 9), int32], Tensor[(1, 3), int32], float64, Tensor[(110, 1), int8], Tensor[(6, 13, 9), uint32], Tensor[(6, 13, 9), int8], Tensor[(5, 10, 13), uint32]) {
  %114 = cast(%var_6782, dtype="int32") /* ty=Tensor[(6, 13, 9), int32] */;
  %115 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(6, 13, 9), int32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %118 = cast(9.17356f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %119 = cast(%var_6796, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %120 = reshape(%118, newshape=[]) /* ty=float64 */;
  %121 = reshape(%119, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %122 = @func_430(%120, %121) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %123 = cast(%var_6782, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
  %124 = tan(%123) /* ty=Tensor[(6, 13, 9), float32] */;
  %125 = cast(%var_6782, dtype="uint32") /* ty=Tensor[(6, 13, 9), uint32] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="uint32") /* ty=Tensor[(6, 13, 9), uint32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %129 = cast(%124, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %130 = sigmoid(%129) /* ty=Tensor[(6, 13, 9), float64] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
  %132 = cosh(%131) /* ty=Tensor[(6, 13, 9), float32] */;
  %133 = cast(%130, dtype="int8") /* ty=Tensor[(6, 13, 9), int8] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="int8") /* ty=Tensor[(6, 13, 9), int8] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %137 = subtract(%116, %117) /* ty=Tensor[(6, 13, 9), int32] */;
  %138 = %122.6;
  %139 = left_shift(%127, %128) /* ty=Tensor[(6, 13, 9), uint32] */;
  %140 = bitwise_or(%135, %136) /* ty=Tensor[(6, 13, 9), int8] */;
  %141 = @func_4933() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%137, %138, 9.17356f64 /* ty=float64 */, %var_6796, %139, %140, %141)
}

def @func_4111(%var_4105: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
  %142 = cast(%var_4105, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %143 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %146 = bitwise_or(%144, %145) /* ty=Tensor[(2, 16, 4), int64] */;
  (%146,)
}

def @func_1329(%var_1314: Tensor[(4, 11, 5), uint32], %var_1323: Tensor[(110), int8]) -> (Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) {
  %147 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %148 = cast(%var_1314, dtype="uint32") /* ty=Tensor[(4, 11, 5), uint32] */;
  %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(168, 1), int32] */, dtype="int32") /* ty=Tensor[(168, 1), int32] */;
  %151 = cast(%var_1323, dtype="int8") /* ty=Tensor[(110), int8] */;
  %152 = reshape(%149, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %153 = reshape(%150, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
  %154 = reshape(%151, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %155 = @func_328(%152, %153, %154) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
  %156 = multiply(%147, %148) /* ty=Tensor[(4, 11, 5), uint32] */;
  %157 = %155.3;
  (%156, %157, meta[relay.Constant][7] /* ty=Tensor[(3), int32] */, meta[relay.Constant][8] /* ty=Tensor[(168, 1), int32] */, %var_1323)
}

def @func_5125(%var_5110: Tensor[(14, 9, 5), uint16]) -> (Tensor[(14, 9, 5), uint16],) {
  %158 = cast(%var_5110, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %159 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %162 = logical_xor(%160, %161) /* ty=Tensor[(14, 9, 5), uint16] */;
  (%162,)
}

def @func_5141(%var_5131: Tensor[(8, 4, 15), int16]) -> (Tensor[(8, 4, 15), int16], Tensor[(4, 4), float32], float32, Tensor[(16), float32]) {
  %163 = cast(%var_5131, dtype="int16") /* ty=Tensor[(8, 4, 15), int16] */;
  %164 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 15), int16] */, dtype="int16") /* ty=Tensor[(8, 4, 15), int16] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %167 = cast(1.82372f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %169 = reshape(%167, newshape=[]) /* ty=float32 */;
  %170 = reshape(%168, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %171 = @func_2010(%169, %170) /* ty=(Tensor[(4, 4), float32],) */;
  %172 = logical_xor(%165, %166) /* ty=Tensor[(8, 4, 15), int16] */;
  %173 = %171.0;
  (%172, %173, 1.82372f /* ty=float32 */, meta[relay.Constant][11] /* ty=Tensor[(16), float32] */)
}

def @func_6616() -> (Tensor[(5, 10, 13), uint32],) {
  %174 = @func_5253() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%174,)
}

def @func_1533(%var_1513: Tensor[(2, 12, 1), float64]) -> (Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) {
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %176 = reshape(%175, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %177 = @func_217(%176) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %178 = cast(%var_1513, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %179 = acosh(%178) /* ty=Tensor[(2, 12, 1), float64] */;
  %180 = cast(%179, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(110), int8] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %182 = %177.4;
  %183 = less(%180, %181) /* ty=Tensor[(2, 12, 110), bool] */;
  (%182, %183)
}

def @func_4147() -> Tensor[(5, 10, 13), uint32] {
  %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %185 = acos(%184) /* ty=Tensor[(5, 10, 13), float64] */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 10, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 10, 13), int8] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="int8") /* ty=Tensor[(5, 10, 13), int8] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %190 = bitwise_or(%188, %189) /* ty=Tensor[(5, 10, 13), int8] */;
  %191 = cast(%190, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
  %192 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%185, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%193, %194) /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_5939(%var_5909: Tensor[(5, 15, 4), int32], %var_5928: Tensor[(495), float32], %var_5930: Tensor[(3), int32]) -> (Tensor[(5, 15, 4), int32], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(70, 9), uint16], Tensor[(3), int32], Tensor[(42, 4), int32], Tensor[(15), uint8]) {
  %195 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(5, 15, 4), int32] */;
  %196 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_5909, dtype="int32") /* ty=Tensor[(5, 15, 4), int32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %199 = cast(%var_5928, dtype="float32") /* ty=Tensor[(495), float32] */;
  %200 = cast(meta[relay.Constant][15] /* ty=Tensor[(70, 9), uint16] */, dtype="uint16") /* ty=Tensor[(70, 9), uint16] */;
  %201 = cast(%var_5930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(meta[relay.Constant][16] /* ty=Tensor[(42, 4), int32] */, dtype="int32") /* ty=Tensor[(42, 4), int32] */;
  %203 = cast(meta[relay.Constant][17] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %204 = reshape(%199, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %205 = reshape(%200, newshape=[630]) /* ty=Tensor[(630), uint16] */;
  %206 = reshape(%201, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %207 = reshape(%202, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %208 = reshape(%203, newshape=[1, 15]) /* ty=Tensor[(1, 15), uint8] */;
  %209 = @func_5755(%204, %205, %206, %207, %208) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) */;
  %210 = logical_xor(%197, %198) /* ty=Tensor[(5, 15, 4), int32] */;
  %211 = %209.11;
  (%210, %211, %var_5928, meta[relay.Constant][15] /* ty=Tensor[(70, 9), uint16] */, %var_5930, meta[relay.Constant][16] /* ty=Tensor[(42, 4), int32] */, meta[relay.Constant][17] /* ty=Tensor[(15), uint8] */)
}

def @func_3731(%var_3722: Tensor[(12, 1, 11), float32]) -> (Tensor[(12, 1, 11), float32],) {
  %212 = cast(%var_3722, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %213 = log2(%212) /* ty=Tensor[(12, 1, 11), float32] */;
  (%213,)
}

def @func_4660() -> (Tensor[(5, 10, 13), uint32],) {
  %214 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%214,)
}

def @func_4235(%var_4218: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(1, 15, 1), uint8], Tensor[(5, 11, 2), float64], Tensor[(110, 15), bool]) {
  %215 = cast(%var_4218, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %216 = reshape(%215, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint8] */;
  %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 1), int8] */, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %218 = reshape(%217, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %219 = @func_1627(%218) /* ty=(Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) */;
  %220 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 1), int8] */, dtype="bool") /* ty=Tensor[(110, 1), bool] */;
  %221 = cast(%var_4218, dtype="bool") /* ty=Tensor[(15), bool] */;
  %222 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %223 = @func_1951(%216) /* ty=Tensor[(1, 15, 1), uint8] */;
  %224 = %219.1;
  %225 = less(%220, %221) /* ty=Tensor[(110, 15), bool] */;
  (%222, %223, %224, %225)
}

def @func_648(%var_622: Tensor[(8, 4, 11), int64], %var_645: Tensor[(3), int32], %var_646: Tensor[(168), int32]) -> (Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) {
  %226 = cast(%var_622, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %227 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %230 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %231 = reshape(%230, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %232 = @func_173(%231) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %233 = %232.1;
  %234 = cast(%233, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %235 = reshape(%234, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %236 = @func_173(%235) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %237 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %238 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %239 = reshape(%237, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %240 = reshape(%238, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %241 = @func_284(%239, %240) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
  %242 = %241.2;
  %243 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), int8] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(110), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), bool] */;
  %247 = cast(%var_622, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %248 = cast(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_646, dtype="int32") /* ty=Tensor[(168), int32] */;
  %250 = %236.1;
  %251 = cast(%250, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %252 = reshape(%248, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %253 = reshape(%249, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
  %254 = reshape(%251, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %255 = @func_328(%252, %253, %254) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
  %256 = maximum(%228, %229) /* ty=Tensor[(8, 4, 11), int64] */;
  %257 = logical_or(%245, %246) /* ty=Tensor[(110), bool] */;
  %258 = acos(%247) /* ty=Tensor[(8, 4, 11), float64] */;
  %259 = %255.3;
  (%256, meta[relay.Constant][20] /* ty=Tensor[(50), uint64] */, %233, %250, %257, %258, %259, %var_645, %var_646)
}

def @func_5253() -> Tensor[(5, 10, 13), uint32] {
  %260 = @func_4734() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %260.0
}

def @func_4345(%var_4341: Tensor[(196), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) {
  %261 = cast(%var_4341, dtype="float32") /* ty=Tensor[(196), float32] */;
  %262 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %263 = reshape(%261, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
  %264 = reshape(%262, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %265 = @func_1659(%263, %264) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
  %266 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %267 = %265.1;
  (%266, %267, %var_4341, meta[relay.Constant][22] /* ty=Tensor[(12, 2), float64] */)
}

def @func_5797() -> (Tensor[(5, 10, 13), uint32],) {
  %268 = @func_5645() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%268,)
}

def @func_6325() -> Tensor[(5, 10, 13), uint32] {
  @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_3093(%var_3075: Tensor[(10, 10, 9), float64], %var_3080: Tensor[(1, 270), uint64], %var_3081: Tensor[(196, 1), float32], %var_3082: Tensor[(22, 5), int8], %var_3086: Tensor[(352), int64], %var_3088: Tensor[(3, 56), int32]) -> (Tensor[(10, 10, 9), float64], float64, Tensor[(1, 270), uint64], Tensor[(196, 1), float32], Tensor[(22, 5), int8], Tensor[(8, 4, 11), int64], Tensor[(352), int64], Tensor[(3), int32], Tensor[(3, 56), int32]) {
  %269 = cast(%var_3075, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
  %270 = cast(%var_3080, dtype="uint64") /* ty=Tensor[(1, 270), uint64] */;
  %271 = cast(%var_3080, dtype="uint64") /* ty=Tensor[(1, 270), uint64] */;
  %272 = cast(%var_3081, dtype="float32") /* ty=Tensor[(196, 1), float32] */;
  %273 = cast(%var_3082, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %274 = reshape(%270, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %275 = reshape(%271, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %276 = reshape(%272, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %277 = reshape(%273, newshape=[1, 110]) /* ty=Tensor[(1, 110), int8] */;
  %278 = @func_1797(%274, %275, %276, %277) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) */;
  %279 = cast(%var_3086, dtype="int64") /* ty=Tensor[(352), int64] */;
  %280 = cast(meta[relay.Constant][23] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_3088, dtype="int32") /* ty=Tensor[(3, 56), int32] */;
  %282 = reshape(%279, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
  %283 = reshape(%280, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %284 = reshape(%281, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %285 = @func_648(%282, %283, %284) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
  %286 = asinh(%269) /* ty=Tensor[(10, 10, 9), float64] */;
  %287 = %278.5;
  %288 = %285.0;
  (%286, %287, %var_3080, %var_3081, %var_3082, %288, %var_3086, meta[relay.Constant][23] /* ty=Tensor[(3), int32] */, %var_3088)
}

def @func_5645() -> Tensor[(5, 10, 13), uint32] {
  %289 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %289.0
}

def @func_6434() -> Tensor[(5, 10, 13), uint32] {
  %290 = @func_5797() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %290.0
}

def @func_173(%var_158: Tensor[(5, 11, 2), int8]) -> (Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) {
  %291 = cast(%var_158, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %292 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(5, 11, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 11, 2), int8] */, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 11, 2), int8] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %296 = add(%293, %294) /* ty=Tensor[(5, 11, 2), int8] */;
  %297 = cosh(%295) /* ty=Tensor[(5, 11, 2), float64] */;
  (%296, %297)
}

def @func_1263(%var_1236: Tensor[(16, 6, 8), float32]) -> (Tensor[(16, 6, 8), bool],) {
  %298 = cast(%var_1236, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %299 = cos(%298) /* ty=Tensor[(16, 6, 8), float32] */;
  %300 = cast(%var_1236, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = logical_and(%302, %303) /* ty=Tensor[(16, 6, 8), bool] */;
  (%304,)
}

def @func_6460() -> (Tensor[(5, 10, 13), uint32],) {
  %305 = @func_6175() /* ty=(Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) */;
  %306 = %305.1;
  (%306,)
}

def @func_6651() -> Tensor[(5, 10, 13), uint32] {
  %307 = @func_5797() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %307.0
}

def @func_4567(%var_4541: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) {
  %308 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %309 = cast(meta[relay.Constant][25] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %310 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %311 = reshape(%309, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %312 = reshape(%310, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %313 = @func_284(%311, %312) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
  %314 = cast(%var_4541, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %315 = reshape(%314, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint8] */;
  %316 = @func_1951(%315) /* ty=Tensor[(1, 15, 1), uint8] */;
  %317 = cast(meta[relay.Constant][25] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %318 = cast(%316, dtype="uint64") /* ty=Tensor[(1, 15, 1), uint64] */;
  %319 = cast(meta[relay.Constant][27] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %320 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(110), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %321 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?), int8] */;
  %323 = %308.0;
  %324 = %313.1;
  %325 = bitwise_or(%317, %318) /* ty=Tensor[(1, 15, 50), uint64] */;
  %326 = left_shift(%321, %322) /* ty=Tensor[(110), int8] */;
  (%323, %var_4541, %324, %325, %326)
}

def @func_4933() -> Tensor[(5, 10, 13), uint32] {
  %327 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %327.0
}

def @func_5498(%var_5481: Tensor[(2, 1, 8), int8]) -> (Tensor[(2, ?, 8), uint16],) {
  %328 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 1, 8), int8] */, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %329 = asinh(%328) /* ty=Tensor[(2, 1, 8), float64] */;
  %330 = cast(%var_5481, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %331 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(2, 1, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 1, 8), int8] */, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %334 = less_equal(%332, %333) /* ty=Tensor[(2, ?, 8), bool] */;
  %335 = cast(%334, dtype="uint16") /* ty=Tensor[(2, ?, 8), uint16] */;
  %336 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%329, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %339 = multiply(%337, %338) /* ty=Tensor[(2, ?, 8), uint16] */;
  (%339,)
}

def @func_2254(%var_2223: Tensor[(3, 1, 8), float64], %var_2224: Tensor[(3, 2, 8), float64], %var_2250: Tensor[(3, 1, 8), float64]) -> (Tensor[(3, 2, 8), uint16], Tensor[(3, 1, 8), float32], Tensor[(3, ?, 8), int16]) {
  %340 = cast(%var_2223, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
  %341 = cast(%var_2224, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
  %342 = floor_mod(%340, %341) /* ty=Tensor[(3, 2, 8), float64] */;
  %343 = cast(%342, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %344 = shape_of(%var_2224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_2224, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %347 = cast(%var_2223, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
  %348 = log10(%347) /* ty=Tensor[(3, 1, 8), float64] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
  %350 = cast(%var_2250, dtype="int16") /* ty=Tensor[(3, 1, 8), int16] */;
  %351 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%348, dtype="int16") /* ty=Tensor[(3, 1, 8), int16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %354 = multiply(%345, %346) /* ty=Tensor[(3, 2, 8), uint16] */;
  %355 = cos(%349) /* ty=Tensor[(3, 1, 8), float32] */;
  %356 = maximum(%352, %353) /* ty=Tensor[(3, ?, 8), int16] */;
  (%354, %355, %356)
}

def @func_4734() -> (Tensor[(5, 10, 13), uint32],) {
  %357 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%357,)
}

def @func_1850(%var_1846: Tensor[(768), float32]) -> (Tensor[(9, 4, 5), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  %358 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %359 = cast(%var_1846, dtype="float32") /* ty=Tensor[(768), float32] */;
  %360 = reshape(%359, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %361 = @func_1263(%360) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %362 = tan(%358) /* ty=Tensor[(9, 4, 5), float32] */;
  %363 = %361.0;
  (%362, %363, %var_1846)
}

def @func_4846(%var_4831: Tensor[(4, 40), float32]) -> (Tensor[(5, 10, 13), int16], Tensor[(110), int8], Tensor[(4, 40), float32], Tensor[(168), float64], Tensor[(5, 10), uint64]) {
  %364 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  %365 = cast(%364, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
  %366 = reshape(%365, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), uint32] */;
  %367 = @func_4799(%366) /* ty=Tensor[(5, 10, 13), uint16] */;
  %368 = cast(%364, dtype="int16") /* ty=Tensor[(5, 10, 13), int16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int16") /* ty=Tensor[(5, 10, 13), int16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %372 = cast(%var_4831, dtype="float32") /* ty=Tensor[(4, 40), float32] */;
  %373 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %374 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(5, 10), uint64] */;
  %375 = reshape(%372, newshape=[10, 16, 1]) /* ty=Tensor[(10, 16, 1), float32] */;
  %376 = reshape(%373, newshape=[6, 28]) /* ty=Tensor[(6, 28), float64] */;
  %377 = reshape(%374, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %378 = @func_2615(%375, %376, %377) /* ty=(Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) */;
  %379 = subtract(%370, %371) /* ty=Tensor[(5, 10, 13), int16] */;
  %380 = %378.3;
  (%379, %380, %var_4831, meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, meta[relay.Constant][31] /* ty=Tensor[(5, 10), uint64] */)
}

def @func_5290() -> Tensor[(5, 10, 13), uint32] {
  @func_5253() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_3040(%var_3029: Tensor[(6, 16, 2), float64]) -> Tensor[(6, 16, 2), bool] {
  %381 = cast(%var_3029, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %382 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(6, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 16, 2), float64] */, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = greater(%383, %384) /* ty=Tensor[(6, 16, 2), bool] */;
  %386 = cast(%var_3029, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%388, %389) /* ty=Tensor[(6, 16, 2), bool] */
}

def @func_6264() -> Tensor[(5, 10, 13), uint32] {
  %390 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %390.0
}

def @func_6313(%var_6288: Tensor[(8, 6, 3), int32], %var_6304: Tensor[(132), float32]) -> (Tensor[(8, 6, 3), int32], Tensor[(12, ?, 11), bool], Tensor[(132), float32]) {
  %391 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 6, 3), int32] */, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %392 = shape_of(%var_6288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_6288, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %395 = cast(%var_6304, dtype="float32") /* ty=Tensor[(132), float32] */;
  %396 = reshape(%395, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %397 = @func_6082(%396) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) */;
  %398 = minimum(%393, %394) /* ty=Tensor[(8, 6, 3), int32] */;
  %399 = %397.1;
  (%398, %399, %var_6304)
}

def @func_5991(%var_5946: uint32, %var_5947: Tensor[(5, 16, 1), uint32], %var_5976: Tensor[(220), uint32], %var_5977: Tensor[(110, 1), int8]) -> (Tensor[(5, 16, 1), float64], Tensor[(5, 11, 2), int8], Tensor[(220), uint32], Tensor[(110, 1), int8], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32]) {
  %400 = cast(%var_5946, dtype="uint32") /* ty=uint32 */;
  %401 = cast(%var_5947, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
  %402 = bitwise_and(%400, %401) /* ty=Tensor[(5, 16, 1), uint32] */;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %404 = cast(%var_5976, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %405 = cast(%var_5977, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %406 = reshape(%404, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), uint32] */;
  %407 = reshape(%405, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %408 = @func_1329(%406, %407) /* ty=(Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) */;
  %409 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
  %410 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %411 = asin(%403) /* ty=Tensor[(5, 16, 1), float64] */;
  %412 = %408.1;
  %413 = %409.0;
  %414 = %410.0;
  (%411, %412, %var_5976, %var_5977, %413, %414)
}

def @func_5870(%var_5800: int8, %var_5801: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), bool], Tensor[(16, 6, 8), bool], Tensor[(768), float32], Tensor[(4, 14, 3), float64], Tensor[(168), float64], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), float64], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), int64]) {
  %415 = cast(%var_5800, dtype="bool") /* ty=bool */;
  %416 = cast(%var_5801, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %417 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %418 = reshape(%417, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %419 = @func_1263(%418) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %420 = cast(meta[relay.Constant][35] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %421 = reshape(%420, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), float64] */;
  %422 = @func_5157() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %423 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %424 = cast(%var_5801, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %425 = cast(%var_5801, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %426 = sqrt(%425) /* ty=Tensor[(3, 10, 4), float32] */;
  %427 = cast(%var_5801, dtype="int64") /* ty=Tensor[(3, 10, 4), int64] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="int64") /* ty=Tensor[(3, 10, 4), int64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %431 = not_equal(%415, %416) /* ty=Tensor[(3, 10, 4), bool] */;
  %432 = %419.0;
  %433 = @func_1687(%421) /* ty=Tensor[(4, 14, 3), float64] */;
  %434 = %422.0;
  %435 = %423.0;
  %436 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  %437 = acos(%424) /* ty=Tensor[(3, 10, 4), float64] */;
  %438 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %439 = bitwise_or(%429, %430) /* ty=Tensor[(3, 10, 4), int64] */;
  (%431, %432, meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, %433, meta[relay.Constant][35] /* ty=Tensor[(168), float64] */, %434, %435, %436, %437, %438, %439)
}

def @func_430(%var_363: float64, %var_376: Tensor[(22, 5), int8]) -> (Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) {
  %440 = cast(%var_376, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %441 = reshape(%440, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %442 = @func_173(%441) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %445 = reshape(%444, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %446 = @func_173(%445) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %447 = cast(%var_363, dtype="bool") /* ty=bool */;
  %448 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 1, 6), float64] */, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %449 = greater(%447, %448) /* ty=Tensor[(6, 1, 6), bool] */;
  %450 = cast(%449, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %451 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 1, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 1, 6), float64] */, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %454 = maximum(%452, %453) /* ty=Tensor[(6, ?, 6), int64] */;
  %455 = cast(%var_363, dtype="bool") /* ty=bool */;
  %456 = cast(%454, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %457 = %446.0;
  %458 = cast(%457, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %459 = reshape(%458, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %460 = @func_173(%459) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %461 = cast(%443, dtype="float32") /* ty=Tensor[(5, 11, 2), float32] */;
  %462 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 3), int32] */, dtype="int32") /* ty=Tensor[(1, 3), int32] */;
  %463 = cast(meta[relay.Constant][38] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %464 = cast(%var_376, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %465 = reshape(%462, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %466 = reshape(%463, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
  %467 = reshape(%464, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %468 = @func_328(%465, %466, %467) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
  %469 = logical_or(%455, %456) /* ty=Tensor[(6, ?, 6), bool] */;
  %470 = %460.0;
  %471 = asin(%461) /* ty=Tensor[(5, 11, 2), float32] */;
  %472 = %468.2;
  (%var_376, %457, %469, %470, %471, %472, meta[relay.Constant][37] /* ty=Tensor[(1, 3), int32] */, meta[relay.Constant][38] /* ty=Tensor[(168), int32] */)
}

def @func_5396() -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) {
  %473 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %474 = %473.0;
  %475 = cast(%474, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
  %476 = reshape(%475, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), uint32] */;
  %477 = @func_4799(%476) /* ty=Tensor[(5, 10, 13), uint16] */;
  (%474, %477)
}

def @func_4049(%var_4041: Tensor[(2, 4, 3), float64]) -> (Tensor[(2, 4, 3), float64],) {
  %478 = cast(%var_4041, dtype="float64") /* ty=Tensor[(2, 4, 3), float64] */;
  %479 = erf(%478) /* ty=Tensor[(2, 4, 3), float64] */;
  (%479,)
}

def @func_5448() -> Tensor[(5, 10, 13), uint32] {
  %480 = @func_5157() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %480.0
}

def @func_6746(%var_6727: Tensor[(5, 10, 13), uint32]) -> (Tensor[(5, 10, 13), float64],) {
  %481 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %482 = cast(%var_6727, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %486 = mod(%484, %485) /* ty=Tensor[(5, 10, 13), float64] */;
  (%486,)
}

def @func_6012() -> (Tensor[(5, 10, 13), float64],) {
  %487 = @func_4640() /* ty=(Tensor[(5, 10, 13), float64],) */;
  %488 = %487.0;
  (%488,)
}

def @func_6082(%var_6040: Tensor[(132), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) {
  %489 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %490 = cast(%var_6040, dtype="float32") /* ty=Tensor[(132), float32] */;
  %491 = reshape(%490, newshape=[12, 1, 11]) /* ty=Tensor[(12, 1, 11), float32] */;
  %492 = @func_3731(%491) /* ty=(Tensor[(12, 1, 11), float32],) */;
  %493 = %492.0;
  %494 = cast(%var_6040, dtype="bool") /* ty=Tensor[(132), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(12, 1, 11), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = cast(%493, dtype="float64") /* ty=Tensor[(12, 1, 11), float64] */;
  %499 = cast(meta[relay.Constant][39] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %500 = reshape(%499, newshape=[15]) /* ty=Tensor[(15), uint8] */;
  %501 = @func_4567(%500) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) */;
  %502 = cast(%493, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %503 = acosh(%502) /* ty=Tensor[(12, 1, 11), float32] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %505 = sinh(%504) /* ty=Tensor[(12, 1, 11), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %507 = @func_4640() /* ty=(Tensor[(5, 10, 13), float64],) */;
  %508 = %489.0;
  %509 = equal(%496, %497) /* ty=Tensor[(12, ?, 11), bool] */;
  %510 = acos(%498) /* ty=Tensor[(12, 1, 11), float64] */;
  %511 = %501.3;
  %512 = sin(%506) /* ty=Tensor[(12, 1, 11), float32] */;
  %513 = %507.0;
  (%508, %509, %510, %511, meta[relay.Constant][39] /* ty=Tensor[(15), uint8] */, %512, %513)
}

def @func_284(%var_244: Tensor[(5, 10, 1), uint64], %var_262: Tensor[(110), int8]) -> (Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) {
  %514 = cast(%var_244, dtype="bool") /* ty=Tensor[(5, 10, 1), bool] */;
  %515 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 10, 10), uint64] */, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
  %516 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
  %517 = reshape(%516, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %518 = @func_217(%517) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %519 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
  %520 = reshape(%519, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %521 = @func_173(%520) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %522 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
  %523 = reshape(%522, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %524 = @func_173(%523) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %525 = less(%514, %515) /* ty=Tensor[(5, 10, 10), bool] */;
  %526 = %518.1;
  %527 = %521.1;
  %528 = %524.0;
  (%525, %526, %var_262, %527, %528)
}

def @func_6358() -> Tensor[(5, 10, 13), uint32] {
  %529 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
  %529.0
}

def @func_6540() -> (Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) {
  %530 = @func_4734() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %531 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 24), float64] */, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %532 = reshape(%531, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
  %533 = %530.0;
  %534 = @func_3040(%532) /* ty=Tensor[(6, 16, 2), bool] */;
  (%533, %534, meta[relay.Constant][41] /* ty=Tensor[(8, 24), float64] */)
}

def @func_1627(%var_1612: Tensor[(110), int8]) -> (Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) {
  %535 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %536 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = cast(%var_1612, dtype="int8") /* ty=Tensor[(110), int8] */;
  %540 = reshape(%539, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %541 = @func_173(%540) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %542 = equal(%537, %538) /* ty=Tensor[(15, 2, 14), bool] */;
  %543 = %541.1;
  (%542, %543, %var_1612)
}

def @func_4799(%var_4779: Tensor[(5, 10, 13), uint32]) -> Tensor[(5, 10, 13), uint16] {
  %544 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %545 = %544.0;
  %546 = cast(%var_4779, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = less(%548, %549) /* ty=Tensor[(5, 10, 13), bool] */;
  %551 = cast(%550, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %552 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%545, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%553, %554) /* ty=Tensor[(5, 10, 13), uint16] */
}

def @func_4479(%var_4430: Tensor[(5, 10, 13), float64], %var_4446: Tensor[(64, 2), int64], %var_4450: Tensor[(176, 2), int64], %var_4452: Tensor[(168), int32], %var_4474: Tensor[(480), uint16]) -> (Tensor[(5, 10, 13), float64], Tensor[(5, 11, 2), float64], Tensor[(176, 2), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(64, 2), int32], Tensor[(8, 12, 5), uint16], Tensor[(480), uint16]) {
  %555 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %556 = %555.0;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %558 = atanh(%557) /* ty=Tensor[(5, 10, 13), float64] */;
  %559 = cast(%var_4430, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %563 = cast(%var_4450, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
  %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%var_4452, dtype="int32") /* ty=Tensor[(168), int32] */;
  %566 = reshape(%563, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
  %567 = reshape(%564, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %568 = reshape(%565, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %569 = @func_648(%566, %567, %568) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
  %570 = cast(%var_4446, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %571 = reshape(%570, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), int64] */;
  %572 = @func_4111(%571) /* ty=(Tensor[(2, 16, 4), int64],) */;
  %573 = %572.0;
  %574 = cast(%573, dtype="int32") /* ty=Tensor[(2, 16, 4), int32] */;
  %575 = shape_of(%var_4446, dtype="int32") /* ty=Tensor[(2), int32] */;
  %576 = cast(%var_4446, dtype="int32") /* ty=Tensor[(64, 2), int32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %578 = cast(%var_4474, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %579 = cast(%var_4474, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %580 = reshape(%578, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint16] */;
  %581 = reshape(%579, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint16] */;
  %582 = @func_2901(%580, %581) /* ty=(Tensor[(8, 12, 5), uint16],) */;
  %583 = floor_divide(%561, %562) /* ty=Tensor[(5, 10, 13), float64] */;
  %584 = %569.2;
  %585 = minimum(%576, %577) /* ty=Tensor[(64, 2), int32] */;
  %586 = %582.0;
  (%583, %584, %var_4450, meta[relay.Constant][44] /* ty=Tensor[(3), int32] */, %var_4452, %585, %586, %var_4474)
}

def @func_2010(%var_2002: float32, %var_2003: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32],) {
  %587 = cast(%var_2002, dtype="float32") /* ty=float32 */;
  %588 = cast(%var_2003, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %589 = mod(%587, %588) /* ty=Tensor[(4, 4), float32] */;
  (%589,)
}

def @func_4640() -> (Tensor[(5, 10, 13), float64],) {
  %590 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %592 = erf(%591) /* ty=Tensor[(5, 10, 13), float64] */;
  (%592,)
}

def @func_5157() -> (Tensor[(5, 10, 13), uint32],) {
  %593 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%593,)
}

def @func_217(%var_192: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) {
  %594 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
  %595 = cast(%var_192, dtype="int8") /* ty=Tensor[(110), int8] */;
  %596 = reshape(%595, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %597 = @func_173(%596) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %598 = cast(%var_192, dtype="int8") /* ty=Tensor[(110), int8] */;
  %599 = reshape(%598, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %600 = @func_173(%599) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %601 = %597.1;
  %602 = cast(%601, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %603 = reshape(%602, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %604 = @func_173(%603) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %605 = %600.0;
  %606 = cast(%605, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %607 = reshape(%606, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %608 = @func_173(%607) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %609 = acosh(%594) /* ty=Tensor[(5, 5, 3), float64] */;
  %610 = %604.0;
  %611 = %608.0;
  (%609, %601, %var_192, %605, %610, %611)
}

def @func_5025(%var_4999: Tensor[(4, 5, 2), float32]) -> Tensor[(4, 5, 2), float32] {
  %612 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 2), float32] */;
  %613 = cast(%var_4999, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  floor_divide(%612, %613) /* ty=Tensor[(4, 5, 2), float32] */
}

def @func_2385(%var_2342: uint8, %var_2343: Tensor[(12, 11, 4), uint8]) -> (Tensor[(12, 11, 4), bool],) {
  %614 = cast(%var_2342, dtype="bool") /* ty=bool */;
  %615 = cast(%var_2343, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
  %616 = less_equal(%614, %615) /* ty=Tensor[(12, 11, 4), bool] */;
  (%616,)
}

def @func_328(%var_292: Tensor[(3, 1, 1), int32], %var_293: Tensor[(3, 7, 8), int32], %var_306: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) {
  %617 = cast(%var_306, dtype="int8") /* ty=Tensor[(110), int8] */;
  %618 = reshape(%617, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %619 = @func_217(%618) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %620 = cast(%var_292, dtype="int32") /* ty=Tensor[(3, 1, 1), int32] */;
  %621 = cast(%var_293, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
  %622 = bitwise_or(%620, %621) /* ty=Tensor[(3, 7, 8), int32] */;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %624 = cast(%var_306, dtype="int8") /* ty=Tensor[(110), int8] */;
  %625 = reshape(%624, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %626 = @func_217(%625) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %627 = %619.0;
  %628 = sqrt(%623) /* ty=Tensor[(3, 7, 8), float64] */;
  %629 = %626.5;
  (%627, %var_306, %628, %629)
}

def @func_2167(%var_2164: Tensor[(12, 3, 5), float32]) -> Tensor[(12, 3, 5), float32] {
  %630 = cast(%var_2164, dtype="float32") /* ty=Tensor[(12, 3, 5), float32] */;
  tan(%630) /* ty=Tensor[(12, 3, 5), float32] */
}

def @func_2901(%var_2888: Tensor[(8, 12, 5), uint16], %var_2889: Tensor[(8, 12, 5), uint16]) -> (Tensor[(8, 12, 5), uint16],) {
  %631 = cast(%var_2889, dtype="uint16") /* ty=Tensor[(8, 12, 5), uint16] */;
  %632 = shape_of(%var_2888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_2888, dtype="uint16") /* ty=Tensor[(8, 12, 5), uint16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %635 = bitwise_and(%633, %634) /* ty=Tensor[(8, 12, 5), uint16] */;
  (%635,)
}

def @func_4693() -> Tensor[(5, 10, 13), uint32] {
  %636 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %636.0
}

def @func_5755(%var_5692: Tensor[(15, 3, 11), float32], %var_5706: Tensor[(630), uint16], %var_5730: Tensor[(3), int32], %var_5731: Tensor[(168), int32], %var_5740: Tensor[(1, 15), uint8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  %637 = cast(meta[relay.Constant][47] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %638 = reshape(%637, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %639 = @func_217(%638) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %640 = cast(%var_5706, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %641 = reshape(%640, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint16] */;
  %642 = @func_5125(%641) /* ty=(Tensor[(14, 9, 5), uint16],) */;
  %643 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 352), int64] */, dtype="int64") /* ty=Tensor[(1, 352), int64] */;
  %644 = cast(%var_5730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_5731, dtype="int32") /* ty=Tensor[(168), int32] */;
  %646 = reshape(%643, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
  %647 = reshape(%644, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %648 = reshape(%645, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %649 = @func_648(%646, %647, %648) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
  %650 = cast(%var_5740, dtype="uint8") /* ty=Tensor[(1, 15), uint8] */;
  %651 = reshape(%650, newshape=[15]) /* ty=Tensor[(15), uint8] */;
  %652 = @func_4567(%651) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) */;
  %653 = cast(%var_5692, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %654 = erf(%653) /* ty=Tensor[(15, 3, 11), float32] */;
  %655 = cast(%var_5692, dtype="uint32") /* ty=Tensor[(15, 3, 11), uint32] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="uint32") /* ty=Tensor[(15, 3, 11), uint32] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %659 = bitwise_and(%657, %658) /* ty=Tensor[(15, 3, 11), uint32] */;
  %660 = cast(%654, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %661 = acos(%660) /* ty=Tensor[(15, 3, 11), float64] */;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %663 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%659, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %666 = cast(meta[relay.Constant][49] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %667 = reshape(%666, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %668 = @func_1263(%667) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %669 = %639.0;
  %670 = %642.0;
  %671 = %649.1;
  %672 = @func_4933() /* ty=Tensor[(5, 10, 13), uint32] */;
  %673 = %652.4;
  %674 = power(%664, %665) /* ty=Tensor[(15, 3, 11), float32] */;
  %675 = %668.0;
  (%669, meta[relay.Constant][47] /* ty=Tensor[(110), int8] */, %670, %var_5706, %671, meta[relay.Constant][48] /* ty=Tensor[(1, 352), int64] */, %var_5730, %var_5731, %672, %673, %var_5740, %674, %675, meta[relay.Constant][49] /* ty=Tensor[(768), float32] */)
}

def @func_3023(%var_3013: Tensor[(12, 5, 3), bool], %var_3014: Tensor[(12, 5, 3), bool]) -> (Tensor[(12, 5, 3), bool],) {
  %676 = cast(%var_3014, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %677 = shape_of(%var_3013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_3013, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = logical_or(%678, %679) /* ty=Tensor[(12, 5, 3), bool] */;
  (%680,)
}

def @func_1951(%var_1923: Tensor[(1, 15, 1), uint8]) -> Tensor[(1, 15, 1), uint8] {
  %681 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %682 = cast(%var_1923, dtype="uint8") /* ty=Tensor[(1, 15, 1), uint8] */;
  bitwise_xor(%681, %682) /* ty=Tensor[(1, 15, 1), uint8] */
}

def @func_1364(%var_1360: Tensor[(14, 14, 7), float64]) -> Tensor[(14, 14, 7), float64] {
  %683 = cast(%var_1360, dtype="float64") /* ty=Tensor[(14, 14, 7), float64] */;
  log10(%683) /* ty=Tensor[(14, 14, 7), float64] */
}

def @func_2615(%var_2576: Tensor[(10, 16, 1), float32], %var_2582: Tensor[(6, 28), float64], %var_2585: Tensor[(50), uint64]) -> (Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) {
  %684 = cast(%var_2582, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
  %685 = reshape(%684, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), float64] */;
  %686 = cast(%var_2576, dtype="float32") /* ty=Tensor[(10, 16, 1), float32] */;
  %687 = sin(%686) /* ty=Tensor[(10, 16, 1), float32] */;
  %688 = cast(%var_2585, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %689 = cast(meta[relay.Constant][51] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %690 = reshape(%688, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %691 = reshape(%689, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %692 = @func_284(%690, %691) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
  %693 = %692.2;
  %694 = cast(%687, dtype="bool") /* ty=Tensor[(10, 16, 1), bool] */;
  %695 = cast(%693, dtype="bool") /* ty=Tensor[(110), bool] */;
  %696 = greater_equal(%694, %695) /* ty=Tensor[(10, 16, 110), bool] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(10, 16, 110), bool] */;
  %698 = cast(%693, dtype="bool") /* ty=Tensor[(110), bool] */;
  %699 = @func_1687(%685) /* ty=Tensor[(4, 14, 3), float64] */;
  %700 = equal(%697, %698) /* ty=Tensor[(10, 16, 110), bool] */;
  (%699, %var_2582, %var_2585, meta[relay.Constant][51] /* ty=Tensor[(110), int8] */, %700)
}

def @func_1687(%var_1684: Tensor[(4, 14, 3), float64]) -> Tensor[(4, 14, 3), float64] {
  %701 = cast(%var_1684, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  cosh(%701) /* ty=Tensor[(4, 14, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2170(%var_2168: Tensor[(12, 3, 5), float32]) -> Tensor[(12, 3, 5), float32] {
  @func_2167(%var_2168) /* ty=Tensor[(12, 3, 5), float32] */
}

def @func_6825(%var_6823: Tensor[(6, 13, 9), int32], %var_6824: Tensor[(110, 1), int8]) -> (Tensor[(6, 13, 9), int32], Tensor[(1, 3), int32], float64, Tensor[(110, 1), int8], Tensor[(6, 13, 9), uint32], Tensor[(6, 13, 9), int8], Tensor[(5, 10, 13), uint32]) {
  @func_6821(%var_6823, %var_6824) /* ty=(Tensor[(6, 13, 9), int32], Tensor[(1, 3), int32], float64, Tensor[(110, 1), int8], Tensor[(6, 13, 9), uint32], Tensor[(6, 13, 9), int8], Tensor[(5, 10, 13), uint32]) */
}

def @func_4640() -> (Tensor[(5, 10, 13), float64],) {
  %0 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %2 = erf(%1) /* ty=Tensor[(5, 10, 13), float64] */;
  (%2,)
}

def @func_332(%var_329: Tensor[(3, 1, 1), int32], %var_330: Tensor[(3, 7, 8), int32], %var_331: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) {
  %16 = fn (%var_292: Tensor[(3, 1, 1), int32], %var_293: Tensor[(3, 7, 8), int32], %var_306: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) {
    %3 = cast(%var_306, dtype="int8") /* ty=Tensor[(110), int8] */;
    %4 = reshape(%3, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %5 = @func_217(%4) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
    %6 = cast(%var_292, dtype="int32") /* ty=Tensor[(3, 1, 1), int32] */;
    %7 = cast(%var_293, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
    %8 = bitwise_or(%6, %7) /* ty=Tensor[(3, 7, 8), int32] */;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
    %10 = cast(%var_306, dtype="int8") /* ty=Tensor[(110), int8] */;
    %11 = reshape(%10, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %12 = @func_217(%11) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
    %13 = %5.0;
    %14 = sqrt(%9) /* ty=Tensor[(3, 7, 8), float64] */;
    %15 = %12.5;
    (%13, %var_306, %14, %15)
  };
  %16(%var_329, %var_330, %var_331) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */
}

def @func_1367(%var_1365: Tensor[(14, 14, 7), float64]) -> Tensor[(14, 14, 7), float64] {
  @func_1364(%var_1365) /* ty=Tensor[(14, 14, 7), float64] */
}

def @func_5292() -> Tensor[(5, 10, 13), uint32] {
  @func_5290() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_4933() -> Tensor[(5, 10, 13), uint32] {
  %17 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %17.0
}

def @func_1687(%var_1684: Tensor[(4, 14, 3), float64]) -> Tensor[(4, 14, 3), float64] {
  %18 = cast(%var_1684, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  cosh(%18) /* ty=Tensor[(4, 14, 3), float64] */
}

def @func_4347(%var_4346: Tensor[(196), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) {
  %26 = fn (%var_4341: Tensor[(196), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) {
    %19 = cast(%var_4341, dtype="float32") /* ty=Tensor[(196), float32] */;
    %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
    %21 = reshape(%19, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
    %22 = reshape(%20, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %23 = @func_1659(%21, %22) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
    %24 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
    %25 = %23.1;
    (%24, %25, %var_4341, meta[relay.Constant][0] /* ty=Tensor[(12, 2), float64] */)
  };
  %26(%var_4346) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) */
}

def @func_4523(%var_4519: Tensor[(4, 14, 8), bool], %var_4520: Tensor[(4, 14, 8), bool], %var_4521: Tensor[(180), bool], %var_4522: Tensor[(24), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(180), bool], Tensor[(4, 14, 8), bool], Tensor[(2, 4, 3), float64], Tensor[(24), float64]) {
  %47 = fn (%var_4495: Tensor[(4, 14, 8), bool], %var_4496: Tensor[(4, 14, 8), bool], %var_4507: Tensor[(180), bool], %var_4516: Tensor[(24), float64]) -> (Tensor[(12, 5, 3), bool], Tensor[(180), bool], Tensor[(4, 14, 8), bool], Tensor[(2, 4, 3), float64], Tensor[(24), float64]) {
    %27 = cast(%var_4507, dtype="bool") /* ty=Tensor[(180), bool] */;
    %28 = cast(%var_4507, dtype="bool") /* ty=Tensor[(180), bool] */;
    %29 = reshape(%27, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), bool] */;
    %30 = reshape(%28, newshape=[12, 5, 3]) /* ty=Tensor[(12, 5, 3), bool] */;
    %31 = @func_3023(%29, %30) /* ty=(Tensor[(12, 5, 3), bool],) */;
    %32 = cast(%var_4496, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %33 = shape_of(%var_4495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%var_4495, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %36 = logical_and(%34, %35) /* ty=Tensor[(4, 14, 8), bool] */;
    %37 = cast(%36, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %38 = shape_of(%var_4496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%var_4496, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %41 = cast(%var_4516, dtype="float64") /* ty=Tensor[(24), float64] */;
    %42 = reshape(%41, newshape=[2, 4, 3]) /* ty=Tensor[(2, 4, 3), float64] */;
    %43 = @func_4049(%42) /* ty=(Tensor[(2, 4, 3), float64],) */;
    %44 = %31.0;
    %45 = logical_or(%39, %40) /* ty=Tensor[(4, 14, 8), bool] */;
    %46 = %43.0;
    (%44, %var_4507, %45, %46, %var_4516)
  };
  %47(%var_4519, %var_4520, %var_4521, %var_4522) /* ty=(Tensor[(12, 5, 3), bool], Tensor[(180), bool], Tensor[(4, 14, 8), bool], Tensor[(2, 4, 3), float64], Tensor[(24), float64]) */
}

def @func_3100(%var_3094: Tensor[(10, 10, 9), float64], %var_3095: Tensor[(1, 270), uint64], %var_3096: Tensor[(196, 1), float32], %var_3097: Tensor[(22, 5), int8], %var_3098: Tensor[(352), int64], %var_3099: Tensor[(3, 56), int32]) -> (Tensor[(10, 10, 9), float64], float64, Tensor[(1, 270), uint64], Tensor[(196, 1), float32], Tensor[(22, 5), int8], Tensor[(8, 4, 11), int64], Tensor[(352), int64], Tensor[(3), int32], Tensor[(3, 56), int32]) {
  %68 = fn (%var_3075: Tensor[(10, 10, 9), float64], %var_3080: Tensor[(1, 270), uint64], %var_3081: Tensor[(196, 1), float32], %var_3082: Tensor[(22, 5), int8], %var_3086: Tensor[(352), int64], %var_3088: Tensor[(3, 56), int32]) -> (Tensor[(10, 10, 9), float64], float64, Tensor[(1, 270), uint64], Tensor[(196, 1), float32], Tensor[(22, 5), int8], Tensor[(8, 4, 11), int64], Tensor[(352), int64], Tensor[(3), int32], Tensor[(3, 56), int32]) {
    %48 = cast(%var_3075, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
    %49 = cast(%var_3080, dtype="uint64") /* ty=Tensor[(1, 270), uint64] */;
    %50 = cast(%var_3080, dtype="uint64") /* ty=Tensor[(1, 270), uint64] */;
    %51 = cast(%var_3081, dtype="float32") /* ty=Tensor[(196, 1), float32] */;
    %52 = cast(%var_3082, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
    %53 = reshape(%49, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
    %54 = reshape(%50, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
    %55 = reshape(%51, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %56 = reshape(%52, newshape=[1, 110]) /* ty=Tensor[(1, 110), int8] */;
    %57 = @func_1797(%53, %54, %55, %56) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) */;
    %58 = cast(%var_3086, dtype="int64") /* ty=Tensor[(352), int64] */;
    %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%var_3088, dtype="int32") /* ty=Tensor[(3, 56), int32] */;
    %61 = reshape(%58, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
    %62 = reshape(%59, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %63 = reshape(%60, newshape=[168]) /* ty=Tensor[(168), int32] */;
    %64 = @func_648(%61, %62, %63) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
    %65 = asinh(%48) /* ty=Tensor[(10, 10, 9), float64] */;
    %66 = %57.5;
    %67 = %64.0;
    (%65, %66, %var_3080, %var_3081, %var_3082, %67, %var_3086, meta[relay.Constant][1] /* ty=Tensor[(3), int32] */, %var_3088)
  };
  %68(%var_3094, %var_3095, %var_3096, %var_3097, %var_3098, %var_3099) /* ty=(Tensor[(10, 10, 9), float64], float64, Tensor[(1, 270), uint64], Tensor[(196, 1), float32], Tensor[(22, 5), int8], Tensor[(8, 4, 11), int64], Tensor[(352), int64], Tensor[(3), int32], Tensor[(3, 56), int32]) */
}

def @func_489(%var_486: Tensor[(2, 3, 4), float32], %var_487: float64, %var_488: Tensor[(110), int8]) -> (Tensor[(1, 3), int32], float64, Tensor[(110), int8], Tensor[(2, 3, 4), float64]) {
  %79 = fn (%var_469: Tensor[(2, 3, 4), float32], %var_473: float64, %var_474: Tensor[(110), int8]) -> (Tensor[(1, 3), int32], float64, Tensor[(110), int8], Tensor[(2, 3, 4), float64]) {
    %69 = cast(%var_473, dtype="float64") /* ty=float64 */;
    %70 = cast(%var_474, dtype="int8") /* ty=Tensor[(110), int8] */;
    %71 = reshape(%69, newshape=[]) /* ty=float64 */;
    %72 = reshape(%70, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
    %73 = @func_430(%71, %72) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
    %74 = cast(%var_469, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
    %75 = erf(%74) /* ty=Tensor[(2, 3, 4), float32] */;
    %76 = cast(%75, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
    %77 = %73.6;
    %78 = acos(%76) /* ty=Tensor[(2, 3, 4), float64] */;
    (%77, %var_473, %var_474, %78)
  };
  %79(%var_486, %var_487, %var_488) /* ty=(Tensor[(1, 3), int32], float64, Tensor[(110), int8], Tensor[(2, 3, 4), float64]) */
}

def @func_653(%var_650: Tensor[(8, 4, 11), int64], %var_651: Tensor[(3), int32], %var_652: Tensor[(168), int32]) -> (Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) {
  @func_648(%var_650, %var_651, %var_652) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */
}

def @func_4734() -> (Tensor[(5, 10, 13), uint32],) {
  %80 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%80,)
}

def @func_3731(%var_3722: Tensor[(12, 1, 11), float32]) -> (Tensor[(12, 1, 11), float32],) {
  %81 = cast(%var_3722, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %82 = log2(%81) /* ty=Tensor[(12, 1, 11), float32] */;
  (%82,)
}

def @func_1535(%var_1534: Tensor[(2, 12, 1), float64]) -> (Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) {
  %92 = fn (%var_1513: Tensor[(2, 12, 1), float64]) -> (Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) {
    %83 = cast(meta[relay.Constant][2] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
    %84 = reshape(%83, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %85 = @func_217(%84) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
    %86 = cast(%var_1513, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
    %87 = acosh(%86) /* ty=Tensor[(2, 12, 1), float64] */;
    %88 = cast(%87, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
    %89 = cast(meta[relay.Constant][2] /* ty=Tensor[(110), int8] */, dtype="bool") /* ty=Tensor[(110), bool] */;
    %90 = %85.4;
    %91 = less(%88, %89) /* ty=Tensor[(2, 12, 110), bool] */;
    (%90, %91)
  };
  %92(%var_1534) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) */
}

def @func_1329(%var_1314: Tensor[(4, 11, 5), uint32], %var_1323: Tensor[(110), int8]) -> (Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) {
  %93 = cast(meta[relay.Constant][3] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %94 = cast(%var_1314, dtype="uint32") /* ty=Tensor[(4, 11, 5), uint32] */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(168, 1), int32] */, dtype="int32") /* ty=Tensor[(168, 1), int32] */;
  %97 = cast(%var_1323, dtype="int8") /* ty=Tensor[(110), int8] */;
  %98 = reshape(%95, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %99 = reshape(%96, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
  %100 = reshape(%97, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %101 = @func_328(%98, %99, %100) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
  %102 = multiply(%93, %94) /* ty=Tensor[(4, 11, 5), uint32] */;
  %103 = %101.3;
  (%102, %103, meta[relay.Constant][4] /* ty=Tensor[(3), int32] */, meta[relay.Constant][5] /* ty=Tensor[(168, 1), int32] */, %var_1323)
}

def @func_5125(%var_5110: Tensor[(14, 9, 5), uint16]) -> (Tensor[(14, 9, 5), uint16],) {
  %104 = cast(%var_5110, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %105 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %108 = logical_xor(%106, %107) /* ty=Tensor[(14, 9, 5), uint16] */;
  (%108,)
}

def @func_5144(%var_5142: Tensor[(8, 4, 15), int16]) -> (Tensor[(8, 4, 15), int16], Tensor[(4, 4), float32], float32, Tensor[(16), float32]) {
  @func_5141(%var_5142) /* ty=(Tensor[(8, 4, 15), int16], Tensor[(4, 4), float32], float32, Tensor[(16), float32]) */
}

def @func_4799(%var_4779: Tensor[(5, 10, 13), uint32]) -> Tensor[(5, 10, 13), uint16] {
  %109 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %110 = %109.0;
  %111 = cast(%var_4779, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = less(%113, %114) /* ty=Tensor[(5, 10, 13), bool] */;
  %116 = cast(%115, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %117 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%110, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%118, %119) /* ty=Tensor[(5, 10, 13), uint16] */
}

def @func_5944(%var_5941: Tensor[(5, 15, 4), int32], %var_5942: Tensor[(495), float32], %var_5943: Tensor[(3), int32]) -> (Tensor[(5, 15, 4), int32], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(70, 9), uint16], Tensor[(3), int32], Tensor[(42, 4), int32], Tensor[(15), uint8]) {
  @func_5939(%var_5941, %var_5942, %var_5943) /* ty=(Tensor[(5, 15, 4), int32], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(70, 9), uint16], Tensor[(3), int32], Tensor[(42, 4), int32], Tensor[(15), uint8]) */
}

def @func_6556() -> (Tensor[(5, 10, 13), float64],) {
  @func_6554() /* ty=(Tensor[(5, 10, 13), float64],) */
}

def @func_6247() -> (Tensor[(5, 10, 13), uint32], Tensor[(12, 11, 4), bool], uint8, Tensor[(2, 264), uint8]) {
  %120 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 264), uint8] */, dtype="uint8") /* ty=Tensor[(2, 264), uint8] */;
  %122 = reshape(%120, newshape=[]) /* ty=uint8 */;
  %123 = reshape(%121, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), uint8] */;
  %124 = @func_2385(%122, %123) /* ty=(Tensor[(12, 11, 4), bool],) */;
  %125 = @func_5645() /* ty=Tensor[(5, 10, 13), uint32] */;
  %126 = %124.0;
  (%125, %126, meta[relay.Constant][7] /* ty=uint8 */, meta[relay.Constant][8] /* ty=Tensor[(2, 264), uint8] */)
}

def @func_6435() -> Tensor[(5, 10, 13), uint32] {
  %128 = fn () -> Tensor[(5, 10, 13), uint32] {
    %127 = @func_5797() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %127.0
  };
  %128() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_6082(%var_6040: Tensor[(132), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) {
  %129 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %130 = cast(%var_6040, dtype="float32") /* ty=Tensor[(132), float32] */;
  %131 = reshape(%130, newshape=[12, 1, 11]) /* ty=Tensor[(12, 1, 11), float32] */;
  %132 = @func_3731(%131) /* ty=(Tensor[(12, 1, 11), float32],) */;
  %133 = %132.0;
  %134 = cast(%var_6040, dtype="bool") /* ty=Tensor[(132), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(12, 1, 11), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%133, dtype="float64") /* ty=Tensor[(12, 1, 11), float64] */;
  %139 = cast(meta[relay.Constant][9] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %140 = reshape(%139, newshape=[15]) /* ty=Tensor[(15), uint8] */;
  %141 = @func_4567(%140) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) */;
  %142 = cast(%133, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %143 = acosh(%142) /* ty=Tensor[(12, 1, 11), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %145 = sinh(%144) /* ty=Tensor[(12, 1, 11), float32] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(12, 1, 11), float32] */;
  %147 = @func_4640() /* ty=(Tensor[(5, 10, 13), float64],) */;
  %148 = %129.0;
  %149 = equal(%136, %137) /* ty=Tensor[(12, ?, 11), bool] */;
  %150 = acos(%138) /* ty=Tensor[(12, 1, 11), float64] */;
  %151 = %141.3;
  %152 = sin(%146) /* ty=Tensor[(12, 1, 11), float32] */;
  %153 = %147.0;
  (%148, %149, %150, %151, meta[relay.Constant][9] /* ty=Tensor[(15), uint8] */, %152, %153)
}

def @func_4569(%var_4568: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) {
  %173 = fn (%var_4541: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) {
    %154 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
    %157 = reshape(%155, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
    %158 = reshape(%156, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %159 = @func_284(%157, %158) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
    %160 = cast(%var_4541, dtype="uint8") /* ty=Tensor[(15), uint8] */;
    %161 = reshape(%160, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint8] */;
    %162 = @func_1951(%161) /* ty=Tensor[(1, 15, 1), uint8] */;
    %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %164 = cast(%162, dtype="uint64") /* ty=Tensor[(1, 15, 1), uint64] */;
    %165 = cast(meta[relay.Constant][12] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
    %166 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(110), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %167 = cast(meta[relay.Constant][11] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?), int8] */;
    %169 = %154.0;
    %170 = %159.1;
    %171 = bitwise_or(%163, %164) /* ty=Tensor[(1, 15, 50), uint64] */;
    %172 = left_shift(%167, %168) /* ty=Tensor[(110), int8] */;
    (%169, %var_4541, %170, %171, %172)
  };
  %173(%var_4568) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) */
}

def @func_6618() -> (Tensor[(5, 10, 13), uint32],) {
  @func_6616() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_648(%var_622: Tensor[(8, 4, 11), int64], %var_645: Tensor[(3), int32], %var_646: Tensor[(168), int32]) -> (Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) {
  %174 = cast(%var_622, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %175 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %178 = cast(meta[relay.Constant][15] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %179 = reshape(%178, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %180 = @func_173(%179) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %181 = %180.1;
  %182 = cast(%181, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %183 = reshape(%182, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %184 = @func_173(%183) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %186 = cast(meta[relay.Constant][15] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %187 = reshape(%185, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %188 = reshape(%186, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %189 = @func_284(%187, %188) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
  %190 = %189.2;
  %191 = cast(meta[relay.Constant][15] /* ty=Tensor[(110), int8] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(1), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(110), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?), bool] */;
  %195 = cast(%var_622, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %196 = cast(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_646, dtype="int32") /* ty=Tensor[(168), int32] */;
  %198 = %184.1;
  %199 = cast(%198, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %200 = reshape(%196, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %201 = reshape(%197, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
  %202 = reshape(%199, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %203 = @func_328(%200, %201, %202) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
  %204 = maximum(%176, %177) /* ty=Tensor[(8, 4, 11), int64] */;
  %205 = logical_or(%193, %194) /* ty=Tensor[(110), bool] */;
  %206 = acos(%195) /* ty=Tensor[(8, 4, 11), float64] */;
  %207 = %203.3;
  (%204, meta[relay.Constant][14] /* ty=Tensor[(50), uint64] */, %181, %198, %205, %206, %207, %var_645, %var_646)
}

def @func_1662(%var_1660: Tensor[(14, 7, 2), float32], %var_1661: Tensor[(24), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) {
  %214 = fn (%var_1648: Tensor[(14, 7, 2), float32], %var_1652: Tensor[(24), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) {
    %208 = cast(%var_1648, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %209 = cast(%var_1652, dtype="float64") /* ty=Tensor[(24), float64] */;
    %210 = reshape(%209, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
    %211 = @func_1533(%210) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(2, 12, 110), bool]) */;
    %212 = acos(%208) /* ty=Tensor[(14, 7, 2), float32] */;
    %213 = %211.1;
    (%212, %213, %var_1652)
  };
  %214(%var_1660, %var_1661) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */
}

def @func_6746(%var_6727: Tensor[(5, 10, 13), uint32]) -> (Tensor[(5, 10, 13), float64],) {
  %215 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %216 = cast(%var_6727, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %220 = mod(%218, %219) /* ty=Tensor[(5, 10, 13), float64] */;
  (%220,)
}

def @func_1953(%var_1952: Tensor[(1, 15, 1), uint8]) -> Tensor[(1, 15, 1), uint8] {
  %223 = fn (%var_1923: Tensor[(1, 15, 1), uint8]) -> Tensor[(1, 15, 1), uint8] {
    %221 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %222 = cast(%var_1923, dtype="uint8") /* ty=Tensor[(1, 15, 1), uint8] */;
    bitwise_xor(%221, %222) /* ty=Tensor[(1, 15, 1), uint8] */
  };
  %223(%var_1952) /* ty=Tensor[(1, 15, 1), uint8] */
}

def @func_1333(%var_1331: Tensor[(4, 11, 5), uint32], %var_1332: Tensor[(110), int8]) -> (Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) {
  @func_1329(%var_1331, %var_1332) /* ty=(Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) */
}

def @func_5027(%var_5026: Tensor[(4, 5, 2), float32]) -> Tensor[(4, 5, 2), float32] {
  %226 = fn (%var_4999: Tensor[(4, 5, 2), float32]) -> Tensor[(4, 5, 2), float32] {
    %224 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 2), float32] */;
    %225 = cast(%var_4999, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
    floor_divide(%224, %225) /* ty=Tensor[(4, 5, 2), float32] */
  };
  %226(%var_5026) /* ty=Tensor[(4, 5, 2), float32] */
}

def @func_2167(%var_2164: Tensor[(12, 3, 5), float32]) -> Tensor[(12, 3, 5), float32] {
  %227 = cast(%var_2164, dtype="float32") /* ty=Tensor[(12, 3, 5), float32] */;
  tan(%227) /* ty=Tensor[(12, 3, 5), float32] */
}

def @func_5158() -> (Tensor[(5, 10, 13), uint32],) {
  %229 = fn () -> (Tensor[(5, 10, 13), uint32],) {
    %228 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
    (%228,)
  };
  %229() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_2905(%var_2903: Tensor[(8, 12, 5), uint16], %var_2904: Tensor[(8, 12, 5), uint16]) -> (Tensor[(8, 12, 5), uint16],) {
  @func_2901(%var_2903, %var_2904) /* ty=(Tensor[(8, 12, 5), uint16],) */
}

def @func_3734(%var_3732: Tensor[(12, 1, 11), float32]) -> (Tensor[(12, 1, 11), float32],) {
  @func_3731(%var_3732) /* ty=(Tensor[(12, 1, 11), float32],) */
}

def @func_4235(%var_4218: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(1, 15, 1), uint8], Tensor[(5, 11, 2), float64], Tensor[(110, 15), bool]) {
  %230 = cast(%var_4218, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %231 = reshape(%230, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint8] */;
  %232 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 1), int8] */, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %233 = reshape(%232, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %234 = @func_1627(%233) /* ty=(Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) */;
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 1), int8] */, dtype="bool") /* ty=Tensor[(110, 1), bool] */;
  %236 = cast(%var_4218, dtype="bool") /* ty=Tensor[(15), bool] */;
  %237 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %238 = @func_1951(%231) /* ty=Tensor[(1, 15, 1), uint8] */;
  %239 = %234.1;
  %240 = less(%235, %236) /* ty=Tensor[(110, 15), bool] */;
  (%237, %238, %239, %240)
}

def @func_4736() -> (Tensor[(5, 10, 13), uint32],) {
  @func_4734() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_4113(%var_4112: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
  %246 = fn (%var_4105: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
    %241 = cast(%var_4105, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
    %242 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %245 = bitwise_or(%243, %244) /* ty=Tensor[(2, 16, 4), int64] */;
    (%245,)
  };
  %246(%var_4112) /* ty=(Tensor[(2, 16, 4), int64],) */
}

def @func_4848(%var_4847: Tensor[(4, 40), float32]) -> (Tensor[(5, 10, 13), int16], Tensor[(110), int8], Tensor[(4, 40), float32], Tensor[(168), float64], Tensor[(5, 10), uint64]) {
  %264 = fn (%var_4831: Tensor[(4, 40), float32]) -> (Tensor[(5, 10, 13), int16], Tensor[(110), int8], Tensor[(4, 40), float32], Tensor[(168), float64], Tensor[(5, 10), uint64]) {
    %247 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
    %248 = cast(%247, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
    %249 = reshape(%248, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), uint32] */;
    %250 = @func_4799(%249) /* ty=Tensor[(5, 10, 13), uint16] */;
    %251 = cast(%247, dtype="int16") /* ty=Tensor[(5, 10, 13), int16] */;
    %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%250, dtype="int16") /* ty=Tensor[(5, 10, 13), int16] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %255 = cast(%var_4831, dtype="float32") /* ty=Tensor[(4, 40), float32] */;
    %256 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %257 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(5, 10), uint64] */;
    %258 = reshape(%255, newshape=[10, 16, 1]) /* ty=Tensor[(10, 16, 1), float32] */;
    %259 = reshape(%256, newshape=[6, 28]) /* ty=Tensor[(6, 28), float64] */;
    %260 = reshape(%257, newshape=[50]) /* ty=Tensor[(50), uint64] */;
    %261 = @func_2615(%258, %259, %260) /* ty=(Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) */;
    %262 = subtract(%253, %254) /* ty=Tensor[(5, 10, 13), int16] */;
    %263 = %261.3;
    (%262, %263, %var_4831, meta[relay.Constant][20] /* ty=Tensor[(168), float64] */, meta[relay.Constant][21] /* ty=Tensor[(5, 10), uint64] */)
  };
  %264(%var_4847) /* ty=(Tensor[(5, 10, 13), int16], Tensor[(110), int8], Tensor[(4, 40), float32], Tensor[(168), float64], Tensor[(5, 10), uint64]) */
}

def @func_1630(%var_1628: Tensor[(110), int8]) -> (Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) {
  @func_1627(%var_1628) /* ty=(Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) */
}

def @func_2619(%var_2616: Tensor[(10, 16, 1), float32], %var_2617: Tensor[(6, 28), float64], %var_2618: Tensor[(50), uint64]) -> (Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) {
  %282 = fn (%var_2576: Tensor[(10, 16, 1), float32], %var_2582: Tensor[(6, 28), float64], %var_2585: Tensor[(50), uint64]) -> (Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) {
    %265 = cast(%var_2582, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
    %266 = reshape(%265, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), float64] */;
    %267 = cast(%var_2576, dtype="float32") /* ty=Tensor[(10, 16, 1), float32] */;
    %268 = sin(%267) /* ty=Tensor[(10, 16, 1), float32] */;
    %269 = cast(%var_2585, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %270 = cast(meta[relay.Constant][22] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
    %271 = reshape(%269, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
    %272 = reshape(%270, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %273 = @func_284(%271, %272) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */;
    %274 = %273.2;
    %275 = cast(%268, dtype="bool") /* ty=Tensor[(10, 16, 1), bool] */;
    %276 = cast(%274, dtype="bool") /* ty=Tensor[(110), bool] */;
    %277 = greater_equal(%275, %276) /* ty=Tensor[(10, 16, 110), bool] */;
    %278 = cast(%277, dtype="bool") /* ty=Tensor[(10, 16, 110), bool] */;
    %279 = cast(%274, dtype="bool") /* ty=Tensor[(110), bool] */;
    %280 = @func_1687(%266) /* ty=Tensor[(4, 14, 3), float64] */;
    %281 = equal(%278, %279) /* ty=Tensor[(10, 16, 110), bool] */;
    (%280, %var_2582, %var_2585, meta[relay.Constant][22] /* ty=Tensor[(110), int8] */, %281)
  };
  %282(%var_2616, %var_2617, %var_2618) /* ty=(Tensor[(4, 14, 3), float64], Tensor[(6, 28), float64], Tensor[(50), uint64], Tensor[(110), int8], Tensor[(10, 16, 110), bool]) */
}

def @func_5290() -> Tensor[(5, 10, 13), uint32] {
  @func_5253() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_4642() -> (Tensor[(5, 10, 13), float64],) {
  @func_4640() /* ty=(Tensor[(5, 10, 13), float64],) */
}

def @func_3042(%var_3041: Tensor[(6, 16, 2), float64]) -> Tensor[(6, 16, 2), bool] {
  %292 = fn (%var_3029: Tensor[(6, 16, 2), float64]) -> Tensor[(6, 16, 2), bool] {
    %283 = cast(%var_3029, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
    %284 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(6, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %285 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 16, 2), float64] */, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
    %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %287 = greater(%285, %286) /* ty=Tensor[(6, 16, 2), bool] */;
    %288 = cast(%var_3029, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%290, %291) /* ty=Tensor[(6, 16, 2), bool] */
  };
  %292(%var_3041) /* ty=Tensor[(6, 16, 2), bool] */
}

def @func_1263(%var_1236: Tensor[(16, 6, 8), float32]) -> (Tensor[(16, 6, 8), bool],) {
  %293 = cast(%var_1236, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %294 = cos(%293) /* ty=Tensor[(16, 6, 8), float32] */;
  %295 = cast(%var_1236, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = logical_and(%297, %298) /* ty=Tensor[(16, 6, 8), bool] */;
  (%299,)
}

def @func_5345(%var_5330: Tensor[(15, 13, 1), bool], %var_5331: Tensor[(15, 13, 5), bool]) -> Tensor[(15, 13, 5), bool] {
  %300 = cast(%var_5330, dtype="bool") /* ty=Tensor[(15, 13, 1), bool] */;
  %301 = cast(%var_5331, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  logical_and(%300, %301) /* ty=Tensor[(15, 13, 5), bool] */
}

def @func_5762(%var_5757: Tensor[(15, 3, 11), float32], %var_5758: Tensor[(630), uint16], %var_5759: Tensor[(3), int32], %var_5760: Tensor[(168), int32], %var_5761: Tensor[(1, 15), uint8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  @func_5755(%var_5757, %var_5758, %var_5759, %var_5760, %var_5761) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) */
}

def @func_4148() -> Tensor[(5, 10, 13), uint32] {
  %313 = fn () -> Tensor[(5, 10, 13), uint32] {
    %302 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
    %303 = acos(%302) /* ty=Tensor[(5, 10, 13), float64] */;
    %304 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 10, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 10, 13), int8] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%303, dtype="int8") /* ty=Tensor[(5, 10, 13), int8] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %308 = bitwise_or(%306, %307) /* ty=Tensor[(5, 10, 13), int8] */;
    %309 = cast(%308, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
    %310 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %311 = cast(%303, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    minimum(%311, %312) /* ty=Tensor[(5, 10, 13), uint32] */
  };
  %313() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_5755(%var_5692: Tensor[(15, 3, 11), float32], %var_5706: Tensor[(630), uint16], %var_5730: Tensor[(3), int32], %var_5731: Tensor[(168), int32], %var_5740: Tensor[(1, 15), uint8]) -> (Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  %314 = cast(meta[relay.Constant][25] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %315 = reshape(%314, newshape=[110]) /* ty=Tensor[(110), int8] */;
  %316 = @func_217(%315) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
  %317 = cast(%var_5706, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %318 = reshape(%317, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint16] */;
  %319 = @func_5125(%318) /* ty=(Tensor[(14, 9, 5), uint16],) */;
  %320 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 352), int64] */, dtype="int64") /* ty=Tensor[(1, 352), int64] */;
  %321 = cast(%var_5730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_5731, dtype="int32") /* ty=Tensor[(168), int32] */;
  %323 = reshape(%320, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
  %324 = reshape(%321, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %325 = reshape(%322, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %326 = @func_648(%323, %324, %325) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
  %327 = cast(%var_5740, dtype="uint8") /* ty=Tensor[(1, 15), uint8] */;
  %328 = reshape(%327, newshape=[15]) /* ty=Tensor[(15), uint8] */;
  %329 = @func_4567(%328) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(15), uint8], Tensor[(5, 11, 2), float64], Tensor[(1, 15, 50), uint64], Tensor[(110), int8]) */;
  %330 = cast(%var_5692, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %331 = erf(%330) /* ty=Tensor[(15, 3, 11), float32] */;
  %332 = cast(%var_5692, dtype="uint32") /* ty=Tensor[(15, 3, 11), uint32] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="uint32") /* ty=Tensor[(15, 3, 11), uint32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %336 = bitwise_and(%334, %335) /* ty=Tensor[(15, 3, 11), uint32] */;
  %337 = cast(%331, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %338 = acos(%337) /* ty=Tensor[(15, 3, 11), float64] */;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %340 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%336, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %343 = cast(meta[relay.Constant][27] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %344 = reshape(%343, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %345 = @func_1263(%344) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %346 = %316.0;
  %347 = %319.0;
  %348 = %326.1;
  %349 = @func_4933() /* ty=Tensor[(5, 10, 13), uint32] */;
  %350 = %329.4;
  %351 = power(%341, %342) /* ty=Tensor[(15, 3, 11), float32] */;
  %352 = %345.0;
  (%346, meta[relay.Constant][25] /* ty=Tensor[(110), int8] */, %347, %var_5706, %348, meta[relay.Constant][26] /* ty=Tensor[(1, 352), int64] */, %var_5730, %var_5731, %349, %350, %var_5740, %351, %352, meta[relay.Constant][27] /* ty=Tensor[(768), float32] */)
}

def @func_5799() -> (Tensor[(5, 10, 13), uint32],) {
  @func_5797() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_5874(%var_5872: int8, %var_5873: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), bool], Tensor[(16, 6, 8), bool], Tensor[(768), float32], Tensor[(4, 14, 3), float64], Tensor[(168), float64], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), float64], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), int64]) {
  @func_5870(%var_5872, %var_5873) /* ty=(Tensor[(3, 10, 4), bool], Tensor[(16, 6, 8), bool], Tensor[(768), float32], Tensor[(4, 14, 3), float64], Tensor[(168), float64], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), float64], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), int64]) */
}

def @func_6249() -> (Tensor[(5, 10, 13), uint32], Tensor[(12, 11, 4), bool], uint8, Tensor[(2, 264), uint8]) {
  @func_6247() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(12, 11, 4), bool], uint8, Tensor[(2, 264), uint8]) */
}

def @func_1627(%var_1612: Tensor[(110), int8]) -> (Tensor[(15, 2, 14), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8]) {
  %353 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %354 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%var_1612, dtype="int8") /* ty=Tensor[(110), int8] */;
  %358 = reshape(%357, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %359 = @func_173(%358) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %360 = equal(%355, %356) /* ty=Tensor[(15, 2, 14), bool] */;
  %361 = %359.1;
  (%360, %361, %var_1612)
}

def @func_6462() -> (Tensor[(5, 10, 13), uint32],) {
  @func_6460() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_5448() -> Tensor[(5, 10, 13), uint32] {
  %362 = @func_5157() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %362.0
}

def @func_1802(%var_1798: Tensor[(2, 15, 9), uint64], %var_1799: Tensor[(2, 15, 9), uint64], %var_1800: Tensor[(196), float32], %var_1801: Tensor[(1, 110), int8]) -> (Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) {
  %392 = fn (%var_1729: Tensor[(2, 15, 9), uint64], %var_1730: Tensor[(2, 15, 9), uint64], %var_1768: Tensor[(196), float32], %var_1777: Tensor[(1, 110), int8]) -> (Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) {
    %363 = cast(%var_1730, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
    %364 = shape_of(%var_1729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%var_1729, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %367 = multiply(%365, %366) /* ty=Tensor[(2, 15, 9), uint64] */;
    %368 = cast(%367, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %369 = exp(%368) /* ty=Tensor[(2, 15, 9), float64] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %371 = cast(%var_1768, dtype="float32") /* ty=Tensor[(196), float32] */;
    %372 = cast(meta[relay.Constant][30] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %373 = reshape(%371, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
    %374 = reshape(%372, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %375 = @func_1659(%373, %374) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
    %376 = cast(-0.898348f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %377 = cast(%var_1777, dtype="int8") /* ty=Tensor[(1, 110), int8] */;
    %378 = reshape(%376, newshape=[]) /* ty=float64 */;
    %379 = reshape(%377, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
    %380 = @func_430(%378, %379) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
    %381 = cast(%369, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
    %382 = cast(%var_1768, dtype="float32") /* ty=Tensor[(196), float32] */;
    %383 = cast(meta[relay.Constant][30] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %384 = reshape(%382, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
    %385 = reshape(%383, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %386 = @func_1659(%384, %385) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(2, 12, 110), bool], Tensor[(24), float64]) */;
    %387 = log(%370) /* ty=Tensor[(2, 15, 9), float64] */;
    %388 = %375.1;
    %389 = %380.1;
    %390 = rsqrt(%381) /* ty=Tensor[(2, 15, 9), float32] */;
    %391 = %386.1;
    (%387, %388, %var_1768, meta[relay.Constant][30] /* ty=Tensor[(24), float64] */, %389, -0.898348f64 /* ty=float64 */, %var_1777, %390, %391)
  };
  %392(%var_1798, %var_1799, %var_1800, %var_1801) /* ty=(Tensor[(2, 15, 9), float64], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(24), float64], Tensor[(5, 11, 2), int8], float64, Tensor[(1, 110), int8], Tensor[(2, 15, 9), float32], Tensor[(2, 12, 110), bool]) */
}

def @func_6177() -> (Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) {
  @func_6175() /* ty=(Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) */
}

def @func_6326() -> Tensor[(5, 10, 13), uint32] {
  %393 = fn () -> Tensor[(5, 10, 13), uint32] {
    @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */
  };
  %393() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_175(%var_174: Tensor[(5, 11, 2), int8]) -> (Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) {
  %401 = fn (%var_158: Tensor[(5, 11, 2), int8]) -> (Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) {
    %394 = cast(%var_158, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
    %395 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(5, 11, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 11, 2), int8] */, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %398 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 11, 2), int8] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
    %399 = add(%396, %397) /* ty=Tensor[(5, 11, 2), int8] */;
    %400 = cosh(%398) /* ty=Tensor[(5, 11, 2), float64] */;
    (%399, %400)
  };
  %401(%var_174) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */
}

def @func_5141(%var_5131: Tensor[(8, 4, 15), int16]) -> (Tensor[(8, 4, 15), int16], Tensor[(4, 4), float32], float32, Tensor[(16), float32]) {
  %402 = cast(%var_5131, dtype="int16") /* ty=Tensor[(8, 4, 15), int16] */;
  %403 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(8, 4, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 4, 15), int16] */, dtype="int16") /* ty=Tensor[(8, 4, 15), int16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %406 = cast(1.82372f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %407 = cast(meta[relay.Constant][33] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %408 = reshape(%406, newshape=[]) /* ty=float32 */;
  %409 = reshape(%407, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %410 = @func_2010(%408, %409) /* ty=(Tensor[(4, 4), float32],) */;
  %411 = logical_xor(%404, %405) /* ty=Tensor[(8, 4, 15), int16] */;
  %412 = %410.0;
  (%411, %412, 1.82372f /* ty=float32 */, meta[relay.Constant][33] /* ty=Tensor[(16), float32] */)
}

def @func_287(%var_285: Tensor[(5, 10, 1), uint64], %var_286: Tensor[(110), int8]) -> (Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) {
  %428 = fn (%var_244: Tensor[(5, 10, 1), uint64], %var_262: Tensor[(110), int8]) -> (Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) {
    %413 = cast(%var_244, dtype="bool") /* ty=Tensor[(5, 10, 1), bool] */;
    %414 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 10, 10), uint64] */, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
    %415 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
    %416 = reshape(%415, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %417 = @func_217(%416) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */;
    %418 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
    %419 = reshape(%418, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
    %420 = @func_173(%419) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
    %421 = cast(%var_262, dtype="int8") /* ty=Tensor[(110), int8] */;
    %422 = reshape(%421, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
    %423 = @func_173(%422) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
    %424 = less(%413, %414) /* ty=Tensor[(5, 10, 10), bool] */;
    %425 = %417.1;
    %426 = %420.1;
    %427 = %423.0;
    (%424, %425, %var_262, %426, %427)
  };
  %428(%var_285, %var_286) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), int8]) */
}

def @func_4390(%var_4384: Tensor[(8, 8, 8), bool], %var_4385: Tensor[(8, 8, 8), bool]) -> Tensor[(8, 8, 8), bool] {
  %429 = cast(%var_4385, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %430 = shape_of(%var_4384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_4384, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%431, %432) /* ty=Tensor[(8, 8, 8), bool] */
}

def @func_6014() -> (Tensor[(5, 10, 13), float64],) {
  @func_6012() /* ty=(Tensor[(5, 10, 13), float64],) */
}

def @func_6410(%var_6409: float64) -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 11, 2), float32], float64, Tensor[(110, 1), int8]) {
  %440 = fn (%var_6395: float64) -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 11, 2), float32], float64, Tensor[(110, 1), int8]) {
    %433 = cast(%var_6395, dtype="float64") /* ty=float64 */;
    %434 = cast(meta[relay.Constant][35] /* ty=Tensor[(110, 1), int8] */, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
    %435 = reshape(%433, newshape=[]) /* ty=float64 */;
    %436 = reshape(%434, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
    %437 = @func_430(%435, %436) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
    %438 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
    %439 = %437.4;
    (%438, %439, %var_6395, meta[relay.Constant][35] /* ty=Tensor[(110, 1), int8] */)
  };
  %440(%var_6409) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 11, 2), float32], float64, Tensor[(110, 1), int8]) */
}

def @main(%var_6853: Tensor[(6, 16, 13), float64]) -> (Tensor[(6, 16, 13), float64],) {
  %441 = cast(%var_6853, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %442 = cosh(%441) /* ty=Tensor[(6, 16, 13), float64] */;
  (%442,)
}

def @func_5396() -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) {
  %443 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="uint32") /* ty=Tensor[(5, 10, 13), uint32] */;
  %446 = reshape(%445, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), uint32] */;
  %447 = @func_4799(%446) /* ty=Tensor[(5, 10, 13), uint16] */;
  (%444, %447)
}

def @func_3026(%var_3024: Tensor[(12, 5, 3), bool], %var_3025: Tensor[(12, 5, 3), bool]) -> (Tensor[(12, 5, 3), bool],) {
  %453 = fn (%var_3013: Tensor[(12, 5, 3), bool], %var_3014: Tensor[(12, 5, 3), bool]) -> (Tensor[(12, 5, 3), bool],) {
    %448 = cast(%var_3014, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %449 = shape_of(%var_3013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%var_3013, dtype="bool") /* ty=Tensor[(12, 5, 3), bool] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %452 = logical_or(%450, %451) /* ty=Tensor[(12, 5, 3), bool] */;
    (%452,)
  };
  %453(%var_3024, %var_3025) /* ty=(Tensor[(12, 5, 3), bool],) */
}

def @func_4935() -> Tensor[(5, 10, 13), uint32] {
  @func_4933() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_220(%var_218: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) {
  @func_217(%var_218) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) */
}

def @func_5939(%var_5909: Tensor[(5, 15, 4), int32], %var_5928: Tensor[(495), float32], %var_5930: Tensor[(3), int32]) -> (Tensor[(5, 15, 4), int32], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(70, 9), uint16], Tensor[(3), int32], Tensor[(42, 4), int32], Tensor[(15), uint8]) {
  %454 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(5, 15, 4), int32] */;
  %455 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_5909, dtype="int32") /* ty=Tensor[(5, 15, 4), int32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %458 = cast(%var_5928, dtype="float32") /* ty=Tensor[(495), float32] */;
  %459 = cast(meta[relay.Constant][37] /* ty=Tensor[(70, 9), uint16] */, dtype="uint16") /* ty=Tensor[(70, 9), uint16] */;
  %460 = cast(%var_5930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(meta[relay.Constant][38] /* ty=Tensor[(42, 4), int32] */, dtype="int32") /* ty=Tensor[(42, 4), int32] */;
  %462 = cast(meta[relay.Constant][39] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %463 = reshape(%458, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %464 = reshape(%459, newshape=[630]) /* ty=Tensor[(630), uint16] */;
  %465 = reshape(%460, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %466 = reshape(%461, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %467 = reshape(%462, newshape=[1, 15]) /* ty=Tensor[(1, 15), uint8] */;
  %468 = @func_5755(%463, %464, %465, %466, %467) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(14, 9, 5), uint16], Tensor[(630), uint16], Tensor[(50), uint64], Tensor[(1, 352), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(5, 10, 13), uint32], Tensor[(110), int8], Tensor[(1, 15), uint8], Tensor[(15, 3, 11), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) */;
  %469 = logical_xor(%456, %457) /* ty=Tensor[(5, 15, 4), int32] */;
  %470 = %468.11;
  (%469, %470, %var_5928, meta[relay.Constant][37] /* ty=Tensor[(70, 9), uint16] */, %var_5930, meta[relay.Constant][38] /* ty=Tensor[(42, 4), int32] */, meta[relay.Constant][39] /* ty=Tensor[(15), uint8] */)
}

def @func_1850(%var_1846: Tensor[(768), float32]) -> (Tensor[(9, 4, 5), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  %471 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %472 = cast(%var_1846, dtype="float32") /* ty=Tensor[(768), float32] */;
  %473 = reshape(%472, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %474 = @func_1263(%473) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %475 = tan(%471) /* ty=Tensor[(9, 4, 5), float32] */;
  %476 = %474.0;
  (%475, %476, %var_1846)
}

def @func_433(%var_431: float64, %var_432: Tensor[(22, 5), int8]) -> (Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) {
  %510 = fn (%var_363: float64, %var_376: Tensor[(22, 5), int8]) -> (Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) {
    %477 = cast(%var_376, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
    %478 = reshape(%477, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
    %479 = @func_173(%478) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
    %480 = %479.0;
    %481 = cast(%480, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
    %482 = reshape(%481, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
    %483 = @func_173(%482) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
    %484 = cast(%var_363, dtype="bool") /* ty=bool */;
    %485 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 1, 6), float64] */, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %486 = greater(%484, %485) /* ty=Tensor[(6, 1, 6), bool] */;
    %487 = cast(%486, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
    %488 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(6, 1, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 1, 6), float64] */, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %491 = maximum(%489, %490) /* ty=Tensor[(6, ?, 6), int64] */;
    %492 = cast(%var_363, dtype="bool") /* ty=bool */;
    %493 = cast(%491, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
    %494 = %483.0;
    %495 = cast(%494, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
    %496 = reshape(%495, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
    %497 = @func_173(%496) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
    %498 = cast(%480, dtype="float32") /* ty=Tensor[(5, 11, 2), float32] */;
    %499 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 3), int32] */, dtype="int32") /* ty=Tensor[(1, 3), int32] */;
    %500 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
    %501 = cast(%var_376, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
    %502 = reshape(%499, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
    %503 = reshape(%500, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), int32] */;
    %504 = reshape(%501, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %505 = @func_328(%502, %503, %504) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(110), int8], Tensor[(3, 7, 8), float64], Tensor[(5, 11, 2), int8]) */;
    %506 = logical_or(%492, %493) /* ty=Tensor[(6, ?, 6), bool] */;
    %507 = %497.0;
    %508 = asin(%498) /* ty=Tensor[(5, 11, 2), float32] */;
    %509 = %505.2;
    (%var_376, %494, %506, %507, %508, %509, meta[relay.Constant][42] /* ty=Tensor[(1, 3), int32] */, meta[relay.Constant][43] /* ty=Tensor[(168), int32] */)
  };
  %510(%var_431, %var_432) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */
}

def @func_6085(%var_6083: Tensor[(132), float32]) -> (Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) {
  @func_6082(%var_6083) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) */
}

def @func_1266(%var_1264: Tensor[(16, 6, 8), float32]) -> (Tensor[(16, 6, 8), bool],) {
  @func_1263(%var_1264) /* ty=(Tensor[(16, 6, 8), bool],) */
}

def @func_2901(%var_2888: Tensor[(8, 12, 5), uint16], %var_2889: Tensor[(8, 12, 5), uint16]) -> (Tensor[(8, 12, 5), uint16],) {
  %511 = cast(%var_2889, dtype="uint16") /* ty=Tensor[(8, 12, 5), uint16] */;
  %512 = shape_of(%var_2888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_2888, dtype="uint16") /* ty=Tensor[(8, 12, 5), uint16] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %515 = bitwise_and(%513, %514) /* ty=Tensor[(8, 12, 5), uint16] */;
  (%515,)
}

def @func_4660() -> (Tensor[(5, 10, 13), uint32],) {
  %516 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%516,)
}

def @func_1853(%var_1851: Tensor[(768), float32]) -> (Tensor[(9, 4, 5), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) {
  @func_1850(%var_1851) /* ty=(Tensor[(9, 4, 5), float32], Tensor[(16, 6, 8), bool], Tensor[(768), float32]) */
}

def @func_4802(%var_4800: Tensor[(5, 10, 13), uint32]) -> Tensor[(5, 10, 13), uint16] {
  @func_4799(%var_4800) /* ty=Tensor[(5, 10, 13), uint16] */
}

def @func_5797() -> (Tensor[(5, 10, 13), uint32],) {
  %517 = @func_5645() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%517,)
}

def @func_6012() -> (Tensor[(5, 10, 13), float64],) {
  %518 = @func_4640() /* ty=(Tensor[(5, 10, 13), float64],) */;
  %519 = %518.0;
  (%519,)
}

def @func_5996(%var_5992: uint32, %var_5993: Tensor[(5, 16, 1), uint32], %var_5994: Tensor[(220), uint32], %var_5995: Tensor[(110, 1), int8]) -> (Tensor[(5, 16, 1), float64], Tensor[(5, 11, 2), int8], Tensor[(220), uint32], Tensor[(110, 1), int8], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32]) {
  %535 = fn (%var_5946: uint32, %var_5947: Tensor[(5, 16, 1), uint32], %var_5976: Tensor[(220), uint32], %var_5977: Tensor[(110, 1), int8]) -> (Tensor[(5, 16, 1), float64], Tensor[(5, 11, 2), int8], Tensor[(220), uint32], Tensor[(110, 1), int8], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32]) {
    %520 = cast(%var_5946, dtype="uint32") /* ty=uint32 */;
    %521 = cast(%var_5947, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
    %522 = bitwise_and(%520, %521) /* ty=Tensor[(5, 16, 1), uint32] */;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
    %524 = cast(%var_5976, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %525 = cast(%var_5977, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
    %526 = reshape(%524, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), uint32] */;
    %527 = reshape(%525, newshape=[110]) /* ty=Tensor[(110), int8] */;
    %528 = @func_1329(%526, %527) /* ty=(Tensor[(4, 11, 5), uint32], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168, 1), int32], Tensor[(110), int8]) */;
    %529 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
    %530 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %531 = asin(%523) /* ty=Tensor[(5, 16, 1), float64] */;
    %532 = %528.1;
    %533 = %529.0;
    %534 = %530.0;
    (%531, %532, %var_5976, %var_5977, %533, %534)
  };
  %535(%var_5992, %var_5993, %var_5994, %var_5995) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(5, 11, 2), int8], Tensor[(220), uint32], Tensor[(110, 1), int8], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32]) */
}

def @func_5870(%var_5800: int8, %var_5801: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), bool], Tensor[(16, 6, 8), bool], Tensor[(768), float32], Tensor[(4, 14, 3), float64], Tensor[(168), float64], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), float64], Tensor[(5, 10, 13), uint32], Tensor[(3, 10, 4), int64]) {
  %536 = cast(%var_5800, dtype="bool") /* ty=bool */;
  %537 = cast(%var_5801, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %538 = cast(meta[relay.Constant][44] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %539 = reshape(%538, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %540 = @func_1263(%539) /* ty=(Tensor[(16, 6, 8), bool],) */;
  %541 = cast(meta[relay.Constant][45] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %542 = reshape(%541, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), float64] */;
  %543 = @func_5157() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %544 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %545 = cast(%var_5801, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %546 = cast(%var_5801, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %547 = sqrt(%546) /* ty=Tensor[(3, 10, 4), float32] */;
  %548 = cast(%var_5801, dtype="int64") /* ty=Tensor[(3, 10, 4), int64] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="int64") /* ty=Tensor[(3, 10, 4), int64] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %552 = not_equal(%536, %537) /* ty=Tensor[(3, 10, 4), bool] */;
  %553 = %540.0;
  %554 = @func_1687(%542) /* ty=Tensor[(4, 14, 3), float64] */;
  %555 = %543.0;
  %556 = %544.0;
  %557 = @func_4693() /* ty=Tensor[(5, 10, 13), uint32] */;
  %558 = acos(%545) /* ty=Tensor[(3, 10, 4), float64] */;
  %559 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
  %560 = bitwise_or(%550, %551) /* ty=Tensor[(3, 10, 4), int64] */;
  (%552, %553, meta[relay.Constant][44] /* ty=Tensor[(768), float32] */, %554, meta[relay.Constant][45] /* ty=Tensor[(168), float64] */, %555, %556, %557, %558, %559, %560)
}

def @func_5349(%var_5347: Tensor[(15, 13, 1), bool], %var_5348: Tensor[(15, 13, 5), bool]) -> Tensor[(15, 13, 5), bool] {
  @func_5345(%var_5347, %var_5348) /* ty=Tensor[(15, 13, 5), bool] */
}

def @func_2254(%var_2223: Tensor[(3, 1, 8), float64], %var_2224: Tensor[(3, 2, 8), float64], %var_2250: Tensor[(3, 1, 8), float64]) -> (Tensor[(3, 2, 8), uint16], Tensor[(3, 1, 8), float32], Tensor[(3, ?, 8), int16]) {
  %561 = cast(%var_2223, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
  %562 = cast(%var_2224, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
  %563 = floor_mod(%561, %562) /* ty=Tensor[(3, 2, 8), float64] */;
  %564 = cast(%563, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %565 = shape_of(%var_2224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_2224, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %568 = cast(%var_2223, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
  %569 = log10(%568) /* ty=Tensor[(3, 1, 8), float64] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
  %571 = cast(%var_2250, dtype="int16") /* ty=Tensor[(3, 1, 8), int16] */;
  %572 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%569, dtype="int16") /* ty=Tensor[(3, 1, 8), int16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %575 = multiply(%566, %567) /* ty=Tensor[(3, 2, 8), uint16] */;
  %576 = cos(%570) /* ty=Tensor[(3, 1, 8), float32] */;
  %577 = maximum(%573, %574) /* ty=Tensor[(3, ?, 8), int16] */;
  (%575, %576, %577)
}

def @func_5398() -> (Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) {
  @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */
}

def @func_6175() -> (Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) {
  %578 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
  %579 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %580 = %578.1;
  %581 = %579.0;
  (%580, %581)
}

def @func_4694() -> Tensor[(5, 10, 13), uint32] {
  %583 = fn () -> Tensor[(5, 10, 13), uint32] {
    %582 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %582.0
  };
  %583() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_1364(%var_1360: Tensor[(14, 14, 7), float64]) -> Tensor[(14, 14, 7), float64] {
  %584 = cast(%var_1360, dtype="float64") /* ty=Tensor[(14, 14, 7), float64] */;
  log10(%584) /* ty=Tensor[(14, 14, 7), float64] */
}

def @func_5646() -> Tensor[(5, 10, 13), uint32] {
  %586 = fn () -> Tensor[(5, 10, 13), uint32] {
    %585 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %585.0
  };
  %586() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_6265() -> Tensor[(5, 10, 13), uint32] {
  %588 = fn () -> Tensor[(5, 10, 13), uint32] {
    %587 = @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %587.0
  };
  %588() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_4394(%var_4392: Tensor[(8, 8, 8), bool], %var_4393: Tensor[(8, 8, 8), bool]) -> Tensor[(8, 8, 8), bool] {
  @func_4390(%var_4392, %var_4393) /* ty=Tensor[(8, 8, 8), bool] */
}

def @func_6359() -> Tensor[(5, 10, 13), uint32] {
  %590 = fn () -> Tensor[(5, 10, 13), uint32] {
    %589 = @func_5396() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(5, 10, 13), uint16]) */;
    %589.0
  };
  %590() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_5128(%var_5126: Tensor[(14, 9, 5), uint16]) -> (Tensor[(14, 9, 5), uint16],) {
  @func_5125(%var_5126) /* ty=(Tensor[(14, 9, 5), uint16],) */
}

def @func_4051(%var_4050: Tensor[(2, 4, 3), float64]) -> (Tensor[(2, 4, 3), float64],) {
  %593 = fn (%var_4041: Tensor[(2, 4, 3), float64]) -> (Tensor[(2, 4, 3), float64],) {
    %591 = cast(%var_4041, dtype="float64") /* ty=Tensor[(2, 4, 3), float64] */;
    %592 = erf(%591) /* ty=Tensor[(2, 4, 3), float64] */;
    (%592,)
  };
  %593(%var_4050) /* ty=(Tensor[(2, 4, 3), float64],) */
}

def @func_6460() -> (Tensor[(5, 10, 13), uint32],) {
  %594 = @func_6175() /* ty=(Tensor[(5, 10, 13), uint16], Tensor[(5, 10, 13), uint32]) */;
  %595 = %594.1;
  (%595,)
}

def @func_6749(%var_6747: Tensor[(5, 10, 13), uint32]) -> (Tensor[(5, 10, 13), float64],) {
  @func_6746(%var_6747) /* ty=(Tensor[(5, 10, 13), float64],) */
}

def @func_4238(%var_4236: Tensor[(15), uint8]) -> (Tensor[(5, 10, 13), uint32], Tensor[(1, 15, 1), uint8], Tensor[(5, 11, 2), float64], Tensor[(110, 15), bool]) {
  @func_4235(%var_4236) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(1, 15, 1), uint8], Tensor[(5, 11, 2), float64], Tensor[(110, 15), bool]) */
}

def @func_2388(%var_2386: uint8, %var_2387: Tensor[(12, 11, 4), uint8]) -> (Tensor[(12, 11, 4), bool],) {
  %599 = fn (%var_2342: uint8, %var_2343: Tensor[(12, 11, 4), uint8]) -> (Tensor[(12, 11, 4), bool],) {
    %596 = cast(%var_2342, dtype="bool") /* ty=bool */;
    %597 = cast(%var_2343, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
    %598 = less_equal(%596, %597) /* ty=Tensor[(12, 11, 4), bool] */;
    (%598,)
  };
  %599(%var_2386, %var_2387) /* ty=(Tensor[(12, 11, 4), bool],) */
}

def @func_6541() -> (Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) {
  %605 = fn () -> (Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) {
    %600 = @func_4734() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %601 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 24), float64] */, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
    %602 = reshape(%601, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
    %603 = %600.0;
    %604 = @func_3040(%602) /* ty=Tensor[(6, 16, 2), bool] */;
    (%603, %604, meta[relay.Constant][46] /* ty=Tensor[(8, 24), float64] */)
  };
  %605() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) */
}

def @func_1034(%var_1032: Tensor[(5, 5, 4), float32], %var_1033: Tensor[(110), int8]) -> (Tensor[(5, 5, 4), float32], Tensor[(5, 11, 2), int8], float64, Tensor[(110), int8]) {
  %614 = fn (%var_1007: Tensor[(5, 5, 4), float32], %var_1029: Tensor[(110), int8]) -> (Tensor[(5, 5, 4), float32], Tensor[(5, 11, 2), int8], float64, Tensor[(110), int8]) {
    %606 = cast(%var_1007, dtype="float32") /* ty=Tensor[(5, 5, 4), float32] */;
    %607 = cast(5.32077f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %608 = cast(%var_1029, dtype="int8") /* ty=Tensor[(110), int8] */;
    %609 = reshape(%607, newshape=[]) /* ty=float64 */;
    %610 = reshape(%608, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
    %611 = @func_430(%609, %610) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
    %612 = cos(%606) /* ty=Tensor[(5, 5, 4), float32] */;
    %613 = %611.3;
    (%612, %613, 5.32077f64 /* ty=float64 */, %var_1029)
  };
  %614(%var_1032, %var_1033) /* ty=(Tensor[(5, 5, 4), float32], Tensor[(5, 11, 2), int8], float64, Tensor[(110), int8]) */
}

def @func_6651() -> Tensor[(5, 10, 13), uint32] {
  %615 = @func_5797() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %615.0
}

def @func_4479(%var_4430: Tensor[(5, 10, 13), float64], %var_4446: Tensor[(64, 2), int64], %var_4450: Tensor[(176, 2), int64], %var_4452: Tensor[(168), int32], %var_4474: Tensor[(480), uint16]) -> (Tensor[(5, 10, 13), float64], Tensor[(5, 11, 2), float64], Tensor[(176, 2), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(64, 2), int32], Tensor[(8, 12, 5), uint16], Tensor[(480), uint16]) {
  %616 = @func_4416() /* ty=(Tensor[(5, 10, 13), uint32],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %619 = atanh(%618) /* ty=Tensor[(5, 10, 13), float64] */;
  %620 = cast(%var_4430, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %624 = cast(%var_4450, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
  %625 = cast(meta[relay.Constant][47] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_4452, dtype="int32") /* ty=Tensor[(168), int32] */;
  %627 = reshape(%624, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), int64] */;
  %628 = reshape(%625, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %629 = reshape(%626, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %630 = @func_648(%627, %628, %629) /* ty=(Tensor[(8, 4, 11), int64], Tensor[(50), uint64], Tensor[(5, 11, 2), float64], Tensor[(5, 11, 2), float64], Tensor[(110), bool], Tensor[(8, 4, 11), float64], Tensor[(5, 11, 2), int8], Tensor[(3), int32], Tensor[(168), int32]) */;
  %631 = cast(%var_4446, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %632 = reshape(%631, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), int64] */;
  %633 = @func_4111(%632) /* ty=(Tensor[(2, 16, 4), int64],) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="int32") /* ty=Tensor[(2, 16, 4), int32] */;
  %636 = shape_of(%var_4446, dtype="int32") /* ty=Tensor[(2), int32] */;
  %637 = cast(%var_4446, dtype="int32") /* ty=Tensor[(64, 2), int32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %639 = cast(%var_4474, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %640 = cast(%var_4474, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %641 = reshape(%639, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint16] */;
  %642 = reshape(%640, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint16] */;
  %643 = @func_2901(%641, %642) /* ty=(Tensor[(8, 12, 5), uint16],) */;
  %644 = floor_divide(%622, %623) /* ty=Tensor[(5, 10, 13), float64] */;
  %645 = %630.2;
  %646 = minimum(%637, %638) /* ty=Tensor[(64, 2), int32] */;
  %647 = %643.0;
  (%644, %645, %var_4450, meta[relay.Constant][47] /* ty=Tensor[(3), int32] */, %var_4452, %646, %647, %var_4474)
}

def @func_6821(%var_6782: Tensor[(6, 13, 9), int32], %var_6796: Tensor[(110, 1), int8]) -> (Tensor[(6, 13, 9), int32], Tensor[(1, 3), int32], float64, Tensor[(110, 1), int8], Tensor[(6, 13, 9), uint32], Tensor[(6, 13, 9), int8], Tensor[(5, 10, 13), uint32]) {
  %648 = cast(%var_6782, dtype="int32") /* ty=Tensor[(6, 13, 9), int32] */;
  %649 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(6, 13, 9), int32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %652 = cast(9.17356f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %653 = cast(%var_6796, dtype="int8") /* ty=Tensor[(110, 1), int8] */;
  %654 = reshape(%652, newshape=[]) /* ty=float64 */;
  %655 = reshape(%653, newshape=[22, 5]) /* ty=Tensor[(22, 5), int8] */;
  %656 = @func_430(%654, %655) /* ty=(Tensor[(22, 5), int8], Tensor[(5, 11, 2), int8], Tensor[(6, ?, 6), bool], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float32], Tensor[(3, 7, 8), float64], Tensor[(1, 3), int32], Tensor[(168), int32]) */;
  %657 = cast(%var_6782, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
  %658 = tan(%657) /* ty=Tensor[(6, 13, 9), float32] */;
  %659 = cast(%var_6782, dtype="uint32") /* ty=Tensor[(6, 13, 9), uint32] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="uint32") /* ty=Tensor[(6, 13, 9), uint32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %663 = cast(%658, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %664 = sigmoid(%663) /* ty=Tensor[(6, 13, 9), float64] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
  %666 = cosh(%665) /* ty=Tensor[(6, 13, 9), float32] */;
  %667 = cast(%664, dtype="int8") /* ty=Tensor[(6, 13, 9), int8] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="int8") /* ty=Tensor[(6, 13, 9), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %671 = subtract(%650, %651) /* ty=Tensor[(6, 13, 9), int32] */;
  %672 = %656.6;
  %673 = left_shift(%661, %662) /* ty=Tensor[(6, 13, 9), uint32] */;
  %674 = bitwise_or(%669, %670) /* ty=Tensor[(6, 13, 9), int8] */;
  %675 = @func_4933() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%671, %672, 9.17356f64 /* ty=float64 */, %var_6796, %673, %674, %675)
}

def @func_4662() -> (Tensor[(5, 10, 13), uint32],) {
  @func_4660() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_6586(%var_6584: Tensor[(196), float32], %var_6585: Tensor[(2, 12, 110), bool]) -> (Tensor[(5, 10, 13), uint32], Tensor[(196), float32], Tensor[(2, 12, 110), float32]) {
  %687 = fn (%var_6570: Tensor[(196), float32], %var_6575: Tensor[(2, 12, 110), bool]) -> (Tensor[(5, 10, 13), uint32], Tensor[(196), float32], Tensor[(2, 12, 110), float32]) {
    %676 = @func_6540() /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(6, 16, 2), bool], Tensor[(8, 24), float64]) */;
    %677 = cast(%var_6570, dtype="float32") /* ty=Tensor[(196), float32] */;
    %678 = reshape(%677, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %679 = @func_4345(%678) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(2, 12, 110), bool], Tensor[(196), float32], Tensor[(12, 2), float64]) */;
    %680 = %679.1;
    %681 = cast(%var_6575, dtype="float32") /* ty=Tensor[(2, 12, 110), float32] */;
    %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%680, dtype="float32") /* ty=Tensor[(2, 12, 110), float32] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %685 = %676.0;
    %686 = power(%683, %684) /* ty=Tensor[(2, 12, 110), float32] */;
    (%685, %var_6570, %686)
  };
  %687(%var_6584, %var_6585) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(196), float32], Tensor[(2, 12, 110), float32]) */
}

def @func_2259(%var_2256: Tensor[(3, 1, 8), float64], %var_2257: Tensor[(3, 2, 8), float64], %var_2258: Tensor[(3, 1, 8), float64]) -> (Tensor[(3, 2, 8), uint16], Tensor[(3, 1, 8), float32], Tensor[(3, ?, 8), int16]) {
  @func_2254(%var_2256, %var_2257, %var_2258) /* ty=(Tensor[(3, 2, 8), uint16], Tensor[(3, 1, 8), float32], Tensor[(3, ?, 8), int16]) */
}

def @func_5500(%var_5499: Tensor[(2, 1, 8), int8]) -> (Tensor[(2, ?, 8), uint16],) {
  %700 = fn (%var_5481: Tensor[(2, 1, 8), int8]) -> (Tensor[(2, ?, 8), uint16],) {
    %688 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 1, 8), int8] */, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
    %689 = asinh(%688) /* ty=Tensor[(2, 1, 8), float64] */;
    %690 = cast(%var_5481, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %691 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(2, 1, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 1, 8), int8] */, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %694 = less_equal(%692, %693) /* ty=Tensor[(2, ?, 8), bool] */;
    %695 = cast(%694, dtype="uint16") /* ty=Tensor[(2, ?, 8), uint16] */;
    %696 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%689, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %699 = multiply(%697, %698) /* ty=Tensor[(2, ?, 8), uint16] */;
    (%699,)
  };
  %700(%var_5499) /* ty=(Tensor[(2, ?, 8), uint16],) */
}

def @func_6616() -> (Tensor[(5, 10, 13), uint32],) {
  %701 = @func_5253() /* ty=Tensor[(5, 10, 13), uint32] */;
  (%701,)
}

def @func_6653() -> Tensor[(5, 10, 13), uint32] {
  @func_6651() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_4417() -> (Tensor[(5, 10, 13), uint32],) {
  %703 = fn () -> (Tensor[(5, 10, 13), uint32],) {
    %702 = @func_4147() /* ty=Tensor[(5, 10, 13), uint32] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(5, 10, 13), uint32],) */
}

def @func_217(%var_192: Tensor[(110), int8]) -> (Tensor[(5, 5, 3), float64], Tensor[(5, 11, 2), float64], Tensor[(110), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), int8]) {
  %704 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
  %705 = cast(%var_192, dtype="int8") /* ty=Tensor[(110), int8] */;
  %706 = reshape(%705, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %707 = @func_173(%706) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %708 = cast(%var_192, dtype="int8") /* ty=Tensor[(110), int8] */;
  %709 = reshape(%708, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %710 = @func_173(%709) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %711 = %707.1;
  %712 = cast(%711, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %713 = reshape(%712, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %714 = @func_173(%713) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %715 = %710.0;
  %716 = cast(%715, dtype="int8") /* ty=Tensor[(5, 11, 2), int8] */;
  %717 = reshape(%716, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), int8] */;
  %718 = @func_173(%717) /* ty=(Tensor[(5, 11, 2), int8], Tensor[(5, 11, 2), float64]) */;
  %719 = acosh(%704) /* ty=Tensor[(5, 5, 3), float64] */;
  %720 = %714.0;
  %721 = %718.0;
  (%719, %711, %var_192, %715, %720, %721)
}

def @func_2013(%var_2011: float32, %var_2012: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32],) {
  %725 = fn (%var_2002: float32, %var_2003: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32],) {
    %722 = cast(%var_2002, dtype="float32") /* ty=float32 */;
    %723 = cast(%var_2003, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
    %724 = mod(%722, %723) /* ty=Tensor[(4, 4), float32] */;
    (%724,)
  };
  %725(%var_2011, %var_2012) /* ty=(Tensor[(4, 4), float32],) */
}

def @func_4486(%var_4481: Tensor[(5, 10, 13), float64], %var_4482: Tensor[(64, 2), int64], %var_4483: Tensor[(176, 2), int64], %var_4484: Tensor[(168), int32], %var_4485: Tensor[(480), uint16]) -> (Tensor[(5, 10, 13), float64], Tensor[(5, 11, 2), float64], Tensor[(176, 2), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(64, 2), int32], Tensor[(8, 12, 5), uint16], Tensor[(480), uint16]) {
  @func_4479(%var_4481, %var_4482, %var_4483, %var_4484, %var_4485) /* ty=(Tensor[(5, 10, 13), float64], Tensor[(5, 11, 2), float64], Tensor[(176, 2), int64], Tensor[(3), int32], Tensor[(168), int32], Tensor[(64, 2), int32], Tensor[(8, 12, 5), uint16], Tensor[(480), uint16]) */
}

def @func_5450() -> Tensor[(5, 10, 13), uint32] {
  @func_5448() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_1690(%var_1688: Tensor[(4, 14, 3), float64]) -> Tensor[(4, 14, 3), float64] {
  @func_1687(%var_1688) /* ty=Tensor[(4, 14, 3), float64] */
}

def @func_5254() -> Tensor[(5, 10, 13), uint32] {
  %727 = fn () -> Tensor[(5, 10, 13), uint32] {
    %726 = @func_4734() /* ty=(Tensor[(5, 10, 13), uint32],) */;
    %726.0
  };
  %727() /* ty=Tensor[(5, 10, 13), uint32] */
}

def @func_6316(%var_6314: Tensor[(8, 6, 3), int32], %var_6315: Tensor[(132), float32]) -> (Tensor[(8, 6, 3), int32], Tensor[(12, ?, 11), bool], Tensor[(132), float32]) {
  %737 = fn (%var_6288: Tensor[(8, 6, 3), int32], %var_6304: Tensor[(132), float32]) -> (Tensor[(8, 6, 3), int32], Tensor[(12, ?, 11), bool], Tensor[(132), float32]) {
    %728 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 6, 3), int32] */, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
    %729 = shape_of(%var_6288, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%var_6288, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %732 = cast(%var_6304, dtype="float32") /* ty=Tensor[(132), float32] */;
    %733 = reshape(%732, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %734 = @func_6082(%733) /* ty=(Tensor[(5, 10, 13), uint32], Tensor[(12, ?, 11), bool], Tensor[(12, 1, 11), float64], Tensor[(1, 15, 50), uint64], Tensor[(15), uint8], Tensor[(12, 1, 11), float32], Tensor[(5, 10, 13), float64]) */;
    %735 = minimum(%730, %731) /* ty=Tensor[(8, 6, 3), int32] */;
    %736 = %734.1;
    (%735, %736, %var_6304)
  };
  %737(%var_6314, %var_6315) /* ty=(Tensor[(8, 6, 3), int32], Tensor[(12, ?, 11), bool], Tensor[(132), float32]) */
}

def @func_6554() -> (Tensor[(5, 10, 13), float64],) {
  %738 = @func_5448() /* ty=Tensor[(5, 10, 13), uint32] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(5, 10, 13), float64] */;
  %740 = asin(%739) /* ty=Tensor[(5, 10, 13), float64] */;
  (%740,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen168/build/output.py:1702: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen168/build/output.py", line 1707, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cosh_kernel0(double* __restrict__ T_cosh, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1248) {
    T_cosh[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = cosh(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

