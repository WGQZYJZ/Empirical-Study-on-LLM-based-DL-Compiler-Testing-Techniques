==========mod==========
#[version = "0.0.5"]
def @func_635() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %0 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %3 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %4 = %3.0;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %6 = erf(%2) /* ty=Tensor[(8, 13, 16), float32] */;
  %7 = atanh(%5) /* ty=Tensor[(8, 13, 16), float32] */;
  (%6, %7)
}

def @func_7904(%var_7862: Tensor[(13, 1), int32], %var_7885: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
  %8 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %9 = cast(%var_7862, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
  %10 = reshape(%9, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %11 = @func_7083(%10) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */;
  %12 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %13 = cast(%var_7885, dtype="uint8") /* ty=uint8 */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 1560), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1560), uint8] */;
  %15 = reshape(%13, newshape=[]) /* ty=uint8 */;
  %16 = reshape(%14, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %17 = @func_813(%15, %16) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %18 = @func_4521() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %19 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %20 = @func_3409() /* ty=Tensor[(8, 13, 16), bool] */;
  %21 = %8.0;
  %22 = %11.3;
  %23 = %12.0;
  %24 = %17.0;
  %25 = %18.0;
  %26 = %19.1;
  (%20, %21, %22, %var_7862, %23, %24, %var_7885, meta[relay.Constant][0] /* ty=Tensor[(2, 1560), uint8] */, %25, %26)
}

def @func_752(%var_740: Tensor[(14, 6, 2), float64]) -> Tensor[(14, 6, 2), float64] {
  %27 = cast(%var_740, dtype="float64") /* ty=Tensor[(14, 6, 2), float64] */;
  log2(%27) /* ty=Tensor[(14, 6, 2), float64] */
}

def @func_3409() -> Tensor[(8, 13, 16), bool] {
  %28 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %30 = acos(%29) /* ty=Tensor[(8, 13, 16), float64] */;
  %31 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %32 = %31.2;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %34 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%30, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%35, %36) /* ty=Tensor[(8, 13, 16), bool] */
}

def @func_6889() -> Tensor[(168), float64] {
  %37 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %37.0
}

def @func_108() -> Tensor[(8, 13, 16), uint8] {
  %38 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %38.0
}

def @func_3471(%var_3445: Tensor[(8, 13, 16), int64]) -> Tensor[(8, 13, 16), float32] {
  %39 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %40 = %39.0;
  %41 = cast(%var_3445, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%43, %44) /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_2955(%var_2938: Tensor[(3120), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), uint8]) {
  %45 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %46 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %47 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %48 = cast(%var_2938, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %49 = reshape(%47, newshape=[]) /* ty=uint8 */;
  %50 = reshape(%48, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %51 = @func_813(%49, %50) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %52 = %45.0;
  %53 = %46.0;
  %54 = %51.1;
  %55 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%52, %53, %54, meta[relay.Constant][1] /* ty=uint8 */, %var_2938, %55)
}

def @func_1107() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
  %56 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %57 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %58 = %56.4;
  %59 = %57.1;
  (%58, %59)
}

def @func_8702() -> Tensor[(8, 13, 16), uint8] {
  @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_6039() -> (Tensor[(168), float64],) {
  %60 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %61 = %60.5;
  (%61,)
}

def @func_4854() -> (Tensor[(8, 13, 16), float32],) {
  %62 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
  (%62,)
}

def @func_9153() -> (Tensor[(8, 13, 16), float32],) {
  %63 = @func_4196() /* ty=Tensor[(8, 13, 16), float32] */;
  (%63,)
}

def @func_4521() -> (Tensor[(8, 13, 16), uint8],) {
  %64 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %65 = %64.0;
  (%65,)
}

def @func_7601(%var_7589: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) {
  %66 = @func_7485() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %67 = cast(%var_7589, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %68 = cast(%var_7589, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %69 = cast(meta[relay.Constant][2] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %70 = reshape(%67, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %71 = reshape(%68, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %72 = reshape(%69, newshape=[]) /* ty=uint8 */;
  %73 = @func_2112(%70, %71, %72) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %74 = cast(meta[relay.Constant][3] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %75 = reshape(%74, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %76 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %77 = %66.0;
  %78 = %73.0;
  %79 = @func_5410(%75) /* ty=Tensor[(9, 11, 2), int16] */;
  (%76, %77, %78, %var_7589, meta[relay.Constant][2] /* ty=uint8 */, %79, meta[relay.Constant][3] /* ty=Tensor[(198), float64] */)
}

def @func_9810(%var_9785: Tensor[(840, 2), uint8], %var_9789: Tensor[(7, 3, 11), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(840, 2), uint8], Tensor[(7, 3, 11), bool], Tensor[(8, 13, 16), float32]) {
  %80 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %81 = cast(%var_9785, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %82 = reshape(%81, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
  %83 = @func_7601(%82) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) */;
  %84 = %83.4;
  %85 = cast(%84, dtype="bool") /* ty=bool */;
  %86 = cast(%var_9789, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %87 = %80.2;
  %88 = greater_equal(%85, %86) /* ty=Tensor[(7, 3, 11), bool] */;
  %89 = @func_9668() /* ty=Tensor[(8, 13, 16), float32] */;
  (%87, %var_9785, %88, %89)
}

def @func_848(%var_830: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) {
  %90 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %91 = %90.0;
  %92 = cast(%var_830, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %97 = reshape(%96, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %98 = @func_578(%97) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %100 = reshape(%99, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %101 = @func_578(%100) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %102 = equal(%94, %95) /* ty=Tensor[(8, 13, 16), bool] */;
  %103 = %98.1;
  %104 = %101.2;
  (%102, %103, meta[relay.Constant][4] /* ty=Tensor[(378), uint64] */, %104)
}

def @func_3136() -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %105 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %106 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %107 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %108 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %109 = %105.0;
  %110 = %106.5;
  %111 = %107.1;
  %112 = %108.2;
  (%109, %110, %111, %112)
}

def @func_6006() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) {
  %113 = @func_4196() /* ty=Tensor[(8, 13, 16), float32] */;
  %114 = cast(%113, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %115 = reshape(%114, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %116 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %117 = @func_1264(%115) /* ty=Tensor[(8, 13, 16), uint64] */;
  %118 = %116.0;
  (%113, %117, %118)
}

def @func_4747() -> Tensor[(9, 11, 2), float64] {
  %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
  atan(%119) /* ty=Tensor[(9, 11, 2), float64] */
}

def @func_1947() -> (Tensor[(9, 14, 3), uint32], Tensor[(8, 13, 16), uint8]) {
  %120 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %121 = %120.2;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %123 = cos(%122) /* ty=Tensor[(9, 14, 3), float64] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %125 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%121, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %128 = divide(%126, %127) /* ty=Tensor[(9, 14, 3), float64] */;
  %129 = cast(%123, dtype="uint32") /* ty=Tensor[(9, 14, 3), uint32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="uint32") /* ty=Tensor[(9, 14, 3), uint32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %133 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %134 = left_shift(%131, %132) /* ty=Tensor[(9, 14, 3), uint32] */;
  %135 = %133.0;
  (%134, %135)
}

def @func_3938(%var_3921: Tensor[(3, 8, 14), float32], %var_3922: Tensor[(3, 8, 14), float32]) -> Tensor[(3, 8, 14), float32] {
  %136 = cast(%var_3922, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %137 = shape_of(%var_3921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%var_3921, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%138, %139) /* ty=Tensor[(3, 8, 14), float32] */
}

def @func_6371() -> (Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %140 = @func_5167() /* ty=(Tensor[(168), float64],) */;
  %141 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %142 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
  %143 = %140.0;
  %144 = %141.1;
  %145 = %142.1;
  (%143, %144, %145)
}

def @func_4196() -> Tensor[(8, 13, 16), float32] {
  @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_2377(%var_2346: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) {
  %146 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
  %147 = cast(%var_2346, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %151 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %152 = divide(%149, %150) /* ty=Tensor[(8, 13, 16), float64] */;
  %153 = %151.2;
  (%152, %153)
}

def @func_2902() -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
  %154 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  %155 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  (%154, %155)
}

def @func_1501() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) {
  %156 = cast(meta[relay.Constant][6] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %157 = reshape(%156, newshape=[6, 63]) /* ty=Tensor[(6, 63), uint64] */;
  %158 = @func_487(%157) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */;
  %159 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %160 = %159.0;
  %161 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(8, 13, 16), int8] */;
  %163 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%160, dtype="int8") /* ty=Tensor[(8, 13, 16), int8] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %166 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %167 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %168 = %158.0;
  %169 = add(%164, %165) /* ty=Tensor[(8, 13, 16), int8] */;
  %170 = %166.0;
  (%167, %168, meta[relay.Constant][6] /* ty=Tensor[(378), uint64] */, %169, %170)
}

def @func_4067(%var_4019: uint8) -> (Tensor[(8, 13, 16), float32], uint8, uint8, Tensor[(8, 13, 16), bool], Tensor[(840, 2), int32], Tensor[(8, 13, 16), float32]) {
  %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(840, 2), uint8] */, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(840, 2), uint8] */, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %173 = cast(%var_4019, dtype="uint8") /* ty=uint8 */;
  %174 = reshape(%171, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %175 = reshape(%172, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %176 = reshape(%173, newshape=[]) /* ty=uint8 */;
  %177 = @func_2112(%174, %175, %176) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %178 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %179 = cast(meta[relay.Constant][7] /* ty=Tensor[(840, 2), uint8] */, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %180 = atan(%179) /* ty=Tensor[(840, 2), float64] */;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %182 = sin(%181) /* ty=Tensor[(840, 2), float64] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(840, 2), int32] */;
  %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(2), int32] */;
  %185 = cast(%180, dtype="int32") /* ty=Tensor[(840, 2), int32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %187 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
  %188 = %177.1;
  %189 = %178.0;
  %190 = bitwise_or(%185, %186) /* ty=Tensor[(840, 2), int32] */;
  %191 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
  (%187, %188, %var_4019, %189, %190, %191)
}

def @func_7276() -> Tensor[(8, 13, 16), uint8] {
  %192 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %192.4
}

def @func_8966(%var_8949: Tensor[(16, 8, 11), int8], %var_8956: Tensor[(1664), uint8]) -> (Tensor[(16, 8, 11), bool], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
  %193 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 8, 11), int8] */, dtype="bool") /* ty=Tensor[(16, 8, 11), bool] */;
  %194 = shape_of(%var_8949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_8949, dtype="bool") /* ty=Tensor[(16, 8, 11), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = cast(%var_8956, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
  %198 = reshape(%197, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %199 = @func_200(%198) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %200 = greater_equal(%195, %196) /* ty=Tensor[(16, 8, 11), bool] */;
  %201 = %199.2;
  (%200, %201, %var_8956)
}

def @func_9675() -> (Tensor[(9, 11, 2), float64],) {
  %202 = @func_4747() /* ty=Tensor[(9, 11, 2), float64] */;
  (%202,)
}

def @func_5638(%var_5594: Tensor[(6, 28), float64], %var_5595: Tensor[(1680), uint8], %var_5631: Tensor[(6, 28), float64]) -> (Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(1680), uint8], Tensor[(6, 28), float32]) {
  %203 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %204 = cast(%var_5594, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
  %205 = cast(%var_5595, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %206 = reshape(%204, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %207 = reshape(%205, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %208 = @func_4258(%206, %207) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) */;
  %209 = cast(%var_5631, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %210 = shape_of(%var_5594, dtype="int32") /* ty=Tensor[(2), int32] */;
  %211 = cast(%var_5594, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %213 = %203.0;
  %214 = %208.1;
  %215 = minimum(%211, %212) /* ty=Tensor[(6, 28), float32] */;
  (%213, %214, %var_5595, %215)
}

def @func_2912() -> Tensor[(8, 13, 16), float32] {
  %216 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %216.0
}

def @func_2785() -> (Tensor[(8, 13, 16), uint8],) {
  %217 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%217,)
}

def @func_6475(%var_6470: Tensor[(11, 3, 8), int16]) -> Tensor[(11, 3, 8), bool] {
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 3, 8), int16] */, dtype="bool") /* ty=Tensor[(11, 3, 8), bool] */;
  %219 = shape_of(%var_6470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_6470, dtype="bool") /* ty=Tensor[(11, 3, 8), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%220, %221) /* ty=Tensor[(11, 3, 8), bool] */
}

def @func_4493() -> (Tensor[(8, 13, 16), uint8],) {
  %222 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%222,)
}

def @func_4538() -> (Tensor[(8, 13, 16), float32],) {
  %223 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %224 = %223.0;
  (%224,)
}

def @func_1396() -> Tensor[(8, 13, 16), float32] {
  %225 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %225.1
}

def @func_2523() -> (Tensor[(8, 13, 16), bool],) {
  %226 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %227 = %226.1;
  %228 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
  %229 = %228.2;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %231 = log2(%230) /* ty=Tensor[(8, 13, 16), float64] */;
  %232 = cast(%231, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %233 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%227, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = logical_and(%234, %235) /* ty=Tensor[(8, 13, 16), bool] */;
  (%236,)
}

def @func_9210() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
  %237 = @func_9052() /* ty=Tensor[(14, 6, 2), float64] */;
  %238 = @func_8702() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%237, %238)
}

def @func_1682() -> (Tensor[(8, 13, 16), int64],) {
  %239 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %240 = %239.1;
  (%240,)
}

def @func_2112(%var_2052: Tensor[(14, 12, 10), uint8], %var_2053: Tensor[(14, 12, 10), uint8], %var_2058: uint8) -> (Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) {
  %241 = cast(%var_2058, dtype="uint8") /* ty=uint8 */;
  %242 = cast(meta[relay.Constant][10] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %243 = reshape(%241, newshape=[]) /* ty=uint8 */;
  %244 = reshape(%242, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %245 = @func_813(%243, %244) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %246 = cast(%var_2053, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
  %247 = shape_of(%var_2052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_2052, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %250 = bitwise_or(%248, %249) /* ty=Tensor[(14, 12, 10), uint8] */;
  %251 = cast(%250, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
  %252 = shape_of(%var_2053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%var_2053, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %255 = %245.1;
  %256 = subtract(%253, %254) /* ty=Tensor[(14, 12, 10), uint8] */;
  (%255, %var_2058, meta[relay.Constant][10] /* ty=Tensor[(3120), uint8] */, %256)
}

def @func_5571() -> (Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %257 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %258 = cast(meta[relay.Constant][12] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %259 = reshape(%257, newshape=[]) /* ty=uint8 */;
  %260 = reshape(%258, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %261 = @func_813(%259, %260) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %262 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %263 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %266 = reshape(%265, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %267 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  %268 = %261.0;
  %269 = %262.0;
  %270 = @func_3471(%266) /* ty=Tensor[(8, 13, 16), float32] */;
  (%267, %268, meta[relay.Constant][11] /* ty=uint8 */, meta[relay.Constant][12] /* ty=Tensor[(3120), uint8] */, %269, %264, %270)
}

def @func_8921() -> Tensor[(8, 13, 16), uint8] {
  %271 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %271.1
}

def @func_4328() -> (Tensor[(8, 13, 16), uint8],) {
  %272 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%272,)
}

def @func_9082(%var_9070: Tensor[(10, 2, 3), bool]) -> Tensor[(10, 2, 3), bool] {
  %273 = cast(%var_9070, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %274 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 3), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%275, %276) /* ty=Tensor[(10, 2, 3), bool] */
}

def @func_6444(%var_6435: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) {
  %277 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %278 = @func_4294() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %281 = reshape(%280, newshape=[1664]) /* ty=Tensor[(1664), uint8] */;
  %282 = @func_3500(%281) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) */;
  %283 = cast(%var_6435, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %284 = reshape(%283, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
  %285 = @func_5495(%284) /* ty=(Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) */;
  %286 = @func_4538() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %287 = %277.0;
  %288 = %282.0;
  %289 = %285.3;
  %290 = %286.0;
  (%287, %279, %288, %289, %var_6435, %290)
}

def @func_8011(%var_7982: Tensor[(7, 15, 14), float32], %var_7983: Tensor[(7, 15, 14), float32]) -> (Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) {
  %291 = cast(%var_7983, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %292 = shape_of(%var_7982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_7982, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %295 = @func_6006() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) */;
  %296 = divide(%293, %294) /* ty=Tensor[(7, 15, 14), float32] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_9116() -> (Tensor[(8, 13, 16), float32],) {
  %298 = @func_2439() /* ty=Tensor[(8, 13, 16), float32] */;
  (%298,)
}

def @func_8113() -> Tensor[(8, 13, 16), uint8] {
  %299 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %299.0
}

def @func_4712(%var_4686: Tensor[(84, 20), uint8], %var_4687: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) {
  %300 = cast(%var_4686, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %301 = cast(%var_4686, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %302 = cast(%var_4687, dtype="uint8") /* ty=uint8 */;
  %303 = reshape(%300, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %304 = reshape(%301, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %305 = reshape(%302, newshape=[]) /* ty=uint8 */;
  %306 = @func_2112(%303, %304, %305) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %307 = %306.3;
  %308 = cast(%var_4686, dtype="int16") /* ty=Tensor[(84, 20), int16] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="int16") /* ty=Tensor[(14, 12, 10), int16] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %312 = cast(%var_4686, dtype="int16") /* ty=Tensor[(84, 20), int16] */;
  %313 = cast(%var_4687, dtype="int16") /* ty=int16 */;
  %314 = @func_3409() /* ty=Tensor[(8, 13, 16), bool] */;
  %315 = right_shift(%310, %311) /* ty=Tensor[(14, 12, 10), int16] */;
  %316 = @func_2439() /* ty=Tensor[(8, 13, 16), float32] */;
  %317 = add(%312, %313) /* ty=Tensor[(84, 20), int16] */;
  (%314, %315, %316, %317)
}

def @func_3715() -> (Tensor[(8, 13, 16), float64],) {
  %318 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %319 = %318.3;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %321 = atan(%320) /* ty=Tensor[(8, 13, 16), float64] */;
  (%321,)
}

def @func_8654(%var_8642: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 14), float32], Tensor[(1470), bool]) {
  %322 = @func_3972() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %323 = cast(%var_8642, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %324 = cast(%var_8642, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %325 = reshape(%323, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %326 = reshape(%324, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %327 = @func_8011(%325, %326) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) */;
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(1470), float32] */, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %329 = shape_of(%var_8642, dtype="int32") /* ty=Tensor[(1), int32] */;
  %330 = cast(%var_8642, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?), bool] */;
  %332 = %322.0;
  %333 = %327.0;
  %334 = logical_and(%330, %331) /* ty=Tensor[(1470), bool] */;
  (%332, %333, %334)
}

def @func_2534(%var_2529: Tensor[(1, 13), int32], %var_2530: Tensor[(1, 13), int32]) -> Tensor[(?, 13), int32] {
  %335 = cast(%var_2530, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %336 = shape_of(%var_2529, dtype="int32") /* ty=Tensor[(2), int32] */;
  %337 = cast(%var_2529, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  right_shift(%337, %338) /* ty=Tensor[(?, 13), int32] */
}

def @func_9851() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint64], Tensor[(9, 11, 2), float64]) {
  %339 = @func_4374() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) */;
  %340 = %339.0;
  %341 = cast(%340, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %342 = reshape(%341, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %343 = @func_9675() /* ty=(Tensor[(9, 11, 2), float64],) */;
  %344 = @func_1264(%342) /* ty=Tensor[(8, 13, 16), uint64] */;
  %345 = %343.0;
  (%340, %344, %345)
}

def @func_3207(%var_3180: Tensor[(3, 4, 2), float64], %var_3181: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), float64], Tensor[(3, 4, 2), int64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
  %346 = cast(%var_3181, dtype="float64") /* ty=Tensor[(3, 4, 2), float64] */;
  %347 = shape_of(%var_3180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_3180, dtype="float64") /* ty=Tensor[(3, 4, 2), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %350 = cast(%var_3180, dtype="int64") /* ty=Tensor[(3, 4, 2), int64] */;
  %351 = shape_of(%var_3181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_3181, dtype="int64") /* ty=Tensor[(3, 4, 2), int64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %354 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %355 = floor_divide(%348, %349) /* ty=Tensor[(3, 4, 2), float64] */;
  %356 = right_shift(%352, %353) /* ty=Tensor[(3, 4, 2), int64] */;
  %357 = @func_2340() /* ty=Tensor[(8, 13, 16), float32] */;
  %358 = %354.0;
  (%355, %356, %357, %358)
}

def @func_8884() -> (Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) {
  %359 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
  %360 = %359.2;
  %361 = cast(%360, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %362 = reshape(%361, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %363 = @func_578(%362) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %364 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %365 = %363.4;
  (%360, %364, %365)
}

def @func_200(%var_177: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
  %366 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %367 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %368 = %367.0;
  %369 = cast(%368, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %370 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%366, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %373 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %374 = cast(%var_177, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %375 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%368, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %378 = floor_divide(%376, %377) /* ty=Tensor[(8, 13, 16), float32] */;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %380 = shape_of(%var_177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_177, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %383 = right_shift(%371, %372) /* ty=Tensor[(8, 13, 16), int64] */;
  %384 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %385 = %373.0;
  %386 = minimum(%381, %382) /* ty=Tensor[(8, 13, 16), float64] */;
  (%383, %384, %385, %386)
}

def @func_1016() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  %387 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %388 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %389 = %388.1;
  %390 = cast(%389, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %391 = reshape(%390, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %392 = @func_848(%391) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %393 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %394 = cast(%389, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %395 = cast(meta[relay.Constant][15] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %396 = reshape(%395, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
  %397 = %387.1;
  %398 = %392.3;
  %399 = %393.0;
  %400 = sigmoid(%394) /* ty=Tensor[(8, 13, 16), float32] */;
  %401 = @func_752(%396) /* ty=Tensor[(14, 6, 2), float64] */;
  (%397, %398, %399, %400, %401, meta[relay.Constant][15] /* ty=Tensor[(168), float64] */)
}

def @func_7972(%var_7959: Tensor[(14, 14, 4), uint16], %var_7960: Tensor[(14, 14, 4), uint16]) -> (Tensor[(14, 14, 4), uint16],) {
  %402 = cast(%var_7960, dtype="uint16") /* ty=Tensor[(14, 14, 4), uint16] */;
  %403 = shape_of(%var_7959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_7959, dtype="uint16") /* ty=Tensor[(14, 14, 4), uint16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %406 = bitwise_xor(%404, %405) /* ty=Tensor[(14, 14, 4), uint16] */;
  (%406,)
}

def @func_2135() -> (Tensor[(8, 13, 16), uint8],) {
  %407 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %408 = %407.0;
  (%408,)
}

def @func_8516() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64]) {
  %409 = @func_7543() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */;
  %410 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %411 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
  %412 = %409.1;
  %413 = %410.0;
  %414 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  (%411, %412, %413, %414)
}

def @func_7543() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
  %415 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %416 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
  %417 = %415.1;
  %418 = %416.2;
  (%417, %418)
}

def @func_720() -> (Tensor[(8, 13, 16), float32],) {
  %419 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %420 = %419.1;
  (%420,)
}

def @func_9052() -> Tensor[(14, 6, 2), float64] {
  %421 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %421.0
}

def @func_3800() -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  %422 = @func_2697() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 4), uint8] */, dtype="uint8") /* ty=Tensor[(420, 4), uint8] */;
  %424 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 4), uint8] */, dtype="uint8") /* ty=Tensor[(420, 4), uint8] */;
  %425 = cast(meta[relay.Constant][17] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %426 = reshape(%423, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %427 = reshape(%424, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %428 = reshape(%425, newshape=[]) /* ty=uint8 */;
  %429 = @func_2112(%426, %427, %428) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %430 = cast(meta[relay.Constant][18] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %431 = reshape(%430, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
  %432 = %422.1;
  %433 = %429.3;
  %434 = @func_752(%431) /* ty=Tensor[(14, 6, 2), float64] */;
  (%432, %433, meta[relay.Constant][16] /* ty=Tensor[(420, 4), uint8] */, meta[relay.Constant][17] /* ty=uint8 */, %434, meta[relay.Constant][18] /* ty=Tensor[(168), float64] */)
}

def @func_5670() -> (Tensor[(8, 13, 16), float32],) {
  %435 = @func_4374() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) */;
  %436 = %435.1;
  (%436,)
}

def @func_9668() -> Tensor[(8, 13, 16), float32] {
  @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5093() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) {
  %437 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %439 = reshape(%438, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %440 = @func_578(%439) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %441 = %437.0;
  %442 = %440.3;
  (%441, %442, meta[relay.Constant][19] /* ty=Tensor[(378), uint64] */)
}

def @func_49() -> (Tensor[(8, 13, 16), uint8],) {
  %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %444 = cos(%443) /* ty=Tensor[(8, 13, 16), float64] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %446 = exp(%445) /* ty=Tensor[(8, 13, 16), float32] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %448 = tan(%447) /* ty=Tensor[(8, 13, 16), float32] */;
  %449 = cast(%448, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %450 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%446, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %453 = logical_xor(%451, %452) /* ty=Tensor[(8, 13, 16), uint8] */;
  (%453,)
}

def @func_4399() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
  %454 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %455 = %454.2;
  %456 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
  %457 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%455, %456, %457)
}

def @func_9616() -> Tensor[(168), float64] {
  %458 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
  %458.0
}

def @func_6193(%var_6183: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8]) {
  %459 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %460 = @func_5363() /* ty=(Tensor[(168), float64],) */;
  %461 = @func_5138() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */;
  %462 = @func_2697() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %463 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %464 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %465 = cast(%var_6183, dtype="uint8") /* ty=uint8 */;
  %466 = cast(meta[relay.Constant][21] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %467 = reshape(%465, newshape=[]) /* ty=uint8 */;
  %468 = reshape(%466, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %469 = @func_813(%467, %468) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %470 = %459.0;
  %471 = %460.0;
  %472 = %461.0;
  %473 = %462.1;
  %474 = %463.0;
  %475 = %464.0;
  %476 = %469.1;
  (%470, %471, %472, %473, %474, %475, %476, %var_6183, meta[relay.Constant][21] /* ty=Tensor[(3120), uint8] */)
}

def @func_8342(%var_8305: uint8, %var_8306: Tensor[(6, 6, 7), uint8]) -> (Tensor[(6, 6, 7), uint8], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), int64]) {
  %477 = cast(%var_8305, dtype="uint8") /* ty=uint8 */;
  %478 = cast(%var_8306, dtype="uint8") /* ty=Tensor[(6, 6, 7), uint8] */;
  %479 = cast(meta[relay.Constant][22] /* ty=Tensor[(1680), uint8] */, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %480 = reshape(%479, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
  %481 = @func_5495(%480) /* ty=(Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) */;
  %482 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %483 = subtract(%477, %478) /* ty=Tensor[(6, 6, 7), uint8] */;
  %484 = %481.3;
  %485 = %482.0;
  (%483, %484, meta[relay.Constant][22] /* ty=Tensor[(1680), uint8] */, %485)
}

def @func_1296(%var_1276: Tensor[(14, 5, 13), float64]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) {
  %486 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %487 = shape_of(%var_1276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_1276, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %490 = floor_divide(%488, %489) /* ty=Tensor[(14, 5, 13), float64] */;
  %491 = cast(%490, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
  %492 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 5, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = cast(%490, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %496 = less_equal(%493, %494) /* ty=Tensor[(14, 5, 13), bool] */;
  %497 = log(%495) /* ty=Tensor[(14, 5, 13), float32] */;
  (%496, %497)
}

def @func_7631(%var_7606: Tensor[(9, 13, 1), float32], %var_7627: Tensor[(10), uint64]) -> (Tensor[(9, 13, 1), float32], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
  %498 = cast(%var_7606, dtype="float32") /* ty=Tensor[(9, 13, 1), float32] */;
  %499 = cast(%var_7627, dtype="uint64") /* ty=Tensor[(10), uint64] */;
  %500 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %501 = reshape(%499, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
  %502 = reshape(%500, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint64] */;
  %503 = @func_6999(%501, %502) /* ty=(Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) */;
  %504 = acosh(%498) /* ty=Tensor[(9, 13, 1), float32] */;
  %505 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
  %506 = %503.1;
  (%504, %505, %506, %var_7627, meta[relay.Constant][24] /* ty=Tensor[(120), uint64] */)
}

def @func_3638(%var_3632: Tensor[(3, 10, 13), float64]) -> (Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) {
  %507 = cast(%var_3632, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %508 = log2(%507) /* ty=Tensor[(3, 10, 13), float64] */;
  %509 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%508, %509)
}

def @func_3608() -> Tensor[(8, 13, 16), float32] {
  @func_2439() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_4294() -> (Tensor[(8, 13, 16), float64],) {
  %510 = @func_3715() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %511 = %510.0;
  (%511,)
}

def @func_5243() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %512 = @func_3728() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
  %513 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %516 = reshape(%515, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %517 = @func_2377(%516) /* ty=(Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) */;
  %518 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
  %519 = @func_3136() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %520 = %512.1;
  %521 = %517.0;
  %522 = %518.1;
  %523 = %519.2;
  (%520, %514, %521, %522, %523)
}

def @func_248(%var_238: Tensor[(9, 14, 3), uint64], %var_239: Tensor[(9, 14, 3), uint64]) -> Tensor[(9, 14, 3), bool] {
  %524 = cast(%var_239, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %525 = shape_of(%var_238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_238, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%526, %527) /* ty=Tensor[(9, 14, 3), bool] */
}

def @func_2697() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  %528 = @func_1067() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %529 = @func_2473() /* ty=Tensor[(8, 13, 16), uint8] */;
  %530 = %528.2;
  (%529, %530)
}

def @func_2574() -> Tensor[(14, 6, 2), float64] {
  %531 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
  %531.0
}

def @func_3500(%var_3484: Tensor[(1664), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
  %532 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %533 = cast(%var_3484, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
  %534 = reshape(%533, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %535 = @func_200(%534) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %536 = %532.1;
  %537 = %535.2;
  (%536, %537, %var_3484)
}

def @func_7401(%var_7348: Tensor[(8, 1, 1), float32], %var_7374: Tensor[(1664), uint8], %var_7392: Tensor[(224, 1), float64], %var_7394: Tensor[(8, 16, 1), float32]) -> (Tensor[(8, 13, 16), uint64], Tensor[(1664), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378, 1), uint64], Tensor[(1, 16, 14), float64], Tensor[(224, 1), float64], Tensor[(8, 16, 1), float64], Tensor[(8, 13, 16), float32]) {
  %538 = cast(%var_7374, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
  %539 = reshape(%538, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %540 = cast(meta[relay.Constant][25] /* ty=Tensor[(378, 1), uint64] */, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
  %541 = reshape(%540, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %542 = @func_578(%541) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %543 = cast(%var_7392, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %544 = reshape(%543, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float64] */;
  %545 = cast(%var_7348, dtype="float32") /* ty=Tensor[(8, 1, 1), float32] */;
  %546 = asin(%545) /* ty=Tensor[(8, 1, 1), float32] */;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
  %548 = cast(%var_7394, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
  %549 = @func_4538() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %550 = @func_1264(%539) /* ty=Tensor[(8, 13, 16), uint64] */;
  %551 = %542.1;
  %552 = @func_883(%544) /* ty=Tensor[(1, 16, 14), float64] */;
  %553 = power(%547, %548) /* ty=Tensor[(8, 16, 1), float64] */;
  %554 = %549.0;
  (%550, %var_7374, %551, meta[relay.Constant][25] /* ty=Tensor[(378, 1), uint64] */, %552, %var_7392, %553, %554)
}

def @func_883(%var_869: Tensor[(1, 16, 14), float64]) -> Tensor[(1, 16, 14), float64] {
  %555 = cast(%var_869, dtype="float64") /* ty=Tensor[(1, 16, 14), float64] */;
  sigmoid(%555) /* ty=Tensor[(1, 16, 14), float64] */
}

def @func_7171() -> (Tensor[(8, 13, 16), bool],) {
  %556 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %557 = %556.0;
  (%557,)
}

def @func_3620() -> Tensor[(8, 13, 16), float32] {
  @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_8558() -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8]) {
  %558 = @func_1067() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %559 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %560 = %558.2;
  %561 = %559.0;
  (%560, %561)
}

def @func_4984() -> (Tensor[(8, 13, 16), float64],) {
  %562 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %563 = %562.1;
  (%563,)
}

def @func_5167() -> (Tensor[(168), float64],) {
  %564 = @func_2201() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) */;
  %565 = %564.0;
  (%565,)
}

def @func_3352(%var_3341: Tensor[(12, 140), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(3120), uint8], uint8, Tensor[(12, 140), float64], Tensor[(8, 13, 16), float32], Tensor[(12, 140), bool]) {
  %566 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 140), uint8] */, dtype="uint8") /* ty=Tensor[(12, 140), uint8] */;
  %568 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 140), uint8] */, dtype="uint8") /* ty=Tensor[(12, 140), uint8] */;
  %569 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %570 = reshape(%567, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %571 = reshape(%568, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %572 = reshape(%569, newshape=[]) /* ty=uint8 */;
  %573 = @func_2112(%570, %571, %572) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %574 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 140), uint8] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %575 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %576 = cast(%var_3341, dtype="bool") /* ty=Tensor[(12, 140), bool] */;
  %577 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 140), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 140), uint8] */, dtype="bool") /* ty=Tensor[(12, 140), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %580 = %566.0;
  %581 = %573.2;
  %582 = sigmoid(%574) /* ty=Tensor[(12, 140), float64] */;
  %583 = %575.1;
  %584 = less(%578, %579) /* ty=Tensor[(12, 140), bool] */;
  (%580, %581, meta[relay.Constant][27] /* ty=uint8 */, %582, %583, %584)
}

def @func_7824() -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %585 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %586 = @func_4328() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %587 = cast(meta[relay.Constant][28] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %588 = cast(meta[relay.Constant][28] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %589 = reshape(%587, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %590 = reshape(%588, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %591 = %585.1;
  %592 = %586.0;
  %593 = @func_248(%589, %590) /* ty=Tensor[(9, 14, 3), bool] */;
  (%591, %592, %593, meta[relay.Constant][28] /* ty=Tensor[(378), uint64] */)
}

def @func_2290() -> (Tensor[(8, 13, 16), bool], Tensor[(378), float64]) {
  %594 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %595 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %596 = %595.2;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(378), float64] */;
  %598 = %594.1;
  %599 = sigmoid(%597) /* ty=Tensor[(378), float64] */;
  (%598, %599)
}

def @func_487(%var_472: Tensor[(6, 63), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
  %600 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %601 = cast(%var_472, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
  %602 = cast(%var_472, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
  %603 = reshape(%601, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %604 = reshape(%602, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %605 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %606 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %607 = %600.0;
  %608 = @func_248(%603, %604) /* ty=Tensor[(9, 14, 3), bool] */;
  %609 = %605.1;
  %610 = %606.0;
  (%607, %608, %var_472, %609, %610)
}

def @func_3572(%var_3558: Tensor[(7, 2, 5), bool]) -> (Tensor[(7, 2, 5), bool],) {
  %611 = cast(%var_3558, dtype="bool") /* ty=Tensor[(7, 2, 5), bool] */;
  %612 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(7, 2, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 2, 5), bool] */, dtype="bool") /* ty=Tensor[(7, 2, 5), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = logical_or(%613, %614) /* ty=Tensor[(7, 2, 5), bool] */;
  (%615,)
}

def @func_2016() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
  %616 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
  %617 = cast(%616, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %618 = reshape(%617, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %619 = @func_848(%618) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %620 = %619.0;
  (%616, %620)
}

def @func_6858() -> Tensor[(8, 13, 16), int8] {
  %621 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %621.3
}

def @func_7717() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) {
  %622 = @func_6253() /* ty=(Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %623 = cast(meta[relay.Constant][30] /* ty=Tensor[(1664), uint8] */, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
  %624 = reshape(%623, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %625 = @func_4899(%624) /* ty=(Tensor[(8, 13, 16), float64],) */;
  %626 = @func_7504() /* ty=(Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %629 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1664), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %630 = cast(meta[relay.Constant][30] /* ty=Tensor[(1664), uint8] */, dtype="bool") /* ty=Tensor[(1664), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?), bool] */;
  %632 = cast(meta[relay.Constant][30] /* ty=Tensor[(1664), uint8] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %633 = %622.1;
  %634 = %625.0;
  %635 = not_equal(%630, %631) /* ty=Tensor[(1664), bool] */;
  %636 = cosh(%632) /* ty=Tensor[(1664), float64] */;
  (%633, %634, %635, %636)
}

def @main() -> (Tensor[(8, 4, 14), int32],) {
  %637 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %638 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %641 = bitwise_and(%639, %640) /* ty=Tensor[(8, 4, 14), int32] */;
  (%641,)
}

def @func_7018() -> (Tensor[(168), float64],) {
  %642 = @func_6889() /* ty=Tensor[(168), float64] */;
  (%642,)
}

def @func_7342() -> (Tensor[(8, 13, 16), uint8],) {
  %643 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %644 = %643.0;
  (%644,)
}

def @func_316() -> (Tensor[(8, 13, 16), uint8],) {
  %645 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%645,)
}

def @func_1622() -> Tensor[(8, 13, 16), uint8] {
  %646 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %646.0
}

def @func_2473() -> Tensor[(8, 13, 16), uint8] {
  %647 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %647.0
}

def @func_6938() -> (Tensor[(8, 13, 16), uint8],) {
  %648 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%648,)
}

def @func_578(%var_573: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %649 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %650 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %651 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %652 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %655 = cast(%var_573, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %656 = cast(%var_573, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %657 = reshape(%655, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %658 = reshape(%656, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %659 = %649.1;
  %660 = %650.0;
  %661 = %651.0;
  %662 = sqrt(%654) /* ty=Tensor[(8, 13, 16), float32] */;
  %663 = @func_248(%657, %658) /* ty=Tensor[(9, 14, 3), bool] */;
  (%659, %660, %661, %662, %663, %var_573)
}

def @func_9405() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64]) {
  %664 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
  %665 = @func_7504() /* ty=(Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %666 = %664.1;
  %667 = %665.0;
  (%666, %667)
}

def @func_1264(%var_1251: Tensor[(8, 13, 16), uint8]) -> Tensor[(8, 13, 16), uint64] {
  %668 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %669 = %668.0;
  %670 = cast(%var_1251, dtype="uint64") /* ty=Tensor[(8, 13, 16), uint64] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="uint64") /* ty=Tensor[(8, 13, 16), uint64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%672, %673) /* ty=Tensor[(8, 13, 16), uint64] */
}

def @func_9919(%var_9915: Tensor[(5, 8, 8), float64]) -> Tensor[(5, 8, 8), float64] {
  %674 = cast(%var_9915, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
  acos(%674) /* ty=Tensor[(5, 8, 8), float64] */
}

def @func_6791(%var_6717: Tensor[(6, 63), uint64], %var_6726: Tensor[(6, 63), uint64], %var_6757: Tensor[(6, 63), float64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(336), float32], Tensor[(198), float64], Tensor[(336), float32], uint8, Tensor[(6, 63), float32], Tensor[(6, 63), float32]) {
  %675 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %676 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %677 = cast(%var_6717, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
  %678 = reshape(%677, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %679 = @func_578(%678) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %680 = @func_3136() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %681 = cast(meta[relay.Constant][33] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %682 = cast(meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %683 = cast(meta[relay.Constant][35] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %684 = reshape(%681, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %685 = reshape(%682, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %686 = reshape(%683, newshape=[]) /* ty=uint8 */;
  %687 = @func_5880(%684, %685, %686) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) */;
  %688 = cast(%var_6717, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %689 = exp(%688) /* ty=Tensor[(6, 63), float32] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %691 = sin(%690) /* ty=Tensor[(6, 63), float32] */;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %693 = cast(%var_6726, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
  %694 = shape_of(%var_6717, dtype="int32") /* ty=Tensor[(2), int32] */;
  %695 = cast(%var_6717, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %697 = mod(%695, %696) /* ty=Tensor[(6, 63), float64] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
  %699 = erf(%698) /* ty=Tensor[(6, 63), float64] */;
  %700 = cast(%var_6757, dtype="int16") /* ty=Tensor[(6, 63), int16] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(2), int32] */;
  %702 = cast(%699, dtype="int16") /* ty=Tensor[(6, 63), int16] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %704 = logical_xor(%702, %703) /* ty=Tensor[(6, 63), int16] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %706 = shape_of(%691, dtype="int32") /* ty=Tensor[(2), int32] */;
  %707 = cast(%691, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %709 = %675.0;
  %710 = %676.0;
  %711 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
  %712 = %679.3;
  %713 = %680.1;
  %714 = %687.5;
  %715 = sinh(%692) /* ty=Tensor[(6, 63), float32] */;
  %716 = subtract(%707, %708) /* ty=Tensor[(6, 63), float32] */;
  (%709, %710, %711, %712, %713, %714, meta[relay.Constant][33] /* ty=Tensor[(198), float64] */, meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, meta[relay.Constant][35] /* ty=uint8 */, %715, %716)
}

def @func_7916(%var_7914: uint8) -> (Tensor[(14, 6, 2), float64], uint8, Tensor[(1, 13), int32], uint8) {
  %717 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %718 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %719 = cast(%var_7914, dtype="uint8") /* ty=uint8 */;
  %720 = reshape(%718, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %721 = reshape(%719, newshape=[]) /* ty=uint8 */;
  %722 = @func_7904(%720, %721) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %723 = %717.1;
  %724 = %722.6;
  (%723, %724, meta[relay.Constant][36] /* ty=Tensor[(1, 13), int32] */, %var_7914)
}

def @func_3728() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
  %725 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %726 = %725.0;
  %727 = @func_3058() /* ty=Tensor[(8, 13, 16), float32] */;
  (%726, %727)
}

def @func_3169(%var_3153: Tensor[(8, 13, 16), uint8], %var_3163: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), bool], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %728 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %729 = %728.1;
  %730 = cast(%var_3153, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %735 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %736 = reshape(%734, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %737 = reshape(%735, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %738 = greater_equal(%732, %733) /* ty=Tensor[(8, 13, 16), bool] */;
  %739 = @func_248(%736, %737) /* ty=Tensor[(9, 14, 3), bool] */;
  (%738, %739, %var_3163)
}

def @func_3234() -> (Tensor[(14, 6, 2), float64],) {
  %740 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  (%740,)
}

def @func_7485() -> (Tensor[(8, 13, 16), float32],) {
  %741 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %742 = %741.0;
  (%742,)
}

def @func_5410(%var_5380: Tensor[(9, 11, 2), float64]) -> Tensor[(9, 11, 2), int16] {
  %743 = @func_4747() /* ty=Tensor[(9, 11, 2), float64] */;
  %744 = cast(%var_5380, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%746, %747) /* ty=Tensor[(9, 11, 2), int16] */
}

def @func_3868(%var_3834: Tensor[(7, 15, 9), bool], %var_3835: Tensor[(7, 15, 9), bool], %var_3852: Tensor[(7, 15, 9), bool]) -> (Tensor[(7, 15, 9), bool], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 9), uint16]) {
  %748 = cast(%var_3835, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %749 = shape_of(%var_3834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_3834, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %753 = cast(%var_3852, dtype="uint16") /* ty=Tensor[(7, 15, 9), uint16] */;
  %754 = shape_of(%var_3834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_3834, dtype="uint16") /* ty=Tensor[(7, 15, 9), uint16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %757 = logical_and(%750, %751) /* ty=Tensor[(7, 15, 9), bool] */;
  %758 = %752.0;
  %759 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
  %760 = left_shift(%755, %756) /* ty=Tensor[(7, 15, 9), uint16] */;
  (%757, %758, %759, %760)
}

def @func_5363() -> (Tensor[(168), float64],) {
  %761 = @func_5167() /* ty=(Tensor[(168), float64],) */;
  %762 = %761.0;
  (%762,)
}

def @func_3959(%var_3953: Tensor[(5, 7, 10), bool], %var_3954: Tensor[(5, 7, 10), bool]) -> (Tensor[(5, 7, 10), bool],) {
  %763 = cast(%var_3954, dtype="bool") /* ty=Tensor[(5, 7, 10), bool] */;
  %764 = shape_of(%var_3953, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_3953, dtype="bool") /* ty=Tensor[(5, 7, 10), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = logical_and(%765, %766) /* ty=Tensor[(5, 7, 10), bool] */;
  (%767,)
}

def @func_6548() -> (Tensor[(8, 13, 16), float64],) {
  %768 = @func_4984() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %769 = %768.0;
  (%769,)
}

def @func_9576() -> (Tensor[(8, 13, 16), uint8],) {
  %770 = @func_7543() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */;
  %771 = %770.1;
  (%771,)
}

def @func_9045() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %772 = @func_7309() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %773 = %772.0;
  %774 = @func_7276() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%773, %774)
}

def @func_6520() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %775 = @func_6253() /* ty=(Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %776 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %777 = %775.1;
  %778 = @func_2340() /* ty=Tensor[(8, 13, 16), float32] */;
  %779 = %776.0;
  (%777, %778, %779)
}

def @func_8815() -> (Tensor[(14, 6, 2), float64],) {
  %780 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  (%780,)
}

def @func_9286() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64]) {
  %781 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
  %782 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %783 = %781.1;
  %784 = %782.0;
  (%783, %784)
}

def @func_4731(%var_4718: int32, %var_4719: Tensor[(9, 14, 1), int32]) -> Tensor[(9, 14, 1), bool] {
  %785 = cast(%var_4718, dtype="bool") /* ty=bool */;
  %786 = cast(%var_4719, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  greater(%785, %786) /* ty=Tensor[(9, 14, 1), bool] */
}

def @func_8990() -> (Tensor[(1664), float32], Tensor[(8, 13, 16), uint8]) {
  %787 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
  %788 = %787.3;
  %789 = cast(%788, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %790 = @func_8593() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %791 = exp(%789) /* ty=Tensor[(1664), float32] */;
  %792 = %790.0;
  (%791, %792)
}

def @func_9545(%var_9540: Tensor[(10), uint64], %var_9541: Tensor[(120), uint64]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
  %793 = @func_8815() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %794 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
  %795 = cast(%794, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %796 = reshape(%795, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %797 = cast(%var_9540, dtype="uint64") /* ty=Tensor[(10), uint64] */;
  %798 = cast(%var_9541, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %799 = reshape(%797, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
  %800 = reshape(%798, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint64] */;
  %801 = @func_6999(%799, %800) /* ty=(Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) */;
  %802 = %793.0;
  %803 = @func_3471(%796) /* ty=Tensor[(8, 13, 16), float32] */;
  %804 = %801.1;
  (%802, %794, %803, %804, %var_9540, %var_9541)
}

def @func_2609() -> (Tensor[(8, 13, 16), int64],) {
  %805 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %806 = %805.1;
  (%806,)
}

def @func_4899(%var_4886: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64],) {
  %807 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %808 = %807.0;
  %809 = cast(%var_4886, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %813 = mod(%811, %812) /* ty=Tensor[(8, 13, 16), float64] */;
  (%813,)
}

def @func_1181() -> Tensor[(8, 13, 16), uint8] {
  @func_108() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_1067() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  %814 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %815 = %814.0;
  %816 = cast(%815, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %817 = reshape(%816, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %818 = @func_848(%817) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %819 = %818.1;
  %820 = cast(%819, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %821 = reshape(%820, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %822 = @func_848(%821) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %823 = %822.0;
  (%815, %819, %823)
}

def @func_2387() -> Tensor[(8, 13, 16), uint8] {
  @func_108() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_449() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %824 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %825 = %824.0;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %827 = cast(%825, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %828 = reshape(%827, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %829 = @func_200(%828) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %830 = cast(meta[relay.Constant][37] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %831 = cast(meta[relay.Constant][37] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %832 = reshape(%830, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %833 = reshape(%831, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %834 = asinh(%826) /* ty=Tensor[(8, 13, 16), float32] */;
  %835 = %829.0;
  %836 = @func_248(%832, %833) /* ty=Tensor[(9, 14, 3), bool] */;
  (%834, %835, %836, meta[relay.Constant][37] /* ty=Tensor[(378), uint64] */)
}

def @func_3267() -> (Tensor[(8, 13, 16), uint8],) {
  %837 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%837,)
}

def @func_2340() -> Tensor[(8, 13, 16), float32] {
  @func_1396() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_3972() -> (Tensor[(8, 13, 16), uint8],) {
  %838 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %839 = %838.0;
  (%839,)
}

def @func_7504() -> (Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
  %840 = @func_6548() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %841 = @func_7342() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %842 = %840.0;
  %843 = %841.0;
  (%842, %843)
}

def @func_8154(%var_8152: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), float32], Tensor[(7, 15, 14), float32], Tensor[(1470), float32]) {
  %844 = cast(%var_8152, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %845 = cast(%var_8152, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %846 = reshape(%844, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %847 = reshape(%845, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %848 = @func_8011(%846, %847) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) */;
  %849 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
  %850 = %848.0;
  (%849, %850, %var_8152)
}

def @func_7083(%var_7031: Tensor[(13), int32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
  %851 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %852 = cast(%var_7031, dtype="int32") /* ty=Tensor[(13), int32] */;
  %853 = cast(%var_7031, dtype="int32") /* ty=Tensor[(13), int32] */;
  %854 = reshape(%852, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %855 = reshape(%853, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %856 = cast(meta[relay.Constant][38] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %857 = reshape(%856, newshape=[6, 63]) /* ty=Tensor[(6, 63), uint64] */;
  %858 = @func_487(%857) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */;
  %859 = %851.1;
  %860 = @func_2534(%854, %855) /* ty=Tensor[(?, 13), int32] */;
  %861 = %858.4;
  (%859, %860, %var_7031, %861, meta[relay.Constant][38] /* ty=Tensor[(378), uint64] */)
}

def @func_1909() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %862 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %863 = cast(%862, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %864 = reshape(%863, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %865 = @func_200(%864) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %866 = %865.2;
  (%862, %866)
}

def @func_8296(%var_8273: bool, %var_8274: Tensor[(1, 8, 14), bool]) -> (Tensor[(1, 8, 14), bool], Tensor[(1, 8, 14), float32]) {
  %867 = cast(%var_8273, dtype="bool") /* ty=bool */;
  %868 = cast(%var_8274, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
  %869 = cast(%var_8274, dtype="float32") /* ty=Tensor[(1, 8, 14), float32] */;
  %870 = logical_or(%867, %868) /* ty=Tensor[(1, 8, 14), bool] */;
  %871 = asinh(%869) /* ty=Tensor[(1, 8, 14), float32] */;
  (%870, %871)
}

def @func_4374() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) {
  %872 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %873 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
  (%872, %873)
}

def @func_8786() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8], Tensor[(13), int32], uint8) {
  %874 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
  %875 = cast(meta[relay.Constant][39] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %876 = cast(meta[relay.Constant][40] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %877 = reshape(%875, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %878 = reshape(%876, newshape=[]) /* ty=uint8 */;
  %879 = @func_7904(%877, %878) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %880 = @func_8113() /* ty=Tensor[(8, 13, 16), uint8] */;
  %881 = %874.1;
  %882 = %879.2;
  (%880, %881, %882, meta[relay.Constant][39] /* ty=Tensor[(13), int32] */, meta[relay.Constant][40] /* ty=uint8 */)
}

def @func_9756() -> (Tensor[(168), float64],) {
  %883 = @func_9616() /* ty=Tensor[(168), float64] */;
  (%883,)
}

def @func_9769() -> (Tensor[(14, 6, 2), float64],) {
  %884 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
  %885 = %884.0;
  (%885,)
}

def @func_5944(%var_5919: Tensor[(1680), uint8], %var_5929: Tensor[(390), float64]) -> (Tensor[(14, 6, 2), float64], Tensor[(1680), uint8], uint8, Tensor[(8, 13, 16), uint8], Tensor[(390), float32]) {
  %886 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %887 = cast(%var_5929, dtype="float64") /* ty=Tensor[(390), float64] */;
  %888 = reshape(%887, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float64] */;
  %889 = @func_3638(%888) /* ty=(Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) */;
  %890 = cast(%var_5919, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %891 = cast(%var_5919, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %892 = cast(meta[relay.Constant][41] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %893 = reshape(%890, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %894 = reshape(%891, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %895 = reshape(%892, newshape=[]) /* ty=uint8 */;
  %896 = @func_2112(%893, %894, %895) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %897 = %896.1;
  %898 = cast(%897, dtype="float32") /* ty=float32 */;
  %899 = cast(%var_5929, dtype="float32") /* ty=Tensor[(390), float32] */;
  %900 = %886.0;
  %901 = %889.1;
  %902 = mod(%898, %899) /* ty=Tensor[(390), float32] */;
  (%900, %var_5919, meta[relay.Constant][41] /* ty=uint8 */, %901, %902)
}

def @func_4156() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) {
  %903 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %904 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %905 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %906 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %907 = %903.2;
  %908 = %904.1;
  %909 = %905.0;
  (%906, %907, %908, %909)
}

def @func_5023(%var_5002: Tensor[(12, 3, 16), int16]) -> (Tensor[(12, 3, 16), float64],) {
  %910 = cast(%var_5002, dtype="int16") /* ty=Tensor[(12, 3, 16), int16] */;
  %911 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int16") /* ty=Tensor[(12, 3, 16), int16] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %914 = logical_xor(%912, %913) /* ty=Tensor[(12, 3, 16), int16] */;
  %915 = cast(%914, dtype="uint16") /* ty=Tensor[(12, 3, 16), uint16] */;
  %916 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 3, 16), int16] */, dtype="uint16") /* ty=Tensor[(12, 3, 16), uint16] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %919 = minimum(%917, %918) /* ty=Tensor[(12, 3, 16), uint16] */;
  %920 = cast(%919, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %921 = asin(%920) /* ty=Tensor[(12, 3, 16), float64] */;
  (%921,)
}

def @func_4607() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
  %922 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %923 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %924 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
  %925 = %922.0;
  %926 = %923.0;
  %927 = %924.0;
  (%925, %926, %927)
}

def @func_4426() -> Tensor[(14, 12, 10), uint8] {
  %928 = @func_3800() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %928.1
}

def @func_1515() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %929 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %930 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %931 = %929.0;
  %932 = %930.0;
  (%931, %932)
}

def @func_5138() -> (Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
  %933 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %934 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
  %935 = %933.0;
  %936 = %934.2;
  (%935, %936)
}

def @func_8238(%var_8188: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(1680), uint8], Tensor[(14, 6, 2), float32]) {
  %937 = @func_6938() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %938 = cast(%var_8188, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %939 = reshape(%938, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
  %940 = @func_6444(%939) /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) */;
  %941 = %940.2;
  %942 = cast(%941, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
  %943 = %937.0;
  %944 = atanh(%942) /* ty=Tensor[(14, 6, 2), float32] */;
  (%943, %var_8188, %944)
}

def @func_6999(%var_6966: Tensor[(1, 10, 1), uint64], %var_6967: Tensor[(1, 10, 12), uint64]) -> (Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) {
  %945 = cast(%var_6966, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %946 = cast(%var_6967, dtype="bool") /* ty=Tensor[(1, 10, 12), bool] */;
  %947 = equal(%945, %946) /* ty=Tensor[(1, 10, 12), bool] */;
  %948 = cast(%var_6967, dtype="float64") /* ty=Tensor[(1, 10, 12), float64] */;
  %949 = shape_of(%947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(%947, dtype="float64") /* ty=Tensor[(1, 10, 12), float64] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %952 = cast(%var_6966, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %953 = cast(meta[relay.Constant][43] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %954 = cast(meta[relay.Constant][43] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %955 = reshape(%953, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %956 = reshape(%954, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %957 = power(%950, %951) /* ty=Tensor[(?, 10, 12), float64] */;
  %958 = sigmoid(%952) /* ty=Tensor[(1, 10, 1), float64] */;
  %959 = @func_2534(%955, %956) /* ty=Tensor[(?, 13), int32] */;
  (%957, %958, %959, meta[relay.Constant][43] /* ty=Tensor[(13), int32] */)
}

def @func_2201() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
  %960 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %961 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %962 = %960.5;
  %963 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
  %964 = %961.0;
  (%962, %963, %964)
}

def @func_9905() -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), int64]) {
  %965 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %966 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
  %967 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
  %968 = %965.1;
  %969 = %966.1;
  %970 = %967.0;
  (%968, %969, %970)
}

def @func_6253() -> (Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
  %971 = @func_6039() /* ty=(Tensor[(168), float64],) */;
  %972 = @func_6039() /* ty=(Tensor[(168), float64],) */;
  %973 = @func_4521() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %974 = @func_3715() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %975 = %971.0;
  %976 = %972.0;
  %977 = %973.0;
  %978 = %974.0;
  (%975, %976, %977, %978)
}

def @func_4258(%var_4225: Tensor[(168), float64], %var_4230: Tensor[(14, 12, 10), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) {
  %979 = cast(%var_4225, dtype="float64") /* ty=Tensor[(168), float64] */;
  %980 = reshape(%979, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
  %981 = @func_3800() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %982 = %981.1;
  %983 = cast(%var_4230, dtype="uint64") /* ty=Tensor[(14, 12, 10), uint64] */;
  %984 = shape_of(%982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(%982, dtype="uint64") /* ty=Tensor[(14, 12, 10), uint64] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %987 = @func_752(%980) /* ty=Tensor[(14, 6, 2), float64] */;
  %988 = maximum(%985, %986) /* ty=Tensor[(14, 12, 10), uint64] */;
  (%987, %var_4225, %988)
}

def @func_353() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %989 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %990 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %991 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %992 = %991.0;
  %993 = cast(%992, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %994 = reshape(%993, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %995 = @func_200(%994) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %996 = %989.0;
  %997 = %990.0;
  %998 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %999 = %995.2;
  (%996, %997, %992, %998, %999)
}

def @func_3058() -> Tensor[(8, 13, 16), float32] {
  %1000 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1000.1
}

def @func_8593() -> (Tensor[(8, 13, 16), uint8],) {
  %1001 = @func_2473() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%1001,)
}

def @func_2751() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
  %1002 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %1003 = @func_2290() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(378), float64]) */;
  %1004 = %1003.0;
  %1005 = cast(%1004, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %1006 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1007 = %1002.0;
  %1008 = cosh(%1005) /* ty=Tensor[(8, 13, 16), float64] */;
  %1009 = %1006.0;
  (%1007, %1008, %1009)
}

def @func_925() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %1010 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1011 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %1012 = %1010.0;
  %1013 = %1011.4;
  (%1012, %1013)
}

def @func_7149() -> (Tensor[(8, 13, 16), float32],) {
  %1014 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %1015 = %1014.0;
  (%1015,)
}

def @func_9336(%var_9298: Tensor[(3, 20), bool]) -> (Tensor[(378), uint64], Tensor[(3, 20), bool], Tensor[(14, 6, 2), float64], Tensor[(10, 2, 3), uint64]) {
  %1016 = @func_8884() /* ty=(Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) */;
  %1017 = cast(%var_9298, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %1018 = reshape(%1017, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), bool] */;
  %1019 = @func_9082(%1018) /* ty=Tensor[(10, 2, 3), bool] */;
  %1020 = cast(%1019, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
  %1021 = sqrt(%1020) /* ty=Tensor[(10, 2, 3), float64] */;
  %1022 = cast(%1019, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
  %1023 = shape_of(%1021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1024 = cast(%1021, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
  %1025 = dyn.reshape(%1022, %1023, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1026 = %1016.0;
  %1027 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  %1028 = add(%1024, %1025) /* ty=Tensor[(10, 2, 3), uint64] */;
  (%1026, %var_9298, %1027, %1028)
}

def @func_813(%var_765: uint8, %var_766: Tensor[(15, 16, 13), uint8]) -> (Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) {
  %1029 = cast(%var_765, dtype="bool") /* ty=bool */;
  %1030 = cast(%var_766, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
  %1031 = less_equal(%1029, %1030) /* ty=Tensor[(15, 16, 13), bool] */;
  %1032 = cast(%1031, dtype="float64") /* ty=Tensor[(15, 16, 13), float64] */;
  %1033 = cosh(%1032) /* ty=Tensor[(15, 16, 13), float64] */;
  %1034 = cast(%1033, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
  %1035 = cast(%var_765, dtype="bool") /* ty=bool */;
  %1036 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1037 = logical_and(%1034, %1035) /* ty=Tensor[(15, 16, 13), bool] */;
  %1038 = %1036.1;
  (%1037, %1038)
}

def @func_1769() -> (Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) {
  %1039 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %1040 = cast(meta[relay.Constant][44] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %1041 = reshape(%1040, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), float64] */;
  %1042 = @func_1296(%1041) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) */;
  %1043 = %1042.0;
  %1044 = cast(meta[relay.Constant][44] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %1045 = shape_of(%1043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1046 = cast(%1043, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1048 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %1049 = %1039.0;
  %1050 = floor_mod(%1046, %1047) /* ty=Tensor[(14, 5, 13), float64] */;
  %1051 = %1048.0;
  (%1049, %1050, %1051)
}

def @func_7309() -> (Tensor[(8, 13, 16), uint8],) {
  %1052 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %1053 = %1052.2;
  (%1053,)
}

def @func_5880(%var_5780: Tensor[(198), float64], %var_5815: Tensor[(3, 8, 14), float32], %var_5838: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) {
  %1054 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1055 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
  %1056 = cast(%var_5780, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1057 = reshape(%1056, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %1058 = cast(meta[relay.Constant][45] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %1059 = cast(meta[relay.Constant][45] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %1060 = reshape(%1058, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %1061 = reshape(%1059, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %1062 = @func_3938(%1060, %1061) /* ty=Tensor[(3, 8, 14), float32] */;
  %1063 = cast(%var_5815, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %1064 = shape_of(%1062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(%1062, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1067 = greater_equal(%1065, %1066) /* ty=Tensor[(3, 8, 14), bool] */;
  %1068 = cast(%1062, dtype="uint32") /* ty=Tensor[(3, 8, 14), uint32] */;
  %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%1067, dtype="uint32") /* ty=Tensor[(3, 8, 14), uint32] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1072 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 840), uint8] */, dtype="uint8") /* ty=Tensor[(2, 840), uint8] */;
  %1073 = cast(%var_5838, dtype="uint8") /* ty=uint8 */;
  %1074 = reshape(%1072, newshape=[84, 20]) /* ty=Tensor[(84, 20), uint8] */;
  %1075 = reshape(%1073, newshape=[]) /* ty=uint8 */;
  %1076 = @func_4712(%1074, %1075) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) */;
  %1077 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %1078 = %1054.0;
  %1079 = %1055.0;
  %1080 = @func_3058() /* ty=Tensor[(8, 13, 16), float32] */;
  %1081 = @func_5410(%1057) /* ty=Tensor[(9, 11, 2), int16] */;
  %1082 = bitwise_or(%1070, %1071) /* ty=Tensor[(3, 8, 14), uint32] */;
  %1083 = %1076.1;
  %1084 = %1077.1;
  (%1078, %1079, %1080, %1081, %var_5780, meta[relay.Constant][45] /* ty=Tensor[(336), float32] */, %1082, %1083, meta[relay.Constant][46] /* ty=Tensor[(2, 840), uint8] */, %var_5838, %1084)
}

def @func_5495(%var_5486: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) {
  %1085 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %1086 = cast(%var_5486, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %1087 = cast(%var_5486, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %1088 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1089 = reshape(%1086, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %1090 = reshape(%1087, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %1091 = reshape(%1088, newshape=[]) /* ty=uint8 */;
  %1092 = @func_2112(%1089, %1090, %1091) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %1093 = %1085.0;
  %1094 = %1092.1;
  (%1093, %1094, %var_5486, meta[relay.Constant][47] /* ty=uint8 */)
}

def @func_897() -> (Tensor[(8, 13, 16), float32],) {
  %1095 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1096 = %1095.1;
  (%1096,)
}

def @func_4774() -> (Tensor[(8, 13, 16), float32],) {
  %1097 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %1098 = %1097.0;
  (%1098,)
}

def @func_2439() -> Tensor[(8, 13, 16), float32] {
  %1099 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %1100 = cast(%1099, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  sin(%1100) /* ty=Tensor[(8, 13, 16), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2753() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
  @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_7975(%var_7973: Tensor[(14, 14, 4), uint16], %var_7974: Tensor[(14, 14, 4), uint16]) -> (Tensor[(14, 14, 4), uint16],) {
  %5 = fn (%var_7959: Tensor[(14, 14, 4), uint16], %var_7960: Tensor[(14, 14, 4), uint16]) -> (Tensor[(14, 14, 4), uint16],) {
    %0 = cast(%var_7960, dtype="uint16") /* ty=Tensor[(14, 14, 4), uint16] */;
    %1 = shape_of(%var_7959, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_7959, dtype="uint16") /* ty=Tensor[(14, 14, 4), uint16] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %4 = bitwise_xor(%2, %3) /* ty=Tensor[(14, 14, 4), uint16] */;
    (%4,)
  };
  %5(%var_7973, %var_7974) /* ty=(Tensor[(14, 14, 4), uint16],) */
}

def @func_4522() -> (Tensor[(8, 13, 16), uint8],) {
  %8 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %6 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %7 = %6.0;
    (%7,)
  };
  %8() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_108() -> Tensor[(8, 13, 16), uint8] {
  %9 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %9.0
}

def @func_2575() -> Tensor[(14, 6, 2), float64] {
  %11 = fn () -> Tensor[(14, 6, 2), float64] {
    %10 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
    %10.0
  };
  %11() /* ty=Tensor[(14, 6, 2), float64] */
}

def @func_2017() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
  %17 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
    %12 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
    %13 = cast(%12, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %14 = reshape(%13, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %15 = @func_848(%14) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
    %16 = %15.0;
    (%12, %16)
  };
  %17() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */
}

def @func_3169(%var_3153: Tensor[(8, 13, 16), uint8], %var_3163: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), bool], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %18 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %19 = %18.1;
  %20 = cast(%var_3153, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %25 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %26 = reshape(%24, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %27 = reshape(%25, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %28 = greater_equal(%22, %23) /* ty=Tensor[(8, 13, 16), bool] */;
  %29 = @func_248(%26, %27) /* ty=Tensor[(9, 14, 3), bool] */;
  (%28, %29, %var_3163)
}

def @func_4296() -> (Tensor[(8, 13, 16), float64],) {
  @func_4294() /* ty=(Tensor[(8, 13, 16), float64],) */
}

def @func_752(%var_740: Tensor[(14, 6, 2), float64]) -> Tensor[(14, 6, 2), float64] {
  %30 = cast(%var_740, dtype="float64") /* ty=Tensor[(14, 6, 2), float64] */;
  log2(%30) /* ty=Tensor[(14, 6, 2), float64] */
}

def @func_7486() -> (Tensor[(8, 13, 16), float32],) {
  %33 = fn () -> (Tensor[(8, 13, 16), float32],) {
    %31 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %32 = %31.0;
    (%32,)
  };
  %33() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_9813(%var_9811: Tensor[(840, 2), uint8], %var_9812: Tensor[(7, 3, 11), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(840, 2), uint8], Tensor[(7, 3, 11), bool], Tensor[(8, 13, 16), float32]) {
  %44 = fn (%var_9785: Tensor[(840, 2), uint8], %var_9789: Tensor[(7, 3, 11), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(840, 2), uint8], Tensor[(7, 3, 11), bool], Tensor[(8, 13, 16), float32]) {
    %34 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %35 = cast(%var_9785, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
    %36 = reshape(%35, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
    %37 = @func_7601(%36) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) */;
    %38 = %37.4;
    %39 = cast(%38, dtype="bool") /* ty=bool */;
    %40 = cast(%var_9789, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
    %41 = %34.2;
    %42 = greater_equal(%39, %40) /* ty=Tensor[(7, 3, 11), bool] */;
    %43 = @func_9668() /* ty=Tensor[(8, 13, 16), float32] */;
    (%41, %var_9785, %42, %43)
  };
  %44(%var_9811, %var_9812) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(840, 2), uint8], Tensor[(7, 3, 11), bool], Tensor[(8, 13, 16), float32]) */
}

def @func_8969(%var_8967: Tensor[(16, 8, 11), int8], %var_8968: Tensor[(1664), uint8]) -> (Tensor[(16, 8, 11), bool], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
  %54 = fn (%var_8949: Tensor[(16, 8, 11), int8], %var_8956: Tensor[(1664), uint8]) -> (Tensor[(16, 8, 11), bool], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
    %45 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 8, 11), int8] */, dtype="bool") /* ty=Tensor[(16, 8, 11), bool] */;
    %46 = shape_of(%var_8949, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%var_8949, dtype="bool") /* ty=Tensor[(16, 8, 11), bool] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %49 = cast(%var_8956, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
    %50 = reshape(%49, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %51 = @func_200(%50) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
    %52 = greater_equal(%47, %48) /* ty=Tensor[(16, 8, 11), bool] */;
    %53 = %51.2;
    (%52, %53, %var_8956)
  };
  %54(%var_8967, %var_8968) /* ty=(Tensor[(16, 8, 11), bool], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) */
}

def @func_9211() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
  %57 = fn () -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
    %55 = @func_9052() /* ty=Tensor[(14, 6, 2), float64] */;
    %56 = @func_8702() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%55, %56)
  };
  %57() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_6041() -> (Tensor[(168), float64],) {
  @func_6039() /* ty=(Tensor[(168), float64],) */
}

def @func_885(%var_884: Tensor[(1, 16, 14), float64]) -> Tensor[(1, 16, 14), float64] {
  %59 = fn (%var_869: Tensor[(1, 16, 14), float64]) -> Tensor[(1, 16, 14), float64] {
    %58 = cast(%var_869, dtype="float64") /* ty=Tensor[(1, 16, 14), float64] */;
    sigmoid(%58) /* ty=Tensor[(1, 16, 14), float64] */
  };
  %59(%var_884) /* ty=Tensor[(1, 16, 14), float64] */
}

def @func_9578() -> (Tensor[(8, 13, 16), uint8],) {
  @func_9576() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_9852() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint64], Tensor[(9, 11, 2), float64]) {
  %67 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint64], Tensor[(9, 11, 2), float64]) {
    %60 = @func_4374() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) */;
    %61 = %60.0;
    %62 = cast(%61, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %63 = reshape(%62, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %64 = @func_9675() /* ty=(Tensor[(9, 11, 2), float64],) */;
    %65 = @func_1264(%63) /* ty=Tensor[(8, 13, 16), uint64] */;
    %66 = %64.0;
    (%61, %65, %66)
  };
  %67() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint64], Tensor[(9, 11, 2), float64]) */
}

def @func_4196() -> Tensor[(8, 13, 16), float32] {
  @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5412(%var_5411: Tensor[(9, 11, 2), float64]) -> Tensor[(9, 11, 2), int16] {
  %73 = fn (%var_5380: Tensor[(9, 11, 2), float64]) -> Tensor[(9, 11, 2), int16] {
    %68 = @func_4747() /* ty=Tensor[(9, 11, 2), float64] */;
    %69 = cast(%var_5380, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%68, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    multiply(%71, %72) /* ty=Tensor[(9, 11, 2), int16] */
  };
  %73(%var_5411) /* ty=Tensor[(9, 11, 2), int16] */
}

def @func_1069() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  @func_1067() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */
}

def @func_2379(%var_2378: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) {
  %82 = fn (%var_2346: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) {
    %74 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
    %75 = cast(%var_2346, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %79 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
    %80 = divide(%77, %78) /* ty=Tensor[(8, 13, 16), float64] */;
    %81 = %79.2;
    (%80, %81)
  };
  %82(%var_2378) /* ty=(Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) */
}

def @func_2116(%var_2113: Tensor[(14, 12, 10), uint8], %var_2114: Tensor[(14, 12, 10), uint8], %var_2115: uint8) -> (Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) {
  %99 = fn (%var_2052: Tensor[(14, 12, 10), uint8], %var_2053: Tensor[(14, 12, 10), uint8], %var_2058: uint8) -> (Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) {
    %83 = cast(%var_2058, dtype="uint8") /* ty=uint8 */;
    %84 = cast(meta[relay.Constant][1] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %85 = reshape(%83, newshape=[]) /* ty=uint8 */;
    %86 = reshape(%84, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %87 = @func_813(%85, %86) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
    %88 = cast(%var_2053, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
    %89 = shape_of(%var_2052, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%var_2052, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %92 = bitwise_or(%90, %91) /* ty=Tensor[(14, 12, 10), uint8] */;
    %93 = cast(%92, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
    %94 = shape_of(%var_2053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%var_2053, dtype="uint8") /* ty=Tensor[(14, 12, 10), uint8] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %97 = %87.1;
    %98 = subtract(%95, %96) /* ty=Tensor[(14, 12, 10), uint8] */;
    (%97, %var_2058, meta[relay.Constant][1] /* ty=Tensor[(3120), uint8] */, %98)
  };
  %99(%var_2113, %var_2114, %var_2115) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */
}

def @func_8157(%var_8155: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), float32], Tensor[(7, 15, 14), float32], Tensor[(1470), float32]) {
  @func_8154(%var_8155) /* ty=(Tensor[(8, 13, 16), float32], Tensor[(7, 15, 14), float32], Tensor[(1470), float32]) */
}

def @func_5244() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %112 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
    %100 = @func_3728() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
    %101 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
    %102 = %101.0;
    %103 = cast(%102, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %104 = reshape(%103, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %105 = @func_2377(%104) /* ty=(Tensor[(8, 13, 16), float64], Tensor[(378), uint64]) */;
    %106 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
    %107 = @func_3136() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %108 = %100.1;
    %109 = %105.0;
    %110 = %106.1;
    %111 = %107.2;
    (%108, %102, %109, %110, %111)
  };
  %112() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_4735(%var_4733: int32, %var_4734: Tensor[(9, 14, 1), int32]) -> Tensor[(9, 14, 1), bool] {
  @func_4731(%var_4733, %var_4734) /* ty=Tensor[(9, 14, 1), bool] */
}

def @func_3610() -> Tensor[(8, 13, 16), float32] {
  @func_3608() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5573() -> (Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  @func_5571() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_3058() -> Tensor[(8, 13, 16), float32] {
  %113 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %113.1
}

def @func_1397() -> Tensor[(8, 13, 16), float32] {
  %115 = fn () -> Tensor[(8, 13, 16), float32] {
    %114 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %114.1
  };
  %115() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_7278() -> Tensor[(8, 13, 16), uint8] {
  @func_7276() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_4376() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) {
  @func_4374() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) */
}

def @func_4427() -> Tensor[(14, 12, 10), uint8] {
  %117 = fn () -> Tensor[(14, 12, 10), uint8] {
    %116 = @func_3800() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
    %116.1
  };
  %117() /* ty=Tensor[(14, 12, 10), uint8] */
}

def @func_6939() -> (Tensor[(8, 13, 16), uint8],) {
  %119 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %118 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%118,)
  };
  %119() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_4774() -> (Tensor[(8, 13, 16), float32],) {
  %120 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %121 = %120.0;
  (%121,)
}

def @func_9906() -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), int64]) {
  %128 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), int64]) {
    %122 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %123 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %124 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
    %125 = %122.1;
    %126 = %123.1;
    %127 = %124.0;
    (%125, %126, %127)
  };
  %128() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), int64]) */
}

def @func_1018() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */
}

def @func_6253() -> (Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
  %129 = @func_6039() /* ty=(Tensor[(168), float64],) */;
  %130 = @func_6039() /* ty=(Tensor[(168), float64],) */;
  %131 = @func_4521() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %132 = @func_3715() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %133 = %129.0;
  %134 = %130.0;
  %135 = %131.0;
  %136 = %132.0;
  (%133, %134, %135, %136)
}

def @func_7718() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) {
  %152 = fn () -> (Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) {
    %137 = @func_6253() /* ty=(Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
    %138 = cast(meta[relay.Constant][2] /* ty=Tensor[(1664), uint8] */, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
    %139 = reshape(%138, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %140 = @func_4899(%139) /* ty=(Tensor[(8, 13, 16), float64],) */;
    %141 = @func_7504() /* ty=(Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
    %142 = %141.0;
    %143 = cast(%142, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
    %144 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(1664), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %145 = cast(meta[relay.Constant][2] /* ty=Tensor[(1664), uint8] */, dtype="bool") /* ty=Tensor[(1664), bool] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), bool] */;
    %147 = cast(meta[relay.Constant][2] /* ty=Tensor[(1664), uint8] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %148 = %137.1;
    %149 = %140.0;
    %150 = not_equal(%145, %146) /* ty=Tensor[(1664), bool] */;
    %151 = cosh(%147) /* ty=Tensor[(1664), float64] */;
    (%148, %149, %150, %151)
  };
  %152() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */
}

def @func_2904() -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
  @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */
}

def @func_251(%var_249: Tensor[(9, 14, 3), uint64], %var_250: Tensor[(9, 14, 3), uint64]) -> Tensor[(9, 14, 3), bool] {
  %157 = fn (%var_238: Tensor[(9, 14, 3), uint64], %var_239: Tensor[(9, 14, 3), uint64]) -> Tensor[(9, 14, 3), bool] {
    %153 = cast(%var_239, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
    %154 = shape_of(%var_238, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%var_238, dtype="bool") /* ty=Tensor[(9, 14, 3), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%155, %156) /* ty=Tensor[(9, 14, 3), bool] */
  };
  %157(%var_249, %var_250) /* ty=Tensor[(9, 14, 3), bool] */
}

def @func_9085(%var_9083: Tensor[(10, 2, 3), bool]) -> Tensor[(10, 2, 3), bool] {
  @func_9082(%var_9083) /* ty=Tensor[(10, 2, 3), bool] */
}

def @func_3942(%var_3940: Tensor[(3, 8, 14), float32], %var_3941: Tensor[(3, 8, 14), float32]) -> Tensor[(3, 8, 14), float32] {
  @func_3938(%var_3940, %var_3941) /* ty=Tensor[(3, 8, 14), float32] */
}

def @func_4856() -> (Tensor[(8, 13, 16), float32],) {
  @func_4854() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_7344() -> (Tensor[(8, 13, 16), uint8],) {
  @func_7342() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_8559() -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8]) {
  %162 = fn () -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8]) {
    %158 = @func_1067() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
    %159 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %160 = %158.2;
    %161 = %159.0;
    (%160, %161)
  };
  %162() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8]) */
}

def @func_3938(%var_3921: Tensor[(3, 8, 14), float32], %var_3922: Tensor[(3, 8, 14), float32]) -> Tensor[(3, 8, 14), float32] {
  %163 = cast(%var_3922, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %164 = shape_of(%var_3921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_3921, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%165, %166) /* ty=Tensor[(3, 8, 14), float32] */
}

def @func_9618() -> Tensor[(168), float64] {
  @func_9616() /* ty=Tensor[(168), float64] */
}

def @func_8595() -> (Tensor[(8, 13, 16), uint8],) {
  @func_8593() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_7918(%var_7917: uint8) -> (Tensor[(14, 6, 2), float64], uint8, Tensor[(1, 13), int32], uint8) {
  %175 = fn (%var_7914: uint8) -> (Tensor[(14, 6, 2), float64], uint8, Tensor[(1, 13), int32], uint8) {
    %167 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %168 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
    %169 = cast(%var_7914, dtype="uint8") /* ty=uint8 */;
    %170 = reshape(%168, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
    %171 = reshape(%169, newshape=[]) /* ty=uint8 */;
    %172 = @func_7904(%170, %171) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %173 = %167.1;
    %174 = %172.6;
    (%173, %174, meta[relay.Constant][3] /* ty=Tensor[(1, 13), int32] */, %var_7914)
  };
  %175(%var_7917) /* ty=(Tensor[(14, 6, 2), float64], uint8, Tensor[(1, 13), int32], uint8) */
}

def @func_925() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %176 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %177 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %178 = %176.0;
  %179 = %177.4;
  (%178, %179)
}

def @func_4712(%var_4686: Tensor[(84, 20), uint8], %var_4687: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) {
  %180 = cast(%var_4686, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %181 = cast(%var_4686, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %182 = cast(%var_4687, dtype="uint8") /* ty=uint8 */;
  %183 = reshape(%180, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %184 = reshape(%181, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %185 = reshape(%182, newshape=[]) /* ty=uint8 */;
  %186 = @func_2112(%183, %184, %185) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %187 = %186.3;
  %188 = cast(%var_4686, dtype="int16") /* ty=Tensor[(84, 20), int16] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="int16") /* ty=Tensor[(14, 12, 10), int16] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %192 = cast(%var_4686, dtype="int16") /* ty=Tensor[(84, 20), int16] */;
  %193 = cast(%var_4687, dtype="int16") /* ty=int16 */;
  %194 = @func_3409() /* ty=Tensor[(8, 13, 16), bool] */;
  %195 = right_shift(%190, %191) /* ty=Tensor[(14, 12, 10), int16] */;
  %196 = @func_2439() /* ty=Tensor[(8, 13, 16), float32] */;
  %197 = add(%192, %193) /* ty=Tensor[(84, 20), int16] */;
  (%194, %195, %196, %197)
}

def @func_8011(%var_7982: Tensor[(7, 15, 14), float32], %var_7983: Tensor[(7, 15, 14), float32]) -> (Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) {
  %198 = cast(%var_7983, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %199 = shape_of(%var_7982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_7982, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %202 = @func_6006() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) */;
  %203 = divide(%200, %201) /* ty=Tensor[(7, 15, 14), float32] */;
  %204 = %202.0;
  (%203, %204)
}

def @func_578(%var_573: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %205 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %206 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %207 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %208 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %211 = cast(%var_573, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %212 = cast(%var_573, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %213 = reshape(%211, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %214 = reshape(%212, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %215 = %205.1;
  %216 = %206.0;
  %217 = %207.0;
  %218 = sqrt(%210) /* ty=Tensor[(8, 13, 16), float32] */;
  %219 = @func_248(%213, %214) /* ty=Tensor[(9, 14, 3), bool] */;
  (%215, %216, %217, %218, %219, %var_573)
}

def @func_2341() -> Tensor[(8, 13, 16), float32] {
  %220 = fn () -> Tensor[(8, 13, 16), float32] {
    @func_1396() /* ty=Tensor[(8, 13, 16), float32] */
  };
  %220() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_4158() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) {
  @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */
}

def @func_4985() -> (Tensor[(8, 13, 16), float64],) {
  %223 = fn () -> (Tensor[(8, 13, 16), float64],) {
    %221 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
    %222 = %221.1;
    (%222,)
  };
  %223() /* ty=(Tensor[(8, 13, 16), float64],) */
}

def @func_8885() -> (Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) {
  %231 = fn () -> (Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) {
    %224 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
    %225 = %224.2;
    %226 = cast(%225, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %227 = reshape(%226, newshape=[378]) /* ty=Tensor[(378), uint64] */;
    %228 = @func_578(%227) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %229 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    %230 = %228.4;
    (%225, %229, %230)
  };
  %231() /* ty=(Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) */
}

def @func_4329() -> (Tensor[(8, 13, 16), uint8],) {
  %233 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %232 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%232,)
  };
  %233() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_9045() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %234 = @func_7309() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %235 = %234.0;
  %236 = @func_7276() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%235, %236)
}

def @func_8345(%var_8343: uint8, %var_8344: Tensor[(6, 6, 7), uint8]) -> (Tensor[(6, 6, 7), uint8], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), int64]) {
  %246 = fn (%var_8305: uint8, %var_8306: Tensor[(6, 6, 7), uint8]) -> (Tensor[(6, 6, 7), uint8], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), int64]) {
    %237 = cast(%var_8305, dtype="uint8") /* ty=uint8 */;
    %238 = cast(%var_8306, dtype="uint8") /* ty=Tensor[(6, 6, 7), uint8] */;
    %239 = cast(meta[relay.Constant][4] /* ty=Tensor[(1680), uint8] */, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %240 = reshape(%239, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
    %241 = @func_5495(%240) /* ty=(Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) */;
    %242 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
    %243 = subtract(%237, %238) /* ty=Tensor[(6, 6, 7), uint8] */;
    %244 = %241.3;
    %245 = %242.0;
    (%243, %244, meta[relay.Constant][4] /* ty=Tensor[(1680), uint8] */, %245)
  };
  %246(%var_8343, %var_8344) /* ty=(Tensor[(6, 6, 7), uint8], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), int64]) */
}

def @func_5880(%var_5780: Tensor[(198), float64], %var_5815: Tensor[(3, 8, 14), float32], %var_5838: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) {
  %247 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %248 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
  %249 = cast(%var_5780, dtype="float64") /* ty=Tensor[(198), float64] */;
  %250 = reshape(%249, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %251 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %252 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %253 = reshape(%251, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %254 = reshape(%252, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %255 = @func_3938(%253, %254) /* ty=Tensor[(3, 8, 14), float32] */;
  %256 = cast(%var_5815, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = greater_equal(%258, %259) /* ty=Tensor[(3, 8, 14), bool] */;
  %261 = cast(%255, dtype="uint32") /* ty=Tensor[(3, 8, 14), uint32] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="uint32") /* ty=Tensor[(3, 8, 14), uint32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %265 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 840), uint8] */, dtype="uint8") /* ty=Tensor[(2, 840), uint8] */;
  %266 = cast(%var_5838, dtype="uint8") /* ty=uint8 */;
  %267 = reshape(%265, newshape=[84, 20]) /* ty=Tensor[(84, 20), uint8] */;
  %268 = reshape(%266, newshape=[]) /* ty=uint8 */;
  %269 = @func_4712(%267, %268) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) */;
  %270 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %271 = %247.0;
  %272 = %248.0;
  %273 = @func_3058() /* ty=Tensor[(8, 13, 16), float32] */;
  %274 = @func_5410(%250) /* ty=Tensor[(9, 11, 2), int16] */;
  %275 = bitwise_or(%263, %264) /* ty=Tensor[(3, 8, 14), uint32] */;
  %276 = %269.1;
  %277 = %270.1;
  (%271, %272, %273, %274, %var_5780, meta[relay.Constant][5] /* ty=Tensor[(336), float32] */, %275, %276, meta[relay.Constant][6] /* ty=Tensor[(2, 840), uint8] */, %var_5838, %277)
}

def @func_1067() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  %278 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %281 = reshape(%280, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %282 = @func_848(%281) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %285 = reshape(%284, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %286 = @func_848(%285) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %287 = %286.0;
  (%279, %283, %287)
}

def @func_7085(%var_7084: Tensor[(13), int32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
  %299 = fn (%var_7031: Tensor[(13), int32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
    %288 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
    %289 = cast(%var_7031, dtype="int32") /* ty=Tensor[(13), int32] */;
    %290 = cast(%var_7031, dtype="int32") /* ty=Tensor[(13), int32] */;
    %291 = reshape(%289, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %292 = reshape(%290, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %293 = cast(meta[relay.Constant][7] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %294 = reshape(%293, newshape=[6, 63]) /* ty=Tensor[(6, 63), uint64] */;
    %295 = @func_487(%294) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */;
    %296 = %288.1;
    %297 = @func_2534(%291, %292) /* ty=Tensor[(?, 13), int32] */;
    %298 = %295.4;
    (%296, %297, %var_7031, %298, meta[relay.Constant][7] /* ty=Tensor[(378), uint64] */)
  };
  %299(%var_7084) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */
}

def @func_6195(%var_6194: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8]) {
  %318 = fn (%var_6183: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8]) {
    %300 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %301 = @func_5363() /* ty=(Tensor[(168), float64],) */;
    %302 = @func_5138() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */;
    %303 = @func_2697() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
    %304 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %305 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %306 = cast(%var_6183, dtype="uint8") /* ty=uint8 */;
    %307 = cast(meta[relay.Constant][8] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %308 = reshape(%306, newshape=[]) /* ty=uint8 */;
    %309 = reshape(%307, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %310 = @func_813(%308, %309) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
    %311 = %300.0;
    %312 = %301.0;
    %313 = %302.0;
    %314 = %303.1;
    %315 = %304.0;
    %316 = %305.0;
    %317 = %310.1;
    (%311, %312, %313, %314, %315, %316, %317, %var_6183, meta[relay.Constant][8] /* ty=Tensor[(3120), uint8] */)
  };
  %318(%var_6194) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8]) */
}

def @func_7406(%var_7402: Tensor[(8, 1, 1), float32], %var_7403: Tensor[(1664), uint8], %var_7404: Tensor[(224, 1), float64], %var_7405: Tensor[(8, 16, 1), float32]) -> (Tensor[(8, 13, 16), uint64], Tensor[(1664), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378, 1), uint64], Tensor[(1, 16, 14), float64], Tensor[(224, 1), float64], Tensor[(8, 16, 1), float64], Tensor[(8, 13, 16), float32]) {
  %336 = fn (%var_7348: Tensor[(8, 1, 1), float32], %var_7374: Tensor[(1664), uint8], %var_7392: Tensor[(224, 1), float64], %var_7394: Tensor[(8, 16, 1), float32]) -> (Tensor[(8, 13, 16), uint64], Tensor[(1664), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378, 1), uint64], Tensor[(1, 16, 14), float64], Tensor[(224, 1), float64], Tensor[(8, 16, 1), float64], Tensor[(8, 13, 16), float32]) {
    %319 = cast(%var_7374, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
    %320 = reshape(%319, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %321 = cast(meta[relay.Constant][9] /* ty=Tensor[(378, 1), uint64] */, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
    %322 = reshape(%321, newshape=[378]) /* ty=Tensor[(378), uint64] */;
    %323 = @func_578(%322) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %324 = cast(%var_7392, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %325 = reshape(%324, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float64] */;
    %326 = cast(%var_7348, dtype="float32") /* ty=Tensor[(8, 1, 1), float32] */;
    %327 = asin(%326) /* ty=Tensor[(8, 1, 1), float32] */;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
    %329 = cast(%var_7394, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
    %330 = @func_4538() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %331 = @func_1264(%320) /* ty=Tensor[(8, 13, 16), uint64] */;
    %332 = %323.1;
    %333 = @func_883(%325) /* ty=Tensor[(1, 16, 14), float64] */;
    %334 = power(%328, %329) /* ty=Tensor[(8, 16, 1), float64] */;
    %335 = %330.0;
    (%331, %var_7374, %332, meta[relay.Constant][9] /* ty=Tensor[(378, 1), uint64] */, %333, %var_7392, %334, %335)
  };
  %336(%var_7402, %var_7403, %var_7404, %var_7405) /* ty=(Tensor[(8, 13, 16), uint64], Tensor[(1664), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378, 1), uint64], Tensor[(1, 16, 14), float64], Tensor[(224, 1), float64], Tensor[(8, 16, 1), float64], Tensor[(8, 13, 16), float32]) */
}

def @func_7826() -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  @func_7824() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */
}

def @func_6858() -> Tensor[(8, 13, 16), int8] {
  %337 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %337.3
}

def @func_2525() -> (Tensor[(8, 13, 16), bool],) {
  @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */
}

def @func_2610() -> (Tensor[(8, 13, 16), int64],) {
  %340 = fn () -> (Tensor[(8, 13, 16), int64],) {
    %338 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %339 = %338.1;
    (%339,)
  };
  %340() /* ty=(Tensor[(8, 13, 16), int64],) */
}

def @func_5023(%var_5002: Tensor[(12, 3, 16), int16]) -> (Tensor[(12, 3, 16), float64],) {
  %341 = cast(%var_5002, dtype="int16") /* ty=Tensor[(12, 3, 16), int16] */;
  %342 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int16") /* ty=Tensor[(12, 3, 16), int16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %345 = logical_xor(%343, %344) /* ty=Tensor[(12, 3, 16), int16] */;
  %346 = cast(%345, dtype="uint16") /* ty=Tensor[(12, 3, 16), uint16] */;
  %347 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 3, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 3, 16), int16] */, dtype="uint16") /* ty=Tensor[(12, 3, 16), uint16] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %350 = minimum(%348, %349) /* ty=Tensor[(12, 3, 16), uint16] */;
  %351 = cast(%350, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %352 = asin(%351) /* ty=Tensor[(12, 3, 16), float64] */;
  (%352,)
}

def @func_3962(%var_3960: Tensor[(5, 7, 10), bool], %var_3961: Tensor[(5, 7, 10), bool]) -> (Tensor[(5, 7, 10), bool],) {
  %358 = fn (%var_3953: Tensor[(5, 7, 10), bool], %var_3954: Tensor[(5, 7, 10), bool]) -> (Tensor[(5, 7, 10), bool],) {
    %353 = cast(%var_3954, dtype="bool") /* ty=Tensor[(5, 7, 10), bool] */;
    %354 = shape_of(%var_3953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%var_3953, dtype="bool") /* ty=Tensor[(5, 7, 10), bool] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %357 = logical_and(%355, %356) /* ty=Tensor[(5, 7, 10), bool] */;
    (%357,)
  };
  %358(%var_3960, %var_3961) /* ty=(Tensor[(5, 7, 10), bool],) */
}

def @func_355() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_3608() -> Tensor[(8, 13, 16), float32] {
  @func_2439() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_7634(%var_7632: Tensor[(9, 13, 1), float32], %var_7633: Tensor[(10), uint64]) -> (Tensor[(9, 13, 1), float32], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
  %368 = fn (%var_7606: Tensor[(9, 13, 1), float32], %var_7627: Tensor[(10), uint64]) -> (Tensor[(9, 13, 1), float32], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
    %359 = cast(%var_7606, dtype="float32") /* ty=Tensor[(9, 13, 1), float32] */;
    %360 = cast(%var_7627, dtype="uint64") /* ty=Tensor[(10), uint64] */;
    %361 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %362 = reshape(%360, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
    %363 = reshape(%361, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint64] */;
    %364 = @func_6999(%362, %363) /* ty=(Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) */;
    %365 = acosh(%359) /* ty=Tensor[(9, 13, 1), float32] */;
    %366 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
    %367 = %364.1;
    (%365, %366, %367, %var_7627, meta[relay.Constant][11] /* ty=Tensor[(120), uint64] */)
  };
  %368(%var_7632, %var_7633) /* ty=(Tensor[(9, 13, 1), float32], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) */
}

def @func_2135() -> (Tensor[(8, 13, 16), uint8],) {
  %369 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %370 = %369.0;
  (%370,)
}

def @func_8114() -> Tensor[(8, 13, 16), uint8] {
  %372 = fn () -> Tensor[(8, 13, 16), uint8] {
    %371 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %371.0
  };
  %372() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_2475() -> Tensor[(8, 13, 16), uint8] {
  @func_2473() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_4899(%var_4886: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64],) {
  %373 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %374 = %373.0;
  %375 = cast(%var_4886, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %379 = mod(%377, %378) /* ty=Tensor[(8, 13, 16), float64] */;
  (%379,)
}

def @func_7907(%var_7905: Tensor[(13, 1), int32], %var_7906: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
  %399 = fn (%var_7862: Tensor[(13, 1), int32], %var_7885: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
    %380 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
    %381 = cast(%var_7862, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
    %382 = reshape(%381, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %383 = @func_7083(%382) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(?, 13), int32], Tensor[(13), int32], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */;
    %384 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %385 = cast(%var_7885, dtype="uint8") /* ty=uint8 */;
    %386 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 1560), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1560), uint8] */;
    %387 = reshape(%385, newshape=[]) /* ty=uint8 */;
    %388 = reshape(%386, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %389 = @func_813(%387, %388) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
    %390 = @func_4521() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %391 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %392 = @func_3409() /* ty=Tensor[(8, 13, 16), bool] */;
    %393 = %380.0;
    %394 = %383.3;
    %395 = %384.0;
    %396 = %389.0;
    %397 = %390.0;
    %398 = %391.1;
    (%392, %393, %394, %var_7862, %395, %396, %var_7885, meta[relay.Constant][12] /* ty=Tensor[(2, 1560), uint8] */, %397, %398)
  };
  %399(%var_7905, %var_7906) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */
}

def @func_3355(%var_3353: Tensor[(12, 140), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(3120), uint8], uint8, Tensor[(12, 140), float64], Tensor[(8, 13, 16), float32], Tensor[(12, 140), bool]) {
  @func_3352(%var_3353) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(3120), uint8], uint8, Tensor[(12, 140), float64], Tensor[(8, 13, 16), float32], Tensor[(12, 140), bool]) */
}

def @func_8015(%var_8013: Tensor[(7, 15, 14), float32], %var_8014: Tensor[(7, 15, 14), float32]) -> (Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) {
  @func_8011(%var_8013, %var_8014) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_6372() -> (Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %406 = fn () -> (Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
    %400 = @func_5167() /* ty=(Tensor[(168), float64],) */;
    %401 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %402 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
    %403 = %400.0;
    %404 = %401.1;
    %405 = %402.1;
    (%403, %404, %405)
  };
  %406() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_9082(%var_9070: Tensor[(10, 2, 3), bool]) -> Tensor[(10, 2, 3), bool] {
  %407 = cast(%var_9070, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %408 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 3), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 3), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%409, %410) /* ty=Tensor[(10, 2, 3), bool] */
}

def @func_8702() -> Tensor[(8, 13, 16), uint8] {
  @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_2473() -> Tensor[(8, 13, 16), uint8] {
  %411 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %411.0
}

def @func_8923() -> Tensor[(8, 13, 16), uint8] {
  @func_8921() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_1623() -> Tensor[(8, 13, 16), uint8] {
  %413 = fn () -> Tensor[(8, 13, 16), uint8] {
    %412 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
    %412.0
  };
  %413() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_897() -> (Tensor[(8, 13, 16), float32],) {
  %414 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %415 = %414.1;
  (%415,)
}

def @func_7824() -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %416 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %417 = @func_4328() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %418 = cast(meta[relay.Constant][14] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %419 = cast(meta[relay.Constant][14] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %420 = reshape(%418, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %421 = reshape(%419, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %422 = %416.1;
  %423 = %417.0;
  %424 = @func_248(%420, %421) /* ty=Tensor[(9, 14, 3), bool] */;
  (%422, %423, %424, meta[relay.Constant][14] /* ty=Tensor[(378), uint64] */)
}

def @func_722() -> (Tensor[(8, 13, 16), float32],) {
  @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_1682() -> (Tensor[(8, 13, 16), int64],) {
  %425 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %426 = %425.1;
  (%426,)
}

def @func_1183() -> Tensor[(8, 13, 16), uint8] {
  @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_202(%var_201: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
  %448 = fn (%var_177: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
    %427 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    %428 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %429 = %428.0;
    %430 = cast(%429, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
    %431 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%427, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %434 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %435 = cast(%var_177, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %436 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%429, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %439 = floor_divide(%437, %438) /* ty=Tensor[(8, 13, 16), float32] */;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %441 = shape_of(%var_177, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%var_177, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %444 = right_shift(%432, %433) /* ty=Tensor[(8, 13, 16), int64] */;
    %445 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    %446 = %434.0;
    %447 = minimum(%442, %443) /* ty=Tensor[(8, 13, 16), float64] */;
    (%444, %445, %446, %447)
  };
  %448(%var_201) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */
}

def @func_2957(%var_2956: Tensor[(3120), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), uint8]) {
  %460 = fn (%var_2938: Tensor[(3120), uint8]) -> (Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), uint8]) {
    %449 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
    %450 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
    %451 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %452 = cast(%var_2938, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %453 = reshape(%451, newshape=[]) /* ty=uint8 */;
    %454 = reshape(%452, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %455 = @func_813(%453, %454) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
    %456 = %449.0;
    %457 = %450.0;
    %458 = %455.1;
    %459 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%456, %457, %458, meta[relay.Constant][15] /* ty=uint8 */, %var_2938, %459)
  };
  %460(%var_2956) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_8704() -> Tensor[(8, 13, 16), uint8] {
  @func_8702() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_9548(%var_9546: Tensor[(10), uint64], %var_9547: Tensor[(120), uint64]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
  %473 = fn (%var_9540: Tensor[(10), uint64], %var_9541: Tensor[(120), uint64]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) {
    %461 = @func_8815() /* ty=(Tensor[(14, 6, 2), float64],) */;
    %462 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
    %463 = cast(%462, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
    %464 = reshape(%463, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
    %465 = cast(%var_9540, dtype="uint64") /* ty=Tensor[(10), uint64] */;
    %466 = cast(%var_9541, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %467 = reshape(%465, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
    %468 = reshape(%466, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint64] */;
    %469 = @func_6999(%467, %468) /* ty=(Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) */;
    %470 = %461.0;
    %471 = @func_3471(%464) /* ty=Tensor[(8, 13, 16), float32] */;
    %472 = %469.1;
    (%470, %462, %471, %472, %var_9540, %var_9541)
  };
  %473(%var_9546, %var_9547) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(1, 10, 1), float64], Tensor[(10), uint64], Tensor[(120), uint64]) */
}

def @main() -> (Tensor[(8, 4, 14), int32],) {
  %474 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %475 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %478 = bitwise_and(%476, %477) /* ty=Tensor[(8, 4, 14), int32] */;
  (%478,)
}

def @func_1502() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) {
  %494 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) {
    %479 = cast(meta[relay.Constant][18] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %480 = reshape(%479, newshape=[6, 63]) /* ty=Tensor[(6, 63), uint64] */;
    %481 = @func_487(%480) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */;
    %482 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %483 = %482.0;
    %484 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
    %485 = cast(%484, dtype="int8") /* ty=Tensor[(8, 13, 16), int8] */;
    %486 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %487 = cast(%483, dtype="int8") /* ty=Tensor[(8, 13, 16), int8] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %489 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
    %490 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    %491 = %481.0;
    %492 = add(%487, %488) /* ty=Tensor[(8, 13, 16), int8] */;
    %493 = %489.0;
    (%490, %491, meta[relay.Constant][18] /* ty=Tensor[(378), uint64] */, %492, %493)
  };
  %494() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */
}

def @func_4854() -> (Tensor[(8, 13, 16), float32],) {
  %495 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
  (%495,)
}

def @func_1949() -> (Tensor[(9, 14, 3), uint32], Tensor[(8, 13, 16), uint8]) {
  @func_1947() /* ty=(Tensor[(9, 14, 3), uint32], Tensor[(8, 13, 16), uint8]) */
}

def @func_5672() -> (Tensor[(8, 13, 16), float32],) {
  @func_5670() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_8991() -> (Tensor[(1664), float32], Tensor[(8, 13, 16), uint8]) {
  %502 = fn () -> (Tensor[(1664), float32], Tensor[(8, 13, 16), uint8]) {
    %496 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
    %497 = %496.3;
    %498 = cast(%497, dtype="float32") /* ty=Tensor[(1664), float32] */;
    %499 = @func_8593() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %500 = exp(%498) /* ty=Tensor[(1664), float32] */;
    %501 = %499.0;
    (%500, %501)
  };
  %502() /* ty=(Tensor[(1664), float32], Tensor[(8, 13, 16), uint8]) */
}

def @func_9047() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  @func_9045() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_9616() -> Tensor[(168), float64] {
  %503 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
  %503.0
}

def @func_4400() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
  %508 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
    %504 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %505 = %504.2;
    %506 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
    %507 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%505, %506, %507)
  };
  %508() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) */
}

def @func_9770() -> (Tensor[(14, 6, 2), float64],) {
  %511 = fn () -> (Tensor[(14, 6, 2), float64],) {
    %509 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(14, 6, 2), float64],) */
}

def @func_927() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_3235() -> (Tensor[(14, 6, 2), float64],) {
  %513 = fn () -> (Tensor[(14, 6, 2), float64],) {
    %512 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
    (%512,)
  };
  %513() /* ty=(Tensor[(14, 6, 2), float64],) */
}

def @func_7342() -> (Tensor[(8, 13, 16), uint8],) {
  %514 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %515 = %514.0;
  (%515,)
}

def @func_4902(%var_4900: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), float64],) {
  @func_4899(%var_4900) /* ty=(Tensor[(8, 13, 16), float64],) */
}

def @func_8654(%var_8642: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 14), float32], Tensor[(1470), bool]) {
  %516 = @func_3972() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %517 = cast(%var_8642, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %518 = cast(%var_8642, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %519 = reshape(%517, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %520 = reshape(%518, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %521 = @func_8011(%519, %520) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) */;
  %522 = cast(meta[relay.Constant][19] /* ty=Tensor[(1470), float32] */, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %523 = shape_of(%var_8642, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = cast(%var_8642, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?), bool] */;
  %526 = %516.0;
  %527 = %521.0;
  %528 = logical_and(%524, %525) /* ty=Tensor[(1470), bool] */;
  (%526, %527, %528)
}

def @func_3409() -> Tensor[(8, 13, 16), bool] {
  %529 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %531 = acos(%530) /* ty=Tensor[(8, 13, 16), float64] */;
  %532 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %533 = %532.2;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %535 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%531, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%536, %537) /* ty=Tensor[(8, 13, 16), bool] */
}

def @func_2787() -> (Tensor[(8, 13, 16), uint8],) {
  @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_7604(%var_7602: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) {
  @func_7601(%var_7602) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) */
}

def @func_6860() -> Tensor[(8, 13, 16), int8] {
  @func_6858() /* ty=Tensor[(8, 13, 16), int8] */
}

def @func_3136() -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %538 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %539 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %540 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %541 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %542 = %538.0;
  %543 = %539.5;
  %544 = %540.1;
  %545 = %541.2;
  (%542, %543, %544, %545)
}

def @func_3729() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
  %549 = fn () -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
    %546 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
    %547 = %546.0;
    %548 = @func_3058() /* ty=Tensor[(8, 13, 16), float32] */;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */
}

def @func_1769() -> (Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) {
  %550 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %551 = cast(meta[relay.Constant][20] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %552 = reshape(%551, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), float64] */;
  %553 = @func_1296(%552) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) */;
  %554 = %553.0;
  %555 = cast(meta[relay.Constant][20] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %559 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %560 = %550.0;
  %561 = floor_mod(%557, %558) /* ty=Tensor[(14, 5, 13), float64] */;
  %562 = %559.0;
  (%560, %561, %562)
}

def @func_4198() -> Tensor[(8, 13, 16), float32] {
  @func_4196() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5885(%var_5882: Tensor[(198), float64], %var_5883: Tensor[(3, 8, 14), float32], %var_5884: uint8) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) {
  @func_5880(%var_5882, %var_5883, %var_5884) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) */
}

def @func_4609() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
  @func_4607() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */
}

def @func_8154(%var_8152: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), float32], Tensor[(7, 15, 14), float32], Tensor[(1470), float32]) {
  %563 = cast(%var_8152, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %564 = cast(%var_8152, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %565 = reshape(%563, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %566 = reshape(%564, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float32] */;
  %567 = @func_8011(%565, %566) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(8, 13, 16), float32]) */;
  %568 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
  %569 = %567.0;
  (%568, %569, %var_8152)
}

def @func_7019() -> (Tensor[(168), float64],) {
  %571 = fn () -> (Tensor[(168), float64],) {
    %570 = @func_6889() /* ty=Tensor[(168), float64] */;
    (%570,)
  };
  %571() /* ty=(Tensor[(168), float64],) */
}

def @func_7601(%var_7589: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(1680), uint8], uint8, Tensor[(9, 11, 2), int16], Tensor[(198), float64]) {
  %572 = @func_7485() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %573 = cast(%var_7589, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %574 = cast(%var_7589, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %575 = cast(meta[relay.Constant][21] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %576 = reshape(%573, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %577 = reshape(%574, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %578 = reshape(%575, newshape=[]) /* ty=uint8 */;
  %579 = @func_2112(%576, %577, %578) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %580 = cast(meta[relay.Constant][22] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %581 = reshape(%580, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %582 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %583 = %572.0;
  %584 = %579.0;
  %585 = @func_5410(%581) /* ty=Tensor[(9, 11, 2), int16] */;
  (%582, %583, %584, %var_7589, meta[relay.Constant][21] /* ty=uint8 */, %585, meta[relay.Constant][22] /* ty=Tensor[(198), float64] */)
}

def @func_489(%var_488: Tensor[(6, 63), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
  %597 = fn (%var_472: Tensor[(6, 63), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
    %586 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %587 = cast(%var_472, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
    %588 = cast(%var_472, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
    %589 = reshape(%587, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
    %590 = reshape(%588, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
    %591 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %592 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %593 = %586.0;
    %594 = @func_248(%589, %590) /* ty=Tensor[(9, 14, 3), bool] */;
    %595 = %591.1;
    %596 = %592.0;
    (%593, %594, %var_472, %595, %596)
  };
  %597(%var_488) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool], Tensor[(6, 63), uint64], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) */
}

def @func_4294() -> (Tensor[(8, 13, 16), float64],) {
  %598 = @func_3715() /* ty=(Tensor[(8, 13, 16), float64],) */;
  %599 = %598.0;
  (%599,)
}

def @func_4776() -> (Tensor[(8, 13, 16), float32],) {
  @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_2201() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
  %600 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %601 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %602 = %600.5;
  %603 = @func_1396() /* ty=Tensor[(8, 13, 16), float32] */;
  %604 = %601.0;
  (%602, %603, %604)
}

def @func_4494() -> (Tensor[(8, 13, 16), uint8],) {
  %606 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %605 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%605,)
  };
  %606() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_3060() -> Tensor[(8, 13, 16), float32] {
  @func_3058() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_3641(%var_3639: Tensor[(3, 10, 13), float64]) -> (Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) {
  @func_3638(%var_3639) /* ty=(Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_2389() -> Tensor[(8, 13, 16), uint8] {
  @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_5140() -> (Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
  @func_5138() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) */
}

def @func_4539() -> (Tensor[(8, 13, 16), float32],) {
  %609 = fn () -> (Tensor[(8, 13, 16), float32],) {
    %607 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %608 = %607.0;
    (%608,)
  };
  %609() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_8241(%var_8239: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(1680), uint8], Tensor[(14, 6, 2), float32]) {
  @func_8238(%var_8239) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(1680), uint8], Tensor[(14, 6, 2), float32]) */
}

def @func_317() -> (Tensor[(8, 13, 16), uint8],) {
  %611 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %610 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%610,)
  };
  %611() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_3872(%var_3869: Tensor[(7, 15, 9), bool], %var_3870: Tensor[(7, 15, 9), bool], %var_3871: Tensor[(7, 15, 9), bool]) -> (Tensor[(7, 15, 9), bool], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 9), uint16]) {
  %625 = fn (%var_3834: Tensor[(7, 15, 9), bool], %var_3835: Tensor[(7, 15, 9), bool], %var_3852: Tensor[(7, 15, 9), bool]) -> (Tensor[(7, 15, 9), bool], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 9), uint16]) {
    %612 = cast(%var_3835, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
    %613 = shape_of(%var_3834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%var_3834, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %616 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
    %617 = cast(%var_3852, dtype="uint16") /* ty=Tensor[(7, 15, 9), uint16] */;
    %618 = shape_of(%var_3834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%var_3834, dtype="uint16") /* ty=Tensor[(7, 15, 9), uint16] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %621 = logical_and(%614, %615) /* ty=Tensor[(7, 15, 9), bool] */;
    %622 = %616.0;
    %623 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
    %624 = left_shift(%619, %620) /* ty=Tensor[(7, 15, 9), uint16] */;
    (%621, %622, %623, %624)
  };
  %625(%var_3869, %var_3870, %var_3871) /* ty=(Tensor[(7, 15, 9), bool], Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 9), uint16]) */
}

def @func_1516() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %630 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
    %626 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %627 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %628 = %626.0;
    %629 = %627.0;
    (%628, %629)
  };
  %630() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_4070(%var_4068: uint8) -> (Tensor[(8, 13, 16), float32], uint8, uint8, Tensor[(8, 13, 16), bool], Tensor[(840, 2), int32], Tensor[(8, 13, 16), float32]) {
  @func_4067(%var_4068) /* ty=(Tensor[(8, 13, 16), float32], uint8, uint8, Tensor[(8, 13, 16), bool], Tensor[(840, 2), int32], Tensor[(8, 13, 16), float32]) */
}

def @func_6521() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %636 = fn () -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
    %631 = @func_6253() /* ty=(Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
    %632 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %633 = %631.1;
    %634 = @func_2340() /* ty=Tensor[(8, 13, 16), float32] */;
    %635 = %632.0;
    (%633, %634, %635)
  };
  %636() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_9288() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64]) {
  @func_9286() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64]) */
}

def @func_5138() -> (Tensor[(8, 13, 16), uint8], Tensor[(378), uint64]) {
  %637 = @func_4493() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %638 = @func_5093() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */;
  %639 = %637.0;
  %640 = %638.2;
  (%639, %640)
}

def @func_6477(%var_6476: Tensor[(11, 3, 8), int16]) -> Tensor[(11, 3, 8), bool] {
  %645 = fn (%var_6470: Tensor[(11, 3, 8), int16]) -> Tensor[(11, 3, 8), bool] {
    %641 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 3, 8), int16] */, dtype="bool") /* ty=Tensor[(11, 3, 8), bool] */;
    %642 = shape_of(%var_6470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%var_6470, dtype="bool") /* ty=Tensor[(11, 3, 8), bool] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%643, %644) /* ty=Tensor[(11, 3, 8), bool] */
  };
  %645(%var_6476) /* ty=Tensor[(11, 3, 8), bool] */
}

def @func_848(%var_830: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) {
  %646 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %647 = %646.0;
  %648 = cast(%var_830, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = cast(meta[relay.Constant][24] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %653 = reshape(%652, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %654 = @func_578(%653) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %655 = cast(meta[relay.Constant][24] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %656 = reshape(%655, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %657 = @func_578(%656) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %658 = equal(%650, %651) /* ty=Tensor[(8, 13, 16), bool] */;
  %659 = %654.1;
  %660 = %657.2;
  (%658, %659, meta[relay.Constant][24] /* ty=Tensor[(378), uint64] */, %660)
}

def @func_3471(%var_3445: Tensor[(8, 13, 16), int64]) -> Tensor[(8, 13, 16), float32] {
  %661 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %662 = %661.0;
  %663 = cast(%var_3445, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%665, %666) /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_3800() -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  %667 = @func_2697() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %668 = cast(meta[relay.Constant][25] /* ty=Tensor[(420, 4), uint8] */, dtype="uint8") /* ty=Tensor[(420, 4), uint8] */;
  %669 = cast(meta[relay.Constant][25] /* ty=Tensor[(420, 4), uint8] */, dtype="uint8") /* ty=Tensor[(420, 4), uint8] */;
  %670 = cast(meta[relay.Constant][26] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %671 = reshape(%668, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %672 = reshape(%669, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %673 = reshape(%670, newshape=[]) /* ty=uint8 */;
  %674 = @func_2112(%671, %672, %673) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %675 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %676 = reshape(%675, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
  %677 = %667.1;
  %678 = %674.3;
  %679 = @func_752(%676) /* ty=Tensor[(14, 6, 2), float64] */;
  (%677, %678, meta[relay.Constant][25] /* ty=Tensor[(420, 4), uint8] */, meta[relay.Constant][26] /* ty=uint8 */, %679, meta[relay.Constant][27] /* ty=Tensor[(168), float64] */)
}

def @func_3974() -> (Tensor[(8, 13, 16), uint8],) {
  @func_3972() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_110() -> Tensor[(8, 13, 16), uint8] {
  @func_108() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_2902() -> (Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) {
  %680 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  %681 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
  (%680, %681)
}

def @func_451() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */
}

def @func_2699() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  @func_2697() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */
}

def @func_9921(%var_9920: Tensor[(5, 8, 8), float64]) -> Tensor[(5, 8, 8), float64] {
  %683 = fn (%var_9915: Tensor[(5, 8, 8), float64]) -> Tensor[(5, 8, 8), float64] {
    %682 = cast(%var_9915, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
    acos(%682) /* ty=Tensor[(5, 8, 8), float64] */
  };
  %683(%var_9920) /* ty=Tensor[(5, 8, 8), float64] */
}

def @func_5571() -> (Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(3120), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %684 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %685 = cast(meta[relay.Constant][29] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %686 = reshape(%684, newshape=[]) /* ty=uint8 */;
  %687 = reshape(%685, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %688 = @func_813(%686, %687) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */;
  %689 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %690 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %693 = reshape(%692, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %694 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  %695 = %688.0;
  %696 = %689.0;
  %697 = @func_3471(%693) /* ty=Tensor[(8, 13, 16), float32] */;
  (%694, %695, meta[relay.Constant][28] /* ty=uint8 */, meta[relay.Constant][29] /* ty=Tensor[(3120), uint8] */, %696, %691, %697)
}

def @func_7310() -> (Tensor[(8, 13, 16), uint8],) {
  %700 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %698 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %699 = %698.2;
    (%699,)
  };
  %700() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_636() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  %709 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
    %701 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %702 = %701.0;
    %703 = cast(%702, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %704 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %705 = %704.0;
    %706 = cast(%705, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %707 = erf(%703) /* ty=Tensor[(8, 13, 16), float32] */;
    %708 = atanh(%706) /* ty=Tensor[(8, 13, 16), float32] */;
    (%707, %708)
  };
  %709() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_353() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %710 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %711 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %712 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %713 = %712.0;
  %714 = cast(%713, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %715 = reshape(%714, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %716 = @func_200(%715) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %717 = %710.0;
  %718 = %711.0;
  %719 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %720 = %716.2;
  (%717, %718, %713, %719, %720)
}

def @func_4607() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8]) {
  %721 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %722 = @func_2609() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %723 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
  %724 = %721.0;
  %725 = %722.0;
  %726 = %723.0;
  (%724, %725, %726)
}

def @func_4156() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) {
  %727 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %728 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %729 = @func_2751() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
  %730 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  %731 = %727.2;
  %732 = %728.1;
  %733 = %729.0;
  (%730, %731, %732, %733)
}

def @func_7150() -> (Tensor[(8, 13, 16), float32],) {
  %736 = fn () -> (Tensor[(8, 13, 16), float32],) {
    %734 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %735 = %734.0;
    (%735,)
  };
  %736() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_4731(%var_4718: int32, %var_4719: Tensor[(9, 14, 1), int32]) -> Tensor[(9, 14, 1), bool] {
  %737 = cast(%var_4718, dtype="bool") /* ty=bool */;
  %738 = cast(%var_4719, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  greater(%737, %738) /* ty=Tensor[(9, 14, 1), bool] */
}

def @func_581(%var_579: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  @func_578(%var_579) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */
}

def @func_6795(%var_6792: Tensor[(6, 63), uint64], %var_6793: Tensor[(6, 63), uint64], %var_6794: Tensor[(6, 63), float64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(336), float32], Tensor[(198), float64], Tensor[(336), float32], uint8, Tensor[(6, 63), float32], Tensor[(6, 63), float32]) {
  %781 = fn (%var_6717: Tensor[(6, 63), uint64], %var_6726: Tensor[(6, 63), uint64], %var_6757: Tensor[(6, 63), float64]) -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(336), float32], Tensor[(198), float64], Tensor[(336), float32], uint8, Tensor[(6, 63), float32], Tensor[(6, 63), float32]) {
    %739 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %740 = @func_316() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %741 = cast(%var_6717, dtype="uint64") /* ty=Tensor[(6, 63), uint64] */;
    %742 = reshape(%741, newshape=[378]) /* ty=Tensor[(378), uint64] */;
    %743 = @func_578(%742) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %744 = @func_3136() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %745 = cast(meta[relay.Constant][30] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %746 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %747 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %748 = reshape(%745, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %749 = reshape(%746, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
    %750 = reshape(%747, newshape=[]) /* ty=uint8 */;
    %751 = @func_5880(%748, %749, %750) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(9, 11, 2), int16], Tensor[(198), float64], Tensor[(336), float32], Tensor[(3, 8, 14), uint32], Tensor[(14, 12, 10), int16], Tensor[(2, 840), uint8], uint8, Tensor[(8, 13, 16), bool]) */;
    %752 = cast(%var_6717, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
    %753 = exp(%752) /* ty=Tensor[(6, 63), float32] */;
    %754 = cast(%753, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
    %755 = sin(%754) /* ty=Tensor[(6, 63), float32] */;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
    %757 = cast(%var_6726, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
    %758 = shape_of(%var_6717, dtype="int32") /* ty=Tensor[(2), int32] */;
    %759 = cast(%var_6717, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %761 = mod(%759, %760) /* ty=Tensor[(6, 63), float64] */;
    %762 = cast(%761, dtype="float64") /* ty=Tensor[(6, 63), float64] */;
    %763 = erf(%762) /* ty=Tensor[(6, 63), float64] */;
    %764 = cast(%var_6757, dtype="int16") /* ty=Tensor[(6, 63), int16] */;
    %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(2), int32] */;
    %766 = cast(%763, dtype="int16") /* ty=Tensor[(6, 63), int16] */;
    %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %768 = logical_xor(%766, %767) /* ty=Tensor[(6, 63), int16] */;
    %769 = cast(%768, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
    %770 = shape_of(%755, dtype="int32") /* ty=Tensor[(2), int32] */;
    %771 = cast(%755, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %773 = %739.0;
    %774 = %740.0;
    %775 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
    %776 = %743.3;
    %777 = %744.1;
    %778 = %751.5;
    %779 = sinh(%756) /* ty=Tensor[(6, 63), float32] */;
    %780 = subtract(%771, %772) /* ty=Tensor[(6, 63), float32] */;
    (%773, %774, %775, %776, %777, %778, meta[relay.Constant][30] /* ty=Tensor[(198), float64] */, meta[relay.Constant][31] /* ty=Tensor[(336), float32] */, meta[relay.Constant][32] /* ty=uint8 */, %779, %780)
  };
  %781(%var_6792, %var_6793, %var_6794) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(336), float32], Tensor[(198), float64], Tensor[(336), float32], uint8, Tensor[(6, 63), float32], Tensor[(6, 63), float32]) */
}

def @func_9757() -> (Tensor[(168), float64],) {
  %783 = fn () -> (Tensor[(168), float64],) {
    %782 = @func_9616() /* ty=Tensor[(168), float64] */;
    (%782,)
  };
  %783() /* ty=(Tensor[(168), float64],) */
}

def @func_50() -> (Tensor[(8, 13, 16), uint8],) {
  %795 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %784 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %785 = cos(%784) /* ty=Tensor[(8, 13, 16), float64] */;
    %786 = cast(%785, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %787 = exp(%786) /* ty=Tensor[(8, 13, 16), float32] */;
    %788 = cast(%787, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
    %789 = tan(%788) /* ty=Tensor[(8, 13, 16), float32] */;
    %790 = cast(%789, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %791 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%787, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %794 = logical_xor(%792, %793) /* ty=Tensor[(8, 13, 16), uint8] */;
    (%794,)
  };
  %795() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_6446(%var_6445: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) {
  %810 = fn (%var_6435: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) {
    %796 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %797 = @func_4294() /* ty=(Tensor[(8, 13, 16), float64],) */;
    %798 = %797.0;
    %799 = cast(%798, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %800 = reshape(%799, newshape=[1664]) /* ty=Tensor[(1664), uint8] */;
    %801 = @func_3500(%800) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) */;
    %802 = cast(%var_6435, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %803 = reshape(%802, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
    %804 = @func_5495(%803) /* ty=(Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) */;
    %805 = @func_4538() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %806 = %796.0;
    %807 = %801.0;
    %808 = %804.3;
    %809 = %805.0;
    (%806, %798, %807, %808, %var_6435, %809)
  };
  %810(%var_6445) /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) */
}

def @func_2751() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
  %811 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %812 = @func_2290() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(378), float64]) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %815 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %816 = %811.0;
  %817 = cosh(%814) /* ty=Tensor[(8, 13, 16), float64] */;
  %818 = %815.0;
  (%816, %817, %818)
}

def @func_449() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  %819 = @func_49() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %820 = %819.0;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %822 = cast(%820, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %823 = reshape(%822, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %824 = @func_200(%823) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
  %825 = cast(meta[relay.Constant][34] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %826 = cast(meta[relay.Constant][34] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %827 = reshape(%825, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %828 = reshape(%826, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), uint64] */;
  %829 = asinh(%821) /* ty=Tensor[(8, 13, 16), float32] */;
  %830 = %824.0;
  %831 = @func_248(%827, %828) /* ty=Tensor[(9, 14, 3), bool] */;
  (%829, %830, %831, meta[relay.Constant][34] /* ty=Tensor[(378), uint64] */)
}

def @func_3211(%var_3209: Tensor[(3, 4, 2), float64], %var_3210: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), float64], Tensor[(3, 4, 2), int64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
  @func_3207(%var_3209, %var_3210) /* ty=(Tensor[(3, 4, 2), float64], Tensor[(3, 4, 2), int64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */
}

def @func_1910() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
  %837 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) {
    %832 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
    %833 = cast(%832, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
    %834 = reshape(%833, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %835 = @func_200(%834) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
    %836 = %835.2;
    (%832, %836)
  };
  %837() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */
}

def @func_2290() -> (Tensor[(8, 13, 16), bool], Tensor[(378), float64]) {
  %838 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
  %839 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
  %840 = %839.2;
  %841 = cast(%840, dtype="float64") /* ty=Tensor[(378), float64] */;
  %842 = %838.1;
  %843 = sigmoid(%841) /* ty=Tensor[(378), float64] */;
  (%842, %843)
}

def @func_2697() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) {
  %844 = @func_1067() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), bool]) */;
  %845 = @func_2473() /* ty=Tensor[(8, 13, 16), uint8] */;
  %846 = %844.2;
  (%845, %846)
}

def @func_3502(%var_3501: Tensor[(1664), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
  %853 = fn (%var_3484: Tensor[(1664), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) {
    %847 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %848 = cast(%var_3484, dtype="uint8") /* ty=Tensor[(1664), uint8] */;
    %849 = reshape(%848, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
    %850 = @func_200(%849) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */;
    %851 = %847.1;
    %852 = %850.2;
    (%851, %852, %var_3484)
  };
  %853(%var_3501) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(1664), uint8]) */
}

def @func_8517() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64]) {
  %860 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64]) {
    %854 = @func_7543() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */;
    %855 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %856 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
    %857 = %854.1;
    %858 = %855.0;
    %859 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
    (%856, %857, %858, %859)
  };
  %860() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64]) */
}

def @func_1109() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
  @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */
}

def @func_2537(%var_2535: Tensor[(1, 13), int32], %var_2536: Tensor[(1, 13), int32]) -> Tensor[(?, 13), int32] {
  %865 = fn (%var_2529: Tensor[(1, 13), int32], %var_2530: Tensor[(1, 13), int32]) -> Tensor[(?, 13), int32] {
    %861 = cast(%var_2530, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
    %862 = shape_of(%var_2529, dtype="int32") /* ty=Tensor[(2), int32] */;
    %863 = cast(%var_2529, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    right_shift(%863, %864) /* ty=Tensor[(?, 13), int32] */
  };
  %865(%var_2535, %var_2536) /* ty=Tensor[(?, 13), int32] */
}

def @func_3802() -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  @func_3800() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */
}

def @func_9052() -> Tensor[(14, 6, 2), float64] {
  %866 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %866.0
}

def @func_899() -> (Tensor[(8, 13, 16), float32],) {
  @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_2523() -> (Tensor[(8, 13, 16), bool],) {
  %867 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %868 = %867.1;
  %869 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
  %870 = %869.2;
  %871 = cast(%870, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  %872 = log2(%871) /* ty=Tensor[(8, 13, 16), float64] */;
  %873 = cast(%872, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %874 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%868, dtype="bool") /* ty=Tensor[(8, 13, 16), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %877 = logical_and(%875, %876) /* ty=Tensor[(8, 13, 16), bool] */;
  (%877,)
}

def @func_1771() -> (Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) {
  @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_3268() -> (Tensor[(8, 13, 16), uint8],) {
  %879 = fn () -> (Tensor[(8, 13, 16), uint8],) {
    %878 = @func_1622() /* ty=Tensor[(8, 13, 16), uint8] */;
    (%878,)
  };
  %879() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_3574(%var_3573: Tensor[(7, 2, 5), bool]) -> (Tensor[(7, 2, 5), bool],) {
  %885 = fn (%var_3558: Tensor[(7, 2, 5), bool]) -> (Tensor[(7, 2, 5), bool],) {
    %880 = cast(%var_3558, dtype="bool") /* ty=Tensor[(7, 2, 5), bool] */;
    %881 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 2, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %882 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 2, 5), bool] */, dtype="bool") /* ty=Tensor[(7, 2, 5), bool] */;
    %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %884 = logical_or(%882, %883) /* ty=Tensor[(7, 2, 5), bool] */;
    (%884,)
  };
  %885(%var_3573) /* ty=(Tensor[(7, 2, 5), bool],) */
}

def @func_2387() -> Tensor[(8, 13, 16), uint8] {
  @func_108() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_1107() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) {
  %886 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %887 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %888 = %886.4;
  %889 = %887.1;
  (%888, %889)
}

def @func_2292() -> (Tensor[(8, 13, 16), bool], Tensor[(378), float64]) {
  @func_2290() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(378), float64]) */
}

def @func_1684() -> (Tensor[(8, 13, 16), int64],) {
  @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */
}

def @func_2203() -> (Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) {
  @func_2201() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) */
}

def @func_8299(%var_8297: bool, %var_8298: Tensor[(1, 8, 14), bool]) -> (Tensor[(1, 8, 14), bool], Tensor[(1, 8, 14), float32]) {
  %895 = fn (%var_8273: bool, %var_8274: Tensor[(1, 8, 14), bool]) -> (Tensor[(1, 8, 14), bool], Tensor[(1, 8, 14), float32]) {
    %890 = cast(%var_8273, dtype="bool") /* ty=bool */;
    %891 = cast(%var_8274, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
    %892 = cast(%var_8274, dtype="float32") /* ty=Tensor[(1, 8, 14), float32] */;
    %893 = logical_or(%890, %891) /* ty=Tensor[(1, 8, 14), bool] */;
    %894 = asinh(%892) /* ty=Tensor[(1, 8, 14), float32] */;
    (%893, %894)
  };
  %895(%var_8297, %var_8298) /* ty=(Tensor[(1, 8, 14), bool], Tensor[(1, 8, 14), float32]) */
}

def @func_5947(%var_5945: Tensor[(1680), uint8], %var_5946: Tensor[(390), float64]) -> (Tensor[(14, 6, 2), float64], Tensor[(1680), uint8], uint8, Tensor[(8, 13, 16), uint8], Tensor[(390), float32]) {
  %913 = fn (%var_5919: Tensor[(1680), uint8], %var_5929: Tensor[(390), float64]) -> (Tensor[(14, 6, 2), float64], Tensor[(1680), uint8], uint8, Tensor[(8, 13, 16), uint8], Tensor[(390), float32]) {
    %896 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
    %897 = cast(%var_5929, dtype="float64") /* ty=Tensor[(390), float64] */;
    %898 = reshape(%897, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float64] */;
    %899 = @func_3638(%898) /* ty=(Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) */;
    %900 = cast(%var_5919, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %901 = cast(%var_5919, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %902 = cast(meta[relay.Constant][36] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %903 = reshape(%900, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
    %904 = reshape(%901, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
    %905 = reshape(%902, newshape=[]) /* ty=uint8 */;
    %906 = @func_2112(%903, %904, %905) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
    %907 = %906.1;
    %908 = cast(%907, dtype="float32") /* ty=float32 */;
    %909 = cast(%var_5929, dtype="float32") /* ty=Tensor[(390), float32] */;
    %910 = %896.0;
    %911 = %899.1;
    %912 = mod(%908, %909) /* ty=Tensor[(390), float32] */;
    (%910, %var_5919, meta[relay.Constant][36] /* ty=uint8 */, %911, %912)
  };
  %913(%var_5945, %var_5946) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(1680), uint8], uint8, Tensor[(8, 13, 16), uint8], Tensor[(390), float32]) */
}

def @func_4067(%var_4019: uint8) -> (Tensor[(8, 13, 16), float32], uint8, uint8, Tensor[(8, 13, 16), bool], Tensor[(840, 2), int32], Tensor[(8, 13, 16), float32]) {
  %914 = cast(meta[relay.Constant][37] /* ty=Tensor[(840, 2), uint8] */, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %915 = cast(meta[relay.Constant][37] /* ty=Tensor[(840, 2), uint8] */, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %916 = cast(%var_4019, dtype="uint8") /* ty=uint8 */;
  %917 = reshape(%914, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %918 = reshape(%915, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %919 = reshape(%916, newshape=[]) /* ty=uint8 */;
  %920 = @func_2112(%917, %918, %919) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %921 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %922 = cast(meta[relay.Constant][37] /* ty=Tensor[(840, 2), uint8] */, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %923 = atan(%922) /* ty=Tensor[(840, 2), float64] */;
  %924 = cast(%923, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %925 = sin(%924) /* ty=Tensor[(840, 2), float64] */;
  %926 = cast(%925, dtype="int32") /* ty=Tensor[(840, 2), int32] */;
  %927 = shape_of(%923, dtype="int32") /* ty=Tensor[(2), int32] */;
  %928 = cast(%923, dtype="int32") /* ty=Tensor[(840, 2), int32] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %930 = @func_3608() /* ty=Tensor[(8, 13, 16), float32] */;
  %931 = %920.1;
  %932 = %921.0;
  %933 = bitwise_or(%928, %929) /* ty=Tensor[(840, 2), int32] */;
  %934 = @func_2912() /* ty=Tensor[(8, 13, 16), float32] */;
  (%930, %931, %var_4019, %932, %933, %934)
}

def @func_7544() -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
  %939 = fn () -> (Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) {
    %935 = @func_2902() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %936 = @func_1769() /* ty=(Tensor[(8, 13, 16), int64], Tensor[(14, 5, 13), float64], Tensor[(8, 13, 16), uint8]) */;
    %937 = %935.1;
    %938 = %936.2;
    (%937, %938)
  };
  %939() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_6039() -> (Tensor[(168), float64],) {
  %940 = @func_1016() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
  %941 = %940.5;
  (%941,)
}

def @func_2441() -> Tensor[(8, 13, 16), float32] {
  @func_2439() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_3207(%var_3180: Tensor[(3, 4, 2), float64], %var_3181: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), float64], Tensor[(3, 4, 2), int64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) {
  %942 = cast(%var_3181, dtype="float64") /* ty=Tensor[(3, 4, 2), float64] */;
  %943 = shape_of(%var_3180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_3180, dtype="float64") /* ty=Tensor[(3, 4, 2), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %946 = cast(%var_3180, dtype="int64") /* ty=Tensor[(3, 4, 2), int64] */;
  %947 = shape_of(%var_3181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%var_3181, dtype="int64") /* ty=Tensor[(3, 4, 2), int64] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %950 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
  %951 = floor_divide(%944, %945) /* ty=Tensor[(3, 4, 2), float64] */;
  %952 = right_shift(%948, %949) /* ty=Tensor[(3, 4, 2), int64] */;
  %953 = @func_2340() /* ty=Tensor[(8, 13, 16), float32] */;
  %954 = %950.0;
  (%951, %952, %953, %954)
}

def @func_9118() -> (Tensor[(8, 13, 16), float32],) {
  @func_9116() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_8816() -> (Tensor[(14, 6, 2), float64],) {
  %956 = fn () -> (Tensor[(14, 6, 2), float64],) {
    %955 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
    (%955,)
  };
  %956() /* ty=(Tensor[(14, 6, 2), float64],) */
}

def @func_2785() -> (Tensor[(8, 13, 16), uint8],) {
  %957 = @func_108() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%957,)
}

def @func_3638(%var_3632: Tensor[(3, 10, 13), float64]) -> (Tensor[(3, 10, 13), float64], Tensor[(8, 13, 16), uint8]) {
  %958 = cast(%var_3632, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %959 = log2(%958) /* ty=Tensor[(3, 10, 13), float64] */;
  %960 = @func_1181() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%959, %960)
}

def @func_1947() -> (Tensor[(9, 14, 3), uint32], Tensor[(8, 13, 16), uint8]) {
  %961 = @func_449() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), int64], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
  %962 = %961.2;
  %963 = cast(%962, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %964 = cos(%963) /* ty=Tensor[(9, 14, 3), float64] */;
  %965 = cast(%964, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %966 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %967 = cast(%962, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %969 = divide(%967, %968) /* ty=Tensor[(9, 14, 3), float64] */;
  %970 = cast(%964, dtype="uint32") /* ty=Tensor[(9, 14, 3), uint32] */;
  %971 = shape_of(%969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %972 = cast(%969, dtype="uint32") /* ty=Tensor[(9, 14, 3), uint32] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %974 = @func_1909() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %975 = left_shift(%972, %973) /* ty=Tensor[(9, 14, 3), uint32] */;
  %976 = %974.0;
  (%975, %976)
}

def @func_7276() -> Tensor[(8, 13, 16), uint8] {
  %977 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %977.4
}

def @func_5670() -> (Tensor[(8, 13, 16), float32],) {
  %978 = @func_4374() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) */;
  %979 = %978.1;
  (%979,)
}

def @func_4261(%var_4259: Tensor[(168), float64], %var_4260: Tensor[(14, 12, 10), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) {
  %990 = fn (%var_4225: Tensor[(168), float64], %var_4230: Tensor[(14, 12, 10), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) {
    %980 = cast(%var_4225, dtype="float64") /* ty=Tensor[(168), float64] */;
    %981 = reshape(%980, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
    %982 = @func_3800() /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), uint8], Tensor[(420, 4), uint8], uint8, Tensor[(14, 6, 2), float64], Tensor[(168), float64]) */;
    %983 = %982.1;
    %984 = cast(%var_4230, dtype="uint64") /* ty=Tensor[(14, 12, 10), uint64] */;
    %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(3), int32] */;
    %986 = cast(%983, dtype="uint64") /* ty=Tensor[(14, 12, 10), uint64] */;
    %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %988 = @func_752(%981) /* ty=Tensor[(14, 6, 2), float64] */;
    %989 = maximum(%986, %987) /* ty=Tensor[(14, 12, 10), uint64] */;
    (%988, %var_4225, %989)
  };
  %990(%var_4259, %var_4260) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) */
}

def @func_4374() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32]) {
  %991 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %992 = @func_3620() /* ty=Tensor[(8, 13, 16), float32] */;
  (%991, %992)
}

def @func_9116() -> (Tensor[(8, 13, 16), float32],) {
  %993 = @func_2439() /* ty=Tensor[(8, 13, 16), float32] */;
  (%993,)
}

def @func_8921() -> Tensor[(8, 13, 16), uint8] {
  %994 = @func_353() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %994.1
}

def @func_5363() -> (Tensor[(168), float64],) {
  %995 = @func_5167() /* ty=(Tensor[(168), float64],) */;
  %996 = %995.0;
  (%996,)
}

def @func_5094() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) {
  %1003 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) {
    %997 = @func_4774() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %998 = cast(meta[relay.Constant][38] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %999 = reshape(%998, newshape=[378]) /* ty=Tensor[(378), uint64] */;
    %1000 = @func_578(%999) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */;
    %1001 = %997.0;
    %1002 = %1000.3;
    (%1001, %1002, meta[relay.Constant][38] /* ty=Tensor[(378), uint64] */)
  };
  %1003() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(378), uint64]) */
}

def @func_5365() -> (Tensor[(168), float64],) {
  @func_5363() /* ty=(Tensor[(168), float64],) */
}

def @func_8593() -> (Tensor[(8, 13, 16), uint8],) {
  %1004 = @func_2473() /* ty=Tensor[(8, 13, 16), uint8] */;
  (%1004,)
}

def @func_9676() -> (Tensor[(9, 11, 2), float64],) {
  %1006 = fn () -> (Tensor[(9, 11, 2), float64],) {
    %1005 = @func_4747() /* ty=Tensor[(9, 11, 2), float64] */;
    (%1005,)
  };
  %1006() /* ty=(Tensor[(9, 11, 2), float64],) */
}

def @func_9154() -> (Tensor[(8, 13, 16), float32],) {
  %1008 = fn () -> (Tensor[(8, 13, 16), float32],) {
    %1007 = @func_4196() /* ty=Tensor[(8, 13, 16), float32] */;
    (%1007,)
  };
  %1008() /* ty=(Tensor[(8, 13, 16), float32],) */
}

def @func_9406() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64]) {
  %1013 = fn () -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64]) {
    %1009 = @func_1107() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), float32]) */;
    %1010 = @func_7504() /* ty=(Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */;
    %1011 = %1009.1;
    %1012 = %1010.0;
    (%1011, %1012)
  };
  %1013() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64]) */
}

def @func_6008() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) {
  @func_6006() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) */
}

def @func_9054() -> Tensor[(14, 6, 2), float64] {
  @func_9052() /* ty=Tensor[(14, 6, 2), float64] */
}

def @func_2439() -> Tensor[(8, 13, 16), float32] {
  %1014 = @func_2387() /* ty=Tensor[(8, 13, 16), uint8] */;
  %1015 = cast(%1014, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  sin(%1015) /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5497(%var_5496: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) {
  %1026 = fn (%var_5486: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) {
    %1016 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
    %1017 = cast(%var_5486, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %1018 = cast(%var_5486, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %1019 = cast(meta[relay.Constant][39] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %1020 = reshape(%1017, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
    %1021 = reshape(%1018, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
    %1022 = reshape(%1019, newshape=[]) /* ty=uint8 */;
    %1023 = @func_2112(%1020, %1021, %1022) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
    %1024 = %1016.0;
    %1025 = %1023.1;
    (%1024, %1025, %var_5486, meta[relay.Constant][39] /* ty=uint8 */)
  };
  %1026(%var_5496) /* ty=(Tensor[(8, 13, 16), bool], uint8, Tensor[(1680), uint8], uint8) */
}

def @func_1266(%var_1265: Tensor[(8, 13, 16), uint8]) -> Tensor[(8, 13, 16), uint64] {
  %1033 = fn (%var_1251: Tensor[(8, 13, 16), uint8]) -> Tensor[(8, 13, 16), uint64] {
    %1027 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %1028 = %1027.0;
    %1029 = cast(%var_1251, dtype="uint64") /* ty=Tensor[(8, 13, 16), uint64] */;
    %1030 = shape_of(%1028, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1031 = cast(%1028, dtype="uint64") /* ty=Tensor[(8, 13, 16), uint64] */;
    %1032 = dyn.reshape(%1029, %1030, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_and(%1031, %1032) /* ty=Tensor[(8, 13, 16), uint64] */
  };
  %1033(%var_1265) /* ty=Tensor[(8, 13, 16), uint64] */
}

def @func_6006() -> (Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint64], Tensor[(8, 13, 16), uint8]) {
  %1034 = @func_4196() /* ty=Tensor[(8, 13, 16), float32] */;
  %1035 = cast(%1034, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %1036 = reshape(%1035, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %1037 = @func_2785() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1038 = @func_1264(%1036) /* ty=Tensor[(8, 13, 16), uint64] */;
  %1039 = %1037.0;
  (%1034, %1038, %1039)
}

def @func_9338(%var_9337: Tensor[(3, 20), bool]) -> (Tensor[(378), uint64], Tensor[(3, 20), bool], Tensor[(14, 6, 2), float64], Tensor[(10, 2, 3), uint64]) {
  %1053 = fn (%var_9298: Tensor[(3, 20), bool]) -> (Tensor[(378), uint64], Tensor[(3, 20), bool], Tensor[(14, 6, 2), float64], Tensor[(10, 2, 3), uint64]) {
    %1040 = @func_8884() /* ty=(Tensor[(378), uint64], Tensor[(8, 13, 16), uint8], Tensor[(9, 14, 3), bool]) */;
    %1041 = cast(%var_9298, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %1042 = reshape(%1041, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), bool] */;
    %1043 = @func_9082(%1042) /* ty=Tensor[(10, 2, 3), bool] */;
    %1044 = cast(%1043, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
    %1045 = sqrt(%1044) /* ty=Tensor[(10, 2, 3), float64] */;
    %1046 = cast(%1043, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
    %1047 = shape_of(%1045, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1048 = cast(%1045, dtype="uint64") /* ty=Tensor[(10, 2, 3), uint64] */;
    %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1050 = %1040.0;
    %1051 = @func_2574() /* ty=Tensor[(14, 6, 2), float64] */;
    %1052 = add(%1048, %1049) /* ty=Tensor[(10, 2, 3), uint64] */;
    (%1050, %var_9298, %1051, %1052)
  };
  %1053(%var_9337) /* ty=(Tensor[(378), uint64], Tensor[(3, 20), bool], Tensor[(14, 6, 2), float64], Tensor[(10, 2, 3), uint64]) */
}

def @func_6255() -> (Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) {
  @func_6253() /* ty=(Tensor[(168), float64], Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64]) */
}

def @func_6549() -> (Tensor[(8, 13, 16), float64],) {
  %1056 = fn () -> (Tensor[(8, 13, 16), float64],) {
    %1054 = @func_4984() /* ty=(Tensor[(8, 13, 16), float64],) */;
    %1055 = %1054.0;
    (%1055,)
  };
  %1056() /* ty=(Tensor[(8, 13, 16), float64],) */
}

def @func_3621() -> Tensor[(8, 13, 16), float32] {
  %1057 = fn () -> Tensor[(8, 13, 16), float32] {
    @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
  };
  %1057() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_720() -> (Tensor[(8, 13, 16), float32],) {
  %1058 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1059 = %1058.1;
  (%1059,)
}

def @func_816(%var_814: uint8, %var_815: Tensor[(15, 16, 13), uint8]) -> (Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) {
  %1070 = fn (%var_765: uint8, %var_766: Tensor[(15, 16, 13), uint8]) -> (Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) {
    %1060 = cast(%var_765, dtype="bool") /* ty=bool */;
    %1061 = cast(%var_766, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
    %1062 = less_equal(%1060, %1061) /* ty=Tensor[(15, 16, 13), bool] */;
    %1063 = cast(%1062, dtype="float64") /* ty=Tensor[(15, 16, 13), float64] */;
    %1064 = cosh(%1063) /* ty=Tensor[(15, 16, 13), float64] */;
    %1065 = cast(%1064, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
    %1066 = cast(%var_765, dtype="bool") /* ty=bool */;
    %1067 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
    %1068 = logical_and(%1065, %1066) /* ty=Tensor[(15, 16, 13), bool] */;
    %1069 = %1067.1;
    (%1068, %1069)
  };
  %1070(%var_814, %var_815) /* ty=(Tensor[(15, 16, 13), bool], Tensor[(8, 13, 16), float32]) */
}

def @func_1181() -> Tensor[(8, 13, 16), uint8] {
  @func_108() /* ty=Tensor[(8, 13, 16), uint8] */
}

def @func_3972() -> (Tensor[(8, 13, 16), uint8],) {
  %1071 = @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1072 = %1071.0;
  (%1072,)
}

def @func_2137() -> (Tensor[(8, 13, 16), uint8],) {
  @func_2135() /* ty=(Tensor[(8, 13, 16), uint8],) */
}

def @func_1016() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32], Tensor[(14, 6, 2), float64], Tensor[(168), float64]) {
  %1073 = @func_925() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
  %1074 = @func_635() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1075 = %1074.1;
  %1076 = cast(%1075, dtype="uint8") /* ty=Tensor[(8, 13, 16), uint8] */;
  %1077 = reshape(%1076, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), uint8] */;
  %1078 = @func_848(%1077) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */;
  %1079 = @func_897() /* ty=(Tensor[(8, 13, 16), float32],) */;
  %1080 = cast(%1075, dtype="float32") /* ty=Tensor[(8, 13, 16), float32] */;
  %1081 = cast(meta[relay.Constant][40] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %1082 = reshape(%1081, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), float64] */;
  %1083 = %1073.1;
  %1084 = %1078.3;
  %1085 = %1079.0;
  %1086 = sigmoid(%1080) /* ty=Tensor[(8, 13, 16), float32] */;
  %1087 = @func_752(%1082) /* ty=Tensor[(14, 6, 2), float64] */;
  (%1083, %1084, %1085, %1086, %1087, meta[relay.Constant][40] /* ty=Tensor[(168), float64] */)
}

def @func_755(%var_753: Tensor[(14, 6, 2), float64]) -> Tensor[(14, 6, 2), float64] {
  @func_752(%var_753) /* ty=Tensor[(14, 6, 2), float64] */
}

def @func_1298(%var_1297: Tensor[(14, 5, 13), float64]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) {
  %1100 = fn (%var_1276: Tensor[(14, 5, 13), float64]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) {
    %1088 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
    %1089 = shape_of(%var_1276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1090 = cast(%var_1276, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
    %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1092 = floor_divide(%1090, %1091) /* ty=Tensor[(14, 5, 13), float64] */;
    %1093 = cast(%1092, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
    %1094 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1095 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 5, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
    %1096 = dyn.reshape(%1093, %1094, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1097 = cast(%1092, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
    %1098 = less_equal(%1095, %1096) /* ty=Tensor[(14, 5, 13), bool] */;
    %1099 = log(%1097) /* ty=Tensor[(14, 5, 13), float32] */;
    (%1098, %1099)
  };
  %1100(%var_1297) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 13), float32]) */
}

def @func_3173(%var_3171: Tensor[(8, 13, 16), uint8], %var_3172: Tensor[(378), uint64]) -> (Tensor[(8, 13, 16), bool], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) {
  @func_3169(%var_3171, %var_3172) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(9, 14, 3), bool], Tensor[(378), uint64]) */
}

def @func_3716() -> (Tensor[(8, 13, 16), float64],) {
  %1105 = fn () -> (Tensor[(8, 13, 16), float64],) {
    %1101 = @func_1501() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), int8], Tensor[(8, 13, 16), uint8]) */;
    %1102 = %1101.3;
    %1103 = cast(%1102, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    %1104 = atan(%1103) /* ty=Tensor[(8, 13, 16), float64] */;
    (%1104,)
  };
  %1105() /* ty=(Tensor[(8, 13, 16), float64],) */
}

def @func_6890() -> Tensor[(168), float64] {
  %1107 = fn () -> Tensor[(168), float64] {
    %1106 = @func_6371() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8]) */;
    %1106.0
  };
  %1107() /* ty=Tensor[(168), float64] */
}

def @func_5642(%var_5639: Tensor[(6, 28), float64], %var_5640: Tensor[(1680), uint8], %var_5641: Tensor[(6, 28), float64]) -> (Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(1680), uint8], Tensor[(6, 28), float32]) {
  %1121 = fn (%var_5594: Tensor[(6, 28), float64], %var_5595: Tensor[(1680), uint8], %var_5631: Tensor[(6, 28), float64]) -> (Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(1680), uint8], Tensor[(6, 28), float32]) {
    %1108 = @func_2016() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), bool]) */;
    %1109 = cast(%var_5594, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
    %1110 = cast(%var_5595, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
    %1111 = reshape(%1109, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %1112 = reshape(%1110, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
    %1113 = @func_4258(%1111, %1112) /* ty=(Tensor[(14, 6, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 10), uint64]) */;
    %1114 = cast(%var_5631, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1115 = shape_of(%var_5594, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1116 = cast(%var_5594, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1118 = %1108.0;
    %1119 = %1113.1;
    %1120 = minimum(%1116, %1117) /* ty=Tensor[(6, 28), float32] */;
    (%1118, %1119, %var_5595, %1120)
  };
  %1121(%var_5639, %var_5640, %var_5641) /* ty=(Tensor[(8, 13, 16), float32], Tensor[(168), float64], Tensor[(1680), uint8], Tensor[(6, 28), float32]) */
}

def @func_4716(%var_4714: Tensor[(84, 20), uint8], %var_4715: uint8) -> (Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) {
  @func_4712(%var_4714, %var_4715) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 12, 10), int16], Tensor[(8, 13, 16), float32], Tensor[(84, 20), int16]) */
}

def @func_7002(%var_7000: Tensor[(1, 10, 1), uint64], %var_7001: Tensor[(1, 10, 12), uint64]) -> (Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) {
  %1137 = fn (%var_6966: Tensor[(1, 10, 1), uint64], %var_6967: Tensor[(1, 10, 12), uint64]) -> (Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) {
    %1122 = cast(%var_6966, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
    %1123 = cast(%var_6967, dtype="bool") /* ty=Tensor[(1, 10, 12), bool] */;
    %1124 = equal(%1122, %1123) /* ty=Tensor[(1, 10, 12), bool] */;
    %1125 = cast(%var_6967, dtype="float64") /* ty=Tensor[(1, 10, 12), float64] */;
    %1126 = shape_of(%1124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1127 = cast(%1124, dtype="float64") /* ty=Tensor[(1, 10, 12), float64] */;
    %1128 = dyn.reshape(%1125, %1126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1129 = cast(%var_6966, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    %1130 = cast(meta[relay.Constant][42] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
    %1131 = cast(meta[relay.Constant][42] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
    %1132 = reshape(%1130, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %1133 = reshape(%1131, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %1134 = power(%1127, %1128) /* ty=Tensor[(?, 10, 12), float64] */;
    %1135 = sigmoid(%1129) /* ty=Tensor[(1, 10, 1), float64] */;
    %1136 = @func_2534(%1132, %1133) /* ty=Tensor[(?, 13), int32] */;
    (%1134, %1135, %1136, meta[relay.Constant][42] /* ty=Tensor[(13), int32] */)
  };
  %1137(%var_7000, %var_7001) /* ty=(Tensor[(?, 10, 12), float64], Tensor[(1, 10, 1), float64], Tensor[(?, 13), int32], Tensor[(13), int32]) */
}

def @func_7505() -> (Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
  %1142 = fn () -> (Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) {
    %1138 = @func_6548() /* ty=(Tensor[(8, 13, 16), float64],) */;
    %1139 = @func_7342() /* ty=(Tensor[(8, 13, 16), uint8],) */;
    %1140 = %1138.0;
    %1141 = %1139.0;
    (%1140, %1141)
  };
  %1142() /* ty=(Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8]) */
}

def @func_8238(%var_8188: Tensor[(1680), uint8]) -> (Tensor[(8, 13, 16), uint8], Tensor[(1680), uint8], Tensor[(14, 6, 2), float32]) {
  %1143 = @func_6938() /* ty=(Tensor[(8, 13, 16), uint8],) */;
  %1144 = cast(%var_8188, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %1145 = reshape(%1144, newshape=[1680]) /* ty=Tensor[(1680), uint8] */;
  %1146 = @func_6444(%1145) /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float64], Tensor[(14, 6, 2), float64], uint8, Tensor[(1680), uint8], Tensor[(8, 13, 16), float32]) */;
  %1147 = %1146.2;
  %1148 = cast(%1147, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
  %1149 = %1143.0;
  %1150 = atanh(%1148) /* ty=Tensor[(14, 6, 2), float32] */;
  (%1149, %var_8188, %1150)
}

def @func_3352(%var_3341: Tensor[(12, 140), uint8]) -> (Tensor[(14, 6, 2), float64], Tensor[(3120), uint8], uint8, Tensor[(12, 140), float64], Tensor[(8, 13, 16), float32], Tensor[(12, 140), bool]) {
  %1151 = @func_3234() /* ty=(Tensor[(14, 6, 2), float64],) */;
  %1152 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 140), uint8] */, dtype="uint8") /* ty=Tensor[(12, 140), uint8] */;
  %1153 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 140), uint8] */, dtype="uint8") /* ty=Tensor[(12, 140), uint8] */;
  %1154 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1155 = reshape(%1152, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %1156 = reshape(%1153, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint8] */;
  %1157 = reshape(%1154, newshape=[]) /* ty=uint8 */;
  %1158 = @func_2112(%1155, %1156, %1157) /* ty=(Tensor[(8, 13, 16), float32], uint8, Tensor[(3120), uint8], Tensor[(14, 12, 10), uint8]) */;
  %1159 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 140), uint8] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %1160 = @func_1515() /* ty=(Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */;
  %1161 = cast(%var_3341, dtype="bool") /* ty=Tensor[(12, 140), bool] */;
  %1162 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(12, 140), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1163 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 140), uint8] */, dtype="bool") /* ty=Tensor[(12, 140), bool] */;
  %1164 = dyn.reshape(%1161, %1162, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1165 = %1151.0;
  %1166 = %1158.2;
  %1167 = sigmoid(%1159) /* ty=Tensor[(12, 140), float64] */;
  %1168 = %1160.1;
  %1169 = less(%1163, %1164) /* ty=Tensor[(12, 140), bool] */;
  (%1165, %1166, meta[relay.Constant][44] /* ty=uint8 */, %1167, %1168, %1169)
}

def @func_7172() -> (Tensor[(8, 13, 16), bool],) {
  %1172 = fn () -> (Tensor[(8, 13, 16), bool],) {
    %1170 = @func_2523() /* ty=(Tensor[(8, 13, 16), bool],) */;
    %1171 = %1170.0;
    (%1171,)
  };
  %1172() /* ty=(Tensor[(8, 13, 16), bool],) */
}

def @func_8657(%var_8655: Tensor[(1470), float32]) -> (Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 14), float32], Tensor[(1470), bool]) {
  @func_8654(%var_8655) /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(7, 15, 14), float32], Tensor[(1470), bool]) */
}

def @func_9576() -> (Tensor[(8, 13, 16), uint8],) {
  %1173 = @func_7543() /* ty=(Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8]) */;
  %1174 = %1173.1;
  (%1174,)
}

def @func_3474(%var_3472: Tensor[(8, 13, 16), int64]) -> Tensor[(8, 13, 16), float32] {
  @func_3471(%var_3472) /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_5168() -> (Tensor[(168), float64],) {
  %1177 = fn () -> (Tensor[(168), float64],) {
    %1175 = @func_2201() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), uint8]) */;
    %1176 = %1175.0;
    (%1176,)
  };
  %1177() /* ty=(Tensor[(168), float64],) */
}

def @func_9286() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64]) {
  %1178 = @func_4156() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), int64], Tensor[(8, 13, 16), float32]) */;
  %1179 = @func_1682() /* ty=(Tensor[(8, 13, 16), int64],) */;
  %1180 = %1178.1;
  %1181 = %1179.0;
  (%1180, %1181)
}

def @func_3411() -> Tensor[(8, 13, 16), bool] {
  @func_3409() /* ty=Tensor[(8, 13, 16), bool] */
}

def @func_9669() -> Tensor[(8, 13, 16), float32] {
  %1182 = fn () -> Tensor[(8, 13, 16), float32] {
    @func_2912() /* ty=Tensor[(8, 13, 16), float32] */
  };
  %1182() /* ty=Tensor[(8, 13, 16), float32] */
}

def @func_851(%var_849: Tensor[(8, 13, 16), uint8]) -> (Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) {
  @func_848(%var_849) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(8, 13, 16), uint8], Tensor[(378), uint64], Tensor[(8, 13, 16), uint8]) */
}

def @func_3138() -> (Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) {
  @func_3136() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(168), float64], Tensor[(8, 13, 16), float32], Tensor[(8, 13, 16), float32]) */
}

def @func_4748() -> Tensor[(9, 11, 2), float64] {
  %1184 = fn () -> Tensor[(9, 11, 2), float64] {
    %1183 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
    atan(%1183) /* ty=Tensor[(9, 11, 2), float64] */
  };
  %1184() /* ty=Tensor[(9, 11, 2), float64] */
}

def @func_5026(%var_5024: Tensor[(12, 3, 16), int16]) -> (Tensor[(12, 3, 16), float64],) {
  @func_5023(%var_5024) /* ty=(Tensor[(12, 3, 16), float64],) */
}

def @func_8787() -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8], Tensor[(13), int32], uint8) {
  %1194 = fn () -> (Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8], Tensor[(13), int32], uint8) {
    %1185 = @func_7717() /* ty=(Tensor[(168), float64], Tensor[(8, 13, 16), float64], Tensor[(1664), bool], Tensor[(1664), float64]) */;
    %1186 = cast(meta[relay.Constant][46] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
    %1187 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %1188 = reshape(%1186, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
    %1189 = reshape(%1187, newshape=[]) /* ty=uint8 */;
    %1190 = @func_7904(%1188, %1189) /* ty=(Tensor[(8, 13, 16), bool], Tensor[(14, 6, 2), float64], Tensor[(8, 13, 16), uint8], Tensor[(13, 1), int32], Tensor[(8, 13, 16), uint8], Tensor[(15, 16, 13), bool], uint8, Tensor[(2, 1560), uint8], Tensor[(8, 13, 16), uint8], Tensor[(14, 6, 2), float64]) */;
    %1191 = @func_8113() /* ty=Tensor[(8, 13, 16), uint8] */;
    %1192 = %1185.1;
    %1193 = %1190.2;
    (%1191, %1192, %1193, meta[relay.Constant][46] /* ty=Tensor[(13), int32] */, meta[relay.Constant][47] /* ty=uint8 */)
  };
  %1194() /* ty=(Tensor[(8, 13, 16), uint8], Tensor[(8, 13, 16), float64], Tensor[(8, 13, 16), uint8], Tensor[(13), int32], uint8) */
}

def @func_2913() -> Tensor[(8, 13, 16), float32] {
  %1196 = fn () -> Tensor[(8, 13, 16), float32] {
    %1195 = @func_720() /* ty=(Tensor[(8, 13, 16), float32],) */;
    %1195.0
  };
  %1196() /* ty=Tensor[(8, 13, 16), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3581: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3586: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3619: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3624: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3629: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen384/build/output.py:3634: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @main() -> ((Tensor[(8, 4, 14), int32],), ()) {
  %0 = (meta[relay.Constant][0] /* ty=Tensor[(8, 4, 14), int32] */,);
  %1 = ();
  (%0, %1)
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %2 = (%l, %r);
  match (%2) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      %3 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %4 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %5 = %add(%3, %4) /* ty=T */;
      Raw(%5) /* ty=GradCell[T] */
    },
  }
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %6 = (%l1, %r1);
  match (%6) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      %7 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %8 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %9 = %multiply(%7, %8) /* ty=T */;
      Raw(%9) /* ty=GradCell[T] */
    },
  }
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
