==========mod==========
#[version = "0.0.5"]
def @func_7866() -> Tensor[(13, 6), float64] {
  @func_5260() /* ty=Tensor[(13, 6), float64] */
}

def @func_9481() -> Tensor[(1125), bool] {
  %0 = @func_7950() /* ty=Tensor[(1125), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1125), float32] */, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(1), int32] */;
  %3 = cast(%0, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%3, %4) /* ty=Tensor[(1125), bool] */
}

def @func_93(%var_60: Tensor[(14, 13, 11), float64], %var_61: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) {
  %5 = cast(%var_61, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %6 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_60, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %9 = cast(%var_61, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %10 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_60, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = greater_equal(%7, %8) /* ty=Tensor[(14, 13, 11), bool] */;
  %14 = logical_or(%11, %12) /* ty=Tensor[(14, 13, 11), bool] */;
  (%13, %14)
}

def @func_9734() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %15 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
  %16 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  (%15, %16)
}

def @func_1429() -> Tensor[(13, 6), float64] {
  %17 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %17.0
}

def @func_7950() -> Tensor[(1125), float32] {
  %18 = @func_6937() /* ty=(Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %18.4
}

def @func_2833(%var_2818: Tensor[(3, 11, 4), float64]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) {
  %19 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 4), float64] */;
  %21 = asinh(%20) /* ty=Tensor[(3, 11, 4), float64] */;
  %22 = cast(%var_2818, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %26 = %19.0;
  %27 = mod(%24, %25) /* ty=Tensor[(3, 11, 4), float32] */;
  (%26, %27)
}

def @func_7319() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) {
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %30 = reshape(%28, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %31 = reshape(%29, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %32 = @func_2640(%30, %31) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %33 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %34 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
  %35 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %36 = %32.1;
  %37 = %33.0;
  %38 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %39 = %34.3;
  (%35, %36, meta[relay.Constant][2] /* ty=Tensor[(14), int32] */, meta[relay.Constant][3] /* ty=Tensor[(210), int32] */, %37, %38, %39)
}

def @func_7046() -> Tensor[(13, 6), float64] {
  @func_3917() /* ty=Tensor[(13, 6), float64] */
}

def @func_4373() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %40 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %41 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
  %42 = %40.0;
  (%41, %42)
}

def @func_932() -> (Tensor[(13, 6), float64],) {
  %43 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  (%43,)
}

def @func_6408() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %44 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
  %45 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
  %46 = %44.0;
  (%45, %46)
}

def @func_6216() -> (Tensor[(13, 6), float64],) {
  %47 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %48 = %47.0;
  (%48,)
}

def @func_4630(%var_4616: uint32, %var_4617: Tensor[(1, 14, 4), uint32], %var_4624: Tensor[(8, 2, 15), uint32]) -> (Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) {
  %49 = cast(%var_4616, dtype="uint32") /* ty=uint32 */;
  %50 = cast(%var_4617, dtype="uint32") /* ty=Tensor[(1, 14, 4), uint32] */;
  %51 = cast(%var_4616, dtype="bool") /* ty=bool */;
  %52 = cast(%var_4624, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %53 = bitwise_and(%49, %50) /* ty=Tensor[(1, 14, 4), uint32] */;
  %54 = logical_and(%51, %52) /* ty=Tensor[(8, 2, 15), bool] */;
  (%53, %54)
}

def @func_2598(%var_2593: Tensor[(3, 3, 8), float32], %var_2594: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), float32],) {
  %55 = cast(%var_2594, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %56 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_2593, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = mod(%57, %58) /* ty=Tensor[(3, 3, 8), float32] */;
  (%59,)
}

def @func_9946() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %60 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %61 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %62 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %63 = %62.2;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(132), float64] */;
  %65 = %60.0;
  %66 = %61.1;
  %67 = acosh(%64) /* ty=Tensor[(132), float64] */;
  (%65, %66, %67)
}

def @func_8221(%var_8148: Tensor[(72), float32], %var_8152: Tensor[(3, 3, 8), float32], %var_8169: Tensor[(3, 3, 8), float64], %var_8199: Tensor[(3, 3, 8), float32]) -> (Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(1125), float32], Tensor[(3, 3, 8), uint8], Tensor[(3, 3, 8), float64], Tensor[(72), float64], Tensor[(3, 3, 8), int8], Tensor[(13, 6), float64]) {
  %68 = cast(%var_8148, dtype="float32") /* ty=Tensor[(72), float32] */;
  %69 = cast(%var_8148, dtype="float32") /* ty=Tensor[(72), float32] */;
  %70 = reshape(%68, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %71 = reshape(%69, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %72 = @func_2598(%70, %71) /* ty=(Tensor[(3, 3, 8), float32],) */;
  %73 = %72.0;
  %74 = cast(%var_8152, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %78 = floor_mod(%76, %77) /* ty=Tensor[(3, 3, 8), float64] */;
  %79 = cast(%var_8169, dtype="uint8") /* ty=Tensor[(3, 3, 8), uint8] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="uint8") /* ty=Tensor[(3, 3, 8), uint8] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %83 = cast(%78, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %84 = @func_5319() /* ty=(Tensor[(72), float64],) */;
  %85 = cast(%73, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %86 = asinh(%85) /* ty=Tensor[(3, 3, 8), float32] */;
  %87 = cast(%var_8199, dtype="int8") /* ty=Tensor[(3, 3, 8), int8] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="int8") /* ty=Tensor[(3, 3, 8), int8] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %91 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
  %92 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  %93 = @func_7950() /* ty=Tensor[(1125), float32] */;
  %94 = left_shift(%81, %82) /* ty=Tensor[(3, 3, 8), uint8] */;
  %95 = sigmoid(%83) /* ty=Tensor[(3, 3, 8), float64] */;
  %96 = %84.0;
  %97 = minimum(%89, %90) /* ty=Tensor[(3, 3, 8), int8] */;
  %98 = %91.0;
  (%92, %var_8148, %93, %94, %95, %96, %97, %98)
}

def @func_5345() -> (Tensor[(13, 6), float64],) {
  %99 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%99,)
}

def @func_3066(%var_3025: Tensor[(2100), float64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) {
  %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %101 = log10(%100) /* ty=Tensor[(12, 11, 2), float32] */;
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 11, 2), float32] */, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %106 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %107 = reshape(%106, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %108 = @func_199(%107) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %109 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %110 = reshape(%109, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %111 = @func_199(%110) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %112 = %111.1;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %114 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %115 = reshape(%114, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %116 = @func_199(%115) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %117 = minimum(%104, %105) /* ty=Tensor[(12, 11, 2), uint64] */;
  %118 = %108.2;
  %119 = log10(%113) /* ty=Tensor[(14, 13, 11), float64] */;
  %120 = %116.0;
  (%117, %var_3025, %118, %119, %120)
}

def @func_6325() -> Tensor[(1125), float32] {
  %121 = @func_5216() /* ty=(Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) */;
  %121.1
}

def @func_1467() -> (Tensor[(13, 6), float64],) {
  %122 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %123 = %122.0;
  (%123,)
}

def @func_7754() -> Tensor[(13, 6), float64] {
  %124 = @func_5843() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %124.1
}

def @func_2159() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %125 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %126 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %127 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %128 = %125.0;
  %129 = %126.0;
  %130 = %127.0;
  (%128, %129, %130)
}

def @func_841() -> (Tensor[(13, 6), float64],) {
  %131 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  (%131,)
}

def @func_248(%var_233: Tensor[(1, 16, 5), float32]) -> (Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) {
  %132 = cast(%var_233, dtype="float32") /* ty=Tensor[(1, 16, 5), float32] */;
  %133 = cast(meta[relay.Constant][5] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %134 = reshape(%133, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %135 = @func_199(%134) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %136 = rsqrt(%132) /* ty=Tensor[(1, 16, 5), float32] */;
  %137 = %135.1;
  (%136, %137, meta[relay.Constant][5] /* ty=Tensor[(2100), float64] */)
}

def @func_5295() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %138 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %139 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
  %140 = %138.0;
  %141 = %139.1;
  (%140, %141)
}

def @func_3133() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %142 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %145 = reshape(%143, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %146 = reshape(%144, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %147 = @func_2640(%145, %146) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %148 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %149 = @func_2780() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %150 = %142.0;
  %151 = %147.1;
  %152 = %148.0;
  %153 = %149.0;
  (%150, %151, meta[relay.Constant][6] /* ty=Tensor[(14), int32] */, meta[relay.Constant][7] /* ty=Tensor[(210), int32] */, %152, %153)
}

def @func_3371(%var_3360: Tensor[(2100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) {
  %154 = cast(%var_3360, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %155 = reshape(%154, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %156 = @func_3066(%155) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) */;
  %157 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %158 = %156.2;
  %159 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  (%157, %158, %var_3360, %159)
}

def @func_1707() -> (Tensor[(13, 6), float64],) {
  %160 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%160,)
}

def @func_3917() -> Tensor[(13, 6), float64] {
  %161 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %161.0
}

def @func_1850() -> (Tensor[(13, 6), float64],) {
  %162 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %163 = %162.1;
  (%163,)
}

def @func_8497(%var_8474: Tensor[(13, 6), float64]) -> (Tensor[(13, 6), uint8], Tensor[(13, 6), float64]) {
  %164 = @func_3133() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %165 = %164.4;
  %166 = cast(%var_8474, dtype="uint8") /* ty=Tensor[(13, 6), uint8] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(2), int32] */;
  %168 = cast(%165, dtype="uint8") /* ty=Tensor[(13, 6), uint8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %170 = minimum(%168, %169) /* ty=Tensor[(13, 6), uint8] */;
  %171 = @func_4956() /* ty=Tensor[(13, 6), float64] */;
  (%170, %171)
}

def @func_7840(%var_7827: Tensor[(5, 12, 3), uint16]) -> Tensor[(5, 12, 3), uint16] {
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 12, 3), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
  %173 = shape_of(%var_7827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_7827, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%174, %175) /* ty=Tensor[(5, 12, 3), uint16] */
}

def @func_5445(%var_5408: Tensor[(6, 9, 12), bool]) -> (Tensor[(6, 9, 12), bool], Tensor[(6, 9, 12), float64]) {
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(6, 9, 12), bool] */;
  %177 = shape_of(%var_5408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%var_5408, dtype="bool") /* ty=Tensor[(6, 9, 12), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = cast(%var_5408, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
  %181 = logical_or(%178, %179) /* ty=Tensor[(6, 9, 12), bool] */;
  %182 = log2(%180) /* ty=Tensor[(6, 9, 12), float64] */;
  (%181, %182)
}

def @func_8108(%var_8098: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), float32], Tensor[(1, 1573), float32]) {
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
  %184 = cast(%var_8098, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %185 = @func_7319() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) */;
  %186 = mod(%183, %184) /* ty=Tensor[(15, 7, 15), float32] */;
  %187 = %185.6;
  (%186, %187)
}

def @func_7143() -> (Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) {
  %188 = @func_7058() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %189 = %188.1;
  %190 = @func_3834() /* ty=Tensor[(2, 14, 14), float64] */;
  %191 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
  (%189, %190, %191)
}

def @func_871(%var_858: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
  %192 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %193 = cast(%var_858, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %194 = reshape(%193, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %195 = @func_638(%194) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %196 = %192.0;
  %197 = %195.0;
  (%196, %197, %var_858)
}

def @func_2927(%var_2922: Tensor[(14, 5, 13), int8], %var_2923: Tensor[(14, 5, 13), int8]) -> (Tensor[(14, 5, 13), int8],) {
  %198 = cast(%var_2923, dtype="int8") /* ty=Tensor[(14, 5, 13), int8] */;
  %199 = shape_of(%var_2922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_2922, dtype="int8") /* ty=Tensor[(14, 5, 13), int8] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %202 = bitwise_xor(%200, %201) /* ty=Tensor[(14, 5, 13), int8] */;
  (%202,)
}

def @func_5395() -> Tensor[(13, 6), float64] {
  @func_4077() /* ty=Tensor[(13, 6), float64] */
}

def @func_6456(%var_6436: Tensor[(11, 10, 8), uint16]) -> (Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) {
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 10, 8), uint16] */, dtype="uint16") /* ty=Tensor[(11, 10, 8), uint16] */;
  %204 = shape_of(%var_6436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_6436, dtype="uint16") /* ty=Tensor[(11, 10, 8), uint16] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %207 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %208 = logical_xor(%205, %206) /* ty=Tensor[(11, 10, 8), uint16] */;
  %209 = %207.2;
  (%208, %209)
}

def @func_3834() -> Tensor[(2, 14, 14), float64] {
  @func_2662() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_8083(%var_8064: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  %210 = cast(%var_8064, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %211 = reshape(%210, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %212 = @func_3735(%211) /* ty=(Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) */;
  %213 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
  %214 = %212.0;
  (%213, %214, %var_8064)
}

def @func_1693() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %215 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %216 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %217 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %218 = %215.0;
  %219 = %216.0;
  %220 = %217.0;
  (%218, %219, %220)
}

def @func_7471() -> (Tensor[(13, 6), float64],) {
  %221 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  (%221,)
}

def @func_3004() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %222 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %223 = %222.0;
  %224 = @func_2423() /* ty=Tensor[(13, 6), float64] */;
  (%223, %224)
}

def @func_5519(%var_5497: Tensor[(3, 4, 7), float32], %var_5498: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) {
  %225 = cast(%var_5498, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %226 = shape_of(%var_5497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_5497, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %229 = divide(%227, %228) /* ty=Tensor[(3, 4, 7), float32] */;
  %230 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = @func_5345() /* ty=(Tensor[(13, 6), float64],) */;
  %235 = less(%232, %233) /* ty=Tensor[(3, 4, 7), bool] */;
  %236 = %234.0;
  (%235, %236)
}

def @func_2261() -> (Tensor[(13, 6), float64],) {
  %237 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
  %238 = %237.0;
  (%238,)
}

def @func_4786(%var_4779: uint32, %var_4781: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) {
  %239 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
  %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %242 = reshape(%240, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %243 = reshape(%241, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %244 = @func_2598(%242, %243) /* ty=(Tensor[(3, 3, 8), float32],) */;
  %245 = cast(meta[relay.Constant][12] /* ty=Tensor[(72), float32] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %246 = cast(%var_4779, dtype="uint32") /* ty=uint32 */;
  %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(56), uint32] */, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %248 = cast(%var_4781, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %249 = reshape(%246, newshape=[]) /* ty=uint32 */;
  %250 = reshape(%247, newshape=[1, 14, 4]) /* ty=Tensor[(1, 14, 4), uint32] */;
  %251 = reshape(%248, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint32] */;
  %252 = @func_4630(%249, %250, %251) /* ty=(Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) */;
  %253 = %239.0;
  %254 = %244.0;
  %255 = log2(%245) /* ty=Tensor[(72), float64] */;
  %256 = %252.0;
  (%253, %254, %255, %256, %var_4779, meta[relay.Constant][13] /* ty=Tensor[(56), uint32] */, %var_4781)
}

def @func_5633(%var_5564: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(1694), uint8], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64]) {
  %257 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %258 = cast(%var_5564, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %259 = cast(%var_5564, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %260 = reshape(%258, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %261 = reshape(%259, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %262 = @func_1405(%260, %261) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %265 = %257.0;
  %266 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
  %267 = tan(%264) /* ty=Tensor[(14, 11, 11), float64] */;
  (%265, %var_5564, %266, %267)
}

def @func_7855() -> (Tensor[(13, 6), float64],) {
  %268 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %269 = %268.1;
  (%269,)
}

def @func_2867() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %270 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %271 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %272 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %273 = %270.0;
  %274 = %271.1;
  %275 = %272.1;
  (%273, %274, %275)
}

def @func_3522(%var_3514: uint64, %var_3515: Tensor[(12, 5), uint64]) -> Tensor[(12, 5), uint64] {
  %276 = cast(%var_3514, dtype="uint64") /* ty=uint64 */;
  %277 = cast(%var_3515, dtype="uint64") /* ty=Tensor[(12, 5), uint64] */;
  left_shift(%276, %277) /* ty=Tensor[(12, 5), uint64] */
}

def @func_3875(%var_3873: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  %278 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %279 = cast(%var_3873, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %280 = reshape(%279, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %281 = @func_3735(%280) /* ty=(Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) */;
  %282 = %278.0;
  %283 = %281.0;
  (%282, %283, %var_3873)
}

def @func_9308(%var_9297: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64]) {
  %284 = @func_5060() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %285 = cast(%var_9297, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %286 = reshape(%285, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %287 = @func_1199(%286) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %288 = %284.1;
  %289 = %287.0;
  (%288, %289, %var_9297)
}

def @main(%var_10320: Tensor[(2100), float64], %var_10363: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(126), uint64], Tensor[(2100), float64]) {
  %290 = @func_7319() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) */;
  %291 = cast(%var_10320, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %292 = reshape(%291, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %293 = @func_8083(%292) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) */;
  %294 = cast(meta[relay.Constant][14] /* ty=Tensor[(126), uint64] */, dtype="uint64") /* ty=Tensor[(126), uint64] */;
  %295 = reshape(%294, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), uint64] */;
  %296 = @func_8945(%295) /* ty=(Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) */;
  %297 = cast(%var_10363, dtype="int16") /* ty=Tensor[(2100), int16] */;
  %298 = shape_of(%var_10320, dtype="int32") /* ty=Tensor[(1), int32] */;
  %299 = cast(%var_10320, dtype="int16") /* ty=Tensor[(2100), int16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), int16] */;
  %301 = bitwise_or(%299, %300) /* ty=Tensor[(2100), int16] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %303 = %290.0;
  %304 = %293.0;
  %305 = @func_7997() /* ty=Tensor[(13, 6), float64] */;
  %306 = %296.1;
  %307 = log2(%302) /* ty=Tensor[(2100), float64] */;
  (%303, %304, %305, %306, meta[relay.Constant][14] /* ty=Tensor[(126), uint64] */, %307)
}

def @func_7731() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(11, 10, 8), uint16], Tensor[(40, 22), uint16]) {
  %308 = @func_4115() /* ty=(Tensor[(13, 6), float64],) */;
  %309 = cast(meta[relay.Constant][15] /* ty=Tensor[(40, 22), uint16] */, dtype="uint16") /* ty=Tensor[(40, 22), uint16] */;
  %310 = reshape(%309, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), uint16] */;
  %311 = @func_6456(%310) /* ty=(Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) */;
  %312 = %308.0;
  %313 = @func_2423() /* ty=Tensor[(13, 6), float64] */;
  %314 = %311.0;
  (%312, %313, %314, meta[relay.Constant][15] /* ty=Tensor[(40, 22), uint16] */)
}

def @func_5491() -> Tensor[(4, 4, 1), float64] {
  %315 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
  %316 = tan(%315) /* ty=Tensor[(4, 4, 1), float64] */;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
  sin(%317) /* ty=Tensor[(4, 4, 1), float64] */
}

def @func_671(%var_655: Tensor[(10, 6, 5), uint16], %var_656: Tensor[(10, 6, 5), uint16]) -> (Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) {
  %318 = cast(%var_656, dtype="uint16") /* ty=Tensor[(10, 6, 5), uint16] */;
  %319 = shape_of(%var_655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_655, dtype="uint16") /* ty=Tensor[(10, 6, 5), uint16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %322 = cast(%var_655, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %323 = subtract(%320, %321) /* ty=Tensor[(10, 6, 5), uint16] */;
  %324 = asinh(%322) /* ty=Tensor[(10, 6, 5), float64] */;
  (%323, %324)
}

def @func_5843() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %325 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %326 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
  %327 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %328 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  %329 = %325.0;
  %330 = %326.2;
  (%327, %328, %329, %330)
}

def @func_1495() -> (Tensor[(13, 6), float64],) {
  %331 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %332 = %331.0;
  (%332,)
}

def @func_1056(%var_1023: Tensor[(2, 4, 10), float32], %var_1048: Tensor[(1573), float32]) -> (Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) {
  %333 = cast(%var_1023, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
  %334 = asinh(%333) /* ty=Tensor[(2, 4, 10), float32] */;
  %335 = cast(%var_1023, dtype="uint8") /* ty=Tensor[(2, 4, 10), uint8] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="uint8") /* ty=Tensor[(2, 4, 10), uint8] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %339 = cast(%334, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  %340 = cast(%var_1048, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %342 = cast(meta[relay.Constant][17] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %343 = reshape(%340, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %344 = reshape(%341, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
  %345 = reshape(%342, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %346 = @func_616(%343, %344, %345) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
  %347 = logical_xor(%337, %338) /* ty=Tensor[(2, 4, 10), uint8] */;
  %348 = log(%339) /* ty=Tensor[(2, 4, 10), float64] */;
  %349 = %346.1;
  (%347, %348, %349, %var_1048, meta[relay.Constant][17] /* ty=Tensor[(1125), float32] */)
}

def @func_3619(%var_3614: Tensor[(6, 16, 14), int8]) -> (Tensor[(6, 16, 14), bool],) {
  %350 = cast(%var_3614, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %351 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(6, 16, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 16, 14), int8] */, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = less(%352, %353) /* ty=Tensor[(6, 16, 14), bool] */;
  (%354,)
}

def @func_4898() -> (Tensor[(13, 6), float64],) {
  %355 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  (%355,)
}

def @func_2572() -> (Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) {
  %356 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %357 = reshape(%356, newshape=[]) /* ty=uint16 */;
  %358 = @func_1582(%357) /* ty=(Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %360 = cos(%359) /* ty=Tensor[(13, 2, 1), float64] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %362 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %363 = power(%361, %362) /* ty=Tensor[(13, 2, 1), float64] */;
  %364 = cast(%363, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
  %365 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%360, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %368 = %358.4;
  %369 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
  %370 = bitwise_xor(%366, %367) /* ty=Tensor[(13, 2, ?), uint32] */;
  (%368, %369, %370)
}

def @func_4077() -> Tensor[(13, 6), float64] {
  @func_3917() /* ty=Tensor[(13, 6), float64] */
}

def @func_5060() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %371 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
  %372 = @func_4842() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */;
  %373 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %374 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %375 = %371.0;
  %376 = %372.1;
  %377 = %373.0;
  %378 = %374.0;
  (%375, %376, %377, %378)
}

def @func_1405(%var_1372: Tensor[(14, 11, 11), uint8], %var_1373: Tensor[(14, 11, 11), uint8]) -> (Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) {
  %379 = cast(%var_1373, dtype="uint8") /* ty=Tensor[(14, 11, 11), uint8] */;
  %380 = shape_of(%var_1372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_1372, dtype="uint8") /* ty=Tensor[(14, 11, 11), uint8] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %383 = multiply(%381, %382) /* ty=Tensor[(14, 11, 11), uint8] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(14, 11, 11), float32] */;
  %385 = shape_of(%var_1372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_1372, dtype="float32") /* ty=Tensor[(14, 11, 11), float32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %388 = cast(%var_1373, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %389 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %390 = divide(%386, %387) /* ty=Tensor[(14, 11, 11), float32] */;
  %391 = sinh(%388) /* ty=Tensor[(14, 11, 11), float64] */;
  %392 = %389.0;
  (%390, %391, %392)
}

def @func_1199(%var_1191: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(455, 3), float32] */, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
  %394 = reshape(%393, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %395 = @func_638(%394) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %396 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %397 = cast(%var_1191, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %398 = cast(%var_1191, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %399 = reshape(%397, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %400 = reshape(%398, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %401 = @func_93(%399, %400) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %402 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  %403 = %395.0;
  %404 = %396.0;
  %405 = %401.1;
  (%402, %403, meta[relay.Constant][21] /* ty=Tensor[(455, 3), float32] */, %404, %405, %var_1191)
}

def @func_5734() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) {
  %406 = cast(meta[relay.Constant][22] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %407 = reshape(%406, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %408 = @func_3822(%407) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
  %409 = @func_4898() /* ty=(Tensor[(13, 6), float64],) */;
  %410 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
  %411 = %408.0;
  %412 = %409.0;
  (%410, %411, meta[relay.Constant][22] /* ty=Tensor[(300), uint16] */, %412)
}

def @func_638(%var_631: Tensor[(7, 13, 15), float32]) -> (Tensor[(7, 13, 15), float32],) {
  %413 = cast(%var_631, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %414 = sqrt(%413) /* ty=Tensor[(7, 13, 15), float32] */;
  (%414,)
}

def @func_10273() -> Tensor[(13, 6), float64] {
  %415 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %415.0
}

def @func_5934() -> (Tensor[(1365), float32],) {
  %416 = @func_4842() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */;
  %417 = %416.5;
  %418 = cast(meta[relay.Constant][23] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(1), int32] */;
  %420 = cast(%417, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?), float32] */;
  %422 = mod(%420, %421) /* ty=Tensor[(1365), float32] */;
  (%422,)
}

def @func_8719() -> (Tensor[(13, 6), float64],) {
  %423 = @func_5230() /* ty=Tensor[(13, 6), float64] */;
  (%423,)
}

def @func_3264() -> (Tensor[(13, 6), float64],) {
  %424 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%424,)
}

def @func_6952() -> Tensor[(14, 4, 13), int64] {
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %426 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%427, %428) /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_2662() -> Tensor[(2, 14, 14), float64] {
  %429 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 14, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 14), float64] */;
  asin(%429) /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_6691(%var_6684: Tensor[(2, 14, 14), float64]) -> Tensor[(2, 14, 14), uint64] {
  %430 = @func_3834() /* ty=Tensor[(2, 14, 14), float64] */;
  %431 = cast(%var_6684, dtype="uint64") /* ty=Tensor[(2, 14, 14), uint64] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="uint64") /* ty=Tensor[(2, 14, 14), uint64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%433, %434) /* ty=Tensor[(2, 14, 14), uint64] */
}

def @func_2423() -> Tensor[(13, 6), float64] {
  %435 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %435.1
}

def @func_9149(%var_9089: Tensor[(16, 12, 9), bool], %var_9135: Tensor[(1344), int8]) -> (Tensor[(16, 12, 9), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1344), int8]) {
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %437 = shape_of(%var_9089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_9089, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %440 = logical_and(%438, %439) /* ty=Tensor[(16, 12, 9), bool] */;
  %441 = cast(%var_9089, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = greater(%443, %444) /* ty=Tensor[(16, 12, 9), bool] */;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %447 = cast(%var_9135, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %448 = reshape(%447, newshape=[1344]) /* ty=Tensor[(1344), int8] */;
  %449 = @func_4580(%448) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %450 = rsqrt(%446) /* ty=Tensor[(16, 12, 9), float32] */;
  %451 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
  %452 = %449.0;
  (%450, %451, %452, %var_9135)
}

def @func_2640(%var_2630: Tensor[(1, 7, 2), int32], %var_2631: Tensor[(15, 7, 2), int32]) -> (Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) {
  %453 = cast(%var_2630, dtype="int32") /* ty=Tensor[(1, 7, 2), int32] */;
  %454 = cast(%var_2631, dtype="int32") /* ty=Tensor[(15, 7, 2), int32] */;
  %455 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
  %456 = logical_xor(%453, %454) /* ty=Tensor[(15, 7, 2), int32] */;
  %457 = %455.0;
  (%456, %457)
}

def @func_6846(%var_6804: Tensor[(84), float32], %var_6830: Tensor[(14), int32], %var_6831: Tensor[(1, 210), int32]) -> (Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %458 = @func_5319() /* ty=(Tensor[(72), float64],) */;
  %459 = cast(%var_6804, dtype="float32") /* ty=Tensor[(84), float32] */;
  %460 = cast(%var_6804, dtype="float32") /* ty=Tensor[(84), float32] */;
  %461 = reshape(%459, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %462 = reshape(%460, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %463 = @func_5519(%461, %462) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) */;
  %464 = @func_5734() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) */;
  %465 = cast(meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %466 = reshape(%465, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %467 = @func_638(%466) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %468 = cast(%var_6830, dtype="int32") /* ty=Tensor[(14), int32] */;
  %469 = cast(%var_6831, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
  %470 = reshape(%468, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %471 = reshape(%469, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %472 = @func_2640(%470, %471) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %473 = %464.2;
  %474 = cast(%473, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %475 = reshape(%474, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %476 = @func_3822(%475) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
  %477 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
  %478 = %458.0;
  %479 = %463.0;
  %480 = %467.0;
  %481 = %472.1;
  %482 = %476.0;
  %483 = %477.0;
  (%478, %479, %var_6804, %473, %480, meta[relay.Constant][28] /* ty=Tensor[(1365), float32] */, %481, %var_6830, %var_6831, %482, %483)
}

def @func_3510() -> (Tensor[(1125), float32],) {
  %484 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
  %485 = %484.0;
  (%485,)
}

def @func_8649(%var_8613: Tensor[(14, 7, 13), uint32], %var_8614: Tensor[(14, 7, 13), uint32]) -> (Tensor[(14, 7, 13), float32],) {
  %486 = cast(%var_8614, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %487 = shape_of(%var_8613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_8613, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %490 = bitwise_xor(%488, %489) /* ty=Tensor[(14, 7, 13), uint32] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %492 = sigmoid(%491) /* ty=Tensor[(14, 7, 13), float32] */;
  %493 = cast(%var_8613, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %497 = add(%495, %496) /* ty=Tensor[(14, 7, 13), float32] */;
  (%497,)
}

def @func_3495() -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) {
  %498 = @func_2780() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %501 = reshape(%499, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %502 = reshape(%500, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %503 = @func_2598(%501, %502) /* ty=(Tensor[(3, 3, 8), float32],) */;
  %504 = %498.0;
  %505 = %503.0;
  (%504, %505, meta[relay.Constant][29] /* ty=Tensor[(72), float32] */)
}

def @func_1454() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %506 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %507 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %508 = %506.0;
  (%507, %508)
}

def @func_7997() -> Tensor[(13, 6), float64] {
  @func_760() /* ty=Tensor[(13, 6), float64] */
}

def @func_7671() -> Tensor[(14, 4, 13), int64] {
  @func_6952() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_8849() -> Tensor[(13, 6), float64] {
  @func_3328() /* ty=Tensor[(13, 6), float64] */
}

def @func_8331() -> (Tensor[(13, 6), float64],) {
  %509 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
  (%509,)
}

def @func_3142() -> Tensor[(13, 6), float64] {
  @func_1921() /* ty=Tensor[(13, 6), float64] */
}

def @func_2780() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %510 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
  %511 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
  %512 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %513 = %510.3;
  %514 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  %515 = %511.0;
  %516 = %512.1;
  (%513, %514, %515, %516)
}

def @func_9008(%var_9004: Tensor[(1365, 13), float32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1365, 13), uint32]) {
  %517 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %518 = cast(meta[relay.Constant][30] /* ty=Tensor[(1365, 1), float32] */, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
  %519 = reshape(%518, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %520 = @func_1014(%519) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) */;
  %521 = cast(meta[relay.Constant][30] /* ty=Tensor[(1365, 1), float32] */, dtype="uint32") /* ty=Tensor[(1365, 1), uint32] */;
  %522 = cast(%var_9004, dtype="uint32") /* ty=Tensor[(1365, 13), uint32] */;
  %523 = %517.0;
  %524 = %520.0;
  %525 = add(%521, %522) /* ty=Tensor[(1365, 13), uint32] */;
  (%523, %524, %525)
}

def @func_5260() -> Tensor[(13, 6), float64] {
  @func_3328() /* ty=Tensor[(13, 6), float64] */
}

def @func_3976() -> (Tensor[(13, 6), float64],) {
  %526 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %527 = %526.0;
  (%527,)
}

def @func_7545() -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) {
  %528 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %529 = cast(meta[relay.Constant][31] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %530 = reshape(%529, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
  %531 = cast(meta[relay.Constant][32] /* ty=Tensor[(270), float32] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %532 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(270), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %533 = cast(meta[relay.Constant][31] /* ty=Tensor[(270), float32] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?), bool] */;
  %535 = %528.0;
  %536 = @func_1251(%530) /* ty=Tensor[(9, 10, 3), float32] */;
  %537 = @func_3917() /* ty=Tensor[(13, 6), float64] */;
  %538 = @func_6952() /* ty=Tensor[(14, 4, 13), int64] */;
  %539 = not_equal(%533, %534) /* ty=Tensor[(270), bool] */;
  (%535, %536, %537, %538, %539)
}

def @func_9074() -> Tensor[(13, 6), float64] {
  %540 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %540.0
}

def @func_1251(%var_1221: Tensor[(9, 10, 3), float32]) -> Tensor[(9, 10, 3), float32] {
  %541 = cast(%var_1221, dtype="float32") /* ty=Tensor[(9, 10, 3), float32] */;
  log10(%541) /* ty=Tensor[(9, 10, 3), float32] */
}

def @func_6320() -> (Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %542 = @func_5934() /* ty=(Tensor[(1365), float32],) */;
  %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %544 = reshape(%543, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %545 = @func_3238(%544) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) */;
  %546 = %542.0;
  %547 = %545.3;
  (%546, %547, meta[relay.Constant][33] /* ty=Tensor[(132), float64] */)
}

def @func_4115() -> (Tensor[(13, 6), float64],) {
  %548 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  (%548,)
}

def @func_3797() -> Tensor[(13, 6), float64] {
  %549 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %549.0
}

def @func_4498() -> (Tensor[(72), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %550 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %551 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %552 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %553 = %550.2;
  %554 = %551.0;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_4241(%var_4231: Tensor[(14), int32], %var_4232: Tensor[(210), int32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 7, 2), int32]) {
  %556 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
  %557 = cast(%var_4231, dtype="int32") /* ty=Tensor[(14), int32] */;
  %558 = cast(%var_4232, dtype="int32") /* ty=Tensor[(210), int32] */;
  %559 = reshape(%557, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %560 = reshape(%558, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %561 = @func_2640(%559, %560) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %562 = cast(%var_4231, dtype="int32") /* ty=Tensor[(14), int32] */;
  %563 = cast(%var_4232, dtype="int32") /* ty=Tensor[(210), int32] */;
  %564 = reshape(%562, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %565 = reshape(%563, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %566 = @func_2640(%564, %565) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %567 = %556.1;
  %568 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %569 = %561.1;
  %570 = %566.0;
  (%567, %568, %569, %var_4231, %var_4232, %570)
}

def @func_6516() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %571 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %572 = @func_4721() /* ty=(Tensor[(13, 6), float64],) */;
  %573 = %571.0;
  %574 = %572.0;
  (%573, %574)
}

def @func_6937() -> (Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %575 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
  %576 = cast(meta[relay.Constant][34] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %577 = cast(meta[relay.Constant][35] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %578 = cast(meta[relay.Constant][36] /* ty=Tensor[(210, 1), int32] */, dtype="int32") /* ty=Tensor[(210, 1), int32] */;
  %579 = reshape(%576, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %580 = reshape(%577, newshape=[14]) /* ty=Tensor[(14), int32] */;
  %581 = reshape(%578, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
  %582 = @func_6846(%579, %580, %581) /* ty=(Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %583 = %582.0;
  %584 = cast(meta[relay.Constant][36] /* ty=Tensor[(210, 1), int32] */, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %585 = cast(%583, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %586 = cast(meta[relay.Constant][37] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %587 = cast(meta[relay.Constant][37] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %588 = reshape(%586, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %589 = reshape(%587, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %590 = @func_93(%588, %589) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %591 = %575.0;
  %592 = right_shift(%584, %585) /* ty=Tensor[(210, 72), uint64] */;
  %593 = @func_6325() /* ty=Tensor[(1125), float32] */;
  %594 = %590.1;
  (%591, meta[relay.Constant][34] /* ty=Tensor[(84), float32] */, meta[relay.Constant][35] /* ty=Tensor[(14), int32] */, %592, %593, %594, meta[relay.Constant][37] /* ty=Tensor[(2002), float64] */)
}

def @func_5067() -> Tensor[(2, 14, 14), float64] {
  @func_2662() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_8553(%var_8537: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %595 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %596 = cast(%var_8537, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %597 = reshape(%596, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %598 = @func_1014(%597) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) */;
  %599 = cast(meta[relay.Constant][38] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %600 = reshape(%599, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
  %601 = @func_2833(%600) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
  %602 = %595.0;
  %603 = %598.4;
  %604 = %601.0;
  (%602, %603, %var_8537, %604, meta[relay.Constant][38] /* ty=Tensor[(132), float64] */)
}

def @func_4580(%var_4561: Tensor[(1344), int8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %605 = @func_4436() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) */;
  %606 = cast(%var_4561, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %607 = reshape(%606, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int8] */;
  %608 = @func_3619(%607) /* ty=(Tensor[(6, 16, 14), bool],) */;
  %609 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 44), float64] */, dtype="float64") /* ty=Tensor[(3, 44), float64] */;
  %610 = reshape(%609, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %611 = @func_3238(%610) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) */;
  %612 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
  %613 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %614 = %605.3;
  %615 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  %616 = %608.0;
  %617 = %611.3;
  %618 = %612.0;
  %619 = %613.0;
  (%614, %615, %616, %var_4561, %617, meta[relay.Constant][39] /* ty=Tensor[(3, 44), float64] */, %618, %619)
}

def @func_8762() -> Tensor[(13, 6), float64] {
  %620 = @func_4658() /* ty=(Tensor[(13, 6), float64],) */;
  %620.0
}

def @func_6638(%var_6624: Tensor[(80), float32], %var_6625: Tensor[(2100), float64], %var_6626: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(80), float32], Tensor[(2100), float64], Tensor[(1573), float32]) {
  %621 = @func_3133() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %622 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %623 = cast(%var_6624, dtype="float32") /* ty=Tensor[(80), float32] */;
  %624 = cast(%var_6625, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %625 = cast(%var_6626, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %626 = reshape(%623, newshape=[20, 4]) /* ty=Tensor[(20, 4), float32] */;
  %627 = reshape(%624, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %628 = reshape(%625, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
  %629 = @func_2024(%626, %627, %628) /* ty=(Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) */;
  %630 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %631 = %621.3;
  %632 = %622.0;
  %633 = %629.1;
  (%630, %631, %632, %633, %var_6624, %var_6625, %var_6626)
}

def @func_8945(%var_8902: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) {
  %634 = cast(%var_8902, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
  %635 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %638 = @func_3754() /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32]) */;
  %639 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %640 = left_shift(%636, %637) /* ty=Tensor[(6, 3, 7), uint64] */;
  %641 = %638.1;
  %642 = %639.1;
  (%640, %641, %642)
}

def @func_2462() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %643 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %644 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
  %645 = %643.0;
  (%644, %645)
}

def @func_9811() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %646 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %647 = @func_4658() /* ty=(Tensor[(13, 6), float64],) */;
  %648 = @func_4373() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %649 = @func_4956() /* ty=Tensor[(13, 6), float64] */;
  %650 = %646.4;
  %651 = %647.0;
  %652 = %648.0;
  (%649, %650, %651, %652)
}

def @func_8250(%var_8235: Tensor[(132), float64]) -> (Tensor[(132), float32],) {
  %653 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %654 = %653.2;
  %655 = cast(%var_8235, dtype="float32") /* ty=Tensor[(132), float32] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(1), int32] */;
  %657 = cast(%654, dtype="float32") /* ty=Tensor[(132), float32] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?), float32] */;
  %659 = add(%657, %658) /* ty=Tensor[(132), float32] */;
  (%659,)
}

def @func_5319() -> (Tensor[(72), float64],) {
  %660 = @func_4436() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) */;
  %661 = %660.4;
  (%661,)
}

def @func_9692(%var_9675: Tensor[(72), float32]) -> (Tensor[(72), float32],) {
  %662 = @func_3754() /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32]) */;
  %663 = %662.1;
  %664 = cast(%var_9675, dtype="float32") /* ty=Tensor[(72), float32] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(1), int32] */;
  %666 = cast(%663, dtype="float32") /* ty=Tensor[(72), float32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?), float32] */;
  %668 = divide(%666, %667) /* ty=Tensor[(72), float32] */;
  (%668,)
}

def @func_8364() -> (Tensor[(13, 6), float64],) {
  %669 = @func_5295() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %670 = %669.1;
  (%670,)
}

def @func_7184(%var_7169: Tensor[(13, 12, 6), float32], %var_7176: Tensor[(13, 12, 6), float32]) -> (Tensor[(132), float64], Tensor[(880), uint16], Tensor[(13, 12, 6), bool]) {
  %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(880), uint16] */, dtype="uint16") /* ty=Tensor[(880), uint16] */;
  %672 = reshape(%671, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), uint16] */;
  %673 = @func_6456(%672) /* ty=(Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) */;
  %674 = cast(%var_7169, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %675 = exp(%674) /* ty=Tensor[(13, 12, 6), float32] */;
  %676 = cast(%var_7176, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = %673.1;
  %681 = greater(%678, %679) /* ty=Tensor[(13, 12, 6), bool] */;
  (%680, meta[relay.Constant][41] /* ty=Tensor[(880), uint16] */, %681)
}

def @func_3463() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %682 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
  %683 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %684 = %682.0;
  %685 = %683.0;
  (%684, %685)
}

def @func_4721() -> (Tensor[(13, 6), float64],) {
  %686 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%686,)
}

def @func_2405() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) {
  %687 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %688 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %689 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %690 = cast(meta[relay.Constant][42] /* ty=Tensor[(1694), uint8] */, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %691 = cast(meta[relay.Constant][42] /* ty=Tensor[(1694), uint8] */, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %692 = reshape(%690, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %693 = reshape(%691, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %694 = @func_1405(%692, %693) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
  %695 = %687.0;
  %696 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  %697 = %688.0;
  %698 = %689.0;
  %699 = %694.1;
  (%695, %696, %697, %698, %699, meta[relay.Constant][42] /* ty=Tensor[(1694), uint8] */)
}

def @func_9517() -> Tensor[(14, 4, 13), int64] {
  @func_7671() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_3754() -> (Tensor[(13, 6), float64], Tensor[(72), float32]) {
  %700 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %701 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %702 = %700.0;
  %703 = %701.2;
  (%702, %703)
}

def @func_616(%var_601: Tensor[(11, 13, 11), float32], %var_605: Tensor[(1125), float32], %var_608: Tensor[(15, 15, 5), float32]) -> (Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) {
  %704 = cast(%var_601, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %705 = cast(%var_605, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %706 = reshape(%705, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %707 = @func_565(%706) /* ty=(Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %708 = %707.0;
  %709 = cast(%var_608, dtype="bool") /* ty=Tensor[(15, 15, 5), bool] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="bool") /* ty=Tensor[(15, 15, 5), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = rsqrt(%704) /* ty=Tensor[(11, 13, 11), float32] */;
  %714 = less(%711, %712) /* ty=Tensor[(15, 15, 5), bool] */;
  (%713, %var_605, %714)
}

def @func_5230() -> Tensor[(13, 6), float64] {
  %715 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %715.0
}

def @func_7364(%var_7351: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1125), float32]) {
  %716 = cast(%var_7351, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %717 = sin(%716) /* ty=Tensor[(14, 10, 8), float64] */;
  %718 = @func_6325() /* ty=Tensor[(1125), float32] */;
  (%717, %718)
}

def @func_8711() -> (Tensor[(13, 6), float64],) {
  %719 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %720 = %719.1;
  (%720,)
}

def @func_3735(%var_3706: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) {
  %721 = cast(%var_3706, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %722 = reshape(%721, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %723 = @func_3066(%722) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) */;
  %724 = cast(%var_3706, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %725 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
  %726 = %723.2;
  %727 = rsqrt(%724) /* ty=Tensor[(2100), float64] */;
  (%725, %726, %727)
}

def @func_3328() -> Tensor[(13, 6), float64] {
  %728 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %728.0
}

def @func_10176() -> (Tensor[(270), bool], Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(300), int16]) {
  %729 = @func_7545() /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) */;
  %730 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %731 = %729.4;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(270), float32] */;
  %733 = reshape(%732, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
  %734 = cast(meta[relay.Constant][43] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %735 = reshape(%734, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %736 = @func_3822(%735) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
  %737 = %736.1;
  %738 = cast(%737, dtype="int16") /* ty=Tensor[(10, 6, 5), int16] */;
  %739 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(300), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %740 = cast(meta[relay.Constant][43] /* ty=Tensor[(300), uint16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?), int16] */;
  %742 = %730.0;
  %743 = @func_1251(%733) /* ty=Tensor[(9, 10, 3), float32] */;
  %744 = bitwise_xor(%740, %741) /* ty=Tensor[(300), int16] */;
  (%731, %742, %743, %744)
}

def @func_7485() -> Tensor[(?, 1573), float64] {
  %745 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
  %746 = %745.3;
  %747 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 1573), float32] */, dtype="float64") /* ty=Tensor[(1, 1573), float64] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %749 = cast(%746, dtype="float64") /* ty=Tensor[(1, 1573), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_mod(%749, %750) /* ty=Tensor[(?, 1573), float64] */
}

def @func_5216() -> (Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) {
  %751 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %753 = cast(meta[relay.Constant][45] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %754 = cast(meta[relay.Constant][46] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %755 = cast(meta[relay.Constant][46] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %756 = reshape(%753, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %757 = reshape(%754, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
  %758 = reshape(%755, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %759 = @func_616(%756, %757, %758) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
  %760 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %761 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 1365), float32] */, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
  %762 = reshape(%761, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %763 = @func_638(%762) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %764 = atan(%752) /* ty=Tensor[(2, 14, 14), float32] */;
  %765 = %759.1;
  %766 = %760.2;
  %767 = %763.0;
  (%764, %765, meta[relay.Constant][45] /* ty=Tensor[(1573), float32] */, meta[relay.Constant][46] /* ty=Tensor[(1125), float32] */, %766, %767, meta[relay.Constant][47] /* ty=Tensor[(1, 1365), float32] */)
}

def @func_1326(%var_1321: Tensor[(15, 15, 11), uint8], %var_1322: Tensor[(15, 15, 11), uint8]) -> (Tensor[(15, 15, 11), uint8],) {
  %768 = cast(%var_1322, dtype="uint8") /* ty=Tensor[(15, 15, 11), uint8] */;
  %769 = shape_of(%var_1321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%var_1321, dtype="uint8") /* ty=Tensor[(15, 15, 11), uint8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %772 = minimum(%770, %771) /* ty=Tensor[(15, 15, 11), uint8] */;
  (%772,)
}

def @func_5559() -> Tensor[(13, 6), float64] {
  %773 = @func_2063() /* ty=(Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) */;
  %773.0
}

def @func_7665() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %774 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
  %775 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %776 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %777 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %778 = %774.0;
  %779 = %775.0;
  %780 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
  %781 = %776.0;
  %782 = %777.0;
  (%778, %779, %780, %781, %782)
}

def @func_1582(%var_1556: uint16) -> (Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) {
  %783 = cast(%var_1556, dtype="uint16") /* ty=uint16 */;
  %784 = cast(meta[relay.Constant][48] /* ty=Tensor[(13, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 5, 8), uint16] */;
  %785 = cast(meta[relay.Constant][49] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %786 = reshape(%785, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %787 = @func_638(%786) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %788 = cast(meta[relay.Constant][50] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %789 = reshape(%788, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %790 = @func_565(%789) /* ty=(Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %791 = subtract(%783, %784) /* ty=Tensor[(13, 5, 8), uint16] */;
  %792 = %787.0;
  %793 = %790.0;
  (%791, %792, meta[relay.Constant][49] /* ty=Tensor[(1365), float32] */, %793, meta[relay.Constant][50] /* ty=Tensor[(1125), float32] */)
}

def @func_1943() -> Tensor[(13, 6), float64] {
  %794 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %794.1
}

def @func_4436() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) {
  %795 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %796 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %797 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %798 = %797.2;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(72), float64] */;
  %800 = %795.0;
  %801 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %802 = %796.0;
  %803 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  %804 = sin(%799) /* ty=Tensor[(72), float64] */;
  (%800, %801, %802, %803, %804)
}

def @func_1638() -> Tensor[(13, 6), float64] {
  %805 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %805.0
}

def @func_8512() -> (Tensor[(14, 4, 13), int64],) {
  %806 = @func_7545() /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) */;
  %807 = %806.3;
  (%807,)
}

def @func_4595() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %808 = @func_4373() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %809 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
  %810 = %808.0;
  (%809, %810)
}

def @func_9231() -> (Tensor[(13, 6), float64],) {
  %811 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
  (%811,)
}

def @func_8448(%var_8439: Tensor[(15, 3, 3), uint16]) -> (Tensor[(15, 3, 3), uint16],) {
  %812 = cast(%var_8439, dtype="uint16") /* ty=Tensor[(15, 3, 3), uint16] */;
  %813 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(15, 3, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 3, 3), uint16] */, dtype="uint16") /* ty=Tensor[(15, 3, 3), uint16] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %816 = bitwise_and(%814, %815) /* ty=Tensor[(15, 3, 3), uint16] */;
  (%816,)
}

def @func_7058() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %817 = @func_5843() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %818 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  %819 = %817.1;
  (%818, %819)
}

def @func_2194() -> (Tensor[(13, 6), float64],) {
  %820 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %821 = %820.0;
  (%821,)
}

def @func_9742() -> (Tensor[(13, 6), float64],) {
  %822 = @func_8849() /* ty=Tensor[(13, 6), float64] */;
  (%822,)
}

def @func_2063() -> (Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) {
  %823 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %824 = cast(meta[relay.Constant][52] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %825 = reshape(%824, newshape=[]) /* ty=uint16 */;
  %826 = @func_1582(%825) /* ty=(Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) */;
  %827 = %823.0;
  %828 = %826.2;
  (%827, %828, meta[relay.Constant][52] /* ty=uint16 */)
}

def @func_4279() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(10, 6, 5), float32]) {
  %829 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %830 = cast(meta[relay.Constant][53] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %831 = reshape(%830, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %832 = @func_1199(%831) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %833 = cast(meta[relay.Constant][54] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %834 = cast(meta[relay.Constant][54] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %835 = reshape(%833, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %836 = reshape(%834, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %837 = @func_671(%835, %836) /* ty=(Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) */;
  %838 = %837.1;
  %839 = cast(meta[relay.Constant][54] /* ty=Tensor[(300), uint16] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %843 = %829.0;
  %844 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
  %845 = %832.3;
  %846 = floor_divide(%841, %842) /* ty=Tensor[(10, 6, 5), float32] */;
  (%843, %844, %845, meta[relay.Constant][53] /* ty=Tensor[(2002), float64] */, %846)
}

def @func_3601(%var_3596: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), float64],) {
  %847 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %848 = shape_of(%var_3596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_3596, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %851 = mod(%849, %850) /* ty=Tensor[(9, 15, 3), float64] */;
  (%851,)
}

def @func_565(%var_544: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %852 = cast(%var_544, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %853 = cast(meta[relay.Constant][56] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %854 = cast(meta[relay.Constant][56] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %855 = reshape(%853, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %856 = reshape(%854, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %857 = @func_93(%855, %856) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %858 = rsqrt(%852) /* ty=Tensor[(15, 15, 5), float32] */;
  %859 = %857.0;
  (%858, %859, meta[relay.Constant][56] /* ty=Tensor[(2002), float64] */)
}

def @func_6029() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %860 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
  %861 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
  (%860, %861)
}

def @func_199(%var_182: Tensor[(10, 15, 14), float64]) -> (Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %862 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %863 = shape_of(%var_182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_182, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %866 = cast(meta[relay.Constant][58] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %867 = cast(meta[relay.Constant][58] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %868 = reshape(%866, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %869 = reshape(%867, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %870 = @func_93(%868, %869) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %871 = mod(%864, %865) /* ty=Tensor[(10, 15, 14), float64] */;
  %872 = %870.1;
  (%871, %872, meta[relay.Constant][58] /* ty=Tensor[(2002), float64] */)
}

def @func_10099(%var_10086: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1694), uint8]) {
  %873 = @func_6029() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %874 = cast(%var_10086, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %875 = cast(%var_10086, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %876 = reshape(%874, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %877 = reshape(%875, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %878 = @func_1405(%876, %877) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
  %879 = %873.0;
  %880 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  %881 = %878.2;
  (%879, %880, %881, %var_10086)
}

def @func_9623(%var_9519: Tensor[(5, 12, 13), float32], %var_9520: Tensor[(5, 12, 13), float32], %var_9524: Tensor[(5, 12, 13), float32], %var_9609: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), bool], Tensor[(13, 6), float64], Tensor[(2100), float64], Tensor[(2100), float64], Tensor[(13, 6), float64], Tensor[(5, 12, 13), uint64], Tensor[(13, 6), float64]) {
  %882 = cast(%var_9520, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %883 = shape_of(%var_9519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%var_9519, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %886 = divide(%884, %885) /* ty=Tensor[(5, 12, 13), float32] */;
  %887 = cast(%var_9524, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
  %892 = cast(meta[relay.Constant][59] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %893 = reshape(%892, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %894 = @func_3371(%893) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) */;
  %895 = @func_7143() /* ty=(Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) */;
  %896 = cast(%var_9520, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %897 = shape_of(%var_9519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_9519, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %900 = less_equal(%898, %899) /* ty=Tensor[(5, 12, 13), bool] */;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %902 = sqrt(%901) /* ty=Tensor[(5, 12, 13), float32] */;
  %903 = cast(%var_9609, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
  %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%902, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %907 = logical_or(%889, %890) /* ty=Tensor[(5, 12, 13), bool] */;
  %908 = %891.0;
  %909 = %894.2;
  %910 = %895.0;
  %911 = multiply(%905, %906) /* ty=Tensor[(5, 12, 13), uint64] */;
  %912 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  (%907, %908, %909, meta[relay.Constant][59] /* ty=Tensor[(2100), float64] */, %910, %911, %912)
}

def @func_4698() -> (Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) {
  %913 = cast(meta[relay.Constant][60] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %914 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %915 = reshape(%913, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), float32] */;
  %916 = reshape(%914, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
  %917 = @func_1056(%915, %916) /* ty=(Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) */;
  %918 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
  %919 = %917.3;
  (%918, %919, meta[relay.Constant][60] /* ty=Tensor[(80), float32] */, meta[relay.Constant][61] /* ty=Tensor[(1, 1573), float32] */)
}

def @func_4956() -> Tensor[(13, 6), float64] {
  %920 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %920.0
}

def @func_5149(%var_5122: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32], Tensor[(132), float64], Tensor[(72), float64], uint32, Tensor[(240), uint32], Tensor[(13, 6), float64]) {
  %921 = cast(meta[relay.Constant][62] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %922 = reshape(%921, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
  %923 = @func_2833(%922) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
  %924 = cast(meta[relay.Constant][63] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %925 = cast(%var_5122, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %926 = reshape(%924, newshape=[]) /* ty=uint32 */;
  %927 = reshape(%925, newshape=[240]) /* ty=Tensor[(240), uint32] */;
  %928 = @func_4786(%926, %927) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) */;
  %929 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %930 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
  %931 = %923.1;
  %932 = %928.2;
  %933 = %929.0;
  (%930, %931, meta[relay.Constant][62] /* ty=Tensor[(132), float64] */, %932, meta[relay.Constant][63] /* ty=uint32 */, %var_5122, %933)
}

def @func_3238(%var_3221: Tensor[(132), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) {
  %934 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %935 = cast(%var_3221, dtype="float64") /* ty=Tensor[(132), float64] */;
  %936 = reshape(%935, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
  %937 = @func_2833(%936) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
  %938 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
  %939 = %934.0;
  %940 = %937.0;
  %941 = %938.0;
  (%939, %940, %var_3221, %941)
}

def @func_1014(%var_971: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) {
  %942 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %943 = cast(%var_971, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %944 = reshape(%943, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %945 = @func_638(%944) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %946 = %945.0;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %948 = reshape(%947, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %949 = @func_638(%948) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %950 = %949.0;
  %951 = cast(meta[relay.Constant][64] /* ty=Tensor[(7, 13, 15), float32] */, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %955 = cast(meta[relay.Constant][64] /* ty=Tensor[(7, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %956 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%950, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %959 = %942.0;
  %960 = less(%953, %954) /* ty=Tensor[(7, 13, 15), bool] */;
  %961 = divide(%957, %958) /* ty=Tensor[(7, 13, 15), float32] */;
  (%959, %946, %var_971, %960, %961)
}

def @func_4658() -> (Tensor[(13, 6), float64],) {
  %962 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %963 = %962.0;
  (%963,)
}

def @func_1607() -> (Tensor[(13, 6), float64],) {
  %964 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%964,)
}

def @func_760() -> Tensor[(13, 6), float64] {
  %965 = cast(meta[relay.Constant][65] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  erf(%965) /* ty=Tensor[(13, 6), float64] */
}

def @func_4842() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
  %966 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %967 = @func_4721() /* ty=(Tensor[(13, 6), float64],) */;
  %968 = @func_2063() /* ty=(Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) */;
  %969 = cast(meta[relay.Constant][66] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %970 = reshape(%969, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %971 = @func_638(%970) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %972 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %973 = %966.0;
  %974 = %967.0;
  %975 = %968.0;
  %976 = %971.0;
  (%972, %973, %974, %975, %976, meta[relay.Constant][66] /* ty=Tensor[(1365), float32] */)
}

def @func_1921() -> Tensor[(13, 6), float64] {
  @func_1780() /* ty=Tensor[(13, 6), float64] */
}

def @func_2024(%var_1957: Tensor[(20, 4), float32], %var_1961: Tensor[(2100), float64], %var_1998: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) {
  %977 = cast(%var_1957, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %978 = reshape(%977, newshape=[1, 16, 5]) /* ty=Tensor[(1, 16, 5), float32] */;
  %979 = @func_248(%978) /* ty=(Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) */;
  %980 = %979.2;
  %981 = cast(%var_1961, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %982 = shape_of(%980, dtype="int32") /* ty=Tensor[(1), int32] */;
  %983 = cast(%980, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?), float32] */;
  %985 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %986 = reshape(%985, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
  %987 = cast(%var_1957, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %988 = sinh(%987) /* ty=Tensor[(20, 4), float32] */;
  %989 = cast(%988, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %990 = exp(%989) /* ty=Tensor[(20, 4), float32] */;
  %991 = cast(%990, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %992 = cast(%var_1998, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %993 = reshape(%991, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), float32] */;
  %994 = reshape(%992, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
  %995 = @func_1056(%993, %994) /* ty=(Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) */;
  %996 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %997 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %998 = cast(meta[relay.Constant][68] /* ty=Tensor[(20, 4), float32] */, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
  %999 = shape_of(%990, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1000 = cast(%990, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1002 = cast(meta[relay.Constant][68] /* ty=Tensor[(20, 4), float32] */, dtype="bool") /* ty=Tensor[(20, 4), bool] */;
  %1003 = shape_of(%990, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1004 = cast(%990, dtype="bool") /* ty=Tensor[(20, 4), bool] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1006 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %1007 = mod(%983, %984) /* ty=Tensor[(2100), float32] */;
  %1008 = @func_1251(%986) /* ty=Tensor[(9, 10, 3), float32] */;
  %1009 = %995.4;
  %1010 = %996.0;
  %1011 = %997.0;
  %1012 = subtract(%1000, %1001) /* ty=Tensor[(20, 4), uint8] */;
  %1013 = logical_and(%1004, %1005) /* ty=Tensor[(20, 4), bool] */;
  (%1006, %1007, %1008, meta[relay.Constant][67] /* ty=Tensor[(6, 45), float32] */, %1009, %var_1998, %1010, %1011, %1012, %1013)
}

def @func_8293(%var_8257: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), bool] {
  %1014 = cast(%var_8257, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  %1015 = cosh(%1014) /* ty=Tensor[(2, 16, 14), float32] */;
  %1016 = cast(%var_8257, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %1017 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%1015, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%1018, %1019) /* ty=Tensor[(2, 16, 14), bool] */
}

def @func_7919(%var_7905: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(4, 20), float32], Tensor[(1573), float32], Tensor[(2100, 7), int8], Tensor[(1125), float32], Tensor[(1125), float32]) {
  %1020 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %1021 = cast(meta[relay.Constant][69] /* ty=Tensor[(4, 20), float32] */, dtype="float32") /* ty=Tensor[(4, 20), float32] */;
  %1022 = cast(meta[relay.Constant][70] /* ty=Tensor[(2100, 1), float64] */, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
  %1023 = cast(%var_7905, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %1024 = reshape(%1021, newshape=[20, 4]) /* ty=Tensor[(20, 4), float32] */;
  %1025 = reshape(%1022, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %1026 = reshape(%1023, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
  %1027 = @func_2024(%1024, %1025, %1026) /* ty=(Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) */;
  %1028 = cast(meta[relay.Constant][70] /* ty=Tensor[(2100, 1), float64] */, dtype="int8") /* ty=Tensor[(2100, 1), int8] */;
  %1029 = cast(meta[relay.Constant][71] /* ty=Tensor[(2100, 7), float64] */, dtype="int8") /* ty=Tensor[(2100, 7), int8] */;
  %1030 = cast(%var_7905, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %1031 = cast(meta[relay.Constant][72] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %1032 = cast(meta[relay.Constant][72] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %1033 = reshape(%1030, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %1034 = reshape(%1031, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
  %1035 = reshape(%1032, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %1036 = @func_616(%1033, %1034, %1035) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
  %1037 = %1020.1;
  %1038 = %1027.2;
  %1039 = bitwise_xor(%1028, %1029) /* ty=Tensor[(2100, 7), int8] */;
  %1040 = %1036.1;
  (%1037, %1038, meta[relay.Constant][69] /* ty=Tensor[(4, 20), float32] */, %var_7905, %1039, %1040, meta[relay.Constant][72] /* ty=Tensor[(1125), float32] */)
}

def @func_9906(%var_9851: Tensor[(1, 2100), float64], %var_9893: Tensor[(5, 2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(5, 2100), float32], Tensor[(1, 2100), float64]) {
  %1041 = @func_7855() /* ty=(Tensor[(13, 6), float64],) */;
  %1042 = cast(%var_9851, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
  %1043 = reshape(%1042, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %1044 = @func_3371(%1043) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) */;
  %1045 = cast(%var_9851, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
  %1046 = cast(%var_9893, dtype="float32") /* ty=Tensor[(5, 2100), float32] */;
  %1047 = cast(%var_9851, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
  %1048 = %1041.0;
  %1049 = %1044.3;
  %1050 = maximum(%1045, %1046) /* ty=Tensor[(5, 2100), float32] */;
  %1051 = log(%1047) /* ty=Tensor[(1, 2100), float64] */;
  (%1048, %1049, %1050, %1051)
}

def @func_1780() -> Tensor[(13, 6), float64] {
  %1052 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %1052.0
}

def @func_3822(%var_3819: Tensor[(300), uint16]) -> (Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) {
  %1053 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
  %1054 = cast(%var_3819, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %1055 = cast(%var_3819, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %1056 = reshape(%1054, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %1057 = reshape(%1055, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %1058 = @func_671(%1056, %1057) /* ty=(Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) */;
  %1059 = %1053.0;
  %1060 = %1058.0;
  (%1059, %1060, %var_3819)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7671() -> Tensor[(14, 4, 13), int64] {
  @func_6952() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_2424() -> Tensor[(13, 6), float64] {
  %1 = fn () -> Tensor[(13, 6), float64] {
    %0 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %0.1
  };
  %1() /* ty=Tensor[(13, 6), float64] */
}

def @func_3978() -> (Tensor[(13, 6), float64],) {
  @func_3976() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_6937() -> (Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %2 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %5 = cast(meta[relay.Constant][2] /* ty=Tensor[(210, 1), int32] */, dtype="int32") /* ty=Tensor[(210, 1), int32] */;
  %6 = reshape(%3, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %7 = reshape(%4, newshape=[14]) /* ty=Tensor[(14), int32] */;
  %8 = reshape(%5, newshape=[1, 210]) /* ty=Tensor[(1, 210), int32] */;
  %9 = @func_6846(%6, %7, %8) /* ty=(Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %10 = %9.0;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(210, 1), int32] */, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %12 = cast(%10, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %13 = cast(meta[relay.Constant][3] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %15 = reshape(%13, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %16 = reshape(%14, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %17 = @func_93(%15, %16) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %18 = %2.0;
  %19 = right_shift(%11, %12) /* ty=Tensor[(210, 72), uint64] */;
  %20 = @func_6325() /* ty=Tensor[(1125), float32] */;
  %21 = %17.1;
  (%18, meta[relay.Constant][0] /* ty=Tensor[(84), float32] */, meta[relay.Constant][1] /* ty=Tensor[(14), int32] */, %19, %20, %21, meta[relay.Constant][3] /* ty=Tensor[(2002), float64] */)
}

def @func_6939() -> (Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  @func_6937() /* ty=(Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */
}

def @func_8366() -> (Tensor[(13, 6), float64],) {
  @func_8364() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_2867() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %22 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %23 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %24 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %25 = %22.0;
  %26 = %23.1;
  %27 = %24.1;
  (%25, %26, %27)
}

def @func_2194() -> (Tensor[(13, 6), float64],) {
  %28 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %29 = %28.0;
  (%29,)
}

def @func_5346() -> (Tensor[(13, 6), float64],) {
  %31 = fn () -> (Tensor[(13, 6), float64],) {
    %30 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
    (%30,)
  };
  %31() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_7319() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) {
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %33 = cast(meta[relay.Constant][5] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %34 = reshape(%32, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %35 = reshape(%33, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %36 = @func_2640(%34, %35) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %37 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %38 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
  %39 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %40 = %36.1;
  %41 = %37.0;
  %42 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %43 = %38.3;
  (%39, %40, meta[relay.Constant][4] /* ty=Tensor[(14), int32] */, meta[relay.Constant][5] /* ty=Tensor[(210), int32] */, %41, %42, %43)
}

def @func_1943() -> Tensor[(13, 6), float64] {
  %44 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %44.1
}

def @func_6218() -> (Tensor[(13, 6), float64],) {
  @func_6216() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_1060(%var_1058: Tensor[(2, 4, 10), float32], %var_1059: Tensor[(1573), float32]) -> (Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) {
  @func_1056(%var_1058, %var_1059) /* ty=(Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) */
}

def @func_1251(%var_1221: Tensor[(9, 10, 3), float32]) -> Tensor[(9, 10, 3), float32] {
  %45 = cast(%var_1221, dtype="float32") /* ty=Tensor[(9, 10, 3), float32] */;
  log10(%45) /* ty=Tensor[(9, 10, 3), float32] */
}

def @func_1454() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %46 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %47 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %48 = %46.0;
  (%47, %48)
}

def @func_8947(%var_8946: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) {
  %58 = fn (%var_8902: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) {
    %49 = cast(%var_8902, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
    %50 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %53 = @func_3754() /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32]) */;
    %54 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %55 = left_shift(%51, %52) /* ty=Tensor[(6, 3, 7), uint64] */;
    %56 = %53.1;
    %57 = %54.1;
    (%55, %56, %57)
  };
  %58(%var_8946) /* ty=(Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) */
}

def @func_7756() -> Tensor[(13, 6), float64] {
  @func_7754() /* ty=Tensor[(13, 6), float64] */
}

def @func_8295(%var_8294: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), bool] {
  %65 = fn (%var_8257: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), bool] {
    %59 = cast(%var_8257, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
    %60 = cosh(%59) /* ty=Tensor[(2, 16, 14), float32] */;
    %61 = cast(%var_8257, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
    %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%60, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%63, %64) /* ty=Tensor[(2, 16, 14), bool] */
  };
  %65(%var_8294) /* ty=Tensor[(2, 16, 14), bool] */
}

def @func_7486() -> Tensor[(?, 1573), float64] {
  %72 = fn () -> Tensor[(?, 1573), float64] {
    %66 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
    %67 = %66.3;
    %68 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1573), float32] */, dtype="float64") /* ty=Tensor[(1, 1573), float64] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
    %70 = cast(%67, dtype="float64") /* ty=Tensor[(1, 1573), float64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    floor_mod(%70, %71) /* ty=Tensor[(?, 1573), float64] */
  };
  %72() /* ty=Tensor[(?, 1573), float64] */
}

def @func_9231() -> (Tensor[(13, 6), float64],) {
  %73 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
  (%73,)
}

def @func_4844() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
  @func_4842() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */
}

def @func_5844() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %80 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %74 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %75 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
    %76 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
    %77 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
    %78 = %74.0;
    %79 = %75.2;
    (%76, %77, %78, %79)
  };
  %80() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_2602(%var_2600: Tensor[(3, 3, 8), float32], %var_2601: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), float32],) {
  @func_2598(%var_2600, %var_2601) /* ty=(Tensor[(3, 3, 8), float32],) */
}

def @func_5262() -> Tensor[(13, 6), float64] {
  @func_5260() /* ty=Tensor[(13, 6), float64] */
}

def @func_1639() -> Tensor[(13, 6), float64] {
  %82 = fn () -> Tensor[(13, 6), float64] {
    %81 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
    %81.0
  };
  %82() /* ty=Tensor[(13, 6), float64] */
}

def @func_2598(%var_2593: Tensor[(3, 3, 8), float32], %var_2594: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), float32],) {
  %83 = cast(%var_2594, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %84 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_2593, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %87 = mod(%85, %86) /* ty=Tensor[(3, 3, 8), float32] */;
  (%87,)
}

def @func_3798() -> Tensor[(13, 6), float64] {
  %89 = fn () -> Tensor[(13, 6), float64] {
    %88 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
    %88.0
  };
  %89() /* ty=Tensor[(13, 6), float64] */
}

def @func_9483() -> Tensor[(1125), bool] {
  @func_9481() /* ty=Tensor[(1125), bool] */
}

def @func_1495() -> (Tensor[(13, 6), float64],) {
  %90 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %91 = %90.0;
  (%91,)
}

def @func_3603(%var_3602: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), float64],) {
  %97 = fn (%var_3596: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), float64],) {
    %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
    %93 = shape_of(%var_3596, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%var_3596, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %96 = mod(%94, %95) /* ty=Tensor[(9, 15, 3), float64] */;
    (%96,)
  };
  %97(%var_3602) /* ty=(Tensor[(9, 15, 3), float64],) */
}

def @func_8332() -> (Tensor[(13, 6), float64],) {
  %99 = fn () -> (Tensor[(13, 6), float64],) {
    %98 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
    (%98,)
  };
  %99() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_4498() -> (Tensor[(72), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %100 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %101 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %102 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %103 = %100.2;
  %104 = %101.0;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_9152(%var_9150: Tensor[(16, 12, 9), bool], %var_9151: Tensor[(1344), int8]) -> (Tensor[(16, 12, 9), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1344), int8]) {
  %123 = fn (%var_9089: Tensor[(16, 12, 9), bool], %var_9135: Tensor[(1344), int8]) -> (Tensor[(16, 12, 9), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1344), int8]) {
    %106 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %107 = shape_of(%var_9089, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%var_9089, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %110 = logical_and(%108, %109) /* ty=Tensor[(16, 12, 9), bool] */;
    %111 = cast(%var_9089, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(%110, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %115 = greater(%113, %114) /* ty=Tensor[(16, 12, 9), bool] */;
    %116 = cast(%115, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
    %117 = cast(%var_9135, dtype="int8") /* ty=Tensor[(1344), int8] */;
    %118 = reshape(%117, newshape=[1344]) /* ty=Tensor[(1344), int8] */;
    %119 = @func_4580(%118) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %120 = rsqrt(%116) /* ty=Tensor[(16, 12, 9), float32] */;
    %121 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
    %122 = %119.0;
    (%120, %121, %122, %var_9135)
  };
  %123(%var_9150, %var_9151) /* ty=(Tensor[(16, 12, 9), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1344), int8]) */
}

def @func_3737(%var_3736: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) {
  %131 = fn (%var_3706: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) {
    %124 = cast(%var_3706, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %125 = reshape(%124, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
    %126 = @func_3066(%125) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) */;
    %127 = cast(%var_3706, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %128 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
    %129 = %126.2;
    %130 = rsqrt(%127) /* ty=Tensor[(2100), float64] */;
    (%128, %129, %130)
  };
  %131(%var_3736) /* ty=(Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) */
}

def @func_7754() -> Tensor[(13, 6), float64] {
  %132 = @func_5843() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %132.1
}

def @func_2463() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %136 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %133 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
    %134 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
    %135 = %133.0;
    (%134, %135)
  };
  %136() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_3522(%var_3514: uint64, %var_3515: Tensor[(12, 5), uint64]) -> Tensor[(12, 5), uint64] {
  %137 = cast(%var_3514, dtype="uint64") /* ty=uint64 */;
  %138 = cast(%var_3515, dtype="uint64") /* ty=Tensor[(12, 5), uint64] */;
  left_shift(%137, %138) /* ty=Tensor[(12, 5), uint64] */
}

def @func_5216() -> (Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) {
  %139 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %141 = cast(meta[relay.Constant][10] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %144 = reshape(%141, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %145 = reshape(%142, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
  %146 = reshape(%143, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %147 = @func_616(%144, %145, %146) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
  %148 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1365), float32] */, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
  %150 = reshape(%149, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %151 = @func_638(%150) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %152 = atan(%140) /* ty=Tensor[(2, 14, 14), float32] */;
  %153 = %147.1;
  %154 = %148.2;
  %155 = %151.0;
  (%152, %153, meta[relay.Constant][10] /* ty=Tensor[(1573), float32] */, meta[relay.Constant][11] /* ty=Tensor[(1125), float32] */, %154, %155, meta[relay.Constant][12] /* ty=Tensor[(1, 1365), float32] */)
}

def @func_6850(%var_6847: Tensor[(84), float32], %var_6848: Tensor[(14), int32], %var_6849: Tensor[(1, 210), int32]) -> (Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %182 = fn (%var_6804: Tensor[(84), float32], %var_6830: Tensor[(14), int32], %var_6831: Tensor[(1, 210), int32]) -> (Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %156 = @func_5319() /* ty=(Tensor[(72), float64],) */;
    %157 = cast(%var_6804, dtype="float32") /* ty=Tensor[(84), float32] */;
    %158 = cast(%var_6804, dtype="float32") /* ty=Tensor[(84), float32] */;
    %159 = reshape(%157, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
    %160 = reshape(%158, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
    %161 = @func_5519(%159, %160) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) */;
    %162 = @func_5734() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) */;
    %163 = cast(meta[relay.Constant][13] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %164 = reshape(%163, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
    %165 = @func_638(%164) /* ty=(Tensor[(7, 13, 15), float32],) */;
    %166 = cast(%var_6830, dtype="int32") /* ty=Tensor[(14), int32] */;
    %167 = cast(%var_6831, dtype="int32") /* ty=Tensor[(1, 210), int32] */;
    %168 = reshape(%166, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
    %169 = reshape(%167, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
    %170 = @func_2640(%168, %169) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
    %171 = %162.2;
    %172 = cast(%171, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %173 = reshape(%172, newshape=[300]) /* ty=Tensor[(300), uint16] */;
    %174 = @func_3822(%173) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
    %175 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
    %176 = %156.0;
    %177 = %161.0;
    %178 = %165.0;
    %179 = %170.1;
    %180 = %174.0;
    %181 = %175.0;
    (%176, %177, %var_6804, %171, %178, meta[relay.Constant][13] /* ty=Tensor[(1365), float32] */, %179, %var_6830, %var_6831, %180, %181)
  };
  %182(%var_6847, %var_6848, %var_6849) /* ty=(Tensor[(72), float64], Tensor[(3, 4, 7), bool], Tensor[(84), float32], Tensor[(300), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(1, 210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_10101(%var_10100: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1694), uint8]) {
  %192 = fn (%var_10086: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1694), uint8]) {
    %183 = @func_6029() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %184 = cast(%var_10086, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
    %185 = cast(%var_10086, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
    %186 = reshape(%184, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
    %187 = reshape(%185, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
    %188 = @func_1405(%186, %187) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
    %189 = %183.0;
    %190 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
    %191 = %188.2;
    (%189, %190, %191, %var_10086)
  };
  %192(%var_10100) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1694), uint8]) */
}

def @func_3240(%var_3239: Tensor[(132), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) {
  %201 = fn (%var_3221: Tensor[(132), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) {
    %193 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %194 = cast(%var_3221, dtype="float64") /* ty=Tensor[(132), float64] */;
    %195 = reshape(%194, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
    %196 = @func_2833(%195) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
    %197 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
    %198 = %193.0;
    %199 = %196.0;
    %200 = %197.0;
    (%198, %199, %var_3221, %200)
  };
  %201(%var_3239) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) */
}

def @func_10176() -> (Tensor[(270), bool], Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(300), int16]) {
  %202 = @func_7545() /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) */;
  %203 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %204 = %202.4;
  %205 = cast(%204, dtype="float32") /* ty=Tensor[(270), float32] */;
  %206 = reshape(%205, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
  %207 = cast(meta[relay.Constant][14] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %208 = reshape(%207, newshape=[300]) /* ty=Tensor[(300), uint16] */;
  %209 = @func_3822(%208) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
  %210 = %209.1;
  %211 = cast(%210, dtype="int16") /* ty=Tensor[(10, 6, 5), int16] */;
  %212 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(300), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %213 = cast(meta[relay.Constant][14] /* ty=Tensor[(300), uint16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?), int16] */;
  %215 = %203.0;
  %216 = @func_1251(%206) /* ty=Tensor[(9, 10, 3), float32] */;
  %217 = bitwise_xor(%213, %214) /* ty=Tensor[(300), int16] */;
  (%204, %215, %216, %217)
}

def @func_2644(%var_2642: Tensor[(1, 7, 2), int32], %var_2643: Tensor[(15, 7, 2), int32]) -> (Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) {
  @func_2640(%var_2642, %var_2643) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */
}

def @func_5321() -> (Tensor[(72), float64],) {
  @func_5319() /* ty=(Tensor[(72), float64],) */
}

def @func_8764() -> Tensor[(13, 6), float64] {
  @func_8762() /* ty=Tensor[(13, 6), float64] */
}

def @func_3919() -> Tensor[(13, 6), float64] {
  @func_3917() /* ty=Tensor[(13, 6), float64] */
}

def @func_1468() -> (Tensor[(13, 6), float64],) {
  %220 = fn () -> (Tensor[(13, 6), float64],) {
    %218 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
    %219 = %218.0;
    (%219,)
  };
  %220() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_93(%var_60: Tensor[(14, 13, 11), float64], %var_61: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) {
  %221 = cast(%var_61, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %222 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_60, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = cast(%var_61, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %226 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_60, dtype="bool") /* ty=Tensor[(14, 13, 11), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = greater_equal(%223, %224) /* ty=Tensor[(14, 13, 11), bool] */;
  %230 = logical_or(%227, %228) /* ty=Tensor[(14, 13, 11), bool] */;
  (%229, %230)
}

def @func_2836(%var_2834: Tensor[(3, 11, 4), float64]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) {
  @func_2833(%var_2834) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */
}

def @func_3069(%var_3067: Tensor[(2100), float64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) {
  @func_3066(%var_3067) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) */
}

def @func_2782() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_2780() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_1695() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_7046() -> Tensor[(13, 6), float64] {
  @func_3917() /* ty=Tensor[(13, 6), float64] */
}

def @func_9518() -> Tensor[(14, 4, 13), int64] {
  %231 = fn () -> Tensor[(14, 4, 13), int64] {
    @func_7671() /* ty=Tensor[(14, 4, 13), int64] */
  };
  %231() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_6694(%var_6692: Tensor[(2, 14, 14), float64]) -> Tensor[(2, 14, 14), uint64] {
  @func_6691(%var_6692) /* ty=Tensor[(2, 14, 14), uint64] */
}

def @func_5319() -> (Tensor[(72), float64],) {
  %232 = @func_4436() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) */;
  %233 = %232.4;
  (%233,)
}

def @func_4842() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
  %234 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %235 = @func_4721() /* ty=(Tensor[(13, 6), float64],) */;
  %236 = @func_2063() /* ty=(Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) */;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %238 = reshape(%237, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %239 = @func_638(%238) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %240 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %241 = %234.0;
  %242 = %235.0;
  %243 = %236.0;
  %244 = %239.0;
  (%240, %241, %242, %243, %244, meta[relay.Constant][15] /* ty=Tensor[(1365), float32] */)
}

def @func_7321() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) {
  @func_7319() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) */
}

def @func_6642(%var_6639: Tensor[(80), float32], %var_6640: Tensor[(2100), float64], %var_6641: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(80), float32], Tensor[(2100), float64], Tensor[(1573), float32]) {
  %258 = fn (%var_6624: Tensor[(80), float32], %var_6625: Tensor[(2100), float64], %var_6626: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(80), float32], Tensor[(2100), float64], Tensor[(1573), float32]) {
    %245 = @func_3133() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %246 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %247 = cast(%var_6624, dtype="float32") /* ty=Tensor[(80), float32] */;
    %248 = cast(%var_6625, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %249 = cast(%var_6626, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %250 = reshape(%247, newshape=[20, 4]) /* ty=Tensor[(20, 4), float32] */;
    %251 = reshape(%248, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
    %252 = reshape(%249, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
    %253 = @func_2024(%250, %251, %252) /* ty=(Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) */;
    %254 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
    %255 = %245.3;
    %256 = %246.0;
    %257 = %253.1;
    (%254, %255, %256, %257, %var_6624, %var_6625, %var_6626)
  };
  %258(%var_6639, %var_6640, %var_6641) /* ty=(Tensor[(13, 6), float64], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(80), float32], Tensor[(2100), float64], Tensor[(1573), float32]) */
}

def @func_7840(%var_7827: Tensor[(5, 12, 3), uint16]) -> Tensor[(5, 12, 3), uint16] {
  %259 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 12, 3), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
  %260 = shape_of(%var_7827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_7827, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%261, %262) /* ty=Tensor[(5, 12, 3), uint16] */
}

def @func_3824(%var_3823: Tensor[(300), uint16]) -> (Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) {
  %271 = fn (%var_3819: Tensor[(300), uint16]) -> (Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) {
    %263 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
    %264 = cast(%var_3819, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %265 = cast(%var_3819, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %266 = reshape(%264, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
    %267 = reshape(%265, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
    %268 = @func_671(%266, %267) /* ty=(Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) */;
    %269 = %263.0;
    %270 = %268.0;
    (%269, %270, %var_3819)
  };
  %271(%var_3823) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */
}

def @func_9946() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %272 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %273 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %274 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %275 = %274.2;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(132), float64] */;
  %277 = %272.0;
  %278 = %273.1;
  %279 = acosh(%276) /* ty=Tensor[(132), float64] */;
  (%277, %278, %279)
}

def @func_3066(%var_3025: Tensor[(2100), float64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) {
  %280 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %281 = log10(%280) /* ty=Tensor[(12, 11, 2), float32] */;
  %282 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 11, 2), float32] */, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %286 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %287 = reshape(%286, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %288 = @func_199(%287) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %289 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %290 = reshape(%289, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %291 = @func_199(%290) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %292 = %291.1;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %294 = cast(%var_3025, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %295 = reshape(%294, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %296 = @func_199(%295) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %297 = minimum(%284, %285) /* ty=Tensor[(12, 11, 2), uint64] */;
  %298 = %288.2;
  %299 = log10(%293) /* ty=Tensor[(14, 13, 11), float64] */;
  %300 = %296.0;
  (%297, %var_3025, %298, %299, %300)
}

def @func_9010(%var_9009: Tensor[(1365, 13), float32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1365, 13), uint32]) {
  %310 = fn (%var_9004: Tensor[(1365, 13), float32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1365, 13), uint32]) {
    %301 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
    %302 = cast(meta[relay.Constant][18] /* ty=Tensor[(1365, 1), float32] */, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
    %303 = reshape(%302, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %304 = @func_1014(%303) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) */;
    %305 = cast(meta[relay.Constant][18] /* ty=Tensor[(1365, 1), float32] */, dtype="uint32") /* ty=Tensor[(1365, 1), uint32] */;
    %306 = cast(%var_9004, dtype="uint32") /* ty=Tensor[(1365, 13), uint32] */;
    %307 = %301.0;
    %308 = %304.0;
    %309 = add(%305, %306) /* ty=Tensor[(1365, 13), uint32] */;
    (%307, %308, %309)
  };
  %310(%var_9009) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(1365, 13), uint32]) */
}

def @func_1429() -> Tensor[(13, 6), float64] {
  %311 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %311.0
}

def @func_2573() -> (Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) {
  %327 = fn () -> (Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) {
    %312 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %313 = reshape(%312, newshape=[]) /* ty=uint16 */;
    %314 = @func_1582(%313) /* ty=(Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) */;
    %315 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
    %316 = cos(%315) /* ty=Tensor[(13, 2, 1), float64] */;
    %317 = cast(%316, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
    %318 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
    %319 = power(%317, %318) /* ty=Tensor[(13, 2, 1), float64] */;
    %320 = cast(%319, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
    %321 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%316, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %324 = %314.4;
    %325 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
    %326 = bitwise_xor(%322, %323) /* ty=Tensor[(13, 2, ?), uint32] */;
    (%324, %325, %326)
  };
  %327() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */
}

def @func_7366(%var_7365: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1125), float32]) {
  %331 = fn (%var_7351: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1125), float32]) {
    %328 = cast(%var_7351, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
    %329 = sin(%328) /* ty=Tensor[(14, 10, 8), float64] */;
    %330 = @func_6325() /* ty=Tensor[(1125), float32] */;
    (%329, %330)
  };
  %331(%var_7365) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(1125), float32]) */
}

def @func_3004() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %332 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %333 = %332.0;
  %334 = @func_2423() /* ty=Tensor[(13, 6), float64] */;
  (%333, %334)
}

def @func_9076() -> Tensor[(13, 6), float64] {
  @func_9074() /* ty=Tensor[(13, 6), float64] */
}

def @func_6456(%var_6436: Tensor[(11, 10, 8), uint16]) -> (Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) {
  %335 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 10, 8), uint16] */, dtype="uint16") /* ty=Tensor[(11, 10, 8), uint16] */;
  %336 = shape_of(%var_6436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%var_6436, dtype="uint16") /* ty=Tensor[(11, 10, 8), uint16] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %339 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
  %340 = logical_xor(%337, %338) /* ty=Tensor[(11, 10, 8), uint16] */;
  %341 = %339.2;
  (%340, %341)
}

def @func_5296() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %346 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %342 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %343 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
    %344 = %342.0;
    %345 = %343.1;
    (%344, %345)
  };
  %346() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_1852() -> (Tensor[(13, 6), float64],) {
  @func_1850() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_674(%var_672: Tensor[(10, 6, 5), uint16], %var_673: Tensor[(10, 6, 5), uint16]) -> (Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) {
  %354 = fn (%var_655: Tensor[(10, 6, 5), uint16], %var_656: Tensor[(10, 6, 5), uint16]) -> (Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) {
    %347 = cast(%var_656, dtype="uint16") /* ty=Tensor[(10, 6, 5), uint16] */;
    %348 = shape_of(%var_655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%var_655, dtype="uint16") /* ty=Tensor[(10, 6, 5), uint16] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %351 = cast(%var_655, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %352 = subtract(%349, %350) /* ty=Tensor[(10, 6, 5), uint16] */;
    %353 = asinh(%351) /* ty=Tensor[(10, 6, 5), float64] */;
    (%352, %353)
  };
  %354(%var_672, %var_673) /* ty=(Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) */
}

def @func_3878(%var_3876: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  @func_3875(%var_3876) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) */
}

def @func_7060() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_7058() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_7144() -> (Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) {
  %359 = fn () -> (Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) {
    %355 = @func_7058() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %356 = %355.1;
    %357 = @func_3834() /* ty=Tensor[(2, 14, 14), float64] */;
    %358 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
    (%356, %357, %358)
  };
  %359() /* ty=(Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) */
}

def @func_6410() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_6408() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_8086(%var_8084: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  @func_8083(%var_8084) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) */
}

def @func_9812() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %367 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %360 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %361 = @func_4658() /* ty=(Tensor[(13, 6), float64],) */;
    %362 = @func_4373() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %363 = @func_4956() /* ty=Tensor[(13, 6), float64] */;
    %364 = %360.4;
    %365 = %361.0;
    %366 = %362.0;
    (%363, %364, %365, %366)
  };
  %367() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_4374() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %371 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %368 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
    %369 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
    %370 = %368.0;
    (%369, %370)
  };
  %371() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_201(%var_200: Tensor[(10, 15, 14), float64]) -> (Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %383 = fn (%var_182: Tensor[(10, 15, 14), float64]) -> (Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
    %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
    %373 = shape_of(%var_182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_182, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %376 = cast(meta[relay.Constant][23] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %378 = reshape(%376, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %379 = reshape(%377, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %380 = @func_93(%378, %379) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
    %381 = mod(%374, %375) /* ty=Tensor[(10, 15, 14), float64] */;
    %382 = %380.1;
    (%381, %382, meta[relay.Constant][23] /* ty=Tensor[(2002), float64] */)
  };
  %383(%var_200) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */
}

def @func_5230() -> Tensor[(13, 6), float64] {
  %384 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %384.0
}

def @func_2405() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) {
  %385 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %386 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %387 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %388 = cast(meta[relay.Constant][24] /* ty=Tensor[(1694), uint8] */, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(1694), uint8] */, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %390 = reshape(%388, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %391 = reshape(%389, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %392 = @func_1405(%390, %391) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
  %393 = %385.0;
  %394 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  %395 = %386.0;
  %396 = %387.0;
  %397 = %392.1;
  (%393, %394, %395, %396, %397, meta[relay.Constant][24] /* ty=Tensor[(1694), uint8] */)
}

def @func_8653(%var_8651: Tensor[(14, 7, 13), uint32], %var_8652: Tensor[(14, 7, 13), uint32]) -> (Tensor[(14, 7, 13), float32],) {
  @func_8649(%var_8651, %var_8652) /* ty=(Tensor[(14, 7, 13), float32],) */
}

def @func_3143() -> Tensor[(13, 6), float64] {
  %398 = fn () -> Tensor[(13, 6), float64] {
    @func_1921() /* ty=Tensor[(13, 6), float64] */
  };
  %398() /* ty=Tensor[(13, 6), float64] */
}

def @func_6691(%var_6684: Tensor[(2, 14, 14), float64]) -> Tensor[(2, 14, 14), uint64] {
  %399 = @func_3834() /* ty=Tensor[(2, 14, 14), float64] */;
  %400 = cast(%var_6684, dtype="uint64") /* ty=Tensor[(2, 14, 14), uint64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="uint64") /* ty=Tensor[(2, 14, 14), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%402, %403) /* ty=Tensor[(2, 14, 14), uint64] */
}

def @func_7731() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(11, 10, 8), uint16], Tensor[(40, 22), uint16]) {
  %404 = @func_4115() /* ty=(Tensor[(13, 6), float64],) */;
  %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(40, 22), uint16] */, dtype="uint16") /* ty=Tensor[(40, 22), uint16] */;
  %406 = reshape(%405, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), uint16] */;
  %407 = @func_6456(%406) /* ty=(Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) */;
  %408 = %404.0;
  %409 = @func_2423() /* ty=Tensor[(13, 6), float64] */;
  %410 = %407.0;
  (%408, %409, %410, meta[relay.Constant][25] /* ty=Tensor[(40, 22), uint16] */)
}

def @func_5260() -> Tensor[(13, 6), float64] {
  @func_3328() /* ty=Tensor[(13, 6), float64] */
}

def @func_568(%var_566: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  @func_565(%var_566) /* ty=(Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */
}

def @func_1707() -> (Tensor[(13, 6), float64],) {
  %411 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%411,)
}

def @func_2931(%var_2929: Tensor[(14, 5, 13), int8], %var_2930: Tensor[(14, 5, 13), int8]) -> (Tensor[(14, 5, 13), int8],) {
  @func_2927(%var_2929, %var_2930) /* ty=(Tensor[(14, 5, 13), int8],) */
}

def @func_4582(%var_4581: Tensor[(1344), int8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %427 = fn (%var_4561: Tensor[(1344), int8]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %412 = @func_4436() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) */;
    %413 = cast(%var_4561, dtype="int8") /* ty=Tensor[(1344), int8] */;
    %414 = reshape(%413, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int8] */;
    %415 = @func_3619(%414) /* ty=(Tensor[(6, 16, 14), bool],) */;
    %416 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 44), float64] */, dtype="float64") /* ty=Tensor[(3, 44), float64] */;
    %417 = reshape(%416, newshape=[132]) /* ty=Tensor[(132), float64] */;
    %418 = @func_3238(%417) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) */;
    %419 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
    %420 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %421 = %412.3;
    %422 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
    %423 = %415.0;
    %424 = %418.3;
    %425 = %419.0;
    %426 = %420.0;
    (%421, %422, %423, %var_4561, %424, meta[relay.Constant][26] /* ty=Tensor[(3, 44), float64] */, %425, %426)
  };
  %427(%var_4581) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(6, 16, 14), bool], Tensor[(1344), int8], Tensor[(13, 6), float64], Tensor[(3, 44), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_8513() -> (Tensor[(14, 4, 13), int64],) {
  %430 = fn () -> (Tensor[(14, 4, 13), int64],) {
    %428 = @func_7545() /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) */;
    %429 = %428.3;
    (%429,)
  };
  %430() /* ty=(Tensor[(14, 4, 13), int64],) */
}

def @func_4245(%var_4243: Tensor[(14), int32], %var_4244: Tensor[(210), int32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 7, 2), int32]) {
  @func_4241(%var_4243, %var_4244) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 7, 2), int32]) */
}

def @func_2263() -> (Tensor[(13, 6), float64],) {
  @func_2261() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_3756() -> (Tensor[(13, 6), float64], Tensor[(72), float32]) {
  @func_3754() /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32]) */
}

def @func_6517() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %435 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %431 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
    %432 = @func_4721() /* ty=(Tensor[(13, 6), float64],) */;
    %433 = %431.0;
    %434 = %432.0;
    (%433, %434)
  };
  %435() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_5151(%var_5150: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32], Tensor[(132), float64], Tensor[(72), float64], uint32, Tensor[(240), uint32], Tensor[(13, 6), float64]) {
  %449 = fn (%var_5122: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32], Tensor[(132), float64], Tensor[(72), float64], uint32, Tensor[(240), uint32], Tensor[(13, 6), float64]) {
    %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
    %437 = reshape(%436, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
    %438 = @func_2833(%437) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
    %439 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %440 = cast(%var_5122, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %441 = reshape(%439, newshape=[]) /* ty=uint32 */;
    %442 = reshape(%440, newshape=[240]) /* ty=Tensor[(240), uint32] */;
    %443 = @func_4786(%441, %442) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) */;
    %444 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %445 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
    %446 = %438.1;
    %447 = %443.2;
    %448 = %444.0;
    (%445, %446, meta[relay.Constant][27] /* ty=Tensor[(132), float64] */, %447, meta[relay.Constant][28] /* ty=uint32 */, %var_5122, %448)
  };
  %449(%var_5150) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32], Tensor[(132), float64], Tensor[(72), float64], uint32, Tensor[(240), uint32], Tensor[(13, 6), float64]) */
}

def @func_3511() -> (Tensor[(1125), float32],) {
  %452 = fn () -> (Tensor[(1125), float32],) {
    %450 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
    %451 = %450.0;
    (%451,)
  };
  %452() /* ty=(Tensor[(1125), float32],) */
}

def @func_8719() -> (Tensor[(13, 6), float64],) {
  %453 = @func_5230() /* ty=Tensor[(13, 6), float64] */;
  (%453,)
}

def @func_7952() -> Tensor[(1125), float32] {
  @func_7950() /* ty=Tensor[(1125), float32] */
}

def @func_248(%var_233: Tensor[(1, 16, 5), float32]) -> (Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) {
  %454 = cast(%var_233, dtype="float32") /* ty=Tensor[(1, 16, 5), float32] */;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %456 = reshape(%455, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), float64] */;
  %457 = @func_199(%456) /* ty=(Tensor[(10, 15, 14), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %458 = rsqrt(%454) /* ty=Tensor[(1, 16, 5), float32] */;
  %459 = %457.1;
  (%458, %459, meta[relay.Constant][29] /* ty=Tensor[(2100), float64] */)
}

def @func_6408() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %460 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
  %461 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
  %462 = %460.0;
  (%461, %462)
}

def @func_8850() -> Tensor[(13, 6), float64] {
  %463 = fn () -> Tensor[(13, 6), float64] {
    @func_3328() /* ty=Tensor[(13, 6), float64] */
  };
  %463() /* ty=Tensor[(13, 6), float64] */
}

def @func_8252(%var_8251: Tensor[(132), float64]) -> (Tensor[(132), float32],) {
  %471 = fn (%var_8235: Tensor[(132), float64]) -> (Tensor[(132), float32],) {
    %464 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
    %465 = %464.2;
    %466 = cast(%var_8235, dtype="float32") /* ty=Tensor[(132), float32] */;
    %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(1), int32] */;
    %468 = cast(%465, dtype="float32") /* ty=Tensor[(132), float32] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), float32] */;
    %470 = add(%468, %469) /* ty=Tensor[(132), float32] */;
    (%470,)
  };
  %471(%var_8251) /* ty=(Tensor[(132), float32],) */
}

def @func_8108(%var_8098: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), float32], Tensor[(1, 1573), float32]) {
  %472 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
  %473 = cast(%var_8098, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %474 = @func_7319() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) */;
  %475 = mod(%472, %473) /* ty=Tensor[(15, 7, 15), float32] */;
  %476 = %474.6;
  (%475, %476)
}

def @func_2028(%var_2025: Tensor[(20, 4), float32], %var_2026: Tensor[(2100), float64], %var_2027: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) {
  %514 = fn (%var_1957: Tensor[(20, 4), float32], %var_1961: Tensor[(2100), float64], %var_1998: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) {
    %477 = cast(%var_1957, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
    %478 = reshape(%477, newshape=[1, 16, 5]) /* ty=Tensor[(1, 16, 5), float32] */;
    %479 = @func_248(%478) /* ty=(Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) */;
    %480 = %479.2;
    %481 = cast(%var_1961, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(1), int32] */;
    %483 = cast(%480, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?), float32] */;
    %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
    %486 = reshape(%485, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
    %487 = cast(%var_1957, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
    %488 = sinh(%487) /* ty=Tensor[(20, 4), float32] */;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
    %490 = exp(%489) /* ty=Tensor[(20, 4), float32] */;
    %491 = cast(%490, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
    %492 = cast(%var_1998, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %493 = reshape(%491, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), float32] */;
    %494 = reshape(%492, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
    %495 = @func_1056(%493, %494) /* ty=(Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) */;
    %496 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
    %497 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
    %498 = cast(meta[relay.Constant][32] /* ty=Tensor[(20, 4), float32] */, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
    %499 = shape_of(%490, dtype="int32") /* ty=Tensor[(2), int32] */;
    %500 = cast(%490, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(20, 4), float32] */, dtype="bool") /* ty=Tensor[(20, 4), bool] */;
    %503 = shape_of(%490, dtype="int32") /* ty=Tensor[(2), int32] */;
    %504 = cast(%490, dtype="bool") /* ty=Tensor[(20, 4), bool] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %506 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
    %507 = mod(%483, %484) /* ty=Tensor[(2100), float32] */;
    %508 = @func_1251(%486) /* ty=Tensor[(9, 10, 3), float32] */;
    %509 = %495.4;
    %510 = %496.0;
    %511 = %497.0;
    %512 = subtract(%500, %501) /* ty=Tensor[(20, 4), uint8] */;
    %513 = logical_and(%504, %505) /* ty=Tensor[(20, 4), bool] */;
    (%506, %507, %508, meta[relay.Constant][31] /* ty=Tensor[(6, 45), float32] */, %509, %var_1998, %510, %511, %512, %513)
  };
  %514(%var_2025, %var_2026, %var_2027) /* ty=(Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) */
}

def @func_2063() -> (Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) {
  %515 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %516 = cast(meta[relay.Constant][33] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %517 = reshape(%516, newshape=[]) /* ty=uint16 */;
  %518 = @func_1582(%517) /* ty=(Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) */;
  %519 = %515.0;
  %520 = %518.2;
  (%519, %520, meta[relay.Constant][33] /* ty=uint16 */)
}

def @func_7188(%var_7186: Tensor[(13, 12, 6), float32], %var_7187: Tensor[(13, 12, 6), float32]) -> (Tensor[(132), float64], Tensor[(880), uint16], Tensor[(13, 12, 6), bool]) {
  @func_7184(%var_7186, %var_7187) /* ty=(Tensor[(132), float64], Tensor[(880), uint16], Tensor[(13, 12, 6), bool]) */
}

def @func_1330(%var_1328: Tensor[(15, 15, 11), uint8], %var_1329: Tensor[(15, 15, 11), uint8]) -> (Tensor[(15, 15, 11), uint8],) {
  @func_1326(%var_1328, %var_1329) /* ty=(Tensor[(15, 15, 11), uint8],) */
}

def @func_1056(%var_1023: Tensor[(2, 4, 10), float32], %var_1048: Tensor[(1573), float32]) -> (Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) {
  %521 = cast(%var_1023, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
  %522 = asinh(%521) /* ty=Tensor[(2, 4, 10), float32] */;
  %523 = cast(%var_1023, dtype="uint8") /* ty=Tensor[(2, 4, 10), uint8] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="uint8") /* ty=Tensor[(2, 4, 10), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %527 = cast(%522, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  %528 = cast(%var_1048, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %529 = cast(meta[relay.Constant][34] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %530 = cast(meta[relay.Constant][34] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %531 = reshape(%528, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %532 = reshape(%529, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
  %533 = reshape(%530, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %534 = @func_616(%531, %532, %533) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
  %535 = logical_xor(%525, %526) /* ty=Tensor[(2, 4, 10), uint8] */;
  %536 = log(%527) /* ty=Tensor[(2, 4, 10), float64] */;
  %537 = %534.1;
  (%535, %536, %537, %var_1048, meta[relay.Constant][34] /* ty=Tensor[(1125), float32] */)
}

def @func_1431() -> Tensor[(13, 6), float64] {
  @func_1429() /* ty=Tensor[(13, 6), float64] */
}

def @func_3875(%var_3873: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  %538 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %539 = cast(%var_3873, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %540 = reshape(%539, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %541 = @func_3735(%540) /* ty=(Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) */;
  %542 = %538.0;
  %543 = %541.0;
  (%542, %543, %var_3873)
}

def @func_8499(%var_8498: Tensor[(13, 6), float64]) -> (Tensor[(13, 6), uint8], Tensor[(13, 6), float64]) {
  %552 = fn (%var_8474: Tensor[(13, 6), float64]) -> (Tensor[(13, 6), uint8], Tensor[(13, 6), float64]) {
    %544 = @func_3133() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %545 = %544.4;
    %546 = cast(%var_8474, dtype="uint8") /* ty=Tensor[(13, 6), uint8] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(2), int32] */;
    %548 = cast(%545, dtype="uint8") /* ty=Tensor[(13, 6), uint8] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %550 = minimum(%548, %549) /* ty=Tensor[(13, 6), uint8] */;
    %551 = @func_4956() /* ty=Tensor[(13, 6), float64] */;
    (%550, %551)
  };
  %552(%var_8498) /* ty=(Tensor[(13, 6), uint8], Tensor[(13, 6), float64]) */
}

def @func_7868() -> Tensor[(13, 6), float64] {
  @func_7866() /* ty=Tensor[(13, 6), float64] */
}

def @func_3464() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %557 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %553 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
    %554 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
    %555 = %553.0;
    %556 = %554.0;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_3526(%var_3524: uint64, %var_3525: Tensor[(12, 5), uint64]) -> Tensor[(12, 5), uint64] {
  @func_3522(%var_3524, %var_3525) /* ty=Tensor[(12, 5), uint64] */
}

def @func_5232() -> Tensor[(13, 6), float64] {
  @func_5230() /* ty=Tensor[(13, 6), float64] */
}

def @func_8712() -> (Tensor[(13, 6), float64],) {
  %560 = fn () -> (Tensor[(13, 6), float64],) {
    %558 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %559 = %558.1;
    (%559,)
  };
  %560() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_1409(%var_1407: Tensor[(14, 11, 11), uint8], %var_1408: Tensor[(14, 11, 11), uint8]) -> (Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) {
  @func_1405(%var_1407, %var_1408) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */
}

def @func_4436() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) {
  %561 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %562 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
  %563 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %564 = %563.2;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(72), float64] */;
  %566 = %561.0;
  %567 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  %568 = %562.0;
  %569 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  %570 = sin(%565) /* ty=Tensor[(72), float64] */;
  (%566, %567, %568, %569, %570)
}

def @func_873(%var_872: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
  %577 = fn (%var_858: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) {
    %571 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
    %572 = cast(%var_858, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %573 = reshape(%572, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
    %574 = @func_638(%573) /* ty=(Tensor[(7, 13, 15), float32],) */;
    %575 = %571.0;
    %576 = %574.0;
    (%575, %576, %var_858)
  };
  %577(%var_872) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */
}

def @func_3134() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %590 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %578 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
    %579 = cast(meta[relay.Constant][35] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
    %580 = cast(meta[relay.Constant][36] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
    %581 = reshape(%579, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
    %582 = reshape(%580, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
    %583 = @func_2640(%581, %582) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
    %584 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
    %585 = @func_2780() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %586 = %578.0;
    %587 = %583.1;
    %588 = %584.0;
    %589 = %585.0;
    (%586, %587, meta[relay.Constant][35] /* ty=Tensor[(14), int32] */, meta[relay.Constant][36] /* ty=Tensor[(210), int32] */, %588, %589)
  };
  %590() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_5633(%var_5564: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(1694), uint8], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64]) {
  %591 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
  %592 = cast(%var_5564, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %593 = cast(%var_5564, dtype="uint8") /* ty=Tensor[(1694), uint8] */;
  %594 = reshape(%592, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %595 = reshape(%593, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), uint8] */;
  %596 = @func_1405(%594, %595) /* ty=(Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %599 = %591.0;
  %600 = @func_1943() /* ty=Tensor[(13, 6), float64] */;
  %601 = tan(%598) /* ty=Tensor[(14, 11, 11), float64] */;
  (%599, %var_5564, %600, %601)
}

def @func_4281() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(10, 6, 5), float32]) {
  @func_4279() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(10, 6, 5), float32]) */
}

def @func_5061() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %610 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %602 = @func_3976() /* ty=(Tensor[(13, 6), float64],) */;
    %603 = @func_4842() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */;
    %604 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
    %605 = @func_2194() /* ty=(Tensor[(13, 6), float64],) */;
    %606 = %602.0;
    %607 = %603.1;
    %608 = %604.0;
    %609 = %605.0;
    (%606, %607, %608, %609)
  };
  %610() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_4722() -> (Tensor[(13, 6), float64],) {
  %612 = fn () -> (Tensor[(13, 6), float64],) {
    %611 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
    (%611,)
  };
  %612() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_5493() -> Tensor[(4, 4, 1), float64] {
  @func_5491() /* ty=Tensor[(4, 4, 1), float64] */
}

def @func_8762() -> Tensor[(13, 6), float64] {
  %613 = @func_4658() /* ty=(Tensor[(13, 6), float64],) */;
  %613.0
}

def @func_7048() -> Tensor[(13, 6), float64] {
  @func_7046() /* ty=Tensor[(13, 6), float64] */
}

def @func_8364() -> (Tensor[(13, 6), float64],) {
  %614 = @func_5295() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %615 = %614.1;
  (%615,)
}

def @func_7950() -> Tensor[(1125), float32] {
  %616 = @func_6937() /* ty=(Tensor[(13, 6), float64], Tensor[(84), float32], Tensor[(14), int32], Tensor[(210, 72), uint64], Tensor[(1125), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %616.4
}

def @func_3374(%var_3372: Tensor[(2100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) {
  @func_3371(%var_3372) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) */
}

def @func_641(%var_639: Tensor[(7, 13, 15), float32]) -> (Tensor[(7, 13, 15), float32],) {
  @func_638(%var_639) /* ty=(Tensor[(7, 13, 15), float32],) */
}

def @func_9909(%var_9907: Tensor[(1, 2100), float64], %var_9908: Tensor[(5, 2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(5, 2100), float32], Tensor[(1, 2100), float64]) {
  %628 = fn (%var_9851: Tensor[(1, 2100), float64], %var_9893: Tensor[(5, 2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(5, 2100), float32], Tensor[(1, 2100), float64]) {
    %617 = @func_7855() /* ty=(Tensor[(13, 6), float64],) */;
    %618 = cast(%var_9851, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
    %619 = reshape(%618, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
    %620 = @func_3371(%619) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) */;
    %621 = cast(%var_9851, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
    %622 = cast(%var_9893, dtype="float32") /* ty=Tensor[(5, 2100), float32] */;
    %623 = cast(%var_9851, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
    %624 = %617.0;
    %625 = %620.3;
    %626 = maximum(%621, %622) /* ty=Tensor[(5, 2100), float32] */;
    %627 = log(%623) /* ty=Tensor[(1, 2100), float64] */;
    (%624, %625, %626, %627)
  };
  %628(%var_9907, %var_9908) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(5, 2100), float32], Tensor[(1, 2100), float64]) */
}

def @func_2869() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_3371(%var_3360: Tensor[(2100), float64]) -> (Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) {
  %629 = cast(%var_3360, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %630 = reshape(%629, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %631 = @func_3066(%630) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(2100), float64], Tensor[(2002), float64], Tensor[(14, 13, 11), float64], Tensor[(10, 15, 14), float64]) */;
  %632 = @func_2662() /* ty=Tensor[(2, 14, 14), float64] */;
  %633 = %631.2;
  %634 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  (%632, %633, %var_3360, %634)
}

def @func_4500() -> (Tensor[(72), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_4498() /* ty=(Tensor[(72), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_4241(%var_4231: Tensor[(14), int32], %var_4232: Tensor[(210), int32]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 7, 2), int32]) {
  %635 = @func_2572() /* ty=(Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(13, 2, ?), uint32]) */;
  %636 = cast(%var_4231, dtype="int32") /* ty=Tensor[(14), int32] */;
  %637 = cast(%var_4232, dtype="int32") /* ty=Tensor[(210), int32] */;
  %638 = reshape(%636, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %639 = reshape(%637, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %640 = @func_2640(%638, %639) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %641 = cast(%var_4231, dtype="int32") /* ty=Tensor[(14), int32] */;
  %642 = cast(%var_4232, dtype="int32") /* ty=Tensor[(210), int32] */;
  %643 = reshape(%641, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), int32] */;
  %644 = reshape(%642, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), int32] */;
  %645 = @func_2640(%643, %644) /* ty=(Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) */;
  %646 = %635.1;
  %647 = @func_1921() /* ty=Tensor[(13, 6), float64] */;
  %648 = %640.1;
  %649 = %645.0;
  (%646, %647, %648, %var_4231, %var_4232, %649)
}

def @func_4634(%var_4631: uint32, %var_4632: Tensor[(1, 14, 4), uint32], %var_4633: Tensor[(8, 2, 15), uint32]) -> (Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) {
  %656 = fn (%var_4616: uint32, %var_4617: Tensor[(1, 14, 4), uint32], %var_4624: Tensor[(8, 2, 15), uint32]) -> (Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) {
    %650 = cast(%var_4616, dtype="uint32") /* ty=uint32 */;
    %651 = cast(%var_4617, dtype="uint32") /* ty=Tensor[(1, 14, 4), uint32] */;
    %652 = cast(%var_4616, dtype="bool") /* ty=bool */;
    %653 = cast(%var_4624, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
    %654 = bitwise_and(%650, %651) /* ty=Tensor[(1, 14, 4), uint32] */;
    %655 = logical_and(%652, %653) /* ty=Tensor[(8, 2, 15), bool] */;
    (%654, %655)
  };
  %656(%var_4631, %var_4632, %var_4633) /* ty=(Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) */
}

def @func_5447(%var_5446: Tensor[(6, 9, 12), bool]) -> (Tensor[(6, 9, 12), bool], Tensor[(6, 9, 12), float64]) {
  %664 = fn (%var_5408: Tensor[(6, 9, 12), bool]) -> (Tensor[(6, 9, 12), bool], Tensor[(6, 9, 12), float64]) {
    %657 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(6, 9, 12), bool] */;
    %658 = shape_of(%var_5408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%var_5408, dtype="bool") /* ty=Tensor[(6, 9, 12), bool] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %661 = cast(%var_5408, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
    %662 = logical_or(%659, %660) /* ty=Tensor[(6, 9, 12), bool] */;
    %663 = log2(%661) /* ty=Tensor[(6, 9, 12), float64] */;
    (%662, %663)
  };
  %664(%var_5446) /* ty=(Tensor[(6, 9, 12), bool], Tensor[(6, 9, 12), float64]) */
}

def @func_7666() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %674 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %665 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
    %666 = @func_2261() /* ty=(Tensor[(13, 6), float64],) */;
    %667 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %668 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %669 = %665.0;
    %670 = %666.0;
    %671 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
    %672 = %667.0;
    %673 = %668.0;
    (%669, %670, %671, %672, %673)
  };
  %674() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_932() -> (Tensor[(13, 6), float64],) {
  %675 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  (%675,)
}

def @func_3622(%var_3620: Tensor[(6, 16, 14), int8]) -> (Tensor[(6, 16, 14), bool],) {
  @func_3619(%var_3620) /* ty=(Tensor[(6, 16, 14), bool],) */
}

def @func_6030() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %678 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %676 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
    %677 = @func_5559() /* ty=Tensor[(13, 6), float64] */;
    (%676, %677)
  };
  %678() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_1850() -> (Tensor[(13, 6), float64],) {
  %679 = @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %680 = %679.1;
  (%680,)
}

def @func_9629(%var_9625: Tensor[(5, 12, 13), float32], %var_9626: Tensor[(5, 12, 13), float32], %var_9627: Tensor[(5, 12, 13), float32], %var_9628: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), bool], Tensor[(13, 6), float64], Tensor[(2100), float64], Tensor[(2100), float64], Tensor[(13, 6), float64], Tensor[(5, 12, 13), uint64], Tensor[(13, 6), float64]) {
  @func_9623(%var_9625, %var_9626, %var_9627, %var_9628) /* ty=(Tensor[(5, 12, 13), bool], Tensor[(13, 6), float64], Tensor[(2100), float64], Tensor[(2100), float64], Tensor[(13, 6), float64], Tensor[(5, 12, 13), uint64], Tensor[(13, 6), float64]) */
}

def @func_3330() -> Tensor[(13, 6), float64] {
  @func_3328() /* ty=Tensor[(13, 6), float64] */
}

def @func_6326() -> Tensor[(1125), float32] {
  %682 = fn () -> Tensor[(1125), float32] {
    %681 = @func_5216() /* ty=(Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) */;
    %681.1
  };
  %682() /* ty=Tensor[(1125), float32] */
}

def @func_5522(%var_5520: Tensor[(3, 4, 7), float32], %var_5521: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) {
  %695 = fn (%var_5497: Tensor[(3, 4, 7), float32], %var_5498: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) {
    %683 = cast(%var_5498, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %684 = shape_of(%var_5497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%var_5497, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %687 = divide(%685, %686) /* ty=Tensor[(3, 4, 7), float32] */;
    %688 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %690 = cast(%687, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %692 = @func_5345() /* ty=(Tensor[(13, 6), float64],) */;
    %693 = less(%690, %691) /* ty=Tensor[(3, 4, 7), bool] */;
    %694 = %692.0;
    (%693, %694)
  };
  %695(%var_5520, %var_5521) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(13, 6), float64]) */
}

def @func_3328() -> Tensor[(13, 6), float64] {
  %696 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %696.0
}

def @func_3834() -> Tensor[(2, 14, 14), float64] {
  @func_2662() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_5491() -> Tensor[(4, 4, 1), float64] {
  %697 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
  %698 = tan(%697) /* ty=Tensor[(4, 4, 1), float64] */;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
  sin(%699) /* ty=Tensor[(4, 4, 1), float64] */
}

def @func_7545() -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) {
  %700 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %701 = cast(meta[relay.Constant][39] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %702 = reshape(%701, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float32] */;
  %703 = cast(meta[relay.Constant][40] /* ty=Tensor[(270), float32] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %704 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(270), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(meta[relay.Constant][39] /* ty=Tensor[(270), float32] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), bool] */;
  %707 = %700.0;
  %708 = @func_1251(%702) /* ty=Tensor[(9, 10, 3), float32] */;
  %709 = @func_3917() /* ty=Tensor[(13, 6), float64] */;
  %710 = @func_6952() /* ty=Tensor[(14, 4, 13), int64] */;
  %711 = not_equal(%705, %706) /* ty=Tensor[(270), bool] */;
  (%707, %708, %709, %710, %711)
}

def @func_2927(%var_2922: Tensor[(14, 5, 13), int8], %var_2923: Tensor[(14, 5, 13), int8]) -> (Tensor[(14, 5, 13), int8],) {
  %712 = cast(%var_2923, dtype="int8") /* ty=Tensor[(14, 5, 13), int8] */;
  %713 = shape_of(%var_2922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_2922, dtype="int8") /* ty=Tensor[(14, 5, 13), int8] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %716 = bitwise_xor(%714, %715) /* ty=Tensor[(14, 5, 13), int8] */;
  (%716,)
}

def @func_4077() -> Tensor[(13, 6), float64] {
  @func_3917() /* ty=Tensor[(13, 6), float64] */
}

def @func_7866() -> Tensor[(13, 6), float64] {
  @func_5260() /* ty=Tensor[(13, 6), float64] */
}

def @func_9948() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  @func_9946() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64]) */
}

def @func_7733() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(11, 10, 8), uint16], Tensor[(40, 22), uint16]) {
  @func_7731() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(11, 10, 8), uint16], Tensor[(40, 22), uint16]) */
}

def @func_7999() -> Tensor[(13, 6), float64] {
  @func_7997() /* ty=Tensor[(13, 6), float64] */
}

def @func_9233() -> (Tensor[(13, 6), float64],) {
  @func_9231() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_4116() -> (Tensor[(13, 6), float64],) {
  %718 = fn () -> (Tensor[(13, 6), float64],) {
    %717 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
    (%717,)
  };
  %718() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_6952() -> Tensor[(14, 4, 13), int64] {
  %719 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %720 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%721, %722) /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_1326(%var_1321: Tensor[(15, 15, 11), uint8], %var_1322: Tensor[(15, 15, 11), uint8]) -> (Tensor[(15, 15, 11), uint8],) {
  %723 = cast(%var_1322, dtype="uint8") /* ty=Tensor[(15, 15, 11), uint8] */;
  %724 = shape_of(%var_1321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_1321, dtype="uint8") /* ty=Tensor[(15, 15, 11), uint8] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %727 = minimum(%725, %726) /* ty=Tensor[(15, 15, 11), uint8] */;
  (%727,)
}

def @func_8451(%var_8449: Tensor[(15, 3, 3), uint16]) -> (Tensor[(15, 3, 3), uint16],) {
  @func_8448(%var_8449) /* ty=(Tensor[(15, 3, 3), uint16],) */
}

def @func_8556(%var_8554: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  @func_8553(%var_8554) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */
}

def @func_2407() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) {
  @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */
}

def @func_7843(%var_7841: Tensor[(5, 12, 3), uint16]) -> Tensor[(5, 12, 3), uint16] {
  @func_7840(%var_7841) /* ty=Tensor[(5, 12, 3), uint16] */
}

def @func_3266() -> (Tensor[(13, 6), float64],) {
  @func_3264() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_8448(%var_8439: Tensor[(15, 3, 3), uint16]) -> (Tensor[(15, 3, 3), uint16],) {
  %728 = cast(%var_8439, dtype="uint16") /* ty=Tensor[(15, 3, 3), uint16] */;
  %729 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(15, 3, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 3, 3), uint16] */, dtype="uint16") /* ty=Tensor[(15, 3, 3), uint16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %732 = bitwise_and(%730, %731) /* ty=Tensor[(15, 3, 3), uint16] */;
  (%732,)
}

def @func_9694(%var_9693: Tensor[(72), float32]) -> (Tensor[(72), float32],) {
  %740 = fn (%var_9675: Tensor[(72), float32]) -> (Tensor[(72), float32],) {
    %733 = @func_3754() /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32]) */;
    %734 = %733.1;
    %735 = cast(%var_9675, dtype="float32") /* ty=Tensor[(72), float32] */;
    %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(1), int32] */;
    %737 = cast(%734, dtype="float32") /* ty=Tensor[(72), float32] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?), float32] */;
    %739 = divide(%737, %738) /* ty=Tensor[(72), float32] */;
    (%739,)
  };
  %740(%var_9693) /* ty=(Tensor[(72), float32],) */
}

def @func_2663() -> Tensor[(2, 14, 14), float64] {
  %742 = fn () -> Tensor[(2, 14, 14), float64] {
    %741 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 14, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 14), float64] */;
    asin(%741) /* ty=Tensor[(2, 14, 14), float64] */
  };
  %742() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_7184(%var_7169: Tensor[(13, 12, 6), float32], %var_7176: Tensor[(13, 12, 6), float32]) -> (Tensor[(132), float64], Tensor[(880), uint16], Tensor[(13, 12, 6), bool]) {
  %743 = cast(meta[relay.Constant][45] /* ty=Tensor[(880), uint16] */, dtype="uint16") /* ty=Tensor[(880), uint16] */;
  %744 = reshape(%743, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), uint16] */;
  %745 = @func_6456(%744) /* ty=(Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) */;
  %746 = cast(%var_7169, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %747 = exp(%746) /* ty=Tensor[(13, 12, 6), float32] */;
  %748 = cast(%var_7176, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = %745.1;
  %753 = greater(%750, %751) /* ty=Tensor[(13, 12, 6), bool] */;
  (%752, meta[relay.Constant][45] /* ty=Tensor[(880), uint16] */, %753)
}

def @func_9623(%var_9519: Tensor[(5, 12, 13), float32], %var_9520: Tensor[(5, 12, 13), float32], %var_9524: Tensor[(5, 12, 13), float32], %var_9609: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), bool], Tensor[(13, 6), float64], Tensor[(2100), float64], Tensor[(2100), float64], Tensor[(13, 6), float64], Tensor[(5, 12, 13), uint64], Tensor[(13, 6), float64]) {
  %754 = cast(%var_9520, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %755 = shape_of(%var_9519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_9519, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %758 = divide(%756, %757) /* ty=Tensor[(5, 12, 13), float32] */;
  %759 = cast(%var_9524, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = @func_6216() /* ty=(Tensor[(13, 6), float64],) */;
  %764 = cast(meta[relay.Constant][46] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %765 = reshape(%764, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %766 = @func_3371(%765) /* ty=(Tensor[(2, 14, 14), float64], Tensor[(2002), float64], Tensor[(2100), float64], Tensor[(13, 6), float64]) */;
  %767 = @func_7143() /* ty=(Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(13, 6), float64]) */;
  %768 = cast(%var_9520, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %769 = shape_of(%var_9519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%var_9519, dtype="bool") /* ty=Tensor[(5, 12, 13), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = less_equal(%770, %771) /* ty=Tensor[(5, 12, 13), bool] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %774 = sqrt(%773) /* ty=Tensor[(5, 12, 13), float32] */;
  %775 = cast(%var_9609, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %779 = logical_or(%761, %762) /* ty=Tensor[(5, 12, 13), bool] */;
  %780 = %763.0;
  %781 = %766.2;
  %782 = %767.0;
  %783 = multiply(%777, %778) /* ty=Tensor[(5, 12, 13), uint64] */;
  %784 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  (%779, %780, %781, meta[relay.Constant][46] /* ty=Tensor[(2100), float64] */, %782, %783, %784)
}

def @func_9743() -> (Tensor[(13, 6), float64],) {
  %786 = fn () -> (Tensor[(13, 6), float64],) {
    %785 = @func_8849() /* ty=Tensor[(13, 6), float64] */;
    (%785,)
  };
  %786() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_760() -> Tensor[(13, 6), float64] {
  %787 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  erf(%787) /* ty=Tensor[(13, 6), float64] */
}

def @func_1608() -> (Tensor[(13, 6), float64],) {
  %789 = fn () -> (Tensor[(13, 6), float64],) {
    %788 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
    (%788,)
  };
  %789() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_4699() -> (Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) {
  %797 = fn () -> (Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) {
    %790 = cast(meta[relay.Constant][48] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %791 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
    %792 = reshape(%790, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), float32] */;
    %793 = reshape(%791, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
    %794 = @func_1056(%792, %793) /* ty=(Tensor[(2, 4, 10), uint8], Tensor[(2, 4, 10), float64], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32]) */;
    %795 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
    %796 = %794.3;
    (%795, %796, meta[relay.Constant][48] /* ty=Tensor[(80), float32] */, meta[relay.Constant][49] /* ty=Tensor[(1, 1573), float32] */)
  };
  %797() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */
}

def @func_5396() -> Tensor[(13, 6), float64] {
  %798 = fn () -> Tensor[(13, 6), float64] {
    @func_4077() /* ty=Tensor[(13, 6), float64] */
  };
  %798() /* ty=Tensor[(13, 6), float64] */
}

def @func_3264() -> (Tensor[(13, 6), float64],) {
  %799 = @func_1429() /* ty=Tensor[(13, 6), float64] */;
  (%799,)
}

def @func_1405(%var_1372: Tensor[(14, 11, 11), uint8], %var_1373: Tensor[(14, 11, 11), uint8]) -> (Tensor[(14, 11, 11), float32], Tensor[(14, 11, 11), float64], Tensor[(13, 6), float64]) {
  %800 = cast(%var_1373, dtype="uint8") /* ty=Tensor[(14, 11, 11), uint8] */;
  %801 = shape_of(%var_1372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%var_1372, dtype="uint8") /* ty=Tensor[(14, 11, 11), uint8] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %804 = multiply(%802, %803) /* ty=Tensor[(14, 11, 11), uint8] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(14, 11, 11), float32] */;
  %806 = shape_of(%var_1372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_1372, dtype="float32") /* ty=Tensor[(14, 11, 11), float32] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %809 = cast(%var_1373, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %810 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %811 = divide(%807, %808) /* ty=Tensor[(14, 11, 11), float32] */;
  %812 = sinh(%809) /* ty=Tensor[(14, 11, 11), float64] */;
  %813 = %810.0;
  (%811, %812, %813)
}

def @func_9736() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_9734() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_2261() -> (Tensor[(13, 6), float64],) {
  %814 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
  %815 = %814.0;
  (%815,)
}

def @func_6216() -> (Tensor[(13, 6), float64],) {
  %816 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %817 = %816.0;
  (%817,)
}

def @func_9310(%var_9309: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64]) {
  %824 = fn (%var_9297: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64]) {
    %818 = @func_5060() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %819 = cast(%var_9297, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %820 = reshape(%819, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
    %821 = @func_1199(%820) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
    %822 = %818.1;
    %823 = %821.0;
    (%822, %823, %var_9297)
  };
  %824(%var_9309) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64]) */
}

def @func_3754() -> (Tensor[(13, 6), float64], Tensor[(72), float32]) {
  %825 = @func_2159() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %826 = @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */;
  %827 = %825.0;
  %828 = %826.2;
  (%827, %828)
}

def @func_2833(%var_2818: Tensor[(3, 11, 4), float64]) -> (Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) {
  %829 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %830 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 4), float64] */;
  %831 = asinh(%830) /* ty=Tensor[(3, 11, 4), float64] */;
  %832 = cast(%var_2818, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%831, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %836 = %829.0;
  %837 = mod(%834, %835) /* ty=Tensor[(3, 11, 4), float32] */;
  (%836, %837)
}

def @func_8083(%var_8064: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) {
  %838 = cast(%var_8064, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %839 = reshape(%838, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %840 = @func_3735(%839) /* ty=(Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(2100), float64]) */;
  %841 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
  %842 = %840.0;
  (%841, %842, %var_8064)
}

def @func_1584(%var_1583: uint16) -> (Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) {
  %854 = fn (%var_1556: uint16) -> (Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) {
    %843 = cast(%var_1556, dtype="uint16") /* ty=uint16 */;
    %844 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 5, 8), uint16] */;
    %845 = cast(meta[relay.Constant][52] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %846 = reshape(%845, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
    %847 = @func_638(%846) /* ty=(Tensor[(7, 13, 15), float32],) */;
    %848 = cast(meta[relay.Constant][53] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %849 = reshape(%848, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
    %850 = @func_565(%849) /* ty=(Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
    %851 = subtract(%843, %844) /* ty=Tensor[(13, 5, 8), uint16] */;
    %852 = %847.0;
    %853 = %850.0;
    (%851, %852, meta[relay.Constant][52] /* ty=Tensor[(1365), float32] */, %853, meta[relay.Constant][53] /* ty=Tensor[(1125), float32] */)
  };
  %854(%var_1583) /* ty=(Tensor[(13, 5, 8), uint16], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(15, 15, 5), float32], Tensor[(1125), float32]) */
}

def @func_6954() -> Tensor[(14, 4, 13), int64] {
  @func_6952() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_2065() -> (Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) {
  @func_2063() /* ty=(Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) */
}

def @func_7673() -> Tensor[(14, 4, 13), int64] {
  @func_7671() /* ty=Tensor[(14, 4, 13), int64] */
}

def @func_10178() -> (Tensor[(270), bool], Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(300), int16]) {
  @func_10176() /* ty=(Tensor[(270), bool], Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(300), int16]) */
}

def @func_5560() -> Tensor[(13, 6), float64] {
  %856 = fn () -> Tensor[(13, 6), float64] {
    %855 = @func_2063() /* ty=(Tensor[(13, 6), float64], Tensor[(1365), float32], uint16) */;
    %855.0
  };
  %856() /* ty=Tensor[(13, 6), float64] */
}

def @func_2640(%var_2630: Tensor[(1, 7, 2), int32], %var_2631: Tensor[(15, 7, 2), int32]) -> (Tensor[(15, 7, 2), int32], Tensor[(13, 6), float64]) {
  %857 = cast(%var_2630, dtype="int32") /* ty=Tensor[(1, 7, 2), int32] */;
  %858 = cast(%var_2631, dtype="int32") /* ty=Tensor[(15, 7, 2), int32] */;
  %859 = @func_1607() /* ty=(Tensor[(13, 6), float64],) */;
  %860 = logical_xor(%857, %858) /* ty=Tensor[(15, 7, 2), int32] */;
  %861 = %859.0;
  (%860, %861)
}

def @func_1456() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_1454() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_842() -> (Tensor[(13, 6), float64],) {
  %863 = fn () -> (Tensor[(13, 6), float64],) {
    %862 = @func_760() /* ty=Tensor[(13, 6), float64] */;
    (%862,)
  };
  %863() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_97(%var_95: Tensor[(14, 13, 11), float64], %var_96: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) {
  @func_93(%var_95, %var_96) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */
}

def @func_2780() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %864 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
  %865 = @func_2405() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64], Tensor[(1694), uint8]) */;
  %866 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %867 = %864.3;
  %868 = @func_760() /* ty=Tensor[(13, 6), float64] */;
  %869 = %865.0;
  %870 = %866.1;
  (%867, %868, %869, %870)
}

def @func_4789(%var_4787: uint32, %var_4788: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) {
  %889 = fn (%var_4779: uint32, %var_4781: Tensor[(240), uint32]) -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) {
    %871 = @func_3264() /* ty=(Tensor[(13, 6), float64],) */;
    %872 = cast(meta[relay.Constant][54] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %873 = cast(meta[relay.Constant][54] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %874 = reshape(%872, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
    %875 = reshape(%873, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
    %876 = @func_2598(%874, %875) /* ty=(Tensor[(3, 3, 8), float32],) */;
    %877 = cast(meta[relay.Constant][54] /* ty=Tensor[(72), float32] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %878 = cast(%var_4779, dtype="uint32") /* ty=uint32 */;
    %879 = cast(meta[relay.Constant][55] /* ty=Tensor[(56), uint32] */, dtype="uint32") /* ty=Tensor[(56), uint32] */;
    %880 = cast(%var_4781, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %881 = reshape(%878, newshape=[]) /* ty=uint32 */;
    %882 = reshape(%879, newshape=[1, 14, 4]) /* ty=Tensor[(1, 14, 4), uint32] */;
    %883 = reshape(%880, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint32] */;
    %884 = @func_4630(%881, %882, %883) /* ty=(Tensor[(1, 14, 4), uint32], Tensor[(8, 2, 15), bool]) */;
    %885 = %871.0;
    %886 = %876.0;
    %887 = log2(%877) /* ty=Tensor[(72), float64] */;
    %888 = %884.0;
    (%885, %886, %887, %888, %var_4779, meta[relay.Constant][55] /* ty=Tensor[(56), uint32] */, %var_4781)
  };
  %889(%var_4787, %var_4788) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float64], Tensor[(1, 14, 4), uint32], uint32, Tensor[(56), uint32], Tensor[(240), uint32]) */
}

def @func_4438() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) {
  @func_4436() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float64]) */
}

def @func_4079() -> Tensor[(13, 6), float64] {
  @func_4077() /* ty=Tensor[(13, 6), float64] */
}

def @func_251(%var_249: Tensor[(1, 16, 5), float32]) -> (Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) {
  @func_248(%var_249) /* ty=(Tensor[(1, 16, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2100), float64]) */
}

def @func_638(%var_631: Tensor[(7, 13, 15), float32]) -> (Tensor[(7, 13, 15), float32],) {
  %890 = cast(%var_631, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %891 = sqrt(%890) /* ty=Tensor[(7, 13, 15), float32] */;
  (%891,)
}

def @func_3619(%var_3614: Tensor[(6, 16, 14), int8]) -> (Tensor[(6, 16, 14), bool],) {
  %892 = cast(%var_3614, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %893 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(6, 16, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 16, 14), int8] */, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %896 = less(%894, %895) /* ty=Tensor[(6, 16, 14), bool] */;
  (%896,)
}

def @func_1781() -> Tensor[(13, 6), float64] {
  %898 = fn () -> Tensor[(13, 6), float64] {
    %897 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
    %897.0
  };
  %898() /* ty=Tensor[(13, 6), float64] */
}

def @func_5068() -> Tensor[(2, 14, 14), float64] {
  %899 = fn () -> Tensor[(2, 14, 14), float64] {
    @func_2662() /* ty=Tensor[(2, 14, 14), float64] */
  };
  %899() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_3495() -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) {
  %900 = @func_2780() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %901 = cast(meta[relay.Constant][57] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %902 = cast(meta[relay.Constant][57] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %903 = reshape(%901, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %904 = reshape(%902, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %905 = @func_2598(%903, %904) /* ty=(Tensor[(3, 3, 8), float32],) */;
  %906 = %900.0;
  %907 = %905.0;
  (%906, %907, meta[relay.Constant][57] /* ty=Tensor[(72), float32] */)
}

def @func_7058() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %908 = @func_5843() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %909 = @func_3142() /* ty=Tensor[(13, 6), float64] */;
  %910 = %908.1;
  (%909, %910)
}

def @main(%var_10320: Tensor[(2100), float64], %var_10363: Tensor[(2100), float64]) -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(126), uint64], Tensor[(2100), float64]) {
  %911 = @func_7321() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(13, 6), float64], Tensor[(2, 14, 14), float64], Tensor[(1, 1573), float32]) */;
  %912 = cast(%var_10320, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %913 = reshape(%912, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %914 = @func_8086(%913) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2100), float64]) */;
  %915 = cast(meta[relay.Constant][58] /* ty=Tensor[(126), uint64] */, dtype="uint64") /* ty=Tensor[(126), uint64] */;
  %916 = reshape(%915, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), uint64] */;
  %917 = @func_8947(%916) /* ty=(Tensor[(6, 3, 7), uint64], Tensor[(72), float32], Tensor[(13, 6), float64]) */;
  %918 = cast(%var_10363, dtype="int16") /* ty=Tensor[(2100), int16] */;
  %919 = shape_of(%var_10320, dtype="int32") /* ty=Tensor[(1), int32] */;
  %920 = cast(%var_10320, dtype="int16") /* ty=Tensor[(2100), int16] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?), int16] */;
  %922 = bitwise_or(%920, %921) /* ty=Tensor[(2100), int16] */;
  %923 = cast(%922, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %924 = %911.0;
  %925 = %914.0;
  %926 = @func_7997() /* ty=Tensor[(13, 6), float64] */;
  %927 = %917.1;
  %928 = log2(%923) /* ty=Tensor[(2100), float64] */;
  (%924, %925, %926, %927, meta[relay.Constant][58] /* ty=Tensor[(126), uint64] */, %928)
}

def @func_1922() -> Tensor[(13, 6), float64] {
  %929 = fn () -> Tensor[(13, 6), float64] {
    @func_1780() /* ty=Tensor[(13, 6), float64] */
  };
  %929() /* ty=Tensor[(13, 6), float64] */
}

def @func_4279() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(2002), float64], Tensor[(10, 6, 5), float32]) {
  %930 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %931 = cast(meta[relay.Constant][59] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %932 = reshape(%931, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %933 = @func_1199(%932) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
  %934 = cast(meta[relay.Constant][60] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %935 = cast(meta[relay.Constant][60] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %936 = reshape(%934, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %937 = reshape(%935, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), uint16] */;
  %938 = @func_671(%936, %937) /* ty=(Tensor[(10, 6, 5), uint16], Tensor[(10, 6, 5), float64]) */;
  %939 = %938.1;
  %940 = cast(meta[relay.Constant][60] /* ty=Tensor[(300), uint16] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %941 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%939, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %944 = %930.0;
  %945 = @func_3328() /* ty=Tensor[(13, 6), float64] */;
  %946 = %933.3;
  %947 = floor_divide(%942, %943) /* ty=Tensor[(10, 6, 5), float32] */;
  (%944, %945, %946, meta[relay.Constant][59] /* ty=Tensor[(2002), float64] */, %947)
}

def @func_1709() -> (Tensor[(13, 6), float64],) {
  @func_1707() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_9481() -> Tensor[(1125), bool] {
  %948 = @func_7950() /* ty=Tensor[(1125), float32] */;
  %949 = cast(meta[relay.Constant][61] /* ty=Tensor[(1125), float32] */, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %950 = shape_of(%948, dtype="int32") /* ty=Tensor[(1), int32] */;
  %951 = cast(%948, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%951, %952) /* ty=Tensor[(1125), bool] */
}

def @func_1254(%var_1252: Tensor[(9, 10, 3), float32]) -> Tensor[(9, 10, 3), float32] {
  @func_1251(%var_1252) /* ty=Tensor[(9, 10, 3), float32] */
}

def @func_6320() -> (Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %953 = @func_5934() /* ty=(Tensor[(1365), float32],) */;
  %954 = cast(meta[relay.Constant][62] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %955 = reshape(%954, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %956 = @func_3238(%955) /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(132), float64], Tensor[(13, 6), float64]) */;
  %957 = %953.0;
  %958 = %956.3;
  (%957, %958, meta[relay.Constant][62] /* ty=Tensor[(132), float64] */)
}

def @func_3976() -> (Tensor[(13, 6), float64],) {
  %959 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %960 = %959.0;
  (%960,)
}

def @func_3006() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  @func_3004() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_9734() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %961 = @func_7754() /* ty=Tensor[(13, 6), float64] */;
  %962 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
  (%961, %962)
}

def @func_2196() -> (Tensor[(13, 6), float64],) {
  @func_2194() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_8721() -> (Tensor[(13, 6), float64],) {
  @func_8719() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_7921(%var_7920: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(4, 20), float32], Tensor[(1573), float32], Tensor[(2100, 7), int8], Tensor[(1125), float32], Tensor[(1125), float32]) {
  %984 = fn (%var_7905: Tensor[(1573), float32]) -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(4, 20), float32], Tensor[(1573), float32], Tensor[(2100, 7), int8], Tensor[(1125), float32], Tensor[(1125), float32]) {
    %963 = @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */;
    %964 = cast(meta[relay.Constant][63] /* ty=Tensor[(4, 20), float32] */, dtype="float32") /* ty=Tensor[(4, 20), float32] */;
    %965 = cast(meta[relay.Constant][64] /* ty=Tensor[(2100, 1), float64] */, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
    %966 = cast(%var_7905, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %967 = reshape(%964, newshape=[20, 4]) /* ty=Tensor[(20, 4), float32] */;
    %968 = reshape(%965, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
    %969 = reshape(%966, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
    %970 = @func_2024(%967, %968, %969) /* ty=(Tensor[(13, 6), float64], Tensor[(2100), float32], Tensor[(9, 10, 3), float32], Tensor[(6, 45), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(20, 4), uint8], Tensor[(20, 4), bool]) */;
    %971 = cast(meta[relay.Constant][64] /* ty=Tensor[(2100, 1), float64] */, dtype="int8") /* ty=Tensor[(2100, 1), int8] */;
    %972 = cast(meta[relay.Constant][65] /* ty=Tensor[(2100, 7), float64] */, dtype="int8") /* ty=Tensor[(2100, 7), int8] */;
    %973 = cast(%var_7905, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %974 = cast(meta[relay.Constant][66] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %975 = cast(meta[relay.Constant][66] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %976 = reshape(%973, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
    %977 = reshape(%974, newshape=[1125]) /* ty=Tensor[(1125), float32] */;
    %978 = reshape(%975, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
    %979 = @func_616(%976, %977, %978) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */;
    %980 = %963.1;
    %981 = %970.2;
    %982 = bitwise_xor(%971, %972) /* ty=Tensor[(2100, 7), int8] */;
    %983 = %979.1;
    (%980, %981, meta[relay.Constant][63] /* ty=Tensor[(4, 20), float32] */, %var_7905, %982, %983, meta[relay.Constant][66] /* ty=Tensor[(1125), float32] */)
  };
  %984(%var_7920) /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(4, 20), float32], Tensor[(1573), float32], Tensor[(2100, 7), int8], Tensor[(1125), float32], Tensor[(1125), float32]) */
}

def @func_3917() -> Tensor[(13, 6), float64] {
  %985 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %985.0
}

def @func_1945() -> Tensor[(13, 6), float64] {
  @func_1943() /* ty=Tensor[(13, 6), float64] */
}

def @func_7856() -> (Tensor[(13, 6), float64],) {
  %988 = fn () -> (Tensor[(13, 6), float64],) {
    %986 = @func_3463() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %987 = %986.1;
    (%987,)
  };
  %988() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_6459(%var_6457: Tensor[(11, 10, 8), uint16]) -> (Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) {
  @func_6456(%var_6457) /* ty=(Tensor[(11, 10, 8), uint16], Tensor[(132), float64]) */
}

def @func_1017(%var_1015: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) {
  @func_1014(%var_1015) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) */
}

def @func_1497() -> (Tensor[(13, 6), float64],) {
  @func_1495() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_5935() -> (Tensor[(1365), float32],) {
  %996 = fn () -> (Tensor[(1365), float32],) {
    %989 = @func_4842() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32]) */;
    %990 = %989.5;
    %991 = cast(meta[relay.Constant][67] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(1), int32] */;
    %993 = cast(%990, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?), float32] */;
    %995 = mod(%993, %994) /* ty=Tensor[(1365), float32] */;
    (%995,)
  };
  %996() /* ty=(Tensor[(1365), float32],) */
}

def @func_1693() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %997 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
  %998 = @func_1467() /* ty=(Tensor[(13, 6), float64],) */;
  %999 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
  %1000 = %997.0;
  %1001 = %998.0;
  %1002 = %999.0;
  (%1000, %1001, %1002)
}

def @func_3836() -> Tensor[(2, 14, 14), float64] {
  @func_3834() /* ty=Tensor[(2, 14, 14), float64] */
}

def @func_3497() -> (Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) {
  @func_3495() /* ty=(Tensor[(13, 6), float64], Tensor[(3, 3, 8), float32], Tensor[(72), float32]) */
}

def @func_1014(%var_971: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) {
  %1003 = @func_841() /* ty=(Tensor[(13, 6), float64],) */;
  %1004 = cast(%var_971, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %1005 = reshape(%1004, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %1006 = @func_638(%1005) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %1007 = %1006.0;
  %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %1009 = reshape(%1008, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %1010 = @func_638(%1009) /* ty=(Tensor[(7, 13, 15), float32],) */;
  %1011 = %1010.0;
  %1012 = cast(meta[relay.Constant][68] /* ty=Tensor[(7, 13, 15), float32] */, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %1013 = shape_of(%1011, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1014 = cast(%1011, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1016 = cast(meta[relay.Constant][68] /* ty=Tensor[(7, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %1017 = shape_of(%1011, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%1011, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1020 = %1003.0;
  %1021 = less(%1014, %1015) /* ty=Tensor[(7, 13, 15), bool] */;
  %1022 = divide(%1018, %1019) /* ty=Tensor[(7, 13, 15), float32] */;
  (%1020, %1007, %var_971, %1021, %1022)
}

def @func_565(%var_544: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %1023 = cast(%var_544, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %1024 = cast(meta[relay.Constant][69] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %1025 = cast(meta[relay.Constant][69] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %1026 = reshape(%1024, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %1027 = reshape(%1025, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %1028 = @func_93(%1026, %1027) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
  %1029 = rsqrt(%1023) /* ty=Tensor[(15, 15, 5), float32] */;
  %1030 = %1028.0;
  (%1029, %1030, meta[relay.Constant][69] /* ty=Tensor[(2002), float64] */)
}

def @func_1201(%var_1200: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
  %1044 = fn (%var_1191: Tensor[(2002), float64]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) {
    %1031 = cast(meta[relay.Constant][70] /* ty=Tensor[(455, 3), float32] */, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
    %1032 = reshape(%1031, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
    %1033 = @func_638(%1032) /* ty=(Tensor[(7, 13, 15), float32],) */;
    %1034 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
    %1035 = cast(%var_1191, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %1036 = cast(%var_1191, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %1037 = reshape(%1035, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %1038 = reshape(%1036, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %1039 = @func_93(%1037, %1038) /* ty=(Tensor[(14, 13, 11), bool], Tensor[(14, 13, 11), bool]) */;
    %1040 = @func_760() /* ty=Tensor[(13, 6), float64] */;
    %1041 = %1033.0;
    %1042 = %1034.0;
    %1043 = %1039.1;
    (%1040, %1041, meta[relay.Constant][70] /* ty=Tensor[(455, 3), float32] */, %1042, %1043, %var_1191)
  };
  %1044(%var_1200) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(455, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */
}

def @func_7547() -> (Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) {
  @func_7545() /* ty=(Tensor[(13, 6), float64], Tensor[(9, 10, 3), float32], Tensor[(13, 6), float64], Tensor[(14, 4, 13), int64], Tensor[(270), bool]) */
}

def @func_4899() -> (Tensor[(13, 6), float64],) {
  %1046 = fn () -> (Tensor[(13, 6), float64],) {
    %1045 = @func_760() /* ty=Tensor[(13, 6), float64] */;
    (%1045,)
  };
  %1046() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_4596() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %1050 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %1047 = @func_4373() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %1048 = @func_1780() /* ty=Tensor[(13, 6), float64] */;
    %1049 = %1047.0;
    (%1048, %1049)
  };
  %1050() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_8649(%var_8613: Tensor[(14, 7, 13), uint32], %var_8614: Tensor[(14, 7, 13), uint32]) -> (Tensor[(14, 7, 13), float32],) {
  %1051 = cast(%var_8614, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %1052 = shape_of(%var_8613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1053 = cast(%var_8613, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1055 = bitwise_xor(%1053, %1054) /* ty=Tensor[(14, 7, 13), uint32] */;
  %1056 = cast(%1055, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %1057 = sigmoid(%1056) /* ty=Tensor[(14, 7, 13), float32] */;
  %1058 = cast(%var_8613, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %1059 = shape_of(%1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(%1057, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1062 = add(%1060, %1061) /* ty=Tensor[(14, 7, 13), float32] */;
  (%1062,)
}

def @func_4659() -> (Tensor[(13, 6), float64],) {
  %1065 = fn () -> (Tensor[(13, 6), float64],) {
    %1063 = @func_1495() /* ty=(Tensor[(13, 6), float64],) */;
    %1064 = %1063.0;
    (%1064,)
  };
  %1065() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_8226(%var_8222: Tensor[(72), float32], %var_8223: Tensor[(3, 3, 8), float32], %var_8224: Tensor[(3, 3, 8), float64], %var_8225: Tensor[(3, 3, 8), float32]) -> (Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(1125), float32], Tensor[(3, 3, 8), uint8], Tensor[(3, 3, 8), float64], Tensor[(72), float64], Tensor[(3, 3, 8), int8], Tensor[(13, 6), float64]) {
  %1097 = fn (%var_8148: Tensor[(72), float32], %var_8152: Tensor[(3, 3, 8), float32], %var_8169: Tensor[(3, 3, 8), float64], %var_8199: Tensor[(3, 3, 8), float32]) -> (Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(1125), float32], Tensor[(3, 3, 8), uint8], Tensor[(3, 3, 8), float64], Tensor[(72), float64], Tensor[(3, 3, 8), int8], Tensor[(13, 6), float64]) {
    %1066 = cast(%var_8148, dtype="float32") /* ty=Tensor[(72), float32] */;
    %1067 = cast(%var_8148, dtype="float32") /* ty=Tensor[(72), float32] */;
    %1068 = reshape(%1066, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
    %1069 = reshape(%1067, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
    %1070 = @func_2598(%1068, %1069) /* ty=(Tensor[(3, 3, 8), float32],) */;
    %1071 = %1070.0;
    %1072 = cast(%var_8152, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
    %1073 = shape_of(%1071, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1074 = cast(%1071, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
    %1075 = dyn.reshape(%1072, %1073, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1076 = floor_mod(%1074, %1075) /* ty=Tensor[(3, 3, 8), float64] */;
    %1077 = cast(%var_8169, dtype="uint8") /* ty=Tensor[(3, 3, 8), uint8] */;
    %1078 = shape_of(%1076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1079 = cast(%1076, dtype="uint8") /* ty=Tensor[(3, 3, 8), uint8] */;
    %1080 = dyn.reshape(%1077, %1078, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1081 = cast(%1076, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
    %1082 = @func_5319() /* ty=(Tensor[(72), float64],) */;
    %1083 = cast(%1071, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
    %1084 = asinh(%1083) /* ty=Tensor[(3, 3, 8), float32] */;
    %1085 = cast(%var_8199, dtype="int8") /* ty=Tensor[(3, 3, 8), int8] */;
    %1086 = shape_of(%1084, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1087 = cast(%1084, dtype="int8") /* ty=Tensor[(3, 3, 8), int8] */;
    %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1089 = @func_4698() /* ty=(Tensor[(13, 6), float64], Tensor[(1573), float32], Tensor[(80), float32], Tensor[(1, 1573), float32]) */;
    %1090 = @func_3797() /* ty=Tensor[(13, 6), float64] */;
    %1091 = @func_7950() /* ty=Tensor[(1125), float32] */;
    %1092 = left_shift(%1079, %1080) /* ty=Tensor[(3, 3, 8), uint8] */;
    %1093 = sigmoid(%1081) /* ty=Tensor[(3, 3, 8), float64] */;
    %1094 = %1082.0;
    %1095 = minimum(%1087, %1088) /* ty=Tensor[(3, 3, 8), int8] */;
    %1096 = %1089.0;
    (%1090, %var_8148, %1091, %1092, %1093, %1094, %1095, %1096)
  };
  %1097(%var_8222, %var_8223, %var_8224, %var_8225) /* ty=(Tensor[(13, 6), float64], Tensor[(72), float32], Tensor[(1125), float32], Tensor[(3, 3, 8), uint8], Tensor[(3, 3, 8), float64], Tensor[(72), float64], Tensor[(3, 3, 8), int8], Tensor[(13, 6), float64]) */
}

def @func_6322() -> (Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  @func_6320() /* ty=(Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) */
}

def @func_7472() -> (Tensor[(13, 6), float64],) {
  %1099 = fn () -> (Tensor[(13, 6), float64],) {
    %1098 = @func_760() /* ty=Tensor[(13, 6), float64] */;
    (%1098,)
  };
  %1099() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_5735() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) {
  %1107 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) {
    %1100 = cast(meta[relay.Constant][71] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
    %1101 = reshape(%1100, newshape=[300]) /* ty=Tensor[(300), uint16] */;
    %1102 = @func_3822(%1101) /* ty=(Tensor[(13, 6), float64], Tensor[(10, 6, 5), uint16], Tensor[(300), uint16]) */;
    %1103 = @func_4898() /* ty=(Tensor[(13, 6), float64],) */;
    %1104 = @func_1638() /* ty=Tensor[(13, 6), float64] */;
    %1105 = %1102.0;
    %1106 = %1103.0;
    (%1104, %1105, meta[relay.Constant][71] /* ty=Tensor[(300), uint16] */, %1106)
  };
  %1107() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(300), uint16], Tensor[(13, 6), float64]) */
}

def @func_9074() -> Tensor[(13, 6), float64] {
  %1108 = @func_7665() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
  %1108.0
}

def @func_8111(%var_8109: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), float32], Tensor[(1, 1573), float32]) {
  @func_8108(%var_8109) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1, 1573), float32]) */
}

def @func_7997() -> Tensor[(13, 6), float64] {
  @func_760() /* ty=Tensor[(13, 6), float64] */
}

def @func_10274() -> Tensor[(13, 6), float64] {
  %1110 = fn () -> Tensor[(13, 6), float64] {
    %1109 = @func_2462() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %1109.0
  };
  %1110() /* ty=Tensor[(13, 6), float64] */
}

def @func_5636(%var_5634: Tensor[(1694), uint8]) -> (Tensor[(13, 6), float64], Tensor[(1694), uint8], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64]) {
  @func_5633(%var_5634) /* ty=(Tensor[(13, 6), float64], Tensor[(1694), uint8], Tensor[(13, 6), float64], Tensor[(14, 11, 11), float64]) */
}

def @func_620(%var_617: Tensor[(11, 13, 11), float32], %var_618: Tensor[(1125), float32], %var_619: Tensor[(15, 15, 5), float32]) -> (Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) {
  %1122 = fn (%var_601: Tensor[(11, 13, 11), float32], %var_605: Tensor[(1125), float32], %var_608: Tensor[(15, 15, 5), float32]) -> (Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) {
    %1111 = cast(%var_601, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
    %1112 = cast(%var_605, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %1113 = reshape(%1112, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
    %1114 = @func_565(%1113) /* ty=(Tensor[(15, 15, 5), float32], Tensor[(14, 13, 11), bool], Tensor[(2002), float64]) */;
    %1115 = %1114.0;
    %1116 = cast(%var_608, dtype="bool") /* ty=Tensor[(15, 15, 5), bool] */;
    %1117 = shape_of(%1115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1118 = cast(%1115, dtype="bool") /* ty=Tensor[(15, 15, 5), bool] */;
    %1119 = dyn.reshape(%1116, %1117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1120 = rsqrt(%1111) /* ty=Tensor[(11, 13, 11), float32] */;
    %1121 = less(%1118, %1119) /* ty=Tensor[(15, 15, 5), bool] */;
    (%1120, %var_605, %1121)
  };
  %1122(%var_617, %var_618, %var_619) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(1125), float32], Tensor[(15, 15, 5), bool]) */
}

def @func_2160() -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
  %1129 = fn () -> (Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) {
    %1123 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
    %1124 = @func_932() /* ty=(Tensor[(13, 6), float64],) */;
    %1125 = @func_1693() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %1126 = %1123.0;
    %1127 = %1124.0;
    %1128 = %1125.0;
    (%1126, %1127, %1128)
  };
  %1129() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */
}

def @func_4957() -> Tensor[(13, 6), float64] {
  %1131 = fn () -> Tensor[(13, 6), float64] {
    %1130 = @func_2867() /* ty=(Tensor[(13, 6), float64], Tensor[(13, 6), float64], Tensor[(13, 6), float64]) */;
    %1130.0
  };
  %1131() /* ty=Tensor[(13, 6), float64] */
}

def @func_5218() -> (Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) {
  @func_5216() /* ty=(Tensor[(2, 14, 14), float32], Tensor[(1125), float32], Tensor[(1573), float32], Tensor[(1125), float32], Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1, 1365), float32]) */
}

def @func_8553(%var_8537: Tensor[(1365), float32]) -> (Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(13, 6), float64], Tensor[(132), float64]) {
  %1132 = @func_1707() /* ty=(Tensor[(13, 6), float64],) */;
  %1133 = cast(%var_8537, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %1134 = reshape(%1133, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %1135 = @func_1014(%1134) /* ty=(Tensor[(13, 6), float64], Tensor[(7, 13, 15), float32], Tensor[(1365), float32], Tensor[(7, 13, 15), bool], Tensor[(7, 13, 15), float32]) */;
  %1136 = cast(meta[relay.Constant][72] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %1137 = reshape(%1136, newshape=[3, 11, 4]) /* ty=Tensor[(3, 11, 4), float64] */;
  %1138 = @func_2833(%1137) /* ty=(Tensor[(13, 6), float64], Tensor[(3, 11, 4), float32]) */;
  %1139 = %1132.0;
  %1140 = %1135.4;
  %1141 = %1138.0;
  (%1139, %1140, %var_8537, %1141, meta[relay.Constant][72] /* ty=Tensor[(132), float64] */)
}

def @func_762() -> Tensor[(13, 6), float64] {
  @func_760() /* ty=Tensor[(13, 6), float64] */
}

def @func_934() -> (Tensor[(13, 6), float64],) {
  @func_932() /* ty=(Tensor[(13, 6), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen97/build/output.py", line 3473, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:29] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

