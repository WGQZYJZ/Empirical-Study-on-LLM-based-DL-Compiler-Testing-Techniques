==========mod==========
#[version = "0.0.5"]
def @func_1833() -> (Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) {
  %0 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %1 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %2 = %0.0;
  %3 = %1.1;
  (%2, %3)
}

def @func_2076() -> (Tensor[(15, 14, 11), int64],) {
  %4 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %5 = %4.1;
  (%5,)
}

def @func_4720(%var_4702: Tensor[(8, 3, 9), float64]) -> (Tensor[(8, 3, 9), float64],) {
  %6 = cast(%var_4702, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %7 = sinh(%6) /* ty=Tensor[(8, 3, 9), float64] */;
  (%7,)
}

def @func_4233(%var_4204: Tensor[(7, 16, 3), float32], %var_4208: Tensor[(7, 16, 3), float32]) -> (Tensor[(7, 16, 3), float64],) {
  %8 = cast(%var_4204, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
  %9 = tan(%8) /* ty=Tensor[(7, 16, 3), float32] */;
  %10 = cast(%var_4208, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %14 = floor_mod(%12, %13) /* ty=Tensor[(7, 16, 3), float64] */;
  (%14,)
}

def @func_5473() -> (Tensor[(2310), float32], Tensor[(13, 1, 12), float64], Tensor[(156, 1), float64]) {
  %15 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(156, 1), float64] */, dtype="float64") /* ty=Tensor[(156, 1), float64] */;
  %17 = reshape(%16, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float64] */;
  %18 = @func_3066(%17) /* ty=(Tensor[(13, 1, 12), float64],) */;
  %19 = %15.0;
  %20 = %18.0;
  (%19, %20, meta[relay.Constant][0] /* ty=Tensor[(156, 1), float64] */)
}

def @func_5703() -> (Tensor[(12, ?, 6), int64],) {
  %21 = @func_2616() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) */;
  %22 = %21.1;
  (%22,)
}

def @func_1292() -> (Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) {
  %23 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %24 = %23.1;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %26 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %27 = asinh(%25) /* ty=Tensor[(12, ?, 6), float64] */;
  %28 = %26.0;
  (%27, %28)
}

def @func_2157() -> (Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) {
  %29 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="int8") /* ty=Tensor[(12, ?, 6), int8] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 10, 6), float64] */, dtype="int8") /* ty=Tensor[(12, 10, 6), int8] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %34 = reshape(%33, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %35 = @func_1543(%34) /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(2310), float64] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %37 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %38 = multiply(%31, %32) /* ty=Tensor[(12, 10, 6), int8] */;
  %39 = %35.2;
  %40 = log2(%36) /* ty=Tensor[(2310), float32] */;
  %41 = %37.1;
  (%38, %39, %40, %41)
}

def @func_5298(%var_5244: Tensor[(12, 12, 6), int64], %var_5250: Tensor[(24, 14), uint16], %var_5260: Tensor[(15, 14, 11), int64]) -> (Tensor[(12, 12, 6), float64], Tensor[(12, 4, 6), float64], Tensor[(24, 14), uint16], Tensor[(15, 14, 11), bool], Tensor[(432), int64], Tensor[(432), float32], Tensor[(2310), float64]) {
  %42 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %43 = %42.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %45 = cast(%var_5244, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
  %46 = cast(%var_5250, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
  %47 = cast(%var_5250, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
  %48 = reshape(%46, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %49 = reshape(%47, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %50 = @func_4607(%48, %49) /* ty=(Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) */;
  %51 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %52 = %51.1;
  %53 = cast(%var_5260, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = logical_or(%55, %56) /* ty=Tensor[(15, 14, 11), bool] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %60 = reshape(%58, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %61 = reshape(%59, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %62 = @func_276(%60, %61) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %63 = %62.1;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(432), float32] */;
  %65 = reshape(%64, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %66 = @func_5191(%65) /* ty=(Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) */;
  %67 = divide(%44, %45) /* ty=Tensor[(12, 12, 6), float64] */;
  %68 = %50.2;
  %69 = %66.1;
  (%67, %68, %var_5250, %57, %63, meta[relay.Constant][3] /* ty=Tensor[(432), float32] */, %69)
}

def @func_6033() -> (Tensor[(15, 14, 11), bool], Tensor[(2310), float32], Tensor[(2310), int64], Tensor[(336), uint16], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), int64]) {
  %70 = @func_5459() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %73 = tan(%72) /* ty=Tensor[(15, 14, 11), float32] */;
  %74 = cast(%71, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = @func_4774() /* ty=(Tensor[(2310), float32],) */;
  %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %81 = reshape(%79, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %82 = reshape(%80, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %83 = @func_4607(%81, %82) /* ty=(Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) */;
  %84 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %85 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
  %86 = logical_and(%76, %77) /* ty=Tensor[(15, 14, 11), bool] */;
  %87 = %78.0;
  %88 = %83.4;
  %89 = %84.0;
  %90 = %85.0;
  %91 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  (%86, %87, %88, meta[relay.Constant][4] /* ty=Tensor[(336), uint16] */, %89, %90, %91)
}

def @func_2469(%var_2423: Tensor[(50, 6), int8]) -> (Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64], Tensor[(150, 2), bool], Tensor[(12, ?, 6), int64]) {
  %92 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %93 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %94 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %95 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %96 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %97 = cast(%var_2423, dtype="int8") /* ty=Tensor[(50, 6), int8] */;
  %98 = reshape(%97, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
  %99 = @func_2009(%98) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
  %100 = %99.2;
  %101 = cast(%var_2423, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%100, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %105 = %92.0;
  %106 = %93.0;
  %107 = %94.0;
  %108 = %95.0;
  %109 = %96.1;
  %110 = greater_equal(%103, %104) /* ty=Tensor[(150, 2), bool] */;
  %111 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%105, %106, %107, %108, %109, %110, %111)
}

def @func_2800(%var_2766: Tensor[(560), uint32]) -> (uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) {
  %112 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %113 = %112.0;
  %114 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %115 = cast(%var_2766, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %116 = reshape(%114, newshape=[]) /* ty=uint32 */;
  %117 = reshape(%115, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %118 = @func_1491(%116, %117) /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="uint16") /* ty=Tensor[(15, 14, 11), uint16] */;
  %121 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%113, dtype="uint16") /* ty=Tensor[(15, 14, 11), uint16] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %124 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %125 = bitwise_and(%122, %123) /* ty=Tensor[(15, 14, 11), uint16] */;
  %126 = %124.0;
  (meta[relay.Constant][5] /* ty=uint32 */, %var_2766, %125, %126)
}

def @func_4125(%var_4118: Tensor[(2310), float32]) -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
  %127 = @func_2505() /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64]) */;
  %128 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %129 = %128.2;
  %130 = cast(%var_4118, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%129, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), float32] */;
  %134 = %127.1;
  %135 = subtract(%132, %133) /* ty=Tensor[(2310), float32] */;
  (%134, %135)
}

def @func_3355() -> Tensor[(12, ?, 6), int64] {
  %136 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %136.2
}

def @func_4016(%var_4013: Tensor[(26, 11), uint8], %var_4014: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(9, 16, 3), float64], Tensor[(26, 11), uint8], Tensor[(432), float32]) {
  %137 = cast(%var_4013, dtype="uint8") /* ty=Tensor[(26, 11), uint8] */;
  %138 = cast(%var_4014, dtype="float32") /* ty=Tensor[(432), float32] */;
  %139 = reshape(%137, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %140 = reshape(%138, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %141 = @func_159(%139, %140) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %142 = @func_3403() /* ty=Tensor[(12, ?, 6), float64] */;
  %143 = %141.1;
  (%142, %143, %var_4013, %var_4014)
}

def @func_3037(%var_3032: Tensor[(936), float64]) -> (Tensor[(8, 11, 9), float64], Tensor[(2310), float64], Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
  %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 9), float64] */;
  %145 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %146 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %147 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %148 = cast(%var_3032, dtype="float64") /* ty=Tensor[(936), float64] */;
  %149 = reshape(%148, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %150 = @func_2561(%149) /* ty=(Tensor[(13, 12, 6), float64],) */;
  %151 = atan(%144) /* ty=Tensor[(8, 11, 9), float64] */;
  %152 = %145.3;
  %153 = %146.0;
  %154 = %147.1;
  %155 = %150.0;
  (%151, %152, %153, %154, %155, %var_3032)
}

def @func_4040() -> Tensor[(12, ?, 6), int64] {
  %156 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %156.2
}

def @func_4523() -> (Tensor[(2310), float64],) {
  %157 = @func_3609() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) */;
  %158 = %157.2;
  (%158,)
}

def @func_3141(%var_3120: Tensor[(15, 14, 11), int64]) -> (Tensor[(15, 14, 11), float32], Tensor[(286), uint8], Tensor[(26, 11), uint8]) {
  %159 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %160 = %159.2;
  %161 = cast(%var_3120, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = cast(%var_3120, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(26, 11), uint8] */, dtype="uint8") /* ty=Tensor[(26, 11), uint8] */;
  %167 = reshape(%165, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %168 = reshape(%166, newshape=[286]) /* ty=Tensor[(286), uint8] */;
  %169 = @func_1015(%167, %168) /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) */;
  %170 = floor_divide(%163, %164) /* ty=Tensor[(15, 14, 11), float32] */;
  %171 = %169.7;
  (%170, %171, meta[relay.Constant][7] /* ty=Tensor[(26, 11), uint8] */)
}

def @func_2380() -> (Tensor[(2310), float32],) {
  %172 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %173 = %172.0;
  (%173,)
}

def @func_298() -> (Tensor[(12, ?, 6), int64],) {
  %174 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  (%174,)
}

def @func_4383() -> (Tensor[(12, 4, 6), float32],) {
  %175 = @func_3638() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %176 = %175.0;
  (%176,)
}

def @func_5322() -> (Tensor[(15, 14, 11), int64],) {
  %177 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %178 = %177.0;
  (%178,)
}

def @func_4474() -> (Tensor[(12, ?, 6), int64],) {
  %179 = @func_2104() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) */;
  %180 = %179.0;
  (%180,)
}

def @func_513(%var_508: Tensor[(12, 2, 6), int64]) -> (Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) {
  %181 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %182 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 1, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%181, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = cast(%181, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %187 = cast(%var_508, dtype="bool") /* ty=Tensor[(12, 2, 6), bool] */;
  %188 = less(%184, %185) /* ty=Tensor[(12, ?, 6), bool] */;
  %189 = less_equal(%186, %187) /* ty=Tensor[(12, 2, 6), bool] */;
  (%188, %189)
}

def @func_223() -> Tensor[(12, ?, 6), int64] {
  @func_176() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_4901(%var_4882: Tensor[(12, 12, 6), int64]) -> Tensor[(12, 12, 6), float32] {
  %190 = @func_3704() /* ty=Tensor[(12, 12, 6), int64] */;
  %191 = cast(%var_4882, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%193, %194) /* ty=Tensor[(12, 12, 6), float32] */
}

def @func_3847(%var_3841: Tensor[(12, 4, 6), float32]) -> Tensor[(12, 4, 6), bool] {
  %195 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %196 = %195.1;
  %197 = cast(%var_3841, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%199, %200) /* ty=Tensor[(12, 4, 6), bool] */
}

def @func_176() -> Tensor[(12, ?, 6), int64] {
  %201 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %202 = sinh(%201) /* ty=Tensor[(12, 1, 6), float32] */;
  %203 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 6), float32] */, dtype="int64") /* ty=Tensor[(12, 1, 6), int64] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="int64") /* ty=Tensor[(12, 1, 6), int64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%205, %206) /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_610(%var_607: Tensor[(2310), float64], %var_608: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
  %207 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %208 = cast(%var_607, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %209 = cast(%var_608, dtype="float32") /* ty=Tensor[(432), float32] */;
  %210 = reshape(%208, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %211 = reshape(%209, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %212 = @func_276(%210, %211) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %213 = %207.0;
  %214 = %212.1;
  (%213, %214, %var_607, %var_608)
}

def @func_2294(%var_2274: Tensor[(1, 2, 5), uint32], %var_2275: Tensor[(9, 2, 5), uint32], %var_2285: Tensor[(432), float32]) -> (Tensor[(9, 2, 5), bool], Tensor[(13, 11, 2), uint8], Tensor[(1, 286), uint8], Tensor[(432), float32]) {
  %215 = cast(%var_2274, dtype="bool") /* ty=Tensor[(1, 2, 5), bool] */;
  %216 = cast(%var_2275, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
  %217 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 286), uint8] */, dtype="uint8") /* ty=Tensor[(1, 286), uint8] */;
  %218 = cast(%var_2285, dtype="float32") /* ty=Tensor[(432), float32] */;
  %219 = reshape(%217, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %220 = reshape(%218, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %221 = @func_159(%219, %220) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %222 = not_equal(%215, %216) /* ty=Tensor[(9, 2, 5), bool] */;
  %223 = %221.0;
  (%222, %223, meta[relay.Constant][10] /* ty=Tensor[(1, 286), uint8] */, %var_2285)
}

def @func_2647(%var_2642: Tensor[(15, 14, 11), int64]) -> Tensor[(15, 14, 11), bool] {
  %224 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %225 = %224.0;
  %226 = cast(%var_2642, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%228, %229) /* ty=Tensor[(15, 14, 11), bool] */
}

def @func_6066() -> Tensor[(12, ?, 6), float32] {
  %230 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %231 = %230.0;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  atanh(%232) /* ty=Tensor[(12, ?, 6), float32] */
}

def @func_1452(%var_1430: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(13, 11, 2), uint8], Tensor[(286), uint8], Tensor[(432), float32], Tensor[(12, 4, 6), uint16], Tensor[(288), int64]) {
  %233 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %234 = cast(meta[relay.Constant][11] /* ty=Tensor[(286), uint8] */, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %235 = cast(%var_1430, dtype="float32") /* ty=Tensor[(432), float32] */;
  %236 = reshape(%234, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %237 = reshape(%235, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %238 = @func_159(%236, %237) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(288), int64] */, dtype="int64") /* ty=Tensor[(288), int64] */;
  %240 = reshape(%239, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %241 = @func_1107(%240) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %242 = %233.0;
  %243 = %238.0;
  %244 = %241.0;
  (%242, %243, meta[relay.Constant][11] /* ty=Tensor[(286), uint8] */, %var_1430, %244, meta[relay.Constant][12] /* ty=Tensor[(288), int64] */)
}

def @func_4134() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  %245 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %246 = @func_2840() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %247 = %245.2;
  %248 = %246.0;
  (%247, %248)
}

def @func_276(%var_234: Tensor[(15, 14, 11), float64], %var_250: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) {
  %249 = cast(%var_250, dtype="float32") /* ty=Tensor[(432), float32] */;
  %250 = reshape(%249, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %251 = @func_57(%250) /* ty=Tensor[(9, 16, 3), float64] */;
  %252 = cast(%251, dtype="int64") /* ty=Tensor[(9, 16, 3), int64] */;
  %253 = shape_of(%var_250, dtype="int32") /* ty=Tensor[(1), int32] */;
  %254 = cast(%var_250, dtype="int64") /* ty=Tensor[(432), int64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?), int64] */;
  %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 11), float64] */, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %257 = cos(%256) /* ty=Tensor[(15, 14, 11), float32] */;
  %258 = cast(%var_234, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %259 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %262 = floor_mod(%260, %261) /* ty=Tensor[(15, 14, 11), float64] */;
  %263 = cast(%262, dtype="int64") /* ty=Tensor[(15, 14, 11), int64] */;
  %264 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%257, dtype="int64") /* ty=Tensor[(15, 14, 11), int64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %267 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %268 = right_shift(%254, %255) /* ty=Tensor[(432), int64] */;
  %269 = bitwise_or(%265, %266) /* ty=Tensor[(15, 14, 11), int64] */;
  (%267, %268, %269)
}

def @func_3447() -> Tensor[(12, ?, 6), int64] {
  @func_1041() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_5004(%var_4935: Tensor[(13, 11, 14), int8], %var_4939: Tensor[(13, 11, 14), int8], %var_4988: Tensor[(13, 11, 14), bool]) -> (Tensor[(13, 1, 12), float64], Tensor[(1, 156), float64], Tensor[(13, 11, 14), bool], Tensor[(13, 11, 14), float64], Tensor[(15, 14, 11), int64], Tensor[(13, 11, 14), float64]) {
  %270 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 156), float64] */, dtype="float64") /* ty=Tensor[(1, 156), float64] */;
  %271 = reshape(%270, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float64] */;
  %272 = @func_3066(%271) /* ty=(Tensor[(13, 1, 12), float64],) */;
  %273 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 14), int8] */, dtype="int8") /* ty=Tensor[(1, 11, 14), int8] */;
  %274 = cast(%var_4935, dtype="int8") /* ty=Tensor[(13, 11, 14), int8] */;
  %275 = left_shift(%273, %274) /* ty=Tensor[(13, 11, 14), int8] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %277 = cos(%276) /* ty=Tensor[(13, 11, 14), float32] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %279 = acosh(%278) /* ty=Tensor[(13, 11, 14), float64] */;
  %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %284 = cast(%var_4939, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %285 = shape_of(%var_4935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_4935, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = not_equal(%286, %287) /* ty=Tensor[(13, 11, 14), bool] */;
  %289 = cast(%var_4988, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %293 = @func_2333() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %294 = cast(%279, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %295 = %272.0;
  %296 = logical_or(%282, %283) /* ty=Tensor[(13, 11, 14), bool] */;
  %297 = floor_divide(%291, %292) /* ty=Tensor[(13, 11, 14), float64] */;
  %298 = %293.0;
  %299 = erf(%294) /* ty=Tensor[(13, 11, 14), float64] */;
  (%295, meta[relay.Constant][14] /* ty=Tensor[(1, 156), float64] */, %296, %297, %298, %299)
}

def @func_5591(%var_5537: Tensor[(432), int64], %var_5568: Tensor[(864), int64]) -> (Tensor[(432), uint16], Tensor[(12, 12, 6), float32], Tensor[(864), int64], Tensor[(432), int64]) {
  %300 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %301 = %300.1;
  %302 = cast(%var_5537, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(1), int32] */;
  %304 = cast(%301, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %306 = cast(%var_5568, dtype="int64") /* ty=Tensor[(864), int64] */;
  %307 = reshape(%306, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), int64] */;
  %308 = @func_5373() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %309 = minimum(%304, %305) /* ty=Tensor[(432), uint16] */;
  %310 = @func_4901(%307) /* ty=Tensor[(12, 12, 6), float32] */;
  %311 = %308.1;
  (%309, %310, %var_5568, %311)
}

def @func_5191(%var_5163: Tensor[(432), float32]) -> (Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) {
  %312 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %313 = @func_3410() /* ty=(Tensor[(2310), float32],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %316 = @func_2940() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) */;
  %317 = cast(%314, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %318 = cast(%var_5163, dtype="float32") /* ty=Tensor[(432), float32] */;
  %319 = reshape(%317, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %320 = reshape(%318, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %321 = @func_276(%319, %320) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %322 = cast(meta[relay.Constant][17] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %323 = reshape(%322, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %324 = @func_3674(%323) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) */;
  %325 = %312.0;
  %326 = rsqrt(%315) /* ty=Tensor[(2310), float64] */;
  %327 = %316.1;
  %328 = %321.0;
  %329 = %324.1;
  (%325, %326, %327, %328, %var_5163, %329, meta[relay.Constant][17] /* ty=Tensor[(1404), float32] */)
}

def @func_3174() -> Tensor[(15, 14, 11), int64] {
  %330 = @func_2333() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %330.0
}

def @main() -> Tensor[(300), float32] {
  %331 = @func_3427() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) */;
  %332 = %331.2;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(300), float32] */;
  sqrt(%333) /* ty=Tensor[(300), float32] */
}

def @func_1543(%var_1539: Tensor[(2310), float64]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) {
  %334 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %335 = cast(%var_1539, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %336 = %334.4;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(432), float32] */;
  %338 = reshape(%335, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %339 = reshape(%337, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %340 = @func_276(%338, %339) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %341 = %340.2;
  (%336, %341, %var_1539)
}

def @func_3514() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) {
  %342 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %343 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %344 = %342.0;
  (%343, %344)
}

def @func_2505() -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64]) {
  %345 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %346 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %347 = %345.2;
  %348 = %346.0;
  (%347, %348)
}

def @func_5459() -> (Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) {
  %349 = @func_5322() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %350 = cast(meta[relay.Constant][18] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %351 = reshape(%350, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %352 = @func_4815(%351) /* ty=(Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) */;
  %353 = cast(meta[relay.Constant][18] /* ty=Tensor[(968), int32] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %354 = %349.0;
  %355 = %352.0;
  %356 = atanh(%353) /* ty=Tensor[(968), float64] */;
  (%354, %355, %356)
}

def @func_1015(%var_966: Tensor[(2310), float64], %var_1011: Tensor[(286), uint8]) -> (Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) {
  %357 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %358 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %361 = sigmoid(%360) /* ty=Tensor[(12, ?, 6), float32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %366 = power(%364, %365) /* ty=Tensor[(12, ?, 6), float32] */;
  %367 = cast(%361, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %372 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %373 = %372.3;
  %374 = cast(%var_966, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(1), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?), float32] */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %379 = reshape(%378, newshape=[12, 2, 6]) /* ty=Tensor[(12, 2, 6), int64] */;
  %380 = @func_513(%379) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) */;
  %381 = cast(%var_1011, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %382 = %357.1;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(432), float32] */;
  %384 = reshape(%381, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %385 = reshape(%383, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %386 = @func_159(%384, %385) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %387 = mod(%369, %370) /* ty=Tensor[(12, ?, 6), float64] */;
  %388 = %371.0;
  %389 = minimum(%376, %377) /* ty=Tensor[(2310), float32] */;
  %390 = %380.0;
  %391 = %386.1;
  (%382, %387, %388, %389, %390, meta[relay.Constant][19] /* ty=Tensor[(144), int64] */, %391, %var_1011)
}

def @func_3066(%var_3060: Tensor[(13, 1, 12), float64]) -> (Tensor[(13, 1, 12), float64],) {
  %392 = cast(-0.716016f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %393 = cast(%var_3060, dtype="float64") /* ty=Tensor[(13, 1, 12), float64] */;
  %394 = mod(%392, %393) /* ty=Tensor[(13, 1, 12), float64] */;
  (%394,)
}

def @func_657(%var_652: uint32, %var_653: Tensor[(4, 10, 14), uint32]) -> Tensor[(4, 10, 14), bool] {
  %395 = cast(%var_652, dtype="bool") /* ty=bool */;
  %396 = cast(%var_653, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  less(%395, %396) /* ty=Tensor[(4, 10, 14), bool] */
}

def @func_2009(%var_1976: Tensor[(150, 2), int8]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) {
  %397 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %398 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
  %399 = %398.1;
  %400 = cast(%399, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
  %401 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 8, 6), float64] */, dtype="int64") /* ty=Tensor[(12, 8, 6), int64] */;
  %402 = cast(%var_1976, dtype="int8") /* ty=Tensor[(150, 2), int8] */;
  %403 = cast(%var_1976, dtype="int8") /* ty=Tensor[(150, 2), int8] */;
  %404 = reshape(%402, newshape=[12, 5, 5]) /* ty=Tensor[(12, 5, 5), int8] */;
  %405 = reshape(%403, newshape=[12, 5, 5]) /* ty=Tensor[(12, 5, 5), int8] */;
  %406 = @func_871(%404, %405) /* ty=(Tensor[(12, 5, 5), bool],) */;
  %407 = %406.0;
  %408 = cast(%407, dtype="uint64") /* ty=Tensor[(12, 5, 5), uint64] */;
  %409 = shape_of(%var_1976, dtype="int32") /* ty=Tensor[(2), int32] */;
  %410 = cast(%var_1976, dtype="uint64") /* ty=Tensor[(150, 2), uint64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %412 = %397.0;
  %413 = bitwise_xor(%400, %401) /* ty=Tensor[(12, 8, 6), int64] */;
  %414 = bitwise_and(%410, %411) /* ty=Tensor[(150, 2), uint64] */;
  (%412, %413, %414)
}

def @func_775() -> (Tensor[(12, 4, 6), float32],) {
  %415 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %417 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 4, 6), int64] */, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
  %418 = floor_mod(%416, %417) /* ty=Tensor[(12, 4, 6), float32] */;
  (%418,)
}

def @func_57(%var_41: Tensor[(9, 16, 3), float32]) -> Tensor[(9, 16, 3), float64] {
  %419 = cast(%var_41, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %420 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(9, 16, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %423 = divide(%421, %422) /* ty=Tensor[(9, 16, 3), float32] */;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  acosh(%424) /* ty=Tensor[(9, 16, 3), float64] */
}

def @func_3624() -> Tensor[(12, 4, 6), float32] {
  %425 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %425.1
}

def @func_4166(%var_4147: Tensor[(16, 6, 12), uint8], %var_4148: Tensor[(16, 6, 12), uint8]) -> Tensor[(16, 6, 12), uint8] {
  %426 = cast(%var_4148, dtype="uint8") /* ty=Tensor[(16, 6, 12), uint8] */;
  %427 = shape_of(%var_4147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%var_4147, dtype="uint8") /* ty=Tensor[(16, 6, 12), uint8] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%428, %429) /* ty=Tensor[(16, 6, 12), uint8] */
}

def @func_3753() -> (Tensor[(12, 4, 6), float64],) {
  %430 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %431 = %430.1;
  (%431,)
}

def @func_4543() -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64]) {
  %432 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %433 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %434 = cast(meta[relay.Constant][23] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %435 = reshape(%434, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), int64] */;
  %436 = %432.0;
  %437 = %433.0;
  %438 = @func_2647(%435) /* ty=Tensor[(15, 14, 11), bool] */;
  (%436, %437, %438, meta[relay.Constant][23] /* ty=Tensor[(2310), int64] */)
}

def @func_3410() -> (Tensor[(2310), float32],) {
  %439 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %440 = %439.2;
  (%440,)
}

def @func_4681() -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
  %441 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %442 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %445 = %441.0;
  %446 = sigmoid(%444) /* ty=Tensor[(2310), float32] */;
  (%445, %446)
}

def @func_5047() -> (Tensor[(12, ?, 6), int64],) {
  %447 = @func_3447() /* ty=Tensor[(12, ?, 6), int64] */;
  (%447,)
}

def @func_4774() -> (Tensor[(2310), float32],) {
  %448 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %449 = %448.0;
  (%449,)
}

def @func_4815(%var_4776: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) {
  %450 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %451 = shape_of(%var_4776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_4776, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %454 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %455 = @func_3514() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) */;
  %456 = %455.1;
  %457 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 4, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = right_shift(%452, %453) /* ty=Tensor[(8, 11, 11), int32] */;
  %462 = %454.1;
  %463 = greater(%459, %460) /* ty=Tensor[(12, 4, 6), bool] */;
  (%461, %462, %463)
}

def @func_3674(%var_3651: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) {
  %464 = cast(%var_3651, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %465 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = greater(%466, %467) /* ty=Tensor[(12, 9, 13), bool] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %470 = sin(%469) /* ty=Tensor[(12, 9, 13), float64] */;
  %471 = @func_3447() /* ty=Tensor[(12, ?, 6), int64] */;
  (%470, %471)
}

def @func_871(%var_846: Tensor[(12, 5, 5), int8], %var_847: Tensor[(12, 5, 5), int8]) -> (Tensor[(12, 5, 5), bool],) {
  %472 = cast(%var_847, dtype="int8") /* ty=Tensor[(12, 5, 5), int8] */;
  %473 = shape_of(%var_846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_846, dtype="int8") /* ty=Tensor[(12, 5, 5), int8] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %476 = left_shift(%474, %475) /* ty=Tensor[(12, 5, 5), int8] */;
  %477 = cast(%var_847, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %478 = cosh(%477) /* ty=Tensor[(12, 5, 5), float64] */;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %480 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%476, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %483 = mod(%481, %482) /* ty=Tensor[(12, 5, 5), float64] */;
  %484 = cast(%476, dtype="bool") /* ty=Tensor[(12, 5, 5), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(12, 5, 5), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = greater(%486, %487) /* ty=Tensor[(12, 5, 5), bool] */;
  (%488,)
}

def @func_1392() -> (Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) {
  %489 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  %490 = cast(%489, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %491 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %492 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4, 6), int64] */, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
  %493 = erf(%492) /* ty=Tensor[(12, 4, 6), float32] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %495 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %496 = asinh(%494) /* ty=Tensor[(12, 4, 6), float64] */;
  %497 = cast(%496, dtype="int64") /* ty=Tensor[(12, 4, 6), int64] */;
  %498 = reshape(%497, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %499 = @func_1107(%498) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %500 = logical_or(%490, %491) /* ty=Tensor[(12, 4, 6), bool] */;
  %501 = %495.0;
  %502 = %499.0;
  (%500, %496, %501, %502)
}

def @func_4351(%var_4320: Tensor[(12, 16, 6), float64], %var_4347: Tensor[(2310), float64], %var_4348: Tensor[(2, 216), float32]) -> (Tensor[(12, 16, 6), uint16], Tensor[(12, 16, 6), bool], Tensor[(2310), float64], Tensor[(2310), float64], Tensor[(2, 216), float32]) {
  %503 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %504 = %503.1;
  %505 = cast(%504, dtype="uint16") /* ty=Tensor[(12, ?, 6), uint16] */;
  %506 = cast(%var_4320, dtype="uint16") /* ty=Tensor[(12, 16, 6), uint16] */;
  %507 = cast(%var_4320, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
  %508 = cast(%504, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %509 = cast(%var_4347, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %510 = cast(%var_4348, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %511 = reshape(%509, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %512 = reshape(%510, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %513 = @func_610(%511, %512) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %514 = minimum(%505, %506) /* ty=Tensor[(12, 16, 6), uint16] */;
  %515 = not_equal(%507, %508) /* ty=Tensor[(12, 16, 6), bool] */;
  %516 = %513.2;
  (%514, %515, %516, %var_4347, %var_4348)
}

def @func_2314() -> (Tensor[(12, ?, 6), int64],) {
  %517 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%517,)
}

def @func_5421(%var_5403: Tensor[(560), uint32]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), uint16], Tensor[(560), uint32], Tensor[(12, 11, 6), float64]) {
  %518 = cast(%var_5403, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %519 = reshape(%518, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %520 = @func_2800(%519) /* ty=(uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) */;
  %521 = @func_3403() /* ty=Tensor[(12, ?, 6), float64] */;
  %522 = cast(%521, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %523 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 6), bool] */;
  %524 = less_equal(%522, %523) /* ty=Tensor[(12, 11, 6), bool] */;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %526 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %529 = @func_5202() /* ty=Tensor[(432), float32] */;
  %530 = %520.2;
  %531 = floor_divide(%527, %528) /* ty=Tensor[(12, 11, 6), float64] */;
  (%529, %530, %var_5403, %531)
}

def @func_3638() -> (Tensor[(12, 4, 6), float32],) {
  %532 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
  %533 = %532.0;
  (%533,)
}

def @func_3956(%var_3944: Tensor[(936), float64]) -> (Tensor[(12, 3, 6), int8], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
  %534 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %535 = %534.1;
  %536 = cast(%535, dtype="int8") /* ty=Tensor[(12, ?, 6), int8] */;
  %537 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 3, 6), float64] */, dtype="int8") /* ty=Tensor[(12, 3, 6), int8] */;
  %538 = cast(%var_3944, dtype="float64") /* ty=Tensor[(936), float64] */;
  %539 = reshape(%538, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %540 = @func_2561(%539) /* ty=(Tensor[(13, 12, 6), float64],) */;
  %541 = logical_xor(%536, %537) /* ty=Tensor[(12, 3, 6), int8] */;
  %542 = %540.0;
  (%541, %542, %var_3944)
}

def @func_4607(%var_4554: Tensor[(8, 3, 14), uint16], %var_4555: Tensor[(8, 3, 14), uint16]) -> (Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) {
  %543 = cast(%var_4555, dtype="uint16") /* ty=Tensor[(8, 3, 14), uint16] */;
  %544 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_4554, dtype="uint16") /* ty=Tensor[(8, 3, 14), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %547 = subtract(%545, %546) /* ty=Tensor[(8, 3, 14), uint16] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %549 = cast(meta[relay.Constant][30] /* ty=Tensor[(144, 2), int64] */, dtype="int64") /* ty=Tensor[(144, 2), int64] */;
  %550 = reshape(%549, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %551 = @func_1107(%550) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %552 = %551.0;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %554 = cast(meta[relay.Constant][31] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %555 = reshape(%554, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), int64] */;
  %556 = cast(%var_4555, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %557 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_4554, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = acos(%548) /* ty=Tensor[(8, 3, 14), float32] */;
  %561 = cos(%553) /* ty=Tensor[(12, 4, 6), float64] */;
  %562 = @func_2647(%555) /* ty=Tensor[(15, 14, 11), bool] */;
  %563 = floor_mod(%558, %559) /* ty=Tensor[(8, 3, 14), float32] */;
  %564 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  (meta[relay.Constant][30] /* ty=Tensor[(144, 2), int64] */, %560, %561, %562, meta[relay.Constant][31] /* ty=Tensor[(2310), int64] */, %563, %564)
}

def @func_5202() -> Tensor[(432), float32] {
  %565 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %565.4
}

def @func_4929() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) {
  %566 = @func_2901() /* ty=(Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) */;
  %567 = @func_2616() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) */;
  %568 = %566.1;
  %569 = %567.0;
  (%568, %569)
}

def @func_5781(%var_5756: Tensor[(7, 15, 8), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(7, 15, 8), float64]) {
  %570 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
  %571 = shape_of(%var_5756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%var_5756, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %574 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="float64") /* ty=Tensor[(7, 15, 8), float64] */;
  %575 = subtract(%572, %573) /* ty=Tensor[(7, 15, 8), uint8] */;
  %576 = cosh(%574) /* ty=Tensor[(7, 15, 8), float64] */;
  (%575, %576)
}

def @func_5838() -> (Tensor[(15, 14, 11), int64],) {
  %577 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %578 = %577.0;
  (%578,)
}

def @func_5942() -> (Tensor[(432), int64],) {
  %579 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %580 = %579.1;
  (%580,)
}

def @func_5650(%var_5632: Tensor[(12, 15, 6), int64], %var_5644: Tensor[(7, 330), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), float64], Tensor[(12, 15, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(9, 16, 3), float64], Tensor[(7, 330), float64], Tensor[(286), uint8]) {
  %581 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
  %582 = @func_4474() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
  %585 = cast(%var_5632, dtype="int64") /* ty=Tensor[(12, 15, 6), int64] */;
  %586 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %587 = cast(%var_5644, dtype="float64") /* ty=Tensor[(7, 330), float64] */;
  %588 = cast(meta[relay.Constant][33] /* ty=Tensor[(286), uint8] */, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %589 = reshape(%587, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %590 = reshape(%588, newshape=[286]) /* ty=Tensor[(286), uint8] */;
  %591 = @func_1015(%589, %590) /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) */;
  %592 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  %593 = %581.1;
  %594 = minimum(%584, %585) /* ty=Tensor[(12, 15, 6), int64] */;
  %595 = %586.0;
  %596 = %591.6;
  (%592, %593, %594, %595, %596, %var_5644, meta[relay.Constant][33] /* ty=Tensor[(286), uint8] */)
}

def @func_1041() -> Tensor[(12, ?, 6), int64] {
  @func_223() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_457() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %597 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %598 = %597.2;
  %599 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%598, %599)
}

def @func_159(%var_146: Tensor[(13, 11, 2), uint8], %var_152: Tensor[(1, 432), float32]) -> (Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) {
  %600 = cast(%var_146, dtype="uint8") /* ty=Tensor[(13, 11, 2), uint8] */;
  %601 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(13, 11, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 11, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 11, 2), uint8] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %604 = cast(%var_152, dtype="float32") /* ty=Tensor[(1, 432), float32] */;
  %605 = reshape(%604, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %606 = minimum(%602, %603) /* ty=Tensor[(13, 11, 2), uint8] */;
  %607 = @func_57(%605) /* ty=Tensor[(9, 16, 3), float64] */;
  (%606, %607, %var_152)
}

def @func_3427() -> (Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) {
  %608 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %609 = cast(meta[relay.Constant][35] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
  %610 = reshape(%609, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
  %611 = @func_2009(%610) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
  %612 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %613 = %608.0;
  %614 = %611.2;
  %615 = %612.1;
  (%613, %614, meta[relay.Constant][35] /* ty=Tensor[(300), int8] */, %615)
}

def @func_2940() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) {
  %616 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %617 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
  %618 = %617.0;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %620 = log10(%619) /* ty=Tensor[(12, 4, 6), float64] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %622 = %616.0;
  %623 = acosh(%621) /* ty=Tensor[(12, 4, 6), float64] */;
  (%622, %623)
}

def @func_2901() -> (Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) {
  %624 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 11), float64] */;
  %625 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %626 = asinh(%624) /* ty=Tensor[(14, 2, 11), float64] */;
  %627 = %625.0;
  (%626, %627)
}

def @func_1259(%var_1193: Tensor[(12, 4, 6), float32], %var_1211: Tensor[(432), float32], %var_1221: Tensor[(770, 3), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) {
  %628 = cast(meta[relay.Constant][37] /* ty=Tensor[(770, 3), float64] */, dtype="float64") /* ty=Tensor[(770, 3), float64] */;
  %629 = cast(%var_1211, dtype="float32") /* ty=Tensor[(432), float32] */;
  %630 = reshape(%628, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %631 = reshape(%629, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %632 = @func_276(%630, %631) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %633 = cast(%var_1221, dtype="uint16") /* ty=Tensor[(770, 3), uint16] */;
  %634 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(770, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %635 = cast(meta[relay.Constant][37] /* ty=Tensor[(770, 3), float64] */, dtype="uint16") /* ty=Tensor[(770, 3), uint16] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %637 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %638 = %637.0;
  %639 = cast(%var_1193, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %643 = bitwise_and(%641, %642) /* ty=Tensor[(12, 4, 6), uint16] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %645 = sqrt(%644) /* ty=Tensor[(12, 4, 6), float64] */;
  %646 = cast(%643, dtype="int16") /* ty=Tensor[(12, 4, 6), int16] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="int16") /* ty=Tensor[(12, 4, 6), int16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %650 = cast(%645, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %651 = atan(%650) /* ty=Tensor[(12, 4, 6), float64] */;
  %652 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 4, 6), float64] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = %632.0;
  %657 = logical_xor(%635, %636) /* ty=Tensor[(770, 3), uint16] */;
  %658 = bitwise_xor(%648, %649) /* ty=Tensor[(12, 4, 6), int16] */;
  %659 = equal(%654, %655) /* ty=Tensor[(12, 4, 6), bool] */;
  (%656, %var_1211, %657, %658, %659)
}

def @func_2104() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) {
  %660 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %661 = %660.1;
  %662 = cast(%661, dtype="int64") /* ty=Tensor[(12, 4, 6), int64] */;
  %663 = reshape(%662, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %664 = @func_1107(%663) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %665 = @func_1041() /* ty=Tensor[(12, ?, 6), int64] */;
  %666 = %664.0;
  (%665, %661, %666)
}

def @func_2840() -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %667 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %668 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %669 = %667.1;
  %670 = %668.0;
  %671 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  (%669, %670, %671)
}

def @func_3704() -> Tensor[(12, 12, 6), int64] {
  %672 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  %673 = cast(%672, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
  %674 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 12, 6), int64] */, dtype="int64") /* ty=Tensor[(12, 12, 6), int64] */;
  left_shift(%673, %674) /* ty=Tensor[(12, 12, 6), int64] */
}

def @func_2561(%var_2538: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), float64],) {
  %675 = cast(%var_2538, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %676 = asin(%675) /* ty=Tensor[(13, 12, 6), float64] */;
  (%676,)
}

def @func_2999(%var_2987: Tensor[(4, 108), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(2310), float64], Tensor[(4, 108), float32], Tensor[(12, ?, 6), int64]) {
  %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %678 = cast(%var_2987, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %679 = reshape(%677, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %680 = reshape(%678, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %681 = @func_610(%679, %680) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %682 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  %683 = %681.0;
  %684 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%682, %683, meta[relay.Constant][40] /* ty=Tensor[(2310), float64] */, %var_2987, %684)
}

def @func_3403() -> Tensor[(12, ?, 6), float64] {
  %685 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  erf(%687) /* ty=Tensor[(12, ?, 6), float64] */
}

def @func_2022() -> (Tensor[(15, 14, 11), int64],) {
  %688 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %689 = %688.2;
  (%689,)
}

def @func_5373() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  %690 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %691 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %692 = %690.0;
  %693 = %691.1;
  (%692, %693)
}

def @func_1684() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) {
  %694 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %695 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %698 = %694.2;
  %699 = cos(%697) /* ty=Tensor[(12, ?, 6), float64] */;
  (%698, %699)
}

def @func_537() -> (Tensor[(12, ?, 6), int64],) {
  %700 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%700,)
}

def @func_1107(%var_1081: Tensor[(12, 4, 6), int64]) -> (Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) {
  %701 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %702 = %701.0;
  %703 = cast(%var_1081, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %704 = cast(%702, dtype="uint16") /* ty=Tensor[(12, ?, 6), uint16] */;
  %705 = cast(%702, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %706 = cast(%var_1081, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %707 = not_equal(%705, %706) /* ty=Tensor[(12, 4, 6), bool] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
  %709 = left_shift(%703, %704) /* ty=Tensor[(12, 4, 6), uint16] */;
  %710 = exp(%708) /* ty=Tensor[(12, 4, 6), float32] */;
  (%709, %710)
}

def @func_1491(%var_1484: uint32, %var_1485: Tensor[(560), uint32]) -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) {
  %711 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %712 = cast(meta[relay.Constant][41] /* ty=Tensor[(24, 12), float32] */, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
  %713 = cast(meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %714 = %711.2;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %716 = reshape(%712, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), float32] */;
  %717 = reshape(%713, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %718 = reshape(%715, newshape=[770, 3]) /* ty=Tensor[(770, 3), float64] */;
  %719 = @func_1259(%716, %717, %718) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) */;
  %720 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %721 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
  %722 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %723 = reshape(%721, newshape=[]) /* ty=uint32 */;
  %724 = reshape(%722, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), uint32] */;
  %725 = %719.0;
  %726 = %720.0;
  %727 = @func_657(%723, %724) /* ty=Tensor[(4, 10, 14), bool] */;
  (%714, %725, meta[relay.Constant][41] /* ty=Tensor[(24, 12), float32] */, meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, %726, %727, %var_1484, %var_1485)
}

def @func_2333() -> (Tensor[(15, 14, 11), int64],) {
  %728 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %729 = %728.0;
  (%729,)
}

def @func_5519() -> (Tensor[(12, ?, 6), int64], Tensor[(8, 11, 11), int32]) {
  %730 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %731 = @func_5459() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) */;
  %732 = %730.0;
  %733 = %731.1;
  (%732, %733)
}

def @func_1884(%var_1872: Tensor[(9, 5, 2), float64]) -> (Tensor[(9, 5, 2), float64], Tensor[(9, 5, 2), float32]) {
  %734 = cast(%var_1872, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
  %735 = cast(%var_1872, dtype="float32") /* ty=Tensor[(9, 5, 2), float32] */;
  %736 = exp(%734) /* ty=Tensor[(9, 5, 2), float64] */;
  %737 = atan(%735) /* ty=Tensor[(9, 5, 2), float32] */;
  (%736, %737)
}

def @func_396() -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
  %738 = cast(meta[relay.Constant][43] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %739 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %740 = reshape(%738, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %741 = reshape(%739, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %742 = @func_276(%740, %741) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %743 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %744 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %745 = %742.2;
  (%743, %744, %745, meta[relay.Constant][43] /* ty=Tensor[(2310), float64] */, meta[relay.Constant][44] /* ty=Tensor[(432), float32] */)
}

def @func_746() -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %746 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %747 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %750 = %746.1;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(432), float32] */;
  %752 = reshape(%749, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %753 = reshape(%751, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %754 = @func_276(%752, %753) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %755 = %754.0;
  (%750, %748, %755)
}

def @func_5808(%var_5787: Tensor[(12, 10, 5), int8], %var_5788: Tensor[(12, 10, 5), int8]) -> Tensor[(12, 10, 5), int8] {
  %756 = cast(%var_5788, dtype="int8") /* ty=Tensor[(12, 10, 5), int8] */;
  %757 = shape_of(%var_5787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_5787, dtype="int8") /* ty=Tensor[(12, 10, 5), int8] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%758, %759) /* ty=Tensor[(12, 10, 5), int8] */
}

def @func_5878() -> Tensor[(15, 14, 11), float64] {
  %760 = @func_4929() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) */;
  %761 = %760.0;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  asinh(%762) /* ty=Tensor[(15, 14, 11), float64] */
}

def @func_5925() -> (Tensor[(432), int64], Tensor[(12, ?, 6), int64]) {
  %763 = @func_5373() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %764 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %765 = %763.1;
  %766 = %764.0;
  (%765, %766)
}

def @func_2616() -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) {
  %767 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %768 = %767.0;
  %769 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %772 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%768, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
  %776 = reshape(%775, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
  %777 = @func_2009(%776) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
  %778 = greater(%773, %774) /* ty=Tensor[(12, ?, 6), bool] */;
  %779 = %777.0;
  (%778, %779, meta[relay.Constant][45] /* ty=Tensor[(300), int8] */)
}

def @func_3263() -> (Tensor[(2310), float64],) {
  %780 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %781 = %780.3;
  (%781,)
}

def @func_3609() -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) {
  %782 = @func_2840() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %783 = %782.2;
  %784 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
  %785 = %784.1;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %787 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%783, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = cast(%783, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %791 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%785, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %795 = less_equal(%788, %789) /* ty=Tensor[(12, ?, 6), bool] */;
  %796 = maximum(%792, %793) /* ty=Tensor[(12, ?, 6), float32] */;
  %797 = %794.1;
  (%795, %796, %797)
}

def @func_2747(%var_2728: Tensor[(286), uint8]) -> (Tensor[(432), float32], Tensor[(12, 2, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(12, ?, 6), int64]) {
  %798 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %799 = cast(meta[relay.Constant][46] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %800 = reshape(%799, newshape=[12, 2, 6]) /* ty=Tensor[(12, 2, 6), int64] */;
  %801 = @func_513(%800) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) */;
  %802 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %803 = %798.2;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(432), float32] */;
  %805 = reshape(%802, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %806 = reshape(%804, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %807 = @func_159(%805, %806) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %808 = cast(meta[relay.Constant][47] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %809 = %807.1;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %811 = reshape(%808, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %812 = reshape(%810, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %813 = @func_276(%811, %812) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %814 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %815 = %801.1;
  %816 = %813.2;
  %817 = %814.0;
  (%803, %815, meta[relay.Constant][46] /* ty=Tensor[(144), int64] */, %809, %var_2728, %816, meta[relay.Constant][47] /* ty=Tensor[(2310), float64] */, %817)
}

def @func_592() -> (Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) {
  %818 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %819 = %818.3;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %821 = log10(%820) /* ty=Tensor[(2310), float32] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %823 = cast(meta[relay.Constant][48] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %824 = reshape(%822, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %825 = reshape(%823, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %826 = @func_276(%824, %825) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %827 = %826.1;
  (%821, %827, meta[relay.Constant][48] /* ty=Tensor[(432), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2802(%var_2801: Tensor[(560), uint32]) -> (uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) {
  %15 = fn (%var_2766: Tensor[(560), uint32]) -> (uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) {
    %0 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %1 = %0.0;
    %2 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %3 = cast(%var_2766, dtype="uint32") /* ty=Tensor[(560), uint32] */;
    %4 = reshape(%2, newshape=[]) /* ty=uint32 */;
    %5 = reshape(%3, newshape=[560]) /* ty=Tensor[(560), uint32] */;
    %6 = @func_1491(%4, %5) /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) */;
    %7 = %6.0;
    %8 = cast(%7, dtype="uint16") /* ty=Tensor[(15, 14, 11), uint16] */;
    %9 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%1, dtype="uint16") /* ty=Tensor[(15, 14, 11), uint16] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %12 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %13 = bitwise_and(%10, %11) /* ty=Tensor[(15, 14, 11), uint16] */;
    %14 = %12.0;
    (meta[relay.Constant][0] /* ty=uint32 */, %var_2766, %13, %14)
  };
  %15(%var_2801) /* ty=(uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) */
}

def @func_4019(%var_4017: Tensor[(26, 11), uint8], %var_4018: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(9, 16, 3), float64], Tensor[(26, 11), uint8], Tensor[(432), float32]) {
  %23 = fn (%var_4013: Tensor[(26, 11), uint8], %var_4014: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(9, 16, 3), float64], Tensor[(26, 11), uint8], Tensor[(432), float32]) {
    %16 = cast(%var_4013, dtype="uint8") /* ty=Tensor[(26, 11), uint8] */;
    %17 = cast(%var_4014, dtype="float32") /* ty=Tensor[(432), float32] */;
    %18 = reshape(%16, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
    %19 = reshape(%17, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
    %20 = @func_159(%18, %19) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
    %21 = @func_3403() /* ty=Tensor[(12, ?, 6), float64] */;
    %22 = %20.1;
    (%21, %22, %var_4013, %var_4014)
  };
  %23(%var_4017, %var_4018) /* ty=(Tensor[(12, ?, 6), float64], Tensor[(9, 16, 3), float64], Tensor[(26, 11), uint8], Tensor[(432), float32]) */
}

def @func_5048() -> (Tensor[(12, ?, 6), int64],) {
  %25 = fn () -> (Tensor[(12, ?, 6), int64],) {
    %24 = @func_3447() /* ty=Tensor[(12, ?, 6), int64] */;
    (%24,)
  };
  %25() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_2011(%var_2010: Tensor[(150, 2), int8]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) {
  %44 = fn (%var_1976: Tensor[(150, 2), int8]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) {
    %26 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %27 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
    %28 = %27.1;
    %29 = cast(%28, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
    %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 8, 6), float64] */, dtype="int64") /* ty=Tensor[(12, 8, 6), int64] */;
    %31 = cast(%var_1976, dtype="int8") /* ty=Tensor[(150, 2), int8] */;
    %32 = cast(%var_1976, dtype="int8") /* ty=Tensor[(150, 2), int8] */;
    %33 = reshape(%31, newshape=[12, 5, 5]) /* ty=Tensor[(12, 5, 5), int8] */;
    %34 = reshape(%32, newshape=[12, 5, 5]) /* ty=Tensor[(12, 5, 5), int8] */;
    %35 = @func_871(%33, %34) /* ty=(Tensor[(12, 5, 5), bool],) */;
    %36 = %35.0;
    %37 = cast(%36, dtype="uint64") /* ty=Tensor[(12, 5, 5), uint64] */;
    %38 = shape_of(%var_1976, dtype="int32") /* ty=Tensor[(2), int32] */;
    %39 = cast(%var_1976, dtype="uint64") /* ty=Tensor[(150, 2), uint64] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %41 = %26.0;
    %42 = bitwise_xor(%29, %30) /* ty=Tensor[(12, 8, 6), int64] */;
    %43 = bitwise_and(%39, %40) /* ty=Tensor[(150, 2), uint64] */;
    (%41, %42, %43)
  };
  %44(%var_2010) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */
}

def @func_4544() -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64]) {
  %52 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64]) {
    %45 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %46 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %48 = reshape(%47, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), int64] */;
    %49 = %45.0;
    %50 = %46.0;
    %51 = @func_2647(%48) /* ty=Tensor[(15, 14, 11), bool] */;
    (%49, %50, %51, meta[relay.Constant][2] /* ty=Tensor[(2310), int64] */)
  };
  %52() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64]) */
}

def @func_1041() -> Tensor[(12, ?, 6), int64] {
  @func_223() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_1110(%var_1108: Tensor[(12, 4, 6), int64]) -> (Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) {
  @func_1107(%var_1108) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */
}

def @func_4815(%var_4776: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) {
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %54 = shape_of(%var_4776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_4776, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %57 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %58 = @func_3514() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) */;
  %59 = %58.1;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 4, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = right_shift(%55, %56) /* ty=Tensor[(8, 11, 11), int32] */;
  %65 = %57.1;
  %66 = greater(%62, %63) /* ty=Tensor[(12, 4, 6), bool] */;
  (%64, %65, %66)
}

def @func_614(%var_612: Tensor[(2310), float64], %var_613: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
  @func_610(%var_612, %var_613) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) */
}

def @func_2902() -> (Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) {
  %71 = fn () -> (Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) {
    %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 11), float64] */;
    %68 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %69 = asinh(%67) /* ty=Tensor[(14, 2, 11), float64] */;
    %70 = %68.0;
    (%69, %70)
  };
  %71() /* ty=(Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) */
}

def @func_660(%var_658: uint32, %var_659: Tensor[(4, 10, 14), uint32]) -> Tensor[(4, 10, 14), bool] {
  %74 = fn (%var_652: uint32, %var_653: Tensor[(4, 10, 14), uint32]) -> Tensor[(4, 10, 14), bool] {
    %72 = cast(%var_652, dtype="bool") /* ty=bool */;
    %73 = cast(%var_653, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
    less(%72, %73) /* ty=Tensor[(4, 10, 14), bool] */
  };
  %74(%var_658, %var_659) /* ty=Tensor[(4, 10, 14), bool] */
}

def @func_2506() -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64]) {
  %79 = fn () -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64]) {
    %75 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %76 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %77 = %75.2;
    %78 = %76.0;
    (%77, %78)
  };
  %79() /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64]) */
}

def @func_4931() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) {
  @func_4929() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) */
}

def @func_1455(%var_1453: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(13, 11, 2), uint8], Tensor[(286), uint8], Tensor[(432), float32], Tensor[(12, 4, 6), uint16], Tensor[(288), int64]) {
  @func_1452(%var_1453) /* ty=(Tensor[(12, ?, 6), float64], Tensor[(13, 11, 2), uint8], Tensor[(286), uint8], Tensor[(432), float32], Tensor[(12, 4, 6), uint16], Tensor[(288), int64]) */
}

def @func_4607(%var_4554: Tensor[(8, 3, 14), uint16], %var_4555: Tensor[(8, 3, 14), uint16]) -> (Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) {
  %80 = cast(%var_4555, dtype="uint16") /* ty=Tensor[(8, 3, 14), uint16] */;
  %81 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_4554, dtype="uint16") /* ty=Tensor[(8, 3, 14), uint16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %84 = subtract(%82, %83) /* ty=Tensor[(8, 3, 14), uint16] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(144, 2), int64] */, dtype="int64") /* ty=Tensor[(144, 2), int64] */;
  %87 = reshape(%86, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %88 = @func_1107(%87) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %92 = reshape(%91, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), int64] */;
  %93 = cast(%var_4555, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %94 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%var_4554, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %97 = acos(%85) /* ty=Tensor[(8, 3, 14), float32] */;
  %98 = cos(%90) /* ty=Tensor[(12, 4, 6), float64] */;
  %99 = @func_2647(%92) /* ty=Tensor[(15, 14, 11), bool] */;
  %100 = floor_mod(%95, %96) /* ty=Tensor[(8, 3, 14), float32] */;
  %101 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  (meta[relay.Constant][6] /* ty=Tensor[(144, 2), int64] */, %97, %98, %99, meta[relay.Constant][7] /* ty=Tensor[(2310), int64] */, %100, %101)
}

def @func_1015(%var_966: Tensor[(2310), float64], %var_1011: Tensor[(286), uint8]) -> (Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) {
  %102 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
  %103 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %106 = sigmoid(%105) /* ty=Tensor[(12, ?, 6), float32] */;
  %107 = cast(%104, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %111 = power(%109, %110) /* ty=Tensor[(12, ?, 6), float32] */;
  %112 = cast(%106, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %116 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %117 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %118 = %117.3;
  %119 = cast(%var_966, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
  %121 = cast(%118, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), float32] */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %124 = reshape(%123, newshape=[12, 2, 6]) /* ty=Tensor[(12, 2, 6), int64] */;
  %125 = @func_513(%124) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) */;
  %126 = cast(%var_1011, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %127 = %102.1;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(432), float32] */;
  %129 = reshape(%126, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %130 = reshape(%128, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %131 = @func_159(%129, %130) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %132 = mod(%114, %115) /* ty=Tensor[(12, ?, 6), float64] */;
  %133 = %116.0;
  %134 = minimum(%121, %122) /* ty=Tensor[(2310), float32] */;
  %135 = %125.0;
  %136 = %131.1;
  (%127, %132, %133, %134, %135, meta[relay.Constant][8] /* ty=Tensor[(144), int64] */, %136, %var_1011)
}

def @func_5373() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  %137 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %138 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %139 = %137.0;
  %140 = %138.1;
  (%139, %140)
}

def @func_3037(%var_3032: Tensor[(936), float64]) -> (Tensor[(8, 11, 9), float64], Tensor[(2310), float64], Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 9), float64] */;
  %142 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %143 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %144 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %145 = cast(%var_3032, dtype="float64") /* ty=Tensor[(936), float64] */;
  %146 = reshape(%145, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %147 = @func_2561(%146) /* ty=(Tensor[(13, 12, 6), float64],) */;
  %148 = atan(%141) /* ty=Tensor[(8, 11, 9), float64] */;
  %149 = %142.3;
  %150 = %143.0;
  %151 = %144.1;
  %152 = %147.0;
  (%148, %149, %150, %151, %152, %var_3032)
}

def @func_5203() -> Tensor[(432), float32] {
  %154 = fn () -> Tensor[(432), float32] {
    %153 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %153.4
  };
  %154() /* ty=Tensor[(432), float32] */
}

def @func_4356(%var_4353: Tensor[(12, 16, 6), float64], %var_4354: Tensor[(2310), float64], %var_4355: Tensor[(2, 216), float32]) -> (Tensor[(12, 16, 6), uint16], Tensor[(12, 16, 6), bool], Tensor[(2310), float64], Tensor[(2310), float64], Tensor[(2, 216), float32]) {
  @func_4351(%var_4353, %var_4354, %var_4355) /* ty=(Tensor[(12, 16, 6), uint16], Tensor[(12, 16, 6), bool], Tensor[(2310), float64], Tensor[(2310), float64], Tensor[(2, 216), float32]) */
}

def @func_299() -> (Tensor[(12, ?, 6), int64],) {
  %156 = fn () -> (Tensor[(12, ?, 6), int64],) {
    %155 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_4474() -> (Tensor[(12, ?, 6), int64],) {
  %157 = @func_2104() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) */;
  %158 = %157.0;
  (%158,)
}

def @func_5004(%var_4935: Tensor[(13, 11, 14), int8], %var_4939: Tensor[(13, 11, 14), int8], %var_4988: Tensor[(13, 11, 14), bool]) -> (Tensor[(13, 1, 12), float64], Tensor[(1, 156), float64], Tensor[(13, 11, 14), bool], Tensor[(13, 11, 14), float64], Tensor[(15, 14, 11), int64], Tensor[(13, 11, 14), float64]) {
  %159 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 156), float64] */, dtype="float64") /* ty=Tensor[(1, 156), float64] */;
  %160 = reshape(%159, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float64] */;
  %161 = @func_3066(%160) /* ty=(Tensor[(13, 1, 12), float64],) */;
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 11, 14), int8] */, dtype="int8") /* ty=Tensor[(1, 11, 14), int8] */;
  %163 = cast(%var_4935, dtype="int8") /* ty=Tensor[(13, 11, 14), int8] */;
  %164 = left_shift(%162, %163) /* ty=Tensor[(13, 11, 14), int8] */;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %166 = cos(%165) /* ty=Tensor[(13, 11, 14), float32] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %168 = acosh(%167) /* ty=Tensor[(13, 11, 14), float64] */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(%var_4939, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %174 = shape_of(%var_4935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_4935, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = not_equal(%175, %176) /* ty=Tensor[(13, 11, 14), bool] */;
  %178 = cast(%var_4988, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = @func_2333() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %183 = cast(%168, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %184 = %161.0;
  %185 = logical_or(%171, %172) /* ty=Tensor[(13, 11, 14), bool] */;
  %186 = floor_divide(%180, %181) /* ty=Tensor[(13, 11, 14), float64] */;
  %187 = %182.0;
  %188 = erf(%183) /* ty=Tensor[(13, 11, 14), float64] */;
  (%184, meta[relay.Constant][10] /* ty=Tensor[(1, 156), float64] */, %185, %186, %187, %188)
}

def @func_2649(%var_2648: Tensor[(15, 14, 11), int64]) -> Tensor[(15, 14, 11), bool] {
  %195 = fn (%var_2642: Tensor[(15, 14, 11), int64]) -> Tensor[(15, 14, 11), bool] {
    %189 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %190 = %189.0;
    %191 = cast(%var_2642, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
    %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%190, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%193, %194) /* ty=Tensor[(15, 14, 11), bool] */
  };
  %195(%var_2648) /* ty=Tensor[(15, 14, 11), bool] */
}

def @func_3753() -> (Tensor[(12, 4, 6), float64],) {
  %196 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %197 = %196.1;
  (%197,)
}

def @func_6067() -> Tensor[(12, ?, 6), float32] {
  %201 = fn () -> Tensor[(12, ?, 6), float32] {
    %198 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %199 = %198.0;
    %200 = cast(%199, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
    atanh(%200) /* ty=Tensor[(12, ?, 6), float32] */
  };
  %201() /* ty=Tensor[(12, ?, 6), float32] */
}

def @func_3639() -> (Tensor[(12, 4, 6), float32],) {
  %204 = fn () -> (Tensor[(12, 4, 6), float32],) {
    %202 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(12, 4, 6), float32],) */
}

def @func_5880() -> Tensor[(15, 14, 11), float64] {
  @func_5878() /* ty=Tensor[(15, 14, 11), float64] */
}

def @func_163(%var_161: Tensor[(13, 11, 2), uint8], %var_162: Tensor[(1, 432), float32]) -> (Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) {
  @func_159(%var_161, %var_162) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */
}

def @func_5474() -> (Tensor[(2310), float32], Tensor[(13, 1, 12), float64], Tensor[(156, 1), float64]) {
  %211 = fn () -> (Tensor[(2310), float32], Tensor[(13, 1, 12), float64], Tensor[(156, 1), float64]) {
    %205 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
    %206 = cast(meta[relay.Constant][13] /* ty=Tensor[(156, 1), float64] */, dtype="float64") /* ty=Tensor[(156, 1), float64] */;
    %207 = reshape(%206, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float64] */;
    %208 = @func_3066(%207) /* ty=(Tensor[(13, 1, 12), float64],) */;
    %209 = %205.0;
    %210 = %208.0;
    (%209, %210, meta[relay.Constant][13] /* ty=Tensor[(156, 1), float64] */)
  };
  %211() /* ty=(Tensor[(2310), float32], Tensor[(13, 1, 12), float64], Tensor[(156, 1), float64]) */
}

def @func_5808(%var_5787: Tensor[(12, 10, 5), int8], %var_5788: Tensor[(12, 10, 5), int8]) -> Tensor[(12, 10, 5), int8] {
  %212 = cast(%var_5788, dtype="int8") /* ty=Tensor[(12, 10, 5), int8] */;
  %213 = shape_of(%var_5787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_5787, dtype="int8") /* ty=Tensor[(12, 10, 5), int8] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%214, %215) /* ty=Tensor[(12, 10, 5), int8] */
}

def @func_2024() -> (Tensor[(15, 14, 11), int64],) {
  @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */
}

def @func_3514() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) {
  %216 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %217 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %218 = %216.0;
  (%217, %218)
}

def @func_1293() -> (Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) {
  %225 = fn () -> (Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) {
    %219 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %220 = %219.1;
    %221 = cast(%220, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
    %222 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
    %223 = asinh(%221) /* ty=Tensor[(12, ?, 6), float64] */;
    %224 = %222.0;
    (%223, %224)
  };
  %225() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */
}

def @func_1685() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) {
  %232 = fn () -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) {
    %226 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %227 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %228 = %227.0;
    %229 = cast(%228, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
    %230 = %226.2;
    %231 = cos(%229) /* ty=Tensor[(12, ?, 6), float64] */;
    (%230, %231)
  };
  %232() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */
}

def @func_4134() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  %233 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %234 = @func_2840() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %235 = %233.2;
  %236 = %234.0;
  (%235, %236)
}

def @func_5459() -> (Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) {
  %237 = @func_5322() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %239 = reshape(%238, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %240 = @func_4815(%239) /* ty=(Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) */;
  %241 = cast(meta[relay.Constant][14] /* ty=Tensor[(968), int32] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %242 = %237.0;
  %243 = %240.0;
  %244 = atanh(%241) /* ty=Tensor[(968), float64] */;
  (%242, %243, %244)
}

def @func_3849(%var_3848: Tensor[(12, 4, 6), float32]) -> Tensor[(12, 4, 6), bool] {
  %251 = fn (%var_3841: Tensor[(12, 4, 6), float32]) -> Tensor[(12, 4, 6), bool] {
    %245 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %246 = %245.1;
    %247 = cast(%var_3841, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
    %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%246, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%249, %250) /* ty=Tensor[(12, 4, 6), bool] */
  };
  %251(%var_3848) /* ty=Tensor[(12, 4, 6), bool] */
}

def @func_5421(%var_5403: Tensor[(560), uint32]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), uint16], Tensor[(560), uint32], Tensor[(12, 11, 6), float64]) {
  %252 = cast(%var_5403, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %253 = reshape(%252, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %254 = @func_2800(%253) /* ty=(uint32, Tensor[(560), uint32], Tensor[(15, 14, 11), uint16], Tensor[(15, 14, 11), int64]) */;
  %255 = @func_3403() /* ty=Tensor[(12, ?, 6), float64] */;
  %256 = cast(%255, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %257 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 6), bool] */;
  %258 = less_equal(%256, %257) /* ty=Tensor[(12, 11, 6), bool] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %260 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %263 = @func_5202() /* ty=Tensor[(432), float32] */;
  %264 = %254.2;
  %265 = floor_divide(%261, %262) /* ty=Tensor[(12, 11, 6), float64] */;
  (%263, %264, %var_5403, %265)
}

def @func_5591(%var_5537: Tensor[(432), int64], %var_5568: Tensor[(864), int64]) -> (Tensor[(432), uint16], Tensor[(12, 12, 6), float32], Tensor[(864), int64], Tensor[(432), int64]) {
  %266 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %267 = %266.1;
  %268 = cast(%var_5537, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(1), int32] */;
  %270 = cast(%267, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %272 = cast(%var_5568, dtype="int64") /* ty=Tensor[(864), int64] */;
  %273 = reshape(%272, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), int64] */;
  %274 = @func_5373() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %275 = minimum(%270, %271) /* ty=Tensor[(432), uint16] */;
  %276 = @func_4901(%273) /* ty=Tensor[(12, 12, 6), float32] */;
  %277 = %274.1;
  (%275, %276, %var_5568, %277)
}

def @func_2999(%var_2987: Tensor[(4, 108), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(2310), float64], Tensor[(4, 108), float32], Tensor[(12, ?, 6), int64]) {
  %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %279 = cast(%var_2987, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %280 = reshape(%278, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %281 = reshape(%279, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %282 = @func_610(%280, %281) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %283 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  %284 = %282.0;
  %285 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%283, %284, meta[relay.Constant][16] /* ty=Tensor[(2310), float64] */, %var_2987, %285)
}

def @func_5812(%var_5810: Tensor[(12, 10, 5), int8], %var_5811: Tensor[(12, 10, 5), int8]) -> Tensor[(12, 10, 5), int8] {
  @func_5808(%var_5810, %var_5811) /* ty=Tensor[(12, 10, 5), int8] */
}

def @func_3676(%var_3675: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) {
  %294 = fn (%var_3651: Tensor[(12, 9, 13), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) {
    %286 = cast(%var_3651, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %287 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(12, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %290 = greater(%288, %289) /* ty=Tensor[(12, 9, 13), bool] */;
    %291 = cast(%290, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    %292 = sin(%291) /* ty=Tensor[(12, 9, 13), float64] */;
    %293 = @func_3447() /* ty=Tensor[(12, ?, 6), int64] */;
    (%292, %293)
  };
  %294(%var_3675) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) */
}

def @func_4901(%var_4882: Tensor[(12, 12, 6), int64]) -> Tensor[(12, 12, 6), float32] {
  %295 = @func_3704() /* ty=Tensor[(12, 12, 6), int64] */;
  %296 = cast(%var_4882, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%298, %299) /* ty=Tensor[(12, 12, 6), float32] */
}

def @func_4383() -> (Tensor[(12, 4, 6), float32],) {
  %300 = @func_3638() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %301 = %300.0;
  (%301,)
}

def @func_2299(%var_2296: Tensor[(1, 2, 5), uint32], %var_2297: Tensor[(9, 2, 5), uint32], %var_2298: Tensor[(432), float32]) -> (Tensor[(9, 2, 5), bool], Tensor[(13, 11, 2), uint8], Tensor[(1, 286), uint8], Tensor[(432), float32]) {
  @func_2294(%var_2296, %var_2297, %var_2298) /* ty=(Tensor[(9, 2, 5), bool], Tensor[(13, 11, 2), uint8], Tensor[(1, 286), uint8], Tensor[(432), float32]) */
}

def @func_3516() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) {
  @func_3514() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32]) */
}

def @func_4233(%var_4204: Tensor[(7, 16, 3), float32], %var_4208: Tensor[(7, 16, 3), float32]) -> (Tensor[(7, 16, 3), float64],) {
  %302 = cast(%var_4204, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
  %303 = tan(%302) /* ty=Tensor[(7, 16, 3), float32] */;
  %304 = cast(%var_4208, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %308 = floor_mod(%306, %307) /* ty=Tensor[(7, 16, 3), float64] */;
  (%308,)
}

def @func_3265() -> (Tensor[(2310), float64],) {
  @func_3263() /* ty=(Tensor[(2310), float64],) */
}

def @func_5193(%var_5192: Tensor[(432), float32]) -> (Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) {
  %327 = fn (%var_5163: Tensor[(432), float32]) -> (Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) {
    %309 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
    %310 = @func_3410() /* ty=(Tensor[(2310), float32],) */;
    %311 = %310.0;
    %312 = cast(%311, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %313 = @func_2940() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) */;
    %314 = cast(%311, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %315 = cast(%var_5163, dtype="float32") /* ty=Tensor[(432), float32] */;
    %316 = reshape(%314, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %317 = reshape(%315, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %318 = @func_276(%316, %317) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %320 = reshape(%319, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
    %321 = @func_3674(%320) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, ?, 6), int64]) */;
    %322 = %309.0;
    %323 = rsqrt(%312) /* ty=Tensor[(2310), float64] */;
    %324 = %313.1;
    %325 = %318.0;
    %326 = %321.1;
    (%322, %323, %324, %325, %var_5163, %326, meta[relay.Constant][18] /* ty=Tensor[(1404), float32] */)
  };
  %327(%var_5192) /* ty=(Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) */
}

def @func_4136() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */
}

def @func_775() -> (Tensor[(12, 4, 6), float32],) {
  %328 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
  %330 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 4, 6), int64] */, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
  %331 = floor_mod(%329, %330) /* ty=Tensor[(12, 4, 6), float32] */;
  (%331,)
}

def @func_3410() -> (Tensor[(2310), float32],) {
  %332 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
  %333 = %332.2;
  (%333,)
}

def @func_4720(%var_4702: Tensor[(8, 3, 9), float64]) -> (Tensor[(8, 3, 9), float64],) {
  %334 = cast(%var_4702, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %335 = sinh(%334) /* ty=Tensor[(8, 3, 9), float64] */;
  (%335,)
}

def @func_5703() -> (Tensor[(12, ?, 6), int64],) {
  %336 = @func_2616() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) */;
  %337 = %336.1;
  (%337,)
}

def @func_1043() -> Tensor[(12, ?, 6), int64] {
  @func_1041() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_177() -> Tensor[(12, ?, 6), int64] {
  %344 = fn () -> Tensor[(12, ?, 6), int64] {
    %338 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
    %339 = sinh(%338) /* ty=Tensor[(12, 1, 6), float32] */;
    %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 1, 6), float32] */, dtype="int64") /* ty=Tensor[(12, 1, 6), int64] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="int64") /* ty=Tensor[(12, 1, 6), int64] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%342, %343) /* ty=Tensor[(12, ?, 6), int64] */
  };
  %344() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_5878() -> Tensor[(15, 14, 11), float64] {
  %345 = @func_4929() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  asinh(%347) /* ty=Tensor[(15, 14, 11), float64] */
}

def @func_2314() -> (Tensor[(12, ?, 6), int64],) {
  %348 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%348,)
}

def @func_2335() -> (Tensor[(15, 14, 11), int64],) {
  @func_2333() /* ty=(Tensor[(15, 14, 11), int64],) */
}

def @func_2941() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) {
  %357 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) {
    %349 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %350 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
    %351 = %350.0;
    %352 = cast(%351, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
    %353 = log10(%352) /* ty=Tensor[(12, 4, 6), float64] */;
    %354 = cast(%353, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
    %355 = %349.0;
    %356 = acosh(%354) /* ty=Tensor[(12, 4, 6), float64] */;
    (%355, %356)
  };
  %357() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64]) */
}

def @func_1107(%var_1081: Tensor[(12, 4, 6), int64]) -> (Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) {
  %358 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %359 = %358.0;
  %360 = cast(%var_1081, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %361 = cast(%359, dtype="uint16") /* ty=Tensor[(12, ?, 6), uint16] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %363 = cast(%var_1081, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %364 = not_equal(%362, %363) /* ty=Tensor[(12, 4, 6), bool] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
  %366 = left_shift(%360, %361) /* ty=Tensor[(12, 4, 6), uint16] */;
  %367 = exp(%365) /* ty=Tensor[(12, 4, 6), float32] */;
  (%366, %367)
}

def @func_1546(%var_1544: Tensor[(2310), float64]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) {
  @func_1543(%var_1544) /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) */
}

def @func_4611(%var_4609: Tensor[(8, 3, 14), uint16], %var_4610: Tensor[(8, 3, 14), uint16]) -> (Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) {
  @func_4607(%var_4609, %var_4610) /* ty=(Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) */
}

def @func_3356() -> Tensor[(12, ?, 6), int64] {
  %369 = fn () -> Tensor[(12, ?, 6), int64] {
    %368 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
    %368.2
  };
  %369() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_3755() -> (Tensor[(12, 4, 6), float64],) {
  @func_3753() /* ty=(Tensor[(12, 4, 6), float64],) */
}

def @func_2316() -> (Tensor[(12, ?, 6), int64],) {
  @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_1452(%var_1430: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), float64], Tensor[(13, 11, 2), uint8], Tensor[(286), uint8], Tensor[(432), float32], Tensor[(12, 4, 6), uint16], Tensor[(288), int64]) {
  %370 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(286), uint8] */, dtype="uint8") /* ty=Tensor[(286), uint8] */;
  %372 = cast(%var_1430, dtype="float32") /* ty=Tensor[(432), float32] */;
  %373 = reshape(%371, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %374 = reshape(%372, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %375 = @func_159(%373, %374) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), int64] */, dtype="int64") /* ty=Tensor[(288), int64] */;
  %377 = reshape(%376, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
  %378 = @func_1107(%377) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
  %379 = %370.0;
  %380 = %375.0;
  %381 = %378.0;
  (%379, %380, meta[relay.Constant][21] /* ty=Tensor[(286), uint8] */, %var_1430, %381, meta[relay.Constant][22] /* ty=Tensor[(288), int64] */)
}

def @func_3404() -> Tensor[(12, ?, 6), float64] {
  %385 = fn () -> Tensor[(12, ?, 6), float64] {
    %382 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %383 = %382.0;
    %384 = cast(%383, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
    erf(%384) /* ty=Tensor[(12, ?, 6), float64] */
  };
  %385() /* ty=Tensor[(12, ?, 6), float64] */
}

def @func_3141(%var_3120: Tensor[(15, 14, 11), int64]) -> (Tensor[(15, 14, 11), float32], Tensor[(286), uint8], Tensor[(26, 11), uint8]) {
  %386 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %387 = %386.2;
  %388 = cast(%var_3120, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = cast(%var_3120, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %393 = cast(meta[relay.Constant][23] /* ty=Tensor[(26, 11), uint8] */, dtype="uint8") /* ty=Tensor[(26, 11), uint8] */;
  %394 = reshape(%392, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %395 = reshape(%393, newshape=[286]) /* ty=Tensor[(286), uint8] */;
  %396 = @func_1015(%394, %395) /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) */;
  %397 = floor_divide(%390, %391) /* ty=Tensor[(15, 14, 11), float32] */;
  %398 = %396.7;
  (%397, %398, meta[relay.Constant][23] /* ty=Tensor[(26, 11), uint8] */)
}

def @func_1393() -> (Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) {
  %413 = fn () -> (Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) {
    %399 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
    %400 = cast(%399, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
    %401 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 4, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
    %402 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 4, 6), int64] */, dtype="float32") /* ty=Tensor[(12, 4, 6), float32] */;
    %403 = erf(%402) /* ty=Tensor[(12, 4, 6), float32] */;
    %404 = cast(%403, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
    %405 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %406 = asinh(%404) /* ty=Tensor[(12, 4, 6), float64] */;
    %407 = cast(%406, dtype="int64") /* ty=Tensor[(12, 4, 6), int64] */;
    %408 = reshape(%407, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
    %409 = @func_1107(%408) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
    %410 = logical_or(%400, %401) /* ty=Tensor[(12, 4, 6), bool] */;
    %411 = %405.0;
    %412 = %409.0;
    (%410, %406, %411, %412)
  };
  %413() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */
}

def @func_4385() -> (Tensor[(12, 4, 6), float32],) {
  @func_4383() /* ty=(Tensor[(12, 4, 6), float32],) */
}

def @func_279(%var_277: Tensor[(15, 14, 11), float64], %var_278: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) {
  %435 = fn (%var_234: Tensor[(15, 14, 11), float64], %var_250: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) {
    %414 = cast(%var_250, dtype="float32") /* ty=Tensor[(432), float32] */;
    %415 = reshape(%414, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
    %416 = @func_57(%415) /* ty=Tensor[(9, 16, 3), float64] */;
    %417 = cast(%416, dtype="int64") /* ty=Tensor[(9, 16, 3), int64] */;
    %418 = shape_of(%var_250, dtype="int32") /* ty=Tensor[(1), int32] */;
    %419 = cast(%var_250, dtype="int64") /* ty=Tensor[(432), int64] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?), int64] */;
    %421 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 14, 11), float64] */, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
    %422 = cos(%421) /* ty=Tensor[(15, 14, 11), float32] */;
    %423 = cast(%var_234, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
    %424 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 14, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %427 = floor_mod(%425, %426) /* ty=Tensor[(15, 14, 11), float64] */;
    %428 = cast(%427, dtype="int64") /* ty=Tensor[(15, 14, 11), int64] */;
    %429 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%422, dtype="int64") /* ty=Tensor[(15, 14, 11), int64] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %432 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    %433 = right_shift(%419, %420) /* ty=Tensor[(432), int64] */;
    %434 = bitwise_or(%430, %431) /* ty=Tensor[(15, 14, 11), int64] */;
    (%432, %433, %434)
  };
  %435(%var_277, %var_278) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */
}

def @func_2841() -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %441 = fn () -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
    %436 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %437 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
    %438 = %436.1;
    %439 = %437.0;
    %440 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    (%438, %439, %440)
  };
  %441() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */
}

def @func_3263() -> (Tensor[(2310), float64],) {
  %442 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %443 = %442.3;
  (%443,)
}

def @func_5783(%var_5782: Tensor[(7, 15, 8), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(7, 15, 8), float64]) {
  %451 = fn (%var_5756: Tensor[(7, 15, 8), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(7, 15, 8), float64]) {
    %444 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
    %445 = shape_of(%var_5756, dtype="int32") /* ty=Tensor[(3), int32] */;
    %446 = cast(%var_5756, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
    %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %448 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="float64") /* ty=Tensor[(7, 15, 8), float64] */;
    %449 = subtract(%446, %447) /* ty=Tensor[(7, 15, 8), uint8] */;
    %450 = cosh(%448) /* ty=Tensor[(7, 15, 8), float64] */;
    (%449, %450)
  };
  %451(%var_5782) /* ty=(Tensor[(7, 15, 8), uint8], Tensor[(7, 15, 8), float64]) */
}

def @func_4042() -> Tensor[(12, ?, 6), int64] {
  @func_4040() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_6033() -> (Tensor[(15, 14, 11), bool], Tensor[(2310), float32], Tensor[(2310), int64], Tensor[(336), uint16], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), int64]) {
  %452 = @func_5459() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %455 = tan(%454) /* ty=Tensor[(15, 14, 11), float32] */;
  %456 = cast(%453, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = @func_4774() /* ty=(Tensor[(2310), float32],) */;
  %461 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %462 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %463 = reshape(%461, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %464 = reshape(%462, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
  %465 = @func_4607(%463, %464) /* ty=(Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) */;
  %466 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %467 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
  %468 = logical_and(%458, %459) /* ty=Tensor[(15, 14, 11), bool] */;
  %469 = %460.0;
  %470 = %465.4;
  %471 = %466.0;
  %472 = %467.0;
  %473 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  (%468, %469, %470, meta[relay.Constant][27] /* ty=Tensor[(336), uint16] */, %471, %472, %473)
}

def @func_3704() -> Tensor[(12, 12, 6), int64] {
  %474 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
  %475 = cast(%474, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
  %476 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 12, 6), int64] */, dtype="int64") /* ty=Tensor[(12, 12, 6), int64] */;
  left_shift(%475, %476) /* ty=Tensor[(12, 12, 6), int64] */
}

def @func_3412() -> (Tensor[(2310), float32],) {
  @func_3410() /* ty=(Tensor[(2310), float32],) */
}

def @func_777() -> (Tensor[(12, 4, 6), float32],) {
  @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */
}

def @func_1887(%var_1885: Tensor[(9, 5, 2), float64]) -> (Tensor[(9, 5, 2), float64], Tensor[(9, 5, 2), float32]) {
  @func_1884(%var_1885) /* ty=(Tensor[(9, 5, 2), float64], Tensor[(9, 5, 2), float32]) */
}

def @func_1884(%var_1872: Tensor[(9, 5, 2), float64]) -> (Tensor[(9, 5, 2), float64], Tensor[(9, 5, 2), float32]) {
  %477 = cast(%var_1872, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
  %478 = cast(%var_1872, dtype="float32") /* ty=Tensor[(9, 5, 2), float32] */;
  %479 = exp(%477) /* ty=Tensor[(9, 5, 2), float64] */;
  %480 = atan(%478) /* ty=Tensor[(9, 5, 2), float32] */;
  (%479, %480)
}

def @func_1264(%var_1261: Tensor[(12, 4, 6), float32], %var_1262: Tensor[(432), float32], %var_1263: Tensor[(770, 3), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) {
  @func_1259(%var_1261, %var_1262, %var_1263) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) */
}

def @func_3625() -> Tensor[(12, 4, 6), float32] {
  %482 = fn () -> Tensor[(12, 4, 6), float32] {
    %481 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %481.1
  };
  %482() /* ty=Tensor[(12, 4, 6), float32] */
}

def @func_2749(%var_2748: Tensor[(286), uint8]) -> (Tensor[(432), float32], Tensor[(12, 2, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(12, ?, 6), int64]) {
  %503 = fn (%var_2728: Tensor[(286), uint8]) -> (Tensor[(432), float32], Tensor[(12, 2, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(12, ?, 6), int64]) {
    %483 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %484 = cast(meta[relay.Constant][29] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %485 = reshape(%484, newshape=[12, 2, 6]) /* ty=Tensor[(12, 2, 6), int64] */;
    %486 = @func_513(%485) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) */;
    %487 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(286), uint8] */;
    %488 = %483.2;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(432), float32] */;
    %490 = reshape(%487, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
    %491 = reshape(%489, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
    %492 = @func_159(%490, %491) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
    %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %494 = %492.1;
    %495 = cast(%494, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
    %496 = reshape(%493, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %497 = reshape(%495, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %498 = @func_276(%496, %497) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %499 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %500 = %486.1;
    %501 = %498.2;
    %502 = %499.0;
    (%488, %500, meta[relay.Constant][29] /* ty=Tensor[(144), int64] */, %494, %var_2728, %501, meta[relay.Constant][30] /* ty=Tensor[(2310), float64] */, %502)
  };
  %503(%var_2748) /* ty=(Tensor[(432), float32], Tensor[(12, 2, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(12, ?, 6), int64]) */
}

def @func_4775() -> (Tensor[(2310), float32],) {
  %506 = fn () -> (Tensor[(2310), float32],) {
    %504 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %505 = %504.0;
    (%505,)
  };
  %506() /* ty=(Tensor[(2310), float32],) */
}

def @func_3144(%var_3142: Tensor[(15, 14, 11), int64]) -> (Tensor[(15, 14, 11), float32], Tensor[(286), uint8], Tensor[(26, 11), uint8]) {
  @func_3141(%var_3142) /* ty=(Tensor[(15, 14, 11), float32], Tensor[(286), uint8], Tensor[(26, 11), uint8]) */
}

def @func_5705() -> (Tensor[(12, ?, 6), int64],) {
  @func_5703() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_5943() -> (Tensor[(432), int64],) {
  %509 = fn () -> (Tensor[(432), int64],) {
    %507 = @func_4134() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
    %508 = %507.1;
    (%508,)
  };
  %509() /* ty=(Tensor[(432), int64],) */
}

def @func_747() -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %520 = fn () -> (Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
    %510 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %511 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
    %512 = %511.0;
    %513 = cast(%512, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
    %514 = %510.1;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(432), float32] */;
    %516 = reshape(%513, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %517 = reshape(%515, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %518 = @func_276(%516, %517) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %519 = %518.0;
    (%514, %512, %519)
  };
  %520() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */
}

def @func_4040() -> Tensor[(12, ?, 6), int64] {
  %521 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %521.2
}

def @func_1494(%var_1492: uint32, %var_1493: Tensor[(560), uint32]) -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) {
  %539 = fn (%var_1484: uint32, %var_1485: Tensor[(560), uint32]) -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) {
    %522 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %523 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 12), float32] */, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
    %524 = cast(meta[relay.Constant][32] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %525 = %522.2;
    %526 = cast(%525, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
    %527 = reshape(%523, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), float32] */;
    %528 = reshape(%524, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %529 = reshape(%526, newshape=[770, 3]) /* ty=Tensor[(770, 3), float64] */;
    %530 = @func_1259(%527, %528, %529) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) */;
    %531 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
    %532 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
    %533 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(560), uint32] */;
    %534 = reshape(%532, newshape=[]) /* ty=uint32 */;
    %535 = reshape(%533, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), uint32] */;
    %536 = %530.0;
    %537 = %531.0;
    %538 = @func_657(%534, %535) /* ty=Tensor[(4, 10, 14), bool] */;
    (%525, %536, meta[relay.Constant][31] /* ty=Tensor[(24, 12), float32] */, meta[relay.Constant][32] /* ty=Tensor[(432), float32] */, %537, %538, %var_1484, %var_1485)
  };
  %539(%var_1492, %var_1493) /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(24, 12), float32], Tensor[(432), float32], Tensor[(432), int64], Tensor[(4, 10, 14), bool], uint32, Tensor[(560), uint32]) */
}

def @func_3447() -> Tensor[(12, ?, 6), int64] {
  @func_1041() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_1834() -> (Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) {
  %544 = fn () -> (Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) {
    %540 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
    %541 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
    %542 = %540.0;
    %543 = %541.1;
    (%542, %543)
  };
  %544() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */
}

def @func_4169(%var_4167: Tensor[(16, 6, 12), uint8], %var_4168: Tensor[(16, 6, 12), uint8]) -> Tensor[(16, 6, 12), uint8] {
  %549 = fn (%var_4147: Tensor[(16, 6, 12), uint8], %var_4148: Tensor[(16, 6, 12), uint8]) -> Tensor[(16, 6, 12), uint8] {
    %545 = cast(%var_4148, dtype="uint8") /* ty=Tensor[(16, 6, 12), uint8] */;
    %546 = shape_of(%var_4147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_4147, dtype="uint8") /* ty=Tensor[(16, 6, 12), uint8] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%547, %548) /* ty=Tensor[(16, 6, 12), uint8] */
  };
  %549(%var_4167, %var_4168) /* ty=Tensor[(16, 6, 12), uint8] */
}

def @func_5925() -> (Tensor[(432), int64], Tensor[(12, ?, 6), int64]) {
  %550 = @func_5373() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */;
  %551 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %552 = %550.1;
  %553 = %551.0;
  (%552, %553)
}

def @func_225() -> Tensor[(12, ?, 6), int64] {
  @func_223() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_4681() -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
  %554 = @func_457() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %555 = @func_2380() /* ty=(Tensor[(2310), float32],) */;
  %556 = %555.0;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %558 = %554.0;
  %559 = sigmoid(%557) /* ty=Tensor[(2310), float32] */;
  (%558, %559)
}

def @func_4237(%var_4235: Tensor[(7, 16, 3), float32], %var_4236: Tensor[(7, 16, 3), float32]) -> (Tensor[(7, 16, 3), float64],) {
  @func_4233(%var_4235, %var_4236) /* ty=(Tensor[(7, 16, 3), float64],) */
}

def @func_5520() -> (Tensor[(12, ?, 6), int64], Tensor[(8, 11, 11), int32]) {
  %564 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(8, 11, 11), int32]) {
    %560 = @func_5047() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %561 = @func_5459() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) */;
    %562 = %560.0;
    %563 = %561.1;
    (%562, %563)
  };
  %564() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(8, 11, 11), int32]) */
}

def @func_2076() -> (Tensor[(15, 14, 11), int64],) {
  %565 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
  %566 = %565.1;
  (%566,)
}

def @func_4351(%var_4320: Tensor[(12, 16, 6), float64], %var_4347: Tensor[(2310), float64], %var_4348: Tensor[(2, 216), float32]) -> (Tensor[(12, 16, 6), uint16], Tensor[(12, 16, 6), bool], Tensor[(2310), float64], Tensor[(2310), float64], Tensor[(2, 216), float32]) {
  %567 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %568 = %567.1;
  %569 = cast(%568, dtype="uint16") /* ty=Tensor[(12, ?, 6), uint16] */;
  %570 = cast(%var_4320, dtype="uint16") /* ty=Tensor[(12, 16, 6), uint16] */;
  %571 = cast(%var_4320, dtype="bool") /* ty=Tensor[(12, 16, 6), bool] */;
  %572 = cast(%568, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %573 = cast(%var_4347, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %574 = cast(%var_4348, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %575 = reshape(%573, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %576 = reshape(%574, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %577 = @func_610(%575, %576) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %578 = minimum(%569, %570) /* ty=Tensor[(12, 16, 6), uint16] */;
  %579 = not_equal(%571, %572) /* ty=Tensor[(12, 16, 6), bool] */;
  %580 = %577.2;
  (%578, %579, %580, %var_4347, %var_4348)
}

def @func_3176() -> Tensor[(15, 14, 11), int64] {
  @func_3174() /* ty=Tensor[(15, 14, 11), int64] */
}

def @func_538() -> (Tensor[(12, ?, 6), int64],) {
  %582 = fn () -> (Tensor[(12, ?, 6), int64],) {
    %581 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
    (%581,)
  };
  %582() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_5595(%var_5593: Tensor[(432), int64], %var_5594: Tensor[(864), int64]) -> (Tensor[(432), uint16], Tensor[(12, 12, 6), float32], Tensor[(864), int64], Tensor[(432), int64]) {
  @func_5591(%var_5593, %var_5594) /* ty=(Tensor[(432), uint16], Tensor[(12, 12, 6), float32], Tensor[(864), int64], Tensor[(432), int64]) */
}

def @func_3002(%var_3000: Tensor[(4, 108), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(2310), float64], Tensor[(4, 108), float32], Tensor[(12, ?, 6), int64]) {
  @func_2999(%var_3000) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(2310), float64], Tensor[(4, 108), float32], Tensor[(12, ?, 6), int64]) */
}

def @func_2078() -> (Tensor[(15, 14, 11), int64],) {
  @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */
}

def @func_515(%var_514: Tensor[(12, 2, 6), int64]) -> (Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) {
  %592 = fn (%var_508: Tensor[(12, 2, 6), int64]) -> (Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) {
    %583 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    %584 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 1, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
    %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%583, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %588 = cast(%583, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
    %589 = cast(%var_508, dtype="bool") /* ty=Tensor[(12, 2, 6), bool] */;
    %590 = less(%586, %587) /* ty=Tensor[(12, ?, 6), bool] */;
    %591 = less_equal(%588, %589) /* ty=Tensor[(12, 2, 6), bool] */;
    (%590, %591)
  };
  %592(%var_514) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, 2, 6), bool]) */
}

def @func_4904(%var_4902: Tensor[(12, 12, 6), int64]) -> Tensor[(12, 12, 6), float32] {
  @func_4901(%var_4902) /* ty=Tensor[(12, 12, 6), float32] */
}

def @func_5840() -> (Tensor[(15, 14, 11), int64],) {
  @func_5838() /* ty=(Tensor[(15, 14, 11), int64],) */
}

def @func_5323() -> (Tensor[(15, 14, 11), int64],) {
  %595 = fn () -> (Tensor[(15, 14, 11), int64],) {
    %593 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
    %594 = %593.0;
    (%594,)
  };
  %595() /* ty=(Tensor[(15, 14, 11), int64],) */
}

def @func_2616() -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) {
  %596 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %597 = %596.0;
  %598 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %601 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%597, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = cast(meta[relay.Constant][34] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
  %605 = reshape(%604, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
  %606 = @func_2009(%605) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
  %607 = greater(%602, %603) /* ty=Tensor[(12, ?, 6), bool] */;
  %608 = %606.0;
  (%607, %608, meta[relay.Constant][34] /* ty=Tensor[(300), int8] */)
}

def @func_3958(%var_3957: Tensor[(936), float64]) -> (Tensor[(12, 3, 6), int8], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
  %618 = fn (%var_3944: Tensor[(936), float64]) -> (Tensor[(12, 3, 6), int8], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
    %609 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
    %610 = %609.1;
    %611 = cast(%610, dtype="int8") /* ty=Tensor[(12, ?, 6), int8] */;
    %612 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 3, 6), float64] */, dtype="int8") /* ty=Tensor[(12, 3, 6), int8] */;
    %613 = cast(%var_3944, dtype="float64") /* ty=Tensor[(936), float64] */;
    %614 = reshape(%613, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
    %615 = @func_2561(%614) /* ty=(Tensor[(13, 12, 6), float64],) */;
    %616 = logical_xor(%611, %612) /* ty=Tensor[(12, 3, 6), int8] */;
    %617 = %615.0;
    (%616, %617, %var_3944)
  };
  %618(%var_3957) /* ty=(Tensor[(12, 3, 6), int8], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) */
}

def @func_2294(%var_2274: Tensor[(1, 2, 5), uint32], %var_2275: Tensor[(9, 2, 5), uint32], %var_2285: Tensor[(432), float32]) -> (Tensor[(9, 2, 5), bool], Tensor[(13, 11, 2), uint8], Tensor[(1, 286), uint8], Tensor[(432), float32]) {
  %619 = cast(%var_2274, dtype="bool") /* ty=Tensor[(1, 2, 5), bool] */;
  %620 = cast(%var_2275, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
  %621 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 286), uint8] */, dtype="uint8") /* ty=Tensor[(1, 286), uint8] */;
  %622 = cast(%var_2285, dtype="float32") /* ty=Tensor[(432), float32] */;
  %623 = reshape(%621, newshape=[13, 11, 2]) /* ty=Tensor[(13, 11, 2), uint8] */;
  %624 = reshape(%622, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %625 = @func_159(%623, %624) /* ty=(Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) */;
  %626 = not_equal(%619, %620) /* ty=Tensor[(9, 2, 5), bool] */;
  %627 = %625.0;
  (%626, %627, meta[relay.Constant][36] /* ty=Tensor[(1, 286), uint8] */, %var_2285)
}

def @func_223() -> Tensor[(12, ?, 6), int64] {
  @func_176() /* ty=Tensor[(12, ?, 6), int64] */
}

def @main() -> Tensor[(300), float32] {
  %628 = @func_3428() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) */;
  %629 = %628.2;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(300), float32] */;
  sqrt(%630) /* ty=Tensor[(300), float32] */
}

def @func_2333() -> (Tensor[(15, 14, 11), int64],) {
  %631 = @func_2076() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_2158() -> (Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) {
  %646 = fn () -> (Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) {
    %633 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %634 = %633.0;
    %635 = cast(%634, dtype="int8") /* ty=Tensor[(12, ?, 6), int8] */;
    %636 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 6), float64] */, dtype="int8") /* ty=Tensor[(12, 10, 6), int8] */;
    %637 = cast(meta[relay.Constant][38] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %638 = reshape(%637, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
    %639 = @func_1543(%638) /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) */;
    %640 = cast(meta[relay.Constant][38] /* ty=Tensor[(2310), float64] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %641 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %642 = multiply(%635, %636) /* ty=Tensor[(12, 10, 6), int8] */;
    %643 = %639.2;
    %644 = log2(%640) /* ty=Tensor[(2310), float32] */;
    %645 = %641.1;
    (%642, %643, %644, %645)
  };
  %646() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */
}

def @func_5302(%var_5299: Tensor[(12, 12, 6), int64], %var_5300: Tensor[(24, 14), uint16], %var_5301: Tensor[(15, 14, 11), int64]) -> (Tensor[(12, 12, 6), float64], Tensor[(12, 4, 6), float64], Tensor[(24, 14), uint16], Tensor[(15, 14, 11), bool], Tensor[(432), int64], Tensor[(432), float32], Tensor[(2310), float64]) {
  %675 = fn (%var_5244: Tensor[(12, 12, 6), int64], %var_5250: Tensor[(24, 14), uint16], %var_5260: Tensor[(15, 14, 11), int64]) -> (Tensor[(12, 12, 6), float64], Tensor[(12, 4, 6), float64], Tensor[(24, 14), uint16], Tensor[(15, 14, 11), bool], Tensor[(432), int64], Tensor[(432), float32], Tensor[(2310), float64]) {
    %647 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %648 = %647.0;
    %649 = cast(%648, dtype="float64") /* ty=Tensor[(12, ?, 6), float64] */;
    %650 = cast(%var_5244, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
    %651 = cast(%var_5250, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
    %652 = cast(%var_5250, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
    %653 = reshape(%651, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
    %654 = reshape(%652, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), uint16] */;
    %655 = @func_4607(%653, %654) /* ty=(Tensor[(144, 2), int64], Tensor[(8, 3, 14), float32], Tensor[(12, 4, 6), float64], Tensor[(15, 14, 11), bool], Tensor[(2310), int64], Tensor[(8, 3, 14), float32], Tensor[(12, ?, 6), int64]) */;
    %656 = @func_746() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
    %657 = %656.1;
    %658 = cast(%var_5260, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="bool") /* ty=Tensor[(15, 14, 11), bool] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %662 = logical_or(%660, %661) /* ty=Tensor[(15, 14, 11), bool] */;
    %663 = cast(%662, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
    %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %665 = reshape(%663, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %666 = reshape(%664, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %667 = @func_276(%665, %666) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %668 = %667.1;
    %669 = cast(%668, dtype="float32") /* ty=Tensor[(432), float32] */;
    %670 = reshape(%669, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %671 = @func_5191(%670) /* ty=(Tensor[(12, 4, 6), float32], Tensor[(2310), float64], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(12, ?, 6), int64], Tensor[(1404), float32]) */;
    %672 = divide(%649, %650) /* ty=Tensor[(12, 12, 6), float64] */;
    %673 = %655.2;
    %674 = %671.1;
    (%672, %673, %var_5250, %662, %668, meta[relay.Constant][39] /* ty=Tensor[(432), float32] */, %674)
  };
  %675(%var_5299, %var_5300, %var_5301) /* ty=(Tensor[(12, 12, 6), float64], Tensor[(12, 4, 6), float64], Tensor[(24, 14), uint16], Tensor[(15, 14, 11), bool], Tensor[(432), int64], Tensor[(432), float32], Tensor[(2310), float64]) */
}

def @func_4723(%var_4721: Tensor[(8, 3, 9), float64]) -> (Tensor[(8, 3, 9), float64],) {
  @func_4720(%var_4721) /* ty=(Tensor[(8, 3, 9), float64],) */
}

def @func_2472(%var_2470: Tensor[(50, 6), int8]) -> (Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64], Tensor[(150, 2), bool], Tensor[(12, ?, 6), int64]) {
  @func_2469(%var_2470) /* ty=(Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64], Tensor[(150, 2), bool], Tensor[(12, ?, 6), int64]) */
}

def @func_3428() -> (Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) {
  %684 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) {
    %676 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
    %678 = reshape(%677, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
    %679 = @func_2009(%678) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
    %680 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %681 = %676.0;
    %682 = %679.2;
    %683 = %680.1;
    (%681, %682, meta[relay.Constant][40] /* ty=Tensor[(300), int8] */, %683)
  };
  %684() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(150, 2), uint64], Tensor[(300), int8], Tensor[(12, 4, 6), float32]) */
}

def @func_5838() -> (Tensor[(15, 14, 11), int64],) {
  %685 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %686 = %685.0;
  (%686,)
}

def @func_1259(%var_1193: Tensor[(12, 4, 6), float32], %var_1211: Tensor[(432), float32], %var_1221: Tensor[(770, 3), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), float32], Tensor[(770, 3), uint16], Tensor[(12, 4, 6), int16], Tensor[(12, 4, 6), bool]) {
  %687 = cast(meta[relay.Constant][41] /* ty=Tensor[(770, 3), float64] */, dtype="float64") /* ty=Tensor[(770, 3), float64] */;
  %688 = cast(%var_1211, dtype="float32") /* ty=Tensor[(432), float32] */;
  %689 = reshape(%687, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %690 = reshape(%688, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %691 = @func_276(%689, %690) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %692 = cast(%var_1221, dtype="uint16") /* ty=Tensor[(770, 3), uint16] */;
  %693 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(770, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %694 = cast(meta[relay.Constant][41] /* ty=Tensor[(770, 3), float64] */, dtype="uint16") /* ty=Tensor[(770, 3), uint16] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %696 = @func_775() /* ty=(Tensor[(12, 4, 6), float32],) */;
  %697 = %696.0;
  %698 = cast(%var_1193, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="uint16") /* ty=Tensor[(12, 4, 6), uint16] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %702 = bitwise_and(%700, %701) /* ty=Tensor[(12, 4, 6), uint16] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %704 = sqrt(%703) /* ty=Tensor[(12, 4, 6), float64] */;
  %705 = cast(%702, dtype="int16") /* ty=Tensor[(12, 4, 6), int16] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="int16") /* ty=Tensor[(12, 4, 6), int16] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %709 = cast(%704, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %710 = atan(%709) /* ty=Tensor[(12, 4, 6), float64] */;
  %711 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 4, 6), float64] */, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="bool") /* ty=Tensor[(12, 4, 6), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = %691.0;
  %716 = logical_xor(%694, %695) /* ty=Tensor[(770, 3), uint16] */;
  %717 = bitwise_xor(%707, %708) /* ty=Tensor[(12, 4, 6), int16] */;
  %718 = equal(%713, %714) /* ty=Tensor[(12, 4, 6), bool] */;
  (%715, %var_1211, %716, %717, %718)
}

def @func_1019(%var_1017: Tensor[(2310), float64], %var_1018: Tensor[(286), uint8]) -> (Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) {
  @func_1015(%var_1017, %var_1018) /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) */
}

def @func_2564(%var_2562: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), float64],) {
  @func_2561(%var_2562) /* ty=(Tensor[(13, 12, 6), float64],) */
}

def @func_3068(%var_3067: Tensor[(13, 1, 12), float64]) -> (Tensor[(13, 1, 12), float64],) {
  %722 = fn (%var_3060: Tensor[(13, 1, 12), float64]) -> (Tensor[(13, 1, 12), float64],) {
    %719 = cast(-0.716016f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %720 = cast(%var_3060, dtype="float64") /* ty=Tensor[(13, 1, 12), float64] */;
    %721 = mod(%719, %720) /* ty=Tensor[(13, 1, 12), float64] */;
    (%721,)
  };
  %722(%var_3067) /* ty=(Tensor[(13, 1, 12), float64],) */
}

def @func_5424(%var_5422: Tensor[(560), uint32]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), uint16], Tensor[(560), uint32], Tensor[(12, 11, 6), float64]) {
  @func_5421(%var_5422) /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), uint16], Tensor[(560), uint32], Tensor[(12, 11, 6), float64]) */
}

def @func_6035() -> (Tensor[(15, 14, 11), bool], Tensor[(2310), float32], Tensor[(2310), int64], Tensor[(336), uint16], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), int64]) {
  @func_6033() /* ty=(Tensor[(15, 14, 11), bool], Tensor[(2310), float32], Tensor[(2310), int64], Tensor[(336), uint16], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), int64]) */
}

def @func_5375() -> (Tensor[(2310), float32], Tensor[(432), int64]) {
  @func_5373() /* ty=(Tensor[(2310), float32], Tensor[(432), int64]) */
}

def @func_2469(%var_2423: Tensor[(50, 6), int8]) -> (Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float64], Tensor[(150, 2), bool], Tensor[(12, ?, 6), int64]) {
  %723 = @func_1684() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), float64]) */;
  %724 = @func_2022() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %725 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %726 = @func_537() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %727 = @func_1392() /* ty=(Tensor[(12, 4, 6), bool], Tensor[(12, 4, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), uint16]) */;
  %728 = cast(%var_2423, dtype="int8") /* ty=Tensor[(50, 6), int8] */;
  %729 = reshape(%728, newshape=[150, 2]) /* ty=Tensor[(150, 2), int8] */;
  %730 = @func_2009(%729) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 8, 6), int64], Tensor[(150, 2), uint64]) */;
  %731 = %730.2;
  %732 = cast(%var_2423, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(2), int32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %736 = %723.0;
  %737 = %724.0;
  %738 = %725.0;
  %739 = %726.0;
  %740 = %727.1;
  %741 = greater_equal(%734, %735) /* ty=Tensor[(150, 2), bool] */;
  %742 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
  (%736, %737, %738, %739, %740, %741, %742)
}

def @func_3706() -> Tensor[(12, 12, 6), int64] {
  @func_3704() /* ty=Tensor[(12, 12, 6), int64] */
}

def @func_610(%var_607: Tensor[(2310), float64], %var_608: Tensor[(432), float32]) -> (Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
  %743 = @func_298() /* ty=(Tensor[(12, ?, 6), int64],) */;
  %744 = cast(%var_607, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %745 = cast(%var_608, dtype="float32") /* ty=Tensor[(432), float32] */;
  %746 = reshape(%744, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %747 = reshape(%745, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %748 = @func_276(%746, %747) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %749 = %743.0;
  %750 = %748.1;
  (%749, %750, %var_607, %var_608)
}

def @func_4476() -> (Tensor[(12, ?, 6), int64],) {
  @func_4474() /* ty=(Tensor[(12, ?, 6), int64],) */
}

def @func_397() -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
  %759 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) {
    %751 = cast(meta[relay.Constant][43] /* ty=Tensor[(2310), float64] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %752 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %753 = reshape(%751, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %754 = reshape(%752, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %755 = @func_276(%753, %754) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %756 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    %757 = @func_176() /* ty=Tensor[(12, ?, 6), int64] */;
    %758 = %755.2;
    (%756, %757, %758, meta[relay.Constant][43] /* ty=Tensor[(2310), float64] */, meta[relay.Constant][44] /* ty=Tensor[(432), float32] */)
  };
  %759() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */
}

def @func_4929() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), bool]) {
  %760 = @func_2901() /* ty=(Tensor[(14, 2, 11), float64], Tensor[(15, 14, 11), int64]) */;
  %761 = @func_2616() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) */;
  %762 = %760.1;
  %763 = %761.0;
  (%762, %763)
}

def @func_5653(%var_5651: Tensor[(12, 15, 6), int64], %var_5652: Tensor[(7, 330), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), float64], Tensor[(12, 15, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(9, 16, 3), float64], Tensor[(7, 330), float64], Tensor[(286), uint8]) {
  %780 = fn (%var_5632: Tensor[(12, 15, 6), int64], %var_5644: Tensor[(7, 330), float64]) -> (Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), float64], Tensor[(12, 15, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(9, 16, 3), float64], Tensor[(7, 330), float64], Tensor[(286), uint8]) {
    %764 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
    %765 = @func_4474() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %766 = %765.0;
    %767 = cast(%766, dtype="int64") /* ty=Tensor[(12, ?, 6), int64] */;
    %768 = cast(%var_5632, dtype="int64") /* ty=Tensor[(12, 15, 6), int64] */;
    %769 = @func_2314() /* ty=(Tensor[(12, ?, 6), int64],) */;
    %770 = cast(%var_5644, dtype="float64") /* ty=Tensor[(7, 330), float64] */;
    %771 = cast(meta[relay.Constant][45] /* ty=Tensor[(286), uint8] */, dtype="uint8") /* ty=Tensor[(286), uint8] */;
    %772 = reshape(%770, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
    %773 = reshape(%771, newshape=[286]) /* ty=Tensor[(286), uint8] */;
    %774 = @func_1015(%772, %773) /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), float64], Tensor[(12, ?, 6), int64], Tensor[(2310), float32], Tensor[(12, ?, 6), bool], Tensor[(144), int64], Tensor[(9, 16, 3), float64], Tensor[(286), uint8]) */;
    %775 = @func_3355() /* ty=Tensor[(12, ?, 6), int64] */;
    %776 = %764.1;
    %777 = minimum(%767, %768) /* ty=Tensor[(12, 15, 6), int64] */;
    %778 = %769.0;
    %779 = %774.6;
    (%775, %776, %777, %778, %779, %var_5644, meta[relay.Constant][45] /* ty=Tensor[(286), uint8] */)
  };
  %780(%var_5651, %var_5652) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), float64], Tensor[(12, 15, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(9, 16, 3), float64], Tensor[(7, 330), float64], Tensor[(286), uint8]) */
}

def @func_3174() -> Tensor[(15, 14, 11), int64] {
  %781 = @func_2333() /* ty=(Tensor[(15, 14, 11), int64],) */;
  %781.0
}

def @func_2561(%var_2538: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), float64],) {
  %782 = cast(%var_2538, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %783 = asin(%782) /* ty=Tensor[(13, 12, 6), float64] */;
  (%783,)
}

def @func_2381() -> (Tensor[(2310), float32],) {
  %786 = fn () -> (Tensor[(2310), float32],) {
    %784 = @func_592() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */;
    %785 = %784.0;
    (%785,)
  };
  %786() /* ty=(Tensor[(2310), float32],) */
}

def @func_3449() -> Tensor[(12, ?, 6), int64] {
  @func_3447() /* ty=Tensor[(12, ?, 6), int64] */
}

def @func_5461() -> (Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) {
  @func_5459() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(8, 11, 11), int32], Tensor[(968), float64]) */
}

def @func_5927() -> (Tensor[(432), int64], Tensor[(12, ?, 6), int64]) {
  @func_5925() /* ty=(Tensor[(432), int64], Tensor[(12, ?, 6), int64]) */
}

def @func_59(%var_58: Tensor[(9, 16, 3), float32]) -> Tensor[(9, 16, 3), float64] {
  %793 = fn (%var_41: Tensor[(9, 16, 3), float32]) -> Tensor[(9, 16, 3), float64] {
    %787 = cast(%var_41, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
    %788 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(9, 16, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %791 = divide(%789, %790) /* ty=Tensor[(9, 16, 3), float32] */;
    %792 = cast(%791, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
    acosh(%792) /* ty=Tensor[(9, 16, 3), float64] */
  };
  %793(%var_58) /* ty=Tensor[(9, 16, 3), float64] */
}

def @func_3040(%var_3038: Tensor[(936), float64]) -> (Tensor[(8, 11, 9), float64], Tensor[(2310), float64], Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) {
  @func_3037(%var_3038) /* ty=(Tensor[(8, 11, 9), float64], Tensor[(2310), float64], Tensor[(15, 14, 11), int64], Tensor[(15, 14, 11), int64], Tensor[(13, 12, 6), float64], Tensor[(936), float64]) */
}

def @func_5009(%var_5006: Tensor[(13, 11, 14), int8], %var_5007: Tensor[(13, 11, 14), int8], %var_5008: Tensor[(13, 11, 14), bool]) -> (Tensor[(13, 1, 12), float64], Tensor[(1, 156), float64], Tensor[(13, 11, 14), bool], Tensor[(13, 11, 14), float64], Tensor[(15, 14, 11), int64], Tensor[(13, 11, 14), float64]) {
  @func_5004(%var_5006, %var_5007, %var_5008) /* ty=(Tensor[(13, 1, 12), float64], Tensor[(1, 156), float64], Tensor[(13, 11, 14), bool], Tensor[(13, 11, 14), float64], Tensor[(15, 14, 11), int64], Tensor[(13, 11, 14), float64]) */
}

def @func_4127(%var_4126: Tensor[(2310), float32]) -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
  %803 = fn (%var_4118: Tensor[(2310), float32]) -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
    %794 = @func_2505() /* ty=(Tensor[(432), float32], Tensor[(15, 14, 11), int64]) */;
    %795 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
    %796 = %795.2;
    %797 = cast(%var_4118, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(1), int32] */;
    %799 = cast(%796, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?), float32] */;
    %801 = %794.1;
    %802 = subtract(%799, %800) /* ty=Tensor[(2310), float32] */;
    (%801, %802)
  };
  %803(%var_4126) /* ty=(Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) */
}

def @func_4524() -> (Tensor[(2310), float64],) {
  %806 = fn () -> (Tensor[(2310), float64],) {
    %804 = @func_3609() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) */;
    %805 = %804.2;
    (%805,)
  };
  %806() /* ty=(Tensor[(2310), float64],) */
}

def @func_3610() -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) {
  %823 = fn () -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) {
    %807 = @func_2840() /* ty=(Tensor[(432), int64], Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */;
    %808 = %807.2;
    %809 = @func_1833() /* ty=(Tensor[(12, 4, 6), float32], Tensor[(12, ?, 6), float64]) */;
    %810 = %809.1;
    %811 = cast(%810, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
    %812 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %813 = cast(%808, dtype="bool") /* ty=Tensor[(12, ?, 6), bool] */;
    %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %815 = cast(%808, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
    %816 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%810, dtype="float32") /* ty=Tensor[(12, ?, 6), float32] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %819 = @func_2157() /* ty=(Tensor[(12, 10, 6), int8], Tensor[(2310), float64], Tensor[(2310), float32], Tensor[(12, 4, 6), float32]) */;
    %820 = less_equal(%813, %814) /* ty=Tensor[(12, ?, 6), bool] */;
    %821 = maximum(%817, %818) /* ty=Tensor[(12, ?, 6), float32] */;
    %822 = %819.1;
    (%820, %821, %822)
  };
  %823() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), float32], Tensor[(2310), float64]) */
}

def @func_4818(%var_4816: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) {
  @func_4815(%var_4816) /* ty=(Tensor[(8, 11, 11), int32], Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), bool]) */
}

def @func_2105() -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) {
  %831 = fn () -> (Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) {
    %824 = @func_1292() /* ty=(Tensor[(12, ?, 6), float64], Tensor[(12, 4, 6), float32]) */;
    %825 = %824.1;
    %826 = cast(%825, dtype="int64") /* ty=Tensor[(12, 4, 6), int64] */;
    %827 = reshape(%826, newshape=[12, 4, 6]) /* ty=Tensor[(12, 4, 6), int64] */;
    %828 = @func_1107(%827) /* ty=(Tensor[(12, 4, 6), uint16], Tensor[(12, 4, 6), float32]) */;
    %829 = @func_1041() /* ty=Tensor[(12, ?, 6), int64] */;
    %830 = %828.0;
    (%829, %825, %830)
  };
  %831() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, 4, 6), float32], Tensor[(12, 4, 6), uint16]) */
}

def @func_4683() -> (Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) {
  @func_4681() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(2310), float32]) */
}

def @func_2022() -> (Tensor[(15, 14, 11), int64],) {
  %832 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %833 = %832.2;
  (%833,)
}

def @func_2618() -> (Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) {
  @func_2616() /* ty=(Tensor[(12, ?, 6), bool], Tensor[(12, ?, 6), int64], Tensor[(300), int8]) */
}

def @func_159(%var_146: Tensor[(13, 11, 2), uint8], %var_152: Tensor[(1, 432), float32]) -> (Tensor[(13, 11, 2), uint8], Tensor[(9, 16, 3), float64], Tensor[(1, 432), float32]) {
  %834 = cast(%var_146, dtype="uint8") /* ty=Tensor[(13, 11, 2), uint8] */;
  %835 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(13, 11, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 11, 2), uint8] */, dtype="uint8") /* ty=Tensor[(13, 11, 2), uint8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %838 = cast(%var_152, dtype="float32") /* ty=Tensor[(1, 432), float32] */;
  %839 = reshape(%838, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %840 = minimum(%836, %837) /* ty=Tensor[(13, 11, 2), uint8] */;
  %841 = @func_57(%839) /* ty=Tensor[(9, 16, 3), float64] */;
  (%840, %841, %var_152)
}

def @func_593() -> (Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) {
  %852 = fn () -> (Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) {
    %842 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %843 = %842.3;
    %844 = cast(%843, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %845 = log10(%844) /* ty=Tensor[(2310), float32] */;
    %846 = cast(%845, dtype="float64") /* ty=Tensor[(2310), float64] */;
    %847 = cast(meta[relay.Constant][48] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %848 = reshape(%846, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
    %849 = reshape(%847, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %850 = @func_276(%848, %849) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
    %851 = %850.1;
    (%845, %851, meta[relay.Constant][48] /* ty=Tensor[(432), float32] */)
  };
  %852() /* ty=(Tensor[(2310), float32], Tensor[(432), int64], Tensor[(432), float32]) */
}

def @func_1543(%var_1539: Tensor[(2310), float64]) -> (Tensor[(432), float32], Tensor[(15, 14, 11), int64], Tensor[(2310), float64]) {
  %853 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
  %854 = cast(%var_1539, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %855 = %853.4;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(432), float32] */;
  %857 = reshape(%854, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), float64] */;
  %858 = reshape(%856, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %859 = @func_276(%857, %858) /* ty=(Tensor[(12, ?, 6), int64], Tensor[(432), int64], Tensor[(15, 14, 11), int64]) */;
  %860 = %859.2;
  (%855, %860, %var_1539)
}

def @func_874(%var_872: Tensor[(12, 5, 5), int8], %var_873: Tensor[(12, 5, 5), int8]) -> (Tensor[(12, 5, 5), bool],) {
  %878 = fn (%var_846: Tensor[(12, 5, 5), int8], %var_847: Tensor[(12, 5, 5), int8]) -> (Tensor[(12, 5, 5), bool],) {
    %861 = cast(%var_847, dtype="int8") /* ty=Tensor[(12, 5, 5), int8] */;
    %862 = shape_of(%var_846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%var_846, dtype="int8") /* ty=Tensor[(12, 5, 5), int8] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %865 = left_shift(%863, %864) /* ty=Tensor[(12, 5, 5), int8] */;
    %866 = cast(%var_847, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
    %867 = cosh(%866) /* ty=Tensor[(12, 5, 5), float64] */;
    %868 = cast(%867, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
    %869 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%865, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %872 = mod(%870, %871) /* ty=Tensor[(12, 5, 5), float64] */;
    %873 = cast(%865, dtype="bool") /* ty=Tensor[(12, 5, 5), bool] */;
    %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %875 = cast(%872, dtype="bool") /* ty=Tensor[(12, 5, 5), bool] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %877 = greater(%875, %876) /* ty=Tensor[(12, 5, 5), bool] */;
    (%877,)
  };
  %878(%var_872, %var_873) /* ty=(Tensor[(12, 5, 5), bool],) */
}

def @func_458() -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
  %882 = fn () -> (Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) {
    %879 = @func_396() /* ty=(Tensor[(12, ?, 6), int64], Tensor[(12, ?, 6), int64], Tensor[(15, 14, 11), int64], Tensor[(2310), float64], Tensor[(432), float32]) */;
    %880 = %879.2;
    %881 = @func_223() /* ty=Tensor[(12, ?, 6), int64] */;
    (%880, %881)
  };
  %882() /* ty=(Tensor[(15, 14, 11), int64], Tensor[(12, ?, 6), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen321/build/output.py", line 2316, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:06:50] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

