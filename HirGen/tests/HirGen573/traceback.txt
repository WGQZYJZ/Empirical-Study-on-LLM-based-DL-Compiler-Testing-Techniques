==========mod==========
#[version = "0.0.5"]
def @func_2982(%var_2938: Tensor[(13, 7, 1), float64]) -> (Tensor[(13, 7, 1), float64], Tensor[(5, 14, 9), float32]) {
  %0 = cast(%var_2938, dtype="float64") /* ty=Tensor[(13, 7, 1), float64] */;
  %1 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %2 = atan(%0) /* ty=Tensor[(13, 7, 1), float64] */;
  %3 = %1.0;
  (%2, %3)
}

def @func_9228() -> (Tensor[(8, 2, 11), int32],) {
  %4 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %5 = %4.0;
  (%5,)
}

def @func_12972() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %6 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %7 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %8 = %6.1;
  %9 = %7.0;
  (%8, %9)
}

def @func_9592(%var_9568: Tensor[(9, 3, 10), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) {
  %10 = cast(%var_9568, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
  %11 = sigmoid(%10) /* ty=Tensor[(9, 3, 10), float64] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
  %13 = tan(%12) /* ty=Tensor[(9, 3, 10), float64] */;
  %14 = cast(%var_9568, dtype="bool") /* ty=Tensor[(9, 3, 10), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(9, 3, 10), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
  %19 = logical_or(%16, %17) /* ty=Tensor[(9, 3, 10), bool] */;
  (%18, %19)
}

def @func_5391() -> Tensor[(5, 14, 9), float32] {
  %20 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %20.1
}

def @func_13099() -> (Tensor[(5, 14, 9), float32],) {
  %21 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %22 = %21.0;
  (%22,)
}

def @func_630() -> (Tensor[(5, 14, 9), float32],) {
  %23 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  (%23,)
}

def @func_7140() -> Tensor[(5, 14, 9), float32] {
  %24 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %24.0
}

def @func_1142(%var_1131: Tensor[(6, 9, 6), uint8]) -> (Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) {
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="uint8") /* ty=Tensor[(6, 9, 6), uint8] */;
  %26 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_1131, dtype="uint8") /* ty=Tensor[(6, 9, 6), uint8] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %30 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = left_shift(%27, %28) /* ty=Tensor[(6, 9, 6), uint8] */;
  %34 = greater(%31, %32) /* ty=Tensor[(6, 9, 6), bool] */;
  (%33, %34)
}

def @func_2517() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %35 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %36 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %37 = %35.3;
  %38 = %36.0;
  (%37, %38)
}

def @func_2449() -> (Tensor[(5, 14, 9), float32],) {
  %39 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%39,)
}

def @func_1833() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %40 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %41 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
  %43 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %44 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %45 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
  %46 = %40.0;
  %47 = log10(%42) /* ty=Tensor[(8, 2, 11), float64] */;
  %48 = %43.0;
  %49 = %44.1;
  %50 = %45.0;
  (%46, %47, %48, %49, %50)
}

def @func_3823() -> Tensor[(8, 2, 11), bool] {
  @func_1570() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_15417() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %51 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %52 = @func_13553() /* ty=(Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */;
  %53 = @func_9387() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %54 = %51.1;
  %55 = %52.0;
  %56 = @func_13020() /* ty=Tensor[(5, 14, 9), float32] */;
  %57 = %53.0;
  (%54, %55, %56, %57)
}

def @func_9749(%var_9708: Tensor[(7, 10, 8), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 44), float32], Tensor[(168), uint32], Tensor[(13, 6), int64], Tensor[(1, 264), float32], Tensor[(7, 10, 8), bool], Tensor[(5, 14, 9), float32]) {
  %58 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 6), int64] */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %62 = reshape(%59, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %63 = reshape(%60, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %64 = reshape(%61, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
  %65 = @func_3432(%62, %63, %64) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
  %66 = cast(%var_9708, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
  %67 = sqrt(%66) /* ty=Tensor[(7, 10, 8), float32] */;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
  %69 = exp(%68) /* ty=Tensor[(7, 10, 8), float32] */;
  %70 = cast(%67, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %75 = %58.0;
  %76 = %65.4;
  %77 = equal(%72, %73) /* ty=Tensor[(7, 10, 8), bool] */;
  %78 = %74.0;
  (%75, %76, meta[relay.Constant][2] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][3] /* ty=Tensor[(13, 6), int64] */, meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, %77, %78)
}

def @func_13788() -> Tensor[(5, 14, 9), float32] {
  %79 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %79.1
}

def @func_1507() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %80 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %81 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %82 = %80.2;
  %83 = %81.0;
  (%82, %83)
}

def @func_11441() -> (Tensor[(5, 14, 9), float32],) {
  %84 = @func_10401() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) */;
  %85 = %84.1;
  (%85,)
}

def @func_15655() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %86 = @func_14542() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %87 = @func_11104() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %88 = @func_11687() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %89 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %90 = %86.1;
  %91 = %87.1;
  %92 = @func_10349() /* ty=Tensor[(5, 14, 9), float32] */;
  %93 = %88.0;
  %94 = %89.0;
  (%90, %91, %92, %93, %94)
}

def @func_6861() -> Tensor[(5, 14, 9), float32] {
  @func_5827() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1319() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %95 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %96 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %97 = %96.0;
  %98 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %101 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%97, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %105 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %106 = %95.3;
  %107 = not_equal(%102, %103) /* ty=Tensor[(5, 14, 9), bool] */;
  %108 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %109 = %104.3;
  %110 = %105.0;
  (%106, %107, %108, %109, %110)
}

def @func_6635() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %111 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %112 = %111.0;
  %113 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
  (%112, %113)
}

def @func_15351() -> Tensor[(5, 14, 9), float32] {
  %114 = @func_14417() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %114.0
}

def @func_4317() -> Tensor[(5, 14, 9), float32] {
  %115 = @func_3502() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %115.0
}

def @func_10764(%var_10757: Tensor[(144), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) {
  %116 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %117 = cast(%var_10757, dtype="float64") /* ty=Tensor[(144), float64] */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %119 = reshape(%117, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %120 = reshape(%118, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %121 = @func_1549(%119, %120) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %122 = %116.0;
  %123 = %121.1;
  (%122, %123, %var_10757, meta[relay.Constant][5] /* ty=Tensor[(432), float64] */)
}

def @func_14524() -> (Tensor[(8, 2, 11), int32],) {
  %124 = @func_12049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %125 = %124.2;
  (%125,)
}

def @func_15784() -> (Tensor[(5, 14, 9), float32],) {
  %126 = @func_7993() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %127 = %126.1;
  (%127,)
}

def @func_3749() -> (Tensor[(5, 14, 9), float32],) {
  %128 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %129 = %128.0;
  (%129,)
}

def @func_1984() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %130 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %131 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %132 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %133 = %130.0;
  %134 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %135 = %131.0;
  %136 = %132.0;
  (%133, %134, %135, %136)
}

def @func_12412() -> Tensor[(840), float64] {
  @func_3515() /* ty=Tensor[(840), float64] */
}

def @func_15500() -> (Tensor[(5, 14, 9), float32],) {
  %137 = @func_11000() /* ty=Tensor[(5, 14, 9), float32] */;
  (%137,)
}

def @func_12705() -> Tensor[(840), float64] {
  @func_4831() /* ty=Tensor[(840), float64] */
}

def @func_12221(%var_12194: Tensor[(12, 14, 11), bool], %var_12195: Tensor[(12, 14, 11), bool]) -> (Tensor[(12, 14, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %138 = cast(%var_12195, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %139 = shape_of(%var_12194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_12194, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %143 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %144 = logical_and(%140, %141) /* ty=Tensor[(12, 14, 11), bool] */;
  %145 = %142.1;
  %146 = %143.0;
  (%144, %145, %146)
}

def @func_9086() -> (Tensor[(8, 2, 11), int32],) {
  %147 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %148 = %147.1;
  (%148,)
}

def @func_6049() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %149 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %150 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %151 = @func_3749() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %154 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%150, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %157 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %158 = @func_4763() /* ty=Tensor[(5, 14, 9), float32] */;
  %159 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
  %160 = %149.0;
  %161 = power(%155, %156) /* ty=Tensor[(5, 14, 9), float32] */;
  %162 = @func_4317() /* ty=Tensor[(5, 14, 9), float32] */;
  %163 = %157.0;
  (%158, %159, %160, %161, %162, %163)
}

def @func_3652() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %164 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %165 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %166 = %164.0;
  %167 = %165.0;
  (%166, %167)
}

def @func_4169() -> (Tensor[(5, 14, 9), float32],) {
  %168 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %169 = %168.0;
  (%169,)
}

def @func_14311(%var_14301: Tensor[(1120), bool]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(16, 5, 14), bool], Tensor[(1120), bool]) {
  %170 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %171 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %172 = cast(%var_14301, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %173 = cast(%var_14301, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %174 = reshape(%172, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %175 = reshape(%173, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %176 = @func_12569(%174, %175) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) */;
  %177 = %170.0;
  %178 = %171.1;
  %179 = %176.0;
  (%177, %178, %179, %var_14301)
}

def @func_8889() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %180 = @func_8319() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %181 = %180.0;
  %182 = @func_5391() /* ty=Tensor[(5, 14, 9), float32] */;
  %183 = @func_1446() /* ty=Tensor[(5, 14, 9), float32] */;
  (%181, %182, %183)
}

def @func_4740(%var_4712: Tensor[(15, 5, 10), uint64]) -> (Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) {
  %184 = cast(%var_4712, dtype="uint64") /* ty=Tensor[(15, 5, 10), uint64] */;
  %185 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 5, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(15, 5, 10), uint64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %188 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %189 = minimum(%186, %187) /* ty=Tensor[(15, 5, 10), uint64] */;
  %190 = %188.0;
  (%189, %190)
}

def @func_325() -> (Tensor[(5, 14, 9), float32],) {
  %191 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %192 = %191.0;
  (%192,)
}

def @func_3977(%var_3948: Tensor[(840), float64], %var_3954: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), uint16]) {
  %193 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %194 = cast(%var_3948, dtype="float64") /* ty=Tensor[(840), float64] */;
  %195 = reshape(%194, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %196 = @func_2609(%195) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */;
  %197 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %198 = %197.0;
  %199 = cast(%var_3954, dtype="uint16") /* ty=Tensor[(5, 14, 9), uint16] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="uint16") /* ty=Tensor[(5, 14, 9), uint16] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %203 = %193.3;
  %204 = %196.1;
  %205 = add(%201, %202) /* ty=Tensor[(5, 14, 9), uint16] */;
  (%203, %204, %var_3948, %205)
}

def @func_7735(%var_7712: float32) -> (Tensor[(12, 15, 16), float32], Tensor[(5, 14, 9), float32], Tensor[(12, 15, 16), uint8], Tensor[(5, 14, 9), float32]) {
  %206 = cast(%var_7712, dtype="float32") /* ty=float32 */;
  %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 16), float32] */;
  %208 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 15, 16), float32] */, dtype="uint8") /* ty=Tensor[(12, 15, 16), uint8] */;
  %210 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 16), float32] */, dtype="uint8") /* ty=Tensor[(12, 15, 16), uint8] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %213 = @func_6299() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %214 = power(%206, %207) /* ty=Tensor[(12, 15, 16), float32] */;
  %215 = %208.2;
  %216 = bitwise_and(%211, %212) /* ty=Tensor[(12, 15, 16), uint8] */;
  %217 = %213.0;
  (%214, %215, %216, %217)
}

def @func_15194() -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %218 = @func_9051() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */;
  %219 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %220 = %218.1;
  %221 = %219.0;
  (%220, %221)
}

def @func_8977() -> Tensor[(5, 14, 9), float32] {
  %222 = @func_6635() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %222.1
}

def @func_12291() -> (Tensor[(5, 14, 9), float32],) {
  %223 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
  (%223,)
}

def @func_4253() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %224 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %225 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  %226 = %224.0;
  (%225, %226)
}

def @func_5367() -> (Tensor[(5, 14, 9), float32],) {
  %227 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %228 = %227.1;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %230 = cosh(%229) /* ty=Tensor[(5, 14, 9), float32] */;
  (%230,)
}

def @func_5920() -> Tensor[(5, 14, 9), float32] {
  @func_5827() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_9205() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %231 = @func_8931() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %232 = @func_6213() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %233 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %234 = %231.1;
  %235 = @func_7030() /* ty=Tensor[(840), float64] */;
  %236 = %232.1;
  %237 = %233.4;
  (%234, %235, %236, %237)
}

def @func_12148() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
  %238 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %239 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %240 = %238.1;
  %241 = %239.1;
  (%240, %241)
}

def @func_15862(%var_15837: Tensor[(4, 36), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(4, 36), uint16], Tensor[(4, 36), float64], Tensor[(4, 36), float64]) {
  %242 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %243 = @func_15607() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %244 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %245 = reshape(%244, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %246 = @func_5989(%245) /* ty=(Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) */;
  %247 = %246.1;
  %248 = cast(%247, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %249 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(4, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %250 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 36), float64] */, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %252 = cast(%var_15837, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %253 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(4, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %256 = cast(%var_15837, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %257 = @func_6512() /* ty=Tensor[(5, 14, 9), float32] */;
  %258 = %242.0;
  %259 = %243.0;
  %260 = right_shift(%250, %251) /* ty=Tensor[(4, 36), uint16] */;
  %261 = power(%254, %255) /* ty=Tensor[(4, 36), float64] */;
  %262 = rsqrt(%256) /* ty=Tensor[(4, 36), float64] */;
  (%257, %258, %259, %260, %261, %262)
}

def @func_436() -> Tensor[(5, 14, 9), float32] {
  %263 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %264 = %263.2;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  atanh(%265) /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_10165() -> (Tensor[(5, 14, 9), float32],) {
  %266 = @func_5998() /* ty=Tensor[(5, 14, 9), float32] */;
  (%266,)
}

def @func_1280() -> (Tensor[(5, 14, 9), float32],) {
  %267 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %268 = %267.2;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %270 = sinh(%269) /* ty=Tensor[(5, 14, 9), float32] */;
  (%270,)
}

def @func_1570() -> Tensor[(8, 2, 11), bool] {
  %271 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %272 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 2, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%273, %274) /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_14716() -> (Tensor[(5, 14, 9), float32],) {
  %275 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  (%275,)
}

def @func_14171() -> Tensor[(5, 14, 9), float32] {
  %276 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %276.2
}

def @func_655() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %277 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %278 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  (%277, %278)
}

def @func_2663() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  %279 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %280 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %281 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %282 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %283 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %284 = reshape(%282, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %285 = reshape(%283, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %286 = %279.1;
  %287 = %280.1;
  %288 = %281.0;
  %289 = @func_158(%284, %285) /* ty=Tensor[(7, 3, 8), bool] */;
  (%286, %287, %288, %289, meta[relay.Constant][12] /* ty=Tensor[(168), uint32] */)
}

def @func_8931() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %290 = @func_8785() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %291 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %292 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %293 = @func_7493() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %294 = %290.1;
  %295 = %291.0;
  %296 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
  %297 = %292.0;
  %298 = %293.0;
  (%294, %295, %296, %297, %298)
}

def @func_7069() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %299 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %300 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %301 = %299.0;
  (%300, %301)
}

def @func_698(%var_675: Tensor[(8, 7, 15), float64]) -> (Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %302 = cast(%var_675, dtype="float64") /* ty=Tensor[(8, 7, 15), float64] */;
  %303 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %304 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %305 = exp(%302) /* ty=Tensor[(8, 7, 15), float64] */;
  %306 = %303.0;
  %307 = %304.0;
  (%305, %306, %307)
}

def @func_4670() -> Tensor[(5, 14, 9), float32] {
  %308 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %308.0
}

def @func_7297() -> Tensor[(5, 14, 9), float32] {
  %309 = @func_6873() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %309.0
}

def @func_9994() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %310 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %311 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
  %312 = %310.0;
  (%311, %312)
}

def @func_9064() -> Tensor[(840), float64] {
  @func_7030() /* ty=Tensor[(840), float64] */
}

def @func_5827() -> Tensor[(5, 14, 9), float32] {
  @func_4763() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5603(%var_5579: Tensor[(168, 1), uint32], %var_5581: Tensor[(132, 2), float32], %var_5585: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) {
  %313 = cast(%var_5579, dtype="uint32") /* ty=Tensor[(168, 1), uint32] */;
  %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(78, 1), int64] */, dtype="int64") /* ty=Tensor[(78, 1), int64] */;
  %315 = cast(%var_5581, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %316 = reshape(%313, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %317 = reshape(%314, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %318 = reshape(%315, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
  %319 = @func_3432(%316, %317, %318) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
  %320 = cast(%var_5585, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %321 = shape_of(%var_5581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%var_5581, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %324 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %325 = cast(meta[relay.Constant][13] /* ty=Tensor[(78, 1), int64] */, dtype="int64") /* ty=Tensor[(78, 1), int64] */;
  %326 = cast(%var_5585, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %327 = %319.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %329 = reshape(%325, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %330 = reshape(%326, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %331 = reshape(%328, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %332 = @func_1885(%329, %330, %331) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %333 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
  %334 = greater_equal(%322, %323) /* ty=Tensor[(132, 2), bool] */;
  %335 = %324.0;
  %336 = %332.3;
  (%333, %327, %var_5579, meta[relay.Constant][13] /* ty=Tensor[(78, 1), int64] */, %334, %335, %336)
}

def @func_6997(%var_6934: Tensor[(11, 12, 8), int8], %var_6935: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 12, 16), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(576, 2), float64]) {
  %337 = cast(%var_6935, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %338 = shape_of(%var_6934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_6934, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %342 = @func_6817() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %344 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %345 = reshape(%343, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %346 = reshape(%344, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %347 = @func_6610(%345, %346) /* ty=(Tensor[(6, 12, 16), float64],) */;
  %348 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %349 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %350 = cast(meta[relay.Constant][15] /* ty=Tensor[(576, 2), int64] */, dtype="float64") /* ty=Tensor[(576, 2), float64] */;
  %351 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(576, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %352 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 2), int64] */, dtype="float64") /* ty=Tensor[(576, 2), float64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %354 = greater(%339, %340) /* ty=Tensor[(11, 12, 8), bool] */;
  %355 = %341.0;
  %356 = @func_4763() /* ty=Tensor[(5, 14, 9), float32] */;
  %357 = %342.1;
  %358 = %347.0;
  %359 = %348.2;
  %360 = %349.2;
  %361 = multiply(%352, %353) /* ty=Tensor[(576, 2), float64] */;
  (%354, %355, %356, %357, %358, %359, %360, %361)
}

def @func_15766() -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(3, 108), uint8]) {
  %362 = @func_11746() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %363 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 108), uint8] */, dtype="uint8") /* ty=Tensor[(3, 108), uint8] */;
  %364 = reshape(%363, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
  %365 = @func_1142(%364) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
  %366 = %362.0;
  %367 = %365.0;
  (%366, %367, meta[relay.Constant][16] /* ty=Tensor[(3, 108), uint8] */)
}

def @func_3605() -> (Tensor[(5, 14, 9), float32],) {
  %368 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
  (%368,)
}

def @func_11959(%var_11948: Tensor[(6, 13, 16), int8], %var_11949: Tensor[(6, 13, 16), int8]) -> (Tensor[(6, 13, 16), int8],) {
  %369 = cast(%var_11949, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %370 = shape_of(%var_11948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_11948, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %373 = minimum(%371, %372) /* ty=Tensor[(6, 13, 16), int8] */;
  (%373,)
}

def @func_3910() -> (Tensor[(840), float64],) {
  %374 = @func_3515() /* ty=Tensor[(840), float64] */;
  (%374,)
}

def @func_5091() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %375 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %376 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %377 = %375.0;
  %378 = %376.0;
  (%377, %378)
}

def @func_12376(%var_12371: Tensor[(66, 4), float32]) -> (Tensor[(66, 4), float64],) {
  %379 = @func_10983() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) */;
  %380 = %379.2;
  %381 = cast(%var_12371, dtype="float64") /* ty=Tensor[(66, 4), float64] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%380, dtype="float64") /* ty=Tensor[(66, 4), float64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %385 = floor_divide(%383, %384) /* ty=Tensor[(66, 4), float64] */;
  (%385,)
}

def @func_6299() -> (Tensor[(5, 14, 9), float32],) {
  %386 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %387 = %386.0;
  (%387,)
}

def @func_7030() -> Tensor[(840), float64] {
  @func_4831() /* ty=Tensor[(840), float64] */
}

def @func_9387() -> (Tensor[(5, 14, 9), float32],) {
  %388 = @func_8627() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %389 = %388.0;
  (%389,)
}

def @func_3095(%var_3072: Tensor[(1287), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %390 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %391 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %392 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(1287), uint8] */;
  %393 = cast(%var_3072, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %394 = reshape(%392, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), uint8] */;
  %395 = reshape(%393, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float64] */;
  %396 = @func_2195(%394, %395) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) */;
  %397 = @func_3014() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %398 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %399 = %390.2;
  %400 = %391.0;
  %401 = %396.6;
  %402 = %397.0;
  %403 = %398.0;
  (%399, %400, %401, %var_3072, %402, %403)
}

def @func_16024() -> (Tensor[(5, 14, 9), float32],) {
  %404 = @func_2372() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %405 = %404.0;
  (%405,)
}

def @func_15049() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %406 = @func_11864() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) */;
  %407 = @func_12285() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %408 = %406.0;
  %409 = @func_9064() /* ty=Tensor[(840), float64] */;
  %410 = %407.0;
  (%408, %409, %410)
}

def @func_2609(%var_2588: Tensor[(840), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %411 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %412 = cast(%var_2588, dtype="float64") /* ty=Tensor[(840), float64] */;
  %413 = reshape(%412, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float64] */;
  %414 = @func_698(%413) /* ty=(Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %415 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %416 = %411.0;
  %417 = %414.1;
  %418 = %415.0;
  (%416, %417, %var_2588, %418)
}

def @func_10129() -> Tensor[(5, 14, 9), float32] {
  %419 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %419.0
}

def @func_9691() -> Tensor[(5, 14, 9), float32] {
  %420 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %420.0
}

def @func_6213() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %421 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %422 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %423 = %421.0;
  %424 = %422.1;
  (%423, %424)
}

def @func_13908() -> Tensor[(5, 14, 9), float32] {
  %425 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %425.2
}

def @func_2372() -> (Tensor[(5, 14, 9), float32],) {
  %426 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %427 = %426.1;
  (%427,)
}

def @func_14542() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %428 = @func_5367() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %429 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %430 = %428.0;
  %431 = %429.0;
  (%430, %431)
}

def @func_13758() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %432 = @func_8889() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %433 = @func_8355() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %434 = %432.0;
  %435 = %433.1;
  (%434, %435)
}

def @func_8579(%var_8569: Tensor[(8, 16, 9), float32], %var_8577: Tensor[(264), float32]) -> (Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) {
  %436 = cast(%var_8569, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
  %437 = cast(meta[relay.Constant][17] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %438 = cast(%var_8577, dtype="float32") /* ty=Tensor[(264), float32] */;
  %439 = cast(%var_8577, dtype="float32") /* ty=Tensor[(264), float32] */;
  %440 = reshape(%437, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint32] */;
  %441 = reshape(%438, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %442 = reshape(%439, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %443 = @func_5603(%440, %441, %442) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) */;
  %444 = sqrt(%436) /* ty=Tensor[(8, 16, 9), float32] */;
  %445 = %443.0;
  (%444, %445, meta[relay.Constant][17] /* ty=Tensor[(168), uint32] */, %var_8577)
}

def @func_3481() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) {
  %446 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %447 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %448 = cast(meta[relay.Constant][19] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %449 = reshape(%447, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %450 = reshape(%448, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %451 = @func_1549(%449, %450) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %452 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %453 = cast(meta[relay.Constant][19] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %454 = reshape(%452, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %455 = reshape(%453, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %456 = @func_1549(%454, %455) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %457 = %446.2;
  %458 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  %459 = %451.0;
  %460 = %456.2;
  (%457, %458, %459, meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, meta[relay.Constant][19] /* ty=Tensor[(432), float64] */, %460)
}

def @func_6512() -> Tensor[(5, 14, 9), float32] {
  %461 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %461.0
}

def @func_9486(%var_9477: Tensor[(750), uint64]) -> (Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) {
  %462 = cast(%var_9477, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %463 = reshape(%462, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint64] */;
  %464 = @func_4740(%463) /* ty=(Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) */;
  %465 = cast(%var_9477, dtype="float32") /* ty=Tensor[(750), float32] */;
  %466 = @func_7030() /* ty=Tensor[(840), float64] */;
  %467 = %464.0;
  %468 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
  %469 = rsqrt(%465) /* ty=Tensor[(750), float32] */;
  (%466, %467, %468, %469)
}

def @func_8627() -> (Tensor[(5, 14, 9), float32],) {
  %470 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %471 = %470.0;
  (%471,)
}

def @func_13131() -> Tensor[(5, 14, 9), float32] {
  %472 = @func_11586() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) */;
  %472.0
}

def @func_8355() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %473 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %474 = @func_7912() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %475 = %473.0;
  %476 = %474.0;
  (%475, %476)
}

def @func_1939() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %477 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %478 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %479 = %477.1;
  %480 = %478.3;
  (%479, %480)
}

def @func_3590() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %481 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %482 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %483 = %481.1;
  %484 = %482.0;
  (%483, %484)
}

def @func_6102() -> (Tensor[(840), float64], Tensor[(5, 14, 9), bool]) {
  %485 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %486 = @func_3515() /* ty=Tensor[(840), float64] */;
  %487 = %485.0;
  (%486, %487)
}

def @func_1885(%var_1853: Tensor[(6, 13, 1), int64], %var_1871: Tensor[(3, 88), float32], %var_1872: Tensor[(630), float32]) -> (Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) {
  %488 = cast(%var_1853, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
  %489 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 13, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 13, 15), int64] */;
  %490 = cast(%var_1871, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %491 = cast(%var_1872, dtype="float32") /* ty=Tensor[(630), float32] */;
  %492 = reshape(%490, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), float32] */;
  %493 = reshape(%491, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %494 = @func_586(%492, %493) /* ty=(Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) */;
  %495 = add(%488, %489) /* ty=Tensor[(6, 13, 15), int64] */;
  %496 = %494.1;
  (%495, %496, %var_1871, %var_1872)
}

def @func_4763() -> Tensor[(5, 14, 9), float32] {
  @func_3690() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_891() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %497 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %498 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %499 = %497.1;
  %500 = %498.1;
  (%499, %500)
}

def @func_586(%var_544: Tensor[(2, 11, 12), float32], %var_560: Tensor[(630), float32]) -> (Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) {
  %501 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %502 = shape_of(%var_544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_544, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(%var_560, dtype="float32") /* ty=Tensor[(630), float32] */;
  %506 = reshape(%505, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), float32] */;
  %507 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %508 = shape_of(%var_544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_544, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = less_equal(%503, %504) /* ty=Tensor[(2, 11, 12), bool] */;
  %512 = @func_228(%506) /* ty=Tensor[(5, 14, 9), int8] */;
  %513 = not_equal(%509, %510) /* ty=Tensor[(2, 11, 12), bool] */;
  (%511, %512, %var_560, %513)
}

def @func_3515() -> Tensor[(840), float64] {
  %514 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %514.3
}

def @func_4996(%var_4952: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), bool], Tensor[(5, 14, 9), float32], Tensor[(9, 14, 5), float64]) {
  %515 = cast(%var_4952, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %516 = rsqrt(%515) /* ty=Tensor[(9, 14, 5), float32] */;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %518 = asin(%517) /* ty=Tensor[(9, 14, 5), float64] */;
  %519 = cast(%518, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %520 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%516, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %524 = cast(%var_4952, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %525 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%516, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = less_equal(%521, %522) /* ty=Tensor[(9, 14, 5), bool] */;
  %529 = %523.1;
  %530 = mod(%526, %527) /* ty=Tensor[(9, 14, 5), float64] */;
  (%528, %529, %530)
}

def @func_14344() -> (Tensor[(5, 14, 9), float32], Tensor[(66, 4), float64], Tensor[(66, 4), float32]) {
  %531 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %532 = cast(meta[relay.Constant][22] /* ty=Tensor[(66, 4), float32] */, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
  %533 = reshape(%532, newshape=[66, 4]) /* ty=Tensor[(66, 4), float32] */;
  %534 = @func_12376(%533) /* ty=(Tensor[(66, 4), float64],) */;
  %535 = %531.2;
  %536 = %534.0;
  (%535, %536, meta[relay.Constant][22] /* ty=Tensor[(66, 4), float32] */)
}

def @main(%var_16145: Tensor[(8, 2, 11), bool], %var_16175: Tensor[(8, 2, 11), bool]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), uint64], Tensor[(840), float64], Tensor[(8, 2, 11), float32]) {
  %537 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %538 = %537.0;
  %539 = cast(%var_16145, dtype="uint64") /* ty=Tensor[(8, 2, 11), uint64] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint64") /* ty=Tensor[(8, 2, 11), uint64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %543 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %544 = cast(%var_16175, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %545 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%538, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %548 = @func_15351() /* ty=Tensor[(5, 14, 9), float32] */;
  %549 = add(%541, %542) /* ty=Tensor[(8, 2, 11), uint64] */;
  %550 = %543.0;
  %551 = minimum(%546, %547) /* ty=Tensor[(8, 2, 11), float32] */;
  (%548, %549, %550, %551)
}

def @func_7229() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 9, 6), uint8], Tensor[(54, 6), uint8]) {
  %552 = cast(meta[relay.Constant][23] /* ty=Tensor[(54, 6), uint8] */, dtype="uint8") /* ty=Tensor[(54, 6), uint8] */;
  %553 = reshape(%552, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
  %554 = @func_1142(%553) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
  %555 = @func_3035() /* ty=Tensor[(5, 14, 9), float32] */;
  %556 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  %557 = %554.0;
  (%555, %556, %557, meta[relay.Constant][23] /* ty=Tensor[(54, 6), uint8] */)
}

def @func_8470() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %558 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %559 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %560 = %558.2;
  %561 = %559.0;
  (%560, %561)
}

def @func_12693() -> (Tensor[(5, 14, 9), float32],) {
  %562 = @func_8507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %563 = %562.1;
  (%563,)
}

def @func_8968() -> Tensor[(5, 14, 9), float32] {
  @func_5493() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_2238(%var_2212: Tensor[(78), int64]) -> (Tensor[(6, 13, 15), int64], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float64]) {
  %564 = cast(%var_2212, dtype="int64") /* ty=Tensor[(78), int64] */;
  %565 = cast(meta[relay.Constant][24] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %566 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %568 = reshape(%564, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %569 = reshape(%565, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %570 = reshape(%567, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %571 = @func_1885(%568, %569, %570) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %572 = cast(%566, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  %573 = %571.0;
  %574 = sqrt(%572) /* ty=Tensor[(5, 14, 9), float64] */;
  (%573, %var_2212, meta[relay.Constant][24] /* ty=Tensor[(264), float32] */, %574)
}

def @func_1761() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) {
  %575 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %576 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %577 = %576.2;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %579 = sin(%578) /* ty=Tensor[(5, 14, 9), float32] */;
  %580 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %584 = %575.0;
  %585 = floor_mod(%582, %583) /* ty=Tensor[(5, 14, 9), float64] */;
  (%584, %585)
}

def @func_14809() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %586 = @func_7993() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %587 = %586.1;
  %588 = @func_12873() /* ty=Tensor[(5, 14, 9), float32] */;
  (%587, %588)
}

def @func_11142() -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
  %589 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %590 = %589.1;
  %591 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
  (%590, %591)
}

def @func_5989(%var_5943: Tensor[(144), float64]) -> (Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) {
  %592 = cast(%var_5943, dtype="float64") /* ty=Tensor[(144), float64] */;
  %593 = cast(meta[relay.Constant][26] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %594 = reshape(%592, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %595 = reshape(%593, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %596 = @func_1549(%594, %595) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %597 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %599 = %596.1;
  %600 = cosh(%598) /* ty=Tensor[(8, 2, 11), float32] */;
  (%599, %var_5943, meta[relay.Constant][26] /* ty=Tensor[(432), float64] */, %600)
}

def @func_1128() -> Tensor[(5, 14, 9), float32] {
  @func_436() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8616() -> (Tensor[(5, 14, 9), float32],) {
  %601 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %602 = %601.0;
  (%602,)
}

def @func_10108() -> (Tensor[(5, 14, 9), float32],) {
  %603 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
  (%603,)
}

def @func_1717() -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) {
  %604 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %606 = acos(%605) /* ty=Tensor[(8, 2, 11), float32] */;
  %607 = cast(%604, dtype="int32") /* ty=Tensor[(8, 2, 11), int32] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="int32") /* ty=Tensor[(8, 2, 11), int32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %611 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %612 = multiply(%609, %610) /* ty=Tensor[(8, 2, 11), int32] */;
  (%611, %612)
}

def @func_10299() -> Tensor[(5, 14, 9), float32] {
  %613 = @func_3889() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %613.0
}

def @func_5025(%var_5009: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), bool],) {
  %614 = cast(%var_5009, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %615 = log2(%614) /* ty=Tensor[(5, 16, 16), float32] */;
  %616 = cast(%615, dtype="bool") /* ty=Tensor[(5, 16, 16), bool] */;
  %617 = shape_of(%var_5009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_5009, dtype="bool") /* ty=Tensor[(5, 16, 16), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = greater(%618, %619) /* ty=Tensor[(5, 16, 16), bool] */;
  (%620,)
}

def @func_7882() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %621 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %622 = @func_6861() /* ty=Tensor[(5, 14, 9), float32] */;
  %623 = %621.1;
  (%622, %623)
}

def @func_11404() -> (Tensor[(5, 14, 9), float32],) {
  %624 = @func_8842() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %625 = %624.3;
  (%625,)
}

def @func_11047(%var_11026: Tensor[(50, 15), uint64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(15, 5, 10), uint64], Tensor[(50, 15), uint64]) {
  %626 = @func_9868() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %627 = @func_10983() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) */;
  %628 = cast(%var_11026, dtype="uint64") /* ty=Tensor[(50, 15), uint64] */;
  %629 = reshape(%628, newshape=[750]) /* ty=Tensor[(750), uint64] */;
  %630 = @func_9486(%629) /* ty=(Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) */;
  %631 = %626.0;
  %632 = %627.0;
  %633 = %630.1;
  (%631, %632, %633, %var_11026)
}

def @func_12129(%var_12121: Tensor[(1, 324), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(1, 324), uint8]) {
  %634 = cast(%var_12121, dtype="uint8") /* ty=Tensor[(1, 324), uint8] */;
  %635 = reshape(%634, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
  %636 = @func_1142(%635) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
  %637 = @func_10324() /* ty=Tensor[(5, 14, 9), float32] */;
  %638 = %636.0;
  (%637, %638, %var_12121)
}

def @func_6472(%var_6459: Tensor[(4, 9, 10), int64]) -> (Tensor[(4, 9, 10), bool],) {
  %639 = cast(%var_6459, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
  %640 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 9, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 9, 10), int64] */, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = greater_equal(%641, %642) /* ty=Tensor[(4, 9, 10), bool] */;
  (%643,)
}

def @func_4054() -> Tensor[(5, 14, 9), float64] {
  %644 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  log10(%646) /* ty=Tensor[(5, 14, 9), float64] */
}

def @func_8785() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %647 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %648 = %647.0;
  %649 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
  (%648, %649)
}

def @func_7575() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %650 = @func_3749() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %651 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %652 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  %653 = %650.0;
  %654 = %651.0;
  %655 = @func_6891() /* ty=Tensor[(8, 2, 11), bool] */;
  (%652, %653, %654, %655)
}

def @func_3690() -> Tensor[(5, 14, 9), float32] {
  %656 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %656.0
}

def @func_10890() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %657 = @func_9994() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %658 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %659 = %657.0;
  %660 = %658.0;
  (%659, %660)
}

def @func_12873() -> Tensor[(5, 14, 9), float32] {
  %661 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %661.2
}

def @func_15315() -> Tensor[(5, 14, 9), float32] {
  %662 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %662.0
}

def @func_7331(%var_7313: Tensor[(8, 2, 11), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %663 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %664 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %665 = %664.1;
  %666 = cast(%var_7313, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = %663.1;
  %671 = less_equal(%668, %669) /* ty=Tensor[(8, 2, 11), bool] */;
  (%670, %671)
}

def @func_12049() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %672 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %673 = @func_8968() /* ty=Tensor[(5, 14, 9), float32] */;
  %674 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %675 = %672.0;
  (%673, %674, %675)
}

def @func_11586() -> (Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) {
  %676 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %677 = cast(meta[relay.Constant][28] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %678 = %676.1;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %680 = reshape(%677, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), float32] */;
  %681 = reshape(%679, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %682 = @func_586(%680, %681) /* ty=(Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) */;
  %683 = %682.0;
  (%678, %683, meta[relay.Constant][28] /* ty=Tensor[(264), float32] */)
}

def @func_13649() -> (Tensor[(5, 14, 9), float32],) {
  %684 = @func_10108() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %685 = %684.0;
  (%685,)
}

def @func_11864() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) {
  %686 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %687 = cast(meta[relay.Constant][29] /* ty=Tensor[(30, 9), float64] */, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %688 = reshape(%687, newshape=[9, 3, 10]) /* ty=Tensor[(9, 3, 10), float64] */;
  %689 = @func_9592(%688) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) */;
  %690 = cast(meta[relay.Constant][29] /* ty=Tensor[(30, 9), float64] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %691 = %686.0;
  %692 = %689.0;
  %693 = erf(%690) /* ty=Tensor[(30, 9), float32] */;
  (%691, %692, %693)
}

def @func_5326() -> Tensor[(5, 14, 9), float32] {
  %694 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %694.1
}

def @func_6817() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %695 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %696 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
  %697 = %695.1;
  (%696, %697)
}

def @func_10483(%var_10457: Tensor[(9, 14, 15), float32]) -> Tensor[(9, 14, 15), float32] {
  %698 = cast(%var_10457, dtype="float32") /* ty=Tensor[(9, 14, 15), float32] */;
  atanh(%698) /* ty=Tensor[(9, 14, 15), float32] */
}

def @func_8103() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %699 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
  %700 = @func_7030() /* ty=Tensor[(840), float64] */;
  (%699, %700)
}

def @func_14901(%var_14885: Tensor[(5, 84), uint16], %var_14897: Tensor[(5, 84), uint16]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 84), bool]) {
  %701 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %702 = @func_11687() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %703 = cast(%var_14885, dtype="uint16") /* ty=Tensor[(5, 84), uint16] */;
  %704 = reshape(%703, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), uint16] */;
  %705 = @func_8415(%704) /* ty=(Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) */;
  %706 = @func_12637() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %707 = @func_13811() /* ty=(Tensor[(8, 2, 11), float64],) */;
  %708 = cast(%var_14897, dtype="bool") /* ty=Tensor[(5, 84), bool] */;
  %709 = shape_of(%var_14885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %710 = cast(%var_14885, dtype="bool") /* ty=Tensor[(5, 84), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %712 = %701.1;
  %713 = @func_9691() /* ty=Tensor[(5, 14, 9), float32] */;
  %714 = %702.0;
  %715 = %705.2;
  %716 = %706.0;
  %717 = %707.0;
  %718 = logical_or(%710, %711) /* ty=Tensor[(5, 84), bool] */;
  (%712, %713, %714, %715, %716, %717, %718)
}

def @func_2021() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %719 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %720 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %721 = %719.0;
  %722 = %720.1;
  (%721, %722)
}

def @func_4397() -> (Tensor[(5, 14, 9), float32],) {
  %723 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %724 = %723.0;
  (%724,)
}

def @func_5998() -> Tensor[(5, 14, 9), float32] {
  %725 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %725.0
}

def @func_15107() -> (Tensor[(5, 14, 9), float32],) {
  %726 = @func_5391() /* ty=Tensor[(5, 14, 9), float32] */;
  (%726,)
}

def @func_11822() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %727 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %728 = %727.0;
  %729 = @func_4831() /* ty=Tensor[(840), float64] */;
  (%728, %729)
}

def @func_12978() -> Tensor[(5, 14, 9), float32] {
  @func_5998() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4651() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %730 = @func_3889() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %731 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %732 = %730.0;
  %733 = %731.0;
  (%732, %733)
}

def @func_3889() -> (Tensor[(5, 14, 9), float32],) {
  %734 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %735 = %734.0;
  (%735,)
}

def @func_6327() -> (Tensor[(5, 14, 9), float32],) {
  %736 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
  (%736,)
}

def @func_14953() -> (Tensor[(5, 14, 9), float32],) {
  %737 = @func_13580() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %738 = %737.1;
  (%738,)
}

def @func_3502() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %739 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %740 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %741 = %739.0;
  %742 = %740.0;
  (%741, %742)
}

def @func_14087() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %743 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %744 = @func_13649() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %745 = @func_10108() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %746 = %743.0;
  %747 = %744.0;
  %748 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %749 = %745.0;
  (%746, %747, %748, %749)
}

def @func_4140() -> (Tensor[(5, 14, 9), float32],) {
  %750 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%750,)
}

def @func_11910(%var_11902: Tensor[(7, 1, 11), float32]) -> Tensor[(7, 1, 11), float32] {
  %751 = cast(%var_11902, dtype="float32") /* ty=Tensor[(7, 1, 11), float32] */;
  tan(%751) /* ty=Tensor[(7, 1, 11), float32] */
}

def @func_13811() -> (Tensor[(8, 2, 11), float64],) {
  %752 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %753 = %752.1;
  %754 = cast(%753, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %755 = log(%754) /* ty=Tensor[(8, 2, 11), float32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
  %757 = asinh(%756) /* ty=Tensor[(8, 2, 11), float64] */;
  (%757,)
}

def @func_7177() -> (Tensor[(5, 14, 9), float32],) {
  %758 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %759 = %758.0;
  (%759,)
}

def @func_7912() -> (Tensor[(5, 14, 9), float32],) {
  %760 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  (%760,)
}

def @func_393() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %761 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %762 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %763 = %761.0;
  %764 = %762.3;
  (%763, %764)
}

def @func_11746() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %765 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %766 = @func_8889() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %767 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %768 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %769 = %765.0;
  %770 = %766.0;
  %771 = %767.1;
  %772 = %768.0;
  (%769, %770, %771, %772)
}

def @func_9941() -> (Tensor[(840), float64],) {
  %773 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %774 = %773.3;
  (%774,)
}

def @func_5865() -> Tensor[(5, 14, 9), float32] {
  %775 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
  %775.0
}

def @func_14753() -> (Tensor[(5, 14, 9), float32],) {
  %776 = @func_7611() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %777 = %776.0;
  (%777,)
}

def @func_8057() -> Tensor[(5, 14, 9), float32] {
  @func_6137() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_12569(%var_12548: Tensor[(16, 5, 14), bool], %var_12549: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) {
  %778 = cast(%var_12549, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %779 = shape_of(%var_12548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%var_12548, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %783 = logical_or(%780, %781) /* ty=Tensor[(16, 5, 14), bool] */;
  %784 = %782.1;
  (%783, %784)
}

def @func_1198() -> Tensor[(5, 14, 9), float32] {
  %785 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %785.0
}

def @func_2918() -> (Tensor[(5, 14, 9), float32],) {
  %786 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %787 = %786.1;
  (%787,)
}

def @func_14647() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %788 = @func_12285() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %789 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %790 = %788.0;
  (%789, %790)
}

def @func_8415(%var_8389: Tensor[(2, 14, 15), uint16]) -> (Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) {
  %791 = cast(%var_8389, dtype="uint16") /* ty=Tensor[(2, 14, 15), uint16] */;
  %792 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="uint16") /* ty=Tensor[(2, 14, 15), uint16] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %795 = minimum(%793, %794) /* ty=Tensor[(2, 14, 15), uint16] */;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
  %797 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %798 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
  %799 = shape_of(%var_8389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%var_8389, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = sinh(%796) /* ty=Tensor[(2, 14, 15), float32] */;
  %803 = @func_4054() /* ty=Tensor[(5, 14, 9), float64] */;
  %804 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %805 = %797.1;
  %806 = less_equal(%800, %801) /* ty=Tensor[(2, 14, 15), bool] */;
  (%802, %803, %804, %805, %806)
}

def @func_228(%var_221: Tensor[(5, 14, 9), float32]) -> Tensor[(5, 14, 9), int8] {
  %807 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %808 = %807.0;
  %809 = cast(%var_221, dtype="int8") /* ty=Tensor[(5, 14, 9), int8] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="int8") /* ty=Tensor[(5, 14, 9), int8] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%811, %812) /* ty=Tensor[(5, 14, 9), int8] */
}

def @func_15975() -> (Tensor[(5, 14, 9), float32],) {
  %813 = @func_15655() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %814 = %813.1;
  (%814,)
}

def @func_12792() -> Tensor[(5, 14, 9), float32] {
  %815 = @func_6213() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %815.1
}

def @func_11254() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %816 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  %817 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
  (%816, %817)
}

def @func_9416() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
  %818 = @func_9228() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %819 = %818.0;
  %820 = @func_7140() /* ty=Tensor[(5, 14, 9), float32] */;
  (%819, %820)
}

def @func_3854() -> (Tensor[(8, 2, 11), bool],) {
  %821 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  (%821,)
}

def @func_6137() -> Tensor[(5, 14, 9), float32] {
  @func_1446() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_6063() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %822 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %823 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %824 = %822.0;
  (%823, %824)
}

def @func_8270() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %825 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %826 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  %827 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
  %828 = %825.0;
  (%826, %827, %828)
}

def @func_6243() -> Tensor[(5, 14, 9), float32] {
  %829 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %829.0
}

def @func_6610(%var_6591: Tensor[(6, 12, 16), int64], %var_6592: Tensor[(6, 12, 16), int64]) -> (Tensor[(6, 12, 16), float64],) {
  %830 = cast(%var_6592, dtype="int64") /* ty=Tensor[(6, 12, 16), int64] */;
  %831 = shape_of(%var_6591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_6591, dtype="int64") /* ty=Tensor[(6, 12, 16), int64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %834 = bitwise_xor(%832, %833) /* ty=Tensor[(6, 12, 16), int64] */;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(6, 12, 16), float64] */;
  %836 = log2(%835) /* ty=Tensor[(6, 12, 16), float64] */;
  (%836,)
}

def @func_10983() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) {
  %837 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 144), float32] */, dtype="float32") /* ty=Tensor[(8, 144), float32] */;
  %838 = cast(meta[relay.Constant][32] /* ty=Tensor[(66, 4), float32] */, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
  %839 = reshape(%837, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), float32] */;
  %840 = reshape(%838, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %841 = @func_8579(%839, %840) /* ty=(Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) */;
  %842 = %841.1;
  %843 = cast(%842, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %844 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %845 = sigmoid(%843) /* ty=Tensor[(5, 14, 9), float32] */;
  (%844, meta[relay.Constant][31] /* ty=Tensor[(8, 144), float32] */, meta[relay.Constant][32] /* ty=Tensor[(66, 4), float32] */, %845)
}

def @func_13125() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %846 = @func_12159() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %847 = @func_5998() /* ty=Tensor[(5, 14, 9), float32] */;
  %848 = %846.0;
  (%847, %848)
}

def @func_13960() -> (Tensor[(5, 14, 9), float32],) {
  %849 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %850 = %849.0;
  (%850,)
}

def @func_10811() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %851 = @func_6327() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %852 = @func_8785() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %853 = %851.0;
  %854 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %855 = %852.0;
  (%853, %854, %855)
}

def @func_3014() -> (Tensor[(5, 14, 9), float32],) {
  %856 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %857 = %856.0;
  (%857,)
}

def @func_352() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %858 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %859 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %860 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %861 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %862 = %858.2;
  %863 = %859.0;
  %864 = %860.0;
  %865 = %861.0;
  (%862, %863, %864, %865)
}

def @func_12314() -> Tensor[(5, 14, 9), float32] {
  %866 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %866.0
}

def @func_10324() -> Tensor[(5, 14, 9), float32] {
  %867 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %867.0
}

def @func_3215() -> Tensor[(5, 14, 9), float32] {
  %868 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %868.0
}

def @func_8172() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %869 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %870 = @func_7575() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %871 = %869.1;
  %872 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
  %873 = %870.0;
  (%871, %872, %873)
}

def @func_5127(%var_5105: Tensor[(10, 5, 13), int64], %var_5106: Tensor[(10, 5, 13), int64], %var_5110: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), bool]) {
  %874 = cast(%var_5106, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
  %875 = shape_of(%var_5105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%var_5105, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %878 = cast(%var_5110, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
  %879 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%var_5106, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %882 = bitwise_or(%880, %881) /* ty=Tensor[(10, 5, 13), uint32] */;
  %883 = cast(%var_5110, dtype="bool") /* ty=Tensor[(10, 5, 13), bool] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="bool") /* ty=Tensor[(10, 5, 13), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = minimum(%876, %877) /* ty=Tensor[(10, 5, 13), int64] */;
  %888 = equal(%885, %886) /* ty=Tensor[(10, 5, 13), bool] */;
  (%887, %888)
}

def @func_12637() -> (Tensor[(5, 14, 9), float32],) {
  %889 = @func_9566() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %890 = %889.0;
  (%890,)
}

def @func_7129(%var_7113: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(78), int64], Tensor[(132, 2), float32]) {
  %891 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %892 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %893 = %892.1;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %895 = asin(%894) /* ty=Tensor[(8, 2, 11), float32] */;
  %896 = cast(%895, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %897 = cast(meta[relay.Constant][33] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %898 = cast(%var_7113, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %899 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
  %900 = cast(%899, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %901 = reshape(%897, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %902 = reshape(%898, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %903 = reshape(%900, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %904 = @func_1885(%901, %902, %903) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %905 = %891.0;
  %906 = atan(%896) /* ty=Tensor[(8, 2, 11), float32] */;
  %907 = %904.1;
  (%905, %906, %899, %907, meta[relay.Constant][33] /* ty=Tensor[(78), int64] */, %var_7113)
}

def @func_6873() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %908 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %909 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
  %910 = %908.0;
  (%909, %910)
}

def @func_1645() -> (Tensor[(5, 14, 9), float32],) {
  %911 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %912 = %911.0;
  (%912,)
}

def @func_5493() -> Tensor[(5, 14, 9), float32] {
  %913 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %913.0
}

def @func_8842() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %914 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %915 = @func_7493() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %916 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
  %917 = %914.3;
  %918 = @func_5857() /* ty=Tensor[(5, 14, 9), float32] */;
  %919 = %915.1;
  (%916, %917, %918, %919)
}

def @func_12238() -> Tensor[(5, 14, 9), float32] {
  @func_6433() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_14998(%var_14992: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
  %920 = cast(%var_14992, dtype="float32") /* ty=Tensor[(2, 11, 11), float32] */;
  tan(%920) /* ty=Tensor[(2, 11, 11), float32] */
}

def @func_2577() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) {
  %921 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %922 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %923 = reshape(%922, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float64] */;
  %924 = @func_698(%923) /* ty=(Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %925 = %921.3;
  %926 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  %927 = %924.0;
  (%925, %926, %927, meta[relay.Constant][34] /* ty=Tensor[(840), float64] */)
}

def @func_12310() -> (Tensor[(5, 14, 9), float32],) {
  %928 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
  (%928,)
}

def @func_14588(%var_14574: Tensor[(144), float64], %var_14585: Tensor[(3, 360), bool]) -> (Tensor[(8, 2, 11), float64], Tensor[(432), float64], Tensor[(144), float64], Tensor[(9, 15, 8), bool], Tensor[(3, 360), bool]) {
  %929 = @func_13811() /* ty=(Tensor[(8, 2, 11), float64],) */;
  %930 = cast(%var_14574, dtype="float64") /* ty=Tensor[(144), float64] */;
  %931 = reshape(%930, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %932 = @func_10764(%931) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) */;
  %933 = cast(%var_14585, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
  %934 = reshape(%933, newshape=[9, 15, 8]) /* ty=Tensor[(9, 15, 8), bool] */;
  %935 = @func_10070(%934) /* ty=(Tensor[(9, 15, 8), bool],) */;
  %936 = %929.0;
  %937 = %932.3;
  %938 = %935.0;
  (%936, %937, %var_14574, %938, %var_14585)
}

def @func_9246() -> (Tensor[(6, 11, 13), float64],) {
  %939 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %940 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(6, 11, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %943 = floor_mod(%941, %942) /* ty=Tensor[(6, 11, 13), float64] */;
  (%943,)
}

def @func_12285() -> (Tensor[(5, 14, 9), float32],) {
  %944 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %945 = %944.1;
  (%945,)
}

def @func_1431() -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
  %946 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %947 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %948 = %946.1;
  %949 = %947.0;
  (%948, %949)
}

def @func_13329(%var_13237: Tensor[(144), float64], %var_13238: Tensor[(432), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %950 = cast(%var_13237, dtype="float64") /* ty=Tensor[(144), float64] */;
  %951 = cast(%var_13238, dtype="float64") /* ty=Tensor[(432), float64] */;
  %952 = reshape(%950, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %953 = reshape(%951, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %954 = @func_1549(%952, %953) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %955 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %956 = @func_5827() /* ty=Tensor[(5, 14, 9), float32] */;
  %957 = %954.1;
  %958 = %955.2;
  %959 = @func_12792() /* ty=Tensor[(5, 14, 9), float32] */;
  (%956, %957, %var_13237, %var_13238, %958, %959)
}

def @func_4901() -> (Tensor[(5, 14, 9), float32],) {
  %960 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %961 = %960.0;
  (%961,)
}

def @func_6891() -> Tensor[(8, 2, 11), bool] {
  @func_1570() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_10401() -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) {
  %962 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %963 = cast(meta[relay.Constant][37] /* ty=Tensor[(1287), uint8] */, dtype="uint8") /* ty=Tensor[(1287), uint8] */;
  %964 = reshape(%963, newshape=[1287]) /* ty=Tensor[(1287), uint8] */;
  %965 = @func_3095(%964) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %966 = @func_9566() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %967 = cast(meta[relay.Constant][37] /* ty=Tensor[(1287), uint8] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %968 = cosh(%967) /* ty=Tensor[(1287), float32] */;
  %969 = cast(%968, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %970 = cast(meta[relay.Constant][38] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %971 = reshape(%970, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %972 = @func_8554(%971) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) */;
  %973 = %972.2;
  %974 = cast(%973, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
  %975 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(576, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %976 = cast(meta[relay.Constant][38] /* ty=Tensor[(576, 2), int64] */, dtype="uint64") /* ty=Tensor[(576, 2), uint64] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %978 = %962.0;
  %979 = %965.4;
  %980 = %966.0;
  %981 = sinh(%969) /* ty=Tensor[(1287), float32] */;
  %982 = minimum(%976, %977) /* ty=Tensor[(576, 2), uint64] */;
  (%978, %979, %980, %981, %982)
}

def @func_10349() -> Tensor[(5, 14, 9), float32] {
  %983 = @func_7177() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %983.0
}

def @func_1381() -> Tensor[(5, 14, 9), float32] {
  @func_436() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_9566() -> (Tensor[(5, 14, 9), float32],) {
  %984 = @func_9387() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %985 = %984.0;
  (%985,)
}

def @func_7455(%var_7425: uint64) -> (Tensor[(3, 1), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %986 = cast(%var_7425, dtype="bool") /* ty=bool */;
  %987 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 1), uint64] */, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  %988 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %989 = greater(%986, %987) /* ty=Tensor[(3, 1), bool] */;
  %990 = %988.0;
  %991 = @func_5827() /* ty=Tensor[(5, 14, 9), float32] */;
  (%989, %990, %991)
}

def @func_3035() -> Tensor[(5, 14, 9), float32] {
  %992 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %992.0
}

def @func_1029() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %993 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %994 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %995 = %993.0;
  %996 = %994.0;
  (%995, %996)
}

def @func_117() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %997 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %998 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %999 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1000 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1001 = %997.0;
  %1002 = %998.0;
  %1003 = %999.0;
  %1004 = %1000.0;
  (%1001, %1002, %1003, %1004)
}

def @func_13553() -> (Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %1005 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1006 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %1007 = @func_3515() /* ty=Tensor[(840), float64] */;
  %1008 = %1005.0;
  %1009 = %1006.1;
  (%1007, %1008, %1009)
}

def @func_158(%var_137: Tensor[(7, 3, 8), uint32], %var_138: Tensor[(7, 3, 8), uint32]) -> Tensor[(7, 3, 8), bool] {
  %1010 = cast(%var_138, dtype="bool") /* ty=Tensor[(7, 3, 8), bool] */;
  %1011 = shape_of(%var_137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(%var_137, dtype="bool") /* ty=Tensor[(7, 3, 8), bool] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%1012, %1013) /* ty=Tensor[(7, 3, 8), bool] */
}

def @func_4831() -> Tensor[(840), float64] {
  @func_3515() /* ty=Tensor[(840), float64] */
}

def @func_11991() -> Tensor[(5, 14, 9), float32] {
  @func_11000() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11000() -> Tensor[(5, 14, 9), float32] {
  @func_7140() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4850() -> (Tensor[(11, 1, 4), int32],) {
  %1014 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1015 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 1, 4), int32] */, dtype="int32") /* ty=Tensor[(11, 1, 4), int32] */;
  %1016 = left_shift(%1014, %1015) /* ty=Tensor[(11, 1, 4), int32] */;
  (%1016,)
}

def @func_12526() -> Tensor[(5, 14, 9), bool] {
  %1017 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %1017.1
}

def @func_643() -> Tensor[(5, 14, 9), float32] {
  %1018 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1018.0
}

def @func_2355(%var_2350: Tensor[(168), uint32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  %1019 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1020 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1021 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1022 = reshape(%1020, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1023 = reshape(%1021, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1024 = %1019.0;
  %1025 = @func_158(%1022, %1023) /* ty=Tensor[(7, 3, 8), bool] */;
  (%1024, %1025, %var_2350)
}

def @func_5540(%var_5519: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32]) {
  %1026 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1027 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1028 = shape_of(%var_5519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1031 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1032 = sigmoid(%1026) /* ty=Tensor[(3, 8, 3), float32] */;
  %1033 = floor_mod(%1029, %1030) /* ty=Tensor[(3, 8, 3), float32] */;
  %1034 = atanh(%1031) /* ty=Tensor[(3, 8, 3), float32] */;
  (%1032, %1033, %1034)
}

def @func_11687() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1035 = @func_5091() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */;
  %1036 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %1037 = %1035.1;
  (%1036, %1037)
}

def @func_15962(%var_15939: Tensor[(9, 3, 10), float32], %var_15940: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
  %1038 = cast(%var_15940, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %1039 = shape_of(%var_15939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1040 = cast(%var_15939, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1042 = floor_divide(%1040, %1041) /* ty=Tensor[(9, 3, 10), float32] */;
  %1043 = cast(%var_15939, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %1044 = shape_of(%1042, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1045 = cast(%1042, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1047 = mod(%1045, %1046) /* ty=Tensor[(9, 3, 10), float32] */;
  (%1047,)
}

def @func_13935() -> Tensor[(5, 14, 9), float32] {
  @func_1198() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1183() -> (Tensor[(5, 14, 9), float32],) {
  %1048 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1049 = %1048.3;
  (%1049,)
}

def @func_5857() -> Tensor[(5, 14, 9), float32] {
  %1050 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %1050.1
}

def @func_11523() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %1051 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1052 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %1053 = %1051.0;
  %1054 = %1052.0;
  (%1053, %1054)
}

def @func_6433() -> Tensor[(5, 14, 9), float32] {
  %1055 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1055.0
}

def @func_8732(%var_8704: Tensor[(168), uint32], %var_8710: Tensor[(26, 3), int64], %var_8711: Tensor[(3, 88), float32], %var_8715: Tensor[(3, 88), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(168), uint32], Tensor[(3, 88), float32], Tensor[(26, 3), int64], Tensor[(3, 88), float64], Tensor[(5, 14, 9), float32]) {
  %1056 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %1057 = @func_4651() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1058 = cast(%var_8704, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1059 = reshape(%1058, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %1060 = @func_2355(%1059) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %1061 = cast(%var_8704, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1062 = cast(%var_8710, dtype="int64") /* ty=Tensor[(26, 3), int64] */;
  %1063 = cast(%var_8711, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %1064 = reshape(%1061, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %1065 = reshape(%1062, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %1066 = reshape(%1063, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
  %1067 = @func_3432(%1064, %1065, %1066) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
  %1068 = cast(%var_8715, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %1069 = shape_of(%var_8711, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1070 = cast(%var_8711, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1072 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1073 = %1056.1;
  %1074 = %1057.1;
  %1075 = %1060.0;
  %1076 = %1067.5;
  %1077 = floor_mod(%1070, %1071) /* ty=Tensor[(3, 88), float64] */;
  %1078 = %1072.1;
  (%1073, %1074, %1075, %var_8704, %1076, %var_8710, %1077, %1078)
}

def @func_8554(%var_8525: Tensor[(1152), int64]) -> (Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) {
  %1079 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1080 = cast(%var_8525, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %1081 = cast(%var_8525, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %1082 = reshape(%1080, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %1083 = reshape(%1081, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %1084 = @func_6610(%1082, %1083) /* ty=(Tensor[(6, 12, 16), float64],) */;
  %1085 = %1084.0;
  %1086 = cast(%1085, dtype="float64") /* ty=Tensor[(6, 12, 16), float64] */;
  %1087 = %1079.1;
  %1088 = sqrt(%1086) /* ty=Tensor[(6, 12, 16), float64] */;
  (%1087, %var_8525, %1088)
}

def @func_12843() -> Tensor[(5, 14, 9), float32] {
  %1089 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1089.1
}

def @func_14724() -> Tensor[(5, 14, 9), float32] {
  @func_6243() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8319() -> (Tensor[(8, 2, 11), bool],) {
  %1090 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  (%1090,)
}

def @func_15607() -> (Tensor[(5, 14, 9), float32],) {
  %1091 = @func_12291() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1092 = %1091.0;
  (%1092,)
}

def @func_3432(%var_3406: Tensor[(168), uint32], %var_3416: Tensor[(78), int64], %var_3417: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) {
  %1093 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1094 = cast(%var_3406, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1095 = cast(%var_3406, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1096 = reshape(%1094, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1097 = reshape(%1095, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1098 = cast(%var_3416, dtype="int64") /* ty=Tensor[(78), int64] */;
  %1099 = cast(%var_3417, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %1100 = %1093.0;
  %1101 = cast(%1100, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %1102 = reshape(%1098, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %1103 = reshape(%1099, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %1104 = reshape(%1101, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %1105 = @func_1885(%1102, %1103, %1104) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %1106 = %1105.2;
  %1107 = cast(%1106, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %1108 = @func_158(%1096, %1097) /* ty=Tensor[(7, 3, 8), bool] */;
  %1109 = acosh(%1107) /* ty=Tensor[(3, 88), float32] */;
  (%1100, %1108, %var_3406, %var_3416, %var_3417, %1109)
}

def @func_13020() -> Tensor[(5, 14, 9), float32] {
  %1110 = @func_10401() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) */;
  %1110.2
}

def @func_9868() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1111 = @func_3502() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1112 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1113 = %1111.1;
  %1114 = %1112.3;
  (%1113, %1114)
}

def @func_14417() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1115 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1116 = @func_13788() /* ty=Tensor[(5, 14, 9), float32] */;
  %1117 = %1115.0;
  (%1116, %1117)
}

def @func_779() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1118 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %1119 = cast(%1118, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %1120 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1121 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %1122 = rsqrt(%1119) /* ty=Tensor[(5, 14, 9), float32] */;
  %1123 = %1120.0;
  %1124 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  (%1121, %1122, %1123, %1124)
}

def @func_2195(%var_2121: Tensor[(9, 11, 13), uint8], %var_2166: Tensor[(9, 11, 13), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) {
  %1125 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1126 = %1125.0;
  %1127 = cast(%1126, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %1128 = reshape(%1127, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), float32] */;
  %1129 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 11, 13), uint8] */, dtype="uint8") /* ty=Tensor[(1, 11, 13), uint8] */;
  %1130 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(9, 11, 13), uint8] */;
  %1131 = bitwise_and(%1129, %1130) /* ty=Tensor[(9, 11, 13), uint8] */;
  %1132 = cast(%1131, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %1133 = sin(%1132) /* ty=Tensor[(9, 11, 13), float64] */;
  %1134 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 11, 13), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %1135 = shape_of(%1133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1136 = cast(%1133, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %1137 = dyn.reshape(%1134, %1135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1138 = cast(%var_2166, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %1139 = shape_of(%1133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1140 = cast(%1133, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %1141 = dyn.reshape(%1138, %1139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1142 = cast(meta[relay.Constant][44] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1143 = cast(meta[relay.Constant][44] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1144 = reshape(%1142, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1145 = reshape(%1143, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1146 = cast(%var_2121, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %1147 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1148 = @func_228(%1128) /* ty=Tensor[(5, 14, 9), int8] */;
  %1149 = logical_or(%1136, %1137) /* ty=Tensor[(9, 11, 13), bool] */;
  %1150 = logical_and(%1140, %1141) /* ty=Tensor[(9, 11, 13), bool] */;
  %1151 = @func_158(%1144, %1145) /* ty=Tensor[(7, 3, 8), bool] */;
  %1152 = log(%1146) /* ty=Tensor[(9, 11, 13), float64] */;
  %1153 = %1147.3;
  (%1126, %1148, %1149, %1150, %1151, meta[relay.Constant][44] /* ty=Tensor[(168), uint32] */, %1152, %1153)
}

def @func_7611() -> (Tensor[(5, 14, 9), float32],) {
  %1154 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %1155 = %1154.0;
  (%1155,)
}

def @func_11104() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1156 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1157 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1158 = @func_9205() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1159 = %1156.0;
  %1160 = %1157.0;
  %1161 = %1158.3;
  (%1159, %1160, %1161)
}

def @func_15542() -> (Tensor[(5, 14, 9), float32],) {
  %1162 = @func_14809() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1163 = %1162.1;
  (%1163,)
}

def @func_5892() -> (Tensor[(5, 14, 9), float32],) {
  %1164 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1165 = %1164.0;
  (%1165,)
}

def @func_9051() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %1166 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1167 = %1166.0;
  %1168 = @func_4831() /* ty=Tensor[(840), float64] */;
  (%1167, %1168)
}

def @func_14692() -> (Tensor[(5, 14, 9), float32],) {
  %1169 = @func_6327() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_1446() -> Tensor[(5, 14, 9), float32] {
  %1171 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %1171.1
}

def @func_4122(%var_4093: Tensor[(5, 14, 9), float32]) -> (Tensor[(144), float64], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1172 = @func_3481() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) */;
  %1173 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1174 = %1173.1;
  %1175 = cast(%var_4093, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %1176 = shape_of(%1174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1177 = cast(%1174, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %1178 = dyn.reshape(%1175, %1176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1179 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1180 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1181 = %1172.3;
  %1182 = greater(%1177, %1178) /* ty=Tensor[(5, 14, 9), bool] */;
  %1183 = %1179.0;
  %1184 = %1180.1;
  (%1181, %1182, %1183, %1184)
}

def @func_3273(%var_3259: Tensor[(264), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(3, 88), float32], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float32]) {
  %1185 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1186 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1187 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1188 = cast(meta[relay.Constant][45] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %1189 = cast(%var_3259, dtype="float32") /* ty=Tensor[(264), float32] */;
  %1190 = %1186.0;
  %1191 = cast(%1190, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %1192 = reshape(%1188, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %1193 = reshape(%1189, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %1194 = reshape(%1191, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %1195 = @func_1885(%1192, %1193, %1194) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %1196 = %1185.0;
  %1197 = %1187.3;
  %1198 = @func_1381() /* ty=Tensor[(5, 14, 9), float32] */;
  %1199 = %1195.2;
  %1200 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%1196, %1190, %1197, %1198, %1199, meta[relay.Constant][45] /* ty=Tensor[(78), int64] */, %var_3259, %1200)
}

def @func_24() -> (Tensor[(5, 14, 9), float32],) {
  %1201 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %1202 = atan(%1201) /* ty=Tensor[(5, 14, 9), float32] */;
  (%1202,)
}

def @func_10070(%var_10058: Tensor[(9, 15, 8), bool]) -> (Tensor[(9, 15, 8), bool],) {
  %1203 = cast(%var_10058, dtype="bool") /* ty=Tensor[(9, 15, 8), bool] */;
  %1204 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(9, 15, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1205 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 15, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 8), bool] */;
  %1206 = dyn.reshape(%1203, %1204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1207 = logical_or(%1205, %1206) /* ty=Tensor[(9, 15, 8), bool] */;
  (%1207,)
}

def @func_8235() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %1208 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1209 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
  %1210 = %1208.1;
  (%1209, %1210)
}

def @func_7805() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %1211 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
  %1212 = @func_3910() /* ty=(Tensor[(840), float64],) */;
  %1213 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1214 = %1211.0;
  %1215 = %1212.0;
  %1216 = %1213.0;
  (%1214, %1215, %1216)
}

def @func_14672() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1217 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1218 = %1217.0;
  %1219 = @func_12978() /* ty=Tensor[(5, 14, 9), float32] */;
  (%1218, %1219)
}

def @func_7493() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1220 = @func_4901() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1221 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %1222 = %1220.0;
  (%1221, %1222)
}

def @func_8507() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1223 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1224 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1225 = %1223.2;
  %1226 = %1224.0;
  (%1225, %1226)
}

def @func_15308() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1227 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %1228 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
  %1229 = %1227.1;
  (%1228, %1229)
}

def @func_13580() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1230 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %1231 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1232 = %1230.0;
  %1233 = %1231.1;
  (%1232, %1233)
}

def @func_15257(%var_15241: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(6, 44), float32], Tensor[(5, 14, 9), float32]) {
  %1234 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1235 = cast(meta[relay.Constant][48] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1236 = cast(%var_15241, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %1237 = cast(%var_15241, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %1238 = reshape(%1235, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint32] */;
  %1239 = reshape(%1236, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %1240 = reshape(%1237, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %1241 = @func_5603(%1238, %1239, %1240) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) */;
  %1242 = @func_7069() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %1243 = %1234.1;
  %1244 = @func_3035() /* ty=Tensor[(5, 14, 9), float32] */;
  %1245 = %1241.5;
  %1246 = %1242.0;
  (%1243, %1244, %1245, meta[relay.Constant][48] /* ty=Tensor[(168), uint32] */, %var_15241, %1246)
}

def @func_4504() -> Tensor[(5, 14, 9), float32] {
  %1247 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1247.0
}

def @func_12159() -> (Tensor[(5, 14, 9), float32],) {
  %1248 = @func_11404() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1249 = %1248.0;
  (%1249,)
}

def @func_7993() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1250 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1251 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1252 = @func_4670() /* ty=Tensor[(5, 14, 9), float32] */;
  %1253 = %1250.0;
  %1254 = %1251.0;
  (%1252, %1253, %1254)
}

def @func_1549(%var_1510: Tensor[(1, 12, 12), float64], %var_1543: Tensor[(3, 12, 12), float64]) -> (Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) {
  %1255 = cast(%var_1510, dtype="float64") /* ty=Tensor[(1, 12, 12), float64] */;
  %1256 = rsqrt(%1255) /* ty=Tensor[(1, 12, 12), float64] */;
  %1257 = cast(%1256, dtype="float32") /* ty=Tensor[(1, 12, 12), float32] */;
  %1258 = acos(%1257) /* ty=Tensor[(1, 12, 12), float32] */;
  %1259 = cast(%1256, dtype="int64") /* ty=Tensor[(1, 12, 12), int64] */;
  %1260 = shape_of(%1258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1261 = cast(%1258, dtype="int64") /* ty=Tensor[(1, 12, 12), int64] */;
  %1262 = dyn.reshape(%1259, %1260, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1263 = cast(%1256, dtype="int8") /* ty=Tensor[(1, 12, 12), int8] */;
  %1264 = cast(%var_1543, dtype="int8") /* ty=Tensor[(3, 12, 12), int8] */;
  %1265 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1266 = bitwise_and(%1261, %1262) /* ty=Tensor[(?, 12, 12), int64] */;
  %1267 = bitwise_xor(%1263, %1264) /* ty=Tensor[(3, 12, 12), int8] */;
  %1268 = %1265.0;
  (%1266, %1267, %1268)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4651() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %0 = @func_3889() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_230(%var_229: Tensor[(5, 14, 9), float32]) -> Tensor[(5, 14, 9), int8] {
  %10 = fn (%var_221: Tensor[(5, 14, 9), float32]) -> Tensor[(5, 14, 9), int8] {
    %4 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %5 = %4.0;
    %6 = cast(%var_221, dtype="int8") /* ty=Tensor[(5, 14, 9), int8] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="int8") /* ty=Tensor[(5, 14, 9), int8] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    logical_xor(%8, %9) /* ty=Tensor[(5, 14, 9), int8] */
  };
  %10(%var_229) /* ty=Tensor[(5, 14, 9), int8] */
}

def @func_14588(%var_14574: Tensor[(144), float64], %var_14585: Tensor[(3, 360), bool]) -> (Tensor[(8, 2, 11), float64], Tensor[(432), float64], Tensor[(144), float64], Tensor[(9, 15, 8), bool], Tensor[(3, 360), bool]) {
  %11 = @func_13811() /* ty=(Tensor[(8, 2, 11), float64],) */;
  %12 = cast(%var_14574, dtype="float64") /* ty=Tensor[(144), float64] */;
  %13 = reshape(%12, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %14 = @func_10764(%13) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) */;
  %15 = cast(%var_14585, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
  %16 = reshape(%15, newshape=[9, 15, 8]) /* ty=Tensor[(9, 15, 8), bool] */;
  %17 = @func_10070(%16) /* ty=(Tensor[(9, 15, 8), bool],) */;
  %18 = %11.0;
  %19 = %14.3;
  %20 = %17.0;
  (%18, %19, %var_14574, %20, %var_14585)
}

def @func_12316() -> Tensor[(5, 14, 9), float32] {
  @func_12314() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8629() -> (Tensor[(5, 14, 9), float32],) {
  @func_8627() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_15107() -> (Tensor[(5, 14, 9), float32],) {
  %21 = @func_5391() /* ty=Tensor[(5, 14, 9), float32] */;
  (%21,)
}

def @func_1507() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %22 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %23 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %24 = %22.2;
  %25 = %23.0;
  (%24, %25)
}

def @func_12706() -> Tensor[(840), float64] {
  %26 = fn () -> Tensor[(840), float64] {
    @func_4831() /* ty=Tensor[(840), float64] */
  };
  %26() /* ty=Tensor[(840), float64] */
}

def @func_14418() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %30 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %27 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %28 = @func_13788() /* ty=Tensor[(5, 14, 9), float32] */;
    %29 = %27.0;
    (%28, %29)
  };
  %30() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_12286() -> (Tensor[(5, 14, 9), float32],) {
  %33 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %31 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
    %32 = %31.1;
    (%32,)
  };
  %33() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_6862() -> Tensor[(5, 14, 9), float32] {
  %34 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_5827() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %34() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11747() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %43 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %35 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %36 = @func_8889() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %37 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %38 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %39 = %35.0;
    %40 = %36.0;
    %41 = %37.1;
    %42 = %38.0;
    (%39, %40, %41, %42)
  };
  %43() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_394() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %48 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %44 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %45 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %46 = %44.0;
    %47 = %45.3;
    (%46, %47)
  };
  %48() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_9488(%var_9487: Tensor[(750), uint64]) -> (Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) {
  %57 = fn (%var_9477: Tensor[(750), uint64]) -> (Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) {
    %49 = cast(%var_9477, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %50 = reshape(%49, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint64] */;
    %51 = @func_4740(%50) /* ty=(Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) */;
    %52 = cast(%var_9477, dtype="float32") /* ty=Tensor[(750), float32] */;
    %53 = @func_7030() /* ty=Tensor[(840), float64] */;
    %54 = %51.0;
    %55 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
    %56 = rsqrt(%52) /* ty=Tensor[(750), float32] */;
    (%53, %54, %55, %56)
  };
  %57(%var_9487) /* ty=(Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) */
}

def @func_1885(%var_1853: Tensor[(6, 13, 1), int64], %var_1871: Tensor[(3, 88), float32], %var_1872: Tensor[(630), float32]) -> (Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) {
  %58 = cast(%var_1853, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
  %59 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 13, 15), int64] */;
  %60 = cast(%var_1871, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %61 = cast(%var_1872, dtype="float32") /* ty=Tensor[(630), float32] */;
  %62 = reshape(%60, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), float32] */;
  %63 = reshape(%61, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %64 = @func_586(%62, %63) /* ty=(Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) */;
  %65 = add(%58, %59) /* ty=Tensor[(6, 13, 15), int64] */;
  %66 = %64.1;
  (%65, %66, %var_1871, %var_1872)
}

def @func_15865(%var_15863: Tensor[(4, 36), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(4, 36), uint16], Tensor[(4, 36), float64], Tensor[(4, 36), float64]) {
  @func_15862(%var_15863) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(4, 36), uint16], Tensor[(4, 36), float64], Tensor[(4, 36), float64]) */
}

def @func_1763() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) {
  @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */
}

def @func_5326() -> Tensor[(5, 14, 9), float32] {
  %67 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %67.1
}

def @func_892() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %72 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %68 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %69 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %70 = %68.1;
    %71 = %69.1;
    (%70, %71)
  };
  %72() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_631() -> (Tensor[(5, 14, 9), float32],) {
  %74 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %73 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
    (%73,)
  };
  %74() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_2609(%var_2588: Tensor[(840), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %75 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %76 = cast(%var_2588, dtype="float64") /* ty=Tensor[(840), float64] */;
  %77 = reshape(%76, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float64] */;
  %78 = @func_698(%77) /* ty=(Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %79 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %80 = %75.0;
  %81 = %78.1;
  %82 = %79.0;
  (%80, %81, %var_2588, %82)
}

def @func_1029() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %83 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %84 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %85 = %83.0;
  %86 = %84.0;
  (%85, %86)
}

def @func_4831() -> Tensor[(840), float64] {
  @func_3515() /* ty=Tensor[(840), float64] */
}

def @func_700(%var_699: Tensor[(8, 7, 15), float64]) -> (Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %93 = fn (%var_675: Tensor[(8, 7, 15), float64]) -> (Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %87 = cast(%var_675, dtype="float64") /* ty=Tensor[(8, 7, 15), float64] */;
    %88 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %89 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %90 = exp(%87) /* ty=Tensor[(8, 7, 15), float64] */;
    %91 = %88.0;
    %92 = %89.0;
    (%90, %91, %92)
  };
  %93(%var_699) /* ty=(Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_5368() -> (Tensor[(5, 14, 9), float32],) {
  %98 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %94 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %95 = %94.1;
    %96 = cast(%95, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %97 = cosh(%96) /* ty=Tensor[(5, 14, 9), float32] */;
    (%97,)
  };
  %98() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_7455(%var_7425: uint64) -> (Tensor[(3, 1), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %99 = cast(%var_7425, dtype="bool") /* ty=bool */;
  %100 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 1), uint64] */, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  %101 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %102 = greater(%99, %100) /* ty=Tensor[(3, 1), bool] */;
  %103 = %101.0;
  %104 = @func_5827() /* ty=Tensor[(5, 14, 9), float32] */;
  (%102, %103, %104)
}

def @func_13126() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %108 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %105 = @func_12159() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %106 = @func_5998() /* ty=Tensor[(5, 14, 9), float32] */;
    %107 = %105.0;
    (%106, %107)
  };
  %108() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_8272() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_3515() -> Tensor[(840), float64] {
  %109 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %109.3
}

def @func_1835() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_8627() -> (Tensor[(5, 14, 9), float32],) {
  %110 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %111 = %110.0;
  (%111,)
}

def @func_7738(%var_7736: float32) -> (Tensor[(12, 15, 16), float32], Tensor[(5, 14, 9), float32], Tensor[(12, 15, 16), uint8], Tensor[(5, 14, 9), float32]) {
  @func_7735(%var_7736) /* ty=(Tensor[(12, 15, 16), float32], Tensor[(5, 14, 9), float32], Tensor[(12, 15, 16), uint8], Tensor[(5, 14, 9), float32]) */
}

def @func_3606() -> (Tensor[(5, 14, 9), float32],) {
  %113 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %112 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
    (%112,)
  };
  %113() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_1183() -> (Tensor[(5, 14, 9), float32],) {
  %114 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %115 = %114.3;
  (%115,)
}

def @func_4742(%var_4741: Tensor[(15, 5, 10), uint64]) -> (Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) {
  %123 = fn (%var_4712: Tensor[(15, 5, 10), uint64]) -> (Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) {
    %116 = cast(%var_4712, dtype="uint64") /* ty=Tensor[(15, 5, 10), uint64] */;
    %117 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(15, 5, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(15, 5, 10), uint64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %120 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %121 = minimum(%118, %119) /* ty=Tensor[(15, 5, 10), uint64] */;
    %122 = %120.0;
    (%121, %122)
  };
  %123(%var_4741) /* ty=(Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32]) */
}

def @func_9388() -> (Tensor[(5, 14, 9), float32],) {
  %126 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %124 = @func_8627() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %125 = %124.0;
    (%125,)
  };
  %126() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_8616() -> (Tensor[(5, 14, 9), float32],) {
  %127 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %128 = %127.0;
  (%128,)
}

def @func_2451() -> (Tensor[(5, 14, 9), float32],) {
  @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_6244() -> Tensor[(5, 14, 9), float32] {
  %130 = fn () -> Tensor[(5, 14, 9), float32] {
    %129 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %129.0
  };
  %130() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5028(%var_5026: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), bool],) {
  @func_5025(%var_5026) /* ty=(Tensor[(5, 16, 16), bool],) */
}

def @func_7806() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %137 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
    %131 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
    %132 = @func_3910() /* ty=(Tensor[(840), float64],) */;
    %133 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %134 = %131.0;
    %135 = %132.0;
    %136 = %133.0;
    (%134, %135, %136)
  };
  %137() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_9086() -> (Tensor[(8, 2, 11), int32],) {
  %138 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %139 = %138.1;
  (%139,)
}

def @func_15309() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %143 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %140 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
    %141 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
    %142 = %140.1;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_12224(%var_12222: Tensor[(12, 14, 11), bool], %var_12223: Tensor[(12, 14, 11), bool]) -> (Tensor[(12, 14, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %153 = fn (%var_12194: Tensor[(12, 14, 11), bool], %var_12195: Tensor[(12, 14, 11), bool]) -> (Tensor[(12, 14, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %144 = cast(%var_12195, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
    %145 = shape_of(%var_12194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%var_12194, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %148 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %149 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %150 = logical_and(%146, %147) /* ty=Tensor[(12, 14, 11), bool] */;
    %151 = %148.1;
    %152 = %149.0;
    (%150, %151, %152)
  };
  %153(%var_12222, %var_12223) /* ty=(Tensor[(12, 14, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_15655() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %154 = @func_14542() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %155 = @func_11104() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %156 = @func_11687() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %157 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %158 = %154.1;
  %159 = %155.1;
  %160 = @func_10349() /* ty=Tensor[(5, 14, 9), float32] */;
  %161 = %156.0;
  %162 = %157.0;
  (%158, %159, %160, %161, %162)
}

def @func_13651() -> (Tensor[(5, 14, 9), float32],) {
  @func_13649() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_8471() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %167 = fn () -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
    %163 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %164 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %165 = %163.2;
    %166 = %164.0;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_3483() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) {
  @func_3481() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_12311() -> (Tensor[(5, 14, 9), float32],) {
  %169 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %168 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
    (%168,)
  };
  %169() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_15001(%var_14999: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
  @func_14998(%var_14999) /* ty=Tensor[(2, 11, 11), float32] */
}

def @func_12049() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %170 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %171 = @func_8968() /* ty=Tensor[(5, 14, 9), float32] */;
  %172 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %173 = %170.0;
  (%171, %172, %173)
}

def @func_14525() -> (Tensor[(8, 2, 11), int32],) {
  %176 = fn () -> (Tensor[(8, 2, 11), int32],) {
    %174 = @func_12049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
    %175 = %174.2;
    (%175,)
  };
  %176() /* ty=(Tensor[(8, 2, 11), int32],) */
}

def @func_15657() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  @func_15655() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */
}

def @func_14726() -> Tensor[(5, 14, 9), float32] {
  @func_14724() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_353() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %185 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %177 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %178 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %179 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %180 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %181 = %177.2;
    %182 = %178.0;
    %183 = %179.0;
    %184 = %180.0;
    (%181, %182, %183, %184)
  };
  %185() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_5603(%var_5579: Tensor[(168, 1), uint32], %var_5581: Tensor[(132, 2), float32], %var_5585: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) {
  %186 = cast(%var_5579, dtype="uint32") /* ty=Tensor[(168, 1), uint32] */;
  %187 = cast(meta[relay.Constant][3] /* ty=Tensor[(78, 1), int64] */, dtype="int64") /* ty=Tensor[(78, 1), int64] */;
  %188 = cast(%var_5581, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %189 = reshape(%186, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %190 = reshape(%187, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %191 = reshape(%188, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
  %192 = @func_3432(%189, %190, %191) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
  %193 = cast(%var_5585, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %194 = shape_of(%var_5581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %195 = cast(%var_5581, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %197 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %198 = cast(meta[relay.Constant][3] /* ty=Tensor[(78, 1), int64] */, dtype="int64") /* ty=Tensor[(78, 1), int64] */;
  %199 = cast(%var_5585, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %200 = %192.0;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %202 = reshape(%198, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %203 = reshape(%199, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %204 = reshape(%201, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %205 = @func_1885(%202, %203, %204) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %206 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
  %207 = greater_equal(%195, %196) /* ty=Tensor[(132, 2), bool] */;
  %208 = %197.0;
  %209 = %205.3;
  (%206, %200, %var_5579, meta[relay.Constant][3] /* ty=Tensor[(78, 1), int64] */, %207, %208, %209)
}

def @func_9751(%var_9750: Tensor[(7, 10, 8), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 44), float32], Tensor[(168), uint32], Tensor[(13, 6), int64], Tensor[(1, 264), float32], Tensor[(7, 10, 8), bool], Tensor[(5, 14, 9), float32]) {
  %231 = fn (%var_9708: Tensor[(7, 10, 8), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 44), float32], Tensor[(168), uint32], Tensor[(13, 6), int64], Tensor[(1, 264), float32], Tensor[(7, 10, 8), bool], Tensor[(5, 14, 9), float32]) {
    %210 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %211 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %212 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 6), int64] */;
    %213 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
    %214 = reshape(%211, newshape=[168]) /* ty=Tensor[(168), uint32] */;
    %215 = reshape(%212, newshape=[78]) /* ty=Tensor[(78), int64] */;
    %216 = reshape(%213, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
    %217 = @func_3432(%214, %215, %216) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
    %218 = cast(%var_9708, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
    %219 = sqrt(%218) /* ty=Tensor[(7, 10, 8), float32] */;
    %220 = cast(%219, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
    %221 = exp(%220) /* ty=Tensor[(7, 10, 8), float32] */;
    %222 = cast(%219, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %227 = %210.0;
    %228 = %217.4;
    %229 = equal(%224, %225) /* ty=Tensor[(7, 10, 8), bool] */;
    %230 = %226.0;
    (%227, %228, meta[relay.Constant][4] /* ty=Tensor[(168), uint32] */, meta[relay.Constant][5] /* ty=Tensor[(13, 6), int64] */, meta[relay.Constant][6] /* ty=Tensor[(1, 264), float32] */, %229, %230)
  };
  %231(%var_9750) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(6, 44), float32], Tensor[(168), uint32], Tensor[(13, 6), int64], Tensor[(1, 264), float32], Tensor[(7, 10, 8), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_3095(%var_3072: Tensor[(1287), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %232 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %233 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %234 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(1287), uint8] */;
  %235 = cast(%var_3072, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %236 = reshape(%234, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), uint8] */;
  %237 = reshape(%235, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float64] */;
  %238 = @func_2195(%236, %237) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) */;
  %239 = @func_3014() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %240 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %241 = %232.2;
  %242 = %233.0;
  %243 = %238.6;
  %244 = %239.0;
  %245 = %240.0;
  (%241, %242, %243, %var_3072, %244, %245)
}

def @func_1031() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_9942() -> (Tensor[(840), float64],) {
  %248 = fn () -> (Tensor[(840), float64],) {
    %246 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
    %247 = %246.3;
    (%247,)
  };
  %248() /* ty=(Tensor[(840), float64],) */
}

def @func_5920() -> Tensor[(5, 14, 9), float32] {
  @func_5827() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15501() -> (Tensor[(5, 14, 9), float32],) {
  %250 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %249 = @func_11000() /* ty=Tensor[(5, 14, 9), float32] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_6818() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %254 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
    %251 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %252 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
    %253 = %251.1;
    (%252, %253)
  };
  %254() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_12131(%var_12130: Tensor[(1, 324), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(1, 324), uint8]) {
  %260 = fn (%var_12121: Tensor[(1, 324), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(1, 324), uint8]) {
    %255 = cast(%var_12121, dtype="uint8") /* ty=Tensor[(1, 324), uint8] */;
    %256 = reshape(%255, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
    %257 = @func_1142(%256) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
    %258 = @func_10324() /* ty=Tensor[(5, 14, 9), float32] */;
    %259 = %257.0;
    (%258, %259, %var_12121)
  };
  %260(%var_12130) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(1, 324), uint8]) */
}

def @func_3276(%var_3274: Tensor[(264), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(3, 88), float32], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float32]) {
  @func_3273(%var_3274) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(3, 88), float32], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_4670() -> Tensor[(5, 14, 9), float32] {
  %261 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %261.0
}

def @func_1940() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %266 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %262 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %263 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %264 = %262.1;
    %265 = %263.3;
    (%264, %265)
  };
  %266() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_7458(%var_7456: uint64) -> (Tensor[(3, 1), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_7455(%var_7456) /* ty=(Tensor[(3, 1), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_12528() -> Tensor[(5, 14, 9), bool] {
  @func_12526() /* ty=Tensor[(5, 14, 9), bool] */
}

def @func_13581() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %271 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %267 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %268 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %269 = %267.0;
    %270 = %268.1;
    (%269, %270)
  };
  %271() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_2518() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %276 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %272 = @func_779() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %273 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %274 = %272.3;
    %275 = %273.0;
    (%274, %275)
  };
  %276() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_11910(%var_11902: Tensor[(7, 1, 11), float32]) -> Tensor[(7, 1, 11), float32] {
  %277 = cast(%var_11902, dtype="float32") /* ty=Tensor[(7, 1, 11), float32] */;
  tan(%277) /* ty=Tensor[(7, 1, 11), float32] */
}

def @func_1761() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) {
  %278 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %279 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %280 = %279.2;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %282 = sin(%281) /* ty=Tensor[(5, 14, 9), float32] */;
  %283 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %287 = %278.0;
  %288 = floor_mod(%285, %286) /* ty=Tensor[(5, 14, 9), float64] */;
  (%287, %288)
}

def @func_7141() -> Tensor[(5, 14, 9), float32] {
  %290 = fn () -> Tensor[(5, 14, 9), float32] {
    %289 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %289.0
  };
  %290() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1383() -> Tensor[(5, 14, 9), float32] {
  @func_1381() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1130() -> Tensor[(5, 14, 9), float32] {
  @func_1128() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3517() -> Tensor[(840), float64] {
  @func_3515() /* ty=Tensor[(840), float64] */
}

def @func_5025(%var_5009: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), bool],) {
  %291 = cast(%var_5009, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %292 = log2(%291) /* ty=Tensor[(5, 16, 16), float32] */;
  %293 = cast(%292, dtype="bool") /* ty=Tensor[(5, 16, 16), bool] */;
  %294 = shape_of(%var_5009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_5009, dtype="bool") /* ty=Tensor[(5, 16, 16), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = greater(%295, %296) /* ty=Tensor[(5, 16, 16), bool] */;
  (%297,)
}

def @func_5391() -> Tensor[(5, 14, 9), float32] {
  %298 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %298.1
}

def @func_10402() -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) {
  %320 = fn () -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) {
    %299 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
    %300 = cast(meta[relay.Constant][8] /* ty=Tensor[(1287), uint8] */, dtype="uint8") /* ty=Tensor[(1287), uint8] */;
    %301 = reshape(%300, newshape=[1287]) /* ty=Tensor[(1287), uint8] */;
    %302 = @func_3095(%301) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %303 = @func_9566() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %304 = cast(meta[relay.Constant][8] /* ty=Tensor[(1287), uint8] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %305 = cosh(%304) /* ty=Tensor[(1287), float32] */;
    %306 = cast(%305, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %307 = cast(meta[relay.Constant][9] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
    %308 = reshape(%307, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
    %309 = @func_8554(%308) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) */;
    %310 = %309.2;
    %311 = cast(%310, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
    %312 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(576, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %313 = cast(meta[relay.Constant][9] /* ty=Tensor[(576, 2), int64] */, dtype="uint64") /* ty=Tensor[(576, 2), uint64] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %315 = %299.0;
    %316 = %302.4;
    %317 = %303.0;
    %318 = sinh(%306) /* ty=Tensor[(1287), float32] */;
    %319 = minimum(%313, %314) /* ty=Tensor[(576, 2), uint64] */;
    (%315, %316, %317, %318, %319)
  };
  %320() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) */
}

def @func_2449() -> (Tensor[(5, 14, 9), float32],) {
  %321 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%321,)
}

def @func_13788() -> Tensor[(5, 14, 9), float32] {
  %322 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %322.1
}

def @func_15352() -> Tensor[(5, 14, 9), float32] {
  %324 = fn () -> Tensor[(5, 14, 9), float32] {
    %323 = @func_14417() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %323.0
  };
  %324() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3503() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %329 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %325 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %326 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %327 = %325.0;
    %328 = %326.0;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_11824() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  @func_11822() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */
}

def @func_6138() -> Tensor[(5, 14, 9), float32] {
  %330 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_1446() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %330() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5827() -> Tensor[(5, 14, 9), float32] {
  @func_4763() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1446() -> Tensor[(5, 14, 9), float32] {
  %331 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %331.1
}

def @func_7494() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %335 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %332 = @func_4901() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %333 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
    %334 = %332.0;
    (%333, %334)
  };
  %335() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_2199(%var_2197: Tensor[(9, 11, 13), uint8], %var_2198: Tensor[(9, 11, 13), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) {
  @func_2195(%var_2197, %var_2198) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_14592(%var_14590: Tensor[(144), float64], %var_14591: Tensor[(3, 360), bool]) -> (Tensor[(8, 2, 11), float64], Tensor[(432), float64], Tensor[(144), float64], Tensor[(9, 15, 8), bool], Tensor[(3, 360), bool]) {
  @func_14588(%var_14590, %var_14591) /* ty=(Tensor[(8, 2, 11), float64], Tensor[(432), float64], Tensor[(144), float64], Tensor[(9, 15, 8), bool], Tensor[(3, 360), bool]) */
}

def @func_5894() -> (Tensor[(5, 14, 9), float32],) {
  @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_1185() -> (Tensor[(5, 14, 9), float32],) {
  @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_7231() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 9, 6), uint8], Tensor[(54, 6), uint8]) {
  @func_7229() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 9, 6), uint8], Tensor[(54, 6), uint8]) */
}

def @func_12526() -> Tensor[(5, 14, 9), bool] {
  %336 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %336.1
}

def @func_1645() -> (Tensor[(5, 14, 9), float32],) {
  %337 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %338 = %337.0;
  (%338,)
}

def @func_15315() -> Tensor[(5, 14, 9), float32] {
  %339 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %339.0
}

def @func_5092() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %344 = fn () -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
    %340 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
    %341 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %342 = %340.0;
    %343 = %341.0;
    (%342, %343)
  };
  %344() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_8509() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_8507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_15317() -> Tensor[(5, 14, 9), float32] {
  @func_15315() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_2577() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) {
  %345 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %346 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %347 = reshape(%346, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float64] */;
  %348 = @func_698(%347) /* ty=(Tensor[(8, 7, 15), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %349 = %345.3;
  %350 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  %351 = %348.0;
  (%349, %350, %351, meta[relay.Constant][10] /* ty=Tensor[(840), float64] */)
}

def @func_4319() -> Tensor[(5, 14, 9), float32] {
  @func_4317() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4996(%var_4952: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), bool], Tensor[(5, 14, 9), float32], Tensor[(9, 14, 5), float64]) {
  %352 = cast(%var_4952, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %353 = rsqrt(%352) /* ty=Tensor[(9, 14, 5), float32] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %355 = asin(%354) /* ty=Tensor[(9, 14, 5), float64] */;
  %356 = cast(%355, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %357 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%353, dtype="bool") /* ty=Tensor[(9, 14, 5), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %361 = cast(%var_4952, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %362 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%353, dtype="float64") /* ty=Tensor[(9, 14, 5), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %365 = less_equal(%358, %359) /* ty=Tensor[(9, 14, 5), bool] */;
  %366 = %360.1;
  %367 = mod(%363, %364) /* ty=Tensor[(9, 14, 5), float64] */;
  (%365, %366, %367)
}

def @func_8270() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %368 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %369 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  %370 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
  %371 = %368.0;
  (%369, %370, %371)
}

def @func_7001(%var_6999: Tensor[(11, 12, 8), int8], %var_7000: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 12, 16), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(576, 2), float64]) {
  @func_6997(%var_6999, %var_7000) /* ty=(Tensor[(11, 12, 8), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 12, 16), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(576, 2), float64]) */
}

def @func_8320() -> (Tensor[(8, 2, 11), bool],) {
  %373 = fn () -> (Tensor[(8, 2, 11), bool],) {
    %372 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
    (%372,)
  };
  %373() /* ty=(Tensor[(8, 2, 11), bool],) */
}

def @func_10325() -> Tensor[(5, 14, 9), float32] {
  %375 = fn () -> Tensor[(5, 14, 9), float32] {
    %374 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %374.0
  };
  %375() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_6063() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %376 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %377 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %378 = %376.0;
  (%377, %378)
}

def @func_1985() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %386 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %379 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %380 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %381 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %382 = %379.0;
    %383 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
    %384 = %380.0;
    %385 = %381.0;
    (%382, %383, %384, %385)
  };
  %386() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_7575() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %387 = @func_3749() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %388 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %389 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  %390 = %387.0;
  %391 = %388.0;
  %392 = @func_6891() /* ty=Tensor[(8, 2, 11), bool] */;
  (%389, %390, %391, %392)
}

def @func_1717() -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) {
  %393 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %395 = acos(%394) /* ty=Tensor[(8, 2, 11), float32] */;
  %396 = cast(%393, dtype="int32") /* ty=Tensor[(8, 2, 11), int32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="int32") /* ty=Tensor[(8, 2, 11), int32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %400 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %401 = multiply(%398, %399) /* ty=Tensor[(8, 2, 11), int32] */;
  (%400, %401)
}

def @func_7229() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 9, 6), uint8], Tensor[(54, 6), uint8]) {
  %402 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 6), uint8] */, dtype="uint8") /* ty=Tensor[(54, 6), uint8] */;
  %403 = reshape(%402, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
  %404 = @func_1142(%403) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
  %405 = @func_3035() /* ty=Tensor[(5, 14, 9), float32] */;
  %406 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  %407 = %404.0;
  (%405, %406, %407, meta[relay.Constant][11] /* ty=Tensor[(54, 6), uint8] */)
}

def @func_4054() -> Tensor[(5, 14, 9), float64] {
  %408 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
  log10(%410) /* ty=Tensor[(5, 14, 9), float64] */
}

def @func_3590() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %411 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %412 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %413 = %411.1;
  %414 = %412.0;
  (%413, %414)
}

def @func_161(%var_159: Tensor[(7, 3, 8), uint32], %var_160: Tensor[(7, 3, 8), uint32]) -> Tensor[(7, 3, 8), bool] {
  %419 = fn (%var_137: Tensor[(7, 3, 8), uint32], %var_138: Tensor[(7, 3, 8), uint32]) -> Tensor[(7, 3, 8), bool] {
    %415 = cast(%var_138, dtype="bool") /* ty=Tensor[(7, 3, 8), bool] */;
    %416 = shape_of(%var_137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%var_137, dtype="bool") /* ty=Tensor[(7, 3, 8), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%417, %418) /* ty=Tensor[(7, 3, 8), bool] */
  };
  %419(%var_159, %var_160) /* ty=Tensor[(7, 3, 8), bool] */
}

def @func_7577() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  @func_7575() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_12150() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
  @func_12148() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */
}

def @func_9592(%var_9568: Tensor[(9, 3, 10), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) {
  %420 = cast(%var_9568, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
  %421 = sigmoid(%420) /* ty=Tensor[(9, 3, 10), float64] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
  %423 = tan(%422) /* ty=Tensor[(9, 3, 10), float64] */;
  %424 = cast(%var_9568, dtype="bool") /* ty=Tensor[(9, 3, 10), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(9, 3, 10), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = @func_5493() /* ty=Tensor[(5, 14, 9), float32] */;
  %429 = logical_or(%426, %427) /* ty=Tensor[(9, 3, 10), bool] */;
  (%428, %429)
}

def @func_1647() -> (Tensor[(5, 14, 9), float32],) {
  @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_12569(%var_12548: Tensor[(16, 5, 14), bool], %var_12549: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) {
  %430 = cast(%var_12549, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %431 = shape_of(%var_12548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_12548, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %435 = logical_or(%432, %433) /* ty=Tensor[(16, 5, 14), bool] */;
  %436 = %434.1;
  (%435, %436)
}

def @func_7331(%var_7313: Tensor[(8, 2, 11), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %437 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %438 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %439 = %438.1;
  %440 = cast(%var_7313, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = %437.1;
  %445 = less_equal(%442, %443) /* ty=Tensor[(8, 2, 11), bool] */;
  (%444, %445)
}

def @func_9691() -> Tensor[(5, 14, 9), float32] {
  %446 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %446.0
}

def @func_15543() -> (Tensor[(5, 14, 9), float32],) {
  %449 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %447 = @func_14809() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %448 = %447.1;
    (%448,)
  };
  %449() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_2579() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) {
  @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */
}

def @func_11050(%var_11048: Tensor[(50, 15), uint64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(15, 5, 10), uint64], Tensor[(50, 15), uint64]) {
  @func_11047(%var_11048) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(15, 5, 10), uint64], Tensor[(50, 15), uint64]) */
}

def @func_3890() -> (Tensor[(5, 14, 9), float32],) {
  %452 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %450 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %451 = %450.0;
    (%451,)
  };
  %452() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_13936() -> Tensor[(5, 14, 9), float32] {
  %453 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_1198() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %453() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11256() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_11254() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_6891() -> Tensor[(8, 2, 11), bool] {
  @func_1570() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_3036() -> Tensor[(5, 14, 9), float32] {
  %455 = fn () -> Tensor[(5, 14, 9), float32] {
    %454 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %454.0
  };
  %455() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15419() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_15417() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_14810() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %459 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %456 = @func_7993() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %457 = %456.1;
    %458 = @func_12873() /* ty=Tensor[(5, 14, 9), float32] */;
    (%457, %458)
  };
  %459() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_13790() -> Tensor[(5, 14, 9), float32] {
  @func_13788() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_644() -> Tensor[(5, 14, 9), float32] {
  %461 = fn () -> Tensor[(5, 14, 9), float32] {
    %460 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %460.0
  };
  %461() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3911() -> (Tensor[(840), float64],) {
  %463 = fn () -> (Tensor[(840), float64],) {
    %462 = @func_3515() /* ty=Tensor[(840), float64] */;
    (%462,)
  };
  %463() /* ty=(Tensor[(840), float64],) */
}

def @func_10485(%var_10484: Tensor[(9, 14, 15), float32]) -> Tensor[(9, 14, 15), float32] {
  %465 = fn (%var_10457: Tensor[(9, 14, 15), float32]) -> Tensor[(9, 14, 15), float32] {
    %464 = cast(%var_10457, dtype="float32") /* ty=Tensor[(9, 14, 15), float32] */;
    atanh(%464) /* ty=Tensor[(9, 14, 15), float32] */
  };
  %465(%var_10484) /* ty=Tensor[(9, 14, 15), float32] */
}

def @func_5829() -> Tensor[(5, 14, 9), float32] {
  @func_5827() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1281() -> (Tensor[(5, 14, 9), float32],) {
  %470 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %466 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %467 = %466.2;
    %468 = cast(%467, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %469 = sinh(%468) /* ty=Tensor[(5, 14, 9), float32] */;
    (%469,)
  };
  %470() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_11822() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %471 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %472 = %471.0;
  %473 = @func_4831() /* ty=Tensor[(840), float64] */;
  (%472, %473)
}

def @func_5922() -> Tensor[(5, 14, 9), float32] {
  @func_5920() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5328() -> Tensor[(5, 14, 9), float32] {
  @func_5326() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1570() -> Tensor[(8, 2, 11), bool] {
  %474 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %475 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(8, 2, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%476, %477) /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_2022() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %482 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %478 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %479 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %480 = %478.0;
    %481 = %479.1;
    (%480, %481)
  };
  %482() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_5543(%var_5541: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32]) {
  @func_5540(%var_5541) /* ty=(Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32]) */
}

def @func_3854() -> (Tensor[(8, 2, 11), bool],) {
  %483 = @func_3823() /* ty=Tensor[(8, 2, 11), bool] */;
  (%483,)
}

def @func_2195(%var_2121: Tensor[(9, 11, 13), uint8], %var_2166: Tensor[(9, 11, 13), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(9, 11, 13), bool], Tensor[(9, 11, 13), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(9, 11, 13), float64], Tensor[(5, 14, 9), float32]) {
  %484 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %487 = reshape(%486, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), float32] */;
  %488 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 11, 13), uint8] */, dtype="uint8") /* ty=Tensor[(1, 11, 13), uint8] */;
  %489 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(9, 11, 13), uint8] */;
  %490 = bitwise_and(%488, %489) /* ty=Tensor[(9, 11, 13), uint8] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %492 = sin(%491) /* ty=Tensor[(9, 11, 13), float64] */;
  %493 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 11, 13), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = cast(%var_2166, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %498 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%492, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %502 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %503 = reshape(%501, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %504 = reshape(%502, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %505 = cast(%var_2121, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %506 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %507 = @func_228(%487) /* ty=Tensor[(5, 14, 9), int8] */;
  %508 = logical_or(%495, %496) /* ty=Tensor[(9, 11, 13), bool] */;
  %509 = logical_and(%499, %500) /* ty=Tensor[(9, 11, 13), bool] */;
  %510 = @func_158(%503, %504) /* ty=Tensor[(7, 3, 8), bool] */;
  %511 = log(%505) /* ty=Tensor[(9, 11, 13), float64] */;
  %512 = %506.3;
  (%485, %507, %508, %509, %510, meta[relay.Constant][16] /* ty=Tensor[(168), uint32] */, %511, %512)
}

def @func_11047(%var_11026: Tensor[(50, 15), uint64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(15, 5, 10), uint64], Tensor[(50, 15), uint64]) {
  %513 = @func_9868() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %514 = @func_10983() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) */;
  %515 = cast(%var_11026, dtype="uint64") /* ty=Tensor[(50, 15), uint64] */;
  %516 = reshape(%515, newshape=[750]) /* ty=Tensor[(750), uint64] */;
  %517 = @func_9486(%516) /* ty=(Tensor[(840), float64], Tensor[(15, 5, 10), uint64], Tensor[(5, 14, 9), float32], Tensor[(750), float32]) */;
  %518 = %513.0;
  %519 = %514.0;
  %520 = %517.1;
  (%518, %519, %520, %var_11026)
}

def @func_13910() -> Tensor[(5, 14, 9), float32] {
  @func_13908() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11000() -> Tensor[(5, 14, 9), float32] {
  @func_7140() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_6874() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %524 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %521 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %522 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
    %523 = %521.0;
    (%522, %523)
  };
  %524() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_1509() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_11143() -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
  %528 = fn () -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
    %525 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %526 = %525.1;
    %527 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
    (%526, %527)
  };
  %528() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_2665() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */
}

def @func_12314() -> Tensor[(5, 14, 9), float32] {
  %529 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %529.0
}

def @func_7178() -> (Tensor[(5, 14, 9), float32],) {
  %532 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %530 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %531 = %530.0;
    (%531,)
  };
  %532() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_15109() -> (Tensor[(5, 14, 9), float32],) {
  @func_15107() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_9228() -> (Tensor[(8, 2, 11), int32],) {
  %533 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
  %534 = %533.0;
  (%534,)
}

def @func_3432(%var_3406: Tensor[(168), uint32], %var_3416: Tensor[(78), int64], %var_3417: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) {
  %535 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %536 = cast(%var_3406, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %537 = cast(%var_3406, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %538 = reshape(%536, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %539 = reshape(%537, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %540 = cast(%var_3416, dtype="int64") /* ty=Tensor[(78), int64] */;
  %541 = cast(%var_3417, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %542 = %535.0;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %544 = reshape(%540, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %545 = reshape(%541, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %546 = reshape(%543, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %547 = @func_1885(%544, %545, %546) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %548 = %547.2;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %550 = @func_158(%538, %539) /* ty=Tensor[(7, 3, 8), bool] */;
  %551 = acosh(%549) /* ty=Tensor[(3, 88), float32] */;
  (%542, %550, %var_3406, %var_3416, %var_3417, %551)
}

def @func_4902() -> (Tensor[(5, 14, 9), float32],) {
  %554 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %552 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %553 = %552.0;
    (%553,)
  };
  %554() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_13811() -> (Tensor[(8, 2, 11), float64],) {
  %555 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %556 = %555.1;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %558 = log(%557) /* ty=Tensor[(8, 2, 11), float32] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
  %560 = asinh(%559) /* ty=Tensor[(8, 2, 11), float64] */;
  (%560,)
}

def @func_8174() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_11992() -> Tensor[(5, 14, 9), float32] {
  %561 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_11000() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %561() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8889() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %562 = @func_8319() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %563 = %562.0;
  %564 = @func_5391() /* ty=Tensor[(5, 14, 9), float32] */;
  %565 = @func_1446() /* ty=Tensor[(5, 14, 9), float32] */;
  (%563, %564, %565)
}

def @func_12378(%var_12377: Tensor[(66, 4), float32]) -> (Tensor[(66, 4), float64],) {
  %573 = fn (%var_12371: Tensor[(66, 4), float32]) -> (Tensor[(66, 4), float64],) {
    %566 = @func_10983() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) */;
    %567 = %566.2;
    %568 = cast(%var_12371, dtype="float64") /* ty=Tensor[(66, 4), float64] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(2), int32] */;
    %570 = cast(%567, dtype="float64") /* ty=Tensor[(66, 4), float64] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %572 = floor_divide(%570, %571) /* ty=Tensor[(66, 4), float64] */;
    (%572,)
  };
  %573(%var_12377) /* ty=(Tensor[(66, 4), float64],) */
}

def @func_7131(%var_7130: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(78), int64], Tensor[(132, 2), float32]) {
  %591 = fn (%var_7113: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(78), int64], Tensor[(132, 2), float32]) {
    %574 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %575 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
    %576 = %575.1;
    %577 = cast(%576, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %578 = asin(%577) /* ty=Tensor[(8, 2, 11), float32] */;
    %579 = cast(%578, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %580 = cast(meta[relay.Constant][17] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
    %581 = cast(%var_7113, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
    %582 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
    %583 = cast(%582, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %584 = reshape(%580, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
    %585 = reshape(%581, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
    %586 = reshape(%583, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %587 = @func_1885(%584, %585, %586) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
    %588 = %574.0;
    %589 = atan(%579) /* ty=Tensor[(8, 2, 11), float32] */;
    %590 = %587.1;
    (%588, %589, %582, %590, meta[relay.Constant][17] /* ty=Tensor[(78), int64] */, %var_7113)
  };
  %591(%var_7130) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), int8], Tensor[(78), int64], Tensor[(132, 2), float32]) */
}

def @func_7735(%var_7712: float32) -> (Tensor[(12, 15, 16), float32], Tensor[(5, 14, 9), float32], Tensor[(12, 15, 16), uint8], Tensor[(5, 14, 9), float32]) {
  %592 = cast(%var_7712, dtype="float32") /* ty=float32 */;
  %593 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 16), float32] */;
  %594 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %595 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 15, 16), float32] */, dtype="uint8") /* ty=Tensor[(12, 15, 16), uint8] */;
  %596 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(12, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 15, 16), float32] */, dtype="uint8") /* ty=Tensor[(12, 15, 16), uint8] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %599 = @func_6299() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %600 = power(%592, %593) /* ty=Tensor[(12, 15, 16), float32] */;
  %601 = %594.2;
  %602 = bitwise_and(%597, %598) /* ty=Tensor[(12, 15, 16), uint8] */;
  %603 = %599.0;
  (%600, %601, %602, %603)
}

def @func_11405() -> (Tensor[(5, 14, 9), float32],) {
  %606 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %604 = @func_8842() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %605 = %604.3;
    (%605,)
  };
  %606() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_8582(%var_8580: Tensor[(8, 16, 9), float32], %var_8581: Tensor[(264), float32]) -> (Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) {
  %617 = fn (%var_8569: Tensor[(8, 16, 9), float32], %var_8577: Tensor[(264), float32]) -> (Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) {
    %607 = cast(%var_8569, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
    %608 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
    %609 = cast(%var_8577, dtype="float32") /* ty=Tensor[(264), float32] */;
    %610 = cast(%var_8577, dtype="float32") /* ty=Tensor[(264), float32] */;
    %611 = reshape(%608, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint32] */;
    %612 = reshape(%609, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
    %613 = reshape(%610, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
    %614 = @func_5603(%611, %612, %613) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) */;
    %615 = sqrt(%607) /* ty=Tensor[(8, 16, 9), float32] */;
    %616 = %614.0;
    (%615, %616, meta[relay.Constant][20] /* ty=Tensor[(168), uint32] */, %var_8577)
  };
  %617(%var_8580, %var_8581) /* ty=(Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) */
}

def @func_12573(%var_12571: Tensor[(16, 5, 14), bool], %var_12572: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) {
  @func_12569(%var_12571, %var_12572) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_8356() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %622 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %618 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %619 = @func_7912() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %620 = %618.0;
    %621 = %619.0;
    (%620, %621)
  };
  %622() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_1890(%var_1887: Tensor[(6, 13, 1), int64], %var_1888: Tensor[(3, 88), float32], %var_1889: Tensor[(630), float32]) -> (Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) {
  @func_1885(%var_1887, %var_1888, %var_1889) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */
}

def @func_8507() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %623 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %624 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %625 = %623.2;
  %626 = %624.0;
  (%625, %626)
}

def @func_3098(%var_3096: Tensor[(1287), uint8]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  @func_3095(%var_3096) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(9, 11, 13), float64], Tensor[(1287), uint8], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_3481() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) {
  %627 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %628 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %629 = cast(meta[relay.Constant][22] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %630 = reshape(%628, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %631 = reshape(%629, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %632 = @func_1549(%630, %631) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %633 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %634 = cast(meta[relay.Constant][22] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %635 = reshape(%633, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %636 = reshape(%634, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %637 = @func_1549(%635, %636) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %638 = %627.2;
  %639 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  %640 = %632.0;
  %641 = %637.2;
  (%638, %639, %640, meta[relay.Constant][21] /* ty=Tensor[(144), float64] */, meta[relay.Constant][22] /* ty=Tensor[(432), float64] */, %641)
}

def @func_7882() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %642 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %643 = @func_6861() /* ty=Tensor[(5, 14, 9), float32] */;
  %644 = %642.1;
  (%643, %644)
}

def @func_4765() -> Tensor[(5, 14, 9), float32] {
  @func_4763() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11254() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %645 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  %646 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
  (%645, %646)
}

def @func_12414() -> Tensor[(840), float64] {
  @func_12412() /* ty=Tensor[(840), float64] */
}

def @func_11959(%var_11948: Tensor[(6, 13, 16), int8], %var_11949: Tensor[(6, 13, 16), int8]) -> (Tensor[(6, 13, 16), int8],) {
  %647 = cast(%var_11949, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %648 = shape_of(%var_11948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_11948, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %651 = minimum(%649, %650) /* ty=Tensor[(6, 13, 16), int8] */;
  (%651,)
}

def @func_9206() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %659 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %652 = @func_8931() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %653 = @func_6213() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %654 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %655 = %652.1;
    %656 = @func_7030() /* ty=Tensor[(840), float64] */;
    %657 = %653.1;
    %658 = %654.4;
    (%655, %656, %657, %658)
  };
  %659() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_8732(%var_8704: Tensor[(168), uint32], %var_8710: Tensor[(26, 3), int64], %var_8711: Tensor[(3, 88), float32], %var_8715: Tensor[(3, 88), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(168), uint32], Tensor[(3, 88), float32], Tensor[(26, 3), int64], Tensor[(3, 88), float64], Tensor[(5, 14, 9), float32]) {
  %660 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %661 = @func_4651() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %662 = cast(%var_8704, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %663 = reshape(%662, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %664 = @func_2355(%663) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %665 = cast(%var_8704, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %666 = cast(%var_8710, dtype="int64") /* ty=Tensor[(26, 3), int64] */;
  %667 = cast(%var_8711, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %668 = reshape(%665, newshape=[168]) /* ty=Tensor[(168), uint32] */;
  %669 = reshape(%666, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %670 = reshape(%667, newshape=[6, 44]) /* ty=Tensor[(6, 44), float32] */;
  %671 = @func_3432(%668, %669, %670) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */;
  %672 = cast(%var_8715, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %673 = shape_of(%var_8711, dtype="int32") /* ty=Tensor[(2), int32] */;
  %674 = cast(%var_8711, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %676 = @func_2021() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %677 = %660.1;
  %678 = %661.1;
  %679 = %664.0;
  %680 = %671.5;
  %681 = floor_mod(%674, %675) /* ty=Tensor[(3, 88), float64] */;
  %682 = %676.1;
  (%677, %678, %679, %var_8704, %680, %var_8710, %681, %682)
}

def @func_10110() -> (Tensor[(5, 14, 9), float32],) {
  @func_10108() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_14314(%var_14312: Tensor[(1120), bool]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(16, 5, 14), bool], Tensor[(1120), bool]) {
  @func_14311(%var_14312) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(16, 5, 14), bool], Tensor[(1120), bool]) */
}

def @func_4124(%var_4123: Tensor[(5, 14, 9), float32]) -> (Tensor[(144), float64], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %696 = fn (%var_4093: Tensor[(5, 14, 9), float32]) -> (Tensor[(144), float64], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %683 = @func_3481() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(?, 12, 12), int64], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32]) */;
    %684 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %685 = %684.1;
    %686 = cast(%var_4093, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
    %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%685, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %690 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %691 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %692 = %683.3;
    %693 = greater(%688, %689) /* ty=Tensor[(5, 14, 9), bool] */;
    %694 = %690.0;
    %695 = %691.1;
    (%692, %693, %694, %695)
  };
  %696(%var_4123) /* ty=(Tensor[(144), float64], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_14088() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %704 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %697 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %698 = @func_13649() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %699 = @func_10108() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %700 = %697.0;
    %701 = %698.0;
    %702 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
    %703 = %699.0;
    (%700, %701, %702, %703)
  };
  %704() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_3749() -> (Tensor[(5, 14, 9), float32],) {
  %705 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %706 = %705.0;
  (%706,)
}

def @func_12637() -> (Tensor[(5, 14, 9), float32],) {
  %707 = @func_9566() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %708 = %707.0;
  (%708,)
}

def @func_14955() -> (Tensor[(5, 14, 9), float32],) {
  @func_14953() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_4850() -> (Tensor[(11, 1, 4), int32],) {
  %709 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %710 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 1, 4), int32] */, dtype="int32") /* ty=Tensor[(11, 1, 4), int32] */;
  %711 = left_shift(%709, %710) /* ty=Tensor[(11, 1, 4), int32] */;
  (%711,)
}

def @func_14648() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %715 = fn () -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
    %712 = @func_12285() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %713 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
    %714 = %712.0;
    (%713, %714)
  };
  %715() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_589(%var_587: Tensor[(2, 11, 12), float32], %var_588: Tensor[(630), float32]) -> (Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) {
  %729 = fn (%var_544: Tensor[(2, 11, 12), float32], %var_560: Tensor[(630), float32]) -> (Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) {
    %716 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
    %717 = shape_of(%var_544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%var_544, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %720 = cast(%var_560, dtype="float32") /* ty=Tensor[(630), float32] */;
    %721 = reshape(%720, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), float32] */;
    %722 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
    %723 = shape_of(%var_544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%var_544, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %726 = less_equal(%718, %719) /* ty=Tensor[(2, 11, 12), bool] */;
    %727 = @func_228(%721) /* ty=Tensor[(5, 14, 9), int8] */;
    %728 = not_equal(%724, %725) /* ty=Tensor[(2, 11, 12), bool] */;
    (%726, %727, %var_560, %728)
  };
  %729(%var_587, %var_588) /* ty=(Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) */
}

def @func_8738(%var_8734: Tensor[(168), uint32], %var_8735: Tensor[(26, 3), int64], %var_8736: Tensor[(3, 88), float32], %var_8737: Tensor[(3, 88), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(168), uint32], Tensor[(3, 88), float32], Tensor[(26, 3), int64], Tensor[(3, 88), float64], Tensor[(5, 14, 9), float32]) {
  @func_8732(%var_8734, %var_8735, %var_8736, %var_8737) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(168), uint32], Tensor[(3, 88), float32], Tensor[(26, 3), int64], Tensor[(3, 88), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_15784() -> (Tensor[(5, 14, 9), float32],) {
  %730 = @func_7993() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %731 = %730.1;
  (%731,)
}

def @func_7613() -> (Tensor[(5, 14, 9), float32],) {
  @func_7611() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_10166() -> (Tensor[(5, 14, 9), float32],) {
  %733 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %732 = @func_5998() /* ty=Tensor[(5, 14, 9), float32] */;
    (%732,)
  };
  %733() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_10983() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) {
  %734 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 144), float32] */, dtype="float32") /* ty=Tensor[(8, 144), float32] */;
  %735 = cast(meta[relay.Constant][26] /* ty=Tensor[(66, 4), float32] */, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
  %736 = reshape(%734, newshape=[8, 16, 9]) /* ty=Tensor[(8, 16, 9), float32] */;
  %737 = reshape(%735, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %738 = @func_8579(%736, %737) /* ty=(Tensor[(8, 16, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(264), float32]) */;
  %739 = %738.1;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %741 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %742 = sigmoid(%740) /* ty=Tensor[(5, 14, 9), float32] */;
  (%741, meta[relay.Constant][25] /* ty=Tensor[(8, 144), float32] */, meta[relay.Constant][26] /* ty=Tensor[(66, 4), float32] */, %742)
}

def @func_11587() -> (Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) {
  %751 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) {
    %743 = @func_8172() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
    %744 = cast(meta[relay.Constant][27] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %745 = %743.1;
    %746 = cast(%745, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %747 = reshape(%744, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), float32] */;
    %748 = reshape(%746, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %749 = @func_586(%747, %748) /* ty=(Tensor[(2, 11, 12), bool], Tensor[(5, 14, 9), int8], Tensor[(630), float32], Tensor[(2, 11, 12), bool]) */;
    %750 = %749.0;
    (%745, %750, meta[relay.Constant][27] /* ty=Tensor[(264), float32] */)
  };
  %751() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) */
}

def @func_12974() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  @func_12972() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */
}

def @func_1381() -> Tensor[(5, 14, 9), float32] {
  @func_436() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_14542() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %752 = @func_5367() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %753 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %754 = %752.0;
  %755 = %753.0;
  (%754, %755)
}

def @func_4397() -> (Tensor[(5, 14, 9), float32],) {
  %756 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %757 = %756.0;
  (%757,)
}

def @func_8891() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_8889() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_2372() -> (Tensor[(5, 14, 9), float32],) {
  %758 = @func_1029() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %759 = %758.1;
  (%759,)
}

def @func_15768() -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(3, 108), uint8]) {
  @func_15766() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(3, 108), uint8]) */
}

def @func_1431() -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
  %760 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %761 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %762 = %760.1;
  %763 = %761.0;
  (%762, %763)
}

def @func_7913() -> (Tensor[(5, 14, 9), float32],) {
  %765 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %764 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
    (%764,)
  };
  %765() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_10130() -> Tensor[(5, 14, 9), float32] {
  %767 = fn () -> Tensor[(5, 14, 9), float32] {
    %766 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %766.0
  };
  %767() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_7611() -> (Tensor[(5, 14, 9), float32],) {
  %768 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
  %769 = %768.0;
  (%769,)
}

def @func_10812() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %775 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %770 = @func_6327() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %771 = @func_8785() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %772 = %770.0;
    %773 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
    %774 = %771.0;
    (%772, %773, %774)
  };
  %775() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_1321() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_10073(%var_10071: Tensor[(9, 15, 8), bool]) -> (Tensor[(9, 15, 8), bool],) {
  @func_10070(%var_10071) /* ty=(Tensor[(9, 15, 8), bool],) */
}

def @func_13759() -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %780 = fn () -> (Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
    %776 = @func_8889() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %777 = @func_8355() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %778 = %776.0;
    %779 = %777.1;
    (%778, %779)
  };
  %780() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_9869() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %785 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %781 = @func_3502() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %782 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %783 = %781.1;
    %784 = %782.3;
    (%783, %784)
  };
  %785() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_10108() -> (Tensor[(5, 14, 9), float32],) {
  %786 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
  (%786,)
}

def @func_13555() -> (Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  @func_13553() /* ty=(Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_4852() -> (Tensor[(11, 1, 4), int32],) {
  @func_4850() /* ty=(Tensor[(11, 1, 4), int32],) */
}

def @func_8104() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %789 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
    %787 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
    %788 = @func_7030() /* ty=Tensor[(840), float64] */;
    (%787, %788)
  };
  %789() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */
}

def @func_2358(%var_2356: Tensor[(168), uint32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  @func_2355(%var_2356) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */
}

def @func_3653() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %794 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %790 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %791 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %792 = %790.0;
    %793 = %791.0;
    (%792, %793)
  };
  %794() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_3825() -> Tensor[(8, 2, 11), bool] {
  @func_3823() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_2663() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  %795 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %796 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %797 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %798 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %799 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %800 = reshape(%798, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %801 = reshape(%799, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %802 = %795.1;
  %803 = %796.1;
  %804 = %797.0;
  %805 = @func_158(%800, %801) /* ty=Tensor[(7, 3, 8), bool] */;
  (%802, %803, %804, %805, meta[relay.Constant][28] /* ty=Tensor[(168), uint32] */)
}

def @func_5608(%var_5605: Tensor[(168, 1), uint32], %var_5606: Tensor[(132, 2), float32], %var_5607: Tensor[(132, 2), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) {
  @func_5603(%var_5605, %var_5606, %var_5607) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) */
}

def @func_15194() -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %806 = @func_9051() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */;
  %807 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %808 = %806.1;
  %809 = %807.0;
  (%808, %809)
}

def @func_3980(%var_3978: Tensor[(840), float64], %var_3979: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), uint16]) {
  %823 = fn (%var_3948: Tensor[(840), float64], %var_3954: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), uint16]) {
    %810 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %811 = cast(%var_3948, dtype="float64") /* ty=Tensor[(840), float64] */;
    %812 = reshape(%811, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %813 = @func_2609(%812) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */;
    %814 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %815 = %814.0;
    %816 = cast(%var_3954, dtype="uint16") /* ty=Tensor[(5, 14, 9), uint16] */;
    %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %818 = cast(%815, dtype="uint16") /* ty=Tensor[(5, 14, 9), uint16] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %820 = %810.3;
    %821 = %813.1;
    %822 = add(%818, %819) /* ty=Tensor[(5, 14, 9), uint16] */;
    (%820, %821, %var_3948, %822)
  };
  %823(%var_3978, %var_3979) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), uint16]) */
}

def @func_14998(%var_14992: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
  %824 = cast(%var_14992, dtype="float32") /* ty=Tensor[(2, 11, 11), float32] */;
  tan(%824) /* ty=Tensor[(2, 11, 11), float32] */
}

def @func_10985() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) {
  @func_10983() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 144), float32], Tensor[(66, 4), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_10764(%var_10757: Tensor[(144), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) {
  %825 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %826 = cast(%var_10757, dtype="float64") /* ty=Tensor[(144), float64] */;
  %827 = cast(meta[relay.Constant][29] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %828 = reshape(%826, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
  %829 = reshape(%827, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
  %830 = @func_1549(%828, %829) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
  %831 = %825.0;
  %832 = %830.1;
  (%831, %832, %var_10757, meta[relay.Constant][29] /* ty=Tensor[(432), float64] */)
}

def @func_1549(%var_1510: Tensor[(1, 12, 12), float64], %var_1543: Tensor[(3, 12, 12), float64]) -> (Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) {
  %833 = cast(%var_1510, dtype="float64") /* ty=Tensor[(1, 12, 12), float64] */;
  %834 = rsqrt(%833) /* ty=Tensor[(1, 12, 12), float64] */;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(1, 12, 12), float32] */;
  %836 = acos(%835) /* ty=Tensor[(1, 12, 12), float32] */;
  %837 = cast(%834, dtype="int64") /* ty=Tensor[(1, 12, 12), int64] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="int64") /* ty=Tensor[(1, 12, 12), int64] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %841 = cast(%834, dtype="int8") /* ty=Tensor[(1, 12, 12), int8] */;
  %842 = cast(%var_1543, dtype="int8") /* ty=Tensor[(3, 12, 12), int8] */;
  %843 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %844 = bitwise_and(%839, %840) /* ty=Tensor[(?, 12, 12), int64] */;
  %845 = bitwise_xor(%841, %842) /* ty=Tensor[(3, 12, 12), int8] */;
  %846 = %843.0;
  (%844, %845, %846)
}

def @func_15257(%var_15241: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(6, 44), float32], Tensor[(5, 14, 9), float32]) {
  %847 = @func_6049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %848 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), uint32] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %849 = cast(%var_15241, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %850 = cast(%var_15241, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %851 = reshape(%848, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint32] */;
  %852 = reshape(%849, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %853 = reshape(%850, newshape=[132, 2]) /* ty=Tensor[(132, 2), float32] */;
  %854 = @func_5603(%851, %852, %853) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168, 1), uint32], Tensor[(78, 1), int64], Tensor[(132, 2), bool], Tensor[(5, 14, 9), float32], Tensor[(630), float32]) */;
  %855 = @func_7069() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %856 = %847.1;
  %857 = @func_3035() /* ty=Tensor[(5, 14, 9), float32] */;
  %858 = %854.5;
  %859 = %855.0;
  (%856, %857, %858, meta[relay.Constant][30] /* ty=Tensor[(168), uint32] */, %var_15241, %859)
}

def @func_6893() -> Tensor[(8, 2, 11), bool] {
  @func_6891() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_8417(%var_8416: Tensor[(2, 14, 15), uint16]) -> (Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) {
  %876 = fn (%var_8389: Tensor[(2, 14, 15), uint16]) -> (Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) {
    %860 = cast(%var_8389, dtype="uint16") /* ty=Tensor[(2, 14, 15), uint16] */;
    %861 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="uint16") /* ty=Tensor[(2, 14, 15), uint16] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %864 = minimum(%862, %863) /* ty=Tensor[(2, 14, 15), uint16] */;
    %865 = cast(%864, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
    %866 = @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %867 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 14, 15), uint16] */, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
    %868 = shape_of(%var_8389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %869 = cast(%var_8389, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %871 = sinh(%865) /* ty=Tensor[(2, 14, 15), float32] */;
    %872 = @func_4054() /* ty=Tensor[(5, 14, 9), float64] */;
    %873 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
    %874 = %866.1;
    %875 = less_equal(%869, %870) /* ty=Tensor[(2, 14, 15), bool] */;
    (%871, %872, %873, %874, %875)
  };
  %876(%var_8416) /* ty=(Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) */
}

def @func_11963(%var_11961: Tensor[(6, 13, 16), int8], %var_11962: Tensor[(6, 13, 16), int8]) -> (Tensor[(6, 13, 16), int8],) {
  @func_11959(%var_11961, %var_11962) /* ty=(Tensor[(6, 13, 16), int8],) */
}

def @func_14171() -> Tensor[(5, 14, 9), float32] {
  %877 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %877.2
}

def @func_12792() -> Tensor[(5, 14, 9), float32] {
  %878 = @func_6213() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %878.1
}

def @func_13961() -> (Tensor[(5, 14, 9), float32],) {
  %881 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %879 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %880 = %879.0;
    (%880,)
  };
  %881() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_15977() -> (Tensor[(5, 14, 9), float32],) {
  @func_15975() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_4170() -> (Tensor[(5, 14, 9), float32],) {
  %884 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %882 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %883 = %882.0;
    (%883,)
  };
  %884() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_9417() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
  %888 = fn () -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
    %885 = @func_9228() /* ty=(Tensor[(8, 2, 11), int32],) */;
    %886 = %885.0;
    %887 = @func_7140() /* ty=Tensor[(5, 14, 9), float32] */;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */
}

def @func_25() -> (Tensor[(5, 14, 9), float32],) {
  %891 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %889 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %890 = atan(%889) /* ty=Tensor[(5, 14, 9), float32] */;
    (%890,)
  };
  %891() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_14311(%var_14301: Tensor[(1120), bool]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(16, 5, 14), bool], Tensor[(1120), bool]) {
  %892 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %893 = @func_4253() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %894 = cast(%var_14301, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %895 = cast(%var_14301, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %896 = reshape(%894, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %897 = reshape(%895, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %898 = @func_12569(%896, %897) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(5, 14, 9), float32]) */;
  %899 = %892.0;
  %900 = %893.1;
  %901 = %898.0;
  (%899, %900, %901, %var_14301)
}

def @func_15975() -> (Tensor[(5, 14, 9), float32],) {
  %902 = @func_15655() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %903 = %902.1;
  (%903,)
}

def @func_8842() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %904 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %905 = @func_7493() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %906 = @func_4504() /* ty=Tensor[(5, 14, 9), float32] */;
  %907 = %904.3;
  %908 = @func_5857() /* ty=Tensor[(5, 14, 9), float32] */;
  %909 = %905.1;
  (%906, %907, %908, %909)
}

def @func_2919() -> (Tensor[(5, 14, 9), float32],) {
  %912 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %910 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %911 = %910.1;
    (%911,)
  };
  %912() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_13332(%var_13330: Tensor[(144), float64], %var_13331: Tensor[(432), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %923 = fn (%var_13237: Tensor[(144), float64], %var_13238: Tensor[(432), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %913 = cast(%var_13237, dtype="float64") /* ty=Tensor[(144), float64] */;
    %914 = cast(%var_13238, dtype="float64") /* ty=Tensor[(432), float64] */;
    %915 = reshape(%913, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
    %916 = reshape(%914, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
    %917 = @func_1549(%915, %916) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
    %918 = @func_1833() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %919 = @func_5827() /* ty=Tensor[(5, 14, 9), float32] */;
    %920 = %917.1;
    %921 = %918.2;
    %922 = @func_12792() /* ty=Tensor[(5, 14, 9), float32] */;
    (%919, %920, %var_13237, %var_13238, %921, %922)
  };
  %923(%var_13330, %var_13331) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_10349() -> Tensor[(5, 14, 9), float32] {
  %924 = @func_7177() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %924.0
}

def @func_12972() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %925 = @func_9416() /* ty=(Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) */;
  %926 = @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %927 = %925.1;
  %928 = %926.0;
  (%927, %928)
}

def @func_6997(%var_6934: Tensor[(11, 12, 8), int8], %var_6935: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(6, 12, 16), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(576, 2), float64]) {
  %929 = cast(%var_6935, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %930 = shape_of(%var_6934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %931 = cast(%var_6934, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %933 = @func_1507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %934 = @func_6817() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %935 = cast(meta[relay.Constant][33] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %936 = cast(meta[relay.Constant][33] /* ty=Tensor[(576, 2), int64] */, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %937 = reshape(%935, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %938 = reshape(%936, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
  %939 = @func_6610(%937, %938) /* ty=(Tensor[(6, 12, 16), float64],) */;
  %940 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %941 = @func_1984() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %942 = cast(meta[relay.Constant][34] /* ty=Tensor[(576, 2), int64] */, dtype="float64") /* ty=Tensor[(576, 2), float64] */;
  %943 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(576, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(meta[relay.Constant][33] /* ty=Tensor[(576, 2), int64] */, dtype="float64") /* ty=Tensor[(576, 2), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %946 = greater(%931, %932) /* ty=Tensor[(11, 12, 8), bool] */;
  %947 = %933.0;
  %948 = @func_4763() /* ty=Tensor[(5, 14, 9), float32] */;
  %949 = %934.1;
  %950 = %939.0;
  %951 = %940.2;
  %952 = %941.2;
  %953 = multiply(%944, %945) /* ty=Tensor[(576, 2), float64] */;
  (%946, %947, %948, %949, %950, %951, %952, %953)
}

def @func_3592() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_3590() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_8556(%var_8555: Tensor[(1152), int64]) -> (Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) {
  %964 = fn (%var_8525: Tensor[(1152), int64]) -> (Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) {
    %954 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %955 = cast(%var_8525, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %956 = cast(%var_8525, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %957 = reshape(%955, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
    %958 = reshape(%956, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), int64] */;
    %959 = @func_6610(%957, %958) /* ty=(Tensor[(6, 12, 16), float64],) */;
    %960 = %959.0;
    %961 = cast(%960, dtype="float64") /* ty=Tensor[(6, 12, 16), float64] */;
    %962 = %954.1;
    %963 = sqrt(%961) /* ty=Tensor[(6, 12, 16), float64] */;
    (%962, %var_8525, %963)
  };
  %964(%var_8555) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(1152), int64], Tensor[(6, 12, 16), float64]) */
}

def @func_9052() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
  %968 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64]) {
    %965 = @func_1939() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %966 = %965.0;
    %967 = @func_4831() /* ty=Tensor[(840), float64] */;
    (%966, %967)
  };
  %968() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64]) */
}

def @func_3273(%var_3259: Tensor[(264), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(3, 88), float32], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float32]) {
  %969 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %970 = @func_393() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %971 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %972 = cast(meta[relay.Constant][35] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %973 = cast(%var_3259, dtype="float32") /* ty=Tensor[(264), float32] */;
  %974 = %970.0;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %976 = reshape(%972, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %977 = reshape(%973, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %978 = reshape(%975, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %979 = @func_1885(%976, %977, %978) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
  %980 = %969.0;
  %981 = %971.3;
  %982 = @func_1381() /* ty=Tensor[(5, 14, 9), float32] */;
  %983 = %979.2;
  %984 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%980, %974, %981, %982, %983, meta[relay.Constant][35] /* ty=Tensor[(78), int64] */, %var_3259, %984)
}

def @func_6102() -> (Tensor[(840), float64], Tensor[(5, 14, 9), bool]) {
  %985 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %986 = @func_3515() /* ty=Tensor[(840), float64] */;
  %987 = %985.0;
  (%986, %987)
}

def @func_6636() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %991 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %988 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
    %989 = %988.0;
    %990 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
    (%989, %990)
  };
  %991() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_9065() -> Tensor[(840), float64] {
  %992 = fn () -> Tensor[(840), float64] {
    @func_7030() /* ty=Tensor[(840), float64] */
  };
  %992() /* ty=Tensor[(840), float64] */
}

def @func_12794() -> Tensor[(5, 14, 9), float32] {
  @func_12792() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_12412() -> Tensor[(840), float64] {
  @func_3515() /* ty=Tensor[(840), float64] */
}

def @func_6104() -> (Tensor[(840), float64], Tensor[(5, 14, 9), bool]) {
  @func_6102() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */
}

def @func_6050() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1008 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %993 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %994 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
    %995 = @func_3749() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %996 = %995.0;
    %997 = cast(%996, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %998 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
    %999 = cast(%994, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1001 = @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1002 = @func_4763() /* ty=Tensor[(5, 14, 9), float32] */;
    %1003 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
    %1004 = %993.0;
    %1005 = power(%999, %1000) /* ty=Tensor[(5, 14, 9), float32] */;
    %1006 = @func_4317() /* ty=Tensor[(5, 14, 9), float32] */;
    %1007 = %1001.0;
    (%1002, %1003, %1004, %1005, %1006, %1007)
  };
  %1008() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_11865() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) {
  %1017 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) {
    %1009 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1010 = cast(meta[relay.Constant][36] /* ty=Tensor[(30, 9), float64] */, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
    %1011 = reshape(%1010, newshape=[9, 3, 10]) /* ty=Tensor[(9, 3, 10), float64] */;
    %1012 = @func_9592(%1011) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) */;
    %1013 = cast(meta[relay.Constant][36] /* ty=Tensor[(30, 9), float64] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
    %1014 = %1009.0;
    %1015 = %1012.0;
    %1016 = erf(%1013) /* ty=Tensor[(30, 9), float32] */;
    (%1014, %1015, %1016)
  };
  %1017() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) */
}

def @func_436() -> Tensor[(5, 14, 9), float32] {
  %1018 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1019 = %1018.2;
  %1020 = cast(%1019, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  atanh(%1020) /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3691() -> Tensor[(5, 14, 9), float32] {
  %1022 = fn () -> Tensor[(5, 14, 9), float32] {
    %1021 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1021.0
  };
  %1022() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_9995() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1026 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1023 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1024 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
    %1025 = %1023.0;
    (%1024, %1025)
  };
  %1026() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_6215() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_6213() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_5393() -> Tensor[(5, 14, 9), float32] {
  @func_5391() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8969() -> Tensor[(5, 14, 9), float32] {
  %1027 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_5493() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %1027() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15965(%var_15963: Tensor[(9, 3, 10), float32], %var_15964: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
  %1038 = fn (%var_15939: Tensor[(9, 3, 10), float32], %var_15940: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
    %1028 = cast(%var_15940, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %1029 = shape_of(%var_15939, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1030 = cast(%var_15939, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1032 = floor_divide(%1030, %1031) /* ty=Tensor[(9, 3, 10), float32] */;
    %1033 = cast(%var_15939, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %1034 = shape_of(%1032, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1035 = cast(%1032, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %1036 = dyn.reshape(%1033, %1034, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1037 = mod(%1035, %1036) /* ty=Tensor[(9, 3, 10), float32] */;
    (%1037,)
  };
  %1038(%var_15963, %var_15964) /* ty=(Tensor[(9, 3, 10), float32],) */
}

def @func_12844() -> Tensor[(5, 14, 9), float32] {
  %1040 = fn () -> Tensor[(5, 14, 9), float32] {
    %1039 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1039.1
  };
  %1040() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_7884() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_7882() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_9595(%var_9593: Tensor[(9, 3, 10), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) {
  @func_9592(%var_9593) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(9, 3, 10), bool]) */
}

def @func_14717() -> (Tensor[(5, 14, 9), float32],) {
  %1042 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1041 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1041,)
  };
  %1042() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_327() -> (Tensor[(5, 14, 9), float32],) {
  @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_438() -> Tensor[(5, 14, 9), float32] {
  @func_436() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_6328() -> (Tensor[(5, 14, 9), float32],) {
  %1044 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1043 = @func_5326() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1043,)
  };
  %1044() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_13101() -> (Tensor[(5, 14, 9), float32],) {
  @func_13099() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_15417() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1045 = @func_891() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1046 = @func_13553() /* ty=(Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */;
  %1047 = @func_9387() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1048 = %1045.1;
  %1049 = %1046.0;
  %1050 = @func_13020() /* ty=Tensor[(5, 14, 9), float32] */;
  %1051 = %1047.0;
  (%1048, %1049, %1050, %1051)
}

def @func_13553() -> (Tensor[(840), float64], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) {
  %1052 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1053 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %1054 = @func_3515() /* ty=Tensor[(840), float64] */;
  %1055 = %1052.0;
  %1056 = %1053.1;
  (%1054, %1055, %1056)
}

def @func_13813() -> (Tensor[(8, 2, 11), float64],) {
  @func_13811() /* ty=(Tensor[(8, 2, 11), float64],) */
}

def @func_14693() -> (Tensor[(5, 14, 9), float32],) {
  %1059 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1057 = @func_6327() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1058 = %1057.0;
    (%1058,)
  };
  %1059() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_13908() -> Tensor[(5, 14, 9), float32] {
  %1060 = @func_2663() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) */;
  %1060.2
}

def @func_11002() -> Tensor[(5, 14, 9), float32] {
  @func_11000() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_11105() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1067 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1061 = @func_2517() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1062 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1063 = @func_9205() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1064 = %1061.0;
    %1065 = %1062.0;
    %1066 = %1063.3;
    (%1064, %1065, %1066)
  };
  %1067() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_4140() -> (Tensor[(5, 14, 9), float32],) {
  %1068 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
  (%1068,)
}

def @func_15050() -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  %1074 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
    %1069 = @func_11864() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(30, 9), float32]) */;
    %1070 = @func_12285() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1071 = %1069.0;
    %1072 = @func_9064() /* ty=Tensor[(840), float64] */;
    %1073 = %1070.0;
    (%1071, %1072, %1073)
  };
  %1074() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_1433() -> (Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) {
  @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */
}

def @func_8933() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_8931() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_6299() -> (Tensor[(5, 14, 9), float32],) {
  %1075 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1076 = %1075.0;
  (%1076,)
}

def @func_6301() -> (Tensor[(5, 14, 9), float32],) {
  @func_6299() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_11442() -> (Tensor[(5, 14, 9), float32],) {
  %1079 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1077 = @func_10401() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) */;
    %1078 = %1077.1;
    (%1078,)
  };
  %1079() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_14953() -> (Tensor[(5, 14, 9), float32],) {
  %1080 = @func_13580() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1081 = %1080.1;
  (%1081,)
}

def @func_4317() -> Tensor[(5, 14, 9), float32] {
  %1082 = @func_3502() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1082.0
}

def @func_11524() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %1087 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
    %1083 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1084 = @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */;
    %1085 = %1083.0;
    %1086 = %1084.0;
    (%1085, %1086)
  };
  %1087() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */
}

def @func_8978() -> Tensor[(5, 14, 9), float32] {
  %1089 = fn () -> Tensor[(5, 14, 9), float32] {
    %1088 = @func_6635() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1088.1
  };
  %1089() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_7334(%var_7332: Tensor[(8, 2, 11), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  @func_7331(%var_7332) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_1199() -> Tensor[(5, 14, 9), float32] {
  %1091 = fn () -> Tensor[(5, 14, 9), float32] {
    %1090 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1090.0
  };
  %1091() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4142() -> (Tensor[(5, 14, 9), float32],) {
  @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_1448() -> Tensor[(5, 14, 9), float32] {
  @func_1446() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_12639() -> (Tensor[(5, 14, 9), float32],) {
  @func_12637() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_12694() -> (Tensor[(5, 14, 9), float32],) {
  %1094 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1092 = @func_8507() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1093 = %1092.1;
    (%1093,)
  };
  %1094() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_5131(%var_5128: Tensor[(10, 5, 13), int64], %var_5129: Tensor[(10, 5, 13), int64], %var_5130: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), bool]) {
  %1110 = fn (%var_5105: Tensor[(10, 5, 13), int64], %var_5106: Tensor[(10, 5, 13), int64], %var_5110: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), bool]) {
    %1095 = cast(%var_5106, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
    %1096 = shape_of(%var_5105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1097 = cast(%var_5105, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
    %1098 = dyn.reshape(%1095, %1096, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1099 = cast(%var_5110, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
    %1100 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1101 = cast(%var_5106, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
    %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1103 = bitwise_or(%1101, %1102) /* ty=Tensor[(10, 5, 13), uint32] */;
    %1104 = cast(%var_5110, dtype="bool") /* ty=Tensor[(10, 5, 13), bool] */;
    %1105 = shape_of(%1103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1106 = cast(%1103, dtype="bool") /* ty=Tensor[(10, 5, 13), bool] */;
    %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1108 = minimum(%1097, %1098) /* ty=Tensor[(10, 5, 13), int64] */;
    %1109 = equal(%1106, %1107) /* ty=Tensor[(10, 5, 13), bool] */;
    (%1108, %1109)
  };
  %1110(%var_5128, %var_5129, %var_5130) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), bool]) */
}

def @func_5892() -> (Tensor[(5, 14, 9), float32],) {
  %1111 = @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1112 = %1111.0;
  (%1112,)
}

def @func_15260(%var_15258: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(6, 44), float32], Tensor[(5, 14, 9), float32]) {
  @func_15257(%var_15258) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(168), uint32], Tensor[(6, 44), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_4763() -> Tensor[(5, 14, 9), float32] {
  @func_3690() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_6514() -> Tensor[(5, 14, 9), float32] {
  @func_6512() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4672() -> Tensor[(5, 14, 9), float32] {
  @func_4670() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3751() -> (Tensor[(5, 14, 9), float32],) {
  @func_3749() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_6065() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_1144(%var_1143: Tensor[(6, 9, 6), uint8]) -> (Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) {
  %1123 = fn (%var_1131: Tensor[(6, 9, 6), uint8]) -> (Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) {
    %1113 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="uint8") /* ty=Tensor[(6, 9, 6), uint8] */;
    %1114 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1115 = cast(%var_1131, dtype="uint8") /* ty=Tensor[(6, 9, 6), uint8] */;
    %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1117 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
    %1118 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1119 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
    %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1121 = left_shift(%1115, %1116) /* ty=Tensor[(6, 9, 6), uint8] */;
    %1122 = greater(%1119, %1120) /* ty=Tensor[(6, 9, 6), bool] */;
    (%1121, %1122)
  };
  %1123(%var_1143) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */
}

def @func_9088() -> (Tensor[(8, 2, 11), int32],) {
  @func_9086() /* ty=(Tensor[(8, 2, 11), int32],) */
}

def @func_10890() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %1124 = @func_9994() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1125 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1126 = %1124.0;
  %1127 = %1125.0;
  (%1126, %1127)
}

def @func_14673() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1131 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1128 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1129 = %1128.0;
    %1130 = @func_12978() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1129, %1130)
  };
  %1131() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_5494() -> Tensor[(5, 14, 9), float32] {
  %1133 = fn () -> Tensor[(5, 14, 9), float32] {
    %1132 = @func_4169() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1132.0
  };
  %1133() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_13649() -> (Tensor[(5, 14, 9), float32],) {
  %1134 = @func_10108() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1135 = %1134.0;
  (%1135,)
}

def @func_3856() -> (Tensor[(8, 2, 11), bool],) {
  @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */
}

def @func_11913(%var_11911: Tensor[(7, 1, 11), float32]) -> Tensor[(7, 1, 11), float32] {
  @func_11910(%var_11911) /* ty=Tensor[(7, 1, 11), float32] */
}

def @func_1319() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1136 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1137 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1138 = %1137.0;
  %1139 = @func_1183() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1140 = %1139.0;
  %1141 = cast(%1140, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %1142 = shape_of(%1138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1143 = cast(%1138, dtype="bool") /* ty=Tensor[(5, 14, 9), bool] */;
  %1144 = dyn.reshape(%1141, %1142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1145 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1146 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1147 = %1136.3;
  %1148 = not_equal(%1143, %1144) /* ty=Tensor[(5, 14, 9), bool] */;
  %1149 = @func_1198() /* ty=Tensor[(5, 14, 9), float32] */;
  %1150 = %1145.3;
  %1151 = %1146.0;
  (%1147, %1148, %1149, %1150, %1151)
}

def @func_10070(%var_10058: Tensor[(9, 15, 8), bool]) -> (Tensor[(9, 15, 8), bool],) {
  %1152 = cast(%var_10058, dtype="bool") /* ty=Tensor[(9, 15, 8), bool] */;
  %1153 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 15, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1154 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 15, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 8), bool] */;
  %1155 = dyn.reshape(%1152, %1153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1156 = logical_or(%1154, %1155) /* ty=Tensor[(9, 15, 8), bool] */;
  (%1156,)
}

def @func_6512() -> Tensor[(5, 14, 9), float32] {
  %1157 = @func_5892() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1157.0
}

def @func_6613(%var_6611: Tensor[(6, 12, 16), int64], %var_6612: Tensor[(6, 12, 16), int64]) -> (Tensor[(6, 12, 16), float64],) {
  %1165 = fn (%var_6591: Tensor[(6, 12, 16), int64], %var_6592: Tensor[(6, 12, 16), int64]) -> (Tensor[(6, 12, 16), float64],) {
    %1158 = cast(%var_6592, dtype="int64") /* ty=Tensor[(6, 12, 16), int64] */;
    %1159 = shape_of(%var_6591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1160 = cast(%var_6591, dtype="int64") /* ty=Tensor[(6, 12, 16), int64] */;
    %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1162 = bitwise_xor(%1160, %1161) /* ty=Tensor[(6, 12, 16), int64] */;
    %1163 = cast(%1162, dtype="float64") /* ty=Tensor[(6, 12, 16), float64] */;
    %1164 = log2(%1163) /* ty=Tensor[(6, 12, 16), float64] */;
    (%1164,)
  };
  %1165(%var_6611, %var_6612) /* ty=(Tensor[(6, 12, 16), float64],) */
}

def @func_13099() -> (Tensor[(5, 14, 9), float32],) {
  %1166 = @func_11441() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1167 = %1166.0;
  (%1167,)
}

def @func_4833() -> Tensor[(840), float64] {
  @func_4831() /* ty=Tensor[(840), float64] */
}

def @func_11689() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_11687() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_7070() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %1171 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
    %1168 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
    %1169 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
    %1170 = %1168.0;
    (%1169, %1170)
  };
  %1171() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_9246() -> (Tensor[(6, 11, 13), float64],) {
  %1172 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %1173 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 11, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1174 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 13), float64] */;
  %1175 = dyn.reshape(%1172, %1173, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1176 = floor_mod(%1174, %1175) /* ty=Tensor[(6, 11, 13), float64] */;
  (%1176,)
}

def @func_12051() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  @func_12049() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */
}

def @func_15766() -> (Tensor[(5, 14, 9), float32], Tensor[(6, 9, 6), uint8], Tensor[(3, 108), uint8]) {
  %1177 = @func_11746() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1178 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 108), uint8] */, dtype="uint8") /* ty=Tensor[(3, 108), uint8] */;
  %1179 = reshape(%1178, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), uint8] */;
  %1180 = @func_1142(%1179) /* ty=(Tensor[(6, 9, 6), uint8], Tensor[(6, 9, 6), bool]) */;
  %1181 = %1177.0;
  %1182 = %1180.0;
  (%1181, %1182, meta[relay.Constant][42] /* ty=Tensor[(3, 108), uint8] */)
}

def @func_12978() -> Tensor[(5, 14, 9), float32] {
  @func_5998() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15786() -> (Tensor[(5, 14, 9), float32],) {
  @func_15784() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_11687() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1183 = @func_5091() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32]) */;
  %1184 = @func_3690() /* ty=Tensor[(5, 14, 9), float32] */;
  %1185 = %1183.1;
  (%1184, %1185)
}

def @func_1128() -> Tensor[(5, 14, 9), float32] {
  @func_436() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_8618() -> (Tensor[(5, 14, 9), float32],) {
  @func_8616() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_8236() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  %1189 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
    %1186 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
    %1187 = @func_5865() /* ty=Tensor[(5, 14, 9), float32] */;
    %1188 = %1186.1;
    (%1187, %1188)
  };
  %1189() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */
}

def @func_15196() -> (Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  @func_15194() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_8786() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1193 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1190 = @func_3605() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1191 = %1190.0;
    %1192 = @func_5920() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1191, %1192)
  };
  %1193() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_2612(%var_2610: Tensor[(840), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) {
  @func_2609(%var_2610) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(840), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_12292() -> (Tensor[(5, 14, 9), float32],) {
  %1195 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1194 = @func_6137() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1194,)
  };
  %1195() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_657() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_655() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_1833() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1196 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1197 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
  %1198 = cast(%1197, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
  %1199 = @func_325() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1200 = @func_1431() /* ty=(Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32]) */;
  %1201 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
  %1202 = %1196.0;
  %1203 = log10(%1198) /* ty=Tensor[(8, 2, 11), float64] */;
  %1204 = %1199.0;
  %1205 = %1200.1;
  %1206 = %1201.0;
  (%1202, %1203, %1204, %1205, %1206)
}

def @func_6474(%var_6473: Tensor[(4, 9, 10), int64]) -> (Tensor[(4, 9, 10), bool],) {
  %1212 = fn (%var_6459: Tensor[(4, 9, 10), int64]) -> (Tensor[(4, 9, 10), bool],) {
    %1207 = cast(%var_6459, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
    %1208 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 9, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1209 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 9, 10), int64] */, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
    %1210 = dyn.reshape(%1207, %1208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1211 = greater_equal(%1209, %1210) /* ty=Tensor[(4, 9, 10), bool] */;
    (%1211,)
  };
  %1212(%var_6473) /* ty=(Tensor[(4, 9, 10), bool],) */
}

def @func_12874() -> Tensor[(5, 14, 9), float32] {
  %1214 = fn () -> Tensor[(5, 14, 9), float32] {
    %1213 = @func_10811() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1213.2
  };
  %1214() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_16026() -> (Tensor[(5, 14, 9), float32],) {
  @func_16024() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_9693() -> Tensor[(5, 14, 9), float32] {
  @func_9691() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_13021() -> Tensor[(5, 14, 9), float32] {
  %1216 = fn () -> Tensor[(5, 14, 9), float32] {
    %1215 = @func_10401() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(1287), float32], Tensor[(576, 2), uint64]) */;
    %1215.2
  };
  %1216() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_10299() -> Tensor[(5, 14, 9), float32] {
  %1217 = @func_3889() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1217.0
}

def @func_10351() -> Tensor[(5, 14, 9), float32] {
  @func_10349() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3823() -> Tensor[(8, 2, 11), bool] {
  @func_1570() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_14544() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) {
  @func_14542() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */
}

def @func_13132() -> Tensor[(5, 14, 9), float32] {
  %1219 = fn () -> Tensor[(5, 14, 9), float32] {
    %1218 = @func_11586() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(2, 11, 12), bool], Tensor[(264), float32]) */;
    %1218.0
  };
  %1219() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_12148() -> (Tensor[(8, 2, 11), int32], Tensor[(5, 14, 9), float32]) {
  %1220 = @func_8235() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), int32]) */;
  %1221 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1222 = %1220.1;
  %1223 = %1221.1;
  (%1222, %1223)
}

def @func_8844() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_8842() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_9230() -> (Tensor[(8, 2, 11), int32],) {
  @func_9228() /* ty=(Tensor[(8, 2, 11), int32],) */
}

def @func_4254() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %1227 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
    %1224 = @func_3854() /* ty=(Tensor[(8, 2, 11), bool],) */;
    %1225 = @func_1128() /* ty=Tensor[(5, 14, 9), float32] */;
    %1226 = %1224.0;
    (%1225, %1226)
  };
  %1227() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_2985(%var_2983: Tensor[(13, 7, 1), float64]) -> (Tensor[(13, 7, 1), float64], Tensor[(5, 14, 9), float32]) {
  @func_2982(%var_2983) /* ty=(Tensor[(13, 7, 1), float64], Tensor[(5, 14, 9), float32]) */
}

def @func_6434() -> Tensor[(5, 14, 9), float32] {
  %1229 = fn () -> Tensor[(5, 14, 9), float32] {
    %1228 = @func_4140() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1228.0
  };
  %1229() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5999() -> Tensor[(5, 14, 9), float32] {
  %1231 = fn () -> Tensor[(5, 14, 9), float32] {
    %1230 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1230.0
  };
  %1231() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1553(%var_1551: Tensor[(1, 12, 12), float64], %var_1552: Tensor[(3, 12, 12), float64]) -> (Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) {
  @func_1549(%var_1551, %var_1552) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */
}

def @func_14904(%var_14902: Tensor[(5, 84), uint16], %var_14903: Tensor[(5, 84), uint16]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 84), bool]) {
  %1250 = fn (%var_14885: Tensor[(5, 84), uint16], %var_14897: Tensor[(5, 84), uint16]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 84), bool]) {
    %1232 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1233 = @func_11687() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1234 = cast(%var_14885, dtype="uint16") /* ty=Tensor[(5, 84), uint16] */;
    %1235 = reshape(%1234, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), uint16] */;
    %1236 = @func_8415(%1235) /* ty=(Tensor[(2, 14, 15), float32], Tensor[(5, 14, 9), float64], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(2, 14, 15), bool]) */;
    %1237 = @func_12637() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1238 = @func_13811() /* ty=(Tensor[(8, 2, 11), float64],) */;
    %1239 = cast(%var_14897, dtype="bool") /* ty=Tensor[(5, 84), bool] */;
    %1240 = shape_of(%var_14885, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1241 = cast(%var_14885, dtype="bool") /* ty=Tensor[(5, 84), bool] */;
    %1242 = dyn.reshape(%1239, %1240, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1243 = %1232.1;
    %1244 = @func_9691() /* ty=Tensor[(5, 14, 9), float32] */;
    %1245 = %1233.0;
    %1246 = %1236.2;
    %1247 = %1237.0;
    %1248 = %1238.0;
    %1249 = logical_or(%1241, %1242) /* ty=Tensor[(5, 84), bool] */;
    (%1243, %1244, %1245, %1246, %1247, %1248, %1249)
  };
  %1250(%var_14902, %var_14903) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), float64], Tensor[(5, 84), bool]) */
}

def @func_4999(%var_4997: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), bool], Tensor[(5, 14, 9), float32], Tensor[(9, 14, 5), float64]) {
  @func_4996(%var_4997) /* ty=(Tensor[(9, 14, 5), bool], Tensor[(5, 14, 9), float32], Tensor[(9, 14, 5), float64]) */
}

def @func_2374() -> (Tensor[(5, 14, 9), float32],) {
  @func_2372() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_12160() -> (Tensor[(5, 14, 9), float32],) {
  %1253 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1251 = @func_11404() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1252 = %1251.0;
    (%1252,)
  };
  %1253() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @main(%var_16145: Tensor[(8, 2, 11), bool], %var_16175: Tensor[(8, 2, 11), bool]) -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), uint64], Tensor[(840), float64], Tensor[(8, 2, 11), float32]) {
  %1254 = @func_3856() /* ty=(Tensor[(8, 2, 11), bool],) */;
  %1255 = %1254.0;
  %1256 = cast(%var_16145, dtype="uint64") /* ty=Tensor[(8, 2, 11), uint64] */;
  %1257 = shape_of(%1255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1258 = cast(%1255, dtype="uint64") /* ty=Tensor[(8, 2, 11), uint64] */;
  %1259 = dyn.reshape(%1256, %1257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1260 = @func_6104() /* ty=(Tensor[(840), float64], Tensor[(5, 14, 9), bool]) */;
  %1261 = cast(%var_16175, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %1262 = shape_of(%1255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1263 = cast(%1255, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %1264 = dyn.reshape(%1261, %1262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1265 = @func_15351() /* ty=Tensor[(5, 14, 9), float32] */;
  %1266 = add(%1258, %1259) /* ty=Tensor[(8, 2, 11), uint64] */;
  %1267 = %1260.0;
  %1268 = minimum(%1263, %1264) /* ty=Tensor[(8, 2, 11), float32] */;
  (%1265, %1266, %1267, %1268)
}

def @func_12239() -> Tensor[(5, 14, 9), float32] {
  %1269 = fn () -> Tensor[(5, 14, 9), float32] {
    @func_6433() /* ty=Tensor[(5, 14, 9), float32] */
  };
  %1269() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_9248() -> (Tensor[(6, 11, 13), float64],) {
  @func_9246() /* ty=(Tensor[(6, 11, 13), float64],) */
}

def @func_14724() -> Tensor[(5, 14, 9), float32] {
  @func_6243() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_10767(%var_10765: Tensor[(144), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) {
  @func_10764(%var_10765) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64]) */
}

def @func_2355(%var_2350: Tensor[(168), uint32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 3, 8), bool], Tensor[(168), uint32]) {
  %1270 = @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */;
  %1271 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1272 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %1273 = reshape(%1271, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1274 = reshape(%1272, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), uint32] */;
  %1275 = %1270.0;
  %1276 = @func_158(%1273, %1274) /* ty=Tensor[(7, 3, 8), bool] */;
  (%1275, %1276, %var_2350)
}

def @func_10892() -> (Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  @func_10890() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_655() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1277 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
  %1278 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
  (%1277, %1278)
}

def @func_325() -> (Tensor[(5, 14, 9), float32],) {
  %1279 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1280 = %1279.0;
  (%1280,)
}

def @func_1572() -> Tensor[(8, 2, 11), bool] {
  @func_1570() /* ty=Tensor[(8, 2, 11), bool] */
}

def @func_3015() -> (Tensor[(5, 14, 9), float32],) {
  %1283 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1281 = @func_352() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1282 = %1281.0;
    (%1282,)
  };
  %1283() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_14754() -> (Tensor[(5, 14, 9), float32],) {
  %1286 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1284 = @func_7611() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1285 = %1284.0;
    (%1285,)
  };
  %1286() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_8057() -> Tensor[(5, 14, 9), float32] {
  @func_6137() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4056() -> Tensor[(5, 14, 9), float64] {
  @func_4054() /* ty=Tensor[(5, 14, 9), float64] */
}

def @func_14173() -> Tensor[(5, 14, 9), float32] {
  @func_14171() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_2982(%var_2938: Tensor[(13, 7, 1), float64]) -> (Tensor[(13, 7, 1), float64], Tensor[(5, 14, 9), float32]) {
  %1287 = cast(%var_2938, dtype="float64") /* ty=Tensor[(13, 7, 1), float64] */;
  %1288 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1289 = atan(%1287) /* ty=Tensor[(13, 7, 1), float64] */;
  %1290 = %1288.0;
  (%1289, %1290)
}

def @func_7994() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1296 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1291 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1292 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1293 = @func_4670() /* ty=Tensor[(5, 14, 9), float32] */;
    %1294 = %1291.0;
    %1295 = %1292.0;
    (%1293, %1294, %1295)
  };
  %1296() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_2240(%var_2239: Tensor[(78), int64]) -> (Tensor[(6, 13, 15), int64], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float64]) {
  %1308 = fn (%var_2212: Tensor[(78), int64]) -> (Tensor[(6, 13, 15), int64], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float64]) {
    %1297 = cast(%var_2212, dtype="int64") /* ty=Tensor[(78), int64] */;
    %1298 = cast(meta[relay.Constant][44] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %1299 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
    %1300 = cast(%1299, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %1301 = reshape(%1297, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
    %1302 = reshape(%1298, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
    %1303 = reshape(%1300, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %1304 = @func_1885(%1301, %1302, %1303) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(5, 14, 9), int8], Tensor[(3, 88), float32], Tensor[(630), float32]) */;
    %1305 = cast(%1299, dtype="float64") /* ty=Tensor[(5, 14, 9), float64] */;
    %1306 = %1304.0;
    %1307 = sqrt(%1305) /* ty=Tensor[(5, 14, 9), float64] */;
    (%1306, %var_2212, meta[relay.Constant][44] /* ty=Tensor[(264), float32] */, %1307)
  };
  %1308(%var_2239) /* ty=(Tensor[(6, 13, 15), int64], Tensor[(78), int64], Tensor[(264), float32], Tensor[(5, 14, 9), float64]) */
}

def @func_5991(%var_5990: Tensor[(144), float64]) -> (Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) {
  %1318 = fn (%var_5943: Tensor[(144), float64]) -> (Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) {
    %1309 = cast(%var_5943, dtype="float64") /* ty=Tensor[(144), float64] */;
    %1310 = cast(meta[relay.Constant][45] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %1311 = reshape(%1309, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float64] */;
    %1312 = reshape(%1310, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float64] */;
    %1313 = @func_1549(%1311, %1312) /* ty=(Tensor[(?, 12, 12), int64], Tensor[(3, 12, 12), int8], Tensor[(5, 14, 9), float32]) */;
    %1314 = @func_1570() /* ty=Tensor[(8, 2, 11), bool] */;
    %1315 = cast(%1314, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %1316 = %1313.1;
    %1317 = cosh(%1315) /* ty=Tensor[(8, 2, 11), float32] */;
    (%1316, %var_5943, meta[relay.Constant][45] /* ty=Tensor[(432), float64] */, %1317)
  };
  %1318(%var_5990) /* ty=(Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) */
}

def @func_4653() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  @func_4651() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_10301() -> Tensor[(5, 14, 9), float32] {
  @func_10299() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_3437(%var_3434: Tensor[(168), uint32], %var_3435: Tensor[(78), int64], %var_3436: Tensor[(6, 44), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) {
  @func_3432(%var_3434, %var_3435, %var_3436) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(7, 3, 8), bool], Tensor[(168), uint32], Tensor[(78), int64], Tensor[(6, 44), float32], Tensor[(3, 88), float32]) */
}

def @func_780() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1326 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1319 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
    %1320 = cast(%1319, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %1321 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1322 = @func_643() /* ty=Tensor[(5, 14, 9), float32] */;
    %1323 = rsqrt(%1320) /* ty=Tensor[(5, 14, 9), float32] */;
    %1324 = %1321.0;
    %1325 = @func_436() /* ty=Tensor[(5, 14, 9), float32] */;
    (%1322, %1323, %1324, %1325)
  };
  %1326() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_8172() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) {
  %1327 = @func_6063() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1328 = @func_7575() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 2, 11), bool]) */;
  %1329 = %1327.1;
  %1330 = @func_3215() /* ty=Tensor[(5, 14, 9), float32] */;
  %1331 = %1328.0;
  (%1329, %1330, %1331)
}

def @func_9567() -> (Tensor[(5, 14, 9), float32],) {
  %1334 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1332 = @func_9387() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1333 = %1332.0;
    (%1333,)
  };
  %1334() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_16024() -> (Tensor[(5, 14, 9), float32],) {
  %1335 = @func_2372() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1336 = %1335.0;
  (%1336,)
}

def @func_7298() -> Tensor[(5, 14, 9), float32] {
  %1338 = fn () -> Tensor[(5, 14, 9), float32] {
    %1337 = @func_6873() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1337.0
  };
  %1338() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_14345() -> (Tensor[(5, 14, 9), float32], Tensor[(66, 4), float64], Tensor[(66, 4), float32]) {
  %1345 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(66, 4), float64], Tensor[(66, 4), float32]) {
    %1339 = @func_1319() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), bool], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
    %1340 = cast(meta[relay.Constant][46] /* ty=Tensor[(66, 4), float32] */, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
    %1341 = reshape(%1340, newshape=[66, 4]) /* ty=Tensor[(66, 4), float32] */;
    %1342 = @func_12376(%1341) /* ty=(Tensor[(66, 4), float64],) */;
    %1343 = %1339.2;
    %1344 = %1342.0;
    (%1343, %1344, meta[relay.Constant][46] /* ty=Tensor[(66, 4), float32] */)
  };
  %1345() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(66, 4), float64], Tensor[(66, 4), float32]) */
}

def @func_8059() -> Tensor[(5, 14, 9), float32] {
  @func_8057() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15608() -> (Tensor[(5, 14, 9), float32],) {
  %1348 = fn () -> (Tensor[(5, 14, 9), float32],) {
    %1346 = @func_12291() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1347 = %1346.0;
    (%1347,)
  };
  %1348() /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_3215() -> Tensor[(5, 14, 9), float32] {
  %1349 = @func_1645() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1349.0
}

def @func_4505() -> Tensor[(5, 14, 9), float32] {
  %1351 = fn () -> Tensor[(5, 14, 9), float32] {
    %1350 = @func_1280() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1350.0
  };
  %1351() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_7031() -> Tensor[(840), float64] {
  %1352 = fn () -> Tensor[(840), float64] {
    @func_4831() /* ty=Tensor[(840), float64] */
  };
  %1352() /* ty=Tensor[(840), float64] */
}

def @func_5540(%var_5519: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32], Tensor[(3, 8, 3), float32]) {
  %1353 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1354 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1355 = shape_of(%var_5519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1356 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1357 = dyn.reshape(%1354, %1355, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1358 = cast(%var_5519, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %1359 = sigmoid(%1353) /* ty=Tensor[(3, 8, 3), float32] */;
  %1360 = floor_mod(%1356, %1357) /* ty=Tensor[(3, 8, 3), float32] */;
  %1361 = atanh(%1358) /* ty=Tensor[(3, 8, 3), float32] */;
  (%1359, %1360, %1361)
}

def @func_12980() -> Tensor[(5, 14, 9), float32] {
  @func_12978() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_15862(%var_15837: Tensor[(4, 36), float64]) -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(4, 36), uint16], Tensor[(4, 36), float64], Tensor[(4, 36), float64]) {
  %1362 = @func_8270() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1363 = @func_15607() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1364 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %1365 = reshape(%1364, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %1366 = @func_5989(%1365) /* ty=(Tensor[(3, 12, 12), int8], Tensor[(144), float64], Tensor[(432), float64], Tensor[(8, 2, 11), float32]) */;
  %1367 = %1366.1;
  %1368 = cast(%1367, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %1369 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(4, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1370 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 36), float64] */, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %1371 = dyn.reshape(%1368, %1369, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %1372 = cast(%var_15837, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %1373 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(4, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1374 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %1375 = dyn.reshape(%1372, %1373, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1376 = cast(%var_15837, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %1377 = @func_6512() /* ty=Tensor[(5, 14, 9), float32] */;
  %1378 = %1362.0;
  %1379 = %1363.0;
  %1380 = right_shift(%1370, %1371) /* ty=Tensor[(4, 36), uint16] */;
  %1381 = power(%1374, %1375) /* ty=Tensor[(4, 36), float64] */;
  %1382 = rsqrt(%1376) /* ty=Tensor[(4, 36), float64] */;
  (%1377, %1378, %1379, %1380, %1381, %1382)
}

def @func_5866() -> Tensor[(5, 14, 9), float32] {
  %1384 = fn () -> Tensor[(5, 14, 9), float32] {
    %1383 = @func_1761() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float64]) */;
    %1383.0
  };
  %1384() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_5858() -> Tensor[(5, 14, 9), float32] {
  %1386 = fn () -> Tensor[(5, 14, 9), float32] {
    %1385 = @func_2577() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float64]) */;
    %1385.1
  };
  %1386() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_1719() -> (Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) {
  @func_1717() /* ty=(Tensor[(8, 2, 11), bool], Tensor[(8, 2, 11), int32]) */
}

def @func_118() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1395 = fn () -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
    %1387 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1388 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1389 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1390 = @func_24() /* ty=(Tensor[(5, 14, 9), float32],) */;
    %1391 = %1387.0;
    %1392 = %1388.0;
    %1393 = %1389.0;
    %1394 = %1390.0;
    (%1391, %1392, %1393, %1394)
  };
  %1395() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */
}

def @func_6213() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1396 = @func_2449() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1397 = @func_117() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1398 = %1396.0;
  %1399 = %1397.1;
  (%1398, %1399)
}

def @func_8931() -> (Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) {
  %1400 = @func_8785() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1401 = @func_2918() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1402 = @func_630() /* ty=(Tensor[(5, 14, 9), float32],) */;
  %1403 = @func_7493() /* ty=(Tensor[(5, 14, 9), float32], Tensor[(5, 14, 9), float32]) */;
  %1404 = %1400.1;
  %1405 = %1401.0;
  %1406 = @func_6433() /* ty=Tensor[(5, 14, 9), float32] */;
  %1407 = %1402.0;
  %1408 = %1403.0;
  (%1404, %1405, %1406, %1407, %1408)
}

def @func_3217() -> Tensor[(5, 14, 9), float32] {
  @func_3215() /* ty=Tensor[(5, 14, 9), float32] */
}

def @func_4399() -> (Tensor[(5, 14, 9), float32],) {
  @func_4397() /* ty=(Tensor[(5, 14, 9), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen573/build/output.py", line 5231, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:34:34] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

