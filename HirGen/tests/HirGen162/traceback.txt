==========mod==========
#[version = "0.0.5"]
def @func_5907() -> (Tensor[(11, 12, 15), float32],) {
  %0 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  (%0,)
}

def @main() -> (Tensor[(16, 16, 3), float64], Tensor[(11, 12, 15), int64]) {
  %1 = @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
  %2 = @func_5295() /* ty=Tensor[(11, 12, 15), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 12, 15), float64] */, dtype="int64") /* ty=Tensor[(11, 12, 15), int64] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="int64") /* ty=Tensor[(11, 12, 15), int64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %7 = %1.2;
  %8 = left_shift(%5, %6) /* ty=Tensor[(11, 12, 15), int64] */;
  (%7, %8)
}

def @func_5168() -> (Tensor[(11, 12, 15), float64],) {
  %9 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  (%9,)
}

def @func_6762() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %10 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %11 = @func_5280() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %12 = %10.0;
  %13 = %11.1;
  (%12, %13)
}

def @func_6179(%var_6131: Tensor[(10, 2, 1), int32], %var_6132: Tensor[(10, 2, 10), int32], %var_6136: Tensor[(10, 2, 10), int32]) -> (Tensor[(10, 14, 15), bool], Tensor[(2100), uint8], Tensor[(10, 2, 10), bool], Tensor[(10, 2, 10), float32]) {
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
  %15 = reshape(%14, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %16 = cast(%var_6136, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %17 = shape_of(%var_6132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_6132, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %20 = right_shift(%18, %19) /* ty=Tensor[(10, 2, 10), uint32] */;
  %21 = cast(%var_6131, dtype="int32") /* ty=Tensor[(10, 2, 1), int32] */;
  %22 = cast(%var_6132, dtype="int32") /* ty=Tensor[(10, 2, 10), int32] */;
  %23 = add(%21, %22) /* ty=Tensor[(10, 2, 10), int32] */;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
  %25 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%20, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = cast(%20, dtype="float32") /* ty=Tensor[(10, 2, 10), float32] */;
  %29 = @func_4093(%15) /* ty=Tensor[(10, 14, 15), bool] */;
  %30 = less_equal(%26, %27) /* ty=Tensor[(10, 2, 10), bool] */;
  %31 = log(%28) /* ty=Tensor[(10, 2, 10), float32] */;
  (%29, meta[relay.Constant][1] /* ty=Tensor[(2100), uint8] */, %30, %31)
}

def @func_5335(%var_5321: Tensor[(4, 12), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %32 = cast(%var_5321, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %34 = reshape(%32, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %35 = reshape(%33, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %36 = @func_2402(%34, %35) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %37 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %39 = cast(%37, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %41 = reshape(%38, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %42 = reshape(%39, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %43 = reshape(%40, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %44 = @func_4273(%41, %42, %43) /* ty=(Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) */;
  %45 = %36.2;
  %46 = %44.0;
  %47 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %48 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  (%37, %45, %var_5321, meta[relay.Constant][2] /* ty=Tensor[(630), int64] */, %46, meta[relay.Constant][3] /* ty=Tensor[(1540), int16] */, %47, %48)
}

def @func_5857() -> (Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %50 = reshape(%49, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
  %51 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %52 = @func_4852(%50) /* ty=Tensor[(4, 8, 7), float32] */;
  %53 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  %54 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %55 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  (%51, %52, meta[relay.Constant][4] /* ty=Tensor[(224), float32] */, %53, %54, %55)
}

def @func_4093(%var_4087: Tensor[(10, 14, 15), uint8]) -> Tensor[(10, 14, 15), bool] {
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %57 = shape_of(%var_4087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_4087, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%58, %59) /* ty=Tensor[(10, 14, 15), bool] */
}

def @func_6308(%var_6282: Tensor[(125), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], Tensor[(125), int64], Tensor[(15, 7, 6), bool]) {
  %60 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %61 = cast(%var_6282, dtype="int64") /* ty=Tensor[(125), int64] */;
  %62 = reshape(%60, newshape=[]) /* ty=int64 */;
  %63 = reshape(%61, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %64 = @func_3199(%62, %63) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %65 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %66 = %65.1;
  %67 = cast(6 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %68 = cast(%66, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %69 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %70 = %64.0;
  %71 = less(%67, %68) /* ty=Tensor[(15, 7, 6), bool] */;
  (%69, %70, %var_6282, %71)
}

def @func_8194(%var_8174: Tensor[(630), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(630), int64]) {
  %72 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %73 = cast(%var_8174, dtype="int64") /* ty=Tensor[(630), int64] */;
  %74 = reshape(%73, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %75 = @func_5716(%74) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) */;
  %76 = %75.1;
  %77 = cast(%76, dtype="int64") /* ty=Tensor[(630), int64] */;
  %78 = shape_of(%var_8174, dtype="int32") /* ty=Tensor[(1), int32] */;
  %79 = cast(%var_8174, dtype="int64") /* ty=Tensor[(630), int64] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?), int64] */;
  %81 = %72.0;
  %82 = logical_xor(%79, %80) /* ty=Tensor[(630), int64] */;
  (%81, %82)
}

def @func_4852(%var_4849: Tensor[(4, 8, 7), float32]) -> Tensor[(4, 8, 7), float32] {
  %83 = cast(%var_4849, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  cosh(%83) /* ty=Tensor[(4, 8, 7), float32] */
}

def @func_5953() -> Tensor[(11, 12, 15), float64] {
  %84 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %84.0
}

def @func_4443() -> Tensor[(11, 12, 15), float64] {
  @func_3903() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5782(%var_5759: Tensor[(8, 7, 11), float64], %var_5778: Tensor[(2112), float32]) -> (Tensor[(8, 7, 11), float32], Tensor[(8, 7, 11), float64], Tensor[(12, 16, 11), float64], Tensor[(2112), float32]) {
  %85 = cast(%var_5759, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %86 = cast(%var_5759, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %87 = asinh(%86) /* ty=Tensor[(8, 7, 11), float64] */;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %89 = shape_of(%var_5759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_5759, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %92 = cast(%var_5778, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %93 = reshape(%92, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float32] */;
  %94 = @func_5022(%93) /* ty=(Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) */;
  %95 = asin(%85) /* ty=Tensor[(8, 7, 11), float32] */;
  %96 = divide(%90, %91) /* ty=Tensor[(8, 7, 11), float64] */;
  %97 = %94.3;
  (%95, %96, %97, %var_5778)
}

def @func_1469(%var_1441: Tensor[(1, 11, 9), int32]) -> (Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) {
  %98 = cast(%var_1441, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
  %99 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1, 11, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 11, 9), int32] */, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %103 = reshape(%102, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %104 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %105 = reshape(%104, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %106 = right_shift(%100, %101) /* ty=Tensor[(?, 11, 9), int32] */;
  %107 = @func_567(%103) /* ty=Tensor[(16, 7, 1), float32] */;
  %108 = @func_567(%105) /* ty=Tensor[(16, 7, 1), float32] */;
  (%106, %107, meta[relay.Constant][7] /* ty=Tensor[(112), float32] */, %108)
}

def @func_8261(%var_8237: Tensor[(14, 5, 12), float64], %var_8238: Tensor[(14, 5, 12), float64]) -> (Tensor[(14, 5, 12), float64], Tensor[(11, 12, 15), float64]) {
  %109 = cast(%var_8238, dtype="float64") /* ty=Tensor[(14, 5, 12), float64] */;
  %110 = shape_of(%var_8237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_8237, dtype="float64") /* ty=Tensor[(14, 5, 12), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %113 = power(%111, %112) /* ty=Tensor[(14, 5, 12), float64] */;
  %114 = @func_6533() /* ty=Tensor[(11, 12, 15), float64] */;
  (%113, %114)
}

def @func_7968() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %115 = @func_7579() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %116 = %115.0;
  %117 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  (%116, %117)
}

def @func_8363() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(48), float64]) {
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %119 = reshape(%118, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %120 = @func_5335(%119) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %121 = @func_7238() /* ty=Tensor[(11, 12, 15), float64] */;
  %122 = %120.0;
  (%121, %122, meta[relay.Constant][8] /* ty=Tensor[(48), float64] */)
}

def @func_3183(%var_3177: Tensor[(1, 1, 1), int32], %var_3178: Tensor[(7, 1, 8), int32]) -> Tensor[(7, 1, 8), int32] {
  %123 = cast(%var_3177, dtype="int32") /* ty=Tensor[(1, 1, 1), int32] */;
  %124 = cast(%var_3178, dtype="int32") /* ty=Tensor[(7, 1, 8), int32] */;
  add(%123, %124) /* ty=Tensor[(7, 1, 8), int32] */
}

def @func_3199(%var_3192: int64, %var_3193: Tensor[(5, 5, 5), int64]) -> (Tensor[(5, 5, 5), int64],) {
  %125 = cast(%var_3192, dtype="int64") /* ty=int64 */;
  %126 = cast(%var_3193, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
  %127 = bitwise_xor(%125, %126) /* ty=Tensor[(5, 5, 5), int64] */;
  (%127,)
}

def @func_3959() -> (Tensor[(11, 12, 15), float64],) {
  %128 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %129 = %128.0;
  (%129,)
}

def @func_3903() -> Tensor[(11, 12, 15), float64] {
  @func_3853() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_4070() -> Tensor[(11, 12, 15), float64] {
  %130 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %130.0
}

def @func_762(%var_735: Tensor[(4, 1, 10), float64], %var_755: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) {
  %131 = cast(%var_755, dtype="int64") /* ty=Tensor[(630), int64] */;
  %132 = cast(%var_755, dtype="int64") /* ty=Tensor[(630), int64] */;
  %133 = reshape(%131, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %134 = reshape(%132, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %135 = cast(%var_735, dtype="float64") /* ty=Tensor[(4, 1, 10), float64] */;
  %136 = erf(%135) /* ty=Tensor[(4, 1, 10), float64] */;
  %137 = cast(%var_735, dtype="uint64") /* ty=Tensor[(4, 1, 10), uint64] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="uint64") /* ty=Tensor[(4, 1, 10), uint64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %141 = bitwise_and(%139, %140) /* ty=Tensor[(4, ?, 10), uint64] */;
  %142 = cast(%141, dtype="bool") /* ty=Tensor[(4, ?, 10), bool] */;
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 15, 10), uint64] */, dtype="bool") /* ty=Tensor[(4, 15, 10), bool] */;
  %144 = @func_432(%133, %134) /* ty=Tensor[(15, 7, 6), float64] */;
  %145 = less_equal(%142, %143) /* ty=Tensor[(4, 15, 10), bool] */;
  (%144, %var_755, %145)
}

def @func_5206() -> Tensor[(11, 12, 15), float64] {
  @func_4070() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_6071() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) {
  %146 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %149 = reshape(%148, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %150 = @func_3883(%149) /* ty=(Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(1300), float64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(1300), float64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %153 = reshape(%151, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
  %154 = reshape(%152, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
  %155 = @func_5583(%153, %154) /* ty=(Tensor[(10, 10, 13), float64],) */;
  %156 = %150.1;
  %157 = %155.0;
  (%147, %156, %157, meta[relay.Constant][10] /* ty=Tensor[(1300), float64] */)
}

def @func_6456() -> Tensor[(16, 16, 3), float64] {
  %158 = @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
  %158.3
}

def @func_7420() -> (Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
  %159 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  %162 = sinh(%161) /* ty=Tensor[(11, 12, 15), float32] */;
  %163 = @func_6004() /* ty=Tensor[(11, 12, 15), float64] */;
  (%162, %163)
}

def @func_4906(%var_4868: Tensor[(11, 12, 15), float64]) -> (Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) {
  %164 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %165 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %166 = cast(%var_4868, dtype="uint8") /* ty=Tensor[(11, 12, 15), uint8] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="uint8") /* ty=Tensor[(11, 12, 15), uint8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %170 = cast(%var_4868, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  %171 = %164.1;
  %172 = minimum(%168, %169) /* ty=Tensor[(11, 12, 15), uint8] */;
  %173 = sin(%170) /* ty=Tensor[(11, 12, 15), float32] */;
  (%171, %172, %173)
}

def @func_3363(%var_3353: Tensor[(9, 9, 15), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(9, 9, 15), float32]) {
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 1), float64] */;
  %175 = cast(%var_3353, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
  %176 = cast(%var_3353, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %177 = floor_mod(%174, %175) /* ty=Tensor[(9, 9, 15), float64] */;
  %178 = log2(%176) /* ty=Tensor[(9, 9, 15), float32] */;
  (%177, %178)
}

def @func_6799(%var_6790: Tensor[(36, 1), float32], %var_6797: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) {
  %179 = @func_6762() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %180 = cast(%var_6790, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %182 = reshape(%180, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %183 = reshape(%181, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %184 = @func_3674(%182, %183) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %185 = %179.0;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %187 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %189 = cast(%var_6797, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %190 = reshape(%186, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %191 = reshape(%188, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %192 = reshape(%189, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %193 = @func_4273(%190, %191, %192) /* ty=(Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) */;
  %194 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  %195 = %184.8;
  %196 = %193.1;
  (%185, %194, %195, %var_6790, meta[relay.Constant][12] /* ty=Tensor[(48), float64] */, %187, %196, %var_6797)
}

def @func_5280() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %197 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %198 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  (%197, %198)
}

def @func_5022(%var_4994: Tensor[(12, 16, 11), float32]) -> (Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) {
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %200 = reshape(%199, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %201 = @func_1469(%200) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %202 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %203 = %202.0;
  %204 = cast(%var_4994, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %208 = cast(%var_4994, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %209 = %201.2;
  %210 = floor_divide(%206, %207) /* ty=Tensor[(12, 16, 11), float32] */;
  %211 = log(%208) /* ty=Tensor[(12, 16, 11), float64] */;
  (%209, meta[relay.Constant][13] /* ty=Tensor[(99), int32] */, %210, %211)
}

def @func_2402(%var_2385: Tensor[(3, 1, 16), float64], %var_2397: Tensor[(630), int64]) -> (Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) {
  %212 = cast(%var_2385, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  %213 = cast(%var_2397, dtype="int64") /* ty=Tensor[(630), int64] */;
  %214 = cast(%var_2397, dtype="int64") /* ty=Tensor[(630), int64] */;
  %215 = reshape(%213, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %216 = reshape(%214, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %217 = cast(meta[relay.Constant][14] /* ty=Tensor[(33, 3), int32] */, dtype="int32") /* ty=Tensor[(33, 3), int32] */;
  %218 = reshape(%217, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %219 = @func_1469(%218) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %220 = log10(%212) /* ty=Tensor[(3, 1, 16), float64] */;
  %221 = @func_432(%215, %216) /* ty=Tensor[(15, 7, 6), float64] */;
  %222 = %219.2;
  (%220, %221, %var_2397, %222, meta[relay.Constant][14] /* ty=Tensor[(33, 3), int32] */)
}

def @func_567(%var_562: Tensor[(16, 7, 1), float32]) -> Tensor[(16, 7, 1), float32] {
  %223 = cast(%var_562, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
  erf(%223) /* ty=Tensor[(16, 7, 1), float32] */
}

def @func_4461() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) {
  %224 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %225 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  (%224, %225)
}

def @func_2150(%var_2133: Tensor[(6, 12, 9), bool]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), bool]) {
  %226 = cast(%var_2133, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %227 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 12, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %231 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_2133, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = logical_or(%228, %229) /* ty=Tensor[(6, 12, 9), bool] */;
  %235 = less(%232, %233) /* ty=Tensor[(6, 12, 9), bool] */;
  (%234, %235)
}

def @func_3993(%var_3986: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), int32],) {
  %236 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  %237 = cast(%var_3986, dtype="int32") /* ty=Tensor[(11, 12, 15), int32] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="int32") /* ty=Tensor[(11, 12, 15), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %241 = subtract(%239, %240) /* ty=Tensor[(11, 12, 15), int32] */;
  (%241,)
}

def @func_6433() -> (Tensor[(11, 12, 15), float64], Tensor[(7, 1, 8), int32], Tensor[(56), int32], Tensor[(8, 1), bool], Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(15, 7, 6), float64]) {
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1), int32] */, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %244 = reshape(%242, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), int32] */;
  %245 = reshape(%243, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), int32] */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1), int32] */, dtype="bool") /* ty=Tensor[(1, 1), bool] */;
  %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 1), int32] */, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %248 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %249 = reshape(%248, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %250 = @func_5335(%249) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %251 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %253 = reshape(%252, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %254 = @func_4906(%253) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) */;
  %255 = @func_3183(%244, %245) /* ty=Tensor[(7, 1, 8), int32] */;
  %256 = less(%246, %247) /* ty=Tensor[(8, 1), bool] */;
  %257 = %250.2;
  %258 = %254.0;
  (%251, %255, meta[relay.Constant][17] /* ty=Tensor[(56), int32] */, %256, %257, meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, %258)
}

def @func_4628() -> Tensor[(13, 13, 4), float64] {
  %259 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %260 = %259.1;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %262 = cosh(%261) /* ty=Tensor[(13, 13, 4), float64] */;
  %263 = cast(%260, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %267 = left_shift(%265, %266) /* ty=Tensor[(13, 13, 4), uint32] */;
  %268 = cast(%262, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%270, %271) /* ty=Tensor[(13, 13, 4), float64] */
}

def @func_7579() -> (Tensor[(11, 12, 15), float64],) {
  %272 = @func_6743() /* ty=Tensor[(11, 12, 15), float64] */;
  (%272,)
}

def @func_1898(%var_1814: Tensor[(2, 10, 3), float64], %var_1830: Tensor[(10, 63), int64], %var_1836: Tensor[(99), int32]) -> (Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) {
  %273 = cast(%var_1836, dtype="int32") /* ty=Tensor[(99), int32] */;
  %274 = reshape(%273, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %275 = @func_1469(%274) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %276 = cast(meta[relay.Constant][20] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %277 = cast(%var_1830, dtype="int64") /* ty=Tensor[(10, 63), int64] */;
  %278 = reshape(%276, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), float64] */;
  %279 = reshape(%277, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %280 = @func_762(%278, %279) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) */;
  %281 = %280.1;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(630), float32] */;
  %283 = shape_of(%var_1830, dtype="int32") /* ty=Tensor[(2), int32] */;
  %284 = cast(%var_1830, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %286 = %275.3;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
  %288 = reshape(%287, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 3), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %290 = shape_of(%var_1814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1814, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = subtract(%291, %292) /* ty=Tensor[(2, 10, 3), float32] */;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %295 = tan(%294) /* ty=Tensor[(2, 10, 3), float64] */;
  %296 = cast(%var_1814, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %297 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %300 = mod(%298, %299) /* ty=Tensor[(2, 10, 3), float64] */;
  %301 = cast(%300, dtype="uint16") /* ty=Tensor[(2, 10, 3), uint16] */;
  %302 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%295, dtype="uint16") /* ty=Tensor[(2, 10, 3), uint16] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %305 = bitwise_xor(%303, %304) /* ty=Tensor[(2, 10, 3), uint16] */;
  %306 = cast(%305, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %307 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%295, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = cast(%300, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %311 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%295, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %314 = divide(%284, %285) /* ty=Tensor[(10, 63), float32] */;
  %315 = @func_567(%288) /* ty=Tensor[(16, 7, 1), float32] */;
  %316 = not_equal(%308, %309) /* ty=Tensor[(2, 10, 3), bool] */;
  %317 = minimum(%312, %313) /* ty=Tensor[(2, 10, 3), float32] */;
  (meta[relay.Constant][20] /* ty=Tensor[(40), float64] */, %286, %var_1836, %314, %315, %316, %317)
}

def @func_2633(%var_2596: Tensor[(2, 1, 9), float32]) -> Tensor[(2, ?, 9), float32] {
  %318 = cast(%var_2596, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %319 = exp(%318) /* ty=Tensor[(2, 1, 9), float32] */;
  %320 = cast(%319, dtype="uint64") /* ty=Tensor[(2, 1, 9), uint64] */;
  %321 = shape_of(%var_2596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_2596, dtype="uint64") /* ty=Tensor[(2, 1, 9), uint64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %324 = minimum(%322, %323) /* ty=Tensor[(2, ?, 9), uint64] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(2, ?, 9), float32] */;
  sin(%325) /* ty=Tensor[(2, ?, 9), float32] */
}

def @func_7238() -> Tensor[(11, 12, 15), float64] {
  %326 = @func_6664() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %326.0
}

def @func_7114() -> (Tensor[(11, 12, 15), float32], Tensor[(16, 16, 3), float32], Tensor[(11, 12, 15), float64]) {
  %327 = @func_6922() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) */;
  %328 = @func_6738() /* ty=(Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) */;
  %329 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %330 = %327.4;
  %331 = %328.0;
  %332 = %329.0;
  (%330, %331, %332)
}

def @func_5435(%var_5419: Tensor[(48), float64]) -> (Tensor[(11, 12, 15), float64], Tensor[(210, 3), int64], Tensor[(3, ?, 16), int64]) {
  %333 = cast(%var_5419, dtype="float64") /* ty=Tensor[(48), float64] */;
  %334 = cast(meta[relay.Constant][22] /* ty=Tensor[(210, 3), int64] */, dtype="int64") /* ty=Tensor[(210, 3), int64] */;
  %335 = reshape(%333, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %336 = reshape(%334, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %337 = @func_2402(%335, %336) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %338 = %337.0;
  %339 = cast(%var_5419, dtype="int64") /* ty=Tensor[(48), int64] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="int64") /* ty=Tensor[(3, 1, 16), int64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %343 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %344 = bitwise_or(%341, %342) /* ty=Tensor[(3, ?, 16), int64] */;
  (%343, meta[relay.Constant][22] /* ty=Tensor[(210, 3), int64] */, %344)
}

def @func_3853() -> Tensor[(11, 12, 15), float64] {
  %345 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %345.0
}

def @func_6239() -> (Tensor[(16, 7, 1), float32],) {
  %346 = @func_4530() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) */;
  %347 = %346.1;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
  %349 = sigmoid(%348) /* ty=Tensor[(16, 7, 1), float32] */;
  (%349,)
}

def @func_4968(%var_4938: Tensor[(11, 12, 15), float64], %var_4950: int64, %var_4954: Tensor[(30, 2), float64]) -> (Tensor[(11, 12, 15), bool], int64, int64, Tensor[(2, 10, 3), bool], Tensor[(30, 2), float64], Tensor[(630), int64], Tensor[(99), int32], Tensor[(16, 7, 1), float32]) {
  %350 = @func_4443() /* ty=Tensor[(11, 12, 15), float64] */;
  %351 = cast(%var_4938, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = cast(%var_4950, dtype="int64") /* ty=int64 */;
  %356 = reshape(%355, newshape=[]) /* ty=int64 */;
  %357 = @func_4686(%356) /* ty=(Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) */;
  %358 = cast(%var_4954, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %359 = cast(meta[relay.Constant][23] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %360 = cast(meta[relay.Constant][24] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %361 = reshape(%358, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float64] */;
  %362 = reshape(%359, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
  %363 = reshape(%360, newshape=[99]) /* ty=Tensor[(99), int32] */;
  %364 = @func_1898(%361, %362, %363) /* ty=(Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) */;
  %365 = cast(meta[relay.Constant][24] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %366 = reshape(%365, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %367 = @func_1469(%366) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %368 = greater(%353, %354) /* ty=Tensor[(11, 12, 15), bool] */;
  %369 = %357.1;
  %370 = %364.5;
  %371 = %367.3;
  (%368, %369, %var_4950, %370, %var_4954, meta[relay.Constant][23] /* ty=Tensor[(630), int64] */, meta[relay.Constant][24] /* ty=Tensor[(99), int32] */, %371)
}

def @func_4136(%var_4118: Tensor[(12, 4), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(112), float32], Tensor[(36), float32], Tensor[(12, 4), float64], Tensor[(11, 12, 15), float64]) {
  %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %373 = cast(%var_4118, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %374 = reshape(%372, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %375 = reshape(%373, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %376 = @func_3674(%374, %375) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %377 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %378 = %376.8;
  %379 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  (%377, %378, meta[relay.Constant][25] /* ty=Tensor[(36), float32] */, %var_4118, %379)
}

def @func_5607() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), float64]) {
  %380 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %381 = %380.1;
  %382 = @func_4628() /* ty=Tensor[(13, 13, 4), float64] */;
  (%381, %382)
}

def @func_5583(%var_5573: Tensor[(10, 10, 13), float64], %var_5574: Tensor[(10, 10, 13), float64]) -> (Tensor[(10, 10, 13), float64],) {
  %383 = cast(%var_5574, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
  %384 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_5573, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %387 = add(%385, %386) /* ty=Tensor[(10, 10, 13), float64] */;
  (%387,)
}

def @func_7672() -> Tensor[(11, 12, 15), float32] {
  %388 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  exp(%390) /* ty=Tensor[(11, 12, 15), float32] */
}

def @func_8342() -> (Tensor[(11, 12, 15), float64],) {
  %391 = @func_7579() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %392 = %391.0;
  (%392,)
}

def @func_3826(%var_3801: Tensor[(28, 4), float32], %var_3809: Tensor[(208), bool]) -> (Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(1456), bool], Tensor[(28, 4), float32], Tensor[(11, 12, 15), float64], Tensor[(208), uint16]) {
  %393 = cast(meta[relay.Constant][26] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %394 = cast(meta[relay.Constant][27] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %395 = cast(%var_3801, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %396 = reshape(%393, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), bool] */;
  %397 = reshape(%394, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), bool] */;
  %398 = reshape(%395, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %399 = @func_1090(%396, %397, %398) /* ty=(Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) */;
  %400 = cast(%var_3809, dtype="uint16") /* ty=Tensor[(208), uint16] */;
  %401 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(208), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %402 = cast(meta[relay.Constant][26] /* ty=Tensor[(208), bool] */, dtype="uint16") /* ty=Tensor[(208), uint16] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %404 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %405 = %399.2;
  %406 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %407 = minimum(%402, %403) /* ty=Tensor[(208), uint16] */;
  (%404, %405, meta[relay.Constant][27] /* ty=Tensor[(1456), bool] */, %var_3801, %406, %407)
}

def @func_5716(%var_5699: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) {
  %408 = cast(%var_5699, dtype="int64") /* ty=Tensor[(630), int64] */;
  %409 = cast(%var_5699, dtype="int64") /* ty=Tensor[(630), int64] */;
  %410 = reshape(%408, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %411 = reshape(%409, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %412 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %415 = atanh(%414) /* ty=Tensor[(13, 13, 4), float32] */;
  %416 = cast(%413, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %420 = @func_432(%410, %411) /* ty=Tensor[(15, 7, 6), float64] */;
  %421 = bitwise_and(%418, %419) /* ty=Tensor[(13, 13, 4), uint32] */;
  (%420, %var_5699, %421)
}

def @func_3674(%var_3594: Tensor[(1, 6, 6), float32], %var_3657: Tensor[(48), float64]) -> (Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) {
  %422 = cast(%var_3594, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %423 = log10(%422) /* ty=Tensor[(1, 6, 6), float32] */;
  %424 = cast(%var_3594, dtype="int8") /* ty=Tensor[(1, 6, 6), int8] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int8") /* ty=Tensor[(1, 6, 6), int8] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %428 = bitwise_and(%426, %427) /* ty=Tensor[(?, 6, 6), int8] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(?, 6, 6), float32] */;
  %430 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%423, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %433 = cast(meta[relay.Constant][28] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %434 = reshape(%433, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), int8] */;
  %435 = @func_1964(%434) /* ty=(Tensor[(2, 6, 10), int8],) */;
  %436 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %437 = cast(meta[relay.Constant][29] /* ty=Tensor[(25, 5), int64] */, dtype="int64") /* ty=Tensor[(25, 5), int64] */;
  %438 = reshape(%436, newshape=[]) /* ty=int64 */;
  %439 = reshape(%437, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %440 = @func_3199(%438, %439) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %441 = cast(%428, dtype="uint64") /* ty=Tensor[(?, 6, 6), uint64] */;
  %442 = cast(-3 /* ty=int64 */, dtype="uint64") /* ty=uint64 */;
  %443 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %444 = %440.0;
  %445 = cast(%444, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
  %446 = reshape(%443, newshape=[]) /* ty=int64 */;
  %447 = reshape(%445, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %448 = @func_3199(%446, %447) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %449 = cast(%423, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
  %450 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%428, dtype="uint16") /* ty=Tensor[(?, 6, 6), uint16] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %453 = subtract(%451, %452) /* ty=Tensor[(?, 6, 6), uint16] */;
  %454 = cast(%453, dtype="int16") /* ty=Tensor[(?, 6, 6), int16] */;
  %455 = cast(-3 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %456 = cast(%var_3657, dtype="float64") /* ty=Tensor[(48), float64] */;
  %457 = cast(meta[relay.Constant][30] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %458 = reshape(%456, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %459 = reshape(%457, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %460 = @func_2402(%458, %459) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %461 = floor_divide(%431, %432) /* ty=Tensor[(?, 6, 6), float32] */;
  %462 = %435.0;
  %463 = bitwise_or(%441, %442) /* ty=Tensor[(?, 6, 6), uint64] */;
  %464 = %448.0;
  %465 = left_shift(%454, %455) /* ty=Tensor[(?, 6, 6), int16] */;
  %466 = %460.3;
  (%461, %462, meta[relay.Constant][28] /* ty=Tensor[(30, 4), int8] */, %444, meta[relay.Constant][29] /* ty=Tensor[(25, 5), int64] */, %463, %464, %465, %466, %var_3657, meta[relay.Constant][30] /* ty=Tensor[(630), int64] */)
}

def @func_6706() -> (Tensor[(12, 16, 11), float32], Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
  %467 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %468 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %469 = @func_5564() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %470 = %467.0;
  %471 = %468.1;
  %472 = %469.0;
  (%470, %471, %472)
}

def @func_8066(%var_7993: Tensor[(48), float64], %var_8007: Tensor[(208), bool], %var_8008: Tensor[(1456), bool], %var_8009: Tensor[(112), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(48), float64], Tensor[(3, 12), float32], Tensor[(48), float64], Tensor[(208), bool], Tensor[(1456), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(16, 7, ?), bool], Tensor[(11, 12, 15), float32]) {
  %473 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %474 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %475 = cast(%var_7993, dtype="float64") /* ty=Tensor[(48), float64] */;
  %476 = reshape(%474, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %477 = reshape(%475, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %478 = @func_3674(%476, %477) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %479 = @func_6664() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %480 = cast(%var_7993, dtype="float64") /* ty=Tensor[(48), float64] */;
  %481 = reshape(%480, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %482 = @func_5335(%481) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %483 = cast(%var_8007, dtype="bool") /* ty=Tensor[(208), bool] */;
  %484 = cast(%var_8008, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %485 = cast(%var_8009, dtype="float32") /* ty=Tensor[(112), float32] */;
  %486 = reshape(%483, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), bool] */;
  %487 = reshape(%484, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), bool] */;
  %488 = reshape(%485, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %489 = @func_1090(%486, %487, %488) /* ty=(Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) */;
  %490 = %489.1;
  %491 = cast(%var_8009, dtype="bool") /* ty=Tensor[(112), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(16, 7, 1), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  %497 = %473.0;
  %498 = %478.9;
  %499 = %479.0;
  %500 = %482.0;
  %501 = less(%493, %494) /* ty=Tensor[(16, 7, ?), bool] */;
  %502 = sqrt(%496) /* ty=Tensor[(11, 12, 15), float32] */;
  (%497, %498, meta[relay.Constant][31] /* ty=Tensor[(3, 12), float32] */, %var_7993, %var_8007, %var_8008, %499, %500, %501, %502)
}

def @func_7861(%var_7848: Tensor[(9, 4), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(?, 6, 6), uint64], Tensor[(9, 4), float32], Tensor[(48), float64]) {
  %503 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %504 = cast(%var_7848, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %505 = cast(meta[relay.Constant][32] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %506 = reshape(%504, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %507 = reshape(%505, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %508 = @func_3674(%506, %507) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %509 = %503.0;
  %510 = %508.5;
  (%509, %510, %var_7848, meta[relay.Constant][32] /* ty=Tensor[(48), float64] */)
}

def @func_6124(%var_6116: int64) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], int64, Tensor[(125), int64]) {
  %511 = cast(%var_6116, dtype="int64") /* ty=int64 */;
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
  %513 = reshape(%511, newshape=[]) /* ty=int64 */;
  %514 = reshape(%512, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %515 = @func_3199(%513, %514) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %516 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %517 = %515.0;
  (%516, %517, %var_6116, meta[relay.Constant][33] /* ty=Tensor[(125), int64] */)
}

def @func_7911() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) {
  %518 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %519 = cast(meta[relay.Constant][35] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %520 = reshape(%518, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %521 = reshape(%519, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %522 = @func_6799(%520, %521) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) */;
  %523 = @func_7238() /* ty=Tensor[(11, 12, 15), float64] */;
  %524 = %522.5;
  (%523, %524, meta[relay.Constant][34] /* ty=Tensor[(3, 12), float32] */, meta[relay.Constant][35] /* ty=Tensor[(1540), int16] */)
}

def @func_4830() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) {
  %525 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 16, 3), bool] */, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %526 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 16, 3), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %527 = cosh(%526) /* ty=Tensor[(16, 16, 3), float64] */;
  %528 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 16, 1), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %529 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %530 = logical_and(%528, %529) /* ty=Tensor[(16, 16, 3), bool] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %532 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%527, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = cast(%530, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %536 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%527, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %539 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  %540 = sigmoid(%525) /* ty=Tensor[(16, 16, 3), float32] */;
  %541 = multiply(%533, %534) /* ty=Tensor[(16, 16, 3), float64] */;
  %542 = mod(%537, %538) /* ty=Tensor[(16, 16, 3), float64] */;
  (%539, %540, %541, %542)
}

def @func_4027() -> Tensor[(11, 12, 15), float32] {
  %543 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  log10(%545) /* ty=Tensor[(11, 12, 15), float32] */
}

def @func_7643() -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(5, 5, 9), float32], Tensor[(11, 12, 15), bool], Tensor[(3, 660), float64]) {
  %546 = cast(meta[relay.Constant][38] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %547 = reshape(%546, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %548 = @func_5716(%547) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) */;
  %549 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %550 = sqrt(%549) /* ty=Tensor[(5, 5, 9), float64] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %552 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 660), float64] */, dtype="float64") /* ty=Tensor[(3, 660), float64] */;
  %553 = reshape(%552, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %554 = @func_3883(%553) /* ty=(Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %555 = %548.0;
  %556 = exp(%551) /* ty=Tensor[(5, 5, 9), float32] */;
  %557 = %554.0;
  (%555, meta[relay.Constant][38] /* ty=Tensor[(630), int64] */, %556, %557, meta[relay.Constant][40] /* ty=Tensor[(3, 660), float64] */)
}

def @func_5564() -> (Tensor[(11, 12, 15), float64],) {
  %558 = @func_4443() /* ty=Tensor[(11, 12, 15), float64] */;
  (%558,)
}

def @func_1090(%var_1070: Tensor[(13, 16, 1), bool], %var_1071: Tensor[(13, 16, 7), bool], %var_1078: Tensor[(112), float32]) -> (Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) {
  %559 = cast(%var_1070, dtype="bool") /* ty=Tensor[(13, 16, 1), bool] */;
  %560 = cast(%var_1071, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
  %561 = cast(%var_1078, dtype="float32") /* ty=Tensor[(112), float32] */;
  %562 = reshape(%561, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %563 = cast(%var_1071, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %564 = log10(%563) /* ty=Tensor[(13, 16, 7), float64] */;
  %565 = cast(%var_1071, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = logical_and(%559, %560) /* ty=Tensor[(13, 16, 7), bool] */;
  %570 = @func_567(%562) /* ty=Tensor[(16, 7, 1), float32] */;
  %571 = logical_or(%567, %568) /* ty=Tensor[(13, 16, 7), bool] */;
  (%569, %570, %var_1078, %571)
}

def @func_6581(%var_6559: Tensor[(2112), float32]) -> (Tensor[(12, 16, 11), float64], Tensor[(2112), float32], Tensor[(11, 12, 15), float32], Tensor[(13, 13, 4), bool]) {
  %572 = cast(%var_6559, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %573 = reshape(%572, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float32] */;
  %574 = @func_5022(%573) /* ty=(Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) */;
  %575 = @func_5907() /* ty=(Tensor[(11, 12, 15), float32],) */;
  %576 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %579 = exp(%578) /* ty=Tensor[(13, 13, 4), float32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = %574.3;
  %585 = %575.0;
  %586 = logical_and(%582, %583) /* ty=Tensor[(13, 13, 4), bool] */;
  (%584, %var_6559, %585, %586)
}

def @func_6664() -> (Tensor[(11, 12, 15), float64],) {
  %587 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %588 = %587.0;
  (%588,)
}

def @func_8501() -> Tensor[(13, 13, 4), bool] {
  %589 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %589.0
}

def @func_4149() -> Tensor[(11, 12, 15), float64] {
  %590 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %590.0
}

def @func_3883(%var_3873: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %591 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %592 = cast(%var_3873, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = cast(%591, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %597 = not_equal(%594, %595) /* ty=Tensor[(11, 12, 15), bool] */;
  %598 = acosh(%596) /* ty=Tensor[(11, 12, 15), float64] */;
  %599 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%597, %598, %599)
}

def @func_5043() -> (Tensor[(13, 13, 4), bool],) {
  %600 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %601 = %600.1;
  (%601,)
}

def @func_8489() -> Tensor[(11, 12, 15), float64] {
  %602 = @func_7911() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) */;
  %602.1
}

def @func_6922() -> (Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) {
  %603 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %604 = cast(meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(770, 2), int16] */, dtype="int16") /* ty=Tensor[(770, 2), int16] */;
  %606 = reshape(%604, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %607 = reshape(%605, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %608 = @func_6799(%606, %607) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) */;
  %609 = @func_5907() /* ty=(Tensor[(11, 12, 15), float32],) */;
  %610 = %603.0;
  %611 = %608.1;
  %612 = %609.0;
  (%610, %611, meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, meta[relay.Constant][42] /* ty=Tensor[(770, 2), int16] */, %612)
}

def @func_5405() -> (Tensor[(11, 12, 15), float64],) {
  %613 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%613,)
}

def @func_3714() -> (Tensor[(11, 12, 15), float64],) {
  %614 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %615 = erf(%614) /* ty=Tensor[(11, 12, 15), float64] */;
  (%615,)
}

def @func_5358(%var_5343: Tensor[(13, 15, 13), uint64]) -> (Tensor[(13, 15, 13), uint64], Tensor[(11, 12, 15), float64]) {
  %616 = cast(%var_5343, dtype="uint64") /* ty=Tensor[(13, 15, 13), uint64] */;
  %617 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 15, 13), uint64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %620 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %621 = bitwise_and(%618, %619) /* ty=Tensor[(13, 15, 13), uint64] */;
  %622 = %620.0;
  (%621, %622)
}

def @func_432(%var_391: Tensor[(15, 7, 6), int64], %var_392: Tensor[(15, 7, 6), int64]) -> Tensor[(15, 7, 6), float64] {
  %623 = cast(%var_392, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %624 = shape_of(%var_391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%var_391, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %627 = bitwise_xor(%625, %626) /* ty=Tensor[(15, 7, 6), int64] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %629 = acos(%628) /* ty=Tensor[(15, 7, 6), float64] */;
  %630 = cast(%627, dtype="uint16") /* ty=Tensor[(15, 7, 6), uint16] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="uint16") /* ty=Tensor[(15, 7, 6), uint16] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %634 = subtract(%632, %633) /* ty=Tensor[(15, 7, 6), uint16] */;
  %635 = cast(%var_392, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%637, %638) /* ty=Tensor[(15, 7, 6), float64] */
}

def @func_7307(%var_7282: float64, %var_7283: Tensor[(2, 5, 6), float64]) -> (Tensor[(2, 5, 6), float64],) {
  %639 = cast(%var_7282, dtype="float64") /* ty=float64 */;
  %640 = cast(%var_7283, dtype="float64") /* ty=Tensor[(2, 5, 6), float64] */;
  %641 = floor_divide(%639, %640) /* ty=Tensor[(2, 5, 6), float64] */;
  (%641,)
}

def @func_8144() -> Tensor[(11, 12, 15), float64] {
  @func_4149() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_7522(%var_7514: Tensor[(10, 2, 9), float32]) -> Tensor[(10, 2, 9), float64] {
  %642 = cast(%var_7514, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %643 = atan(%642) /* ty=Tensor[(10, 2, 9), float32] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %645 = shape_of(%var_7514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_7514, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%646, %647) /* ty=Tensor[(10, 2, 9), float64] */
}

def @func_1964(%var_1953: Tensor[(2, 6, 10), int8]) -> (Tensor[(2, 6, 10), int8],) {
  %648 = cast(%var_1953, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
  %649 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2, 6, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 6, 10), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %652 = left_shift(%650, %651) /* ty=Tensor[(2, 6, 10), int8] */;
  (%652,)
}

def @func_6743() -> Tensor[(11, 12, 15), float64] {
  @func_3903() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_4530() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) {
  %653 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %655 = rsqrt(%654) /* ty=Tensor[(11, 12, 15), float64] */;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %657 = cast(meta[relay.Constant][46] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %658 = reshape(%657, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %659 = cast(meta[relay.Constant][47] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %660 = reshape(%659, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %661 = @func_1469(%660) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %662 = acos(%656) /* ty=Tensor[(11, 12, 15), float64] */;
  %663 = @func_567(%658) /* ty=Tensor[(16, 7, 1), float32] */;
  %664 = %661.0;
  %665 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%662, %663, meta[relay.Constant][46] /* ty=Tensor[(112), float32] */, %664, meta[relay.Constant][47] /* ty=Tensor[(99), int32] */, %665)
}

def @func_4303() -> (Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) {
  %666 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %667 = cast(meta[relay.Constant][49] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %668 = cast(meta[relay.Constant][49] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %669 = reshape(%667, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %670 = reshape(%668, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
  %671 = atan(%666) /* ty=Tensor[(12, 16, 11), float32] */;
  %672 = @func_432(%669, %670) /* ty=Tensor[(15, 7, 6), float64] */;
  (%671, %672, meta[relay.Constant][49] /* ty=Tensor[(630), int64] */)
}

def @func_6004() -> Tensor[(11, 12, 15), float64] {
  %673 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %673.0
}

def @func_7500() -> (Tensor[(11, 12, 15), float64], Tensor[(1300), float64]) {
  %674 = @func_6071() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) */;
  %675 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %676 = %674.3;
  (%675, %676)
}

def @func_2436(%var_2430: Tensor[(14, 3, 4), float64]) -> Tensor[(14, 3, 4), float64] {
  %677 = cast(%var_2430, dtype="float64") /* ty=Tensor[(14, 3, 4), float64] */;
  %678 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(14, 3, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 3, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 4), float64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%679, %680) /* ty=Tensor[(14, 3, 4), float64] */
}

def @func_4105(%var_4098: Tensor[(11, 14, 10), int16], %var_4099: Tensor[(11, 14, 10), int16]) -> (Tensor[(11, 14, 10), bool],) {
  %681 = cast(%var_4099, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %682 = shape_of(%var_4098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_4098, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = not_equal(%683, %684) /* ty=Tensor[(11, 14, 10), bool] */;
  (%685,)
}

def @func_6533() -> Tensor[(11, 12, 15), float64] {
  %686 = @func_5857() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %686.3
}

def @func_3765() -> Tensor[(11, 12, 15), float64] {
  %687 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %687.0
}

def @func_4686(%var_4674: int64) -> (Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) {
  %688 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %689 = cast(%var_4674, dtype="int64") /* ty=int64 */;
  %690 = cast(meta[relay.Constant][51] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
  %691 = reshape(%689, newshape=[]) /* ty=int64 */;
  %692 = reshape(%690, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %693 = @func_3199(%691, %692) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %694 = %693.0;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(5, 5, 5), float32] */;
  %696 = %688.0;
  %697 = sin(%695) /* ty=Tensor[(5, 5, 5), float32] */;
  (%696, %var_4674, meta[relay.Constant][51] /* ty=Tensor[(125), int64] */, %697)
}

def @func_5295() -> Tensor[(11, 12, 15), float64] {
  %698 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %698.0
}

def @func_4273(%var_4182: Tensor[(11, 12, 15), float64], %var_4188: Tensor[(11, 12, 15), float64], %var_4213: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) {
  %699 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %700 = cast(%var_4182, dtype="int16") /* ty=Tensor[(11, 12, 15), int16] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="int16") /* ty=Tensor[(11, 12, 15), int16] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %704 = cast(%var_4188, dtype="uint32") /* ty=Tensor[(11, 12, 15), uint32] */;
  %705 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%699, dtype="uint32") /* ty=Tensor[(11, 12, 15), uint32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %708 = cast(%var_4213, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %709 = cast(%var_4213, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %710 = reshape(%708, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), int16] */;
  %711 = reshape(%709, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), int16] */;
  %712 = @func_4105(%710, %711) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %713 = bitwise_or(%702, %703) /* ty=Tensor[(11, 12, 15), int16] */;
  %714 = multiply(%706, %707) /* ty=Tensor[(11, 12, 15), uint32] */;
  %715 = %712.0;
  %716 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  (%713, %714, %715, %var_4213, %716)
}

def @func_7018(%var_6968: Tensor[(11, 12, 15), float64]) -> (Tensor[(630), int64], Tensor[(11, 12, 15), bool], Tensor[(2, 6, 10), int8], Tensor[(120, 1), int8]) {
  %717 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %718 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %719 = cast(%var_6968, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = cast(meta[relay.Constant][52] /* ty=Tensor[(120, 1), int8] */, dtype="int8") /* ty=Tensor[(120, 1), int8] */;
  %724 = reshape(%723, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), int8] */;
  %725 = @func_1964(%724) /* ty=(Tensor[(2, 6, 10), int8],) */;
  %726 = %717.2;
  %727 = logical_and(%721, %722) /* ty=Tensor[(11, 12, 15), bool] */;
  %728 = %725.0;
  (%726, %727, %728, meta[relay.Constant][52] /* ty=Tensor[(120, 1), int8] */)
}

def @func_4573() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) {
  %729 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %730 = sqrt(%729) /* ty=Tensor[(13, 13, 4), float32] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %732 = log10(%731) /* ty=Tensor[(13, 13, 4), float64] */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %734 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(13, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %737 = floor_mod(%735, %736) /* ty=Tensor[(13, 13, 4), float64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %739 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%732, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %743 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%732, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = logical_or(%740, %741) /* ty=Tensor[(13, 13, 4), bool] */;
  %747 = equal(%744, %745) /* ty=Tensor[(13, 13, 4), bool] */;
  (%746, %747)
}

def @func_6738() -> (Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) {
  %748 = @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
  %749 = cast(meta[relay.Constant][55] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %750 = cast(meta[relay.Constant][56] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %751 = reshape(%749, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), float64] */;
  %752 = reshape(%750, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %753 = @func_762(%751, %752) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) */;
  %754 = %748.1;
  %755 = %753.2;
  (%754, %755, meta[relay.Constant][55] /* ty=Tensor[(40), float64] */, meta[relay.Constant][56] /* ty=Tensor[(630), int64] */)
}

def @func_6712() -> (Tensor[(1300), float64],) {
  %756 = @func_6071() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) */;
  %757 = %756.3;
  (%757,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5044() -> (Tensor[(13, 13, 4), bool],) {
  %2 = fn () -> (Tensor[(13, 13, 4), bool],) {
    %0 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(13, 13, 4), bool],) */
}

def @func_6713() -> (Tensor[(1300), float64],) {
  %5 = fn () -> (Tensor[(1300), float64],) {
    %3 = @func_6071() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) */;
    %4 = %3.3;
    (%4,)
  };
  %5() /* ty=(Tensor[(1300), float64],) */
}

def @func_4136(%var_4118: Tensor[(12, 4), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(112), float32], Tensor[(36), float32], Tensor[(12, 4), float64], Tensor[(11, 12, 15), float64]) {
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %7 = cast(%var_4118, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %8 = reshape(%6, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %9 = reshape(%7, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %10 = @func_3674(%8, %9) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %11 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %12 = %10.8;
  %13 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(36), float32] */, %var_4118, %13)
}

def @func_5586(%var_5584: Tensor[(10, 10, 13), float64], %var_5585: Tensor[(10, 10, 13), float64]) -> (Tensor[(10, 10, 13), float64],) {
  %19 = fn (%var_5573: Tensor[(10, 10, 13), float64], %var_5574: Tensor[(10, 10, 13), float64]) -> (Tensor[(10, 10, 13), float64],) {
    %14 = cast(%var_5574, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
    %15 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%var_5573, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %18 = add(%16, %17) /* ty=Tensor[(10, 10, 13), float64] */;
    (%18,)
  };
  %19(%var_5584, %var_5585) /* ty=(Tensor[(10, 10, 13), float64],) */
}

def @func_8145() -> Tensor[(11, 12, 15), float64] {
  %20 = fn () -> Tensor[(11, 12, 15), float64] {
    @func_4149() /* ty=Tensor[(11, 12, 15), float64] */
  };
  %20() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_2635(%var_2634: Tensor[(2, 1, 9), float32]) -> Tensor[(2, ?, 9), float32] {
  %29 = fn (%var_2596: Tensor[(2, 1, 9), float32]) -> Tensor[(2, ?, 9), float32] {
    %21 = cast(%var_2596, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
    %22 = exp(%21) /* ty=Tensor[(2, 1, 9), float32] */;
    %23 = cast(%22, dtype="uint64") /* ty=Tensor[(2, 1, 9), uint64] */;
    %24 = shape_of(%var_2596, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%var_2596, dtype="uint64") /* ty=Tensor[(2, 1, 9), uint64] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %27 = minimum(%25, %26) /* ty=Tensor[(2, ?, 9), uint64] */;
    %28 = cast(%27, dtype="float32") /* ty=Tensor[(2, ?, 9), float32] */;
    sin(%28) /* ty=Tensor[(2, ?, 9), float32] */
  };
  %29(%var_2634) /* ty=Tensor[(2, ?, 9), float32] */
}

def @func_7238() -> Tensor[(11, 12, 15), float64] {
  %30 = @func_6664() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %30.0
}

def @func_3716() -> (Tensor[(11, 12, 15), float64],) {
  @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_4530() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) {
  %31 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %33 = rsqrt(%32) /* ty=Tensor[(11, 12, 15), float64] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %36 = reshape(%35, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %38 = reshape(%37, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %39 = @func_1469(%38) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %40 = acos(%34) /* ty=Tensor[(11, 12, 15), float64] */;
  %41 = @func_567(%36) /* ty=Tensor[(16, 7, 1), float32] */;
  %42 = %39.0;
  %43 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%40, %41, meta[relay.Constant][1] /* ty=Tensor[(112), float32] */, %42, meta[relay.Constant][2] /* ty=Tensor[(99), int32] */, %43)
}

def @func_1898(%var_1814: Tensor[(2, 10, 3), float64], %var_1830: Tensor[(10, 63), int64], %var_1836: Tensor[(99), int32]) -> (Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) {
  %44 = cast(%var_1836, dtype="int32") /* ty=Tensor[(99), int32] */;
  %45 = reshape(%44, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %46 = @func_1469(%45) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %48 = cast(%var_1830, dtype="int64") /* ty=Tensor[(10, 63), int64] */;
  %49 = reshape(%47, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), float64] */;
  %50 = reshape(%48, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %51 = @func_762(%49, %50) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(630), float32] */;
  %54 = shape_of(%var_1830, dtype="int32") /* ty=Tensor[(2), int32] */;
  %55 = cast(%var_1830, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %57 = %46.3;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
  %59 = reshape(%58, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 10, 3), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %61 = shape_of(%var_1814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_1814, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %64 = subtract(%62, %63) /* ty=Tensor[(2, 10, 3), float32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %66 = tan(%65) /* ty=Tensor[(2, 10, 3), float64] */;
  %67 = cast(%var_1814, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %68 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %71 = mod(%69, %70) /* ty=Tensor[(2, 10, 3), float64] */;
  %72 = cast(%71, dtype="uint16") /* ty=Tensor[(2, 10, 3), uint16] */;
  %73 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%66, dtype="uint16") /* ty=Tensor[(2, 10, 3), uint16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %76 = bitwise_xor(%74, %75) /* ty=Tensor[(2, 10, 3), uint16] */;
  %77 = cast(%76, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %78 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%66, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = cast(%71, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %82 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%66, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %85 = divide(%55, %56) /* ty=Tensor[(10, 63), float32] */;
  %86 = @func_567(%59) /* ty=Tensor[(16, 7, 1), float32] */;
  %87 = not_equal(%79, %80) /* ty=Tensor[(2, 10, 3), bool] */;
  %88 = minimum(%83, %84) /* ty=Tensor[(2, 10, 3), float32] */;
  (meta[relay.Constant][3] /* ty=Tensor[(40), float64] */, %57, %var_1836, %85, %86, %87, %88)
}

def @func_8489() -> Tensor[(11, 12, 15), float64] {
  %89 = @func_7911() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) */;
  %89.1
}

def @func_4093(%var_4087: Tensor[(10, 14, 15), uint8]) -> Tensor[(10, 14, 15), bool] {
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %91 = shape_of(%var_4087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_4087, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%92, %93) /* ty=Tensor[(10, 14, 15), bool] */
}

def @func_1903(%var_1900: Tensor[(2, 10, 3), float64], %var_1901: Tensor[(10, 63), int64], %var_1902: Tensor[(99), int32]) -> (Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) {
  @func_1898(%var_1900, %var_1901, %var_1902) /* ty=(Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) */
}

def @func_6533() -> Tensor[(11, 12, 15), float64] {
  %94 = @func_5857() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %94.3
}

def @func_3365(%var_3364: Tensor[(9, 9, 15), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(9, 9, 15), float32]) {
  %100 = fn (%var_3353: Tensor[(9, 9, 15), float64]) -> (Tensor[(9, 9, 15), float64], Tensor[(9, 9, 15), float32]) {
    %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 1), float64] */;
    %96 = cast(%var_3353, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
    %97 = cast(%var_3353, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
    %98 = floor_mod(%95, %96) /* ty=Tensor[(9, 9, 15), float64] */;
    %99 = log2(%97) /* ty=Tensor[(9, 9, 15), float32] */;
    (%98, %99)
  };
  %100(%var_3364) /* ty=(Tensor[(9, 9, 15), float64], Tensor[(9, 9, 15), float32]) */
}

def @func_5358(%var_5343: Tensor[(13, 15, 13), uint64]) -> (Tensor[(13, 15, 13), uint64], Tensor[(11, 12, 15), float64]) {
  %101 = cast(%var_5343, dtype="uint64") /* ty=Tensor[(13, 15, 13), uint64] */;
  %102 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 15, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 15, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 15, 13), uint64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %105 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %106 = bitwise_and(%103, %104) /* ty=Tensor[(13, 15, 13), uint64] */;
  %107 = %105.0;
  (%106, %107)
}

def @func_4630() -> Tensor[(13, 13, 4), float64] {
  @func_4628() /* ty=Tensor[(13, 13, 4), float64] */
}

def @func_5438(%var_5436: Tensor[(48), float64]) -> (Tensor[(11, 12, 15), float64], Tensor[(210, 3), int64], Tensor[(3, ?, 16), int64]) {
  @func_5435(%var_5436) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(210, 3), int64], Tensor[(3, ?, 16), int64]) */
}

def @func_6434() -> (Tensor[(11, 12, 15), float64], Tensor[(7, 1, 8), int32], Tensor[(56), int32], Tensor[(8, 1), bool], Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(15, 7, 6), float64]) {
  %125 = fn () -> (Tensor[(11, 12, 15), float64], Tensor[(7, 1, 8), int32], Tensor[(56), int32], Tensor[(8, 1), bool], Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(15, 7, 6), float64]) {
    %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1), int32] */, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
    %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %110 = reshape(%108, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), int32] */;
    %111 = reshape(%109, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), int32] */;
    %112 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1), int32] */, dtype="bool") /* ty=Tensor[(1, 1), bool] */;
    %113 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 1), int32] */, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
    %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %115 = reshape(%114, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
    %116 = @func_5335(%115) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
    %117 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
    %118 = cast(%117, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
    %119 = reshape(%118, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
    %120 = @func_4906(%119) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) */;
    %121 = @func_3183(%110, %111) /* ty=Tensor[(7, 1, 8), int32] */;
    %122 = less(%112, %113) /* ty=Tensor[(8, 1), bool] */;
    %123 = %116.2;
    %124 = %120.0;
    (%117, %121, meta[relay.Constant][9] /* ty=Tensor[(56), int32] */, %122, %123, meta[relay.Constant][11] /* ty=Tensor[(48), float64] */, %124)
  };
  %125() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(7, 1, 8), int32], Tensor[(56), int32], Tensor[(8, 1), bool], Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(15, 7, 6), float64]) */
}

def @func_5405() -> (Tensor[(11, 12, 15), float64],) {
  %126 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%126,)
}

def @func_8264(%var_8262: Tensor[(14, 5, 12), float64], %var_8263: Tensor[(14, 5, 12), float64]) -> (Tensor[(14, 5, 12), float64], Tensor[(11, 12, 15), float64]) {
  %133 = fn (%var_8237: Tensor[(14, 5, 12), float64], %var_8238: Tensor[(14, 5, 12), float64]) -> (Tensor[(14, 5, 12), float64], Tensor[(11, 12, 15), float64]) {
    %127 = cast(%var_8238, dtype="float64") /* ty=Tensor[(14, 5, 12), float64] */;
    %128 = shape_of(%var_8237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%var_8237, dtype="float64") /* ty=Tensor[(14, 5, 12), float64] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %131 = power(%129, %130) /* ty=Tensor[(14, 5, 12), float64] */;
    %132 = @func_6533() /* ty=Tensor[(11, 12, 15), float64] */;
    (%131, %132)
  };
  %133(%var_8262, %var_8263) /* ty=(Tensor[(14, 5, 12), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_3183(%var_3177: Tensor[(1, 1, 1), int32], %var_3178: Tensor[(7, 1, 8), int32]) -> Tensor[(7, 1, 8), int32] {
  %134 = cast(%var_3177, dtype="int32") /* ty=Tensor[(1, 1, 1), int32] */;
  %135 = cast(%var_3178, dtype="int32") /* ty=Tensor[(7, 1, 8), int32] */;
  add(%134, %135) /* ty=Tensor[(7, 1, 8), int32] */
}

def @func_6310(%var_6309: Tensor[(125), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], Tensor[(125), int64], Tensor[(15, 7, 6), bool]) {
  %148 = fn (%var_6282: Tensor[(125), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], Tensor[(125), int64], Tensor[(15, 7, 6), bool]) {
    %136 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %137 = cast(%var_6282, dtype="int64") /* ty=Tensor[(125), int64] */;
    %138 = reshape(%136, newshape=[]) /* ty=int64 */;
    %139 = reshape(%137, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
    %140 = @func_3199(%138, %139) /* ty=(Tensor[(5, 5, 5), int64],) */;
    %141 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
    %142 = %141.1;
    %143 = cast(6 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %144 = cast(%142, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
    %145 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
    %146 = %140.0;
    %147 = less(%143, %144) /* ty=Tensor[(15, 7, 6), bool] */;
    (%145, %146, %var_6282, %147)
  };
  %148(%var_6309) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], Tensor[(125), int64], Tensor[(15, 7, 6), bool]) */
}

def @func_3959() -> (Tensor[(11, 12, 15), float64],) {
  %149 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %150 = %149.0;
  (%150,)
}

def @func_3961() -> (Tensor[(11, 12, 15), float64],) {
  @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_4273(%var_4182: Tensor[(11, 12, 15), float64], %var_4188: Tensor[(11, 12, 15), float64], %var_4213: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) {
  %151 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %152 = cast(%var_4182, dtype="int16") /* ty=Tensor[(11, 12, 15), int16] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="int16") /* ty=Tensor[(11, 12, 15), int16] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %156 = cast(%var_4188, dtype="uint32") /* ty=Tensor[(11, 12, 15), uint32] */;
  %157 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%151, dtype="uint32") /* ty=Tensor[(11, 12, 15), uint32] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %160 = cast(%var_4213, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %161 = cast(%var_4213, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %162 = reshape(%160, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), int16] */;
  %163 = reshape(%161, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), int16] */;
  %164 = @func_4105(%162, %163) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %165 = bitwise_or(%154, %155) /* ty=Tensor[(11, 12, 15), int16] */;
  %166 = multiply(%158, %159) /* ty=Tensor[(11, 12, 15), uint32] */;
  %167 = %164.0;
  %168 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  (%165, %166, %167, %var_4213, %168)
}

def @func_8197(%var_8195: Tensor[(630), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(630), int64]) {
  @func_8194(%var_8195) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(630), int64]) */
}

def @func_4096(%var_4094: Tensor[(10, 14, 15), uint8]) -> Tensor[(10, 14, 15), bool] {
  @func_4093(%var_4094) /* ty=Tensor[(10, 14, 15), bool] */
}

def @func_5024(%var_5023: Tensor[(12, 16, 11), float32]) -> (Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) {
  %182 = fn (%var_4994: Tensor[(12, 16, 11), float32]) -> (Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) {
    %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
    %170 = reshape(%169, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
    %171 = @func_1469(%170) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
    %172 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
    %173 = %172.0;
    %174 = cast(%var_4994, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%173, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %178 = cast(%var_4994, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
    %179 = %171.2;
    %180 = floor_divide(%176, %177) /* ty=Tensor[(12, 16, 11), float32] */;
    %181 = log(%178) /* ty=Tensor[(12, 16, 11), float64] */;
    (%179, meta[relay.Constant][12] /* ty=Tensor[(99), int32] */, %180, %181)
  };
  %182(%var_5023) /* ty=(Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) */
}

def @func_6744() -> Tensor[(11, 12, 15), float64] {
  %183 = fn () -> Tensor[(11, 12, 15), float64] {
    @func_3903() /* ty=Tensor[(11, 12, 15), float64] */
  };
  %183() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5169() -> (Tensor[(11, 12, 15), float64],) {
  %185 = fn () -> (Tensor[(11, 12, 15), float64],) {
    %184 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
    (%184,)
  };
  %185() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_5566() -> (Tensor[(11, 12, 15), float64],) {
  @func_5564() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_3714() -> (Tensor[(11, 12, 15), float64],) {
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %187 = erf(%186) /* ty=Tensor[(11, 12, 15), float64] */;
  (%187,)
}

def @func_6803(%var_6801: Tensor[(36, 1), float32], %var_6802: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) {
  @func_6799(%var_6801, %var_6802) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) */
}

def @func_3187(%var_3185: Tensor[(1, 1, 1), int32], %var_3186: Tensor[(7, 1, 8), int32]) -> Tensor[(7, 1, 8), int32] {
  @func_3183(%var_3185, %var_3186) /* ty=Tensor[(7, 1, 8), int32] */
}

def @func_8365() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(48), float64]) {
  @func_8363() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(48), float64]) */
}

def @func_7580() -> (Tensor[(11, 12, 15), float64],) {
  %189 = fn () -> (Tensor[(11, 12, 15), float64],) {
    %188 = @func_6743() /* ty=Tensor[(11, 12, 15), float64] */;
    (%188,)
  };
  %189() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_4688(%var_4687: int64) -> (Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) {
  %200 = fn (%var_4674: int64) -> (Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) {
    %190 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %191 = cast(%var_4674, dtype="int64") /* ty=int64 */;
    %192 = cast(meta[relay.Constant][14] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
    %193 = reshape(%191, newshape=[]) /* ty=int64 */;
    %194 = reshape(%192, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
    %195 = @func_3199(%193, %194) /* ty=(Tensor[(5, 5, 5), int64],) */;
    %196 = %195.0;
    %197 = cast(%196, dtype="float32") /* ty=Tensor[(5, 5, 5), float32] */;
    %198 = %190.0;
    %199 = sin(%197) /* ty=Tensor[(5, 5, 5), float32] */;
    (%198, %var_4674, meta[relay.Constant][14] /* ty=Tensor[(125), int64] */, %199)
  };
  %200(%var_4687) /* ty=(Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) */
}

def @func_4830() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) {
  %201 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 3), bool] */, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %202 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 3), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %203 = cosh(%202) /* ty=Tensor[(16, 16, 3), float64] */;
  %204 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 16, 1), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %206 = logical_and(%204, %205) /* ty=Tensor[(16, 16, 3), bool] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %208 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%203, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %211 = cast(%206, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %212 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%203, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %215 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  %216 = sigmoid(%201) /* ty=Tensor[(16, 16, 3), float32] */;
  %217 = multiply(%209, %210) /* ty=Tensor[(16, 16, 3), float64] */;
  %218 = mod(%213, %214) /* ty=Tensor[(16, 16, 3), float64] */;
  (%215, %216, %217, %218)
}

def @func_3993(%var_3986: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), int32],) {
  %219 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  %220 = cast(%var_3986, dtype="int32") /* ty=Tensor[(11, 12, 15), int32] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="int32") /* ty=Tensor[(11, 12, 15), int32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %224 = subtract(%222, %223) /* ty=Tensor[(11, 12, 15), int32] */;
  (%224,)
}

def @func_7307(%var_7282: float64, %var_7283: Tensor[(2, 5, 6), float64]) -> (Tensor[(2, 5, 6), float64],) {
  %225 = cast(%var_7282, dtype="float64") /* ty=float64 */;
  %226 = cast(%var_7283, dtype="float64") /* ty=Tensor[(2, 5, 6), float64] */;
  %227 = floor_divide(%225, %226) /* ty=Tensor[(2, 5, 6), float64] */;
  (%227,)
}

def @func_4149() -> Tensor[(11, 12, 15), float64] {
  %228 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %228.0
}

def @func_3826(%var_3801: Tensor[(28, 4), float32], %var_3809: Tensor[(208), bool]) -> (Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(1456), bool], Tensor[(28, 4), float32], Tensor[(11, 12, 15), float64], Tensor[(208), uint16]) {
  %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %230 = cast(meta[relay.Constant][18] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %231 = cast(%var_3801, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %232 = reshape(%229, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), bool] */;
  %233 = reshape(%230, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), bool] */;
  %234 = reshape(%231, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %235 = @func_1090(%232, %233, %234) /* ty=(Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) */;
  %236 = cast(%var_3809, dtype="uint16") /* ty=Tensor[(208), uint16] */;
  %237 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(208), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(208), bool] */, dtype="uint16") /* ty=Tensor[(208), uint16] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %240 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %241 = %235.2;
  %242 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %243 = minimum(%238, %239) /* ty=Tensor[(208), uint16] */;
  (%240, %241, meta[relay.Constant][18] /* ty=Tensor[(1456), bool] */, %var_3801, %242, %243)
}

def @func_4443() -> Tensor[(11, 12, 15), float64] {
  @func_3903() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_7524(%var_7523: Tensor[(10, 2, 9), float32]) -> Tensor[(10, 2, 9), float64] {
  %250 = fn (%var_7514: Tensor[(10, 2, 9), float32]) -> Tensor[(10, 2, 9), float64] {
    %244 = cast(%var_7514, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %245 = atan(%244) /* ty=Tensor[(10, 2, 9), float32] */;
    %246 = cast(%245, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %247 = shape_of(%var_7514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%var_7514, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    subtract(%248, %249) /* ty=Tensor[(10, 2, 9), float64] */
  };
  %250(%var_7523) /* ty=Tensor[(10, 2, 9), float64] */
}

def @func_3766() -> Tensor[(11, 12, 15), float64] {
  %252 = fn () -> Tensor[(11, 12, 15), float64] {
    %251 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %251.0
  };
  %252() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_6799(%var_6790: Tensor[(36, 1), float32], %var_6797: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) {
  %253 = @func_6762() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %254 = cast(%var_6790, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %255 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %256 = reshape(%254, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %257 = reshape(%255, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %258 = @func_3674(%256, %257) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
  %259 = %253.0;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %261 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %263 = cast(%var_6797, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %264 = reshape(%260, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %265 = reshape(%262, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %266 = reshape(%263, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %267 = @func_4273(%264, %265, %266) /* ty=(Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) */;
  %268 = @func_3903() /* ty=Tensor[(11, 12, 15), float64] */;
  %269 = %258.8;
  %270 = %267.1;
  (%259, %268, %269, %var_6790, meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, %261, %270, %var_6797)
}

def @func_3996(%var_3994: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), int32],) {
  @func_3993(%var_3994) /* ty=(Tensor[(11, 12, 15), int32],) */
}

def @func_5786(%var_5784: Tensor[(8, 7, 11), float64], %var_5785: Tensor[(2112), float32]) -> (Tensor[(8, 7, 11), float32], Tensor[(8, 7, 11), float64], Tensor[(12, 16, 11), float64], Tensor[(2112), float32]) {
  @func_5782(%var_5784, %var_5785) /* ty=(Tensor[(8, 7, 11), float32], Tensor[(8, 7, 11), float64], Tensor[(12, 16, 11), float64], Tensor[(2112), float32]) */
}

def @func_3202(%var_3200: int64, %var_3201: Tensor[(5, 5, 5), int64]) -> (Tensor[(5, 5, 5), int64],) {
  %274 = fn (%var_3192: int64, %var_3193: Tensor[(5, 5, 5), int64]) -> (Tensor[(5, 5, 5), int64],) {
    %271 = cast(%var_3192, dtype="int64") /* ty=int64 */;
    %272 = cast(%var_3193, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
    %273 = bitwise_xor(%271, %272) /* ty=Tensor[(5, 5, 5), int64] */;
    (%273,)
  };
  %274(%var_3200, %var_3201) /* ty=(Tensor[(5, 5, 5), int64],) */
}

def @func_5296() -> Tensor[(11, 12, 15), float64] {
  %276 = fn () -> Tensor[(11, 12, 15), float64] {
    %275 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %275.0
  };
  %276() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5407() -> (Tensor[(11, 12, 15), float64],) {
  @func_5405() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_2153(%var_2151: Tensor[(6, 12, 9), bool]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), bool]) {
  @func_2150(%var_2151) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), bool]) */
}

def @func_5335(%var_5321: Tensor[(4, 12), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %277 = cast(%var_5321, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %278 = cast(meta[relay.Constant][20] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %279 = reshape(%277, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %280 = reshape(%278, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %281 = @func_2402(%279, %280) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %282 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %284 = cast(%282, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %285 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %286 = reshape(%283, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %287 = reshape(%284, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %288 = reshape(%285, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %289 = @func_4273(%286, %287, %288) /* ty=(Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) */;
  %290 = %281.2;
  %291 = %289.0;
  %292 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %293 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  (%282, %290, %var_5321, meta[relay.Constant][20] /* ty=Tensor[(630), int64] */, %291, meta[relay.Constant][21] /* ty=Tensor[(1540), int16] */, %292, %293)
}

def @func_436(%var_434: Tensor[(15, 7, 6), int64], %var_435: Tensor[(15, 7, 6), int64]) -> Tensor[(15, 7, 6), float64] {
  @func_432(%var_434, %var_435) /* ty=Tensor[(15, 7, 6), float64] */
}

def @func_6126(%var_6125: int64) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], int64, Tensor[(125), int64]) {
  %301 = fn (%var_6116: int64) -> (Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], int64, Tensor[(125), int64]) {
    %294 = cast(%var_6116, dtype="int64") /* ty=int64 */;
    %295 = cast(meta[relay.Constant][22] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
    %296 = reshape(%294, newshape=[]) /* ty=int64 */;
    %297 = reshape(%295, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
    %298 = @func_3199(%296, %297) /* ty=(Tensor[(5, 5, 5), int64],) */;
    %299 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
    %300 = %298.0;
    (%299, %300, %var_6116, meta[relay.Constant][22] /* ty=Tensor[(125), int64] */)
  };
  %301(%var_6125) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(5, 5, 5), int64], int64, Tensor[(125), int64]) */
}

def @func_7645() -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(5, 5, 9), float32], Tensor[(11, 12, 15), bool], Tensor[(3, 660), float64]) {
  @func_7643() /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(5, 5, 9), float32], Tensor[(11, 12, 15), bool], Tensor[(3, 660), float64]) */
}

def @func_7020(%var_7019: Tensor[(11, 12, 15), float64]) -> (Tensor[(630), int64], Tensor[(11, 12, 15), bool], Tensor[(2, 6, 10), int8], Tensor[(120, 1), int8]) {
  %314 = fn (%var_6968: Tensor[(11, 12, 15), float64]) -> (Tensor[(630), int64], Tensor[(11, 12, 15), bool], Tensor[(2, 6, 10), int8], Tensor[(120, 1), int8]) {
    %302 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
    %303 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
    %304 = cast(%var_6968, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%303, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(120, 1), int8] */, dtype="int8") /* ty=Tensor[(120, 1), int8] */;
    %309 = reshape(%308, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), int8] */;
    %310 = @func_1964(%309) /* ty=(Tensor[(2, 6, 10), int8],) */;
    %311 = %302.2;
    %312 = logical_and(%306, %307) /* ty=Tensor[(11, 12, 15), bool] */;
    %313 = %310.0;
    (%311, %312, %313, meta[relay.Constant][23] /* ty=Tensor[(120, 1), int8] */)
  };
  %314(%var_7019) /* ty=(Tensor[(630), int64], Tensor[(11, 12, 15), bool], Tensor[(2, 6, 10), int8], Tensor[(120, 1), int8]) */
}

def @func_6738() -> (Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) {
  %315 = @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
  %316 = cast(meta[relay.Constant][24] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %317 = cast(meta[relay.Constant][25] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %318 = reshape(%316, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), float64] */;
  %319 = reshape(%317, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %320 = @func_762(%318, %319) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) */;
  %321 = %315.1;
  %322 = %320.2;
  (%321, %322, meta[relay.Constant][24] /* ty=Tensor[(40), float64] */, meta[relay.Constant][25] /* ty=Tensor[(630), int64] */)
}

def @func_4852(%var_4849: Tensor[(4, 8, 7), float32]) -> Tensor[(4, 8, 7), float32] {
  %323 = cast(%var_4849, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  cosh(%323) /* ty=Tensor[(4, 8, 7), float32] */
}

def @func_7968() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %324 = @func_7579() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %325 = %324.0;
  %326 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  (%325, %326)
}

def @func_1094(%var_1091: Tensor[(13, 16, 1), bool], %var_1092: Tensor[(13, 16, 7), bool], %var_1093: Tensor[(112), float32]) -> (Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) {
  %340 = fn (%var_1070: Tensor[(13, 16, 1), bool], %var_1071: Tensor[(13, 16, 7), bool], %var_1078: Tensor[(112), float32]) -> (Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) {
    %327 = cast(%var_1070, dtype="bool") /* ty=Tensor[(13, 16, 1), bool] */;
    %328 = cast(%var_1071, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
    %329 = cast(%var_1078, dtype="float32") /* ty=Tensor[(112), float32] */;
    %330 = reshape(%329, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
    %331 = cast(%var_1071, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
    %332 = log10(%331) /* ty=Tensor[(13, 16, 7), float64] */;
    %333 = cast(%var_1071, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="bool") /* ty=Tensor[(13, 16, 7), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %337 = logical_and(%327, %328) /* ty=Tensor[(13, 16, 7), bool] */;
    %338 = @func_567(%330) /* ty=Tensor[(16, 7, 1), float32] */;
    %339 = logical_or(%335, %336) /* ty=Tensor[(13, 16, 7), bool] */;
    (%337, %338, %var_1078, %339)
  };
  %340(%var_1091, %var_1092, %var_1093) /* ty=(Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) */
}

def @func_8071(%var_8067: Tensor[(48), float64], %var_8068: Tensor[(208), bool], %var_8069: Tensor[(1456), bool], %var_8070: Tensor[(112), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(48), float64], Tensor[(3, 12), float32], Tensor[(48), float64], Tensor[(208), bool], Tensor[(1456), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(16, 7, ?), bool], Tensor[(11, 12, 15), float32]) {
  %371 = fn (%var_7993: Tensor[(48), float64], %var_8007: Tensor[(208), bool], %var_8008: Tensor[(1456), bool], %var_8009: Tensor[(112), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(48), float64], Tensor[(3, 12), float32], Tensor[(48), float64], Tensor[(208), bool], Tensor[(1456), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(16, 7, ?), bool], Tensor[(11, 12, 15), float32]) {
    %341 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %342 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %343 = cast(%var_7993, dtype="float64") /* ty=Tensor[(48), float64] */;
    %344 = reshape(%342, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %345 = reshape(%343, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %346 = @func_3674(%344, %345) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
    %347 = @func_6664() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %348 = cast(%var_7993, dtype="float64") /* ty=Tensor[(48), float64] */;
    %349 = reshape(%348, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
    %350 = @func_5335(%349) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
    %351 = cast(%var_8007, dtype="bool") /* ty=Tensor[(208), bool] */;
    %352 = cast(%var_8008, dtype="bool") /* ty=Tensor[(1456), bool] */;
    %353 = cast(%var_8009, dtype="float32") /* ty=Tensor[(112), float32] */;
    %354 = reshape(%351, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), bool] */;
    %355 = reshape(%352, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), bool] */;
    %356 = reshape(%353, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %357 = @func_1090(%354, %355, %356) /* ty=(Tensor[(13, 16, 7), bool], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(13, 16, 7), bool]) */;
    %358 = %357.1;
    %359 = cast(%var_8009, dtype="bool") /* ty=Tensor[(112), bool] */;
    %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%358, dtype="bool") /* ty=Tensor[(16, 7, 1), bool] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %363 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
    %365 = %341.0;
    %366 = %346.9;
    %367 = %347.0;
    %368 = %350.0;
    %369 = less(%361, %362) /* ty=Tensor[(16, 7, ?), bool] */;
    %370 = sqrt(%364) /* ty=Tensor[(11, 12, 15), float32] */;
    (%365, %366, meta[relay.Constant][26] /* ty=Tensor[(3, 12), float32] */, %var_7993, %var_8007, %var_8008, %367, %368, %369, %370)
  };
  %371(%var_8067, %var_8068, %var_8069, %var_8070) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(48), float64], Tensor[(3, 12), float32], Tensor[(48), float64], Tensor[(208), bool], Tensor[(1456), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(16, 7, ?), bool], Tensor[(11, 12, 15), float32]) */
}

def @func_4139(%var_4137: Tensor[(12, 4), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(112), float32], Tensor[(36), float32], Tensor[(12, 4), float64], Tensor[(11, 12, 15), float64]) {
  @func_4136(%var_4137) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(112), float32], Tensor[(36), float32], Tensor[(12, 4), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_2150(%var_2133: Tensor[(6, 12, 9), bool]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), bool]) {
  %372 = cast(%var_2133, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %373 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(6, 12, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %377 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_2133, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = logical_or(%374, %375) /* ty=Tensor[(6, 12, 9), bool] */;
  %381 = less(%378, %379) /* ty=Tensor[(6, 12, 9), bool] */;
  (%380, %381)
}

def @func_4906(%var_4868: Tensor[(11, 12, 15), float64]) -> (Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) {
  %382 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
  %383 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %384 = cast(%var_4868, dtype="uint8") /* ty=Tensor[(11, 12, 15), uint8] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="uint8") /* ty=Tensor[(11, 12, 15), uint8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %388 = cast(%var_4868, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  %389 = %382.1;
  %390 = minimum(%386, %387) /* ty=Tensor[(11, 12, 15), uint8] */;
  %391 = sin(%388) /* ty=Tensor[(11, 12, 15), float32] */;
  (%389, %390, %391)
}

def @func_3855() -> Tensor[(11, 12, 15), float64] {
  @func_3853() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_8503() -> Tensor[(13, 13, 4), bool] {
  @func_8501() /* ty=Tensor[(13, 13, 4), bool] */
}

def @func_4462() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) {
  %394 = fn () -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) {
    %392 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
    %393 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
    (%392, %393)
  };
  %394() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */
}

def @func_4573() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) {
  %395 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %396 = sqrt(%395) /* ty=Tensor[(13, 13, 4), float32] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %398 = log10(%397) /* ty=Tensor[(13, 13, 4), float64] */;
  %399 = cast(%396, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %400 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %403 = floor_mod(%401, %402) /* ty=Tensor[(13, 13, 4), float64] */;
  %404 = cast(%403, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %405 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%398, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %409 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%398, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %412 = logical_or(%406, %407) /* ty=Tensor[(13, 13, 4), bool] */;
  %413 = equal(%410, %411) /* ty=Tensor[(13, 13, 4), bool] */;
  (%412, %413)
}

def @func_7673() -> Tensor[(11, 12, 15), float32] {
  %417 = fn () -> Tensor[(11, 12, 15), float32] {
    %414 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %415 = %414.0;
    %416 = cast(%415, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
    exp(%416) /* ty=Tensor[(11, 12, 15), float32] */
  };
  %417() /* ty=Tensor[(11, 12, 15), float32] */
}

def @func_4071() -> Tensor[(11, 12, 15), float64] {
  %419 = fn () -> Tensor[(11, 12, 15), float64] {
    %418 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %418.0
  };
  %419() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_3830(%var_3828: Tensor[(28, 4), float32], %var_3829: Tensor[(208), bool]) -> (Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(1456), bool], Tensor[(28, 4), float32], Tensor[(11, 12, 15), float64], Tensor[(208), uint16]) {
  @func_3826(%var_3828, %var_3829) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(1456), bool], Tensor[(28, 4), float32], Tensor[(11, 12, 15), float64], Tensor[(208), uint16]) */
}

def @func_4855(%var_4853: Tensor[(4, 8, 7), float32]) -> Tensor[(4, 8, 7), float32] {
  @func_4852(%var_4853) /* ty=Tensor[(4, 8, 7), float32] */
}

def @func_4108(%var_4106: Tensor[(11, 14, 10), int16], %var_4107: Tensor[(11, 14, 10), int16]) -> (Tensor[(11, 14, 10), bool],) {
  %425 = fn (%var_4098: Tensor[(11, 14, 10), int16], %var_4099: Tensor[(11, 14, 10), int16]) -> (Tensor[(11, 14, 10), bool],) {
    %420 = cast(%var_4099, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
    %421 = shape_of(%var_4098, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%var_4098, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %424 = not_equal(%422, %423) /* ty=Tensor[(11, 14, 10), bool] */;
    (%424,)
  };
  %425(%var_4106, %var_4107) /* ty=(Tensor[(11, 14, 10), bool],) */
}

def @func_5609() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), float64]) {
  @func_5607() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), float64]) */
}

def @func_7500() -> (Tensor[(11, 12, 15), float64], Tensor[(1300), float64]) {
  %426 = @func_6071() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) */;
  %427 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
  %428 = %426.3;
  (%427, %428)
}

def @func_5435(%var_5419: Tensor[(48), float64]) -> (Tensor[(11, 12, 15), float64], Tensor[(210, 3), int64], Tensor[(3, ?, 16), int64]) {
  %429 = cast(%var_5419, dtype="float64") /* ty=Tensor[(48), float64] */;
  %430 = cast(meta[relay.Constant][30] /* ty=Tensor[(210, 3), int64] */, dtype="int64") /* ty=Tensor[(210, 3), int64] */;
  %431 = reshape(%429, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %432 = reshape(%430, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %433 = @func_2402(%431, %432) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %434 = %433.0;
  %435 = cast(%var_5419, dtype="int64") /* ty=Tensor[(48), int64] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="int64") /* ty=Tensor[(3, 1, 16), int64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %439 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %440 = bitwise_or(%437, %438) /* ty=Tensor[(3, ?, 16), int64] */;
  (%439, meta[relay.Constant][30] /* ty=Tensor[(210, 3), int64] */, %440)
}

def @func_6707() -> (Tensor[(12, 16, 11), float32], Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
  %447 = fn () -> (Tensor[(12, 16, 11), float32], Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
    %441 = @func_4303() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */;
    %442 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
    %443 = @func_5564() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %444 = %441.0;
    %445 = %442.1;
    %446 = %443.0;
    (%444, %445, %446)
  };
  %447() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) */
}

def @func_8343() -> (Tensor[(11, 12, 15), float64],) {
  %450 = fn () -> (Tensor[(11, 12, 15), float64],) {
    %448 = @func_7579() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %449 = %448.0;
    (%449,)
  };
  %450() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_4832() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) {
  @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */
}

def @func_6584(%var_6582: Tensor[(2112), float32]) -> (Tensor[(12, 16, 11), float64], Tensor[(2112), float32], Tensor[(11, 12, 15), float32], Tensor[(13, 13, 4), bool]) {
  @func_6581(%var_6582) /* ty=(Tensor[(12, 16, 11), float64], Tensor[(2112), float32], Tensor[(11, 12, 15), float32], Tensor[(13, 13, 4), bool]) */
}

def @func_3886(%var_3884: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  @func_3883(%var_3884) /* ty=(Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_7311(%var_7309: float64, %var_7310: Tensor[(2, 5, 6), float64]) -> (Tensor[(2, 5, 6), float64],) {
  @func_7307(%var_7309, %var_7310) /* ty=(Tensor[(2, 5, 6), float64],) */
}

def @func_4973(%var_4970: Tensor[(11, 12, 15), float64], %var_4971: int64, %var_4972: Tensor[(30, 2), float64]) -> (Tensor[(11, 12, 15), bool], int64, int64, Tensor[(2, 10, 3), bool], Tensor[(30, 2), float64], Tensor[(630), int64], Tensor[(99), int32], Tensor[(16, 7, 1), float32]) {
  @func_4968(%var_4970, %var_4971, %var_4972) /* ty=(Tensor[(11, 12, 15), bool], int64, int64, Tensor[(2, 10, 3), bool], Tensor[(30, 2), float64], Tensor[(630), int64], Tensor[(99), int32], Tensor[(16, 7, 1), float32]) */
}

def @main() -> (Tensor[(16, 16, 3), float64], Tensor[(11, 12, 15), int64]) {
  %451 = @func_4832() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
  %452 = @func_5295() /* ty=Tensor[(11, 12, 15), float64] */;
  %453 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 12, 15), float64] */, dtype="int64") /* ty=Tensor[(11, 12, 15), int64] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int64") /* ty=Tensor[(11, 12, 15), int64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %457 = %451.2;
  %458 = left_shift(%455, %456) /* ty=Tensor[(11, 12, 15), int64] */;
  (%457, %458)
}

def @func_6535() -> Tensor[(11, 12, 15), float64] {
  @func_6533() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_1966(%var_1965: Tensor[(2, 6, 10), int8]) -> (Tensor[(2, 6, 10), int8],) {
  %464 = fn (%var_1953: Tensor[(2, 6, 10), int8]) -> (Tensor[(2, 6, 10), int8],) {
    %459 = cast(%var_1953, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
    %460 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 6, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 6, 10), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %463 = left_shift(%461, %462) /* ty=Tensor[(2, 6, 10), int8] */;
    (%463,)
  };
  %464(%var_1965) /* ty=(Tensor[(2, 6, 10), int8],) */
}

def @func_7422() -> (Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
  @func_7420() /* ty=(Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) */
}

def @func_5782(%var_5759: Tensor[(8, 7, 11), float64], %var_5778: Tensor[(2112), float32]) -> (Tensor[(8, 7, 11), float32], Tensor[(8, 7, 11), float64], Tensor[(12, 16, 11), float64], Tensor[(2112), float32]) {
  %465 = cast(%var_5759, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %466 = cast(%var_5759, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %467 = asinh(%466) /* ty=Tensor[(8, 7, 11), float64] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %469 = shape_of(%var_5759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_5759, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %472 = cast(%var_5778, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %473 = reshape(%472, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float32] */;
  %474 = @func_5022(%473) /* ty=(Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) */;
  %475 = asin(%465) /* ty=Tensor[(8, 7, 11), float32] */;
  %476 = divide(%470, %471) /* ty=Tensor[(8, 7, 11), float64] */;
  %477 = %474.3;
  (%475, %476, %477, %var_5778)
}

def @func_432(%var_391: Tensor[(15, 7, 6), int64], %var_392: Tensor[(15, 7, 6), int64]) -> Tensor[(15, 7, 6), float64] {
  %478 = cast(%var_392, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %479 = shape_of(%var_391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_391, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %482 = bitwise_xor(%480, %481) /* ty=Tensor[(15, 7, 6), int64] */;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %484 = acos(%483) /* ty=Tensor[(15, 7, 6), float64] */;
  %485 = cast(%482, dtype="uint16") /* ty=Tensor[(15, 7, 6), uint16] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint16") /* ty=Tensor[(15, 7, 6), uint16] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %489 = subtract(%487, %488) /* ty=Tensor[(15, 7, 6), uint16] */;
  %490 = cast(%var_392, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%492, %493) /* ty=Tensor[(15, 7, 6), float64] */
}

def @func_6457() -> Tensor[(16, 16, 3), float64] {
  %495 = fn () -> Tensor[(16, 16, 3), float64] {
    %494 = @func_4830() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 16, 3), float64], Tensor[(16, 16, 3), float64]) */;
    %494.3
  };
  %495() /* ty=Tensor[(16, 16, 3), float64] */
}

def @func_7970() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  @func_7968() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_6183(%var_6180: Tensor[(10, 2, 1), int32], %var_6181: Tensor[(10, 2, 10), int32], %var_6182: Tensor[(10, 2, 10), int32]) -> (Tensor[(10, 14, 15), bool], Tensor[(2100), uint8], Tensor[(10, 2, 10), bool], Tensor[(10, 2, 10), float32]) {
  %514 = fn (%var_6131: Tensor[(10, 2, 1), int32], %var_6132: Tensor[(10, 2, 10), int32], %var_6136: Tensor[(10, 2, 10), int32]) -> (Tensor[(10, 14, 15), bool], Tensor[(2100), uint8], Tensor[(10, 2, 10), bool], Tensor[(10, 2, 10), float32]) {
    %496 = cast(meta[relay.Constant][33] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
    %497 = reshape(%496, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
    %498 = cast(%var_6136, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
    %499 = shape_of(%var_6132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%var_6132, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %502 = right_shift(%500, %501) /* ty=Tensor[(10, 2, 10), uint32] */;
    %503 = cast(%var_6131, dtype="int32") /* ty=Tensor[(10, 2, 1), int32] */;
    %504 = cast(%var_6132, dtype="int32") /* ty=Tensor[(10, 2, 10), int32] */;
    %505 = add(%503, %504) /* ty=Tensor[(10, 2, 10), int32] */;
    %506 = cast(%505, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
    %507 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%502, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %510 = cast(%502, dtype="float32") /* ty=Tensor[(10, 2, 10), float32] */;
    %511 = @func_4093(%497) /* ty=Tensor[(10, 14, 15), bool] */;
    %512 = less_equal(%508, %509) /* ty=Tensor[(10, 2, 10), bool] */;
    %513 = log(%510) /* ty=Tensor[(10, 2, 10), float32] */;
    (%511, meta[relay.Constant][33] /* ty=Tensor[(2100), uint8] */, %512, %513)
  };
  %514(%var_6180, %var_6181, %var_6182) /* ty=(Tensor[(10, 14, 15), bool], Tensor[(2100), uint8], Tensor[(10, 2, 10), bool], Tensor[(10, 2, 10), float32]) */
}

def @func_6764() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  @func_6762() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_6240() -> (Tensor[(16, 7, 1), float32],) {
  %519 = fn () -> (Tensor[(16, 7, 1), float32],) {
    %515 = @func_4530() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) */;
    %516 = %515.1;
    %517 = cast(%516, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
    %518 = sigmoid(%517) /* ty=Tensor[(16, 7, 1), float32] */;
    (%518,)
  };
  %519() /* ty=(Tensor[(16, 7, 1), float32],) */
}

def @func_6665() -> (Tensor[(11, 12, 15), float64],) {
  %522 = fn () -> (Tensor[(11, 12, 15), float64],) {
    %520 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %521 = %520.0;
    (%521,)
  };
  %522() /* ty=(Tensor[(11, 12, 15), float64],) */
}

def @func_6005() -> Tensor[(11, 12, 15), float64] {
  %524 = fn () -> Tensor[(11, 12, 15), float64] {
    %523 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %523.0
  };
  %524() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_1472(%var_1470: Tensor[(1, 11, 9), int32]) -> (Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) {
  @func_1469(%var_1470) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */
}

def @func_5338(%var_5336: Tensor[(4, 12), float64]) -> (Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  @func_5335(%var_5336) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_6581(%var_6559: Tensor[(2112), float32]) -> (Tensor[(12, 16, 11), float64], Tensor[(2112), float32], Tensor[(11, 12, 15), float32], Tensor[(13, 13, 4), bool]) {
  %525 = cast(%var_6559, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %526 = reshape(%525, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float32] */;
  %527 = @func_5022(%526) /* ty=(Tensor[(112), float32], Tensor[(99), int32], Tensor[(12, 16, 11), float32], Tensor[(12, 16, 11), float64]) */;
  %528 = @func_5907() /* ty=(Tensor[(11, 12, 15), float32],) */;
  %529 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %532 = exp(%531) /* ty=Tensor[(13, 13, 4), float32] */;
  %533 = cast(%530, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = %527.3;
  %538 = %528.0;
  %539 = logical_and(%535, %536) /* ty=Tensor[(13, 13, 4), bool] */;
  (%537, %var_6559, %538, %539)
}

def @func_4575() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) {
  @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */
}

def @func_4028() -> Tensor[(11, 12, 15), float32] {
  %543 = fn () -> Tensor[(11, 12, 15), float32] {
    %540 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %541 = %540.0;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
    log10(%542) /* ty=Tensor[(11, 12, 15), float32] */
  };
  %543() /* ty=Tensor[(11, 12, 15), float32] */
}

def @func_5361(%var_5359: Tensor[(13, 15, 13), uint64]) -> (Tensor[(13, 15, 13), uint64], Tensor[(11, 12, 15), float64]) {
  @func_5358(%var_5359) /* ty=(Tensor[(13, 15, 13), uint64], Tensor[(11, 12, 15), float64]) */
}

def @func_4304() -> (Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) {
  %551 = fn () -> (Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) {
    %544 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %545 = cast(meta[relay.Constant][35] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
    %546 = cast(meta[relay.Constant][35] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
    %547 = reshape(%545, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %548 = reshape(%546, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %549 = atan(%544) /* ty=Tensor[(12, 16, 11), float32] */;
    %550 = @func_432(%547, %548) /* ty=Tensor[(15, 7, 6), float64] */;
    (%549, %550, meta[relay.Constant][35] /* ty=Tensor[(630), int64] */)
  };
  %551() /* ty=(Tensor[(12, 16, 11), float32], Tensor[(15, 7, 6), float64], Tensor[(630), int64]) */
}

def @func_4151() -> Tensor[(11, 12, 15), float64] {
  @func_4149() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_2405(%var_2403: Tensor[(3, 1, 16), float64], %var_2404: Tensor[(630), int64]) -> (Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) {
  %563 = fn (%var_2385: Tensor[(3, 1, 16), float64], %var_2397: Tensor[(630), int64]) -> (Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) {
    %552 = cast(%var_2385, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
    %553 = cast(%var_2397, dtype="int64") /* ty=Tensor[(630), int64] */;
    %554 = cast(%var_2397, dtype="int64") /* ty=Tensor[(630), int64] */;
    %555 = reshape(%553, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %556 = reshape(%554, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %557 = cast(meta[relay.Constant][36] /* ty=Tensor[(33, 3), int32] */, dtype="int32") /* ty=Tensor[(33, 3), int32] */;
    %558 = reshape(%557, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
    %559 = @func_1469(%558) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
    %560 = log10(%552) /* ty=Tensor[(3, 1, 16), float64] */;
    %561 = @func_432(%555, %556) /* ty=Tensor[(15, 7, 6), float64] */;
    %562 = %559.2;
    (%560, %561, %var_2397, %562, meta[relay.Constant][36] /* ty=Tensor[(33, 3), int32] */)
  };
  %563(%var_2403, %var_2404) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */
}

def @func_7116() -> (Tensor[(11, 12, 15), float32], Tensor[(16, 16, 3), float32], Tensor[(11, 12, 15), float64]) {
  @func_7114() /* ty=(Tensor[(11, 12, 15), float32], Tensor[(16, 16, 3), float32], Tensor[(11, 12, 15), float64]) */
}

def @func_5859() -> (Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  @func_5857() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_5954() -> Tensor[(11, 12, 15), float64] {
  %565 = fn () -> Tensor[(11, 12, 15), float64] {
    %564 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
    %564.0
  };
  %565() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5206() -> Tensor[(11, 12, 15), float64] {
  @func_4070() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_3674(%var_3594: Tensor[(1, 6, 6), float32], %var_3657: Tensor[(48), float64]) -> (Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) {
  %566 = cast(%var_3594, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %567 = log10(%566) /* ty=Tensor[(1, 6, 6), float32] */;
  %568 = cast(%var_3594, dtype="int8") /* ty=Tensor[(1, 6, 6), int8] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="int8") /* ty=Tensor[(1, 6, 6), int8] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %572 = bitwise_and(%570, %571) /* ty=Tensor[(?, 6, 6), int8] */;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(?, 6, 6), float32] */;
  %574 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%567, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %577 = cast(meta[relay.Constant][37] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %578 = reshape(%577, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), int8] */;
  %579 = @func_1964(%578) /* ty=(Tensor[(2, 6, 10), int8],) */;
  %580 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %581 = cast(meta[relay.Constant][38] /* ty=Tensor[(25, 5), int64] */, dtype="int64") /* ty=Tensor[(25, 5), int64] */;
  %582 = reshape(%580, newshape=[]) /* ty=int64 */;
  %583 = reshape(%581, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %584 = @func_3199(%582, %583) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %585 = cast(%572, dtype="uint64") /* ty=Tensor[(?, 6, 6), uint64] */;
  %586 = cast(-3 /* ty=int64 */, dtype="uint64") /* ty=uint64 */;
  %587 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %588 = %584.0;
  %589 = cast(%588, dtype="int64") /* ty=Tensor[(5, 5, 5), int64] */;
  %590 = reshape(%587, newshape=[]) /* ty=int64 */;
  %591 = reshape(%589, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %592 = @func_3199(%590, %591) /* ty=(Tensor[(5, 5, 5), int64],) */;
  %593 = cast(%567, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
  %594 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%572, dtype="uint16") /* ty=Tensor[(?, 6, 6), uint16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %597 = subtract(%595, %596) /* ty=Tensor[(?, 6, 6), uint16] */;
  %598 = cast(%597, dtype="int16") /* ty=Tensor[(?, 6, 6), int16] */;
  %599 = cast(-3 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %600 = cast(%var_3657, dtype="float64") /* ty=Tensor[(48), float64] */;
  %601 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %602 = reshape(%600, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %603 = reshape(%601, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %604 = @func_2402(%602, %603) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(112), float32], Tensor[(33, 3), int32]) */;
  %605 = floor_divide(%575, %576) /* ty=Tensor[(?, 6, 6), float32] */;
  %606 = %579.0;
  %607 = bitwise_or(%585, %586) /* ty=Tensor[(?, 6, 6), uint64] */;
  %608 = %592.0;
  %609 = left_shift(%598, %599) /* ty=Tensor[(?, 6, 6), int16] */;
  %610 = %604.3;
  (%605, %606, meta[relay.Constant][37] /* ty=Tensor[(30, 4), int8] */, %588, meta[relay.Constant][38] /* ty=Tensor[(25, 5), int64] */, %607, %608, %609, %610, %var_3657, meta[relay.Constant][39] /* ty=Tensor[(630), int64] */)
}

def @func_5281() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %613 = fn () -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
    %611 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
    %612 = @func_4070() /* ty=Tensor[(11, 12, 15), float64] */;
    (%611, %612)
  };
  %613() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */
}

def @func_7114() -> (Tensor[(11, 12, 15), float32], Tensor[(16, 16, 3), float32], Tensor[(11, 12, 15), float64]) {
  %614 = @func_6922() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) */;
  %615 = @func_6738() /* ty=(Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) */;
  %616 = @func_3959() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %617 = %614.4;
  %618 = %615.0;
  %619 = %616.0;
  (%617, %618, %619)
}

def @func_5564() -> (Tensor[(11, 12, 15), float64],) {
  %620 = @func_4443() /* ty=Tensor[(11, 12, 15), float64] */;
  (%620,)
}

def @func_4445() -> Tensor[(11, 12, 15), float64] {
  @func_4443() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5718(%var_5717: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) {
  %635 = fn (%var_5699: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) {
    %621 = cast(%var_5699, dtype="int64") /* ty=Tensor[(630), int64] */;
    %622 = cast(%var_5699, dtype="int64") /* ty=Tensor[(630), int64] */;
    %623 = reshape(%621, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %624 = reshape(%622, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %625 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
    %626 = %625.0;
    %627 = cast(%626, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
    %628 = atanh(%627) /* ty=Tensor[(13, 13, 4), float32] */;
    %629 = cast(%626, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%628, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %633 = @func_432(%623, %624) /* ty=Tensor[(15, 7, 6), float64] */;
    %634 = bitwise_and(%631, %632) /* ty=Tensor[(13, 13, 4), uint32] */;
    (%633, %var_5699, %634)
  };
  %635(%var_5717) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) */
}

def @func_4909(%var_4907: Tensor[(11, 12, 15), float64]) -> (Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) {
  @func_4906(%var_4907) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(11, 12, 15), uint8], Tensor[(11, 12, 15), float32]) */
}

def @func_6924() -> (Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) {
  @func_6922() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) */
}

def @func_8501() -> Tensor[(13, 13, 4), bool] {
  %636 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %636.0
}

def @func_5607() -> (Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), float64]) {
  %637 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %638 = %637.1;
  %639 = @func_4628() /* ty=Tensor[(13, 13, 4), float64] */;
  (%638, %639)
}

def @func_6762() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %640 = @func_4461() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32]) */;
  %641 = @func_5280() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %642 = %640.0;
  %643 = %641.1;
  (%642, %643)
}

def @func_3853() -> Tensor[(11, 12, 15), float64] {
  %644 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %644.0
}

def @func_6072() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) {
  %657 = fn () -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) {
    %645 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %646 = %645.0;
    %647 = cast(%646, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
    %648 = reshape(%647, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
    %649 = @func_3883(%648) /* ty=(Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
    %650 = cast(meta[relay.Constant][40] /* ty=Tensor[(1300), float64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %651 = cast(meta[relay.Constant][40] /* ty=Tensor[(1300), float64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %652 = reshape(%650, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
    %653 = reshape(%651, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
    %654 = @func_5583(%652, %653) /* ty=(Tensor[(10, 10, 13), float64],) */;
    %655 = %649.1;
    %656 = %654.0;
    (%646, %655, %656, meta[relay.Constant][40] /* ty=Tensor[(1300), float64] */)
  };
  %657() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(10, 10, 13), float64], Tensor[(1300), float64]) */
}

def @func_4968(%var_4938: Tensor[(11, 12, 15), float64], %var_4950: int64, %var_4954: Tensor[(30, 2), float64]) -> (Tensor[(11, 12, 15), bool], int64, int64, Tensor[(2, 10, 3), bool], Tensor[(30, 2), float64], Tensor[(630), int64], Tensor[(99), int32], Tensor[(16, 7, 1), float32]) {
  %658 = @func_4443() /* ty=Tensor[(11, 12, 15), float64] */;
  %659 = cast(%var_4938, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = cast(%var_4950, dtype="int64") /* ty=int64 */;
  %664 = reshape(%663, newshape=[]) /* ty=int64 */;
  %665 = @func_4686(%664) /* ty=(Tensor[(11, 12, 15), float64], int64, Tensor[(125), int64], Tensor[(5, 5, 5), float32]) */;
  %666 = cast(%var_4954, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %667 = cast(meta[relay.Constant][41] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %668 = cast(meta[relay.Constant][42] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %669 = reshape(%666, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float64] */;
  %670 = reshape(%667, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
  %671 = reshape(%668, newshape=[99]) /* ty=Tensor[(99), int32] */;
  %672 = @func_1898(%669, %670, %671) /* ty=(Tensor[(40), float64], Tensor[(16, 7, 1), float32], Tensor[(99), int32], Tensor[(10, 63), float32], Tensor[(16, 7, 1), float32], Tensor[(2, 10, 3), bool], Tensor[(2, 10, 3), float32]) */;
  %673 = cast(meta[relay.Constant][42] /* ty=Tensor[(99), int32] */, dtype="int32") /* ty=Tensor[(99), int32] */;
  %674 = reshape(%673, newshape=[1, 11, 9]) /* ty=Tensor[(1, 11, 9), int32] */;
  %675 = @func_1469(%674) /* ty=(Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) */;
  %676 = greater(%661, %662) /* ty=Tensor[(11, 12, 15), bool] */;
  %677 = %665.1;
  %678 = %672.5;
  %679 = %675.3;
  (%676, %677, %var_4950, %678, %var_4954, meta[relay.Constant][41] /* ty=Tensor[(630), int64] */, meta[relay.Constant][42] /* ty=Tensor[(99), int32] */, %679)
}

def @func_8491() -> Tensor[(11, 12, 15), float64] {
  @func_8489() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_1469(%var_1441: Tensor[(1, 11, 9), int32]) -> (Tensor[(?, 11, 9), int32], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(16, 7, 1), float32]) {
  %680 = cast(%var_1441, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
  %681 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1, 11, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 11, 9), int32] */, dtype="int32") /* ty=Tensor[(1, 11, 9), int32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %684 = cast(meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %685 = reshape(%684, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %686 = cast(meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %687 = reshape(%686, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), float32] */;
  %688 = right_shift(%682, %683) /* ty=Tensor[(?, 11, 9), int32] */;
  %689 = @func_567(%685) /* ty=Tensor[(16, 7, 1), float32] */;
  %690 = @func_567(%687) /* ty=Tensor[(16, 7, 1), float32] */;
  (%688, %689, meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, %690)
}

def @func_3883(%var_3873: Tensor[(11, 12, 15), float64]) -> (Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %691 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  %692 = cast(%var_3873, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(11, 12, 15), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = cast(%691, dtype="float64") /* ty=Tensor[(11, 12, 15), float64] */;
  %697 = not_equal(%694, %695) /* ty=Tensor[(11, 12, 15), bool] */;
  %698 = acosh(%696) /* ty=Tensor[(11, 12, 15), float64] */;
  %699 = @func_3765() /* ty=Tensor[(11, 12, 15), float64] */;
  (%697, %698, %699)
}

def @func_5208() -> Tensor[(11, 12, 15), float64] {
  @func_5206() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_5908() -> (Tensor[(11, 12, 15), float32],) {
  %701 = fn () -> (Tensor[(11, 12, 15), float32],) {
    %700 = @func_4027() /* ty=Tensor[(11, 12, 15), float32] */;
    (%700,)
  };
  %701() /* ty=(Tensor[(11, 12, 15), float32],) */
}

def @func_7913() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) {
  @func_7911() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) */
}

def @func_2439(%var_2437: Tensor[(14, 3, 4), float64]) -> Tensor[(14, 3, 4), float64] {
  @func_2436(%var_2437) /* ty=Tensor[(14, 3, 4), float64] */
}

def @func_569(%var_568: Tensor[(16, 7, 1), float32]) -> Tensor[(16, 7, 1), float32] {
  %703 = fn (%var_562: Tensor[(16, 7, 1), float32]) -> Tensor[(16, 7, 1), float32] {
    %702 = cast(%var_562, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
    erf(%702) /* ty=Tensor[(16, 7, 1), float32] */
  };
  %703(%var_568) /* ty=Tensor[(16, 7, 1), float32] */
}

def @func_765(%var_763: Tensor[(4, 1, 10), float64], %var_764: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) {
  %719 = fn (%var_735: Tensor[(4, 1, 10), float64], %var_755: Tensor[(630), int64]) -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) {
    %704 = cast(%var_755, dtype="int64") /* ty=Tensor[(630), int64] */;
    %705 = cast(%var_755, dtype="int64") /* ty=Tensor[(630), int64] */;
    %706 = reshape(%704, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %707 = reshape(%705, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), int64] */;
    %708 = cast(%var_735, dtype="float64") /* ty=Tensor[(4, 1, 10), float64] */;
    %709 = erf(%708) /* ty=Tensor[(4, 1, 10), float64] */;
    %710 = cast(%var_735, dtype="uint64") /* ty=Tensor[(4, 1, 10), uint64] */;
    %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%709, dtype="uint64") /* ty=Tensor[(4, 1, 10), uint64] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %714 = bitwise_and(%712, %713) /* ty=Tensor[(4, ?, 10), uint64] */;
    %715 = cast(%714, dtype="bool") /* ty=Tensor[(4, ?, 10), bool] */;
    %716 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 15, 10), uint64] */, dtype="bool") /* ty=Tensor[(4, 15, 10), bool] */;
    %717 = @func_432(%706, %707) /* ty=Tensor[(15, 7, 6), float64] */;
    %718 = less_equal(%715, %716) /* ty=Tensor[(4, 15, 10), bool] */;
    (%717, %var_755, %718)
  };
  %719(%var_763, %var_764) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(4, 15, 10), bool]) */
}

def @func_5857() -> (Tensor[(11, 12, 15), float64], Tensor[(4, 8, 7), float32], Tensor[(224), float32], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) {
  %720 = cast(meta[relay.Constant][46] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %721 = reshape(%720, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
  %722 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %723 = @func_4852(%721) /* ty=Tensor[(4, 8, 7), float32] */;
  %724 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  %725 = @func_4149() /* ty=Tensor[(11, 12, 15), float64] */;
  %726 = @func_3853() /* ty=Tensor[(11, 12, 15), float64] */;
  (%722, %723, meta[relay.Constant][46] /* ty=Tensor[(224), float32] */, %724, %725, %726)
}

def @func_7240() -> Tensor[(11, 12, 15), float64] {
  @func_7238() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_4628() -> Tensor[(13, 13, 4), float64] {
  %727 = @func_4573() /* ty=(Tensor[(13, 13, 4), bool], Tensor[(13, 13, 4), bool]) */;
  %728 = %727.1;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %730 = cosh(%729) /* ty=Tensor[(13, 13, 4), float64] */;
  %731 = cast(%728, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="uint32") /* ty=Tensor[(13, 13, 4), uint32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %735 = left_shift(%733, %734) /* ty=Tensor[(13, 13, 4), uint32] */;
  %736 = cast(%730, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%738, %739) /* ty=Tensor[(13, 13, 4), float64] */
}

def @func_7502() -> (Tensor[(11, 12, 15), float64], Tensor[(1300), float64]) {
  @func_7500() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(1300), float64]) */
}

def @func_6922() -> (Tensor[(13, 13, 4), bool], Tensor[(11, 12, 15), float64], Tensor[(36), float32], Tensor[(770, 2), int16], Tensor[(11, 12, 15), float32]) {
  %740 = @func_5043() /* ty=(Tensor[(13, 13, 4), bool],) */;
  %741 = cast(meta[relay.Constant][47] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %742 = cast(meta[relay.Constant][48] /* ty=Tensor[(770, 2), int16] */, dtype="int16") /* ty=Tensor[(770, 2), int16] */;
  %743 = reshape(%741, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %744 = reshape(%742, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %745 = @func_6799(%743, %744) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) */;
  %746 = @func_5907() /* ty=(Tensor[(11, 12, 15), float32],) */;
  %747 = %740.0;
  %748 = %745.1;
  %749 = %746.0;
  (%747, %748, meta[relay.Constant][47] /* ty=Tensor[(36), float32] */, meta[relay.Constant][48] /* ty=Tensor[(770, 2), int16] */, %749)
}

def @func_3678(%var_3676: Tensor[(1, 6, 6), float32], %var_3677: Tensor[(48), float64]) -> (Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) {
  @func_3674(%var_3676, %var_3677) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */
}

def @func_8363() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float32], Tensor[(48), float64]) {
  %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %751 = reshape(%750, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %752 = @func_5335(%751) /* ty=(Tensor[(11, 12, 15), float32], Tensor[(630), int64], Tensor[(4, 12), float64], Tensor[(630), int64], Tensor[(11, 12, 15), int16], Tensor[(1540), int16], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %753 = @func_7238() /* ty=Tensor[(11, 12, 15), float64] */;
  %754 = %752.0;
  (%753, %754, meta[relay.Constant][49] /* ty=Tensor[(48), float64] */)
}

def @func_4278(%var_4275: Tensor[(11, 12, 15), float64], %var_4276: Tensor[(11, 12, 15), float64], %var_4277: Tensor[(1540), int16]) -> (Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) {
  @func_4273(%var_4275, %var_4276, %var_4277) /* ty=(Tensor[(11, 12, 15), int16], Tensor[(11, 12, 15), uint32], Tensor[(11, 14, 10), bool], Tensor[(1540), int16], Tensor[(11, 12, 15), float64]) */
}

def @func_2436(%var_2430: Tensor[(14, 3, 4), float64]) -> Tensor[(14, 3, 4), float64] {
  %755 = cast(%var_2430, dtype="float64") /* ty=Tensor[(14, 3, 4), float64] */;
  %756 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(14, 3, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 3, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 4), float64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%757, %758) /* ty=Tensor[(14, 3, 4), float64] */
}

def @func_7863(%var_7862: Tensor[(9, 4), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(?, 6, 6), uint64], Tensor[(9, 4), float32], Tensor[(48), float64]) {
  %767 = fn (%var_7848: Tensor[(9, 4), float32]) -> (Tensor[(11, 12, 15), float64], Tensor[(?, 6, 6), uint64], Tensor[(9, 4), float32], Tensor[(48), float64]) {
    %759 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
    %760 = cast(%var_7848, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %761 = cast(meta[relay.Constant][51] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %762 = reshape(%760, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %763 = reshape(%761, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %764 = @func_3674(%762, %763) /* ty=(Tensor[(?, 6, 6), float32], Tensor[(2, 6, 10), int8], Tensor[(30, 4), int8], Tensor[(5, 5, 5), int64], Tensor[(25, 5), int64], Tensor[(?, 6, 6), uint64], Tensor[(5, 5, 5), int64], Tensor[(?, 6, 6), int16], Tensor[(112), float32], Tensor[(48), float64], Tensor[(630), int64]) */;
    %765 = %759.0;
    %766 = %764.5;
    (%765, %766, %var_7848, meta[relay.Constant][51] /* ty=Tensor[(48), float64] */)
  };
  %767(%var_7862) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(?, 6, 6), uint64], Tensor[(9, 4), float32], Tensor[(48), float64]) */
}

def @func_7911() -> (Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(3, 12), float32], Tensor[(1540), int16]) {
  %768 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %769 = cast(meta[relay.Constant][53] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %770 = reshape(%768, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %771 = reshape(%769, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %772 = @func_6799(%770, %771) /* ty=(Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64], Tensor[(112), float32], Tensor[(36, 1), float32], Tensor[(48), float64], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), uint32], Tensor[(1540), int16]) */;
  %773 = @func_7238() /* ty=Tensor[(11, 12, 15), float64] */;
  %774 = %772.5;
  (%773, %774, meta[relay.Constant][52] /* ty=Tensor[(3, 12), float32] */, meta[relay.Constant][53] /* ty=Tensor[(1540), int16] */)
}

def @func_3904() -> Tensor[(11, 12, 15), float64] {
  %775 = fn () -> Tensor[(11, 12, 15), float64] {
    @func_3853() /* ty=Tensor[(11, 12, 15), float64] */
  };
  %775() /* ty=Tensor[(11, 12, 15), float64] */
}

def @func_8194(%var_8174: Tensor[(630), int64]) -> (Tensor[(11, 12, 15), float64], Tensor[(630), int64]) {
  %776 = @func_5168() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %777 = cast(%var_8174, dtype="int64") /* ty=Tensor[(630), int64] */;
  %778 = reshape(%777, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %779 = @func_5716(%778) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) */;
  %780 = %779.1;
  %781 = cast(%780, dtype="int64") /* ty=Tensor[(630), int64] */;
  %782 = shape_of(%var_8174, dtype="int32") /* ty=Tensor[(1), int32] */;
  %783 = cast(%var_8174, dtype="int64") /* ty=Tensor[(630), int64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?), int64] */;
  %785 = %776.0;
  %786 = logical_xor(%783, %784) /* ty=Tensor[(630), int64] */;
  (%785, %786)
}

def @func_7643() -> (Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(5, 5, 9), float32], Tensor[(11, 12, 15), bool], Tensor[(3, 660), float64]) {
  %787 = cast(meta[relay.Constant][54] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %788 = reshape(%787, newshape=[630]) /* ty=Tensor[(630), int64] */;
  %789 = @func_5716(%788) /* ty=(Tensor[(15, 7, 6), float64], Tensor[(630), int64], Tensor[(13, 13, 4), uint32]) */;
  %790 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %791 = sqrt(%790) /* ty=Tensor[(5, 5, 9), float64] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %793 = cast(meta[relay.Constant][56] /* ty=Tensor[(3, 660), float64] */, dtype="float64") /* ty=Tensor[(3, 660), float64] */;
  %794 = reshape(%793, newshape=[11, 12, 15]) /* ty=Tensor[(11, 12, 15), float64] */;
  %795 = @func_3883(%794) /* ty=(Tensor[(11, 12, 15), bool], Tensor[(11, 12, 15), float64], Tensor[(11, 12, 15), float64]) */;
  %796 = %789.0;
  %797 = exp(%792) /* ty=Tensor[(5, 5, 9), float32] */;
  %798 = %795.0;
  (%796, meta[relay.Constant][54] /* ty=Tensor[(630), int64] */, %797, %798, meta[relay.Constant][56] /* ty=Tensor[(3, 660), float64] */)
}

def @func_6740() -> (Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) {
  @func_6738() /* ty=(Tensor[(16, 16, 3), float32], Tensor[(4, 15, 10), bool], Tensor[(40), float64], Tensor[(630), int64]) */
}

def @func_7420() -> (Tensor[(11, 12, 15), float32], Tensor[(11, 12, 15), float64]) {
  %799 = @func_3714() /* ty=(Tensor[(11, 12, 15), float64],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(11, 12, 15), float32] */;
  %802 = sinh(%801) /* ty=Tensor[(11, 12, 15), float32] */;
  %803 = @func_6004() /* ty=Tensor[(11, 12, 15), float64] */;
  (%802, %803)
}

def @func_4532() -> (Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) {
  @func_4530() /* ty=(Tensor[(11, 12, 15), float64], Tensor[(16, 7, 1), float32], Tensor[(112), float32], Tensor[(?, 11, 9), int32], Tensor[(99), int32], Tensor[(11, 12, 15), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen162/build/output.py", line 2067, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:54:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

