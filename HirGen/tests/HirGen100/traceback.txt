==========mod==========
#[version = "0.0.5"]
def @func_315(%var_303: Tensor[(16, 5, 12), float32]) -> Tensor[(16, 5, 12), float32] {
  %0 = cast(%var_303, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
  cos(%0) /* ty=Tensor[(16, 5, 12), float32] */
}

def @func_1223() -> Tensor[(10, 9, 14), float64] {
  %1 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %1.1
}

def @func_3461() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 7, 3), float32], Tensor[(210), uint64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %3 = reshape(%2, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), uint64] */;
  %4 = @func_1331(%3) /* ty=(Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) */;
  %5 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
  %6 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %7 = %4.1;
  (%5, %6, %7, meta[relay.Constant][0] /* ty=Tensor[(210), uint64] */)
}

def @func_169(%var_132: Tensor[(10, 9, 14), float32], %var_133: Tensor[(10, 9, 14), float32], %var_150: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  %8 = cast(%var_133, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %9 = shape_of(%var_132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_132, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = less_equal(%10, %11) /* ty=Tensor[(10, 9, 14), bool] */;
  %13 = cast(%var_133, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = logical_and(%15, %16) /* ty=Tensor[(10, 9, 14), bool] */;
  %18 = cast(%var_150, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %22 = cast(%var_132, dtype="uint32") /* ty=Tensor[(10, 9, 14), uint32] */;
  %23 = shape_of(%var_133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_133, dtype="uint32") /* ty=Tensor[(10, 9, 14), uint32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %26 = mod(%20, %21) /* ty=Tensor[(10, 9, 14), float64] */;
  %27 = bitwise_xor(%24, %25) /* ty=Tensor[(10, 9, 14), uint32] */;
  (%26, %27)
}

def @func_5082(%var_5004: Tensor[(10, 6, 5), float64], %var_5037: Tensor[(10, 9, 14), float32], %var_5048: Tensor[(210), uint64], %var_5071: Tensor[(4, 14, 10), float32]) -> (Tensor[(10, 6, 5), int8], Tensor[(10, 9, 14), bool], Tensor[(10, 7, 3), float32], Tensor[(210), uint64], Tensor[(1260), float32], Tensor[(4, 14, 10), bool]) {
  %28 = @func_2750() /* ty=(Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) */;
  %29 = %28.2;
  %30 = cast(%var_5004, dtype="int8") /* ty=Tensor[(10, 6, 5), int8] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="int8") /* ty=Tensor[(10, 6, 5), int8] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %34 = @func_3489() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %35 = %34.0;
  %36 = cast(%var_5037, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = cast(%var_5048, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %41 = reshape(%40, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), uint64] */;
  %42 = @func_1331(%41) /* ty=(Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) */;
  %43 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %44 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %45 = %44.3;
  %46 = cast(%var_5071, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = logical_xor(%32, %33) /* ty=Tensor[(10, 6, 5), int8] */;
  %51 = equal(%38, %39) /* ty=Tensor[(10, 9, 14), bool] */;
  %52 = %42.1;
  %53 = %43.1;
  %54 = greater_equal(%48, %49) /* ty=Tensor[(4, 14, 10), bool] */;
  (%50, %51, %52, %var_5048, %53, %54)
}

def @func_610(%var_576: Tensor[(5, 7, 5), float64]) -> (Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) {
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %56 = shape_of(%var_576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_576, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %59 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %60 = divide(%57, %58) /* ty=Tensor[(5, 7, 5), float64] */;
  %61 = %59.3;
  (%60, %61)
}

def @func_6357(%var_6354: Tensor[(13, 12, 8), float32]) -> (Tensor[(13, 12, 8), float32],) {
  %62 = cast(%var_6354, dtype="float32") /* ty=Tensor[(13, 12, 8), float32] */;
  %63 = acosh(%62) /* ty=Tensor[(13, 12, 8), float32] */;
  (%63,)
}

def @main() -> (Tensor[(10, 9, 14), float64],) {
  %64 = @func_5357() /* ty=Tensor[(10, 9, 14), float32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %66 = atan(%65) /* ty=Tensor[(10, 9, 14), float64] */;
  (%66,)
}

def @func_2677() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) {
  %67 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %68 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %69 = %67.0;
  %70 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %71 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %72 = @func_2184() /* ty=Tensor[(12, 3, 8), float32] */;
  %73 = %68.0;
  (%69, %70, %71, %72, %73)
}

def @func_5254(%var_5211: Tensor[(5, 12, 3), float64], %var_5230: Tensor[(117, 3), int8]) -> (Tensor[(10, 9, 14), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(117, 3), int8], Tensor[(5, 12, 3), float32], Tensor[(10, 9, 14), float64]) {
  %74 = cast(meta[relay.Constant][2] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %75 = cast(%var_5230, dtype="int8") /* ty=Tensor[(117, 3), int8] */;
  %76 = reshape(%74, newshape=[]) /* ty=int8 */;
  %77 = reshape(%75, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %78 = cast(%var_5211, dtype="float64") /* ty=Tensor[(5, 12, 3), float64] */;
  %79 = erf(%78) /* ty=Tensor[(5, 12, 3), float64] */;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(5, 12, 3), float32] */;
  %81 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
  %82 = @func_513(%76, %77) /* ty=Tensor[(13, 9, 3), int8] */;
  %83 = acos(%80) /* ty=Tensor[(5, 12, 3), float32] */;
  %84 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  (%81, %82, meta[relay.Constant][2] /* ty=int8 */, %var_5230, %83, %84)
}

def @func_6787() -> (Tensor[(10, 9, 14), float32],) {
  %85 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %86 = %85.0;
  (%86,)
}

def @func_5954() -> (Tensor[(10, 9, 14), float32],) {
  %87 = @func_3635() /* ty=Tensor[(10, 9, 14), float32] */;
  (%87,)
}

def @func_689(%var_680: Tensor[(14, 1, 9), float32]) -> (Tensor[(14, ?, 9), bool],) {
  %88 = cast(%var_680, dtype="float32") /* ty=Tensor[(14, 1, 9), float32] */;
  %89 = rsqrt(%88) /* ty=Tensor[(14, 1, 9), float32] */;
  %90 = cast(%var_680, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = less_equal(%92, %93) /* ty=Tensor[(14, ?, 9), bool] */;
  (%94,)
}

def @func_4297(%var_4268: Tensor[(15, 9, 1), float64]) -> (Tensor[(15, 9, 11), bool], Tensor[(15, 9, 1), float64], Tensor[(9, 7, 9), bool], Tensor[(9, 140), float64]) {
  %95 = cast(%var_4268, dtype="bool") /* ty=Tensor[(15, 9, 1), bool] */;
  %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 9, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 9, 11), bool] */;
  %97 = cast(%var_4268, dtype="float64") /* ty=Tensor[(15, 9, 1), float64] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 140), float64] */, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %99 = reshape(%98, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %100 = @func_569(%99) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) */;
  %101 = equal(%95, %96) /* ty=Tensor[(15, 9, 11), bool] */;
  %102 = exp(%97) /* ty=Tensor[(15, 9, 1), float64] */;
  %103 = %100.0;
  (%101, %102, %103, meta[relay.Constant][4] /* ty=Tensor[(9, 140), float64] */)
}

def @func_6483() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
  %104 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %105 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
  %106 = %104.0;
  %107 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %108 = %105.0;
  (%106, %107, %108)
}

def @func_365() -> Tensor[(10, 9, 14), float64] {
  %109 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %109.5
}

def @func_6245(%var_6220: Tensor[(132), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(10, 9, 14), int8], Tensor[(132), uint16], Tensor[(300), float32]) {
  %110 = @func_1990() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %113 = reshape(%111, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float64] */;
  %114 = reshape(%112, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %115 = @func_830(%113, %114) /* ty=(Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) */;
  %116 = cast(%var_6220, dtype="uint16") /* ty=Tensor[(132), uint16] */;
  %117 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(132), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(132), float64] */, dtype="uint16") /* ty=Tensor[(132), uint16] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %121 = reshape(%120, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %122 = @func_1472(%121) /* ty=Tensor[(10, 6, 5), float64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %124 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(300), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?), float64] */;
  %127 = subtract(%125, %126) /* ty=Tensor[(300), float64] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(300), float64] */;
  %129 = sinh(%128) /* ty=Tensor[(300), float64] */;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(300), float32] */;
  %131 = %110.0;
  %132 = %115.3;
  %133 = @func_3407() /* ty=Tensor[(10, 9, 14), int8] */;
  %134 = multiply(%118, %119) /* ty=Tensor[(132), uint16] */;
  %135 = tan(%130) /* ty=Tensor[(300), float32] */;
  (%131, %132, meta[relay.Constant][6] /* ty=Tensor[(126), float32] */, %133, %134, %135)
}

def @func_6769() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
  %136 = @func_5285() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %137 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %139 = reshape(%138, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %140 = @func_2963(%139) /* ty=(Tensor[(10, 9, 14), bool],) */;
  %141 = @func_1951() /* ty=Tensor[(10, 9, 14), float64] */;
  %142 = %136.0;
  %143 = %140.0;
  (%141, %142, %137, %143)
}

def @func_1436(%var_1423: Tensor[(1, 15, 9), float64], %var_1424: Tensor[(15, 15, 9), float64], %var_1432: Tensor[(32), float32]) -> (Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) {
  %144 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %145 = cast(%var_1424, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  %146 = cast(%var_1432, dtype="float32") /* ty=Tensor[(32), float32] */;
  %147 = reshape(%146, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float32] */;
  %148 = @func_1197(%147) /* ty=(Tensor[(1, 2, 16), float32],) */;
  %149 = floor_divide(%144, %145) /* ty=Tensor[(15, 15, 9), float64] */;
  %150 = %148.0;
  (%149, %150, %var_1432)
}

def @func_4949(%var_4941: Tensor[(9, 15), float32]) -> Tensor[(9, 15), float32] {
  %151 = cast(%var_4941, dtype="float32") /* ty=Tensor[(9, 15), float32] */;
  sinh(%151) /* ty=Tensor[(9, 15), float32] */
}

def @func_1951() -> Tensor[(10, 9, 14), float64] {
  %152 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  log(%154) /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_1197(%var_1190: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
  %155 = cast(%var_1190, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %156 = sinh(%155) /* ty=Tensor[(1, 2, 16), float32] */;
  (%156,)
}

def @func_3613(%var_3604: Tensor[(12, 3, 8), float32]) -> Tensor[(12, 3, 8), float64] {
  %157 = @func_2849() /* ty=Tensor[(12, 3, 8), float32] */;
  %158 = cast(%var_3604, dtype="float64") /* ty=Tensor[(12, 3, 8), float64] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float64") /* ty=Tensor[(12, 3, 8), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%160, %161) /* ty=Tensor[(12, 3, 8), float64] */
}

def @func_1738(%var_1705: Tensor[(300), float64], %var_1731: Tensor[(1, 351), int8]) -> (Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) {
  %162 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %163 = cast(%var_1705, dtype="float64") /* ty=Tensor[(300), float64] */;
  %164 = reshape(%163, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %165 = cast(meta[relay.Constant][8] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %166 = cast(%var_1731, dtype="int8") /* ty=Tensor[(1, 351), int8] */;
  %167 = reshape(%165, newshape=[]) /* ty=int8 */;
  %168 = reshape(%166, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %169 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %170 = %162.3;
  %171 = @func_1472(%164) /* ty=Tensor[(10, 6, 5), float64] */;
  %172 = @func_513(%167, %168) /* ty=Tensor[(13, 9, 3), int8] */;
  %173 = %169.0;
  (%170, %171, %var_1705, %172, meta[relay.Constant][8] /* ty=int8 */, %var_1731, %173)
}

def @func_1472(%var_1467: Tensor[(10, 6, 5), float64]) -> Tensor[(10, 6, 5), float64] {
  %174 = cast(%var_1467, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %175 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(10, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%176, %177) /* ty=Tensor[(10, 6, 5), float64] */
}

def @func_1558() -> (Tensor[(10, 9, 14), float32],) {
  %178 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %179 = %178.1;
  (%179,)
}

def @func_4184() -> (Tensor[(10, 9, 14), float32],) {
  %180 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %181 = %180.0;
  (%181,)
}

def @func_2054() -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) {
  %182 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1260), float32] */, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
  %184 = reshape(%183, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %185 = @func_2022(%184) /* ty=(Tensor[(10, 9, 14), uint64],) */;
  %186 = %182.4;
  %187 = %185.0;
  (%186, %187, meta[relay.Constant][10] /* ty=Tensor[(1, 1260), float32] */)
}

def @func_1083() -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
  %188 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %189 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 9, 14), float32] */, dtype="int8") /* ty=Tensor[(10, 9, 14), int8] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="int8") /* ty=Tensor[(10, 9, 14), int8] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %193 = cast(%188, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %194 = subtract(%191, %192) /* ty=Tensor[(10, 9, 14), int8] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %196 = cast(%194, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %197 = reshape(%193, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %198 = reshape(%195, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %199 = reshape(%196, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %200 = @func_169(%197, %198, %199) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %201 = %200.1;
  (%194, %201)
}

def @func_2022(%var_2009: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), uint64],) {
  %202 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %203 = %202.1;
  %204 = cast(%var_2009, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %208 = maximum(%206, %207) /* ty=Tensor[(10, 9, 14), uint64] */;
  (%208,)
}

def @func_3977() -> Tensor[(10, 9, 14), float32] {
  %209 = @func_3520() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) */;
  %209.0
}

def @func_2849() -> Tensor[(12, 3, 8), float32] {
  %210 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %210.3
}

def @func_6515(%var_6499: Tensor[(2025), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(135), float64], Tensor[(2025), float64], Tensor[(32), float32], Tensor[(15, 15, 9), float64]) {
  %211 = @func_5564() /* ty=(Tensor[(10, 9, 14), float64],) */;
  %212 = cast(meta[relay.Constant][12] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %213 = cast(%var_6499, dtype="float64") /* ty=Tensor[(2025), float64] */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %215 = reshape(%212, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), float64] */;
  %216 = reshape(%213, newshape=[15, 15, 9]) /* ty=Tensor[(15, 15, 9), float64] */;
  %217 = reshape(%214, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %218 = @func_1436(%215, %216, %217) /* ty=(Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) */;
  %219 = %218.0;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  %221 = %211.0;
  %222 = acos(%220) /* ty=Tensor[(15, 15, 9), float64] */;
  (%221, meta[relay.Constant][12] /* ty=Tensor[(135), float64] */, %var_6499, meta[relay.Constant][13] /* ty=Tensor[(32), float32] */, %222)
}

def @func_2896(%var_2887: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), int64],) {
  %223 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %224 = %223.0;
  %225 = cast(%var_2887, dtype="int64") /* ty=Tensor[(10, 9, 14), int64] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="int64") /* ty=Tensor[(10, 9, 14), int64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %229 = minimum(%227, %228) /* ty=Tensor[(10, 9, 14), int64] */;
  (%229,)
}

def @func_3407() -> Tensor[(10, 9, 14), int8] {
  %230 = @func_3279() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %230.0
}

def @func_6527() -> (Tensor[(10, 9, 14), float32],) {
  %231 = @func_1990() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_6077(%var_6074: Tensor[(14, 16), float64]) -> (Tensor[(14, 16), float64],) {
  %233 = cast(%var_6074, dtype="float64") /* ty=Tensor[(14, 16), float64] */;
  %234 = log2(%233) /* ty=Tensor[(14, 16), float64] */;
  (%234,)
}

def @func_5107() -> Tensor[(10, 9, 14), bool] {
  %235 = @func_4902() /* ty=(Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) */;
  %235.1
}

def @func_5285() -> (Tensor[(10, 9, 14), float32],) {
  %236 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %237 = %236.1;
  (%237,)
}

def @func_2963(%var_2957: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), bool],) {
  %238 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %239 = cast(%var_2957, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = less(%241, %242) /* ty=Tensor[(10, 9, 14), bool] */;
  (%243,)
}

def @func_5873(%var_5804: Tensor[(462, 2), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(12, 7, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(462, 2), float32], Tensor[(462, 2), float64], Tensor[(10, 9, 14), float32]) {
  %244 = @func_3848() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) */;
  %245 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %246 = cast(%var_5804, dtype="float64") /* ty=Tensor[(462, 2), float64] */;
  %247 = reshape(%246, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), float64] */;
  %248 = @func_4540(%247) /* ty=(Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) */;
  %249 = @func_4663() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %250 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %251 = cast(%var_5804, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %252 = cast(%var_5804, dtype="float64") /* ty=Tensor[(462, 2), float64] */;
  %253 = %244.2;
  %254 = %245.0;
  %255 = %248.0;
  %256 = %249.0;
  %257 = %250.0;
  %258 = sin(%251) /* ty=Tensor[(462, 2), float32] */;
  %259 = log2(%252) /* ty=Tensor[(462, 2), float64] */;
  %260 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
  (%253, %254, %255, %256, %257, %258, %259, %260)
}

def @func_5177(%var_5147: Tensor[(14, 7, 15), bool]) -> (Tensor[(14, 7, 15), bool], Tensor[(16, 16), float32], Tensor[(16, 1, 16), bool]) {
  %261 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %262 = cast(%var_5147, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %263 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %264 = reshape(%263, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), float32] */;
  %265 = @func_2104(%264) /* ty=(Tensor[(16, 1, 16), float32],) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="int32") /* ty=Tensor[(16, 1, 16), int32] */;
  %268 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %269 = bitwise_and(%267, %268) /* ty=Tensor[(16, 1, 16), int32] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(16, 1, 16), float64] */;
  %271 = tan(%270) /* ty=Tensor[(16, 1, 16), float64] */;
  %272 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %273 = cast(%271, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %274 = logical_or(%261, %262) /* ty=Tensor[(14, 7, 15), bool] */;
  %275 = greater_equal(%272, %273) /* ty=Tensor[(16, 1, 16), bool] */;
  (%274, meta[relay.Constant][14] /* ty=Tensor[(16, 16), float32] */, %275)
}

def @func_4157() -> (Tensor[(8, 4, 8), int8],) {
  %276 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 8), int8] */;
  %277 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 8), int8] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %280 = minimum(%278, %279) /* ty=Tensor[(8, 4, 8), int8] */;
  (%280,)
}

def @func_2915() -> Tensor[(10, 9, 14), float32] {
  %281 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %281.0
}

def @func_2184() -> Tensor[(12, 3, 8), float32] {
  %282 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 8), float32] */;
  cosh(%282) /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_52(%var_47: Tensor[(9, 7, 9), int64], %var_48: Tensor[(9, 7, 9), int64]) -> Tensor[(9, 7, 9), bool] {
  %283 = cast(%var_48, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %284 = shape_of(%var_47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_47, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%285, %286) /* ty=Tensor[(9, 7, 9), bool] */
}

def @func_2455(%var_2451: Tensor[(1, 351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 6, 5), float64], Tensor[(300, 1), float64], Tensor[(10, 9, 14), uint32], Tensor[(10, 6, 5), float64], Tensor[(1, 351), int8]) {
  %287 = cast(meta[relay.Constant][18] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %288 = reshape(%287, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %289 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %290 = @func_1472(%288) /* ty=Tensor[(10, 6, 5), float64] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %292 = cast(%var_2451, dtype="int8") /* ty=Tensor[(1, 351), int8] */;
  %293 = reshape(%291, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %294 = reshape(%292, newshape=[1, 351]) /* ty=Tensor[(1, 351), int8] */;
  %295 = @func_1738(%293, %294) /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) */;
  %296 = @func_1951() /* ty=Tensor[(10, 9, 14), float64] */;
  %297 = %289.0;
  %298 = %295.1;
  (%296, %290, meta[relay.Constant][18] /* ty=Tensor[(300, 1), float64] */, %297, %298, %var_2451)
}

def @func_2572() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
  %299 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %300 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %301 = %299.1;
  (%300, %301)
}

def @func_3848() -> (Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
  %302 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
  %303 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %304 = @func_3715() /* ty=Tensor[(10, 9, 14), float32] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %306 = reshape(%305, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %307 = @func_2963(%306) /* ty=(Tensor[(10, 9, 14), bool],) */;
  %308 = %302.0;
  %309 = %303.3;
  %310 = %307.0;
  (%308, %309, %304, %310)
}

def @func_569(%var_563: Tensor[(10, 9, 14), float64]) -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) {
  %311 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %312 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %313 = %312.5;
  %314 = cast(%var_563, dtype="uint8") /* ty=Tensor[(10, 9, 14), uint8] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="uint8") /* ty=Tensor[(10, 9, 14), uint8] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %318 = %311.4;
  %319 = bitwise_or(%316, %317) /* ty=Tensor[(10, 9, 14), uint8] */;
  (%318, %319)
}

def @func_3359() -> Tensor[(12, 3, 8), float32] {
  @func_2849() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_876() -> Tensor[(10, 9, 14), float32] {
  %320 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %320.0
}

def @func_3044() -> Tensor[(10, 9, 14), float64] {
  @func_2972() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_2972() -> Tensor[(10, 9, 14), float64] {
  @func_1223() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_4728() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  %321 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %323 = cast(%321, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %324 = cast(%321, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %325 = reshape(%322, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %326 = reshape(%323, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %327 = reshape(%324, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %328 = @func_169(%325, %326, %327) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %329 = %328.1;
  (%321, %329)
}

def @func_2245(%var_2229: Tensor[(4, 1, 5), uint64], %var_2230: Tensor[(4, 4, 5), uint64]) -> (Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) {
  %330 = cast(%var_2229, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
  %331 = cast(%var_2230, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %332 = @func_2041() /* ty=(Tensor[(10, 9, 14), float64],) */;
  %333 = @func_2054() /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) */;
  %334 = less(%330, %331) /* ty=Tensor[(4, 4, 5), bool] */;
  %335 = %332.0;
  %336 = %333.0;
  (%334, %335, %336)
}

def @func_2815() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %337 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %338 = @func_2054() /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) */;
  %339 = %338.1;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %341 = %337.3;
  %342 = asin(%340) /* ty=Tensor[(10, 9, 14), float32] */;
  (%341, %342)
}

def @func_3189(%var_3115: Tensor[(540), float32]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 5, 9), float64], Tensor[(4, 14, 10), bool], Tensor[(175), float64], Tensor[(10, 9, 14), uint64]) {
  %343 = @func_3051() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %344 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %345 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %346 = cast(%var_3115, dtype="float32") /* ty=Tensor[(540), float32] */;
  %347 = %343.0;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %349 = reshape(%346, newshape=[12, 5, 9]) /* ty=Tensor[(12, 5, 9), float32] */;
  %350 = reshape(%348, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %351 = @func_2404(%349, %350) /* ty=(Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) */;
  %352 = %351.0;
  %353 = cast(%var_3115, dtype="float64") /* ty=Tensor[(540), float64] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="float64") /* ty=Tensor[(12, 5, 9), float64] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %357 = cast(meta[relay.Constant][19] /* ty=Tensor[(175), float64] */, dtype="float64") /* ty=Tensor[(175), float64] */;
  %358 = reshape(%357, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float64] */;
  %359 = @func_610(%358) /* ty=(Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) */;
  %360 = cast(%347, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %361 = reshape(%360, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %362 = @func_2022(%361) /* ty=(Tensor[(10, 9, 14), uint64],) */;
  %363 = %344.1;
  %364 = %345.1;
  %365 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
  %366 = power(%355, %356) /* ty=Tensor[(12, 5, 9), float64] */;
  %367 = %359.1;
  %368 = %362.0;
  (%347, %363, %364, %365, %366, %367, meta[relay.Constant][19] /* ty=Tensor[(175), float64] */, %368)
}

def @func_252() -> (Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) {
  %369 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %371 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %372 = reshape(%369, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %373 = reshape(%370, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %374 = reshape(%371, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %375 = @func_169(%372, %373, %374) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %376 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %378 = reshape(%376, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %379 = reshape(%377, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %380 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %381 = atanh(%380) /* ty=Tensor[(4, 14, 10), float64] */;
  %382 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 14, 10), uint32] */;
  %383 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 14, 10), uint32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %386 = logical_xor(%384, %385) /* ty=Tensor[(4, 14, 10), uint32] */;
  %387 = cast(%386, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %388 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%381, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %392 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %393 = reshape(%391, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %394 = reshape(%392, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %395 = @func_52(%393, %394) /* ty=Tensor[(9, 7, 9), bool] */;
  %396 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), int64] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %401 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %402 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %403 = reshape(%400, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %404 = reshape(%401, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %405 = reshape(%402, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %406 = @func_169(%403, %404, %405) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %407 = %375.0;
  %408 = @func_52(%378, %379) /* ty=Tensor[(9, 7, 9), bool] */;
  %409 = not_equal(%389, %390) /* ty=Tensor[(4, 14, 10), bool] */;
  %410 = greater(%398, %399) /* ty=Tensor[(9, 7, 9), bool] */;
  %411 = %406.0;
  (%407, meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, %408, %409, %410, %411)
}

def @func_1687() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %412 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %413 = %412.2;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %415 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %416 = tan(%414) /* ty=Tensor[(10, 9, 14), float32] */;
  %417 = %415.0;
  (%416, %417)
}

def @func_3920(%var_3899: Tensor[(13, 15, 6), float32], %var_3916: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 15, 6), int32]) {
  %418 = cast(%var_3899, dtype="float32") /* ty=Tensor[(13, 15, 6), float32] */;
  %419 = cast(%var_3916, dtype="int32") /* ty=Tensor[(13, 15, 6), int32] */;
  %420 = shape_of(%var_3899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_3899, dtype="int32") /* ty=Tensor[(13, 15, 6), int32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %423 = asin(%418) /* ty=Tensor[(13, 15, 6), float32] */;
  %424 = maximum(%421, %422) /* ty=Tensor[(13, 15, 6), int32] */;
  (%423, %424)
}

def @func_4054() -> Tensor[(10, 9, 14), float64] {
  @func_3044() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_3635() -> Tensor[(10, 9, 14), float32] {
  %425 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %425.1
}

def @func_3715() -> Tensor[(10, 9, 14), float32] {
  %426 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %426.0
}

def @func_2404(%var_2359: Tensor[(12, 5, 9), float32], %var_2383: Tensor[(1260), float32]) -> (Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) {
  %427 = cast(%var_2359, dtype="float32") /* ty=Tensor[(12, 5, 9), float32] */;
  %428 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %429 = %428.1;
  %430 = cast(%var_2383, dtype="uint16") /* ty=Tensor[(1260), uint16] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(1), int32] */;
  %432 = cast(%429, dtype="uint16") /* ty=Tensor[(1260), uint16] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %434 = sigmoid(%427) /* ty=Tensor[(12, 5, 9), float32] */;
  %435 = logical_xor(%432, %433) /* ty=Tensor[(1260), uint16] */;
  (%434, %435)
}

def @func_5564() -> (Tensor[(10, 9, 14), float64],) {
  %436 = @func_4030() /* ty=Tensor[(10, 9, 14), float64] */;
  (%436,)
}

def @func_5357() -> Tensor[(10, 9, 14), float32] {
  @func_2428() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_6059() -> Tensor[(2, 1, 16), float64] {
  %437 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
  erf(%437) /* ty=Tensor[(2, 1, 16), float64] */
}

def @func_1990() -> (Tensor[(10, 9, 14), float32],) {
  %438 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %439 = %438.0;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %441 = acos(%440) /* ty=Tensor[(10, 9, 14), float32] */;
  (%441,)
}

def @func_2428() -> Tensor[(10, 9, 14), float32] {
  @func_876() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_1414(%var_1390: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) {
  %442 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %443 = cast(%var_1390, dtype="int8") /* ty=Tensor[(351), int8] */;
  %444 = reshape(%442, newshape=[]) /* ty=int8 */;
  %445 = reshape(%443, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %446 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %447 = @func_513(%444, %445) /* ty=Tensor[(13, 9, 3), int8] */;
  (%446, %447, meta[relay.Constant][25] /* ty=int8 */, %var_1390)
}

def @func_4902() -> (Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) {
  %448 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %449 = %448.1;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %451 = reshape(%450, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %452 = @func_2963(%451) /* ty=(Tensor[(10, 9, 14), bool],) */;
  %453 = @func_4451() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
  %454 = %452.0;
  %455 = %453.4;
  (%449, %454, %455)
}

def @func_6661() -> (Tensor[(10, 9, 14), float32],) {
  %456 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %457 = %456.4;
  (%457,)
}

def @func_4792() -> (Tensor[(4, 14, 10), float32],) {
  %458 = @func_2356() /* ty=Tensor[(4, 14, 10), float32] */;
  (%458,)
}

def @func_1544() -> (Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) {
  %459 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %460 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %461 = %459.2;
  %462 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %463 = %460.3;
  (%461, %462, %463)
}

def @func_3489() -> (Tensor[(10, 9, 14), float32],) {
  %464 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %465 = %464.0;
  (%465,)
}

def @func_4451() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
  %466 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %467 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %468 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %469 = %466.3;
  %470 = %467.2;
  %471 = %468.0;
  %472 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
  %473 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
  (%469, %470, %471, %472, %473)
}

def @func_5614(%var_5604: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), uint32], Tensor[(351), int8], Tensor[(351), int8]) {
  %474 = @func_3279() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %475 = cast(%var_5604, dtype="int8") /* ty=Tensor[(351), int8] */;
  %476 = reshape(%475, newshape=[351]) /* ty=Tensor[(351), int8] */;
  %477 = @func_1414(%476) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) */;
  %478 = %474.1;
  %479 = %477.3;
  (%478, %479, %var_5604)
}

def @func_4540(%var_4492: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) {
  %480 = cast(%var_4492, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
  %481 = cast(%var_4492, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
  %482 = acosh(%481) /* ty=Tensor[(12, 7, 11), float64] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
  %484 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_4492, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = add(%485, %486) /* ty=Tensor[(12, 7, 11), float32] */;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
  %489 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_4492, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %492 = acos(%480) /* ty=Tensor[(12, 7, 11), float64] */;
  %493 = divide(%490, %491) /* ty=Tensor[(12, 7, 11), float32] */;
  (%492, %493)
}

def @func_4030() -> Tensor[(10, 9, 14), float64] {
  @func_2972() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_5385() -> Tensor[(10, 9, 14), float64] {
  %494 = @func_4728() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %494.0
}

def @func_4357(%var_4342: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], Tensor[(351), float32]) {
  %495 = cast(%var_4342, dtype="int8") /* ty=Tensor[(351), int8] */;
  %496 = reshape(%495, newshape=[351]) /* ty=Tensor[(351), int8] */;
  %497 = @func_1414(%496) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) */;
  %498 = cast(%var_4342, dtype="float32") /* ty=Tensor[(351), float32] */;
  %499 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
  %500 = %497.1;
  %501 = asin(%498) /* ty=Tensor[(351), float32] */;
  (%499, %500, %501)
}

def @func_6047() -> (Tensor[(4, 15, 2), float32], Tensor[(10, 9, 14), float32], Tensor[(1260), float32]) {
  %502 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 2), float32] */;
  %503 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %504 = exp(%502) /* ty=Tensor[(4, 15, 2), float32] */;
  %505 = @func_3715() /* ty=Tensor[(10, 9, 14), float32] */;
  %506 = %503.1;
  (%504, %505, %506)
}

def @func_4137() -> Tensor[(9, 7, 9), bool] {
  %507 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %507.2
}

def @func_4580(%var_4572: Tensor[(4, 6, 5), float32]) -> Tensor[(4, 6, 5), float32] {
  %508 = cast(%var_4572, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  sigmoid(%508) /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_2203() -> (Tensor[(10, 9, 14), float32],) {
  %509 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  (%509,)
}

def @func_1163(%var_1154: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) {
  %510 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %511 = %510.1;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %513 = atanh(%512) /* ty=Tensor[(10, 9, 14), float64] */;
  %514 = cast(%var_1154, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = greater(%516, %517) /* ty=Tensor[(10, 9, 14), bool] */;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %520 = reshape(%519, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %521 = @func_569(%520) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) */;
  %522 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %523 = %521.1;
  (%522, %518, %523)
}

def @func_3748(%var_3728: Tensor[(2, 12, 10), float64], %var_3736: Tensor[(351, 1), int8]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351, 1), int8], Tensor[(10, 9, 14), float32]) {
  %524 = cast(%var_3728, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %525 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %526 = cast(%var_3736, dtype="int8") /* ty=Tensor[(351, 1), int8] */;
  %527 = reshape(%525, newshape=[]) /* ty=int8 */;
  %528 = reshape(%526, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %529 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %530 = sin(%524) /* ty=Tensor[(2, 12, 10), float64] */;
  %531 = @func_513(%527, %528) /* ty=Tensor[(13, 9, 3), int8] */;
  %532 = %529.1;
  (%530, %531, meta[relay.Constant][27] /* ty=int8 */, %var_3736, %532)
}

def @func_6440() -> (Tensor[(10, 9, 14), float32],) {
  %533 = @func_5285() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %534 = %533.0;
  (%534,)
}

def @func_3520() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
  %535 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %536 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
  %537 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %538 = %535.0;
  %539 = %536.0;
  (%537, %538, %539)
}

def @func_2104(%var_2086: Tensor[(16, 1, 16), float32]) -> (Tensor[(16, 1, 16), float32],) {
  %540 = cast(%var_2086, dtype="float32") /* ty=Tensor[(16, 1, 16), float32] */;
  %541 = sigmoid(%540) /* ty=Tensor[(16, 1, 16), float32] */;
  (%541,)
}

def @func_5518() -> Tensor[(10, 9, 14), float32] {
  @func_3977() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_2785(%var_2776: Tensor[(175), float64]) -> (Tensor[(10, 9, 14), uint32], Tensor[(4, 14, 10), bool], Tensor[(175), float64]) {
  %542 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %543 = cast(%var_2776, dtype="float64") /* ty=Tensor[(175), float64] */;
  %544 = reshape(%543, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float64] */;
  %545 = @func_610(%544) /* ty=(Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) */;
  %546 = %542.1;
  %547 = %545.1;
  (%546, %547, %var_2776)
}

def @func_5934() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %548 = @func_2915() /* ty=Tensor[(10, 9, 14), float32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %550 = cast(%548, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %551 = cosh(%549) /* ty=Tensor[(10, 9, 14), float32] */;
  %552 = acosh(%550) /* ty=Tensor[(10, 9, 14), float64] */;
  (%551, %552)
}

def @func_513(%var_483: int8, %var_484: Tensor[(13, 9, 3), int8]) -> Tensor[(13, 9, 3), int8] {
  %553 = cast(%var_483, dtype="int8") /* ty=int8 */;
  %554 = cast(%var_484, dtype="int8") /* ty=Tensor[(13, 9, 3), int8] */;
  right_shift(%553, %554) /* ty=Tensor[(13, 9, 3), int8] */
}

def @func_5670(%var_5647: Tensor[(13, 3, 11), uint32]) -> Tensor[(13, 3, 11), uint32] {
  %555 = cast(%var_5647, dtype="uint32") /* ty=Tensor[(13, 3, 11), uint32] */;
  %556 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(13, 3, 11), uint32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%557, %558) /* ty=Tensor[(13, 3, 11), uint32] */
}

def @func_1887(%var_1840: Tensor[(10, 96), float32], %var_1870: Tensor[(351), int8]) -> (Tensor[(14, 3, 11), float64], Tensor[(16, 5, 12), float32], Tensor[(10, 96), float32], Tensor[(4, 14, 10), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8], Tensor[(4, 14, 10), float64]) {
  %559 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %560 = cast(%var_1840, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %561 = reshape(%560, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float32] */;
  %562 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %563 = %562.2;
  %564 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %565 = %564.3;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %567 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%563, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %571 = reshape(%570, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), float32] */;
  %572 = @func_689(%571) /* ty=(Tensor[(14, ?, 9), bool],) */;
  %573 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %574 = cast(%var_1870, dtype="int8") /* ty=Tensor[(351), int8] */;
  %575 = reshape(%573, newshape=[]) /* ty=int8 */;
  %576 = reshape(%574, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %577 = cast(%563, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %578 = %559.1;
  %579 = @func_315(%561) /* ty=Tensor[(16, 5, 12), float32] */;
  %580 = mod(%568, %569) /* ty=Tensor[(4, 14, 10), float64] */;
  %581 = %572.0;
  %582 = @func_513(%575, %576) /* ty=Tensor[(13, 9, 3), int8] */;
  %583 = log(%577) /* ty=Tensor[(4, 14, 10), float64] */;
  (%578, %579, %var_1840, %580, %581, meta[relay.Constant][29] /* ty=Tensor[(126), float32] */, %582, meta[relay.Constant][30] /* ty=int8 */, %var_1870, %583)
}

def @func_730() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %584 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %585 = %584.0;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %587 = sinh(%586) /* ty=Tensor[(10, 9, 14), float32] */;
  %588 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  (%587, %588)
}

def @func_830(%var_816: Tensor[(2, 6, 11), float64], %var_825: Tensor[(126), float32]) -> (Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) {
  %589 = cast(%var_816, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %590 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %591 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %592 = cast(%var_825, dtype="float32") /* ty=Tensor[(126), float32] */;
  %593 = reshape(%592, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), float32] */;
  %594 = @func_689(%593) /* ty=(Tensor[(14, ?, 9), bool],) */;
  %595 = atanh(%589) /* ty=Tensor[(2, 6, 11), float64] */;
  %596 = %590.1;
  %597 = %591.1;
  %598 = %594.0;
  (%595, %596, %597, %598, %var_825)
}

def @func_2356() -> Tensor[(4, 14, 10), float32] {
  %599 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %599.0
}

def @func_3889(%var_3872: Tensor[(6, 5, 2), uint64], %var_3879: Tensor[(1, 1260), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(1, 1260), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %600 = cast(%var_3879, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %601 = reshape(%600, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %602 = @func_1163(%601) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) */;
  %603 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %604 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 5, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 5, 2), uint64] */, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %607 = less_equal(%605, %606) /* ty=Tensor[(6, 5, 2), bool] */;
  %608 = cast(%var_3872, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %612 = cast(%var_3872, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %613 = %602.0;
  %614 = floor_divide(%610, %611) /* ty=Tensor[(6, 5, 2), float32] */;
  %615 = sigmoid(%612) /* ty=Tensor[(6, 5, 2), float32] */;
  (%613, %var_3879, %614, %615)
}

def @func_465() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %616 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %618 = cast(%616, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %619 = rsqrt(%618) /* ty=Tensor[(10, 9, 14), float64] */;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %621 = cos(%620) /* ty=Tensor[(10, 9, 14), float64] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %623 = sigmoid(%622) /* ty=Tensor[(10, 9, 14), float32] */;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %625 = sin(%617) /* ty=Tensor[(10, 9, 14), float32] */;
  %626 = asinh(%624) /* ty=Tensor[(10, 9, 14), float32] */;
  (%625, %626)
}

def @func_5703(%var_5701: Tensor[(1260), float32]) -> (Tensor[(7, 14, 16), bool], Tensor[(7, 14, 16), uint32], Tensor[(10, 9, 14), int64], Tensor[(1260), float32]) {
  %627 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %628 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %632 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %635 = cast(%var_5701, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %636 = reshape(%635, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %637 = @func_2896(%636) /* ty=(Tensor[(10, 9, 14), int64],) */;
  %638 = greater(%629, %630) /* ty=Tensor[(7, 14, 16), bool] */;
  %639 = multiply(%633, %634) /* ty=Tensor[(7, 14, 16), uint32] */;
  %640 = %637.0;
  (%638, %639, %640, %var_5701)
}

def @func_4780() -> (Tensor[(4, 14, 10), float32],) {
  %641 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %642 = %641.3;
  (%642,)
}

def @func_6329() -> (Tensor[(5, 9, 12), uint32],) {
  %643 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %644 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = logical_and(%645, %646) /* ty=Tensor[(5, 9, 12), bool] */;
  %648 = cast(%647, dtype="uint32") /* ty=Tensor[(5, 9, 12), uint32] */;
  %649 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 9, 12), bool] */, dtype="uint32") /* ty=Tensor[(5, 9, 12), uint32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %652 = bitwise_and(%650, %651) /* ty=Tensor[(5, 9, 12), uint32] */;
  (%652,)
}

def @func_2041() -> (Tensor[(10, 9, 14), float64],) {
  %653 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %654 = %653.1;
  (%654,)
}

def @func_3051() -> (Tensor[(10, 9, 14), float32],) {
  %655 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %656 = %655.0;
  (%656,)
}

def @func_2750() -> (Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) {
  %657 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %658 = %657.0;
  %659 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 14), float32] */, dtype="int16") /* ty=Tensor[(10, 9, 14), int16] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="int16") /* ty=Tensor[(10, 9, 14), int16] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %663 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %664 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%658, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %667 = cast(meta[relay.Constant][38] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %668 = reshape(%667, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %669 = left_shift(%661, %662) /* ty=Tensor[(10, 9, 14), int16] */;
  %670 = divide(%665, %666) /* ty=Tensor[(10, 9, 14), float32] */;
  %671 = @func_1472(%668) /* ty=Tensor[(10, 6, 5), float64] */;
  %672 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
  (%669, %670, %671, meta[relay.Constant][38] /* ty=Tensor[(300), float64] */, %672)
}

def @func_1289() -> (Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) {
  %673 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %674 = %673.1;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %676 = cast(%674, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %678 = reshape(%675, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %679 = reshape(%676, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %680 = reshape(%677, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %681 = @func_169(%678, %679, %680) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %682 = cast(%674, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %683 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %684 = %681.1;
  %685 = erf(%682) /* ty=Tensor[(1260), float32] */;
  %686 = %683.1;
  (%684, %685, %686)
}

def @func_2325(%var_2322: Tensor[(20), uint64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(20), uint64], Tensor[(80), uint64]) {
  %687 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %688 = cast(%var_2322, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %689 = cast(meta[relay.Constant][39] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %690 = reshape(%688, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), uint64] */;
  %691 = reshape(%689, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint64] */;
  %692 = @func_2245(%690, %691) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) */;
  %693 = %687.1;
  %694 = %692.1;
  (%693, %694, %var_2322, meta[relay.Constant][39] /* ty=Tensor[(80), uint64] */)
}

def @func_3279() -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
  %695 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %698 = cast(%696, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %700 = reshape(%697, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %701 = reshape(%698, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %702 = reshape(%699, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %703 = @func_169(%700, %701, %702) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %704 = %703.1;
  (%696, %704)
}

def @func_4663() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %705 = @func_4184() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %706 = %705.0;
  %707 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  (%706, %707)
}

def @func_5301() -> Tensor[(12, 3, 8), float32] {
  @func_3359() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_1631() -> (Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %708 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %709 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %710 = asin(%709) /* ty=Tensor[(14, 3, 11), float32] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %712 = exp(%711) /* ty=Tensor[(14, 3, 11), float32] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %714 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%710, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %717 = @func_1558() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %718 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %719 = %708.1;
  %720 = divide(%715, %716) /* ty=Tensor[(14, 3, 11), float64] */;
  %721 = %717.0;
  %722 = %718.1;
  (%719, %720, %721, %722)
}

def @func_1331(%var_1293: Tensor[(10, 7, 3), uint64]) -> (Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) {
  %723 = cast(meta[relay.Constant][41] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %724 = cast(%var_1293, dtype="uint64") /* ty=Tensor[(10, 7, 3), uint64] */;
  %725 = cast(%var_1293, dtype="float32") /* ty=Tensor[(10, 7, 3), float32] */;
  %726 = maximum(%723, %724) /* ty=Tensor[(10, 7, 3), uint64] */;
  %727 = rsqrt(%725) /* ty=Tensor[(10, 7, 3), float32] */;
  (%726, %727)
}

def @func_909() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) {
  %728 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %729 = %728.3;
  %730 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 14, 10), bool] */, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %734 = cast(%729, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
  %735 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %736 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %737 = minimum(%732, %733) /* ty=Tensor[(4, 14, 10), float32] */;
  %738 = acosh(%734) /* ty=Tensor[(4, 14, 10), float32] */;
  (%735, %736, %737, %738)
}

def @func_5399(%var_5396: Tensor[(3, 5, 1), float64]) -> Tensor[(3, 5, 1), float64] {
  %739 = cast(%var_5396, dtype="float64") /* ty=Tensor[(3, 5, 1), float64] */;
  tan(%739) /* ty=Tensor[(3, 5, 1), float64] */
}

def @func_5505(%var_5465: Tensor[(4, 14, 10), float32]) -> (Tensor[(4, 14, 10), int16],) {
  %740 = @func_2356() /* ty=Tensor[(4, 14, 10), float32] */;
  %741 = cast(%var_5465, dtype="int16") /* ty=Tensor[(4, 14, 10), int16] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="int16") /* ty=Tensor[(4, 14, 10), int16] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %745 = add(%743, %744) /* ty=Tensor[(4, 14, 10), int16] */;
  (%745,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5303() -> Tensor[(12, 3, 8), float32] {
  @func_5301() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_6787() -> (Tensor[(10, 9, 14), float32],) {
  %0 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_1436(%var_1423: Tensor[(1, 15, 9), float64], %var_1424: Tensor[(15, 15, 9), float64], %var_1432: Tensor[(32), float32]) -> (Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) {
  %2 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %3 = cast(%var_1424, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  %4 = cast(%var_1432, dtype="float32") /* ty=Tensor[(32), float32] */;
  %5 = reshape(%4, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float32] */;
  %6 = @func_1197(%5) /* ty=(Tensor[(1, 2, 16), float32],) */;
  %7 = floor_divide(%2, %3) /* ty=Tensor[(15, 15, 9), float64] */;
  %8 = %6.0;
  (%7, %8, %var_1432)
}

def @func_1990() -> (Tensor[(10, 9, 14), float32],) {
  %9 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %12 = acos(%11) /* ty=Tensor[(10, 9, 14), float32] */;
  (%12,)
}

def @func_3716() -> Tensor[(10, 9, 14), float32] {
  %14 = fn () -> Tensor[(10, 9, 14), float32] {
    %13 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %13.0
  };
  %14() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_5519() -> Tensor[(10, 9, 14), float32] {
  %15 = fn () -> Tensor[(10, 9, 14), float32] {
    @func_3977() /* ty=Tensor[(10, 9, 14), float32] */
  };
  %15() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_2963(%var_2957: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), bool],) {
  %16 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %17 = cast(%var_2957, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %21 = less(%19, %20) /* ty=Tensor[(10, 9, 14), bool] */;
  (%21,)
}

def @func_169(%var_132: Tensor[(10, 9, 14), float32], %var_133: Tensor[(10, 9, 14), float32], %var_150: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  %22 = cast(%var_133, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %23 = shape_of(%var_132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_132, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %26 = less_equal(%24, %25) /* ty=Tensor[(10, 9, 14), bool] */;
  %27 = cast(%var_133, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = logical_and(%29, %30) /* ty=Tensor[(10, 9, 14), bool] */;
  %32 = cast(%var_150, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %36 = cast(%var_132, dtype="uint32") /* ty=Tensor[(10, 9, 14), uint32] */;
  %37 = shape_of(%var_133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_133, dtype="uint32") /* ty=Tensor[(10, 9, 14), uint32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %40 = mod(%34, %35) /* ty=Tensor[(10, 9, 14), float64] */;
  %41 = bitwise_xor(%38, %39) /* ty=Tensor[(10, 9, 14), uint32] */;
  (%40, %41)
}

def @func_3280() -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
  %52 = fn () -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
    %42 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
    %43 = %42.0;
    %44 = cast(%43, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %45 = cast(%43, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %46 = cast(%43, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
    %47 = reshape(%44, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %48 = reshape(%45, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %49 = reshape(%46, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
    %50 = @func_169(%47, %48, %49) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
    %51 = %50.1;
    (%43, %51)
  };
  %52() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */
}

def @func_3635() -> Tensor[(10, 9, 14), float32] {
  %53 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %53.1
}

def @func_2785(%var_2776: Tensor[(175), float64]) -> (Tensor[(10, 9, 14), uint32], Tensor[(4, 14, 10), bool], Tensor[(175), float64]) {
  %54 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %55 = cast(%var_2776, dtype="float64") /* ty=Tensor[(175), float64] */;
  %56 = reshape(%55, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float64] */;
  %57 = @func_610(%56) /* ty=(Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) */;
  %58 = %54.1;
  %59 = %57.1;
  (%58, %59, %var_2776)
}

def @func_2898(%var_2897: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), int64],) {
  %67 = fn (%var_2887: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), int64],) {
    %60 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %61 = %60.0;
    %62 = cast(%var_2887, dtype="int64") /* ty=Tensor[(10, 9, 14), int64] */;
    %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(%61, dtype="int64") /* ty=Tensor[(10, 9, 14), int64] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %66 = minimum(%64, %65) /* ty=Tensor[(10, 9, 14), int64] */;
    (%66,)
  };
  %67(%var_2897) /* ty=(Tensor[(10, 9, 14), int64],) */
}

def @func_4055() -> Tensor[(10, 9, 14), float64] {
  %68 = fn () -> Tensor[(10, 9, 14), float64] {
    @func_3044() /* ty=Tensor[(10, 9, 14), float64] */
  };
  %68() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_3616(%var_3614: Tensor[(12, 3, 8), float32]) -> Tensor[(12, 3, 8), float64] {
  @func_3613(%var_3614) /* ty=Tensor[(12, 3, 8), float64] */
}

def @func_3892(%var_3890: Tensor[(6, 5, 2), uint64], %var_3891: Tensor[(1, 1260), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(1, 1260), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %85 = fn (%var_3872: Tensor[(6, 5, 2), uint64], %var_3879: Tensor[(1, 1260), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(1, 1260), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
    %69 = cast(%var_3879, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
    %70 = reshape(%69, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
    %71 = @func_1163(%70) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) */;
    %72 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
    %73 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 5, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 5, 2), uint64] */, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %76 = less_equal(%74, %75) /* ty=Tensor[(6, 5, 2), bool] */;
    %77 = cast(%var_3872, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %81 = cast(%var_3872, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %82 = %71.0;
    %83 = floor_divide(%79, %80) /* ty=Tensor[(6, 5, 2), float32] */;
    %84 = sigmoid(%81) /* ty=Tensor[(6, 5, 2), float32] */;
    (%82, %var_3879, %83, %84)
  };
  %85(%var_3890, %var_3891) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1, 1260), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_5614(%var_5604: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), uint32], Tensor[(351), int8], Tensor[(351), int8]) {
  %86 = @func_3279() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %87 = cast(%var_5604, dtype="int8") /* ty=Tensor[(351), int8] */;
  %88 = reshape(%87, newshape=[351]) /* ty=Tensor[(351), int8] */;
  %89 = @func_1414(%88) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) */;
  %90 = %86.1;
  %91 = %89.3;
  (%90, %91, %var_5604)
}

def @func_4949(%var_4941: Tensor[(9, 15), float32]) -> Tensor[(9, 15), float32] {
  %92 = cast(%var_4941, dtype="float32") /* ty=Tensor[(9, 15), float32] */;
  sinh(%92) /* ty=Tensor[(9, 15), float32] */
}

def @func_834(%var_832: Tensor[(2, 6, 11), float64], %var_833: Tensor[(126), float32]) -> (Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) {
  @func_830(%var_832, %var_833) /* ty=(Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) */
}

def @func_6047() -> (Tensor[(4, 15, 2), float32], Tensor[(10, 9, 14), float32], Tensor[(1260), float32]) {
  %93 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 2), float32] */;
  %94 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %95 = exp(%93) /* ty=Tensor[(4, 15, 2), float32] */;
  %96 = @func_3715() /* ty=Tensor[(10, 9, 14), float32] */;
  %97 = %94.1;
  (%95, %96, %97)
}

def @func_5876(%var_5874: Tensor[(462, 2), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(12, 7, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(462, 2), float32], Tensor[(462, 2), float64], Tensor[(10, 9, 14), float32]) {
  @func_5873(%var_5874) /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(12, 7, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(462, 2), float32], Tensor[(462, 2), float64], Tensor[(10, 9, 14), float32]) */
}

def @func_4359(%var_4358: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], Tensor[(351), float32]) {
  %105 = fn (%var_4342: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], Tensor[(351), float32]) {
    %98 = cast(%var_4342, dtype="int8") /* ty=Tensor[(351), int8] */;
    %99 = reshape(%98, newshape=[351]) /* ty=Tensor[(351), int8] */;
    %100 = @func_1414(%99) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) */;
    %101 = cast(%var_4342, dtype="float32") /* ty=Tensor[(351), float32] */;
    %102 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
    %103 = %100.1;
    %104 = asin(%101) /* ty=Tensor[(351), float32] */;
    (%102, %103, %104)
  };
  %105(%var_4358) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], Tensor[(351), float32]) */
}

def @func_2205() -> (Tensor[(10, 9, 14), float32],) {
  @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_4903() -> (Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) {
  %114 = fn () -> (Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) {
    %106 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %107 = %106.1;
    %108 = cast(%107, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %109 = reshape(%108, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
    %110 = @func_2963(%109) /* ty=(Tensor[(10, 9, 14), bool],) */;
    %111 = @func_4451() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
    %112 = %110.0;
    %113 = %111.4;
    (%107, %112, %113)
  };
  %114() /* ty=(Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) */
}

def @func_2248(%var_2246: Tensor[(4, 1, 5), uint64], %var_2247: Tensor[(4, 4, 5), uint64]) -> (Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) {
  %122 = fn (%var_2229: Tensor[(4, 1, 5), uint64], %var_2230: Tensor[(4, 4, 5), uint64]) -> (Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) {
    %115 = cast(%var_2229, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
    %116 = cast(%var_2230, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
    %117 = @func_2041() /* ty=(Tensor[(10, 9, 14), float64],) */;
    %118 = @func_2054() /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) */;
    %119 = less(%115, %116) /* ty=Tensor[(4, 4, 5), bool] */;
    %120 = %117.0;
    %121 = %118.0;
    (%119, %120, %121)
  };
  %122(%var_2246, %var_2247) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) */
}

def @func_467() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_3977() -> Tensor[(10, 9, 14), float32] {
  %123 = @func_3520() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) */;
  %123.0
}

def @func_4186() -> (Tensor[(10, 9, 14), float32],) {
  @func_4184() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_876() -> Tensor[(10, 9, 14), float32] {
  %124 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %124.0
}

def @func_4452() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
  %133 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
    %125 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %126 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
    %127 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
    %128 = %125.3;
    %129 = %126.2;
    %130 = %127.0;
    %131 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
    %132 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
    (%128, %129, %130, %131, %132)
  };
  %133() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */
}

def @func_2572() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
  %134 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %135 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %136 = %134.1;
  (%135, %136)
}

def @func_2850() -> Tensor[(12, 3, 8), float32] {
  %138 = fn () -> Tensor[(12, 3, 8), float32] {
    %137 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
    %137.3
  };
  %138() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_6517(%var_6516: Tensor[(2025), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(135), float64], Tensor[(2025), float64], Tensor[(32), float32], Tensor[(15, 15, 9), float64]) {
  %151 = fn (%var_6499: Tensor[(2025), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(135), float64], Tensor[(2025), float64], Tensor[(32), float32], Tensor[(15, 15, 9), float64]) {
    %139 = @func_5564() /* ty=(Tensor[(10, 9, 14), float64],) */;
    %140 = cast(meta[relay.Constant][2] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %141 = cast(%var_6499, dtype="float64") /* ty=Tensor[(2025), float64] */;
    %142 = cast(meta[relay.Constant][3] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %143 = reshape(%140, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), float64] */;
    %144 = reshape(%141, newshape=[15, 15, 9]) /* ty=Tensor[(15, 15, 9), float64] */;
    %145 = reshape(%142, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %146 = @func_1436(%143, %144, %145) /* ty=(Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) */;
    %147 = %146.0;
    %148 = cast(%147, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
    %149 = %139.0;
    %150 = acos(%148) /* ty=Tensor[(15, 15, 9), float64] */;
    (%149, meta[relay.Constant][2] /* ty=Tensor[(135), float64] */, %var_6499, meta[relay.Constant][3] /* ty=Tensor[(32), float32] */, %150)
  };
  %151(%var_6516) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(135), float64], Tensor[(2025), float64], Tensor[(32), float32], Tensor[(15, 15, 9), float64]) */
}

def @func_1289() -> (Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) {
  %152 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %153 = %152.1;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %155 = cast(%153, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %156 = cast(%153, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %157 = reshape(%154, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %158 = reshape(%155, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %159 = reshape(%156, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %160 = @func_169(%157, %158, %159) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %161 = cast(%153, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %162 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %163 = %160.1;
  %164 = erf(%161) /* ty=Tensor[(1260), float32] */;
  %165 = %162.1;
  (%163, %164, %165)
}

def @func_830(%var_816: Tensor[(2, 6, 11), float64], %var_825: Tensor[(126), float32]) -> (Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) {
  %166 = cast(%var_816, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %167 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %168 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %169 = cast(%var_825, dtype="float32") /* ty=Tensor[(126), float32] */;
  %170 = reshape(%169, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), float32] */;
  %171 = @func_689(%170) /* ty=(Tensor[(14, ?, 9), bool],) */;
  %172 = atanh(%166) /* ty=Tensor[(2, 6, 11), float64] */;
  %173 = %167.1;
  %174 = %168.1;
  %175 = %171.0;
  (%172, %173, %174, %175, %var_825)
}

def @func_5507(%var_5506: Tensor[(4, 14, 10), float32]) -> (Tensor[(4, 14, 10), int16],) {
  %182 = fn (%var_5465: Tensor[(4, 14, 10), float32]) -> (Tensor[(4, 14, 10), int16],) {
    %176 = @func_2356() /* ty=Tensor[(4, 14, 10), float32] */;
    %177 = cast(%var_5465, dtype="int16") /* ty=Tensor[(4, 14, 10), int16] */;
    %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%176, dtype="int16") /* ty=Tensor[(4, 14, 10), int16] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %181 = add(%179, %180) /* ty=Tensor[(4, 14, 10), int16] */;
    (%181,)
  };
  %182(%var_5506) /* ty=(Tensor[(4, 14, 10), int16],) */
}

def @func_910() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) {
  %194 = fn () -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) {
    %183 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %184 = %183.3;
    %185 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 14, 10), bool] */, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
    %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %187 = cast(%184, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
    %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %189 = cast(%184, dtype="float32") /* ty=Tensor[(4, 14, 10), float32] */;
    %190 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
    %191 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
    %192 = minimum(%187, %188) /* ty=Tensor[(4, 14, 10), float32] */;
    %193 = acosh(%189) /* ty=Tensor[(4, 14, 10), float32] */;
    (%190, %191, %192, %193)
  };
  %194() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */
}

def @func_6060() -> Tensor[(2, 1, 16), float64] {
  %196 = fn () -> Tensor[(2, 1, 16), float64] {
    %195 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
    erf(%195) /* ty=Tensor[(2, 1, 16), float64] */
  };
  %196() /* ty=Tensor[(2, 1, 16), float64] */
}

def @func_5258(%var_5256: Tensor[(5, 12, 3), float64], %var_5257: Tensor[(117, 3), int8]) -> (Tensor[(10, 9, 14), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(117, 3), int8], Tensor[(5, 12, 3), float32], Tensor[(10, 9, 14), float64]) {
  @func_5254(%var_5256, %var_5257) /* ty=(Tensor[(10, 9, 14), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(117, 3), int8], Tensor[(5, 12, 3), float32], Tensor[(10, 9, 14), float64]) */
}

def @func_1166(%var_1164: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) {
  @func_1163(%var_1164) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) */
}

def @func_5082(%var_5004: Tensor[(10, 6, 5), float64], %var_5037: Tensor[(10, 9, 14), float32], %var_5048: Tensor[(210), uint64], %var_5071: Tensor[(4, 14, 10), float32]) -> (Tensor[(10, 6, 5), int8], Tensor[(10, 9, 14), bool], Tensor[(10, 7, 3), float32], Tensor[(210), uint64], Tensor[(1260), float32], Tensor[(4, 14, 10), bool]) {
  %197 = @func_2750() /* ty=(Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) */;
  %198 = %197.2;
  %199 = cast(%var_5004, dtype="int8") /* ty=Tensor[(10, 6, 5), int8] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="int8") /* ty=Tensor[(10, 6, 5), int8] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %203 = @func_3489() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %204 = %203.0;
  %205 = cast(%var_5037, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = cast(%var_5048, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %210 = reshape(%209, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), uint64] */;
  %211 = @func_1331(%210) /* ty=(Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) */;
  %212 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %213 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %214 = %213.3;
  %215 = cast(%var_5071, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = logical_xor(%201, %202) /* ty=Tensor[(10, 6, 5), int8] */;
  %220 = equal(%207, %208) /* ty=Tensor[(10, 9, 14), bool] */;
  %221 = %211.1;
  %222 = %212.1;
  %223 = greater_equal(%217, %218) /* ty=Tensor[(4, 14, 10), bool] */;
  (%219, %220, %221, %var_5048, %222, %223)
}

def @func_6661() -> (Tensor[(10, 9, 14), float32],) {
  %224 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %225 = %224.4;
  (%225,)
}

def @func_6359(%var_6358: Tensor[(13, 12, 8), float32]) -> (Tensor[(13, 12, 8), float32],) {
  %228 = fn (%var_6354: Tensor[(13, 12, 8), float32]) -> (Tensor[(13, 12, 8), float32],) {
    %226 = cast(%var_6354, dtype="float32") /* ty=Tensor[(13, 12, 8), float32] */;
    %227 = acosh(%226) /* ty=Tensor[(13, 12, 8), float32] */;
    (%227,)
  };
  %228(%var_6358) /* ty=(Tensor[(13, 12, 8), float32],) */
}

def @func_3192(%var_3190: Tensor[(540), float32]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 5, 9), float64], Tensor[(4, 14, 10), bool], Tensor[(175), float64], Tensor[(10, 9, 14), uint64]) {
  @func_3189(%var_3190) /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 5, 9), float64], Tensor[(4, 14, 10), bool], Tensor[(175), float64], Tensor[(10, 9, 14), uint64]) */
}

def @func_6247(%var_6246: Tensor[(132), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(10, 9, 14), int8], Tensor[(132), uint16], Tensor[(300), float32]) {
  %255 = fn (%var_6220: Tensor[(132), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(10, 9, 14), int8], Tensor[(132), uint16], Tensor[(300), float32]) {
    %229 = @func_1990() /* ty=(Tensor[(10, 9, 14), float32],) */;
    %230 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
    %231 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %232 = reshape(%230, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float64] */;
    %233 = reshape(%231, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %234 = @func_830(%232, %233) /* ty=(Tensor[(2, 6, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32]) */;
    %235 = cast(%var_6220, dtype="uint16") /* ty=Tensor[(132), uint16] */;
    %236 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(132), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %237 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), float64] */, dtype="uint16") /* ty=Tensor[(132), uint16] */;
    %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %240 = reshape(%239, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %241 = @func_1472(%240) /* ty=Tensor[(10, 6, 5), float64] */;
    %242 = cast(%241, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %243 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(300), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %244 = cast(meta[relay.Constant][8] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), float64] */;
    %246 = subtract(%244, %245) /* ty=Tensor[(300), float64] */;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(300), float64] */;
    %248 = sinh(%247) /* ty=Tensor[(300), float64] */;
    %249 = cast(%248, dtype="float32") /* ty=Tensor[(300), float32] */;
    %250 = %229.0;
    %251 = %234.3;
    %252 = @func_3407() /* ty=Tensor[(10, 9, 14), int8] */;
    %253 = multiply(%237, %238) /* ty=Tensor[(132), uint16] */;
    %254 = tan(%249) /* ty=Tensor[(300), float32] */;
    (%250, %251, meta[relay.Constant][7] /* ty=Tensor[(126), float32] */, %252, %253, %254)
  };
  %255(%var_6246) /* ty=(Tensor[(10, 9, 14), float32], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(10, 9, 14), int8], Tensor[(132), uint16], Tensor[(300), float32]) */
}

def @func_1414(%var_1390: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) {
  %256 = cast(meta[relay.Constant][9] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %257 = cast(%var_1390, dtype="int8") /* ty=Tensor[(351), int8] */;
  %258 = reshape(%256, newshape=[]) /* ty=int8 */;
  %259 = reshape(%257, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %260 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %261 = @func_513(%258, %259) /* ty=Tensor[(13, 9, 3), int8] */;
  (%260, %261, meta[relay.Constant][9] /* ty=int8 */, %var_1390)
}

def @func_5705(%var_5704: Tensor[(1260), float32]) -> (Tensor[(7, 14, 16), bool], Tensor[(7, 14, 16), uint32], Tensor[(10, 9, 14), int64], Tensor[(1260), float32]) {
  %276 = fn (%var_5701: Tensor[(1260), float32]) -> (Tensor[(7, 14, 16), bool], Tensor[(7, 14, 16), uint32], Tensor[(10, 9, 14), int64], Tensor[(1260), float32]) {
    %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %263 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
    %267 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %268 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 14, 16), uint64] */, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %270 = cast(%var_5701, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %271 = reshape(%270, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %272 = @func_2896(%271) /* ty=(Tensor[(10, 9, 14), int64],) */;
    %273 = greater(%264, %265) /* ty=Tensor[(7, 14, 16), bool] */;
    %274 = multiply(%268, %269) /* ty=Tensor[(7, 14, 16), uint32] */;
    %275 = %272.0;
    (%273, %274, %275, %var_5701)
  };
  %276(%var_5704) /* ty=(Tensor[(7, 14, 16), bool], Tensor[(7, 14, 16), uint32], Tensor[(10, 9, 14), int64], Tensor[(1260), float32]) */
}

def @func_2972() -> Tensor[(10, 9, 14), float64] {
  @func_1223() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_2966(%var_2964: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), bool],) {
  @func_2963(%var_2964) /* ty=(Tensor[(10, 9, 14), bool],) */
}

def @func_4184() -> (Tensor[(10, 9, 14), float32],) {
  %277 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %278 = %277.0;
  (%278,)
}

def @func_1738(%var_1705: Tensor[(300), float64], %var_1731: Tensor[(1, 351), int8]) -> (Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) {
  %279 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %280 = cast(%var_1705, dtype="float64") /* ty=Tensor[(300), float64] */;
  %281 = reshape(%280, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %282 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %283 = cast(%var_1731, dtype="int8") /* ty=Tensor[(1, 351), int8] */;
  %284 = reshape(%282, newshape=[]) /* ty=int8 */;
  %285 = reshape(%283, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %286 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
  %287 = %279.3;
  %288 = @func_1472(%281) /* ty=Tensor[(10, 6, 5), float64] */;
  %289 = @func_513(%284, %285) /* ty=Tensor[(13, 9, 3), int8] */;
  %290 = %286.0;
  (%287, %288, %var_1705, %289, meta[relay.Constant][13] /* ty=int8 */, %var_1731, %290)
}

def @func_1199(%var_1198: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
  %293 = fn (%var_1190: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
    %291 = cast(%var_1190, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
    %292 = sinh(%291) /* ty=Tensor[(1, 2, 16), float32] */;
    (%292,)
  };
  %293(%var_1198) /* ty=(Tensor[(1, 2, 16), float32],) */
}

def @func_3045() -> Tensor[(10, 9, 14), float64] {
  %294 = fn () -> Tensor[(10, 9, 14), float64] {
    @func_2972() /* ty=Tensor[(10, 9, 14), float64] */
  };
  %294() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_3920(%var_3899: Tensor[(13, 15, 6), float32], %var_3916: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 15, 6), int32]) {
  %295 = cast(%var_3899, dtype="float32") /* ty=Tensor[(13, 15, 6), float32] */;
  %296 = cast(%var_3916, dtype="int32") /* ty=Tensor[(13, 15, 6), int32] */;
  %297 = shape_of(%var_3899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_3899, dtype="int32") /* ty=Tensor[(13, 15, 6), int32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %300 = asin(%295) /* ty=Tensor[(13, 15, 6), float32] */;
  %301 = maximum(%298, %299) /* ty=Tensor[(13, 15, 6), int32] */;
  (%300, %301)
}

def @func_4158() -> (Tensor[(8, 4, 8), int8],) {
  %307 = fn () -> (Tensor[(8, 4, 8), int8],) {
    %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 8), int8] */;
    %303 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 8), int8] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %306 = minimum(%304, %305) /* ty=Tensor[(8, 4, 8), int8] */;
    (%306,)
  };
  %307() /* ty=(Tensor[(8, 4, 8), int8],) */
}

def @func_1472(%var_1467: Tensor[(10, 6, 5), float64]) -> Tensor[(10, 6, 5), float64] {
  %308 = cast(%var_1467, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %309 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(10, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%310, %311) /* ty=Tensor[(10, 6, 5), float64] */
}

def @func_2407(%var_2405: Tensor[(12, 5, 9), float32], %var_2406: Tensor[(1260), float32]) -> (Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) {
  %321 = fn (%var_2359: Tensor[(12, 5, 9), float32], %var_2383: Tensor[(1260), float32]) -> (Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) {
    %312 = cast(%var_2359, dtype="float32") /* ty=Tensor[(12, 5, 9), float32] */;
    %313 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
    %314 = %313.1;
    %315 = cast(%var_2383, dtype="uint16") /* ty=Tensor[(1260), uint16] */;
    %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(1), int32] */;
    %317 = cast(%314, dtype="uint16") /* ty=Tensor[(1260), uint16] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %319 = sigmoid(%312) /* ty=Tensor[(12, 5, 9), float32] */;
    %320 = logical_xor(%317, %318) /* ty=Tensor[(1260), uint16] */;
    (%319, %320)
  };
  %321(%var_2405, %var_2406) /* ty=(Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) */
}

def @func_4952(%var_4950: Tensor[(9, 15), float32]) -> Tensor[(9, 15), float32] {
  @func_4949(%var_4950) /* ty=Tensor[(9, 15), float32] */
}

def @func_317(%var_316: Tensor[(16, 5, 12), float32]) -> Tensor[(16, 5, 12), float32] {
  %323 = fn (%var_303: Tensor[(16, 5, 12), float32]) -> Tensor[(16, 5, 12), float32] {
    %322 = cast(%var_303, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
    cos(%322) /* ty=Tensor[(16, 5, 12), float32] */
  };
  %323(%var_316) /* ty=Tensor[(16, 5, 12), float32] */
}

def @func_2106(%var_2105: Tensor[(16, 1, 16), float32]) -> (Tensor[(16, 1, 16), float32],) {
  %326 = fn (%var_2086: Tensor[(16, 1, 16), float32]) -> (Tensor[(16, 1, 16), float32],) {
    %324 = cast(%var_2086, dtype="float32") /* ty=Tensor[(16, 1, 16), float32] */;
    %325 = sigmoid(%324) /* ty=Tensor[(16, 1, 16), float32] */;
    (%325,)
  };
  %326(%var_2105) /* ty=(Tensor[(16, 1, 16), float32],) */
}

def @func_4137() -> Tensor[(9, 7, 9), bool] {
  %327 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %327.2
}

def @func_2974() -> Tensor[(10, 9, 14), float64] {
  @func_2972() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_2455(%var_2451: Tensor[(1, 351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 6, 5), float64], Tensor[(300, 1), float64], Tensor[(10, 9, 14), uint32], Tensor[(10, 6, 5), float64], Tensor[(1, 351), int8]) {
  %328 = cast(meta[relay.Constant][17] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %329 = reshape(%328, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %330 = @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */;
  %331 = @func_1472(%329) /* ty=Tensor[(10, 6, 5), float64] */;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %333 = cast(%var_2451, dtype="int8") /* ty=Tensor[(1, 351), int8] */;
  %334 = reshape(%332, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %335 = reshape(%333, newshape=[1, 351]) /* ty=Tensor[(1, 351), int8] */;
  %336 = @func_1738(%334, %335) /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) */;
  %337 = @func_1951() /* ty=Tensor[(10, 9, 14), float64] */;
  %338 = %330.0;
  %339 = %336.1;
  (%337, %331, meta[relay.Constant][17] /* ty=Tensor[(300, 1), float64] */, %338, %339, %var_2451)
}

def @func_610(%var_576: Tensor[(5, 7, 5), float64]) -> (Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) {
  %340 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %341 = shape_of(%var_576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_576, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %345 = divide(%342, %343) /* ty=Tensor[(5, 7, 5), float64] */;
  %346 = %344.3;
  (%345, %346)
}

def @func_2788(%var_2786: Tensor[(175), float64]) -> (Tensor[(10, 9, 14), uint32], Tensor[(4, 14, 10), bool], Tensor[(175), float64]) {
  @func_2785(%var_2786) /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(4, 14, 10), bool], Tensor[(175), float64]) */
}

def @func_5180(%var_5178: Tensor[(14, 7, 15), bool]) -> (Tensor[(14, 7, 15), bool], Tensor[(16, 16), float32], Tensor[(16, 1, 16), bool]) {
  @func_5177(%var_5178) /* ty=(Tensor[(14, 7, 15), bool], Tensor[(16, 16), float32], Tensor[(16, 1, 16), bool]) */
}

def @func_366() -> Tensor[(10, 9, 14), float64] {
  %348 = fn () -> Tensor[(10, 9, 14), float64] {
    %347 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %347.5
  };
  %348() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_4793() -> (Tensor[(4, 14, 10), float32],) {
  %350 = fn () -> (Tensor[(4, 14, 10), float32],) {
    %349 = @func_2356() /* ty=Tensor[(4, 14, 10), float32] */;
    (%349,)
  };
  %350() /* ty=(Tensor[(4, 14, 10), float32],) */
}

def @func_3848() -> (Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
  %351 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
  %352 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %353 = @func_3715() /* ty=Tensor[(10, 9, 14), float32] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %355 = reshape(%354, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %356 = @func_2963(%355) /* ty=(Tensor[(10, 9, 14), bool],) */;
  %357 = %351.0;
  %358 = %352.3;
  %359 = %356.0;
  (%357, %358, %353, %359)
}

def @func_4664() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %363 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
    %360 = @func_4184() /* ty=(Tensor[(10, 9, 14), float32],) */;
    %361 = %360.0;
    %362 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
    (%361, %362)
  };
  %363() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */
}

def @func_3490() -> (Tensor[(10, 9, 14), float32],) {
  %366 = fn () -> (Tensor[(10, 9, 14), float32],) {
    %364 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
    %365 = %364.0;
    (%365,)
  };
  %366() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_2817() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_4030() -> Tensor[(10, 9, 14), float64] {
  @func_2972() /* ty=Tensor[(10, 9, 14), float64] */
}

def @main() -> (Tensor[(10, 9, 14), float64],) {
  %367 = @func_5357() /* ty=Tensor[(10, 9, 14), float32] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %369 = atan(%368) /* ty=Tensor[(10, 9, 14), float64] */;
  (%369,)
}

def @func_5954() -> (Tensor[(10, 9, 14), float32],) {
  %370 = @func_3635() /* ty=Tensor[(10, 9, 14), float32] */;
  (%370,)
}

def @func_691(%var_690: Tensor[(14, 1, 9), float32]) -> (Tensor[(14, ?, 9), bool],) {
  %378 = fn (%var_680: Tensor[(14, 1, 9), float32]) -> (Tensor[(14, ?, 9), bool],) {
    %371 = cast(%var_680, dtype="float32") /* ty=Tensor[(14, 1, 9), float32] */;
    %372 = rsqrt(%371) /* ty=Tensor[(14, 1, 9), float32] */;
    %373 = cast(%var_680, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
    %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%372, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %377 = less_equal(%375, %376) /* ty=Tensor[(14, ?, 9), bool] */;
    (%377,)
  };
  %378(%var_690) /* ty=(Tensor[(14, ?, 9), bool],) */
}

def @func_1952() -> Tensor[(10, 9, 14), float64] {
  %382 = fn () -> Tensor[(10, 9, 14), float64] {
    %379 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %380 = %379.0;
    %381 = cast(%380, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
    log(%381) /* ty=Tensor[(10, 9, 14), float64] */
  };
  %382() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_5670(%var_5647: Tensor[(13, 3, 11), uint32]) -> Tensor[(13, 3, 11), uint32] {
  %383 = cast(%var_5647, dtype="uint32") /* ty=Tensor[(13, 3, 11), uint32] */;
  %384 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(13, 3, 11), uint32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%385, %386) /* ty=Tensor[(13, 3, 11), uint32] */
}

def @func_1544() -> (Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) {
  %387 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %388 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
  %389 = %387.2;
  %390 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %391 = %388.3;
  (%389, %390, %391)
}

def @func_2429() -> Tensor[(10, 9, 14), float32] {
  %392 = fn () -> Tensor[(10, 9, 14), float32] {
    @func_876() /* ty=Tensor[(10, 9, 14), float32] */
  };
  %392() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_6330() -> (Tensor[(5, 9, 12), uint32],) {
  %403 = fn () -> (Tensor[(5, 9, 12), uint32],) {
    %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %394 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %397 = logical_and(%395, %396) /* ty=Tensor[(5, 9, 12), bool] */;
    %398 = cast(%397, dtype="uint32") /* ty=Tensor[(5, 9, 12), uint32] */;
    %399 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 9, 12), bool] */, dtype="uint32") /* ty=Tensor[(5, 9, 12), uint32] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %402 = bitwise_and(%400, %401) /* ty=Tensor[(5, 9, 12), uint32] */;
    (%402,)
  };
  %403() /* ty=(Tensor[(5, 9, 12), uint32],) */
}

def @func_3359() -> Tensor[(12, 3, 8), float32] {
  @func_2849() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_1632() -> (Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %419 = fn () -> (Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
    %404 = @func_1083() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
    %405 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
    %406 = asin(%405) /* ty=Tensor[(14, 3, 11), float32] */;
    %407 = cast(%406, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
    %408 = exp(%407) /* ty=Tensor[(14, 3, 11), float32] */;
    %409 = cast(%408, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
    %410 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%406, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %413 = @func_1558() /* ty=(Tensor[(10, 9, 14), float32],) */;
    %414 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
    %415 = %404.1;
    %416 = divide(%411, %412) /* ty=Tensor[(14, 3, 11), float64] */;
    %417 = %413.0;
    %418 = %414.1;
    (%415, %416, %417, %418)
  };
  %419() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_5358() -> Tensor[(10, 9, 14), float32] {
  %420 = fn () -> Tensor[(10, 9, 14), float32] {
    @func_2428() /* ty=Tensor[(10, 9, 14), float32] */
  };
  %420() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_3613(%var_3604: Tensor[(12, 3, 8), float32]) -> Tensor[(12, 3, 8), float64] {
  %421 = @func_2849() /* ty=Tensor[(12, 3, 8), float32] */;
  %422 = cast(%var_3604, dtype="float64") /* ty=Tensor[(12, 3, 8), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(12, 3, 8), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%424, %425) /* ty=Tensor[(12, 3, 8), float64] */
}

def @func_1546() -> (Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) {
  @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */
}

def @func_1887(%var_1840: Tensor[(10, 96), float32], %var_1870: Tensor[(351), int8]) -> (Tensor[(14, 3, 11), float64], Tensor[(16, 5, 12), float32], Tensor[(10, 96), float32], Tensor[(4, 14, 10), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8], Tensor[(4, 14, 10), float64]) {
  %426 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %427 = cast(%var_1840, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %428 = reshape(%427, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float32] */;
  %429 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %430 = %429.2;
  %431 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %432 = %431.3;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %434 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%430, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = cast(meta[relay.Constant][23] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %438 = reshape(%437, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), float32] */;
  %439 = @func_689(%438) /* ty=(Tensor[(14, ?, 9), bool],) */;
  %440 = cast(meta[relay.Constant][24] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %441 = cast(%var_1870, dtype="int8") /* ty=Tensor[(351), int8] */;
  %442 = reshape(%440, newshape=[]) /* ty=int8 */;
  %443 = reshape(%441, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %444 = cast(%430, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %445 = %426.1;
  %446 = @func_315(%428) /* ty=Tensor[(16, 5, 12), float32] */;
  %447 = mod(%435, %436) /* ty=Tensor[(4, 14, 10), float64] */;
  %448 = %439.0;
  %449 = @func_513(%442, %443) /* ty=Tensor[(13, 9, 3), int8] */;
  %450 = log(%444) /* ty=Tensor[(4, 14, 10), float64] */;
  (%445, %446, %var_1840, %447, %448, meta[relay.Constant][23] /* ty=Tensor[(126), float32] */, %449, meta[relay.Constant][24] /* ty=int8 */, %var_1870, %450)
}

def @func_6442() -> (Tensor[(10, 9, 14), float32],) {
  @func_6440() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_1291() -> (Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) {
  @func_1289() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(1260), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_1475(%var_1473: Tensor[(10, 6, 5), float64]) -> Tensor[(10, 6, 5), float64] {
  @func_1472(%var_1473) /* ty=Tensor[(10, 6, 5), float64] */
}

def @func_3748(%var_3728: Tensor[(2, 12, 10), float64], %var_3736: Tensor[(351, 1), int8]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351, 1), int8], Tensor[(10, 9, 14), float32]) {
  %451 = cast(%var_3728, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %452 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %453 = cast(%var_3736, dtype="int8") /* ty=Tensor[(351, 1), int8] */;
  %454 = reshape(%452, newshape=[]) /* ty=int8 */;
  %455 = reshape(%453, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %456 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %457 = sin(%451) /* ty=Tensor[(2, 12, 10), float64] */;
  %458 = @func_513(%454, %455) /* ty=Tensor[(13, 9, 3), int8] */;
  %459 = %456.1;
  (%457, %458, meta[relay.Constant][25] /* ty=int8 */, %var_3736, %459)
}

def @func_2574() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) {
  @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */
}

def @func_5566() -> (Tensor[(10, 9, 14), float64],) {
  @func_5564() /* ty=(Tensor[(10, 9, 14), float64],) */
}

def @func_2458(%var_2456: Tensor[(1, 351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 6, 5), float64], Tensor[(300, 1), float64], Tensor[(10, 9, 14), uint32], Tensor[(10, 6, 5), float64], Tensor[(1, 351), int8]) {
  @func_2455(%var_2456) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 6, 5), float64], Tensor[(300, 1), float64], Tensor[(10, 9, 14), uint32], Tensor[(10, 6, 5), float64], Tensor[(1, 351), int8]) */
}

def @func_571(%var_570: Tensor[(10, 9, 14), float64]) -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) {
  %469 = fn (%var_563: Tensor[(10, 9, 14), float64]) -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) {
    %460 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %461 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %462 = %461.5;
    %463 = cast(%var_563, dtype="uint8") /* ty=Tensor[(10, 9, 14), uint8] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%462, dtype="uint8") /* ty=Tensor[(10, 9, 14), uint8] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %467 = %460.4;
    %468 = bitwise_or(%465, %466) /* ty=Tensor[(10, 9, 14), uint8] */;
    (%467, %468)
  };
  %469(%var_570) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) */
}

def @func_2055() -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) {
  %476 = fn () -> (Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) {
    %470 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %471 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1260), float32] */, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
    %472 = reshape(%471, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %473 = @func_2022(%472) /* ty=(Tensor[(10, 9, 14), uint64],) */;
    %474 = %470.4;
    %475 = %473.0;
    (%474, %475, meta[relay.Constant][26] /* ty=Tensor[(1, 1260), float32] */)
  };
  %476() /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) */
}

def @func_1441(%var_1438: Tensor[(1, 15, 9), float64], %var_1439: Tensor[(15, 15, 9), float64], %var_1440: Tensor[(32), float32]) -> (Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) {
  @func_1436(%var_1438, %var_1439, %var_1440) /* ty=(Tensor[(15, 15, 9), float64], Tensor[(1, 2, 16), float32], Tensor[(32), float32]) */
}

def @func_4299(%var_4298: Tensor[(15, 9, 1), float64]) -> (Tensor[(15, 9, 11), bool], Tensor[(15, 9, 1), float64], Tensor[(9, 7, 9), bool], Tensor[(9, 140), float64]) {
  %486 = fn (%var_4268: Tensor[(15, 9, 1), float64]) -> (Tensor[(15, 9, 11), bool], Tensor[(15, 9, 1), float64], Tensor[(9, 7, 9), bool], Tensor[(9, 140), float64]) {
    %477 = cast(%var_4268, dtype="bool") /* ty=Tensor[(15, 9, 1), bool] */;
    %478 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 9, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 9, 11), bool] */;
    %479 = cast(%var_4268, dtype="float64") /* ty=Tensor[(15, 9, 1), float64] */;
    %480 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 140), float64] */, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %481 = reshape(%480, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
    %482 = @func_569(%481) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) */;
    %483 = equal(%477, %478) /* ty=Tensor[(15, 9, 11), bool] */;
    %484 = exp(%479) /* ty=Tensor[(15, 9, 1), float64] */;
    %485 = %482.0;
    (%483, %484, %485, meta[relay.Constant][28] /* ty=Tensor[(9, 140), float64] */)
  };
  %486(%var_4298) /* ty=(Tensor[(15, 9, 11), bool], Tensor[(15, 9, 1), float64], Tensor[(9, 7, 9), bool], Tensor[(9, 140), float64]) */
}

def @func_1559() -> (Tensor[(10, 9, 14), float32],) {
  %489 = fn () -> (Tensor[(10, 9, 14), float32],) {
    %487 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
    %488 = %487.1;
    (%488,)
  };
  %489() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_2024(%var_2023: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), uint64],) {
  %497 = fn (%var_2009: Tensor[(10, 9, 14), float32]) -> (Tensor[(10, 9, 14), uint64],) {
    %490 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %491 = %490.1;
    %492 = cast(%var_2009, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
    %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(%491, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %496 = maximum(%494, %495) /* ty=Tensor[(10, 9, 14), uint64] */;
    (%496,)
  };
  %497(%var_2023) /* ty=(Tensor[(10, 9, 14), uint64],) */
}

def @func_2325(%var_2322: Tensor[(20), uint64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(20), uint64], Tensor[(80), uint64]) {
  %498 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %499 = cast(%var_2322, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %501 = reshape(%499, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), uint64] */;
  %502 = reshape(%500, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint64] */;
  %503 = @func_2245(%501, %502) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(10, 9, 14), float64], Tensor[(9, 7, 9), bool]) */;
  %504 = %498.1;
  %505 = %503.1;
  (%504, %505, %var_2322, meta[relay.Constant][29] /* ty=Tensor[(80), uint64] */)
}

def @func_5088(%var_5084: Tensor[(10, 6, 5), float64], %var_5085: Tensor[(10, 9, 14), float32], %var_5086: Tensor[(210), uint64], %var_5087: Tensor[(4, 14, 10), float32]) -> (Tensor[(10, 6, 5), int8], Tensor[(10, 9, 14), bool], Tensor[(10, 7, 3), float32], Tensor[(210), uint64], Tensor[(1260), float32], Tensor[(4, 14, 10), bool]) {
  @func_5082(%var_5084, %var_5085, %var_5086, %var_5087) /* ty=(Tensor[(10, 6, 5), int8], Tensor[(10, 9, 14), bool], Tensor[(10, 7, 3), float32], Tensor[(210), uint64], Tensor[(1260), float32], Tensor[(4, 14, 10), bool]) */
}

def @func_3461() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 7, 3), float32], Tensor[(210), uint64]) {
  %506 = cast(meta[relay.Constant][30] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %507 = reshape(%506, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), uint64] */;
  %508 = @func_1331(%507) /* ty=(Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) */;
  %509 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
  %510 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  %511 = %508.1;
  (%509, %510, %511, meta[relay.Constant][30] /* ty=Tensor[(210), uint64] */)
}

def @func_6079(%var_6078: Tensor[(14, 16), float64]) -> (Tensor[(14, 16), float64],) {
  %514 = fn (%var_6074: Tensor[(14, 16), float64]) -> (Tensor[(14, 16), float64],) {
    %512 = cast(%var_6074, dtype="float64") /* ty=Tensor[(14, 16), float64] */;
    %513 = log2(%512) /* ty=Tensor[(14, 16), float64] */;
    (%513,)
  };
  %514(%var_6078) /* ty=(Tensor[(14, 16), float64],) */
}

def @func_6770() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
  %523 = fn () -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
    %515 = @func_5285() /* ty=(Tensor[(10, 9, 14), float32],) */;
    %516 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
    %518 = reshape(%517, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
    %519 = @func_2963(%518) /* ty=(Tensor[(10, 9, 14), bool],) */;
    %520 = @func_1951() /* ty=Tensor[(10, 9, 14), float64] */;
    %521 = %515.0;
    %522 = %519.0;
    (%520, %521, %516, %522)
  };
  %523() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) */
}

def @func_3850() -> (Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) {
  @func_3848() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) */
}

def @func_56(%var_54: Tensor[(9, 7, 9), int64], %var_55: Tensor[(9, 7, 9), int64]) -> Tensor[(9, 7, 9), bool] {
  @func_52(%var_54, %var_55) /* ty=Tensor[(9, 7, 9), bool] */
}

def @func_1331(%var_1293: Tensor[(10, 7, 3), uint64]) -> (Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) {
  %524 = cast(meta[relay.Constant][31] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %525 = cast(%var_1293, dtype="uint64") /* ty=Tensor[(10, 7, 3), uint64] */;
  %526 = cast(%var_1293, dtype="float32") /* ty=Tensor[(10, 7, 3), float32] */;
  %527 = maximum(%524, %525) /* ty=Tensor[(10, 7, 3), uint64] */;
  %528 = rsqrt(%526) /* ty=Tensor[(10, 7, 3), float32] */;
  (%527, %528)
}

def @func_3408() -> Tensor[(10, 9, 14), int8] {
  %530 = fn () -> Tensor[(10, 9, 14), int8] {
    %529 = @func_3279() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */;
    %529.0
  };
  %530() /* ty=Tensor[(10, 9, 14), int8] */
}

def @func_3752(%var_3750: Tensor[(2, 12, 10), float64], %var_3751: Tensor[(351, 1), int8]) -> (Tensor[(2, 12, 10), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351, 1), int8], Tensor[(10, 9, 14), float32]) {
  @func_3748(%var_3750, %var_3751) /* ty=(Tensor[(2, 12, 10), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351, 1), int8], Tensor[(10, 9, 14), float32]) */
}

def @func_5286() -> (Tensor[(10, 9, 14), float32],) {
  %533 = fn () -> (Tensor[(10, 9, 14), float32],) {
    %531 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %532 = %531.1;
    (%532,)
  };
  %533() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_3637() -> Tensor[(10, 9, 14), float32] {
  @func_3635() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_3979() -> Tensor[(10, 9, 14), float32] {
  @func_3977() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_3463() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 7, 3), float32], Tensor[(210), uint64]) {
  @func_3461() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 7, 3), float32], Tensor[(210), uint64]) */
}

def @func_6663() -> (Tensor[(10, 9, 14), float32],) {
  @func_6661() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_4542(%var_4541: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) {
  %548 = fn (%var_4492: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) {
    %534 = cast(%var_4492, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
    %535 = cast(%var_4492, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
    %536 = acosh(%535) /* ty=Tensor[(12, 7, 11), float64] */;
    %537 = cast(%536, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
    %538 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%var_4492, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %541 = add(%539, %540) /* ty=Tensor[(12, 7, 11), float32] */;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
    %543 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%var_4492, dtype="float32") /* ty=Tensor[(12, 7, 11), float32] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %546 = acos(%534) /* ty=Tensor[(12, 7, 11), float64] */;
    %547 = divide(%544, %545) /* ty=Tensor[(12, 7, 11), float32] */;
    (%546, %547)
  };
  %548(%var_4541) /* ty=(Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) */
}

def @func_5564() -> (Tensor[(10, 9, 14), float64],) {
  %549 = @func_4030() /* ty=Tensor[(10, 9, 14), float64] */;
  (%549,)
}

def @func_1992() -> (Tensor[(10, 9, 14), float32],) {
  @func_1990() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_3189(%var_3115: Tensor[(540), float32]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 5, 9), float64], Tensor[(4, 14, 10), bool], Tensor[(175), float64], Tensor[(10, 9, 14), uint64]) {
  %550 = @func_3051() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %551 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %552 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %553 = cast(%var_3115, dtype="float32") /* ty=Tensor[(540), float32] */;
  %554 = %550.0;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %556 = reshape(%553, newshape=[12, 5, 9]) /* ty=Tensor[(12, 5, 9), float32] */;
  %557 = reshape(%555, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %558 = @func_2404(%556, %557) /* ty=(Tensor[(12, 5, 9), float32], Tensor[(1260), uint16]) */;
  %559 = %558.0;
  %560 = cast(%var_3115, dtype="float64") /* ty=Tensor[(540), float64] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="float64") /* ty=Tensor[(12, 5, 9), float64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %564 = cast(meta[relay.Constant][32] /* ty=Tensor[(175), float64] */, dtype="float64") /* ty=Tensor[(175), float64] */;
  %565 = reshape(%564, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float64] */;
  %566 = @func_610(%565) /* ty=(Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) */;
  %567 = cast(%554, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %568 = reshape(%567, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %569 = @func_2022(%568) /* ty=(Tensor[(10, 9, 14), uint64],) */;
  %570 = %551.1;
  %571 = %552.1;
  %572 = @func_2972() /* ty=Tensor[(10, 9, 14), float64] */;
  %573 = power(%562, %563) /* ty=Tensor[(12, 5, 9), float64] */;
  %574 = %566.1;
  %575 = %569.0;
  (%554, %570, %571, %572, %573, %574, meta[relay.Constant][32] /* ty=Tensor[(175), float64] */, %575)
}

def @func_5956() -> (Tensor[(10, 9, 14), float32],) {
  @func_5954() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_6049() -> (Tensor[(4, 15, 2), float32], Tensor[(10, 9, 14), float32], Tensor[(1260), float32]) {
  @func_6047() /* ty=(Tensor[(4, 15, 2), float32], Tensor[(10, 9, 14), float32], Tensor[(1260), float32]) */
}

def @func_1742(%var_1740: Tensor[(300), float64], %var_1741: Tensor[(1, 351), int8]) -> (Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) {
  @func_1738(%var_1740, %var_1741) /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(1, 351), int8], Tensor[(10, 9, 14), int8]) */
}

def @func_5617(%var_5615: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), uint32], Tensor[(351), int8], Tensor[(351), int8]) {
  @func_5614(%var_5615) /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(351), int8], Tensor[(351), int8]) */
}

def @func_6789() -> (Tensor[(10, 9, 14), float32],) {
  @func_6787() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_4780() -> (Tensor[(4, 14, 10), float32],) {
  %576 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
  %577 = %576.3;
  (%577,)
}

def @func_252() -> (Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) {
  %578 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %579 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %580 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %581 = reshape(%578, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %582 = reshape(%579, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %583 = reshape(%580, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %584 = @func_169(%581, %582, %583) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %585 = cast(meta[relay.Constant][34] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %586 = cast(meta[relay.Constant][34] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %587 = reshape(%585, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %588 = reshape(%586, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %590 = atanh(%589) /* ty=Tensor[(4, 14, 10), float64] */;
  %591 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 14, 10), uint32] */;
  %592 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 14, 10), uint32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %595 = logical_xor(%593, %594) /* ty=Tensor[(4, 14, 10), uint32] */;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %597 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%590, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = cast(meta[relay.Constant][34] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(567), int64] */, dtype="int64") /* ty=Tensor[(567), int64] */;
  %602 = reshape(%600, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %603 = reshape(%601, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), int64] */;
  %604 = @func_52(%602, %603) /* ty=Tensor[(9, 7, 9), bool] */;
  %605 = cast(meta[relay.Constant][34] /* ty=Tensor[(567), int64] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %610 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %611 = cast(meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %612 = reshape(%609, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %613 = reshape(%610, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %614 = reshape(%611, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %615 = @func_169(%612, %613, %614) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %616 = %584.0;
  %617 = @func_52(%587, %588) /* ty=Tensor[(9, 7, 9), bool] */;
  %618 = not_equal(%598, %599) /* ty=Tensor[(4, 14, 10), bool] */;
  %619 = greater(%607, %608) /* ty=Tensor[(9, 7, 9), bool] */;
  %620 = %615.0;
  (%616, meta[relay.Constant][33] /* ty=Tensor[(1260), float32] */, %617, %618, %619, %620)
}

def @func_1084() -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
  %635 = fn () -> (Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) {
    %621 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
    %622 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 14), float32] */, dtype="int8") /* ty=Tensor[(10, 9, 14), int8] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="int8") /* ty=Tensor[(10, 9, 14), int8] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %626 = cast(%621, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %627 = subtract(%624, %625) /* ty=Tensor[(10, 9, 14), int8] */;
    %628 = cast(%627, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %629 = cast(%627, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
    %630 = reshape(%626, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %631 = reshape(%628, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
    %632 = reshape(%629, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
    %633 = @func_169(%630, %631, %632) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
    %634 = %633.1;
    (%627, %634)
  };
  %635() /* ty=(Tensor[(10, 9, 14), int8], Tensor[(10, 9, 14), uint32]) */
}

def @func_3924(%var_3922: Tensor[(13, 15, 6), float32], %var_3923: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 15, 6), int32]) {
  @func_3920(%var_3922, %var_3923) /* ty=(Tensor[(13, 15, 6), float32], Tensor[(13, 15, 6), int32]) */
}

def @func_3521() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
  %641 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
    %636 = @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */;
    %637 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
    %638 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
    %639 = %636.0;
    %640 = %637.0;
    (%638, %639, %640)
  };
  %641() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) */
}

def @func_5108() -> Tensor[(10, 9, 14), bool] {
  %643 = fn () -> Tensor[(10, 9, 14), bool] {
    %642 = @func_4902() /* ty=(Tensor[(1260), float32], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), float32]) */;
    %642.1
  };
  %643() /* ty=Tensor[(10, 9, 14), bool] */
}

def @func_4032() -> Tensor[(10, 9, 14), float64] {
  @func_4030() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_1334(%var_1332: Tensor[(10, 7, 3), uint64]) -> (Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) {
  @func_1331(%var_1332) /* ty=(Tensor[(10, 7, 3), uint64], Tensor[(10, 7, 3), float32]) */
}

def @func_2815() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %644 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %645 = @func_2054() /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint64], Tensor[(1, 1260), float32]) */;
  %646 = %645.1;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %648 = %644.3;
  %649 = asin(%647) /* ty=Tensor[(10, 9, 14), float32] */;
  (%648, %649)
}

def @func_2751() -> (Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) {
  %666 = fn () -> (Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) {
    %650 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
    %651 = %650.0;
    %652 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 9, 14), float32] */, dtype="int16") /* ty=Tensor[(10, 9, 14), int16] */;
    %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%651, dtype="int16") /* ty=Tensor[(10, 9, 14), int16] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %657 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%651, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %660 = cast(meta[relay.Constant][39] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %661 = reshape(%660, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %662 = left_shift(%654, %655) /* ty=Tensor[(10, 9, 14), int16] */;
    %663 = divide(%658, %659) /* ty=Tensor[(10, 9, 14), float32] */;
    %664 = @func_1472(%661) /* ty=Tensor[(10, 6, 5), float64] */;
    %665 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
    (%662, %663, %664, meta[relay.Constant][39] /* ty=Tensor[(300), float64] */, %665)
  };
  %666() /* ty=(Tensor[(10, 9, 14), int16], Tensor[(10, 9, 14), float32], Tensor[(10, 6, 5), float64], Tensor[(300), float64], Tensor[(10, 9, 14), float32]) */
}

def @func_5873(%var_5804: Tensor[(462, 2), float64]) -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(12, 7, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32], Tensor[(462, 2), float32], Tensor[(462, 2), float64], Tensor[(10, 9, 14), float32]) {
  %667 = @func_3848() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), bool]) */;
  %668 = @func_2203() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %669 = cast(%var_5804, dtype="float64") /* ty=Tensor[(462, 2), float64] */;
  %670 = reshape(%669, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), float64] */;
  %671 = @func_4540(%670) /* ty=(Tensor[(12, 7, 11), float64], Tensor[(12, 7, 11), float32]) */;
  %672 = @func_4663() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %673 = @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */;
  %674 = cast(%var_5804, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %675 = cast(%var_5804, dtype="float64") /* ty=Tensor[(462, 2), float64] */;
  %676 = %667.2;
  %677 = %668.0;
  %678 = %671.0;
  %679 = %672.0;
  %680 = %673.0;
  %681 = sin(%674) /* ty=Tensor[(462, 2), float32] */;
  %682 = log2(%675) /* ty=Tensor[(462, 2), float64] */;
  %683 = @func_2428() /* ty=Tensor[(10, 9, 14), float32] */;
  (%676, %677, %678, %679, %680, %681, %682, %683)
}

def @func_878() -> Tensor[(10, 9, 14), float32] {
  @func_876() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_2203() -> (Tensor[(10, 9, 14), float32],) {
  %684 = @func_876() /* ty=Tensor[(10, 9, 14), float32] */;
  (%684,)
}

def @func_4782() -> (Tensor[(4, 14, 10), float32],) {
  @func_4780() /* ty=(Tensor[(4, 14, 10), float32],) */
}

def @func_5673(%var_5671: Tensor[(13, 3, 11), uint32]) -> Tensor[(13, 3, 11), uint32] {
  @func_5670(%var_5671) /* ty=Tensor[(13, 3, 11), uint32] */
}

def @func_254() -> (Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) {
  @func_252() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(1260), float32], Tensor[(9, 7, 9), bool], Tensor[(4, 14, 10), bool], Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), float64]) */
}

def @func_3361() -> Tensor[(12, 3, 8), float32] {
  @func_3359() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_613(%var_611: Tensor[(5, 7, 5), float64]) -> (Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) {
  @func_610(%var_611) /* ty=(Tensor[(5, 7, 5), float64], Tensor[(4, 14, 10), bool]) */
}

def @func_1891(%var_1889: Tensor[(10, 96), float32], %var_1890: Tensor[(351), int8]) -> (Tensor[(14, 3, 11), float64], Tensor[(16, 5, 12), float32], Tensor[(10, 96), float32], Tensor[(4, 14, 10), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8], Tensor[(4, 14, 10), float64]) {
  @func_1887(%var_1889, %var_1890) /* ty=(Tensor[(14, 3, 11), float64], Tensor[(16, 5, 12), float32], Tensor[(10, 96), float32], Tensor[(4, 14, 10), float64], Tensor[(14, ?, 9), bool], Tensor[(126), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8], Tensor[(4, 14, 10), float64]) */
}

def @func_5386() -> Tensor[(10, 9, 14), float64] {
  %686 = fn () -> Tensor[(10, 9, 14), float64] {
    %685 = @func_4728() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
    %685.0
  };
  %686() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_6529() -> (Tensor[(10, 9, 14), float32],) {
  @func_6527() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_731() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %692 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
    %687 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %688 = %687.0;
    %689 = cast(%688, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %690 = sinh(%689) /* ty=Tensor[(10, 9, 14), float32] */;
    %691 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
    (%690, %691)
  };
  %692() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */
}

def @func_4728() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  %693 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %695 = cast(%693, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %696 = cast(%693, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %697 = reshape(%694, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %698 = reshape(%695, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float32] */;
  %699 = reshape(%696, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), bool] */;
  %700 = @func_169(%697, %698, %699) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */;
  %701 = %700.1;
  (%693, %701)
}

def @func_2915() -> Tensor[(10, 9, 14), float32] {
  %702 = @func_1687() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %702.0
}

def @func_4139() -> Tensor[(9, 7, 9), bool] {
  @func_4137() /* ty=Tensor[(9, 7, 9), bool] */
}

def @func_1688() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %709 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
    %703 = @func_1631() /* ty=(Tensor[(10, 9, 14), uint32], Tensor[(14, 3, 11), float64], Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %704 = %703.2;
    %705 = cast(%704, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %706 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
    %707 = tan(%705) /* ty=Tensor[(10, 9, 14), float32] */;
    %708 = %706.0;
    (%707, %708)
  };
  %709() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_2917() -> Tensor[(10, 9, 14), float32] {
  @func_2915() /* ty=Tensor[(10, 9, 14), float32] */
}

def @func_2677() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) {
  %710 = @func_730() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */;
  %711 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %712 = %710.0;
  %713 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %714 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  %715 = @func_2184() /* ty=Tensor[(12, 3, 8), float32] */;
  %716 = %711.0;
  (%712, %713, %714, %715, %716)
}

def @func_2358() -> Tensor[(4, 14, 10), float32] {
  @func_2356() /* ty=Tensor[(4, 14, 10), float32] */
}

def @func_2185() -> Tensor[(12, 3, 8), float32] {
  %718 = fn () -> Tensor[(12, 3, 8), float32] {
    %717 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 8), float32] */;
    cosh(%717) /* ty=Tensor[(12, 3, 8), float32] */
  };
  %718() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_174(%var_171: Tensor[(10, 9, 14), float32], %var_172: Tensor[(10, 9, 14), float32], %var_173: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  @func_169(%var_171, %var_172, %var_173) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */
}

def @func_3052() -> (Tensor[(10, 9, 14), float32],) {
  %721 = fn () -> (Tensor[(10, 9, 14), float32],) {
    %719 = @func_2815() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
    %720 = %719.0;
    (%720,)
  };
  %721() /* ty=(Tensor[(10, 9, 14), float32],) */
}

def @func_2042() -> (Tensor[(10, 9, 14), float64],) {
  %724 = fn () -> (Tensor[(10, 9, 14), float64],) {
    %722 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
    %723 = %722.1;
    (%723,)
  };
  %724() /* ty=(Tensor[(10, 9, 14), float64],) */
}

def @func_465() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) {
  %725 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %727 = cast(%725, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %728 = rsqrt(%727) /* ty=Tensor[(10, 9, 14), float64] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %730 = cos(%729) /* ty=Tensor[(10, 9, 14), float64] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %732 = sigmoid(%731) /* ty=Tensor[(10, 9, 14), float32] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
  %734 = sin(%726) /* ty=Tensor[(10, 9, 14), float32] */;
  %735 = asinh(%733) /* ty=Tensor[(10, 9, 14), float32] */;
  (%734, %735)
}

def @func_4730() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) {
  @func_4728() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), uint32]) */
}

def @func_6527() -> (Tensor[(10, 9, 14), float32],) {
  %736 = @func_1990() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_5254(%var_5211: Tensor[(5, 12, 3), float64], %var_5230: Tensor[(117, 3), int8]) -> (Tensor[(10, 9, 14), float32], Tensor[(13, 9, 3), int8], int8, Tensor[(117, 3), int8], Tensor[(5, 12, 3), float32], Tensor[(10, 9, 14), float64]) {
  %738 = cast(meta[relay.Constant][41] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %739 = cast(%var_5230, dtype="int8") /* ty=Tensor[(117, 3), int8] */;
  %740 = reshape(%738, newshape=[]) /* ty=int8 */;
  %741 = reshape(%739, newshape=[13, 9, 3]) /* ty=Tensor[(13, 9, 3), int8] */;
  %742 = cast(%var_5211, dtype="float64") /* ty=Tensor[(5, 12, 3), float64] */;
  %743 = erf(%742) /* ty=Tensor[(5, 12, 3), float64] */;
  %744 = cast(%743, dtype="float32") /* ty=Tensor[(5, 12, 3), float32] */;
  %745 = @func_3977() /* ty=Tensor[(10, 9, 14), float32] */;
  %746 = @func_513(%740, %741) /* ty=Tensor[(13, 9, 3), int8] */;
  %747 = acos(%744) /* ty=Tensor[(5, 12, 3), float32] */;
  %748 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
  (%745, %746, meta[relay.Constant][41] /* ty=int8 */, %var_5230, %747, %748)
}

def @func_5401(%var_5400: Tensor[(3, 5, 1), float64]) -> Tensor[(3, 5, 1), float64] {
  %750 = fn (%var_5396: Tensor[(3, 5, 1), float64]) -> Tensor[(3, 5, 1), float64] {
    %749 = cast(%var_5396, dtype="float64") /* ty=Tensor[(3, 5, 1), float64] */;
    tan(%749) /* ty=Tensor[(3, 5, 1), float64] */
  };
  %750(%var_5400) /* ty=Tensor[(3, 5, 1), float64] */
}

def @func_2356() -> Tensor[(4, 14, 10), float32] {
  %751 = @func_1544() /* ty=(Tensor[(4, 14, 10), float32], Tensor[(10, 9, 14), float32], Tensor[(4, 14, 10), bool]) */;
  %751.0
}

def @func_2328(%var_2326: Tensor[(20), uint64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(20), uint64], Tensor[(80), uint64]) {
  @func_2325(%var_2326) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(20), uint64], Tensor[(80), uint64]) */
}

def @func_1163(%var_1154: Tensor[(10, 9, 14), float64]) -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), bool], Tensor[(10, 9, 14), uint8]) {
  %752 = @func_465() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float32]) */;
  %753 = %752.1;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %755 = atanh(%754) /* ty=Tensor[(10, 9, 14), float64] */;
  %756 = cast(%var_1154, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = greater(%758, %759) /* ty=Tensor[(10, 9, 14), bool] */;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
  %762 = reshape(%761, newshape=[10, 9, 14]) /* ty=Tensor[(10, 9, 14), float64] */;
  %763 = @func_569(%762) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(10, 9, 14), uint8]) */;
  %764 = @func_365() /* ty=Tensor[(10, 9, 14), float64] */;
  %765 = %763.1;
  (%764, %760, %765)
}

def @func_5935() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
  %771 = fn () -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) {
    %766 = @func_2915() /* ty=Tensor[(10, 9, 14), float32] */;
    %767 = cast(%766, dtype="float32") /* ty=Tensor[(10, 9, 14), float32] */;
    %768 = cast(%766, dtype="float64") /* ty=Tensor[(10, 9, 14), float64] */;
    %769 = cosh(%767) /* ty=Tensor[(10, 9, 14), float32] */;
    %770 = acosh(%768) /* ty=Tensor[(10, 9, 14), float64] */;
    (%769, %770)
  };
  %771() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64]) */
}

def @func_1417(%var_1415: Tensor[(351), int8]) -> (Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) {
  @func_1414(%var_1415) /* ty=(Tensor[(10, 9, 14), float64], Tensor[(13, 9, 3), int8], int8, Tensor[(351), int8]) */
}

def @func_5301() -> Tensor[(12, 3, 8), float32] {
  @func_3359() /* ty=Tensor[(12, 3, 8), float32] */
}

def @func_4582(%var_4581: Tensor[(4, 6, 5), float32]) -> Tensor[(4, 6, 5), float32] {
  %773 = fn (%var_4572: Tensor[(4, 6, 5), float32]) -> Tensor[(4, 6, 5), float32] {
    %772 = cast(%var_4572, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
    sigmoid(%772) /* ty=Tensor[(4, 6, 5), float32] */
  };
  %773(%var_4581) /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_1224() -> Tensor[(10, 9, 14), float64] {
  %775 = fn () -> Tensor[(10, 9, 14), float64] {
    %774 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
    %774.1
  };
  %775() /* ty=Tensor[(10, 9, 14), float64] */
}

def @func_6440() -> (Tensor[(10, 9, 14), float32],) {
  %776 = @func_5285() /* ty=(Tensor[(10, 9, 14), float32],) */;
  %777 = %776.0;
  (%777,)
}

def @func_52(%var_47: Tensor[(9, 7, 9), int64], %var_48: Tensor[(9, 7, 9), int64]) -> Tensor[(9, 7, 9), bool] {
  %778 = cast(%var_48, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %779 = shape_of(%var_47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%var_47, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%780, %781) /* ty=Tensor[(9, 7, 9), bool] */
}

def @func_6484() -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
  %787 = fn () -> (Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) {
    %782 = @func_909() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(4, 14, 10), float32], Tensor[(4, 14, 10), float32]) */;
    %783 = @func_2572() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float32]) */;
    %784 = %782.0;
    %785 = @func_1223() /* ty=Tensor[(10, 9, 14), float64] */;
    %786 = %783.0;
    (%784, %785, %786)
  };
  %787() /* ty=(Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64]) */
}

def @func_516(%var_514: int8, %var_515: Tensor[(13, 9, 3), int8]) -> Tensor[(13, 9, 3), int8] {
  %790 = fn (%var_483: int8, %var_484: Tensor[(13, 9, 3), int8]) -> Tensor[(13, 9, 3), int8] {
    %788 = cast(%var_483, dtype="int8") /* ty=int8 */;
    %789 = cast(%var_484, dtype="int8") /* ty=Tensor[(13, 9, 3), int8] */;
    right_shift(%788, %789) /* ty=Tensor[(13, 9, 3), int8] */
  };
  %790(%var_514, %var_515) /* ty=Tensor[(13, 9, 3), int8] */
}

def @func_2679() -> (Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) {
  @func_2677() /* ty=(Tensor[(10, 9, 14), float32], Tensor[(10, 9, 14), float64], Tensor[(10, 9, 14), float64], Tensor[(12, 3, 8), float32], Tensor[(10, 9, 14), float32]) */
}

def @func_5177(%var_5147: Tensor[(14, 7, 15), bool]) -> (Tensor[(14, 7, 15), bool], Tensor[(16, 16), float32], Tensor[(16, 1, 16), bool]) {
  %791 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %792 = cast(%var_5147, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %793 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %794 = reshape(%793, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), float32] */;
  %795 = @func_2104(%794) /* ty=(Tensor[(16, 1, 16), float32],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="int32") /* ty=Tensor[(16, 1, 16), int32] */;
  %798 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %799 = bitwise_and(%797, %798) /* ty=Tensor[(16, 1, 16), int32] */;
  %800 = cast(%799, dtype="float64") /* ty=Tensor[(16, 1, 16), float64] */;
  %801 = tan(%800) /* ty=Tensor[(16, 1, 16), float64] */;
  %802 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %803 = cast(%801, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %804 = logical_or(%791, %792) /* ty=Tensor[(14, 7, 15), bool] */;
  %805 = greater_equal(%802, %803) /* ty=Tensor[(16, 1, 16), bool] */;
  (%804, meta[relay.Constant][42] /* ty=Tensor[(16, 16), float32] */, %805)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen100/build/output.py", line 2365, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:43] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

