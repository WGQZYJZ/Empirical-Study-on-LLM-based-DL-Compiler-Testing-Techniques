==========mod==========
#[version = "0.0.5"]
def @func_3832(%var_3827: Tensor[(7, 9, 10), float64]) -> Tensor[(7, 9, 10), float64] {
  %0 = cast(%var_3827, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%2, %3) /* ty=Tensor[(7, 9, 10), float64] */
}

def @func_6457(%var_6436: Tensor[(10, 2), float32], %var_6437: Tensor[(1584, 1), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(5, 7, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(504), float32], Tensor[(10, 2), float32], Tensor[(1584, 1), float64], Tensor[(72), float32]) {
  %4 = @func_4057() /* ty=Tensor[(5, 7, 4), float32] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(5, 7, 4), float64] */;
  %6 = sqrt(%5) /* ty=Tensor[(5, 7, 4), float64] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %8 = cast(%6, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %9 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%4, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %13 = cast(%var_6436, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
  %14 = cast(%var_6437, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %16 = reshape(%12, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float32] */;
  %17 = reshape(%13, newshape=[20]) /* ty=Tensor[(20), float32] */;
  %18 = reshape(%14, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %19 = reshape(%15, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %20 = @func_2200(%16, %17, %18, %19) /* ty=(Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) */;
  %21 = erf(%7) /* ty=Tensor[(5, 7, 4), float32] */;
  %22 = floor_divide(%10, %11) /* ty=Tensor[(5, 7, 4), float32] */;
  %23 = %20.3;
  (%21, %22, %23, meta[relay.Constant][1] /* ty=Tensor[(504), float32] */, %var_6436, %var_6437, meta[relay.Constant][2] /* ty=Tensor[(72), float32] */)
}

def @func_526(%var_506: Tensor[(9, 2, 11), float64], %var_518: Tensor[(1584, 1), float64]) -> (Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) {
  %24 = cast(%var_506, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %25 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(9, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %28 = cast(%var_518, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %29 = reshape(%28, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %30 = @func_501(%29) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %32 = floor_divide(%26, %27) /* ty=Tensor[(9, 2, 11), float64] */;
  %33 = %30.0;
  %34 = tan(%31) /* ty=Tensor[(9, 2, 11), float64] */;
  (%32, %33, %var_518, %34)
}

def @func_1848(%var_1832: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  %35 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %36 = cast(%var_1832, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %40 = cast(%var_1832, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %41 = add(%38, %39) /* ty=Tensor[(5, ?, 4), int8] */;
  %42 = sigmoid(%40) /* ty=Tensor[(5, 1, 4), float32] */;
  %43 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%41, %42, %43)
}

def @func_5875(%var_5853: Tensor[(5, 2, 1), float64], %var_5863: Tensor[(28), float64]) -> (Tensor[(5, 2, 1), float64], Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(198), float64], Tensor[(28), float64]) {
  %44 = cast(%var_5853, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  %45 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %46 = cast(-0.121111f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %48 = cast(%var_5863, dtype="float64") /* ty=Tensor[(28), float64] */;
  %49 = reshape(%46, newshape=[]) /* ty=float64 */;
  %50 = reshape(%47, newshape=[3, 66]) /* ty=Tensor[(3, 66), float64] */;
  %51 = reshape(%48, newshape=[1, 2, 14]) /* ty=Tensor[(1, 2, 14), float64] */;
  %52 = @func_2707(%49, %50, %51) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) */;
  %53 = tan(%44) /* ty=Tensor[(5, 2, 1), float64] */;
  %54 = %45.0;
  %55 = %52.1;
  (%53, %54, %55, -0.121111f64 /* ty=float64 */, meta[relay.Constant][4] /* ty=Tensor[(198), float64] */, %var_5863)
}

def @func_2154() -> (Tensor[(5, 1, 4), float32],) {
  %56 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  (%56,)
}

def @func_3558(%var_3530: Tensor[(70), float32], %var_3544: Tensor[(72), float32], %var_3545: Tensor[(198), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32], Tensor[(5, 6, 4), int16], Tensor[(6, 15, 10), int8], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %57 = cast(%var_3530, dtype="float32") /* ty=Tensor[(70), float32] */;
  %58 = reshape(%57, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), float32] */;
  %59 = @func_3345(%58) /* ty=(Tensor[(5, 14, 9), float32],) */;
  %60 = @func_2777() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) */;
  %61 = %60.0;
  %62 = cast(%61, dtype="uint16") /* ty=Tensor[(5, 1, 4), uint16] */;
  %63 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 6, 4), float32] */, dtype="uint16") /* ty=Tensor[(5, 6, 4), uint16] */;
  %64 = add(%62, %63) /* ty=Tensor[(5, 6, 4), uint16] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(5, 6, 4), float32] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %68 = cast(%61, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %69 = floor_divide(%67, %68) /* ty=Tensor[(5, 6, 4), float32] */;
  %70 = cast(%69, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %71 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%66, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %74 = cast(%var_3544, dtype="float32") /* ty=Tensor[(72), float32] */;
  %75 = cast(%var_3545, dtype="float64") /* ty=Tensor[(198), float64] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %77 = reshape(%74, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %78 = reshape(%75, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %79 = reshape(%76, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %80 = @func_1077(%77, %78, %79) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %81 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  %82 = %59.0;
  %83 = subtract(%72, %73) /* ty=Tensor[(5, 6, 4), int16] */;
  %84 = %80.0;
  (%81, %82, %var_3530, %83, %84, %var_3544, %var_3545, meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */)
}

def @func_5558(%var_5553: Tensor[(3, 5, 7), int32], %var_5554: Tensor[(3, 5, 7), int32]) -> Tensor[(3, 5, 7), bool] {
  %85 = cast(%var_5554, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
  %86 = shape_of(%var_5553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_5553, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%87, %88) /* ty=Tensor[(3, 5, 7), bool] */
}

def @func_751(%var_681: Tensor[(6, 3, 4), float32], %var_685: Tensor[(198), float64], %var_686: Tensor[(1584), float64]) -> (Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) {
  %89 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %90 = cast(%var_686, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %91 = reshape(%89, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %92 = reshape(%90, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %93 = @func_526(%91, %92) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %94 = %93.2;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %96 = reshape(%95, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %97 = @func_501(%96) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %98 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %99 = %97.0;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %101 = reshape(%98, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %102 = reshape(%100, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %103 = @func_526(%101, %102) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %104 = %103.2;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %106 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %107 = cast(%var_681, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %108 = sigmoid(%107) /* ty=Tensor[(6, 3, 4), float32] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
  %110 = exp(%109) /* ty=Tensor[(6, 3, 4), float64] */;
  %111 = cast(%var_681, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %115 = bitwise_xor(%113, %114) /* ty=Tensor[(6, 3, 4), int32] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %117 = floor_divide(%105, %106) /* ty=Tensor[(1584, 198), float64] */;
  %118 = tan(%116) /* ty=Tensor[(6, 3, 4), float32] */;
  (%94, %var_686, %99, %117, %118)
}

def @func_5330(%var_5322: Tensor[(198), float64], %var_5328: Tensor[(180), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(198), float32], Tensor[(198), int16], Tensor[(5, 9, 4), float64], Tensor[(180), float32]) {
  %119 = @func_3186() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %121 = reshape(%120, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %122 = @func_1466(%121) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) */;
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %124 = cast(%var_5322, dtype="int16") /* ty=Tensor[(198), int16] */;
  %125 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?), int16] */;
  %128 = cast(%var_5328, dtype="float32") /* ty=Tensor[(180), float32] */;
  %129 = reshape(%128, newshape=[5, 9, 4]) /* ty=Tensor[(5, 9, 4), float32] */;
  %130 = @func_5086() /* ty=Tensor[(5, 1, 4), float32] */;
  %131 = %119.3;
  %132 = %122.0;
  %133 = asinh(%123) /* ty=Tensor[(198), float32] */;
  %134 = maximum(%126, %127) /* ty=Tensor[(198), int16] */;
  %135 = @func_3822(%129) /* ty=Tensor[(5, 9, 4), float64] */;
  (%130, %131, %132, %133, %134, %135, %var_5328)
}

def @func_3663(%var_3616: Tensor[(5, 3, 4), float32], %var_3627: Tensor[(336), float32]) -> (Tensor[(5, 3, 4), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(1080), float64], Tensor[(5, 1, 4), float32]) {
  %136 = @func_2841() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
  %137 = %136.1;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
  %139 = cast(%var_3616, dtype="float64") /* ty=Tensor[(5, 3, 4), float64] */;
  %140 = cast(%var_3627, dtype="float32") /* ty=Tensor[(336), float32] */;
  %141 = reshape(%140, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %142 = cast(5.55249f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %144 = reshape(%142, newshape=[]) /* ty=float64 */;
  %145 = reshape(%143, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
  %146 = power(%138, %139) /* ty=Tensor[(5, 3, 4), float64] */;
  %147 = @func_1035(%141) /* ty=Tensor[(14, 12, 2), float32] */;
  %148 = @func_999(%144, %145) /* ty=Tensor[(10, 9, 12), float64] */;
  %149 = @func_3420() /* ty=Tensor[(5, 1, 4), float32] */;
  (%146, %147, %var_3627, %148, 5.55249f64 /* ty=float64 */, meta[relay.Constant][8] /* ty=Tensor[(1080), float64] */, %149)
}

def @func_7121() -> Tensor[(5, 3, 4), uint32] {
  %150 = @func_6960() /* ty=Tensor[(5, ?, 4), int32] */;
  %151 = cast(%150, dtype="uint32") /* ty=Tensor[(5, ?, 4), uint32] */;
  %152 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 3, 4), int32] */, dtype="uint32") /* ty=Tensor[(5, 3, 4), uint32] */;
  subtract(%151, %152) /* ty=Tensor[(5, 3, 4), uint32] */
}

def @func_5670() -> (Tensor[(2, 4, 10), float32],) {
  %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  %154 = log2(%153) /* ty=Tensor[(2, 4, 10), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
  %156 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(2, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 4, 10), float64] */, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %159 = divide(%157, %158) /* ty=Tensor[(2, 4, 10), float32] */;
  (%159,)
}

def @func_4218(%var_4189: Tensor[(4, 5, 6), bool], %var_4190: Tensor[(4, 5, 6), bool]) -> (Tensor[(1584, 1), float64], Tensor[(198), float64], Tensor[(4, 396), float64], Tensor[(4, 5, 6), bool]) {
  %160 = cast(meta[relay.Constant][11] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 396), float64] */, dtype="float64") /* ty=Tensor[(4, 396), float64] */;
  %162 = reshape(%160, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %163 = reshape(%161, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %164 = @func_526(%162, %163) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %165 = cast(%var_4190, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %166 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_4189, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = logical_and(%167, %168) /* ty=Tensor[(4, 5, 6), bool] */;
  %170 = cast(%var_4189, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = %164.2;
  %175 = greater_equal(%172, %173) /* ty=Tensor[(4, 5, 6), bool] */;
  (%174, meta[relay.Constant][11] /* ty=Tensor[(198), float64] */, meta[relay.Constant][12] /* ty=Tensor[(4, 396), float64] */, %175)
}

def @func_2250(%var_2243: Tensor[(7, 4, 13), float32]) -> Tensor[(7, 4, 13), float32] {
  %176 = cast(%var_2243, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  atan(%176) /* ty=Tensor[(7, 4, 13), float32] */
}

def @func_3335() -> Tensor[(5, 1, 4), float32] {
  @func_2451() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3780(%var_3754: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), uint8], Tensor[(5, 13, 4), bool], Tensor[(5, 13, 4), float32]) {
  %177 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %179 = cast(%var_3754, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
  %180 = add(%178, %179) /* ty=Tensor[(5, 13, 4), float32] */;
  %181 = cast(%177, dtype="uint8") /* ty=Tensor[(5, 1, 4), uint8] */;
  %182 = cast(%180, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
  %183 = cast(%177, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %184 = rsqrt(%183) /* ty=Tensor[(5, 1, 4), float32] */;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
  %188 = bitwise_or(%181, %182) /* ty=Tensor[(5, 13, 4), uint8] */;
  %189 = equal(%185, %186) /* ty=Tensor[(5, 13, 4), bool] */;
  %190 = sin(%187) /* ty=Tensor[(5, 13, 4), float32] */;
  (%188, %189, %190)
}

def @func_1077(%var_1066: Tensor[(72), float32], %var_1067: Tensor[(198), float64], %var_1068: Tensor[(1584), float64]) -> (Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  %192 = sinh(%191) /* ty=Tensor[(6, 15, 10), float32] */;
  %193 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  %194 = asin(%193) /* ty=Tensor[(6, 15, 10), float32] */;
  %195 = cast(%194, dtype="int8") /* ty=Tensor[(6, 15, 10), int8] */;
  %196 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%192, dtype="int8") /* ty=Tensor[(6, 15, 10), int8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %199 = cast(%var_1066, dtype="float32") /* ty=Tensor[(72), float32] */;
  %200 = cast(%var_1067, dtype="float64") /* ty=Tensor[(198), float64] */;
  %201 = cast(%var_1068, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %202 = reshape(%199, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %203 = reshape(%200, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %204 = reshape(%201, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %205 = @func_751(%202, %203, %204) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %206 = add(%197, %198) /* ty=Tensor[(6, 15, 10), int8] */;
  %207 = %205.3;
  (%206, %207, %var_1066, %var_1067, %var_1068)
}

def @func_1276() -> Tensor[(5, 1, 4), float32] {
  @func_1235() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4176(%var_4129: Tensor[(72), float32], %var_4130: Tensor[(198), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 4, 13), float32], Tensor[(364), float32], Tensor[(7, 4, 9), int16], Tensor[(252), float32], Tensor[(5, ?, 4), bool]) {
  %208 = cast(%var_4129, dtype="float32") /* ty=Tensor[(72), float32] */;
  %209 = cast(%var_4130, dtype="float64") /* ty=Tensor[(198), float64] */;
  %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %211 = reshape(%208, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %212 = reshape(%209, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %213 = reshape(%210, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %214 = @func_751(%211, %212, %213) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %215 = cast(meta[relay.Constant][16] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %216 = reshape(%215, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
  %217 = cast(meta[relay.Constant][17] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %218 = reshape(%217, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
  %219 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
  %221 = tan(%220) /* ty=Tensor[(5, 1, 4), float64] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %223 = atanh(%222) /* ty=Tensor[(5, 1, 4), float32] */;
  %224 = cast(%219, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = @func_4057() /* ty=Tensor[(5, 7, 4), float32] */;
  %229 = %214.0;
  %230 = @func_2250(%216) /* ty=Tensor[(7, 4, 13), float32] */;
  %231 = @func_2879(%218) /* ty=Tensor[(7, 4, 9), int16] */;
  %232 = logical_and(%226, %227) /* ty=Tensor[(5, ?, 4), bool] */;
  (%228, %229, %var_4129, %var_4130, meta[relay.Constant][15] /* ty=Tensor[(1584), float64] */, %230, meta[relay.Constant][16] /* ty=Tensor[(364), float32] */, %231, meta[relay.Constant][17] /* ty=Tensor[(252), float32] */, %232)
}

def @func_2089(%var_2078: Tensor[(15, 10, 4), bool], %var_2079: Tensor[(15, 10, 4), bool]) -> (Tensor[(15, 10, 4), bool],) {
  %233 = cast(%var_2079, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %234 = shape_of(%var_2078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_2078, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = logical_or(%235, %236) /* ty=Tensor[(15, 10, 4), bool] */;
  (%237,)
}

def @func_2964(%var_2961: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(9, 2, 14), int64], Tensor[(252), int64]) {
  %238 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %239 = cast(meta[relay.Constant][18] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %240 = cast(meta[relay.Constant][19] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %241 = reshape(%239, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %242 = reshape(%240, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %243 = @func_1905(%241, %242) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %244 = cast(%var_2961, dtype="int64") /* ty=Tensor[(252), int64] */;
  %245 = cast(%var_2961, dtype="int64") /* ty=Tensor[(252), int64] */;
  %246 = reshape(%244, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %247 = reshape(%245, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %248 = @func_1375(%246, %247) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %249 = %238.0;
  %250 = %243.0;
  %251 = %248.0;
  (%249, %250, meta[relay.Constant][18] /* ty=Tensor[(336), float32] */, meta[relay.Constant][19] /* ty=Tensor[(1584), float64] */, %251, %var_2961)
}

def @func_2886() -> (Tensor[(5, 1, 4), float32],) {
  %252 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  (%252,)
}

def @func_3186() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) {
  %253 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %254 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %255 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %256 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  (%253, %254, %255, %256)
}

def @func_4057() -> Tensor[(5, 7, 4), float32] {
  %257 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  power(%258, %259) /* ty=Tensor[(5, 7, 4), float32] */
}

def @func_6266() -> (Tensor[(5, 1, 4), float32],) {
  %260 = @func_4243() /* ty=Tensor[(5, 1, 4), float32] */;
  (%260,)
}

def @func_4452() -> Tensor[(5, 1, 4), float32] {
  %261 = @func_4405() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) */;
  %261.0
}

def @func_5960() -> (Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) {
  %262 = @func_5022() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
  %263 = @func_4468() /* ty=(Tensor[(7, 1, 10), float32],) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %266 = atanh(%265) /* ty=Tensor[(7, 1, 10), float64] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %268 = erf(%267) /* ty=Tensor[(7, 1, 10), float64] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %270 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%266, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %273 = floor_mod(%271, %272) /* ty=Tensor[(7, ?, 10), float32] */;
  %274 = cast(%266, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(7, ?, 10), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = %262.1;
  %279 = logical_or(%276, %277) /* ty=Tensor[(7, ?, 10), bool] */;
  (%278, %279)
}

def @func_5544() -> Tensor[(5, ?, 4), bool] {
  %280 = @func_3123() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
  %280.1
}

def @func_3420() -> Tensor[(5, 1, 4), float32] {
  %281 = @func_2451() /* ty=Tensor[(5, 1, 4), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  acos(%282) /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2337() -> Tensor[(5, 1, 4), float32] {
  @func_1415() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2557() -> Tensor[(5, 1, 4), float32] {
  @func_2337() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_6538() -> (Tensor[(15, 10, 4), bool],) {
  %283 = @func_6195() /* ty=Tensor[(15, 10, 4), bool] */;
  (%283,)
}

def @func_1133(%var_1113: Tensor[(198), float64]) -> (Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) {
  %284 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %285 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %286 = reshape(%285, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %287 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %288 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
  %289 = cast(meta[relay.Constant][24] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %290 = reshape(%287, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %291 = reshape(%288, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %292 = reshape(%289, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %293 = @func_1077(%290, %291, %292) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %294 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %296 = reshape(%294, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %297 = reshape(%295, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %298 = @func_526(%296, %297) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %299 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %300 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
  %301 = %293.4;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %303 = reshape(%299, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %304 = reshape(%300, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %305 = reshape(%302, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %306 = @func_751(%303, %304, %305) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %307 = tan(%284) /* ty=Tensor[(7, 7), float64] */;
  %308 = @func_1035(%286) /* ty=Tensor[(14, 12, 2), float32] */;
  %309 = %298.0;
  %310 = %306.1;
  (%307, %308, meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, %301, meta[relay.Constant][23] /* ty=Tensor[(1, 72), float32] */, %var_1113, meta[relay.Constant][24] /* ty=Tensor[(1584), float64] */, %309, %310)
}

def @func_3295(%var_3287: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], int16) {
  %311 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %312 = cast(%var_3287, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %316 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %317 = reshape(%316, newshape=[]) /* ty=int16 */;
  %318 = @func_3020(%317) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) */;
  %319 = right_shift(%314, %315) /* ty=Tensor[(5, ?, 4), int8] */;
  %320 = %318.1;
  (%319, %320, meta[relay.Constant][25] /* ty=int16 */)
}

def @func_3437() -> (Tensor[(5, 1, 4), float32],) {
  %321 = @func_3186() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) */;
  %322 = %321.3;
  (%322,)
}

def @func_4930(%var_4908: float64, %var_4919: Tensor[(336), float32], %var_4924: Tensor[(72, 1), float32]) -> (Tensor[(5, 1, 4), float32], float64, Tensor[(1080), float64], Tensor[(10, 9, 12), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(72, 1), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %323 = cast(%var_4908, dtype="float64") /* ty=float64 */;
  %324 = cast(meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %325 = reshape(%323, newshape=[]) /* ty=float64 */;
  %326 = reshape(%324, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
  %327 = @func_999(%325, %326) /* ty=Tensor[(10, 9, 12), float64] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(10, 9, 12), float32] */;
  %329 = cast(%var_4919, dtype="float32") /* ty=Tensor[(336), float32] */;
  %330 = reshape(%329, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %331 = @func_1257(%330) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) */;
  %332 = cast(%var_4924, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %333 = cast(meta[relay.Constant][27] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %334 = cast(meta[relay.Constant][28] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %335 = reshape(%332, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %336 = reshape(%333, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %337 = reshape(%334, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %338 = @func_751(%335, %336, %337) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %339 = @func_3335() /* ty=Tensor[(5, 1, 4), float32] */;
  %340 = sinh(%328) /* ty=Tensor[(10, 9, 12), float32] */;
  %341 = %331.3;
  %342 = %338.0;
  (%339, %var_4908, meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, %340, %341, %var_4919, %342, %var_4924, meta[relay.Constant][27] /* ty=Tensor[(198), float64] */, meta[relay.Constant][28] /* ty=Tensor[(1584), float64] */)
}

def @func_1727() -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) {
  %343 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 66), float64] */, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %344 = reshape(%343, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %345 = @func_1133(%344) /* ty=(Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) */;
  %346 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %347 = %345.6;
  %348 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  (%346, %347, meta[relay.Constant][29] /* ty=Tensor[(3, 66), float64] */, %348)
}

def @func_4574(%var_4547: Tensor[(198), float64], %var_4559: Tensor[(504), uint64]) -> (Tensor[(5, 1, 4), float32], Tensor[(11, 12, 12), uint32], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 6, 12), uint64], Tensor[(504), uint64]) {
  %349 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %350 = cast(meta[relay.Constant][30] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %351 = cast(%var_4547, dtype="float64") /* ty=Tensor[(198), float64] */;
  %352 = cast(meta[relay.Constant][31] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %353 = reshape(%350, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %354 = reshape(%351, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %355 = reshape(%352, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %356 = @func_751(%353, %354, %355) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %357 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %358 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %359 = reshape(%357, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), uint64] */;
  %360 = reshape(%358, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), uint64] */;
  %361 = %349.0;
  %362 = %356.2;
  %363 = @func_4512(%359, %360) /* ty=Tensor[(7, 6, 12), uint64] */;
  (%361, %362, meta[relay.Constant][30] /* ty=Tensor[(72), float32] */, %var_4547, meta[relay.Constant][31] /* ty=Tensor[(1584), float64] */, %363, %var_4559)
}

def @func_6960() -> Tensor[(5, ?, 4), int32] {
  %364 = @func_6183() /* ty=(Tensor[(5, ?, 4), int8],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(5, ?, 4), float64] */;
  %367 = cosh(%366) /* ty=Tensor[(5, ?, 4), float64] */;
  %368 = cast(%365, dtype="int32") /* ty=Tensor[(5, ?, 4), int32] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int32") /* ty=Tensor[(5, ?, 4), int32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%370, %371) /* ty=Tensor[(5, ?, 4), int32] */
}

def @func_2593() -> (Tensor[(5, 1, 4), float32],) {
  %372 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  (%372,)
}

def @func_1035(%var_1028: Tensor[(14, 12, 2), float32]) -> Tensor[(14, 12, 2), float32] {
  %373 = cast(%var_1028, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  atan(%373) /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_3345(%var_3338: Tensor[(5, 14, 1), float32]) -> (Tensor[(5, 14, 9), float32],) {
  %374 = cast(%var_3338, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %375 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %376 = mod(%374, %375) /* ty=Tensor[(5, 14, 9), float32] */;
  (%376,)
}

def @func_6780(%var_6763: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, ?, 4), bool]) {
  %377 = cast(%var_6763, dtype="int64") /* ty=Tensor[(252), int64] */;
  %378 = cast(%var_6763, dtype="int64") /* ty=Tensor[(252), int64] */;
  %379 = reshape(%377, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %380 = reshape(%378, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %381 = @func_1375(%379, %380) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %382 = @func_3335() /* ty=Tensor[(5, 1, 4), float32] */;
  %383 = %381.1;
  %384 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%382, %383, %var_6763, %384)
}

def @func_5086() -> Tensor[(5, 1, 4), float32] {
  @func_3335() /* ty=Tensor[(5, 1, 4), float32] */
}

def @main() -> (Tensor[(15, 10, 4), float32],) {
  %385 = @func_6195() /* ty=Tensor[(15, 10, 4), bool] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %387 = log(%386) /* ty=Tensor[(15, 10, 4), float32] */;
  (%387,)
}

def @func_5404() -> (Tensor[(15, 10, 4), bool], Tensor[(5, ?, 4), bool]) {
  %388 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %389 = %388.0;
  %390 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%389, %390)
}

def @func_3822(%var_3809: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), float64] {
  %391 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %392 = %391.0;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
  %394 = cast(%var_3809, dtype="float64") /* ty=Tensor[(5, 9, 4), float64] */;
  mod(%393, %394) /* ty=Tensor[(5, 9, 4), float64] */
}

def @func_2879(%var_2847: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), int16] {
  %395 = cast(%var_2847, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %396 = sigmoid(%395) /* ty=Tensor[(7, 4, 9), float32] */;
  %397 = cast(%396, dtype="int16") /* ty=Tensor[(7, 4, 9), int16] */;
  %398 = shape_of(%var_2847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_2847, dtype="int16") /* ty=Tensor[(7, 4, 9), int16] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%399, %400) /* ty=Tensor[(7, 4, 9), int16] */
}

def @func_1905(%var_1891: Tensor[(2, 168), float32], %var_1901: Tensor[(1584), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) {
  %401 = cast(%var_1891, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %402 = reshape(%401, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %403 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
  %405 = acosh(%404) /* ty=Tensor[(5, 1, 4), float64] */;
  %406 = cast(%403, dtype="uint64") /* ty=Tensor[(5, 1, 4), uint64] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="uint64") /* ty=Tensor[(5, 1, 4), uint64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %410 = cast(%var_1901, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %411 = reshape(%410, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %412 = @func_501(%411) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %413 = @func_1035(%402) /* ty=Tensor[(14, 12, 2), float32] */;
  %414 = bitwise_or(%408, %409) /* ty=Tensor[(5, ?, 4), uint64] */;
  %415 = %412.0;
  (%413, %var_1891, %414, %415, %var_1901)
}

def @func_4243() -> Tensor[(5, 1, 4), float32] {
  @func_3335() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4978() -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) {
  %416 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %418 = reshape(%417, newshape=[5, 1, 4]) /* ty=Tensor[(5, 1, 4), float32] */;
  %419 = @func_1848(%418) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
  %420 = %419.0;
  (%416, %420)
}

def @func_4314() -> (Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) {
  %421 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %422 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %423 = reshape(%421, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %424 = reshape(%422, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %425 = @func_1375(%423, %424) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %426 = @func_3123() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
  %427 = %426.0;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %429 = %425.1;
  %430 = erf(%428) /* ty=Tensor[(5, 1, 4), float32] */;
  (%429, meta[relay.Constant][33] /* ty=Tensor[(252), int64] */, %430)
}

def @func_2375() -> Tensor[(5, 1, 4), float32] {
  @func_1203() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3241(%var_3234: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %431 = cast(meta[relay.Constant][34] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %432 = cast(meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %433 = cast(%var_3234, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %434 = reshape(%431, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %435 = reshape(%432, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %436 = reshape(%433, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %437 = @func_1077(%434, %435, %436) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %438 = @func_2337() /* ty=Tensor[(5, 1, 4), float32] */;
  %439 = %437.4;
  (%438, %439, meta[relay.Constant][34] /* ty=Tensor[(72), float32] */, meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, %var_3234)
}

def @func_1375(%var_1366: Tensor[(9, 2, 14), int64], %var_1367: Tensor[(9, 2, 14), int64]) -> (Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) {
  %440 = cast(%var_1367, dtype="int64") /* ty=Tensor[(9, 2, 14), int64] */;
  %441 = shape_of(%var_1366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_1366, dtype="int64") /* ty=Tensor[(9, 2, 14), int64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %444 = right_shift(%442, %443) /* ty=Tensor[(9, 2, 14), int64] */;
  %445 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  (%444, %445)
}

def @func_5384() -> Tensor[(5, 1, 4), float32] {
  %446 = @func_2886() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %446.0
}

def @func_2841() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %447 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %448 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  (%447, %448)
}

def @func_3918() -> (Tensor[(10, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32]) {
  %449 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 9), float32] */;
  %450 = cast(meta[relay.Constant][37] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %451 = reshape(%450, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), float32] */;
  %452 = @func_3345(%451) /* ty=(Tensor[(5, 14, 9), float32],) */;
  %453 = log2(%449) /* ty=Tensor[(10, 9), float32] */;
  %454 = %452.0;
  (%453, %454, meta[relay.Constant][37] /* ty=Tensor[(70), float32] */)
}

def @func_2777() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) {
  %455 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %456 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %457 = cast(meta[relay.Constant][38] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %458 = reshape(%457, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
  %459 = %455.0;
  %460 = %456.0;
  %461 = @func_2250(%458) /* ty=Tensor[(7, 4, 13), float32] */;
  (%459, %460, %461, meta[relay.Constant][38] /* ty=Tensor[(364), float32] */)
}

def @func_999(%var_984: float64, %var_985: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), float64] {
  %462 = cast(%var_984, dtype="float64") /* ty=float64 */;
  %463 = cast(%var_985, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
  power(%462, %463) /* ty=Tensor[(10, 9, 12), float64] */
}

def @func_4416() -> (Tensor[(15, 10, 4), bool],) {
  %464 = @func_4405() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) */;
  %465 = %464.2;
  (%465,)
}

def @func_1513(%var_1508: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) {
  %466 = cast(meta[relay.Constant][39] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %467 = cast(%var_1508, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %468 = reshape(%466, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %469 = reshape(%467, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %470 = @func_526(%468, %469) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %471 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(5, ?, 4), float32] */;
  %473 = cos(%472) /* ty=Tensor[(5, ?, 4), float32] */;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(5, ?, 4), float32] */;
  %475 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %476 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %477 = %470.0;
  %478 = asinh(%474) /* ty=Tensor[(5, ?, 4), float32] */;
  (%475, %476, %477, meta[relay.Constant][39] /* ty=Tensor[(198), float64] */, %var_1508, %478)
}

def @func_6891() -> (Tensor[(15, 10, 4), bool], Tensor[(1584), float32]) {
  %479 = @func_6538() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %480 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %481 = %480.1;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %483 = %479.0;
  %484 = log10(%482) /* ty=Tensor[(1584), float32] */;
  (%483, %484)
}

def @func_4964(%var_4957: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
  %485 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  %486 = cast(%485, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %487 = cast(%var_4957, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  greater_equal(%486, %487) /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_4468() -> (Tensor[(7, 1, 10), float32],) {
  %488 = cast(9.63917f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %489 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %490 = mod(%488, %489) /* ty=Tensor[(7, 1, 10), float32] */;
  (%490,)
}

def @func_2647(%var_2637: Tensor[(252), int64], %var_2638: int16, %var_2642: Tensor[(5, 8, 4), bool]) -> (Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) {
  %491 = cast(%var_2637, dtype="int64") /* ty=Tensor[(252), int64] */;
  %492 = cast(%var_2638, dtype="int16") /* ty=int16 */;
  %493 = reshape(%491, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
  %494 = reshape(%492, newshape=[]) /* ty=int16 */;
  %495 = @func_2527(%493, %494) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
  %496 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %497 = cast(%496, dtype="bool") /* ty=Tensor[(5, ?, 4), bool] */;
  %498 = cast(%var_2642, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
  %499 = %495.2;
  %500 = greater_equal(%497, %498) /* ty=Tensor[(5, 8, 4), bool] */;
  (%499, %var_2637, %var_2638, %500)
}

def @func_2033(%var_2017: int16, %var_2018: Tensor[(16, 16, 9), int16]) -> (Tensor[(16, 16, 9), int16],) {
  %501 = cast(%var_2017, dtype="int16") /* ty=int16 */;
  %502 = cast(%var_2018, dtype="int16") /* ty=Tensor[(16, 16, 9), int16] */;
  %503 = minimum(%501, %502) /* ty=Tensor[(16, 16, 9), int16] */;
  (%503,)
}

def @func_5488() -> Tensor[(5, 1, 4), float32] {
  %504 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %504.0
}

def @func_6051() -> (Tensor[(5, 1, 4), float32],) {
  %505 = @func_4452() /* ty=Tensor[(5, 1, 4), float32] */;
  (%505,)
}

def @func_6359(%var_6347: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float32]) {
  %506 = cast(meta[relay.Constant][41] /* ty=Tensor[(33, 6), float64] */, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %507 = cast(%var_6347, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %508 = reshape(%506, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
  %509 = reshape(%507, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %510 = @func_5073(%508, %509) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) */;
  %511 = cast(meta[relay.Constant][42] /* ty=Tensor[(1584), float64] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %512 = shape_of(%var_6347, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%var_6347, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), float32] */;
  %515 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %516 = %510.1;
  %517 = floor_divide(%513, %514) /* ty=Tensor[(1584), float32] */;
  (%515, %516, meta[relay.Constant][41] /* ty=Tensor[(33, 6), float64] */, %517)
}

def @func_6091() -> (Tensor[(5, 1, 4), float32],) {
  %518 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %520 = atan(%519) /* ty=Tensor[(5, 1, 4), float32] */;
  (%520,)
}

def @func_6649(%var_6623: Tensor[(120, 1), uint64], %var_6625: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(9, 2, 14), float32], Tensor[(120, 1), uint64], Tensor[(252), int64], int16, Tensor[(6, 42), int64], Tensor[(5, ?, 4), bool]) {
  %521 = cast(%var_6623, dtype="uint64") /* ty=Tensor[(120, 1), uint64] */;
  %522 = cast(%var_6623, dtype="uint64") /* ty=Tensor[(120, 1), uint64] */;
  %523 = cast(meta[relay.Constant][43] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %524 = cast(%var_6625, dtype="int16") /* ty=int16 */;
  %525 = reshape(%521, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), uint64] */;
  %526 = reshape(%522, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), uint64] */;
  %527 = reshape(%523, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %528 = reshape(%524, newshape=[]) /* ty=int16 */;
  %529 = @func_3717(%525, %526, %527, %528) /* ty=(Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) */;
  %530 = cast(meta[relay.Constant][43] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %531 = cast(%var_6625, dtype="int16") /* ty=int16 */;
  %532 = reshape(%530, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
  %533 = reshape(%531, newshape=[]) /* ty=int16 */;
  %534 = @func_2527(%532, %533) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
  %535 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  %536 = %529.1;
  %537 = %534.1;
  %538 = @func_5544() /* ty=Tensor[(5, ?, 4), bool] */;
  (%535, %536, %var_6623, meta[relay.Constant][43] /* ty=Tensor[(252), int64] */, %var_6625, %537, %538)
}

def @func_5347() -> (Tensor[(252), int64],) {
  %539 = @func_4314() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) */;
  %540 = %539.1;
  (%540,)
}

def @func_2200(%var_2160: Tensor[(6, 14, 6), float32], %var_2164: Tensor[(20), float32], %var_2176: Tensor[(1584), float64], %var_2182: Tensor[(72), float32]) -> (Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) {
  %541 = cast(%var_2160, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %542 = cast(%var_2164, dtype="float32") /* ty=Tensor[(20), float32] */;
  %543 = reshape(%542, newshape=[5, 1, 4]) /* ty=Tensor[(5, 1, 4), float32] */;
  %544 = @func_1848(%543) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
  %545 = cast(%var_2176, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %546 = reshape(%545, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %547 = @func_1513(%546) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) */;
  %548 = cast(%var_2182, dtype="float32") /* ty=Tensor[(72), float32] */;
  %549 = %547.2;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %551 = cast(%var_2176, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %552 = reshape(%548, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %553 = reshape(%550, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %554 = reshape(%551, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %555 = @func_751(%552, %553, %554) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %556 = cast(meta[relay.Constant][44] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %557 = %555.0;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %559 = reshape(%556, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %560 = reshape(%558, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %561 = @func_1905(%559, %560) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %562 = cosh(%541) /* ty=Tensor[(6, 14, 6), float32] */;
  %563 = %544.2;
  %564 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %565 = %561.2;
  (%562, %563, %var_2164, %549, %var_2176, %557, %var_2182, %564, %565, meta[relay.Constant][44] /* ty=Tensor[(336), float32] */)
}

def @func_3981() -> Tensor[(5, 1, 4), float32] {
  %566 = @func_2593() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %566.0
}

def @func_6390() -> Tensor[(7, ?, 10), bool] {
  %567 = @func_5960() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) */;
  %567.1
}

def @func_6835(%var_6817: Tensor[(600), bool]) -> (Tensor[(252), int64], Tensor[(15, 10, 4), bool], Tensor[(600), bool]) {
  %568 = @func_5347() /* ty=(Tensor[(252), int64],) */;
  %569 = cast(%var_6817, dtype="bool") /* ty=Tensor[(600), bool] */;
  %570 = cast(%var_6817, dtype="bool") /* ty=Tensor[(600), bool] */;
  %571 = reshape(%569, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %572 = reshape(%570, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %573 = @func_2089(%571, %572) /* ty=(Tensor[(15, 10, 4), bool],) */;
  %574 = %568.0;
  %575 = %573.0;
  (%574, %575, %var_6817)
}

def @func_501(%var_417: Tensor[(11, 12, 12), float64]) -> (Tensor[(11, 12, 12), uint32],) {
  %576 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %577 = sqrt(%576) /* ty=Tensor[(11, 12, 12), float64] */;
  %578 = cast(%var_417, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %582 = logical_xor(%580, %581) /* ty=Tensor[(11, 12, 12), uint32] */;
  (%582,)
}

def @func_6214() -> Tensor[(5, 1, 4), float32] {
  @func_5886() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3123() -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  %583 = @func_2593() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %584 = %583.0;
  %585 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%584, %585)
}

def @func_3062(%var_3057: Tensor[(5, 3, 8), float32]) -> Tensor[(5, 3, 8), float32] {
  %586 = cast(%var_3057, dtype="float32") /* ty=Tensor[(5, 3, 8), float32] */;
  acos(%586) /* ty=Tensor[(5, 3, 8), float32] */
}

def @func_1331() -> Tensor[(5, ?, 4), bool] {
  %587 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %588 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %590 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%587, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%591, %592) /* ty=Tensor[(5, ?, 4), bool] */
}

def @func_4512(%var_4471: Tensor[(7, 6, 12), uint64], %var_4472: Tensor[(7, 6, 12), uint64]) -> Tensor[(7, 6, 12), uint64] {
  %593 = cast(%var_4472, dtype="uint64") /* ty=Tensor[(7, 6, 12), uint64] */;
  %594 = shape_of(%var_4471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_4471, dtype="uint64") /* ty=Tensor[(7, 6, 12), uint64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_or(%595, %596) /* ty=Tensor[(7, 6, 12), uint64] */
}

def @func_6291() -> (Tensor[(5, 1, 4), float32],) {
  %597 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  (%597,)
}

def @func_7136() -> Tensor[(15, 10, 4), bool] {
  %598 = @func_6538() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %598.0
}

def @func_4405() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) {
  %599 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %600 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 100), bool] */, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %601 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 100), bool] */, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %602 = reshape(%600, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %603 = reshape(%601, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %604 = @func_2089(%602, %603) /* ty=(Tensor[(15, 10, 4), bool],) */;
  %605 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 100), bool] */, dtype="float64") /* ty=Tensor[(6, 100), float64] */;
  %606 = %599.0;
  %607 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %608 = %604.0;
  %609 = log10(%605) /* ty=Tensor[(6, 100), float64] */;
  (%606, %607, %608, %609)
}

def @func_5022() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %610 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %611 = @func_4243() /* ty=Tensor[(5, 1, 4), float32] */;
  (%610, %611)
}

def @func_3717(%var_3702: Tensor[(8, 3, 5), uint64], %var_3703: Tensor[(8, 3, 5), uint64], %var_3712: Tensor[(252), int64], %var_3713: int16) -> (Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) {
  %612 = cast(%var_3703, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
  %613 = shape_of(%var_3702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_3702, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %616 = cast(%var_3712, dtype="int64") /* ty=Tensor[(252), int64] */;
  %617 = cast(%var_3713, dtype="int16") /* ty=int16 */;
  %618 = reshape(%616, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
  %619 = reshape(%617, newshape=[]) /* ty=int16 */;
  %620 = @func_2527(%618, %619) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
  %621 = bitwise_or(%614, %615) /* ty=Tensor[(8, 3, 5), uint64] */;
  %622 = %620.6;
  (%621, %622, %var_3712, %var_3713)
}

def @func_1235() -> Tensor[(5, 1, 4), float32] {
  @func_1203() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2527(%var_2477: Tensor[(6, 42), int64], %var_2501: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) {
  %623 = cast(%var_2501, dtype="int16") /* ty=int16 */;
  %624 = cast(meta[relay.Constant][46] /* ty=Tensor[(2304), int16] */, dtype="int16") /* ty=Tensor[(2304), int16] */;
  %625 = reshape(%623, newshape=[]) /* ty=int16 */;
  %626 = reshape(%624, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
  %627 = @func_2033(%625, %626) /* ty=(Tensor[(16, 16, 9), int16],) */;
  %628 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %629 = cast(%var_2477, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
  %630 = cast(%var_2477, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
  %631 = reshape(%629, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %632 = reshape(%630, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %633 = @func_1375(%631, %632) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
  %636 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  %637 = %627.0;
  %638 = %628.1;
  %639 = cos(%635) /* ty=Tensor[(9, 2, 14), float32] */;
  (%636, %var_2477, %637, %var_2501, meta[relay.Constant][46] /* ty=Tensor[(2304), int16] */, %638, %639)
}

def @func_5180(%var_5116: int16, %var_5117: Tensor[(160), bool]) -> (Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], Tensor[(6, 42), int64], int16, Tensor[(160), bool], Tensor[(15, 10, 4), bool], Tensor[(600), bool], Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %640 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 42), int64] */, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
  %641 = cast(%var_5116, dtype="int16") /* ty=int16 */;
  %642 = cast(%var_5117, dtype="bool") /* ty=Tensor[(160), bool] */;
  %643 = reshape(%640, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %644 = reshape(%641, newshape=[]) /* ty=int16 */;
  %645 = reshape(%642, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), bool] */;
  %646 = @func_2647(%643, %644, %645) /* ty=(Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) */;
  %647 = cast(meta[relay.Constant][48] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %648 = cast(meta[relay.Constant][48] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %649 = reshape(%647, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %650 = reshape(%648, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %651 = @func_2089(%649, %650) /* ty=(Tensor[(15, 10, 4), bool],) */;
  %652 = @func_2841() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
  %653 = @func_4452() /* ty=Tensor[(5, 1, 4), float32] */;
  %654 = %646.0;
  %655 = %651.0;
  %656 = %652.1;
  %657 = @func_2337() /* ty=Tensor[(5, 1, 4), float32] */;
  (%653, %654, meta[relay.Constant][47] /* ty=Tensor[(6, 42), int64] */, %var_5116, %var_5117, %655, meta[relay.Constant][48] /* ty=Tensor[(600), bool] */, %656, %657)
}

def @func_5886() -> Tensor[(5, 1, 4), float32] {
  @func_2451() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3020(%var_3006: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) {
  %658 = cast(%var_3006, dtype="int16") /* ty=int16 */;
  %659 = cast(meta[relay.Constant][49] /* ty=Tensor[(2304), int16] */, dtype="int16") /* ty=Tensor[(2304), int16] */;
  %660 = reshape(%658, newshape=[]) /* ty=int16 */;
  %661 = reshape(%659, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
  %662 = @func_2033(%660, %661) /* ty=(Tensor[(16, 16, 9), int16],) */;
  %663 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %664 = cast(meta[relay.Constant][51] /* ty=Tensor[(1584, 1), float64] */, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %665 = reshape(%663, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %666 = reshape(%664, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %667 = @func_1905(%665, %666) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %668 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %669 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %670 = %662.0;
  %671 = %667.3;
  %672 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  (%668, %669, %670, %var_3006, meta[relay.Constant][49] /* ty=Tensor[(2304), int16] */, %671, meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1584, 1), float64] */, %672)
}

def @func_6195() -> Tensor[(15, 10, 4), bool] {
  %673 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %673.0
}

def @func_2707(%var_2661: float64, %var_2689: Tensor[(3, 66), float64], %var_2702: Tensor[(1, 2, 14), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) {
  %674 = cast(%var_2661, dtype="float64") /* ty=float64 */;
  %675 = cast(meta[relay.Constant][52] /* ty=Tensor[(1080, 1), float64] */, dtype="float64") /* ty=Tensor[(1080, 1), float64] */;
  %676 = reshape(%674, newshape=[]) /* ty=float64 */;
  %677 = reshape(%675, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
  %678 = cast(meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %679 = reshape(%678, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %680 = cast(meta[relay.Constant][54] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %681 = cast(%var_2689, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %682 = cast(meta[relay.Constant][55] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %683 = reshape(%680, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %684 = reshape(%681, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %685 = reshape(%682, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %686 = @func_1077(%683, %684, %685) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %687 = @func_1035(%679) /* ty=Tensor[(14, 12, 2), float32] */;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %689 = cast(meta[relay.Constant][55] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %690 = reshape(%688, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %691 = reshape(%689, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %692 = @func_1905(%690, %691) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %693 = cast(%var_2661, dtype="float64") /* ty=float64 */;
  %694 = cast(%var_2702, dtype="float64") /* ty=Tensor[(1, 2, 14), float64] */;
  %695 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %696 = @func_999(%676, %677) /* ty=Tensor[(10, 9, 12), float64] */;
  %697 = %686.4;
  %698 = %692.2;
  %699 = floor_divide(%693, %694) /* ty=Tensor[(1, 2, 14), float64] */;
  (%695, %696, meta[relay.Constant][52] /* ty=Tensor[(1080, 1), float64] */, %687, meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, %697, meta[relay.Constant][54] /* ty=Tensor[(72), float32] */, %var_2689, meta[relay.Constant][55] /* ty=Tensor[(1584), float64] */, %698, %699)
}

def @func_7035(%var_6985: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(1584), int64]) {
  %700 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %701 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %702 = %701.1;
  %703 = cast(%var_6985, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(%702, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), bool] */;
  %707 = less(%705, %706) /* ty=Tensor[(1584), bool] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %709 = log2(%708) /* ty=Tensor[(1584), float32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(1), int32] */;
  %712 = cast(%709, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?), bool] */;
  %714 = less_equal(%712, %713) /* ty=Tensor[(1584), bool] */;
  %715 = cast(%var_6985, dtype="int64") /* ty=Tensor[(1584), int64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%714, dtype="int64") /* ty=Tensor[(1584), int64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), int64] */;
  %719 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %720 = %700.0;
  %721 = maximum(%717, %718) /* ty=Tensor[(1584), int64] */;
  (%719, %720, %721)
}

def @func_5073(%var_5066: Tensor[(33, 6), float64], %var_5067: Tensor[(1584), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) {
  %722 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float32") /* ty=Tensor[(14, 1, 3), float32] */;
  %723 = sin(%722) /* ty=Tensor[(14, 1, 3), float32] */;
  %724 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %725 = asinh(%724) /* ty=Tensor[(14, 1, 3), float64] */;
  %726 = cast(%725, dtype="uint32") /* ty=Tensor[(14, 1, 3), uint32] */;
  %727 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(14, 1, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 1, 3), float64] */, dtype="uint32") /* ty=Tensor[(14, 1, 3), uint32] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %730 = bitwise_and(%728, %729) /* ty=Tensor[(14, ?, 3), uint32] */;
  %731 = cast(%730, dtype="bool") /* ty=Tensor[(14, ?, 3), bool] */;
  %732 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%723, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %735 = cast(%var_5066, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %736 = cast(%var_5067, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %737 = reshape(%735, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %738 = reshape(%736, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %739 = @func_526(%737, %738) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %740 = equal(%733, %734) /* ty=Tensor[(14, ?, 3), bool] */;
  %741 = %739.3;
  (%740, %741, %var_5066, %var_5067)
}

def @func_6259() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %742 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %743 = %742.0;
  %744 = @func_5086() /* ty=Tensor[(5, 1, 4), float32] */;
  (%743, %744)
}

def @func_2451() -> Tensor[(5, 1, 4), float32] {
  @func_2375() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_1415() -> Tensor[(5, 1, 4), float32] {
  %745 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  log(%746) /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4745(%var_4615: Tensor[(10, 15, 3), float64], %var_4674: Tensor[(10, 15, 3), float64], %var_4698: Tensor[(2304), int16], %var_4722: Tensor[(10, 15, 3), bool], %var_4734: Tensor[(10, 15, 3), bool]) -> (Tensor[(10, 15, 3), float64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(5, ?, 4), float32], Tensor[(1584), float64], Tensor[(10, 15, 3), float32], Tensor[(5, 1, 4), float32], Tensor[(10, 15, 3), uint16]) {
  %747 = cast(%var_4674, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %748 = shape_of(%var_4615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_4615, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = less(%749, %750) /* ty=Tensor[(10, 15, 3), bool] */;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(10, 15, 3), float64] */;
  %753 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %754 = cast(%var_4698, dtype="int16") /* ty=Tensor[(2304), int16] */;
  %755 = reshape(%753, newshape=[]) /* ty=int16 */;
  %756 = reshape(%754, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
  %757 = @func_2033(%755, %756) /* ty=(Tensor[(16, 16, 9), int16],) */;
  %758 = cast(meta[relay.Constant][58] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %759 = reshape(%758, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %760 = @func_1513(%759) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) */;
  %761 = cast(%var_4615, dtype="float64") /* ty=Tensor[(10, 15, 3), float64] */;
  %762 = cos(%761) /* ty=Tensor[(10, 15, 3), float64] */;
  %763 = cast(%var_4615, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %767 = right_shift(%765, %766) /* ty=Tensor[(10, 15, 3), int32] */;
  %768 = cast(%767, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %769 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%762, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = logical_and(%770, %771) /* ty=Tensor[(10, 15, 3), bool] */;
  %773 = cast(%var_4722, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %777 = @func_3437() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %778 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(10, 15, 3), uint16] */;
  %779 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%772, dtype="uint16") /* ty=Tensor[(10, 15, 3), uint16] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %782 = sigmoid(%752) /* ty=Tensor[(10, 15, 3), float64] */;
  %783 = %757.0;
  %784 = %760.5;
  %785 = mod(%775, %776) /* ty=Tensor[(10, 15, 3), float32] */;
  %786 = %777.0;
  %787 = subtract(%780, %781) /* ty=Tensor[(10, 15, 3), uint16] */;
  (%782, %783, meta[relay.Constant][57] /* ty=int16 */, %var_4698, %784, meta[relay.Constant][58] /* ty=Tensor[(1584), float64] */, %785, %786, %787)
}

def @func_1203() -> Tensor[(5, 1, 4), float32] {
  %788 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  log10(%788) /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_1257(%var_1249: Tensor[(336), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) {
  %789 = cast(%var_1249, dtype="float32") /* ty=Tensor[(336), float32] */;
  %790 = reshape(%789, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %791 = @func_1035(%790) /* ty=Tensor[(14, 12, 2), float32] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %793 = reshape(%792, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %794 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  %795 = @func_1035(%793) /* ty=Tensor[(14, 12, 2), float32] */;
  (%794, %791, %var_1249, %795)
}

def @func_4351(%var_4342: Tensor[(14, 12, 14), uint32]) -> (Tensor[(14, 12, 14), bool],) {
  %796 = cast(meta[relay.Constant][60] /* ty=Tensor[(14, 12, 14), uint32] */, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %797 = shape_of(%var_4342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_4342, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = greater(%798, %799) /* ty=Tensor[(14, 12, 14), bool] */;
  (%800,)
}

def @func_6558() -> (Tensor[(5, 1, 4), float32], Tensor[(2, 4, 10), float32]) {
  %801 = @func_5670() /* ty=(Tensor[(2, 4, 10), float32],) */;
  %802 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  %803 = %801.0;
  (%802, %803)
}

def @func_1466(%var_1459: Tensor[(198), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) {
  %804 = cast(%var_1459, dtype="float64") /* ty=Tensor[(198), float64] */;
  %805 = reshape(%804, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %806 = @func_1133(%805) /* ty=(Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) */;
  %807 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %808 = %806.6;
  (%807, %808, %var_1459)
}

def @func_6739() -> (Tensor[(5, 1, 4), float32],) {
  %809 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  (%809,)
}

def @func_6967() -> (Tensor[(5, 1, 4), float32],) {
  %810 = @func_6739() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %811 = %810.0;
  (%811,)
}

def @func_6183() -> (Tensor[(5, ?, 4), int8],) {
  %812 = @func_4978() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) */;
  %813 = %812.1;
  (%813,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6968() -> (Tensor[(5, 1, 4), float32],) {
  %2 = fn () -> (Tensor[(5, 1, 4), float32],) {
    %0 = @func_6739() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_5183(%var_5181: int16, %var_5182: Tensor[(160), bool]) -> (Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], Tensor[(6, 42), int64], int16, Tensor[(160), bool], Tensor[(15, 10, 4), bool], Tensor[(600), bool], Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %21 = fn (%var_5116: int16, %var_5117: Tensor[(160), bool]) -> (Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], Tensor[(6, 42), int64], int16, Tensor[(160), bool], Tensor[(15, 10, 4), bool], Tensor[(600), bool], Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 42), int64] */, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
    %4 = cast(%var_5116, dtype="int16") /* ty=int16 */;
    %5 = cast(%var_5117, dtype="bool") /* ty=Tensor[(160), bool] */;
    %6 = reshape(%3, newshape=[252]) /* ty=Tensor[(252), int64] */;
    %7 = reshape(%4, newshape=[]) /* ty=int16 */;
    %8 = reshape(%5, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), bool] */;
    %9 = @func_2647(%6, %7, %8) /* ty=(Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %12 = reshape(%10, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
    %13 = reshape(%11, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
    %14 = @func_2089(%12, %13) /* ty=(Tensor[(15, 10, 4), bool],) */;
    %15 = @func_2841() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
    %16 = @func_4452() /* ty=Tensor[(5, 1, 4), float32] */;
    %17 = %9.0;
    %18 = %14.0;
    %19 = %15.1;
    %20 = @func_2337() /* ty=Tensor[(5, 1, 4), float32] */;
    (%16, %17, meta[relay.Constant][0] /* ty=Tensor[(6, 42), int64] */, %var_5116, %var_5117, %18, meta[relay.Constant][1] /* ty=Tensor[(600), bool] */, %19, %20)
  };
  %21(%var_5181, %var_5182) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], Tensor[(6, 42), int64], int16, Tensor[(160), bool], Tensor[(15, 10, 4), bool], Tensor[(600), bool], Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */
}

def @func_1728() -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) {
  %28 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) {
    %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 66), float64] */, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
    %23 = reshape(%22, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %24 = @func_1133(%23) /* ty=(Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) */;
    %25 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    %26 = %24.6;
    %27 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    (%25, %26, meta[relay.Constant][2] /* ty=Tensor[(3, 66), float64] */, %27)
  };
  %28() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */
}

def @func_503(%var_502: Tensor[(11, 12, 12), float64]) -> (Tensor[(11, 12, 12), uint32],) {
  %36 = fn (%var_417: Tensor[(11, 12, 12), float64]) -> (Tensor[(11, 12, 12), uint32],) {
    %29 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
    %30 = sqrt(%29) /* ty=Tensor[(11, 12, 12), float64] */;
    %31 = cast(%var_417, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %35 = logical_xor(%33, %34) /* ty=Tensor[(11, 12, 12), uint32] */;
    (%35,)
  };
  %36(%var_502) /* ty=(Tensor[(11, 12, 12), uint32],) */
}

def @func_1513(%var_1508: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) {
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %38 = cast(%var_1508, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %39 = reshape(%37, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %40 = reshape(%38, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %41 = @func_526(%39, %40) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %42 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(5, ?, 4), float32] */;
  %44 = cos(%43) /* ty=Tensor[(5, ?, 4), float32] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(5, ?, 4), float32] */;
  %46 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %47 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %48 = %41.0;
  %49 = asinh(%45) /* ty=Tensor[(5, ?, 4), float32] */;
  (%46, %47, %48, meta[relay.Constant][3] /* ty=Tensor[(198), float64] */, %var_1508, %49)
}

def @func_4218(%var_4189: Tensor[(4, 5, 6), bool], %var_4190: Tensor[(4, 5, 6), bool]) -> (Tensor[(1584, 1), float64], Tensor[(198), float64], Tensor[(4, 396), float64], Tensor[(4, 5, 6), bool]) {
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %51 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 396), float64] */, dtype="float64") /* ty=Tensor[(4, 396), float64] */;
  %52 = reshape(%50, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %53 = reshape(%51, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %54 = @func_526(%52, %53) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %55 = cast(%var_4190, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %56 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_4189, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = logical_and(%57, %58) /* ty=Tensor[(4, 5, 6), bool] */;
  %60 = cast(%var_4189, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(4, 5, 6), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = %54.2;
  %65 = greater_equal(%62, %63) /* ty=Tensor[(4, 5, 6), bool] */;
  (%64, meta[relay.Constant][4] /* ty=Tensor[(198), float64] */, meta[relay.Constant][5] /* ty=Tensor[(4, 396), float64] */, %65)
}

def @func_2155() -> (Tensor[(5, 1, 4), float32],) {
  %67 = fn () -> (Tensor[(5, 1, 4), float32],) {
    %66 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
    (%66,)
  };
  %67() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_4179(%var_4177: Tensor[(72), float32], %var_4178: Tensor[(198), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 4, 13), float32], Tensor[(364), float32], Tensor[(7, 4, 9), int16], Tensor[(252), float32], Tensor[(5, ?, 4), bool]) {
  %93 = fn (%var_4129: Tensor[(72), float32], %var_4130: Tensor[(198), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 4, 13), float32], Tensor[(364), float32], Tensor[(7, 4, 9), int16], Tensor[(252), float32], Tensor[(5, ?, 4), bool]) {
    %68 = cast(%var_4129, dtype="float32") /* ty=Tensor[(72), float32] */;
    %69 = cast(%var_4130, dtype="float64") /* ty=Tensor[(198), float64] */;
    %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %71 = reshape(%68, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
    %72 = reshape(%69, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %73 = reshape(%70, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %74 = @func_751(%71, %72, %73) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
    %75 = cast(meta[relay.Constant][7] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
    %76 = reshape(%75, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
    %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %78 = reshape(%77, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
    %79 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
    %80 = cast(%79, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
    %81 = tan(%80) /* ty=Tensor[(5, 1, 4), float64] */;
    %82 = cast(%81, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    %83 = atanh(%82) /* ty=Tensor[(5, 1, 4), float32] */;
    %84 = cast(%79, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%83, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %88 = @func_4057() /* ty=Tensor[(5, 7, 4), float32] */;
    %89 = %74.0;
    %90 = @func_2250(%76) /* ty=Tensor[(7, 4, 13), float32] */;
    %91 = @func_2879(%78) /* ty=Tensor[(7, 4, 9), int16] */;
    %92 = logical_and(%86, %87) /* ty=Tensor[(5, ?, 4), bool] */;
    (%88, %89, %var_4129, %var_4130, meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */, %90, meta[relay.Constant][7] /* ty=Tensor[(364), float32] */, %91, meta[relay.Constant][8] /* ty=Tensor[(252), float32] */, %92)
  };
  %93(%var_4177, %var_4178) /* ty=(Tensor[(5, 7, 4), float32], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 4, 13), float32], Tensor[(364), float32], Tensor[(7, 4, 9), int16], Tensor[(252), float32], Tensor[(5, ?, 4), bool]) */
}

def @func_1905(%var_1891: Tensor[(2, 168), float32], %var_1901: Tensor[(1584), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) {
  %94 = cast(%var_1891, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %95 = reshape(%94, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %96 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
  %98 = acosh(%97) /* ty=Tensor[(5, 1, 4), float64] */;
  %99 = cast(%96, dtype="uint64") /* ty=Tensor[(5, 1, 4), uint64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="uint64") /* ty=Tensor[(5, 1, 4), uint64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %103 = cast(%var_1901, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %104 = reshape(%103, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %105 = @func_501(%104) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %106 = @func_1035(%95) /* ty=Tensor[(14, 12, 2), float32] */;
  %107 = bitwise_or(%101, %102) /* ty=Tensor[(5, ?, 4), uint64] */;
  %108 = %105.0;
  (%106, %var_1891, %107, %108, %var_1901)
}

def @func_2593() -> (Tensor[(5, 1, 4), float32],) {
  %109 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  (%109,)
}

def @func_5887() -> Tensor[(5, 1, 4), float32] {
  %110 = fn () -> Tensor[(5, 1, 4), float32] {
    @func_2451() /* ty=Tensor[(5, 1, 4), float32] */
  };
  %110() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_1375(%var_1366: Tensor[(9, 2, 14), int64], %var_1367: Tensor[(9, 2, 14), int64]) -> (Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) {
  %111 = cast(%var_1367, dtype="int64") /* ty=Tensor[(9, 2, 14), int64] */;
  %112 = shape_of(%var_1366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_1366, dtype="int64") /* ty=Tensor[(9, 2, 14), int64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %115 = right_shift(%113, %114) /* ty=Tensor[(9, 2, 14), int64] */;
  %116 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  (%115, %116)
}

def @func_5404() -> (Tensor[(15, 10, 4), bool], Tensor[(5, ?, 4), bool]) {
  %117 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %118 = %117.0;
  %119 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%118, %119)
}

def @func_3782(%var_3781: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), uint8], Tensor[(5, 13, 4), bool], Tensor[(5, 13, 4), float32]) {
  %134 = fn (%var_3754: Tensor[(5, 13, 4), float32]) -> (Tensor[(5, 13, 4), uint8], Tensor[(5, 13, 4), bool], Tensor[(5, 13, 4), float32]) {
    %120 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    %122 = cast(%var_3754, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
    %123 = add(%121, %122) /* ty=Tensor[(5, 13, 4), float32] */;
    %124 = cast(%120, dtype="uint8") /* ty=Tensor[(5, 1, 4), uint8] */;
    %125 = cast(%123, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
    %126 = cast(%120, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    %127 = rsqrt(%126) /* ty=Tensor[(5, 1, 4), float32] */;
    %128 = cast(%127, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %129 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 4), bool] */;
    %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 4), float32] */;
    %131 = bitwise_or(%124, %125) /* ty=Tensor[(5, 13, 4), uint8] */;
    %132 = equal(%128, %129) /* ty=Tensor[(5, 13, 4), bool] */;
    %133 = sin(%130) /* ty=Tensor[(5, 13, 4), float32] */;
    (%131, %132, %133)
  };
  %134(%var_3781) /* ty=(Tensor[(5, 13, 4), uint8], Tensor[(5, 13, 4), bool], Tensor[(5, 13, 4), float32]) */
}

def @func_2452() -> Tensor[(5, 1, 4), float32] {
  %135 = fn () -> Tensor[(5, 1, 4), float32] {
    @func_2375() /* ty=Tensor[(5, 1, 4), float32] */
  };
  %135() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4577(%var_4575: Tensor[(198), float64], %var_4576: Tensor[(504), uint64]) -> (Tensor[(5, 1, 4), float32], Tensor[(11, 12, 12), uint32], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 6, 12), uint64], Tensor[(504), uint64]) {
  %151 = fn (%var_4547: Tensor[(198), float64], %var_4559: Tensor[(504), uint64]) -> (Tensor[(5, 1, 4), float32], Tensor[(11, 12, 12), uint32], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 6, 12), uint64], Tensor[(504), uint64]) {
    %136 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %138 = cast(%var_4547, dtype="float64") /* ty=Tensor[(198), float64] */;
    %139 = cast(meta[relay.Constant][11] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %140 = reshape(%137, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
    %141 = reshape(%138, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %142 = reshape(%139, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %143 = @func_751(%140, %141, %142) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
    %144 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(504), uint64] */;
    %145 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(504), uint64] */;
    %146 = reshape(%144, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), uint64] */;
    %147 = reshape(%145, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), uint64] */;
    %148 = %136.0;
    %149 = %143.2;
    %150 = @func_4512(%146, %147) /* ty=Tensor[(7, 6, 12), uint64] */;
    (%148, %149, meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, %var_4547, meta[relay.Constant][11] /* ty=Tensor[(1584), float64] */, %150, %var_4559)
  };
  %151(%var_4575, %var_4576) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(11, 12, 12), uint32], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(7, 6, 12), uint64], Tensor[(504), uint64]) */
}

def @func_4354(%var_4352: Tensor[(14, 12, 14), uint32]) -> (Tensor[(14, 12, 14), bool],) {
  @func_4351(%var_4352) /* ty=(Tensor[(14, 12, 14), bool],) */
}

def @func_6185() -> (Tensor[(5, ?, 4), int8],) {
  @func_6183() /* ty=(Tensor[(5, ?, 4), int8],) */
}

def @func_1082(%var_1079: Tensor[(72), float32], %var_1080: Tensor[(198), float64], %var_1081: Tensor[(1584), float64]) -> (Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  @func_1077(%var_1079, %var_1080, %var_1081) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */
}

def @func_3437() -> (Tensor[(5, 1, 4), float32],) {
  %152 = @func_3186() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) */;
  %153 = %152.3;
  (%153,)
}

def @func_3439() -> (Tensor[(5, 1, 4), float32],) {
  @func_3437() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_6292() -> (Tensor[(5, 1, 4), float32],) {
  %155 = fn () -> (Tensor[(5, 1, 4), float32],) {
    %154 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    (%154,)
  };
  %155() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_2253(%var_2251: Tensor[(7, 4, 13), float32]) -> Tensor[(7, 4, 13), float32] {
  @func_2250(%var_2251) /* ty=Tensor[(7, 4, 13), float32] */
}

def @func_3722(%var_3718: Tensor[(8, 3, 5), uint64], %var_3719: Tensor[(8, 3, 5), uint64], %var_3720: Tensor[(252), int64], %var_3721: int16) -> (Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) {
  %167 = fn (%var_3702: Tensor[(8, 3, 5), uint64], %var_3703: Tensor[(8, 3, 5), uint64], %var_3712: Tensor[(252), int64], %var_3713: int16) -> (Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) {
    %156 = cast(%var_3703, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
    %157 = shape_of(%var_3702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %158 = cast(%var_3702, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %160 = cast(%var_3712, dtype="int64") /* ty=Tensor[(252), int64] */;
    %161 = cast(%var_3713, dtype="int16") /* ty=int16 */;
    %162 = reshape(%160, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
    %163 = reshape(%161, newshape=[]) /* ty=int16 */;
    %164 = @func_2527(%162, %163) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
    %165 = bitwise_or(%158, %159) /* ty=Tensor[(8, 3, 5), uint64] */;
    %166 = %164.6;
    (%165, %166, %var_3712, %var_3713)
  };
  %167(%var_3718, %var_3719, %var_3720, %var_3721) /* ty=(Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) */
}

def @func_5875(%var_5853: Tensor[(5, 2, 1), float64], %var_5863: Tensor[(28), float64]) -> (Tensor[(5, 2, 1), float64], Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(198), float64], Tensor[(28), float64]) {
  %168 = cast(%var_5853, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  %169 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %170 = cast(-0.121111f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %171 = cast(meta[relay.Constant][12] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %172 = cast(%var_5863, dtype="float64") /* ty=Tensor[(28), float64] */;
  %173 = reshape(%170, newshape=[]) /* ty=float64 */;
  %174 = reshape(%171, newshape=[3, 66]) /* ty=Tensor[(3, 66), float64] */;
  %175 = reshape(%172, newshape=[1, 2, 14]) /* ty=Tensor[(1, 2, 14), float64] */;
  %176 = @func_2707(%173, %174, %175) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) */;
  %177 = tan(%168) /* ty=Tensor[(5, 2, 1), float64] */;
  %178 = %169.0;
  %179 = %176.1;
  (%177, %178, %179, -0.121111f64 /* ty=float64 */, meta[relay.Constant][12] /* ty=Tensor[(198), float64] */, %var_5863)
}

def @func_6391() -> Tensor[(7, ?, 10), bool] {
  %181 = fn () -> Tensor[(7, ?, 10), bool] {
    %180 = @func_5960() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) */;
    %180.1
  };
  %181() /* ty=Tensor[(7, ?, 10), bool] */
}

def @func_5561(%var_5559: Tensor[(3, 5, 7), int32], %var_5560: Tensor[(3, 5, 7), int32]) -> Tensor[(3, 5, 7), bool] {
  %186 = fn (%var_5553: Tensor[(3, 5, 7), int32], %var_5554: Tensor[(3, 5, 7), int32]) -> Tensor[(3, 5, 7), bool] {
    %182 = cast(%var_5554, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
    %183 = shape_of(%var_5553, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%var_5553, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%184, %185) /* ty=Tensor[(3, 5, 7), bool] */
  };
  %186(%var_5559, %var_5560) /* ty=Tensor[(3, 5, 7), bool] */
}

def @func_6539() -> (Tensor[(15, 10, 4), bool],) {
  %188 = fn () -> (Tensor[(15, 10, 4), bool],) {
    %187 = @func_6195() /* ty=Tensor[(15, 10, 4), bool] */;
    (%187,)
  };
  %188() /* ty=(Tensor[(15, 10, 4), bool],) */
}

def @func_3064(%var_3063: Tensor[(5, 3, 8), float32]) -> Tensor[(5, 3, 8), float32] {
  %190 = fn (%var_3057: Tensor[(5, 3, 8), float32]) -> Tensor[(5, 3, 8), float32] {
    %189 = cast(%var_3057, dtype="float32") /* ty=Tensor[(5, 3, 8), float32] */;
    acos(%189) /* ty=Tensor[(5, 3, 8), float32] */
  };
  %190(%var_3063) /* ty=Tensor[(5, 3, 8), float32] */
}

def @func_3563(%var_3560: Tensor[(70), float32], %var_3561: Tensor[(72), float32], %var_3562: Tensor[(198), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32], Tensor[(5, 6, 4), int16], Tensor[(6, 15, 10), int8], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  @func_3558(%var_3560, %var_3561, %var_3562) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32], Tensor[(5, 6, 4), int16], Tensor[(6, 15, 10), int8], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */
}

def @func_3295(%var_3287: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], int16) {
  %191 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %192 = cast(%var_3287, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %196 = cast(meta[relay.Constant][13] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %197 = reshape(%196, newshape=[]) /* ty=int16 */;
  %198 = @func_3020(%197) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) */;
  %199 = right_shift(%194, %195) /* ty=Tensor[(5, ?, 4), int8] */;
  %200 = %198.1;
  (%199, %200, meta[relay.Constant][13] /* ty=int16 */)
}

def @func_3022(%var_3021: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) {
  %216 = fn (%var_3006: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) {
    %201 = cast(%var_3006, dtype="int16") /* ty=int16 */;
    %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(2304), int16] */, dtype="int16") /* ty=Tensor[(2304), int16] */;
    %203 = reshape(%201, newshape=[]) /* ty=int16 */;
    %204 = reshape(%202, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
    %205 = @func_2033(%203, %204) /* ty=(Tensor[(16, 16, 9), int16],) */;
    %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(1584, 1), float64] */, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
    %208 = reshape(%206, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
    %209 = reshape(%207, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %210 = @func_1905(%208, %209) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
    %211 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
    %212 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    %213 = %205.0;
    %214 = %210.3;
    %215 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
    (%211, %212, %213, %var_3006, meta[relay.Constant][14] /* ty=Tensor[(2304), int16] */, %214, meta[relay.Constant][15] /* ty=Tensor[(336), float32] */, meta[relay.Constant][16] /* ty=Tensor[(1584, 1), float64] */, %215)
  };
  %216(%var_3021) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(11, 12, 12), uint32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(5, 1, 4), float32]) */
}

def @func_4979() -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) {
  %222 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) {
    %217 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
    %218 = cast(%217, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    %219 = reshape(%218, newshape=[5, 1, 4]) /* ty=Tensor[(5, 1, 4), float32] */;
    %220 = @func_1848(%219) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
    %221 = %220.0;
    (%217, %221)
  };
  %222() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) */
}

def @func_6835(%var_6817: Tensor[(600), bool]) -> (Tensor[(252), int64], Tensor[(15, 10, 4), bool], Tensor[(600), bool]) {
  %223 = @func_5347() /* ty=(Tensor[(252), int64],) */;
  %224 = cast(%var_6817, dtype="bool") /* ty=Tensor[(600), bool] */;
  %225 = cast(%var_6817, dtype="bool") /* ty=Tensor[(600), bool] */;
  %226 = reshape(%224, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %227 = reshape(%225, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %228 = @func_2089(%226, %227) /* ty=(Tensor[(15, 10, 4), bool],) */;
  %229 = %223.0;
  %230 = %228.0;
  (%229, %230, %var_6817)
}

def @func_1257(%var_1249: Tensor[(336), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) {
  %231 = cast(%var_1249, dtype="float32") /* ty=Tensor[(336), float32] */;
  %232 = reshape(%231, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %233 = @func_1035(%232) /* ty=Tensor[(14, 12, 2), float32] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %235 = reshape(%234, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %236 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  %237 = @func_1035(%235) /* ty=Tensor[(14, 12, 2), float32] */;
  (%236, %233, %var_1249, %237)
}

def @func_1135(%var_1134: Tensor[(198), float64]) -> (Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) {
  %265 = fn (%var_1113: Tensor[(198), float64]) -> (Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) {
    %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
    %239 = cast(meta[relay.Constant][18] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %240 = reshape(%239, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
    %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
    %242 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
    %243 = cast(meta[relay.Constant][20] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %244 = reshape(%241, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %245 = reshape(%242, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %246 = reshape(%243, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %247 = @func_1077(%244, %245, %246) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
    %248 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
    %249 = cast(meta[relay.Constant][20] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %250 = reshape(%248, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
    %251 = reshape(%249, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
    %252 = @func_526(%250, %251) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
    %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
    %254 = cast(%var_1113, dtype="float64") /* ty=Tensor[(198), float64] */;
    %255 = %247.4;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %257 = reshape(%253, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
    %258 = reshape(%254, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %259 = reshape(%256, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %260 = @func_751(%257, %258, %259) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
    %261 = tan(%238) /* ty=Tensor[(7, 7), float64] */;
    %262 = @func_1035(%240) /* ty=Tensor[(14, 12, 2), float32] */;
    %263 = %252.0;
    %264 = %260.1;
    (%261, %262, meta[relay.Constant][18] /* ty=Tensor[(336), float32] */, %255, meta[relay.Constant][19] /* ty=Tensor[(1, 72), float32] */, %var_1113, meta[relay.Constant][20] /* ty=Tensor[(1584), float64] */, %263, %264)
  };
  %265(%var_1134) /* ty=(Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) */
}

def @func_6741() -> (Tensor[(5, 1, 4), float32],) {
  @func_6739() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_3241(%var_3234: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %267 = cast(meta[relay.Constant][22] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %268 = cast(%var_3234, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %269 = reshape(%266, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %270 = reshape(%267, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %271 = reshape(%268, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %272 = @func_1077(%269, %270, %271) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %273 = @func_2337() /* ty=Tensor[(5, 1, 4), float32] */;
  %274 = %272.4;
  (%273, %274, meta[relay.Constant][21] /* ty=Tensor[(72), float32] */, meta[relay.Constant][22] /* ty=Tensor[(198), float64] */, %var_3234)
}

def @func_6962() -> Tensor[(5, ?, 4), int32] {
  @func_6960() /* ty=Tensor[(5, ?, 4), int32] */
}

def @func_3918() -> (Tensor[(10, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32]) {
  %275 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 9), float32] */;
  %276 = cast(meta[relay.Constant][24] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %277 = reshape(%276, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), float32] */;
  %278 = @func_3345(%277) /* ty=(Tensor[(5, 14, 9), float32],) */;
  %279 = log2(%275) /* ty=Tensor[(10, 9), float32] */;
  %280 = %278.0;
  (%279, %280, meta[relay.Constant][24] /* ty=Tensor[(70), float32] */)
}

def @func_6215() -> Tensor[(5, 1, 4), float32] {
  %281 = fn () -> Tensor[(5, 1, 4), float32] {
    @func_5886() /* ty=Tensor[(5, 1, 4), float32] */
  };
  %281() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4245() -> Tensor[(5, 1, 4), float32] {
  @func_4243() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_7137() -> Tensor[(15, 10, 4), bool] {
  %283 = fn () -> Tensor[(15, 10, 4), bool] {
    %282 = @func_6538() /* ty=(Tensor[(15, 10, 4), bool],) */;
    %282.0
  };
  %283() /* ty=Tensor[(15, 10, 4), bool] */
}

def @func_6196() -> Tensor[(15, 10, 4), bool] {
  %285 = fn () -> Tensor[(15, 10, 4), bool] {
    %284 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
    %284.0
  };
  %285() /* ty=Tensor[(15, 10, 4), bool] */
}

def @func_4243() -> Tensor[(5, 1, 4), float32] {
  @func_3335() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_5073(%var_5066: Tensor[(33, 6), float64], %var_5067: Tensor[(1584), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) {
  %286 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float32") /* ty=Tensor[(14, 1, 3), float32] */;
  %287 = sin(%286) /* ty=Tensor[(14, 1, 3), float32] */;
  %288 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %289 = asinh(%288) /* ty=Tensor[(14, 1, 3), float64] */;
  %290 = cast(%289, dtype="uint32") /* ty=Tensor[(14, 1, 3), uint32] */;
  %291 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(14, 1, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 1, 3), float64] */, dtype="uint32") /* ty=Tensor[(14, 1, 3), uint32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %294 = bitwise_and(%292, %293) /* ty=Tensor[(14, ?, 3), uint32] */;
  %295 = cast(%294, dtype="bool") /* ty=Tensor[(14, ?, 3), bool] */;
  %296 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%287, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = cast(%var_5066, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %300 = cast(%var_5067, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %301 = reshape(%299, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %302 = reshape(%300, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %303 = @func_526(%301, %302) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %304 = equal(%297, %298) /* ty=Tensor[(14, ?, 3), bool] */;
  %305 = %303.3;
  (%304, %305, %var_5066, %var_5067)
}

def @func_2250(%var_2243: Tensor[(7, 4, 13), float32]) -> Tensor[(7, 4, 13), float32] {
  %306 = cast(%var_2243, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  atan(%306) /* ty=Tensor[(7, 4, 13), float32] */
}

def @func_3824(%var_3823: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), float64] {
  %311 = fn (%var_3809: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), float64] {
    %307 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %308 = %307.0;
    %309 = cast(%308, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
    %310 = cast(%var_3809, dtype="float64") /* ty=Tensor[(5, 9, 4), float64] */;
    mod(%309, %310) /* ty=Tensor[(5, 9, 4), float64] */
  };
  %311(%var_3823) /* ty=Tensor[(5, 9, 4), float64] */
}

def @func_1379(%var_1377: Tensor[(9, 2, 14), int64], %var_1378: Tensor[(9, 2, 14), int64]) -> (Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) {
  @func_1375(%var_1377, %var_1378) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */
}

def @func_4418() -> (Tensor[(15, 10, 4), bool],) {
  @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */
}

def @func_5545() -> Tensor[(5, ?, 4), bool] {
  %313 = fn () -> Tensor[(5, ?, 4), bool] {
    %312 = @func_3123() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
    %312.1
  };
  %313() /* ty=Tensor[(5, ?, 4), bool] */
}

def @func_2376() -> Tensor[(5, 1, 4), float32] {
  %314 = fn () -> Tensor[(5, 1, 4), float32] {
    @func_1203() /* ty=Tensor[(5, 1, 4), float32] */
  };
  %314() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4454() -> Tensor[(5, 1, 4), float32] {
  @func_4452() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2887() -> (Tensor[(5, 1, 4), float32],) {
  %316 = fn () -> (Tensor[(5, 1, 4), float32],) {
    %315 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
    (%315,)
  };
  %316() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_5962() -> (Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) {
  @func_5960() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) */
}

def @func_756(%var_753: Tensor[(6, 3, 4), float32], %var_754: Tensor[(198), float64], %var_755: Tensor[(1584), float64]) -> (Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) {
  @func_751(%var_753, %var_754, %var_755) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */
}

def @func_1035(%var_1028: Tensor[(14, 12, 2), float32]) -> Tensor[(14, 12, 2), float32] {
  %317 = cast(%var_1028, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  atan(%317) /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_3348(%var_3346: Tensor[(5, 14, 1), float32]) -> (Tensor[(5, 14, 9), float32],) {
  @func_3345(%var_3346) /* ty=(Tensor[(5, 14, 9), float32],) */
}

def @func_2036(%var_2034: int16, %var_2035: Tensor[(16, 16, 9), int16]) -> (Tensor[(16, 16, 9), int16],) {
  %321 = fn (%var_2017: int16, %var_2018: Tensor[(16, 16, 9), int16]) -> (Tensor[(16, 16, 9), int16],) {
    %318 = cast(%var_2017, dtype="int16") /* ty=int16 */;
    %319 = cast(%var_2018, dtype="int16") /* ty=Tensor[(16, 16, 9), int16] */;
    %320 = minimum(%318, %319) /* ty=Tensor[(16, 16, 9), int16] */;
    (%320,)
  };
  %321(%var_2034, %var_2035) /* ty=(Tensor[(16, 16, 9), int16],) */
}

def @func_4470() -> (Tensor[(7, 1, 10), float32],) {
  @func_4468() /* ty=(Tensor[(7, 1, 10), float32],) */
}

def @func_1077(%var_1066: Tensor[(72), float32], %var_1067: Tensor[(198), float64], %var_1068: Tensor[(1584), float64]) -> (Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %322 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  %323 = sinh(%322) /* ty=Tensor[(6, 15, 10), float32] */;
  %324 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  %325 = asin(%324) /* ty=Tensor[(6, 15, 10), float32] */;
  %326 = cast(%325, dtype="int8") /* ty=Tensor[(6, 15, 10), int8] */;
  %327 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%323, dtype="int8") /* ty=Tensor[(6, 15, 10), int8] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %330 = cast(%var_1066, dtype="float32") /* ty=Tensor[(72), float32] */;
  %331 = cast(%var_1067, dtype="float64") /* ty=Tensor[(198), float64] */;
  %332 = cast(%var_1068, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %333 = reshape(%330, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
  %334 = reshape(%331, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %335 = reshape(%332, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %336 = @func_751(%333, %334, %335) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
  %337 = add(%328, %329) /* ty=Tensor[(6, 15, 10), int8] */;
  %338 = %336.3;
  (%337, %338, %var_1066, %var_1067, %var_1068)
}

def @func_526(%var_506: Tensor[(9, 2, 11), float64], %var_518: Tensor[(1584, 1), float64]) -> (Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) {
  %339 = cast(%var_506, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %340 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(9, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %343 = cast(%var_518, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %344 = reshape(%343, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %345 = @func_501(%344) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %346 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
  %347 = floor_divide(%341, %342) /* ty=Tensor[(9, 2, 11), float64] */;
  %348 = %345.0;
  %349 = tan(%346) /* ty=Tensor[(9, 2, 11), float64] */;
  (%347, %348, %var_518, %349)
}

def @func_4316() -> (Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) {
  @func_4314() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) */
}

def @func_3244(%var_3242: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  @func_3241(%var_3242) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */
}

def @func_6268() -> (Tensor[(5, 1, 4), float32],) {
  @func_6266() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_5384() -> Tensor[(5, 1, 4), float32] {
  %350 = @func_2886() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %350.0
}

def @func_4966(%var_4965: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
  %354 = fn (%var_4957: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
    %351 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
    %352 = cast(%351, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %353 = cast(%var_4957, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    greater_equal(%352, %353) /* ty=Tensor[(5, 11, 4), bool] */
  };
  %354(%var_4965) /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_3186() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) {
  %355 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %356 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %357 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %358 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  (%355, %356, %357, %358)
}

def @func_3337() -> Tensor[(5, 1, 4), float32] {
  @func_3335() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2559() -> Tensor[(5, 1, 4), float32] {
  @func_2557() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2595() -> (Tensor[(5, 1, 4), float32],) {
  @func_2593() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_5348() -> (Tensor[(252), int64],) {
  %361 = fn () -> (Tensor[(252), int64],) {
    %359 = @func_4314() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) */;
    %360 = %359.1;
    (%360,)
  };
  %361() /* ty=(Tensor[(252), int64],) */
}

def @func_6051() -> (Tensor[(5, 1, 4), float32],) {
  %362 = @func_4452() /* ty=Tensor[(5, 1, 4), float32] */;
  (%362,)
}

def @func_6183() -> (Tensor[(5, ?, 4), int8],) {
  %363 = @func_4978() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), int8]) */;
  %364 = %363.1;
  (%364,)
}

def @func_7123() -> Tensor[(5, 3, 4), uint32] {
  @func_7121() /* ty=Tensor[(5, 3, 4), uint32] */
}

def @func_4515(%var_4513: Tensor[(7, 6, 12), uint64], %var_4514: Tensor[(7, 6, 12), uint64]) -> Tensor[(7, 6, 12), uint64] {
  %369 = fn (%var_4471: Tensor[(7, 6, 12), uint64], %var_4472: Tensor[(7, 6, 12), uint64]) -> Tensor[(7, 6, 12), uint64] {
    %365 = cast(%var_4472, dtype="uint64") /* ty=Tensor[(7, 6, 12), uint64] */;
    %366 = shape_of(%var_4471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(%var_4471, dtype="uint64") /* ty=Tensor[(7, 6, 12), uint64] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_or(%367, %368) /* ty=Tensor[(7, 6, 12), uint64] */
  };
  %369(%var_4513, %var_4514) /* ty=Tensor[(7, 6, 12), uint64] */
}

def @func_2712(%var_2709: float64, %var_2710: Tensor[(3, 66), float64], %var_2711: Tensor[(1, 2, 14), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) {
  @func_2707(%var_2709, %var_2710, %var_2711) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) */
}

def @func_1415() -> Tensor[(5, 1, 4), float32] {
  %370 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  log(%371) /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_5086() -> Tensor[(5, 1, 4), float32] {
  @func_3335() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_6266() -> (Tensor[(5, 1, 4), float32],) {
  %372 = @func_4243() /* ty=Tensor[(5, 1, 4), float32] */;
  (%372,)
}

def @func_1909(%var_1907: Tensor[(2, 168), float32], %var_1908: Tensor[(1584), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) {
  @func_1905(%var_1907, %var_1908) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */
}

def @func_6361(%var_6360: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float32]) {
  %385 = fn (%var_6347: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float32]) {
    %373 = cast(meta[relay.Constant][28] /* ty=Tensor[(33, 6), float64] */, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
    %374 = cast(%var_6347, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %375 = reshape(%373, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
    %376 = reshape(%374, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %377 = @func_5073(%375, %376) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) */;
    %378 = cast(meta[relay.Constant][29] /* ty=Tensor[(1584), float64] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %379 = shape_of(%var_6347, dtype="int32") /* ty=Tensor[(1), int32] */;
    %380 = cast(%var_6347, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), float32] */;
    %382 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
    %383 = %377.1;
    %384 = floor_divide(%380, %381) /* ty=Tensor[(1584), float32] */;
    (%382, %383, meta[relay.Constant][28] /* ty=Tensor[(33, 6), float64] */, %384)
  };
  %385(%var_6360) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float32]) */
}

def @func_6559() -> (Tensor[(5, 1, 4), float32], Tensor[(2, 4, 10), float32]) {
  %389 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(2, 4, 10), float32]) {
    %386 = @func_5670() /* ty=(Tensor[(2, 4, 10), float32],) */;
    %387 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
    %388 = %386.0;
    (%387, %388)
  };
  %389() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(2, 4, 10), float32]) */
}

def @func_6960() -> Tensor[(5, ?, 4), int32] {
  %390 = @func_6183() /* ty=(Tensor[(5, ?, 4), int8],) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(5, ?, 4), float64] */;
  %393 = cosh(%392) /* ty=Tensor[(5, ?, 4), float64] */;
  %394 = cast(%391, dtype="int32") /* ty=Tensor[(5, ?, 4), int32] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="int32") /* ty=Tensor[(5, ?, 4), int32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%396, %397) /* ty=Tensor[(5, ?, 4), int32] */
}

def @func_2093(%var_2091: Tensor[(15, 10, 4), bool], %var_2092: Tensor[(15, 10, 4), bool]) -> (Tensor[(15, 10, 4), bool],) {
  @func_2089(%var_2091, %var_2092) /* ty=(Tensor[(15, 10, 4), bool],) */
}

def @func_4351(%var_4342: Tensor[(14, 12, 14), uint32]) -> (Tensor[(14, 12, 14), bool],) {
  %398 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 12, 14), uint32] */, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %399 = shape_of(%var_4342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_4342, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = greater(%400, %401) /* ty=Tensor[(14, 12, 14), bool] */;
  (%402,)
}

def @func_2967(%var_2965: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(9, 2, 14), int64], Tensor[(252), int64]) {
  @func_2964(%var_2965) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(9, 2, 14), int64], Tensor[(252), int64]) */
}

def @func_6653(%var_6651: Tensor[(120, 1), uint64], %var_6652: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(9, 2, 14), float32], Tensor[(120, 1), uint64], Tensor[(252), int64], int16, Tensor[(6, 42), int64], Tensor[(5, ?, 4), bool]) {
  @func_6649(%var_6651, %var_6652) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(9, 2, 14), float32], Tensor[(120, 1), uint64], Tensor[(252), int64], int16, Tensor[(6, 42), int64], Tensor[(5, ?, 4), bool]) */
}

def @func_1466(%var_1459: Tensor[(198), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) {
  %403 = cast(%var_1459, dtype="float64") /* ty=Tensor[(198), float64] */;
  %404 = reshape(%403, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %405 = @func_1133(%404) /* ty=(Tensor[(7, 7), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(1, 72), float32], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(9, 2, 11), float64], Tensor[(1584), float64]) */;
  %406 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  %407 = %405.6;
  (%406, %407, %var_1459)
}

def @func_3125() -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  @func_3123() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */
}

def @func_1332() -> Tensor[(5, ?, 4), bool] {
  %414 = fn () -> Tensor[(5, ?, 4), bool] {
    %408 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
    %409 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
    %410 = cast(%409, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %411 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%408, dtype="bool") /* ty=Tensor[(5, 1, 4), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%412, %413) /* ty=Tensor[(5, ?, 4), bool] */
  };
  %414() /* ty=Tensor[(5, ?, 4), bool] */
}

def @func_3345(%var_3338: Tensor[(5, 14, 1), float32]) -> (Tensor[(5, 14, 9), float32],) {
  %415 = cast(%var_3338, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %416 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %417 = mod(%415, %416) /* ty=Tensor[(5, 14, 9), float32] */;
  (%417,)
}

def @func_2964(%var_2961: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(9, 2, 14), int64], Tensor[(252), int64]) {
  %418 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %419 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %420 = cast(meta[relay.Constant][33] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %421 = reshape(%419, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %422 = reshape(%420, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %423 = @func_1905(%421, %422) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %424 = cast(%var_2961, dtype="int64") /* ty=Tensor[(252), int64] */;
  %425 = cast(%var_2961, dtype="int64") /* ty=Tensor[(252), int64] */;
  %426 = reshape(%424, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %427 = reshape(%425, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %428 = @func_1375(%426, %427) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %429 = %418.0;
  %430 = %423.0;
  %431 = %428.0;
  (%429, %430, meta[relay.Constant][32] /* ty=Tensor[(336), float32] */, meta[relay.Constant][33] /* ty=Tensor[(1584), float64] */, %431, %var_2961)
}

def @func_2337() -> Tensor[(5, 1, 4), float32] {
  @func_1415() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4407() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) {
  @func_4405() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) */
}

def @func_2651(%var_2648: Tensor[(252), int64], %var_2649: int16, %var_2650: Tensor[(5, 8, 4), bool]) -> (Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) {
  %442 = fn (%var_2637: Tensor[(252), int64], %var_2638: int16, %var_2642: Tensor[(5, 8, 4), bool]) -> (Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) {
    %432 = cast(%var_2637, dtype="int64") /* ty=Tensor[(252), int64] */;
    %433 = cast(%var_2638, dtype="int16") /* ty=int16 */;
    %434 = reshape(%432, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
    %435 = reshape(%433, newshape=[]) /* ty=int16 */;
    %436 = @func_2527(%434, %435) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
    %437 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
    %438 = cast(%437, dtype="bool") /* ty=Tensor[(5, ?, 4), bool] */;
    %439 = cast(%var_2642, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
    %440 = %436.2;
    %441 = greater_equal(%438, %439) /* ty=Tensor[(5, 8, 4), bool] */;
    (%440, %var_2637, %var_2638, %441)
  };
  %442(%var_2648, %var_2649, %var_2650) /* ty=(Tensor[(16, 16, 9), int16], Tensor[(252), int64], int16, Tensor[(5, 8, 4), bool]) */
}

def @func_4934(%var_4931: float64, %var_4932: Tensor[(336), float32], %var_4933: Tensor[(72, 1), float32]) -> (Tensor[(5, 1, 4), float32], float64, Tensor[(1080), float64], Tensor[(10, 9, 12), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(72, 1), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %463 = fn (%var_4908: float64, %var_4919: Tensor[(336), float32], %var_4924: Tensor[(72, 1), float32]) -> (Tensor[(5, 1, 4), float32], float64, Tensor[(1080), float64], Tensor[(10, 9, 12), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(72, 1), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
    %443 = cast(%var_4908, dtype="float64") /* ty=float64 */;
    %444 = cast(meta[relay.Constant][34] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %445 = reshape(%443, newshape=[]) /* ty=float64 */;
    %446 = reshape(%444, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
    %447 = @func_999(%445, %446) /* ty=Tensor[(10, 9, 12), float64] */;
    %448 = cast(%447, dtype="float32") /* ty=Tensor[(10, 9, 12), float32] */;
    %449 = cast(%var_4919, dtype="float32") /* ty=Tensor[(336), float32] */;
    %450 = reshape(%449, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %451 = @func_1257(%450) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) */;
    %452 = cast(%var_4924, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %453 = cast(meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %454 = cast(meta[relay.Constant][36] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %455 = reshape(%452, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
    %456 = reshape(%453, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %457 = reshape(%454, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %458 = @func_751(%455, %456, %457) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
    %459 = @func_3335() /* ty=Tensor[(5, 1, 4), float32] */;
    %460 = sinh(%448) /* ty=Tensor[(10, 9, 12), float32] */;
    %461 = %451.3;
    %462 = %458.0;
    (%459, %var_4908, meta[relay.Constant][34] /* ty=Tensor[(1080), float64] */, %460, %461, %var_4919, %462, %var_4924, meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, meta[relay.Constant][36] /* ty=Tensor[(1584), float64] */)
  };
  %463(%var_4931, %var_4932, %var_4933) /* ty=(Tensor[(5, 1, 4), float32], float64, Tensor[(1080), float64], Tensor[(10, 9, 12), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584, 1), float64], Tensor[(72, 1), float32], Tensor[(198), float64], Tensor[(1584), float64]) */
}

def @func_4059() -> Tensor[(5, 7, 4), float32] {
  @func_4057() /* ty=Tensor[(5, 7, 4), float32] */
}

def @func_2205(%var_2201: Tensor[(6, 14, 6), float32], %var_2202: Tensor[(20), float32], %var_2203: Tensor[(1584), float64], %var_2204: Tensor[(72), float32]) -> (Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) {
  %489 = fn (%var_2160: Tensor[(6, 14, 6), float32], %var_2164: Tensor[(20), float32], %var_2176: Tensor[(1584), float64], %var_2182: Tensor[(72), float32]) -> (Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) {
    %464 = cast(%var_2160, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
    %465 = cast(%var_2164, dtype="float32") /* ty=Tensor[(20), float32] */;
    %466 = reshape(%465, newshape=[5, 1, 4]) /* ty=Tensor[(5, 1, 4), float32] */;
    %467 = @func_1848(%466) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
    %468 = cast(%var_2176, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %469 = reshape(%468, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %470 = @func_1513(%469) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) */;
    %471 = cast(%var_2182, dtype="float32") /* ty=Tensor[(72), float32] */;
    %472 = %470.2;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(9, 2, 11), float64] */;
    %474 = cast(%var_2176, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %475 = reshape(%471, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float32] */;
    %476 = reshape(%473, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %477 = reshape(%474, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %478 = @func_751(%475, %476, %477) /* ty=(Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) */;
    %479 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %480 = %478.0;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
    %482 = reshape(%479, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
    %483 = reshape(%481, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
    %484 = @func_1905(%482, %483) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
    %485 = cosh(%464) /* ty=Tensor[(6, 14, 6), float32] */;
    %486 = %467.2;
    %487 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
    %488 = %484.2;
    (%485, %486, %var_2164, %472, %var_2176, %480, %var_2182, %487, %488, meta[relay.Constant][37] /* ty=Tensor[(336), float32] */)
  };
  %489(%var_2201, %var_2202, %var_2203, %var_2204) /* ty=(Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) */
}

def @func_5077(%var_5075: Tensor[(33, 6), float64], %var_5076: Tensor[(1584), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) {
  @func_5073(%var_5075, %var_5076) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(9, 2, 11), float64], Tensor[(33, 6), float64], Tensor[(1584), float64]) */
}

def @func_530(%var_528: Tensor[(9, 2, 11), float64], %var_529: Tensor[(1584, 1), float64]) -> (Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) {
  @func_526(%var_528, %var_529) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */
}

def @func_5406() -> (Tensor[(15, 10, 4), bool], Tensor[(5, ?, 4), bool]) {
  @func_5404() /* ty=(Tensor[(15, 10, 4), bool], Tensor[(5, ?, 4), bool]) */
}

def @func_7121() -> Tensor[(5, 3, 4), uint32] {
  %490 = @func_6960() /* ty=Tensor[(5, ?, 4), int32] */;
  %491 = cast(%490, dtype="uint32") /* ty=Tensor[(5, ?, 4), uint32] */;
  %492 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 3, 4), int32] */, dtype="uint32") /* ty=Tensor[(5, 3, 4), uint32] */;
  subtract(%491, %492) /* ty=Tensor[(5, 3, 4), uint32] */
}

def @func_3420() -> Tensor[(5, 1, 4), float32] {
  %493 = @func_2451() /* ty=Tensor[(5, 1, 4), float32] */;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  acos(%494) /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_5960() -> (Tensor[(5, 1, 4), float32], Tensor[(7, ?, 10), bool]) {
  %495 = @func_5022() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
  %496 = @func_4468() /* ty=(Tensor[(7, 1, 10), float32],) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %499 = atanh(%498) /* ty=Tensor[(7, 1, 10), float64] */;
  %500 = cast(%497, dtype="float64") /* ty=Tensor[(7, 1, 10), float64] */;
  %501 = erf(%500) /* ty=Tensor[(7, 1, 10), float64] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %503 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%499, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %506 = floor_mod(%504, %505) /* ty=Tensor[(7, ?, 10), float32] */;
  %507 = cast(%499, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(7, ?, 10), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = %495.1;
  %512 = logical_or(%509, %510) /* ty=Tensor[(7, ?, 10), bool] */;
  (%511, %512)
}

def @func_5671() -> (Tensor[(2, 4, 10), float32],) {
  %520 = fn () -> (Tensor[(2, 4, 10), float32],) {
    %513 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
    %514 = log2(%513) /* ty=Tensor[(2, 4, 10), float64] */;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
    %516 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 4, 10), float64] */, dtype="float32") /* ty=Tensor[(2, 4, 10), float32] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %519 = divide(%517, %518) /* ty=Tensor[(2, 4, 10), float32] */;
    (%519,)
  };
  %520() /* ty=(Tensor[(2, 4, 10), float32],) */
}

def @func_6780(%var_6763: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, ?, 4), bool]) {
  %521 = cast(%var_6763, dtype="int64") /* ty=Tensor[(252), int64] */;
  %522 = cast(%var_6763, dtype="int64") /* ty=Tensor[(252), int64] */;
  %523 = reshape(%521, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %524 = reshape(%522, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %525 = @func_1375(%523, %524) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %526 = @func_3335() /* ty=Tensor[(5, 1, 4), float32] */;
  %527 = %525.1;
  %528 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%526, %527, %var_6763, %528)
}

def @func_2778() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) {
  %536 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) {
    %529 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %530 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
    %531 = cast(meta[relay.Constant][40] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
    %532 = reshape(%531, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
    %533 = %529.0;
    %534 = %530.0;
    %535 = @func_2250(%532) /* ty=Tensor[(7, 4, 13), float32] */;
    (%533, %534, %535, meta[relay.Constant][40] /* ty=Tensor[(364), float32] */)
  };
  %536() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) */
}

def @func_1237() -> Tensor[(5, 1, 4), float32] {
  @func_1235() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3188() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) {
  @func_3186() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) */
}

def @main() -> (Tensor[(15, 10, 4), float32],) {
  %537 = @func_6195() /* ty=Tensor[(15, 10, 4), bool] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %539 = log(%538) /* ty=Tensor[(15, 10, 4), float32] */;
  (%539,)
}

def @func_4057() -> Tensor[(5, 7, 4), float32] {
  %540 = @func_1276() /* ty=Tensor[(5, 1, 4), float32] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %542 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  power(%541, %542) /* ty=Tensor[(5, 7, 4), float32] */
}

def @func_6649(%var_6623: Tensor[(120, 1), uint64], %var_6625: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(9, 2, 14), float32], Tensor[(120, 1), uint64], Tensor[(252), int64], int16, Tensor[(6, 42), int64], Tensor[(5, ?, 4), bool]) {
  %543 = cast(%var_6623, dtype="uint64") /* ty=Tensor[(120, 1), uint64] */;
  %544 = cast(%var_6623, dtype="uint64") /* ty=Tensor[(120, 1), uint64] */;
  %545 = cast(meta[relay.Constant][42] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %546 = cast(%var_6625, dtype="int16") /* ty=int16 */;
  %547 = reshape(%543, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), uint64] */;
  %548 = reshape(%544, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), uint64] */;
  %549 = reshape(%545, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %550 = reshape(%546, newshape=[]) /* ty=int16 */;
  %551 = @func_3717(%547, %548, %549, %550) /* ty=(Tensor[(8, 3, 5), uint64], Tensor[(9, 2, 14), float32], Tensor[(252), int64], int16) */;
  %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %553 = cast(%var_6625, dtype="int16") /* ty=int16 */;
  %554 = reshape(%552, newshape=[6, 42]) /* ty=Tensor[(6, 42), int64] */;
  %555 = reshape(%553, newshape=[]) /* ty=int16 */;
  %556 = @func_2527(%554, %555) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */;
  %557 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
  %558 = %551.1;
  %559 = %556.1;
  %560 = @func_5544() /* ty=Tensor[(5, ?, 4), bool] */;
  (%557, %558, %var_6623, meta[relay.Constant][42] /* ty=Tensor[(252), int64] */, %var_6625, %559, %560)
}

def @func_6783(%var_6781: Tensor[(252), int64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, ?, 4), bool]) {
  @func_6780(%var_6781) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, ?, 4), bool]) */
}

def @func_3834(%var_3833: Tensor[(7, 9, 10), float64]) -> Tensor[(7, 9, 10), float64] {
  %565 = fn (%var_3827: Tensor[(7, 9, 10), float64]) -> Tensor[(7, 9, 10), float64] {
    %561 = cast(%var_3827, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
    %562 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(7, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%563, %564) /* ty=Tensor[(7, 9, 10), float64] */
  };
  %565(%var_3833) /* ty=Tensor[(7, 9, 10), float64] */
}

def @func_6893() -> (Tensor[(15, 10, 4), bool], Tensor[(1584), float32]) {
  @func_6891() /* ty=(Tensor[(15, 10, 4), bool], Tensor[(1584), float32]) */
}

def @func_1235() -> Tensor[(5, 1, 4), float32] {
  @func_1203() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3920() -> (Tensor[(10, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32]) {
  @func_3918() /* ty=(Tensor[(10, 9), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32]) */
}

def @func_5334(%var_5332: Tensor[(198), float64], %var_5333: Tensor[(180), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(198), float32], Tensor[(198), int16], Tensor[(5, 9, 4), float64], Tensor[(180), float32]) {
  @func_5330(%var_5332, %var_5333) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(198), float32], Tensor[(198), int16], Tensor[(5, 9, 4), float64], Tensor[(180), float32]) */
}

def @func_6053() -> (Tensor[(5, 1, 4), float32],) {
  @func_6051() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_4752(%var_4747: Tensor[(10, 15, 3), float64], %var_4748: Tensor[(10, 15, 3), float64], %var_4749: Tensor[(2304), int16], %var_4750: Tensor[(10, 15, 3), bool], %var_4751: Tensor[(10, 15, 3), bool]) -> (Tensor[(10, 15, 3), float64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(5, ?, 4), float32], Tensor[(1584), float64], Tensor[(10, 15, 3), float32], Tensor[(5, 1, 4), float32], Tensor[(10, 15, 3), uint16]) {
  @func_4745(%var_4747, %var_4748, %var_4749, %var_4750, %var_4751) /* ty=(Tensor[(10, 15, 3), float64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(5, ?, 4), float32], Tensor[(1584), float64], Tensor[(10, 15, 3), float32], Tensor[(5, 1, 4), float32], Tensor[(10, 15, 3), uint16]) */
}

def @func_1204() -> Tensor[(5, 1, 4), float32] {
  %567 = fn () -> Tensor[(5, 1, 4), float32] {
    %566 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    log10(%566) /* ty=Tensor[(5, 1, 4), float32] */
  };
  %567() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_5022() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %568 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
  %569 = @func_4243() /* ty=Tensor[(5, 1, 4), float32] */;
  (%568, %569)
}

def @func_5330(%var_5322: Tensor[(198), float64], %var_5328: Tensor[(180), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(198), float32], Tensor[(198), int16], Tensor[(5, 9, 4), float64], Tensor[(180), float32]) {
  %570 = @func_3186() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32]) */;
  %571 = cast(meta[relay.Constant][45] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %572 = reshape(%571, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %573 = @func_1466(%572) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) */;
  %574 = cast(meta[relay.Constant][45] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %575 = cast(%var_5322, dtype="int16") /* ty=Tensor[(198), int16] */;
  %576 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(198), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %577 = cast(meta[relay.Constant][45] /* ty=Tensor[(198), float64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?), int16] */;
  %579 = cast(%var_5328, dtype="float32") /* ty=Tensor[(180), float32] */;
  %580 = reshape(%579, newshape=[5, 9, 4]) /* ty=Tensor[(5, 9, 4), float32] */;
  %581 = @func_5086() /* ty=Tensor[(5, 1, 4), float32] */;
  %582 = %570.3;
  %583 = %573.0;
  %584 = asinh(%574) /* ty=Tensor[(198), float32] */;
  %585 = maximum(%577, %578) /* ty=Tensor[(198), int16] */;
  %586 = @func_3822(%580) /* ty=Tensor[(5, 9, 4), float64] */;
  (%581, %582, %583, %584, %585, %586, %var_5328)
}

def @func_6457(%var_6436: Tensor[(10, 2), float32], %var_6437: Tensor[(1584, 1), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(5, 7, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(504), float32], Tensor[(10, 2), float32], Tensor[(1584, 1), float64], Tensor[(72), float32]) {
  %587 = @func_4057() /* ty=Tensor[(5, 7, 4), float32] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(5, 7, 4), float64] */;
  %589 = sqrt(%588) /* ty=Tensor[(5, 7, 4), float64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %591 = cast(%589, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %592 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%587, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %595 = cast(meta[relay.Constant][46] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %596 = cast(%var_6436, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
  %597 = cast(%var_6437, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %598 = cast(meta[relay.Constant][47] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %599 = reshape(%595, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float32] */;
  %600 = reshape(%596, newshape=[20]) /* ty=Tensor[(20), float32] */;
  %601 = reshape(%597, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %602 = reshape(%598, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %603 = @func_2200(%599, %600, %601, %602) /* ty=(Tensor[(6, 14, 6), float32], Tensor[(5, ?, 4), bool], Tensor[(20), float32], Tensor[(9, 2, 11), float64], Tensor[(1584), float64], Tensor[(1584, 1), float64], Tensor[(72), float32], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), uint64], Tensor[(336), float32]) */;
  %604 = erf(%590) /* ty=Tensor[(5, 7, 4), float32] */;
  %605 = floor_divide(%593, %594) /* ty=Tensor[(5, 7, 4), float32] */;
  %606 = %603.3;
  (%604, %605, %606, meta[relay.Constant][46] /* ty=Tensor[(504), float32] */, %var_6436, %var_6437, meta[relay.Constant][47] /* ty=Tensor[(72), float32] */)
}

def @func_751(%var_681: Tensor[(6, 3, 4), float32], %var_685: Tensor[(198), float64], %var_686: Tensor[(1584), float64]) -> (Tensor[(1584, 1), float64], Tensor[(1584), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 198), float64], Tensor[(6, 3, 4), float32]) {
  %607 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %608 = cast(%var_686, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %609 = reshape(%607, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %610 = reshape(%608, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %611 = @func_526(%609, %610) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %612 = %611.2;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %614 = reshape(%613, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %615 = @func_501(%614) /* ty=(Tensor[(11, 12, 12), uint32],) */;
  %616 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %617 = %615.0;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %619 = reshape(%616, newshape=[9, 2, 11]) /* ty=Tensor[(9, 2, 11), float64] */;
  %620 = reshape(%618, newshape=[1584, 1]) /* ty=Tensor[(1584, 1), float64] */;
  %621 = @func_526(%619, %620) /* ty=(Tensor[(9, 2, 11), float64], Tensor[(11, 12, 12), uint32], Tensor[(1584, 1), float64], Tensor[(9, 2, 11), float64]) */;
  %622 = %621.2;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(1584, 1), float64] */;
  %624 = cast(%var_685, dtype="float64") /* ty=Tensor[(198), float64] */;
  %625 = cast(%var_681, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %626 = sigmoid(%625) /* ty=Tensor[(6, 3, 4), float32] */;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(6, 3, 4), float64] */;
  %628 = exp(%627) /* ty=Tensor[(6, 3, 4), float64] */;
  %629 = cast(%var_681, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %633 = bitwise_xor(%631, %632) /* ty=Tensor[(6, 3, 4), int32] */;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %635 = floor_divide(%623, %624) /* ty=Tensor[(1584, 198), float64] */;
  %636 = tan(%634) /* ty=Tensor[(6, 3, 4), float32] */;
  (%612, %var_686, %617, %635, %636)
}

def @func_3666(%var_3664: Tensor[(5, 3, 4), float32], %var_3665: Tensor[(336), float32]) -> (Tensor[(5, 3, 4), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(1080), float64], Tensor[(5, 1, 4), float32]) {
  %651 = fn (%var_3616: Tensor[(5, 3, 4), float32], %var_3627: Tensor[(336), float32]) -> (Tensor[(5, 3, 4), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(1080), float64], Tensor[(5, 1, 4), float32]) {
    %637 = @func_2841() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */;
    %638 = %637.1;
    %639 = cast(%638, dtype="float64") /* ty=Tensor[(5, 1, 4), float64] */;
    %640 = cast(%var_3616, dtype="float64") /* ty=Tensor[(5, 3, 4), float64] */;
    %641 = cast(%var_3627, dtype="float32") /* ty=Tensor[(336), float32] */;
    %642 = reshape(%641, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
    %643 = cast(5.55249f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %644 = cast(meta[relay.Constant][48] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %645 = reshape(%643, newshape=[]) /* ty=float64 */;
    %646 = reshape(%644, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
    %647 = power(%639, %640) /* ty=Tensor[(5, 3, 4), float64] */;
    %648 = @func_1035(%642) /* ty=Tensor[(14, 12, 2), float32] */;
    %649 = @func_999(%645, %646) /* ty=Tensor[(10, 9, 12), float64] */;
    %650 = @func_3420() /* ty=Tensor[(5, 1, 4), float32] */;
    (%647, %648, %var_3627, %649, 5.55249f64 /* ty=float64 */, meta[relay.Constant][48] /* ty=Tensor[(1080), float64] */, %650)
  };
  %651(%var_3664, %var_3665) /* ty=(Tensor[(5, 3, 4), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(1080), float64], Tensor[(5, 1, 4), float32]) */
}

def @func_7037(%var_7036: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(1584), int64]) {
  %674 = fn (%var_6985: Tensor[(1584), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(1584), int64]) {
    %652 = @func_4416() /* ty=(Tensor[(15, 10, 4), bool],) */;
    %653 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
    %654 = %653.1;
    %655 = cast(%var_6985, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(1), int32] */;
    %657 = cast(%654, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?), bool] */;
    %659 = less(%657, %658) /* ty=Tensor[(1584), bool] */;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %661 = log2(%660) /* ty=Tensor[(1584), float32] */;
    %662 = cast(%659, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(1), int32] */;
    %664 = cast(%661, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?), bool] */;
    %666 = less_equal(%664, %665) /* ty=Tensor[(1584), bool] */;
    %667 = cast(%var_6985, dtype="int64") /* ty=Tensor[(1584), int64] */;
    %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
    %669 = cast(%666, dtype="int64") /* ty=Tensor[(1584), int64] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?), int64] */;
    %671 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
    %672 = %652.0;
    %673 = maximum(%669, %670) /* ty=Tensor[(1584), int64] */;
    (%671, %672, %673)
  };
  %674(%var_7036) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(1584), int64]) */
}

def @func_6260() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %678 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
    %675 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %676 = %675.0;
    %677 = @func_5086() /* ty=Tensor[(5, 1, 4), float32] */;
    (%676, %677)
  };
  %678() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */
}

def @func_6092() -> (Tensor[(5, 1, 4), float32],) {
  %682 = fn () -> (Tensor[(5, 1, 4), float32],) {
    %679 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
    %680 = cast(%679, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
    %681 = atan(%680) /* ty=Tensor[(5, 1, 4), float32] */;
    (%681,)
  };
  %682() /* ty=(Tensor[(5, 1, 4), float32],) */
}

def @func_3298(%var_3296: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], int16) {
  @func_3295(%var_3296) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], int16) */
}

def @func_5088() -> Tensor[(5, 1, 4), float32] {
  @func_5086() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_1516(%var_1514: Tensor[(1584), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) {
  @func_1513(%var_1514) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) */
}

def @func_2557() -> Tensor[(5, 1, 4), float32] {
  @func_2337() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_4452() -> Tensor[(5, 1, 4), float32] {
  %683 = @func_4405() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) */;
  %683.0
}

def @func_4314() -> (Tensor[(5, 1, 4), float32], Tensor[(252), int64], Tensor[(5, 1, 4), float32]) {
  %684 = cast(meta[relay.Constant][49] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %685 = cast(meta[relay.Constant][49] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %686 = reshape(%684, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %687 = reshape(%685, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
  %688 = @func_1375(%686, %687) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
  %689 = @func_3123() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %692 = %688.1;
  %693 = erf(%691) /* ty=Tensor[(5, 1, 4), float32] */;
  (%692, meta[relay.Constant][49] /* ty=Tensor[(252), int64] */, %693)
}

def @func_4222(%var_4220: Tensor[(4, 5, 6), bool], %var_4221: Tensor[(4, 5, 6), bool]) -> (Tensor[(1584, 1), float64], Tensor[(198), float64], Tensor[(4, 396), float64], Tensor[(4, 5, 6), bool]) {
  @func_4218(%var_4220, %var_4221) /* ty=(Tensor[(1584, 1), float64], Tensor[(198), float64], Tensor[(4, 396), float64], Tensor[(4, 5, 6), bool]) */
}

def @func_2707(%var_2661: float64, %var_2689: Tensor[(3, 66), float64], %var_2702: Tensor[(1, 2, 14), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], Tensor[(1080, 1), float64], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(1584), float64], Tensor[(72), float32], Tensor[(3, 66), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), uint64], Tensor[(1, 2, 14), float64]) {
  %694 = cast(%var_2661, dtype="float64") /* ty=float64 */;
  %695 = cast(meta[relay.Constant][50] /* ty=Tensor[(1080, 1), float64] */, dtype="float64") /* ty=Tensor[(1080, 1), float64] */;
  %696 = reshape(%694, newshape=[]) /* ty=float64 */;
  %697 = reshape(%695, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), float64] */;
  %698 = cast(meta[relay.Constant][51] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %699 = reshape(%698, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %700 = cast(meta[relay.Constant][52] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %701 = cast(%var_2689, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %702 = cast(meta[relay.Constant][53] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %703 = reshape(%700, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %704 = reshape(%701, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %705 = reshape(%702, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %706 = @func_1077(%703, %704, %705) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %707 = @func_1035(%699) /* ty=Tensor[(14, 12, 2), float32] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %709 = cast(meta[relay.Constant][53] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %710 = reshape(%708, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %711 = reshape(%709, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %712 = @func_1905(%710, %711) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 168), float32], Tensor[(5, ?, 4), uint64], Tensor[(11, 12, 12), uint32], Tensor[(1584), float64]) */;
  %713 = cast(%var_2661, dtype="float64") /* ty=float64 */;
  %714 = cast(%var_2702, dtype="float64") /* ty=Tensor[(1, 2, 14), float64] */;
  %715 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %716 = @func_999(%696, %697) /* ty=Tensor[(10, 9, 12), float64] */;
  %717 = %706.4;
  %718 = %712.2;
  %719 = floor_divide(%713, %714) /* ty=Tensor[(1, 2, 14), float64] */;
  (%715, %716, meta[relay.Constant][50] /* ty=Tensor[(1080, 1), float64] */, %707, meta[relay.Constant][51] /* ty=Tensor[(336), float32] */, %717, meta[relay.Constant][52] /* ty=Tensor[(72), float32] */, %var_2689, meta[relay.Constant][53] /* ty=Tensor[(1584), float64] */, %718, %719)
}

def @func_2842() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  %722 = fn () -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
    %720 = @func_2557() /* ty=Tensor[(5, 1, 4), float32] */;
    %721 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
    (%720, %721)
  };
  %722() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */
}

def @func_5489() -> Tensor[(5, 1, 4), float32] {
  %724 = fn () -> Tensor[(5, 1, 4), float32] {
    %723 = @func_2154() /* ty=(Tensor[(5, 1, 4), float32],) */;
    %723.0
  };
  %724() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_2089(%var_2078: Tensor[(15, 10, 4), bool], %var_2079: Tensor[(15, 10, 4), bool]) -> (Tensor[(15, 10, 4), bool],) {
  %725 = cast(%var_2079, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %726 = shape_of(%var_2078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_2078, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = logical_or(%727, %728) /* ty=Tensor[(15, 10, 4), bool] */;
  (%729,)
}

def @func_3983() -> Tensor[(5, 1, 4), float32] {
  @func_3981() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3335() -> Tensor[(5, 1, 4), float32] {
  @func_2451() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3123() -> (Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  %730 = @func_2593() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %731 = %730.0;
  %732 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%731, %732)
}

def @func_6891() -> (Tensor[(15, 10, 4), bool], Tensor[(1584), float32]) {
  %733 = @func_6538() /* ty=(Tensor[(15, 10, 4), bool],) */;
  %734 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %735 = %734.1;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %737 = %733.0;
  %738 = log10(%736) /* ty=Tensor[(1584), float32] */;
  (%737, %738)
}

def @func_1469(%var_1467: Tensor[(198), float64]) -> (Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) {
  @func_1466(%var_1467) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(1584), float64], Tensor[(198), float64]) */
}

def @func_1002(%var_1000: float64, %var_1001: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), float64] {
  %741 = fn (%var_984: float64, %var_985: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), float64] {
    %739 = cast(%var_984, dtype="float64") /* ty=float64 */;
    %740 = cast(%var_985, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
    power(%739, %740) /* ty=Tensor[(10, 9, 12), float64] */
  };
  %741(%var_1000, %var_1001) /* ty=Tensor[(10, 9, 12), float64] */
}

def @func_4416() -> (Tensor[(15, 10, 4), bool],) {
  %742 = @func_4405() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) */;
  %743 = %742.2;
  (%743,)
}

def @func_4405() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(15, 10, 4), bool], Tensor[(6, 100), float64]) {
  %744 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
  %745 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 100), bool] */, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %746 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 100), bool] */, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %747 = reshape(%745, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %748 = reshape(%746, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), bool] */;
  %749 = @func_2089(%747, %748) /* ty=(Tensor[(15, 10, 4), bool],) */;
  %750 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 100), bool] */, dtype="float64") /* ty=Tensor[(6, 100), float64] */;
  %751 = %744.0;
  %752 = @func_1415() /* ty=Tensor[(5, 1, 4), float32] */;
  %753 = %749.0;
  %754 = log10(%750) /* ty=Tensor[(6, 100), float64] */;
  (%751, %752, %753, %754)
}

def @func_2339() -> Tensor[(5, 1, 4), float32] {
  @func_2337() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_6461(%var_6459: Tensor[(10, 2), float32], %var_6460: Tensor[(1584, 1), float64]) -> (Tensor[(5, 7, 4), float32], Tensor[(5, 7, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(504), float32], Tensor[(10, 2), float32], Tensor[(1584, 1), float64], Tensor[(72), float32]) {
  @func_6457(%var_6459, %var_6460) /* ty=(Tensor[(5, 7, 4), float32], Tensor[(5, 7, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(504), float32], Tensor[(10, 2), float32], Tensor[(1584, 1), float64], Tensor[(72), float32]) */
}

def @func_2530(%var_2528: Tensor[(6, 42), int64], %var_2529: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) {
  %772 = fn (%var_2477: Tensor[(6, 42), int64], %var_2501: int16) -> (Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) {
    %755 = cast(%var_2501, dtype="int16") /* ty=int16 */;
    %756 = cast(meta[relay.Constant][55] /* ty=Tensor[(2304), int16] */, dtype="int16") /* ty=Tensor[(2304), int16] */;
    %757 = reshape(%755, newshape=[]) /* ty=int16 */;
    %758 = reshape(%756, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
    %759 = @func_2033(%757, %758) /* ty=(Tensor[(16, 16, 9), int16],) */;
    %760 = @func_1727() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(1584), float64], Tensor[(3, 66), float64], Tensor[(5, 1, 4), float32]) */;
    %761 = cast(%var_2477, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
    %762 = cast(%var_2477, dtype="int64") /* ty=Tensor[(6, 42), int64] */;
    %763 = reshape(%761, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
    %764 = reshape(%762, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), int64] */;
    %765 = @func_1375(%763, %764) /* ty=(Tensor[(9, 2, 14), int64], Tensor[(5, 1, 4), float32]) */;
    %766 = %765.0;
    %767 = cast(%766, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
    %768 = @func_2375() /* ty=Tensor[(5, 1, 4), float32] */;
    %769 = %759.0;
    %770 = %760.1;
    %771 = cos(%767) /* ty=Tensor[(9, 2, 14), float32] */;
    (%768, %var_2477, %769, %var_2501, meta[relay.Constant][55] /* ty=Tensor[(2304), int16] */, %770, %771)
  };
  %772(%var_2528, %var_2529) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(6, 42), int64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(1584), float64], Tensor[(9, 2, 14), float32]) */
}

def @func_1038(%var_1036: Tensor[(14, 12, 2), float32]) -> Tensor[(14, 12, 2), float32] {
  @func_1035(%var_1036) /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_6739() -> (Tensor[(5, 1, 4), float32],) {
  %773 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  (%773,)
}

def @func_5024() -> (Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) {
  @func_5022() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32]) */
}

def @func_1260(%var_1258: Tensor[(336), float32]) -> (Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) {
  @func_1257(%var_1258) /* ty=(Tensor[(5, 1, 4), float32], Tensor[(14, 12, 2), float32], Tensor[(336), float32], Tensor[(14, 12, 2), float32]) */
}

def @func_2881(%var_2880: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), int16] {
  %780 = fn (%var_2847: Tensor[(7, 4, 9), float32]) -> Tensor[(7, 4, 9), int16] {
    %774 = cast(%var_2847, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %775 = sigmoid(%774) /* ty=Tensor[(7, 4, 9), float32] */;
    %776 = cast(%775, dtype="int16") /* ty=Tensor[(7, 4, 9), int16] */;
    %777 = shape_of(%var_2847, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%var_2847, dtype="int16") /* ty=Tensor[(7, 4, 9), int16] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    multiply(%778, %779) /* ty=Tensor[(7, 4, 9), int16] */
  };
  %780(%var_2880) /* ty=Tensor[(7, 4, 9), int16] */
}

def @func_4468() -> (Tensor[(7, 1, 10), float32],) {
  %781 = cast(9.63917f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %782 = cast(meta[relay.Constant][56] /* ty=Tensor[(7, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 10), float32] */;
  %783 = mod(%781, %782) /* ty=Tensor[(7, 1, 10), float32] */;
  (%783,)
}

def @func_1851(%var_1849: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  @func_1848(%var_1849) /* ty=(Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) */
}

def @func_6838(%var_6836: Tensor[(600), bool]) -> (Tensor[(252), int64], Tensor[(15, 10, 4), bool], Tensor[(600), bool]) {
  @func_6835(%var_6836) /* ty=(Tensor[(252), int64], Tensor[(15, 10, 4), bool], Tensor[(600), bool]) */
}

def @func_1417() -> Tensor[(5, 1, 4), float32] {
  @func_1415() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_1277() -> Tensor[(5, 1, 4), float32] {
  %784 = fn () -> Tensor[(5, 1, 4), float32] {
    @func_1235() /* ty=Tensor[(5, 1, 4), float32] */
  };
  %784() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_3558(%var_3530: Tensor[(70), float32], %var_3544: Tensor[(72), float32], %var_3545: Tensor[(198), float64]) -> (Tensor[(5, 1, 4), float32], Tensor[(5, 14, 9), float32], Tensor[(70), float32], Tensor[(5, 6, 4), int16], Tensor[(6, 15, 10), int8], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) {
  %785 = cast(%var_3530, dtype="float32") /* ty=Tensor[(70), float32] */;
  %786 = reshape(%785, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), float32] */;
  %787 = @func_3345(%786) /* ty=(Tensor[(5, 14, 9), float32],) */;
  %788 = @func_2777() /* ty=(Tensor[(5, 1, 4), float32], Tensor[(5, 1, 4), float32], Tensor[(7, 4, 13), float32], Tensor[(364), float32]) */;
  %789 = %788.0;
  %790 = cast(%789, dtype="uint16") /* ty=Tensor[(5, 1, 4), uint16] */;
  %791 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 6, 4), float32] */, dtype="uint16") /* ty=Tensor[(5, 6, 4), uint16] */;
  %792 = add(%790, %791) /* ty=Tensor[(5, 6, 4), uint16] */;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %794 = sqrt(%793) /* ty=Tensor[(5, 6, 4), float32] */;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %796 = cast(%789, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %797 = floor_divide(%795, %796) /* ty=Tensor[(5, 6, 4), float32] */;
  %798 = cast(%797, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %799 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%794, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %802 = cast(%var_3544, dtype="float32") /* ty=Tensor[(72), float32] */;
  %803 = cast(%var_3545, dtype="float64") /* ty=Tensor[(198), float64] */;
  %804 = cast(meta[relay.Constant][58] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %805 = reshape(%802, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %806 = reshape(%803, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %807 = reshape(%804, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %808 = @func_1077(%805, %806, %807) /* ty=(Tensor[(6, 15, 10), int8], Tensor[(1584, 198), float64], Tensor[(72), float32], Tensor[(198), float64], Tensor[(1584), float64]) */;
  %809 = @func_1235() /* ty=Tensor[(5, 1, 4), float32] */;
  %810 = %787.0;
  %811 = subtract(%800, %801) /* ty=Tensor[(5, 6, 4), int16] */;
  %812 = %808.0;
  (%809, %810, %var_3530, %811, %812, %var_3544, %var_3545, meta[relay.Constant][58] /* ty=Tensor[(1584), float64] */)
}

def @func_3981() -> Tensor[(5, 1, 4), float32] {
  %813 = @func_2593() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %813.0
}

def @func_1848(%var_1832: Tensor[(5, 1, 4), float32]) -> (Tensor[(5, ?, 4), int8], Tensor[(5, 1, 4), float32], Tensor[(5, ?, 4), bool]) {
  %814 = @func_1203() /* ty=Tensor[(5, 1, 4), float32] */;
  %815 = cast(%var_1832, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="int8") /* ty=Tensor[(5, 1, 4), int8] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %819 = cast(%var_1832, dtype="float32") /* ty=Tensor[(5, 1, 4), float32] */;
  %820 = add(%817, %818) /* ty=Tensor[(5, ?, 4), int8] */;
  %821 = sigmoid(%819) /* ty=Tensor[(5, 1, 4), float32] */;
  %822 = @func_1331() /* ty=Tensor[(5, ?, 4), bool] */;
  (%820, %821, %822)
}

def @func_4745(%var_4615: Tensor[(10, 15, 3), float64], %var_4674: Tensor[(10, 15, 3), float64], %var_4698: Tensor[(2304), int16], %var_4722: Tensor[(10, 15, 3), bool], %var_4734: Tensor[(10, 15, 3), bool]) -> (Tensor[(10, 15, 3), float64], Tensor[(16, 16, 9), int16], int16, Tensor[(2304), int16], Tensor[(5, ?, 4), float32], Tensor[(1584), float64], Tensor[(10, 15, 3), float32], Tensor[(5, 1, 4), float32], Tensor[(10, 15, 3), uint16]) {
  %823 = cast(%var_4674, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %824 = shape_of(%var_4615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_4615, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = less(%825, %826) /* ty=Tensor[(10, 15, 3), bool] */;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(10, 15, 3), float64] */;
  %829 = cast(meta[relay.Constant][59] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %830 = cast(%var_4698, dtype="int16") /* ty=Tensor[(2304), int16] */;
  %831 = reshape(%829, newshape=[]) /* ty=int16 */;
  %832 = reshape(%830, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int16] */;
  %833 = @func_2033(%831, %832) /* ty=(Tensor[(16, 16, 9), int16],) */;
  %834 = cast(meta[relay.Constant][60] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %835 = reshape(%834, newshape=[1584]) /* ty=Tensor[(1584), float64] */;
  %836 = @func_1513(%835) /* ty=(Tensor[(5, ?, 4), bool], Tensor[(5, 1, 4), float32], Tensor[(9, 2, 11), float64], Tensor[(198), float64], Tensor[(1584), float64], Tensor[(5, ?, 4), float32]) */;
  %837 = cast(%var_4615, dtype="float64") /* ty=Tensor[(10, 15, 3), float64] */;
  %838 = cos(%837) /* ty=Tensor[(10, 15, 3), float64] */;
  %839 = cast(%var_4615, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %843 = right_shift(%841, %842) /* ty=Tensor[(10, 15, 3), int32] */;
  %844 = cast(%843, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %845 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%838, dtype="bool") /* ty=Tensor[(10, 15, 3), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = logical_and(%846, %847) /* ty=Tensor[(10, 15, 3), bool] */;
  %849 = cast(%var_4722, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %853 = @func_3437() /* ty=(Tensor[(5, 1, 4), float32],) */;
  %854 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(10, 15, 3), uint16] */;
  %855 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%848, dtype="uint16") /* ty=Tensor[(10, 15, 3), uint16] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %858 = sigmoid(%828) /* ty=Tensor[(10, 15, 3), float64] */;
  %859 = %833.0;
  %860 = %836.5;
  %861 = mod(%851, %852) /* ty=Tensor[(10, 15, 3), float32] */;
  %862 = %853.0;
  %863 = subtract(%856, %857) /* ty=Tensor[(10, 15, 3), uint16] */;
  (%858, %859, meta[relay.Constant][59] /* ty=int16 */, %var_4698, %860, meta[relay.Constant][60] /* ty=Tensor[(1584), float64] */, %861, %862, %863)
}

def @func_5386() -> Tensor[(5, 1, 4), float32] {
  @func_5384() /* ty=Tensor[(5, 1, 4), float32] */
}

def @func_5879(%var_5877: Tensor[(5, 2, 1), float64], %var_5878: Tensor[(28), float64]) -> (Tensor[(5, 2, 1), float64], Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(198), float64], Tensor[(28), float64]) {
  @func_5875(%var_5877, %var_5878) /* ty=(Tensor[(5, 2, 1), float64], Tensor[(5, 1, 4), float32], Tensor[(10, 9, 12), float64], float64, Tensor[(198), float64], Tensor[(28), float64]) */
}

def @func_3422() -> Tensor[(5, 1, 4), float32] {
  @func_3420() /* ty=Tensor[(5, 1, 4), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen133/build/output.py", line 2367, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

