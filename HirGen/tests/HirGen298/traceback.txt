==========mod==========
#[version = "0.0.5"]
def @func_422() -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 13), float32] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %2 = reshape(%1, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %4 = reshape(%3, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %5 = atan(%0) /* ty=Tensor[(6, 3, 13), float32] */;
  %6 = @func_78(%2) /* ty=Tensor[(14, 7, 15), float32] */;
  %7 = @func_78(%4) /* ty=Tensor[(14, 7, 15), float32] */;
  (%5, %6, meta[relay.Constant][1] /* ty=Tensor[(1470), float32] */, %7)
}

def @func_4167() -> Tensor[(14, 7, 15), float64] {
  %8 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %8.0
}

def @func_4321() -> Tensor[(14, 7, 15), bool] {
  %9 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
  %9.0
}

def @func_2132() -> Tensor[(14, 7, 15), int16] {
  @func_555() /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_1923() -> Tensor[(14, 7, 15), float32] {
  @func_1262() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_933(%var_869: Tensor[(72), float32], %var_905: Tensor[(14, 7, 15), int16], %var_928: Tensor[(65), uint64], %var_929: Tensor[(585), uint64]) -> (Tensor[(14, 7, 15), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), uint8], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64]) {
  %10 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %11 = %10.0;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 15), int16] */, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %16 = power(%14, %15) /* ty=Tensor[(14, 7, 15), float32] */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 15), int16] */, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %21 = cast(%var_869, dtype="float32") /* ty=Tensor[(72), float32] */;
  %22 = reshape(%21, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %23 = @func_360(%22) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %24 = cast(%16, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
  %25 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 15), int16] */, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %28 = cast(%var_905, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %29 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%11, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %32 = cast(%16, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %33 = sinh(%32) /* ty=Tensor[(14, 7, 15), float32] */;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %35 = cast(%33, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %36 = cast(%var_928, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %37 = cast(%var_929, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %39 = cast(%var_869, dtype="float32") /* ty=Tensor[(72), float32] */;
  %40 = reshape(%36, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
  %41 = reshape(%37, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %42 = reshape(%38, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %43 = reshape(%39, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %44 = @func_599(%40, %41, %42, %43) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
  %45 = greater_equal(%19, %20) /* ty=Tensor[(14, 7, 15), bool] */;
  %46 = %23.0;
  %47 = subtract(%26, %27) /* ty=Tensor[(14, 7, 15), uint8] */;
  %48 = floor_mod(%30, %31) /* ty=Tensor[(14, 7, 15), float32] */;
  %49 = rsqrt(%34) /* ty=Tensor[(14, 7, 15), float32] */;
  %50 = cosh(%35) /* ty=Tensor[(14, 7, 15), float32] */;
  %51 = %44.6;
  (%45, %46, %var_869, %47, %48, %49, %50, %51, %var_928, %var_929, meta[relay.Constant][3] /* ty=Tensor[(300), float64] */)
}

def @func_3908(%var_3894: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(12, 8, 15), float64]) {
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %53 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%var_3894, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 8, 15), float64] */, dtype="int16") /* ty=Tensor[(12, 8, 15), int16] */;
  %57 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_3894, dtype="int16") /* ty=Tensor[(12, 8, 15), int16] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %60 = bitwise_or(%58, %59) /* ty=Tensor[(12, 8, 15), int16] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %62 = add(%54, %55) /* ty=Tensor[(12, 8, 15), float64] */;
  %63 = rsqrt(%61) /* ty=Tensor[(12, 8, 15), float64] */;
  (%62, %63)
}

def @func_2067() -> (Tensor[(14, 7, 15), float64],) {
  %64 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %65 = %64.0;
  (%65,)
}

def @func_3999() -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
  %66 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
  %67 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %68 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  %69 = %66.0;
  %70 = %67.0;
  (%68, %69, %70)
}

def @func_535(%var_481: Tensor[(14, 7, 15), float32], %var_487: Tensor[(300), float64]) -> (Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) {
  %71 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %72 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %73 = %72.1;
  %74 = cast(%var_481, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
  %79 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
  %80 = %71.2;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %82 = reshape(%78, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %83 = reshape(%79, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %84 = reshape(%81, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
  %85 = @func_231(%82, %83, %84) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
  %86 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
  %87 = %85.4;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %89 = less(%76, %77) /* ty=Tensor[(14, 7, 15), bool] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %91 = reshape(%86, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %92 = reshape(%88, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %93 = reshape(%90, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
  %94 = @func_231(%91, %92, %93) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
  %95 = %94.0;
  (%80, %89, %87, %var_487, %95)
}

def @func_6082(%var_6072: Tensor[(13, 16, 8), int16], %var_6073: Tensor[(13, 16, 8), int16]) -> (Tensor[(13, 16, 8), int16], Tensor[(14, 7, 15), uint64], Tensor[(1470), int16]) {
  %96 = cast(%var_6073, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %97 = shape_of(%var_6072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_6072, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(1470), int16] */, dtype="int16") /* ty=Tensor[(1470), int16] */;
  %101 = reshape(%100, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
  %102 = @func_967(%101) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
  %103 = bitwise_or(%98, %99) /* ty=Tensor[(13, 16, 8), int16] */;
  %104 = %102.0;
  (%103, %104, meta[relay.Constant][6] /* ty=Tensor[(1470), int16] */)
}

def @func_742() -> (Tensor[(6, 3, 13), float32],) {
  %105 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %106 = %105.0;
  (%106,)
}

def @func_967(%var_955: Tensor[(14, 7, 15), int16]) -> (Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) {
  %107 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %108 = cast(%var_955, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %112 = left_shift(%110, %111) /* ty=Tensor[(14, 7, 15), uint64] */;
  %113 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%112, %113)
}

def @func_1492(%var_1486: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 4), int16] {
  %114 = cast(%var_1486, dtype="int16") /* ty=Tensor[(11, 10, 1), int16] */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 10, 4), int16] */;
  right_shift(%114, %115) /* ty=Tensor[(11, 10, 4), int16] */
}

def @func_2088(%var_2073: int32, %var_2074: Tensor[(11, 7, 2), int32]) -> (Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) {
  %116 = cast(%var_2073, dtype="int32") /* ty=int32 */;
  %117 = cast(%var_2074, dtype="int32") /* ty=Tensor[(11, 7, 2), int32] */;
  %118 = multiply(%116, %117) /* ty=Tensor[(11, 7, 2), int32] */;
  %119 = @func_1980() /* ty=Tensor[(14, 7, 15), float32] */;
  (%118, %119)
}

def @func_2932() -> (Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
  %120 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %121 = %120.0;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %124 = reshape(%123, newshape=[7, 13, 14]) /* ty=Tensor[(7, 13, 14), float64] */;
  %125 = sqrt(%122) /* ty=Tensor[(14, 7, 15), float64] */;
  %126 = @func_989(%124) /* ty=Tensor[(7, 13, 14), float32] */;
  (%125, %126, meta[relay.Constant][8] /* ty=Tensor[(1274), float64] */)
}

def @func_5027() -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
  %127 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %129 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %130 = cast(%127, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %131 = sigmoid(%128) /* ty=Tensor[(14, 7, 15), float64] */;
  %132 = %129.0;
  %133 = @func_1807() /* ty=Tensor[(14, 7, 15), float32] */;
  %134 = asin(%130) /* ty=Tensor[(14, 7, 15), float64] */;
  (%131, %132, %133, %134)
}

def @func_3322(%var_3313: Tensor[(72, 1), float32], %var_3314: Tensor[(96, 1), int64]) -> (Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) {
  %135 = cast(%var_3313, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %136 = cast(%var_3314, dtype="int64") /* ty=Tensor[(96, 1), int64] */;
  %137 = reshape(%135, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %138 = reshape(%136, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %139 = @func_1451(%137, %138) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %140 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
  %141 = %139.1;
  (%140, %141, %var_3313, %var_3314)
}

def @func_5239(%var_5221: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(7, 13, 14), float32]) {
  %142 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %145 = cast(%var_5221, dtype="float64") /* ty=Tensor[(300), float64] */;
  %146 = reshape(%144, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %147 = reshape(%145, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %148 = @func_535(%146, %147) /* ty=(Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) */;
  %149 = @func_2276() /* ty=(Tensor[(7, 13, 14), float32],) */;
  %150 = %148.2;
  %151 = %149.0;
  (%143, %150, %var_5221, %151)
}

def @func_3829() -> Tensor[(5, 4, 3), bool] {
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 4, 3), int8] */, dtype="bool") /* ty=Tensor[(5, 4, 3), bool] */;
  %153 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 4, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 4, 3), int8] */, dtype="bool") /* ty=Tensor[(5, 4, 3), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%154, %155) /* ty=Tensor[(5, 4, 3), bool] */
}

def @func_3725(%var_3687: int32) -> Tensor[(1, 16), int32] {
  %156 = cast(%var_3687, dtype="int32") /* ty=int32 */;
  %157 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 16), int32] */, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
  left_shift(%156, %157) /* ty=Tensor[(1, 16), int32] */
}

def @func_989(%var_975: Tensor[(7, 13, 14), float64]) -> Tensor[(7, 13, 14), float32] {
  %158 = cast(%var_975, dtype="float64") /* ty=Tensor[(7, 13, 14), float64] */;
  %159 = tan(%158) /* ty=Tensor[(7, 13, 14), float64] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(7, 13, 14), float32] */;
  acosh(%160) /* ty=Tensor[(7, 13, 14), float32] */
}

def @func_2427() -> Tensor[(6, 3, 13), float32] {
  %161 = @func_1835() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %161.0
}

def @func_6893() -> Tensor[(14, 7, 15), float32] {
  @func_1262() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_6450() -> (Tensor[(6, 3, 13), float32], Tensor[(6, 3, 13), bool]) {
  %162 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %163 = @func_3200() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) */;
  %164 = %162.0;
  %165 = %163.0;
  (%164, %165)
}

def @func_1980() -> Tensor[(14, 7, 15), float32] {
  @func_1923() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_4181(%var_4173: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32], Tensor[(2, 2, 12), float64]) {
  %166 = cast(%var_4173, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
  %167 = cast(%var_4173, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %168 = acosh(%166) /* ty=Tensor[(2, 2, 12), float32] */;
  %169 = exp(%167) /* ty=Tensor[(2, 2, 12), float64] */;
  (%168, %169)
}

def @func_4464() -> (Tensor[(14, 7, 15), float32],) {
  %170 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %171 = %170.0;
  (%171,)
}

def @func_1451(%var_1402: Tensor[(72), float32], %var_1442: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) {
  %172 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %173 = cast(%var_1402, dtype="float32") /* ty=Tensor[(72), float32] */;
  %174 = reshape(%173, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %175 = @func_360(%174) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %176 = cast(%var_1402, dtype="float32") /* ty=Tensor[(72), float32] */;
  %177 = reshape(%176, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %178 = @func_360(%177) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %179 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %180 = cast(%var_1442, dtype="int64") /* ty=Tensor[(96), int64] */;
  %181 = reshape(%179, newshape=[]) /* ty=int64 */;
  %182 = reshape(%180, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
  %183 = @func_458(%181, %182) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
  %184 = %172.0;
  %185 = %175.0;
  %186 = %178.0;
  %187 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
  %188 = %183.1;
  (%184, %185, %var_1402, %186, %187, %188, -6 /* ty=int64 */, %var_1442)
}

def @func_3812(%var_3786: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64], Tensor[(14, 7, 15), float32]) {
  %189 = cast(%var_3786, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %190 = cosh(%189) /* ty=Tensor[(4, 2, 3), float64] */;
  %191 = cast(%var_3786, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %196 = mod(%193, %194) /* ty=Tensor[(4, 2, 3), float64] */;
  %197 = %195.0;
  (%196, %197)
}

def @func_2404() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) {
  %198 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %199 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %200 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %201 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %202 = %198.0;
  %203 = %199.0;
  %204 = %200.0;
  %205 = %201.3;
  %206 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  (%202, %203, %204, %205, %206)
}

def @func_3611() -> Tensor[(6, 3, 13), float32] {
  %207 = @func_2660() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) */;
  %207.1
}

def @func_2231(%var_2206: Tensor[(72), float32]) -> (Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) {
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %209 = reshape(%208, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), float64] */;
  %210 = @func_1517(%209) /* ty=(Tensor[(13, 2, 16), float64],) */;
  %211 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %212 = %211.0;
  %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 7, 15), float64] */, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %217 = cast(%var_2206, dtype="float32") /* ty=Tensor[(72), float32] */;
  %218 = reshape(%217, newshape=[6, 12]) /* ty=Tensor[(6, 12), float32] */;
  %219 = @func_1302(%218) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) */;
  %220 = %210.0;
  %221 = multiply(%215, %216) /* ty=Tensor[(14, 7, 15), int16] */;
  %222 = %219.4;
  (%220, meta[relay.Constant][12] /* ty=Tensor[(416), float64] */, %221, %222, %var_2206)
}

def @func_3105(%var_3095: Tensor[(14, 7, 15), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(13, 2, 16), float64]) {
  %223 = @func_1807() /* ty=Tensor[(14, 7, 15), float32] */;
  %224 = cast(%var_3095, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %228 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
  %229 = bitwise_and(%226, %227) /* ty=Tensor[(14, 7, 15), int16] */;
  %230 = %228.2;
  (%229, %230)
}

def @func_769(%var_755: Tensor[(13, 12, 3), uint32]) -> (Tensor[(13, 12, 3), bool],) {
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
  %232 = shape_of(%var_755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_755, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = greater_equal(%233, %234) /* ty=Tensor[(13, 12, 3), bool] */;
  (%235,)
}

def @func_3009() -> Tensor[(14, 7, 15), bool] {
  %236 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
  %236.0
}

def @func_2356() -> (Tensor[(14, 7, 15), float64],) {
  %237 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %238 = %237.0;
  (%238,)
}

def @func_5390() -> Tensor[(4, 13, 11), float32] {
  %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 11), float32] */;
  log10(%239) /* ty=Tensor[(4, 13, 11), float32] */
}

def @func_5843() -> Tensor[(14, 7, 15), uint16] {
  %240 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %241 = %240.0;
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 7, 15), float32] */, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%244, %245) /* ty=Tensor[(14, 7, 15), uint16] */
}

def @func_6238() -> Tensor[(14, 7, 15), float64] {
  %246 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %246.0
}

def @func_231(%var_183: Tensor[(10, 6, 5), float64], %var_184: Tensor[(10, 6, 5), float64], %var_200: Tensor[(1470), float32]) -> (Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) {
  %247 = cast(%var_184, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %248 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_183, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %251 = cast(%var_200, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %252 = reshape(%251, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %253 = @func_78(%252) /* ty=Tensor[(14, 7, 15), float32] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %255 = reshape(%254, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %256 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 6, 5), float64] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %257 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_183, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %260 = divide(%258, %259) /* ty=Tensor[(10, 6, 5), float32] */;
  %261 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 6, 5), float32] */, dtype="uint8") /* ty=Tensor[(10, 6, 5), uint8] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="uint8") /* ty=Tensor[(10, 6, 5), uint8] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %265 = mod(%249, %250) /* ty=Tensor[(10, 6, 5), float64] */;
  %266 = @func_78(%255) /* ty=Tensor[(14, 7, 15), float32] */;
  %267 = bitwise_xor(%263, %264) /* ty=Tensor[(10, 6, 5), uint8] */;
  (%265, %253, %var_200, %266, %267)
}

def @func_5561() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) {
  %268 = @func_4219() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %269 = %268.0;
  %270 = @func_3009() /* ty=Tensor[(14, 7, 15), bool] */;
  (%269, %270)
}

def @func_4428() -> Tensor[(14, 7, 15), float64] {
  @func_4167() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_3354(%var_3343: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16], Tensor[(72), float32]) {
  %271 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
  %272 = cast(%var_3343, dtype="float32") /* ty=Tensor[(72), float32] */;
  %273 = reshape(%272, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %274 = @func_2231(%273) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
  %275 = %271.1;
  %276 = %274.2;
  (%275, %276, %var_3343)
}

def @func_5978(%var_5934: Tensor[(864), float32], %var_5935: Tensor[(110), int16]) -> (Tensor[(14, 7, 15), float64], Tensor[(72), float32], Tensor[(864), float32], Tensor[(110), int16], Tensor[(72), float32], Tensor[(14, 7, 15), int16]) {
  %277 = @func_4167() /* ty=Tensor[(14, 7, 15), float64] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %279 = cast(%var_5934, dtype="float32") /* ty=Tensor[(864), float32] */;
  %280 = cast(%var_5935, dtype="int16") /* ty=Tensor[(110), int16] */;
  %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %282 = reshape(%279, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %283 = reshape(%280, newshape=[110]) /* ty=Tensor[(110), int16] */;
  %284 = reshape(%281, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
  %285 = @func_4837(%282, %283, %284) /* ty=(Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) */;
  %286 = log10(%278) /* ty=Tensor[(14, 7, 15), float64] */;
  %287 = cast(%286, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %288 = reshape(%287, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
  %289 = @func_967(%288) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
  %290 = %285.6;
  %291 = %289.1;
  (%286, %290, %var_5934, %var_5935, meta[relay.Constant][19] /* ty=Tensor[(72), float32] */, %291)
}

def @func_3502(%var_3486: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  %292 = cast(%var_3486, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %293 = sinh(%292) /* ty=Tensor[(4, 12, 8), float64] */;
  %294 = cast(%var_3486, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%296, %297) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_555() -> Tensor[(14, 7, 15), int16] {
  %298 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %299 = %298.3;
  %300 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 7, 15), float32] */, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%302, %303) /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_1692() -> (Tensor[(14, 7, 15), float32],) {
  %304 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %305 = %304.0;
  (%305,)
}

def @func_1835() -> (Tensor[(6, 3, 13), float32],) {
  %306 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %307 = %306.0;
  (%307,)
}

def @func_2660() -> (Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) {
  %308 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %310 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %311 = atan(%309) /* ty=Tensor[(14, 7, 15), float64] */;
  %312 = @func_2427() /* ty=Tensor[(6, 3, 13), float32] */;
  %313 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
  %314 = %310.0;
  (%311, %312, %313, %314)
}

def @func_5509(%var_5498: Tensor[(126), int8]) -> (Tensor[(9, 2, 7), int8], Tensor[(126), int8], Tensor[(1274), bool]) {
  %315 = cast(%var_5498, dtype="int8") /* ty=Tensor[(126), int8] */;
  %316 = reshape(%315, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), int8] */;
  %317 = @func_3770(%316) /* ty=(Tensor[(9, 2, 7), int8],) */;
  %318 = @func_3413() /* ty=Tensor[(1274), float32] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %320 = log(%319) /* ty=Tensor[(1274), float64] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(1), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?), bool] */;
  %325 = %317.0;
  %326 = less(%323, %324) /* ty=Tensor[(1274), bool] */;
  (%325, %var_5498, %326)
}

def @func_4114() -> (Tensor[(14, 7, 15), uint16],) {
  %327 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %328 = %327.0;
  %329 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 15), float32] */, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %333 = minimum(%331, %332) /* ty=Tensor[(14, 7, 15), uint16] */;
  (%333,)
}

def @func_3681(%var_3649: Tensor[(1, 72), float32], %var_3668: Tensor[(5, 72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) {
  %334 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %335 = cast(%var_3649, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %336 = reshape(%335, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %337 = @func_2231(%336) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
  %338 = cast(%var_3649, dtype="bool") /* ty=Tensor[(1, 72), bool] */;
  %339 = cast(%var_3668, dtype="bool") /* ty=Tensor[(5, 72), bool] */;
  %340 = %334.0;
  %341 = %337.3;
  %342 = logical_and(%338, %339) /* ty=Tensor[(5, 72), bool] */;
  (%340, %341, %342)
}

def @func_5370(%var_5350: Tensor[(7, 5, 7), uint16]) -> Tensor[(7, 5, 7), bool] {
  %343 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="uint16") /* ty=Tensor[(7, 5, 7), uint16] */;
  %344 = shape_of(%var_5350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_5350, dtype="uint16") /* ty=Tensor[(7, 5, 7), uint16] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %347 = subtract(%345, %346) /* ty=Tensor[(7, 5, 7), uint16] */;
  %348 = cast(%347, dtype="bool") /* ty=Tensor[(7, 5, 7), bool] */;
  %349 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="bool") /* ty=Tensor[(7, 5, 7), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%350, %351) /* ty=Tensor[(7, 5, 7), bool] */
}

def @func_6295() -> (Tensor[(1470), float64], Tensor[(14, 7, 15), float32]) {
  %352 = @func_4476() /* ty=Tensor[(1470), float32] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %354 = @func_5561() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) */;
  %355 = tan(%353) /* ty=Tensor[(1470), float64] */;
  %356 = %354.0;
  (%355, %356)
}

def @func_5898() -> Tensor[(14, 7, 15), bool] {
  @func_1558() /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_4837(%var_4787: Tensor[(864), float32], %var_4799: Tensor[(110), int16], %var_4817: Tensor[(1, 72), float32]) -> (Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) {
  %357 = cast(%var_4787, dtype="float32") /* ty=Tensor[(864), float32] */;
  %358 = reshape(%357, newshape=[9, 96]) /* ty=Tensor[(9, 96), float32] */;
  %359 = @func_2992(%358) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) */;
  %360 = cast(%var_4799, dtype="int16") /* ty=Tensor[(110), int16] */;
  %361 = reshape(%360, newshape=[11, 10, 1]) /* ty=Tensor[(11, 10, 1), int16] */;
  %362 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
  %363 = %362.3;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(416), float32] */;
  %365 = asin(%364) /* ty=Tensor[(416), float32] */;
  %366 = cast(%363, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(1), int32] */;
  %368 = cast(%365, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %370 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %371 = cast(%var_4817, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %372 = reshape(%371, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %373 = @func_4149(%372) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) */;
  %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(800), bool] */, dtype="bool") /* ty=Tensor[(800), bool] */;
  %375 = cast(meta[relay.Constant][23] /* ty=Tensor[(800), bool] */, dtype="bool") /* ty=Tensor[(800), bool] */;
  %376 = cast(meta[relay.Constant][23] /* ty=Tensor[(800), bool] */, dtype="int8") /* ty=Tensor[(800), int8] */;
  %377 = reshape(%374, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), bool] */;
  %378 = reshape(%375, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), bool] */;
  %379 = reshape(%376, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), int8] */;
  %380 = @func_2481(%377, %378, %379) /* ty=(Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) */;
  %381 = %359.1;
  %382 = @func_1492(%361) /* ty=Tensor[(11, 10, 4), int16] */;
  %383 = maximum(%368, %369) /* ty=Tensor[(416), uint64] */;
  %384 = %370.1;
  %385 = %373.2;
  %386 = %380.1;
  (%381, %var_4787, %382, %var_4799, %383, %384, %385, %var_4817, %386, meta[relay.Constant][23] /* ty=Tensor[(800), bool] */)
}

def @func_1600(%var_1580: int64, %var_1581: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float64], Tensor[(6, 2, 6), float32], int64, Tensor[(96), int64], Tensor[(468), uint32]) {
  %387 = cast(%var_1580, dtype="int64") /* ty=int64 */;
  %388 = cast(%var_1581, dtype="int64") /* ty=Tensor[(96), int64] */;
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(468), uint32] */, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %390 = reshape(%387, newshape=[]) /* ty=int64 */;
  %391 = reshape(%388, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %392 = reshape(%389, newshape=[468]) /* ty=Tensor[(468), uint32] */;
  %393 = @func_806(%390, %391, %392) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) */;
  %394 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  %395 = %393.0;
  (%394, %395, %var_1580, %var_1581, meta[relay.Constant][24] /* ty=Tensor[(468), uint32] */)
}

def @func_6773() -> (Tensor[(14, 7, 15), int16],) {
  %396 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %397 = %396.0;
  (%397,)
}

def @func_78(%var_49: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  %398 = cast(%var_49, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  erf(%398) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_1558() -> Tensor[(14, 7, 15), bool] {
  %399 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
  %400 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %401 = cast(%400, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %402 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%399, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%403, %404) /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_3918() -> Tensor[(14, 7, 15), int16] {
  %405 = @func_1628() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %405.0
}

def @func_4612(%var_4568: Tensor[(72), float32], %var_4569: Tensor[(96), int64]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) {
  %406 = cast(%var_4568, dtype="float32") /* ty=Tensor[(72), float32] */;
  %407 = cast(%var_4569, dtype="int64") /* ty=Tensor[(96), int64] */;
  %408 = reshape(%406, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %409 = reshape(%407, newshape=[96, 1]) /* ty=Tensor[(96, 1), int64] */;
  %410 = @func_3322(%408, %409) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) */;
  %411 = cast(meta[relay.Constant][25] /* ty=Tensor[(468), uint32] */, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %412 = reshape(%411, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), uint32] */;
  %413 = @func_769(%412) /* ty=(Tensor[(13, 12, 3), bool],) */;
  %414 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %417 = log2(%416) /* ty=Tensor[(14, 7, 15), float64] */;
  %418 = cast(%415, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %422 = %410.1;
  %423 = %413.0;
  %424 = divide(%420, %421) /* ty=Tensor[(14, 7, 15), float64] */;
  %425 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %426 = @func_3413() /* ty=Tensor[(1274), float32] */;
  (%422, %var_4568, %var_4569, %423, meta[relay.Constant][25] /* ty=Tensor[(468), uint32] */, %424, %425, %426)
}

def @func_2276() -> (Tensor[(7, 13, 14), float32],) {
  %427 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %428 = %427.2;
  (%428,)
}

def @func_3413() -> Tensor[(1274), float32] {
  %429 = @func_2932() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %430 = %429.2;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(1274), float32] */;
  tan(%431) /* ty=Tensor[(1274), float32] */
}

def @func_599(%var_564: Tensor[(13, 5, 1), uint64], %var_565: Tensor[(13, 5, 9), uint64], %var_575: Tensor[(300), float64], %var_584: Tensor[(72, 1), float32]) -> (Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) {
  %432 = cast(%var_564, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %433 = cast(%var_565, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %434 = cast(%var_564, dtype="float64") /* ty=Tensor[(13, 5, 1), float64] */;
  %435 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %436 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %437 = cast(meta[relay.Constant][26] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %438 = reshape(%435, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %439 = reshape(%436, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %440 = reshape(%437, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
  %441 = @func_231(%438, %439, %440) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
  %442 = cast(meta[relay.Constant][26] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %443 = reshape(%442, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %444 = %441.3;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %446 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %447 = reshape(%445, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %448 = reshape(%446, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %449 = @func_535(%447, %448) /* ty=(Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) */;
  %450 = cast(%var_584, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %451 = reshape(%450, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %452 = @func_360(%451) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %453 = less(%432, %433) /* ty=Tensor[(13, 5, 9), bool] */;
  %454 = atan(%434) /* ty=Tensor[(13, 5, 1), float64] */;
  %455 = @func_78(%443) /* ty=Tensor[(14, 7, 15), float32] */;
  %456 = %449.3;
  %457 = %452.0;
  (%453, %454, %444, %var_575, meta[relay.Constant][26] /* ty=Tensor[(1470), float32] */, %455, %456, %457, %var_584)
}

def @func_1628() -> (Tensor[(14, 7, 15), int16],) {
  %458 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%458,)
}

def @main(%var_7303: int32, %var_7304: Tensor[(154), int32], %var_7344: Tensor[(392), uint16]) -> (Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], int32, Tensor[(154), int32], Tensor[(7, 14, 4), uint16], Tensor[(392), uint16], Tensor[(14, 7, 15), float32], Tensor[(11, 7, 2), float32]) {
  %459 = @func_2296() /* ty=(Tensor[(14, 7, 15), bool],) */;
  %460 = cast(%var_7344, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %461 = cast(%var_7344, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %462 = reshape(%460, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), uint16] */;
  %463 = reshape(%461, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), uint16] */;
  %464 = @func_6933(%462, %463) /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %465 = cast(%var_7303, dtype="int32") /* ty=int32 */;
  %466 = cast(%var_7304, dtype="int32") /* ty=Tensor[(154), int32] */;
  %467 = reshape(%465, newshape=[]) /* ty=int32 */;
  %468 = reshape(%466, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), int32] */;
  %469 = @func_2088(%467, %468) /* ty=(Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %472 = log10(%471) /* ty=Tensor[(11, 7, 2), float64] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %474 = sinh(%473) /* ty=Tensor[(11, 7, 2), float64] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %476 = %459.0;
  %477 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  %478 = @func_3918() /* ty=Tensor[(14, 7, 15), int16] */;
  %479 = %464.0;
  %480 = @func_6893() /* ty=Tensor[(14, 7, 15), float32] */;
  %481 = asinh(%475) /* ty=Tensor[(11, 7, 2), float32] */;
  (%476, %477, %478, %var_7303, %var_7304, %479, %var_7344, %480, %481)
}

def @func_1336() -> (Tensor[(14, 7, 15), float32],) {
  %482 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  (%482,)
}

def @func_4476() -> Tensor[(1470), float32] {
  %483 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %483.2
}

def @func_1138(%var_1132: Tensor[(65), uint64], %var_1134: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(3, 24), float32]) {
  %484 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %487 = reshape(%486, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
  %488 = @func_967(%487) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
  %489 = cast(%var_1132, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %491 = cast(%var_1134, dtype="float64") /* ty=Tensor[(300), float64] */;
  %492 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %493 = reshape(%489, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
  %494 = reshape(%490, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %495 = reshape(%491, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %496 = reshape(%492, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %497 = @func_599(%493, %494, %495, %496) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
  %498 = %488.0;
  %499 = %497.5;
  (%485, %498, %499, %var_1132, meta[relay.Constant][27] /* ty=Tensor[(585), uint64] */, %var_1134, meta[relay.Constant][28] /* ty=Tensor[(3, 24), float32] */)
}

def @func_1985() -> (Tensor[(14, 7, 15), float64],) {
  %500 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  (%500,)
}

def @func_1225() -> Tensor[(14, 7, 15), float64] {
  %501 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  sin(%502) /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_1201() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
  %503 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %504 = %503.1;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %506 = reshape(%505, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %507 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %508 = reshape(%507, newshape=[7, 13, 14]) /* ty=Tensor[(7, 13, 14), float64] */;
  %509 = @func_78(%506) /* ty=Tensor[(14, 7, 15), float32] */;
  %510 = @func_989(%508) /* ty=Tensor[(7, 13, 14), float32] */;
  (%504, %509, %510, meta[relay.Constant][29] /* ty=Tensor[(1274), float64] */)
}

def @func_2481(%var_2430: Tensor[(16, 5, 10), bool], %var_2442: Tensor[(16, 5, 10), bool], %var_2448: Tensor[(16, 5, 10), int8]) -> (Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) {
  %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 10), bool] */;
  %512 = shape_of(%var_2430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_2430, dtype="bool") /* ty=Tensor[(16, 5, 10), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = cast(%var_2442, dtype="int8") /* ty=Tensor[(16, 5, 10), int8] */;
  %516 = shape_of(%var_2430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_2430, dtype="int8") /* ty=Tensor[(16, 5, 10), int8] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %519 = left_shift(%517, %518) /* ty=Tensor[(16, 5, 10), int8] */;
  %520 = cast(%var_2448, dtype="int64") /* ty=Tensor[(16, 5, 10), int64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="int64") /* ty=Tensor[(16, 5, 10), int64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %524 = logical_and(%513, %514) /* ty=Tensor[(16, 5, 10), bool] */;
  %525 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
  %526 = right_shift(%522, %523) /* ty=Tensor[(16, 5, 10), int64] */;
  (%524, %525, %526)
}

def @func_6051(%var_5997: Tensor[(3, 16, 16), uint8], %var_6032: int32, %var_6033: Tensor[(22, 7), int32], %var_6045: Tensor[(3, 16, 15), float32]) -> (Tensor[(3, 16, 16), uint8], Tensor[(14, 7, 15), float32], int32, Tensor[(22, 7), int32], Tensor[(14, 7, 15), float32], Tensor[(1, 16), int32], Tensor[(3, 16, 15), bool]) {
  %527 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 16, 1), uint8] */, dtype="uint8") /* ty=Tensor[(3, 16, 1), uint8] */;
  %528 = cast(%var_5997, dtype="uint8") /* ty=Tensor[(3, 16, 16), uint8] */;
  %529 = cast(%var_6032, dtype="int32") /* ty=int32 */;
  %530 = cast(%var_6033, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %531 = reshape(%529, newshape=[]) /* ty=int32 */;
  %532 = reshape(%530, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), int32] */;
  %533 = @func_2088(%531, %532) /* ty=(Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) */;
  %534 = @func_5027() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */;
  %535 = cast(%var_6032, dtype="int32") /* ty=int32 */;
  %536 = reshape(%535, newshape=[]) /* ty=int32 */;
  %537 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 16, 1), uint8] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
  %538 = sin(%537) /* ty=Tensor[(3, 16, 1), float32] */;
  %539 = cast(%538, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %540 = cast(%var_6045, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %541 = bitwise_or(%527, %528) /* ty=Tensor[(3, 16, 16), uint8] */;
  %542 = %533.1;
  %543 = %534.2;
  %544 = @func_3725(%536) /* ty=Tensor[(1, 16), int32] */;
  %545 = logical_or(%539, %540) /* ty=Tensor[(3, 16, 15), bool] */;
  (%541, %542, %var_6032, %var_6033, %543, %544, %545)
}

def @func_5131(%var_5076: Tensor[(585), uint64], %var_5078: Tensor[(72, 1), float32], %var_5089: Tensor[(72, 300), bool], %var_5105: Tensor[(72, 300), bool]) -> (Tensor[(14, 7, 15), int16], Tensor[(1470), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(72, 300), bool], Tensor[(585), uint64], Tensor[(72, 300), int16]) {
  %546 = cast(meta[relay.Constant][32] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %547 = cast(%var_5076, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %548 = cast(meta[relay.Constant][33] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %549 = cast(%var_5078, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %550 = reshape(%546, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
  %551 = reshape(%547, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %552 = reshape(%548, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %553 = reshape(%549, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %554 = @func_599(%550, %551, %552, %553) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
  %555 = cast(meta[relay.Constant][33] /* ty=Tensor[(300), float64] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %556 = cast(%var_5078, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %557 = greater_equal(%555, %556) /* ty=Tensor[(72, 300), bool] */;
  %558 = cast(%var_5089, dtype="bool") /* ty=Tensor[(72, 300), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(2), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(72, 300), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %562 = cast(%var_5078, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %563 = reshape(%562, newshape=[6, 12]) /* ty=Tensor[(6, 12), float32] */;
  %564 = @func_1302(%563) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) */;
  %565 = cast(%var_5105, dtype="int16") /* ty=Tensor[(72, 300), int16] */;
  %566 = shape_of(%557, dtype="int32") /* ty=Tensor[(2), int32] */;
  %567 = cast(%557, dtype="int16") /* ty=Tensor[(72, 300), int16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %569 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %570 = %554.4;
  %571 = logical_and(%560, %561) /* ty=Tensor[(72, 300), bool] */;
  %572 = %564.3;
  %573 = bitwise_xor(%567, %568) /* ty=Tensor[(72, 300), int16] */;
  (%569, %570, meta[relay.Constant][32] /* ty=Tensor[(65), uint64] */, %var_5076, %571, %572, %573)
}

def @func_3200() -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) {
  %574 = @func_2901() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) */;
  %575 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %576 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %577 = %576.2;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(7, 13, 14), float32] */;
  %579 = %574.0;
  %580 = %575.1;
  %581 = asinh(%578) /* ty=Tensor[(7, 13, 14), float32] */;
  (%579, %580, %581)
}

def @func_7074() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
  %582 = @func_3999() /* ty=(Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %583 = @func_5040() /* ty=Tensor[(14, 7, 15), float32] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %585 = %582.1;
  %586 = atanh(%584) /* ty=Tensor[(14, 7, 15), float64] */;
  (%585, %586)
}

def @func_1026() -> Tensor[(14, 7, 15), float64] {
  %587 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  tan(%589) /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_2296() -> (Tensor[(14, 7, 15), bool],) {
  %590 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
  (%590,)
}

def @func_6933(%var_6926: Tensor[(7, 14, 4), uint16], %var_6927: Tensor[(7, 14, 4), uint16]) -> (Tensor[(7, 14, 4), uint16],) {
  %591 = cast(%var_6927, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %592 = shape_of(%var_6926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_6926, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %595 = left_shift(%593, %594) /* ty=Tensor[(7, 14, 4), uint16] */;
  (%595,)
}

def @func_5884() -> (Tensor[(14, 7, 15), float32],) {
  %596 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
  (%596,)
}

def @func_5636(%var_5619: Tensor[(72), float32]) -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(72), float32], Tensor[(1, 360), float32], Tensor[(13, 2, 16), float64]) {
  %597 = @func_5193() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) */;
  %598 = cast(%var_5619, dtype="float32") /* ty=Tensor[(72), float32] */;
  %599 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 360), float32] */, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %600 = reshape(%598, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
  %601 = reshape(%599, newshape=[5, 72]) /* ty=Tensor[(5, 72), float32] */;
  %602 = @func_3681(%600, %601) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) */;
  %603 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
  %604 = @func_3611() /* ty=Tensor[(6, 3, 13), float32] */;
  %605 = %597.0;
  %606 = %602.1;
  %607 = %603.2;
  (%604, %605, %606, %var_5619, meta[relay.Constant][34] /* ty=Tensor[(1, 360), float32] */, %607)
}

def @func_2122() -> (Tensor[(14, 7, 15), float32],) {
  %608 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  (%608,)
}

def @func_2042() -> (Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
  %609 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %610 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %611 = %609.3;
  %612 = %610.0;
  (%611, %612)
}

def @func_1517(%var_1509: Tensor[(13, 2, 16), float64]) -> (Tensor[(13, 2, 16), float64],) {
  %613 = cast(%var_1509, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %614 = acos(%613) /* ty=Tensor[(13, 2, 16), float64] */;
  (%614,)
}

def @func_2306() -> (Tensor[(14, 7, 15), float32],) {
  %615 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %616 = %615.0;
  (%616,)
}

def @func_458(%var_436: int64, %var_437: Tensor[(12, 8, 1), int64]) -> (Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) {
  %617 = cast(%var_436, dtype="int64") /* ty=int64 */;
  %618 = cast(%var_437, dtype="int64") /* ty=Tensor[(12, 8, 1), int64] */;
  %619 = cast(%var_437, dtype="int64") /* ty=Tensor[(12, 8, 1), int64] */;
  %620 = cast(%var_436, dtype="int64") /* ty=int64 */;
  %621 = minimum(%617, %618) /* ty=Tensor[(12, 8, 1), int64] */;
  %622 = bitwise_or(%619, %620) /* ty=Tensor[(12, 8, 1), int64] */;
  (%621, %622)
}

def @func_4219() -> (Tensor[(14, 7, 15), float32],) {
  %623 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
  (%623,)
}

def @func_2519(%var_2490: Tensor[(15, 10, 7), float32]) -> (Tensor[(15, 10, 7), float64], Tensor[(14, 7, 15), float32]) {
  %624 = cast(%var_2490, dtype="float32") /* ty=Tensor[(15, 10, 7), float32] */;
  %625 = tan(%624) /* ty=Tensor[(15, 10, 7), float32] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(15, 10, 7), float64] */;
  %627 = log2(%626) /* ty=Tensor[(15, 10, 7), float64] */;
  %628 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  (%627, %628)
}

def @func_695() -> (Tensor[(14, 7, 15), int16],) {
  %629 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%629,)
}

def @func_1807() -> Tensor[(14, 7, 15), float32] {
  %630 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %630.0
}

def @func_4983() -> Tensor[(14, 7, 15), uint64] {
  %631 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %634 = reshape(%633, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %635 = @func_78(%634) /* ty=Tensor[(14, 7, 15), float32] */;
  %636 = cast(%635, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %637 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%632, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%638, %639) /* ty=Tensor[(14, 7, 15), uint64] */
}

def @func_806(%var_790: int64, %var_791: Tensor[(96), int64], %var_795: Tensor[(468), uint32]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) {
  %640 = cast(meta[relay.Constant][35] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %641 = reshape(%640, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %642 = @func_360(%641) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %643 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %645 = cast(%var_790, dtype="int64") /* ty=int64 */;
  %646 = cast(%var_791, dtype="int64") /* ty=Tensor[(96), int64] */;
  %647 = reshape(%645, newshape=[]) /* ty=int64 */;
  %648 = reshape(%646, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
  %649 = @func_458(%647, %648) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
  %650 = cast(%var_795, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %651 = reshape(%650, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), uint32] */;
  %652 = @func_769(%651) /* ty=(Tensor[(13, 12, 3), bool],) */;
  %653 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %654 = %642.0;
  %655 = cos(%644) /* ty=Tensor[(14, 7, 15), float64] */;
  %656 = %649.0;
  %657 = %652.0;
  %658 = %653.0;
  (%654, meta[relay.Constant][35] /* ty=Tensor[(72), float32] */, %655, %656, %var_790, %var_791, %657, %var_795, %658)
}

def @func_5193() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
  %659 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
  %660 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  %661 = %659.0;
  (%660, %661)
}

def @func_1302(%var_1289: Tensor[(6, 12), float32]) -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) {
  %662 = cast(meta[relay.Constant][36] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %663 = cast(meta[relay.Constant][37] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %664 = cast(meta[relay.Constant][38] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %665 = cast(%var_1289, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %666 = reshape(%662, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
  %667 = reshape(%663, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %668 = reshape(%664, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %669 = reshape(%665, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %670 = @func_599(%666, %667, %668, %669) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
  %671 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
  %672 = %670.5;
  (%671, %672, meta[relay.Constant][36] /* ty=Tensor[(65), uint64] */, meta[relay.Constant][37] /* ty=Tensor[(585), uint64] */, meta[relay.Constant][38] /* ty=Tensor[(300), float64] */, %var_1289)
}

def @func_2779(%var_2757: float32, %var_2758: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), float32], Tensor[(14, 7, 15), float32]) {
  %673 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %674 = cast(%var_2758, dtype="float32") /* ty=Tensor[(16, 3, 8), float32] */;
  %675 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
  %676 = power(%673, %674) /* ty=Tensor[(16, 3, 8), float32] */;
  %677 = %675.3;
  (%676, %677)
}

def @func_6378(%var_6368: int64, %var_6369: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float32], int64, Tensor[(96), int64], Tensor[(12, 8, 1274), bool]) {
  %678 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %679 = @func_5813() /* ty=Tensor[(1274), float32] */;
  %680 = cast(%var_6368, dtype="int64") /* ty=int64 */;
  %681 = cast(%var_6369, dtype="int64") /* ty=Tensor[(96), int64] */;
  %682 = reshape(%680, newshape=[]) /* ty=int64 */;
  %683 = reshape(%681, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
  %684 = @func_458(%682, %683) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
  %685 = %684.1;
  %686 = cast(%679, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %687 = cast(%685, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
  %688 = %678.0;
  %689 = greater_equal(%686, %687) /* ty=Tensor[(12, 8, 1274), bool] */;
  (%688, %var_6368, %var_6369, %689)
}

def @func_5813() -> Tensor[(1274), float32] {
  @func_3413() /* ty=Tensor[(1274), float32] */
}

def @func_3471(%var_3458: Tensor[(15, 1, 10), uint64], %var_3459: Tensor[(15, 12, 10), uint64]) -> Tensor[(15, 12, 10), uint64] {
  %690 = cast(%var_3458, dtype="uint64") /* ty=Tensor[(15, 1, 10), uint64] */;
  %691 = cast(%var_3459, dtype="uint64") /* ty=Tensor[(15, 12, 10), uint64] */;
  bitwise_and(%690, %691) /* ty=Tensor[(15, 12, 10), uint64] */
}

def @func_2992(%var_2988: Tensor[(9, 96), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) {
  %692 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %693 = cast(meta[relay.Constant][39] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %694 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 96), int64] */, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %695 = reshape(%693, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %696 = reshape(%694, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %697 = @func_1451(%695, %696) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 96), int64] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %699 = cosh(%698) /* ty=Tensor[(1, 96), float32] */;
  %700 = cast(%699, dtype="uint32") /* ty=Tensor[(1, 96), uint32] */;
  %701 = cast(%var_2988, dtype="uint32") /* ty=Tensor[(9, 96), uint32] */;
  %702 = %692.0;
  %703 = %697.7;
  %704 = bitwise_xor(%700, %701) /* ty=Tensor[(9, 96), uint32] */;
  (%702, %703, meta[relay.Constant][39] /* ty=Tensor[(72), float32] */, %704)
}

def @func_1060(%var_1048: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), int64]) {
  %705 = cast(%var_1048, dtype="float32") /* ty=Tensor[(72), float32] */;
  %706 = reshape(%705, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %707 = @func_360(%706) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %708 = %707.0;
  %709 = cast(%var_1048, dtype="int64") /* ty=Tensor[(72), int64] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="int64") /* ty=Tensor[(6, 2, 6), int64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %713 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %714 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %715 = bitwise_xor(%711, %712) /* ty=Tensor[(6, 2, 6), int64] */;
  (%713, %714, %715)
}

def @func_4949() -> (Tensor[(14, 7, 15), float64],) {
  %716 = @func_4428() /* ty=Tensor[(14, 7, 15), float64] */;
  (%716,)
}

def @func_1262() -> Tensor[(14, 7, 15), float32] {
  %717 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %717.3
}

def @func_1702() -> (Tensor[(14, 7, 15), bool],) {
  %718 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
  (%718,)
}

def @func_4149(%var_4130: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) {
  %719 = @func_1628() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %720 = cast(%var_4130, dtype="float32") /* ty=Tensor[(72), float32] */;
  %721 = reshape(%720, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %722 = @func_2231(%721) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
  %723 = %719.0;
  %724 = %722.4;
  (%723, %724, %var_4130)
}

def @func_6130() -> Tensor[(14, 7, 15), float64] {
  @func_4428() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_5870() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
  %725 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %726 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
  %727 = %725.0;
  (%726, %727)
}

def @func_5272(%var_5247: Tensor[(7, 3, 9), int16]) -> (Tensor[(7, 3, 9), int16], Tensor[(7, 3, 9), float64], Tensor[(14, 7, 15), float64]) {
  %728 = cast(%var_5247, dtype="int16") /* ty=Tensor[(7, 3, 9), int16] */;
  %729 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 3, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 3, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 3, 9), int16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %732 = cast(%var_5247, dtype="float64") /* ty=Tensor[(7, 3, 9), float64] */;
  %733 = @func_5027() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */;
  %734 = minimum(%730, %731) /* ty=Tensor[(7, 3, 9), int16] */;
  %735 = erf(%732) /* ty=Tensor[(7, 3, 9), float64] */;
  %736 = %733.3;
  (%734, %735, %736)
}

def @func_37(%var_26: Tensor[(11, 7, 11), float32], %var_29: Tensor[(11, 7, 11), float32]) -> (Tensor[(11, 7, 11), float32], Tensor[(11, 7, 11), float32]) {
  %737 = cast(%var_26, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %738 = cast(%var_29, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %739 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_26, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %742 = asin(%737) /* ty=Tensor[(11, 7, 11), float32] */;
  %743 = divide(%740, %741) /* ty=Tensor[(11, 7, 11), float32] */;
  (%742, %743)
}

def @func_4712(%var_4644: Tensor[(2, 9, 3), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(2, 9, 3), uint16]) {
  %744 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %745 = %744.0;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %747 = cast(%var_4644, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %748 = acosh(%747) /* ty=Tensor[(2, 9, 3), float32] */;
  %749 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(2, 9, 3), uint16] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="uint16") /* ty=Tensor[(2, 9, 3), uint16] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %753 = acos(%746) /* ty=Tensor[(14, 7, 15), float32] */;
  %754 = maximum(%751, %752) /* ty=Tensor[(2, 9, 3), uint16] */;
  (%753, %754)
}

def @func_360(%var_353: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), float32],) {
  %755 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %756 = cast(%var_353, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %757 = power(%755, %756) /* ty=Tensor[(6, 2, 6), float32] */;
  (%757,)
}

def @func_6310(%var_6307: Tensor[(11, 14, 11), float32]) -> Tensor[(11, 14, 11), float32] {
  %758 = cast(%var_6307, dtype="float32") /* ty=Tensor[(11, 14, 11), float32] */;
  log10(%758) /* ty=Tensor[(11, 14, 11), float32] */
}

def @func_6966() -> (Tensor[(14, 7, 15), float32],) {
  %759 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %760 = %759.3;
  (%760,)
}

def @func_1769() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) {
  %761 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %764 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 7, 15), bool] */, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
  %765 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%762, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %768 = cast(meta[relay.Constant][44] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %769 = reshape(%768, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), float64] */;
  %770 = @func_1517(%769) /* ty=(Tensor[(13, 2, 16), float64],) */;
  %771 = cast(meta[relay.Constant][44] /* ty=Tensor[(416), float64] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %772 = exp(%763) /* ty=Tensor[(14, 7, 15), float32] */;
  %773 = right_shift(%766, %767) /* ty=Tensor[(14, 7, 15), uint8] */;
  %774 = %770.0;
  %775 = log2(%771) /* ty=Tensor[(416), float32] */;
  (%772, %773, %774, %775)
}

def @func_2901() -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) {
  %776 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %777 = %776.1;
  %778 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 3, 13), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 13), bool] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(6, 3, 13), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = greater_equal(%780, %781) /* ty=Tensor[(6, 3, 13), bool] */;
  %783 = @func_1980() /* ty=Tensor[(14, 7, 15), float32] */;
  (%782, %783)
}

def @func_5040() -> Tensor[(14, 7, 15), float32] {
  @func_1923() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_5201() -> (Tensor[(7, 13, 14), float32],) {
  %784 = @func_2276() /* ty=(Tensor[(7, 13, 14), float32],) */;
  %785 = %784.0;
  (%785,)
}

def @func_7166(%var_7140: Tensor[(72), float32], %var_7141: Tensor[(4, 24), int64]) -> (Tensor[(6, 3, 13), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(4, 24), int64], Tensor[(14, 7, 15), float32], Tensor[(468), uint32]) {
  %786 = @func_2901() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) */;
  %787 = cast(%var_7140, dtype="float32") /* ty=Tensor[(72), float32] */;
  %788 = cast(%var_7141, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %789 = reshape(%787, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %790 = reshape(%788, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %791 = @func_1451(%789, %790) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %792 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %793 = %791.1;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %795 = cast(%var_7141, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %796 = reshape(%794, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %797 = reshape(%795, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %798 = @func_4612(%796, %797) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) */;
  %799 = %786.0;
  %800 = %792.0;
  %801 = %798.4;
  (%799, %793, %var_7140, %var_7141, %800, %801)
}

def @func_7114() -> Tensor[(14, 7, 15), float64] {
  %802 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %802.0
}

def @func_3770(%var_3761: Tensor[(9, 2, 7), int8]) -> (Tensor[(9, 2, 7), int8],) {
  %803 = cast(%var_3761, dtype="int8") /* ty=Tensor[(9, 2, 7), int8] */;
  %804 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(9, 2, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 2, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 2, 7), int8] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %807 = logical_xor(%805, %806) /* ty=Tensor[(9, 2, 7), int8] */;
  (%807,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3685(%var_3683: Tensor[(1, 72), float32], %var_3684: Tensor[(5, 72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) {
  @func_3681(%var_3683, %var_3684) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) */
}

def @func_3829() -> Tensor[(5, 4, 3), bool] {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 4, 3), int8] */, dtype="bool") /* ty=Tensor[(5, 4, 3), bool] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 4, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 4, 3), int8] */, dtype="bool") /* ty=Tensor[(5, 4, 3), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%2, %3) /* ty=Tensor[(5, 4, 3), bool] */
}

def @func_1703() -> (Tensor[(14, 7, 15), bool],) {
  %5 = fn () -> (Tensor[(14, 7, 15), bool],) {
    %4 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
    (%4,)
  };
  %5() /* ty=(Tensor[(14, 7, 15), bool],) */
}

def @func_1494(%var_1493: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 4), int16] {
  %8 = fn (%var_1486: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 4), int16] {
    %6 = cast(%var_1486, dtype="int16") /* ty=Tensor[(11, 10, 1), int16] */;
    %7 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 10, 4), int16] */;
    right_shift(%6, %7) /* ty=Tensor[(11, 10, 4), int16] */
  };
  %8(%var_1493) /* ty=Tensor[(11, 10, 4), int16] */
}

def @func_2902() -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) {
  %17 = fn () -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) {
    %9 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
    %10 = %9.1;
    %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 3, 13), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 13), bool] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="bool") /* ty=Tensor[(6, 3, 13), bool] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %15 = greater_equal(%13, %14) /* ty=Tensor[(6, 3, 13), bool] */;
    %16 = @func_1980() /* ty=Tensor[(14, 7, 15), float32] */;
    (%15, %16)
  };
  %17() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) */
}

def @func_2069() -> (Tensor[(14, 7, 15), float64],) {
  @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */
}

def @func_2124() -> (Tensor[(14, 7, 15), float32],) {
  @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_1835() -> (Tensor[(6, 3, 13), float32],) {
  %18 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %19 = %18.0;
  (%19,)
}

def @func_2660() -> (Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) {
  %20 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %22 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %23 = atan(%21) /* ty=Tensor[(14, 7, 15), float64] */;
  %24 = @func_2427() /* ty=Tensor[(6, 3, 13), float32] */;
  %25 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
  %26 = %22.0;
  (%23, %24, %25, %26)
}

def @func_4477() -> Tensor[(1470), float32] {
  %28 = fn () -> Tensor[(1470), float32] {
    %27 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %27.2
  };
  %28() /* ty=Tensor[(1470), float32] */
}

def @func_6967() -> (Tensor[(14, 7, 15), float32],) {
  %31 = fn () -> (Tensor[(14, 7, 15), float32],) {
    %29 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %30 = %29.3;
    (%30,)
  };
  %31() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_771(%var_770: Tensor[(13, 12, 3), uint32]) -> (Tensor[(13, 12, 3), bool],) {
  %37 = fn (%var_755: Tensor[(13, 12, 3), uint32]) -> (Tensor[(13, 12, 3), bool],) {
    %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
    %33 = shape_of(%var_755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%var_755, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %36 = greater_equal(%34, %35) /* ty=Tensor[(13, 12, 3), bool] */;
    (%36,)
  };
  %37(%var_770) /* ty=(Tensor[(13, 12, 3), bool],) */
}

def @func_1226() -> Tensor[(14, 7, 15), float64] {
  %40 = fn () -> Tensor[(14, 7, 15), float64] {
    %38 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
    %39 = cast(%38, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    sin(%39) /* ty=Tensor[(14, 7, 15), float64] */
  };
  %40() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_538(%var_536: Tensor[(14, 7, 15), float32], %var_537: Tensor[(300), float64]) -> (Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) {
  %66 = fn (%var_481: Tensor[(14, 7, 15), float32], %var_487: Tensor[(300), float64]) -> (Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) {
    %41 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %42 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %43 = %42.1;
    %44 = cast(%var_481, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %48 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
    %49 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
    %50 = %41.2;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(1470), float32] */;
    %52 = reshape(%48, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %53 = reshape(%49, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %54 = reshape(%51, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
    %55 = @func_231(%52, %53, %54) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
    %56 = cast(%var_487, dtype="float64") /* ty=Tensor[(300), float64] */;
    %57 = %55.4;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %59 = less(%46, %47) /* ty=Tensor[(14, 7, 15), bool] */;
    %60 = cast(%59, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %61 = reshape(%56, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %62 = reshape(%58, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
    %63 = reshape(%60, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
    %64 = @func_231(%61, %62, %63) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
    %65 = %64.0;
    (%50, %59, %57, %var_487, %65)
  };
  %66(%var_536, %var_537) /* ty=(Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) */
}

def @func_1923() -> Tensor[(14, 7, 15), float32] {
  @func_1262() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_3919() -> Tensor[(14, 7, 15), int16] {
  %68 = fn () -> Tensor[(14, 7, 15), int16] {
    %67 = @func_1628() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %67.0
  };
  %68() /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_3613() -> Tensor[(6, 3, 13), float32] {
  @func_3611() /* ty=Tensor[(6, 3, 13), float32] */
}

def @func_363(%var_361: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), float32],) {
  @func_360(%var_361) /* ty=(Tensor[(6, 2, 6), float32],) */
}

def @func_6085(%var_6083: Tensor[(13, 16, 8), int16], %var_6084: Tensor[(13, 16, 8), int16]) -> (Tensor[(13, 16, 8), int16], Tensor[(14, 7, 15), uint64], Tensor[(1470), int16]) {
  %78 = fn (%var_6072: Tensor[(13, 16, 8), int16], %var_6073: Tensor[(13, 16, 8), int16]) -> (Tensor[(13, 16, 8), int16], Tensor[(14, 7, 15), uint64], Tensor[(1470), int16]) {
    %69 = cast(%var_6073, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
    %70 = shape_of(%var_6072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%var_6072, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(1470), int16] */, dtype="int16") /* ty=Tensor[(1470), int16] */;
    %74 = reshape(%73, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
    %75 = @func_967(%74) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
    %76 = bitwise_or(%71, %72) /* ty=Tensor[(13, 16, 8), int16] */;
    %77 = %75.0;
    (%76, %77, meta[relay.Constant][5] /* ty=Tensor[(1470), int16] */)
  };
  %78(%var_6083, %var_6084) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(14, 7, 15), uint64], Tensor[(1470), int16]) */
}

def @func_1142(%var_1140: Tensor[(65), uint64], %var_1141: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(3, 24), float32]) {
  @func_1138(%var_1140, %var_1141) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(3, 24), float32]) */
}

def @func_697() -> (Tensor[(14, 7, 15), int16],) {
  @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */
}

def @func_3200() -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) {
  %79 = @func_2901() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) */;
  %80 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %81 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %82 = %81.2;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(7, 13, 14), float32] */;
  %84 = %79.0;
  %85 = %80.1;
  %86 = asinh(%83) /* ty=Tensor[(7, 13, 14), float32] */;
  (%84, %85, %86)
}

def @func_3356(%var_3355: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16], Tensor[(72), float32]) {
  %93 = fn (%var_3343: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16], Tensor[(72), float32]) {
    %87 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
    %88 = cast(%var_3343, dtype="float32") /* ty=Tensor[(72), float32] */;
    %89 = reshape(%88, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %90 = @func_2231(%89) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
    %91 = %87.1;
    %92 = %90.2;
    (%91, %92, %var_3343)
  };
  %93(%var_3355) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16], Tensor[(72), float32]) */
}

def @func_7115() -> Tensor[(14, 7, 15), float64] {
  %95 = fn () -> Tensor[(14, 7, 15), float64] {
    %94 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
    %94.0
  };
  %95() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_5201() -> (Tensor[(7, 13, 14), float32],) {
  %96 = @func_2276() /* ty=(Tensor[(7, 13, 14), float32],) */;
  %97 = %96.0;
  (%97,)
}

def @func_6774() -> (Tensor[(14, 7, 15), int16],) {
  %100 = fn () -> (Tensor[(14, 7, 15), int16],) {
    %98 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %99 = %98.0;
    (%99,)
  };
  %100() /* ty=(Tensor[(14, 7, 15), int16],) */
}

def @func_6378(%var_6368: int64, %var_6369: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float32], int64, Tensor[(96), int64], Tensor[(12, 8, 1274), bool]) {
  %101 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %102 = @func_5813() /* ty=Tensor[(1274), float32] */;
  %103 = cast(%var_6368, dtype="int64") /* ty=int64 */;
  %104 = cast(%var_6369, dtype="int64") /* ty=Tensor[(96), int64] */;
  %105 = reshape(%103, newshape=[]) /* ty=int64 */;
  %106 = reshape(%104, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
  %107 = @func_458(%105, %106) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
  %108 = %107.1;
  %109 = cast(%102, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %110 = cast(%108, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
  %111 = %101.0;
  %112 = greater_equal(%109, %110) /* ty=Tensor[(12, 8, 1274), bool] */;
  (%111, %var_6368, %var_6369, %112)
}

def @func_41(%var_39: Tensor[(11, 7, 11), float32], %var_40: Tensor[(11, 7, 11), float32]) -> (Tensor[(11, 7, 11), float32], Tensor[(11, 7, 11), float32]) {
  @func_37(%var_39, %var_40) /* ty=(Tensor[(11, 7, 11), float32], Tensor[(11, 7, 11), float32]) */
}

def @func_2133() -> Tensor[(14, 7, 15), int16] {
  %113 = fn () -> Tensor[(14, 7, 15), int16] {
    @func_555() /* ty=Tensor[(14, 7, 15), int16] */
  };
  %113() /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_4322() -> Tensor[(14, 7, 15), bool] {
  %115 = fn () -> Tensor[(14, 7, 15), bool] {
    %114 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
    %114.0
  };
  %115() /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_3108(%var_3106: Tensor[(14, 7, 15), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(13, 2, 16), float64]) {
  @func_3105(%var_3106) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(13, 2, 16), float64]) */
}

def @func_3727(%var_3726: int32) -> Tensor[(1, 16), int32] {
  %118 = fn (%var_3687: int32) -> Tensor[(1, 16), int32] {
    %116 = cast(%var_3687, dtype="int32") /* ty=int32 */;
    %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 16), int32] */, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
    left_shift(%116, %117) /* ty=Tensor[(1, 16), int32] */
  };
  %118(%var_3726) /* ty=Tensor[(1, 16), int32] */
}

def @func_970(%var_968: Tensor[(14, 7, 15), int16]) -> (Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) {
  @func_967(%var_968) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */
}

def @func_1630() -> (Tensor[(14, 7, 15), int16],) {
  @func_1628() /* ty=(Tensor[(14, 7, 15), int16],) */
}

def @func_6937(%var_6935: Tensor[(7, 14, 4), uint16], %var_6936: Tensor[(7, 14, 4), uint16]) -> (Tensor[(7, 14, 4), uint16],) {
  @func_6933(%var_6935, %var_6936) /* ty=(Tensor[(7, 14, 4), uint16],) */
}

def @func_6894() -> Tensor[(14, 7, 15), float32] {
  %119 = fn () -> Tensor[(14, 7, 15), float32] {
    @func_1262() /* ty=Tensor[(14, 7, 15), float32] */
  };
  %119() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_2357() -> (Tensor[(14, 7, 15), float64],) {
  %122 = fn () -> (Tensor[(14, 7, 15), float64],) {
    %120 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
    %121 = %120.0;
    (%121,)
  };
  %122() /* ty=(Tensor[(14, 7, 15), float64],) */
}

def @func_2276() -> (Tensor[(7, 13, 14), float32],) {
  %123 = @func_1201() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
  %124 = %123.2;
  (%124,)
}

def @func_6132() -> Tensor[(14, 7, 15), float64] {
  @func_6130() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_1264() -> Tensor[(14, 7, 15), float32] {
  @func_1262() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_1027() -> Tensor[(14, 7, 15), float64] {
  %128 = fn () -> Tensor[(14, 7, 15), float64] {
    %125 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %126 = %125.0;
    %127 = cast(%126, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    tan(%127) /* ty=Tensor[(14, 7, 15), float64] */
  };
  %128() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_2234(%var_2232: Tensor[(72), float32]) -> (Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) {
  @func_2231(%var_2232) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */
}

def @func_5512(%var_5510: Tensor[(126), int8]) -> (Tensor[(9, 2, 7), int8], Tensor[(126), int8], Tensor[(1274), bool]) {
  @func_5509(%var_5510) /* ty=(Tensor[(9, 2, 7), int8], Tensor[(126), int8], Tensor[(1274), bool]) */
}

def @func_1837() -> (Tensor[(6, 3, 13), float32],) {
  @func_1835() /* ty=(Tensor[(6, 3, 13), float32],) */
}

def @func_2995(%var_2993: Tensor[(9, 96), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) {
  @func_2992(%var_2993) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) */
}

def @func_2934() -> (Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
  @func_2932() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */
}

def @func_5885() -> (Tensor[(14, 7, 15), float32],) {
  %130 = fn () -> (Tensor[(14, 7, 15), float32],) {
    %129 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
    (%129,)
  };
  %130() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_6130() -> Tensor[(14, 7, 15), float64] {
  @func_4428() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_1202() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
  %139 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
    %131 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %132 = %131.1;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %134 = reshape(%133, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %136 = reshape(%135, newshape=[7, 13, 14]) /* ty=Tensor[(7, 13, 14), float64] */;
    %137 = @func_78(%134) /* ty=Tensor[(14, 7, 15), float32] */;
    %138 = @func_989(%136) /* ty=Tensor[(7, 13, 14), float32] */;
    (%132, %137, %138, meta[relay.Constant][7] /* ty=Tensor[(1274), float64] */)
  };
  %139() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */
}

def @func_5843() -> Tensor[(14, 7, 15), uint16] {
  %140 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %141 = %140.0;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 7, 15), float32] */, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%144, %145) /* ty=Tensor[(14, 7, 15), uint16] */
}

def @func_744() -> (Tensor[(6, 3, 13), float32],) {
  @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */
}

def @func_1454(%var_1452: Tensor[(72), float32], %var_1453: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) {
  %163 = fn (%var_1402: Tensor[(72), float32], %var_1442: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) {
    %146 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %147 = cast(%var_1402, dtype="float32") /* ty=Tensor[(72), float32] */;
    %148 = reshape(%147, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
    %149 = @func_360(%148) /* ty=(Tensor[(6, 2, 6), float32],) */;
    %150 = cast(%var_1402, dtype="float32") /* ty=Tensor[(72), float32] */;
    %151 = reshape(%150, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
    %152 = @func_360(%151) /* ty=(Tensor[(6, 2, 6), float32],) */;
    %153 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %154 = cast(%var_1442, dtype="int64") /* ty=Tensor[(96), int64] */;
    %155 = reshape(%153, newshape=[]) /* ty=int64 */;
    %156 = reshape(%154, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
    %157 = @func_458(%155, %156) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
    %158 = %146.0;
    %159 = %149.0;
    %160 = %152.0;
    %161 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
    %162 = %157.1;
    (%158, %159, %var_1402, %160, %161, %162, -6 /* ty=int64 */, %var_1442)
  };
  %163(%var_1452, %var_1453) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */
}

def @func_1559() -> Tensor[(14, 7, 15), bool] {
  %170 = fn () -> Tensor[(14, 7, 15), bool] {
    %164 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
    %165 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %166 = cast(%165, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %167 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%164, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%168, %169) /* ty=Tensor[(14, 7, 15), bool] */
  };
  %170() /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_3812(%var_3786: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64], Tensor[(14, 7, 15), float32]) {
  %171 = cast(%var_3786, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %172 = cosh(%171) /* ty=Tensor[(4, 2, 3), float64] */;
  %173 = cast(%var_3786, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %178 = mod(%175, %176) /* ty=Tensor[(4, 2, 3), float64] */;
  %179 = %177.0;
  (%178, %179)
}

def @func_6238() -> Tensor[(14, 7, 15), float64] {
  %180 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %180.0
}

def @func_5042() -> Tensor[(14, 7, 15), float32] {
  @func_5040() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_2231(%var_2206: Tensor[(72), float32]) -> (Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) {
  %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %182 = reshape(%181, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), float64] */;
  %183 = @func_1517(%182) /* ty=(Tensor[(13, 2, 16), float64],) */;
  %184 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %185 = %184.0;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 7, 15), float64] */, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %190 = cast(%var_2206, dtype="float32") /* ty=Tensor[(72), float32] */;
  %191 = reshape(%190, newshape=[6, 12]) /* ty=Tensor[(6, 12), float32] */;
  %192 = @func_1302(%191) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) */;
  %193 = %183.0;
  %194 = multiply(%188, %189) /* ty=Tensor[(14, 7, 15), int16] */;
  %195 = %192.4;
  (%193, meta[relay.Constant][9] /* ty=Tensor[(416), float64] */, %194, %195, %var_2206)
}

def @func_1925() -> Tensor[(14, 7, 15), float32] {
  @func_1923() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_5638(%var_5637: Tensor[(72), float32]) -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(72), float32], Tensor[(1, 360), float32], Tensor[(13, 2, 16), float64]) {
  %207 = fn (%var_5619: Tensor[(72), float32]) -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(72), float32], Tensor[(1, 360), float32], Tensor[(13, 2, 16), float64]) {
    %196 = @func_5193() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) */;
    %197 = cast(%var_5619, dtype="float32") /* ty=Tensor[(72), float32] */;
    %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 360), float32] */, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
    %199 = reshape(%197, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
    %200 = reshape(%198, newshape=[5, 72]) /* ty=Tensor[(5, 72), float32] */;
    %201 = @func_3681(%199, %200) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) */;
    %202 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
    %203 = @func_3611() /* ty=Tensor[(6, 3, 13), float32] */;
    %204 = %196.0;
    %205 = %201.1;
    %206 = %202.2;
    (%203, %204, %205, %var_5619, meta[relay.Constant][11] /* ty=Tensor[(1, 360), float32] */, %206)
  };
  %207(%var_5637) /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(72), float32], Tensor[(1, 360), float32], Tensor[(13, 2, 16), float64]) */
}

def @func_5815() -> Tensor[(1274), float32] {
  @func_5813() /* ty=Tensor[(1274), float32] */
}

def @func_1337() -> (Tensor[(14, 7, 15), float32],) {
  %209 = fn () -> (Tensor[(14, 7, 15), float32],) {
    %208 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
    (%208,)
  };
  %209() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_557() -> Tensor[(14, 7, 15), int16] {
  @func_555() /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_5871() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
  %213 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
    %210 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
    %211 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
    %212 = %210.0;
    (%211, %212)
  };
  %213() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) */
}

def @func_4429() -> Tensor[(14, 7, 15), float64] {
  %214 = fn () -> Tensor[(14, 7, 15), float64] {
    @func_4167() /* ty=Tensor[(14, 7, 15), float64] */
  };
  %214() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_555() -> Tensor[(14, 7, 15), int16] {
  %215 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %216 = %215.3;
  %217 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 7, 15), float32] */, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%219, %220) /* ty=Tensor[(14, 7, 15), int16] */
}

def @func_6051(%var_5997: Tensor[(3, 16, 16), uint8], %var_6032: int32, %var_6033: Tensor[(22, 7), int32], %var_6045: Tensor[(3, 16, 15), float32]) -> (Tensor[(3, 16, 16), uint8], Tensor[(14, 7, 15), float32], int32, Tensor[(22, 7), int32], Tensor[(14, 7, 15), float32], Tensor[(1, 16), int32], Tensor[(3, 16, 15), bool]) {
  %221 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 16, 1), uint8] */, dtype="uint8") /* ty=Tensor[(3, 16, 1), uint8] */;
  %222 = cast(%var_5997, dtype="uint8") /* ty=Tensor[(3, 16, 16), uint8] */;
  %223 = cast(%var_6032, dtype="int32") /* ty=int32 */;
  %224 = cast(%var_6033, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %225 = reshape(%223, newshape=[]) /* ty=int32 */;
  %226 = reshape(%224, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), int32] */;
  %227 = @func_2088(%225, %226) /* ty=(Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) */;
  %228 = @func_5027() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */;
  %229 = cast(%var_6032, dtype="int32") /* ty=int32 */;
  %230 = reshape(%229, newshape=[]) /* ty=int32 */;
  %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 16, 1), uint8] */, dtype="float32") /* ty=Tensor[(3, 16, 1), float32] */;
  %232 = sin(%231) /* ty=Tensor[(3, 16, 1), float32] */;
  %233 = cast(%232, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %234 = cast(%var_6045, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %235 = bitwise_or(%221, %222) /* ty=Tensor[(3, 16, 16), uint8] */;
  %236 = %227.1;
  %237 = %228.2;
  %238 = @func_3725(%230) /* ty=Tensor[(1, 16), int32] */;
  %239 = logical_or(%233, %234) /* ty=Tensor[(3, 16, 15), bool] */;
  (%235, %236, %var_6032, %var_6033, %237, %238, %239)
}

def @func_1987() -> (Tensor[(14, 7, 15), float64],) {
  @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */
}

def @func_2992(%var_2988: Tensor[(9, 96), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) {
  %240 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %241 = cast(meta[relay.Constant][14] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %242 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 96), int64] */, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %243 = reshape(%241, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %244 = reshape(%242, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %245 = @func_1451(%243, %244) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 96), int64] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %247 = cosh(%246) /* ty=Tensor[(1, 96), float32] */;
  %248 = cast(%247, dtype="uint32") /* ty=Tensor[(1, 96), uint32] */;
  %249 = cast(%var_2988, dtype="uint32") /* ty=Tensor[(9, 96), uint32] */;
  %250 = %240.0;
  %251 = %245.7;
  %252 = bitwise_xor(%248, %249) /* ty=Tensor[(9, 96), uint32] */;
  (%250, %251, meta[relay.Constant][14] /* ty=Tensor[(72), float32] */, %252)
}

def @func_5242(%var_5240: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(7, 13, 14), float32]) {
  @func_5239(%var_5240) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(7, 13, 14), float32]) */
}

def @func_3502(%var_3486: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  %253 = cast(%var_3486, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %254 = sinh(%253) /* ty=Tensor[(4, 12, 8), float64] */;
  %255 = cast(%var_3486, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%257, %258) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_3773(%var_3771: Tensor[(9, 2, 7), int8]) -> (Tensor[(9, 2, 7), int8],) {
  @func_3770(%var_3771) /* ty=(Tensor[(9, 2, 7), int8],) */
}

def @func_461(%var_459: int64, %var_460: Tensor[(12, 8, 1), int64]) -> (Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) {
  %265 = fn (%var_436: int64, %var_437: Tensor[(12, 8, 1), int64]) -> (Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) {
    %259 = cast(%var_436, dtype="int64") /* ty=int64 */;
    %260 = cast(%var_437, dtype="int64") /* ty=Tensor[(12, 8, 1), int64] */;
    %261 = cast(%var_437, dtype="int64") /* ty=Tensor[(12, 8, 1), int64] */;
    %262 = cast(%var_436, dtype="int64") /* ty=int64 */;
    %263 = minimum(%259, %260) /* ty=Tensor[(12, 8, 1), int64] */;
    %264 = bitwise_or(%261, %262) /* ty=Tensor[(12, 8, 1), int64] */;
    (%263, %264)
  };
  %265(%var_459, %var_460) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */
}

def @func_3322(%var_3313: Tensor[(72, 1), float32], %var_3314: Tensor[(96, 1), int64]) -> (Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) {
  %266 = cast(%var_3313, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %267 = cast(%var_3314, dtype="int64") /* ty=Tensor[(96, 1), int64] */;
  %268 = reshape(%266, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %269 = reshape(%267, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %270 = @func_1451(%268, %269) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %271 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
  %272 = %270.1;
  (%271, %272, %var_3313, %var_3314)
}

def @func_742() -> (Tensor[(6, 3, 13), float32],) {
  %273 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %274 = %273.0;
  (%274,)
}

def @func_5372(%var_5371: Tensor[(7, 5, 7), uint16]) -> Tensor[(7, 5, 7), bool] {
  %284 = fn (%var_5350: Tensor[(7, 5, 7), uint16]) -> Tensor[(7, 5, 7), bool] {
    %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="uint16") /* ty=Tensor[(7, 5, 7), uint16] */;
    %276 = shape_of(%var_5350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%var_5350, dtype="uint16") /* ty=Tensor[(7, 5, 7), uint16] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %279 = subtract(%277, %278) /* ty=Tensor[(7, 5, 7), uint16] */;
    %280 = cast(%279, dtype="bool") /* ty=Tensor[(7, 5, 7), bool] */;
    %281 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 7), uint16] */, dtype="bool") /* ty=Tensor[(7, 5, 7), bool] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%282, %283) /* ty=Tensor[(7, 5, 7), bool] */
  };
  %284(%var_5371) /* ty=Tensor[(7, 5, 7), bool] */
}

def @func_7075() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
  %290 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
    %285 = @func_3999() /* ty=(Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
    %286 = @func_5040() /* ty=Tensor[(14, 7, 15), float32] */;
    %287 = cast(%286, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    %288 = %285.1;
    %289 = atanh(%287) /* ty=Tensor[(14, 7, 15), float64] */;
    (%288, %289)
  };
  %290() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */
}

def @func_4151(%var_4150: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) {
  %297 = fn (%var_4130: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) {
    %291 = @func_1628() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %292 = cast(%var_4130, dtype="float32") /* ty=Tensor[(72), float32] */;
    %293 = reshape(%292, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %294 = @func_2231(%293) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
    %295 = %291.0;
    %296 = %294.4;
    (%295, %296, %var_4130)
  };
  %297(%var_4150) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) */
}

def @func_2662() -> (Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) {
  @func_2660() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) */
}

def @func_938(%var_934: Tensor[(72), float32], %var_935: Tensor[(14, 7, 15), int16], %var_936: Tensor[(65), uint64], %var_937: Tensor[(585), uint64]) -> (Tensor[(14, 7, 15), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), uint8], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64]) {
  %340 = fn (%var_869: Tensor[(72), float32], %var_905: Tensor[(14, 7, 15), int16], %var_928: Tensor[(65), uint64], %var_929: Tensor[(585), uint64]) -> (Tensor[(14, 7, 15), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), uint8], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64]) {
    %298 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
    %299 = %298.0;
    %300 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 7, 15), int16] */, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %304 = power(%302, %303) /* ty=Tensor[(14, 7, 15), float32] */;
    %305 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 7, 15), int16] */, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="bool") /* ty=Tensor[(14, 7, 15), bool] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %309 = cast(%var_869, dtype="float32") /* ty=Tensor[(72), float32] */;
    %310 = reshape(%309, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
    %311 = @func_360(%310) /* ty=(Tensor[(6, 2, 6), float32],) */;
    %312 = cast(%304, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
    %313 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(14, 7, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 7, 15), int16] */, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %316 = cast(%var_905, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %317 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%299, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %320 = cast(%304, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %321 = sinh(%320) /* ty=Tensor[(14, 7, 15), float32] */;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %323 = cast(%321, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %324 = cast(%var_928, dtype="uint64") /* ty=Tensor[(65), uint64] */;
    %325 = cast(%var_929, dtype="uint64") /* ty=Tensor[(585), uint64] */;
    %326 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %327 = cast(%var_869, dtype="float32") /* ty=Tensor[(72), float32] */;
    %328 = reshape(%324, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
    %329 = reshape(%325, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
    %330 = reshape(%326, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %331 = reshape(%327, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
    %332 = @func_599(%328, %329, %330, %331) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
    %333 = greater_equal(%307, %308) /* ty=Tensor[(14, 7, 15), bool] */;
    %334 = %311.0;
    %335 = subtract(%314, %315) /* ty=Tensor[(14, 7, 15), uint8] */;
    %336 = floor_mod(%318, %319) /* ty=Tensor[(14, 7, 15), float32] */;
    %337 = rsqrt(%322) /* ty=Tensor[(14, 7, 15), float32] */;
    %338 = cosh(%323) /* ty=Tensor[(14, 7, 15), float32] */;
    %339 = %332.6;
    (%333, %334, %var_869, %335, %336, %337, %338, %339, %var_928, %var_929, meta[relay.Constant][18] /* ty=Tensor[(300), float64] */)
  };
  %340(%var_934, %var_935, %var_936, %var_937) /* ty=(Tensor[(14, 7, 15), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), uint8], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64]) */
}

def @func_3010() -> Tensor[(14, 7, 15), bool] {
  %342 = fn () -> Tensor[(14, 7, 15), bool] {
    %341 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
    %341.0
  };
  %342() /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_3611() -> Tensor[(6, 3, 13), float32] {
  %343 = @func_2660() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), float32]) */;
  %343.1
}

def @func_5978(%var_5934: Tensor[(864), float32], %var_5935: Tensor[(110), int16]) -> (Tensor[(14, 7, 15), float64], Tensor[(72), float32], Tensor[(864), float32], Tensor[(110), int16], Tensor[(72), float32], Tensor[(14, 7, 15), int16]) {
  %344 = @func_4167() /* ty=Tensor[(14, 7, 15), float64] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %346 = cast(%var_5934, dtype="float32") /* ty=Tensor[(864), float32] */;
  %347 = cast(%var_5935, dtype="int16") /* ty=Tensor[(110), int16] */;
  %348 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %349 = reshape(%346, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %350 = reshape(%347, newshape=[110]) /* ty=Tensor[(110), int16] */;
  %351 = reshape(%348, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
  %352 = @func_4837(%349, %350, %351) /* ty=(Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) */;
  %353 = log10(%345) /* ty=Tensor[(14, 7, 15), float64] */;
  %354 = cast(%353, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %355 = reshape(%354, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
  %356 = @func_967(%355) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
  %357 = %352.6;
  %358 = %356.1;
  (%353, %357, %var_5934, %var_5935, meta[relay.Constant][19] /* ty=Tensor[(72), float32] */, %358)
}

def @func_4984() -> Tensor[(14, 7, 15), uint64] {
  %368 = fn () -> Tensor[(14, 7, 15), uint64] {
    %359 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
    %360 = %359.0;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %362 = reshape(%361, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %363 = @func_78(%362) /* ty=Tensor[(14, 7, 15), float32] */;
    %364 = cast(%363, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
    %365 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%360, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%366, %367) /* ty=Tensor[(14, 7, 15), uint64] */
  };
  %368() /* ty=Tensor[(14, 7, 15), uint64] */
}

def @func_6451() -> (Tensor[(6, 3, 13), float32], Tensor[(6, 3, 13), bool]) {
  %373 = fn () -> (Tensor[(6, 3, 13), float32], Tensor[(6, 3, 13), bool]) {
    %369 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
    %370 = @func_3200() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) */;
    %371 = %369.0;
    %372 = %370.0;
    (%371, %372)
  };
  %373() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(6, 3, 13), bool]) */
}

def @func_1770() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) {
  %389 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) {
    %374 = @func_1702() /* ty=(Tensor[(14, 7, 15), bool],) */;
    %375 = %374.0;
    %376 = cast(%375, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 7, 15), bool] */, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
    %378 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%375, dtype="uint8") /* ty=Tensor[(14, 7, 15), uint8] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %381 = cast(meta[relay.Constant][21] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %382 = reshape(%381, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), float64] */;
    %383 = @func_1517(%382) /* ty=(Tensor[(13, 2, 16), float64],) */;
    %384 = cast(meta[relay.Constant][21] /* ty=Tensor[(416), float64] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %385 = exp(%376) /* ty=Tensor[(14, 7, 15), float32] */;
    %386 = right_shift(%379, %380) /* ty=Tensor[(14, 7, 15), uint8] */;
    %387 = %383.0;
    %388 = log2(%384) /* ty=Tensor[(416), float32] */;
    (%385, %386, %387, %388)
  };
  %389() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */
}

def @func_1138(%var_1132: Tensor[(65), uint64], %var_1134: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(3, 24), float32]) {
  %390 = @func_695() /* ty=(Tensor[(14, 7, 15), int16],) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %393 = reshape(%392, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int16] */;
  %394 = @func_967(%393) /* ty=(Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) */;
  %395 = cast(%var_1132, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %397 = cast(%var_1134, dtype="float64") /* ty=Tensor[(300), float64] */;
  %398 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %399 = reshape(%395, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
  %400 = reshape(%396, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %401 = reshape(%397, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %402 = reshape(%398, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %403 = @func_599(%399, %400, %401, %402) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
  %404 = %394.0;
  %405 = %403.5;
  (%391, %404, %405, %var_1132, meta[relay.Constant][22] /* ty=Tensor[(585), uint64] */, %var_1134, meta[relay.Constant][23] /* ty=Tensor[(3, 24), float32] */)
}

def @func_6382(%var_6380: int64, %var_6381: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float32], int64, Tensor[(96), int64], Tensor[(12, 8, 1274), bool]) {
  @func_6378(%var_6380, %var_6381) /* ty=(Tensor[(14, 7, 15), float32], int64, Tensor[(96), int64], Tensor[(12, 8, 1274), bool]) */
}

def @func_3831() -> Tensor[(5, 4, 3), bool] {
  @func_3829() /* ty=Tensor[(5, 4, 3), bool] */
}

def @func_4841(%var_4838: Tensor[(864), float32], %var_4839: Tensor[(110), int16], %var_4840: Tensor[(1, 72), float32]) -> (Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) {
  %436 = fn (%var_4787: Tensor[(864), float32], %var_4799: Tensor[(110), int16], %var_4817: Tensor[(1, 72), float32]) -> (Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) {
    %406 = cast(%var_4787, dtype="float32") /* ty=Tensor[(864), float32] */;
    %407 = reshape(%406, newshape=[9, 96]) /* ty=Tensor[(9, 96), float32] */;
    %408 = @func_2992(%407) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(96), int64], Tensor[(72), float32], Tensor[(9, 96), uint32]) */;
    %409 = cast(%var_4799, dtype="int16") /* ty=Tensor[(110), int16] */;
    %410 = reshape(%409, newshape=[11, 10, 1]) /* ty=Tensor[(11, 10, 1), int16] */;
    %411 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
    %412 = %411.3;
    %413 = cast(%412, dtype="float32") /* ty=Tensor[(416), float32] */;
    %414 = asin(%413) /* ty=Tensor[(416), float32] */;
    %415 = cast(%412, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(1), int32] */;
    %417 = cast(%414, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %419 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
    %420 = cast(%var_4817, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
    %421 = reshape(%420, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %422 = @func_4149(%421) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(72), float32], Tensor[(72), float32]) */;
    %423 = cast(meta[relay.Constant][24] /* ty=Tensor[(800), bool] */, dtype="bool") /* ty=Tensor[(800), bool] */;
    %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(800), bool] */, dtype="bool") /* ty=Tensor[(800), bool] */;
    %425 = cast(meta[relay.Constant][24] /* ty=Tensor[(800), bool] */, dtype="int8") /* ty=Tensor[(800), int8] */;
    %426 = reshape(%423, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), bool] */;
    %427 = reshape(%424, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), bool] */;
    %428 = reshape(%425, newshape=[16, 5, 10]) /* ty=Tensor[(16, 5, 10), int8] */;
    %429 = @func_2481(%426, %427, %428) /* ty=(Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) */;
    %430 = %408.1;
    %431 = @func_1492(%410) /* ty=Tensor[(11, 10, 4), int16] */;
    %432 = maximum(%417, %418) /* ty=Tensor[(416), uint64] */;
    %433 = %419.1;
    %434 = %422.2;
    %435 = %429.1;
    (%430, %var_4787, %431, %var_4799, %432, %433, %434, %var_4817, %435, meta[relay.Constant][24] /* ty=Tensor[(800), bool] */)
  };
  %436(%var_4838, %var_4839, %var_4840) /* ty=(Tensor[(96), int64], Tensor[(864), float32], Tensor[(11, 10, 4), int16], Tensor[(110), int16], Tensor[(416), uint64], Tensor[(6, 3, 13), float32], Tensor[(72), float32], Tensor[(1, 72), float32], Tensor[(14, 7, 15), float64], Tensor[(800), bool]) */
}

def @func_81(%var_79: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  @func_78(%var_79) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_4712(%var_4644: Tensor[(2, 9, 3), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(2, 9, 3), uint16]) {
  %437 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %440 = cast(%var_4644, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %441 = acosh(%440) /* ty=Tensor[(2, 9, 3), float32] */;
  %442 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(2, 9, 3), uint16] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint16") /* ty=Tensor[(2, 9, 3), uint16] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %446 = acos(%439) /* ty=Tensor[(14, 7, 15), float32] */;
  %447 = maximum(%444, %445) /* ty=Tensor[(2, 9, 3), uint16] */;
  (%446, %447)
}

def @func_7170(%var_7168: Tensor[(72), float32], %var_7169: Tensor[(4, 24), int64]) -> (Tensor[(6, 3, 13), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(4, 24), int64], Tensor[(14, 7, 15), float32], Tensor[(468), uint32]) {
  @func_7166(%var_7168, %var_7169) /* ty=(Tensor[(6, 3, 13), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(4, 24), int64], Tensor[(14, 7, 15), float32], Tensor[(468), uint32]) */
}

def @func_3474(%var_3472: Tensor[(15, 1, 10), uint64], %var_3473: Tensor[(15, 12, 10), uint64]) -> Tensor[(15, 12, 10), uint64] {
  %450 = fn (%var_3458: Tensor[(15, 1, 10), uint64], %var_3459: Tensor[(15, 12, 10), uint64]) -> Tensor[(15, 12, 10), uint64] {
    %448 = cast(%var_3458, dtype="uint64") /* ty=Tensor[(15, 1, 10), uint64] */;
    %449 = cast(%var_3459, dtype="uint64") /* ty=Tensor[(15, 12, 10), uint64] */;
    bitwise_and(%448, %449) /* ty=Tensor[(15, 12, 10), uint64] */
  };
  %450(%var_3472, %var_3473) /* ty=Tensor[(15, 12, 10), uint64] */
}

def @func_4615(%var_4613: Tensor[(72), float32], %var_4614: Tensor[(96), int64]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) {
  %472 = fn (%var_4568: Tensor[(72), float32], %var_4569: Tensor[(96), int64]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) {
    %451 = cast(%var_4568, dtype="float32") /* ty=Tensor[(72), float32] */;
    %452 = cast(%var_4569, dtype="int64") /* ty=Tensor[(96), int64] */;
    %453 = reshape(%451, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
    %454 = reshape(%452, newshape=[96, 1]) /* ty=Tensor[(96, 1), int64] */;
    %455 = @func_3322(%453, %454) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) */;
    %456 = cast(meta[relay.Constant][25] /* ty=Tensor[(468), uint32] */, dtype="uint32") /* ty=Tensor[(468), uint32] */;
    %457 = reshape(%456, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), uint32] */;
    %458 = @func_769(%457) /* ty=(Tensor[(13, 12, 3), bool],) */;
    %459 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    %462 = log2(%461) /* ty=Tensor[(14, 7, 15), float64] */;
    %463 = cast(%460, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%462, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %467 = %455.1;
    %468 = %458.0;
    %469 = divide(%465, %466) /* ty=Tensor[(14, 7, 15), float64] */;
    %470 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %471 = @func_3413() /* ty=Tensor[(1274), float32] */;
    (%467, %var_4568, %var_4569, %468, meta[relay.Constant][25] /* ty=Tensor[(468), uint32] */, %469, %470, %471)
  };
  %472(%var_4613, %var_4614) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) */
}

def @func_4114() -> (Tensor[(14, 7, 15), uint16],) {
  %473 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %474 = %473.0;
  %475 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 7, 15), float32] */, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="uint16") /* ty=Tensor[(14, 7, 15), uint16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %479 = minimum(%477, %478) /* ty=Tensor[(14, 7, 15), uint16] */;
  (%479,)
}

def @func_6240() -> Tensor[(14, 7, 15), float64] {
  @func_6238() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_4951() -> (Tensor[(14, 7, 15), float64],) {
  @func_4949() /* ty=(Tensor[(14, 7, 15), float64],) */
}

def @func_967(%var_955: Tensor[(14, 7, 15), int16]) -> (Tensor[(14, 7, 15), uint64], Tensor[(14, 7, 15), int16]) {
  %480 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  %481 = cast(%var_955, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="uint64") /* ty=Tensor[(14, 7, 15), uint64] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %485 = left_shift(%483, %484) /* ty=Tensor[(14, 7, 15), uint64] */;
  %486 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%485, %486)
}

def @func_1628() -> (Tensor[(14, 7, 15), int16],) {
  %487 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%487,)
}

def @func_1603(%var_1601: int64, %var_1602: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float64], Tensor[(6, 2, 6), float32], int64, Tensor[(96), int64], Tensor[(468), uint32]) {
  %497 = fn (%var_1580: int64, %var_1581: Tensor[(96), int64]) -> (Tensor[(14, 7, 15), float64], Tensor[(6, 2, 6), float32], int64, Tensor[(96), int64], Tensor[(468), uint32]) {
    %488 = cast(%var_1580, dtype="int64") /* ty=int64 */;
    %489 = cast(%var_1581, dtype="int64") /* ty=Tensor[(96), int64] */;
    %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(468), uint32] */, dtype="uint32") /* ty=Tensor[(468), uint32] */;
    %491 = reshape(%488, newshape=[]) /* ty=int64 */;
    %492 = reshape(%489, newshape=[96]) /* ty=Tensor[(96), int64] */;
    %493 = reshape(%490, newshape=[468]) /* ty=Tensor[(468), uint32] */;
    %494 = @func_806(%491, %492, %493) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) */;
    %495 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
    %496 = %494.0;
    (%495, %496, %var_1580, %var_1581, meta[relay.Constant][27] /* ty=Tensor[(468), uint32] */)
  };
  %497(%var_1601, %var_1602) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(6, 2, 6), float32], int64, Tensor[(96), int64], Tensor[(468), uint32]) */
}

def @func_6312(%var_6311: Tensor[(11, 14, 11), float32]) -> Tensor[(11, 14, 11), float32] {
  %499 = fn (%var_6307: Tensor[(11, 14, 11), float32]) -> Tensor[(11, 14, 11), float32] {
    %498 = cast(%var_6307, dtype="float32") /* ty=Tensor[(11, 14, 11), float32] */;
    log10(%498) /* ty=Tensor[(11, 14, 11), float32] */
  };
  %499(%var_6311) /* ty=Tensor[(11, 14, 11), float32] */
}

def @func_1517(%var_1509: Tensor[(13, 2, 16), float64]) -> (Tensor[(13, 2, 16), float64],) {
  %500 = cast(%var_1509, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %501 = acos(%500) /* ty=Tensor[(13, 2, 16), float64] */;
  (%501,)
}

def @func_3326(%var_3324: Tensor[(72, 1), float32], %var_3325: Tensor[(96, 1), int64]) -> (Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) {
  @func_3322(%var_3324, %var_3325) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32], Tensor[(96, 1), int64]) */
}

def @func_3105(%var_3095: Tensor[(14, 7, 15), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(13, 2, 16), float64]) {
  %502 = @func_1807() /* ty=Tensor[(14, 7, 15), float32] */;
  %503 = cast(%var_3095, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="int16") /* ty=Tensor[(14, 7, 15), int16] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %507 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
  %508 = bitwise_and(%505, %506) /* ty=Tensor[(14, 7, 15), int16] */;
  %509 = %507.2;
  (%508, %509)
}

def @func_4183(%var_4182: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32], Tensor[(2, 2, 12), float64]) {
  %514 = fn (%var_4173: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32], Tensor[(2, 2, 12), float64]) {
    %510 = cast(%var_4173, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
    %511 = cast(%var_4173, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
    %512 = acosh(%510) /* ty=Tensor[(2, 2, 12), float32] */;
    %513 = exp(%511) /* ty=Tensor[(2, 2, 12), float64] */;
    (%512, %513)
  };
  %514(%var_4182) /* ty=(Tensor[(2, 2, 12), float32], Tensor[(2, 2, 12), float64]) */
}

def @func_1982() -> Tensor[(14, 7, 15), float32] {
  @func_1980() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_5272(%var_5247: Tensor[(7, 3, 9), int16]) -> (Tensor[(7, 3, 9), int16], Tensor[(7, 3, 9), float64], Tensor[(14, 7, 15), float64]) {
  %515 = cast(%var_5247, dtype="int16") /* ty=Tensor[(7, 3, 9), int16] */;
  %516 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 3, 9), int16] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %519 = cast(%var_5247, dtype="float64") /* ty=Tensor[(7, 3, 9), float64] */;
  %520 = @func_5027() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */;
  %521 = minimum(%517, %518) /* ty=Tensor[(7, 3, 9), int16] */;
  %522 = erf(%519) /* ty=Tensor[(7, 3, 9), float64] */;
  %523 = %520.3;
  (%521, %522, %523)
}

def @func_1520(%var_1518: Tensor[(13, 2, 16), float64]) -> (Tensor[(13, 2, 16), float64],) {
  @func_1517(%var_1518) /* ty=(Tensor[(13, 2, 16), float64],) */
}

def @func_4949() -> (Tensor[(14, 7, 15), float64],) {
  %524 = @func_4428() /* ty=Tensor[(14, 7, 15), float64] */;
  (%524,)
}

def @func_695() -> (Tensor[(14, 7, 15), int16],) {
  %525 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
  (%525,)
}

def @func_2091(%var_2089: int32, %var_2090: Tensor[(11, 7, 2), int32]) -> (Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) {
  %530 = fn (%var_2073: int32, %var_2074: Tensor[(11, 7, 2), int32]) -> (Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) {
    %526 = cast(%var_2073, dtype="int32") /* ty=int32 */;
    %527 = cast(%var_2074, dtype="int32") /* ty=Tensor[(11, 7, 2), int32] */;
    %528 = multiply(%526, %527) /* ty=Tensor[(11, 7, 2), int32] */;
    %529 = @func_1980() /* ty=Tensor[(14, 7, 15), float32] */;
    (%528, %529)
  };
  %530(%var_2089, %var_2090) /* ty=(Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) */
}

def @func_599(%var_564: Tensor[(13, 5, 1), uint64], %var_565: Tensor[(13, 5, 9), uint64], %var_575: Tensor[(300), float64], %var_584: Tensor[(72, 1), float32]) -> (Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) {
  %531 = cast(%var_564, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %532 = cast(%var_565, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %533 = cast(%var_564, dtype="float64") /* ty=Tensor[(13, 5, 1), float64] */;
  %534 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %535 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %536 = cast(meta[relay.Constant][29] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %537 = reshape(%534, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %538 = reshape(%535, newshape=[10, 6, 5]) /* ty=Tensor[(10, 6, 5), float64] */;
  %539 = reshape(%536, newshape=[1470]) /* ty=Tensor[(1470), float32] */;
  %540 = @func_231(%537, %538, %539) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */;
  %541 = cast(meta[relay.Constant][29] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
  %542 = reshape(%541, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %543 = %540.3;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %545 = cast(%var_575, dtype="float64") /* ty=Tensor[(300), float64] */;
  %546 = reshape(%544, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %547 = reshape(%545, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %548 = @func_535(%546, %547) /* ty=(Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) */;
  %549 = cast(%var_584, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %550 = reshape(%549, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
  %551 = @func_360(%550) /* ty=(Tensor[(6, 2, 6), float32],) */;
  %552 = less(%531, %532) /* ty=Tensor[(13, 5, 9), bool] */;
  %553 = atan(%533) /* ty=Tensor[(13, 5, 1), float64] */;
  %554 = @func_78(%542) /* ty=Tensor[(14, 7, 15), float32] */;
  %555 = %548.3;
  %556 = %551.0;
  (%552, %553, %543, %var_575, meta[relay.Constant][29] /* ty=Tensor[(1470), float32] */, %554, %555, %556, %var_584)
}

def @func_2278() -> (Tensor[(7, 13, 14), float32],) {
  @func_2276() /* ty=(Tensor[(7, 13, 14), float32],) */
}

def @func_2043() -> (Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
  %561 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
    %557 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
    %558 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
    %559 = %557.3;
    %560 = %558.0;
    (%559, %560)
  };
  %561() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */
}

def @func_605(%var_601: Tensor[(13, 5, 1), uint64], %var_602: Tensor[(13, 5, 9), uint64], %var_603: Tensor[(300), float64], %var_604: Tensor[(72, 1), float32]) -> (Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) {
  @func_599(%var_601, %var_602, %var_603, %var_604) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */
}

def @func_2067() -> (Tensor[(14, 7, 15), float64],) {
  %562 = @func_1985() /* ty=(Tensor[(14, 7, 15), float64],) */;
  %563 = %562.0;
  (%563,)
}

def @func_5275(%var_5273: Tensor[(7, 3, 9), int16]) -> (Tensor[(7, 3, 9), int16], Tensor[(7, 3, 9), float64], Tensor[(14, 7, 15), float64]) {
  @func_5272(%var_5273) /* ty=(Tensor[(7, 3, 9), int16], Tensor[(7, 3, 9), float64], Tensor[(14, 7, 15), float64]) */
}

def @func_2427() -> Tensor[(6, 3, 13), float32] {
  %564 = @func_1835() /* ty=(Tensor[(6, 3, 13), float32],) */;
  %564.0
}

def @func_3414() -> Tensor[(1274), float32] {
  %568 = fn () -> Tensor[(1274), float32] {
    %565 = @func_2932() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) */;
    %566 = %565.2;
    %567 = cast(%566, dtype="float32") /* ty=Tensor[(1274), float32] */;
    tan(%567) /* ty=Tensor[(1274), float32] */
  };
  %568() /* ty=Tensor[(1274), float32] */
}

def @func_3770(%var_3761: Tensor[(9, 2, 7), int8]) -> (Tensor[(9, 2, 7), int8],) {
  %569 = cast(%var_3761, dtype="int8") /* ty=Tensor[(9, 2, 7), int8] */;
  %570 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(9, 2, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 2, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 2, 7), int8] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %573 = logical_xor(%571, %572) /* ty=Tensor[(9, 2, 7), int8] */;
  (%573,)
}

def @main(%var_7303: int32, %var_7304: Tensor[(154), int32], %var_7344: Tensor[(392), uint16]) -> (Tensor[(14, 7, 15), bool], Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], int32, Tensor[(154), int32], Tensor[(7, 14, 4), uint16], Tensor[(392), uint16], Tensor[(14, 7, 15), float32], Tensor[(11, 7, 2), float32]) {
  %574 = @func_2297() /* ty=(Tensor[(14, 7, 15), bool],) */;
  %575 = cast(%var_7344, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %576 = cast(%var_7344, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %577 = reshape(%575, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), uint16] */;
  %578 = reshape(%576, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), uint16] */;
  %579 = @func_6937(%577, %578) /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %580 = cast(%var_7303, dtype="int32") /* ty=int32 */;
  %581 = cast(%var_7304, dtype="int32") /* ty=Tensor[(154), int32] */;
  %582 = reshape(%580, newshape=[]) /* ty=int32 */;
  %583 = reshape(%581, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), int32] */;
  %584 = @func_2091(%582, %583) /* ty=(Tensor[(11, 7, 2), int32], Tensor[(14, 7, 15), float32]) */;
  %585 = %584.0;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %587 = log10(%586) /* ty=Tensor[(11, 7, 2), float64] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %589 = sinh(%588) /* ty=Tensor[(11, 7, 2), float64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %591 = %574.0;
  %592 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  %593 = @func_3918() /* ty=Tensor[(14, 7, 15), int16] */;
  %594 = %579.0;
  %595 = @func_6893() /* ty=Tensor[(14, 7, 15), float32] */;
  %596 = asinh(%590) /* ty=Tensor[(11, 7, 2), float32] */;
  (%591, %592, %593, %var_7303, %var_7304, %594, %var_7344, %595, %596)
}

def @func_5509(%var_5498: Tensor[(126), int8]) -> (Tensor[(9, 2, 7), int8], Tensor[(126), int8], Tensor[(1274), bool]) {
  %597 = cast(%var_5498, dtype="int8") /* ty=Tensor[(126), int8] */;
  %598 = reshape(%597, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), int8] */;
  %599 = @func_3770(%598) /* ty=(Tensor[(9, 2, 7), int8],) */;
  %600 = @func_3413() /* ty=Tensor[(1274), float32] */;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %602 = log(%601) /* ty=Tensor[(1274), float64] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?), bool] */;
  %607 = %599.0;
  %608 = less(%605, %606) /* ty=Tensor[(1274), bool] */;
  (%607, %var_5498, %608)
}

def @func_4168() -> Tensor[(14, 7, 15), float64] {
  %610 = fn () -> Tensor[(14, 7, 15), float64] {
    %609 = @func_2067() /* ty=(Tensor[(14, 7, 15), float64],) */;
    %609.0
  };
  %610() /* ty=Tensor[(14, 7, 15), float64] */
}

def @func_423() -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) {
  %619 = fn () -> (Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) {
    %611 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 13), float32] */;
    %612 = cast(meta[relay.Constant][32] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
    %613 = reshape(%612, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %614 = cast(meta[relay.Constant][32] /* ty=Tensor[(1470), float32] */, dtype="float32") /* ty=Tensor[(1470), float32] */;
    %615 = reshape(%614, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %616 = atan(%611) /* ty=Tensor[(6, 3, 13), float32] */;
    %617 = @func_78(%613) /* ty=Tensor[(14, 7, 15), float32] */;
    %618 = @func_78(%615) /* ty=Tensor[(14, 7, 15), float32] */;
    (%616, %617, meta[relay.Constant][32] /* ty=Tensor[(1470), float32] */, %618)
  };
  %619() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */
}

def @func_1062(%var_1061: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), int64]) {
  %631 = fn (%var_1048: Tensor[(72), float32]) -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), int64]) {
    %620 = cast(%var_1048, dtype="float32") /* ty=Tensor[(72), float32] */;
    %621 = reshape(%620, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
    %622 = @func_360(%621) /* ty=(Tensor[(6, 2, 6), float32],) */;
    %623 = %622.0;
    %624 = cast(%var_1048, dtype="int64") /* ty=Tensor[(72), int64] */;
    %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%623, dtype="int64") /* ty=Tensor[(6, 2, 6), int64] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %628 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %629 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %630 = bitwise_xor(%626, %627) /* ty=Tensor[(6, 2, 6), int64] */;
    (%628, %629, %630)
  };
  %631(%var_1061) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), int64]) */
}

def @func_5040() -> Tensor[(14, 7, 15), float32] {
  @func_1923() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_5562() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) {
  %635 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) {
    %632 = @func_4219() /* ty=(Tensor[(14, 7, 15), float32],) */;
    %633 = %632.0;
    %634 = @func_3009() /* ty=Tensor[(14, 7, 15), bool] */;
    (%633, %634)
  };
  %635() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) */
}

def @func_2932() -> (Tensor[(14, 7, 15), float64], Tensor[(7, 13, 14), float32], Tensor[(1274), float64]) {
  %636 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %639 = cast(meta[relay.Constant][33] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %640 = reshape(%639, newshape=[7, 13, 14]) /* ty=Tensor[(7, 13, 14), float64] */;
  %641 = sqrt(%638) /* ty=Tensor[(14, 7, 15), float64] */;
  %642 = @func_989(%640) /* ty=Tensor[(7, 13, 14), float32] */;
  (%641, %642, meta[relay.Constant][33] /* ty=Tensor[(1274), float64] */)
}

def @func_3681(%var_3649: Tensor[(1, 72), float32], %var_3668: Tensor[(5, 72), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(5, 72), bool]) {
  %643 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %644 = cast(%var_3649, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %645 = reshape(%644, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %646 = @func_2231(%645) /* ty=(Tensor[(13, 2, 16), float64], Tensor[(416), float64], Tensor[(14, 7, 15), int16], Tensor[(300), float64], Tensor[(72), float32]) */;
  %647 = cast(%var_3649, dtype="bool") /* ty=Tensor[(1, 72), bool] */;
  %648 = cast(%var_3668, dtype="bool") /* ty=Tensor[(5, 72), bool] */;
  %649 = %643.0;
  %650 = %646.3;
  %651 = logical_and(%647, %648) /* ty=Tensor[(5, 72), bool] */;
  (%649, %650, %651)
}

def @func_4116() -> (Tensor[(14, 7, 15), uint16],) {
  @func_4114() /* ty=(Tensor[(14, 7, 15), uint16],) */
}

def @func_2406() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) {
  @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */
}

def @func_3815(%var_3813: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64], Tensor[(14, 7, 15), float32]) {
  @func_3812(%var_3813) /* ty=(Tensor[(4, 2, 3), float64], Tensor[(14, 7, 15), float32]) */
}

def @func_1692() -> (Tensor[(14, 7, 15), float32],) {
  %652 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %653 = %652.0;
  (%653,)
}

def @func_5136(%var_5132: Tensor[(585), uint64], %var_5133: Tensor[(72, 1), float32], %var_5134: Tensor[(72, 300), bool], %var_5135: Tensor[(72, 300), bool]) -> (Tensor[(14, 7, 15), int16], Tensor[(1470), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(72, 300), bool], Tensor[(585), uint64], Tensor[(72, 300), int16]) {
  %682 = fn (%var_5076: Tensor[(585), uint64], %var_5078: Tensor[(72, 1), float32], %var_5089: Tensor[(72, 300), bool], %var_5105: Tensor[(72, 300), bool]) -> (Tensor[(14, 7, 15), int16], Tensor[(1470), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(72, 300), bool], Tensor[(585), uint64], Tensor[(72, 300), int16]) {
    %654 = cast(meta[relay.Constant][34] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
    %655 = cast(%var_5076, dtype="uint64") /* ty=Tensor[(585), uint64] */;
    %656 = cast(meta[relay.Constant][35] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %657 = cast(%var_5078, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %658 = reshape(%654, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
    %659 = reshape(%655, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
    %660 = reshape(%656, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %661 = reshape(%657, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
    %662 = @func_599(%658, %659, %660, %661) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
    %663 = cast(meta[relay.Constant][35] /* ty=Tensor[(300), float64] */, dtype="bool") /* ty=Tensor[(300), bool] */;
    %664 = cast(%var_5078, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
    %665 = greater_equal(%663, %664) /* ty=Tensor[(72, 300), bool] */;
    %666 = cast(%var_5089, dtype="bool") /* ty=Tensor[(72, 300), bool] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(2), int32] */;
    %668 = cast(%665, dtype="bool") /* ty=Tensor[(72, 300), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %670 = cast(%var_5078, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %671 = reshape(%670, newshape=[6, 12]) /* ty=Tensor[(6, 12), float32] */;
    %672 = @func_1302(%671) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) */;
    %673 = cast(%var_5105, dtype="int16") /* ty=Tensor[(72, 300), int16] */;
    %674 = shape_of(%665, dtype="int32") /* ty=Tensor[(2), int32] */;
    %675 = cast(%665, dtype="int16") /* ty=Tensor[(72, 300), int16] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %677 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %678 = %662.4;
    %679 = logical_and(%668, %669) /* ty=Tensor[(72, 300), bool] */;
    %680 = %672.3;
    %681 = bitwise_xor(%675, %676) /* ty=Tensor[(72, 300), int16] */;
    (%677, %678, meta[relay.Constant][34] /* ty=Tensor[(65), uint64] */, %var_5076, %679, %680, %681)
  };
  %682(%var_5132, %var_5133, %var_5134, %var_5135) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(1470), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(72, 300), bool], Tensor[(585), uint64], Tensor[(72, 300), int16]) */
}

def @func_2429() -> Tensor[(6, 3, 13), float32] {
  @func_2427() /* ty=Tensor[(6, 3, 13), float32] */
}

def @func_810(%var_807: int64, %var_808: Tensor[(96), int64], %var_809: Tensor[(468), uint32]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) {
  %702 = fn (%var_790: int64, %var_791: Tensor[(96), int64], %var_795: Tensor[(468), uint32]) -> (Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) {
    %683 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %684 = reshape(%683, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float32] */;
    %685 = @func_360(%684) /* ty=(Tensor[(6, 2, 6), float32],) */;
    %686 = @func_555() /* ty=Tensor[(14, 7, 15), int16] */;
    %687 = cast(%686, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
    %688 = cast(%var_790, dtype="int64") /* ty=int64 */;
    %689 = cast(%var_791, dtype="int64") /* ty=Tensor[(96), int64] */;
    %690 = reshape(%688, newshape=[]) /* ty=int64 */;
    %691 = reshape(%689, newshape=[12, 8, 1]) /* ty=Tensor[(12, 8, 1), int64] */;
    %692 = @func_458(%690, %691) /* ty=(Tensor[(12, 8, 1), int64], Tensor[(12, 8, 1), int64]) */;
    %693 = cast(%var_795, dtype="uint32") /* ty=Tensor[(468), uint32] */;
    %694 = reshape(%693, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), uint32] */;
    %695 = @func_769(%694) /* ty=(Tensor[(13, 12, 3), bool],) */;
    %696 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
    %697 = %685.0;
    %698 = cos(%687) /* ty=Tensor[(14, 7, 15), float64] */;
    %699 = %692.0;
    %700 = %695.0;
    %701 = %696.0;
    (%697, meta[relay.Constant][36] /* ty=Tensor[(72), float32] */, %698, %699, %var_790, %var_791, %700, %var_795, %701)
  };
  %702(%var_807, %var_808, %var_809) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(6, 3, 13), float32]) */
}

def @func_2779(%var_2757: float32, %var_2758: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), float32], Tensor[(14, 7, 15), float32]) {
  %703 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %704 = cast(%var_2758, dtype="float32") /* ty=Tensor[(16, 3, 8), float32] */;
  %705 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
  %706 = power(%703, %704) /* ty=Tensor[(16, 3, 8), float32] */;
  %707 = %705.3;
  (%706, %707)
}

def @func_5194() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
  %711 = fn () -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) {
    %708 = @func_1769() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), uint8], Tensor[(13, 2, 16), float64], Tensor[(416), float32]) */;
    %709 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
    %710 = %708.0;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32]) */
}

def @func_5391() -> Tensor[(4, 13, 11), float32] {
  %713 = fn () -> Tensor[(4, 13, 11), float32] {
    %712 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 11), float32] */;
    log10(%712) /* ty=Tensor[(4, 13, 11), float32] */
  };
  %713() /* ty=Tensor[(4, 13, 11), float32] */
}

def @func_1980() -> Tensor[(14, 7, 15), float32] {
  @func_1923() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_2122() -> (Tensor[(14, 7, 15), float32],) {
  %714 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  (%714,)
}

def @func_78(%var_49: Tensor[(14, 7, 15), float32]) -> Tensor[(14, 7, 15), float32] {
  %715 = cast(%var_49, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  erf(%715) /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_5813() -> Tensor[(1274), float32] {
  @func_3413() /* ty=Tensor[(1274), float32] */
}

def @func_6296() -> (Tensor[(1470), float64], Tensor[(14, 7, 15), float32]) {
  %721 = fn () -> (Tensor[(1470), float64], Tensor[(14, 7, 15), float32]) {
    %716 = @func_4476() /* ty=Tensor[(1470), float32] */;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(1470), float64] */;
    %718 = @func_5561() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), bool]) */;
    %719 = tan(%717) /* ty=Tensor[(1470), float64] */;
    %720 = %718.0;
    (%719, %720)
  };
  %721() /* ty=(Tensor[(1470), float64], Tensor[(14, 7, 15), float32]) */
}

def @func_1694() -> (Tensor[(14, 7, 15), float32],) {
  @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_1985() -> (Tensor[(14, 7, 15), float64],) {
  %722 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  (%722,)
}

def @func_2485(%var_2482: Tensor[(16, 5, 10), bool], %var_2483: Tensor[(16, 5, 10), bool], %var_2484: Tensor[(16, 5, 10), int8]) -> (Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) {
  %739 = fn (%var_2430: Tensor[(16, 5, 10), bool], %var_2442: Tensor[(16, 5, 10), bool], %var_2448: Tensor[(16, 5, 10), int8]) -> (Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) {
    %723 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 10), bool] */;
    %724 = shape_of(%var_2430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(%var_2430, dtype="bool") /* ty=Tensor[(16, 5, 10), bool] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %727 = cast(%var_2442, dtype="int8") /* ty=Tensor[(16, 5, 10), int8] */;
    %728 = shape_of(%var_2430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%var_2430, dtype="int8") /* ty=Tensor[(16, 5, 10), int8] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %731 = left_shift(%729, %730) /* ty=Tensor[(16, 5, 10), int8] */;
    %732 = cast(%var_2448, dtype="int64") /* ty=Tensor[(16, 5, 10), int64] */;
    %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%731, dtype="int64") /* ty=Tensor[(16, 5, 10), int64] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %736 = logical_and(%725, %726) /* ty=Tensor[(16, 5, 10), bool] */;
    %737 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
    %738 = right_shift(%734, %735) /* ty=Tensor[(16, 5, 10), int64] */;
    (%736, %737, %738)
  };
  %739(%var_2482, %var_2483, %var_2484) /* ty=(Tensor[(16, 5, 10), bool], Tensor[(14, 7, 15), float64], Tensor[(16, 5, 10), int64]) */
}

def @func_2297() -> (Tensor[(14, 7, 15), bool],) {
  %741 = fn () -> (Tensor[(14, 7, 15), bool],) {
    %740 = @func_1558() /* ty=Tensor[(14, 7, 15), bool] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(14, 7, 15), bool],) */
}

def @func_5845() -> Tensor[(14, 7, 15), uint16] {
  @func_5843() /* ty=Tensor[(14, 7, 15), uint16] */
}

def @func_5982(%var_5980: Tensor[(864), float32], %var_5981: Tensor[(110), int16]) -> (Tensor[(14, 7, 15), float64], Tensor[(72), float32], Tensor[(864), float32], Tensor[(110), int16], Tensor[(72), float32], Tensor[(14, 7, 15), int16]) {
  @func_5978(%var_5980, %var_5981) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(72), float32], Tensor[(864), float32], Tensor[(110), int16], Tensor[(72), float32], Tensor[(14, 7, 15), int16]) */
}

def @func_4000() -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
  %747 = fn () -> (Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) {
    %742 = @func_2404() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) */;
    %743 = @func_742() /* ty=(Tensor[(6, 3, 13), float32],) */;
    %744 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
    %745 = %742.0;
    %746 = %743.0;
    (%744, %745, %746)
  };
  %747() /* ty=(Tensor[(14, 7, 15), int16], Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */
}

def @func_4715(%var_4713: Tensor[(2, 9, 3), float32]) -> (Tensor[(14, 7, 15), float32], Tensor[(2, 9, 3), uint16]) {
  @func_4712(%var_4713) /* ty=(Tensor[(14, 7, 15), float32], Tensor[(2, 9, 3), uint16]) */
}

def @func_2307() -> (Tensor[(14, 7, 15), float32],) {
  %750 = fn () -> (Tensor[(14, 7, 15), float32],) {
    %748 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
    %749 = %748.0;
    (%749,)
  };
  %750() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_3505(%var_3503: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  @func_3502(%var_3503) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_2519(%var_2490: Tensor[(15, 10, 7), float32]) -> (Tensor[(15, 10, 7), float64], Tensor[(14, 7, 15), float32]) {
  %751 = cast(%var_2490, dtype="float32") /* ty=Tensor[(15, 10, 7), float32] */;
  %752 = tan(%751) /* ty=Tensor[(15, 10, 7), float32] */;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(15, 10, 7), float64] */;
  %754 = log2(%753) /* ty=Tensor[(15, 10, 7), float64] */;
  %755 = @func_1262() /* ty=Tensor[(14, 7, 15), float32] */;
  (%754, %755)
}

def @func_360(%var_353: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), float32],) {
  %756 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %757 = cast(%var_353, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %758 = power(%756, %757) /* ty=Tensor[(6, 2, 6), float32] */;
  (%758,)
}

def @func_37(%var_26: Tensor[(11, 7, 11), float32], %var_29: Tensor[(11, 7, 11), float32]) -> (Tensor[(11, 7, 11), float32], Tensor[(11, 7, 11), float32]) {
  %759 = cast(%var_26, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %760 = cast(%var_29, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %761 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_26, dtype="float32") /* ty=Tensor[(11, 7, 11), float32] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %764 = asin(%759) /* ty=Tensor[(11, 7, 11), float32] */;
  %765 = divide(%762, %763) /* ty=Tensor[(11, 7, 11), float32] */;
  (%764, %765)
}

def @func_4466() -> (Tensor[(14, 7, 15), float32],) {
  @func_4464() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_7166(%var_7140: Tensor[(72), float32], %var_7141: Tensor[(4, 24), int64]) -> (Tensor[(6, 3, 13), bool], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(4, 24), int64], Tensor[(14, 7, 15), float32], Tensor[(468), uint32]) {
  %766 = @func_2901() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32]) */;
  %767 = cast(%var_7140, dtype="float32") /* ty=Tensor[(72), float32] */;
  %768 = cast(%var_7141, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %769 = reshape(%767, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %770 = reshape(%768, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %771 = @func_1451(%769, %770) /* ty=(Tensor[(14, 7, 15), int16], Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(6, 2, 6), float32], Tensor[(14, 7, 15), float64], Tensor[(12, 8, 1), int64], int64, Tensor[(96), int64]) */;
  %772 = @func_1336() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %773 = %771.1;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %775 = cast(%var_7141, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %776 = reshape(%774, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %777 = reshape(%775, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %778 = @func_4612(%776, %777) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(72), float32], Tensor[(96), int64], Tensor[(13, 12, 3), bool], Tensor[(468), uint32], Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), int16], Tensor[(1274), float32]) */;
  %779 = %766.0;
  %780 = %772.0;
  %781 = %778.4;
  (%779, %773, %var_7140, %var_7141, %780, %781)
}

def @func_5899() -> Tensor[(14, 7, 15), bool] {
  %782 = fn () -> Tensor[(14, 7, 15), bool] {
    @func_1558() /* ty=Tensor[(14, 7, 15), bool] */
  };
  %782() /* ty=Tensor[(14, 7, 15), bool] */
}

def @func_4464() -> (Tensor[(14, 7, 15), float32],) {
  %783 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %784 = %783.0;
  (%784,)
}

def @func_1262() -> Tensor[(14, 7, 15), float32] {
  %785 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %785.3
}

def @func_235(%var_232: Tensor[(10, 6, 5), float64], %var_233: Tensor[(10, 6, 5), float64], %var_234: Tensor[(1470), float32]) -> (Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) {
  %807 = fn (%var_183: Tensor[(10, 6, 5), float64], %var_184: Tensor[(10, 6, 5), float64], %var_200: Tensor[(1470), float32]) -> (Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) {
    %786 = cast(%var_184, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %787 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %788 = cast(%var_183, dtype="float64") /* ty=Tensor[(10, 6, 5), float64] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %790 = cast(%var_200, dtype="float32") /* ty=Tensor[(1470), float32] */;
    %791 = reshape(%790, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %792 = @func_78(%791) /* ty=Tensor[(14, 7, 15), float32] */;
    %793 = cast(%792, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
    %794 = reshape(%793, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
    %795 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 6, 5), float64] */, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
    %796 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%var_183, dtype="float32") /* ty=Tensor[(10, 6, 5), float32] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %799 = divide(%797, %798) /* ty=Tensor[(10, 6, 5), float32] */;
    %800 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 6, 5), float32] */, dtype="uint8") /* ty=Tensor[(10, 6, 5), uint8] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="uint8") /* ty=Tensor[(10, 6, 5), uint8] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %804 = mod(%788, %789) /* ty=Tensor[(10, 6, 5), float64] */;
    %805 = @func_78(%794) /* ty=Tensor[(14, 7, 15), float32] */;
    %806 = bitwise_xor(%802, %803) /* ty=Tensor[(10, 6, 5), uint8] */;
    (%804, %792, %var_200, %805, %806)
  };
  %807(%var_232, %var_233, %var_234) /* ty=(Tensor[(10, 6, 5), float64], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8]) */
}

def @func_2522(%var_2520: Tensor[(15, 10, 7), float32]) -> (Tensor[(15, 10, 7), float64], Tensor[(14, 7, 15), float32]) {
  @func_2519(%var_2520) /* ty=(Tensor[(15, 10, 7), float64], Tensor[(14, 7, 15), float32]) */
}

def @func_5239(%var_5221: Tensor[(300), float64]) -> (Tensor[(14, 7, 15), float32], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(7, 13, 14), float32]) {
  %808 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(14, 7, 15), float32] */;
  %811 = cast(%var_5221, dtype="float64") /* ty=Tensor[(300), float64] */;
  %812 = reshape(%810, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), float32] */;
  %813 = reshape(%811, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %814 = @func_535(%812, %813) /* ty=(Tensor[(1470), float32], Tensor[(14, 7, 15), bool], Tensor[(10, 6, 5), uint8], Tensor[(300), float64], Tensor[(10, 6, 5), float64]) */;
  %815 = @func_2276() /* ty=(Tensor[(7, 13, 14), float32],) */;
  %816 = %814.2;
  %817 = %815.0;
  (%809, %816, %var_5221, %817)
}

def @func_5029() -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
  @func_5027() /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) */
}

def @func_6057(%var_6053: Tensor[(3, 16, 16), uint8], %var_6054: int32, %var_6055: Tensor[(22, 7), int32], %var_6056: Tensor[(3, 16, 15), float32]) -> (Tensor[(3, 16, 16), uint8], Tensor[(14, 7, 15), float32], int32, Tensor[(22, 7), int32], Tensor[(14, 7, 15), float32], Tensor[(1, 16), int32], Tensor[(3, 16, 15), bool]) {
  @func_6051(%var_6053, %var_6054, %var_6055, %var_6056) /* ty=(Tensor[(3, 16, 16), uint8], Tensor[(14, 7, 15), float32], int32, Tensor[(22, 7), int32], Tensor[(14, 7, 15), float32], Tensor[(1, 16), int32], Tensor[(3, 16, 15), bool]) */
}

def @func_3202() -> (Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) {
  @func_3200() /* ty=(Tensor[(6, 3, 13), bool], Tensor[(14, 7, 15), float32], Tensor[(7, 13, 14), float32]) */
}

def @func_4220() -> (Tensor[(14, 7, 15), float32],) {
  %819 = fn () -> (Tensor[(14, 7, 15), float32],) {
    %818 = @func_1923() /* ty=Tensor[(14, 7, 15), float32] */;
    (%818,)
  };
  %819() /* ty=(Tensor[(14, 7, 15), float32],) */
}

def @func_5203() -> (Tensor[(7, 13, 14), float32],) {
  @func_5201() /* ty=(Tensor[(7, 13, 14), float32],) */
}

def @func_6933(%var_6926: Tensor[(7, 14, 4), uint16], %var_6927: Tensor[(7, 14, 4), uint16]) -> (Tensor[(7, 14, 4), uint16],) {
  %820 = cast(%var_6927, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %821 = shape_of(%var_6926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%var_6926, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %824 = left_shift(%822, %823) /* ty=Tensor[(7, 14, 4), uint16] */;
  (%824,)
}

def @func_991(%var_990: Tensor[(7, 13, 14), float64]) -> Tensor[(7, 13, 14), float32] {
  %828 = fn (%var_975: Tensor[(7, 13, 14), float64]) -> Tensor[(7, 13, 14), float32] {
    %825 = cast(%var_975, dtype="float64") /* ty=Tensor[(7, 13, 14), float64] */;
    %826 = tan(%825) /* ty=Tensor[(7, 13, 14), float64] */;
    %827 = cast(%826, dtype="float32") /* ty=Tensor[(7, 13, 14), float32] */;
    acosh(%827) /* ty=Tensor[(7, 13, 14), float32] */
  };
  %828(%var_990) /* ty=Tensor[(7, 13, 14), float32] */
}

def @func_3910(%var_3909: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(12, 8, 15), float64]) {
  %841 = fn (%var_3894: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(12, 8, 15), float64]) {
    %829 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
    %830 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%var_3894, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %833 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 8, 15), float64] */, dtype="int16") /* ty=Tensor[(12, 8, 15), int16] */;
    %834 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(%var_3894, dtype="int16") /* ty=Tensor[(12, 8, 15), int16] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %837 = bitwise_or(%835, %836) /* ty=Tensor[(12, 8, 15), int16] */;
    %838 = cast(%837, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
    %839 = add(%831, %832) /* ty=Tensor[(12, 8, 15), float64] */;
    %840 = rsqrt(%838) /* ty=Tensor[(12, 8, 15), float64] */;
    (%839, %840)
  };
  %841(%var_3909) /* ty=(Tensor[(12, 8, 15), float64], Tensor[(12, 8, 15), float64]) */
}

def @func_2783(%var_2781: float32, %var_2782: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), float32], Tensor[(14, 7, 15), float32]) {
  @func_2779(%var_2781, %var_2782) /* ty=(Tensor[(16, 3, 8), float32], Tensor[(14, 7, 15), float32]) */
}

def @func_5027() -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float64]) {
  %842 = @func_1026() /* ty=Tensor[(14, 7, 15), float64] */;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %844 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %845 = cast(%842, dtype="float64") /* ty=Tensor[(14, 7, 15), float64] */;
  %846 = sigmoid(%843) /* ty=Tensor[(14, 7, 15), float64] */;
  %847 = %844.0;
  %848 = @func_1807() /* ty=Tensor[(14, 7, 15), float32] */;
  %849 = asin(%845) /* ty=Tensor[(14, 7, 15), float64] */;
  (%846, %847, %848, %849)
}

def @func_1809() -> Tensor[(14, 7, 15), float32] {
  @func_1807() /* ty=Tensor[(14, 7, 15), float32] */
}

def @func_1304(%var_1303: Tensor[(6, 12), float32]) -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) {
  %861 = fn (%var_1289: Tensor[(6, 12), float32]) -> (Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) {
    %850 = cast(meta[relay.Constant][44] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
    %851 = cast(meta[relay.Constant][45] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
    %852 = cast(meta[relay.Constant][46] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %853 = cast(%var_1289, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
    %854 = reshape(%850, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint64] */;
    %855 = reshape(%851, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
    %856 = reshape(%852, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %857 = reshape(%853, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
    %858 = @func_599(%854, %855, %856, %857) /* ty=(Tensor[(13, 5, 9), bool], Tensor[(13, 5, 1), float64], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(1470), float32], Tensor[(14, 7, 15), float32], Tensor[(300), float64], Tensor[(6, 2, 6), float32], Tensor[(72, 1), float32]) */;
    %859 = @func_1225() /* ty=Tensor[(14, 7, 15), float64] */;
    %860 = %858.5;
    (%859, %860, meta[relay.Constant][44] /* ty=Tensor[(65), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(585), uint64] */, meta[relay.Constant][46] /* ty=Tensor[(300), float64] */, %var_1289)
  };
  %861(%var_1303) /* ty=(Tensor[(14, 7, 15), float64], Tensor[(14, 7, 15), float32], Tensor[(65), uint64], Tensor[(585), uint64], Tensor[(300), float64], Tensor[(6, 12), float32]) */
}

def @func_2404() -> (Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), float32], Tensor[(14, 7, 15), int16]) {
  %862 = @func_2306() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %863 = @func_2122() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %864 = @func_2042() /* ty=(Tensor[(14, 7, 15), float32], Tensor[(6, 3, 13), float32]) */;
  %865 = @func_422() /* ty=(Tensor[(6, 3, 13), float32], Tensor[(14, 7, 15), float32], Tensor[(1470), float32], Tensor[(14, 7, 15), float32]) */;
  %866 = %862.0;
  %867 = %863.0;
  %868 = %864.0;
  %869 = %865.3;
  %870 = @func_2132() /* ty=Tensor[(14, 7, 15), int16] */;
  (%866, %867, %868, %869, %870)
}

def @func_1807() -> Tensor[(14, 7, 15), float32] {
  %871 = @func_1692() /* ty=(Tensor[(14, 7, 15), float32],) */;
  %871.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen298/build/output.py", line 2489, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:45] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

