==========mod==========
#[version = "0.0.5"]
def @func_1369(%var_1360: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  %0 = cast(%var_1360, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  log(%0) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_3095(%var_3088: Tensor[(44), float64]) -> (Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
  %1 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %2 = cast(%var_3088, dtype="float64") /* ty=Tensor[(44), float64] */;
  %3 = reshape(%2, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
  %4 = @func_179(%3) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
  %5 = %1.1;
  %6 = %4.0;
  (%5, %6, %var_3088)
}

def @func_380(%var_366: float64) -> Tensor[(11, 15, 11), float64] {
  %7 = cast(%var_366, dtype="float64") /* ty=float64 */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
  mod(%7, %8) /* ty=Tensor[(11, 15, 11), float64] */
}

def @func_3748() -> (Tensor[(2, 3, 2), float64],) {
  %9 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
  %12 = log10(%11) /* ty=Tensor[(2, 3, 2), float64] */;
  (%12,)
}

def @func_7060() -> Tensor[(13, 5, 4), bool] {
  %13 = @func_6874() /* ty=(Tensor[(13, 5, 4), bool],) */;
  %13.0
}

def @func_6698() -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint32]) {
  %14 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %17 = reshape(%16, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), float32] */;
  %18 = @func_6499(%17) /* ty=Tensor[(2, 3, 2), int64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %20 = log(%19) /* ty=Tensor[(2, 3, 2), float32] */;
  %21 = cast(%18, dtype="uint32") /* ty=Tensor[(2, 3, 2), uint32] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="uint32") /* ty=Tensor[(2, 3, 2), uint32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %25 = bitwise_or(%23, %24) /* ty=Tensor[(2, 3, 2), uint32] */;
  (%15, %25)
}

def @func_4965() -> Tensor[(2, 3, 2), float32] {
  @func_3356() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_4183(%var_4169: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), bool],) {
  %26 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %27 = %26.1;
  %28 = cast(%var_4169, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = greater(%30, %31) /* ty=Tensor[(3, 8, 12), bool] */;
  (%32,)
}

def @func_2978() -> (Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) {
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %35 = reshape(%34, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %36 = @func_2676(%35) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 3, 2), float32] */, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
  %38 = erf(%33) /* ty=Tensor[(2, 3, 2), float32] */;
  %39 = %36.0;
  %40 = log2(%37) /* ty=Tensor[(2, 3, 2), float64] */;
  (%38, %39, meta[relay.Constant][2] /* ty=Tensor[(288), float32] */, %40)
}

def @func_2995() -> (Tensor[(2, 3, 2), float32],) {
  %41 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %42 = %41.0;
  (%42,)
}

def @func_6983(%var_6965: Tensor[(2, 4, 6), float64]) -> (Tensor[(2, 4, 6), float64],) {
  %43 = cast(%var_6965, dtype="float64") /* ty=Tensor[(2, 4, 6), float64] */;
  %44 = atanh(%43) /* ty=Tensor[(2, 4, 6), float64] */;
  (%44,)
}

def @func_6823() -> (Tensor[(13, 5, 4), bool], Tensor[(16, 14, 10), float64]) {
  %45 = @func_5585() /* ty=(Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) */;
  %46 = @func_6421() /* ty=Tensor[(13, 5, 4), bool] */;
  %47 = %45.0;
  (%46, %47)
}

def @func_6585() -> (Tensor[(2, 3, 2), float32], Tensor[(2240), float32], Tensor[(3, 8, 12), bool], Tensor[(288), float32]) {
  %48 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %50 = reshape(%49, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %51 = @func_4791(%50) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) */;
  %52 = @func_4965() /* ty=Tensor[(2, 3, 2), float32] */;
  %53 = %48.1;
  %54 = %51.2;
  (%52, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(288), float32] */)
}

def @func_1998(%var_1978: Tensor[(6, 13, 3), float64], %var_1988: Tensor[(216), uint8]) -> (Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) {
  %55 = cast(%var_1978, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %57 = reshape(%56, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %58 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %59 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %60 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %61 = reshape(%58, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %62 = reshape(%59, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %63 = reshape(%60, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %64 = @func_1033(%61, %62, %63) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
  %65 = sinh(%55) /* ty=Tensor[(6, 13, 3), float64] */;
  %66 = @func_1369(%57) /* ty=Tensor[(12, 7, 2), float32] */;
  %67 = %64.3;
  (%65, %66, meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, %67, %var_1988)
}

def @func_7249(%var_7240: Tensor[(455, 3), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(3, 16, 10), uint64], Tensor[(480), uint64], Tensor[(13, 15, 7), float64], Tensor[(455, 3), float64]) {
  %68 = @func_5894() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %70 = reshape(%69, newshape=[120, 4]) /* ty=Tensor[(120, 4), uint64] */;
  %71 = @func_5370(%70) /* ty=(Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) */;
  %72 = cast(%var_7240, dtype="float64") /* ty=Tensor[(455, 3), float64] */;
  %73 = cast(%var_7240, dtype="float64") /* ty=Tensor[(455, 3), float64] */;
  %74 = reshape(%72, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %75 = reshape(%73, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %76 = @func_3798(%74, %75) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
  %77 = %68.0;
  %78 = %71.1;
  %79 = %76.0;
  (%77, %78, meta[relay.Constant][5] /* ty=Tensor[(480), uint64] */, %79, %var_7240)
}

def @func_2430(%var_2421: Tensor[(3, 8, 12), float32], %var_2422: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
  %80 = cast(%var_2422, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %81 = shape_of(%var_2421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_2421, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%82, %83) /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_5054() -> Tensor[(15, 13, 13), float32] {
  %84 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
  %84.1
}

def @func_4349(%var_4330: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) {
  %85 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %86 = %85.1;
  %87 = cast(%var_4330, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %91 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %92 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
  %93 = mod(%89, %90) /* ty=Tensor[(3, 8, 12), float32] */;
  %94 = %91.2;
  %95 = %92.0;
  (%93, %94, %95)
}

def @func_2413(%var_2407: Tensor[(13, 5, 4), uint16], %var_2408: Tensor[(13, 5, 4), uint16]) -> Tensor[(13, 5, 4), bool] {
  %96 = cast(%var_2408, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %97 = shape_of(%var_2407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_2407, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%98, %99) /* ty=Tensor[(13, 5, 4), bool] */
}

def @func_6391(%var_6389: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 5, 9), float64], Tensor[(90), float64], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16], Tensor[(216), uint8], Tensor[(1365), float64]) {
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %101 = reshape(%100, newshape=[2, 5, 9]) /* ty=Tensor[(2, 5, 9), float64] */;
  %102 = @func_5747(%101) /* ty=(Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(2520), uint16] */, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
  %104 = reshape(%103, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint16] */;
  %105 = @func_4638(%104) /* ty=(Tensor[(12, 15, 14), bool],) */;
  %106 = cast(%var_6389, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %107 = cast(%var_6389, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %108 = reshape(%106, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %109 = reshape(%107, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %110 = @func_6352(%108, %109) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) */;
  %111 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
  %112 = %102.1;
  %113 = %105.0;
  %114 = %110.1;
  (%111, %112, meta[relay.Constant][6] /* ty=Tensor[(90), float64] */, %113, meta[relay.Constant][7] /* ty=Tensor[(2520), uint16] */, %114, %var_6389)
}

def @func_3664(%var_3629: Tensor[(12, 14, 11), uint8], %var_3656: Tensor[(8, 42), int8], %var_3659: Tensor[(44), float64]) -> (Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(8, 42), int8], Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(12, 14, 11), bool]) {
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %116 = reshape(%115, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
  %118 = cast(%var_3656, dtype="int8") /* ty=Tensor[(8, 42), int8] */;
  %119 = reshape(%117, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), int8] */;
  %120 = reshape(%118, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), int8] */;
  %121 = @func_2532(%119, %120) /* ty=(Tensor[(6, 14, 4), int8],) */;
  %122 = cast(%var_3659, dtype="float64") /* ty=Tensor[(44), float64] */;
  %123 = reshape(%122, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
  %124 = @func_179(%123) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
  %125 = cast(%var_3629, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %126 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 11), uint8] */, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = not_equal(%127, %128) /* ty=Tensor[(12, 14, 11), bool] */;
  %130 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(12, 14, 11), int32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="int32") /* ty=Tensor[(12, 14, 11), int32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %134 = bitwise_xor(%132, %133) /* ty=Tensor[(12, 14, 11), int32] */;
  %135 = cast(%134, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %136 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%129, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = @func_1369(%116) /* ty=Tensor[(12, 7, 2), float32] */;
  %140 = %121.0;
  %141 = %124.1;
  %142 = logical_or(%137, %138) /* ty=Tensor[(12, 14, 11), bool] */;
  (%139, meta[relay.Constant][8] /* ty=Tensor[(168), float32] */, %140, meta[relay.Constant][9] /* ty=Tensor[(24), int8] */, %var_3656, %141, %var_3659, %142)
}

def @func_4021() -> (Tensor[(16, 14, 10), float64],) {
  %143 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %144 = %143.0;
  %145 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 14, 10), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = mod(%147, %148) /* ty=Tensor[(16, 14, 10), float64] */;
  (%149,)
}

def @func_2532(%var_2527: Tensor[(6, 1, 4), int8], %var_2528: Tensor[(6, 14, 4), int8]) -> (Tensor[(6, 14, 4), int8],) {
  %150 = cast(%var_2527, dtype="int8") /* ty=Tensor[(6, 1, 4), int8] */;
  %151 = cast(%var_2528, dtype="int8") /* ty=Tensor[(6, 14, 4), int8] */;
  %152 = minimum(%150, %151) /* ty=Tensor[(6, 14, 4), int8] */;
  (%152,)
}

def @func_3711() -> (Tensor[(16, 14, 10), float32],) {
  %153 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
  %154 = %153.1;
  (%154,)
}

def @func_3253(%var_3236: Tensor[(2, 3, 2), float32]) -> (Tensor[(2, 3, 2), uint16],) {
  %155 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %156 = %155.0;
  %157 = cast(%var_3236, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = logical_or(%159, %160) /* ty=Tensor[(2, 3, 2), bool] */;
  %162 = cast(%156, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %166 = add(%164, %165) /* ty=Tensor[(2, 3, 2), uint16] */;
  (%166,)
}

def @func_4523(%var_4465: Tensor[(3, 9, 13), int32], %var_4498: Tensor[(520, 1), uint32]) -> (Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) {
  %167 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %168 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
  %169 = cast(%var_4465, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %173 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %174 = cast(%168, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %175 = cast(%var_4498, dtype="uint32") /* ty=Tensor[(520, 1), uint32] */;
  %176 = reshape(%174, newshape=[351]) /* ty=Tensor[(351), uint64] */;
  %177 = reshape(%175, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %178 = @func_3055(%176, %177) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) */;
  %179 = %167.0;
  %180 = subtract(%171, %172) /* ty=Tensor[(3, 9, 13), int16] */;
  %181 = %173.1;
  %182 = %178.1;
  (%179, %180, %181, %182, %var_4498)
}

def @func_5370(%var_5368: Tensor[(120, 4), uint64]) -> (Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) {
  %183 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
  %184 = cast(%var_5368, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
  %185 = reshape(%184, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint64] */;
  %186 = %183.1;
  %187 = @func_2487(%185) /* ty=Tensor[(3, 16, 10), uint64] */;
  (%186, %187, %var_5368)
}

def @func_4840() -> Tensor[(12, 12, 8), float64] {
  %188 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 8), float64] */;
  sin(%188) /* ty=Tensor[(12, 12, 8), float64] */
}

def @func_6103() -> (Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) {
  %189 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
  %190 = @func_4840() /* ty=Tensor[(12, 12, 8), float64] */;
  %191 = %189.2;
  (%190, %191)
}

def @func_5747(%var_5721: Tensor[(2, 5, 9), float64]) -> (Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) {
  %192 = cast(%var_5721, dtype="float64") /* ty=Tensor[(2, 5, 9), float64] */;
  %193 = log(%192) /* ty=Tensor[(2, 5, 9), float64] */;
  %194 = cast(%193, dtype="int8") /* ty=Tensor[(2, 5, 9), int8] */;
  %195 = shape_of(%var_5721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_5721, dtype="int8") /* ty=Tensor[(2, 5, 9), int8] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %198 = cast(%var_5721, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %199 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%193, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %202 = divide(%200, %201) /* ty=Tensor[(2, 5, 9), float32] */;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(2, 5, 9), float64] */;
  %204 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %205 = maximum(%196, %197) /* ty=Tensor[(2, 5, 9), int8] */;
  %206 = sqrt(%203) /* ty=Tensor[(2, 5, 9), float64] */;
  %207 = %204.0;
  (%205, %206, %207)
}

def @func_4434(%var_4411: Tensor[(16, 14, 10), float64]) -> Tensor[(16, 14, 10), bool] {
  %208 = @func_4021() /* ty=(Tensor[(16, 14, 10), float64],) */;
  %209 = %208.0;
  %210 = cast(%var_4411, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = less(%212, %213) /* ty=Tensor[(16, 14, 10), bool] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %216 = sigmoid(%215) /* ty=Tensor[(16, 14, 10), float64] */;
  %217 = cast(%214, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%219, %220) /* ty=Tensor[(16, 14, 10), bool] */
}

def @func_7286() -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %221 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %222 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %223 = %221.0;
  %224 = %222.1;
  (%223, %224)
}

def @func_7333() -> Tensor[(3, 8, 12), int64] {
  @func_7035() /* ty=Tensor[(3, 8, 12), int64] */
}

def @func_3889() -> Tensor[(3, 9, 13), int32] {
  %225 = @func_3483() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) */;
  %226 = %225.4;
  %227 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 9, 13), uint64] */, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%229, %230) /* ty=Tensor[(3, 9, 13), int32] */
}

def @func_5389() -> Tensor[(2, 4, 10), float64] {
  %231 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
  %231.3
}

def @func_3330() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) {
  %232 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %234 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %235 = reshape(%233, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %236 = reshape(%234, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %237 = %232.0;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %239 = reshape(%238, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), float32] */;
  %240 = @func_3253(%239) /* ty=(Tensor[(2, 3, 2), uint16],) */;
  %241 = @func_2430(%235, %236) /* ty=Tensor[(3, 8, 12), float32] */;
  %242 = %240.0;
  (%237, %241, meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, %242)
}

def @func_5227() -> Tensor[(2, 3, 2), float32] {
  %243 = @func_4941() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %243.0
}

def @func_7347() -> (Tensor[(12, 2, 1), float32],) {
  %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
  %245 = log(%244) /* ty=Tensor[(12, 2, 1), float32] */;
  (%245,)
}

def @func_1611(%var_1607: Tensor[(15, 13, 13), float32]) -> (Tensor[(15, 13, 13), float32],) {
  %246 = cast(%var_1607, dtype="float32") /* ty=Tensor[(15, 13, 13), float32] */;
  %247 = sin(%246) /* ty=Tensor[(15, 13, 13), float32] */;
  (%247,)
}

def @func_4261(%var_4206: Tensor[(80), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) {
  %248 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %249 = cast(%var_4206, dtype="int32") /* ty=Tensor[(80), int32] */;
  %250 = reshape(%249, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %251 = %248.1;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %253 = reshape(%252, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %254 = @func_4183(%253) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %255 = cast(meta[relay.Constant][17] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %256 = cast(meta[relay.Constant][17] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %257 = cast(meta[relay.Constant][17] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %258 = reshape(%255, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %259 = reshape(%256, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %260 = reshape(%257, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %261 = @func_1033(%258, %259, %260) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
  %262 = %261.2;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %264 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %265 = @func_1690(%250) /* ty=Tensor[(2, 4, 10), float64] */;
  %266 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %267 = %254.0;
  %268 = acos(%263) /* ty=Tensor[(6, 4, 9), float64] */;
  %269 = %264.3;
  (%251, %265, %var_4206, %266, meta[relay.Constant][17] /* ty=Tensor[(216), uint8] */, %267, %268, %269)
}

def @func_5141() -> (Tensor[(16, 14, 10), float32], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16]) {
  %270 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(2520), uint16] */, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
  %272 = reshape(%271, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint16] */;
  %273 = @func_4638(%272) /* ty=(Tensor[(12, 15, 14), bool],) */;
  %274 = %270.0;
  %275 = %273.0;
  (%274, %275, meta[relay.Constant][18] /* ty=Tensor[(2520), uint16] */)
}

def @func_4550() -> Tensor[(2, 3, 2), float32] {
  %276 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %276.0
}

def @func_5545(%var_5513: Tensor[(360), float32]) -> (Tensor[(288), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(216), uint8], Tensor[(1365), float64], Tensor[(6, 4, 9), int32], Tensor[(11, 15, 11), float64], Tensor[(360), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %277 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %278 = cast(meta[relay.Constant][19] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
  %279 = reshape(%278, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
  %280 = @func_1611(%279) /* ty=(Tensor[(15, 13, 13), float32],) */;
  %281 = cast(meta[relay.Constant][20] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %282 = cast(meta[relay.Constant][20] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %283 = reshape(%281, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %284 = reshape(%282, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %285 = @func_3798(%283, %284) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
  %286 = %285.3;
  %287 = cast(%286, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %288 = cast(%286, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %289 = cast(%286, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %290 = reshape(%287, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %291 = reshape(%288, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %292 = reshape(%289, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %293 = @func_1033(%290, %291, %292) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
  %294 = cast(%var_5513, dtype="float32") /* ty=Tensor[(360), float32] */;
  %295 = reshape(%294, newshape=[10, 3, 12]) /* ty=Tensor[(10, 3, 12), float32] */;
  %296 = @func_560(%295) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) */;
  %297 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %298 = %277.2;
  %299 = %280.0;
  %300 = %293.2;
  %301 = %296.4;
  %302 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
  %303 = %297.1;
  (%298, %299, meta[relay.Constant][19] /* ty=Tensor[(2535), float32] */, %286, meta[relay.Constant][20] /* ty=Tensor[(1365), float64] */, %300, %301, %var_5513, %302, %303)
}

def @func_3055(%var_3024: Tensor[(351), uint64], %var_3034: Tensor[(520), uint32]) -> (Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) {
  %304 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
  %307 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %308 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %309 = reshape(%307, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %310 = reshape(%308, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %311 = @func_2171(%309, %310) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
  %312 = cast(-1.48559f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %313 = reshape(%312, newshape=[]) /* ty=float64 */;
  %314 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %315 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %316 = reshape(%314, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %317 = reshape(%315, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %318 = @func_832(%316, %317) /* ty=(Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) */;
  %319 = cosh(%306) /* ty=Tensor[(2, 3, 2), float64] */;
  %320 = %311.1;
  %321 = @func_380(%313) /* ty=Tensor[(11, 15, 11), float64] */;
  %322 = %318.1;
  (%319, %320, %var_3024, %321, -1.48559f64 /* ty=float64 */, %322, %var_3034)
}

def @func_6245(%var_6203: Tensor[(12, 8, 13), int16], %var_6204: Tensor[(12, 8, 13), int16]) -> (Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(3, 8, 12), bool], Tensor[(288), float32], Tensor[(12, 8, 13), float64]) {
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %324 = reshape(%323, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %325 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %326 = reshape(%325, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %327 = @func_4183(%326) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %328 = cast(%var_6204, dtype="int16") /* ty=Tensor[(12, 8, 13), int16] */;
  %329 = shape_of(%var_6203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%var_6203, dtype="int16") /* ty=Tensor[(12, 8, 13), int16] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %332 = subtract(%330, %331) /* ty=Tensor[(12, 8, 13), int16] */;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(12, 8, 13), float64] */;
  %334 = erf(%333) /* ty=Tensor[(12, 8, 13), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(12, 8, 13), float64] */;
  %336 = @func_1690(%324) /* ty=Tensor[(2, 4, 10), float64] */;
  %337 = %327.0;
  %338 = acosh(%335) /* ty=Tensor[(12, 8, 13), float64] */;
  (%336, meta[relay.Constant][21] /* ty=Tensor[(80), int32] */, %337, meta[relay.Constant][22] /* ty=Tensor[(288), float32] */, %338)
}

def @func_3798(%var_3784: Tensor[(13, 15, 7), float64], %var_3785: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) {
  %339 = cast(%var_3785, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
  %340 = shape_of(%var_3784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_3784, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %343 = cast(meta[relay.Constant][23] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %344 = cast(meta[relay.Constant][24] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %345 = reshape(%343, newshape=[80]) /* ty=Tensor[(80), int32] */;
  %346 = reshape(%344, newshape=[216]) /* ty=Tensor[(216), uint8] */;
  %347 = @func_3313(%345, %346) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) */;
  %348 = mod(%341, %342) /* ty=Tensor[(13, 15, 7), float64] */;
  %349 = %347.2;
  (%348, %349, meta[relay.Constant][23] /* ty=Tensor[(80), int32] */, meta[relay.Constant][24] /* ty=Tensor[(216), uint8] */)
}

def @func_2487(%var_2473: Tensor[(3, 16, 10), uint64]) -> Tensor[(3, 16, 10), uint64] {
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 10), uint64] */, dtype="uint64") /* ty=Tensor[(3, 16, 10), uint64] */;
  %351 = shape_of(%var_2473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_2473, dtype="uint64") /* ty=Tensor[(3, 16, 10), uint64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%352, %353) /* ty=Tensor[(3, 16, 10), uint64] */
}

def @func_4678() -> Tensor[(3, 8, 12), bool] {
  %354 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %354.0
}

def @func_5979(%var_5964: Tensor[(16, 6, 4), int32], %var_5965: Tensor[(16, 6, 4), int32], %var_5969: Tensor[(16, 6, 4), int32]) -> (Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) {
  %355 = cast(%var_5965, dtype="int32") /* ty=Tensor[(16, 6, 4), int32] */;
  %356 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_5964, dtype="int32") /* ty=Tensor[(16, 6, 4), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %359 = cast(%var_5969, dtype="int16") /* ty=Tensor[(16, 6, 4), int16] */;
  %360 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_5964, dtype="int16") /* ty=Tensor[(16, 6, 4), int16] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %363 = bitwise_xor(%357, %358) /* ty=Tensor[(16, 6, 4), int32] */;
  %364 = logical_xor(%361, %362) /* ty=Tensor[(16, 6, 4), int16] */;
  (%363, %364)
}

def @func_6941(%var_6934: Tensor[(384), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 6, 4), int32], Tensor[(384), int32]) {
  %365 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %366 = %365.1;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %368 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %369 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %370 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %371 = reshape(%368, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %372 = reshape(%369, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %373 = reshape(%370, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %374 = @func_5979(%371, %372, %373) /* ty=(Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) */;
  %375 = asin(%367) /* ty=Tensor[(3, 8, 12), float32] */;
  %376 = %374.0;
  (%375, %376, %var_6934)
}

def @func_4925() -> (Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) {
  %377 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %378 = cast(meta[relay.Constant][26] /* ty=Tensor[(260), uint16] */, dtype="uint16") /* ty=Tensor[(260), uint16] */;
  %379 = cast(meta[relay.Constant][26] /* ty=Tensor[(260), uint16] */, dtype="uint16") /* ty=Tensor[(260), uint16] */;
  %380 = reshape(%378, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), uint16] */;
  %381 = reshape(%379, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), uint16] */;
  %382 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %383 = reshape(%382, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %384 = %377.0;
  %385 = @func_2413(%380, %381) /* ty=Tensor[(13, 5, 4), bool] */;
  %386 = @func_1690(%383) /* ty=Tensor[(2, 4, 10), float64] */;
  (%384, %385, meta[relay.Constant][26] /* ty=Tensor[(260), uint16] */, %386, meta[relay.Constant][27] /* ty=Tensor[(80), int32] */)
}

def @func_1690(%var_1683: Tensor[(2, 4, 10), int32]) -> Tensor[(2, 4, 10), float64] {
  %387 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 4, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 4, 10), int32] */;
  %388 = shape_of(%var_1683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_1683, dtype="int32") /* ty=Tensor[(2, 4, 10), int32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %391 = bitwise_or(%389, %390) /* ty=Tensor[(2, 4, 10), int32] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  sqrt(%392) /* ty=Tensor[(2, 4, 10), float64] */
}

def @func_560(%var_500: Tensor[(10, 3, 12), float32]) -> (Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) {
  %393 = cast(meta[relay.Constant][29] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %394 = reshape(%393, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
  %395 = @func_179(%394) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
  %396 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %397 = reshape(%396, newshape=[]) /* ty=float64 */;
  %398 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %399 = reshape(%398, newshape=[]) /* ty=float64 */;
  %400 = cast(%var_500, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
  %401 = sqrt(%400) /* ty=Tensor[(10, 3, 12), float32] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
  %403 = atan(%402) /* ty=Tensor[(10, 3, 12), float32] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(10, 3, 12), float64] */;
  %405 = sinh(%404) /* ty=Tensor[(10, 3, 12), float64] */;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(10, 3, 12), float64] */;
  %407 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %408 = reshape(%407, newshape=[]) /* ty=float64 */;
  %409 = cast(%405, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
  %410 = %395.1;
  %411 = @func_380(%397) /* ty=Tensor[(11, 15, 11), float64] */;
  %412 = @func_380(%399) /* ty=Tensor[(11, 15, 11), float64] */;
  %413 = atanh(%406) /* ty=Tensor[(10, 3, 12), float64] */;
  %414 = @func_380(%408) /* ty=Tensor[(11, 15, 11), float64] */;
  %415 = acosh(%409) /* ty=Tensor[(10, 3, 12), float32] */;
  (%410, meta[relay.Constant][29] /* ty=Tensor[(44), float64] */, %411, 7.4776f64 /* ty=float64 */, %412, %413, %414, %415)
}

def @func_6421() -> Tensor[(13, 5, 4), bool] {
  %416 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
  %416.1
}

def @func_4638(%var_4633: Tensor[(12, 15, 14), uint16]) -> (Tensor[(12, 15, 14), bool],) {
  %417 = cast(%var_4633, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
  %418 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(12, 15, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 15, 14), uint16] */, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = greater(%419, %420) /* ty=Tensor[(12, 15, 14), bool] */;
  (%421,)
}

def @func_2676(%var_2667: Tensor[(288), float32]) -> (Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %422 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %423 = atan(%422) /* ty=Tensor[(12, 15, 14), float32] */;
  %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 14), int32] */;
  %425 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 14), int32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %428 = logical_xor(%426, %427) /* ty=Tensor[(12, 15, 14), int32] */;
  %429 = cast(%428, dtype="uint8") /* ty=Tensor[(12, 15, 14), uint8] */;
  %430 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%423, dtype="uint8") /* ty=Tensor[(12, 15, 14), uint8] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %433 = cast(%var_2667, dtype="float32") /* ty=Tensor[(288), float32] */;
  %434 = cast(%var_2667, dtype="float32") /* ty=Tensor[(288), float32] */;
  %435 = reshape(%433, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %436 = reshape(%434, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %437 = maximum(%431, %432) /* ty=Tensor[(12, 15, 14), uint8] */;
  %438 = @func_2430(%435, %436) /* ty=Tensor[(3, 8, 12), float32] */;
  (%437, %438, %var_2667)
}

def @func_5173(%var_5152: Tensor[(130, 4), uint32]) -> (Tensor[(3, 9, 13), int32], Tensor[(4, 13, 10), float32], Tensor[(130, 4), uint32], Tensor[(2, 3, 2), float32], Tensor[(16, 14, 10), float32], Tensor[(2, 3, 2), float32]) {
  %439 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %440 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %441 = reshape(%439, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %442 = reshape(%440, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %443 = @func_832(%441, %442) /* ty=(Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) */;
  %444 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
  %445 = cast(%444, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
  %446 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %447 = reshape(%445, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), int32] */;
  %448 = reshape(%446, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint32] */;
  %449 = @func_4523(%447, %448) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) */;
  %450 = @func_4941() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %451 = %443.1;
  %452 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %453 = %449.0;
  %454 = %450.0;
  (%444, %451, %var_5152, %452, %453, %454)
}

def @func_6151(%var_6123: Tensor[(3, 15, 14), float32]) -> Tensor[(3, 15, 14), float32] {
  %455 = cast(%var_6123, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  exp(%455) /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_7210(%var_7072: Tensor[(16, 9, 10), float64], %var_7073: Tensor[(16, 9, 10), float64], %var_7202: Tensor[(16, 9, 10), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(16, 9, 10), float32], Tensor[(2240), float32], Tensor[(16, 9, 10), float64], Tensor[(3, 9, 13), int32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), float32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), bool]) {
  %456 = @func_3748() /* ty=(Tensor[(2, 3, 2), float64],) */;
  %457 = cast(%var_7073, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %458 = log2(%457) /* ty=Tensor[(16, 9, 10), float64] */;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %460 = @func_6021() /* ty=(Tensor[(2240), float32],) */;
  %461 = cast(%var_7073, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %462 = shape_of(%var_7072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_7072, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %465 = maximum(%463, %464) /* ty=Tensor[(16, 9, 10), float64] */;
  %466 = cast(%var_7073, dtype="uint16") /* ty=Tensor[(16, 9, 10), uint16] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="uint16") /* ty=Tensor[(16, 9, 10), uint16] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %470 = bitwise_and(%468, %469) /* ty=Tensor[(16, 9, 10), uint16] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  %472 = @func_5894() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %473 = cast(%458, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %474 = rsqrt(%473) /* ty=Tensor[(16, 9, 10), float32] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %476 = cast(%458, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
  %477 = atanh(%476) /* ty=Tensor[(16, 9, 10), float32] */;
  %478 = cast(%var_7202, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = %456.0;
  %483 = sinh(%459) /* ty=Tensor[(16, 9, 10), float32] */;
  %484 = %460.0;
  %485 = acosh(%471) /* ty=Tensor[(16, 9, 10), float64] */;
  %486 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
  %487 = %472.0;
  %488 = asinh(%475) /* ty=Tensor[(16, 9, 10), float32] */;
  %489 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %490 = equal(%480, %481) /* ty=Tensor[(16, 9, 10), bool] */;
  (%482, %483, %484, %485, %486, %487, %488, %489, %490)
}

def @main(%var_7448: Tensor[(3, 8, 12), bool]) -> (Tensor[(3, 8, 12), int32],) {
  %491 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
  %492 = cast(%var_7448, dtype="int32") /* ty=Tensor[(3, 8, 12), int32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="int32") /* ty=Tensor[(3, 8, 12), int32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %496 = logical_xor(%494, %495) /* ty=Tensor[(3, 8, 12), int32] */;
  (%496,)
}

def @func_3483() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) {
  %497 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 36), float32] */, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %498 = reshape(%497, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %499 = @func_2676(%498) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %500 = cast(meta[relay.Constant][35] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %502 = reshape(%500, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %503 = reshape(%501, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %504 = @func_2171(%502, %503) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
  %505 = cast(meta[relay.Constant][34] /* ty=Tensor[(280, 8), float32] */, dtype="float32") /* ty=Tensor[(280, 8), float32] */;
  %506 = reshape(%505, newshape=[16, 14, 10]) /* ty=Tensor[(16, 14, 10), float32] */;
  %507 = @func_1416(%506) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %508 = %507.2;
  %509 = cast(meta[relay.Constant][36] /* ty=Tensor[(44), float64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(1), int32] */;
  %511 = cast(%508, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %513 = subtract(%511, %512) /* ty=Tensor[(44), uint64] */;
  %514 = cast(%513, dtype="uint32") /* ty=Tensor[(44), uint32] */;
  %515 = shape_of(%508, dtype="int32") /* ty=Tensor[(1), int32] */;
  %516 = cast(%508, dtype="uint32") /* ty=Tensor[(44), uint32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %518 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %519 = %499.1;
  %520 = %504.0;
  %521 = multiply(%516, %517) /* ty=Tensor[(44), uint32] */;
  (%518, %519, meta[relay.Constant][33] /* ty=Tensor[(8, 36), float32] */, meta[relay.Constant][34] /* ty=Tensor[(280, 8), float32] */, %520, meta[relay.Constant][35] /* ty=Tensor[(351), uint64] */, %521)
}

def @func_832(%var_797: Tensor[(4, 13, 10), uint32], %var_809: Tensor[(4, 13, 10), uint32]) -> (Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) {
  %522 = cast(%var_809, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %523 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %527 = shape_of(%var_797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_797, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = equal(%528, %529) /* ty=Tensor[(4, 13, 10), bool] */;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
  %532 = bitwise_xor(%524, %525) /* ty=Tensor[(4, 13, 10), int64] */;
  %533 = rsqrt(%531) /* ty=Tensor[(4, 13, 10), float32] */;
  (%532, %533)
}

def @func_4791(%var_4782: Tensor[(288), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) {
  %534 = @func_3748() /* ty=(Tensor[(2, 3, 2), float64],) */;
  %535 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %536 = reshape(%535, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %537 = @func_4349(%536) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) */;
  %538 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %539 = reshape(%538, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %540 = @func_4183(%539) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %541 = cast(%var_4782, dtype="bool") /* ty=Tensor[(288), bool] */;
  %542 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(288), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %543 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), float32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?), bool] */;
  %545 = %534.0;
  %546 = %537.1;
  %547 = %540.0;
  %548 = not_equal(%543, %544) /* ty=Tensor[(288), bool] */;
  (%545, %546, %547, %548)
}

def @func_4628(%var_4613: Tensor[(2, 108), uint8]) -> (Tensor[(288), float32], Tensor[(2, 3, 2), float32], Tensor[(4, 20), int32], Tensor[(2, 108), uint8]) {
  %549 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %550 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 20), int32] */, dtype="int32") /* ty=Tensor[(4, 20), int32] */;
  %551 = cast(%var_4613, dtype="uint8") /* ty=Tensor[(2, 108), uint8] */;
  %552 = reshape(%550, newshape=[80]) /* ty=Tensor[(80), int32] */;
  %553 = reshape(%551, newshape=[216]) /* ty=Tensor[(216), uint8] */;
  %554 = @func_3313(%552, %553) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) */;
  %555 = %549.2;
  %556 = %554.0;
  (%555, %556, meta[relay.Constant][39] /* ty=Tensor[(4, 20), int32] */, %var_4613)
}

def @func_7324() -> Tensor[(7, 2, 14), float32] {
  %557 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %558 = exp(%557) /* ty=Tensor[(7, 2, 14), float32] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  sin(%559) /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_6352(%var_6304: Tensor[(1365), float64], %var_6315: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) {
  %560 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %562 = cast(%var_6304, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %563 = cast(%var_6304, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %564 = reshape(%562, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %565 = reshape(%563, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %566 = @func_3798(%564, %565) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
  %567 = cast(%var_6315, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %568 = shape_of(%var_6304, dtype="int32") /* ty=Tensor[(1), int32] */;
  %569 = cast(%var_6304, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?), int16] */;
  %571 = @func_6021() /* ty=(Tensor[(2240), float32],) */;
  %572 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
  %573 = sinh(%561) /* ty=Tensor[(2, 3, 2), float32] */;
  %574 = %566.3;
  %575 = logical_xor(%569, %570) /* ty=Tensor[(1365), int16] */;
  %576 = %571.0;
  %577 = %572.3;
  (%573, %574, %575, %576, %577)
}

def @func_5894() -> (Tensor[(2, 3, 2), float32],) {
  %578 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
  (%578,)
}

def @func_5437(%var_5426: Tensor[(351), uint64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) {
  %579 = cast(%var_5426, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %580 = reshape(%579, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %581 = @func_5346(%580) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) */;
  %582 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
  %583 = %581.1;
  (%582, %583, %var_5426)
}

def @func_6279() -> (Tensor[(2240), float32],) {
  %584 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %585 = %584.1;
  (%585,)
}

def @func_6021() -> (Tensor[(2240), float32],) {
  %586 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
  %587 = %586.0;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %589 = atan(%588) /* ty=Tensor[(2240), float32] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %591 = sigmoid(%590) /* ty=Tensor[(2240), float32] */;
  (%591,)
}

def @func_6471() -> (Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) {
  %592 = @func_5023() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) */;
  %593 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 117), uint64] */, dtype="uint64") /* ty=Tensor[(3, 117), uint64] */;
  %594 = reshape(%593, newshape=[351]) /* ty=Tensor[(351), uint64] */;
  %595 = @func_5437(%594) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) */;
  %596 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %597 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
  %598 = %592.1;
  %599 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %600 = %595.0;
  %601 = @func_5924() /* ty=Tensor[(2, 3, 2), float32] */;
  %602 = %596.1;
  (%597, %598, %599, %600, meta[relay.Constant][41] /* ty=Tensor[(3, 117), uint64] */, %601, %602)
}

def @func_5924() -> Tensor[(2, 3, 2), float32] {
  @func_5227() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_4112() -> (Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) {
  %603 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %604 = cast(meta[relay.Constant][42] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
  %605 = reshape(%604, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
  %606 = @func_1611(%605) /* ty=(Tensor[(15, 13, 13), float32],) */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %608 = cast(meta[relay.Constant][43] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %609 = reshape(%607, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %610 = reshape(%608, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %611 = @func_2171(%609, %610) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
  %612 = %603.0;
  %613 = %606.0;
  %614 = %611.0;
  (%612, %613, meta[relay.Constant][42] /* ty=Tensor[(2535), float32] */, %614, meta[relay.Constant][43] /* ty=Tensor[(351), uint64] */)
}

def @func_5023() -> (Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) {
  %615 = cast(meta[relay.Constant][44] /* ty=Tensor[(22, 2), float64] */, dtype="float64") /* ty=Tensor[(22, 2), float64] */;
  %616 = reshape(%615, newshape=[44]) /* ty=Tensor[(44), float64] */;
  %617 = @func_3095(%616) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %618 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %619 = %617.2;
  (%618, %619, meta[relay.Constant][44] /* ty=Tensor[(22, 2), float64] */)
}

def @func_5585() -> (Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) {
  %620 = @func_4021() /* ty=(Tensor[(16, 14, 10), float64],) */;
  %621 = cast(meta[relay.Constant][45] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
  %622 = reshape(%621, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
  %623 = @func_1611(%622) /* ty=(Tensor[(15, 13, 13), float32],) */;
  %624 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
  %625 = %620.0;
  %626 = %623.0;
  %627 = %624.0;
  (%625, %626, meta[relay.Constant][45] /* ty=Tensor[(2535), float32] */, %627)
}

def @func_6627() -> Tensor[(12, 12, 8), float64] {
  %628 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %628.0
}

def @func_3987() -> (Tensor[(2240), float32],) {
  %629 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
  %630 = %629.2;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %632 = acosh(%631) /* ty=Tensor[(2240), float32] */;
  (%632,)
}

def @func_6499(%var_6484: Tensor[(2, 3, 2), float32]) -> Tensor[(2, 3, 2), int64] {
  %633 = @func_5924() /* ty=Tensor[(2, 3, 2), float32] */;
  %634 = cast(%var_6484, dtype="int16") /* ty=Tensor[(2, 3, 2), int16] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="int16") /* ty=Tensor[(2, 3, 2), int16] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %638 = subtract(%636, %637) /* ty=Tensor[(2, 3, 2), int16] */;
  %639 = cast(%var_6484, dtype="int64") /* ty=Tensor[(2, 3, 2), int64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="int64") /* ty=Tensor[(2, 3, 2), int64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%641, %642) /* ty=Tensor[(2, 3, 2), int64] */
}

def @func_3940() -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %643 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %644 = %643.1;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %646 = cos(%645) /* ty=Tensor[(3, 8, 12), float64] */;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %648 = rsqrt(%647) /* ty=Tensor[(3, 8, 12), float64] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = cast(%646, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %654 = not_equal(%651, %652) /* ty=Tensor[(3, 8, 12), bool] */;
  %655 = tan(%653) /* ty=Tensor[(3, 8, 12), float32] */;
  (%654, %655)
}

def @func_179(%var_138: Tensor[(11, 2, 2), float64]) -> (Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) {
  %656 = cast(%var_138, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %657 = cast(%var_138, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %658 = asinh(%657) /* ty=Tensor[(11, 2, 2), float64] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %660 = log10(%656) /* ty=Tensor[(11, 2, 2), float64] */;
  %661 = cosh(%659) /* ty=Tensor[(11, 2, 2), float64] */;
  (%660, %661)
}

def @func_3313(%var_3295: Tensor[(80), int32], %var_3309: Tensor[(216), uint8]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) {
  %662 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %663 = cast(%var_3295, dtype="int32") /* ty=Tensor[(80), int32] */;
  %664 = reshape(%663, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %665 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 234), float64] */, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %666 = cast(%var_3309, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %667 = reshape(%665, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float64] */;
  %668 = reshape(%666, newshape=[216]) /* ty=Tensor[(216), uint8] */;
  %669 = @func_1998(%667, %668) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) */;
  %670 = %662.0;
  %671 = @func_1690(%664) /* ty=Tensor[(2, 4, 10), float64] */;
  %672 = %669.1;
  (%670, %671, %var_3295, %672, meta[relay.Constant][46] /* ty=Tensor[(1, 234), float64] */, %var_3309)
}

def @func_1416(%var_1399: Tensor[(16, 14, 10), float32]) -> (Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
  %673 = cast(%var_1399, dtype="float32") /* ty=Tensor[(16, 14, 10), float32] */;
  %674 = cast(meta[relay.Constant][47] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %675 = reshape(%674, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
  %676 = @func_179(%675) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
  %677 = atan(%673) /* ty=Tensor[(16, 14, 10), float32] */;
  %678 = %676.1;
  (%677, %678, meta[relay.Constant][47] /* ty=Tensor[(44), float64] */)
}

def @func_6859() -> (Tensor[(3, 117), float32], Tensor[(2535), float32]) {
  %679 = @func_6471() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) */;
  %680 = %679.4;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
  %682 = @func_5585() /* ty=(Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) */;
  %683 = asinh(%681) /* ty=Tensor[(3, 117), float32] */;
  %684 = %682.2;
  (%683, %684)
}

def @func_3620() -> (Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) {
  %685 = @func_3483() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) */;
  %686 = cast(meta[relay.Constant][48] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %687 = reshape(%686, newshape=[16, 14, 10]) /* ty=Tensor[(16, 14, 10), float32] */;
  %688 = @func_1416(%687) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %689 = %685.2;
  %690 = %688.0;
  (%689, %690, meta[relay.Constant][48] /* ty=Tensor[(2240), float32] */)
}

def @func_3356() -> Tensor[(2, 3, 2), float32] {
  %691 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %691.0
}

def @func_2171(%var_2133: Tensor[(3, 9, 13), uint64], %var_2134: Tensor[(3, 9, 13), uint64]) -> (Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) {
  %692 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %693 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_2133, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %696 = cast(%var_2134, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %697 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_2133, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = logical_and(%698, %699) /* ty=Tensor[(3, 9, 13), bool] */;
  %701 = cast(%var_2134, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %705 = minimum(%694, %695) /* ty=Tensor[(3, 9, 13), uint64] */;
  %706 = greater(%703, %704) /* ty=Tensor[(3, 9, 13), bool] */;
  (%705, %706)
}

def @func_2628(%var_2611: Tensor[(240, 2), uint64], %var_2614: Tensor[(240, 2), uint64]) -> (Tensor[(15, 9, 10), bool], Tensor[(3, 16, 10), uint64], Tensor[(240, 2), float64], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(336), int8]) {
  %707 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 1, 1), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 1), bool] */;
  %708 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 9, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
  %709 = cast(%var_2611, dtype="uint64") /* ty=Tensor[(240, 2), uint64] */;
  %710 = reshape(%709, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint64] */;
  %711 = cast(%var_2614, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
  %712 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(2), int32] */;
  %713 = cast(%var_2611, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %715 = floor_divide(%713, %714) /* ty=Tensor[(240, 2), float64] */;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
  %717 = cast(meta[relay.Constant][51] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
  %718 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %719 = reshape(%717, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), int8] */;
  %720 = reshape(%718, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), int8] */;
  %721 = @func_2532(%719, %720) /* ty=(Tensor[(6, 14, 4), int8],) */;
  %722 = logical_or(%707, %708) /* ty=Tensor[(15, 9, 10), bool] */;
  %723 = @func_2487(%710) /* ty=Tensor[(3, 16, 10), uint64] */;
  %724 = atanh(%716) /* ty=Tensor[(240, 2), float64] */;
  %725 = %721.0;
  (%722, %723, %724, %725, meta[relay.Constant][51] /* ty=Tensor[(24), int8] */, meta[relay.Constant][52] /* ty=Tensor[(336), int8] */)
}

def @func_1033(%var_1007: Tensor[(6, 4, 9), uint8], %var_1008: Tensor[(6, 4, 9), uint8], %var_1025: Tensor[(6, 4, 9), uint8]) -> (Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) {
  %726 = cast(%var_1008, dtype="uint8") /* ty=Tensor[(6, 4, 9), uint8] */;
  %727 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%var_1007, dtype="uint8") /* ty=Tensor[(6, 4, 9), uint8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %730 = cast(%var_1008, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %731 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%var_1007, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = cast(%var_1007, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %735 = shape_of(%var_1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_1008, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %738 = cast(%var_1025, dtype="int64") /* ty=Tensor[(6, 4, 9), int64] */;
  %739 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_1007, dtype="int64") /* ty=Tensor[(6, 4, 9), int64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %742 = bitwise_and(%728, %729) /* ty=Tensor[(6, 4, 9), uint8] */;
  %743 = less(%732, %733) /* ty=Tensor[(6, 4, 9), bool] */;
  %744 = minimum(%736, %737) /* ty=Tensor[(6, 4, 9), int32] */;
  %745 = subtract(%740, %741) /* ty=Tensor[(6, 4, 9), int64] */;
  (%742, %743, %744, %745)
}

def @func_7402() -> Tensor[(2, 3, 2), float32] {
  %746 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %746.0
}

def @func_4941() -> (Tensor[(2, 3, 2), float32],) {
  %747 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  (%747,)
}

def @func_5346(%var_5333: Tensor[(3, 9, 13), uint64]) -> (Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) {
  %748 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %749 = cast(meta[relay.Constant][53] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %750 = reshape(%749, newshape=[80]) /* ty=Tensor[(80), int32] */;
  %751 = @func_4261(%750) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) */;
  %752 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
  %753 = %752.3;
  %754 = cast(%var_5333, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %758 = %748.3;
  %759 = %751.7;
  %760 = bitwise_and(%756, %757) /* ty=Tensor[(3, 9, 13), int16] */;
  (%758, %759, meta[relay.Constant][53] /* ty=Tensor[(80), int32] */, %760)
}

def @func_6874() -> (Tensor[(13, 5, 4), bool],) {
  %761 = @func_6421() /* ty=Tensor[(13, 5, 4), bool] */;
  (%761,)
}

def @func_7035() -> Tensor[(3, 8, 12), int64] {
  %762 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %763 = %762.1;
  %764 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 8, 12), float32] */, dtype="int64") /* ty=Tensor[(3, 8, 12), int64] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="int64") /* ty=Tensor[(3, 8, 12), int64] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%766, %767) /* ty=Tensor[(3, 8, 12), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4186(%var_4184: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), bool],) {
  @func_4183(%var_4184) /* ty=(Tensor[(3, 8, 12), bool],) */
}

def @func_6585() -> (Tensor[(2, 3, 2), float32], Tensor[(2240), float32], Tensor[(3, 8, 12), bool], Tensor[(288), float32]) {
  %0 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %2 = reshape(%1, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %3 = @func_4791(%2) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) */;
  %4 = @func_4965() /* ty=Tensor[(2, 3, 2), float32] */;
  %5 = %0.1;
  %6 = %3.2;
  (%4, %5, %6, meta[relay.Constant][0] /* ty=Tensor[(288), float32] */)
}

def @func_4794(%var_4792: Tensor[(288), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) {
  @func_4791(%var_4792) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) */
}

def @func_6875() -> (Tensor[(13, 5, 4), bool],) {
  %8 = fn () -> (Tensor[(13, 5, 4), bool],) {
    %7 = @func_6421() /* ty=Tensor[(13, 5, 4), bool] */;
    (%7,)
  };
  %8() /* ty=(Tensor[(13, 5, 4), bool],) */
}

def @func_2002(%var_2000: Tensor[(6, 13, 3), float64], %var_2001: Tensor[(216), uint8]) -> (Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) {
  @func_1998(%var_2000, %var_2001) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) */
}

def @func_562(%var_561: Tensor[(10, 3, 12), float32]) -> (Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) {
  %32 = fn (%var_500: Tensor[(10, 3, 12), float32]) -> (Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) {
    %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
    %10 = reshape(%9, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
    %11 = @func_179(%10) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
    %12 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %13 = reshape(%12, newshape=[]) /* ty=float64 */;
    %14 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %15 = reshape(%14, newshape=[]) /* ty=float64 */;
    %16 = cast(%var_500, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
    %17 = sqrt(%16) /* ty=Tensor[(10, 3, 12), float32] */;
    %18 = cast(%17, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
    %19 = atan(%18) /* ty=Tensor[(10, 3, 12), float32] */;
    %20 = cast(%19, dtype="float64") /* ty=Tensor[(10, 3, 12), float64] */;
    %21 = sinh(%20) /* ty=Tensor[(10, 3, 12), float64] */;
    %22 = cast(%21, dtype="float64") /* ty=Tensor[(10, 3, 12), float64] */;
    %23 = cast(7.4776f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %24 = reshape(%23, newshape=[]) /* ty=float64 */;
    %25 = cast(%21, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
    %26 = %11.1;
    %27 = @func_380(%13) /* ty=Tensor[(11, 15, 11), float64] */;
    %28 = @func_380(%15) /* ty=Tensor[(11, 15, 11), float64] */;
    %29 = atanh(%22) /* ty=Tensor[(10, 3, 12), float64] */;
    %30 = @func_380(%24) /* ty=Tensor[(11, 15, 11), float64] */;
    %31 = acosh(%25) /* ty=Tensor[(10, 3, 12), float32] */;
    (%26, meta[relay.Constant][1] /* ty=Tensor[(44), float64] */, %27, 7.4776f64 /* ty=float64 */, %28, %29, %30, %31)
  };
  %32(%var_561) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) */
}

def @func_5984(%var_5981: Tensor[(16, 6, 4), int32], %var_5982: Tensor[(16, 6, 4), int32], %var_5983: Tensor[(16, 6, 4), int32]) -> (Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) {
  @func_5979(%var_5981, %var_5982, %var_5983) /* ty=(Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) */
}

def @func_4434(%var_4411: Tensor[(16, 14, 10), float64]) -> Tensor[(16, 14, 10), bool] {
  %33 = @func_4021() /* ty=(Tensor[(16, 14, 10), float64],) */;
  %34 = %33.0;
  %35 = cast(%var_4411, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = less(%37, %38) /* ty=Tensor[(16, 14, 10), bool] */;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %41 = sigmoid(%40) /* ty=Tensor[(16, 14, 10), float64] */;
  %42 = cast(%39, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(16, 14, 10), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%44, %45) /* ty=Tensor[(16, 14, 10), bool] */
}

def @func_7348() -> (Tensor[(12, 2, 1), float32],) {
  %48 = fn () -> (Tensor[(12, 2, 1), float32],) {
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
    %47 = log(%46) /* ty=Tensor[(12, 2, 1), float32] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(12, 2, 1), float32],) */
}

def @func_6022() -> (Tensor[(2240), float32],) {
  %55 = fn () -> (Tensor[(2240), float32],) {
    %49 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
    %50 = %49.0;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %52 = atan(%51) /* ty=Tensor[(2240), float32] */;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %54 = sigmoid(%53) /* ty=Tensor[(2240), float32] */;
    (%54,)
  };
  %55() /* ty=(Tensor[(2240), float32],) */
}

def @func_5055() -> Tensor[(15, 13, 13), float32] {
  %57 = fn () -> Tensor[(15, 13, 13), float32] {
    %56 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
    %56.1
  };
  %57() /* ty=Tensor[(15, 13, 13), float32] */
}

def @func_1418(%var_1417: Tensor[(16, 14, 10), float32]) -> (Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
  %64 = fn (%var_1399: Tensor[(16, 14, 10), float32]) -> (Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
    %58 = cast(%var_1399, dtype="float32") /* ty=Tensor[(16, 14, 10), float32] */;
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
    %60 = reshape(%59, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
    %61 = @func_179(%60) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
    %62 = atan(%58) /* ty=Tensor[(16, 14, 10), float32] */;
    %63 = %61.1;
    (%62, %63, meta[relay.Constant][3] /* ty=Tensor[(44), float64] */)
  };
  %64(%var_1417) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */
}

def @func_5750(%var_5748: Tensor[(2, 5, 9), float64]) -> (Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) {
  @func_5747(%var_5748) /* ty=(Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) */
}

def @func_1369(%var_1360: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  %65 = cast(%var_1360, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  log(%65) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_5894() -> (Tensor[(2, 3, 2), float32],) {
  %66 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
  (%66,)
}

def @func_1372(%var_1370: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  @func_1369(%var_1370) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_2631(%var_2629: Tensor[(240, 2), uint64], %var_2630: Tensor[(240, 2), uint64]) -> (Tensor[(15, 9, 10), bool], Tensor[(3, 16, 10), uint64], Tensor[(240, 2), float64], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(336), int8]) {
  %86 = fn (%var_2611: Tensor[(240, 2), uint64], %var_2614: Tensor[(240, 2), uint64]) -> (Tensor[(15, 9, 10), bool], Tensor[(3, 16, 10), uint64], Tensor[(240, 2), float64], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(336), int8]) {
    %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 1, 1), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 1), bool] */;
    %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 9, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
    %69 = cast(%var_2611, dtype="uint64") /* ty=Tensor[(240, 2), uint64] */;
    %70 = reshape(%69, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint64] */;
    %71 = cast(%var_2614, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
    %72 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(2), int32] */;
    %73 = cast(%var_2611, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %75 = floor_divide(%73, %74) /* ty=Tensor[(240, 2), float64] */;
    %76 = cast(%75, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
    %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
    %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
    %79 = reshape(%77, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), int8] */;
    %80 = reshape(%78, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), int8] */;
    %81 = @func_2532(%79, %80) /* ty=(Tensor[(6, 14, 4), int8],) */;
    %82 = logical_or(%67, %68) /* ty=Tensor[(15, 9, 10), bool] */;
    %83 = @func_2487(%70) /* ty=Tensor[(3, 16, 10), uint64] */;
    %84 = atanh(%76) /* ty=Tensor[(240, 2), float64] */;
    %85 = %81.0;
    (%82, %83, %84, %85, meta[relay.Constant][6] /* ty=Tensor[(24), int8] */, meta[relay.Constant][7] /* ty=Tensor[(336), int8] */)
  };
  %86(%var_2629, %var_2630) /* ty=(Tensor[(15, 9, 10), bool], Tensor[(3, 16, 10), uint64], Tensor[(240, 2), float64], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(336), int8]) */
}

def @func_1611(%var_1607: Tensor[(15, 13, 13), float32]) -> (Tensor[(15, 13, 13), float32],) {
  %87 = cast(%var_1607, dtype="float32") /* ty=Tensor[(15, 13, 13), float32] */;
  %88 = sin(%87) /* ty=Tensor[(15, 13, 13), float32] */;
  (%88,)
}

def @func_3356() -> Tensor[(2, 3, 2), float32] {
  %89 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %89.0
}

def @func_5979(%var_5964: Tensor[(16, 6, 4), int32], %var_5965: Tensor[(16, 6, 4), int32], %var_5969: Tensor[(16, 6, 4), int32]) -> (Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) {
  %90 = cast(%var_5965, dtype="int32") /* ty=Tensor[(16, 6, 4), int32] */;
  %91 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_5964, dtype="int32") /* ty=Tensor[(16, 6, 4), int32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %94 = cast(%var_5969, dtype="int16") /* ty=Tensor[(16, 6, 4), int16] */;
  %95 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_5964, dtype="int16") /* ty=Tensor[(16, 6, 4), int16] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %98 = bitwise_xor(%92, %93) /* ty=Tensor[(16, 6, 4), int32] */;
  %99 = logical_xor(%96, %97) /* ty=Tensor[(16, 6, 4), int16] */;
  (%98, %99)
}

def @func_5747(%var_5721: Tensor[(2, 5, 9), float64]) -> (Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) {
  %100 = cast(%var_5721, dtype="float64") /* ty=Tensor[(2, 5, 9), float64] */;
  %101 = log(%100) /* ty=Tensor[(2, 5, 9), float64] */;
  %102 = cast(%101, dtype="int8") /* ty=Tensor[(2, 5, 9), int8] */;
  %103 = shape_of(%var_5721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_5721, dtype="int8") /* ty=Tensor[(2, 5, 9), int8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %106 = cast(%var_5721, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %107 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%101, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %110 = divide(%108, %109) /* ty=Tensor[(2, 5, 9), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(2, 5, 9), float64] */;
  %112 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %113 = maximum(%104, %105) /* ty=Tensor[(2, 5, 9), int8] */;
  %114 = sqrt(%111) /* ty=Tensor[(2, 5, 9), float64] */;
  %115 = %112.0;
  (%113, %114, %115)
}

def @func_382(%var_381: float64) -> Tensor[(11, 15, 11), float64] {
  %118 = fn (%var_366: float64) -> Tensor[(11, 15, 11), float64] {
    %116 = cast(%var_366, dtype="float64") /* ty=float64 */;
    %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
    mod(%116, %117) /* ty=Tensor[(11, 15, 11), float64] */
  };
  %118(%var_381) /* ty=Tensor[(11, 15, 11), float64] */
}

def @func_5391() -> Tensor[(2, 4, 10), float64] {
  @func_5389() /* ty=Tensor[(2, 4, 10), float64] */
}

def @func_4183(%var_4169: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), bool],) {
  %119 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %120 = %119.1;
  %121 = cast(%var_4169, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %125 = greater(%123, %124) /* ty=Tensor[(3, 8, 12), bool] */;
  (%125,)
}

def @func_6473() -> (Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) {
  @func_6471() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) */
}

def @func_6985(%var_6984: Tensor[(2, 4, 6), float64]) -> (Tensor[(2, 4, 6), float64],) {
  %128 = fn (%var_6965: Tensor[(2, 4, 6), float64]) -> (Tensor[(2, 4, 6), float64],) {
    %126 = cast(%var_6965, dtype="float64") /* ty=Tensor[(2, 4, 6), float64] */;
    %127 = atanh(%126) /* ty=Tensor[(2, 4, 6), float64] */;
    (%127,)
  };
  %128(%var_6984) /* ty=(Tensor[(2, 4, 6), float64],) */
}

def @func_4437(%var_4435: Tensor[(16, 14, 10), float64]) -> Tensor[(16, 14, 10), bool] {
  @func_4434(%var_4435) /* ty=Tensor[(16, 14, 10), bool] */
}

def @func_6356(%var_6354: Tensor[(1365), float64], %var_6355: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) {
  @func_6352(%var_6354, %var_6355) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) */
}

def @func_4678() -> Tensor[(3, 8, 12), bool] {
  %129 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %129.0
}

def @func_6941(%var_6934: Tensor[(384), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 6, 4), int32], Tensor[(384), int32]) {
  %130 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %131 = %130.1;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %133 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %134 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %135 = cast(%var_6934, dtype="int32") /* ty=Tensor[(384), int32] */;
  %136 = reshape(%133, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %137 = reshape(%134, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %138 = reshape(%135, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), int32] */;
  %139 = @func_5979(%136, %137, %138) /* ty=(Tensor[(16, 6, 4), int32], Tensor[(16, 6, 4), int16]) */;
  %140 = asin(%132) /* ty=Tensor[(3, 8, 12), float32] */;
  %141 = %139.0;
  (%140, %141, %var_6934)
}

def @func_3802(%var_3800: Tensor[(13, 15, 7), float64], %var_3801: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) {
  @func_3798(%var_3800, %var_3801) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */
}

def @func_3890() -> Tensor[(3, 9, 13), int32] {
  %148 = fn () -> Tensor[(3, 9, 13), int32] {
    %142 = @func_3483() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) */;
    %143 = %142.4;
    %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 9, 13), uint64] */, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
    %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%143, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    maximum(%146, %147) /* ty=Tensor[(3, 9, 13), int32] */
  };
  %148() /* ty=Tensor[(3, 9, 13), int32] */
}

def @func_182(%var_180: Tensor[(11, 2, 2), float64]) -> (Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) {
  @func_179(%var_180) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */
}

def @func_4680() -> Tensor[(3, 8, 12), bool] {
  @func_4678() /* ty=Tensor[(3, 8, 12), bool] */
}

def @func_2413(%var_2407: Tensor[(13, 5, 4), uint16], %var_2408: Tensor[(13, 5, 4), uint16]) -> Tensor[(13, 5, 4), bool] {
  %149 = cast(%var_2408, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %150 = shape_of(%var_2407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_2407, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%151, %152) /* ty=Tensor[(13, 5, 4), bool] */
}

def @func_3058(%var_3056: Tensor[(351), uint64], %var_3057: Tensor[(520), uint32]) -> (Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) {
  %172 = fn (%var_3024: Tensor[(351), uint64], %var_3034: Tensor[(520), uint32]) -> (Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) {
    %153 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
    %154 = %153.0;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
    %156 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %157 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %158 = reshape(%156, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
    %159 = reshape(%157, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
    %160 = @func_2171(%158, %159) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
    %161 = cast(-1.48559f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %162 = reshape(%161, newshape=[]) /* ty=float64 */;
    %163 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %164 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %165 = reshape(%163, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
    %166 = reshape(%164, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
    %167 = @func_832(%165, %166) /* ty=(Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) */;
    %168 = cosh(%155) /* ty=Tensor[(2, 3, 2), float64] */;
    %169 = %160.1;
    %170 = @func_380(%162) /* ty=Tensor[(11, 15, 11), float64] */;
    %171 = %167.1;
    (%168, %169, %var_3024, %170, -1.48559f64 /* ty=float64 */, %171, %var_3034)
  };
  %172(%var_3056, %var_3057) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) */
}

def @func_5926() -> Tensor[(2, 3, 2), float32] {
  @func_5924() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_6944(%var_6942: Tensor[(384), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 6, 4), int32], Tensor[(384), int32]) {
  @func_6941(%var_6942) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 6, 4), int32], Tensor[(384), int32]) */
}

def @func_7326() -> Tensor[(7, 2, 14), float32] {
  @func_7324() /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_4351(%var_4350: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) {
  %184 = fn (%var_4330: Tensor[(3, 8, 12), float32]) -> (Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) {
    %173 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
    %174 = %173.1;
    %175 = cast(%var_4330, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%174, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %179 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %180 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
    %181 = mod(%177, %178) /* ty=Tensor[(3, 8, 12), float32] */;
    %182 = %179.2;
    %183 = %180.0;
    (%181, %182, %183)
  };
  %184(%var_4350) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) */
}

def @func_6422() -> Tensor[(13, 5, 4), bool] {
  %186 = fn () -> Tensor[(13, 5, 4), bool] {
    %185 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
    %185.1
  };
  %186() /* ty=Tensor[(13, 5, 4), bool] */
}

def @func_5173(%var_5152: Tensor[(130, 4), uint32]) -> (Tensor[(3, 9, 13), int32], Tensor[(4, 13, 10), float32], Tensor[(130, 4), uint32], Tensor[(2, 3, 2), float32], Tensor[(16, 14, 10), float32], Tensor[(2, 3, 2), float32]) {
  %187 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %188 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %189 = reshape(%187, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %190 = reshape(%188, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint32] */;
  %191 = @func_832(%189, %190) /* ty=(Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) */;
  %192 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
  %193 = cast(%192, dtype="int32") /* ty=Tensor[(3, 9, 13), int32] */;
  %194 = cast(%var_5152, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %195 = reshape(%193, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), int32] */;
  %196 = reshape(%194, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint32] */;
  %197 = @func_4523(%195, %196) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) */;
  %198 = @func_4941() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %199 = %191.1;
  %200 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %201 = %197.0;
  %202 = %198.0;
  (%192, %199, %var_5152, %200, %201, %202)
}

def @func_2996() -> (Tensor[(2, 3, 2), float32],) {
  %205 = fn () -> (Tensor[(2, 3, 2), float32],) {
    %203 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %204 = %203.0;
    (%204,)
  };
  %205() /* ty=(Tensor[(2, 3, 2), float32],) */
}

def @func_5389() -> Tensor[(2, 4, 10), float64] {
  %206 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
  %206.3
}

def @func_5586() -> (Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) {
  %215 = fn () -> (Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) {
    %207 = @func_4021() /* ty=(Tensor[(16, 14, 10), float64],) */;
    %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
    %209 = reshape(%208, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
    %210 = @func_1611(%209) /* ty=(Tensor[(15, 13, 13), float32],) */;
    %211 = @func_3987() /* ty=(Tensor[(2240), float32],) */;
    %212 = %207.0;
    %213 = %210.0;
    %214 = %211.0;
    (%212, %213, meta[relay.Constant][10] /* ty=Tensor[(2535), float32] */, %214)
  };
  %215() /* ty=(Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) */
}

def @func_7035() -> Tensor[(3, 8, 12), int64] {
  %216 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %217 = %216.1;
  %218 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 8, 12), float32] */, dtype="int64") /* ty=Tensor[(3, 8, 12), int64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="int64") /* ty=Tensor[(3, 8, 12), int64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%220, %221) /* ty=Tensor[(3, 8, 12), int64] */
}

def @func_6245(%var_6203: Tensor[(12, 8, 13), int16], %var_6204: Tensor[(12, 8, 13), int16]) -> (Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(3, 8, 12), bool], Tensor[(288), float32], Tensor[(12, 8, 13), float64]) {
  %222 = cast(meta[relay.Constant][12] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %223 = reshape(%222, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %224 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %225 = reshape(%224, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %226 = @func_4183(%225) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %227 = cast(%var_6204, dtype="int16") /* ty=Tensor[(12, 8, 13), int16] */;
  %228 = shape_of(%var_6203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%var_6203, dtype="int16") /* ty=Tensor[(12, 8, 13), int16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %231 = subtract(%229, %230) /* ty=Tensor[(12, 8, 13), int16] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(12, 8, 13), float64] */;
  %233 = erf(%232) /* ty=Tensor[(12, 8, 13), float64] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(12, 8, 13), float64] */;
  %235 = @func_1690(%223) /* ty=Tensor[(2, 4, 10), float64] */;
  %236 = %226.0;
  %237 = acosh(%234) /* ty=Tensor[(12, 8, 13), float64] */;
  (%235, meta[relay.Constant][12] /* ty=Tensor[(80), int32] */, %236, meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, %237)
}

def @func_5229() -> Tensor[(2, 3, 2), float32] {
  @func_5227() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_3255(%var_3254: Tensor[(2, 3, 2), float32]) -> (Tensor[(2, 3, 2), uint16],) {
  %250 = fn (%var_3236: Tensor[(2, 3, 2), float32]) -> (Tensor[(2, 3, 2), uint16],) {
    %238 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
    %239 = %238.0;
    %240 = cast(%var_3236, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %244 = logical_or(%242, %243) /* ty=Tensor[(2, 3, 2), bool] */;
    %245 = cast(%239, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
    %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%244, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %249 = add(%247, %248) /* ty=Tensor[(2, 3, 2), uint16] */;
    (%249,)
  };
  %250(%var_3254) /* ty=(Tensor[(2, 3, 2), uint16],) */
}

def @func_4527(%var_4525: Tensor[(3, 9, 13), int32], %var_4526: Tensor[(520, 1), uint32]) -> (Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) {
  @func_4523(%var_4525, %var_4526) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) */
}

def @func_6471() -> (Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) {
  %251 = @func_5023() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) */;
  %252 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 117), uint64] */, dtype="uint64") /* ty=Tensor[(3, 117), uint64] */;
  %253 = reshape(%252, newshape=[351]) /* ty=Tensor[(351), uint64] */;
  %254 = @func_5437(%253) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) */;
  %255 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
  %256 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
  %257 = %251.1;
  %258 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %259 = %254.0;
  %260 = @func_5924() /* ty=Tensor[(2, 3, 2), float32] */;
  %261 = %255.1;
  (%256, %257, %258, %259, meta[relay.Constant][14] /* ty=Tensor[(3, 117), uint64] */, %260, %261)
}

def @func_6499(%var_6484: Tensor[(2, 3, 2), float32]) -> Tensor[(2, 3, 2), int64] {
  %262 = @func_5924() /* ty=Tensor[(2, 3, 2), float32] */;
  %263 = cast(%var_6484, dtype="int16") /* ty=Tensor[(2, 3, 2), int16] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="int16") /* ty=Tensor[(2, 3, 2), int16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %267 = subtract(%265, %266) /* ty=Tensor[(2, 3, 2), int16] */;
  %268 = cast(%var_6484, dtype="int64") /* ty=Tensor[(2, 3, 2), int64] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="int64") /* ty=Tensor[(2, 3, 2), int64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%270, %271) /* ty=Tensor[(2, 3, 2), int64] */
}

def @func_4842() -> Tensor[(12, 12, 8), float64] {
  @func_4840() /* ty=Tensor[(12, 12, 8), float64] */
}

def @func_4523(%var_4465: Tensor[(3, 9, 13), int32], %var_4498: Tensor[(520, 1), uint32]) -> (Tensor[(16, 14, 10), float32], Tensor[(3, 9, 13), int16], Tensor[(3, 8, 12), float32], Tensor[(3, 9, 13), bool], Tensor[(520, 1), uint32]) {
  %272 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %273 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
  %274 = cast(%var_4465, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %278 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %279 = cast(%273, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %280 = cast(%var_4498, dtype="uint32") /* ty=Tensor[(520, 1), uint32] */;
  %281 = reshape(%279, newshape=[351]) /* ty=Tensor[(351), uint64] */;
  %282 = reshape(%280, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %283 = @func_3055(%281, %282) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(3, 9, 13), bool], Tensor[(351), uint64], Tensor[(11, 15, 11), float64], float64, Tensor[(4, 13, 10), float32], Tensor[(520), uint32]) */;
  %284 = %272.0;
  %285 = subtract(%276, %277) /* ty=Tensor[(3, 9, 13), int16] */;
  %286 = %278.1;
  %287 = %283.1;
  (%284, %285, %286, %287, %var_4498)
}

def @func_2417(%var_2415: Tensor[(13, 5, 4), uint16], %var_2416: Tensor[(13, 5, 4), uint16]) -> Tensor[(13, 5, 4), bool] {
  @func_2413(%var_2415, %var_2416) /* ty=Tensor[(13, 5, 4), bool] */
}

def @func_2175(%var_2173: Tensor[(3, 9, 13), uint64], %var_2174: Tensor[(3, 9, 13), uint64]) -> (Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) {
  @func_2171(%var_2173, %var_2174) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */
}

def @func_6104() -> (Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) {
  %291 = fn () -> (Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) {
    %288 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
    %289 = @func_4840() /* ty=Tensor[(12, 12, 8), float64] */;
    %290 = %288.2;
    (%289, %290)
  };
  %291() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */
}

def @func_6393(%var_6392: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 5, 9), float64], Tensor[(90), float64], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16], Tensor[(216), uint8], Tensor[(1365), float64]) {
  %307 = fn (%var_6389: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 5, 9), float64], Tensor[(90), float64], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16], Tensor[(216), uint8], Tensor[(1365), float64]) {
    %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %293 = reshape(%292, newshape=[2, 5, 9]) /* ty=Tensor[(2, 5, 9), float64] */;
    %294 = @func_5747(%293) /* ty=(Tensor[(2, 5, 9), int8], Tensor[(2, 5, 9), float64], Tensor[(2, 3, 2), float32]) */;
    %295 = cast(meta[relay.Constant][16] /* ty=Tensor[(2520), uint16] */, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
    %296 = reshape(%295, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint16] */;
    %297 = @func_4638(%296) /* ty=(Tensor[(12, 15, 14), bool],) */;
    %298 = cast(%var_6389, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %299 = cast(%var_6389, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %300 = reshape(%298, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
    %301 = reshape(%299, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
    %302 = @func_6352(%300, %301) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) */;
    %303 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
    %304 = %294.1;
    %305 = %297.0;
    %306 = %302.1;
    (%303, %304, meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, %305, meta[relay.Constant][16] /* ty=Tensor[(2520), uint16] */, %306, %var_6389)
  };
  %307(%var_6392) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 5, 9), float64], Tensor[(90), float64], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16], Tensor[(216), uint8], Tensor[(1365), float64]) */
}

def @func_7062() -> Tensor[(13, 5, 4), bool] {
  @func_7060() /* ty=Tensor[(13, 5, 4), bool] */
}

def @func_4264(%var_4262: Tensor[(80), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) {
  @func_4261(%var_4262) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) */
}

def @func_5143() -> (Tensor[(16, 14, 10), float32], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16]) {
  @func_5141() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16]) */
}

def @func_2487(%var_2473: Tensor[(3, 16, 10), uint64]) -> Tensor[(3, 16, 10), uint64] {
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 16, 10), uint64] */, dtype="uint64") /* ty=Tensor[(3, 16, 10), uint64] */;
  %309 = shape_of(%var_2473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_2473, dtype="uint64") /* ty=Tensor[(3, 16, 10), uint64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%310, %311) /* ty=Tensor[(3, 16, 10), uint64] */
}

def @func_6352(%var_6304: Tensor[(1365), float64], %var_6315: Tensor[(1365), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(1365), int16], Tensor[(2240), float32], Tensor[(2, 4, 10), float64]) {
  %312 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %314 = cast(%var_6304, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %315 = cast(%var_6304, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %316 = reshape(%314, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %317 = reshape(%315, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %318 = @func_3798(%316, %317) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
  %319 = cast(%var_6315, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %320 = shape_of(%var_6304, dtype="int32") /* ty=Tensor[(1), int32] */;
  %321 = cast(%var_6304, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?), int16] */;
  %323 = @func_6021() /* ty=(Tensor[(2240), float32],) */;
  %324 = @func_4925() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */;
  %325 = sinh(%313) /* ty=Tensor[(2, 3, 2), float32] */;
  %326 = %318.3;
  %327 = logical_xor(%321, %322) /* ty=Tensor[(1365), int16] */;
  %328 = %323.0;
  %329 = %324.3;
  (%325, %326, %327, %328, %329)
}

def @func_7333() -> Tensor[(3, 8, 12), int64] {
  @func_7035() /* ty=Tensor[(3, 8, 12), int64] */
}

def @func_6628() -> Tensor[(12, 12, 8), float64] {
  %331 = fn () -> Tensor[(12, 12, 8), float64] {
    %330 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
    %330.0
  };
  %331() /* ty=Tensor[(12, 12, 8), float64] */
}

def @func_3750() -> (Tensor[(2, 3, 2), float64],) {
  @func_3748() /* ty=(Tensor[(2, 3, 2), float64],) */
}

def @func_1693(%var_1691: Tensor[(2, 4, 10), int32]) -> Tensor[(2, 4, 10), float64] {
  @func_1690(%var_1691) /* ty=Tensor[(2, 4, 10), float64] */
}

def @func_3941() -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %345 = fn () -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
    %332 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
    %333 = %332.1;
    %334 = cast(%333, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
    %335 = cos(%334) /* ty=Tensor[(3, 8, 12), float64] */;
    %336 = cast(%335, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
    %337 = rsqrt(%336) /* ty=Tensor[(3, 8, 12), float64] */;
    %338 = cast(%335, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
    %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%337, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %342 = cast(%335, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %343 = not_equal(%340, %341) /* ty=Tensor[(3, 8, 12), bool] */;
    %344 = tan(%342) /* ty=Tensor[(3, 8, 12), float32] */;
    (%343, %344)
  };
  %345() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */
}

def @func_3664(%var_3629: Tensor[(12, 14, 11), uint8], %var_3656: Tensor[(8, 42), int8], %var_3659: Tensor[(44), float64]) -> (Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(8, 42), int8], Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(12, 14, 11), bool]) {
  %346 = cast(meta[relay.Constant][18] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %347 = reshape(%346, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %348 = cast(meta[relay.Constant][19] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
  %349 = cast(%var_3656, dtype="int8") /* ty=Tensor[(8, 42), int8] */;
  %350 = reshape(%348, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), int8] */;
  %351 = reshape(%349, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), int8] */;
  %352 = @func_2532(%350, %351) /* ty=(Tensor[(6, 14, 4), int8],) */;
  %353 = cast(%var_3659, dtype="float64") /* ty=Tensor[(44), float64] */;
  %354 = reshape(%353, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
  %355 = @func_179(%354) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
  %356 = cast(%var_3629, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %357 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(12, 14, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 14, 11), uint8] */, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = not_equal(%358, %359) /* ty=Tensor[(12, 14, 11), bool] */;
  %361 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(12, 14, 11), int32] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="int32") /* ty=Tensor[(12, 14, 11), int32] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %365 = bitwise_xor(%363, %364) /* ty=Tensor[(12, 14, 11), int32] */;
  %366 = cast(%365, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %367 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%360, dtype="bool") /* ty=Tensor[(12, 14, 11), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = @func_1369(%347) /* ty=Tensor[(12, 7, 2), float32] */;
  %371 = %352.0;
  %372 = %355.1;
  %373 = logical_or(%368, %369) /* ty=Tensor[(12, 14, 11), bool] */;
  (%370, meta[relay.Constant][18] /* ty=Tensor[(168), float32] */, %371, meta[relay.Constant][19] /* ty=Tensor[(24), int8] */, %var_3656, %372, %var_3659, %373)
}

def @func_1614(%var_1612: Tensor[(15, 13, 13), float32]) -> (Tensor[(15, 13, 13), float32],) {
  @func_1611(%var_1612) /* ty=(Tensor[(15, 13, 13), float32],) */
}

def @func_7402() -> Tensor[(2, 3, 2), float32] {
  %374 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
  %374.0
}

def @func_3669(%var_3666: Tensor[(12, 14, 11), uint8], %var_3667: Tensor[(8, 42), int8], %var_3668: Tensor[(44), float64]) -> (Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(8, 42), int8], Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(12, 14, 11), bool]) {
  @func_3664(%var_3666, %var_3667, %var_3668) /* ty=(Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 14, 4), int8], Tensor[(24), int8], Tensor[(8, 42), int8], Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(12, 14, 11), bool]) */
}

def @func_1998(%var_1978: Tensor[(6, 13, 3), float64], %var_1988: Tensor[(216), uint8]) -> (Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) {
  %375 = cast(%var_1978, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %377 = reshape(%376, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %378 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %379 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %380 = cast(%var_1988, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %381 = reshape(%378, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %382 = reshape(%379, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %383 = reshape(%380, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %384 = @func_1033(%381, %382, %383) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
  %385 = sinh(%375) /* ty=Tensor[(6, 13, 3), float64] */;
  %386 = @func_1369(%377) /* ty=Tensor[(12, 7, 2), float32] */;
  %387 = %384.3;
  (%385, %386, meta[relay.Constant][22] /* ty=Tensor[(168), float32] */, %387, %var_1988)
}

def @func_4021() -> (Tensor[(16, 14, 10), float64],) {
  %388 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %389 = %388.0;
  %390 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 14, 10), float32] */, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="float64") /* ty=Tensor[(16, 14, 10), float64] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %394 = mod(%392, %393) /* ty=Tensor[(16, 14, 10), float64] */;
  (%394,)
}

def @func_4840() -> Tensor[(12, 12, 8), float64] {
  %395 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 8), float64] */;
  sin(%395) /* ty=Tensor[(12, 12, 8), float64] */
}

def @func_2678(%var_2677: Tensor[(288), float32]) -> (Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %413 = fn (%var_2667: Tensor[(288), float32]) -> (Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
    %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
    %397 = atan(%396) /* ty=Tensor[(12, 15, 14), float32] */;
    %398 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 14), int32] */;
    %399 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 14), int32] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %402 = logical_xor(%400, %401) /* ty=Tensor[(12, 15, 14), int32] */;
    %403 = cast(%402, dtype="uint8") /* ty=Tensor[(12, 15, 14), uint8] */;
    %404 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%397, dtype="uint8") /* ty=Tensor[(12, 15, 14), uint8] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %407 = cast(%var_2667, dtype="float32") /* ty=Tensor[(288), float32] */;
    %408 = cast(%var_2667, dtype="float32") /* ty=Tensor[(288), float32] */;
    %409 = reshape(%407, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %410 = reshape(%408, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %411 = maximum(%405, %406) /* ty=Tensor[(12, 15, 14), uint8] */;
    %412 = @func_2430(%409, %410) /* ty=Tensor[(3, 8, 12), float32] */;
    (%411, %412, %var_2667)
  };
  %413(%var_2677) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */
}

def @func_4942() -> (Tensor[(2, 3, 2), float32],) {
  %415 = fn () -> (Tensor[(2, 3, 2), float32],) {
    %414 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
    (%414,)
  };
  %415() /* ty=(Tensor[(2, 3, 2), float32],) */
}

def @func_179(%var_138: Tensor[(11, 2, 2), float64]) -> (Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) {
  %416 = cast(%var_138, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %417 = cast(%var_138, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %418 = asinh(%417) /* ty=Tensor[(11, 2, 2), float64] */;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(11, 2, 2), float64] */;
  %420 = log10(%416) /* ty=Tensor[(11, 2, 2), float64] */;
  %421 = cosh(%419) /* ty=Tensor[(11, 2, 2), float64] */;
  (%420, %421)
}

def @func_3483() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) {
  %422 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 36), float32] */, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %423 = reshape(%422, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %424 = @func_2676(%423) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %425 = cast(meta[relay.Constant][29] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %426 = cast(meta[relay.Constant][29] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %427 = reshape(%425, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %428 = reshape(%426, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %429 = @func_2171(%427, %428) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
  %430 = cast(meta[relay.Constant][28] /* ty=Tensor[(280, 8), float32] */, dtype="float32") /* ty=Tensor[(280, 8), float32] */;
  %431 = reshape(%430, newshape=[16, 14, 10]) /* ty=Tensor[(16, 14, 10), float32] */;
  %432 = @func_1416(%431) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %433 = %432.2;
  %434 = cast(meta[relay.Constant][30] /* ty=Tensor[(44), float64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(1), int32] */;
  %436 = cast(%433, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %438 = subtract(%436, %437) /* ty=Tensor[(44), uint64] */;
  %439 = cast(%438, dtype="uint32") /* ty=Tensor[(44), uint32] */;
  %440 = shape_of(%433, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = cast(%433, dtype="uint32") /* ty=Tensor[(44), uint32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %443 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %444 = %424.1;
  %445 = %429.0;
  %446 = multiply(%441, %442) /* ty=Tensor[(44), uint32] */;
  (%443, %444, meta[relay.Constant][27] /* ty=Tensor[(8, 36), float32] */, meta[relay.Constant][28] /* ty=Tensor[(280, 8), float32] */, %445, meta[relay.Constant][29] /* ty=Tensor[(351), uint64] */, %446)
}

def @func_2980() -> (Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) {
  @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */
}

def @func_4261(%var_4206: Tensor[(80), int32]) -> (Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) {
  %447 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %448 = cast(%var_4206, dtype="int32") /* ty=Tensor[(80), int32] */;
  %449 = reshape(%448, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %450 = %447.1;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %452 = reshape(%451, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %453 = @func_4183(%452) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %454 = cast(meta[relay.Constant][31] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %456 = cast(meta[relay.Constant][31] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %457 = reshape(%454, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %458 = reshape(%455, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %459 = reshape(%456, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
  %460 = @func_1033(%457, %458, %459) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
  %461 = %460.2;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %463 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %464 = @func_1690(%449) /* ty=Tensor[(2, 4, 10), float64] */;
  %465 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
  %466 = %453.0;
  %467 = acos(%462) /* ty=Tensor[(6, 4, 9), float64] */;
  %468 = %463.3;
  (%450, %464, %var_4206, %465, meta[relay.Constant][31] /* ty=Tensor[(216), uint8] */, %466, %467, %468)
}

def @func_3748() -> (Tensor[(2, 3, 2), float64],) {
  %469 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
  %472 = log10(%471) /* ty=Tensor[(2, 3, 2), float64] */;
  (%472,)
}

def @func_3332() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) {
  @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */
}

def @func_3989() -> (Tensor[(2240), float32],) {
  @func_3987() /* ty=(Tensor[(2240), float32],) */
}

def @func_7252(%var_7250: Tensor[(455, 3), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(3, 16, 10), uint64], Tensor[(480), uint64], Tensor[(13, 15, 7), float64], Tensor[(455, 3), float64]) {
  @func_7249(%var_7250) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 16, 10), uint64], Tensor[(480), uint64], Tensor[(13, 15, 7), float64], Tensor[(455, 3), float64]) */
}

def @func_835(%var_833: Tensor[(4, 13, 10), uint32], %var_834: Tensor[(4, 13, 10), uint32]) -> (Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) {
  %485 = fn (%var_797: Tensor[(4, 13, 10), uint32], %var_809: Tensor[(4, 13, 10), uint32]) -> (Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) {
    %473 = cast(%var_809, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
    %474 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %477 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 13, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %478 = shape_of(%var_797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%var_797, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %481 = equal(%479, %480) /* ty=Tensor[(4, 13, 10), bool] */;
    %482 = cast(%481, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
    %483 = bitwise_xor(%475, %476) /* ty=Tensor[(4, 13, 10), int64] */;
    %484 = rsqrt(%482) /* ty=Tensor[(4, 13, 10), float32] */;
    (%483, %484)
  };
  %485(%var_833, %var_834) /* ty=(Tensor[(4, 13, 10), int64], Tensor[(4, 13, 10), float32]) */
}

def @func_1033(%var_1007: Tensor[(6, 4, 9), uint8], %var_1008: Tensor[(6, 4, 9), uint8], %var_1025: Tensor[(6, 4, 9), uint8]) -> (Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) {
  %486 = cast(%var_1008, dtype="uint8") /* ty=Tensor[(6, 4, 9), uint8] */;
  %487 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_1007, dtype="uint8") /* ty=Tensor[(6, 4, 9), uint8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %490 = cast(%var_1008, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %491 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_1007, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = cast(%var_1007, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %495 = shape_of(%var_1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_1008, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %498 = cast(%var_1025, dtype="int64") /* ty=Tensor[(6, 4, 9), int64] */;
  %499 = shape_of(%var_1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_1007, dtype="int64") /* ty=Tensor[(6, 4, 9), int64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %502 = bitwise_and(%488, %489) /* ty=Tensor[(6, 4, 9), uint8] */;
  %503 = less(%492, %493) /* ty=Tensor[(6, 4, 9), bool] */;
  %504 = minimum(%496, %497) /* ty=Tensor[(6, 4, 9), int32] */;
  %505 = subtract(%500, %501) /* ty=Tensor[(6, 4, 9), int64] */;
  (%502, %503, %504, %505)
}

def @func_2536(%var_2534: Tensor[(6, 1, 4), int8], %var_2535: Tensor[(6, 14, 4), int8]) -> (Tensor[(6, 14, 4), int8],) {
  @func_2532(%var_2534, %var_2535) /* ty=(Tensor[(6, 14, 4), int8],) */
}

def @func_6249(%var_6247: Tensor[(12, 8, 13), int16], %var_6248: Tensor[(12, 8, 13), int16]) -> (Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(3, 8, 12), bool], Tensor[(288), float32], Tensor[(12, 8, 13), float64]) {
  @func_6245(%var_6247, %var_6248) /* ty=(Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(3, 8, 12), bool], Tensor[(288), float32], Tensor[(12, 8, 13), float64]) */
}

def @func_4113() -> (Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) {
  %518 = fn () -> (Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) {
    %506 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
    %507 = cast(meta[relay.Constant][33] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
    %508 = reshape(%507, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
    %509 = @func_1611(%508) /* ty=(Tensor[(15, 13, 13), float32],) */;
    %510 = cast(meta[relay.Constant][34] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %511 = cast(meta[relay.Constant][34] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %512 = reshape(%510, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
    %513 = reshape(%511, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
    %514 = @func_2171(%512, %513) /* ty=(Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) */;
    %515 = %506.0;
    %516 = %509.0;
    %517 = %514.0;
    (%515, %516, meta[relay.Constant][33] /* ty=Tensor[(2535), float32] */, %517, meta[relay.Constant][34] /* ty=Tensor[(351), uint64] */)
  };
  %518() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */
}

def @func_7037() -> Tensor[(3, 8, 12), int64] {
  @func_7035() /* ty=Tensor[(3, 8, 12), int64] */
}

def @func_6860() -> (Tensor[(3, 117), float32], Tensor[(2535), float32]) {
  %525 = fn () -> (Tensor[(3, 117), float32], Tensor[(2535), float32]) {
    %519 = @func_6471() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(44), float64], Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), float32], Tensor[(3, 117), uint64], Tensor[(2, 3, 2), float32], Tensor[(2240), float32]) */;
    %520 = %519.4;
    %521 = cast(%520, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
    %522 = @func_5585() /* ty=(Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) */;
    %523 = asinh(%521) /* ty=Tensor[(3, 117), float32] */;
    %524 = %522.2;
    (%523, %524)
  };
  %525() /* ty=(Tensor[(3, 117), float32], Tensor[(2535), float32]) */
}

def @func_2171(%var_2133: Tensor[(3, 9, 13), uint64], %var_2134: Tensor[(3, 9, 13), uint64]) -> (Tensor[(3, 9, 13), uint64], Tensor[(3, 9, 13), bool]) {
  %526 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %527 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_2133, dtype="uint64") /* ty=Tensor[(3, 9, 13), uint64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %530 = cast(%var_2134, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %531 = shape_of(%var_2133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_2133, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = logical_and(%532, %533) /* ty=Tensor[(3, 9, 13), bool] */;
  %535 = cast(%var_2134, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = minimum(%528, %529) /* ty=Tensor[(3, 9, 13), uint64] */;
  %540 = greater(%537, %538) /* ty=Tensor[(3, 9, 13), bool] */;
  (%539, %540)
}

def @func_2433(%var_2431: Tensor[(3, 8, 12), float32], %var_2432: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
  %545 = fn (%var_2421: Tensor[(3, 8, 12), float32], %var_2422: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
    %541 = cast(%var_2422, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %542 = shape_of(%var_2421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_2421, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%543, %544) /* ty=Tensor[(3, 8, 12), float32] */
  };
  %545(%var_2431, %var_2432) /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_4791(%var_4782: Tensor[(288), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(288), float32], Tensor[(3, 8, 12), bool], Tensor[(288), bool]) {
  %546 = @func_3748() /* ty=(Tensor[(2, 3, 2), float64],) */;
  %547 = cast(meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %548 = reshape(%547, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %549 = @func_4349(%548) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2240), float32]) */;
  %550 = cast(meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %551 = reshape(%550, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %552 = @func_4183(%551) /* ty=(Tensor[(3, 8, 12), bool],) */;
  %553 = cast(%var_4782, dtype="bool") /* ty=Tensor[(288), bool] */;
  %554 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %555 = cast(meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?), bool] */;
  %557 = %546.0;
  %558 = %549.1;
  %559 = %552.0;
  %560 = not_equal(%555, %556) /* ty=Tensor[(288), bool] */;
  (%557, %558, %559, %560)
}

def @func_5440(%var_5438: Tensor[(351), uint64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) {
  @func_5437(%var_5438) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) */
}

def @func_2532(%var_2527: Tensor[(6, 1, 4), int8], %var_2528: Tensor[(6, 14, 4), int8]) -> (Tensor[(6, 14, 4), int8],) {
  %561 = cast(%var_2527, dtype="int8") /* ty=Tensor[(6, 1, 4), int8] */;
  %562 = cast(%var_2528, dtype="int8") /* ty=Tensor[(6, 14, 4), int8] */;
  %563 = minimum(%561, %562) /* ty=Tensor[(6, 14, 4), int8] */;
  (%563,)
}

def @main(%var_7448: Tensor[(3, 8, 12), bool]) -> (Tensor[(3, 8, 12), int32],) {
  %564 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
  %565 = cast(%var_7448, dtype="int32") /* ty=Tensor[(3, 8, 12), int32] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="int32") /* ty=Tensor[(3, 8, 12), int32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %569 = logical_xor(%567, %568) /* ty=Tensor[(3, 8, 12), int32] */;
  (%569,)
}

def @func_4926() -> (Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) {
  %580 = fn () -> (Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) {
    %570 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
    %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(260), uint16] */, dtype="uint16") /* ty=Tensor[(260), uint16] */;
    %572 = cast(meta[relay.Constant][36] /* ty=Tensor[(260), uint16] */, dtype="uint16") /* ty=Tensor[(260), uint16] */;
    %573 = reshape(%571, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), uint16] */;
    %574 = reshape(%572, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), uint16] */;
    %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
    %576 = reshape(%575, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
    %577 = %570.0;
    %578 = @func_2413(%573, %574) /* ty=Tensor[(13, 5, 4), bool] */;
    %579 = @func_1690(%576) /* ty=Tensor[(2, 4, 10), float64] */;
    (%577, %578, meta[relay.Constant][36] /* ty=Tensor[(260), uint16] */, %579, meta[relay.Constant][37] /* ty=Tensor[(80), int32] */)
  };
  %580() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(13, 5, 4), bool], Tensor[(260), uint16], Tensor[(2, 4, 10), float64], Tensor[(80), int32]) */
}

def @func_2978() -> (Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) {
  %581 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %582 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %583 = reshape(%582, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %584 = @func_2676(%583) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %585 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 3, 2), float32] */, dtype="float64") /* ty=Tensor[(2, 3, 2), float64] */;
  %586 = erf(%581) /* ty=Tensor[(2, 3, 2), float32] */;
  %587 = %584.0;
  %588 = log2(%585) /* ty=Tensor[(2, 3, 2), float64] */;
  (%586, %587, meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, %588)
}

def @func_5437(%var_5426: Tensor[(351), uint64]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint16], Tensor[(351), uint64]) {
  %589 = cast(%var_5426, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %590 = reshape(%589, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), uint64] */;
  %591 = @func_5346(%590) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) */;
  %592 = @func_5227() /* ty=Tensor[(2, 3, 2), float32] */;
  %593 = %591.1;
  (%592, %593, %var_5426)
}

def @func_6824() -> (Tensor[(13, 5, 4), bool], Tensor[(16, 14, 10), float64]) {
  %597 = fn () -> (Tensor[(13, 5, 4), bool], Tensor[(16, 14, 10), float64]) {
    %594 = @func_5585() /* ty=(Tensor[(16, 14, 10), float64], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(2240), float32]) */;
    %595 = @func_6421() /* ty=Tensor[(13, 5, 4), bool] */;
    %596 = %594.0;
    (%595, %596)
  };
  %597() /* ty=(Tensor[(13, 5, 4), bool], Tensor[(16, 14, 10), float64]) */
}

def @func_6587() -> (Tensor[(2, 3, 2), float32], Tensor[(2240), float32], Tensor[(3, 8, 12), bool], Tensor[(288), float32]) {
  @func_6585() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2240), float32], Tensor[(3, 8, 12), bool], Tensor[(288), float32]) */
}

def @func_7404() -> Tensor[(2, 3, 2), float32] {
  @func_7402() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_3317(%var_3315: Tensor[(80), int32], %var_3316: Tensor[(216), uint8]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) {
  @func_3313(%var_3315, %var_3316) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) */
}

def @func_1038(%var_1035: Tensor[(6, 4, 9), uint8], %var_1036: Tensor[(6, 4, 9), uint8], %var_1037: Tensor[(6, 4, 9), uint8]) -> (Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) {
  @func_1033(%var_1035, %var_1036, %var_1037) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */
}

def @func_7214(%var_7211: Tensor[(16, 9, 10), float64], %var_7212: Tensor[(16, 9, 10), float64], %var_7213: Tensor[(16, 9, 10), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(16, 9, 10), float32], Tensor[(2240), float32], Tensor[(16, 9, 10), float64], Tensor[(3, 9, 13), int32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), float32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), bool]) {
  %633 = fn (%var_7072: Tensor[(16, 9, 10), float64], %var_7073: Tensor[(16, 9, 10), float64], %var_7202: Tensor[(16, 9, 10), float32]) -> (Tensor[(2, 3, 2), float64], Tensor[(16, 9, 10), float32], Tensor[(2240), float32], Tensor[(16, 9, 10), float64], Tensor[(3, 9, 13), int32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), float32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), bool]) {
    %598 = @func_3748() /* ty=(Tensor[(2, 3, 2), float64],) */;
    %599 = cast(%var_7073, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
    %600 = log2(%599) /* ty=Tensor[(16, 9, 10), float64] */;
    %601 = cast(%600, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
    %602 = @func_6021() /* ty=(Tensor[(2240), float32],) */;
    %603 = cast(%var_7073, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
    %604 = shape_of(%var_7072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%var_7072, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %607 = maximum(%605, %606) /* ty=Tensor[(16, 9, 10), float64] */;
    %608 = cast(%var_7073, dtype="uint16") /* ty=Tensor[(16, 9, 10), uint16] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%607, dtype="uint16") /* ty=Tensor[(16, 9, 10), uint16] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %612 = bitwise_and(%610, %611) /* ty=Tensor[(16, 9, 10), uint16] */;
    %613 = cast(%612, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
    %614 = @func_5894() /* ty=(Tensor[(2, 3, 2), float32],) */;
    %615 = cast(%600, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
    %616 = rsqrt(%615) /* ty=Tensor[(16, 9, 10), float32] */;
    %617 = cast(%616, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
    %618 = cast(%600, dtype="float32") /* ty=Tensor[(16, 9, 10), float32] */;
    %619 = atanh(%618) /* ty=Tensor[(16, 9, 10), float32] */;
    %620 = cast(%var_7202, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="bool") /* ty=Tensor[(16, 9, 10), bool] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %624 = %598.0;
    %625 = sinh(%601) /* ty=Tensor[(16, 9, 10), float32] */;
    %626 = %602.0;
    %627 = acosh(%613) /* ty=Tensor[(16, 9, 10), float64] */;
    %628 = @func_3889() /* ty=Tensor[(3, 9, 13), int32] */;
    %629 = %614.0;
    %630 = asinh(%617) /* ty=Tensor[(16, 9, 10), float32] */;
    %631 = @func_3356() /* ty=Tensor[(2, 3, 2), float32] */;
    %632 = equal(%622, %623) /* ty=Tensor[(16, 9, 10), bool] */;
    (%624, %625, %626, %627, %628, %629, %630, %631, %632)
  };
  %633(%var_7211, %var_7212, %var_7213) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(16, 9, 10), float32], Tensor[(2240), float32], Tensor[(16, 9, 10), float64], Tensor[(3, 9, 13), int32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), float32], Tensor[(2, 3, 2), float32], Tensor[(16, 9, 10), bool]) */
}

def @func_4640(%var_4639: Tensor[(12, 15, 14), uint16]) -> (Tensor[(12, 15, 14), bool],) {
  %639 = fn (%var_4633: Tensor[(12, 15, 14), uint16]) -> (Tensor[(12, 15, 14), bool],) {
    %634 = cast(%var_4633, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
    %635 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(12, 15, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %636 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 15, 14), uint16] */, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %638 = greater(%636, %637) /* ty=Tensor[(12, 15, 14), bool] */;
    (%638,)
  };
  %639(%var_4639) /* ty=(Tensor[(12, 15, 14), bool],) */
}

def @func_4966() -> Tensor[(2, 3, 2), float32] {
  %640 = fn () -> Tensor[(2, 3, 2), float32] {
    @func_3356() /* ty=Tensor[(2, 3, 2), float32] */
  };
  %640() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_2490(%var_2488: Tensor[(3, 16, 10), uint64]) -> Tensor[(3, 16, 10), uint64] {
  @func_2487(%var_2488) /* ty=Tensor[(3, 16, 10), uint64] */
}

def @func_3358() -> Tensor[(2, 3, 2), float32] {
  @func_3356() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_5896() -> (Tensor[(2, 3, 2), float32],) {
  @func_5894() /* ty=(Tensor[(2, 3, 2), float32],) */
}

def @func_5348(%var_5347: Tensor[(3, 9, 13), uint64]) -> (Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) {
  %654 = fn (%var_5333: Tensor[(3, 9, 13), uint64]) -> (Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) {
    %641 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %642 = cast(meta[relay.Constant][41] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
    %643 = reshape(%642, newshape=[80]) /* ty=Tensor[(80), int32] */;
    %644 = @func_4261(%643) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(2, 3, 2), float32], Tensor[(216), uint8], Tensor[(3, 8, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(2, 3, 2), uint16]) */;
    %645 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
    %646 = %645.3;
    %647 = cast(%var_5333, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
    %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%646, dtype="int16") /* ty=Tensor[(3, 9, 13), int16] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %651 = %641.3;
    %652 = %644.7;
    %653 = bitwise_and(%649, %650) /* ty=Tensor[(3, 9, 13), int16] */;
    (%651, %652, meta[relay.Constant][41] /* ty=Tensor[(80), int32] */, %653)
  };
  %654(%var_5347) /* ty=(Tensor[(2, 3, 2), float64], Tensor[(2, 3, 2), uint16], Tensor[(80), int32], Tensor[(3, 9, 13), int16]) */
}

def @func_3711() -> (Tensor[(16, 14, 10), float32],) {
  %655 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
  %656 = %655.1;
  (%656,)
}

def @func_6700() -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint32]) {
  @func_6698() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint32]) */
}

def @func_5025() -> (Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) {
  @func_5023() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) */
}

def @func_5547(%var_5546: Tensor[(360), float32]) -> (Tensor[(288), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(216), uint8], Tensor[(1365), float64], Tensor[(6, 4, 9), int32], Tensor[(11, 15, 11), float64], Tensor[(360), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %684 = fn (%var_5513: Tensor[(360), float32]) -> (Tensor[(288), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(216), uint8], Tensor[(1365), float64], Tensor[(6, 4, 9), int32], Tensor[(11, 15, 11), float64], Tensor[(360), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
    %657 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %658 = cast(meta[relay.Constant][42] /* ty=Tensor[(2535), float32] */, dtype="float32") /* ty=Tensor[(2535), float32] */;
    %659 = reshape(%658, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float32] */;
    %660 = @func_1611(%659) /* ty=(Tensor[(15, 13, 13), float32],) */;
    %661 = cast(meta[relay.Constant][43] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %662 = cast(meta[relay.Constant][43] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %663 = reshape(%661, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
    %664 = reshape(%662, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
    %665 = @func_3798(%663, %664) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
    %666 = %665.3;
    %667 = cast(%666, dtype="uint8") /* ty=Tensor[(216), uint8] */;
    %668 = cast(%666, dtype="uint8") /* ty=Tensor[(216), uint8] */;
    %669 = cast(%666, dtype="uint8") /* ty=Tensor[(216), uint8] */;
    %670 = reshape(%667, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
    %671 = reshape(%668, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
    %672 = reshape(%669, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), uint8] */;
    %673 = @func_1033(%670, %671, %672) /* ty=(Tensor[(6, 4, 9), uint8], Tensor[(6, 4, 9), bool], Tensor[(6, 4, 9), int32], Tensor[(6, 4, 9), int64]) */;
    %674 = cast(%var_5513, dtype="float32") /* ty=Tensor[(360), float32] */;
    %675 = reshape(%674, newshape=[10, 3, 12]) /* ty=Tensor[(10, 3, 12), float32] */;
    %676 = @func_560(%675) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(44), float64], Tensor[(11, 15, 11), float64], float64, Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float64], Tensor[(11, 15, 11), float64], Tensor[(10, 3, 12), float32]) */;
    %677 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
    %678 = %657.2;
    %679 = %660.0;
    %680 = %673.2;
    %681 = %676.4;
    %682 = @func_4678() /* ty=Tensor[(3, 8, 12), bool] */;
    %683 = %677.1;
    (%678, %679, meta[relay.Constant][42] /* ty=Tensor[(2535), float32] */, %666, meta[relay.Constant][43] /* ty=Tensor[(1365), float64] */, %680, %681, %var_5513, %682, %683)
  };
  %684(%var_5546) /* ty=(Tensor[(288), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(216), uint8], Tensor[(1365), float64], Tensor[(6, 4, 9), int32], Tensor[(11, 15, 11), float64], Tensor[(360), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */
}

def @func_4630(%var_4629: Tensor[(2, 108), uint8]) -> (Tensor[(288), float32], Tensor[(2, 3, 2), float32], Tensor[(4, 20), int32], Tensor[(2, 108), uint8]) {
  %693 = fn (%var_4613: Tensor[(2, 108), uint8]) -> (Tensor[(288), float32], Tensor[(2, 3, 2), float32], Tensor[(4, 20), int32], Tensor[(2, 108), uint8]) {
    %685 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %686 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 20), int32] */, dtype="int32") /* ty=Tensor[(4, 20), int32] */;
    %687 = cast(%var_4613, dtype="uint8") /* ty=Tensor[(2, 108), uint8] */;
    %688 = reshape(%686, newshape=[80]) /* ty=Tensor[(80), int32] */;
    %689 = reshape(%687, newshape=[216]) /* ty=Tensor[(216), uint8] */;
    %690 = @func_3313(%688, %689) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) */;
    %691 = %685.2;
    %692 = %690.0;
    (%691, %692, meta[relay.Constant][44] /* ty=Tensor[(4, 20), int32] */, %var_4613)
  };
  %693(%var_4629) /* ty=(Tensor[(288), float32], Tensor[(2, 3, 2), float32], Tensor[(4, 20), int32], Tensor[(2, 108), uint8]) */
}

def @func_7288() -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  @func_7286() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */
}

def @func_3622() -> (Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) {
  @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */
}

def @func_7335() -> Tensor[(3, 8, 12), int64] {
  @func_7333() /* ty=Tensor[(3, 8, 12), int64] */
}

def @func_6698() -> (Tensor[(2, 3, 2), float32], Tensor[(2, 3, 2), uint32]) {
  %694 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %697 = reshape(%696, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), float32] */;
  %698 = @func_6499(%697) /* ty=Tensor[(2, 3, 2), int64] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %700 = log(%699) /* ty=Tensor[(2, 3, 2), float32] */;
  %701 = cast(%698, dtype="uint32") /* ty=Tensor[(2, 3, 2), uint32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="uint32") /* ty=Tensor[(2, 3, 2), uint32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %705 = bitwise_or(%703, %704) /* ty=Tensor[(2, 3, 2), uint32] */;
  (%695, %705)
}

def @func_3620() -> (Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) {
  %706 = @func_3483() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) */;
  %707 = cast(meta[relay.Constant][45] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %708 = reshape(%707, newshape=[16, 14, 10]) /* ty=Tensor[(16, 14, 10), float32] */;
  %709 = @func_1416(%708) /* ty=(Tensor[(16, 14, 10), float32], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %710 = %706.2;
  %711 = %709.0;
  (%710, %711, meta[relay.Constant][45] /* ty=Tensor[(2240), float32] */)
}

def @func_4023() -> (Tensor[(16, 14, 10), float64],) {
  @func_4021() /* ty=(Tensor[(16, 14, 10), float64],) */
}

def @func_5176(%var_5174: Tensor[(130, 4), uint32]) -> (Tensor[(3, 9, 13), int32], Tensor[(4, 13, 10), float32], Tensor[(130, 4), uint32], Tensor[(2, 3, 2), float32], Tensor[(16, 14, 10), float32], Tensor[(2, 3, 2), float32]) {
  @func_5173(%var_5174) /* ty=(Tensor[(3, 9, 13), int32], Tensor[(4, 13, 10), float32], Tensor[(130, 4), uint32], Tensor[(2, 3, 2), float32], Tensor[(16, 14, 10), float32], Tensor[(2, 3, 2), float32]) */
}

def @func_5141() -> (Tensor[(16, 14, 10), float32], Tensor[(12, 15, 14), bool], Tensor[(2520), uint16]) {
  %712 = @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */;
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(2520), uint16] */, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
  %714 = reshape(%713, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint16] */;
  %715 = @func_4638(%714) /* ty=(Tensor[(12, 15, 14), bool],) */;
  %716 = %712.0;
  %717 = %715.0;
  (%716, %717, meta[relay.Constant][46] /* ty=Tensor[(2520), uint16] */)
}

def @func_5227() -> Tensor[(2, 3, 2), float32] {
  %718 = @func_4941() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %718.0
}

def @func_6280() -> (Tensor[(2240), float32],) {
  %721 = fn () -> (Tensor[(2240), float32],) {
    %719 = @func_6103() /* ty=(Tensor[(12, 12, 8), float64], Tensor[(2240), float32]) */;
    %720 = %719.1;
    (%720,)
  };
  %721() /* ty=(Tensor[(2240), float32],) */
}

def @func_5924() -> Tensor[(2, 3, 2), float32] {
  @func_5227() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_3987() -> (Tensor[(2240), float32],) {
  %722 = @func_3620() /* ty=(Tensor[(8, 36), float32], Tensor[(16, 14, 10), float32], Tensor[(2240), float32]) */;
  %723 = %722.2;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %725 = acosh(%724) /* ty=Tensor[(2240), float32] */;
  (%725,)
}

def @func_6502(%var_6500: Tensor[(2, 3, 2), float32]) -> Tensor[(2, 3, 2), int64] {
  @func_6499(%var_6500) /* ty=Tensor[(2, 3, 2), int64] */
}

def @func_5372(%var_5371: Tensor[(120, 4), uint64]) -> (Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) {
  %731 = fn (%var_5368: Tensor[(120, 4), uint64]) -> (Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) {
    %726 = @func_4112() /* ty=(Tensor[(16, 14, 10), float32], Tensor[(15, 13, 13), float32], Tensor[(2535), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64]) */;
    %727 = cast(%var_5368, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
    %728 = reshape(%727, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint64] */;
    %729 = %726.1;
    %730 = @func_2487(%728) /* ty=Tensor[(3, 16, 10), uint64] */;
    (%729, %730, %var_5368)
  };
  %731(%var_5371) /* ty=(Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) */
}

def @func_1690(%var_1683: Tensor[(2, 4, 10), int32]) -> Tensor[(2, 4, 10), float64] {
  %732 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 4, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 4, 10), int32] */;
  %733 = shape_of(%var_1683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%var_1683, dtype="int32") /* ty=Tensor[(2, 4, 10), int32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %736 = bitwise_or(%734, %735) /* ty=Tensor[(2, 4, 10), int32] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  sqrt(%737) /* ty=Tensor[(2, 4, 10), float64] */
}

def @func_3485() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) {
  @func_3483() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(8, 36), float32], Tensor[(280, 8), float32], Tensor[(3, 9, 13), uint64], Tensor[(351), uint64], Tensor[(44), uint32]) */
}

def @func_7286() -> (Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) {
  %738 = @func_3940() /* ty=(Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32]) */;
  %739 = @func_3330() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) */;
  %740 = %738.0;
  %741 = %739.1;
  (%740, %741)
}

def @func_4550() -> Tensor[(2, 3, 2), float32] {
  %742 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %742.0
}

def @func_6153(%var_6152: Tensor[(3, 15, 14), float32]) -> Tensor[(3, 15, 14), float32] {
  %744 = fn (%var_6123: Tensor[(3, 15, 14), float32]) -> Tensor[(3, 15, 14), float32] {
    %743 = cast(%var_6123, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    exp(%743) /* ty=Tensor[(3, 15, 14), float32] */
  };
  %744(%var_6152) /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_4552() -> Tensor[(2, 3, 2), float32] {
  @func_4550() /* ty=Tensor[(2, 3, 2), float32] */
}

def @func_3798(%var_3784: Tensor[(13, 15, 7), float64], %var_3785: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) {
  %745 = cast(%var_3785, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
  %746 = shape_of(%var_3784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_3784, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %749 = cast(meta[relay.Constant][48] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %751 = reshape(%749, newshape=[80]) /* ty=Tensor[(80), int32] */;
  %752 = reshape(%750, newshape=[216]) /* ty=Tensor[(216), uint8] */;
  %753 = @func_3313(%751, %752) /* ty=(Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) */;
  %754 = mod(%747, %748) /* ty=Tensor[(13, 15, 7), float64] */;
  %755 = %753.2;
  (%754, %755, meta[relay.Constant][48] /* ty=Tensor[(80), int32] */, meta[relay.Constant][49] /* ty=Tensor[(216), uint8] */)
}

def @func_7324() -> Tensor[(7, 2, 14), float32] {
  %756 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %757 = exp(%756) /* ty=Tensor[(7, 2, 14), float32] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  sin(%758) /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_3330() -> (Tensor[(2, 3, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(288), float32], Tensor[(2, 3, 2), uint16]) {
  %759 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %760 = cast(meta[relay.Constant][51] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %761 = cast(meta[relay.Constant][51] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %762 = reshape(%760, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %763 = reshape(%761, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %764 = %759.0;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(2, 3, 2), float32] */;
  %766 = reshape(%765, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), float32] */;
  %767 = @func_3253(%766) /* ty=(Tensor[(2, 3, 2), uint16],) */;
  %768 = @func_2430(%762, %763) /* ty=Tensor[(3, 8, 12), float32] */;
  %769 = %767.0;
  (%764, %768, meta[relay.Constant][51] /* ty=Tensor[(288), float32] */, %769)
}

def @func_7060() -> Tensor[(13, 5, 4), bool] {
  %770 = @func_6874() /* ty=(Tensor[(13, 5, 4), bool],) */;
  %770.0
}

def @func_3097(%var_3096: Tensor[(44), float64]) -> (Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
  %777 = fn (%var_3088: Tensor[(44), float64]) -> (Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) {
    %771 = @func_2978() /* ty=(Tensor[(2, 3, 2), float32], Tensor[(12, 15, 14), uint8], Tensor[(288), float32], Tensor[(2, 3, 2), float64]) */;
    %772 = cast(%var_3088, dtype="float64") /* ty=Tensor[(44), float64] */;
    %773 = reshape(%772, newshape=[11, 2, 2]) /* ty=Tensor[(11, 2, 2), float64] */;
    %774 = @func_179(%773) /* ty=(Tensor[(11, 2, 2), float64], Tensor[(11, 2, 2), float64]) */;
    %775 = %771.1;
    %776 = %774.0;
    (%775, %776, %var_3088)
  };
  %777(%var_3096) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */
}

def @func_7249(%var_7240: Tensor[(455, 3), float64]) -> (Tensor[(2, 3, 2), float32], Tensor[(3, 16, 10), uint64], Tensor[(480), uint64], Tensor[(13, 15, 7), float64], Tensor[(455, 3), float64]) {
  %778 = @func_5894() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %779 = cast(meta[relay.Constant][52] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %780 = reshape(%779, newshape=[120, 4]) /* ty=Tensor[(120, 4), uint64] */;
  %781 = @func_5370(%780) /* ty=(Tensor[(15, 13, 13), float32], Tensor[(3, 16, 10), uint64], Tensor[(120, 4), uint64]) */;
  %782 = cast(%var_7240, dtype="float64") /* ty=Tensor[(455, 3), float64] */;
  %783 = cast(%var_7240, dtype="float64") /* ty=Tensor[(455, 3), float64] */;
  %784 = reshape(%782, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %785 = reshape(%783, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float64] */;
  %786 = @func_3798(%784, %785) /* ty=(Tensor[(13, 15, 7), float64], Tensor[(80), int32], Tensor[(80), int32], Tensor[(216), uint8]) */;
  %787 = %778.0;
  %788 = %781.1;
  %789 = %786.0;
  (%787, %788, meta[relay.Constant][52] /* ty=Tensor[(480), uint64] */, %789, %var_7240)
}

def @func_5023() -> (Tensor[(2, 3, 2), float32], Tensor[(44), float64], Tensor[(22, 2), float64]) {
  %790 = cast(meta[relay.Constant][53] /* ty=Tensor[(22, 2), float64] */, dtype="float64") /* ty=Tensor[(22, 2), float64] */;
  %791 = reshape(%790, newshape=[44]) /* ty=Tensor[(44), float64] */;
  %792 = @func_3095(%791) /* ty=(Tensor[(12, 15, 14), uint8], Tensor[(11, 2, 2), float64], Tensor[(44), float64]) */;
  %793 = @func_4550() /* ty=Tensor[(2, 3, 2), float32] */;
  %794 = %792.2;
  (%793, %794, meta[relay.Constant][53] /* ty=Tensor[(22, 2), float64] */)
}

def @func_3313(%var_3295: Tensor[(80), int32], %var_3309: Tensor[(216), uint8]) -> (Tensor[(2, 3, 2), float32], Tensor[(2, 4, 10), float64], Tensor[(80), int32], Tensor[(12, 7, 2), float32], Tensor[(1, 234), float64], Tensor[(216), uint8]) {
  %795 = @func_2995() /* ty=(Tensor[(2, 3, 2), float32],) */;
  %796 = cast(%var_3295, dtype="int32") /* ty=Tensor[(80), int32] */;
  %797 = reshape(%796, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), int32] */;
  %798 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 234), float64] */, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %799 = cast(%var_3309, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %800 = reshape(%798, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float64] */;
  %801 = reshape(%799, newshape=[216]) /* ty=Tensor[(216), uint8] */;
  %802 = @func_1998(%800, %801) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(12, 7, 2), float32], Tensor[(168), float32], Tensor[(6, 4, 9), int64], Tensor[(216), uint8]) */;
  %803 = %795.0;
  %804 = @func_1690(%797) /* ty=Tensor[(2, 4, 10), float64] */;
  %805 = %802.1;
  (%803, %804, %var_3295, %805, meta[relay.Constant][54] /* ty=Tensor[(1, 234), float64] */, %var_3309)
}

def @func_3713() -> (Tensor[(16, 14, 10), float32],) {
  @func_3711() /* ty=(Tensor[(16, 14, 10), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen167/build/output.py", line 2008, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:54:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

