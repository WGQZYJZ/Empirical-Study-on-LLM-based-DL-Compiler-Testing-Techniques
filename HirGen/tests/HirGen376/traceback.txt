==========mod==========
#[version = "0.0.5"]
def @func_5119(%var_5018: Tensor[(15, 11, 12), float64]) -> (Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %0 = @func_3548() /* ty=Tensor[(15, 11, 12), float64] */;
  %1 = cast(%var_5018, dtype="int8") /* ty=Tensor[(15, 11, 12), int8] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="int8") /* ty=Tensor[(15, 11, 12), int8] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %5 = @func_3594() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %6 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %9 = atanh(%8) /* ty=Tensor[(15, 11, 12), float64] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = right_shift(%3, %4) /* ty=Tensor[(15, 11, 12), int8] */;
  %15 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %16 = %5.0;
  %17 = logical_and(%12, %13) /* ty=Tensor[(15, 11, 12), bool] */;
  (%14, %15, %16, %17)
}

def @func_4548() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64]) {
  %18 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %19 = @func_3262() /* ty=Tensor[(15, 11, 12), float64] */;
  %20 = %18.2;
  (%19, %20)
}

def @func_3352() -> (Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) {
  %21 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %22 = @func_3237() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %23 = %21.1;
  %24 = %22.0;
  %25 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  (%23, %24, %25)
}

def @func_4936(%var_4906: Tensor[(8, 60), float64]) -> (Tensor[(8, 60), int64], Tensor[(8, 60), float64]) {
  %26 = @func_3938() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) */;
  %27 = %26.2;
  %28 = cast(%var_4906, dtype="uint8") /* ty=Tensor[(8, 60), uint8] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
  %30 = cast(%27, dtype="uint8") /* ty=Tensor[(8, 60), uint8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %32 = logical_xor(%30, %31) /* ty=Tensor[(8, 60), uint8] */;
  %33 = cast(%27, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(2), int32] */;
  %35 = cast(%32, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 60), uint8] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %38 = shape_of(%32, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(%32, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %41 = left_shift(%35, %36) /* ty=Tensor[(8, 60), int64] */;
  %42 = add(%39, %40) /* ty=Tensor[(8, 60), float64] */;
  (%41, %42)
}

def @func_6760() -> (Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) {
  %43 = @func_4073() /* ty=(Tensor[(11, 9, 7), bool],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %46 = cast(%44, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %47 = @func_2778() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) */;
  %48 = atan(%45) /* ty=Tensor[(11, 9, 7), float64] */;
  %49 = erf(%46) /* ty=Tensor[(11, 9, 7), float64] */;
  %50 = %47.2;
  (%48, %49, %50)
}

def @func_2531() -> (Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %52 = reshape(%51, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %53 = @func_1674(%52) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %54 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %55 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %56 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %57 = %53.0;
  %58 = %54.0;
  %59 = %55.0;
  (%56, %57, meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, %58, %59)
}

def @func_7910(%var_7901: Tensor[(13, 7, 12), float64], %var_7907: Tensor[(81), float32]) -> (Tensor[(13, 7, 12), float64], Tensor[(9, 8, 9), float32], Tensor[(81), float32], Tensor[(648), float32]) {
  %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %61 = shape_of(%var_7901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_7901, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %64 = cast(%var_7907, dtype="float32") /* ty=Tensor[(81), float32] */;
  %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %66 = reshape(%64, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
  %67 = reshape(%65, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %68 = divide(%62, %63) /* ty=Tensor[(13, 7, 12), float64] */;
  %69 = @func_4825(%66, %67) /* ty=Tensor[(9, 8, 9), float32] */;
  (%68, %69, %var_7907, meta[relay.Constant][3] /* ty=Tensor[(648), float32] */)
}

def @func_509(%var_506: Tensor[(10, 4, 9), float64]) -> Tensor[(10, 4, 9), float64] {
  %70 = cast(%var_506, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
  cos(%70) /* ty=Tensor[(10, 4, 9), float64] */
}

def @func_2854(%var_2820: Tensor[(15, 16, 2), float64]) -> (Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) {
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(15, 16, 2), bool] */;
  %72 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(15, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(15, 16, 2), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
  %76 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(15, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %79 = floor_mod(%77, %78) /* ty=Tensor[(15, 16, 2), float64] */;
  %80 = cast(%var_2820, dtype="uint64") /* ty=Tensor[(15, 16, 2), uint64] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="uint64") /* ty=Tensor[(15, 16, 2), uint64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %85 = reshape(%84, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %86 = @func_1674(%85) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %87 = %86.1;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
  %89 = logical_and(%73, %74) /* ty=Tensor[(15, 16, 2), bool] */;
  %90 = left_shift(%82, %83) /* ty=Tensor[(15, 16, 2), uint64] */;
  %91 = sinh(%88) /* ty=Tensor[(10, 4, 9), float64] */;
  (%89, %90, meta[relay.Constant][6] /* ty=Tensor[(360), float64] */, %91)
}

def @func_4073() -> (Tensor[(11, 9, 7), bool],) {
  %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %93 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = greater_equal(%94, %95) /* ty=Tensor[(11, 9, 7), bool] */;
  (%96,)
}

def @func_1890() -> Tensor[(15, 11, 12), float64] {
  %97 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %98 = %97.1;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %100 = acos(%99) /* ty=Tensor[(15, 11, 12), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  log10(%101) /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3301() -> (Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  %102 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %103 = asinh(%102) /* ty=Tensor[(9, 4, 5), float32] */;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %106 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %107 = cast(%103, dtype="float64") /* ty=Tensor[(9, 4, 5), float64] */;
  %108 = sigmoid(%104) /* ty=Tensor[(9, 4, 5), float32] */;
  %109 = atanh(%105) /* ty=Tensor[(9, 4, 5), float32] */;
  %110 = %106.1;
  %111 = cos(%107) /* ty=Tensor[(9, 4, 5), float64] */;
  (%108, %109, %110, %111)
}

def @func_748(%var_732: Tensor[(8, 8, 3), uint16], %var_733: Tensor[(8, 8, 3), uint16]) -> Tensor[(8, 8, 3), uint16] {
  %112 = cast(%var_733, dtype="uint16") /* ty=Tensor[(8, 8, 3), uint16] */;
  %113 = shape_of(%var_732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_732, dtype="uint16") /* ty=Tensor[(8, 8, 3), uint16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%114, %115) /* ty=Tensor[(8, 8, 3), uint16] */
}

def @func_4642() -> (Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %116 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %117 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %118 = %116.2;
  %119 = %117.0;
  %120 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  (%118, %119, %120)
}

def @func_6850() -> Tensor[(15, 11, 12), float64] {
  %121 = @func_5879() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) */;
  %122 = %121.3;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  erf(%123) /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3579() -> (Tensor[(15, 11, 12), float64],) {
  %124 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  (%124,)
}

def @func_8088(%var_8073: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), uint16] {
  %125 = @func_4739() /* ty=(Tensor[(9, 4, 5), float32],) */;
  %126 = %125.0;
  %127 = cast(%var_8073, dtype="uint16") /* ty=Tensor[(9, 4, 5), uint16] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint16") /* ty=Tensor[(9, 4, 5), uint16] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%129, %130) /* ty=Tensor[(9, 4, 5), uint16] */
}

def @func_7742() -> (Tensor[(15, 11, 12), float64],) {
  %131 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
  (%131,)
}

def @func_3262() -> Tensor[(15, 11, 12), float64] {
  %132 = @func_3237() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %132.1
}

def @func_6109(%var_6091: Tensor[(5, 4, 3), float64]) -> (Tensor[(5, 4, 3), float32],) {
  %133 = cast(%var_6091, dtype="float64") /* ty=Tensor[(5, 4, 3), float64] */;
  %134 = sqrt(%133) /* ty=Tensor[(5, 4, 3), float64] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(5, 4, 3), float32] */;
  %136 = atan(%135) /* ty=Tensor[(5, 4, 3), float32] */;
  (%136,)
}

def @func_4392() -> (Tensor[(15, 11, 12), float64],) {
  %137 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  (%137,)
}

def @func_5879() -> (Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) {
  %138 = cast(meta[relay.Constant][10] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %139 = reshape(%138, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %140 = @func_2439(%139) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %141 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %144 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %145 = %144.0;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %147 = reshape(%146, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
  %148 = @func_5119(%147) /* ty=(Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %149 = %148.3;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %151 = asinh(%150) /* ty=Tensor[(15, 11, 12), float64] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %153 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%145, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %156 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  %157 = %140.1;
  %158 = sin(%143) /* ty=Tensor[(15, 11, 12), float32] */;
  %159 = floor_divide(%154, %155) /* ty=Tensor[(15, 11, 12), float64] */;
  (%156, %157, meta[relay.Constant][10] /* ty=Tensor[(42), float64] */, %158, %159)
}

def @func_6654(%var_6650: Tensor[(360), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
  %160 = cast(%var_6650, dtype="float64") /* ty=Tensor[(360), float64] */;
  %161 = reshape(%160, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %162 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %163 = @func_509(%161) /* ty=Tensor[(10, 4, 9), float64] */;
  (%162, %163, %var_6650)
}

def @func_6266(%var_6258: Tensor[(5, 9, 14), float32]) -> Tensor[(5, 9, 14), float32] {
  %164 = cast(%var_6258, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
  exp(%164) /* ty=Tensor[(5, 9, 14), float32] */
}

def @func_8351() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64], Tensor[(1920), uint16], Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64]) {
  %165 = @func_7008() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) */;
  %166 = @func_7873() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) */;
  %167 = @func_7582() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %170 = reshape(%168, newshape=[8, 15, 16]) /* ty=Tensor[(8, 15, 16), uint16] */;
  %171 = reshape(%169, newshape=[8, 15, 16]) /* ty=Tensor[(8, 15, 16), uint16] */;
  %172 = @func_6922(%170, %171) /* ty=(Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) */;
  %173 = @func_4191() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %174 = @func_2778() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) */;
  %175 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %176 = %165.0;
  %177 = %166.0;
  %178 = %167.0;
  %179 = %172.2;
  %180 = %173.0;
  %181 = %174.0;
  (%175, %176, %177, %178, %179, meta[relay.Constant][11] /* ty=Tensor[(1920), uint16] */, %180, %181)
}

def @func_793(%var_768: Tensor[(6, 7), float64], %var_779: Tensor[(192), uint16]) -> (Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) {
  %182 = cast(%var_768, dtype="float64") /* ty=Tensor[(6, 7), float64] */;
  %183 = cast(%var_779, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %184 = cast(%var_779, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %185 = reshape(%183, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint16] */;
  %186 = reshape(%184, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint16] */;
  %187 = asin(%182) /* ty=Tensor[(6, 7), float64] */;
  %188 = @func_748(%185, %186) /* ty=Tensor[(8, 8, 3), uint16] */;
  (%187, %188, %var_779)
}

def @func_4739() -> (Tensor[(9, 4, 5), float32],) {
  %189 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
  %190 = %189.1;
  (%190,)
}

def @func_7131() -> (Tensor[(15, 11, 12), bool],) {
  %191 = @func_3720() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %192 = %191.0;
  (%192,)
}

def @func_4605() -> (Tensor[(15, 11, 12), float64],) {
  %193 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
  (%193,)
}

def @func_5791() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %194 = @func_3900() /* ty=(Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %195 = %194.2;
  %196 = @func_5146() /* ty=Tensor[(15, 11, 12), float64] */;
  (%195, %196)
}

def @func_6548() -> (Tensor[(11, 6, 4), bool],) {
  %197 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
  %198 = %197.1;
  (%198,)
}

def @func_2000() -> Tensor[(15, 11, 12), float64] {
  @func_1890() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_6148() -> (Tensor[(15, 11, 12), float64],) {
  %199 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %200 = %199.0;
  (%200,)
}

def @func_7050() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), float64], Tensor[(15, 11, 12), float64], Tensor[(50, 4), float64]) {
  %201 = @func_3720() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %202 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %203 = @func_3868() /* ty=(Tensor[(11, 6, 4), float64],) */;
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(50, 4), float64] */, dtype="float64") /* ty=Tensor[(50, 4), float64] */;
  %205 = reshape(%204, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), float64] */;
  %206 = @func_6636(%205) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) */;
  %207 = %201.0;
  %208 = %202.0;
  %209 = %203.0;
  %210 = %206.1;
  (%207, %208, %209, %210, meta[relay.Constant][12] /* ty=Tensor[(50, 4), float64] */)
}

def @func_2300() -> Tensor[(3, 14, 8), float32] {
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
  exp(%211) /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_2211() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %212 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %213 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  (%212, %213)
}

def @func_7008() -> (Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) {
  %214 = @func_3900() /* ty=(Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %216 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %217 = %214.1;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %219 = reshape(%215, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float64] */;
  %220 = reshape(%216, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float64] */;
  %221 = reshape(%218, newshape=[1980]) /* ty=Tensor[(1980), float32] */;
  %222 = @func_4036(%219, %220, %221) /* ty=(Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) */;
  %223 = %222.1;
  (%217, %223, meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */)
}

def @func_3817() -> (Tensor[(5, 10, 3), uint8],) {
  %224 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %225 = %224.0;
  (%225,)
}

def @func_4825(%var_4810: Tensor[(9, 1, 9), float32], %var_4811: Tensor[(9, 8, 9), float32]) -> Tensor[(9, 8, 9), float32] {
  %226 = cast(%var_4810, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
  %227 = cast(%var_4811, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  power(%226, %227) /* ty=Tensor[(9, 8, 9), float32] */
}

def @func_5895() -> Tensor[(15, 11, 12), float64] {
  %228 = @func_5791() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %228.1
}

def @func_4311(%var_4297: Tensor[(360), float64]) -> (Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) {
  %229 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %230 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %234 = tan(%233) /* ty=Tensor[(1, 11, 7), float64] */;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %236 = cast(meta[relay.Constant][17] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %237 = reshape(%236, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %238 = @func_1960(%237) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %240 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = greater_equal(%241, %242) /* ty=Tensor[(?, 11, 7), bool] */;
  %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(?, 11, 7), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %248 = minimum(%246, %247) /* ty=Tensor[(?, 11, 7), float32] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(?, 11, 7), float64] */;
  %250 = asin(%249) /* ty=Tensor[(?, 11, 7), float64] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(?, 11, 7), float64] */;
  %252 = @func_4073() /* ty=(Tensor[(11, 9, 7), bool],) */;
  %253 = cast(%var_4297, dtype="float64") /* ty=Tensor[(360), float64] */;
  %254 = reshape(%253, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %255 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %256 = divide(%231, %232) /* ty=Tensor[(?, 11, 7), float64] */;
  %257 = sigmoid(%235) /* ty=Tensor[(1, 11, 7), float32] */;
  %258 = %238.0;
  %259 = exp(%251) /* ty=Tensor[(?, 11, 7), float64] */;
  %260 = %252.0;
  %261 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %262 = @func_509(%254) /* ty=Tensor[(10, 4, 9), float64] */;
  %263 = acosh(%255) /* ty=Tensor[(1, 11, 7), float64] */;
  %264 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  (%256, %257, %258, meta[relay.Constant][17] /* ty=Tensor[(42), float64] */, %259, %260, %261, %262, %var_4297, %263, %264)
}

def @func_2956() -> (Tensor[(5, 10, 3), uint8],) {
  %265 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %266 = %265.1;
  (%266,)
}

def @func_2122(%var_2113: Tensor[(490), float32]) -> (Tensor[(15, 11, 12), bool], Tensor[(490), bool], Tensor[(490), int32], Tensor[(490), int16]) {
  %267 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %269 = reshape(%268, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %270 = @func_114(%269) /* ty=Tensor[(7, 14, 5), int8] */;
  %271 = cast(%270, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %272 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), bool] */;
  %275 = cast(%270, dtype="int32") /* ty=Tensor[(7, 14, 5), int32] */;
  %276 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %277 = cast(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(490), int32] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?), int32] */;
  %279 = cast(%270, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %280 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %281 = cast(meta[relay.Constant][18] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?), bool] */;
  %283 = logical_and(%281, %282) /* ty=Tensor[(490), bool] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(490), float32] */;
  %285 = asinh(%284) /* ty=Tensor[(490), float32] */;
  %286 = cast(%var_2113, dtype="int16") /* ty=Tensor[(490), int16] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(%285, dtype="int16") /* ty=Tensor[(490), int16] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), int16] */;
  %290 = %267.0;
  %291 = greater(%273, %274) /* ty=Tensor[(490), bool] */;
  %292 = subtract(%277, %278) /* ty=Tensor[(490), int32] */;
  %293 = bitwise_and(%288, %289) /* ty=Tensor[(490), int16] */;
  (%290, %291, %292, %293)
}

def @func_7376() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %294 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
  %295 = @func_6850() /* ty=Tensor[(15, 11, 12), float64] */;
  (%294, %295)
}

def @func_4868() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %296 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %297 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %298 = @func_4642() /* ty=(Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %299 = %296.1;
  %300 = %297.2;
  %301 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
  %302 = %298.2;
  (%299, %300, %301, %302)
}

def @func_2571() -> (Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) {
  %303 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 88), bool] */, dtype="bool") /* ty=Tensor[(3, 88), bool] */;
  %304 = reshape(%303, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %305 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %306 = @func_2353(%304) /* ty=Tensor[(11, 6, 4), bool] */;
  (%305, %306, meta[relay.Constant][19] /* ty=Tensor[(3, 88), bool] */)
}

def @func_6922(%var_6892: Tensor[(8, 15, 16), uint16], %var_6902: Tensor[(8, 15, 16), uint16]) -> (Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) {
  %307 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
  %308 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_6892, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = cast(%var_6902, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %312 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %315 = floor_divide(%313, %314) /* ty=Tensor[(8, 15, 16), float64] */;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %317 = asinh(%316) /* ty=Tensor[(8, 15, 16), float64] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %319 = less(%309, %310) /* ty=Tensor[(8, 15, 16), bool] */;
  %320 = @func_6483() /* ty=Tensor[(15, 11, 12), float64] */;
  %321 = acos(%318) /* ty=Tensor[(8, 15, 16), float64] */;
  (%319, %320, %321)
}

def @func_6636(%var_6626: Tensor[(8, 5, 5), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) {
  %322 = @func_4893() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %323 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %324 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %325 = @func_3352() /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) */;
  %326 = %325.2;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %328 = cast(%var_6626, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  %329 = %322.0;
  %330 = %323.0;
  %331 = %324.0;
  %332 = maximum(%327, %328) /* ty=Tensor[(8, 5, 5), float64] */;
  (%329, %330, %331, %332)
}

def @func_6483() -> Tensor[(15, 11, 12), float64] {
  %333 = @func_5558() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %333.0
}

def @func_3938() -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) {
  %334 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %335 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %336 = reshape(%335, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %337 = @func_3793(%336) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) */;
  %338 = %334.0;
  %339 = %337.1;
  (%338, %339, meta[relay.Constant][21] /* ty=Tensor[(8, 60), float64] */)
}

def @func_3210() -> (Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) {
  %340 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %342 = reshape(%341, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %343 = %340.0;
  %344 = @func_114(%342) /* ty=Tensor[(7, 14, 5), int8] */;
  (%343, %344, meta[relay.Constant][22] /* ty=Tensor[(490), float64] */)
}

def @func_7685() -> Tensor[(15, 11, 12), float64] {
  %345 = @func_6083() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %345.0
}

def @func_3900() -> (Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %346 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %347 = @func_3646() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %348 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %349 = %346.2;
  %350 = %347.0;
  %351 = %348.0;
  (%349, %350, %351)
}

def @func_7606() -> (Tensor[(9, 4, 5), float32],) {
  %352 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
  %353 = %352.1;
  (%353,)
}

def @func_3032() -> (Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) {
  %354 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
  %355 = cast(meta[relay.Constant][23] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %356 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 96), uint16] */, dtype="uint16") /* ty=Tensor[(2, 96), uint16] */;
  %357 = reshape(%355, newshape=[6, 7]) /* ty=Tensor[(6, 7), float64] */;
  %358 = reshape(%356, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %359 = @func_793(%357, %358) /* ty=(Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) */;
  %360 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
  %361 = %354.2;
  %362 = %359.0;
  (%360, %361, %362, meta[relay.Constant][23] /* ty=Tensor[(42), float64] */, meta[relay.Constant][24] /* ty=Tensor[(2, 96), uint16] */)
}

def @func_6027() -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) {
  %363 = @func_5215() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) */;
  %364 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %365 = %363.0;
  (%364, %365)
}

def @func_5943(%var_5931: Tensor[(1, 6, 2), float64]) -> (Tensor[(1, 6, 2), float64],) {
  %366 = cast(6.19485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %367 = cast(%var_5931, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
  %368 = floor_mod(%366, %367) /* ty=Tensor[(1, 6, 2), float64] */;
  (%368,)
}

def @func_114(%var_84: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), int8] {
  %369 = cast(%var_84, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  %370 = cosh(%369) /* ty=Tensor[(7, 14, 5), float64] */;
  %371 = cast(%370, dtype="int8") /* ty=Tensor[(7, 14, 5), int8] */;
  %372 = shape_of(%var_84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_84, dtype="int8") /* ty=Tensor[(7, 14, 5), int8] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%373, %374) /* ty=Tensor[(7, 14, 5), int8] */
}

def @func_6524() -> (Tensor[(5, 10, 3), bool],) {
  %375 = @func_3817() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %376 = %375.0;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %378 = acosh(%377) /* ty=Tensor[(5, 10, 3), float64] */;
  %379 = cast(%376, dtype="bool") /* ty=Tensor[(5, 10, 3), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(5, 10, 3), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = less_equal(%381, %382) /* ty=Tensor[(5, 10, 3), bool] */;
  (%383,)
}

def @func_6675() -> (Tensor[(15, 11, 12), bool],) {
  %384 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %385 = %384.0;
  (%385,)
}

def @func_3525() -> Tensor[(15, 11, 12), bool] {
  %386 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %386.1
}

def @func_6955(%var_6933: Tensor[(9, 4, 5), float32]) -> (Tensor[(9, 4, 5), bool], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  %387 = @func_4739() /* ty=(Tensor[(9, 4, 5), float32],) */;
  %388 = %387.0;
  %389 = cast(%var_6933, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_6027() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) */;
  %394 = cast(%var_6933, dtype="float64") /* ty=Tensor[(9, 4, 5), float64] */;
  %395 = logical_and(%391, %392) /* ty=Tensor[(9, 4, 5), bool] */;
  %396 = %393.0;
  %397 = sqrt(%394) /* ty=Tensor[(9, 4, 5), float64] */;
  (%395, %396, %397)
}

def @func_2778() -> (Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) {
  %398 = cast(meta[relay.Constant][25] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %399 = reshape(%398, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %400 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %401 = @func_2353(%399) /* ty=Tensor[(11, 6, 4), bool] */;
  (%400, %401, meta[relay.Constant][25] /* ty=Tensor[(264), bool] */)
}

def @func_6693() -> Tensor[(15, 11, 12), float64] {
  @func_5895() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3594() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %402 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %403 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %404 = %402.0;
  %405 = %403.3;
  (%404, %405)
}

def @func_5146() -> Tensor[(15, 11, 12), float64] {
  @func_2000() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_7962() -> Tensor[(15, 11, 12), float64] {
  @func_6850() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3676() -> (Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) {
  %406 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %407 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %408 = %406.0;
  %409 = %407.1;
  (%408, %409)
}

def @func_3720() -> (Tensor[(15, 11, 12), bool],) {
  %410 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %411 = %410.0;
  (%411,)
}

def @main(%var_8645: Tensor[(5, 5, 6), float32], %var_8646: Tensor[(5, 5, 6), float32]) -> Tensor[(5, 5, 6), float32] {
  %412 = cast(%var_8646, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %413 = shape_of(%var_8645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_8645, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%414, %415) /* ty=Tensor[(5, 5, 6), float32] */
}

def @func_3646() -> (Tensor[(15, 11, 12), float64],) {
  %416 = @func_3594() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %417 = %416.1;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %419 = sinh(%418) /* ty=Tensor[(15, 11, 12), float64] */;
  (%419,)
}

def @func_7319(%var_7300: Tensor[(2, 3, 3), uint64]) -> (Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) {
  %420 = cast(%var_7300, dtype="uint64") /* ty=Tensor[(2, 3, 3), uint64] */;
  %421 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(2, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(2, 3, 3), uint64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %424 = add(%422, %423) /* ty=Tensor[(2, 3, 3), uint64] */;
  %425 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  (%424, %425)
}

def @func_7873() -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) {
  %426 = @func_6148() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %428 = cast(meta[relay.Constant][28] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %429 = reshape(%427, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), int8] */;
  %430 = reshape(%428, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %431 = @func_4729(%429, %430) /* ty=(Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) */;
  %432 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %433 = %426.0;
  %434 = %431.1;
  %435 = %432.0;
  (%433, %434, meta[relay.Constant][27] /* ty=Tensor[(8), int8] */, meta[relay.Constant][28] /* ty=Tensor[(480), float64] */, %435)
}

def @func_1960(%var_1930: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) {
  %436 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %437 = reshape(%436, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %438 = @func_509(%437) /* ty=Tensor[(10, 4, 9), float64] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
  %440 = reshape(%439, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %441 = @func_1674(%440) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %442 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %444 = reshape(%443, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %445 = cast(%var_1930, dtype="float64") /* ty=Tensor[(42), float64] */;
  %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %447 = reshape(%445, newshape=[6, 7]) /* ty=Tensor[(6, 7), float64] */;
  %448 = reshape(%446, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %449 = @func_793(%447, %448) /* ty=(Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) */;
  %450 = %449.2;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(192), float32] */;
  %452 = %441.2;
  %453 = @func_1852(%444) /* ty=Tensor[(15, 11, 12), bool] */;
  %454 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %455 = log2(%451) /* ty=Tensor[(192), float32] */;
  (%442, %438, meta[relay.Constant][29] /* ty=Tensor[(360), float64] */, %var_1930, meta[relay.Constant][30] /* ty=Tensor[(192), uint16] */, %452, %453, %454, %455)
}

def @func_3943() -> Tensor[(15, 11, 12), bool] {
  %456 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %456.0
}

def @func_6072() -> Tensor[(15, 11, 12), float64] {
  @func_5146() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_7582() -> (Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) {
  %457 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %458 = reshape(%457, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %459 = @func_4311(%458) /* ty=(Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) */;
  %460 = @func_7376() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %461 = %459.8;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(360), float64] */;
  %463 = reshape(%462, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %464 = @func_4311(%463) /* ty=(Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) */;
  %465 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %466 = cast(%461, dtype="float64") /* ty=Tensor[(360), float64] */;
  %467 = reshape(%466, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %468 = @func_3188(%467) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) */;
  %469 = @func_6760() /* ty=(Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) */;
  %470 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %471 = %460.1;
  %472 = %464.1;
  %473 = %465.0;
  %474 = %468.1;
  %475 = %469.2;
  (%470, %461, meta[relay.Constant][31] /* ty=Tensor[(360), float64] */, %471, %472, %473, %474, %475)
}

def @func_3461(%var_3451: Tensor[(15, 11, 12), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) {
  %476 = cast(meta[relay.Constant][32] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %477 = reshape(%476, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %478 = @func_1960(%477) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %479 = cast(meta[relay.Constant][33] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %480 = reshape(%479, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %481 = %478.2;
  %482 = cast(%481, dtype="float64") /* ty=Tensor[(360), float64] */;
  %483 = reshape(%482, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %484 = @func_3262() /* ty=Tensor[(15, 11, 12), float64] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %486 = reshape(%485, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %487 = @func_1852(%486) /* ty=Tensor[(15, 11, 12), bool] */;
  %488 = @func_3032() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
  %491 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%487, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %494 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %495 = cast(%var_3451, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
  %496 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%484, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %499 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %500 = @func_2353(%480) /* ty=Tensor[(11, 6, 4), bool] */;
  %501 = @func_509(%483) /* ty=Tensor[(10, 4, 9), float64] */;
  %502 = minimum(%492, %493) /* ty=Tensor[(15, 11, 12), uint64] */;
  %503 = %494.1;
  %504 = bitwise_xor(%497, %498) /* ty=Tensor[(15, 11, 12), uint64] */;
  (%499, %481, meta[relay.Constant][32] /* ty=Tensor[(42), float64] */, %500, meta[relay.Constant][33] /* ty=Tensor[(264), bool] */, %501, %502, %503, %504)
}

def @func_4184() -> (Tensor[(15, 11, 12), float64],) {
  %505 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %506 = %505.0;
  (%506,)
}

def @func_4385(%var_4366: Tensor[(2, 11, 1), int64], %var_4367: Tensor[(2, 11, 16), int64]) -> (Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) {
  %507 = cast(%var_4366, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
  %508 = cast(%var_4367, dtype="int64") /* ty=Tensor[(2, 11, 16), int64] */;
  %509 = cast(%var_4366, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
  %510 = right_shift(%507, %508) /* ty=Tensor[(2, 11, 16), int64] */;
  %511 = tan(%509) /* ty=Tensor[(2, 11, 1), float32] */;
  %512 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  (%510, %511, %512)
}

def @func_2353(%var_2338: Tensor[(11, 6, 4), bool]) -> Tensor[(11, 6, 4), bool] {
  %513 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %514 = cast(%var_2338, dtype="bool") /* ty=Tensor[(11, 6, 4), bool] */;
  logical_and(%513, %514) /* ty=Tensor[(11, 6, 4), bool] */
}

def @func_4893() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %515 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %516 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %517 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %518 = %515.0;
  %519 = %516.1;
  %520 = %517.1;
  (%518, %519, %520)
}

def @func_3105(%var_3101: Tensor[(7, 14, 11), bool]) -> Tensor[(7, 14, 11), bool] {
  %521 = cast(%var_3101, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %522 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%523, %524) /* ty=Tensor[(7, 14, 11), bool] */
}

def @func_5655() -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), bool], Tensor[(264), bool], Tensor[(11, 6, 4), float32]) {
  %525 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %526 = reshape(%525, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %527 = @func_2353(%526) /* ty=Tensor[(11, 6, 4), bool] */;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
  %529 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %530 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  %531 = sin(%528) /* ty=Tensor[(11, 6, 4), float32] */;
  (%529, %530, meta[relay.Constant][36] /* ty=Tensor[(264), bool] */, %531)
}

def @func_3548() -> Tensor[(15, 11, 12), float64] {
  %532 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  tan(%533) /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3237() -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %534 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
  %535 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %536 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %537 = %534.0;
  %538 = %535.0;
  (%536, %537, %538)
}

def @func_3696() -> Tensor[(15, 11, 12), float64] {
  %539 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %539.0
}

def @func_7651() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %540 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %541 = @func_5895() /* ty=Tensor[(15, 11, 12), float64] */;
  %542 = %540.0;
  (%541, %542)
}

def @func_2615() -> (Tensor[(15, 11, 12), float64],) {
  %543 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %544 = %543.0;
  (%544,)
}

def @func_4036(%var_3952: Tensor[(8, 15, 14), float64], %var_3953: Tensor[(8, 15, 14), float64], %var_3965: Tensor[(1980), float32]) -> (Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) {
  %545 = cast(%var_3953, dtype="float64") /* ty=Tensor[(8, 15, 14), float64] */;
  %546 = shape_of(%var_3952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_3952, dtype="float64") /* ty=Tensor[(8, 15, 14), float64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %549 = cast(%var_3952, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
  %550 = @func_3032() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) */;
  %551 = cast(%var_3965, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %552 = reshape(%551, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %553 = @func_1852(%552) /* ty=Tensor[(15, 11, 12), bool] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %555 = floor_divide(%547, %548) /* ty=Tensor[(8, 15, 14), float64] */;
  %556 = cosh(%549) /* ty=Tensor[(8, 15, 14), float32] */;
  %557 = %550.3;
  %558 = atan(%554) /* ty=Tensor[(15, 11, 12), float32] */;
  (%555, %var_3965, %556, %557, %558)
}

def @func_1852(%var_1844: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), bool] {
  %559 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %560 = %559.1;
  %561 = cast(%var_1844, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%563, %564) /* ty=Tensor[(15, 11, 12), bool] */
}

def @func_1674(%var_1668: Tensor[(360), float64]) -> (Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
  %565 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(5, 10, 3), uint8] */;
  %566 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(5, 10, 3), uint8] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %569 = cast(%var_1668, dtype="float64") /* ty=Tensor[(360), float64] */;
  %570 = reshape(%569, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %571 = bitwise_and(%567, %568) /* ty=Tensor[(5, 10, 3), uint8] */;
  %572 = @func_509(%570) /* ty=Tensor[(10, 4, 9), float64] */;
  (%571, %572, %var_1668)
}

def @func_7068() -> Tensor[(9, 4, 5), float32] {
  %573 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
  %573.0
}

def @func_6397(%var_6376: Tensor[(42, 1), float64], %var_6382: Tensor[(11, 2), int64], %var_6383: Tensor[(8, 44), int64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 60), int64], Tensor[(42, 1), float64], Tensor[(2, 11, 16), int64], Tensor[(11, 2), int64], Tensor[(8, 44), int64]) {
  %574 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %575 = cast(%var_6376, dtype="float64") /* ty=Tensor[(42, 1), float64] */;
  %576 = reshape(%575, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %577 = @func_5293(%576) /* ty=(Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) */;
  %578 = cast(%var_6382, dtype="int64") /* ty=Tensor[(11, 2), int64] */;
  %579 = cast(%var_6383, dtype="int64") /* ty=Tensor[(8, 44), int64] */;
  %580 = reshape(%578, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), int64] */;
  %581 = reshape(%579, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), int64] */;
  %582 = @func_4385(%580, %581) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) */;
  %583 = %574.0;
  %584 = %577.1;
  %585 = %582.0;
  (%583, %584, %var_6376, %585, %var_6382, %var_6383)
}

def @func_3793(%var_3786: Tensor[(120, 4), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) {
  %586 = cast(%var_3786, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %587 = reshape(%586, newshape=[15, 16, 2]) /* ty=Tensor[(15, 16, 2), float64] */;
  %588 = @func_2854(%587) /* ty=(Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) */;
  %589 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %590 = %588.3;
  (%589, %590, %var_3786)
}

def @func_2673() -> Tensor[(15, 11, 12), bool] {
  %591 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %591.0
}

def @func_2708() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %592 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %593 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %594 = %592.1;
  %595 = %593.1;
  (%594, %595)
}

def @func_4424() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %596 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %597 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %598 = %596.0;
  %599 = %597.0;
  (%598, %599)
}

def @func_3188(%var_3151: Tensor[(360), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) {
  %600 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %601 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %602 = cast(%var_3151, dtype="float64") /* ty=Tensor[(360), float64] */;
  %603 = reshape(%602, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %604 = @func_1674(%603) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %605 = %604.2;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(360), float64] */;
  %607 = reshape(%606, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %608 = @func_1674(%607) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %609 = %600.0;
  %610 = %601.0;
  %611 = %608.2;
  (%609, %610, %605, %var_3151, %611)
}

def @func_4344(%var_4336: Tensor[(6, 9, 4), float64]) -> (Tensor[(6, 9, 4), float64],) {
  %612 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %613 = shape_of(%var_4336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_4336, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %616 = mod(%614, %615) /* ty=Tensor[(6, 9, 4), float64] */;
  (%616,)
}

def @func_6240() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %617 = @func_4191() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %618 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %619 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %620 = %617.0;
  %621 = %618.0;
  %622 = %619.3;
  (%620, %621, %622)
}

def @func_2047() -> Tensor[(8, 1, 5), float64] {
  %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  cos(%623) /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_8023() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %624 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %625 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %626 = @func_7376() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %627 = %624.0;
  %628 = %625.0;
  %629 = %626.1;
  (%627, %628, %629)
}

def @func_2454() -> (Tensor[(15, 11, 12), float64],) {
  %630 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %631 = %630.1;
  (%631,)
}

def @func_4191() -> (Tensor[(15, 11, 12), bool],) {
  %632 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %633 = %632.0;
  (%633,)
}

def @func_5558() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %634 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %635 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %636 = %634.0;
  %637 = %635.0;
  (%636, %637)
}

def @func_2696() -> Tensor[(15, 11, 12), float64] {
  %638 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %638.0
}

def @func_5195() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %639 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %640 = %639.1;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %642 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %643 = log(%641) /* ty=Tensor[(15, 11, 12), float64] */;
  %644 = @func_3548() /* ty=Tensor[(15, 11, 12), float64] */;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_5215() -> (Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) {
  %646 = @func_3352() /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) */;
  %647 = %646.2;
  %648 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  (%647, %648)
}

def @func_2439(%var_2400: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %649 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %650 = cast(%var_2400, dtype="float64") /* ty=Tensor[(42), float64] */;
  %651 = reshape(%650, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %652 = @func_1960(%651) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %653 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %655 = reshape(%654, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %656 = cast(%653, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %657 = cosh(%656) /* ty=Tensor[(15, 11, 12), float64] */;
  %658 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = %649.0;
  %663 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %664 = %652.8;
  %665 = @func_1852(%655) /* ty=Tensor[(15, 11, 12), bool] */;
  %666 = logical_or(%660, %661) /* ty=Tensor[(15, 11, 12), bool] */;
  (%662, %663, %664, %var_2400, %665, %666)
}

def @func_5293(%var_5289: Tensor[(42), float64]) -> (Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) {
  %667 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 2, 10), uint32] */;
  %668 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 2, 10), uint32] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %671 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %672 = reshape(%671, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %673 = @func_4936(%672) /* ty=(Tensor[(8, 60), int64], Tensor[(8, 60), float64]) */;
  %674 = cast(meta[relay.Constant][45] /* ty=Tensor[(1980), float64] */, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %675 = reshape(%674, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
  %676 = @func_3461(%675) /* ty=(Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) */;
  %677 = cast(%var_5289, dtype="float64") /* ty=Tensor[(42), float64] */;
  %678 = reshape(%677, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %679 = @func_2439(%678) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %680 = subtract(%669, %670) /* ty=Tensor[(11, 2, 10), uint32] */;
  %681 = %673.0;
  %682 = %676.6;
  %683 = %679.2;
  (%680, %681, meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, %682, meta[relay.Constant][45] /* ty=Tensor[(1980), float64] */, %683, %var_5289)
}

def @func_1808() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) {
  %684 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %685 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(15, 11, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 11, 12), int8] */, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %689 = log2(%688) /* ty=Tensor[(15, 11, 12), float32] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %691 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 11, 12), int8] */, dtype="uint16") /* ty=Tensor[(15, 11, 12), uint16] */;
  %692 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%689, dtype="uint16") /* ty=Tensor[(15, 11, 12), uint16] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %695 = equal(%686, %687) /* ty=Tensor[(15, 11, 12), bool] */;
  %696 = acosh(%690) /* ty=Tensor[(15, 11, 12), float32] */;
  %697 = bitwise_and(%693, %694) /* ty=Tensor[(15, 11, 12), uint16] */;
  (%695, %696, %697)
}

def @func_6083() -> (Tensor[(15, 11, 12), float64],) {
  %698 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  (%698,)
}

def @func_2648() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %699 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %700 = %699.1;
  %701 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %704 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%700, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %708 = greater_equal(%705, %706) /* ty=Tensor[(15, 11, 12), bool] */;
  (%707, %708)
}

def @func_4729(%var_4697: Tensor[(2, 2, 2), int8], %var_4711: Tensor[(480), float64]) -> (Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) {
  %709 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 2, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 2, 2), int8] */;
  %710 = shape_of(%var_4697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_4697, dtype="int8") /* ty=Tensor[(2, 2, 2), int8] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %713 = cast(%var_4711, dtype="float64") /* ty=Tensor[(480), float64] */;
  %714 = reshape(%713, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %715 = @func_3793(%714) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) */;
  %716 = subtract(%711, %712) /* ty=Tensor[(2, 2, 2), int8] */;
  %717 = %715.1;
  (%716, %717, %var_4711)
}

def @func_8264() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), int8], Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64]) {
  %718 = @func_7742() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %719 = %718.0;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %721 = reshape(%720, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
  %722 = @func_5119(%721) /* ty=(Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %723 = @func_4642() /* ty=(Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %724 = %722.0;
  %725 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %726 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %727 = %723.1;
  (%719, %724, %725, %726, %727)
}

def @func_5518(%var_5376: Tensor[(14, 8, 11), uint16], %var_5377: Tensor[(14, 8, 11), uint16], %var_5459: Tensor[(7, 6), float64]) -> (Tensor[(8, 1, 5), float64], Tensor[(8, 60), uint32], Tensor[(15, 11, 12), float64], Tensor[(14, 8, 11), bool], Tensor[(42), float64], Tensor[(7, 6), float64], Tensor[(3, 14, 8), float32], Tensor[(3, 14, 8), float64], Tensor[(360), float64], Tensor[(14, 8, 11), float64], Tensor[(15, 11, 12), float64]) {
  %728 = @func_3938() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) */;
  %729 = %728.2;
  %730 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 60), float64] */, dtype="uint32") /* ty=Tensor[(8, 60), uint32] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
  %732 = cast(%729, dtype="uint32") /* ty=Tensor[(8, 60), uint32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %734 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %735 = cast(%var_5377, dtype="uint16") /* ty=Tensor[(14, 8, 11), uint16] */;
  %736 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%var_5376, dtype="uint16") /* ty=Tensor[(14, 8, 11), uint16] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %739 = add(%737, %738) /* ty=Tensor[(14, 8, 11), uint16] */;
  %740 = cast(%739, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %741 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_5376, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = greater(%742, %743) /* ty=Tensor[(14, 8, 11), bool] */;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
  %746 = log2(%745) /* ty=Tensor[(14, 8, 11), float64] */;
  %747 = cast(%739, dtype="int16") /* ty=Tensor[(14, 8, 11), int16] */;
  %748 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_5376, dtype="int16") /* ty=Tensor[(14, 8, 11), int16] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %751 = multiply(%749, %750) /* ty=Tensor[(14, 8, 11), int16] */;
  %752 = cast(%751, dtype="uint32") /* ty=Tensor[(14, 8, 11), uint32] */;
  %753 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%746, dtype="uint32") /* ty=Tensor[(14, 8, 11), uint32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %756 = left_shift(%754, %755) /* ty=Tensor[(14, 8, 11), uint32] */;
  %757 = cast(%var_5377, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %761 = power(%759, %760) /* ty=Tensor[(14, 8, 11), float32] */;
  %762 = cast(%751, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = cast(%var_5459, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %767 = reshape(%766, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %768 = @func_1960(%767) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %769 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %771 = cast(%var_5459, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %772 = reshape(%771, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %773 = @func_1960(%772) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %774 = cast(%756, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
  %775 = @func_4893() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %776 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %777 = multiply(%732, %733) /* ty=Tensor[(8, 60), uint32] */;
  %778 = %734.1;
  %779 = logical_or(%764, %765) /* ty=Tensor[(14, 8, 11), bool] */;
  %780 = %768.3;
  %781 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %782 = log2(%770) /* ty=Tensor[(3, 14, 8), float64] */;
  %783 = %773.2;
  %784 = cos(%774) /* ty=Tensor[(14, 8, 11), float64] */;
  %785 = %775.0;
  (%776, %777, %778, %779, %780, %var_5459, %781, %782, %783, %784, %785)
}

def @func_7733() -> (Tensor[(8, 1, 5), float64], Tensor[(3, 14, 8), int16]) {
  %786 = @func_5215() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) */;
  %787 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %788 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 14, 8), float32] */, dtype="int16") /* ty=Tensor[(3, 14, 8), int16] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="int16") /* ty=Tensor[(3, 14, 8), int16] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %792 = %786.0;
  %793 = bitwise_and(%790, %791) /* ty=Tensor[(3, 14, 8), int16] */;
  (%792, %793)
}

def @func_8538(%var_8518: Tensor[(18), uint64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(2, 3, 3), uint64], Tensor[(18), uint64], Tensor[(3, 14, 8), bool]) {
  %794 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %795 = cast(%var_8518, dtype="uint64") /* ty=Tensor[(18), uint64] */;
  %796 = reshape(%795, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), uint64] */;
  %797 = @func_7319(%796) /* ty=(Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) */;
  %798 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %799 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 8), bool] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="bool") /* ty=Tensor[(3, 14, 8), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %803 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
  %804 = %794.0;
  %805 = @func_6072() /* ty=Tensor[(15, 11, 12), float64] */;
  %806 = %797.0;
  %807 = logical_or(%801, %802) /* ty=Tensor[(3, 14, 8), bool] */;
  (%803, %804, %805, %806, %var_8518, %807)
}

def @func_3868() -> (Tensor[(11, 6, 4), float64],) {
  %808 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
  %809 = %808.1;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
  %811 = acosh(%810) /* ty=Tensor[(11, 6, 4), float64] */;
  (%811,)
}

def @func_3036() -> (Tensor[(15, 11, 12), float64],) {
  %812 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  (%812,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5879() -> (Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %1 = reshape(%0, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %2 = @func_2439(%1) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %3 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %4 = %3.0;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %6 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %9 = reshape(%8, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
  %10 = @func_5119(%9) /* ty=(Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %11 = %10.3;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %13 = asinh(%12) /* ty=Tensor[(15, 11, 12), float64] */;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %15 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%7, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %18 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  %19 = %2.1;
  %20 = sin(%5) /* ty=Tensor[(15, 11, 12), float32] */;
  %21 = floor_divide(%16, %17) /* ty=Tensor[(15, 11, 12), float64] */;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(42), float64] */, %20, %21)
}

def @func_3720() -> (Tensor[(15, 11, 12), bool],) {
  %22 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %23 = %22.0;
  (%23,)
}

def @func_3107(%var_3106: Tensor[(7, 14, 11), bool]) -> Tensor[(7, 14, 11), bool] {
  %28 = fn (%var_3101: Tensor[(7, 14, 11), bool]) -> Tensor[(7, 14, 11), bool] {
    %24 = cast(%var_3101, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %25 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%26, %27) /* ty=Tensor[(7, 14, 11), bool] */
  };
  %28(%var_3106) /* ty=Tensor[(7, 14, 11), bool] */
}

def @func_4870() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_3698() -> Tensor[(15, 11, 12), float64] {
  @func_3696() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_6072() -> Tensor[(15, 11, 12), float64] {
  @func_5146() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_2615() -> (Tensor[(15, 11, 12), float64],) {
  %29 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %30 = %29.0;
  (%30,)
}

def @func_6636(%var_6626: Tensor[(8, 5, 5), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) {
  %31 = @func_4893() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %32 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %33 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %34 = @func_3352() /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) */;
  %35 = %34.2;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %37 = cast(%var_6626, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  %38 = %31.0;
  %39 = %32.0;
  %40 = %33.0;
  %41 = maximum(%36, %37) /* ty=Tensor[(8, 5, 5), float64] */;
  (%38, %39, %40, %41)
}

def @func_3463(%var_3462: Tensor[(15, 11, 12), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) {
  %71 = fn (%var_3451: Tensor[(15, 11, 12), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) {
    %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %43 = reshape(%42, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %44 = @func_1960(%43) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
    %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %46 = reshape(%45, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
    %47 = %44.2;
    %48 = cast(%47, dtype="float64") /* ty=Tensor[(360), float64] */;
    %49 = reshape(%48, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
    %50 = @func_3262() /* ty=Tensor[(15, 11, 12), float64] */;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
    %52 = reshape(%51, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
    %53 = @func_1852(%52) /* ty=Tensor[(15, 11, 12), bool] */;
    %54 = @func_3032() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) */;
    %55 = %54.0;
    %56 = cast(%55, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
    %57 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%53, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %60 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
    %61 = cast(%var_3451, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
    %62 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%50, dtype="uint64") /* ty=Tensor[(15, 11, 12), uint64] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %65 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %66 = @func_2353(%46) /* ty=Tensor[(11, 6, 4), bool] */;
    %67 = @func_509(%49) /* ty=Tensor[(10, 4, 9), float64] */;
    %68 = minimum(%58, %59) /* ty=Tensor[(15, 11, 12), uint64] */;
    %69 = %60.1;
    %70 = bitwise_xor(%63, %64) /* ty=Tensor[(15, 11, 12), uint64] */;
    (%65, %47, meta[relay.Constant][2] /* ty=Tensor[(42), float64] */, %66, meta[relay.Constant][3] /* ty=Tensor[(264), bool] */, %67, %68, %69, %70)
  };
  %71(%var_3462) /* ty=(Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) */
}

def @func_6150() -> (Tensor[(15, 11, 12), float64],) {
  @func_6148() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_1892() -> Tensor[(15, 11, 12), float64] {
  @func_1890() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_7582() -> (Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) {
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %73 = reshape(%72, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %74 = @func_4311(%73) /* ty=(Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) */;
  %75 = @func_7376() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %76 = %74.8;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(360), float64] */;
  %78 = reshape(%77, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %79 = @func_4311(%78) /* ty=(Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) */;
  %80 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %81 = cast(%76, dtype="float64") /* ty=Tensor[(360), float64] */;
  %82 = reshape(%81, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %83 = @func_3188(%82) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) */;
  %84 = @func_6760() /* ty=(Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) */;
  %85 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %86 = %75.1;
  %87 = %79.1;
  %88 = %80.0;
  %89 = %83.1;
  %90 = %84.2;
  (%85, %76, meta[relay.Constant][4] /* ty=Tensor[(360), float64] */, %86, %87, %88, %89, %90)
}

def @func_3938() -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) {
  %91 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %93 = reshape(%92, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %94 = @func_3793(%93) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) */;
  %95 = %91.0;
  %96 = %94.1;
  (%95, %96, meta[relay.Constant][5] /* ty=Tensor[(8, 60), float64] */)
}

def @func_1854(%var_1853: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), bool] {
  %103 = fn (%var_1844: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), bool] {
    %97 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
    %98 = %97.1;
    %99 = cast(%var_1844, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
    %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%98, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%101, %102) /* ty=Tensor[(15, 11, 12), bool] */
  };
  %103(%var_1853) /* ty=Tensor[(15, 11, 12), bool] */
}

def @func_3262() -> Tensor[(15, 11, 12), float64] {
  %104 = @func_3237() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %104.1
}

def @func_7910(%var_7901: Tensor[(13, 7, 12), float64], %var_7907: Tensor[(81), float32]) -> (Tensor[(13, 7, 12), float64], Tensor[(9, 8, 9), float32], Tensor[(81), float32], Tensor[(648), float32]) {
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %106 = shape_of(%var_7901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_7901, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = cast(%var_7907, dtype="float32") /* ty=Tensor[(81), float32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %111 = reshape(%109, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float32] */;
  %112 = reshape(%110, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %113 = divide(%107, %108) /* ty=Tensor[(13, 7, 12), float64] */;
  %114 = @func_4825(%111, %112) /* ty=Tensor[(9, 8, 9), float32] */;
  (%113, %114, %var_7907, meta[relay.Constant][7] /* ty=Tensor[(648), float32] */)
}

def @func_5195() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %115 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %116 = %115.1;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %118 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %119 = log(%117) /* ty=Tensor[(15, 11, 12), float64] */;
  %120 = @func_3548() /* ty=Tensor[(15, 11, 12), float64] */;
  %121 = %118.0;
  (%119, %120, %121)
}

def @func_6148() -> (Tensor[(15, 11, 12), float64],) {
  %122 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %123 = %122.0;
  (%123,)
}

def @func_2211() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %124 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %125 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  (%124, %125)
}

def @func_4606() -> (Tensor[(15, 11, 12), float64],) {
  %127 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %126 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
    (%126,)
  };
  %127() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_4388(%var_4386: Tensor[(2, 11, 1), int64], %var_4387: Tensor[(2, 11, 16), int64]) -> (Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) {
  %134 = fn (%var_4366: Tensor[(2, 11, 1), int64], %var_4367: Tensor[(2, 11, 16), int64]) -> (Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) {
    %128 = cast(%var_4366, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
    %129 = cast(%var_4367, dtype="int64") /* ty=Tensor[(2, 11, 16), int64] */;
    %130 = cast(%var_4366, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
    %131 = right_shift(%128, %129) /* ty=Tensor[(2, 11, 16), int64] */;
    %132 = tan(%130) /* ty=Tensor[(2, 11, 1), float32] */;
    %133 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    (%131, %132, %133)
  };
  %134(%var_4386, %var_4387) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) */
}

def @func_4733(%var_4731: Tensor[(2, 2, 2), int8], %var_4732: Tensor[(480), float64]) -> (Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) {
  @func_4729(%var_4731, %var_4732) /* ty=(Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) */
}

def @func_512(%var_510: Tensor[(10, 4, 9), float64]) -> Tensor[(10, 4, 9), float64] {
  @func_509(%var_510) /* ty=Tensor[(10, 4, 9), float64] */
}

def @func_6677() -> (Tensor[(15, 11, 12), bool],) {
  @func_6675() /* ty=(Tensor[(15, 11, 12), bool],) */
}

def @func_2958() -> (Tensor[(5, 10, 3), uint8],) {
  @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */
}

def @func_3818() -> (Tensor[(5, 10, 3), uint8],) {
  %137 = fn () -> (Tensor[(5, 10, 3), uint8],) {
    %135 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(5, 10, 3), uint8],) */
}

def @func_6850() -> Tensor[(15, 11, 12), float64] {
  %138 = @func_5879() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) */;
  %139 = %138.3;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  erf(%140) /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_2455() -> (Tensor[(15, 11, 12), float64],) {
  %143 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %141 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %142 = %141.1;
    (%142,)
  };
  %143() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_6695() -> Tensor[(15, 11, 12), float64] {
  @func_6693() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_6548() -> (Tensor[(11, 6, 4), bool],) {
  %144 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
  %145 = %144.1;
  (%145,)
}

def @func_7010() -> (Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) {
  @func_7008() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) */
}

def @func_7131() -> (Tensor[(15, 11, 12), bool],) {
  %146 = @func_3720() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %147 = %146.0;
  (%147,)
}

def @func_8352() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64], Tensor[(1920), uint16], Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64]) {
  %165 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64], Tensor[(1920), uint16], Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64]) {
    %148 = @func_7008() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) */;
    %149 = @func_7873() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) */;
    %150 = @func_7582() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) */;
    %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
    %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
    %153 = reshape(%151, newshape=[8, 15, 16]) /* ty=Tensor[(8, 15, 16), uint16] */;
    %154 = reshape(%152, newshape=[8, 15, 16]) /* ty=Tensor[(8, 15, 16), uint16] */;
    %155 = @func_6922(%153, %154) /* ty=(Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) */;
    %156 = @func_4191() /* ty=(Tensor[(15, 11, 12), bool],) */;
    %157 = @func_2778() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) */;
    %158 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
    %159 = %148.0;
    %160 = %149.0;
    %161 = %150.0;
    %162 = %155.2;
    %163 = %156.0;
    %164 = %157.0;
    (%158, %159, %160, %161, %162, meta[relay.Constant][8] /* ty=Tensor[(1920), uint16] */, %163, %164)
  };
  %165() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64], Tensor[(1920), uint16], Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64]) */
}

def @func_5122(%var_5120: Tensor[(15, 11, 12), float64]) -> (Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  @func_5119(%var_5120) /* ty=(Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_4347(%var_4345: Tensor[(6, 9, 4), float64]) -> (Tensor[(6, 9, 4), float64],) {
  @func_4344(%var_4345) /* ty=(Tensor[(6, 9, 4), float64],) */
}

def @func_3943() -> Tensor[(15, 11, 12), bool] {
  %166 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %166.0
}

def @func_5559() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %171 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %167 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %168 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %169 = %167.0;
    %170 = %168.0;
    (%169, %170)
  };
  %171() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_2439(%var_2400: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %172 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %173 = cast(%var_2400, dtype="float64") /* ty=Tensor[(42), float64] */;
  %174 = reshape(%173, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %175 = @func_1960(%174) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %176 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %178 = reshape(%177, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %179 = cast(%176, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %180 = cosh(%179) /* ty=Tensor[(15, 11, 12), float64] */;
  %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = %172.0;
  %186 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %187 = %175.8;
  %188 = @func_1852(%178) /* ty=Tensor[(15, 11, 12), bool] */;
  %189 = logical_or(%183, %184) /* ty=Tensor[(15, 11, 12), bool] */;
  (%185, %186, %187, %var_2400, %188, %189)
}

def @func_4895() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  @func_4893() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */
}

def @func_6402(%var_6399: Tensor[(42, 1), float64], %var_6400: Tensor[(11, 2), int64], %var_6401: Tensor[(8, 44), int64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 60), int64], Tensor[(42, 1), float64], Tensor[(2, 11, 16), int64], Tensor[(11, 2), int64], Tensor[(8, 44), int64]) {
  @func_6397(%var_6399, %var_6400, %var_6401) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 60), int64], Tensor[(42, 1), float64], Tensor[(2, 11, 16), int64], Tensor[(11, 2), int64], Tensor[(8, 44), int64]) */
}

def @func_752(%var_750: Tensor[(8, 8, 3), uint16], %var_751: Tensor[(8, 8, 3), uint16]) -> Tensor[(8, 8, 3), uint16] {
  @func_748(%var_750, %var_751) /* ty=Tensor[(8, 8, 3), uint16] */
}

def @func_748(%var_732: Tensor[(8, 8, 3), uint16], %var_733: Tensor[(8, 8, 3), uint16]) -> Tensor[(8, 8, 3), uint16] {
  %190 = cast(%var_733, dtype="uint16") /* ty=Tensor[(8, 8, 3), uint16] */;
  %191 = shape_of(%var_732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_732, dtype="uint16") /* ty=Tensor[(8, 8, 3), uint16] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%192, %193) /* ty=Tensor[(8, 8, 3), uint16] */
}

def @func_4939(%var_4937: Tensor[(8, 60), float64]) -> (Tensor[(8, 60), int64], Tensor[(8, 60), float64]) {
  @func_4936(%var_4937) /* ty=(Tensor[(8, 60), int64], Tensor[(8, 60), float64]) */
}

def @func_5197() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  @func_5195() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_2442(%var_2440: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  @func_2439(%var_2440) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */
}

def @func_2571() -> (Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) {
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 88), bool] */, dtype="bool") /* ty=Tensor[(3, 88), bool] */;
  %195 = reshape(%194, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %196 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %197 = @func_2353(%195) /* ty=Tensor[(11, 6, 4), bool] */;
  (%196, %197, meta[relay.Constant][10] /* ty=Tensor[(3, 88), bool] */)
}

def @func_2002() -> Tensor[(15, 11, 12), float64] {
  @func_2000() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_2049() -> Tensor[(8, 1, 5), float64] {
  @func_2047() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_3945() -> Tensor[(15, 11, 12), bool] {
  @func_3943() /* ty=Tensor[(15, 11, 12), bool] */
}

def @func_6029() -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) {
  @func_6027() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) */
}

def @func_4828(%var_4826: Tensor[(9, 1, 9), float32], %var_4827: Tensor[(9, 8, 9), float32]) -> Tensor[(9, 8, 9), float32] {
  %200 = fn (%var_4810: Tensor[(9, 1, 9), float32], %var_4811: Tensor[(9, 8, 9), float32]) -> Tensor[(9, 8, 9), float32] {
    %198 = cast(%var_4810, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
    %199 = cast(%var_4811, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
    power(%198, %199) /* ty=Tensor[(9, 8, 9), float32] */
  };
  %200(%var_4826, %var_4827) /* ty=Tensor[(9, 8, 9), float32] */
}

def @func_2649() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %211 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
    %201 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
    %202 = %201.1;
    %203 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %204 = %203.0;
    %205 = cast(%204, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
    %206 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%202, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %209 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
    %210 = greater_equal(%207, %208) /* ty=Tensor[(15, 11, 12), bool] */;
    (%209, %210)
  };
  %211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_8541(%var_8539: Tensor[(18), uint64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(2, 3, 3), uint64], Tensor[(18), uint64], Tensor[(3, 14, 8), bool]) {
  @func_8538(%var_8539) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(2, 3, 3), uint64], Tensor[(18), uint64], Tensor[(3, 14, 8), bool]) */
}

def @func_2710() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */
}

def @func_4426() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_6925(%var_6923: Tensor[(8, 15, 16), uint16], %var_6924: Tensor[(8, 15, 16), uint16]) -> (Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) {
  %227 = fn (%var_6892: Tensor[(8, 15, 16), uint16], %var_6902: Tensor[(8, 15, 16), uint16]) -> (Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) {
    %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
    %213 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %214 = cast(%var_6892, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %216 = cast(%var_6902, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
    %217 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 16), uint16] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %220 = floor_divide(%218, %219) /* ty=Tensor[(8, 15, 16), float64] */;
    %221 = cast(%220, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
    %222 = asinh(%221) /* ty=Tensor[(8, 15, 16), float64] */;
    %223 = cast(%222, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
    %224 = less(%214, %215) /* ty=Tensor[(8, 15, 16), bool] */;
    %225 = @func_6483() /* ty=Tensor[(15, 11, 12), float64] */;
    %226 = acos(%223) /* ty=Tensor[(8, 15, 16), float64] */;
    (%224, %225, %226)
  };
  %227(%var_6923, %var_6924) /* ty=(Tensor[(8, 15, 16), bool], Tensor[(15, 11, 12), float64], Tensor[(8, 15, 16), float64]) */
}

def @func_116(%var_115: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), int8] {
  %234 = fn (%var_84: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), int8] {
    %228 = cast(%var_84, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
    %229 = cosh(%228) /* ty=Tensor[(7, 14, 5), float64] */;
    %230 = cast(%229, dtype="int8") /* ty=Tensor[(7, 14, 5), int8] */;
    %231 = shape_of(%var_84, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%var_84, dtype="int8") /* ty=Tensor[(7, 14, 5), int8] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    left_shift(%232, %233) /* ty=Tensor[(7, 14, 5), int8] */
  };
  %234(%var_115) /* ty=Tensor[(7, 14, 5), int8] */
}

def @func_1960(%var_1930: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) {
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %236 = reshape(%235, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %237 = @func_509(%236) /* ty=Tensor[(10, 4, 9), float64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
  %239 = reshape(%238, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %240 = @func_1674(%239) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %241 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %243 = reshape(%242, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %244 = cast(%var_1930, dtype="float64") /* ty=Tensor[(42), float64] */;
  %245 = cast(meta[relay.Constant][13] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %246 = reshape(%244, newshape=[6, 7]) /* ty=Tensor[(6, 7), float64] */;
  %247 = reshape(%245, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %248 = @func_793(%246, %247) /* ty=(Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) */;
  %249 = %248.2;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(192), float32] */;
  %251 = %240.2;
  %252 = @func_1852(%243) /* ty=Tensor[(15, 11, 12), bool] */;
  %253 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %254 = log2(%250) /* ty=Tensor[(192), float32] */;
  (%241, %237, meta[relay.Constant][12] /* ty=Tensor[(360), float64] */, %var_1930, meta[relay.Constant][13] /* ty=Tensor[(192), uint16] */, %251, %252, %253, %254)
}

def @func_4344(%var_4336: Tensor[(6, 9, 4), float64]) -> (Tensor[(6, 9, 4), float64],) {
  %255 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %256 = shape_of(%var_4336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_4336, dtype="float64") /* ty=Tensor[(6, 9, 4), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %259 = mod(%257, %258) /* ty=Tensor[(6, 9, 4), float64] */;
  (%259,)
}

def @func_6639(%var_6637: Tensor[(8, 5, 5), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) {
  @func_6636(%var_6637) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) */
}

def @func_3264() -> Tensor[(15, 11, 12), float64] {
  @func_3262() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3303() -> (Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */
}

def @func_7685() -> Tensor[(15, 11, 12), float64] {
  %260 = @func_6083() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %260.0
}

def @func_6241() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %267 = fn () -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %261 = @func_4191() /* ty=(Tensor[(15, 11, 12), bool],) */;
    %262 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
    %263 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %264 = %261.0;
    %265 = %262.0;
    %266 = %263.3;
    (%264, %265, %266)
  };
  %267() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_4644() -> (Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  @func_4642() /* ty=(Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_7653() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  @func_7651() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_2780() -> (Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) {
  @func_2778() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) */
}

def @func_3525() -> Tensor[(15, 11, 12), bool] {
  %268 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %268.1
}

def @func_4184() -> (Tensor[(15, 11, 12), float64],) {
  %269 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %270 = %269.0;
  (%270,)
}

def @func_3549() -> Tensor[(15, 11, 12), float64] {
  %273 = fn () -> Tensor[(15, 11, 12), float64] {
    %271 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
    %272 = cast(%271, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
    tan(%272) /* ty=Tensor[(15, 11, 12), float64] */
  };
  %273() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3191(%var_3189: Tensor[(360), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) {
  @func_3188(%var_3189) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) */
}

def @func_3900() -> (Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %274 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %275 = @func_3646() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %276 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %277 = %274.2;
  %278 = %275.0;
  %279 = %276.0;
  (%277, %278, %279)
}

def @func_7963() -> Tensor[(15, 11, 12), float64] {
  %280 = fn () -> Tensor[(15, 11, 12), float64] {
    @func_6850() /* ty=Tensor[(15, 11, 12), float64] */
  };
  %280() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_7068() -> Tensor[(9, 4, 5), float32] {
  %281 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
  %281.0
}

def @func_4642() -> (Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %282 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %283 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %284 = %282.2;
  %285 = %283.0;
  %286 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
  (%284, %285, %286)
}

def @func_4550() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64]) {
  @func_4548() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64]) */
}

def @func_5656() -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), bool], Tensor[(264), bool], Tensor[(11, 6, 4), float32]) {
  %294 = fn () -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), bool], Tensor[(264), bool], Tensor[(11, 6, 4), float32]) {
    %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %288 = reshape(%287, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
    %289 = @func_2353(%288) /* ty=Tensor[(11, 6, 4), bool] */;
    %290 = cast(%289, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
    %291 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %292 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
    %293 = sin(%290) /* ty=Tensor[(11, 6, 4), float32] */;
    (%291, %292, meta[relay.Constant][15] /* ty=Tensor[(264), bool] */, %293)
  };
  %294() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), bool], Tensor[(264), bool], Tensor[(11, 6, 4), float32]) */
}

def @func_6074() -> Tensor[(15, 11, 12), float64] {
  @func_6072() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_2047() -> Tensor[(8, 1, 5), float64] {
  %295 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  cos(%295) /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_2213() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_3722() -> (Tensor[(15, 11, 12), bool],) {
  @func_3720() /* ty=(Tensor[(15, 11, 12), bool],) */
}

def @func_3696() -> Tensor[(15, 11, 12), float64] {
  %296 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %296.0
}

def @func_4729(%var_4697: Tensor[(2, 2, 2), int8], %var_4711: Tensor[(480), float64]) -> (Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) {
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 2, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 2, 2), int8] */;
  %298 = shape_of(%var_4697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_4697, dtype="int8") /* ty=Tensor[(2, 2, 2), int8] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %301 = cast(%var_4711, dtype="float64") /* ty=Tensor[(480), float64] */;
  %302 = reshape(%301, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %303 = @func_3793(%302) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) */;
  %304 = subtract(%299, %300) /* ty=Tensor[(2, 2, 2), int8] */;
  %305 = %303.1;
  (%304, %305, %var_4711)
}

def @func_6524() -> (Tensor[(5, 10, 3), bool],) {
  %306 = @func_3817() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %307 = %306.0;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %309 = acosh(%308) /* ty=Tensor[(5, 10, 3), float64] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(5, 10, 3), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(5, 10, 3), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = less_equal(%312, %313) /* ty=Tensor[(5, 10, 3), bool] */;
  (%314,)
}

def @func_5296(%var_5294: Tensor[(42), float64]) -> (Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) {
  @func_5293(%var_5294) /* ty=(Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) */
}

def @func_4893() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %315 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %316 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %317 = @func_4424() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %318 = %315.0;
  %319 = %316.1;
  %320 = %317.1;
  (%318, %319, %320)
}

def @func_2000() -> Tensor[(15, 11, 12), float64] {
  @func_1890() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_6656(%var_6655: Tensor[(360), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
  %325 = fn (%var_6650: Tensor[(360), float64]) -> (Tensor[(3, 14, 8), float32], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
    %321 = cast(%var_6650, dtype="float64") /* ty=Tensor[(360), float64] */;
    %322 = reshape(%321, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
    %323 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %324 = @func_509(%322) /* ty=Tensor[(10, 4, 9), float64] */;
    (%323, %324, %var_6650)
  };
  %325(%var_6655) /* ty=(Tensor[(3, 14, 8), float32], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */
}

def @func_5216() -> (Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) {
  %329 = fn () -> (Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) {
    %326 = @func_3352() /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) */;
    %327 = %326.2;
    %328 = @func_3525() /* ty=Tensor[(15, 11, 12), bool] */;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_7584() -> (Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) {
  @func_7582() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(360), float64], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(264), bool]) */
}

def @func_3596() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  @func_3594() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_1963(%var_1961: Tensor[(42), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) {
  @func_1960(%var_1961) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */
}

def @func_2300() -> Tensor[(3, 14, 8), float32] {
  %330 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
  exp(%330) /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_6675() -> (Tensor[(15, 11, 12), bool],) {
  %331 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %332 = %331.0;
  (%332,)
}

def @func_5522(%var_5519: Tensor[(14, 8, 11), uint16], %var_5520: Tensor[(14, 8, 11), uint16], %var_5521: Tensor[(7, 6), float64]) -> (Tensor[(8, 1, 5), float64], Tensor[(8, 60), uint32], Tensor[(15, 11, 12), float64], Tensor[(14, 8, 11), bool], Tensor[(42), float64], Tensor[(7, 6), float64], Tensor[(3, 14, 8), float32], Tensor[(3, 14, 8), float64], Tensor[(360), float64], Tensor[(14, 8, 11), float64], Tensor[(15, 11, 12), float64]) {
  %391 = fn (%var_5376: Tensor[(14, 8, 11), uint16], %var_5377: Tensor[(14, 8, 11), uint16], %var_5459: Tensor[(7, 6), float64]) -> (Tensor[(8, 1, 5), float64], Tensor[(8, 60), uint32], Tensor[(15, 11, 12), float64], Tensor[(14, 8, 11), bool], Tensor[(42), float64], Tensor[(7, 6), float64], Tensor[(3, 14, 8), float32], Tensor[(3, 14, 8), float64], Tensor[(360), float64], Tensor[(14, 8, 11), float64], Tensor[(15, 11, 12), float64]) {
    %333 = @func_3938() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) */;
    %334 = %333.2;
    %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 60), float64] */, dtype="uint32") /* ty=Tensor[(8, 60), uint32] */;
    %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(2), int32] */;
    %337 = cast(%334, dtype="uint32") /* ty=Tensor[(8, 60), uint32] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %339 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %340 = cast(%var_5377, dtype="uint16") /* ty=Tensor[(14, 8, 11), uint16] */;
    %341 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%var_5376, dtype="uint16") /* ty=Tensor[(14, 8, 11), uint16] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %344 = add(%342, %343) /* ty=Tensor[(14, 8, 11), uint16] */;
    %345 = cast(%344, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %346 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%var_5376, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = greater(%347, %348) /* ty=Tensor[(14, 8, 11), bool] */;
    %350 = cast(%349, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
    %351 = log2(%350) /* ty=Tensor[(14, 8, 11), float64] */;
    %352 = cast(%344, dtype="int16") /* ty=Tensor[(14, 8, 11), int16] */;
    %353 = shape_of(%var_5376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%var_5376, dtype="int16") /* ty=Tensor[(14, 8, 11), int16] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %356 = multiply(%354, %355) /* ty=Tensor[(14, 8, 11), int16] */;
    %357 = cast(%356, dtype="uint32") /* ty=Tensor[(14, 8, 11), uint32] */;
    %358 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%351, dtype="uint32") /* ty=Tensor[(14, 8, 11), uint32] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %361 = left_shift(%359, %360) /* ty=Tensor[(14, 8, 11), uint32] */;
    %362 = cast(%var_5377, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %366 = power(%364, %365) /* ty=Tensor[(14, 8, 11), float32] */;
    %367 = cast(%356, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%366, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %371 = cast(%var_5459, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
    %372 = reshape(%371, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %373 = @func_1960(%372) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
    %374 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %375 = cast(%374, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
    %376 = cast(%var_5459, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
    %377 = reshape(%376, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %378 = @func_1960(%377) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
    %379 = cast(%361, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
    %380 = @func_4893() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
    %381 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
    %382 = multiply(%337, %338) /* ty=Tensor[(8, 60), uint32] */;
    %383 = %339.1;
    %384 = logical_or(%369, %370) /* ty=Tensor[(14, 8, 11), bool] */;
    %385 = %373.3;
    %386 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %387 = log2(%375) /* ty=Tensor[(3, 14, 8), float64] */;
    %388 = %378.2;
    %389 = cos(%379) /* ty=Tensor[(14, 8, 11), float64] */;
    %390 = %380.0;
    (%381, %382, %383, %384, %385, %var_5459, %386, %387, %388, %389, %390)
  };
  %391(%var_5519, %var_5520, %var_5521) /* ty=(Tensor[(8, 1, 5), float64], Tensor[(8, 60), uint32], Tensor[(15, 11, 12), float64], Tensor[(14, 8, 11), bool], Tensor[(42), float64], Tensor[(7, 6), float64], Tensor[(3, 14, 8), float32], Tensor[(3, 14, 8), float64], Tensor[(360), float64], Tensor[(14, 8, 11), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_7914(%var_7912: Tensor[(13, 7, 12), float64], %var_7913: Tensor[(81), float32]) -> (Tensor[(13, 7, 12), float64], Tensor[(9, 8, 9), float32], Tensor[(81), float32], Tensor[(648), float32]) {
  @func_7910(%var_7912, %var_7913) /* ty=(Tensor[(13, 7, 12), float64], Tensor[(9, 8, 9), float32], Tensor[(81), float32], Tensor[(648), float32]) */
}

def @func_7008() -> (Tensor[(15, 11, 12), float64], Tensor[(1980), float32], Tensor[(1680), float64]) {
  %392 = @func_3900() /* ty=(Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %394 = cast(meta[relay.Constant][20] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %395 = %392.1;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %397 = reshape(%393, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float64] */;
  %398 = reshape(%394, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float64] */;
  %399 = reshape(%396, newshape=[1980]) /* ty=Tensor[(1980), float32] */;
  %400 = @func_4036(%397, %398, %399) /* ty=(Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) */;
  %401 = %400.1;
  (%395, %401, meta[relay.Constant][20] /* ty=Tensor[(1680), float64] */)
}

def @func_793(%var_768: Tensor[(6, 7), float64], %var_779: Tensor[(192), uint16]) -> (Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) {
  %402 = cast(%var_768, dtype="float64") /* ty=Tensor[(6, 7), float64] */;
  %403 = cast(%var_779, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %404 = cast(%var_779, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %405 = reshape(%403, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint16] */;
  %406 = reshape(%404, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint16] */;
  %407 = asin(%402) /* ty=Tensor[(6, 7), float64] */;
  %408 = @func_748(%405, %406) /* ty=Tensor[(8, 8, 3), uint16] */;
  (%407, %408, %var_779)
}

def @func_3301() -> (Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  %409 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %410 = asinh(%409) /* ty=Tensor[(9, 4, 5), float32] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  %413 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %414 = cast(%410, dtype="float64") /* ty=Tensor[(9, 4, 5), float64] */;
  %415 = sigmoid(%411) /* ty=Tensor[(9, 4, 5), float32] */;
  %416 = atanh(%412) /* ty=Tensor[(9, 4, 5), float32] */;
  %417 = %413.1;
  %418 = cos(%414) /* ty=Tensor[(9, 4, 5), float64] */;
  (%415, %416, %417, %418)
}

def @func_7321(%var_7320: Tensor[(2, 3, 3), uint64]) -> (Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) {
  %425 = fn (%var_7300: Tensor[(2, 3, 3), uint64]) -> (Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) {
    %419 = cast(%var_7300, dtype="uint64") /* ty=Tensor[(2, 3, 3), uint64] */;
    %420 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(2, 3, 3), uint64] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %423 = add(%421, %422) /* ty=Tensor[(2, 3, 3), uint64] */;
    %424 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
    (%423, %424)
  };
  %425(%var_7320) /* ty=(Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) */
}

def @func_5945(%var_5944: Tensor[(1, 6, 2), float64]) -> (Tensor[(1, 6, 2), float64],) {
  %429 = fn (%var_5931: Tensor[(1, 6, 2), float64]) -> (Tensor[(1, 6, 2), float64],) {
    %426 = cast(6.19485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %427 = cast(%var_5931, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
    %428 = floor_mod(%426, %427) /* ty=Tensor[(1, 6, 2), float64] */;
    (%428,)
  };
  %429(%var_5944) /* ty=(Tensor[(1, 6, 2), float64],) */
}

def @func_1808() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) {
  %430 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %431 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 11, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 11, 12), int8] */, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %435 = log2(%434) /* ty=Tensor[(15, 11, 12), float32] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %437 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 11, 12), int8] */, dtype="uint16") /* ty=Tensor[(15, 11, 12), uint16] */;
  %438 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%435, dtype="uint16") /* ty=Tensor[(15, 11, 12), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %441 = equal(%432, %433) /* ty=Tensor[(15, 11, 12), bool] */;
  %442 = acosh(%436) /* ty=Tensor[(15, 11, 12), float32] */;
  %443 = bitwise_and(%439, %440) /* ty=Tensor[(15, 11, 12), uint16] */;
  (%441, %442, %443)
}

def @func_5293(%var_5289: Tensor[(42), float64]) -> (Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) {
  %444 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 2, 10), uint32] */;
  %445 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 2, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 2, 10), uint32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %448 = cast(meta[relay.Constant][27] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %449 = reshape(%448, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %450 = @func_4936(%449) /* ty=(Tensor[(8, 60), int64], Tensor[(8, 60), float64]) */;
  %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(1980), float64] */, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %452 = reshape(%451, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
  %453 = @func_3461(%452) /* ty=(Tensor[(3, 14, 8), float32], Tensor[(360), float64], Tensor[(42), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool], Tensor[(10, 4, 9), float64], Tensor[(15, 11, 12), uint64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), uint64]) */;
  %454 = cast(%var_5289, dtype="float64") /* ty=Tensor[(42), float64] */;
  %455 = reshape(%454, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %456 = @func_2439(%455) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %457 = subtract(%446, %447) /* ty=Tensor[(11, 2, 10), uint32] */;
  %458 = %450.0;
  %459 = %453.6;
  %460 = %456.2;
  (%457, %458, meta[relay.Constant][27] /* ty=Tensor[(480), float64] */, %459, meta[relay.Constant][28] /* ty=Tensor[(1980), float64] */, %460, %var_5289)
}

def @func_6484() -> Tensor[(15, 11, 12), float64] {
  %462 = fn () -> Tensor[(15, 11, 12), float64] {
    %461 = @func_5558() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %461.0
  };
  %462() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3210() -> (Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) {
  %463 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %465 = reshape(%464, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %466 = %463.0;
  %467 = @func_114(%465) /* ty=Tensor[(7, 14, 5), int8] */;
  (%466, %467, meta[relay.Constant][29] /* ty=Tensor[(490), float64] */)
}

def @func_6955(%var_6933: Tensor[(9, 4, 5), float32]) -> (Tensor[(9, 4, 5), bool], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  %468 = @func_4739() /* ty=(Tensor[(9, 4, 5), float32],) */;
  %469 = %468.0;
  %470 = cast(%var_6933, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = @func_6027() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) */;
  %475 = cast(%var_6933, dtype="float64") /* ty=Tensor[(9, 4, 5), float64] */;
  %476 = logical_and(%472, %473) /* ty=Tensor[(9, 4, 5), bool] */;
  %477 = %474.0;
  %478 = sqrt(%475) /* ty=Tensor[(9, 4, 5), float64] */;
  (%476, %477, %478)
}

def @func_7050() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), float64], Tensor[(15, 11, 12), float64], Tensor[(50, 4), float64]) {
  %479 = @func_3720() /* ty=(Tensor[(15, 11, 12), bool],) */;
  %480 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %481 = @func_3868() /* ty=(Tensor[(11, 6, 4), float64],) */;
  %482 = cast(meta[relay.Constant][30] /* ty=Tensor[(50, 4), float64] */, dtype="float64") /* ty=Tensor[(50, 4), float64] */;
  %483 = reshape(%482, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), float64] */;
  %484 = @func_6636(%483) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(8, 5, 5), float64]) */;
  %485 = %479.0;
  %486 = %480.0;
  %487 = %481.0;
  %488 = %484.1;
  (%485, %486, %487, %488, meta[relay.Constant][30] /* ty=Tensor[(50, 4), float64] */)
}

def @func_7070() -> Tensor[(9, 4, 5), float32] {
  @func_7068() /* ty=Tensor[(9, 4, 5), float32] */
}

def @func_7733() -> (Tensor[(8, 1, 5), float64], Tensor[(3, 14, 8), int16]) {
  %489 = @func_5215() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) */;
  %490 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 14, 8), float32] */, dtype="int16") /* ty=Tensor[(3, 14, 8), int16] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="int16") /* ty=Tensor[(3, 14, 8), int16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %495 = %489.0;
  %496 = bitwise_and(%493, %494) /* ty=Tensor[(3, 14, 8), int16] */;
  (%495, %496)
}

def @func_4393() -> (Tensor[(15, 11, 12), float64],) {
  %498 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %497 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
    (%497,)
  };
  %498() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_3527() -> Tensor[(15, 11, 12), bool] {
  @func_3525() /* ty=Tensor[(15, 11, 12), bool] */
}

def @func_3188(%var_3151: Tensor[(360), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(360), float64], Tensor[(360), float64]) {
  %499 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %500 = @func_2956() /* ty=(Tensor[(5, 10, 3), uint8],) */;
  %501 = cast(%var_3151, dtype="float64") /* ty=Tensor[(360), float64] */;
  %502 = reshape(%501, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %503 = @func_1674(%502) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(360), float64] */;
  %506 = reshape(%505, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %507 = @func_1674(%506) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
  %508 = %499.0;
  %509 = %500.0;
  %510 = %507.2;
  (%508, %509, %504, %var_3151, %510)
}

def @func_6958(%var_6956: Tensor[(9, 4, 5), float32]) -> (Tensor[(9, 4, 5), bool], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) {
  @func_6955(%var_6956) /* ty=(Tensor[(9, 4, 5), bool], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */
}

def @func_2617() -> (Tensor[(15, 11, 12), float64],) {
  @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_4186() -> (Tensor[(15, 11, 12), float64],) {
  @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_4936(%var_4906: Tensor[(8, 60), float64]) -> (Tensor[(8, 60), int64], Tensor[(8, 60), float64]) {
  %511 = @func_3938() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) */;
  %512 = %511.2;
  %513 = cast(%var_4906, dtype="uint8") /* ty=Tensor[(8, 60), uint8] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(%512, dtype="uint8") /* ty=Tensor[(8, 60), uint8] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %517 = logical_xor(%515, %516) /* ty=Tensor[(8, 60), uint8] */;
  %518 = cast(%512, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(2), int32] */;
  %520 = cast(%517, dtype="int64") /* ty=Tensor[(8, 60), int64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 60), uint8] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %523 = shape_of(%517, dtype="int32") /* ty=Tensor[(2), int32] */;
  %524 = cast(%517, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %526 = left_shift(%520, %521) /* ty=Tensor[(8, 60), int64] */;
  %527 = add(%524, %525) /* ty=Tensor[(8, 60), float64] */;
  (%526, %527)
}

def @func_7606() -> (Tensor[(9, 4, 5), float32],) {
  %528 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
  %529 = %528.1;
  (%529,)
}

def @func_3580() -> (Tensor[(15, 11, 12), float64],) {
  %531 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %530 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
    (%530,)
  };
  %531() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_4548() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64]) {
  %532 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %533 = @func_3262() /* ty=Tensor[(15, 11, 12), float64] */;
  %534 = %532.2;
  (%533, %534)
}

def @func_4311(%var_4297: Tensor[(360), float64]) -> (Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) {
  %535 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %536 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(1, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %539 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %540 = tan(%539) /* ty=Tensor[(1, 11, 7), float64] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %542 = cast(meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %543 = reshape(%542, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %544 = @func_1960(%543) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(42), float64], Tensor[(192), uint16], Tensor[(360), float64], Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(192), float32]) */;
  %545 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %546 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(1, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %549 = greater_equal(%547, %548) /* ty=Tensor[(?, 11, 7), bool] */;
  %550 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float32") /* ty=Tensor[(?, 11, 7), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = minimum(%552, %553) /* ty=Tensor[(?, 11, 7), float32] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(?, 11, 7), float64] */;
  %556 = asin(%555) /* ty=Tensor[(?, 11, 7), float64] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(?, 11, 7), float64] */;
  %558 = @func_4073() /* ty=(Tensor[(11, 9, 7), bool],) */;
  %559 = cast(%var_4297, dtype="float64") /* ty=Tensor[(360), float64] */;
  %560 = reshape(%559, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
  %561 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %562 = divide(%537, %538) /* ty=Tensor[(?, 11, 7), float64] */;
  %563 = sigmoid(%541) /* ty=Tensor[(1, 11, 7), float32] */;
  %564 = %544.0;
  %565 = exp(%557) /* ty=Tensor[(?, 11, 7), float64] */;
  %566 = %558.0;
  %567 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
  %568 = @func_509(%560) /* ty=Tensor[(10, 4, 9), float64] */;
  %569 = acosh(%561) /* ty=Tensor[(1, 11, 7), float64] */;
  %570 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  (%562, %563, %564, meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, %565, %566, %567, %568, %var_4297, %569, %570)
}

def @func_5146() -> Tensor[(15, 11, 12), float64] {
  @func_2000() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_7133() -> (Tensor[(15, 11, 12), bool],) {
  @func_7131() /* ty=(Tensor[(15, 11, 12), bool],) */
}

def @func_7687() -> Tensor[(15, 11, 12), float64] {
  @func_7685() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3940() -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) {
  @func_3938() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8, 60), float64]) */
}

def @func_4314(%var_4312: Tensor[(360), float64]) -> (Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) {
  @func_4311(%var_4312) /* ty=(Tensor[(?, 11, 7), float64], Tensor[(1, 11, 7), float32], Tensor[(15, 11, 12), float64], Tensor[(42), float64], Tensor[(?, 11, 7), float64], Tensor[(11, 9, 7), bool], Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(360), float64], Tensor[(1, 11, 7), float64], Tensor[(3, 14, 8), float32]) */
}

def @func_6550() -> (Tensor[(11, 6, 4), bool],) {
  @func_6548() /* ty=(Tensor[(11, 6, 4), bool],) */
}

def @func_2353(%var_2338: Tensor[(11, 6, 4), bool]) -> Tensor[(11, 6, 4), bool] {
  %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %572 = cast(%var_2338, dtype="bool") /* ty=Tensor[(11, 6, 4), bool] */;
  logical_and(%571, %572) /* ty=Tensor[(11, 6, 4), bool] */
}

def @func_7377() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %575 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %573 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
    %574 = @func_6850() /* ty=Tensor[(15, 11, 12), float64] */;
    (%573, %574)
  };
  %575() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_8090(%var_8089: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), uint16] {
  %582 = fn (%var_8073: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), uint16] {
    %576 = @func_4739() /* ty=(Tensor[(9, 4, 5), float32],) */;
    %577 = %576.0;
    %578 = cast(%var_8073, dtype="uint16") /* ty=Tensor[(9, 4, 5), uint16] */;
    %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%577, dtype="uint16") /* ty=Tensor[(9, 4, 5), uint16] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    add(%580, %581) /* ty=Tensor[(9, 4, 5), uint16] */
  };
  %582(%var_8089) /* ty=Tensor[(9, 4, 5), uint16] */
}

def @func_2708() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) {
  %583 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %584 = @func_2648() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %585 = %583.1;
  %586 = %584.1;
  (%585, %586)
}

def @func_3352() -> (Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) {
  %587 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %588 = @func_3237() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %589 = %587.1;
  %590 = %588.0;
  %591 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  (%589, %590, %591)
}

def @func_3033() -> (Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) {
  %601 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) {
    %592 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
    %593 = cast(meta[relay.Constant][37] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %594 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 96), uint16] */, dtype="uint16") /* ty=Tensor[(2, 96), uint16] */;
    %595 = reshape(%593, newshape=[6, 7]) /* ty=Tensor[(6, 7), float64] */;
    %596 = reshape(%594, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %597 = @func_793(%595, %596) /* ty=(Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) */;
    %598 = @func_2696() /* ty=Tensor[(15, 11, 12), float64] */;
    %599 = %592.2;
    %600 = %597.0;
    (%598, %599, %600, meta[relay.Constant][37] /* ty=Tensor[(42), float64] */, meta[relay.Constant][38] /* ty=Tensor[(2, 96), uint16] */)
  };
  %601() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) */
}

def @func_4073() -> (Tensor[(11, 9, 7), bool],) {
  %602 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %603 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = greater_equal(%604, %605) /* ty=Tensor[(11, 9, 7), bool] */;
  (%606,)
}

def @func_4075() -> (Tensor[(11, 9, 7), bool],) {
  @func_4073() /* ty=(Tensor[(11, 9, 7), bool],) */
}

def @func_1890() -> Tensor[(15, 11, 12), float64] {
  %607 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %608 = %607.1;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %610 = acos(%609) /* ty=Tensor[(15, 11, 12), float64] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  log10(%611) /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_5119(%var_5018: Tensor[(15, 11, 12), float64]) -> (Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %612 = @func_3548() /* ty=Tensor[(15, 11, 12), float64] */;
  %613 = cast(%var_5018, dtype="int8") /* ty=Tensor[(15, 11, 12), int8] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="int8") /* ty=Tensor[(15, 11, 12), int8] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %617 = @func_3594() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %618 = @func_3579() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %619 = %618.0;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
  %621 = atanh(%620) /* ty=Tensor[(15, 11, 12), float64] */;
  %622 = cast(%619, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(15, 11, 12), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = right_shift(%615, %616) /* ty=Tensor[(15, 11, 12), int8] */;
  %627 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %628 = %617.0;
  %629 = logical_and(%624, %625) /* ty=Tensor[(15, 11, 12), bool] */;
  (%626, %627, %628, %629)
}

def @func_5792() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %633 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %630 = @func_3900() /* ty=(Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %631 = %630.2;
    %632 = @func_5146() /* ty=Tensor[(15, 11, 12), float64] */;
    (%631, %632)
  };
  %633() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_5896() -> Tensor[(15, 11, 12), float64] {
  %635 = fn () -> Tensor[(15, 11, 12), float64] {
    %634 = @func_5791() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %634.1
  };
  %635() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3238() -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %641 = fn () -> (Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
    %636 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
    %637 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
    %638 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
    %639 = %636.0;
    %640 = %637.0;
    (%638, %639, %640)
  };
  %641() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */
}

def @func_6760() -> (Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) {
  %642 = @func_4073() /* ty=(Tensor[(11, 9, 7), bool],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %645 = cast(%643, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %646 = @func_2778() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) */;
  %647 = atan(%644) /* ty=Tensor[(11, 9, 7), float64] */;
  %648 = erf(%645) /* ty=Tensor[(11, 9, 7), float64] */;
  %649 = %646.2;
  (%647, %648, %649)
}

def @func_509(%var_506: Tensor[(10, 4, 9), float64]) -> Tensor[(10, 4, 9), float64] {
  %650 = cast(%var_506, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
  cos(%650) /* ty=Tensor[(10, 4, 9), float64] */
}

def @func_2673() -> Tensor[(15, 11, 12), bool] {
  %651 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
  %651.0
}

def @func_2573() -> (Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) {
  @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */
}

def @func_2956() -> (Tensor[(5, 10, 3), uint8],) {
  %652 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %653 = %652.1;
  (%653,)
}

def @func_4424() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %654 = @func_3036() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %655 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
  %656 = %654.0;
  %657 = %655.0;
  (%656, %657)
}

def @func_4192() -> (Tensor[(15, 11, 12), bool],) {
  %660 = fn () -> (Tensor[(15, 11, 12), bool],) {
    %658 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
    %659 = %658.0;
    (%659,)
  };
  %660() /* ty=(Tensor[(15, 11, 12), bool],) */
}

def @func_7052() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), float64], Tensor[(15, 11, 12), float64], Tensor[(50, 4), float64]) {
  @func_7050() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), float64], Tensor[(15, 11, 12), float64], Tensor[(50, 4), float64]) */
}

def @func_8265() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), int8], Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64]) {
  %671 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), int8], Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64]) {
    %661 = @func_7742() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %662 = %661.0;
    %663 = cast(%662, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
    %664 = reshape(%663, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float64] */;
    %665 = @func_5119(%664) /* ty=(Tensor[(15, 11, 12), int8], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
    %666 = @func_4642() /* ty=(Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
    %667 = %665.0;
    %668 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
    %669 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
    %670 = %666.1;
    (%662, %667, %668, %669, %670)
  };
  %671() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), int8], Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_6268(%var_6267: Tensor[(5, 9, 14), float32]) -> Tensor[(5, 9, 14), float32] {
  %673 = fn (%var_6258: Tensor[(5, 9, 14), float32]) -> Tensor[(5, 9, 14), float32] {
    %672 = cast(%var_6258, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
    exp(%672) /* ty=Tensor[(5, 9, 14), float32] */
  };
  %673(%var_6267) /* ty=Tensor[(5, 9, 14), float32] */
}

def @func_7874() -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) {
  %684 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) {
    %674 = @func_6148() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %675 = cast(meta[relay.Constant][41] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %676 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %677 = reshape(%675, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), int8] */;
    %678 = reshape(%676, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %679 = @func_4729(%677, %678) /* ty=(Tensor[(2, 2, 2), int8], Tensor[(10, 4, 9), float64], Tensor[(480), float64]) */;
    %680 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %681 = %674.0;
    %682 = %679.1;
    %683 = %680.0;
    (%681, %682, meta[relay.Constant][41] /* ty=Tensor[(8), int8] */, meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, %683)
  };
  %684() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(8), int8], Tensor[(480), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_2532() -> (Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %694 = fn () -> (Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %685 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %686 = reshape(%685, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %687 = @func_1674(%686) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
    %688 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %689 = @func_2454() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %690 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
    %691 = %687.0;
    %692 = %688.0;
    %693 = %689.0;
    (%690, %691, meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, %692, %693)
  };
  %694() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_3354() -> (Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) {
  @func_3352() /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(3, 14, 8), float32], Tensor[(8, 1, 5), float64]) */
}

def @func_7735() -> (Tensor[(8, 1, 5), float64], Tensor[(3, 14, 8), int16]) {
  @func_7733() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(3, 14, 8), int16]) */
}

def @func_1810() -> (Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) {
  @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */
}

def @func_6083() -> (Tensor[(15, 11, 12), float64],) {
  %695 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  (%695,)
}

def @func_6526() -> (Tensor[(5, 10, 3), bool],) {
  @func_6524() /* ty=(Tensor[(5, 10, 3), bool],) */
}

def @func_2697() -> Tensor[(15, 11, 12), float64] {
  %697 = fn () -> Tensor[(15, 11, 12), float64] {
    %696 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %696.0
  };
  %697() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_3594() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %698 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %699 = @func_2531() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(5, 10, 3), uint8], Tensor[(360), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %700 = %698.0;
  %701 = %699.3;
  (%700, %701)
}

def @func_2778() -> (Tensor[(8, 1, 5), float64], Tensor[(11, 6, 4), bool], Tensor[(264), bool]) {
  %702 = cast(meta[relay.Constant][44] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %703 = reshape(%702, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), bool] */;
  %704 = @func_2047() /* ty=Tensor[(8, 1, 5), float64] */;
  %705 = @func_2353(%703) /* ty=Tensor[(11, 6, 4), bool] */;
  (%704, %705, meta[relay.Constant][44] /* ty=Tensor[(264), bool] */)
}

def @func_2302() -> Tensor[(3, 14, 8), float32] {
  @func_2300() /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_4740() -> (Tensor[(9, 4, 5), float32],) {
  %708 = fn () -> (Tensor[(9, 4, 5), float32],) {
    %706 = @func_3301() /* ty=(Tensor[(9, 4, 5), float32], Tensor[(9, 4, 5), float32], Tensor[(15, 11, 12), float64], Tensor[(9, 4, 5), float64]) */;
    %707 = %706.1;
    (%707,)
  };
  %708() /* ty=(Tensor[(9, 4, 5), float32],) */
}

def @func_1676(%var_1675: Tensor[(360), float64]) -> (Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
  %717 = fn (%var_1668: Tensor[(360), float64]) -> (Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) {
    %709 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(5, 10, 3), uint8] */;
    %710 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(5, 10, 3), uint8] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %713 = cast(%var_1668, dtype="float64") /* ty=Tensor[(360), float64] */;
    %714 = reshape(%713, newshape=[10, 4, 9]) /* ty=Tensor[(10, 4, 9), float64] */;
    %715 = bitwise_and(%711, %712) /* ty=Tensor[(5, 10, 3), uint8] */;
    %716 = @func_509(%714) /* ty=Tensor[(10, 4, 9), float64] */;
    (%715, %716, %var_1668)
  };
  %717(%var_1675) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */
}

def @func_3869() -> (Tensor[(11, 6, 4), float64],) {
  %722 = fn () -> (Tensor[(11, 6, 4), float64],) {
    %718 = @func_2571() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(11, 6, 4), bool], Tensor[(3, 88), bool]) */;
    %719 = %718.1;
    %720 = cast(%719, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
    %721 = acosh(%720) /* ty=Tensor[(11, 6, 4), float64] */;
    (%721,)
  };
  %722() /* ty=(Tensor[(11, 6, 4), float64],) */
}

def @main(%var_8645: Tensor[(5, 5, 6), float32], %var_8646: Tensor[(5, 5, 6), float32]) -> Tensor[(5, 5, 6), float32] {
  %723 = cast(%var_8646, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %724 = shape_of(%var_8645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_8645, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%725, %726) /* ty=Tensor[(5, 5, 6), float32] */
}

def @func_3677() -> (Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) {
  %731 = fn () -> (Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) {
    %727 = @func_2708() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), bool]) */;
    %728 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
    %729 = %727.0;
    %730 = %728.1;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */
}

def @func_3647() -> (Tensor[(15, 11, 12), float64],) {
  %736 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %732 = @func_3594() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %733 = %732.1;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(15, 11, 12), float64] */;
    %735 = sinh(%734) /* ty=Tensor[(15, 11, 12), float64] */;
    (%735,)
  };
  %736() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_3795(%var_3794: Tensor[(120, 4), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) {
  %742 = fn (%var_3786: Tensor[(120, 4), float64]) -> (Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) {
    %737 = cast(%var_3786, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
    %738 = reshape(%737, newshape=[15, 16, 2]) /* ty=Tensor[(15, 16, 2), float64] */;
    %739 = @func_2854(%738) /* ty=(Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) */;
    %740 = @func_1890() /* ty=Tensor[(15, 11, 12), float64] */;
    %741 = %739.3;
    (%740, %741, %var_3786)
  };
  %742(%var_3794) /* ty=(Tensor[(15, 11, 12), float64], Tensor[(10, 4, 9), float64], Tensor[(120, 4), float64]) */
}

def @func_4040(%var_4037: Tensor[(8, 15, 14), float64], %var_4038: Tensor[(8, 15, 14), float64], %var_4039: Tensor[(1980), float32]) -> (Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) {
  %757 = fn (%var_3952: Tensor[(8, 15, 14), float64], %var_3953: Tensor[(8, 15, 14), float64], %var_3965: Tensor[(1980), float32]) -> (Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) {
    %743 = cast(%var_3953, dtype="float64") /* ty=Tensor[(8, 15, 14), float64] */;
    %744 = shape_of(%var_3952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%var_3952, dtype="float64") /* ty=Tensor[(8, 15, 14), float64] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %747 = cast(%var_3952, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
    %748 = @func_3032() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(3, 88), bool], Tensor[(6, 7), float64], Tensor[(42), float64], Tensor[(2, 96), uint16]) */;
    %749 = cast(%var_3965, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %750 = reshape(%749, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
    %751 = @func_1852(%750) /* ty=Tensor[(15, 11, 12), bool] */;
    %752 = cast(%751, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
    %753 = floor_divide(%745, %746) /* ty=Tensor[(8, 15, 14), float64] */;
    %754 = cosh(%747) /* ty=Tensor[(8, 15, 14), float32] */;
    %755 = %748.3;
    %756 = atan(%752) /* ty=Tensor[(15, 11, 12), float32] */;
    (%753, %var_3965, %754, %755, %756)
  };
  %757(%var_4037, %var_4038, %var_4039) /* ty=(Tensor[(8, 15, 14), float64], Tensor[(1980), float32], Tensor[(8, 15, 14), float32], Tensor[(42), float64], Tensor[(15, 11, 12), float32]) */
}

def @func_3037() -> (Tensor[(15, 11, 12), float64],) {
  %759 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %758 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
    (%758,)
  };
  %759() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_6693() -> Tensor[(15, 11, 12), float64] {
  @func_5895() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_6397(%var_6376: Tensor[(42, 1), float64], %var_6382: Tensor[(11, 2), int64], %var_6383: Tensor[(8, 44), int64]) -> (Tensor[(15, 11, 12), float64], Tensor[(8, 60), int64], Tensor[(42, 1), float64], Tensor[(2, 11, 16), int64], Tensor[(11, 2), int64], Tensor[(8, 44), int64]) {
  %760 = @func_4868() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %761 = cast(%var_6376, dtype="float64") /* ty=Tensor[(42, 1), float64] */;
  %762 = reshape(%761, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %763 = @func_5293(%762) /* ty=(Tensor[(11, 2, 10), uint32], Tensor[(8, 60), int64], Tensor[(480), float64], Tensor[(15, 11, 12), uint64], Tensor[(1980), float64], Tensor[(192), float32], Tensor[(42), float64]) */;
  %764 = cast(%var_6382, dtype="int64") /* ty=Tensor[(11, 2), int64] */;
  %765 = cast(%var_6383, dtype="int64") /* ty=Tensor[(8, 44), int64] */;
  %766 = reshape(%764, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), int64] */;
  %767 = reshape(%765, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), int64] */;
  %768 = @func_4385(%766, %767) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(2, 11, 1), float32], Tensor[(3, 14, 8), float32]) */;
  %769 = %760.0;
  %770 = %763.1;
  %771 = %768.0;
  (%769, %770, %var_6376, %771, %var_6382, %var_6383)
}

def @func_7743() -> (Tensor[(15, 11, 12), float64],) {
  %773 = fn () -> (Tensor[(15, 11, 12), float64],) {
    %772 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
    (%772,)
  };
  %773() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_3212() -> (Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) {
  @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */
}

def @func_7651() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %774 = @func_3676() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(7, 14, 5), int8]) */;
  %775 = @func_5895() /* ty=Tensor[(15, 11, 12), float64] */;
  %776 = %774.0;
  (%775, %776)
}

def @func_797(%var_795: Tensor[(6, 7), float64], %var_796: Tensor[(192), uint16]) -> (Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) {
  @func_793(%var_795, %var_796) /* ty=(Tensor[(6, 7), float64], Tensor[(8, 8, 3), uint16], Tensor[(192), uint16]) */
}

def @func_6762() -> (Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) {
  @func_6760() /* ty=(Tensor[(11, 9, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(264), bool]) */
}

def @func_2124(%var_2123: Tensor[(490), float32]) -> (Tensor[(15, 11, 12), bool], Tensor[(490), bool], Tensor[(490), int32], Tensor[(490), int16]) {
  %804 = fn (%var_2113: Tensor[(490), float32]) -> (Tensor[(15, 11, 12), bool], Tensor[(490), bool], Tensor[(490), int32], Tensor[(490), int16]) {
    %777 = @func_1808() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), uint16]) */;
    %778 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
    %779 = reshape(%778, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
    %780 = @func_114(%779) /* ty=Tensor[(7, 14, 5), int8] */;
    %781 = cast(%780, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
    %782 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %783 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?), bool] */;
    %785 = cast(%780, dtype="int32") /* ty=Tensor[(7, 14, 5), int32] */;
    %786 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %787 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(490), int32] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?), int32] */;
    %789 = cast(%780, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
    %790 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %791 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?), bool] */;
    %793 = logical_and(%791, %792) /* ty=Tensor[(490), bool] */;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(490), float32] */;
    %795 = asinh(%794) /* ty=Tensor[(490), float32] */;
    %796 = cast(%var_2113, dtype="int16") /* ty=Tensor[(490), int16] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(1), int32] */;
    %798 = cast(%795, dtype="int16") /* ty=Tensor[(490), int16] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?), int16] */;
    %800 = %777.0;
    %801 = greater(%783, %784) /* ty=Tensor[(490), bool] */;
    %802 = subtract(%787, %788) /* ty=Tensor[(490), int32] */;
    %803 = bitwise_and(%798, %799) /* ty=Tensor[(490), int16] */;
    (%800, %801, %802, %803)
  };
  %804(%var_2123) /* ty=(Tensor[(15, 11, 12), bool], Tensor[(490), bool], Tensor[(490), int32], Tensor[(490), int16]) */
}

def @func_2675() -> Tensor[(15, 11, 12), bool] {
  @func_2673() /* ty=Tensor[(15, 11, 12), bool] */
}

def @func_6111(%var_6110: Tensor[(5, 4, 3), float64]) -> (Tensor[(5, 4, 3), float32],) {
  %809 = fn (%var_6091: Tensor[(5, 4, 3), float64]) -> (Tensor[(5, 4, 3), float32],) {
    %805 = cast(%var_6091, dtype="float64") /* ty=Tensor[(5, 4, 3), float64] */;
    %806 = sqrt(%805) /* ty=Tensor[(5, 4, 3), float64] */;
    %807 = cast(%806, dtype="float32") /* ty=Tensor[(5, 4, 3), float32] */;
    %808 = atan(%807) /* ty=Tensor[(5, 4, 3), float32] */;
    (%808,)
  };
  %809(%var_6110) /* ty=(Tensor[(5, 4, 3), float32],) */
}

def @func_6027() -> (Tensor[(15, 11, 12), float64], Tensor[(8, 1, 5), float64]) {
  %810 = @func_5215() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(15, 11, 12), bool]) */;
  %811 = @func_2000() /* ty=Tensor[(15, 11, 12), float64] */;
  %812 = %810.0;
  (%811, %812)
}

def @func_3902() -> (Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  @func_3900() /* ty=(Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_5148() -> Tensor[(15, 11, 12), float64] {
  @func_5146() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_5881() -> (Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) {
  @func_5879() /* ty=(Tensor[(15, 11, 12), bool], Tensor[(8, 1, 5), float64], Tensor[(42), float64], Tensor[(15, 11, 12), float32], Tensor[(15, 11, 12), float64]) */
}

def @func_4868() -> (Tensor[(15, 11, 12), float64], Tensor[(490), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) {
  %813 = @func_2211() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
  %814 = @func_3210() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(7, 14, 5), int8], Tensor[(490), float64]) */;
  %815 = @func_4642() /* ty=(Tensor[(15, 11, 12), uint16], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), bool]) */;
  %816 = %813.1;
  %817 = %814.2;
  %818 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
  %819 = %815.2;
  (%816, %817, %818, %819)
}

def @func_2856(%var_2855: Tensor[(15, 16, 2), float64]) -> (Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) {
  %841 = fn (%var_2820: Tensor[(15, 16, 2), float64]) -> (Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) {
    %820 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(15, 16, 2), bool] */;
    %821 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(15, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 16, 2), bool] */, dtype="bool") /* ty=Tensor[(15, 16, 2), bool] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %824 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
    %825 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(15, 16, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %828 = floor_mod(%826, %827) /* ty=Tensor[(15, 16, 2), float64] */;
    %829 = cast(%var_2820, dtype="uint64") /* ty=Tensor[(15, 16, 2), uint64] */;
    %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%828, dtype="uint64") /* ty=Tensor[(15, 16, 2), uint64] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %833 = cast(meta[relay.Constant][50] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %834 = reshape(%833, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %835 = @func_1674(%834) /* ty=(Tensor[(5, 10, 3), uint8], Tensor[(10, 4, 9), float64], Tensor[(360), float64]) */;
    %836 = %835.1;
    %837 = cast(%836, dtype="float64") /* ty=Tensor[(10, 4, 9), float64] */;
    %838 = logical_and(%822, %823) /* ty=Tensor[(15, 16, 2), bool] */;
    %839 = left_shift(%831, %832) /* ty=Tensor[(15, 16, 2), uint64] */;
    %840 = sinh(%837) /* ty=Tensor[(10, 4, 9), float64] */;
    (%838, %839, meta[relay.Constant][50] /* ty=Tensor[(360), float64] */, %840)
  };
  %841(%var_2855) /* ty=(Tensor[(15, 16, 2), bool], Tensor[(15, 16, 2), uint64], Tensor[(360), float64], Tensor[(10, 4, 9), float64]) */
}

def @func_2356(%var_2354: Tensor[(11, 6, 4), bool]) -> Tensor[(11, 6, 4), bool] {
  @func_2353(%var_2354) /* ty=Tensor[(11, 6, 4), bool] */
}

def @func_8024() -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
  %848 = fn () -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) {
    %842 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %843 = @func_2615() /* ty=(Tensor[(15, 11, 12), float64],) */;
    %844 = @func_7376() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */;
    %845 = %842.0;
    %846 = %843.0;
    %847 = %844.1;
    (%845, %846, %847)
  };
  %848() /* ty=(Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64]) */
}

def @func_6085() -> (Tensor[(15, 11, 12), float64],) {
  @func_6083() /* ty=(Tensor[(15, 11, 12), float64],) */
}

def @func_6852() -> Tensor[(15, 11, 12), float64] {
  @func_6850() /* ty=Tensor[(15, 11, 12), float64] */
}

def @func_8538(%var_8518: Tensor[(18), uint64]) -> (Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(15, 11, 12), float64], Tensor[(2, 3, 3), uint64], Tensor[(18), uint64], Tensor[(3, 14, 8), bool]) {
  %849 = @func_4184() /* ty=(Tensor[(15, 11, 12), float64],) */;
  %850 = cast(%var_8518, dtype="uint64") /* ty=Tensor[(18), uint64] */;
  %851 = reshape(%850, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), uint64] */;
  %852 = @func_7319(%851) /* ty=(Tensor[(2, 3, 3), uint64], Tensor[(8, 1, 5), float64]) */;
  %853 = @func_2300() /* ty=Tensor[(3, 14, 8), float32] */;
  %854 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 8), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(3, 14, 8), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = @func_3696() /* ty=Tensor[(15, 11, 12), float64] */;
  %859 = %849.0;
  %860 = @func_6072() /* ty=Tensor[(15, 11, 12), float64] */;
  %861 = %852.0;
  %862 = logical_or(%856, %857) /* ty=Tensor[(3, 14, 8), bool] */;
  (%858, %859, %860, %861, %var_8518, %862)
}

def @func_7608() -> (Tensor[(9, 4, 5), float32],) {
  @func_7606() /* ty=(Tensor[(9, 4, 5), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen376/build/output.py:2587: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen376/build/output.py", line 2592, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(150) tvmgen_default_fused_reshape_maximum_kernel0(float* __restrict__ T_maximum, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

