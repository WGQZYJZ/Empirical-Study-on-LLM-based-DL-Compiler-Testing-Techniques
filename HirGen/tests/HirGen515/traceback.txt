==========mod==========
#[version = "0.0.5"]
def @func_6255(%var_6216: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, ?, 4), int16], Tensor[(14, ?, 4), int16], Tensor[(5, 1, 7), float64]) {
  %0 = cast(%var_6216, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %1 = exp(%0) /* ty=Tensor[(14, 1, 4), float32] */;
  %2 = cast(%var_6216, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %6 = cast(%1, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %7 = shape_of(%var_6216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_6216, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %10 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %11 = bitwise_xor(%4, %5) /* ty=Tensor[(14, ?, 4), int16] */;
  %12 = right_shift(%8, %9) /* ty=Tensor[(14, ?, 4), int16] */;
  %13 = %10.0;
  (%11, %12, %13)
}

def @func_5023(%var_4986: Tensor[(245), float64], %var_4990: Tensor[(18, 70), int16], %var_5016: Tensor[(1, 15), float64], %var_5017: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(245), float64], Tensor[(14, 6, 15), int16], Tensor[(18, 70), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float32], Tensor[(1, 780), float32], Tensor[(5, 3, 15), float64], Tensor[(1, 15), float64], Tensor[(225), float64]) {
  %14 = cast(%var_4986, dtype="float64") /* ty=Tensor[(245), float64] */;
  %15 = reshape(%14, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %16 = @func_4635(%15) /* ty=(Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %17 = cast(%var_4990, dtype="int16") /* ty=Tensor[(18, 70), int16] */;
  %18 = cast(%var_4990, dtype="int16") /* ty=Tensor[(18, 70), int16] */;
  %19 = reshape(%17, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %20 = reshape(%18, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 780), float32] */, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
  %22 = reshape(%21, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %23 = @func_109(%22) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %24 = cast(%var_5016, dtype="float64") /* ty=Tensor[(1, 15), float64] */;
  %25 = cast(%var_5017, dtype="float64") /* ty=Tensor[(225), float64] */;
  %26 = reshape(%24, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %27 = reshape(%25, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %28 = @func_3299(%26, %27) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %29 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %30 = %16.5;
  %31 = @func_4049(%19, %20) /* ty=Tensor[(14, 6, 15), int16] */;
  %32 = @func_4562() /* ty=Tensor[(5, 1, 7), float64] */;
  %33 = %23.0;
  %34 = %28.0;
  (%29, %30, %var_4986, %31, %var_4990, %32, %33, meta[relay.Constant][0] /* ty=Tensor[(1, 780), float32] */, %34, %var_5016, %var_5017)
}

def @func_5886() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) {
  %35 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
  %36 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %38 = %35.1;
  %39 = asin(%37) /* ty=Tensor[(5, 1, 7), float32] */;
  (%38, %39)
}

def @func_9706() -> (Tensor[(5, 1, 7), float32],) {
  %40 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %41 = %40.1;
  (%41,)
}

def @func_8147(%var_8143: Tensor[(1080), float32], %var_8144: Tensor[(780, 1), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(1080), float32], Tensor[(780, 1), float32]) {
  %42 = @func_7336() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %43 = cast(%var_8143, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %44 = cast(%var_8144, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %45 = reshape(%43, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %46 = reshape(%44, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %47 = @func_1580(%45, %46) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %48 = %42.0;
  %49 = %47.3;
  (%48, %49, %var_8143, %var_8144)
}

def @func_4969(%var_4949: Tensor[(6, 180), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float64], Tensor[(6, 180), float32], Tensor[(780), float32]) {
  %50 = cast(%var_4949, dtype="float32") /* ty=Tensor[(6, 180), float32] */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %52 = reshape(%50, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %53 = reshape(%51, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %54 = @func_1580(%52, %53) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %55 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %56 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %57 = %54.0;
  (%55, %56, %57, %var_4949, meta[relay.Constant][1] /* ty=Tensor[(780), float32] */)
}

def @func_4328() -> Tensor[(5, 1, 7), float64] {
  @func_4324() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_4324() -> Tensor[(5, 1, 7), float64] {
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  acos(%58) /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_4758(%var_4726: Tensor[(5, 4, 7), float64], %var_4732: Tensor[(48), bool], %var_4733: Tensor[(576), bool], %var_4734: Tensor[(63), float32], %var_4736: Tensor[(756), float32]) -> (Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
  %59 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %60 = cast(%59, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %61 = cast(%var_4726, dtype="bool") /* ty=Tensor[(5, 4, 7), bool] */;
  %62 = cast(%var_4732, dtype="bool") /* ty=Tensor[(48), bool] */;
  %63 = cast(%var_4733, dtype="bool") /* ty=Tensor[(576), bool] */;
  %64 = cast(%var_4733, dtype="bool") /* ty=Tensor[(576), bool] */;
  %65 = cast(%var_4734, dtype="float32") /* ty=Tensor[(63), float32] */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %67 = cast(%var_4736, dtype="float32") /* ty=Tensor[(756), float32] */;
  %68 = reshape(%62, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), bool] */;
  %69 = reshape(%63, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
  %70 = reshape(%64, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
  %71 = reshape(%65, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %72 = reshape(%66, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %73 = reshape(%67, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float32] */;
  %74 = @func_3099(%68, %69, %70, %71, %72, %73) /* ty=(Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %76 = reshape(%75, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
  %77 = @func_3224(%76) /* ty=(Tensor[(11, 8, 6), float64],) */;
  %78 = not_equal(%60, %61) /* ty=Tensor[(5, 4, 7), bool] */;
  %79 = %74.1;
  %80 = %77.0;
  (%78, %79, %var_4732, %var_4733, %var_4734, meta[relay.Constant][3] /* ty=Tensor[(1536), bool] */, %var_4736, %80, meta[relay.Constant][4] /* ty=Tensor[(528), uint64] */)
}

def @func_5549(%var_5525: Tensor[(54), uint64], %var_5527: Tensor[(5, 7, 7), float64]) -> (Tensor[(?, 9, 6), float64], Tensor[(54), uint64], Tensor[(5, 7, 7), int8]) {
  %81 = cast(%var_5525, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %82 = cast(%var_5525, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %83 = reshape(%81, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %84 = reshape(%82, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %85 = @func_2345(%83, %84) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %86 = @func_4470() /* ty=(Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) */;
  %87 = %86.2;
  %88 = cast(%var_5527, dtype="int8") /* ty=Tensor[(5, 7, 7), int8] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="int8") /* ty=Tensor[(5, 7, 7), int8] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %92 = %85.0;
  %93 = bitwise_xor(%90, %91) /* ty=Tensor[(5, 7, 7), int8] */;
  (%92, %var_5525, %93)
}

def @func_9555() -> (Tensor[(5, ?, 7), float64],) {
  %94 = @func_7274() /* ty=Tensor[(5, ?, 7), float64] */;
  (%94,)
}

def @func_8998(%var_8988: Tensor[(5, 13, 7), float64]) -> (Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) {
  %95 = @func_8272() /* ty=Tensor[(5, 1, 7), float64] */;
  %96 = @func_8408() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %99 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%95, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %102 = cast(%95, dtype="uint8") /* ty=Tensor[(5, 1, 7), uint8] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 7), float64] */, dtype="uint8") /* ty=Tensor[(5, 12, 7), uint8] */;
  %104 = minimum(%102, %103) /* ty=Tensor[(5, 12, 7), uint8] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
  %106 = cast(%95, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %107 = cast(%var_8988, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
  %108 = floor_mod(%100, %101) /* ty=Tensor[(5, ?, 7), float32] */;
  %109 = rsqrt(%105) /* ty=Tensor[(5, 12, 7), float64] */;
  %110 = logical_and(%106, %107) /* ty=Tensor[(5, 13, 7), bool] */;
  (%108, %109, %110)
}

def @func_4470() -> (Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) {
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(1008, 1), float64] */, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %112 = reshape(%111, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), float64] */;
  %113 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %115 = acosh(%114) /* ty=Tensor[(5, 1, 7), float32] */;
  %116 = cast(%115, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %117 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 7, 7), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %118 = greater_equal(%116, %117) /* ty=Tensor[(5, 7, 7), bool] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %122 = reshape(%120, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %123 = reshape(%121, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %124 = @func_1012(%122, %123) /* ty=(Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) */;
  %125 = @func_2884(%112) /* ty=Tensor[(9, 8, 14), float64] */;
  %126 = sqrt(%119) /* ty=Tensor[(5, 7, 7), float64] */;
  %127 = %124.0;
  (%125, meta[relay.Constant][6] /* ty=Tensor[(1008, 1), float64] */, %126, %127, meta[relay.Constant][8] /* ty=Tensor[(160), int16] */)
}

def @func_7232(%var_7224: Tensor[(140), float64], %var_7226: Tensor[(576, 1), bool]) -> (Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) {
  %128 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %129 = cast(%var_7224, dtype="float64") /* ty=Tensor[(140), float64] */;
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 24), bool] */, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %131 = cast(%var_7226, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %133 = cast(meta[relay.Constant][11] /* ty=Tensor[(378, 2), float32] */, dtype="float32") /* ty=Tensor[(378, 2), float32] */;
  %134 = reshape(%129, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
  %135 = reshape(%130, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %136 = reshape(%131, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %137 = reshape(%132, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %138 = reshape(%133, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %139 = @func_4758(%134, %135, %136, %137, %138) /* ty=(Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
  %140 = %128.0;
  %141 = %139.7;
  (%140, %141, %var_7224, meta[relay.Constant][9] /* ty=Tensor[(2, 24), bool] */, %var_7226, meta[relay.Constant][10] /* ty=Tensor[(63), float32] */, meta[relay.Constant][11] /* ty=Tensor[(378, 2), float32] */)
}

def @func_8272() -> Tensor[(5, 1, 7), float64] {
  %142 = @func_7752() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %142.0
}

def @func_1012(%var_901: Tensor[(8, 4, 5), int16], %var_902: Tensor[(8, 4, 5), int16]) -> (Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) {
  %143 = cast(%var_902, dtype="int16") /* ty=Tensor[(8, 4, 5), int16] */;
  %144 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_901, dtype="int16") /* ty=Tensor[(8, 4, 5), int16] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %147 = cast(%var_902, dtype="float64") /* ty=Tensor[(8, 4, 5), float64] */;
  %148 = cast(meta[relay.Constant][12] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %149 = reshape(%148, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %150 = @func_309(%149) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %151 = %150.3;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %153 = reshape(%152, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %154 = @func_109(%153) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %155 = multiply(%145, %146) /* ty=Tensor[(8, 4, 5), int16] */;
  %156 = log10(%147) /* ty=Tensor[(8, 4, 5), float64] */;
  %157 = %154.0;
  (%155, %156, %151, meta[relay.Constant][12] /* ty=Tensor[(780), float32] */, %157)
}

def @func_7770() -> (Tensor[(1008, 1), float64],) {
  %158 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
  %159 = %158.0;
  (%159,)
}

def @func_6071() -> (Tensor[(5, 1, 7), float64],) {
  %160 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%160,)
}

def @func_7692(%var_7671: Tensor[(63, 1), float32], %var_7672: Tensor[(1536), bool], %var_7673: Tensor[(756), float32]) -> (Tensor[(5, ?, 7), float64], Tensor[(16, 6, 16), bool], Tensor[(48, 1), bool], Tensor[(576), bool], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(16, 9, 12), float32], Tensor[(1728), float64], Tensor[(63, 1), float32]) {
  %161 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(48, 1), bool] */, dtype="bool") /* ty=Tensor[(48, 1), bool] */;
  %163 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %165 = cast(%var_7671, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %166 = cast(%var_7672, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %167 = cast(%var_7673, dtype="float32") /* ty=Tensor[(756), float32] */;
  %168 = reshape(%162, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), bool] */;
  %169 = reshape(%163, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
  %170 = reshape(%164, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
  %171 = reshape(%165, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %172 = reshape(%166, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %173 = reshape(%167, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float32] */;
  %174 = @func_3099(%168, %169, %170, %171, %172, %173) /* ty=(Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) */;
  %175 = cast(meta[relay.Constant][15] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %177 = reshape(%175, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %178 = reshape(%176, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %179 = @func_6943(%177, %178) /* ty=(Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) */;
  %180 = cast(%var_7671, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %181 = %161.0;
  %182 = %174.3;
  %183 = %179.0;
  %184 = log(%180) /* ty=Tensor[(63, 1), float32] */;
  (%181, %182, meta[relay.Constant][13] /* ty=Tensor[(48, 1), bool] */, meta[relay.Constant][14] /* ty=Tensor[(576), bool] */, %var_7672, %var_7673, %183, meta[relay.Constant][15] /* ty=Tensor[(1728), float64] */, %184)
}

def @func_9138() -> Tensor[(5, 1, 7), float64] {
  %185 = @func_4931() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %185.0
}

def @func_5353(%var_5342: Tensor[(3, 360), float32], %var_5343: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) {
  %186 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %188 = cast(%var_5342, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %189 = cast(%var_5343, dtype="float32") /* ty=Tensor[(780), float32] */;
  %190 = reshape(%188, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %191 = reshape(%189, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %192 = @func_1580(%190, %191) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %193 = cast(meta[relay.Constant][16] /* ty=Tensor[(91, 11), float64] */, dtype="float64") /* ty=Tensor[(91, 11), float64] */;
  %194 = reshape(%193, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %195 = @func_5139(%194) /* ty=(Tensor[(11, 13, 7), float64],) */;
  %196 = sin(%187) /* ty=Tensor[(5, 1, 7), float64] */;
  %197 = %192.3;
  %198 = %195.0;
  (%196, %197, %var_5342, %var_5343, %198, meta[relay.Constant][16] /* ty=Tensor[(91, 11), float64] */)
}

def @func_4854(%var_4811: Tensor[(1008, 11), float64], %var_4816: Tensor[(1008, 11), float64], %var_4825: Tensor[(63), float32]) -> (Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) {
  %199 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %202 = cast(%var_4811, dtype="float64") /* ty=Tensor[(1008, 11), float64] */;
  %203 = cast(%var_4816, dtype="bool") /* ty=Tensor[(1008, 11), bool] */;
  %204 = shape_of(%var_4811, dtype="int32") /* ty=Tensor[(2), int32] */;
  %205 = cast(%var_4811, dtype="bool") /* ty=Tensor[(1008, 11), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %207 = cast(%var_4825, dtype="float32") /* ty=Tensor[(63), float32] */;
  %208 = reshape(%207, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
  %209 = @func_2898(%208) /* ty=(Tensor[(9, 7, 1), float32],) */;
  %210 = cast(%var_4825, dtype="bool") /* ty=Tensor[(63), bool] */;
  %211 = cast(%200, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
  %212 = cast(%200, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %213 = subtract(%201, %202) /* ty=Tensor[(1008, 11), float64] */;
  %214 = greater(%205, %206) /* ty=Tensor[(1008, 11), bool] */;
  %215 = %209.0;
  %216 = logical_or(%210, %211) /* ty=Tensor[(1008, 63), bool] */;
  %217 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %218 = acos(%212) /* ty=Tensor[(1008, 1), float64] */;
  (%213, %214, %215, %216, %217, %218)
}

def @func_4383() -> Tensor[(5, 1, 7), float64] {
  @func_4328() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_7529(%var_7521: Tensor[(35, 5), float64]) -> (Tensor[(5, ?, 7), bool], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(35, 5), float64]) {
  %219 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %222 = exp(%221) /* ty=Tensor[(5, 1, 7), float32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = @func_7336() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %228 = cast(%var_7521, dtype="float64") /* ty=Tensor[(35, 5), float64] */;
  %229 = reshape(%228, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), float64] */;
  %230 = @func_6674(%229) /* ty=(Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) */;
  %231 = less_equal(%225, %226) /* ty=Tensor[(5, ?, 7), bool] */;
  %232 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %233 = %227.0;
  %234 = %230.1;
  (%231, %232, %233, %234, %var_7521)
}

def @func_9203() -> (Tensor[(5, 1, 7), float64],) {
  %235 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %236 = %235.0;
  (%236,)
}

def @func_9112() -> (Tensor[(2, 24), bool],) {
  %237 = @func_8408() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) */;
  %238 = %237.1;
  (%238,)
}

def @func_2345(%var_2296: Tensor[(1, 9, 6), uint64], %var_2297: Tensor[(1, 9, 6), uint64]) -> (Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) {
  %239 = cast(%var_2297, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
  %240 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%var_2296, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %243 = cast(%var_2297, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
  %244 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_2296, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %247 = left_shift(%245, %246) /* ty=Tensor[(?, 9, 6), uint64] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(?, 9, 6), float64] */;
  %249 = sin(%248) /* ty=Tensor[(?, 9, 6), float64] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(?, 9, 6), float64] */;
  %251 = sqrt(%250) /* ty=Tensor[(?, 9, 6), float64] */;
  %252 = cast(%247, dtype="int16") /* ty=Tensor[(?, 9, 6), int16] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="int16") /* ty=Tensor[(?, 9, 6), int16] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %256 = subtract(%254, %255) /* ty=Tensor[(?, 9, 6), int16] */;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(?, 9, 6), bool] */;
  %258 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%249, dtype="bool") /* ty=Tensor[(?, 9, 6), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = divide(%241, %242) /* ty=Tensor[(?, 9, 6), float64] */;
  %262 = logical_or(%259, %260) /* ty=Tensor[(?, 9, 6), bool] */;
  (%261, %262)
}

def @func_4773() -> (Tensor[(1008, 1), float64],) {
  %263 = @func_4470() /* ty=(Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) */;
  %264 = %263.1;
  (%264,)
}

def @func_109(%var_102: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), float32],) {
  %265 = cast(%var_102, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %266 = asinh(%265) /* ty=Tensor[(5, 12, 13), float32] */;
  (%266,)
}

def @func_2898(%var_2891: Tensor[(9, 7, 1), float32]) -> (Tensor[(9, 7, 1), float32],) {
  %267 = cast(%var_2891, dtype="float32") /* ty=Tensor[(9, 7, 1), float32] */;
  %268 = sinh(%267) /* ty=Tensor[(9, 7, 1), float32] */;
  (%268,)
}

def @func_309(%var_265: Tensor[(390, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) {
  %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %270 = cast(%var_265, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
  %271 = reshape(%270, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %272 = @func_109(%271) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %273 = %272.0;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(5, 12, 13), float64] */;
  %275 = cast(%var_265, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
  %276 = reshape(%275, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %277 = @func_109(%276) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %278 = %277.0;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(5, 12, 13), float64] */;
  %280 = erf(%269) /* ty=Tensor[(14, 16, 2), float32] */;
  %281 = log2(%274) /* ty=Tensor[(5, 12, 13), float64] */;
  %282 = cosh(%279) /* ty=Tensor[(5, 12, 13), float64] */;
  (%280, %var_265, %281, %282)
}

def @func_7344() -> (Tensor[(1008, 1), float64],) {
  %283 = @func_6518() /* ty=(Tensor[(1008, 1), float64],) */;
  %284 = %283.0;
  (%284,)
}

def @func_5710() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %285 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %286 = %285.0;
  %287 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%286, %287)
}

def @func_6286(%var_6277: float64, %var_6278: Tensor[(6, 3, 13), float64]) -> (Tensor[(6, 3, 13), float64],) {
  %288 = cast(%var_6277, dtype="float64") /* ty=float64 */;
  %289 = cast(%var_6278, dtype="float64") /* ty=Tensor[(6, 3, 13), float64] */;
  %290 = floor_mod(%288, %289) /* ty=Tensor[(6, 3, 13), float64] */;
  (%290,)
}

def @func_5720() -> (Tensor[(5, 1, 7), float64], Tensor[(12, 15, 6), float64], Tensor[(1080, 1), float32], Tensor[(780), float32]) {
  %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(1080, 1), float32] */, dtype="float32") /* ty=Tensor[(1080, 1), float32] */;
  %292 = cast(meta[relay.Constant][19] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %293 = reshape(%291, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %294 = reshape(%292, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %295 = @func_1580(%293, %294) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %296 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %297 = %295.4;
  (%296, %297, meta[relay.Constant][18] /* ty=Tensor[(1080, 1), float32] */, meta[relay.Constant][19] /* ty=Tensor[(780), float32] */)
}

def @func_8662() -> Tensor[(1008, 1), float32] {
  %298 = @func_7770() /* ty=(Tensor[(1008, 1), float64],) */;
  %299 = %298.0;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  acosh(%300) /* ty=Tensor[(1008, 1), float32] */
}

def @func_5086() -> (Tensor[(5, 1, 7), float64],) {
  %301 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%301,)
}

def @func_6428(%var_6329: Tensor[(10, 2, 9), float64], %var_6337: Tensor[(1080), float32], %var_6338: Tensor[(780), float32], %var_6358: Tensor[(1, 63), float32], %var_6418: Tensor[(10, 2, 9), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) {
  %302 = cast(%var_6337, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %303 = cast(%var_6338, dtype="float32") /* ty=Tensor[(780), float32] */;
  %304 = reshape(%302, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
  %305 = reshape(%303, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %306 = @func_5353(%304, %305) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) */;
  %307 = cast(meta[relay.Constant][20] /* ty=Tensor[(11088), float64] */, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %308 = cast(meta[relay.Constant][20] /* ty=Tensor[(11088), float64] */, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %309 = cast(%var_6358, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %310 = reshape(%307, newshape=[1008, 11]) /* ty=Tensor[(1008, 11), float64] */;
  %311 = reshape(%308, newshape=[1008, 11]) /* ty=Tensor[(1008, 11), float64] */;
  %312 = reshape(%309, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %313 = @func_4854(%310, %311, %312) /* ty=(Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) */;
  %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 528), uint64] */, dtype="uint64") /* ty=Tensor[(1, 528), uint64] */;
  %315 = reshape(%314, newshape=[528]) /* ty=Tensor[(528), uint64] */;
  %316 = @func_6159(%315) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
  %317 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %318 = log(%317) /* ty=Tensor[(10, 2, 9), float64] */;
  %319 = cast(%var_6329, dtype="int64") /* ty=Tensor[(10, 2, 9), int64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int64") /* ty=Tensor[(10, 2, 9), int64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %323 = logical_xor(%321, %322) /* ty=Tensor[(10, 2, 9), int64] */;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %325 = cast(%323, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %326 = exp(%325) /* ty=Tensor[(10, 2, 9), float32] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %328 = atanh(%327) /* ty=Tensor[(10, 2, 9), float64] */;
  %329 = cast(%var_6418, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = cast(%var_6338, dtype="float32") /* ty=Tensor[(780), float32] */;
  %334 = reshape(%333, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %335 = @func_109(%334) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %336 = %306.0;
  %337 = %313.0;
  %338 = %316.3;
  %339 = sigmoid(%324) /* ty=Tensor[(10, 2, 9), float64] */;
  %340 = not_equal(%331, %332) /* ty=Tensor[(10, 2, 9), bool] */;
  %341 = %335.0;
  (%336, %var_6337, %var_6338, %337, meta[relay.Constant][20] /* ty=Tensor[(11088), float64] */, %var_6358, %338, meta[relay.Constant][21] /* ty=Tensor[(1, 528), uint64] */, %339, %340, %341)
}

def @func_7438(%var_7429: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
  %342 = @func_6071() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %343 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %344 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %345 = cast(meta[relay.Constant][23] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %346 = reshape(%345, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %347 = @func_5116(%346) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) */;
  %348 = cast(%var_7429, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %349 = cast(%var_7429, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %350 = reshape(%348, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %351 = reshape(%349, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %352 = %342.0;
  %353 = %343.0;
  %354 = %344.0;
  %355 = %347.4;
  %356 = @func_4049(%350, %351) /* ty=Tensor[(14, 6, 15), int16] */;
  (%352, %353, %354, %355, meta[relay.Constant][23] /* ty=Tensor[(15), float64] */, %356, %var_7429)
}

def @func_6518() -> (Tensor[(1008, 1), float64],) {
  %357 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
  %358 = %357.0;
  (%358,)
}

def @func_9396(%var_9352: Tensor[(5, 12, 7), float64]) -> Tensor[(5, 12, 7), bool] {
  %359 = @func_9203() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %362 = cast(%var_9352, dtype="bool") /* ty=Tensor[(5, 12, 7), bool] */;
  logical_and(%361, %362) /* ty=Tensor[(5, 12, 7), bool] */
}

def @func_9566(%var_9561: Tensor[(12, 3, 13), bool]) -> Tensor[(12, 3, 13), bool] {
  %363 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 3, 13), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 13), bool] */;
  %364 = cast(%var_9561, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  logical_and(%363, %364) /* ty=Tensor[(12, 3, 13), bool] */
}

def @func_5116(%var_5103: Tensor[(15, 1), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) {
  %365 = cast(%var_5103, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %367 = reshape(%365, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %368 = reshape(%366, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %369 = @func_3299(%367, %368) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %370 = %369.0;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(5, 3, 15), float32] */;
  %372 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %373 = log2(%371) /* ty=Tensor[(5, 3, 15), float32] */;
  %374 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%372, %var_5103, meta[relay.Constant][25] /* ty=Tensor[(225), float64] */, %373, %374)
}

def @func_7336() -> (Tensor[(5, 1, 7), float64],) {
  %375 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  (%375,)
}

def @func_6037(%var_6025: Tensor[(1, 154), int32], %var_6026: Tensor[(70, 6), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(420), float64], Tensor[(1, 154), int32], Tensor[(70, 6), float64]) {
  %376 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %377 = cast(%var_6025, dtype="int32") /* ty=Tensor[(1, 154), int32] */;
  %378 = cast(%var_6026, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %379 = reshape(%377, newshape=[1, 11, 14]) /* ty=Tensor[(1, 11, 14), int32] */;
  %380 = reshape(%378, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %381 = @func_5414(%379, %380) /* ty=(Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) */;
  %382 = %376.1;
  %383 = %381.2;
  (%382, %383, %var_6025, %var_6026)
}

def @func_3382(%var_3369: Tensor[(7, 7, 12), int64]) -> (Tensor[(7, 7, 12), bool],) {
  %384 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 7, 12), int64] */, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %385 = shape_of(%var_3369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_3369, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = greater(%386, %387) /* ty=Tensor[(7, 7, 12), bool] */;
  (%388,)
}

def @func_9618() -> Tensor[(2, 24), bool] {
  %389 = @func_9112() /* ty=(Tensor[(2, 24), bool],) */;
  %389.0
}

def @func_4407(%var_4396: Tensor[(2, 12, 4), int16], %var_4397: Tensor[(2, 12, 4), int16], %var_4404: Tensor[(588), int64]) -> (Tensor[(2, 12, 4), int16], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
  %390 = cast(%var_4397, dtype="int16") /* ty=Tensor[(2, 12, 4), int16] */;
  %391 = shape_of(%var_4396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_4396, dtype="int16") /* ty=Tensor[(2, 12, 4), int16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %394 = cast(%var_4404, dtype="int64") /* ty=Tensor[(588), int64] */;
  %395 = reshape(%394, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
  %396 = @func_3382(%395) /* ty=(Tensor[(7, 7, 12), bool],) */;
  %397 = bitwise_and(%392, %393) /* ty=Tensor[(2, 12, 4), int16] */;
  %398 = %396.0;
  (%397, %398, %var_4404)
}

def @func_4562() -> Tensor[(5, 1, 7), float64] {
  @func_4324() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_5979() -> (Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) {
  %399 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %400 = %399.0;
  %401 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %406 = floor_divide(%403, %404) /* ty=Tensor[(5, ?, 7), float64] */;
  %407 = %405.0;
  (%406, %407)
}

def @func_7274() -> Tensor[(5, ?, 7), float64] {
  %408 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %409 = %408.0;
  %410 = @func_5833() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %411 = %410.0;
  %412 = cast(%409, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = not_equal(%414, %415) /* ty=Tensor[(5, ?, 7), bool] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(5, ?, 7), float64] */;
  %418 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%409, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%419, %420) /* ty=Tensor[(5, ?, 7), float64] */
}

def @func_6592() -> (Tensor[(5, 1, 7), float64],) {
  %421 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  (%421,)
}

def @func_4911() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) {
  %422 = cast(meta[relay.Constant][28] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %423 = reshape(%422, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %424 = @func_309(%423) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %425 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %426 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %427 = %424.0;
  (%425, %426, %427, meta[relay.Constant][28] /* ty=Tensor[(780), float32] */)
}

def @func_3224(%var_3212: Tensor[(11, 8, 6), uint64]) -> (Tensor[(11, 8, 6), float64],) {
  %428 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 8, 6), uint64] */, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %429 = shape_of(%var_3212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_3212, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %432 = maximum(%430, %431) /* ty=Tensor[(11, 8, 6), uint64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
  %434 = acos(%433) /* ty=Tensor[(11, 8, 6), float64] */;
  (%434,)
}

def @func_7179() -> Tensor[(5, 1, 7), float64] {
  @func_4383() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_3892(%var_3855: Tensor[(11, 13, 4), float64]) -> (Tensor[(11, 13, 4), bool], Tensor[(8, 4, 5), int16], Tensor[(4, 40), int16], Tensor[(1536), bool], Tensor[(1536), bool], Tensor[(216), float32], Tensor[(11, 13, 4), float64]) {
  %435 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %436 = shape_of(%var_3855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_3855, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = greater_equal(%437, %438) /* ty=Tensor[(11, 13, 4), bool] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %441 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(11, 13, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 40), int16] */, dtype="int16") /* ty=Tensor[(4, 40), int16] */;
  %445 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 40), int16] */, dtype="int16") /* ty=Tensor[(4, 40), int16] */;
  %446 = reshape(%444, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %447 = reshape(%445, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %448 = @func_1012(%446, %447) /* ty=(Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) */;
  %449 = cast(meta[relay.Constant][32] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %450 = cast(meta[relay.Constant][33] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %451 = reshape(%449, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %452 = reshape(%450, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
  %453 = @func_2714(%451, %452) /* ty=(Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) */;
  %454 = cast(%var_3855, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %455 = less_equal(%442, %443) /* ty=Tensor[(11, 13, 4), bool] */;
  %456 = %448.0;
  %457 = %453.2;
  %458 = log(%454) /* ty=Tensor[(11, 13, 4), float64] */;
  (%455, %456, meta[relay.Constant][31] /* ty=Tensor[(4, 40), int16] */, %457, meta[relay.Constant][32] /* ty=Tensor[(1536), bool] */, meta[relay.Constant][33] /* ty=Tensor[(216), float32] */, %458)
}

def @func_5139(%var_5131: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float64],) {
  %459 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %460 = shape_of(%var_5131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_5131, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %463 = power(%461, %462) /* ty=Tensor[(11, 13, 7), float64] */;
  (%463,)
}

def @func_2714(%var_2689: Tensor[(1536), bool], %var_2710: Tensor[(12, 18), float32]) -> (Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) {
  %464 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 2), float64] */;
  %465 = cast(%var_2689, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %466 = reshape(%465, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
  %467 = @func_520(%466) /* ty=(Tensor[(16, 6, 16), bool],) */;
  %468 = cast(%var_2710, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %469 = %467.0;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
  %471 = reshape(%468, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), float32] */;
  %472 = reshape(%470, newshape=[128, 12]) /* ty=Tensor[(128, 12), bool] */;
  %473 = @func_1968(%471, %472) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) */;
  %474 = acosh(%464) /* ty=Tensor[(15, 10, 2), float64] */;
  %475 = %473.2;
  (%474, %469, %var_2689, %475, %var_2710)
}

def @func_7623() -> (Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) {
  %476 = @func_7155() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) */;
  %477 = @func_7576() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %478 = %476.1;
  %479 = %477.0;
  (%478, %479)
}

def @func_9724(%var_9720: Tensor[(8, 1, 7), float32]) -> (Tensor[(8, 1, 7), float32],) {
  %480 = cast(%var_9720, dtype="float32") /* ty=Tensor[(8, 1, 7), float32] */;
  %481 = sinh(%480) /* ty=Tensor[(8, 1, 7), float32] */;
  (%481,)
}

def @func_1968(%var_1940: Tensor[(3, 8, 9), float32], %var_1959: Tensor[(128, 12), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) {
  %482 = cast(%var_1940, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %483 = cast(%var_1959, dtype="bool") /* ty=Tensor[(128, 12), bool] */;
  %484 = reshape(%483, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
  %485 = @func_520(%484) /* ty=(Tensor[(16, 6, 16), bool],) */;
  %486 = log2(%482) /* ty=Tensor[(3, 8, 9), float32] */;
  %487 = %485.0;
  (%486, %487, %var_1959)
}

def @func_7873() -> (Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  %488 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %489 = cast(meta[relay.Constant][36] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %490 = cast(meta[relay.Constant][36] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %491 = reshape(%489, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %492 = reshape(%490, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %493 = @func_2345(%491, %492) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %494 = %488.0;
  %495 = %493.1;
  (%494, %495, meta[relay.Constant][36] /* ty=Tensor[(54), uint64] */)
}

def @func_2884(%var_2877: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), float64] {
  %496 = cast(%var_2877, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
  cosh(%496) /* ty=Tensor[(9, 8, 14), float64] */
}

def @func_4635(%var_4598: Tensor[(5, 7, 7), float64]) -> (Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1080), float32] */, dtype="float32") /* ty=Tensor[(1, 1080), float32] */;
  %498 = cast(meta[relay.Constant][38] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %499 = reshape(%497, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %500 = reshape(%498, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %501 = @func_1580(%499, %500) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %502 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %504 = rsqrt(%503) /* ty=Tensor[(5, 1, 7), float64] */;
  %505 = cast(%504, dtype="uint64") /* ty=Tensor[(5, 1, 7), uint64] */;
  %506 = cast(%var_4598, dtype="uint64") /* ty=Tensor[(5, 7, 7), uint64] */;
  %507 = %501.1;
  %508 = multiply(%505, %506) /* ty=Tensor[(5, 7, 7), uint64] */;
  %509 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %510 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%507, meta[relay.Constant][37] /* ty=Tensor[(1, 1080), float32] */, meta[relay.Constant][38] /* ty=Tensor[(780), float32] */, %508, %509, %510)
}

def @func_6876(%var_6855: Tensor[(5, 28), float64], %var_6858: Tensor[(63), float32], %var_6865: Tensor[(528), uint64], %var_6871: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
  %511 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %514 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
  %515 = cast(%var_6855, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %516 = cast(meta[relay.Constant][39] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %517 = cast(meta[relay.Constant][40] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %518 = cast(%var_6858, dtype="float32") /* ty=Tensor[(63), float32] */;
  %519 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %520 = reshape(%515, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
  %521 = reshape(%516, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %522 = reshape(%517, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %523 = reshape(%518, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %524 = reshape(%519, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %525 = @func_4758(%520, %521, %522, %523, %524) /* ty=(Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
  %526 = cast(%var_6865, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %527 = reshape(%526, newshape=[528]) /* ty=Tensor[(528), uint64] */;
  %528 = @func_6159(%527) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
  %529 = cast(%var_6871, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %530 = cast(%var_6871, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %531 = reshape(%529, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %532 = reshape(%530, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %533 = cos(%513) /* ty=Tensor[(5, 1, 7), float32] */;
  %534 = %514.0;
  %535 = %525.2;
  %536 = %528.0;
  %537 = @func_4049(%531, %532) /* ty=Tensor[(14, 6, 15), int16] */;
  (%533, %534, %535, %var_6855, meta[relay.Constant][39] /* ty=Tensor[(48), bool] */, meta[relay.Constant][40] /* ty=Tensor[(576), bool] */, %var_6858, meta[relay.Constant][41] /* ty=Tensor[(756), float32] */, %536, %var_6865, %537, %var_6871)
}

def @func_8767() -> Tensor[(5, 1, 7), float64] {
  @func_8499() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_7576() -> (Tensor[(5, 1, 7), float64],) {
  %538 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %539 = %538.0;
  (%539,)
}

def @func_5414(%var_5388: Tensor[(1, 11, 14), int32], %var_5409: Tensor[(420), float64]) -> (Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) {
  %540 = cast(%var_5388, dtype="int32") /* ty=Tensor[(1, 11, 14), int32] */;
  %541 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 11, 14), int32] */;
  %542 = cast(%var_5409, dtype="float64") /* ty=Tensor[(420), float64] */;
  %543 = reshape(%542, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), float64] */;
  %544 = @func_3900(%543) /* ty=(Tensor[(2, 15, 14), float64],) */;
  %545 = subtract(%540, %541) /* ty=Tensor[(6, 11, 14), int32] */;
  %546 = %544.0;
  (%545, %546, %var_5409)
}

def @func_8073() -> (Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) {
  %547 = cast(meta[relay.Constant][43] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %548 = reshape(%547, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %549 = @func_6446(%548) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) */;
  %550 = @func_7274() /* ty=Tensor[(5, ?, 7), float64] */;
  %551 = %549.2;
  (%550, %551, meta[relay.Constant][43] /* ty=Tensor[(780), float32] */)
}

def @func_3299(%var_3274: Tensor[(5, 3, 1), float64], %var_3275: Tensor[(5, 3, 15), float64]) -> (Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) {
  %552 = cast(%var_3274, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %553 = cast(%var_3275, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
  %554 = cast(%var_3275, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
  %555 = floor_divide(%552, %553) /* ty=Tensor[(5, 3, 15), float64] */;
  %556 = rsqrt(%554) /* ty=Tensor[(5, 3, 15), float64] */;
  (%555, %556)
}

def @func_8408() -> (Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) {
  %557 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %558 = cast(meta[relay.Constant][44] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %559 = cast(meta[relay.Constant][45] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %560 = reshape(%558, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %561 = reshape(%559, newshape=[576, 1]) /* ty=Tensor[(576, 1), bool] */;
  %562 = @func_7232(%560, %561) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) */;
  %563 = %557.0;
  %564 = %562.3;
  (%563, %564, meta[relay.Constant][44] /* ty=Tensor[(140), float64] */, meta[relay.Constant][45] /* ty=Tensor[(576), bool] */)
}

def @func_6159(%var_6156: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
  %565 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %566 = @func_6071() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %567 = cast(%var_6156, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %568 = reshape(%567, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
  %569 = @func_3224(%568) /* ty=(Tensor[(11, 8, 6), float64],) */;
  %570 = %565.0;
  %571 = %566.0;
  %572 = %569.0;
  (%570, %571, %572, %var_6156)
}

def @func_7064(%var_7032: Tensor[(5, 2, 7), float64]) -> (Tensor[(5, 2, 7), float32], Tensor[(5, 1, 7), float64]) {
  %573 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %574 = cast(%573, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %575 = cast(%var_7032, dtype="bool") /* ty=Tensor[(5, 2, 7), bool] */;
  %576 = greater_equal(%574, %575) /* ty=Tensor[(5, 2, 7), bool] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(5, 2, 7), float32] */;
  %578 = @func_5710() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %579 = sigmoid(%577) /* ty=Tensor[(5, 2, 7), float32] */;
  %580 = %578.1;
  (%579, %580)
}

def @func_8199() -> (Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %581 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %583 = cast(%581, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %584 = @func_5270() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %585 = atanh(%582) /* ty=Tensor[(5, 1, 7), float32] */;
  %586 = log2(%583) /* ty=Tensor[(5, 1, 7), float64] */;
  %587 = %584.0;
  (%585, %586, %587)
}

def @func_9282(%var_9261: Tensor[(455), float64]) -> (Tensor[(1260), int16], Tensor[(5, 12, 7), float64], Tensor[(455), float64], Tensor[(780), float32]) {
  %588 = @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
  %589 = cast(%var_9261, dtype="float64") /* ty=Tensor[(455), float64] */;
  %590 = reshape(%589, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
  %591 = @func_8998(%590) /* ty=(Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) */;
  %592 = cast(%var_9261, dtype="float64") /* ty=Tensor[(455), float64] */;
  %593 = @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
  %594 = %588.1;
  %595 = %591.1;
  %596 = rsqrt(%592) /* ty=Tensor[(455), float64] */;
  %597 = %593.2;
  (%594, %595, %596, %597)
}

def @func_7155() -> (Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) {
  %598 = cast(meta[relay.Constant][46] /* ty=Tensor[(588), int64] */, dtype="int64") /* ty=Tensor[(588), int64] */;
  %599 = reshape(%598, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
  %600 = @func_3382(%599) /* ty=(Tensor[(7, 7, 12), bool],) */;
  %601 = cast(meta[relay.Constant][47] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %602 = cast(meta[relay.Constant][47] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %603 = reshape(%601, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %604 = reshape(%602, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %605 = @func_2345(%603, %604) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %606 = cast(meta[relay.Constant][48] /* ty=Tensor[(1001, 1), float64] */, dtype="float64") /* ty=Tensor[(1001, 1), float64] */;
  %607 = reshape(%606, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %608 = @func_5139(%607) /* ty=(Tensor[(11, 13, 7), float64],) */;
  %609 = @func_6474() /* ty=Tensor[(5, 1, 7), float64] */;
  %610 = %600.0;
  %611 = %605.1;
  %612 = %608.0;
  (%609, %610, meta[relay.Constant][46] /* ty=Tensor[(588), int64] */, %611, meta[relay.Constant][47] /* ty=Tensor[(54), uint64] */, %612, meta[relay.Constant][48] /* ty=Tensor[(1001, 1), float64] */)
}

def @func_520(%var_510: Tensor[(16, 6, 16), bool]) -> (Tensor[(16, 6, 16), bool],) {
  %613 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
  %614 = shape_of(%var_510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_510, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = logical_and(%615, %616) /* ty=Tensor[(16, 6, 16), bool] */;
  (%617,)
}

def @func_3492(%var_3464: Tensor[(5, 5, 3), float64], %var_3484: Tensor[(588), int64]) -> (Tensor[(5, 5, 3), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
  %618 = cast(%var_3464, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
  %619 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(5, 5, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %622 = floor_divide(%620, %621) /* ty=Tensor[(5, 5, 3), float64] */;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
  %624 = cast(meta[relay.Constant][51] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %625 = reshape(%624, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
  %626 = @func_3224(%625) /* ty=(Tensor[(11, 8, 6), float64],) */;
  %627 = cast(%var_3484, dtype="int64") /* ty=Tensor[(588), int64] */;
  %628 = reshape(%627, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
  %629 = @func_3382(%628) /* ty=(Tensor[(7, 7, 12), bool],) */;
  %630 = log2(%623) /* ty=Tensor[(5, 5, 3), float64] */;
  %631 = %626.0;
  %632 = %629.0;
  (%630, %631, meta[relay.Constant][51] /* ty=Tensor[(528), uint64] */, %632, %var_3484)
}

def @func_9827(%var_9799: Tensor[(16, 11, 6), float32], %var_9805: Tensor[(1, 1260), int16], %var_9813: Tensor[(15), float64], %var_9814: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1, 1260), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 3, 15), float64], Tensor[(15), float64], Tensor[(225), float64], Tensor[(16, 11, 6), bool]) {
  %633 = cast(%var_9805, dtype="int16") /* ty=Tensor[(1, 1260), int16] */;
  %634 = reshape(%633, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %635 = @func_7438(%634) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %636 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %637 = cast(%var_9813, dtype="float64") /* ty=Tensor[(15), float64] */;
  %638 = cast(%var_9814, dtype="float64") /* ty=Tensor[(225), float64] */;
  %639 = reshape(%637, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %640 = reshape(%638, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %641 = @func_3299(%639, %640) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %642 = cast(%var_9799, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %643 = cos(%642) /* ty=Tensor[(16, 11, 6), float32] */;
  %644 = cast(meta[relay.Constant][52] /* ty=Tensor[(16, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(16, 11, 6), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(16, 11, 6), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = %635.0;
  %649 = %636.0;
  %650 = %641.1;
  %651 = less(%646, %647) /* ty=Tensor[(16, 11, 6), bool] */;
  (%648, %var_9805, %649, %650, %var_9813, %var_9814, %651)
}

def @func_4931() -> (Tensor[(5, 1, 7), float64],) {
  %652 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
  %653 = %652.0;
  (%653,)
}

def @func_8018(%var_7995: Tensor[(1008, 4), float64]) -> (Tensor[(1008, 4), uint32], Tensor[(1008, 4), float64]) {
  %654 = @func_7770() /* ty=(Tensor[(1008, 1), float64],) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="uint32") /* ty=Tensor[(1008, 1), uint32] */;
  %657 = cast(%var_7995, dtype="uint32") /* ty=Tensor[(1008, 4), uint32] */;
  %658 = cast(%var_7995, dtype="float64") /* ty=Tensor[(1008, 4), float64] */;
  %659 = bitwise_xor(%656, %657) /* ty=Tensor[(1008, 4), uint32] */;
  %660 = asin(%658) /* ty=Tensor[(1008, 4), float64] */;
  (%659, %660)
}

def @func_8545(%var_8532: Tensor[(5, 11, 7), float64]) -> (Tensor[(5, 11, 7), bool],) {
  %661 = @func_8199() /* ty=(Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %662 = %661.2;
  %663 = cast(%662, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %664 = cast(%var_8532, dtype="bool") /* ty=Tensor[(5, 11, 7), bool] */;
  %665 = less_equal(%663, %664) /* ty=Tensor[(5, 11, 7), bool] */;
  (%665,)
}

def @func_1786(%var_1769: float64) -> (Tensor[(9, 8, 16), float64],) {
  %666 = cast(%var_1769, dtype="float64") /* ty=float64 */;
  %667 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %668 = divide(%666, %667) /* ty=Tensor[(9, 8, 16), float64] */;
  (%668,)
}

def @func_5270() -> (Tensor[(5, 1, 7), float64],) {
  %669 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %670 = %669.0;
  (%670,)
}

def @func_8340(%var_8336: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1, 140), float64], Tensor[(63), float32], Tensor[(528), uint64], Tensor[(1260), int16]) {
  %671 = @func_7623() /* ty=(Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) */;
  %672 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %673 = cast(meta[relay.Constant][55] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %674 = cast(%var_8336, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %675 = cast(meta[relay.Constant][56] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %676 = reshape(%672, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %677 = reshape(%673, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %678 = reshape(%674, newshape=[528]) /* ty=Tensor[(528), uint64] */;
  %679 = reshape(%675, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %680 = @func_6876(%676, %677, %678, %679) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %681 = %671.1;
  %682 = %680.11;
  (%681, %682, meta[relay.Constant][54] /* ty=Tensor[(1, 140), float64] */, meta[relay.Constant][55] /* ty=Tensor[(63), float32] */, %var_8336, meta[relay.Constant][56] /* ty=Tensor[(1260), int16] */)
}

def @func_8901() -> Tensor[(5, 1, 7), float64] {
  @func_7179() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8499() -> Tensor[(5, 1, 7), float64] {
  @func_4383() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8821() -> (Tensor[(1008, 1), float64], Tensor[(2, 15, 14), float64], Tensor[(420), float64], Tensor[(5, 1, 7), float64]) {
  %683 = @func_6518() /* ty=(Tensor[(1008, 1), float64],) */;
  %684 = cast(meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %685 = reshape(%684, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), float64] */;
  %686 = @func_3900(%685) /* ty=(Tensor[(2, 15, 14), float64],) */;
  %687 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %688 = %683.0;
  %689 = %686.0;
  %690 = %687.1;
  (%688, %689, meta[relay.Constant][57] /* ty=Tensor[(420), float64] */, %690)
}

def @main(%var_9855: Tensor[(90, 2), float64], %var_9856: Tensor[(1080), float32], %var_9857: Tensor[(780), float32], %var_9881: Tensor[(11088), float64]) -> (Tensor[(1260), int16], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(63), float32], Tensor[(5, 12, 7), bool], Tensor[(420), float64], Tensor[(11088), float64], Tensor[(90, 2), float32]) {
  %691 = @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
  %692 = cast(meta[relay.Constant][59] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %693 = reshape(%692, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float64] */;
  %694 = cast(%var_9855, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %695 = cast(%var_9856, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %696 = cast(%var_9857, dtype="float32") /* ty=Tensor[(780), float32] */;
  %697 = cast(meta[relay.Constant][58] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %698 = cast(%var_9855, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %699 = reshape(%694, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %700 = reshape(%695, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %701 = reshape(%696, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %702 = reshape(%697, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %703 = reshape(%698, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %704 = @func_6428(%699, %700, %701, %702, %703) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) */;
  %705 = %704.4;
  %706 = cast(%var_9881, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(1), int32] */;
  %708 = cast(%705, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), float64] */;
  %710 = cast(%var_9855, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %711 = asin(%710) /* ty=Tensor[(90, 2), float32] */;
  %712 = cast(%var_9855, dtype="uint8") /* ty=Tensor[(90, 2), uint8] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%711, dtype="uint8") /* ty=Tensor[(90, 2), uint8] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %716 = minimum(%714, %715) /* ty=Tensor[(90, 2), uint8] */;
  %717 = cast(%711, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(2), int32] */;
  %719 = cast(%716, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %721 = %691.1;
  %722 = @func_9396(%693) /* ty=Tensor[(5, 12, 7), bool] */;
  %723 = power(%708, %709) /* ty=Tensor[(11088), float64] */;
  %724 = power(%719, %720) /* ty=Tensor[(90, 2), float32] */;
  (%721, %var_9856, %var_9857, meta[relay.Constant][58] /* ty=Tensor[(63), float32] */, %722, meta[relay.Constant][59] /* ty=Tensor[(420), float64] */, %723, %724)
}

def @func_6446(%var_6444: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) {
  %725 = cast(meta[relay.Constant][60] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %726 = cast(meta[relay.Constant][60] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %727 = reshape(%725, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %728 = reshape(%726, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %729 = cast(%var_6444, dtype="float32") /* ty=Tensor[(780), float32] */;
  %730 = reshape(%729, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %731 = @func_309(%730) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %732 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %733 = @func_4049(%727, %728) /* ty=Tensor[(14, 6, 15), int16] */;
  %734 = %731.2;
  (%732, %733, meta[relay.Constant][60] /* ty=Tensor[(1260), int16] */, %734, %var_6444)
}

def @func_8308() -> (Tensor[(5, 1, 7), float64],) {
  %735 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %736 = %735.1;
  (%736,)
}

def @func_5833() -> (Tensor[(5, 1, 7), float64],) {
  %737 = @func_4562() /* ty=Tensor[(5, 1, 7), float64] */;
  (%737,)
}

def @func_8472() -> Tensor[(?, 9, 6), bool] {
  %738 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %738.1
}

def @func_9749() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %739 = @func_8901() /* ty=Tensor[(5, 1, 7), float64] */;
  %740 = @func_8240() /* ty=Tensor[(5, 1, 7), float64] */;
  (%739, %740)
}

def @func_6943(%var_6922: Tensor[(16, 9, 12), float64], %var_6927: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) {
  %741 = cast(%var_6922, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %742 = sinh(%741) /* ty=Tensor[(16, 9, 12), float64] */;
  %743 = cast(%var_6927, dtype="float32") /* ty=Tensor[(16, 9, 12), float32] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float32") /* ty=Tensor[(16, 9, 12), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %747 = cast(%742, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %748 = mod(%745, %746) /* ty=Tensor[(16, 9, 12), float32] */;
  %749 = log(%747) /* ty=Tensor[(16, 9, 12), float64] */;
  (%748, %749)
}

def @func_9445(%var_9431: float64, %var_9432: Tensor[(3, 78), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(6, 3, 13), float64], Tensor[(3, 78), float32]) {
  %750 = @func_8199() /* ty=(Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %751 = cast(%var_9431, dtype="float64") /* ty=float64 */;
  %752 = cast(%var_9432, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
  %753 = reshape(%751, newshape=[]) /* ty=float64 */;
  %754 = reshape(%752, newshape=[6, 3, 13]) /* ty=Tensor[(6, 3, 13), float64] */;
  %755 = @func_6286(%753, %754) /* ty=(Tensor[(6, 3, 13), float64],) */;
  %756 = cast(%var_9432, dtype="float32") /* ty=Tensor[(3, 78), float32] */;
  %757 = cast(%var_9431, dtype="float32") /* ty=float32 */;
  %758 = %750.0;
  %759 = %755.0;
  %760 = maximum(%756, %757) /* ty=Tensor[(3, 78), float32] */;
  (%758, %759, %760)
}

def @func_6212(%var_6201: Tensor[(14, 3, 8), float32]) -> (Tensor[(14, 3, 8), float32], Tensor[(5, 7, 7), uint64], Tensor[(35, 7), float64]) {
  %761 = cast(%var_6201, dtype="float32") /* ty=Tensor[(14, 3, 8), float32] */;
  %762 = cast(meta[relay.Constant][61] /* ty=Tensor[(35, 7), float64] */, dtype="float64") /* ty=Tensor[(35, 7), float64] */;
  %763 = reshape(%762, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %764 = @func_4635(%763) /* ty=(Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %765 = sigmoid(%761) /* ty=Tensor[(14, 3, 8), float32] */;
  %766 = %764.3;
  (%765, %766, meta[relay.Constant][61] /* ty=Tensor[(35, 7), float64] */)
}

def @func_8240() -> Tensor[(5, 1, 7), float64] {
  %767 = @func_7576() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %767.0
}

def @func_6474() -> Tensor[(5, 1, 7), float64] {
  %768 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %768.0
}

def @func_7752() -> (Tensor[(5, 1, 7), float64],) {
  %769 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %770 = %769.0;
  (%770,)
}

def @func_5225(%var_5192: Tensor[(5, 5, 7), float64], %var_5220: Tensor[(54), uint64]) -> (Tensor[(5, 5, 7), float32], Tensor[(9, 7, 1), float32], Tensor[(63), float32], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  %771 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %773 = cast(%var_5192, dtype="float32") /* ty=Tensor[(5, 5, 7), float32] */;
  %774 = cast(meta[relay.Constant][62] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %775 = reshape(%774, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
  %776 = @func_2898(%775) /* ty=(Tensor[(9, 7, 1), float32],) */;
  %777 = cast(%var_5220, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %778 = cast(%var_5220, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %779 = reshape(%777, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %780 = reshape(%778, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %781 = @func_2345(%779, %780) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %782 = power(%772, %773) /* ty=Tensor[(5, 5, 7), float32] */;
  %783 = %776.0;
  %784 = %781.1;
  (%782, %783, meta[relay.Constant][62] /* ty=Tensor[(63), float32] */, %784, %var_5220)
}

def @func_3099(%var_3030: Tensor[(16, 3, 1), bool], %var_3031: Tensor[(16, 3, 12), bool], %var_3036: Tensor[(16, 3, 12), bool], %var_3053: Tensor[(63), float32], %var_3068: Tensor[(1536), bool], %var_3085: Tensor[(9, 7, 12), float32]) -> (Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) {
  %785 = cast(%var_3030, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %786 = cast(%var_3031, dtype="bool") /* ty=Tensor[(16, 3, 12), bool] */;
  %787 = cast(%var_3036, dtype="int16") /* ty=Tensor[(16, 3, 12), int16] */;
  %788 = shape_of(%var_3031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%var_3031, dtype="int16") /* ty=Tensor[(16, 3, 12), int16] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %791 = cast(%var_3068, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %792 = cast(meta[relay.Constant][63] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %793 = reshape(%791, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %794 = reshape(%792, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
  %795 = @func_2714(%793, %794) /* ty=(Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) */;
  %796 = cast(%var_3053, dtype="float32") /* ty=Tensor[(63), float32] */;
  %797 = reshape(%796, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
  %798 = @func_2898(%797) /* ty=(Tensor[(9, 7, 1), float32],) */;
  %799 = %798.0;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(9, 7, 1), float32] */;
  %801 = cast(%var_3085, dtype="float32") /* ty=Tensor[(9, 7, 12), float32] */;
  %802 = cast(%var_3068, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %803 = cast(%799, dtype="uint8") /* ty=Tensor[(9, 7, 1), uint8] */;
  %804 = logical_or(%785, %786) /* ty=Tensor[(16, 3, 12), bool] */;
  %805 = bitwise_and(%789, %790) /* ty=Tensor[(16, 3, 12), int16] */;
  %806 = %795.1;
  %807 = mod(%800, %801) /* ty=Tensor[(9, 7, 12), float32] */;
  %808 = maximum(%802, %803) /* ty=Tensor[(9, 7, 1536), uint8] */;
  (%804, %805, %var_3053, %806, meta[relay.Constant][63] /* ty=Tensor[(216), float32] */, %807, %808)
}

def @func_3900(%var_3897: Tensor[(2, 15, 14), float64]) -> (Tensor[(2, 15, 14), float64],) {
  %809 = cast(%var_3897, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  %810 = atan(%809) /* ty=Tensor[(2, 15, 14), float64] */;
  (%810,)
}

def @func_6198() -> (Tensor[(5, 1, 7), float64],) {
  %811 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %812 = %811.0;
  (%812,)
}

def @func_4049(%var_4039: Tensor[(14, 6, 15), int16], %var_4040: Tensor[(14, 6, 15), int16]) -> Tensor[(14, 6, 15), int16] {
  %813 = cast(%var_4040, dtype="int16") /* ty=Tensor[(14, 6, 15), int16] */;
  %814 = shape_of(%var_4039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%var_4039, dtype="int16") /* ty=Tensor[(14, 6, 15), int16] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%815, %816) /* ty=Tensor[(14, 6, 15), int16] */
}

def @func_5930() -> (Tensor[(5, 1, 7), float64],) {
  %817 = @func_4931() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %818 = %817.0;
  (%818,)
}

def @func_6674(%var_6664: Tensor[(5, 5, 7), float64]) -> (Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) {
  %819 = cast(meta[relay.Constant][64] /* ty=Tensor[(15, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %820 = reshape(%819, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %821 = @func_5116(%820) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) */;
  %822 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
  %823 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %824 = cast(%823, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %825 = cast(%var_6664, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %826 = %821.1;
  %827 = %822.1;
  %828 = less(%824, %825) /* ty=Tensor[(5, 5, 7), bool] */;
  (%826, meta[relay.Constant][64] /* ty=Tensor[(15, 1), float64] */, %827, %828)
}

def @func_1580(%var_1553: Tensor[(12, 15, 6), float32], %var_1560: Tensor[(780), float32]) -> (Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) {
  %829 = cast(%var_1560, dtype="float32") /* ty=Tensor[(780), float32] */;
  %830 = reshape(%829, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %831 = @func_309(%830) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %832 = cast(meta[relay.Constant][65] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %833 = reshape(%832, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
  %834 = @func_520(%833) /* ty=(Tensor[(16, 6, 16), bool],) */;
  %835 = cast(%var_1553, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %836 = cos(%835) /* ty=Tensor[(12, 15, 6), float32] */;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(12, 15, 6), float64] */;
  %838 = %831.3;
  %839 = %834.0;
  %840 = atanh(%837) /* ty=Tensor[(12, 15, 6), float64] */;
  (%838, %var_1560, %839, meta[relay.Constant][65] /* ty=Tensor[(1536), bool] */, %840)
}

def @func_7919(%var_7916: Tensor[(63), float32], %var_7917: Tensor[(4, 132), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1260), int16], Tensor[(140), float64], Tensor[(63), float32], Tensor[(4, 132), uint64]) {
  %841 = @func_6592() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %842 = cast(meta[relay.Constant][66] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %843 = reshape(%842, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %844 = @func_7438(%843) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %845 = cast(meta[relay.Constant][67] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %846 = cast(%var_7916, dtype="float32") /* ty=Tensor[(63), float32] */;
  %847 = cast(%var_7917, dtype="uint64") /* ty=Tensor[(4, 132), uint64] */;
  %848 = cast(meta[relay.Constant][66] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %849 = reshape(%845, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %850 = reshape(%846, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %851 = reshape(%847, newshape=[528]) /* ty=Tensor[(528), uint64] */;
  %852 = reshape(%848, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %853 = @func_6876(%849, %850, %851, %852) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %854 = %841.0;
  %855 = %844.1;
  %856 = %853.11;
  (%854, %855, meta[relay.Constant][66] /* ty=Tensor[(1260), int16] */, %856, meta[relay.Constant][67] /* ty=Tensor[(140), float64] */, %var_7916, %var_7917)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3227(%var_3225: Tensor[(11, 8, 6), uint64]) -> (Tensor[(11, 8, 6), float64],) {
  @func_3224(%var_3225) /* ty=(Tensor[(11, 8, 6), float64],) */
}

def @func_8343(%var_8341: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1, 140), float64], Tensor[(63), float32], Tensor[(528), uint64], Tensor[(1260), int16]) {
  @func_8340(%var_8341) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1, 140), float64], Tensor[(63), float32], Tensor[(528), uint64], Tensor[(1260), int16]) */
}

def @func_1789(%var_1787: float64) -> (Tensor[(9, 8, 16), float64],) {
  @func_1786(%var_1787) /* ty=(Tensor[(9, 8, 16), float64],) */
}

def @func_4472() -> (Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) {
  @func_4470() /* ty=(Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) */
}

def @func_9566(%var_9561: Tensor[(12, 3, 13), bool]) -> Tensor[(12, 3, 13), bool] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 3, 13), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 13), bool] */;
  %1 = cast(%var_9561, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  logical_and(%0, %1) /* ty=Tensor[(12, 3, 13), bool] */
}

def @func_8473() -> Tensor[(?, 9, 6), bool] {
  %3 = fn () -> Tensor[(?, 9, 6), bool] {
    %2 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
    %2.1
  };
  %3() /* ty=Tensor[(?, 9, 6), bool] */
}

def @func_6449(%var_6447: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) {
  @func_6446(%var_6447) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) */
}

def @func_7345() -> (Tensor[(1008, 1), float64],) {
  %6 = fn () -> (Tensor[(1008, 1), float64],) {
    %4 = @func_6518() /* ty=(Tensor[(1008, 1), float64],) */;
    %5 = %4.0;
    (%5,)
  };
  %6() /* ty=(Tensor[(1008, 1), float64],) */
}

def @func_8822() -> (Tensor[(1008, 1), float64], Tensor[(2, 15, 14), float64], Tensor[(420), float64], Tensor[(5, 1, 7), float64]) {
  %15 = fn () -> (Tensor[(1008, 1), float64], Tensor[(2, 15, 14), float64], Tensor[(420), float64], Tensor[(5, 1, 7), float64]) {
    %7 = @func_6518() /* ty=(Tensor[(1008, 1), float64],) */;
    %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %9 = reshape(%8, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), float64] */;
    %10 = @func_3900(%9) /* ty=(Tensor[(2, 15, 14), float64],) */;
    %11 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %12 = %7.0;
    %13 = %10.0;
    %14 = %11.1;
    (%12, %13, meta[relay.Constant][1] /* ty=Tensor[(420), float64] */, %14)
  };
  %15() /* ty=(Tensor[(1008, 1), float64], Tensor[(2, 15, 14), float64], Tensor[(420), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_1583(%var_1581: Tensor[(12, 15, 6), float32], %var_1582: Tensor[(780), float32]) -> (Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) {
  %28 = fn (%var_1553: Tensor[(12, 15, 6), float32], %var_1560: Tensor[(780), float32]) -> (Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) {
    %16 = cast(%var_1560, dtype="float32") /* ty=Tensor[(780), float32] */;
    %17 = reshape(%16, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
    %18 = @func_309(%17) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
    %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %20 = reshape(%19, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
    %21 = @func_520(%20) /* ty=(Tensor[(16, 6, 16), bool],) */;
    %22 = cast(%var_1553, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
    %23 = cos(%22) /* ty=Tensor[(12, 15, 6), float32] */;
    %24 = cast(%23, dtype="float64") /* ty=Tensor[(12, 15, 6), float64] */;
    %25 = %18.3;
    %26 = %21.0;
    %27 = atanh(%24) /* ty=Tensor[(12, 15, 6), float64] */;
    (%25, %var_1560, %26, meta[relay.Constant][2] /* ty=Tensor[(1536), bool] */, %27)
  };
  %28(%var_1581, %var_1582) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */
}

def @func_4411(%var_4408: Tensor[(2, 12, 4), int16], %var_4409: Tensor[(2, 12, 4), int16], %var_4410: Tensor[(588), int64]) -> (Tensor[(2, 12, 4), int16], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
  %38 = fn (%var_4396: Tensor[(2, 12, 4), int16], %var_4397: Tensor[(2, 12, 4), int16], %var_4404: Tensor[(588), int64]) -> (Tensor[(2, 12, 4), int16], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
    %29 = cast(%var_4397, dtype="int16") /* ty=Tensor[(2, 12, 4), int16] */;
    %30 = shape_of(%var_4396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%var_4396, dtype="int16") /* ty=Tensor[(2, 12, 4), int16] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %33 = cast(%var_4404, dtype="int64") /* ty=Tensor[(588), int64] */;
    %34 = reshape(%33, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
    %35 = @func_3382(%34) /* ty=(Tensor[(7, 7, 12), bool],) */;
    %36 = bitwise_and(%31, %32) /* ty=Tensor[(2, 12, 4), int16] */;
    %37 = %35.0;
    (%36, %37, %var_4404)
  };
  %38(%var_4408, %var_4409, %var_4410) /* ty=(Tensor[(2, 12, 4), int16], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) */
}

def @func_9556() -> (Tensor[(5, ?, 7), float64],) {
  %40 = fn () -> (Tensor[(5, ?, 7), float64],) {
    %39 = @func_7274() /* ty=Tensor[(5, ?, 7), float64] */;
    (%39,)
  };
  %40() /* ty=(Tensor[(5, ?, 7), float64],) */
}

def @func_5119(%var_5117: Tensor[(15, 1), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) {
  @func_5116(%var_5117) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) */
}

def @func_3895(%var_3893: Tensor[(11, 13, 4), float64]) -> (Tensor[(11, 13, 4), bool], Tensor[(8, 4, 5), int16], Tensor[(4, 40), int16], Tensor[(1536), bool], Tensor[(1536), bool], Tensor[(216), float32], Tensor[(11, 13, 4), float64]) {
  @func_3892(%var_3893) /* ty=(Tensor[(11, 13, 4), bool], Tensor[(8, 4, 5), int16], Tensor[(4, 40), int16], Tensor[(1536), bool], Tensor[(1536), bool], Tensor[(216), float32], Tensor[(11, 13, 4), float64]) */
}

def @func_8902() -> Tensor[(5, 1, 7), float64] {
  %41 = fn () -> Tensor[(5, 1, 7), float64] {
    @func_7179() /* ty=Tensor[(5, 1, 7), float64] */
  };
  %41() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6214(%var_6213: Tensor[(14, 3, 8), float32]) -> (Tensor[(14, 3, 8), float32], Tensor[(5, 7, 7), uint64], Tensor[(35, 7), float64]) {
  %48 = fn (%var_6201: Tensor[(14, 3, 8), float32]) -> (Tensor[(14, 3, 8), float32], Tensor[(5, 7, 7), uint64], Tensor[(35, 7), float64]) {
    %42 = cast(%var_6201, dtype="float32") /* ty=Tensor[(14, 3, 8), float32] */;
    %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(35, 7), float64] */, dtype="float64") /* ty=Tensor[(35, 7), float64] */;
    %44 = reshape(%43, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %45 = @func_4635(%44) /* ty=(Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %46 = sigmoid(%42) /* ty=Tensor[(14, 3, 8), float32] */;
    %47 = %45.3;
    (%46, %47, meta[relay.Constant][3] /* ty=Tensor[(35, 7), float64] */)
  };
  %48(%var_6213) /* ty=(Tensor[(14, 3, 8), float32], Tensor[(5, 7, 7), uint64], Tensor[(35, 7), float64]) */
}

def @func_6446(%var_6444: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) {
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %51 = reshape(%49, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %52 = reshape(%50, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %53 = cast(%var_6444, dtype="float32") /* ty=Tensor[(780), float32] */;
  %54 = reshape(%53, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %55 = @func_309(%54) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %56 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %57 = @func_4049(%51, %52) /* ty=Tensor[(14, 6, 15), int16] */;
  %58 = %55.2;
  (%56, %57, meta[relay.Constant][4] /* ty=Tensor[(1260), int16] */, %58, %var_6444)
}

def @func_7753() -> (Tensor[(5, 1, 7), float64],) {
  %61 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %59 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %60 = %59.0;
    (%60,)
  };
  %61() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_8272() -> Tensor[(5, 1, 7), float64] {
  %62 = @func_7752() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %62.0
}

def @func_7696(%var_7693: Tensor[(63, 1), float32], %var_7694: Tensor[(1536), bool], %var_7695: Tensor[(756), float32]) -> (Tensor[(5, ?, 7), float64], Tensor[(16, 6, 16), bool], Tensor[(48, 1), bool], Tensor[(576), bool], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(16, 9, 12), float32], Tensor[(1728), float64], Tensor[(63, 1), float32]) {
  %87 = fn (%var_7671: Tensor[(63, 1), float32], %var_7672: Tensor[(1536), bool], %var_7673: Tensor[(756), float32]) -> (Tensor[(5, ?, 7), float64], Tensor[(16, 6, 16), bool], Tensor[(48, 1), bool], Tensor[(576), bool], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(16, 9, 12), float32], Tensor[(1728), float64], Tensor[(63, 1), float32]) {
    %63 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(48, 1), bool] */, dtype="bool") /* ty=Tensor[(48, 1), bool] */;
    %65 = cast(meta[relay.Constant][6] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %67 = cast(%var_7671, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
    %68 = cast(%var_7672, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %69 = cast(%var_7673, dtype="float32") /* ty=Tensor[(756), float32] */;
    %70 = reshape(%64, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), bool] */;
    %71 = reshape(%65, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
    %72 = reshape(%66, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
    %73 = reshape(%67, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %74 = reshape(%68, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
    %75 = reshape(%69, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float32] */;
    %76 = @func_3099(%70, %71, %72, %73, %74, %75) /* ty=(Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) */;
    %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %79 = reshape(%77, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
    %80 = reshape(%78, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
    %81 = @func_6943(%79, %80) /* ty=(Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) */;
    %82 = cast(%var_7671, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
    %83 = %63.0;
    %84 = %76.3;
    %85 = %81.0;
    %86 = log(%82) /* ty=Tensor[(63, 1), float32] */;
    (%83, %84, meta[relay.Constant][5] /* ty=Tensor[(48, 1), bool] */, meta[relay.Constant][6] /* ty=Tensor[(576), bool] */, %var_7672, %var_7673, %85, meta[relay.Constant][7] /* ty=Tensor[(1728), float64] */, %86)
  };
  %87(%var_7693, %var_7694, %var_7695) /* ty=(Tensor[(5, ?, 7), float64], Tensor[(16, 6, 16), bool], Tensor[(48, 1), bool], Tensor[(576), bool], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(16, 9, 12), float32], Tensor[(1728), float64], Tensor[(63, 1), float32]) */
}

def @func_2887(%var_2885: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), float64] {
  @func_2884(%var_2885) /* ty=Tensor[(9, 8, 14), float64] */
}

def @func_1971(%var_1969: Tensor[(3, 8, 9), float32], %var_1970: Tensor[(128, 12), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) {
  %94 = fn (%var_1940: Tensor[(3, 8, 9), float32], %var_1959: Tensor[(128, 12), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) {
    %88 = cast(%var_1940, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %89 = cast(%var_1959, dtype="bool") /* ty=Tensor[(128, 12), bool] */;
    %90 = reshape(%89, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
    %91 = @func_520(%90) /* ty=(Tensor[(16, 6, 16), bool],) */;
    %92 = log2(%88) /* ty=Tensor[(3, 8, 9), float32] */;
    %93 = %91.0;
    (%92, %93, %var_1959)
  };
  %94(%var_1969, %var_1970) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) */
}

def @func_6593() -> (Tensor[(5, 1, 7), float64],) {
  %96 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %95 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
    (%95,)
  };
  %96() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_7066(%var_7065: Tensor[(5, 2, 7), float64]) -> (Tensor[(5, 2, 7), float32], Tensor[(5, 1, 7), float64]) {
  %105 = fn (%var_7032: Tensor[(5, 2, 7), float64]) -> (Tensor[(5, 2, 7), float32], Tensor[(5, 1, 7), float64]) {
    %97 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
    %98 = cast(%97, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %99 = cast(%var_7032, dtype="bool") /* ty=Tensor[(5, 2, 7), bool] */;
    %100 = greater_equal(%98, %99) /* ty=Tensor[(5, 2, 7), bool] */;
    %101 = cast(%100, dtype="float32") /* ty=Tensor[(5, 2, 7), float32] */;
    %102 = @func_5710() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %103 = sigmoid(%101) /* ty=Tensor[(5, 2, 7), float32] */;
    %104 = %102.1;
    (%103, %104)
  };
  %105(%var_7065) /* ty=(Tensor[(5, 2, 7), float32], Tensor[(5, 1, 7), float64]) */
}

def @func_9204() -> (Tensor[(5, 1, 7), float64],) {
  %108 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %106 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
    %107 = %106.0;
    (%107,)
  };
  %108() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_8767() -> Tensor[(5, 1, 7), float64] {
  @func_8499() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6037(%var_6025: Tensor[(1, 154), int32], %var_6026: Tensor[(70, 6), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(420), float64], Tensor[(1, 154), int32], Tensor[(70, 6), float64]) {
  %109 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %110 = cast(%var_6025, dtype="int32") /* ty=Tensor[(1, 154), int32] */;
  %111 = cast(%var_6026, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %112 = reshape(%110, newshape=[1, 11, 14]) /* ty=Tensor[(1, 11, 14), int32] */;
  %113 = reshape(%111, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %114 = @func_5414(%112, %113) /* ty=(Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) */;
  %115 = %109.1;
  %116 = %114.2;
  (%115, %116, %var_6025, %var_6026)
}

def @func_8408() -> (Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) {
  %117 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %120 = reshape(%118, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %121 = reshape(%119, newshape=[576, 1]) /* ty=Tensor[(576, 1), bool] */;
  %122 = @func_7232(%120, %121) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) */;
  %123 = %117.0;
  %124 = %122.3;
  (%123, %124, meta[relay.Constant][8] /* ty=Tensor[(140), float64] */, meta[relay.Constant][9] /* ty=Tensor[(576), bool] */)
}

def @func_3382(%var_3369: Tensor[(7, 7, 12), int64]) -> (Tensor[(7, 7, 12), bool],) {
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 7, 12), int64] */, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %126 = shape_of(%var_3369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_3369, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = greater(%127, %128) /* ty=Tensor[(7, 7, 12), bool] */;
  (%129,)
}

def @func_5414(%var_5388: Tensor[(1, 11, 14), int32], %var_5409: Tensor[(420), float64]) -> (Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) {
  %130 = cast(%var_5388, dtype="int32") /* ty=Tensor[(1, 11, 14), int32] */;
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 11, 14), int32] */;
  %132 = cast(%var_5409, dtype="float64") /* ty=Tensor[(420), float64] */;
  %133 = reshape(%132, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), float64] */;
  %134 = @func_3900(%133) /* ty=(Tensor[(2, 15, 14), float64],) */;
  %135 = subtract(%130, %131) /* ty=Tensor[(6, 11, 14), int32] */;
  %136 = %134.0;
  (%135, %136, %var_5409)
}

def @func_5887() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) {
  %142 = fn () -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) {
    %137 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
    %138 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    %139 = cast(%138, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
    %140 = %137.1;
    %141 = asin(%139) /* ty=Tensor[(5, 1, 7), float32] */;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */
}

def @func_6255(%var_6216: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, ?, 4), int16], Tensor[(14, ?, 4), int16], Tensor[(5, 1, 7), float64]) {
  %143 = cast(%var_6216, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %144 = exp(%143) /* ty=Tensor[(14, 1, 4), float32] */;
  %145 = cast(%var_6216, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %149 = cast(%144, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %150 = shape_of(%var_6216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_6216, dtype="int16") /* ty=Tensor[(14, 1, 4), int16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %153 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %154 = bitwise_xor(%147, %148) /* ty=Tensor[(14, ?, 4), int16] */;
  %155 = right_shift(%151, %152) /* ty=Tensor[(14, ?, 4), int16] */;
  %156 = %153.0;
  (%154, %155, %156)
}

def @func_7179() -> Tensor[(5, 1, 7), float64] {
  @func_4383() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_7441(%var_7439: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
  @func_7438(%var_7439) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */
}

def @func_4384() -> Tensor[(5, 1, 7), float64] {
  %157 = fn () -> Tensor[(5, 1, 7), float64] {
    @func_4328() /* ty=Tensor[(5, 1, 7), float64] */
  };
  %157() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6674(%var_6664: Tensor[(5, 5, 7), float64]) -> (Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) {
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %159 = reshape(%158, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %160 = @func_5116(%159) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) */;
  %161 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
  %162 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %163 = cast(%162, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %164 = cast(%var_6664, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %165 = %160.1;
  %166 = %161.1;
  %167 = less(%163, %164) /* ty=Tensor[(5, 5, 7), bool] */;
  (%165, meta[relay.Constant][12] /* ty=Tensor[(15, 1), float64] */, %166, %167)
}

def @func_109(%var_102: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), float32],) {
  %168 = cast(%var_102, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %169 = asinh(%168) /* ty=Tensor[(5, 12, 13), float32] */;
  (%169,)
}

def @func_3224(%var_3212: Tensor[(11, 8, 6), uint64]) -> (Tensor[(11, 8, 6), float64],) {
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 8, 6), uint64] */, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %171 = shape_of(%var_3212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_3212, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %174 = maximum(%172, %173) /* ty=Tensor[(11, 8, 6), uint64] */;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
  %176 = acos(%175) /* ty=Tensor[(11, 8, 6), float64] */;
  (%176,)
}

def @func_6286(%var_6277: float64, %var_6278: Tensor[(6, 3, 13), float64]) -> (Tensor[(6, 3, 13), float64],) {
  %177 = cast(%var_6277, dtype="float64") /* ty=float64 */;
  %178 = cast(%var_6278, dtype="float64") /* ty=Tensor[(6, 3, 13), float64] */;
  %179 = floor_mod(%177, %178) /* ty=Tensor[(6, 3, 13), float64] */;
  (%179,)
}

def @func_7236(%var_7234: Tensor[(140), float64], %var_7235: Tensor[(576, 1), bool]) -> (Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) {
  @func_7232(%var_7234, %var_7235) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) */
}

def @func_6677(%var_6675: Tensor[(5, 5, 7), float64]) -> (Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) {
  @func_6674(%var_6675) /* ty=(Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) */
}

def @func_8242() -> Tensor[(5, 1, 7), float64] {
  @func_8240() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8501() -> Tensor[(5, 1, 7), float64] {
  @func_8499() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6041(%var_6039: Tensor[(1, 154), int32], %var_6040: Tensor[(70, 6), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(420), float64], Tensor[(1, 154), int32], Tensor[(70, 6), float64]) {
  @func_6037(%var_6039, %var_6040) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(420), float64], Tensor[(1, 154), int32], Tensor[(70, 6), float64]) */
}

def @func_5833() -> (Tensor[(5, 1, 7), float64],) {
  %180 = @func_4562() /* ty=Tensor[(5, 1, 7), float64] */;
  (%180,)
}

def @func_9114() -> (Tensor[(2, 24), bool],) {
  @func_9112() /* ty=(Tensor[(2, 24), bool],) */
}

def @func_9619() -> Tensor[(2, 24), bool] {
  %182 = fn () -> Tensor[(2, 24), bool] {
    %181 = @func_9112() /* ty=(Tensor[(2, 24), bool],) */;
    %181.0
  };
  %182() /* ty=Tensor[(2, 24), bool] */
}

def @func_8150(%var_8148: Tensor[(1080), float32], %var_8149: Tensor[(780, 1), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(1080), float32], Tensor[(780, 1), float32]) {
  %191 = fn (%var_8143: Tensor[(1080), float32], %var_8144: Tensor[(780, 1), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(1080), float32], Tensor[(780, 1), float32]) {
    %183 = @func_7336() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %184 = cast(%var_8143, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %185 = cast(%var_8144, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %186 = reshape(%184, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
    %187 = reshape(%185, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %188 = @func_1580(%186, %187) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
    %189 = %183.0;
    %190 = %188.3;
    (%189, %190, %var_8143, %var_8144)
  };
  %191(%var_8148, %var_8149) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(1080), float32], Tensor[(780, 1), float32]) */
}

def @func_1012(%var_901: Tensor[(8, 4, 5), int16], %var_902: Tensor[(8, 4, 5), int16]) -> (Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) {
  %192 = cast(%var_902, dtype="int16") /* ty=Tensor[(8, 4, 5), int16] */;
  %193 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_901, dtype="int16") /* ty=Tensor[(8, 4, 5), int16] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %196 = cast(%var_902, dtype="float64") /* ty=Tensor[(8, 4, 5), float64] */;
  %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %198 = reshape(%197, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
  %199 = @func_309(%198) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
  %200 = %199.3;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(5, 12, 13), float32] */;
  %202 = reshape(%201, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %203 = @func_109(%202) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %204 = multiply(%194, %195) /* ty=Tensor[(8, 4, 5), int16] */;
  %205 = log10(%196) /* ty=Tensor[(8, 4, 5), float64] */;
  %206 = %203.0;
  (%204, %205, %200, meta[relay.Constant][14] /* ty=Tensor[(780), float32] */, %206)
}

def @func_3385(%var_3383: Tensor[(7, 7, 12), int64]) -> (Tensor[(7, 7, 12), bool],) {
  @func_3382(%var_3383) /* ty=(Tensor[(7, 7, 12), bool],) */
}

def @func_5712() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  @func_5710() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_8309() -> (Tensor[(5, 1, 7), float64],) {
  %209 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %207 = @func_5979() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %208 = %207.1;
    (%208,)
  };
  %209() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_7181() -> Tensor[(5, 1, 7), float64] {
  @func_7179() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_4764(%var_4759: Tensor[(5, 4, 7), float64], %var_4760: Tensor[(48), bool], %var_4761: Tensor[(576), bool], %var_4762: Tensor[(63), float32], %var_4763: Tensor[(756), float32]) -> (Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
  %232 = fn (%var_4726: Tensor[(5, 4, 7), float64], %var_4732: Tensor[(48), bool], %var_4733: Tensor[(576), bool], %var_4734: Tensor[(63), float32], %var_4736: Tensor[(756), float32]) -> (Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
    %210 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
    %211 = cast(%210, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %212 = cast(%var_4726, dtype="bool") /* ty=Tensor[(5, 4, 7), bool] */;
    %213 = cast(%var_4732, dtype="bool") /* ty=Tensor[(48), bool] */;
    %214 = cast(%var_4733, dtype="bool") /* ty=Tensor[(576), bool] */;
    %215 = cast(%var_4733, dtype="bool") /* ty=Tensor[(576), bool] */;
    %216 = cast(%var_4734, dtype="float32") /* ty=Tensor[(63), float32] */;
    %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %218 = cast(%var_4736, dtype="float32") /* ty=Tensor[(756), float32] */;
    %219 = reshape(%213, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), bool] */;
    %220 = reshape(%214, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
    %221 = reshape(%215, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), bool] */;
    %222 = reshape(%216, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %223 = reshape(%217, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
    %224 = reshape(%218, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float32] */;
    %225 = @func_3099(%219, %220, %221, %222, %223, %224) /* ty=(Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) */;
    %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
    %227 = reshape(%226, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
    %228 = @func_3224(%227) /* ty=(Tensor[(11, 8, 6), float64],) */;
    %229 = not_equal(%211, %212) /* ty=Tensor[(5, 4, 7), bool] */;
    %230 = %225.1;
    %231 = %228.0;
    (%229, %230, %var_4732, %var_4733, %var_4734, meta[relay.Constant][15] /* ty=Tensor[(1536), bool] */, %var_4736, %231, meta[relay.Constant][16] /* ty=Tensor[(528), uint64] */)
  };
  %232(%var_4759, %var_4760, %var_4761, %var_4762, %var_4763) /* ty=(Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */
}

def @func_3299(%var_3274: Tensor[(5, 3, 1), float64], %var_3275: Tensor[(5, 3, 15), float64]) -> (Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) {
  %233 = cast(%var_3274, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %234 = cast(%var_3275, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
  %235 = cast(%var_3275, dtype="float64") /* ty=Tensor[(5, 3, 15), float64] */;
  %236 = floor_divide(%233, %234) /* ty=Tensor[(5, 3, 15), float64] */;
  %237 = rsqrt(%235) /* ty=Tensor[(5, 3, 15), float64] */;
  (%236, %237)
}

def @func_8240() -> Tensor[(5, 1, 7), float64] {
  %238 = @func_7576() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %238.0
}

def @func_5931() -> (Tensor[(5, 1, 7), float64],) {
  %241 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %239 = @func_4931() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_5353(%var_5342: Tensor[(3, 360), float32], %var_5343: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) {
  %242 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
  %244 = cast(%var_5342, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %245 = cast(%var_5343, dtype="float32") /* ty=Tensor[(780), float32] */;
  %246 = reshape(%244, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %247 = reshape(%245, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %248 = @func_1580(%246, %247) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %249 = cast(meta[relay.Constant][17] /* ty=Tensor[(91, 11), float64] */, dtype="float64") /* ty=Tensor[(91, 11), float64] */;
  %250 = reshape(%249, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %251 = @func_5139(%250) /* ty=(Tensor[(11, 13, 7), float64],) */;
  %252 = sin(%243) /* ty=Tensor[(5, 1, 7), float64] */;
  %253 = %248.3;
  %254 = %251.0;
  (%252, %253, %var_5342, %var_5343, %254, meta[relay.Constant][17] /* ty=Tensor[(91, 11), float64] */)
}

def @func_6258(%var_6256: Tensor[(14, 1, 4), float32]) -> (Tensor[(14, ?, 4), int16], Tensor[(14, ?, 4), int16], Tensor[(5, 1, 7), float64]) {
  @func_6255(%var_6256) /* ty=(Tensor[(14, ?, 4), int16], Tensor[(14, ?, 4), int16], Tensor[(5, 1, 7), float64]) */
}

def @func_7578() -> (Tensor[(5, 1, 7), float64],) {
  @func_7576() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_1016(%var_1014: Tensor[(8, 4, 5), int16], %var_1015: Tensor[(8, 4, 5), int16]) -> (Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) {
  @func_1012(%var_1014, %var_1015) /* ty=(Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) */
}

def @func_7529(%var_7521: Tensor[(35, 5), float64]) -> (Tensor[(5, ?, 7), bool], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(35, 5), float64]) {
  %255 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %256 = %255.0;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %258 = exp(%257) /* ty=Tensor[(5, 1, 7), float32] */;
  %259 = cast(%256, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %263 = @func_7336() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %264 = cast(%var_7521, dtype="float64") /* ty=Tensor[(35, 5), float64] */;
  %265 = reshape(%264, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), float64] */;
  %266 = @func_6674(%265) /* ty=(Tensor[(15, 1), float64], Tensor[(15, 1), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 5, 7), bool]) */;
  %267 = less_equal(%261, %262) /* ty=Tensor[(5, ?, 7), bool] */;
  %268 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %269 = %263.0;
  %270 = %266.1;
  (%267, %268, %269, %270, %var_7521)
}

def @func_7337() -> (Tensor[(5, 1, 7), float64],) {
  %272 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %271 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
    (%271,)
  };
  %272() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_9726(%var_9725: Tensor[(8, 1, 7), float32]) -> (Tensor[(8, 1, 7), float32],) {
  %275 = fn (%var_9720: Tensor[(8, 1, 7), float32]) -> (Tensor[(8, 1, 7), float32],) {
    %273 = cast(%var_9720, dtype="float32") /* ty=Tensor[(8, 1, 7), float32] */;
    %274 = sinh(%273) /* ty=Tensor[(8, 1, 7), float32] */;
    (%274,)
  };
  %275(%var_9725) /* ty=(Tensor[(8, 1, 7), float32],) */
}

def @func_9569(%var_9567: Tensor[(12, 3, 13), bool]) -> Tensor[(12, 3, 13), bool] {
  @func_9566(%var_9567) /* ty=Tensor[(12, 3, 13), bool] */
}

def @func_6946(%var_6944: Tensor[(16, 9, 12), float64], %var_6945: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) {
  %285 = fn (%var_6922: Tensor[(16, 9, 12), float64], %var_6927: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) {
    %276 = cast(%var_6922, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
    %277 = sinh(%276) /* ty=Tensor[(16, 9, 12), float64] */;
    %278 = cast(%var_6927, dtype="float32") /* ty=Tensor[(16, 9, 12), float32] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="float32") /* ty=Tensor[(16, 9, 12), float32] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %282 = cast(%277, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
    %283 = mod(%280, %281) /* ty=Tensor[(16, 9, 12), float32] */;
    %284 = log(%282) /* ty=Tensor[(16, 9, 12), float64] */;
    (%283, %284)
  };
  %285(%var_6944, %var_6945) /* ty=(Tensor[(16, 9, 12), float32], Tensor[(16, 9, 12), float64]) */
}

def @func_1786(%var_1769: float64) -> (Tensor[(9, 8, 16), float64],) {
  %286 = cast(%var_1769, dtype="float64") /* ty=float64 */;
  %287 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %288 = divide(%286, %287) /* ty=Tensor[(9, 8, 16), float64] */;
  (%288,)
}

def @func_2348(%var_2346: Tensor[(1, 9, 6), uint64], %var_2347: Tensor[(1, 9, 6), uint64]) -> (Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) {
  %313 = fn (%var_2296: Tensor[(1, 9, 6), uint64], %var_2297: Tensor[(1, 9, 6), uint64]) -> (Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) {
    %289 = cast(%var_2297, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
    %290 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %291 = cast(%var_2296, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %293 = cast(%var_2297, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
    %294 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%var_2296, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %297 = left_shift(%295, %296) /* ty=Tensor[(?, 9, 6), uint64] */;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(?, 9, 6), float64] */;
    %299 = sin(%298) /* ty=Tensor[(?, 9, 6), float64] */;
    %300 = cast(%299, dtype="float64") /* ty=Tensor[(?, 9, 6), float64] */;
    %301 = sqrt(%300) /* ty=Tensor[(?, 9, 6), float64] */;
    %302 = cast(%297, dtype="int16") /* ty=Tensor[(?, 9, 6), int16] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="int16") /* ty=Tensor[(?, 9, 6), int16] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %306 = subtract(%304, %305) /* ty=Tensor[(?, 9, 6), int16] */;
    %307 = cast(%306, dtype="bool") /* ty=Tensor[(?, 9, 6), bool] */;
    %308 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%299, dtype="bool") /* ty=Tensor[(?, 9, 6), bool] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %311 = divide(%291, %292) /* ty=Tensor[(?, 9, 6), float64] */;
    %312 = logical_or(%309, %310) /* ty=Tensor[(?, 9, 6), bool] */;
    (%311, %312)
  };
  %313(%var_2346, %var_2347) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */
}

def @func_6881(%var_6877: Tensor[(5, 28), float64], %var_6878: Tensor[(63), float32], %var_6879: Tensor[(528), uint64], %var_6880: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
  %341 = fn (%var_6855: Tensor[(5, 28), float64], %var_6858: Tensor[(63), float32], %var_6865: Tensor[(528), uint64], %var_6871: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
    %314 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
    %317 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
    %318 = cast(%var_6855, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %319 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
    %320 = cast(meta[relay.Constant][20] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %321 = cast(%var_6858, dtype="float32") /* ty=Tensor[(63), float32] */;
    %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %323 = reshape(%318, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
    %324 = reshape(%319, newshape=[48]) /* ty=Tensor[(48), bool] */;
    %325 = reshape(%320, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %326 = reshape(%321, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %327 = reshape(%322, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %328 = @func_4758(%323, %324, %325, %326, %327) /* ty=(Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
    %329 = cast(%var_6865, dtype="uint64") /* ty=Tensor[(528), uint64] */;
    %330 = reshape(%329, newshape=[528]) /* ty=Tensor[(528), uint64] */;
    %331 = @func_6159(%330) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
    %332 = cast(%var_6871, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %333 = cast(%var_6871, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %334 = reshape(%332, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
    %335 = reshape(%333, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
    %336 = cos(%316) /* ty=Tensor[(5, 1, 7), float32] */;
    %337 = %317.0;
    %338 = %328.2;
    %339 = %331.0;
    %340 = @func_4049(%334, %335) /* ty=Tensor[(14, 6, 15), int16] */;
    (%336, %337, %338, %var_6855, meta[relay.Constant][19] /* ty=Tensor[(48), bool] */, meta[relay.Constant][20] /* ty=Tensor[(576), bool] */, %var_6858, meta[relay.Constant][21] /* ty=Tensor[(756), float32] */, %339, %var_6865, %340, %var_6871)
  };
  %341(%var_6877, %var_6878, %var_6879, %var_6880) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */
}

def @func_4470() -> (Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) {
  %342 = cast(meta[relay.Constant][22] /* ty=Tensor[(1008, 1), float64] */, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
  %343 = reshape(%342, newshape=[9, 8, 14]) /* ty=Tensor[(9, 8, 14), float64] */;
  %344 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %346 = acosh(%345) /* ty=Tensor[(5, 1, 7), float32] */;
  %347 = cast(%346, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %348 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 7, 7), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %349 = greater_equal(%347, %348) /* ty=Tensor[(5, 7, 7), bool] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %352 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %353 = reshape(%351, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %354 = reshape(%352, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %355 = @func_1012(%353, %354) /* ty=(Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) */;
  %356 = @func_2884(%343) /* ty=Tensor[(9, 8, 14), float64] */;
  %357 = sqrt(%350) /* ty=Tensor[(5, 7, 7), float64] */;
  %358 = %355.0;
  (%356, meta[relay.Constant][22] /* ty=Tensor[(1008, 1), float64] */, %357, %358, meta[relay.Constant][24] /* ty=Tensor[(160), int16] */)
}

def @func_3902(%var_3901: Tensor[(2, 15, 14), float64]) -> (Tensor[(2, 15, 14), float64],) {
  %361 = fn (%var_3897: Tensor[(2, 15, 14), float64]) -> (Tensor[(2, 15, 14), float64],) {
    %359 = cast(%var_3897, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
    %360 = atan(%359) /* ty=Tensor[(2, 15, 14), float64] */;
    (%360,)
  };
  %361(%var_3901) /* ty=(Tensor[(2, 15, 14), float64],) */
}

def @func_3107(%var_3101: Tensor[(16, 3, 1), bool], %var_3102: Tensor[(16, 3, 12), bool], %var_3103: Tensor[(16, 3, 12), bool], %var_3104: Tensor[(63), float32], %var_3105: Tensor[(1536), bool], %var_3106: Tensor[(9, 7, 12), float32]) -> (Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) {
  @func_3099(%var_3101, %var_3102, %var_3103, %var_3104, %var_3105, %var_3106) /* ty=(Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) */
}

def @func_5710() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %362 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %363 = %362.0;
  %364 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%363, %364)
}

def @func_4969(%var_4949: Tensor[(6, 180), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float64], Tensor[(6, 180), float32], Tensor[(780), float32]) {
  %365 = cast(%var_4949, dtype="float32") /* ty=Tensor[(6, 180), float32] */;
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %367 = reshape(%365, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %368 = reshape(%366, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %369 = @func_1580(%367, %368) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
  %370 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %371 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %372 = %369.0;
  (%370, %371, %372, %var_4949, meta[relay.Constant][25] /* ty=Tensor[(780), float32] */)
}

def @func_7275() -> Tensor[(5, ?, 7), float64] {
  %386 = fn () -> Tensor[(5, ?, 7), float64] {
    %373 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %374 = %373.0;
    %375 = @func_5833() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %376 = %375.0;
    %377 = cast(%374, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%376, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %381 = not_equal(%379, %380) /* ty=Tensor[(5, ?, 7), bool] */;
    %382 = cast(%381, dtype="float64") /* ty=Tensor[(5, ?, 7), float64] */;
    %383 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%374, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%384, %385) /* ty=Tensor[(5, ?, 7), float64] */
  };
  %386() /* ty=Tensor[(5, ?, 7), float64] */
}

def @func_7873() -> (Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  %387 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %388 = cast(meta[relay.Constant][26] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %390 = reshape(%388, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %391 = reshape(%389, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %392 = @func_2345(%390, %391) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %393 = %387.0;
  %394 = %392.1;
  (%393, %394, meta[relay.Constant][26] /* ty=Tensor[(54), uint64] */)
}

def @func_4858(%var_4855: Tensor[(1008, 11), float64], %var_4856: Tensor[(1008, 11), float64], %var_4857: Tensor[(63), float32]) -> (Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) {
  %415 = fn (%var_4811: Tensor[(1008, 11), float64], %var_4816: Tensor[(1008, 11), float64], %var_4825: Tensor[(63), float32]) -> (Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) {
    %395 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
    %396 = %395.0;
    %397 = cast(%396, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
    %398 = cast(%var_4811, dtype="float64") /* ty=Tensor[(1008, 11), float64] */;
    %399 = cast(%var_4816, dtype="bool") /* ty=Tensor[(1008, 11), bool] */;
    %400 = shape_of(%var_4811, dtype="int32") /* ty=Tensor[(2), int32] */;
    %401 = cast(%var_4811, dtype="bool") /* ty=Tensor[(1008, 11), bool] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %403 = cast(%var_4825, dtype="float32") /* ty=Tensor[(63), float32] */;
    %404 = reshape(%403, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
    %405 = @func_2898(%404) /* ty=(Tensor[(9, 7, 1), float32],) */;
    %406 = cast(%var_4825, dtype="bool") /* ty=Tensor[(63), bool] */;
    %407 = cast(%396, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
    %408 = cast(%396, dtype="float64") /* ty=Tensor[(1008, 1), float64] */;
    %409 = subtract(%397, %398) /* ty=Tensor[(1008, 11), float64] */;
    %410 = greater(%401, %402) /* ty=Tensor[(1008, 11), bool] */;
    %411 = %405.0;
    %412 = logical_or(%406, %407) /* ty=Tensor[(1008, 63), bool] */;
    %413 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
    %414 = acos(%408) /* ty=Tensor[(1008, 1), float64] */;
    (%409, %410, %411, %412, %413, %414)
  };
  %415(%var_4855, %var_4856, %var_4857) /* ty=(Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) */
}

def @func_5087() -> (Tensor[(5, 1, 7), float64],) {
  %417 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %416 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    (%416,)
  };
  %417() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_4053(%var_4051: Tensor[(14, 6, 15), int16], %var_4052: Tensor[(14, 6, 15), int16]) -> Tensor[(14, 6, 15), int16] {
  @func_4049(%var_4051, %var_4052) /* ty=Tensor[(14, 6, 15), int16] */
}

def @func_9398(%var_9397: Tensor[(5, 12, 7), float64]) -> Tensor[(5, 12, 7), bool] {
  %422 = fn (%var_9352: Tensor[(5, 12, 7), float64]) -> Tensor[(5, 12, 7), bool] {
    %418 = @func_9203() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %419 = %418.0;
    %420 = cast(%419, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %421 = cast(%var_9352, dtype="bool") /* ty=Tensor[(5, 12, 7), bool] */;
    logical_and(%420, %421) /* ty=Tensor[(5, 12, 7), bool] */
  };
  %422(%var_9397) /* ty=Tensor[(5, 12, 7), bool] */
}

def @func_8274() -> Tensor[(5, 1, 7), float64] {
  @func_8272() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6072() -> (Tensor[(5, 1, 7), float64],) {
  %424 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %423 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    (%423,)
  };
  %424() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_7232(%var_7224: Tensor[(140), float64], %var_7226: Tensor[(576, 1), bool]) -> (Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(140), float64], Tensor[(2, 24), bool], Tensor[(576, 1), bool], Tensor[(63), float32], Tensor[(378, 2), float32]) {
  %425 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %426 = cast(%var_7224, dtype="float64") /* ty=Tensor[(140), float64] */;
  %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 24), bool] */, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %428 = cast(%var_7226, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %429 = cast(meta[relay.Constant][28] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(378, 2), float32] */, dtype="float32") /* ty=Tensor[(378, 2), float32] */;
  %431 = reshape(%426, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
  %432 = reshape(%427, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %433 = reshape(%428, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %434 = reshape(%429, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %435 = reshape(%430, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %436 = @func_4758(%431, %432, %433, %434, %435) /* ty=(Tensor[(5, 4, 7), bool], Tensor[(16, 3, 12), int16], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(1536), bool], Tensor[(756), float32], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
  %437 = %425.0;
  %438 = %436.7;
  (%437, %438, %var_7224, meta[relay.Constant][27] /* ty=Tensor[(2, 24), bool] */, %var_7226, meta[relay.Constant][28] /* ty=Tensor[(63), float32] */, meta[relay.Constant][29] /* ty=Tensor[(378, 2), float32] */)
}

def @func_6198() -> (Tensor[(5, 1, 7), float64],) {
  %439 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %440 = %439.0;
  (%440,)
}

def @func_9448(%var_9446: float64, %var_9447: Tensor[(3, 78), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(6, 3, 13), float64], Tensor[(3, 78), float32]) {
  %452 = fn (%var_9431: float64, %var_9432: Tensor[(3, 78), float64]) -> (Tensor[(5, 1, 7), float32], Tensor[(6, 3, 13), float64], Tensor[(3, 78), float32]) {
    %441 = @func_8199() /* ty=(Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
    %442 = cast(%var_9431, dtype="float64") /* ty=float64 */;
    %443 = cast(%var_9432, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
    %444 = reshape(%442, newshape=[]) /* ty=float64 */;
    %445 = reshape(%443, newshape=[6, 3, 13]) /* ty=Tensor[(6, 3, 13), float64] */;
    %446 = @func_6286(%444, %445) /* ty=(Tensor[(6, 3, 13), float64],) */;
    %447 = cast(%var_9432, dtype="float32") /* ty=Tensor[(3, 78), float32] */;
    %448 = cast(%var_9431, dtype="float32") /* ty=float32 */;
    %449 = %441.0;
    %450 = %446.0;
    %451 = maximum(%447, %448) /* ty=Tensor[(3, 78), float32] */;
    (%449, %450, %451)
  };
  %452(%var_9446, %var_9447) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(6, 3, 13), float64], Tensor[(3, 78), float32]) */
}

def @func_5271() -> (Tensor[(5, 1, 7), float64],) {
  %455 = fn () -> (Tensor[(5, 1, 7), float64],) {
    %453 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %454 = %453.0;
    (%454,)
  };
  %455() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_3495(%var_3493: Tensor[(5, 5, 3), float64], %var_3494: Tensor[(588), int64]) -> (Tensor[(5, 5, 3), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
  %471 = fn (%var_3464: Tensor[(5, 5, 3), float64], %var_3484: Tensor[(588), int64]) -> (Tensor[(5, 5, 3), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) {
    %456 = cast(%var_3464, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
    %457 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %460 = floor_divide(%458, %459) /* ty=Tensor[(5, 5, 3), float64] */;
    %461 = cast(%460, dtype="float64") /* ty=Tensor[(5, 5, 3), float64] */;
    %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
    %463 = reshape(%462, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
    %464 = @func_3224(%463) /* ty=(Tensor[(11, 8, 6), float64],) */;
    %465 = cast(%var_3484, dtype="int64") /* ty=Tensor[(588), int64] */;
    %466 = reshape(%465, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
    %467 = @func_3382(%466) /* ty=(Tensor[(7, 7, 12), bool],) */;
    %468 = log2(%461) /* ty=Tensor[(5, 5, 3), float64] */;
    %469 = %464.0;
    %470 = %467.0;
    (%468, %469, meta[relay.Constant][31] /* ty=Tensor[(528), uint64] */, %470, %var_3484)
  };
  %471(%var_3493, %var_3494) /* ty=(Tensor[(5, 5, 3), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64], Tensor[(7, 7, 12), bool], Tensor[(588), int64]) */
}

def @func_2718(%var_2716: Tensor[(1536), bool], %var_2717: Tensor[(12, 18), float32]) -> (Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) {
  @func_2714(%var_2716, %var_2717) /* ty=(Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) */
}

def @func_8073() -> (Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) {
  %472 = cast(meta[relay.Constant][32] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %473 = reshape(%472, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %474 = @func_6446(%473) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16], Tensor[(5, 12, 13), float64], Tensor[(780), float32]) */;
  %475 = @func_7274() /* ty=Tensor[(5, ?, 7), float64] */;
  %476 = %474.2;
  (%475, %476, meta[relay.Constant][32] /* ty=Tensor[(780), float32] */)
}

def @func_5835() -> (Tensor[(5, 1, 7), float64],) {
  @func_5833() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_9140() -> Tensor[(5, 1, 7), float64] {
  @func_9138() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_6161(%var_6160: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
  %485 = fn (%var_6156: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) {
    %477 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
    %478 = @func_6071() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %479 = cast(%var_6156, dtype="uint64") /* ty=Tensor[(528), uint64] */;
    %480 = reshape(%479, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), uint64] */;
    %481 = @func_3224(%480) /* ty=(Tensor[(11, 8, 6), float64],) */;
    %482 = %477.0;
    %483 = %478.0;
    %484 = %481.0;
    (%482, %483, %484, %var_6156)
  };
  %485(%var_6160) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */
}

def @func_9112() -> (Tensor[(2, 24), bool],) {
  %486 = @func_8408() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) */;
  %487 = %486.1;
  (%487,)
}

def @func_9284(%var_9283: Tensor[(455), float64]) -> (Tensor[(1260), int16], Tensor[(5, 12, 7), float64], Tensor[(455), float64], Tensor[(780), float32]) {
  %498 = fn (%var_9261: Tensor[(455), float64]) -> (Tensor[(1260), int16], Tensor[(5, 12, 7), float64], Tensor[(455), float64], Tensor[(780), float32]) {
    %488 = @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
    %489 = cast(%var_9261, dtype="float64") /* ty=Tensor[(455), float64] */;
    %490 = reshape(%489, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
    %491 = @func_8998(%490) /* ty=(Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) */;
    %492 = cast(%var_9261, dtype="float64") /* ty=Tensor[(455), float64] */;
    %493 = @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
    %494 = %488.1;
    %495 = %491.1;
    %496 = rsqrt(%492) /* ty=Tensor[(455), float64] */;
    %497 = %493.2;
    (%494, %495, %496, %497)
  };
  %498(%var_9283) /* ty=(Tensor[(1260), int16], Tensor[(5, 12, 7), float64], Tensor[(455), float64], Tensor[(780), float32]) */
}

def @func_5553(%var_5551: Tensor[(54), uint64], %var_5552: Tensor[(5, 7, 7), float64]) -> (Tensor[(?, 9, 6), float64], Tensor[(54), uint64], Tensor[(5, 7, 7), int8]) {
  @func_5549(%var_5551, %var_5552) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(54), uint64], Tensor[(5, 7, 7), int8]) */
}

def @func_9138() -> Tensor[(5, 1, 7), float64] {
  %499 = @func_4931() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %499.0
}

def @func_4912() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) {
  %506 = fn () -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) {
    %500 = cast(meta[relay.Constant][33] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %501 = reshape(%500, newshape=[390, 2]) /* ty=Tensor[(390, 2), float32] */;
    %502 = @func_309(%501) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */;
    %503 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
    %504 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
    %505 = %502.0;
    (%503, %504, %505, meta[relay.Constant][33] /* ty=Tensor[(780), float32] */)
  };
  %506() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */
}

def @func_4325() -> Tensor[(5, 1, 7), float64] {
  %508 = fn () -> Tensor[(5, 1, 7), float64] {
    %507 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    acos(%507) /* ty=Tensor[(5, 1, 7), float64] */
  };
  %508() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_4049(%var_4039: Tensor[(14, 6, 15), int16], %var_4040: Tensor[(14, 6, 15), int16]) -> Tensor[(14, 6, 15), int16] {
  %509 = cast(%var_4040, dtype="int16") /* ty=Tensor[(14, 6, 15), int16] */;
  %510 = shape_of(%var_4039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_4039, dtype="int16") /* ty=Tensor[(14, 6, 15), int16] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%511, %512) /* ty=Tensor[(14, 6, 15), int16] */
}

def @func_8663() -> Tensor[(1008, 1), float32] {
  %516 = fn () -> Tensor[(1008, 1), float32] {
    %513 = @func_7770() /* ty=(Tensor[(1008, 1), float64],) */;
    %514 = %513.0;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
    acosh(%515) /* ty=Tensor[(1008, 1), float32] */
  };
  %516() /* ty=Tensor[(1008, 1), float32] */
}

def @func_4637(%var_4636: Tensor[(5, 7, 7), float64]) -> (Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %531 = fn (%var_4598: Tensor[(5, 7, 7), float64]) -> (Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
    %517 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1080), float32] */, dtype="float32") /* ty=Tensor[(1, 1080), float32] */;
    %518 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %519 = reshape(%517, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
    %520 = reshape(%518, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %521 = @func_1580(%519, %520) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
    %522 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    %524 = rsqrt(%523) /* ty=Tensor[(5, 1, 7), float64] */;
    %525 = cast(%524, dtype="uint64") /* ty=Tensor[(5, 1, 7), uint64] */;
    %526 = cast(%var_4598, dtype="uint64") /* ty=Tensor[(5, 7, 7), uint64] */;
    %527 = %521.1;
    %528 = multiply(%525, %526) /* ty=Tensor[(5, 7, 7), uint64] */;
    %529 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
    %530 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    (%527, meta[relay.Constant][35] /* ty=Tensor[(1, 1080), float32] */, meta[relay.Constant][36] /* ty=Tensor[(780), float32] */, %528, %529, %530)
  };
  %531(%var_4636) /* ty=(Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_4933() -> (Tensor[(5, 1, 7), float64],) {
  @func_4931() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_2884(%var_2877: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), float64] {
  %532 = cast(%var_2877, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
  cosh(%532) /* ty=Tensor[(9, 8, 14), float64] */
}

def @func_8769() -> Tensor[(5, 1, 7), float64] {
  @func_8767() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8340(%var_8336: Tensor[(528), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1, 140), float64], Tensor[(63), float32], Tensor[(528), uint64], Tensor[(1260), int16]) {
  %533 = @func_7623() /* ty=(Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) */;
  %534 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %535 = cast(meta[relay.Constant][38] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %536 = cast(%var_8336, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %537 = cast(meta[relay.Constant][39] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %538 = reshape(%534, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %539 = reshape(%535, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %540 = reshape(%536, newshape=[528]) /* ty=Tensor[(528), uint64] */;
  %541 = reshape(%537, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %542 = @func_6876(%538, %539, %540, %541) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %543 = %533.1;
  %544 = %542.11;
  (%543, %544, meta[relay.Constant][37] /* ty=Tensor[(1, 140), float64] */, meta[relay.Constant][38] /* ty=Tensor[(63), float32] */, %var_8336, meta[relay.Constant][39] /* ty=Tensor[(1260), int16] */)
}

def @func_8499() -> Tensor[(5, 1, 7), float64] {
  @func_4383() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8075() -> (Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) {
  @func_8073() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */
}

def @func_5023(%var_4986: Tensor[(245), float64], %var_4990: Tensor[(18, 70), int16], %var_5016: Tensor[(1, 15), float64], %var_5017: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(245), float64], Tensor[(14, 6, 15), int16], Tensor[(18, 70), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float32], Tensor[(1, 780), float32], Tensor[(5, 3, 15), float64], Tensor[(1, 15), float64], Tensor[(225), float64]) {
  %545 = cast(%var_4986, dtype="float64") /* ty=Tensor[(245), float64] */;
  %546 = reshape(%545, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %547 = @func_4635(%546) /* ty=(Tensor[(780), float32], Tensor[(1, 1080), float32], Tensor[(780), float32], Tensor[(5, 7, 7), uint64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %548 = cast(%var_4990, dtype="int16") /* ty=Tensor[(18, 70), int16] */;
  %549 = cast(%var_4990, dtype="int16") /* ty=Tensor[(18, 70), int16] */;
  %550 = reshape(%548, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %551 = reshape(%549, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %552 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 780), float32] */, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
  %553 = reshape(%552, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %554 = @func_109(%553) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %555 = cast(%var_5016, dtype="float64") /* ty=Tensor[(1, 15), float64] */;
  %556 = cast(%var_5017, dtype="float64") /* ty=Tensor[(225), float64] */;
  %557 = reshape(%555, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %558 = reshape(%556, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %559 = @func_3299(%557, %558) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %560 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  %561 = %547.5;
  %562 = @func_4049(%550, %551) /* ty=Tensor[(14, 6, 15), int16] */;
  %563 = @func_4562() /* ty=Tensor[(5, 1, 7), float64] */;
  %564 = %554.0;
  %565 = %559.0;
  (%560, %561, %var_4986, %562, %var_4990, %563, %564, meta[relay.Constant][40] /* ty=Tensor[(1, 780), float32] */, %565, %var_5016, %var_5017)
}

def @func_4972(%var_4970: Tensor[(6, 180), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float64], Tensor[(6, 180), float32], Tensor[(780), float32]) {
  @func_4969(%var_4970) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float64], Tensor[(6, 180), float32], Tensor[(780), float32]) */
}

def @func_5116(%var_5103: Tensor[(15, 1), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) {
  %566 = cast(%var_5103, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %567 = cast(meta[relay.Constant][41] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %568 = reshape(%566, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %569 = reshape(%567, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %570 = @func_3299(%568, %569) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(5, 3, 15), float32] */;
  %573 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
  %574 = log2(%572) /* ty=Tensor[(5, 3, 15), float32] */;
  %575 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
  (%573, %var_5103, meta[relay.Constant][41] /* ty=Tensor[(225), float64] */, %574, %575)
}

def @func_9827(%var_9799: Tensor[(16, 11, 6), float32], %var_9805: Tensor[(1, 1260), int16], %var_9813: Tensor[(15), float64], %var_9814: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1, 1260), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 3, 15), float64], Tensor[(15), float64], Tensor[(225), float64], Tensor[(16, 11, 6), bool]) {
  %576 = cast(%var_9805, dtype="int16") /* ty=Tensor[(1, 1260), int16] */;
  %577 = reshape(%576, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
  %578 = @func_7438(%577) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
  %579 = @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */;
  %580 = cast(%var_9813, dtype="float64") /* ty=Tensor[(15), float64] */;
  %581 = cast(%var_9814, dtype="float64") /* ty=Tensor[(225), float64] */;
  %582 = reshape(%580, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float64] */;
  %583 = reshape(%581, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), float64] */;
  %584 = @func_3299(%582, %583) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */;
  %585 = cast(%var_9799, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %586 = cos(%585) /* ty=Tensor[(16, 11, 6), float32] */;
  %587 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(16, 11, 6), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(16, 11, 6), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = %578.0;
  %592 = %579.0;
  %593 = %584.1;
  %594 = less(%589, %590) /* ty=Tensor[(16, 11, 6), bool] */;
  (%591, %var_9805, %592, %593, %var_9813, %var_9814, %594)
}

def @func_8200() -> (Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %602 = fn () -> (Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
    %595 = @func_4328() /* ty=Tensor[(5, 1, 7), float64] */;
    %596 = cast(%595, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
    %597 = cast(%595, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    %598 = @func_5270() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %599 = atanh(%596) /* ty=Tensor[(5, 1, 7), float32] */;
    %600 = log2(%597) /* ty=Tensor[(5, 1, 7), float64] */;
    %601 = %598.0;
    (%599, %600, %601)
  };
  %602() /* ty=(Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_7624() -> (Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) {
  %607 = fn () -> (Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) {
    %603 = @func_7155() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) */;
    %604 = @func_7576() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %605 = %603.1;
    %606 = %604.0;
    (%605, %606)
  };
  %607() /* ty=(Tensor[(7, 7, 12), bool], Tensor[(5, 1, 7), float64]) */
}

def @func_5357(%var_5355: Tensor[(3, 360), float32], %var_5356: Tensor[(780), float32]) -> (Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) {
  @func_5353(%var_5355, %var_5356) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) */
}

def @func_8548(%var_8546: Tensor[(5, 11, 7), float64]) -> (Tensor[(5, 11, 7), bool],) {
  @func_8545(%var_8546) /* ty=(Tensor[(5, 11, 7), bool],) */
}

def @func_5418(%var_5416: Tensor[(1, 11, 14), int32], %var_5417: Tensor[(420), float64]) -> (Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) {
  @func_5414(%var_5416, %var_5417) /* ty=(Tensor[(6, 11, 14), int32], Tensor[(2, 15, 14), float64], Tensor[(420), float64]) */
}

def @func_6434(%var_6429: Tensor[(10, 2, 9), float64], %var_6430: Tensor[(1080), float32], %var_6431: Tensor[(780), float32], %var_6432: Tensor[(1, 63), float32], %var_6433: Tensor[(10, 2, 9), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) {
  %648 = fn (%var_6329: Tensor[(10, 2, 9), float64], %var_6337: Tensor[(1080), float32], %var_6338: Tensor[(780), float32], %var_6358: Tensor[(1, 63), float32], %var_6418: Tensor[(10, 2, 9), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) {
    %608 = cast(%var_6337, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %609 = cast(%var_6338, dtype="float32") /* ty=Tensor[(780), float32] */;
    %610 = reshape(%608, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
    %611 = reshape(%609, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %612 = @func_5353(%610, %611) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1536), bool], Tensor[(3, 360), float32], Tensor[(780), float32], Tensor[(11, 13, 7), float64], Tensor[(91, 11), float64]) */;
    %613 = cast(meta[relay.Constant][43] /* ty=Tensor[(11088), float64] */, dtype="float64") /* ty=Tensor[(11088), float64] */;
    %614 = cast(meta[relay.Constant][43] /* ty=Tensor[(11088), float64] */, dtype="float64") /* ty=Tensor[(11088), float64] */;
    %615 = cast(%var_6358, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
    %616 = reshape(%613, newshape=[1008, 11]) /* ty=Tensor[(1008, 11), float64] */;
    %617 = reshape(%614, newshape=[1008, 11]) /* ty=Tensor[(1008, 11), float64] */;
    %618 = reshape(%615, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %619 = @func_4854(%616, %617, %618) /* ty=(Tensor[(1008, 11), float64], Tensor[(1008, 11), bool], Tensor[(9, 7, 1), float32], Tensor[(1008, 63), bool], Tensor[(5, 1, 7), float64], Tensor[(1008, 1), float64]) */;
    %620 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 528), uint64] */, dtype="uint64") /* ty=Tensor[(1, 528), uint64] */;
    %621 = reshape(%620, newshape=[528]) /* ty=Tensor[(528), uint64] */;
    %622 = @func_6159(%621) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(11, 8, 6), float64], Tensor[(528), uint64]) */;
    %623 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %624 = log(%623) /* ty=Tensor[(10, 2, 9), float64] */;
    %625 = cast(%var_6329, dtype="int64") /* ty=Tensor[(10, 2, 9), int64] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%624, dtype="int64") /* ty=Tensor[(10, 2, 9), int64] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %629 = logical_xor(%627, %628) /* ty=Tensor[(10, 2, 9), int64] */;
    %630 = cast(%629, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %631 = cast(%629, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %632 = exp(%631) /* ty=Tensor[(10, 2, 9), float32] */;
    %633 = cast(%632, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %634 = atanh(%633) /* ty=Tensor[(10, 2, 9), float64] */;
    %635 = cast(%var_6418, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
    %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%634, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %639 = cast(%var_6338, dtype="float32") /* ty=Tensor[(780), float32] */;
    %640 = reshape(%639, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
    %641 = @func_109(%640) /* ty=(Tensor[(5, 12, 13), float32],) */;
    %642 = %612.0;
    %643 = %619.0;
    %644 = %622.3;
    %645 = sigmoid(%630) /* ty=Tensor[(10, 2, 9), float64] */;
    %646 = not_equal(%637, %638) /* ty=Tensor[(10, 2, 9), bool] */;
    %647 = %641.0;
    (%642, %var_6337, %var_6338, %643, meta[relay.Constant][43] /* ty=Tensor[(11088), float64] */, %var_6358, %644, meta[relay.Constant][44] /* ty=Tensor[(1, 528), uint64] */, %645, %646, %647)
  };
  %648(%var_6429, %var_6430, %var_6431, %var_6432, %var_6433) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) */
}

def @main(%var_9855: Tensor[(90, 2), float64], %var_9856: Tensor[(1080), float32], %var_9857: Tensor[(780), float32], %var_9881: Tensor[(11088), float64]) -> (Tensor[(1260), int16], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(63), float32], Tensor[(5, 12, 7), bool], Tensor[(420), float64], Tensor[(11088), float64], Tensor[(90, 2), float32]) {
  %649 = @func_8075() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(1260), int16], Tensor[(780), float32]) */;
  %650 = cast(meta[relay.Constant][47] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %651 = reshape(%650, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float64] */;
  %652 = cast(%var_9855, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %653 = cast(%var_9856, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %654 = cast(%var_9857, dtype="float32") /* ty=Tensor[(780), float32] */;
  %655 = cast(meta[relay.Constant][46] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %656 = cast(%var_9855, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %657 = reshape(%652, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %658 = reshape(%653, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %659 = reshape(%654, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %660 = reshape(%655, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %661 = reshape(%656, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %662 = @func_6434(%657, %658, %659, %660, %661) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1080), float32], Tensor[(780), float32], Tensor[(1008, 11), float64], Tensor[(11088), float64], Tensor[(1, 63), float32], Tensor[(528), uint64], Tensor[(1, 528), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool], Tensor[(5, 12, 13), float32]) */;
  %663 = %662.4;
  %664 = cast(%var_9881, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(1), int32] */;
  %666 = cast(%663, dtype="float64") /* ty=Tensor[(11088), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?), float64] */;
  %668 = cast(%var_9855, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %669 = asin(%668) /* ty=Tensor[(90, 2), float32] */;
  %670 = cast(%var_9855, dtype="uint8") /* ty=Tensor[(90, 2), uint8] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(2), int32] */;
  %672 = cast(%669, dtype="uint8") /* ty=Tensor[(90, 2), uint8] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %674 = minimum(%672, %673) /* ty=Tensor[(90, 2), uint8] */;
  %675 = cast(%669, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%674, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %679 = %649.1;
  %680 = @func_9396(%651) /* ty=Tensor[(5, 12, 7), bool] */;
  %681 = power(%666, %667) /* ty=Tensor[(11088), float64] */;
  %682 = power(%677, %678) /* ty=Tensor[(90, 2), float32] */;
  (%679, %var_9856, %var_9857, meta[relay.Constant][46] /* ty=Tensor[(63), float32] */, %680, meta[relay.Constant][47] /* ty=Tensor[(420), float64] */, %681, %682)
}

def @func_522(%var_521: Tensor[(16, 6, 16), bool]) -> (Tensor[(16, 6, 16), bool],) {
  %688 = fn (%var_510: Tensor[(16, 6, 16), bool]) -> (Tensor[(16, 6, 16), bool],) {
    %683 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
    %684 = shape_of(%var_510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%var_510, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %687 = logical_and(%685, %686) /* ty=Tensor[(16, 6, 16), bool] */;
    (%687,)
  };
  %688(%var_521) /* ty=(Tensor[(16, 6, 16), bool],) */
}

def @func_9707() -> (Tensor[(5, 1, 7), float32],) {
  %691 = fn () -> (Tensor[(5, 1, 7), float32],) {
    %689 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
    %690 = %689.1;
    (%690,)
  };
  %691() /* ty=(Tensor[(5, 1, 7), float32],) */
}

def @func_3892(%var_3855: Tensor[(11, 13, 4), float64]) -> (Tensor[(11, 13, 4), bool], Tensor[(8, 4, 5), int16], Tensor[(4, 40), int16], Tensor[(1536), bool], Tensor[(1536), bool], Tensor[(216), float32], Tensor[(11, 13, 4), float64]) {
  %692 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %693 = shape_of(%var_3855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_3855, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = greater_equal(%694, %695) /* ty=Tensor[(11, 13, 4), bool] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %698 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(11, 13, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 13, 4), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 40), int16] */, dtype="int16") /* ty=Tensor[(4, 40), int16] */;
  %702 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 40), int16] */, dtype="int16") /* ty=Tensor[(4, 40), int16] */;
  %703 = reshape(%701, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %704 = reshape(%702, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int16] */;
  %705 = @func_1012(%703, %704) /* ty=(Tensor[(8, 4, 5), int16], Tensor[(8, 4, 5), float64], Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(5, 12, 13), float32]) */;
  %706 = cast(meta[relay.Constant][51] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %707 = cast(meta[relay.Constant][52] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %708 = reshape(%706, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %709 = reshape(%707, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
  %710 = @func_2714(%708, %709) /* ty=(Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) */;
  %711 = cast(%var_3855, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %712 = less_equal(%699, %700) /* ty=Tensor[(11, 13, 4), bool] */;
  %713 = %705.0;
  %714 = %710.2;
  %715 = log(%711) /* ty=Tensor[(11, 13, 4), float64] */;
  (%712, %713, meta[relay.Constant][50] /* ty=Tensor[(4, 40), int16] */, %714, meta[relay.Constant][51] /* ty=Tensor[(1536), bool] */, meta[relay.Constant][52] /* ty=Tensor[(216), float32] */, %715)
}

def @func_6290(%var_6288: float64, %var_6289: Tensor[(6, 3, 13), float64]) -> (Tensor[(6, 3, 13), float64],) {
  @func_6286(%var_6288, %var_6289) /* ty=(Tensor[(6, 3, 13), float64],) */
}

def @func_4329() -> Tensor[(5, 1, 7), float64] {
  %716 = fn () -> Tensor[(5, 1, 7), float64] {
    @func_4324() /* ty=Tensor[(5, 1, 7), float64] */
  };
  %716() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_5141(%var_5140: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float64],) {
  %722 = fn (%var_5131: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float64],) {
    %717 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %718 = shape_of(%var_5131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%var_5131, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %721 = power(%719, %720) /* ty=Tensor[(11, 13, 7), float64] */;
    (%721,)
  };
  %722(%var_5140) /* ty=(Tensor[(11, 13, 7), float64],) */
}

def @func_4931() -> (Tensor[(5, 1, 7), float64],) {
  %723 = @func_4911() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(14, 16, 2), float32], Tensor[(780), float32]) */;
  %724 = %723.0;
  (%724,)
}

def @func_6200() -> (Tensor[(5, 1, 7), float64],) {
  @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */
}

def @func_5225(%var_5192: Tensor[(5, 5, 7), float64], %var_5220: Tensor[(54), uint64]) -> (Tensor[(5, 5, 7), float32], Tensor[(9, 7, 1), float32], Tensor[(63), float32], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  %725 = @func_4383() /* ty=Tensor[(5, 1, 7), float64] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %727 = cast(%var_5192, dtype="float32") /* ty=Tensor[(5, 5, 7), float32] */;
  %728 = cast(meta[relay.Constant][54] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %729 = reshape(%728, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
  %730 = @func_2898(%729) /* ty=(Tensor[(9, 7, 1), float32],) */;
  %731 = cast(%var_5220, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %732 = cast(%var_5220, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %733 = reshape(%731, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %734 = reshape(%732, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %735 = @func_2345(%733, %734) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %736 = power(%726, %727) /* ty=Tensor[(5, 5, 7), float32] */;
  %737 = %730.0;
  %738 = %735.1;
  (%736, %737, meta[relay.Constant][54] /* ty=Tensor[(63), float32] */, %738, %var_5220)
}

def @func_7922(%var_7920: Tensor[(63), float32], %var_7921: Tensor[(4, 132), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1260), int16], Tensor[(140), float64], Tensor[(63), float32], Tensor[(4, 132), uint64]) {
  %755 = fn (%var_7916: Tensor[(63), float32], %var_7917: Tensor[(4, 132), uint64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1260), int16], Tensor[(140), float64], Tensor[(63), float32], Tensor[(4, 132), uint64]) {
    %739 = @func_6592() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %740 = cast(meta[relay.Constant][55] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %741 = reshape(%740, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
    %742 = @func_7438(%741) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
    %743 = cast(meta[relay.Constant][56] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %744 = cast(%var_7916, dtype="float32") /* ty=Tensor[(63), float32] */;
    %745 = cast(%var_7917, dtype="uint64") /* ty=Tensor[(4, 132), uint64] */;
    %746 = cast(meta[relay.Constant][55] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %747 = reshape(%743, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %748 = reshape(%744, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %749 = reshape(%745, newshape=[528]) /* ty=Tensor[(528), uint64] */;
    %750 = reshape(%746, newshape=[1260]) /* ty=Tensor[(1260), int16] */;
    %751 = @func_6876(%747, %748, %749, %750) /* ty=(Tensor[(5, 1, 7), float32], Tensor[(1008, 1), float64], Tensor[(48), bool], Tensor[(5, 28), float64], Tensor[(48), bool], Tensor[(576), bool], Tensor[(63), float32], Tensor[(756), float32], Tensor[(5, 1, 7), float64], Tensor[(528), uint64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) */;
    %752 = %739.0;
    %753 = %742.1;
    %754 = %751.11;
    (%752, %753, meta[relay.Constant][55] /* ty=Tensor[(1260), int16] */, %754, meta[relay.Constant][56] /* ty=Tensor[(140), float64] */, %var_7916, %var_7917)
  };
  %755(%var_7920, %var_7921) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(1260), int16], Tensor[(1260), int16], Tensor[(140), float64], Tensor[(63), float32], Tensor[(4, 132), uint64]) */
}

def @func_8020(%var_8019: Tensor[(1008, 4), float64]) -> (Tensor[(1008, 4), uint32], Tensor[(1008, 4), float64]) {
  %763 = fn (%var_7995: Tensor[(1008, 4), float64]) -> (Tensor[(1008, 4), uint32], Tensor[(1008, 4), float64]) {
    %756 = @func_7770() /* ty=(Tensor[(1008, 1), float64],) */;
    %757 = %756.0;
    %758 = cast(%757, dtype="uint32") /* ty=Tensor[(1008, 1), uint32] */;
    %759 = cast(%var_7995, dtype="uint32") /* ty=Tensor[(1008, 4), uint32] */;
    %760 = cast(%var_7995, dtype="float64") /* ty=Tensor[(1008, 4), float64] */;
    %761 = bitwise_xor(%758, %759) /* ty=Tensor[(1008, 4), uint32] */;
    %762 = asin(%760) /* ty=Tensor[(1008, 4), float64] */;
    (%761, %762)
  };
  %763(%var_8019) /* ty=(Tensor[(1008, 4), uint32], Tensor[(1008, 4), float64]) */
}

def @func_4563() -> Tensor[(5, 1, 7), float64] {
  %764 = fn () -> Tensor[(5, 1, 7), float64] {
    @func_4324() /* ty=Tensor[(5, 1, 7), float64] */
  };
  %764() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_3303(%var_3301: Tensor[(5, 3, 1), float64], %var_3302: Tensor[(5, 3, 15), float64]) -> (Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) {
  @func_3299(%var_3301, %var_3302) /* ty=(Tensor[(5, 3, 15), float64], Tensor[(5, 3, 15), float64]) */
}

def @func_5229(%var_5227: Tensor[(5, 5, 7), float64], %var_5228: Tensor[(54), uint64]) -> (Tensor[(5, 5, 7), float32], Tensor[(9, 7, 1), float32], Tensor[(63), float32], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  @func_5225(%var_5227, %var_5228) /* ty=(Tensor[(5, 5, 7), float32], Tensor[(9, 7, 1), float32], Tensor[(63), float32], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */
}

def @func_9000(%var_8999: Tensor[(5, 13, 7), float64]) -> (Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) {
  %781 = fn (%var_8988: Tensor[(5, 13, 7), float64]) -> (Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) {
    %765 = @func_8272() /* ty=Tensor[(5, 1, 7), float64] */;
    %766 = @func_8408() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) */;
    %767 = %766.0;
    %768 = cast(%767, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
    %769 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(%765, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %772 = cast(%765, dtype="uint8") /* ty=Tensor[(5, 1, 7), uint8] */;
    %773 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 12, 7), float64] */, dtype="uint8") /* ty=Tensor[(5, 12, 7), uint8] */;
    %774 = minimum(%772, %773) /* ty=Tensor[(5, 12, 7), uint8] */;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
    %776 = cast(%765, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %777 = cast(%var_8988, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
    %778 = floor_mod(%770, %771) /* ty=Tensor[(5, ?, 7), float32] */;
    %779 = rsqrt(%775) /* ty=Tensor[(5, 12, 7), float64] */;
    %780 = logical_and(%776, %777) /* ty=Tensor[(5, 13, 7), bool] */;
    (%778, %779, %780)
  };
  %781(%var_8999) /* ty=(Tensor[(5, ?, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 13, 7), bool]) */
}

def @func_6519() -> (Tensor[(1008, 1), float64],) {
  %784 = fn () -> (Tensor[(1008, 1), float64],) {
    %782 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
    %783 = %782.0;
    (%783,)
  };
  %784() /* ty=(Tensor[(1008, 1), float64],) */
}

def @func_6475() -> Tensor[(5, 1, 7), float64] {
  %786 = fn () -> Tensor[(5, 1, 7), float64] {
    %785 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
    %785.0
  };
  %786() /* ty=Tensor[(5, 1, 7), float64] */
}

def @func_8410() -> (Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) {
  @func_8408() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(2, 24), bool], Tensor[(140), float64], Tensor[(576), bool]) */
}

def @func_309(%var_265: Tensor[(390, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) {
  %787 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %788 = cast(%var_265, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
  %789 = reshape(%788, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %790 = @func_109(%789) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(5, 12, 13), float64] */;
  %793 = cast(%var_265, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
  %794 = reshape(%793, newshape=[5, 12, 13]) /* ty=Tensor[(5, 12, 13), float32] */;
  %795 = @func_109(%794) /* ty=(Tensor[(5, 12, 13), float32],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(5, 12, 13), float64] */;
  %798 = erf(%787) /* ty=Tensor[(14, 16, 2), float32] */;
  %799 = log2(%792) /* ty=Tensor[(5, 12, 13), float64] */;
  %800 = cosh(%797) /* ty=Tensor[(5, 12, 13), float64] */;
  (%798, %var_265, %799, %800)
}

def @func_5549(%var_5525: Tensor[(54), uint64], %var_5527: Tensor[(5, 7, 7), float64]) -> (Tensor[(?, 9, 6), float64], Tensor[(54), uint64], Tensor[(5, 7, 7), int8]) {
  %801 = cast(%var_5525, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %802 = cast(%var_5525, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %803 = reshape(%801, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %804 = reshape(%802, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
  %805 = @func_2345(%803, %804) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
  %806 = @func_4470() /* ty=(Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) */;
  %807 = %806.2;
  %808 = cast(%var_5527, dtype="int8") /* ty=Tensor[(5, 7, 7), int8] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="int8") /* ty=Tensor[(5, 7, 7), int8] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %812 = %805.0;
  %813 = bitwise_xor(%810, %811) /* ty=Tensor[(5, 7, 7), int8] */;
  (%812, %var_5525, %813)
}

def @func_7438(%var_7429: Tensor[(1260), int16]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15), float64], Tensor[(14, 6, 15), int16], Tensor[(1260), int16]) {
  %814 = @func_6071() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %815 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %816 = @func_6198() /* ty=(Tensor[(5, 1, 7), float64],) */;
  %817 = cast(meta[relay.Constant][59] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %818 = reshape(%817, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %819 = @func_5116(%818) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(225), float64], Tensor[(5, 3, 15), float32], Tensor[(5, 1, 7), float64]) */;
  %820 = cast(%var_7429, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %821 = cast(%var_7429, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %822 = reshape(%820, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %823 = reshape(%821, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), int16] */;
  %824 = %814.0;
  %825 = %815.0;
  %826 = %816.0;
  %827 = %819.4;
  %828 = @func_4049(%822, %823) /* ty=Tensor[(14, 6, 15), int16] */;
  (%824, %825, %826, %827, meta[relay.Constant][59] /* ty=Tensor[(15), float64] */, %828, %var_7429)
}

def @func_5721() -> (Tensor[(5, 1, 7), float64], Tensor[(12, 15, 6), float64], Tensor[(1080, 1), float32], Tensor[(780), float32]) {
  %836 = fn () -> (Tensor[(5, 1, 7), float64], Tensor[(12, 15, 6), float64], Tensor[(1080, 1), float32], Tensor[(780), float32]) {
    %829 = cast(meta[relay.Constant][60] /* ty=Tensor[(1080, 1), float32] */, dtype="float32") /* ty=Tensor[(1080, 1), float32] */;
    %830 = cast(meta[relay.Constant][61] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %831 = reshape(%829, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
    %832 = reshape(%830, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %833 = @func_1580(%831, %832) /* ty=(Tensor[(5, 12, 13), float64], Tensor[(780), float32], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(12, 15, 6), float64]) */;
    %834 = @func_4324() /* ty=Tensor[(5, 1, 7), float64] */;
    %835 = %833.4;
    (%834, %835, meta[relay.Constant][60] /* ty=Tensor[(1080, 1), float32] */, meta[relay.Constant][61] /* ty=Tensor[(780), float32] */)
  };
  %836() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(12, 15, 6), float64], Tensor[(1080, 1), float32], Tensor[(780), float32]) */
}

def @func_9833(%var_9829: Tensor[(16, 11, 6), float32], %var_9830: Tensor[(1, 1260), int16], %var_9831: Tensor[(15), float64], %var_9832: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(1, 1260), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 3, 15), float64], Tensor[(15), float64], Tensor[(225), float64], Tensor[(16, 11, 6), bool]) {
  @func_9827(%var_9829, %var_9830, %var_9831, %var_9832) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(1, 1260), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 3, 15), float64], Tensor[(15), float64], Tensor[(225), float64], Tensor[(16, 11, 6), bool]) */
}

def @func_7771() -> (Tensor[(1008, 1), float64],) {
  %839 = fn () -> (Tensor[(1008, 1), float64],) {
    %837 = @func_4773() /* ty=(Tensor[(1008, 1), float64],) */;
    %838 = %837.0;
    (%838,)
  };
  %839() /* ty=(Tensor[(1008, 1), float64],) */
}

def @func_2900(%var_2899: Tensor[(9, 7, 1), float32]) -> (Tensor[(9, 7, 1), float32],) {
  %842 = fn (%var_2891: Tensor[(9, 7, 1), float32]) -> (Tensor[(9, 7, 1), float32],) {
    %840 = cast(%var_2891, dtype="float32") /* ty=Tensor[(9, 7, 1), float32] */;
    %841 = sinh(%840) /* ty=Tensor[(9, 7, 1), float32] */;
    (%841,)
  };
  %842(%var_2899) /* ty=(Tensor[(9, 7, 1), float32],) */
}

def @func_7576() -> (Tensor[(5, 1, 7), float64],) {
  %843 = @func_5886() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float32]) */;
  %844 = %843.0;
  (%844,)
}

def @func_7875() -> (Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) {
  @func_7873() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64]) */
}

def @func_2714(%var_2689: Tensor[(1536), bool], %var_2710: Tensor[(12, 18), float32]) -> (Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) {
  %845 = cast(meta[relay.Constant][62] /* ty=Tensor[(15, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 2), float64] */;
  %846 = cast(%var_2689, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %847 = reshape(%846, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), bool] */;
  %848 = @func_520(%847) /* ty=(Tensor[(16, 6, 16), bool],) */;
  %849 = cast(%var_2710, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %850 = %848.0;
  %851 = cast(%850, dtype="bool") /* ty=Tensor[(16, 6, 16), bool] */;
  %852 = reshape(%849, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), float32] */;
  %853 = reshape(%851, newshape=[128, 12]) /* ty=Tensor[(128, 12), bool] */;
  %854 = @func_1968(%852, %853) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(16, 6, 16), bool], Tensor[(128, 12), bool]) */;
  %855 = acosh(%845) /* ty=Tensor[(15, 10, 2), float64] */;
  %856 = %854.2;
  (%855, %850, %var_2689, %856, %var_2710)
}

def @func_5029(%var_5025: Tensor[(245), float64], %var_5026: Tensor[(18, 70), int16], %var_5027: Tensor[(1, 15), float64], %var_5028: Tensor[(225), float64]) -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(245), float64], Tensor[(14, 6, 15), int16], Tensor[(18, 70), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float32], Tensor[(1, 780), float32], Tensor[(5, 3, 15), float64], Tensor[(1, 15), float64], Tensor[(225), float64]) {
  @func_5023(%var_5025, %var_5026, %var_5027, %var_5028) /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(245), float64], Tensor[(14, 6, 15), int16], Tensor[(18, 70), int16], Tensor[(5, 1, 7), float64], Tensor[(5, 12, 13), float32], Tensor[(1, 780), float32], Tensor[(5, 3, 15), float64], Tensor[(1, 15), float64], Tensor[(225), float64]) */
}

def @func_7532(%var_7530: Tensor[(35, 5), float64]) -> (Tensor[(5, ?, 7), bool], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(35, 5), float64]) {
  @func_7529(%var_7530) /* ty=(Tensor[(5, ?, 7), bool], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64], Tensor[(15, 1), float64], Tensor[(35, 5), float64]) */
}

def @func_5980() -> (Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) {
  %866 = fn () -> (Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) {
    %857 = @func_5086() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %858 = %857.0;
    %859 = cast(meta[relay.Constant][63] /* ty=Tensor[(5, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
    %861 = cast(%858, dtype="float64") /* ty=Tensor[(5, 1, 7), float64] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %863 = @func_5930() /* ty=(Tensor[(5, 1, 7), float64],) */;
    %864 = floor_divide(%861, %862) /* ty=Tensor[(5, ?, 7), float64] */;
    %865 = %863.0;
    (%864, %865)
  };
  %866() /* ty=(Tensor[(5, ?, 7), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_8545(%var_8532: Tensor[(5, 11, 7), float64]) -> (Tensor[(5, 11, 7), bool],) {
  %867 = @func_8199() /* ty=(Tensor[(5, 1, 7), float32], Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */;
  %868 = %867.2;
  %869 = cast(%868, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %870 = cast(%var_8532, dtype="bool") /* ty=Tensor[(5, 11, 7), bool] */;
  %871 = less_equal(%869, %870) /* ty=Tensor[(5, 11, 7), bool] */;
  (%871,)
}

def @func_7156() -> (Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) {
  %887 = fn () -> (Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) {
    %872 = cast(meta[relay.Constant][64] /* ty=Tensor[(588), int64] */, dtype="int64") /* ty=Tensor[(588), int64] */;
    %873 = reshape(%872, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), int64] */;
    %874 = @func_3382(%873) /* ty=(Tensor[(7, 7, 12), bool],) */;
    %875 = cast(meta[relay.Constant][65] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
    %876 = cast(meta[relay.Constant][65] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
    %877 = reshape(%875, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
    %878 = reshape(%876, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), uint64] */;
    %879 = @func_2345(%877, %878) /* ty=(Tensor[(?, 9, 6), float64], Tensor[(?, 9, 6), bool]) */;
    %880 = cast(meta[relay.Constant][66] /* ty=Tensor[(1001, 1), float64] */, dtype="float64") /* ty=Tensor[(1001, 1), float64] */;
    %881 = reshape(%880, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
    %882 = @func_5139(%881) /* ty=(Tensor[(11, 13, 7), float64],) */;
    %883 = @func_6474() /* ty=Tensor[(5, 1, 7), float64] */;
    %884 = %874.0;
    %885 = %879.1;
    %886 = %882.0;
    (%883, %884, meta[relay.Constant][64] /* ty=Tensor[(588), int64] */, %885, meta[relay.Constant][65] /* ty=Tensor[(54), uint64] */, %886, meta[relay.Constant][66] /* ty=Tensor[(1001, 1), float64] */)
  };
  %887() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(7, 7, 12), bool], Tensor[(588), int64], Tensor[(?, 9, 6), bool], Tensor[(54), uint64], Tensor[(11, 13, 7), float64], Tensor[(1001, 1), float64]) */
}

def @func_312(%var_310: Tensor[(390, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) {
  @func_309(%var_310) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(390, 2), float32], Tensor[(5, 12, 13), float64], Tensor[(5, 12, 13), float64]) */
}

def @func_112(%var_110: Tensor[(5, 12, 13), float32]) -> (Tensor[(5, 12, 13), float32],) {
  @func_109(%var_110) /* ty=(Tensor[(5, 12, 13), float32],) */
}

def @func_9750() -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
  %890 = fn () -> (Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) {
    %888 = @func_8901() /* ty=Tensor[(5, 1, 7), float64] */;
    %889 = @func_8240() /* ty=Tensor[(5, 1, 7), float64] */;
    (%888, %889)
  };
  %890() /* ty=(Tensor[(5, 1, 7), float64], Tensor[(5, 1, 7), float64]) */
}

def @func_4774() -> (Tensor[(1008, 1), float64],) {
  %893 = fn () -> (Tensor[(1008, 1), float64],) {
    %891 = @func_4470() /* ty=(Tensor[(9, 8, 14), float64], Tensor[(1008, 1), float64], Tensor[(5, 7, 7), float64], Tensor[(8, 4, 5), int16], Tensor[(160), int16]) */;
    %892 = %891.1;
    (%892,)
  };
  %893() /* ty=(Tensor[(1008, 1), float64],) */
}

def @func_3099(%var_3030: Tensor[(16, 3, 1), bool], %var_3031: Tensor[(16, 3, 12), bool], %var_3036: Tensor[(16, 3, 12), bool], %var_3053: Tensor[(63), float32], %var_3068: Tensor[(1536), bool], %var_3085: Tensor[(9, 7, 12), float32]) -> (Tensor[(16, 3, 12), bool], Tensor[(16, 3, 12), int16], Tensor[(63), float32], Tensor[(16, 6, 16), bool], Tensor[(216), float32], Tensor[(9, 7, 12), float32], Tensor[(9, 7, 1536), uint8]) {
  %894 = cast(%var_3030, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %895 = cast(%var_3031, dtype="bool") /* ty=Tensor[(16, 3, 12), bool] */;
  %896 = cast(%var_3036, dtype="int16") /* ty=Tensor[(16, 3, 12), int16] */;
  %897 = shape_of(%var_3031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_3031, dtype="int16") /* ty=Tensor[(16, 3, 12), int16] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %900 = cast(%var_3068, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %901 = cast(meta[relay.Constant][67] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %902 = reshape(%900, newshape=[1536]) /* ty=Tensor[(1536), bool] */;
  %903 = reshape(%901, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
  %904 = @func_2714(%902, %903) /* ty=(Tensor[(15, 10, 2), float64], Tensor[(16, 6, 16), bool], Tensor[(1536), bool], Tensor[(128, 12), bool], Tensor[(12, 18), float32]) */;
  %905 = cast(%var_3053, dtype="float32") /* ty=Tensor[(63), float32] */;
  %906 = reshape(%905, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float32] */;
  %907 = @func_2898(%906) /* ty=(Tensor[(9, 7, 1), float32],) */;
  %908 = %907.0;
  %909 = cast(%908, dtype="float32") /* ty=Tensor[(9, 7, 1), float32] */;
  %910 = cast(%var_3085, dtype="float32") /* ty=Tensor[(9, 7, 12), float32] */;
  %911 = cast(%var_3068, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %912 = cast(%908, dtype="uint8") /* ty=Tensor[(9, 7, 1), uint8] */;
  %913 = logical_or(%894, %895) /* ty=Tensor[(16, 3, 12), bool] */;
  %914 = bitwise_and(%898, %899) /* ty=Tensor[(16, 3, 12), int16] */;
  %915 = %904.1;
  %916 = mod(%909, %910) /* ty=Tensor[(9, 7, 12), float32] */;
  %917 = maximum(%911, %912) /* ty=Tensor[(9, 7, 1536), uint8] */;
  (%913, %914, %var_3053, %915, meta[relay.Constant][67] /* ty=Tensor[(216), float32] */, %916, %917)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen515/build/output.py", line 2310, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:26:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

