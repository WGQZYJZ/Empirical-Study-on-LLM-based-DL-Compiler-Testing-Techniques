==========mod==========
#[version = "0.0.5"]
def @func_4604() -> (Tensor[(14, 12, 12), int16],) {
  %0 = @func_2692() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) */;
  %1 = %0.0;
  (%1,)
}

def @func_8013() -> (Tensor[(14, 12, 12), int64],) {
  %2 = @func_5523() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
  %3 = %2.1;
  (%3,)
}

def @func_3950(%var_3839: Tensor[(10, 1, 11), float32], %var_3840: Tensor[(10, 13, 11), float32]) -> (Tensor[(10, 13, 11), float32], Tensor[(308, 1), float64], Tensor[(168), float32], Tensor[(48), uint64], Tensor[(10, 1, 11), float32]) {
  %4 = cast(%var_3839, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %5 = cast(%var_3840, dtype="float32") /* ty=Tensor[(10, 13, 11), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %7 = reshape(%6, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
  %8 = @func_2587(%7) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
  %9 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
  %10 = cast(%var_3839, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %11 = log10(%10) /* ty=Tensor[(10, 1, 11), float64] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %13 = subtract(%4, %5) /* ty=Tensor[(10, 13, 11), float32] */;
  %14 = %8.2;
  %15 = %9.0;
  %16 = log2(%12) /* ty=Tensor[(10, 1, 11), float32] */;
  (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, %15, %16)
}

def @func_9601() -> Tensor[(14, 12, 12), float32] {
  @func_4538() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_9186() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), uint32], Tensor[(1, 650), int32], Tensor[(4, 36), float64]) {
  %17 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 650), int32] */, dtype="int32") /* ty=Tensor[(1, 650), int32] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %20 = reshape(%18, newshape=[650]) /* ty=Tensor[(650), int32] */;
  %21 = reshape(%19, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %22 = @func_7271(%20, %21) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) */;
  %23 = %17.0;
  %24 = %22.1;
  (%23, %24, meta[relay.Constant][1] /* ty=Tensor[(1, 650), int32] */, meta[relay.Constant][2] /* ty=Tensor[(4, 36), float64] */)
}

def @func_7485(%var_7482: Tensor[(7, 3, 13), float32]) -> (Tensor[(7, 3, 13), float32],) {
  %25 = cast(%var_7482, dtype="float32") /* ty=Tensor[(7, 3, 13), float32] */;
  %26 = log(%25) /* ty=Tensor[(7, 3, 13), float32] */;
  (%26,)
}

def @func_453(%var_442: Tensor[(14, 12, 12), float32]) -> Tensor[(14, 12, 12), uint32] {
  %27 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %28 = %27.0;
  %29 = cast(%var_442, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%31, %32) /* ty=Tensor[(14, 12, 12), uint32] */
}

def @func_6739() -> Tensor[(14, 12, 12), int16] {
  @func_4609() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_259(%var_255: Tensor[(10, 1, 5), float32]) -> Tensor[(10, 1, 5), float32] {
  %33 = cast(%var_255, dtype="float32") /* ty=Tensor[(10, 1, 5), float32] */;
  log10(%33) /* ty=Tensor[(10, 1, 5), float32] */
}

def @func_2437() -> (Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) {
  %34 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(308), float64] */, dtype="float64") /* ty=Tensor[(308), float64] */;
  %36 = reshape(%35, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %37 = @func_1837(%36) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
  %38 = %34.0;
  %39 = %37.0;
  (%38, %39, meta[relay.Constant][3] /* ty=Tensor[(308), float64] */)
}

def @func_9709(%var_9664: Tensor[(5, 1, 2), int8]) -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(5, 6, 2), int16]) {
  %40 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(72, 1), int64] */, dtype="int64") /* ty=Tensor[(72, 1), int64] */;
  %42 = reshape(%40, newshape=[]) /* ty=int64 */;
  %43 = reshape(%41, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %44 = cast(%var_9664, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 6, 2), int8] */, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
  %46 = equal(%44, %45) /* ty=Tensor[(5, 6, 2), bool] */;
  %47 = cast(8 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %48 = cast(%46, dtype="int16") /* ty=Tensor[(5, 6, 2), int16] */;
  %49 = @func_153(%42, %43) /* ty=Tensor[(12, 6, 1), int64] */;
  %50 = minimum(%47, %48) /* ty=Tensor[(5, 6, 2), int16] */;
  (%49, meta[relay.Constant][4] /* ty=Tensor[(72, 1), int64] */, %50)
}

def @func_5030() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
  %51 = @func_4974() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) */;
  %52 = cast(meta[relay.Constant][6] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %53 = reshape(%52, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
  %54 = @func_2587(%53) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
  %55 = %51.1;
  %56 = %54.3;
  (%55, %56, meta[relay.Constant][6] /* ty=Tensor[(168), float32] */)
}

def @func_861() -> Tensor[(14, 12, 12), int16] {
  %57 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %57.2
}

def @func_1950() -> Tensor[(14, 12, 12), float32] {
  %58 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %58.0
}

def @func_6958(%var_6946: Tensor[(9, 7, 6), uint32], %var_6947: Tensor[(9, 7, 6), uint32]) -> (Tensor[(9, 7, 6), uint32],) {
  %59 = cast(%var_6947, dtype="uint32") /* ty=Tensor[(9, 7, 6), uint32] */;
  %60 = shape_of(%var_6946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%var_6946, dtype="uint32") /* ty=Tensor[(9, 7, 6), uint32] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %63 = minimum(%61, %62) /* ty=Tensor[(9, 7, 6), uint32] */;
  (%63,)
}

def @func_2927() -> (Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) {
  %64 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %65 = cast(9.84051f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %67 = reshape(%65, newshape=[]) /* ty=float64 */;
  %68 = reshape(%66, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
  %69 = @func_1761(%67, %68) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
  %70 = %69.3;
  %71 = cast(9.84051f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %72 = cast(%70, dtype="float32") /* ty=Tensor[(144), float32] */;
  %73 = @func_2008() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %74 = %64.0;
  %75 = floor_mod(%71, %72) /* ty=Tensor[(144), float32] */;
  %76 = %73.0;
  (%74, meta[relay.Constant][7] /* ty=Tensor[(9), float64] */, %75, %76)
}

def @func_8945() -> Tensor[(14, 12, 12), float64] {
  %77 = @func_3709() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %77.0
}

def @func_5523() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
  %78 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %79 = %78.0;
  %80 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %81 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
  (%79, %80, %81)
}

def @func_6501() -> Tensor[(12, 6, 48), float64] {
  %82 = @func_4256() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) */;
  %83 = %82.1;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %85 = tan(%84) /* ty=Tensor[(12, 6, 1), float32] */;
  %86 = @func_5887() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) */;
  %87 = %86.3;
  %88 = cast(%85, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
  %89 = cast(%87, dtype="float64") /* ty=Tensor[(48), float64] */;
  divide(%88, %89) /* ty=Tensor[(12, 6, 48), float64] */
}

def @func_4974() -> (Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) {
  %90 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
  %91 = %90.1;
  %92 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  (%91, %92)
}

def @func_8281() -> Tensor[(14, 12, 12), int16] {
  %93 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %93.0
}

def @func_9390(%var_9343: Tensor[(12, 6, 4), int8]) -> (Tensor[(50), float32], Tensor[(2016), float32], Tensor[(12, 6, 4), float32]) {
  %94 = cast(meta[relay.Constant][8] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %95 = reshape(%94, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %96 = @func_5163(%95) /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) */;
  %97 = @func_6159() /* ty=(Tensor[(12, 6, 4), int8],) */;
  %98 = %97.0;
  %99 = cast(%var_9343, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %103 = right_shift(%101, %102) /* ty=Tensor[(12, 6, 4), uint64] */;
  %104 = cast(%98, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %108 = %96.4;
  %109 = maximum(%106, %107) /* ty=Tensor[(12, 6, 4), float32] */;
  (%108, meta[relay.Constant][8] /* ty=Tensor[(2016), float32] */, %109)
}

def @func_7916() -> (Tensor[(14, 12, 12), uint32], Tensor[(7, 3, 13), float32], Tensor[(273), float32], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), int16], Tensor[(168), float32], Tensor[(12, 6, 4), int8]) {
  %110 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %112 = reshape(%111, newshape=[7, 3, 13]) /* ty=Tensor[(7, 3, 13), float32] */;
  %113 = @func_7485(%112) /* ty=(Tensor[(7, 3, 13), float32],) */;
  %114 = %110.3;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %116 = reshape(%115, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %117 = @func_359(%116) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %118 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %119 = @func_4952() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) */;
  %120 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
  %121 = %113.0;
  %122 = %117.0;
  %123 = %118.0;
  %124 = %119.2;
  %125 = %120.1;
  (%114, %121, meta[relay.Constant][9] /* ty=Tensor[(273), float32] */, %122, %123, %124, %125)
}

def @func_8193() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(330), float64], Tensor[(10, 1, 5), float32], Tensor[(50), float32], Tensor[(14, 12, 12), float32]) {
  %126 = @func_2952() /* ty=(Tensor[(48), uint64],) */;
  %127 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %128 = reshape(%127, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %129 = @func_4182(%128) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) */;
  %130 = cast(meta[relay.Constant][11] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %131 = reshape(%130, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %132 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %135 = asin(%134) /* ty=Tensor[(14, 12, 12), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %137 = %126.0;
  %138 = %129.0;
  %139 = @func_259(%131) /* ty=Tensor[(10, 1, 5), float32] */;
  %140 = exp(%136) /* ty=Tensor[(14, 12, 12), float32] */;
  (%137, %138, meta[relay.Constant][10] /* ty=Tensor[(330), float64] */, %139, meta[relay.Constant][11] /* ty=Tensor[(50), float32] */, %140)
}

def @func_3694() -> (Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
  %141 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %142 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %143 = reshape(%142, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %144 = @func_820(%143) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %145 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %146 = reshape(%145, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
  %147 = @func_2587(%146) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
  %148 = %141.0;
  %149 = %144.2;
  %150 = %147.3;
  (%148, %149, meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, %150, meta[relay.Constant][13] /* ty=Tensor[(168), float32] */)
}

def @func_6911() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  %151 = @func_4499() /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) */;
  %152 = @func_4952() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) */;
  %153 = %151.1;
  %154 = %152.0;
  (%153, %154)
}

def @func_2819() -> (Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) {
  %155 = @func_2495() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %156 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 130), int32] */, dtype="int32") /* ty=Tensor[(5, 130), int32] */;
  %157 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 130), int32] */, dtype="int32") /* ty=Tensor[(5, 130), int32] */;
  %158 = reshape(%156, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
  %159 = reshape(%157, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
  %160 = @func_2125(%158, %159) /* ty=Tensor[(13, 5, 10), bool] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(13, 5, 10), float32] */;
  %162 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  %163 = %155.0;
  %164 = asin(%161) /* ty=Tensor[(13, 5, 10), float32] */;
  %165 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  (%162, meta[relay.Constant][14] /* ty=Tensor[(5, 130), int32] */, %163, %164, %165)
}

def @func_5579() -> (Tensor[(14, 12, 12), int16],) {
  %166 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%166,)
}

def @func_3318() -> (Tensor[(14, 12, 12), float32],) {
  %167 = @func_2927() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) */;
  %168 = %167.3;
  (%168,)
}

def @func_5887() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) {
  %169 = @func_3093() /* ty=(Tensor[(14, 12, 12), int64],) */;
  %170 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
  %171 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
  %172 = @func_3828() /* ty=Tensor[(14, 12, 12), float32] */;
  %173 = %169.0;
  %174 = %170.0;
  (%171, %172, %173, %174)
}

def @func_7318() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %175 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %176 = @func_3553() /* ty=Tensor[(14, 12, 12), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %178 = reshape(%177, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %179 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  %180 = %175.0;
  %181 = @func_453(%178) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%176, %179, %180, %181)
}

def @func_7539(%var_7527: Tensor[(648), int64]) -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(648), int64]) {
  %182 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %183 = cast(%var_7527, dtype="int64") /* ty=Tensor[(648), int64] */;
  %184 = reshape(%183, newshape=[72, 9]) /* ty=Tensor[(72, 9), int64] */;
  %185 = @func_6126(%184) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */;
  %186 = %182.0;
  %187 = %185.2;
  (%186, %187, %var_7527)
}

def @func_3646() -> Tensor[(14, 12, 12), float64] {
  %188 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  rsqrt(%190) /* ty=Tensor[(14, 12, 12), float64] */
}

def @func_7744() -> Tensor[(14, 12, 12), int16] {
  @func_2461() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_7634() -> (Tensor[(14, 12, 12), float32],) {
  %191 = @func_3318() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %192 = %191.0;
  (%192,)
}

def @func_9722() -> (Tensor[(12, 6, 4), int8],) {
  %193 = @func_6159() /* ty=(Tensor[(12, 6, 4), int8],) */;
  %194 = %193.0;
  (%194,)
}

def @func_4499() -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) {
  %195 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %196 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  (%195, %196)
}

def @func_1291() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %197 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %198 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %199 = %197.0;
  %200 = %198.0;
  (%199, %200)
}

def @func_9100(%var_9063: Tensor[(3, 12, 11), uint16], %var_9064: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(14, 12, 12), float32]) {
  %201 = cast(%var_9064, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %202 = shape_of(%var_9063, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_9063, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %205 = @func_3318() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %206 = left_shift(%203, %204) /* ty=Tensor[(3, 12, 11), uint16] */;
  %207 = %205.0;
  (%206, %207)
}

def @func_4538() -> Tensor[(14, 12, 12), float32] {
  %208 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %208.0
}

def @func_4577() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
  %209 = @func_3184() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %210 = %209.0;
  %211 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %212 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
  (%210, %211, %212)
}

def @func_204() -> (Tensor[(14, 12, 12), float32],) {
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %214 = asinh(%213) /* ty=Tensor[(14, 12, 12), float32] */;
  (%214,)
}

def @func_5670() -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float64]) {
  %215 = @func_2046() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) */;
  %216 = @func_4130() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %219 = %215.1;
  %220 = atanh(%218) /* ty=Tensor[(14, 12, 12), float64] */;
  (%219, %220)
}

def @func_741() -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %221 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(72, 1), int64] */, dtype="int64") /* ty=Tensor[(72, 1), int64] */;
  %223 = reshape(%221, newshape=[]) /* ty=int64 */;
  %224 = reshape(%222, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %225 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %226 = %225.0;
  %227 = cast(-1 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %228 = cast(%226, dtype="int16") /* ty=Tensor[(14, 12, 12), int16] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %230 = reshape(%229, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %231 = @func_153(%223, %224) /* ty=Tensor[(12, 6, 1), int64] */;
  %232 = logical_xor(%227, %228) /* ty=Tensor[(14, 12, 12), int16] */;
  %233 = @func_453(%230) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%231, meta[relay.Constant][16] /* ty=Tensor[(72, 1), int64] */, %232, %233)
}

def @func_6822() -> Tensor[(14, 12, 12), float32] {
  %234 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %234.0
}

def @func_7173(%var_7096: Tensor[(1, 16, 3), float64], %var_7140: Tensor[(2016), float32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) {
  %235 = cast(%var_7140, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %236 = reshape(%235, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %237 = cast(%var_7096, dtype="float64") /* ty=Tensor[(1, 16, 3), float64] */;
  %238 = cos(%237) /* ty=Tensor[(1, 16, 3), float64] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(1, 16, 3), float64] */;
  %240 = log2(%239) /* ty=Tensor[(1, 16, 3), float64] */;
  %241 = cast(%var_7096, dtype="float32") /* ty=Tensor[(1, 16, 3), float32] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="float32") /* ty=Tensor[(1, 16, 3), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %245 = divide(%243, %244) /* ty=Tensor[(?, 16, 3), float32] */;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(?, 16, 3), float64] */;
  %247 = tan(%246) /* ty=Tensor[(?, 16, 3), float64] */;
  %248 = cast(%247, dtype="int32") /* ty=Tensor[(?, 16, 3), int32] */;
  %249 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%238, dtype="int32") /* ty=Tensor[(1, 16, 3), int32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %252 = cast(%var_7096, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %253 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%238, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %256 = logical_and(%254, %255) /* ty=Tensor[(?, 16, 3), bool] */;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(?, 16, 3), bool] */;
  %258 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%247, dtype="bool") /* ty=Tensor[(?, 16, 3), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = @func_453(%236) /* ty=Tensor[(14, 12, 12), uint32] */;
  %262 = cast(%261, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %263 = cast(meta[relay.Constant][17] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %264 = reshape(%262, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), int64] */;
  %265 = reshape(%263, newshape=[72, 2]) /* ty=Tensor[(72, 2), float64] */;
  %266 = @func_3787(%264, %265) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) */;
  %267 = bitwise_xor(%250, %251) /* ty=Tensor[(?, 16, 3), int32] */;
  %268 = greater(%259, %260) /* ty=Tensor[(?, 16, 3), bool] */;
  %269 = %266.3;
  (%261, %var_7140, %267, %268, %269, meta[relay.Constant][17] /* ty=Tensor[(144), float64] */)
}

def @func_9812() -> Tensor[(14, 12, 12), int16] {
  %270 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %270.0
}

def @func_4952() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) {
  %271 = @func_4538() /* ty=Tensor[(14, 12, 12), float32] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %273 = erf(%272) /* ty=Tensor[(14, 12, 12), float32] */;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %275 = reshape(%274, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %276 = @func_541(%275) /* ty=(Tensor[(14, 12, 12), int64],) */;
  %277 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %278 = %276.0;
  %279 = %277.4;
  (%273, %278, %279)
}

def @func_9324(%var_9300: Tensor[(14, 12, 12), float32]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %280 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %281 = @func_2819() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) */;
  %282 = %281.0;
  %283 = cast(%var_9300, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %287 = %280.0;
  %288 = multiply(%285, %286) /* ty=Tensor[(14, 12, 12), float32] */;
  (%287, %288)
}

def @func_1837(%var_1816: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) {
  %289 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %290 = shape_of(%var_1816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1816, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %293 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %294 = subtract(%291, %292) /* ty=Tensor[(2, 11, 14), float64] */;
  %295 = %293.0;
  (%294, %295)
}

def @func_5717() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
  %296 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %297 = @func_3093() /* ty=(Tensor[(14, 12, 12), int64],) */;
  %298 = %296.0;
  %299 = %297.0;
  (%298, %299)
}

def @func_1714() -> (Tensor[(14, 12, 12), int16],) {
  %300 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%300,)
}

def @func_359(%var_342: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) {
  %301 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %302 = %301.0;
  %303 = cast(%var_342, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %307 = mod(%305, %306) /* ty=Tensor[(14, 12, 12), float64] */;
  %308 = cast(%var_342, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %313 = greater_equal(%310, %311) /* ty=Tensor[(14, 12, 12), bool] */;
  %314 = %312.0;
  (%313, %314)
}

def @func_5292(%var_5282: Tensor[(2, 12, 2), int8], %var_5283: Tensor[(2, 12, 2), int8]) -> (Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) {
  %315 = cast(%var_5283, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %316 = shape_of(%var_5282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%var_5282, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %319 = cast(%var_5282, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
  %320 = subtract(%317, %318) /* ty=Tensor[(2, 12, 2), int8] */;
  %321 = atanh(%319) /* ty=Tensor[(2, 12, 2), float64] */;
  (%320, %321)
}

def @func_6578(%var_6542: Tensor[(9), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int64], float64, Tensor[(9), float64], Tensor[(14, 12, 12), int16]) {
  %322 = cast(-6.64848f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %323 = cast(%var_6542, dtype="float64") /* ty=Tensor[(9), float64] */;
  %324 = reshape(%322, newshape=[]) /* ty=float64 */;
  %325 = reshape(%323, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
  %326 = @func_1761(%324, %325) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
  %327 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %328 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %329 = %326.1;
  %330 = %327.0;
  (%328, %329, -6.64848f64 /* ty=float64 */, %var_6542, %330)
}

def @func_7944(%var_7940: Tensor[(12, 4), int8]) -> (Tensor[(14, 12, 12), int16], Tensor[(2, 12, 2), float64], Tensor[(12, 4), int8], Tensor[(8, 2, 3), bool]) {
  %331 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %332 = cast(%var_7940, dtype="int8") /* ty=Tensor[(12, 4), int8] */;
  %333 = cast(%var_7940, dtype="int8") /* ty=Tensor[(12, 4), int8] */;
  %334 = reshape(%332, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), int8] */;
  %335 = reshape(%333, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), int8] */;
  %336 = @func_5292(%334, %335) /* ty=(Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) */;
  %337 = cast(%var_7940, dtype="uint64") /* ty=Tensor[(12, 4), uint64] */;
  %338 = reshape(%337, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %339 = @func_1365(%338) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) */;
  %340 = %331.0;
  %341 = %336.1;
  %342 = %339.1;
  (%340, %341, %var_7940, %342)
}

def @func_2503() -> (Tensor[(48), uint64],) {
  %343 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %344 = %343.0;
  (%344,)
}

def @func_496(%var_478: float64, %var_479: Tensor[(12, 3, 4), float64]) -> Tensor[(12, 3, 4), float64] {
  %345 = cast(%var_478, dtype="float64") /* ty=float64 */;
  %346 = cast(%var_479, dtype="float64") /* ty=Tensor[(12, 3, 4), float64] */;
  floor_divide(%345, %346) /* ty=Tensor[(12, 3, 4), float64] */
}

def @func_1365(%var_1356: Tensor[(48), uint64]) -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) {
  %347 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %348 = cast(%var_1356, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %349 = cast(%var_1356, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %350 = reshape(%348, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %351 = reshape(%349, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %352 = %347.0;
  %353 = @func_68(%350, %351) /* ty=Tensor[(8, 2, 3), bool] */;
  (%352, %353, %var_1356)
}

def @func_1761(%var_1735: float64, %var_1752: Tensor[(3, 1, 3), float64]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) {
  %354 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %355 = cast(%var_1735, dtype="float64") /* ty=float64 */;
  %356 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %358 = reshape(%355, newshape=[]) /* ty=float64 */;
  %359 = reshape(%356, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %360 = reshape(%357, newshape=[5, 10]) /* ty=Tensor[(5, 10), float32] */;
  %361 = @func_691(%358, %359, %360) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) */;
  %362 = cast(%var_1735, dtype="float32") /* ty=float32 */;
  %363 = cast(%var_1752, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %364 = %354.0;
  %365 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %366 = %361.7;
  %367 = maximum(%362, %363) /* ty=Tensor[(3, 1, 3), float32] */;
  (%364, %365, %366, meta[relay.Constant][19] /* ty=Tensor[(144), float64] */, meta[relay.Constant][20] /* ty=Tensor[(50), float32] */, %367)
}

def @func_2831() -> (Tensor[(14, 12, 12), float32],) {
  %368 = @func_2319() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %369 = %368.0;
  (%369,)
}

def @func_3606() -> (Tensor[(13, 5, 10), bool], Tensor[(650), int32], Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %370 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), int32] */, dtype="int32") /* ty=Tensor[(650), int32] */;
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), int32] */, dtype="int32") /* ty=Tensor[(650), int32] */;
  %372 = reshape(%370, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
  %373 = reshape(%371, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
  %374 = @func_2503() /* ty=(Tensor[(48), uint64],) */;
  %375 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %376 = %375.0;
  %377 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %380 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%376, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %383 = @func_2125(%372, %373) /* ty=Tensor[(13, 5, 10), bool] */;
  %384 = %374.0;
  %385 = power(%381, %382) /* ty=Tensor[(14, 12, 12), float32] */;
  (%383, meta[relay.Constant][21] /* ty=Tensor[(650), int32] */, %384, %385)
}

def @func_8930() -> (Tensor[(14, 12, 12), int64],) {
  %386 = @func_4577() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
  %387 = %386.1;
  (%387,)
}

def @func_3184() -> (Tensor[(14, 12, 12), int16],) {
  %388 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %389 = %388.0;
  (%389,)
}

def @func_2952() -> (Tensor[(48), uint64],) {
  %390 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %391 = %390.0;
  (%391,)
}

def @func_6476(%var_6450: Tensor[(132), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(132), float64], Tensor[(11, 2, 6), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int16]) {
  %392 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
  %393 = cast(%var_6450, dtype="float64") /* ty=Tensor[(132), float64] */;
  %394 = cast(%var_6450, dtype="float64") /* ty=Tensor[(132), float64] */;
  %395 = reshape(%393, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float64] */;
  %396 = reshape(%394, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float64] */;
  %397 = @func_4432(%395, %396) /* ty=Tensor[(11, 2, 6), float64] */;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %399 = %392.0;
  %400 = cosh(%398) /* ty=Tensor[(11, 2, 6), float32] */;
  %401 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %402 = @func_3491() /* ty=Tensor[(14, 12, 12), int16] */;
  (%399, %var_6450, %400, %401, %402)
}

def @func_2587(%var_2525: Tensor[(7, 6, 4), float32]) -> (Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) {
  %403 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
  %404 = exp(%403) /* ty=Tensor[(7, 1, 4), float32] */;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(7, 1, 4), bool] */;
  %406 = cast(%var_2525, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
  %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(308, 1), float64] */, dtype="float64") /* ty=Tensor[(308, 1), float64] */;
  %408 = reshape(%407, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %409 = @func_1837(%408) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
  %410 = %409.1;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %412 = reshape(%411, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %413 = cast(%var_2525, dtype="float32") /* ty=Tensor[(7, 6, 4), float32] */;
  %414 = erf(%413) /* ty=Tensor[(7, 6, 4), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(7, 6, 4), float64] */;
  %416 = acosh(%415) /* ty=Tensor[(7, 6, 4), float64] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(7, 6, 4), float64] */;
  %418 = less_equal(%405, %406) /* ty=Tensor[(7, 6, 4), bool] */;
  %419 = @func_453(%412) /* ty=Tensor[(14, 12, 12), uint32] */;
  %420 = log10(%417) /* ty=Tensor[(7, 6, 4), float64] */;
  (%418, %410, meta[relay.Constant][23] /* ty=Tensor[(308, 1), float64] */, %419, %420)
}

def @func_6666() -> (Tensor[(72, ?), uint32], Tensor[(14, 12, 12), int16]) {
  %421 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %422 = %421.1;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %424 = asin(%423) /* ty=Tensor[(72, 1), float64] */;
  %425 = cast(%422, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%424, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %429 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %430 = subtract(%427, %428) /* ty=Tensor[(72, ?), uint32] */;
  %431 = %429.0;
  (%430, %431)
}

def @func_9522() -> Tensor[(14, 12, 12), int16] {
  %432 = @func_6181() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */;
  %432.0
}

def @func_4666() -> (Tensor[(14, 12, 12), float32],) {
  %433 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %434 = %433.0;
  (%434,)
}

def @func_1934() -> (Tensor[(14, 12, 12), uint32],) {
  %435 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %436 = %435.3;
  (%436,)
}

def @func_4002(%var_3979: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) {
  %437 = cast(-2.71145f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %438 = cast(%var_3979, dtype="float64") /* ty=Tensor[(10, 11, 3), float64] */;
  %439 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %440 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %441 = floor_divide(%437, %438) /* ty=Tensor[(10, 11, 3), float64] */;
  %442 = %439.0;
  %443 = %440.3;
  (%441, %442, %443)
}

def @func_4868() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(48), uint64]) {
  %444 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %445 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %446 = %444.2;
  %447 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %448 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  %449 = %445.0;
  (%446, %447, %448, %449)
}

def @func_2015() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) {
  %450 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %453 = reshape(%452, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %454 = @func_453(%453) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%451, %454)
}

def @func_3155() -> (Tensor[(14, 12, 12), int16],) {
  %455 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%455,)
}

def @func_983() -> Tensor[(14, 12, 12), float32] {
  @func_565() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_2008() -> (Tensor[(14, 12, 12), float32],) {
  %456 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %457 = %456.0;
  (%457,)
}

def @func_7043(%var_7020: float64, %var_7021: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), float64],) {
  %458 = cast(%var_7020, dtype="float64") /* ty=float64 */;
  %459 = cast(%var_7021, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %460 = power(%458, %459) /* ty=Tensor[(4, 10, 8), float64] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %462 = exp(%461) /* ty=Tensor[(4, 10, 8), float64] */;
  (%462,)
}

def @func_2096() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
  %463 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %464 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%463, %464)
}

def @func_3491() -> Tensor[(14, 12, 12), int16] {
  %465 = @func_2692() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) */;
  %465.1
}

def @func_7597() -> (Tensor[(14, 12, 12), float32], Tensor[(72), int64], Tensor[(330), float64], Tensor[(14, 12, 12), float32], float64) {
  %466 = @func_2008() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %467 = cast(meta[relay.Constant][24] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %468 = reshape(%467, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
  %469 = @func_4002(%468) /* ty=(Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) */;
  %470 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %471 = %466.0;
  %472 = %469.2;
  %473 = @func_6822() /* ty=Tensor[(14, 12, 12), float32] */;
  %474 = %470.1;
  (%471, %472, meta[relay.Constant][24] /* ty=Tensor[(330), float64] */, %473, %474)
}

def @func_1517(%var_1486: Tensor[(14, 12, 12), float64], %var_1513: float64) -> (Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
  %475 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %476 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %477 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %478 = %477.0;
  %479 = cast(%var_1486, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %485 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %486 = cast(%var_1513, dtype="float64") /* ty=float64 */;
  %487 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %488 = reshape(%486, newshape=[]) /* ty=float64 */;
  %489 = reshape(%487, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
  %490 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %491 = %475.0;
  %492 = %476.2;
  %493 = less(%481, %482) /* ty=Tensor[(14, 12, 12), bool] */;
  %494 = tan(%484) /* ty=Tensor[(14, 12, 12), float64] */;
  %495 = %485.0;
  %496 = @func_496(%488, %489) /* ty=Tensor[(12, 3, 4), float64] */;
  (%490, %491, %492, %493, %494, %495, %496, %var_1513, meta[relay.Constant][25] /* ty=Tensor[(144), float64] */)
}

def @func_4730() -> (Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) {
  %497 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %498 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %499 = %498.3;
  %500 = cast(%499, dtype="int8") /* ty=Tensor[(12, 6, 1), int8] */;
  %501 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 6, 4), int64] */, dtype="int8") /* ty=Tensor[(12, 6, 4), int8] */;
  %502 = %497.0;
  %503 = bitwise_or(%500, %501) /* ty=Tensor[(12, 6, 4), int8] */;
  (%502, %503)
}

def @func_8129() -> (Tensor[(14, 12, 12), float32], Tensor[(308), float64], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(8, 16, 14), float64], Tensor[(648), int64]) {
  %504 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %505 = @func_2437() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) */;
  %506 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %507 = @func_7318() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %508 = @func_6323() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %509 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
  %510 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %511 = cast(meta[relay.Constant][27] /* ty=Tensor[(648), int64] */, dtype="int64") /* ty=Tensor[(648), int64] */;
  %512 = reshape(%511, newshape=[72, 9]) /* ty=Tensor[(72, 9), int64] */;
  %513 = @func_6126(%512) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */;
  %514 = %504.0;
  %515 = %505.2;
  %516 = %506.0;
  %517 = %507.2;
  %518 = %508.0;
  %519 = %509.0;
  %520 = @func_4609() /* ty=Tensor[(14, 12, 12), int16] */;
  %521 = %510.0;
  %522 = %513.6;
  (%514, %515, %516, %517, %518, %519, %520, %521, %522, meta[relay.Constant][27] /* ty=Tensor[(648), int64] */)
}

def @func_899() -> (Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
  %523 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %524 = cast(meta[relay.Constant][28] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %525 = reshape(%523, newshape=[]) /* ty=int64 */;
  %526 = reshape(%524, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %527 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  %528 = @func_153(%525, %526) /* ty=Tensor[(12, 6, 1), int64] */;
  (%527, %528, -1 /* ty=int64 */, meta[relay.Constant][28] /* ty=Tensor[(72), int64] */)
}

def @func_2692() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) {
  %529 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %530 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %531 = %529.0;
  %532 = %530.0;
  (%531, %532)
}

def @func_5748() -> Tensor[(14, 12, 12), float32] {
  %533 = @func_2046() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) */;
  %533.2
}

def @func_3709() -> (Tensor[(14, 12, 12), float64],) {
  %534 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %535 = %534.0;
  (%535,)
}

def @func_3787(%var_3745: Tensor[(14, 12, 12), int64], %var_3777: Tensor[(72, 2), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) {
  %536 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %537 = cast(%var_3745, dtype="uint16") /* ty=Tensor[(14, 12, 12), uint16] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="uint16") /* ty=Tensor[(14, 12, 12), uint16] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %541 = bitwise_or(%539, %540) /* ty=Tensor[(14, 12, 12), uint16] */;
  %542 = cast(%536, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %547 = cast(%var_3777, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %548 = reshape(%547, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %549 = @func_820(%548) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %550 = minimum(%544, %545) /* ty=Tensor[(14, 12, 12), float64] */;
  %551 = %546.0;
  %552 = %549.2;
  (%550, %551, %552, %var_3777)
}

def @func_9413() -> (Tensor[(14, 12, 12), float32],) {
  %553 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %554 = %553.0;
  (%554,)
}

def @func_6030(%var_6021: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), bool], Tensor[(2, 11, 14), float32]) {
  %555 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
  %556 = %555.1;
  %557 = cast(%var_6021, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = cast(%var_6021, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
  %562 = greater_equal(%559, %560) /* ty=Tensor[(2, 11, 14), bool] */;
  %563 = sin(%561) /* ty=Tensor[(2, 11, 14), float32] */;
  (%562, %563)
}

def @func_2319() -> (Tensor[(14, 12, 12), float32],) {
  %564 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %565 = %564.0;
  (%565,)
}

def @func_4049() -> Tensor[(14, 12, 12), int16] {
  %566 = @func_2437() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) */;
  %566.0
}

def @func_6247() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) {
  %567 = @func_5030() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %568 = @func_5748() /* ty=Tensor[(14, 12, 12), float32] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %570 = cast(-8.55335f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %571 = reshape(%569, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float64] */;
  %572 = reshape(%570, newshape=[]) /* ty=float64 */;
  %573 = @func_1517(%571, %572) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %574 = %573.6;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(12, 3, 4), bool] */;
  %576 = cast(-8.55335f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %577 = less_equal(%575, %576) /* ty=Tensor[(12, 3, 4), bool] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
  %579 = exp(%578) /* ty=Tensor[(12, 3, 4), float32] */;
  %580 = cast(%579, dtype="uint64") /* ty=Tensor[(12, 3, 4), uint64] */;
  %581 = cast(-8.55335f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %582 = %567.0;
  %583 = bitwise_or(%580, %581) /* ty=Tensor[(12, 3, 4), uint64] */;
  (%568, %582, %583)
}

def @func_3455(%var_3428: Tensor[(9, 10, 16), float32]) -> (Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) {
  %584 = cast(-2.53715f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %585 = cast(%var_3428, dtype="float32") /* ty=Tensor[(9, 10, 16), float32] */;
  %586 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %587 = @func_2319() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %588 = floor_mod(%584, %585) /* ty=Tensor[(9, 10, 16), float32] */;
  %589 = %586.0;
  %590 = %587.0;
  (%588, %589, %590)
}

def @func_1234() -> (Tensor[(48), uint64],) {
  %591 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %592 = %591.2;
  (%592,)
}

def @func_820(%var_809: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
  %593 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %594 = cast(-0.477325f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %595 = cast(%var_809, dtype="float64") /* ty=Tensor[(144), float64] */;
  %596 = reshape(%594, newshape=[]) /* ty=float64 */;
  %597 = reshape(%595, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
  %598 = %593.0;
  %599 = @func_496(%596, %597) /* ty=Tensor[(12, 3, 4), float64] */;
  (%598, %599, -0.477325f64 /* ty=float64 */, %var_809)
}

def @func_6323() -> (Tensor[(14, 12, 12), int16],) {
  %600 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
  (%600,)
}

def @func_7072() -> Tensor[(12, 3, 4), uint64] {
  %601 = @func_6247() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) */;
  %601.2
}

def @func_2461() -> Tensor[(14, 12, 12), int16] {
  %602 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %602.2
}

def @func_4256() -> (Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) {
  %603 = cast(meta[relay.Constant][29] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %604 = reshape(%603, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), float32] */;
  %605 = @func_3455(%604) /* ty=(Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) */;
  %606 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %607 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
  %608 = %605.1;
  %609 = %606.0;
  (%607, %608, meta[relay.Constant][29] /* ty=Tensor[(1440), float32] */, %609)
}

def @func_1342() -> (Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %610 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %611 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %613 = reshape(%612, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %614 = %610.1;
  %615 = @func_453(%613) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%614, %611, %615)
}

def @func_2167() -> (Tensor[(14, 12, 12), float32],) {
  %616 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %617 = %616.0;
  (%617,)
}

def @func_2257() -> (Tensor[(14, 12, 12), int64],) {
  %618 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  (%618,)
}

def @func_6381() -> Tensor[(168), float32] {
  %619 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %619.4
}

def @func_2291(%var_2274: Tensor[(14, 12, 12), uint32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), int16]) {
  %620 = @func_1342() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %621 = %620.2;
  %622 = cast(%var_2274, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %626 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %627 = left_shift(%624, %625) /* ty=Tensor[(14, 12, 12), uint32] */;
  %628 = %626.0;
  (%627, %628)
}

def @func_5337() -> (Tensor[(8, 16, 14), bool],) {
  %629 = @func_5053() /* ty=Tensor[(8, 16, 14), bool] */;
  (%629,)
}

def @func_8783() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64]) {
  %630 = @func_5887() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) */;
  %631 = @func_7744() /* ty=Tensor[(14, 12, 12), int16] */;
  %632 = %630.2;
  (%631, %632)
}

def @func_8337() -> Tensor[(48), uint64] {
  @func_7363() /* ty=Tensor[(48), uint64] */
}

def @func_2046() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) {
  %633 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %636 = reshape(%635, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %637 = @func_453(%636) /* ty=Tensor[(14, 12, 12), uint32] */;
  %638 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  (%634, %637, %638)
}

def @func_5163(%var_5153: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) {
  %639 = cast(3.10726f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %640 = cast(meta[relay.Constant][30] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %641 = cast(meta[relay.Constant][31] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %642 = reshape(%639, newshape=[]) /* ty=float64 */;
  %643 = reshape(%640, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %644 = reshape(%641, newshape=[5, 10]) /* ty=Tensor[(5, 10), float32] */;
  %645 = @func_691(%642, %643, %644) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) */;
  %646 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %647 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
  %648 = %647.0;
  %649 = cast(%var_5153, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
  %654 = %645.8;
  %655 = %646.5;
  %656 = less_equal(%651, %652) /* ty=Tensor[(14, 12, 12), bool] */;
  (%653, %654, 3.10726f64 /* ty=float64 */, meta[relay.Constant][30] /* ty=Tensor[(144), float64] */, meta[relay.Constant][31] /* ty=Tensor[(50), float32] */, %655, %656)
}

def @func_5434() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
  %657 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %658 = @func_2257() /* ty=(Tensor[(14, 12, 12), int64],) */;
  %659 = %657.0;
  %660 = %658.0;
  (%659, %660)
}

def @func_8513(%var_8371: Tensor[(12, 6, 48), float64], %var_8382: Tensor[(2016), float64], %var_8398: Tensor[(378), uint32]) -> (Tensor[(144), float64], Tensor[(2016), float64], Tensor[(14, 12, 12), int16], Tensor[(9, 7, 6), uint32], Tensor[(378), uint32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32], Tensor[(12, 6, 48), float64], Tensor[(12, 6, 48), int16], Tensor[(12, 6, 48), bool]) {
  %661 = cast(%var_8382, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %662 = cast(-0.28749f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %663 = reshape(%661, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float64] */;
  %664 = reshape(%662, newshape=[]) /* ty=float64 */;
  %665 = @func_1517(%663, %664) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %666 = cast(%var_8398, dtype="uint32") /* ty=Tensor[(378), uint32] */;
  %667 = cast(%var_8398, dtype="uint32") /* ty=Tensor[(378), uint32] */;
  %668 = reshape(%666, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), uint32] */;
  %669 = reshape(%667, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), uint32] */;
  %670 = @func_6958(%668, %669) /* ty=(Tensor[(9, 7, 6), uint32],) */;
  %671 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %672 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %673 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %674 = @func_4609() /* ty=Tensor[(14, 12, 12), int16] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %676 = reshape(%675, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %677 = @func_6501() /* ty=Tensor[(12, 6, 48), float64] */;
  %678 = cast(%var_8371, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %682 = maximum(%680, %681) /* ty=Tensor[(12, 6, 48), float64] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %684 = cast(%677, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %685 = asin(%684) /* ty=Tensor[(12, 6, 48), float64] */;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %687 = sinh(%686) /* ty=Tensor[(12, 6, 48), float64] */;
  %688 = cast(%685, dtype="int16") /* ty=Tensor[(12, 6, 48), int16] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="int16") /* ty=Tensor[(12, 6, 48), int16] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %692 = cast(%677, dtype="int8") /* ty=Tensor[(12, 6, 48), int8] */;
  %693 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%687, dtype="int8") /* ty=Tensor[(12, 6, 48), int8] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %696 = subtract(%694, %695) /* ty=Tensor[(12, 6, 48), int8] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(12, 6, 48), bool] */;
  %698 = cast(-0.28749f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %699 = %665.8;
  %700 = %670.0;
  %701 = %671.0;
  %702 = %672.0;
  %703 = %673.0;
  %704 = @func_453(%676) /* ty=Tensor[(14, 12, 12), uint32] */;
  %705 = sin(%683) /* ty=Tensor[(12, 6, 48), float64] */;
  %706 = multiply(%690, %691) /* ty=Tensor[(12, 6, 48), int16] */;
  %707 = less_equal(%697, %698) /* ty=Tensor[(12, 6, 48), bool] */;
  (%699, %var_8382, %674, %700, %var_8398, %701, %702, %703, %704, %705, %706, %707)
}

def @func_691(%var_612: float64, %var_613: Tensor[(144), float64], %var_686: Tensor[(5, 10), float32]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) {
  %708 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %711 = reshape(%710, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %712 = @func_359(%711) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %713 = cast(%var_612, dtype="float64") /* ty=float64 */;
  %714 = cast(%var_613, dtype="float64") /* ty=Tensor[(144), float64] */;
  %715 = reshape(%713, newshape=[]) /* ty=float64 */;
  %716 = reshape(%714, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
  %717 = %712.1;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %719 = reshape(%718, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %720 = @func_359(%719) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %721 = cast(%717, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %722 = reshape(%721, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %723 = @func_359(%722) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %724 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %725 = cast(%724, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %726 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%709, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = logical_or(%727, %728) /* ty=Tensor[(14, 12, 12), bool] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %731 = log10(%730) /* ty=Tensor[(14, 12, 12), float32] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %733 = cast(%731, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %734 = cast(%var_686, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %735 = reshape(%734, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %736 = @func_496(%715, %716) /* ty=Tensor[(12, 3, 4), float64] */;
  %737 = %720.1;
  %738 = %723.1;
  %739 = sinh(%732) /* ty=Tensor[(14, 12, 12), float32] */;
  %740 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %741 = log2(%733) /* ty=Tensor[(14, 12, 12), float32] */;
  %742 = @func_259(%735) /* ty=Tensor[(10, 1, 5), float32] */;
  (%717, %736, %var_612, %var_613, %737, %738, %739, %740, %741, %742, %var_686)
}

def @func_1190() -> (Tensor[(14, 12, 12), int16],) {
  %743 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%743,)
}

def @func_3553() -> Tensor[(14, 12, 12), float64] {
  %744 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %744.0
}

def @func_1089() -> (Tensor[(14, 12, 12), float64],) {
  %745 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %747 = atan(%746) /* ty=Tensor[(14, 12, 12), float64] */;
  (%747,)
}

def @func_3227(%var_3191: Tensor[(13, 13, 14), uint32], %var_3192: Tensor[(13, 13, 14), uint32]) -> (Tensor[(13, 13, 14), bool], Tensor[(14, 12, 12), int16]) {
  %748 = cast(%var_3192, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
  %749 = shape_of(%var_3191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_3191, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = @func_3184() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %753 = greater_equal(%750, %751) /* ty=Tensor[(13, 13, 14), bool] */;
  %754 = %752.0;
  (%753, %754)
}

def @func_5205() -> (Tensor[(14, 12, 12), float32],) {
  %755 = @func_3828() /* ty=Tensor[(14, 12, 12), float32] */;
  (%755,)
}

def @func_6126(%var_6088: Tensor[(72, 9), int64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  %756 = @func_3709() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %757 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %758 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
  %759 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %760 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %761 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %762 = %761.1;
  %763 = cast(%762, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %764 = cast(%var_6088, dtype="bool") /* ty=Tensor[(72, 9), bool] */;
  %765 = @func_5053() /* ty=Tensor[(8, 16, 14), bool] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %767 = tan(%766) /* ty=Tensor[(8, 16, 14), float32] */;
  %768 = cast(%765, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %772 = divide(%770, %771) /* ty=Tensor[(8, 16, 14), float64] */;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %774 = log2(%773) /* ty=Tensor[(8, 16, 14), float64] */;
  %775 = cast(%767, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %779 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %780 = @func_5717() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) */;
  %781 = %756.0;
  %782 = %757.0;
  %783 = %758.0;
  %784 = %759.0;
  %785 = %760.0;
  %786 = greater(%763, %764) /* ty=Tensor[(72, 9), bool] */;
  %787 = power(%777, %778) /* ty=Tensor[(8, 16, 14), float64] */;
  %788 = %779.0;
  %789 = %780.0;
  (%781, %782, %783, %784, %785, %786, %787, %788, %789)
}

def @func_7271(%var_7247: Tensor[(650), int32], %var_7248: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) {
  %790 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %791 = cast(%var_7247, dtype="int32") /* ty=Tensor[(650), int32] */;
  %792 = cast(%var_7248, dtype="float64") /* ty=Tensor[(144), float64] */;
  %793 = reshape(%791, newshape=[5, 130]) /* ty=Tensor[(5, 130), int32] */;
  %794 = reshape(%792, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %795 = @func_4766(%793, %794) /* ty=(Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) */;
  %796 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %797 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %798 = %790.0;
  %799 = %795.2;
  %800 = %796.0;
  (%797, %798, %799, %var_7247, %var_7248, %800)
}

def @func_3390() -> (Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) {
  %801 = @func_2503() /* ty=(Tensor[(48), uint64],) */;
  %802 = cast(meta[relay.Constant][32] /* ty=Tensor[(308), float64] */, dtype="float64") /* ty=Tensor[(308), float64] */;
  %803 = reshape(%802, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %804 = @func_1837(%803) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
  %805 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
  %806 = %801.0;
  %807 = %804.0;
  %808 = %805.1;
  (%806, %807, meta[relay.Constant][32] /* ty=Tensor[(308), float64] */, %808)
}

def @func_1710() -> (Tensor[(14, 12, 12), int16],) {
  %809 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %810 = %809.0;
  (%810,)
}

def @func_1207() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
  %811 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %812 = %811.0;
  %813 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%812, %813)
}

def @func_6159() -> (Tensor[(12, 6, 4), int8],) {
  %814 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
  %815 = %814.1;
  (%815,)
}

def @func_6181() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  %816 = @func_4049() /* ty=Tensor[(14, 12, 12), int16] */;
  %817 = @func_5748() /* ty=Tensor[(14, 12, 12), float32] */;
  (%816, %817)
}

def @func_8312() -> Tensor[(8, 16, 14), bool] {
  %818 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
  %818.0
}

def @func_8838() -> (Tensor[(14, 12, 12), float32],) {
  %819 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_8532() -> (Tensor[(8, 16, 14), bool],) {
  %821 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
  %822 = %821.0;
  (%822,)
}

def @func_8978(%var_8955: Tensor[(2, 11, 13), int8], %var_8956: Tensor[(2, 11, 13), int8]) -> Tensor[(2, 11, 13), bool] {
  %823 = cast(%var_8956, dtype="bool") /* ty=Tensor[(2, 11, 13), bool] */;
  %824 = shape_of(%var_8955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_8955, dtype="bool") /* ty=Tensor[(2, 11, 13), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%825, %826) /* ty=Tensor[(2, 11, 13), bool] */
}

def @func_4766(%var_4755: Tensor[(5, 130), int32], %var_4762: Tensor[(144), float64]) -> (Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) {
  %827 = @func_2819() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) */;
  %828 = %827.1;
  %829 = cast(%var_4755, dtype="uint64") /* ty=Tensor[(5, 130), uint64] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(2), int32] */;
  %831 = cast(%828, dtype="uint64") /* ty=Tensor[(5, 130), uint64] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %833 = cast(meta[relay.Constant][33] /* ty=Tensor[(28, 72), int64] */, dtype="int64") /* ty=Tensor[(28, 72), int64] */;
  %834 = cast(%var_4762, dtype="float64") /* ty=Tensor[(144), float64] */;
  %835 = reshape(%833, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), int64] */;
  %836 = reshape(%834, newshape=[72, 2]) /* ty=Tensor[(72, 2), float64] */;
  %837 = @func_3787(%835, %836) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) */;
  %838 = add(%831, %832) /* ty=Tensor[(5, 130), uint64] */;
  %839 = %837.1;
  (%838, %839, meta[relay.Constant][33] /* ty=Tensor[(28, 72), int64] */, %var_4762)
}

def @func_3828() -> Tensor[(14, 12, 12), float32] {
  %840 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %840.0
}

def @func_1661() -> (Tensor[(14, 12, 12), float32],) {
  %841 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %842 = %841.1;
  (%842,)
}

def @func_8874() -> Tensor[(14, 12, 12), float32] {
  @func_5748() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_9253() -> (Tensor[(12, 6, 4), int8], Tensor[(8, 16, 14), bool], Tensor[(14, 12, 12), float32]) {
  %843 = @func_4974() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) */;
  %844 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
  %845 = @func_7318() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %846 = %843.0;
  %847 = %844.0;
  %848 = %845.1;
  (%846, %847, %848)
}

def @func_776() -> Tensor[(14, 12, 12), int64] {
  %849 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %852 = reshape(%851, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %853 = @func_359(%852) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %854 = %853.1;
  %855 = cast(%850, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%857, %858) /* ty=Tensor[(14, 12, 12), int64] */
}

def @func_7785() -> (Tensor[(72, 1), int64],) {
  %859 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %860 = %859.1;
  (%860,)
}

def @func_7363() -> Tensor[(48), uint64] {
  %861 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %861.0
}

def @func_5083(%var_5076: Tensor[(9, 16, 16), int8], %var_5077: Tensor[(9, 16, 16), int8]) -> Tensor[(9, 16, 16), bool] {
  %862 = cast(%var_5077, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %863 = shape_of(%var_5076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_5076, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%864, %865) /* ty=Tensor[(9, 16, 16), bool] */
}

def @func_1041() -> (Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
  %866 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %867 = cast(meta[relay.Constant][34] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %868 = cast(meta[relay.Constant][34] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %869 = reshape(%867, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %870 = reshape(%868, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %871 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %872 = cast(meta[relay.Constant][35] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %873 = reshape(%871, newshape=[]) /* ty=int64 */;
  %874 = reshape(%872, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %875 = %866.0;
  %876 = @func_68(%869, %870) /* ty=Tensor[(8, 2, 3), bool] */;
  %877 = @func_153(%873, %874) /* ty=Tensor[(12, 6, 1), int64] */;
  (%875, %876, meta[relay.Constant][34] /* ty=Tensor[(48), uint64] */, %877, -7 /* ty=int64 */, meta[relay.Constant][35] /* ty=Tensor[(72), int64] */)
}

def @func_2125(%var_2112: Tensor[(13, 5, 10), int32], %var_2113: Tensor[(13, 5, 10), int32]) -> Tensor[(13, 5, 10), bool] {
  %878 = cast(%var_2113, dtype="bool") /* ty=Tensor[(13, 5, 10), bool] */;
  %879 = shape_of(%var_2112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%var_2112, dtype="bool") /* ty=Tensor[(13, 5, 10), bool] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%880, %881) /* ty=Tensor[(13, 5, 10), bool] */
}

def @func_4130() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  %882 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %883 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %884 = @func_1661() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %885 = %882.0;
  %886 = %883.0;
  %887 = %884.0;
  (%885, %886, %887)
}

def @func_3093() -> (Tensor[(14, 12, 12), int64],) {
  %888 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  (%888,)
}

def @func_4182(%var_4151: Tensor[(330), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) {
  %889 = cast(%var_4151, dtype="float64") /* ty=Tensor[(330), float64] */;
  %890 = reshape(%889, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
  %891 = @func_4002(%890) /* ty=(Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) */;
  %892 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %893 = cast(%892, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %894 = reshape(%893, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %895 = @func_541(%894) /* ty=(Tensor[(14, 12, 12), int64],) */;
  %896 = %891.1;
  %897 = %895.0;
  (%892, %896, %var_4151, %897)
}

def @func_68(%var_60: Tensor[(8, 2, 3), uint64], %var_61: Tensor[(8, 2, 3), uint64]) -> Tensor[(8, 2, 3), bool] {
  %898 = cast(%var_61, dtype="bool") /* ty=Tensor[(8, 2, 3), bool] */;
  %899 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%var_60, dtype="bool") /* ty=Tensor[(8, 2, 3), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%900, %901) /* ty=Tensor[(8, 2, 3), bool] */
}

def @func_4432(%var_4407: Tensor[(11, 2, 6), float64], %var_4408: Tensor[(11, 2, 6), float64]) -> Tensor[(11, 2, 6), float64] {
  %902 = cast(%var_4408, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
  %903 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%var_4407, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%904, %905) /* ty=Tensor[(11, 2, 6), float64] */
}

def @func_541(%var_534: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int64],) {
  %906 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %907 = %906.0;
  %908 = cast(%var_534, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %912 = add(%910, %911) /* ty=Tensor[(14, 12, 12), int64] */;
  (%912,)
}

def @func_8628() -> (Tensor[(14, 12, 12), int64],) {
  %913 = @func_2257() /* ty=(Tensor[(14, 12, 12), int64],) */;
  %914 = %913.0;
  (%914,)
}

def @func_1779() -> Tensor[(12, 6, 1), int64] {
  %915 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %915.1
}

def @func_8671(%var_8646: float64) -> (Tensor[(14, 12, 12), int16], Tensor[(3, 1, 3), float32], float64, Tensor[(9), float64], Tensor[(14, 12, 12), uint32], Tensor[(12, 3, 4), uint64]) {
  %916 = cast(%var_8646, dtype="float64") /* ty=float64 */;
  %917 = cast(meta[relay.Constant][36] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %918 = reshape(%916, newshape=[]) /* ty=float64 */;
  %919 = reshape(%917, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
  %920 = @func_1761(%918, %919) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
  %921 = @func_2495() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %922 = @func_3491() /* ty=Tensor[(14, 12, 12), int16] */;
  %923 = %920.5;
  %924 = %921.0;
  %925 = @func_7072() /* ty=Tensor[(12, 3, 4), uint64] */;
  (%922, %923, %var_8646, meta[relay.Constant][36] /* ty=Tensor[(9), float64] */, %924, %925)
}

def @func_5468(%var_5461: float64) -> Tensor[(2, 15, 7), float64] {
  %926 = cast(%var_5461, dtype="float64") /* ty=float64 */;
  %927 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 7), float64] */;
  floor_mod(%926, %927) /* ty=Tensor[(2, 15, 7), float64] */
}

def @main(%var_9830: Tensor[(2, 12, 14), int16], %var_9831: Tensor[(2, 12, 14), int16]) -> Tensor[(2, 12, 14), int16] {
  %928 = cast(%var_9831, dtype="int16") /* ty=Tensor[(2, 12, 14), int16] */;
  %929 = shape_of(%var_9830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(%var_9830, dtype="int16") /* ty=Tensor[(2, 12, 14), int16] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%930, %931) /* ty=Tensor[(2, 12, 14), int16] */
}

def @func_153(%var_148: int64, %var_149: Tensor[(12, 6, 1), int64]) -> Tensor[(12, 6, 1), int64] {
  %932 = cast(%var_148, dtype="int64") /* ty=int64 */;
  %933 = cast(%var_149, dtype="int64") /* ty=Tensor[(12, 6, 1), int64] */;
  left_shift(%932, %933) /* ty=Tensor[(12, 6, 1), int64] */
}

def @func_1144() -> Tensor[(14, 12, 12), int64] {
  @func_776() /* ty=Tensor[(14, 12, 12), int64] */
}

def @func_9484(%var_9474: Tensor[(10, 5, 8), float64]) -> (Tensor[(10, 5, 8), float64],) {
  %934 = cast(%var_9474, dtype="float64") /* ty=Tensor[(10, 5, 8), float64] */;
  %935 = atanh(%934) /* ty=Tensor[(10, 5, 8), float64] */;
  (%935,)
}

def @func_565() -> Tensor[(14, 12, 12), float32] {
  %936 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %936.0
}

def @func_5053() -> Tensor[(8, 16, 14), bool] {
  %937 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 16, 14), int16] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %938 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(8, 16, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 16, 14), int16] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%939, %940) /* ty=Tensor[(8, 16, 14), bool] */
}

def @func_1071() -> (Tensor[(14, 12, 12), float32],) {
  %941 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %942 = %941.0;
  %943 = cast(%942, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %944 = sigmoid(%943) /* ty=Tensor[(14, 12, 12), float32] */;
  (%944,)
}

def @func_2495() -> (Tensor[(14, 12, 12), uint32],) {
  %945 = @func_1342() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %946 = %945.2;
  (%946,)
}

def @func_4609() -> Tensor[(14, 12, 12), int16] {
  %947 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %947.0
}

def @func_8245(%var_8206: Tensor[(8, 1, 1), float64], %var_8212: Tensor[(308), float64], %var_8243: Tensor[(12, 4), float64]) -> (Tensor[(8, 1, 1), float64], Tensor[(14, 12, 12), int16], Tensor[(308), float64], Tensor[(14, 12, 12), int64], Tensor[(?, 16, 3), int32], Tensor[(12, 4), float64]) {
  %948 = cast(%var_8206, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
  %949 = atan(%948) /* ty=Tensor[(8, 1, 1), float64] */;
  %950 = cast(%949, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
  %951 = cast(%var_8212, dtype="float64") /* ty=Tensor[(308), float64] */;
  %952 = reshape(%951, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %953 = @func_1837(%952) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
  %954 = @func_4577() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
  %955 = cast(%var_8243, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %956 = %954.1;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %958 = reshape(%955, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), float64] */;
  %959 = reshape(%957, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %960 = @func_7173(%958, %959) /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) */;
  %961 = atanh(%950) /* ty=Tensor[(8, 1, 1), float64] */;
  %962 = %953.1;
  %963 = %960.2;
  (%961, %962, %var_8212, %956, %963, %var_8243)
}

def @func_9053() -> Tensor[(14, 12, 12), float32] {
  @func_8874() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_6759(%var_6755: Tensor[(7, 9, 9), int16]) -> Tensor[(7, 9, 9), int16] {
  %964 = cast(%var_6755, dtype="int16") /* ty=Tensor[(7, 9, 9), int16] */;
  %965 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 9, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 9, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 9, 9), int16] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%966, %967) /* ty=Tensor[(7, 9, 9), int16] */
}

def @func_7340(%var_7321: Tensor[(15, 11, 1), float32]) -> (Tensor[(15, 11, 1), float32], Tensor[(14, 12, 12), int16], Tensor[(15, 11, 1), float32]) {
  %968 = cast(%var_7321, dtype="float32") /* ty=Tensor[(15, 11, 1), float32] */;
  %969 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %970 = cast(%var_7321, dtype="float32") /* ty=Tensor[(15, 11, 1), float32] */;
  %971 = sin(%968) /* ty=Tensor[(15, 11, 1), float32] */;
  %972 = %969.1;
  %973 = log10(%970) /* ty=Tensor[(15, 11, 1), float32] */;
  (%971, %972, %973)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2928() -> (Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) {
  %13 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) {
    %0 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %1 = cast(9.84051f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
    %3 = reshape(%1, newshape=[]) /* ty=float64 */;
    %4 = reshape(%2, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
    %5 = @func_1761(%3, %4) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
    %6 = %5.3;
    %7 = cast(9.84051f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
    %8 = cast(%6, dtype="float32") /* ty=Tensor[(144), float32] */;
    %9 = @func_2008() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %10 = %0.0;
    %11 = floor_mod(%7, %8) /* ty=Tensor[(144), float32] */;
    %12 = %9.0;
    (%10, meta[relay.Constant][0] /* ty=Tensor[(9), float64] */, %11, %12)
  };
  %13() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) */
}

def @func_4730() -> (Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) {
  %14 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %15 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %16 = %15.3;
  %17 = cast(%16, dtype="int8") /* ty=Tensor[(12, 6, 1), int8] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 6, 4), int64] */, dtype="int8") /* ty=Tensor[(12, 6, 4), int8] */;
  %19 = %14.0;
  %20 = bitwise_or(%17, %18) /* ty=Tensor[(12, 6, 4), int8] */;
  (%19, %20)
}

def @func_4953() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) {
  %30 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) {
    %21 = @func_4538() /* ty=Tensor[(14, 12, 12), float32] */;
    %22 = cast(%21, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %23 = erf(%22) /* ty=Tensor[(14, 12, 12), float32] */;
    %24 = cast(%23, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %25 = reshape(%24, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %26 = @func_541(%25) /* ty=(Tensor[(14, 12, 12), int64],) */;
    %27 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
    %28 = %26.0;
    %29 = %27.4;
    (%23, %28, %29)
  };
  %30() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) */
}

def @func_7047(%var_7045: float64, %var_7046: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), float64],) {
  @func_7043(%var_7045, %var_7046) /* ty=(Tensor[(4, 10, 8), float64],) */
}

def @func_8249(%var_8246: Tensor[(8, 1, 1), float64], %var_8247: Tensor[(308), float64], %var_8248: Tensor[(12, 4), float64]) -> (Tensor[(8, 1, 1), float64], Tensor[(14, 12, 12), int16], Tensor[(308), float64], Tensor[(14, 12, 12), int64], Tensor[(?, 16, 3), int32], Tensor[(12, 4), float64]) {
  %47 = fn (%var_8206: Tensor[(8, 1, 1), float64], %var_8212: Tensor[(308), float64], %var_8243: Tensor[(12, 4), float64]) -> (Tensor[(8, 1, 1), float64], Tensor[(14, 12, 12), int16], Tensor[(308), float64], Tensor[(14, 12, 12), int64], Tensor[(?, 16, 3), int32], Tensor[(12, 4), float64]) {
    %31 = cast(%var_8206, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
    %32 = atan(%31) /* ty=Tensor[(8, 1, 1), float64] */;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(8, 1, 1), float64] */;
    %34 = cast(%var_8212, dtype="float64") /* ty=Tensor[(308), float64] */;
    %35 = reshape(%34, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
    %36 = @func_1837(%35) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
    %37 = @func_4577() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
    %38 = cast(%var_8243, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
    %39 = %37.1;
    %40 = cast(%39, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %41 = reshape(%38, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), float64] */;
    %42 = reshape(%40, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %43 = @func_7173(%41, %42) /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) */;
    %44 = atanh(%33) /* ty=Tensor[(8, 1, 1), float64] */;
    %45 = %36.1;
    %46 = %43.2;
    (%44, %45, %var_8212, %39, %46, %var_8243)
  };
  %47(%var_8246, %var_8247, %var_8248) /* ty=(Tensor[(8, 1, 1), float64], Tensor[(14, 12, 12), int16], Tensor[(308), float64], Tensor[(14, 12, 12), int64], Tensor[(?, 16, 3), int32], Tensor[(12, 4), float64]) */
}

def @func_5339() -> (Tensor[(8, 16, 14), bool],) {
  @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */
}

def @func_1711() -> (Tensor[(14, 12, 12), int16],) {
  %50 = fn () -> (Tensor[(14, 12, 12), int16],) {
    %48 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
    %49 = %48.0;
    (%49,)
  };
  %50() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_4256() -> (Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) {
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %52 = reshape(%51, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), float32] */;
  %53 = @func_3455(%52) /* ty=(Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) */;
  %54 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %55 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
  %56 = %53.1;
  %57 = %54.0;
  (%55, %56, meta[relay.Constant][2] /* ty=Tensor[(1440), float32] */, %57)
}

def @func_7785() -> (Tensor[(72, 1), int64],) {
  %58 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %59 = %58.1;
  (%59,)
}

def @func_9709(%var_9664: Tensor[(5, 1, 2), int8]) -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(5, 6, 2), int16]) {
  %60 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(72, 1), int64] */, dtype="int64") /* ty=Tensor[(72, 1), int64] */;
  %62 = reshape(%60, newshape=[]) /* ty=int64 */;
  %63 = reshape(%61, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %64 = cast(%var_9664, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 6, 2), int8] */, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
  %66 = equal(%64, %65) /* ty=Tensor[(5, 6, 2), bool] */;
  %67 = cast(8 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %68 = cast(%66, dtype="int16") /* ty=Tensor[(5, 6, 2), int16] */;
  %69 = @func_153(%62, %63) /* ty=Tensor[(12, 6, 1), int64] */;
  %70 = minimum(%67, %68) /* ty=Tensor[(5, 6, 2), int16] */;
  (%69, meta[relay.Constant][3] /* ty=Tensor[(72, 1), int64] */, %70)
}

def @func_3156() -> (Tensor[(14, 12, 12), int16],) {
  %72 = fn () -> (Tensor[(14, 12, 12), int16],) {
    %71 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
    (%71,)
  };
  %72() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_7173(%var_7096: Tensor[(1, 16, 3), float64], %var_7140: Tensor[(2016), float32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) {
  %73 = cast(%var_7140, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %74 = reshape(%73, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %75 = cast(%var_7096, dtype="float64") /* ty=Tensor[(1, 16, 3), float64] */;
  %76 = cos(%75) /* ty=Tensor[(1, 16, 3), float64] */;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(1, 16, 3), float64] */;
  %78 = log2(%77) /* ty=Tensor[(1, 16, 3), float64] */;
  %79 = cast(%var_7096, dtype="float32") /* ty=Tensor[(1, 16, 3), float32] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="float32") /* ty=Tensor[(1, 16, 3), float32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %83 = divide(%81, %82) /* ty=Tensor[(?, 16, 3), float32] */;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(?, 16, 3), float64] */;
  %85 = tan(%84) /* ty=Tensor[(?, 16, 3), float64] */;
  %86 = cast(%85, dtype="int32") /* ty=Tensor[(?, 16, 3), int32] */;
  %87 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%76, dtype="int32") /* ty=Tensor[(1, 16, 3), int32] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %90 = cast(%var_7096, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %91 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%76, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = logical_and(%92, %93) /* ty=Tensor[(?, 16, 3), bool] */;
  %95 = cast(%94, dtype="bool") /* ty=Tensor[(?, 16, 3), bool] */;
  %96 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%85, dtype="bool") /* ty=Tensor[(?, 16, 3), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = @func_453(%74) /* ty=Tensor[(14, 12, 12), uint32] */;
  %100 = cast(%99, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %102 = reshape(%100, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), int64] */;
  %103 = reshape(%101, newshape=[72, 2]) /* ty=Tensor[(72, 2), float64] */;
  %104 = @func_3787(%102, %103) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) */;
  %105 = bitwise_xor(%88, %89) /* ty=Tensor[(?, 16, 3), int32] */;
  %106 = greater(%97, %98) /* ty=Tensor[(?, 16, 3), bool] */;
  %107 = %104.3;
  (%99, %var_7140, %105, %106, %107, meta[relay.Constant][5] /* ty=Tensor[(144), float64] */)
}

def @func_9186() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), uint32], Tensor[(1, 650), int32], Tensor[(4, 36), float64]) {
  %108 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 650), int32] */, dtype="int32") /* ty=Tensor[(1, 650), int32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %111 = reshape(%109, newshape=[650]) /* ty=Tensor[(650), int32] */;
  %112 = reshape(%110, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %113 = @func_7271(%111, %112) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) */;
  %114 = %108.0;
  %115 = %113.1;
  (%114, %115, meta[relay.Constant][6] /* ty=Tensor[(1, 650), int32] */, meta[relay.Constant][7] /* ty=Tensor[(4, 36), float64] */)
}

def @func_9054() -> Tensor[(14, 12, 12), float32] {
  %116 = fn () -> Tensor[(14, 12, 12), float32] {
    @func_8874() /* ty=Tensor[(14, 12, 12), float32] */
  };
  %116() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_6323() -> (Tensor[(14, 12, 12), int16],) {
  %117 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
  (%117,)
}

def @func_5054() -> Tensor[(8, 16, 14), bool] {
  %122 = fn () -> Tensor[(8, 16, 14), bool] {
    %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 16, 14), int16] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
    %119 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 16, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 16, 14), int16] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%120, %121) /* ty=Tensor[(8, 16, 14), bool] */
  };
  %122() /* ty=Tensor[(8, 16, 14), bool] */
}

def @func_7072() -> Tensor[(12, 3, 4), uint64] {
  %123 = @func_6247() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) */;
  %123.2
}

def @func_6666() -> (Tensor[(72, ?), uint32], Tensor[(14, 12, 12), int16]) {
  %124 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %125 = %124.1;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %127 = asin(%126) /* ty=Tensor[(72, 1), float64] */;
  %128 = cast(%125, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%127, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %132 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %133 = subtract(%130, %131) /* ty=Tensor[(72, ?), uint32] */;
  %134 = %132.0;
  (%133, %134)
}

def @func_5292(%var_5282: Tensor[(2, 12, 2), int8], %var_5283: Tensor[(2, 12, 2), int8]) -> (Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) {
  %135 = cast(%var_5283, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %136 = shape_of(%var_5282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_5282, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %139 = cast(%var_5282, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
  %140 = subtract(%137, %138) /* ty=Tensor[(2, 12, 2), int8] */;
  %141 = atanh(%139) /* ty=Tensor[(2, 12, 2), float64] */;
  (%140, %141)
}

def @func_7318() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %142 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %143 = @func_3553() /* ty=Tensor[(14, 12, 12), float64] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %145 = reshape(%144, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %146 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  %147 = %142.0;
  %148 = @func_453(%145) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%143, %146, %147, %148)
}

def @func_1073() -> (Tensor[(14, 12, 12), float32],) {
  @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_6325() -> (Tensor[(14, 12, 12), int16],) {
  @func_6323() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_3950(%var_3839: Tensor[(10, 1, 11), float32], %var_3840: Tensor[(10, 13, 11), float32]) -> (Tensor[(10, 13, 11), float32], Tensor[(308, 1), float64], Tensor[(168), float32], Tensor[(48), uint64], Tensor[(10, 1, 11), float32]) {
  %149 = cast(%var_3839, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %150 = cast(%var_3840, dtype="float32") /* ty=Tensor[(10, 13, 11), float32] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %152 = reshape(%151, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
  %153 = @func_2587(%152) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
  %154 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
  %155 = cast(%var_3839, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %156 = log10(%155) /* ty=Tensor[(10, 1, 11), float64] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %158 = subtract(%149, %150) /* ty=Tensor[(10, 13, 11), float32] */;
  %159 = %153.2;
  %160 = %154.0;
  %161 = log2(%157) /* ty=Tensor[(10, 1, 11), float32] */;
  (%158, %159, meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, %160, %161)
}

def @func_1208() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
  %165 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
    %162 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %163 = %162.0;
    %164 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
    (%163, %164)
  };
  %165() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */
}

def @func_7488(%var_7486: Tensor[(7, 3, 13), float32]) -> (Tensor[(7, 3, 13), float32],) {
  @func_7485(%var_7486) /* ty=(Tensor[(7, 3, 13), float32],) */
}

def @func_5206() -> (Tensor[(14, 12, 12), float32],) {
  %167 = fn () -> (Tensor[(14, 12, 12), float32],) {
    %166 = @func_3828() /* ty=Tensor[(14, 12, 12), float32] */;
    (%166,)
  };
  %167() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_8981(%var_8979: Tensor[(2, 11, 13), int8], %var_8980: Tensor[(2, 11, 13), int8]) -> Tensor[(2, 11, 13), bool] {
  %172 = fn (%var_8955: Tensor[(2, 11, 13), int8], %var_8956: Tensor[(2, 11, 13), int8]) -> Tensor[(2, 11, 13), bool] {
    %168 = cast(%var_8956, dtype="bool") /* ty=Tensor[(2, 11, 13), bool] */;
    %169 = shape_of(%var_8955, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%var_8955, dtype="bool") /* ty=Tensor[(2, 11, 13), bool] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%170, %171) /* ty=Tensor[(2, 11, 13), bool] */
  };
  %172(%var_8979, %var_8980) /* ty=Tensor[(2, 11, 13), bool] */
}

def @func_3954(%var_3952: Tensor[(10, 1, 11), float32], %var_3953: Tensor[(10, 13, 11), float32]) -> (Tensor[(10, 13, 11), float32], Tensor[(308, 1), float64], Tensor[(168), float32], Tensor[(48), uint64], Tensor[(10, 1, 11), float32]) {
  @func_3950(%var_3952, %var_3953) /* ty=(Tensor[(10, 13, 11), float32], Tensor[(308, 1), float64], Tensor[(168), float32], Tensor[(48), uint64], Tensor[(10, 1, 11), float32]) */
}

def @func_6503() -> Tensor[(12, 6, 48), float64] {
  @func_6501() /* ty=Tensor[(12, 6, 48), float64] */
}

def @func_1234() -> (Tensor[(48), uint64],) {
  %173 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %174 = %173.2;
  (%174,)
}

def @func_4132() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  @func_4130() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */
}

def @func_2096() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
  %175 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %176 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%175, %176)
}

def @func_5165(%var_5164: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) {
  %195 = fn (%var_5153: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) {
    %177 = cast(3.10726f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %180 = reshape(%177, newshape=[]) /* ty=float64 */;
    %181 = reshape(%178, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %182 = reshape(%179, newshape=[5, 10]) /* ty=Tensor[(5, 10), float32] */;
    %183 = @func_691(%180, %181, %182) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) */;
    %184 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
    %185 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
    %186 = %185.0;
    %187 = cast(%var_5153, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %191 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
    %192 = %183.8;
    %193 = %184.5;
    %194 = less_equal(%189, %190) /* ty=Tensor[(14, 12, 12), bool] */;
    (%191, %192, 3.10726f64 /* ty=float64 */, meta[relay.Constant][11] /* ty=Tensor[(144), float64] */, meta[relay.Constant][12] /* ty=Tensor[(50), float32] */, %193, %194)
  };
  %195(%var_5164) /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) */
}

def @func_8014() -> (Tensor[(14, 12, 12), int64],) {
  %198 = fn () -> (Tensor[(14, 12, 12), int64],) {
    %196 = @func_5523() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
    %197 = %196.1;
    (%197,)
  };
  %198() /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_4975() -> (Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) {
  %202 = fn () -> (Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) {
    %199 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
    %200 = %199.1;
    %201 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
    (%200, %201)
  };
  %202() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) */
}

def @func_1764(%var_1762: float64, %var_1763: Tensor[(3, 1, 3), float64]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) {
  %217 = fn (%var_1735: float64, %var_1752: Tensor[(3, 1, 3), float64]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) {
    %203 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
    %204 = cast(%var_1735, dtype="float64") /* ty=float64 */;
    %205 = cast(meta[relay.Constant][13] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %206 = cast(meta[relay.Constant][14] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %207 = reshape(%204, newshape=[]) /* ty=float64 */;
    %208 = reshape(%205, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %209 = reshape(%206, newshape=[5, 10]) /* ty=Tensor[(5, 10), float32] */;
    %210 = @func_691(%207, %208, %209) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) */;
    %211 = cast(%var_1735, dtype="float32") /* ty=float32 */;
    %212 = cast(%var_1752, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
    %213 = %203.0;
    %214 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
    %215 = %210.7;
    %216 = maximum(%211, %212) /* ty=Tensor[(3, 1, 3), float32] */;
    (%213, %214, %215, meta[relay.Constant][13] /* ty=Tensor[(144), float64] */, meta[relay.Constant][14] /* ty=Tensor[(50), float32] */, %216)
  };
  %217(%var_1762, %var_1763) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */
}

def @func_5031() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
  %224 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
    %218 = @func_4974() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) */;
    %219 = cast(meta[relay.Constant][15] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %220 = reshape(%219, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
    %221 = @func_2587(%220) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
    %222 = %218.1;
    %223 = %221.3;
    (%222, %223, meta[relay.Constant][15] /* ty=Tensor[(168), float32] */)
  };
  %224() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */
}

def @func_9813() -> Tensor[(14, 12, 12), int16] {
  %226 = fn () -> Tensor[(14, 12, 12), int16] {
    %225 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %225.0
  };
  %226() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_6181() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  %227 = @func_4049() /* ty=Tensor[(14, 12, 12), int16] */;
  %228 = @func_5748() /* ty=Tensor[(14, 12, 12), float32] */;
  (%227, %228)
}

def @func_7043(%var_7020: float64, %var_7021: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), float64],) {
  %229 = cast(%var_7020, dtype="float64") /* ty=float64 */;
  %230 = cast(%var_7021, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %231 = power(%229, %230) /* ty=Tensor[(4, 10, 8), float64] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %233 = exp(%232) /* ty=Tensor[(4, 10, 8), float64] */;
  (%233,)
}

def @func_5296(%var_5294: Tensor[(2, 12, 2), int8], %var_5295: Tensor[(2, 12, 2), int8]) -> (Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) {
  @func_5292(%var_5294, %var_5295) /* ty=(Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) */
}

def @func_3607() -> (Tensor[(13, 5, 10), bool], Tensor[(650), int32], Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %250 = fn () -> (Tensor[(13, 5, 10), bool], Tensor[(650), int32], Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
    %234 = cast(meta[relay.Constant][16] /* ty=Tensor[(650), int32] */, dtype="int32") /* ty=Tensor[(650), int32] */;
    %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(650), int32] */, dtype="int32") /* ty=Tensor[(650), int32] */;
    %236 = reshape(%234, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
    %237 = reshape(%235, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
    %238 = @func_2503() /* ty=(Tensor[(48), uint64],) */;
    %239 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
    %240 = %239.0;
    %241 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
    %242 = %241.0;
    %243 = cast(%242, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %244 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%240, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %247 = @func_2125(%236, %237) /* ty=Tensor[(13, 5, 10), bool] */;
    %248 = %238.0;
    %249 = power(%245, %246) /* ty=Tensor[(14, 12, 12), float32] */;
    (%247, meta[relay.Constant][16] /* ty=Tensor[(650), int32] */, %248, %249)
  };
  %250() /* ty=(Tensor[(13, 5, 10), bool], Tensor[(650), int32], Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */
}

def @func_8674(%var_8672: float64) -> (Tensor[(14, 12, 12), int16], Tensor[(3, 1, 3), float32], float64, Tensor[(9), float64], Tensor[(14, 12, 12), uint32], Tensor[(12, 3, 4), uint64]) {
  @func_8671(%var_8672) /* ty=(Tensor[(14, 12, 12), int16], Tensor[(3, 1, 3), float32], float64, Tensor[(9), float64], Tensor[(14, 12, 12), uint32], Tensor[(12, 3, 4), uint64]) */
}

def @func_9524() -> Tensor[(14, 12, 12), int16] {
  @func_9522() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_456(%var_454: Tensor[(14, 12, 12), float32]) -> Tensor[(14, 12, 12), uint32] {
  @func_453(%var_454) /* ty=Tensor[(14, 12, 12), uint32] */
}

def @func_9522() -> Tensor[(14, 12, 12), int16] {
  %251 = @func_6181() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */;
  %251.0
}

def @func_1517(%var_1486: Tensor[(14, 12, 12), float64], %var_1513: float64) -> (Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
  %252 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %253 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %254 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %255 = %254.0;
  %256 = cast(%var_1486, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %262 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %263 = cast(%var_1513, dtype="float64") /* ty=float64 */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %265 = reshape(%263, newshape=[]) /* ty=float64 */;
  %266 = reshape(%264, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
  %267 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %268 = %252.0;
  %269 = %253.2;
  %270 = less(%258, %259) /* ty=Tensor[(14, 12, 12), bool] */;
  %271 = tan(%261) /* ty=Tensor[(14, 12, 12), float64] */;
  %272 = %262.0;
  %273 = @func_496(%265, %266) /* ty=Tensor[(12, 3, 4), float64] */;
  (%267, %268, %269, %270, %271, %272, %273, %var_1513, meta[relay.Constant][17] /* ty=Tensor[(144), float64] */)
}

def @func_9722() -> (Tensor[(12, 6, 4), int8],) {
  %274 = @func_6159() /* ty=(Tensor[(12, 6, 4), int8],) */;
  %275 = %274.0;
  (%275,)
}

def @func_3647() -> Tensor[(14, 12, 12), float64] {
  %279 = fn () -> Tensor[(14, 12, 12), float64] {
    %276 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %277 = %276.0;
    %278 = cast(%277, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
    rsqrt(%278) /* ty=Tensor[(14, 12, 12), float64] */
  };
  %279() /* ty=Tensor[(14, 12, 12), float64] */
}

def @func_7320() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  @func_7318() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */
}

def @func_4770(%var_4768: Tensor[(5, 130), int32], %var_4769: Tensor[(144), float64]) -> (Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) {
  @func_4766(%var_4768, %var_4769) /* ty=(Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) */
}

def @func_6126(%var_6088: Tensor[(72, 9), int64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  %280 = @func_3709() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %281 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %282 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
  %283 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %284 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %285 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %286 = %285.1;
  %287 = cast(%286, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %288 = cast(%var_6088, dtype="bool") /* ty=Tensor[(72, 9), bool] */;
  %289 = @func_5053() /* ty=Tensor[(8, 16, 14), bool] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %291 = tan(%290) /* ty=Tensor[(8, 16, 14), float32] */;
  %292 = cast(%289, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = divide(%294, %295) /* ty=Tensor[(8, 16, 14), float64] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %298 = log2(%297) /* ty=Tensor[(8, 16, 14), float64] */;
  %299 = cast(%291, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %303 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %304 = @func_5717() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) */;
  %305 = %280.0;
  %306 = %281.0;
  %307 = %282.0;
  %308 = %283.0;
  %309 = %284.0;
  %310 = greater(%287, %288) /* ty=Tensor[(72, 9), bool] */;
  %311 = power(%301, %302) /* ty=Tensor[(8, 16, 14), float64] */;
  %312 = %303.0;
  %313 = %304.0;
  (%305, %306, %307, %308, %309, %310, %311, %312, %313)
}

def @func_6381() -> Tensor[(168), float32] {
  %314 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %314.4
}

def @func_361(%var_360: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) {
  %329 = fn (%var_342: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) {
    %315 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %316 = %315.0;
    %317 = cast(%var_342, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
    %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%316, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %321 = mod(%319, %320) /* ty=Tensor[(14, 12, 12), float64] */;
    %322 = cast(%var_342, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
    %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%321, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %326 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %327 = greater_equal(%324, %325) /* ty=Tensor[(14, 12, 12), bool] */;
    %328 = %326.0;
    (%327, %328)
  };
  %329(%var_360) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */
}

def @func_776() -> Tensor[(14, 12, 12), int64] {
  %330 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %333 = reshape(%332, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %334 = @func_359(%333) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %335 = %334.1;
  %336 = cast(%331, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%338, %339) /* ty=Tensor[(14, 12, 12), int64] */
}

def @func_7485(%var_7482: Tensor[(7, 3, 13), float32]) -> (Tensor[(7, 3, 13), float32],) {
  %340 = cast(%var_7482, dtype="float32") /* ty=Tensor[(7, 3, 13), float32] */;
  %341 = log(%340) /* ty=Tensor[(7, 3, 13), float32] */;
  (%341,)
}

def @func_7597() -> (Tensor[(14, 12, 12), float32], Tensor[(72), int64], Tensor[(330), float64], Tensor[(14, 12, 12), float32], float64) {
  %342 = @func_2008() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %343 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %344 = reshape(%343, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
  %345 = @func_4002(%344) /* ty=(Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) */;
  %346 = @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %347 = %342.0;
  %348 = %345.2;
  %349 = @func_6822() /* ty=Tensor[(14, 12, 12), float32] */;
  %350 = %346.1;
  (%347, %348, meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, %349, %350)
}

def @func_9392(%var_9391: Tensor[(12, 6, 4), int8]) -> (Tensor[(50), float32], Tensor[(2016), float32], Tensor[(12, 6, 4), float32]) {
  %367 = fn (%var_9343: Tensor[(12, 6, 4), int8]) -> (Tensor[(50), float32], Tensor[(2016), float32], Tensor[(12, 6, 4), float32]) {
    %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %352 = reshape(%351, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %353 = @func_5163(%352) /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], float64, Tensor[(144), float64], Tensor[(50), float32], Tensor[(72), int64], Tensor[(14, 12, 12), bool]) */;
    %354 = @func_6159() /* ty=(Tensor[(12, 6, 4), int8],) */;
    %355 = %354.0;
    %356 = cast(%var_9343, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
    %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%355, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %360 = right_shift(%358, %359) /* ty=Tensor[(12, 6, 4), uint64] */;
    %361 = cast(%355, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
    %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%360, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %365 = %353.4;
    %366 = maximum(%363, %364) /* ty=Tensor[(12, 6, 4), float32] */;
    (%365, meta[relay.Constant][19] /* ty=Tensor[(2016), float32] */, %366)
  };
  %367(%var_9391) /* ty=(Tensor[(50), float32], Tensor[(2016), float32], Tensor[(12, 6, 4), float32]) */
}

def @func_4049() -> Tensor[(14, 12, 12), int16] {
  %368 = @func_2437() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) */;
  %368.0
}

def @func_8312() -> Tensor[(8, 16, 14), bool] {
  %369 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
  %369.0
}

def @func_6741() -> Tensor[(14, 12, 12), int16] {
  @func_6739() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_9100(%var_9063: Tensor[(3, 12, 11), uint16], %var_9064: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(14, 12, 12), float32]) {
  %370 = cast(%var_9064, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %371 = shape_of(%var_9063, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_9063, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %374 = @func_3318() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %375 = left_shift(%372, %373) /* ty=Tensor[(3, 12, 11), uint16] */;
  %376 = %374.0;
  (%375, %376)
}

def @func_3829() -> Tensor[(14, 12, 12), float32] {
  %378 = fn () -> Tensor[(14, 12, 12), float32] {
    %377 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %377.0
  };
  %378() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_3696() -> (Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
  @func_3694() /* ty=(Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */
}

def @func_153(%var_148: int64, %var_149: Tensor[(12, 6, 1), int64]) -> Tensor[(12, 6, 1), int64] {
  %379 = cast(%var_148, dtype="int64") /* ty=int64 */;
  %380 = cast(%var_149, dtype="int64") /* ty=Tensor[(12, 6, 1), int64] */;
  left_shift(%379, %380) /* ty=Tensor[(12, 6, 1), int64] */
}

def @func_2589(%var_2588: Tensor[(7, 6, 4), float32]) -> (Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) {
  %399 = fn (%var_2525: Tensor[(7, 6, 4), float32]) -> (Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) {
    %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
    %382 = exp(%381) /* ty=Tensor[(7, 1, 4), float32] */;
    %383 = cast(%382, dtype="bool") /* ty=Tensor[(7, 1, 4), bool] */;
    %384 = cast(%var_2525, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
    %385 = cast(meta[relay.Constant][21] /* ty=Tensor[(308, 1), float64] */, dtype="float64") /* ty=Tensor[(308, 1), float64] */;
    %386 = reshape(%385, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
    %387 = @func_1837(%386) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
    %388 = %387.1;
    %389 = cast(%388, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %390 = reshape(%389, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %391 = cast(%var_2525, dtype="float32") /* ty=Tensor[(7, 6, 4), float32] */;
    %392 = erf(%391) /* ty=Tensor[(7, 6, 4), float32] */;
    %393 = cast(%392, dtype="float64") /* ty=Tensor[(7, 6, 4), float64] */;
    %394 = acosh(%393) /* ty=Tensor[(7, 6, 4), float64] */;
    %395 = cast(%394, dtype="float64") /* ty=Tensor[(7, 6, 4), float64] */;
    %396 = less_equal(%383, %384) /* ty=Tensor[(7, 6, 4), bool] */;
    %397 = @func_453(%390) /* ty=Tensor[(14, 12, 12), uint32] */;
    %398 = log10(%395) /* ty=Tensor[(7, 6, 4), float64] */;
    (%396, %388, meta[relay.Constant][21] /* ty=Tensor[(308, 1), float64] */, %397, %398)
  };
  %399(%var_2588) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */
}

def @func_2693() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) {
  %404 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) {
    %400 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %401 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %402 = %400.0;
    %403 = %401.0;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) */
}

def @func_6183() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  @func_6181() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */
}

def @func_1837(%var_1816: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) {
  %405 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %406 = shape_of(%var_1816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_1816, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %409 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %410 = subtract(%407, %408) /* ty=Tensor[(2, 11, 14), float64] */;
  %411 = %409.0;
  (%410, %411)
}

def @func_4501() -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) {
  @func_4499() /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) */
}

def @func_3391() -> (Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) {
  %420 = fn () -> (Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) {
    %412 = @func_2503() /* ty=(Tensor[(48), uint64],) */;
    %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(308), float64] */, dtype="float64") /* ty=Tensor[(308), float64] */;
    %414 = reshape(%413, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
    %415 = @func_1837(%414) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
    %416 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
    %417 = %412.0;
    %418 = %415.0;
    %419 = %416.1;
    (%417, %418, meta[relay.Constant][23] /* ty=Tensor[(308), float64] */, %419)
  };
  %420() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */
}

def @func_7365() -> Tensor[(48), uint64] {
  @func_7363() /* ty=Tensor[(48), uint64] */
}

def @func_6824() -> Tensor[(14, 12, 12), float32] {
  @func_6822() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_691(%var_612: float64, %var_613: Tensor[(144), float64], %var_686: Tensor[(5, 10), float32]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) {
  %421 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %424 = reshape(%423, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %425 = @func_359(%424) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %426 = cast(%var_612, dtype="float64") /* ty=float64 */;
  %427 = cast(%var_613, dtype="float64") /* ty=Tensor[(144), float64] */;
  %428 = reshape(%426, newshape=[]) /* ty=float64 */;
  %429 = reshape(%427, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
  %430 = %425.1;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %432 = reshape(%431, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %433 = @func_359(%432) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %434 = cast(%430, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %435 = reshape(%434, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %436 = @func_359(%435) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
  %437 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %438 = cast(%437, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %439 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%422, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = logical_or(%440, %441) /* ty=Tensor[(14, 12, 12), bool] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %444 = log10(%443) /* ty=Tensor[(14, 12, 12), float32] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %446 = cast(%444, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %447 = cast(%var_686, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %448 = reshape(%447, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %449 = @func_496(%428, %429) /* ty=Tensor[(12, 3, 4), float64] */;
  %450 = %433.1;
  %451 = %436.1;
  %452 = sinh(%445) /* ty=Tensor[(14, 12, 12), float32] */;
  %453 = @func_565() /* ty=Tensor[(14, 12, 12), float32] */;
  %454 = log2(%446) /* ty=Tensor[(14, 12, 12), float32] */;
  %455 = @func_259(%448) /* ty=Tensor[(10, 1, 5), float32] */;
  (%430, %449, %var_612, %var_613, %450, %451, %452, %453, %454, %455, %var_686)
}

def @func_8195() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(330), float64], Tensor[(10, 1, 5), float32], Tensor[(50), float32], Tensor[(14, 12, 12), float32]) {
  @func_8193() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(330), float64], Tensor[(10, 1, 5), float32], Tensor[(50), float32], Tensor[(14, 12, 12), float32]) */
}

def @func_4540() -> Tensor[(14, 12, 12), float32] {
  @func_4538() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_6161() -> (Tensor[(12, 6, 4), int8],) {
  @func_6159() /* ty=(Tensor[(12, 6, 4), int8],) */
}

def @func_3095() -> (Tensor[(14, 12, 12), int64],) {
  @func_3093() /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_2954() -> (Tensor[(48), uint64],) {
  @func_2952() /* ty=(Tensor[(48), uint64],) */
}

def @func_9602() -> Tensor[(14, 12, 12), float32] {
  %456 = fn () -> Tensor[(14, 12, 12), float32] {
    @func_4538() /* ty=Tensor[(14, 12, 12), float32] */
  };
  %456() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_259(%var_255: Tensor[(10, 1, 5), float32]) -> Tensor[(10, 1, 5), float32] {
  %457 = cast(%var_255, dtype="float32") /* ty=Tensor[(10, 1, 5), float32] */;
  log10(%457) /* ty=Tensor[(10, 1, 5), float32] */
}

def @func_2321() -> (Tensor[(14, 12, 12), float32],) {
  @func_2319() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_3694() -> (Tensor[(14, 12, 12), uint32], float64, Tensor[(144), float64], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) {
  %458 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %459 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %460 = reshape(%459, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %461 = @func_820(%460) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %462 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %463 = reshape(%462, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), float32] */;
  %464 = @func_2587(%463) /* ty=(Tensor[(7, 6, 4), bool], Tensor[(14, 12, 12), int16], Tensor[(308, 1), float64], Tensor[(14, 12, 12), uint32], Tensor[(7, 6, 4), float64]) */;
  %465 = %458.0;
  %466 = %461.2;
  %467 = %464.3;
  (%465, %466, meta[relay.Constant][24] /* ty=Tensor[(144), float64] */, %467, meta[relay.Constant][25] /* ty=Tensor[(168), float32] */)
}

def @func_900() -> (Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
  %474 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
    %468 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %469 = cast(meta[relay.Constant][26] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
    %470 = reshape(%468, newshape=[]) /* ty=int64 */;
    %471 = reshape(%469, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
    %472 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
    %473 = @func_153(%470, %471) /* ty=Tensor[(12, 6, 1), int64] */;
    (%472, %473, -1 /* ty=int64 */, meta[relay.Constant][26] /* ty=Tensor[(72), int64] */)
  };
  %474() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */
}

def @func_2833() -> (Tensor[(14, 12, 12), float32],) {
  @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_2497() -> (Tensor[(14, 12, 12), uint32],) {
  @func_2495() /* ty=(Tensor[(14, 12, 12), uint32],) */
}

def @func_8339() -> Tensor[(48), uint64] {
  @func_8337() /* ty=Tensor[(48), uint64] */
}

def @func_8838() -> (Tensor[(14, 12, 12), float32],) {
  %475 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %476 = %475.0;
  (%476,)
}

def @func_5749() -> Tensor[(14, 12, 12), float32] {
  %478 = fn () -> Tensor[(14, 12, 12), float32] {
    %477 = @func_2046() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) */;
    %477.2
  };
  %478() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_2495() -> (Tensor[(14, 12, 12), uint32],) {
  %479 = @func_1342() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %480 = %479.2;
  (%480,)
}

def @func_7944(%var_7940: Tensor[(12, 4), int8]) -> (Tensor[(14, 12, 12), int16], Tensor[(2, 12, 2), float64], Tensor[(12, 4), int8], Tensor[(8, 2, 3), bool]) {
  %481 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %482 = cast(%var_7940, dtype="int8") /* ty=Tensor[(12, 4), int8] */;
  %483 = cast(%var_7940, dtype="int8") /* ty=Tensor[(12, 4), int8] */;
  %484 = reshape(%482, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), int8] */;
  %485 = reshape(%483, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), int8] */;
  %486 = @func_5292(%484, %485) /* ty=(Tensor[(2, 12, 2), int8], Tensor[(2, 12, 2), float64]) */;
  %487 = cast(%var_7940, dtype="uint64") /* ty=Tensor[(12, 4), uint64] */;
  %488 = reshape(%487, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %489 = @func_1365(%488) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) */;
  %490 = %481.0;
  %491 = %486.1;
  %492 = %489.1;
  (%490, %491, %var_7940, %492)
}

def @func_1342() -> (Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %493 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %494 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %496 = reshape(%495, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %497 = %493.1;
  %498 = @func_453(%496) /* ty=Tensor[(14, 12, 12), uint32] */;
  (%497, %494, %498)
}

def @func_8513(%var_8371: Tensor[(12, 6, 48), float64], %var_8382: Tensor[(2016), float64], %var_8398: Tensor[(378), uint32]) -> (Tensor[(144), float64], Tensor[(2016), float64], Tensor[(14, 12, 12), int16], Tensor[(9, 7, 6), uint32], Tensor[(378), uint32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32], Tensor[(12, 6, 48), float64], Tensor[(12, 6, 48), int16], Tensor[(12, 6, 48), bool]) {
  %499 = cast(%var_8382, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %500 = cast(-0.28749f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %501 = reshape(%499, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float64] */;
  %502 = reshape(%500, newshape=[]) /* ty=float64 */;
  %503 = @func_1517(%501, %502) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %504 = cast(%var_8398, dtype="uint32") /* ty=Tensor[(378), uint32] */;
  %505 = cast(%var_8398, dtype="uint32") /* ty=Tensor[(378), uint32] */;
  %506 = reshape(%504, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), uint32] */;
  %507 = reshape(%505, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), uint32] */;
  %508 = @func_6958(%506, %507) /* ty=(Tensor[(9, 7, 6), uint32],) */;
  %509 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %510 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %511 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %512 = @func_4609() /* ty=Tensor[(14, 12, 12), int16] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %514 = reshape(%513, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %515 = @func_6501() /* ty=Tensor[(12, 6, 48), float64] */;
  %516 = cast(%var_8371, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %520 = maximum(%518, %519) /* ty=Tensor[(12, 6, 48), float64] */;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %522 = cast(%515, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %523 = asin(%522) /* ty=Tensor[(12, 6, 48), float64] */;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(12, 6, 48), float64] */;
  %525 = sinh(%524) /* ty=Tensor[(12, 6, 48), float64] */;
  %526 = cast(%523, dtype="int16") /* ty=Tensor[(12, 6, 48), int16] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="int16") /* ty=Tensor[(12, 6, 48), int16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %530 = cast(%515, dtype="int8") /* ty=Tensor[(12, 6, 48), int8] */;
  %531 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%525, dtype="int8") /* ty=Tensor[(12, 6, 48), int8] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %534 = subtract(%532, %533) /* ty=Tensor[(12, 6, 48), int8] */;
  %535 = cast(%534, dtype="bool") /* ty=Tensor[(12, 6, 48), bool] */;
  %536 = cast(-0.28749f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %537 = %503.8;
  %538 = %508.0;
  %539 = %509.0;
  %540 = %510.0;
  %541 = %511.0;
  %542 = @func_453(%514) /* ty=Tensor[(14, 12, 12), uint32] */;
  %543 = sin(%521) /* ty=Tensor[(12, 6, 48), float64] */;
  %544 = multiply(%528, %529) /* ty=Tensor[(12, 6, 48), int16] */;
  %545 = less_equal(%535, %536) /* ty=Tensor[(12, 6, 48), bool] */;
  (%537, %var_8382, %512, %538, %var_8398, %539, %540, %541, %542, %543, %544, %545)
}

def @func_2010() -> (Tensor[(14, 12, 12), float32],) {
  @func_2008() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_6032(%var_6031: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), bool], Tensor[(2, 11, 14), float32]) {
  %555 = fn (%var_6021: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), bool], Tensor[(2, 11, 14), float32]) {
    %546 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
    %547 = %546.1;
    %548 = cast(%var_6021, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
    %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %550 = cast(%547, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
    %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %552 = cast(%var_6021, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
    %553 = greater_equal(%550, %551) /* ty=Tensor[(2, 11, 14), bool] */;
    %554 = sin(%552) /* ty=Tensor[(2, 11, 14), float32] */;
    (%553, %554)
  };
  %555(%var_6031) /* ty=(Tensor[(2, 11, 14), bool], Tensor[(2, 11, 14), float32]) */
}

def @func_2319() -> (Tensor[(14, 12, 12), float32],) {
  %556 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %557 = %556.0;
  (%557,)
}

def @func_5435() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
  %562 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
    %558 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %559 = @func_2257() /* ty=(Tensor[(14, 12, 12), int64],) */;
    %560 = %558.0;
    %561 = %559.0;
    (%560, %561)
  };
  %562() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) */
}

def @func_6913() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  @func_6911() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */
}

def @func_1042() -> (Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
  %575 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) {
    %563 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %564 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %565 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %566 = reshape(%564, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
    %567 = reshape(%565, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
    %568 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %569 = cast(meta[relay.Constant][28] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
    %570 = reshape(%568, newshape=[]) /* ty=int64 */;
    %571 = reshape(%569, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
    %572 = %563.0;
    %573 = @func_68(%566, %567) /* ty=Tensor[(8, 2, 3), bool] */;
    %574 = @func_153(%570, %571) /* ty=Tensor[(12, 6, 1), int64] */;
    (%572, %573, meta[relay.Constant][27] /* ty=Tensor[(48), uint64] */, %574, -7 /* ty=int64 */, meta[relay.Constant][28] /* ty=Tensor[(72), int64] */)
  };
  %575() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */
}

def @func_4184(%var_4183: Tensor[(330), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) {
  %585 = fn (%var_4151: Tensor[(330), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) {
    %576 = cast(%var_4151, dtype="float64") /* ty=Tensor[(330), float64] */;
    %577 = reshape(%576, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
    %578 = @func_4002(%577) /* ty=(Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) */;
    %579 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
    %580 = cast(%579, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %581 = reshape(%580, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %582 = @func_541(%581) /* ty=(Tensor[(14, 12, 12), int64],) */;
    %583 = %578.1;
    %584 = %582.0;
    (%579, %583, %var_4151, %584)
  };
  %585(%var_4183) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) */
}

def @func_2258() -> (Tensor[(14, 12, 12), int64],) {
  %587 = fn () -> (Tensor[(14, 12, 12), int64],) {
    %586 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
    (%586,)
  };
  %587() /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_778() -> Tensor[(14, 12, 12), int64] {
  @func_776() /* ty=Tensor[(14, 12, 12), int64] */
}

def @func_8130() -> (Tensor[(14, 12, 12), float32], Tensor[(308), float64], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(8, 16, 14), float64], Tensor[(648), int64]) {
  %607 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(308), float64], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(8, 16, 14), float64], Tensor[(648), int64]) {
    %588 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %589 = @func_2437() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) */;
    %590 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
    %591 = @func_7318() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
    %592 = @func_6323() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %593 = @func_2015() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */;
    %594 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
    %595 = cast(meta[relay.Constant][29] /* ty=Tensor[(648), int64] */, dtype="int64") /* ty=Tensor[(648), int64] */;
    %596 = reshape(%595, newshape=[72, 9]) /* ty=Tensor[(72, 9), int64] */;
    %597 = @func_6126(%596) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */;
    %598 = %588.0;
    %599 = %589.2;
    %600 = %590.0;
    %601 = %591.2;
    %602 = %592.0;
    %603 = %593.0;
    %604 = @func_4609() /* ty=Tensor[(14, 12, 12), int16] */;
    %605 = %594.0;
    %606 = %597.6;
    (%598, %599, %600, %601, %602, %603, %604, %605, %606, meta[relay.Constant][29] /* ty=Tensor[(648), int64] */)
  };
  %607() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(308), float64], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(8, 16, 14), float64], Tensor[(648), int64]) */
}

def @func_1293() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */
}

def @func_2952() -> (Tensor[(48), uint64],) {
  %608 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %609 = %608.0;
  (%609,)
}

def @func_6962(%var_6960: Tensor[(9, 7, 6), uint32], %var_6961: Tensor[(9, 7, 6), uint32]) -> (Tensor[(9, 7, 6), uint32],) {
  @func_6958(%var_6960, %var_6961) /* ty=(Tensor[(9, 7, 6), uint32],) */
}

def @func_8518(%var_8515: Tensor[(12, 6, 48), float64], %var_8516: Tensor[(2016), float64], %var_8517: Tensor[(378), uint32]) -> (Tensor[(144), float64], Tensor[(2016), float64], Tensor[(14, 12, 12), int16], Tensor[(9, 7, 6), uint32], Tensor[(378), uint32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32], Tensor[(12, 6, 48), float64], Tensor[(12, 6, 48), int16], Tensor[(12, 6, 48), bool]) {
  @func_8513(%var_8515, %var_8516, %var_8517) /* ty=(Tensor[(144), float64], Tensor[(2016), float64], Tensor[(14, 12, 12), int16], Tensor[(9, 7, 6), uint32], Tensor[(378), uint32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32], Tensor[(12, 6, 48), float64], Tensor[(12, 6, 48), int16], Tensor[(12, 6, 48), bool]) */
}

def @func_2016() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) {
  %615 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) {
    %610 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %611 = %610.0;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %613 = reshape(%612, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %614 = @func_453(%613) /* ty=Tensor[(14, 12, 12), uint32] */;
    (%611, %614)
  };
  %615() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32]) */
}

def @func_4538() -> Tensor[(14, 12, 12), float32] {
  %616 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %616.0
}

def @main(%var_9830: Tensor[(2, 12, 14), int16], %var_9831: Tensor[(2, 12, 14), int16]) -> Tensor[(2, 12, 14), int16] {
  %617 = cast(%var_9831, dtype="int16") /* ty=Tensor[(2, 12, 14), int16] */;
  %618 = shape_of(%var_9830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_9830, dtype="int16") /* ty=Tensor[(2, 12, 14), int16] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%619, %620) /* ty=Tensor[(2, 12, 14), int16] */
}

def @func_3492() -> Tensor[(14, 12, 12), int16] {
  %622 = fn () -> Tensor[(14, 12, 12), int16] {
    %621 = @func_2692() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) */;
    %621.1
  };
  %622() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_6580(%var_6579: Tensor[(9), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int64], float64, Tensor[(9), float64], Tensor[(14, 12, 12), int16]) {
  %632 = fn (%var_6542: Tensor[(9), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int64], float64, Tensor[(9), float64], Tensor[(14, 12, 12), int16]) {
    %623 = cast(-6.64848f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %624 = cast(%var_6542, dtype="float64") /* ty=Tensor[(9), float64] */;
    %625 = reshape(%623, newshape=[]) /* ty=float64 */;
    %626 = reshape(%624, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
    %627 = @func_1761(%625, %626) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
    %628 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %629 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
    %630 = %627.1;
    %631 = %628.0;
    (%629, %630, -6.64848f64 /* ty=float64 */, %var_6542, %631)
  };
  %632(%var_6579) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int64], float64, Tensor[(9), float64], Tensor[(14, 12, 12), int16]) */
}

def @func_4258() -> (Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) {
  @func_4256() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) */
}

def @func_9255() -> (Tensor[(12, 6, 4), int8], Tensor[(8, 16, 14), bool], Tensor[(14, 12, 12), float32]) {
  @func_9253() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(8, 16, 14), bool], Tensor[(14, 12, 12), float32]) */
}

def @func_1715() -> (Tensor[(14, 12, 12), int16],) {
  %634 = fn () -> (Tensor[(14, 12, 12), int16],) {
    %633 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_8671(%var_8646: float64) -> (Tensor[(14, 12, 12), int16], Tensor[(3, 1, 3), float32], float64, Tensor[(9), float64], Tensor[(14, 12, 12), uint32], Tensor[(12, 3, 4), uint64]) {
  %635 = cast(%var_8646, dtype="float64") /* ty=float64 */;
  %636 = cast(meta[relay.Constant][30] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %637 = reshape(%635, newshape=[]) /* ty=float64 */;
  %638 = reshape(%636, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
  %639 = @func_1761(%637, %638) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(144), float64], Tensor[(50), float32], Tensor[(3, 1, 3), float32]) */;
  %640 = @func_2495() /* ty=(Tensor[(14, 12, 12), uint32],) */;
  %641 = @func_3491() /* ty=Tensor[(14, 12, 12), int16] */;
  %642 = %639.5;
  %643 = %640.0;
  %644 = @func_7072() /* ty=Tensor[(12, 3, 4), uint64] */;
  (%641, %642, %var_8646, meta[relay.Constant][30] /* ty=Tensor[(9), float64] */, %643, %644)
}

def @func_3318() -> (Tensor[(14, 12, 12), float32],) {
  %645 = @func_2927() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(9), float64], Tensor[(144), float32], Tensor[(14, 12, 12), float32]) */;
  %646 = %645.3;
  (%646,)
}

def @func_8932() -> (Tensor[(14, 12, 12), int64],) {
  @func_8930() /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_5524() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
  %651 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
    %647 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %648 = %647.0;
    %649 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
    %650 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
    (%648, %649, %650)
  };
  %651() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */
}

def @func_8945() -> Tensor[(14, 12, 12), float64] {
  %652 = @func_3709() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %652.0
}

def @func_696(%var_693: float64, %var_694: Tensor[(144), float64], %var_695: Tensor[(5, 10), float32]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) {
  @func_691(%var_693, %var_694, %var_695) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(10, 1, 5), float32], Tensor[(5, 10), float32]) */
}

def @func_8337() -> Tensor[(48), uint64] {
  @func_7363() /* ty=Tensor[(48), uint64] */
}

def @func_2125(%var_2112: Tensor[(13, 5, 10), int32], %var_2113: Tensor[(13, 5, 10), int32]) -> Tensor[(13, 5, 10), bool] {
  %653 = cast(%var_2113, dtype="bool") /* ty=Tensor[(13, 5, 10), bool] */;
  %654 = shape_of(%var_2112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_2112, dtype="bool") /* ty=Tensor[(13, 5, 10), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%655, %656) /* ty=Tensor[(13, 5, 10), bool] */
}

def @func_6822() -> Tensor[(14, 12, 12), float32] {
  %657 = @func_2167() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %657.0
}

def @func_453(%var_442: Tensor[(14, 12, 12), float32]) -> Tensor[(14, 12, 12), uint32] {
  %658 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %659 = %658.0;
  %660 = cast(%var_442, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%662, %663) /* ty=Tensor[(14, 12, 12), uint32] */
}

def @func_1781() -> Tensor[(12, 6, 1), int64] {
  @func_1779() /* ty=Tensor[(12, 6, 1), int64] */
}

def @func_5579() -> (Tensor[(14, 12, 12), int16],) {
  %664 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
  (%664,)
}

def @func_1191() -> (Tensor[(14, 12, 12), int16],) {
  %666 = fn () -> (Tensor[(14, 12, 12), int16],) {
    %665 = @func_861() /* ty=Tensor[(14, 12, 12), int16] */;
    (%665,)
  };
  %666() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_262(%var_260: Tensor[(10, 1, 5), float32]) -> Tensor[(10, 1, 5), float32] {
  @func_259(%var_260) /* ty=Tensor[(10, 1, 5), float32] */
}

def @func_4609() -> Tensor[(14, 12, 12), int16] {
  %667 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %667.0
}

def @func_7274(%var_7272: Tensor[(650), int32], %var_7273: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) {
  %679 = fn (%var_7247: Tensor[(650), int32], %var_7248: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) {
    %668 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
    %669 = cast(%var_7247, dtype="int32") /* ty=Tensor[(650), int32] */;
    %670 = cast(%var_7248, dtype="float64") /* ty=Tensor[(144), float64] */;
    %671 = reshape(%669, newshape=[5, 130]) /* ty=Tensor[(5, 130), int32] */;
    %672 = reshape(%670, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %673 = @func_4766(%671, %672) /* ty=(Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) */;
    %674 = @func_1934() /* ty=(Tensor[(14, 12, 12), uint32],) */;
    %675 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
    %676 = %668.0;
    %677 = %673.2;
    %678 = %674.0;
    (%675, %676, %677, %var_7247, %var_7248, %678)
  };
  %679(%var_7272, %var_7273) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), uint32], Tensor[(28, 72), int64], Tensor[(650), int32], Tensor[(144), float64], Tensor[(14, 12, 12), uint32]) */
}

def @func_3711() -> (Tensor[(14, 12, 12), float64],) {
  @func_3709() /* ty=(Tensor[(14, 12, 12), float64],) */
}

def @func_5888() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) {
  %686 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) {
    %680 = @func_3093() /* ty=(Tensor[(14, 12, 12), int64],) */;
    %681 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
    %682 = @func_2461() /* ty=Tensor[(14, 12, 12), int16] */;
    %683 = @func_3828() /* ty=Tensor[(14, 12, 12), float32] */;
    %684 = %680.0;
    %685 = %681.0;
    (%682, %683, %684, %685)
  };
  %686() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) */
}

def @func_5719() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
  @func_5717() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) */
}

def @func_1935() -> (Tensor[(14, 12, 12), uint32],) {
  %689 = fn () -> (Tensor[(14, 12, 12), uint32],) {
    %687 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
    %688 = %687.3;
    (%688,)
  };
  %689() /* ty=(Tensor[(14, 12, 12), uint32],) */
}

def @func_7635() -> (Tensor[(14, 12, 12), float32],) {
  %692 = fn () -> (Tensor[(14, 12, 12), float32],) {
    %690 = @func_3318() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %691 = %690.0;
    (%691,)
  };
  %692() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_6761(%var_6760: Tensor[(7, 9, 9), int16]) -> Tensor[(7, 9, 9), int16] {
  %697 = fn (%var_6755: Tensor[(7, 9, 9), int16]) -> Tensor[(7, 9, 9), int16] {
    %693 = cast(%var_6755, dtype="int16") /* ty=Tensor[(7, 9, 9), int16] */;
    %694 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(7, 9, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %695 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 9, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 9, 9), int16] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    multiply(%695, %696) /* ty=Tensor[(7, 9, 9), int16] */
  };
  %697(%var_6760) /* ty=Tensor[(7, 9, 9), int16] */
}

def @func_1291() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %698 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %699 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %700 = %698.0;
  %701 = %699.0;
  (%700, %701)
}

def @func_4051() -> Tensor[(14, 12, 12), int16] {
  @func_4049() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_7074() -> Tensor[(12, 3, 4), uint64] {
  @func_7072() /* ty=Tensor[(12, 3, 4), uint64] */
}

def @func_983() -> Tensor[(14, 12, 12), float32] {
  @func_565() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_4766(%var_4755: Tensor[(5, 130), int32], %var_4762: Tensor[(144), float64]) -> (Tensor[(5, 130), uint64], Tensor[(14, 12, 12), float32], Tensor[(28, 72), int64], Tensor[(144), float64]) {
  %702 = @func_2819() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) */;
  %703 = %702.1;
  %704 = cast(%var_4755, dtype="uint64") /* ty=Tensor[(5, 130), uint64] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(2), int32] */;
  %706 = cast(%703, dtype="uint64") /* ty=Tensor[(5, 130), uint64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %708 = cast(meta[relay.Constant][32] /* ty=Tensor[(28, 72), int64] */, dtype="int64") /* ty=Tensor[(28, 72), int64] */;
  %709 = cast(%var_4762, dtype="float64") /* ty=Tensor[(144), float64] */;
  %710 = reshape(%708, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), int64] */;
  %711 = reshape(%709, newshape=[72, 2]) /* ty=Tensor[(72, 2), float64] */;
  %712 = @func_3787(%710, %711) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) */;
  %713 = add(%706, %707) /* ty=Tensor[(5, 130), uint64] */;
  %714 = %712.1;
  (%713, %714, meta[relay.Constant][32] /* ty=Tensor[(28, 72), int64] */, %var_4762)
}

def @func_1365(%var_1356: Tensor[(48), uint64]) -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) {
  %715 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %716 = cast(%var_1356, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %717 = cast(%var_1356, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %718 = reshape(%716, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %719 = reshape(%717, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), uint64] */;
  %720 = %715.0;
  %721 = @func_68(%718, %719) /* ty=Tensor[(8, 2, 3), bool] */;
  (%720, %721, %var_1356)
}

def @func_5471(%var_5469: float64) -> Tensor[(2, 15, 7), float64] {
  @func_5468(%var_5469) /* ty=Tensor[(2, 15, 7), float64] */
}

def @func_4579() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
  @func_4577() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */
}

def @func_1663() -> (Tensor[(14, 12, 12), float32],) {
  @func_1661() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_7947(%var_7945: Tensor[(12, 4), int8]) -> (Tensor[(14, 12, 12), int16], Tensor[(2, 12, 2), float64], Tensor[(12, 4), int8], Tensor[(8, 2, 3), bool]) {
  @func_7944(%var_7945) /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 12, 2), float64], Tensor[(12, 4), int8], Tensor[(8, 2, 3), bool]) */
}

def @func_4606() -> (Tensor[(14, 12, 12), int16],) {
  @func_4604() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_8840() -> (Tensor[(14, 12, 12), float32],) {
  @func_8838() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_8947() -> Tensor[(14, 12, 12), float64] {
  @func_8945() /* ty=Tensor[(14, 12, 12), float64] */
}

def @func_206() -> (Tensor[(14, 12, 12), float32],) {
  @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_4130() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) {
  %722 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %723 = @func_3155() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %724 = @func_1661() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %725 = %722.0;
  %726 = %723.0;
  %727 = %724.0;
  (%725, %726, %727)
}

def @func_7917() -> (Tensor[(14, 12, 12), uint32], Tensor[(7, 3, 13), float32], Tensor[(273), float32], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), int16], Tensor[(168), float32], Tensor[(12, 6, 4), int8]) {
  %744 = fn () -> (Tensor[(14, 12, 12), uint32], Tensor[(7, 3, 13), float32], Tensor[(273), float32], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), int16], Tensor[(168), float32], Tensor[(12, 6, 4), int8]) {
    %728 = @func_3390() /* ty=(Tensor[(48), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(14, 12, 12), uint32]) */;
    %729 = cast(meta[relay.Constant][33] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
    %730 = reshape(%729, newshape=[7, 3, 13]) /* ty=Tensor[(7, 3, 13), float32] */;
    %731 = @func_7485(%730) /* ty=(Tensor[(7, 3, 13), float32],) */;
    %732 = %728.3;
    %733 = cast(%732, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %734 = reshape(%733, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %735 = @func_359(%734) /* ty=(Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float32]) */;
    %736 = @func_1190() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %737 = @func_4952() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) */;
    %738 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
    %739 = %731.0;
    %740 = %735.0;
    %741 = %736.0;
    %742 = %737.2;
    %743 = %738.1;
    (%732, %739, meta[relay.Constant][33] /* ty=Tensor[(273), float32] */, %740, %741, %742, %743)
  };
  %744() /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(7, 3, 13), float32], Tensor[(273), float32], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), int16], Tensor[(168), float32], Tensor[(12, 6, 4), int8]) */
}

def @func_5581() -> (Tensor[(14, 12, 12), int16],) {
  @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_3320() -> (Tensor[(14, 12, 12), float32],) {
  @func_3318() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_4870() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(48), uint64]) {
  @func_4868() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(48), uint64]) */
}

def @func_1521(%var_1519: Tensor[(14, 12, 12), float64], %var_1520: float64) -> (Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
  @func_1517(%var_1519, %var_1520) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */
}

def @func_2461() -> Tensor[(14, 12, 12), int16] {
  %745 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %745.2
}

def @func_1145() -> Tensor[(14, 12, 12), int64] {
  %746 = fn () -> Tensor[(14, 12, 12), int64] {
    @func_776() /* ty=Tensor[(14, 12, 12), int64] */
  };
  %746() /* ty=Tensor[(14, 12, 12), int64] */
}

def @func_3093() -> (Tensor[(14, 12, 12), int64],) {
  %747 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  (%747,)
}

def @func_742() -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  %761 = fn () -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
    %748 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %749 = cast(meta[relay.Constant][34] /* ty=Tensor[(72, 1), int64] */, dtype="int64") /* ty=Tensor[(72, 1), int64] */;
    %750 = reshape(%748, newshape=[]) /* ty=int64 */;
    %751 = reshape(%749, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
    %752 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %753 = %752.0;
    %754 = cast(-1 /* ty=int64 */, dtype="int16") /* ty=int16 */;
    %755 = cast(%753, dtype="int16") /* ty=Tensor[(14, 12, 12), int16] */;
    %756 = cast(%753, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %757 = reshape(%756, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %758 = @func_153(%750, %751) /* ty=Tensor[(12, 6, 1), int64] */;
    %759 = logical_xor(%754, %755) /* ty=Tensor[(14, 12, 12), int16] */;
    %760 = @func_453(%757) /* ty=Tensor[(14, 12, 12), uint32] */;
    (%758, meta[relay.Constant][34] /* ty=Tensor[(72, 1), int64] */, %759, %760)
  };
  %761() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */
}

def @func_566() -> Tensor[(14, 12, 12), float32] {
  %763 = fn () -> Tensor[(14, 12, 12), float32] {
    %762 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %762.0
  };
  %763() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_1071() -> (Tensor[(14, 12, 12), float32],) {
  %764 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %765 = %764.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %767 = sigmoid(%766) /* ty=Tensor[(14, 12, 12), float32] */;
  (%767,)
}

def @func_4666() -> (Tensor[(14, 12, 12), float32],) {
  %768 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %769 = %768.0;
  (%769,)
}

def @func_499(%var_497: float64, %var_498: Tensor[(12, 3, 4), float64]) -> Tensor[(12, 3, 4), float64] {
  %772 = fn (%var_478: float64, %var_479: Tensor[(12, 3, 4), float64]) -> Tensor[(12, 3, 4), float64] {
    %770 = cast(%var_478, dtype="float64") /* ty=float64 */;
    %771 = cast(%var_479, dtype="float64") /* ty=Tensor[(12, 3, 4), float64] */;
    floor_divide(%770, %771) /* ty=Tensor[(12, 3, 4), float64] */
  };
  %772(%var_497, %var_498) /* ty=Tensor[(12, 3, 4), float64] */
}

def @func_2820() -> (Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) {
  %784 = fn () -> (Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) {
    %773 = @func_2495() /* ty=(Tensor[(14, 12, 12), uint32],) */;
    %774 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 130), int32] */, dtype="int32") /* ty=Tensor[(5, 130), int32] */;
    %775 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 130), int32] */, dtype="int32") /* ty=Tensor[(5, 130), int32] */;
    %776 = reshape(%774, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
    %777 = reshape(%775, newshape=[13, 5, 10]) /* ty=Tensor[(13, 5, 10), int32] */;
    %778 = @func_2125(%776, %777) /* ty=Tensor[(13, 5, 10), bool] */;
    %779 = cast(%778, dtype="float32") /* ty=Tensor[(13, 5, 10), float32] */;
    %780 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
    %781 = %773.0;
    %782 = asin(%779) /* ty=Tensor[(13, 5, 10), float32] */;
    %783 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
    (%780, meta[relay.Constant][35] /* ty=Tensor[(5, 130), int32] */, %781, %782, %783)
  };
  %784() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) */
}

def @func_3709() -> (Tensor[(14, 12, 12), float64],) {
  %785 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %786 = %785.0;
  (%786,)
}

def @func_5717() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64]) {
  %787 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %788 = @func_3093() /* ty=(Tensor[(14, 12, 12), int64],) */;
  %789 = %787.0;
  %790 = %788.0;
  (%789, %790)
}

def @func_2008() -> (Tensor[(14, 12, 12), float32],) {
  %791 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_7363() -> Tensor[(48), uint64] {
  %793 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
  %793.0
}

def @func_3230(%var_3228: Tensor[(13, 13, 14), uint32], %var_3229: Tensor[(13, 13, 14), uint32]) -> (Tensor[(13, 13, 14), bool], Tensor[(14, 12, 12), int16]) {
  %801 = fn (%var_3191: Tensor[(13, 13, 14), uint32], %var_3192: Tensor[(13, 13, 14), uint32]) -> (Tensor[(13, 13, 14), bool], Tensor[(14, 12, 12), int16]) {
    %794 = cast(%var_3192, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
    %795 = shape_of(%var_3191, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%var_3191, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %798 = @func_3184() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %799 = greater_equal(%796, %797) /* ty=Tensor[(13, 13, 14), bool] */;
    %800 = %798.0;
    (%799, %800)
  };
  %801(%var_3228, %var_3229) /* ty=(Tensor[(13, 13, 14), bool], Tensor[(14, 12, 12), int16]) */
}

def @func_6383() -> Tensor[(168), float32] {
  @func_6381() /* ty=Tensor[(168), float32] */
}

def @func_3457(%var_3456: Tensor[(9, 10, 16), float32]) -> (Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) {
  %809 = fn (%var_3428: Tensor[(9, 10, 16), float32]) -> (Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) {
    %802 = cast(-2.53715f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %803 = cast(%var_3428, dtype="float32") /* ty=Tensor[(9, 10, 16), float32] */;
    %804 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
    %805 = @func_2319() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %806 = floor_mod(%802, %803) /* ty=Tensor[(9, 10, 16), float32] */;
    %807 = %804.0;
    %808 = %805.0;
    (%806, %807, %808)
  };
  %809(%var_3456) /* ty=(Tensor[(9, 10, 16), float32], Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), float32]) */
}

def @func_4668() -> (Tensor[(14, 12, 12), float32],) {
  @func_4666() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_157(%var_155: int64, %var_156: Tensor[(12, 6, 1), int64]) -> Tensor[(12, 6, 1), int64] {
  @func_153(%var_155, %var_156) /* ty=Tensor[(12, 6, 1), int64] */
}

def @func_2504() -> (Tensor[(48), uint64],) {
  %812 = fn () -> (Tensor[(48), uint64],) {
    %810 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
    %811 = %810.0;
    (%811,)
  };
  %812() /* ty=(Tensor[(48), uint64],) */
}

def @func_8193() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(330), float64], Tensor[(10, 1, 5), float32], Tensor[(50), float32], Tensor[(14, 12, 12), float32]) {
  %813 = @func_2952() /* ty=(Tensor[(48), uint64],) */;
  %814 = cast(meta[relay.Constant][36] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %815 = reshape(%814, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %816 = @func_4182(%815) /* ty=(Tensor[(14, 12, 12), int64], Tensor[(48), uint64], Tensor[(330), float64], Tensor[(14, 12, 12), int64]) */;
  %817 = cast(meta[relay.Constant][37] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %818 = reshape(%817, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %819 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %820 = %819.0;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %822 = asin(%821) /* ty=Tensor[(14, 12, 12), float32] */;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %824 = %813.0;
  %825 = %816.0;
  %826 = @func_259(%818) /* ty=Tensor[(10, 1, 5), float32] */;
  %827 = exp(%823) /* ty=Tensor[(14, 12, 12), float32] */;
  (%824, %825, meta[relay.Constant][36] /* ty=Tensor[(330), float64] */, %826, meta[relay.Constant][37] /* ty=Tensor[(50), float32] */, %827)
}

def @func_5468(%var_5461: float64) -> Tensor[(2, 15, 7), float64] {
  %828 = cast(%var_5461, dtype="float64") /* ty=float64 */;
  %829 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 7), float64] */;
  floor_mod(%828, %829) /* ty=Tensor[(2, 15, 7), float64] */
}

def @func_3791(%var_3789: Tensor[(14, 12, 12), int64], %var_3790: Tensor[(72, 2), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) {
  @func_3787(%var_3789, %var_3790) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) */
}

def @func_4499() -> (Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) {
  %830 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %831 = @func_1950() /* ty=Tensor[(14, 12, 12), float32] */;
  (%830, %831)
}

def @func_6478(%var_6477: Tensor[(132), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(132), float64], Tensor[(11, 2, 6), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int16]) {
  %843 = fn (%var_6450: Tensor[(132), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(132), float64], Tensor[(11, 2, 6), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int16]) {
    %832 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
    %833 = cast(%var_6450, dtype="float64") /* ty=Tensor[(132), float64] */;
    %834 = cast(%var_6450, dtype="float64") /* ty=Tensor[(132), float64] */;
    %835 = reshape(%833, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float64] */;
    %836 = reshape(%834, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float64] */;
    %837 = @func_4432(%835, %836) /* ty=Tensor[(11, 2, 6), float64] */;
    %838 = cast(%837, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
    %839 = %832.0;
    %840 = cosh(%838) /* ty=Tensor[(11, 2, 6), float32] */;
    %841 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
    %842 = @func_3491() /* ty=Tensor[(14, 12, 12), int16] */;
    (%839, %var_6450, %840, %841, %842)
  };
  %843(%var_6477) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(132), float64], Tensor[(11, 2, 6), float32], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), int16]) */
}

def @func_985() -> Tensor[(14, 12, 12), float32] {
  @func_983() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_7744() -> Tensor[(14, 12, 12), int16] {
  @func_2461() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_2048() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) {
  @func_2046() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) */
}

def @func_6501() -> Tensor[(12, 6, 48), float64] {
  %844 = @func_4256() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(12, 6, 1), int64], Tensor[(1440), float32], Tensor[(14, 12, 12), int16]) */;
  %845 = %844.1;
  %846 = cast(%845, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %847 = tan(%846) /* ty=Tensor[(12, 6, 1), float32] */;
  %848 = @func_5887() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) */;
  %849 = %848.3;
  %850 = cast(%847, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
  %851 = cast(%849, dtype="float64") /* ty=Tensor[(48), float64] */;
  divide(%850, %851) /* ty=Tensor[(12, 6, 48), float64] */
}

def @func_7542(%var_7540: Tensor[(648), int64]) -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(648), int64]) {
  @func_7539(%var_7540) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(648), int64]) */
}

def @func_72(%var_70: Tensor[(8, 2, 3), uint64], %var_71: Tensor[(8, 2, 3), uint64]) -> Tensor[(8, 2, 3), bool] {
  @func_68(%var_70, %var_71) /* ty=Tensor[(8, 2, 3), bool] */
}

def @func_4868() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32], Tensor[(48), uint64]) {
  %852 = @func_1041() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(8, 2, 3), bool], Tensor[(48), uint64], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %853 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %854 = %852.2;
  %855 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %856 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  %857 = %853.0;
  (%854, %855, %856, %857)
}

def @func_7177(%var_7175: Tensor[(1, 16, 3), float64], %var_7176: Tensor[(2016), float32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) {
  @func_7173(%var_7175, %var_7176) /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(2016), float32], Tensor[(?, 16, 3), int32], Tensor[(?, 16, 3), bool], Tensor[(72, 2), float64], Tensor[(144), float64]) */
}

def @func_2129(%var_2127: Tensor[(13, 5, 10), int32], %var_2128: Tensor[(13, 5, 10), int32]) -> Tensor[(13, 5, 10), bool] {
  @func_2125(%var_2127, %var_2128) /* ty=Tensor[(13, 5, 10), bool] */
}

def @func_5670() -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float64]) {
  %858 = @func_2046() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) */;
  %859 = @func_4130() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32]) */;
  %860 = %859.2;
  %861 = cast(%860, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %862 = %858.1;
  %863 = atanh(%861) /* ty=Tensor[(14, 12, 12), float64] */;
  (%862, %863)
}

def @func_5672() -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float64]) {
  @func_5670() /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float64]) */
}

def @func_4004(%var_4003: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) {
  %871 = fn (%var_3979: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) {
    %864 = cast(-2.71145f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %865 = cast(%var_3979, dtype="float64") /* ty=Tensor[(10, 11, 3), float64] */;
    %866 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
    %867 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
    %868 = floor_divide(%864, %865) /* ty=Tensor[(10, 11, 3), float64] */;
    %869 = %866.0;
    %870 = %867.3;
    (%868, %869, %870)
  };
  %871(%var_4003) /* ty=(Tensor[(10, 11, 3), float64], Tensor[(48), uint64], Tensor[(72), int64]) */
}

def @func_5337() -> (Tensor[(8, 16, 14), bool],) {
  %872 = @func_5053() /* ty=Tensor[(8, 16, 14), bool] */;
  (%872,)
}

def @func_2438() -> (Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) {
  %879 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) {
    %873 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %874 = cast(meta[relay.Constant][39] /* ty=Tensor[(308), float64] */, dtype="float64") /* ty=Tensor[(308), float64] */;
    %875 = reshape(%874, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
    %876 = @func_1837(%875) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */;
    %877 = %873.0;
    %878 = %876.0;
    (%877, %878, meta[relay.Constant][39] /* ty=Tensor[(308), float64] */)
  };
  %879() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(2, 11, 14), float64], Tensor[(308), float64]) */
}

def @func_9253() -> (Tensor[(12, 6, 4), int8], Tensor[(8, 16, 14), bool], Tensor[(14, 12, 12), float32]) {
  %880 = @func_4974() /* ty=(Tensor[(12, 6, 4), int8], Tensor[(14, 12, 12), float32]) */;
  %881 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
  %882 = @func_7318() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
  %883 = %880.0;
  %884 = %881.0;
  %885 = %882.1;
  (%883, %884, %885)
}

def @func_3555() -> Tensor[(14, 12, 12), float64] {
  @func_3553() /* ty=Tensor[(14, 12, 12), float64] */
}

def @func_3186() -> (Tensor[(14, 12, 12), int16],) {
  @func_3184() /* ty=(Tensor[(14, 12, 12), int16],) */
}

def @func_7787() -> (Tensor[(72, 1), int64],) {
  @func_7785() /* ty=(Tensor[(72, 1), int64],) */
}

def @func_3787(%var_3745: Tensor[(14, 12, 12), int64], %var_3777: Tensor[(72, 2), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], float64, Tensor[(72, 2), float64]) {
  %886 = @func_1144() /* ty=Tensor[(14, 12, 12), int64] */;
  %887 = cast(%var_3745, dtype="uint16") /* ty=Tensor[(14, 12, 12), uint16] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint16") /* ty=Tensor[(14, 12, 12), uint16] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %891 = bitwise_or(%889, %890) /* ty=Tensor[(14, 12, 12), uint16] */;
  %892 = cast(%886, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%891, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %896 = @func_2831() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %897 = cast(%var_3777, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %898 = reshape(%897, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %899 = @func_820(%898) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %900 = minimum(%894, %895) /* ty=Tensor[(14, 12, 12), float64] */;
  %901 = %896.0;
  %902 = %899.2;
  (%900, %901, %902, %var_3777)
}

def @func_6668() -> (Tensor[(72, ?), uint32], Tensor[(14, 12, 12), int16]) {
  @func_6666() /* ty=(Tensor[(72, ?), uint32], Tensor[(14, 12, 12), int16]) */
}

def @func_8314() -> Tensor[(8, 16, 14), bool] {
  @func_8312() /* ty=Tensor[(8, 16, 14), bool] */
}

def @func_7539(%var_7527: Tensor[(648), int64]) -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(648), int64]) {
  %903 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
  %904 = cast(%var_7527, dtype="int64") /* ty=Tensor[(648), int64] */;
  %905 = reshape(%904, newshape=[72, 9]) /* ty=Tensor[(72, 9), int64] */;
  %906 = @func_6126(%905) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */;
  %907 = %903.0;
  %908 = %906.2;
  (%907, %908, %var_7527)
}

def @func_1089() -> (Tensor[(14, 12, 12), float64],) {
  %909 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %911 = atan(%910) /* ty=Tensor[(14, 12, 12), float64] */;
  (%911,)
}

def @func_2168() -> (Tensor[(14, 12, 12), float32],) {
  %914 = fn () -> (Tensor[(14, 12, 12), float32],) {
    %912 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %913 = %912.0;
    (%913,)
  };
  %914() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_1344() -> (Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) {
  @func_1342() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */
}

def @func_7342(%var_7341: Tensor[(15, 11, 1), float32]) -> (Tensor[(15, 11, 1), float32], Tensor[(14, 12, 12), int16], Tensor[(15, 11, 1), float32]) {
  %921 = fn (%var_7321: Tensor[(15, 11, 1), float32]) -> (Tensor[(15, 11, 1), float32], Tensor[(14, 12, 12), int16], Tensor[(15, 11, 1), float32]) {
    %915 = cast(%var_7321, dtype="float32") /* ty=Tensor[(15, 11, 1), float32] */;
    %916 = @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */;
    %917 = cast(%var_7321, dtype="float32") /* ty=Tensor[(15, 11, 1), float32] */;
    %918 = sin(%915) /* ty=Tensor[(15, 11, 1), float32] */;
    %919 = %916.1;
    %920 = log10(%917) /* ty=Tensor[(15, 11, 1), float32] */;
    (%918, %919, %920)
  };
  %921(%var_7341) /* ty=(Tensor[(15, 11, 1), float32], Tensor[(14, 12, 12), int16], Tensor[(15, 11, 1), float32]) */
}

def @func_822(%var_821: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
  %929 = fn (%var_809: Tensor[(144), float64]) -> (Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) {
    %922 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %923 = cast(-0.477325f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %924 = cast(%var_809, dtype="float64") /* ty=Tensor[(144), float64] */;
    %925 = reshape(%923, newshape=[]) /* ty=float64 */;
    %926 = reshape(%924, newshape=[12, 3, 4]) /* ty=Tensor[(12, 3, 4), float64] */;
    %927 = %922.0;
    %928 = @func_496(%925, %926) /* ty=Tensor[(12, 3, 4), float64] */;
    (%927, %928, -0.477325f64 /* ty=float64 */, %var_809)
  };
  %929(%var_821) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */
}

def @func_9326(%var_9325: Tensor[(14, 12, 12), float32]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
  %939 = fn (%var_9300: Tensor[(14, 12, 12), float32]) -> (Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) {
    %930 = @func_1234() /* ty=(Tensor[(48), uint64],) */;
    %931 = @func_2819() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(5, 130), int32], Tensor[(14, 12, 12), uint32], Tensor[(13, 5, 10), float32], Tensor[(14, 12, 12), float32]) */;
    %932 = %931.0;
    %933 = cast(%var_9300, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
    %935 = cast(%932, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %937 = %930.0;
    %938 = multiply(%935, %936) /* ty=Tensor[(14, 12, 12), float32] */;
    (%937, %938)
  };
  %939(%var_9325) /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */
}

def @func_1951() -> Tensor[(14, 12, 12), float32] {
  %941 = fn () -> Tensor[(14, 12, 12), float32] {
    %940 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %940.0
  };
  %941() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_2831() -> (Tensor[(14, 12, 12), float32],) {
  %942 = @func_2319() /* ty=(Tensor[(14, 12, 12), float32],) */;
  %943 = %942.0;
  (%943,)
}

def @func_4435(%var_4433: Tensor[(11, 2, 6), float64], %var_4434: Tensor[(11, 2, 6), float64]) -> Tensor[(11, 2, 6), float64] {
  %948 = fn (%var_4407: Tensor[(11, 2, 6), float64], %var_4408: Tensor[(11, 2, 6), float64]) -> Tensor[(11, 2, 6), float64] {
    %944 = cast(%var_4408, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
    %945 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %946 = cast(%var_4407, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
    %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%946, %947) /* ty=Tensor[(11, 2, 6), float64] */
  };
  %948(%var_4433, %var_4434) /* ty=Tensor[(11, 2, 6), float64] */
}

def @func_8629() -> (Tensor[(14, 12, 12), int64],) {
  %951 = fn () -> (Tensor[(14, 12, 12), int64],) {
    %949 = @func_2257() /* ty=(Tensor[(14, 12, 12), int64],) */;
    %950 = %949.0;
    (%950,)
  };
  %951() /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_4577() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) {
  %952 = @func_3184() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %953 = %952.0;
  %954 = @func_776() /* ty=Tensor[(14, 12, 12), int64] */;
  %955 = @func_3646() /* ty=Tensor[(14, 12, 12), float64] */;
  (%953, %954, %955)
}

def @func_7746() -> Tensor[(14, 12, 12), int16] {
  @func_7744() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_1091() -> (Tensor[(14, 12, 12), float64],) {
  @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */
}

def @func_6958(%var_6946: Tensor[(9, 7, 6), uint32], %var_6947: Tensor[(9, 7, 6), uint32]) -> (Tensor[(9, 7, 6), uint32],) {
  %956 = cast(%var_6947, dtype="uint32") /* ty=Tensor[(9, 7, 6), uint32] */;
  %957 = shape_of(%var_6946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%var_6946, dtype="uint32") /* ty=Tensor[(9, 7, 6), uint32] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %960 = minimum(%958, %959) /* ty=Tensor[(9, 7, 6), uint32] */;
  (%960,)
}

def @func_7599() -> (Tensor[(14, 12, 12), float32], Tensor[(72), int64], Tensor[(330), float64], Tensor[(14, 12, 12), float32], float64) {
  @func_7597() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(72), int64], Tensor[(330), float64], Tensor[(14, 12, 12), float32], float64) */
}

def @func_4611() -> Tensor[(14, 12, 12), int16] {
  @func_4609() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_9188() -> (Tensor[(48), uint64], Tensor[(14, 12, 12), uint32], Tensor[(1, 650), int32], Tensor[(4, 36), float64]) {
  @func_9186() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), uint32], Tensor[(1, 650), int32], Tensor[(4, 36), float64]) */
}

def @func_3553() -> Tensor[(14, 12, 12), float64] {
  %961 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %961.0
}

def @func_9712(%var_9710: Tensor[(5, 1, 2), int8]) -> (Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(5, 6, 2), int16]) {
  @func_9709(%var_9710) /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(5, 6, 2), int16]) */
}

def @func_1236() -> (Tensor[(48), uint64],) {
  @func_1234() /* ty=(Tensor[(48), uint64],) */
}

def @func_6159() -> (Tensor[(12, 6, 4), int8],) {
  %962 = @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */;
  %963 = %962.1;
  (%963,)
}

def @func_6739() -> Tensor[(14, 12, 12), int16] {
  @func_4609() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_9486(%var_9485: Tensor[(10, 5, 8), float64]) -> (Tensor[(10, 5, 8), float64],) {
  %966 = fn (%var_9474: Tensor[(10, 5, 8), float64]) -> (Tensor[(10, 5, 8), float64],) {
    %964 = cast(%var_9474, dtype="float64") /* ty=Tensor[(10, 5, 8), float64] */;
    %965 = atanh(%964) /* ty=Tensor[(10, 5, 8), float64] */;
    (%965,)
  };
  %966(%var_9485) /* ty=(Tensor[(10, 5, 8), float64],) */
}

def @func_6129(%var_6127: Tensor[(72, 9), int64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  @func_6126(%var_6127) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float64], Tensor[(72, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) */
}

def @func_4732() -> (Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) {
  @func_4730() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(12, 6, 4), int8]) */
}

def @func_6911() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32]) {
  %967 = @func_4499() /* ty=(Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float32]) */;
  %968 = @func_4952() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(168), float32]) */;
  %969 = %967.1;
  %970 = %968.0;
  (%969, %970)
}

def @func_2046() -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), float32]) {
  %971 = @func_1089() /* ty=(Tensor[(14, 12, 12), float64],) */;
  %972 = %971.0;
  %973 = cast(%972, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %974 = reshape(%973, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %975 = @func_453(%974) /* ty=Tensor[(14, 12, 12), uint32] */;
  %976 = @func_983() /* ty=Tensor[(14, 12, 12), float32] */;
  (%972, %975, %976)
}

def @func_5086(%var_5084: Tensor[(9, 16, 16), int8], %var_5085: Tensor[(9, 16, 16), int8]) -> Tensor[(9, 16, 16), bool] {
  %981 = fn (%var_5076: Tensor[(9, 16, 16), int8], %var_5077: Tensor[(9, 16, 16), int8]) -> Tensor[(9, 16, 16), bool] {
    %977 = cast(%var_5077, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
    %978 = shape_of(%var_5076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %979 = cast(%var_5076, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
    %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%979, %980) /* ty=Tensor[(9, 16, 16), bool] */
  };
  %981(%var_5084, %var_5085) /* ty=Tensor[(9, 16, 16), bool] */
}

def @func_8874() -> Tensor[(14, 12, 12), float32] {
  @func_5748() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_2293(%var_2292: Tensor[(14, 12, 12), uint32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), int16]) {
  %991 = fn (%var_2274: Tensor[(14, 12, 12), uint32]) -> (Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), int16]) {
    %982 = @func_1342() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
    %983 = %982.2;
    %984 = cast(%var_2274, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
    %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(3), int32] */;
    %986 = cast(%983, dtype="uint32") /* ty=Tensor[(14, 12, 12), uint32] */;
    %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %988 = @func_1710() /* ty=(Tensor[(14, 12, 12), int16],) */;
    %989 = left_shift(%986, %987) /* ty=Tensor[(14, 12, 12), uint32] */;
    %990 = %988.0;
    (%989, %990)
  };
  %991(%var_2292) /* ty=(Tensor[(14, 12, 12), uint32], Tensor[(14, 12, 12), int16]) */
}

def @func_4604() -> (Tensor[(14, 12, 12), int16],) {
  %992 = @func_2692() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int16]) */;
  %993 = %992.0;
  (%993,)
}

def @func_8876() -> Tensor[(14, 12, 12), float32] {
  @func_8874() /* ty=Tensor[(14, 12, 12), float32] */
}

def @func_543(%var_542: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int64],) {
  %1001 = fn (%var_534: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, 12, 12), int64],) {
    %994 = @func_204() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %995 = %994.0;
    %996 = cast(%var_534, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
    %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %998 = cast(%995, dtype="int64") /* ty=Tensor[(14, 12, 12), int64] */;
    %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1000 = add(%998, %999) /* ty=Tensor[(14, 12, 12), int64] */;
    (%1000,)
  };
  %1001(%var_542) /* ty=(Tensor[(14, 12, 12), int64],) */
}

def @func_8283() -> Tensor[(14, 12, 12), int16] {
  @func_8281() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_9104(%var_9102: Tensor[(3, 12, 11), uint16], %var_9103: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(14, 12, 12), float32]) {
  @func_9100(%var_9102, %var_9103) /* ty=(Tensor[(3, 12, 11), uint16], Tensor[(14, 12, 12), float32]) */
}

def @func_6249() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) {
  @func_6247() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) */
}

def @func_1368(%var_1366: Tensor[(48), uint64]) -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) {
  @func_1365(%var_1366) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 3), bool], Tensor[(48), uint64]) */
}

def @func_8533() -> (Tensor[(8, 16, 14), bool],) {
  %1004 = fn () -> (Tensor[(8, 16, 14), bool],) {
    %1002 = @func_5337() /* ty=(Tensor[(8, 16, 14), bool],) */;
    %1003 = %1002.0;
    (%1003,)
  };
  %1004() /* ty=(Tensor[(8, 16, 14), bool],) */
}

def @func_862() -> Tensor[(14, 12, 12), int16] {
  %1006 = fn () -> Tensor[(14, 12, 12), int16] {
    %1005 = @func_741() /* ty=(Tensor[(12, 6, 1), int64], Tensor[(72, 1), int64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), uint32]) */;
    %1005.2
  };
  %1006() /* ty=Tensor[(14, 12, 12), int16] */
}

def @func_8281() -> Tensor[(14, 12, 12), int16] {
  %1007 = @func_5579() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %1007.0
}

def @func_204() -> (Tensor[(14, 12, 12), float32],) {
  %1008 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %1009 = asinh(%1008) /* ty=Tensor[(14, 12, 12), float32] */;
  (%1009,)
}

def @func_1779() -> Tensor[(12, 6, 1), int64] {
  %1010 = @func_899() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(12, 6, 1), int64], int64, Tensor[(72), int64]) */;
  %1010.1
}

def @func_6247() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), float32], Tensor[(12, 3, 4), uint64]) {
  %1011 = @func_5030() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), uint32], Tensor[(168), float32]) */;
  %1012 = @func_5748() /* ty=Tensor[(14, 12, 12), float32] */;
  %1013 = cast(%1012, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %1014 = cast(-8.55335f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1015 = reshape(%1013, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float64] */;
  %1016 = reshape(%1014, newshape=[]) /* ty=float64 */;
  %1017 = @func_1517(%1015, %1016) /* ty=(Tensor[(14, 12, 12), float32], Tensor[(48), uint64], Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), bool], Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), int16], Tensor[(12, 3, 4), float64], float64, Tensor[(144), float64]) */;
  %1018 = %1017.6;
  %1019 = cast(%1018, dtype="bool") /* ty=Tensor[(12, 3, 4), bool] */;
  %1020 = cast(-8.55335f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %1021 = less_equal(%1019, %1020) /* ty=Tensor[(12, 3, 4), bool] */;
  %1022 = cast(%1021, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
  %1023 = exp(%1022) /* ty=Tensor[(12, 3, 4), float32] */;
  %1024 = cast(%1023, dtype="uint64") /* ty=Tensor[(12, 3, 4), uint64] */;
  %1025 = cast(-8.55335f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %1026 = %1011.0;
  %1027 = bitwise_or(%1024, %1025) /* ty=Tensor[(12, 3, 4), uint64] */;
  (%1012, %1026, %1027)
}

def @func_8930() -> (Tensor[(14, 12, 12), int64],) {
  %1028 = @func_4577() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64], Tensor[(14, 12, 12), float64]) */;
  %1029 = %1028.1;
  (%1029,)
}

def @func_2098() -> (Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) {
  @func_2096() /* ty=(Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int16]) */
}

def @func_3184() -> (Tensor[(14, 12, 12), int16],) {
  %1030 = @func_1714() /* ty=(Tensor[(14, 12, 12), int16],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_8784() -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64]) {
  %1035 = fn () -> (Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64]) {
    %1032 = @func_5887() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), float32], Tensor[(14, 12, 12), int64], Tensor[(48), uint64]) */;
    %1033 = @func_7744() /* ty=Tensor[(14, 12, 12), int16] */;
    %1034 = %1032.2;
    (%1033, %1034)
  };
  %1035() /* ty=(Tensor[(14, 12, 12), int16], Tensor[(14, 12, 12), int64]) */
}

def @func_68(%var_60: Tensor[(8, 2, 3), uint64], %var_61: Tensor[(8, 2, 3), uint64]) -> Tensor[(8, 2, 3), bool] {
  %1036 = cast(%var_61, dtype="bool") /* ty=Tensor[(8, 2, 3), bool] */;
  %1037 = shape_of(%var_60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1038 = cast(%var_60, dtype="bool") /* ty=Tensor[(8, 2, 3), bool] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%1038, %1039) /* ty=Tensor[(8, 2, 3), bool] */
}

def @func_1661() -> (Tensor[(14, 12, 12), float32],) {
  %1040 = @func_1291() /* ty=(Tensor[(48), uint64], Tensor[(14, 12, 12), float32]) */;
  %1041 = %1040.1;
  (%1041,)
}

def @func_1840(%var_1838: Tensor[(2, 11, 14), float64]) -> (Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) {
  @func_1837(%var_1838) /* ty=(Tensor[(2, 11, 14), float64], Tensor[(14, 12, 12), int16]) */
}

def @func_9414() -> (Tensor[(14, 12, 12), float32],) {
  %1044 = fn () -> (Tensor[(14, 12, 12), float32],) {
    %1042 = @func_1071() /* ty=(Tensor[(14, 12, 12), float32],) */;
    %1043 = %1042.0;
    (%1043,)
  };
  %1044() /* ty=(Tensor[(14, 12, 12), float32],) */
}

def @func_9724() -> (Tensor[(12, 6, 4), int8],) {
  @func_9722() /* ty=(Tensor[(12, 6, 4), int8],) */
}

def @func_2463() -> Tensor[(14, 12, 12), int16] {
  @func_2461() /* ty=Tensor[(14, 12, 12), int16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen507/build/output.py:3390: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen507/build/output.py", line 3395, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(336) tvmgen_default_fused_reshape_multiply_kernel0(short* __restrict__ T_multiply, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

