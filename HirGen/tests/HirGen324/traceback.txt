==========mod==========
#[version = "0.0.5"]
def @func_10243() -> Tensor[(3, 7, 8), float32] {
  @func_3146() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7551(%var_7529: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), bool], Tensor[(1050, 1), float32], Tensor[(3, 7, 8), bool]) {
  %0 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %3 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %4 = cast(%var_7529, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %5 = reshape(%4, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %6 = @func_4422(%5) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %7 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %8 = exp(%2) /* ty=Tensor[(3, 7, 8), float32] */;
  %9 = %3.0;
  %10 = %6.3;
  %11 = %7.3;
  (%8, %9, %10, %var_7529, %11)
}

def @func_7186() -> Tensor[(3, 7, 8), float32] {
  @func_2182() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_3281(%var_3163: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) {
  %12 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %13 = %12.0;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %18 = cast(%var_3163, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %19 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 7, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %22 = divide(%20, %21) /* ty=Tensor[(3, 7, 8), float32] */;
  %23 = cast(%22, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %24 = reshape(%23, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
  %25 = @func_2899(%24) /* ty=(Tensor[(3, 7, 8), float32],) */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %29 = reshape(%26, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %30 = reshape(%27, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %31 = reshape(%28, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %32 = @func_1956(%29, %30, %31) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %34 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %35 = reshape(%33, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %36 = reshape(%34, newshape=[]) /* ty=uint32 */;
  %37 = @func_1446(%35, %36) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %39 = reshape(%38, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), float64] */;
  %40 = floor_divide(%16, %17) /* ty=Tensor[(3, 7, 8), float64] */;
  %41 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  %42 = %25.0;
  %43 = %32.2;
  %44 = %37.2;
  %45 = @func_3043(%39) /* ty=Tensor[(3, 7, 8), int16] */;
  (%40, %22, %41, %42, %43, meta[relay.Constant][1] /* ty=Tensor[(550), float64] */, meta[relay.Constant][2] /* ty=Tensor[(14, 5), float32] */, meta[relay.Constant][3] /* ty=Tensor[(1050), float32] */, %44, meta[relay.Constant][4] /* ty=Tensor[(504), float32] */, meta[relay.Constant][5] /* ty=uint32 */, %45)
}

def @func_8203() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  %46 = @func_7260() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) */;
  %47 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %48 = %46.1;
  (%47, %48)
}

def @func_6742(%var_6738: Tensor[(13, 8, 14), int16]) -> (Tensor[(13, 8, 14), int16],) {
  %49 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(13, 8, 1), int16] */;
  %50 = cast(%var_6738, dtype="int16") /* ty=Tensor[(13, 8, 14), int16] */;
  %51 = subtract(%49, %50) /* ty=Tensor[(13, 8, 14), int16] */;
  (%51,)
}

def @func_10196() -> Tensor[(3, 7, 8), float32] {
  %52 = @func_5829() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %52.0
}

def @func_5073(%var_5069: uint16, %var_5070: Tensor[(320), uint16]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
  %53 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %54 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %55 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %56 = cast(%var_5069, dtype="uint16") /* ty=uint16 */;
  %57 = cast(%var_5070, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %58 = reshape(%56, newshape=[]) /* ty=uint16 */;
  %59 = reshape(%57, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %60 = @func_707(%58, %59) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %61 = %53.0;
  %62 = %54.0;
  %63 = %55.0;
  %64 = %60.0;
  (%61, %62, %63, %64, %var_5069, %var_5070)
}

def @func_488(%var_473: uint32, %var_474: Tensor[(4, 9, 1), uint32]) -> (Tensor[(4, 9, 1), bool],) {
  %65 = cast(%var_473, dtype="bool") /* ty=bool */;
  %66 = cast(%var_474, dtype="bool") /* ty=Tensor[(4, 9, 1), bool] */;
  %67 = equal(%65, %66) /* ty=Tensor[(4, 9, 1), bool] */;
  (%67,)
}

def @func_6941(%var_6881: Tensor[(4, 14, 3), int16], %var_6901: Tensor[(10, 6, 12), uint8], %var_6921: Tensor[(4, 14, 3), int16]) -> (Tensor[(4, 14, 3), int16], Tensor[(9, ?, 12), int64], Tensor[(10, 6, 12), float32], Tensor[(13, 13, 5), float64], Tensor[(3, 7, 8), bool], Tensor[(4, 14, 3), float64], Tensor[(4, 14, 3), float32]) {
  %68 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 14, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 14, 3), int16] */;
  %69 = shape_of(%var_6881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_6881, dtype="int16") /* ty=Tensor[(4, 14, 3), int16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %72 = cast(meta[relay.Constant][8] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %73 = reshape(%72, newshape=[]) /* ty=uint8 */;
  %74 = @func_104(%73) /* ty=(Tensor[(9, ?, 12), int64],) */;
  %75 = cast(meta[relay.Constant][8] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
  %76 = cast(%var_6901, dtype="float32") /* ty=Tensor[(10, 6, 12), float32] */;
  %77 = @func_4152() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %78 = cast(%var_6921, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  %79 = shape_of(%var_6881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_6881, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 14, 3), int16] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %83 = acos(%82) /* ty=Tensor[(4, 14, 3), float32] */;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %85 = bitwise_or(%70, %71) /* ty=Tensor[(4, 14, 3), int16] */;
  %86 = %74.0;
  %87 = floor_mod(%75, %76) /* ty=Tensor[(10, 6, 12), float32] */;
  %88 = @func_4681() /* ty=Tensor[(13, 13, 5), float64] */;
  %89 = %77.1;
  %90 = divide(%80, %81) /* ty=Tensor[(4, 14, 3), float64] */;
  %91 = exp(%84) /* ty=Tensor[(4, 14, 3), float32] */;
  (%85, %86, %87, %88, %89, %90, %91)
}

def @func_2674() -> (Tensor[(3, 7, 8), float32],) {
  %92 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  (%92,)
}

def @func_3941() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %93 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %94 = @func_3664() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %95 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
  %96 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  %97 = %93.0;
  %98 = %94.0;
  (%95, %96, %97, %98)
}

def @func_5745() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %99 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %100 = %99.0;
  %101 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  (%100, %101)
}

def @func_9287(%var_9282: Tensor[(15, 9, 11), int16]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64]) {
  %102 = @func_8164() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) */;
  %103 = %102.1;
  %104 = cast(%var_9282, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %108 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  %109 = divide(%106, %107) /* ty=Tensor[(15, 9, 11), float64] */;
  (%108, %109)
}

def @func_3719() -> Tensor[(3, 7, 8), float32] {
  @func_2573() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_4515(%var_4481: Tensor[(1050), float32], %var_4510: Tensor[(1, 550), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1050), float32], Tensor[(2, 5, 13), bool], Tensor[(1485, 70), bool], Tensor[(1, 550), float64], Tensor[(7, 10), float32]) {
  %110 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %111 = cast(%var_4481, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %112 = reshape(%111, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %113 = @func_4422(%112) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %114 = %110.0;
  %115 = cast(%114, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %116 = reshape(%115, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
  %117 = @func_2344(%116) /* ty=(Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) */;
  %118 = cast(%var_4510, dtype="float64") /* ty=Tensor[(1, 550), float64] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %120 = reshape(%118, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %121 = reshape(%119, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
  %122 = @func_3374(%120, %121) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
  %123 = %113.4;
  %124 = %117.0;
  %125 = %122.7;
  (%114, %123, %var_4481, %124, %125, %var_4510, meta[relay.Constant][9] /* ty=Tensor[(7, 10), float32] */)
}

def @func_9239(%var_9192: Tensor[(70), float32], %var_9193: Tensor[(35, 10), uint16], %var_9212: Tensor[(35, 10), uint16]) -> (Tensor[(3, 7, 8), bool], Tensor[(10, 105), bool], Tensor[(550, 1), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float64], Tensor[(35, 10), uint64]) {
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(550, 1), float64] */, dtype="float64") /* ty=Tensor[(550, 1), float64] */;
  %127 = cast(%var_9192, dtype="float32") /* ty=Tensor[(70), float32] */;
  %128 = cast(%var_9193, dtype="uint16") /* ty=Tensor[(35, 10), uint16] */;
  %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(550, 1), float64] */, dtype="float64") /* ty=Tensor[(550, 1), float64] */;
  %130 = reshape(%126, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %131 = reshape(%127, newshape=[7, 10]) /* ty=Tensor[(7, 10), float32] */;
  %132 = reshape(%128, newshape=[350]) /* ty=Tensor[(350), uint16] */;
  %133 = reshape(%129, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %134 = @func_5344(%130, %131, %132, %133) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) */;
  %135 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %136 = cast(%var_9212, dtype="uint64") /* ty=Tensor[(35, 10), uint64] */;
  %137 = shape_of(%var_9193, dtype="int32") /* ty=Tensor[(2), int32] */;
  %138 = cast(%var_9193, dtype="uint64") /* ty=Tensor[(35, 10), uint64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %140 = @func_9083() /* ty=Tensor[(3, 7, 8), bool] */;
  %141 = %134.2;
  %142 = %135.0;
  %143 = bitwise_and(%138, %139) /* ty=Tensor[(35, 10), uint64] */;
  (%140, %141, meta[relay.Constant][10] /* ty=Tensor[(550, 1), float64] */, %var_9192, %142, %143)
}

def @func_734(%var_718: Tensor[(3, 4, 13), float64]) -> (Tensor[(3, 4, 13), float64],) {
  %144 = cast(%var_718, dtype="float64") /* ty=Tensor[(3, 4, 13), float64] */;
  %145 = rsqrt(%144) /* ty=Tensor[(3, 4, 13), float64] */;
  (%145,)
}

def @func_1800() -> (Tensor[(3, 7, 8), bool],) {
  %146 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %147 = %146.0;
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = greater_equal(%150, %151) /* ty=Tensor[(3, 7, 8), bool] */;
  (%152,)
}

def @func_1721(%var_1698: Tensor[(1, 7, 10), float32], %var_1699: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), float32] {
  %153 = cast(%var_1698, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %154 = cast(%var_1699, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  power(%153, %154) /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_9051(%var_9044: uint16) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16], Tensor[(3, 7, 8), bool]) {
  %155 = cast(%var_9044, dtype="uint16") /* ty=uint16 */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %157 = reshape(%155, newshape=[]) /* ty=uint16 */;
  %158 = reshape(%156, newshape=[320]) /* ty=Tensor[(320), uint16] */;
  %159 = @func_5073(%157, %158) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */;
  %160 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %161 = @func_5022() /* ty=Tensor[(3, 7, 8), bool] */;
  %162 = %159.3;
  %163 = %160.0;
  (%161, %162, %var_9044, meta[relay.Constant][12] /* ty=Tensor[(320), uint16] */, %163)
}

def @func_2557() -> (Tensor[(3, 7, 8), float32],) {
  %164 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  (%164,)
}

def @func_8026(%var_8023: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(60), bool], Tensor[(2, 5, 13), bool], Tensor[(130), uint32]) {
  %165 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %166 = @func_5622() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %168 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %169 = reshape(%167, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), bool] */;
  %170 = reshape(%168, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), bool] */;
  %171 = @func_6350(%169, %170) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) */;
  %172 = cast(%var_8023, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %173 = cast(%var_8023, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %174 = reshape(%172, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %175 = reshape(%173, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %176 = %165.1;
  %177 = %166.0;
  %178 = %171.1;
  %179 = @func_1379(%174, %175) /* ty=Tensor[(2, 5, 13), bool] */;
  (%176, %177, %178, meta[relay.Constant][13] /* ty=Tensor[(60), bool] */, %179, %var_8023)
}

def @func_8841() -> Tensor[(10, 8, 15), float64] {
  %180 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 15), float64] */;
  cos(%180) /* ty=Tensor[(10, 8, 15), float64] */
}

def @func_7494(%var_7471: Tensor[(11, 16, 16), int64]) -> Tensor[(11, 16, 16), bool] {
  %181 = cast(%var_7471, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %182 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %185 = add(%183, %184) /* ty=Tensor[(11, 16, 16), int64] */;
  %186 = cast(%var_7471, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%188, %189) /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_9523() -> Tensor[(3, 7, 8), float32] {
  @func_8085() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_3406(%var_3394: Tensor[(70), float32], %var_3395: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(5, 10, 11), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(1050, 1), float32]) {
  %190 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %191 = cast(meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %192 = cast(%var_3394, dtype="float32") /* ty=Tensor[(70), float32] */;
  %193 = cast(%var_3395, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %194 = reshape(%191, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %195 = reshape(%192, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %196 = reshape(%193, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %197 = @func_1956(%194, %195, %196) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %198 = %190.0;
  %199 = %197.3;
  (%198, %199, meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, %var_3394, %var_3395)
}

def @func_3102() -> Tensor[(3, 7, 8), bool] {
  %200 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %200.0
}

def @func_7260() -> (Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) {
  %201 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %202 = %201.0;
  %203 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  (%202, %203)
}

def @func_3907() -> Tensor[(3, 7, 8), float32] {
  %204 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %204.0
}

def @func_10165() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %205 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
  %206 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  (%205, %206)
}

def @func_9705(%var_9643: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %207 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %208 = cast(%var_9643, dtype="uint32") /* ty=uint32 */;
  %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %210 = reshape(%208, newshape=[]) /* ty=uint32 */;
  %211 = reshape(%209, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %212 = @func_488(%210, %211) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %213 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %214 = @func_7821() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %215 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %216 = %207.1;
  %217 = %212.0;
  %218 = %213.4;
  %219 = %214.1;
  %220 = @func_3719() /* ty=Tensor[(3, 7, 8), float32] */;
  %221 = %215.0;
  (%216, %217, %var_9643, meta[relay.Constant][17] /* ty=Tensor[(36), uint32] */, %218, %219, %220, %221)
}

def @func_1956(%var_1936: Tensor[(5, 10, 11), float64], %var_1940: Tensor[(70), float32], %var_1941: Tensor[(1050), float32]) -> (Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) {
  %222 = cast(%var_1940, dtype="float32") /* ty=Tensor[(70), float32] */;
  %223 = cast(%var_1941, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %224 = reshape(%222, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), float32] */;
  %225 = reshape(%223, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float32] */;
  %226 = @func_1721(%224, %225) /* ty=Tensor[(15, 7, 10), float32] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %228 = cast(%var_1936, dtype="float64") /* ty=Tensor[(5, 10, 11), float64] */;
  %229 = sin(%228) /* ty=Tensor[(5, 10, 11), float64] */;
  %230 = cast(%var_1936, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = sin(%227) /* ty=Tensor[(15, 7, 10), float32] */;
  %235 = less(%232, %233) /* ty=Tensor[(5, 10, 11), bool] */;
  (%var_1940, %var_1941, %234, %235)
}

def @func_4945() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) {
  %236 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %237 = @func_4917() /* ty=(Tensor[(11, 2, 4), float32],) */;
  %238 = @func_4681() /* ty=Tensor[(13, 13, 5), float64] */;
  %239 = %236.1;
  %240 = %237.0;
  (%238, %239, %240)
}

def @func_5554() -> (Tensor[(3, 7, 8), float32],) {
  %241 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %242 = %241.0;
  (%242,)
}

def @func_2519() -> Tensor[(3, 7, 8), bool] {
  %243 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %243.1
}

def @func_4083(%var_4066: Tensor[(2, 252), float32], %var_4067: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(9, 14, 4), uint16], Tensor[(2, 252), float32], uint32) {
  %244 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %245 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %246 = cast(%var_4066, dtype="float32") /* ty=Tensor[(2, 252), float32] */;
  %247 = cast(%var_4067, dtype="uint32") /* ty=uint32 */;
  %248 = reshape(%246, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %249 = reshape(%247, newshape=[]) /* ty=uint32 */;
  %250 = @func_1446(%248, %249) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %251 = %244.2;
  %252 = %245.0;
  %253 = %250.0;
  (%251, %252, %253, %var_4066, %var_4067)
}

def @func_1930() -> (Tensor[(3, 7, 8), bool],) {
  %254 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %255 = %254.0;
  (%255,)
}

def @func_6350(%var_6338: Tensor[(5, 2, 6), bool], %var_6345: Tensor[(5, 2, 6), bool]) -> (Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) {
  %256 = @func_5272() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %257 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %258 = cos(%257) /* ty=Tensor[(5, 2, 6), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %260 = acos(%259) /* ty=Tensor[(5, 2, 6), float32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = not_equal(%263, %264) /* ty=Tensor[(5, 2, 6), bool] */;
  %266 = cast(%var_6338, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = cast(%var_6345, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %271 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%265, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = %256.0;
  %275 = less_equal(%268, %269) /* ty=Tensor[(5, 2, 6), bool] */;
  %276 = logical_and(%272, %273) /* ty=Tensor[(5, 2, 6), bool] */;
  (%274, %275, %276)
}

def @func_4152() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %277 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %278 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %279 = %277.0;
  %280 = %278.1;
  (%279, %280)
}

def @func_6662(%var_6651: Tensor[(6, 28), bool]) -> (Tensor[(8, 8, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(6, 28), bool], Tensor[(3, 7, 8), float32]) {
  %281 = @func_5501() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */;
  %282 = cast(%var_6651, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %283 = reshape(%282, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
  %284 = @func_2899(%283) /* ty=(Tensor[(3, 7, 8), float32],) */;
  %285 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %286 = %281.2;
  %287 = %284.0;
  %288 = %285.0;
  (%286, %287, %var_6651, %288)
}

def @func_6878() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  %289 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %290 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %291 = %289.0;
  %292 = @func_5886() /* ty=Tensor[(3, 7, 8), float64] */;
  %293 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %294 = %290.0;
  (%291, %292, %293, %294)
}

def @func_8931() -> Tensor[(3, 7, 8), float32] {
  %295 = @func_8759() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %295.0
}

def @func_6433(%var_6431: Tensor[(150), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  %296 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %297 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %300 = cast(%var_6431, dtype="float64") /* ty=Tensor[(150), float64] */;
  %301 = reshape(%300, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float64] */;
  %302 = bitwise_or(%298, %299) /* ty=Tensor[(10, 8, 9), uint32] */;
  %303 = @func_1177(%301) /* ty=Tensor[(15, 5, 2), float64] */;
  (%302, %303, %var_6431)
}

def @func_2265(%var_2201: uint8) -> (Tensor[(9, ?, 12), int64], Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), int64]) {
  %304 = cast(%var_2201, dtype="uint8") /* ty=uint8 */;
  %305 = reshape(%304, newshape=[]) /* ty=uint8 */;
  %306 = @func_104(%305) /* ty=(Tensor[(9, ?, 12), int64],) */;
  %307 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %309 = asin(%308) /* ty=Tensor[(3, 7, 8), float64] */;
  %310 = cast(%309, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
  %311 = cast(%var_2201, dtype="uint64") /* ty=uint64 */;
  %312 = cast(%307, dtype="int64") /* ty=Tensor[(3, 7, 8), int64] */;
  %313 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%309, dtype="int64") /* ty=Tensor[(3, 7, 8), int64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %316 = %306.0;
  %317 = bitwise_xor(%310, %311) /* ty=Tensor[(3, 7, 8), uint64] */;
  %318 = left_shift(%314, %315) /* ty=Tensor[(3, 7, 8), int64] */;
  (%316, %317, %318)
}

def @func_4821() -> (Tensor[(3, 7, 8), bool],) {
  %319 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %320 = %319.0;
  (%320,)
}

def @func_4807() -> (Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %321 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %322 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %323 = %321.0;
  %324 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %325 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %326 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %327 = %322.1;
  (%323, %324, %325, %326, %327)
}

def @func_707(%var_697: uint16, %var_698: Tensor[(8, 8, 5), uint16]) -> (Tensor[(8, 8, 5), bool],) {
  %328 = cast(%var_697, dtype="bool") /* ty=bool */;
  %329 = cast(%var_698, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %330 = less_equal(%328, %329) /* ty=Tensor[(8, 8, 5), bool] */;
  (%330,)
}

def @func_3043(%var_3027: Tensor[(3, 7, 8), float64]) -> Tensor[(3, 7, 8), int16] {
  %331 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %332 = %331.0;
  %333 = cast(%var_3027, dtype="int16") /* ty=Tensor[(3, 7, 8), int16] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="int16") /* ty=Tensor[(3, 7, 8), int16] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%335, %336) /* ty=Tensor[(3, 7, 8), int16] */
}

def @func_9172() -> (Tensor[(3, 7, 8), bool],) {
  %337 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %338 = %337.0;
  (%338,)
}

def @func_6282() -> (Tensor[(3, 7, 8), bool],) {
  %339 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %340 = %339.1;
  (%340,)
}

def @func_2419(%var_2386: Tensor[(2, 8, 2), float64], %var_2387: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float32],) {
  %341 = cast(%var_2387, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %342 = shape_of(%var_2386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_2386, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %345 = add(%343, %344) /* ty=Tensor[(2, 8, 2), float64] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
  %347 = cosh(%346) /* ty=Tensor[(2, 8, 2), float32] */;
  %348 = cast(%var_2386, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %352 = power(%350, %351) /* ty=Tensor[(2, 8, 2), float32] */;
  (%352,)
}

def @func_2344(%var_2324: Tensor[(3, 7, 8), bool]) -> (Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) {
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 1), uint32] */, dtype="uint32") /* ty=Tensor[(130, 1), uint32] */;
  %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 1), uint32] */, dtype="uint32") /* ty=Tensor[(130, 1), uint32] */;
  %355 = reshape(%353, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %356 = reshape(%354, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %357 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 1), uint32] */, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
  %358 = cos(%357) /* ty=Tensor[(130, 1), float32] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %360 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %361 = %360.0;
  %362 = cast(%var_2324, dtype="uint16") /* ty=Tensor[(3, 7, 8), uint16] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="uint16") /* ty=Tensor[(3, 7, 8), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %366 = @func_1379(%355, %356) /* ty=Tensor[(2, 5, 13), bool] */;
  %367 = asinh(%359) /* ty=Tensor[(130, 1), float64] */;
  %368 = subtract(%364, %365) /* ty=Tensor[(3, 7, 8), uint16] */;
  (%366, %367, %368)
}

def @func_1772() -> (Tensor[(3, 7, 8), float32],) {
  %369 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %370 = cos(%369) /* ty=Tensor[(3, 7, 8), float32] */;
  (%370,)
}

def @main(%var_10250: Tensor[(11, 2, 4), float32]) -> (Tensor[(11, 2, 4), bool],) {
  %371 = @func_4917() /* ty=(Tensor[(11, 2, 4), float32],) */;
  %372 = %371.0;
  %373 = cast(%var_10250, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = greater(%375, %376) /* ty=Tensor[(11, 2, 4), bool] */;
  (%377,)
}

def @func_1177(%var_1169: Tensor[(15, 5, 2), float64]) -> Tensor[(15, 5, 2), float64] {
  %378 = cast(%var_1169, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  acosh(%378) /* ty=Tensor[(15, 5, 2), float64] */
}

def @func_6131() -> (Tensor[(3, 7, 8), float32],) {
  %379 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
  (%379,)
}

def @func_3374(%var_3334: Tensor[(550), float64], %var_3335: Tensor[(1, 70), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) {
  %380 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %381 = cast(%var_3334, dtype="float64") /* ty=Tensor[(550), float64] */;
  %382 = cast(%var_3335, dtype="float32") /* ty=Tensor[(1, 70), float32] */;
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %384 = reshape(%381, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %385 = reshape(%382, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %386 = reshape(%383, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %387 = @func_1956(%384, %385, %386) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %388 = cast(meta[relay.Constant][24] /* ty=Tensor[(1485, 1), int16] */, dtype="int16") /* ty=Tensor[(1485, 1), int16] */;
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(1485, 1), int16] */, dtype="int16") /* ty=Tensor[(1485, 1), int16] */;
  %390 = reshape(%388, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %391 = reshape(%389, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %392 = @func_1651(%390, %391) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
  %393 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %394 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %395 = cast(meta[relay.Constant][24] /* ty=Tensor[(1485, 1), int16] */, dtype="bool") /* ty=Tensor[(1485, 1), bool] */;
  %396 = cast(%var_3335, dtype="bool") /* ty=Tensor[(1, 70), bool] */;
  %397 = %380.0;
  %398 = %387.2;
  %399 = %392.1;
  %400 = %393.0;
  %401 = %394.1;
  %402 = logical_or(%395, %396) /* ty=Tensor[(1485, 70), bool] */;
  (%397, %398, %var_3334, meta[relay.Constant][23] /* ty=Tensor[(1050), float32] */, %399, %400, %401, %402)
}

def @func_8085() -> Tensor[(3, 7, 8), float32] {
  @func_3907() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_4569(%var_4538: Tensor[(14, 5, 1), uint16], %var_4539: Tensor[(14, 5, 1), uint16], %var_4546: uint32, %var_4548: Tensor[(14, 5, 5), uint16]) -> (Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) {
  %403 = cast(%var_4539, dtype="uint16") /* ty=Tensor[(14, 5, 1), uint16] */;
  %404 = shape_of(%var_4538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%var_4538, dtype="uint16") /* ty=Tensor[(14, 5, 1), uint16] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %407 = cast(meta[relay.Constant][25] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %408 = cast(%var_4546, dtype="uint32") /* ty=uint32 */;
  %409 = reshape(%407, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %410 = reshape(%408, newshape=[]) /* ty=uint32 */;
  %411 = @func_1446(%409, %410) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %412 = cast(%var_4538, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
  %413 = cast(%var_4548, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %414 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %415 = %411.2;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(4, 32), float32] */;
  %417 = cast(%var_4546, dtype="uint32") /* ty=uint32 */;
  %418 = reshape(%416, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %419 = reshape(%417, newshape=[]) /* ty=uint32 */;
  %420 = @func_1131(%418, %419) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %421 = logical_xor(%405, %406) /* ty=Tensor[(14, 5, ?), uint16] */;
  %422 = equal(%412, %413) /* ty=Tensor[(14, 5, 5), bool] */;
  %423 = %414.0;
  %424 = %420.3;
  (%421, %415, meta[relay.Constant][25] /* ty=Tensor[(504), float32] */, %var_4546, %422, %423, %424)
}

def @func_1446(%var_1424: Tensor[(9, 14, 4), float32], %var_1444: uint32) -> (Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) {
  %425 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %426 = shape_of(%var_1424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_1424, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %429 = subtract(%427, %428) /* ty=Tensor[(9, 14, 4), float32] */;
  %430 = cast(%429, dtype="uint16") /* ty=Tensor[(9, 14, 4), uint16] */;
  %431 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(9, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 14, 4), float32] */, dtype="uint16") /* ty=Tensor[(9, 14, 4), uint16] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %434 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 32), float32] */, dtype="float32") /* ty=Tensor[(4, 32), float32] */;
  %435 = cast(%var_1444, dtype="uint32") /* ty=uint32 */;
  %436 = reshape(%434, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %437 = reshape(%435, newshape=[]) /* ty=uint32 */;
  %438 = @func_1131(%436, %437) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %439 = bitwise_xor(%432, %433) /* ty=Tensor[(9, 14, 4), uint16] */;
  %440 = %438.3;
  (%439, %440, meta[relay.Constant][27] /* ty=Tensor[(4, 32), float32] */, %var_1444)
}

def @func_3146() -> Tensor[(3, 7, 8), float32] {
  @func_2637() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_9083() -> Tensor[(3, 7, 8), bool] {
  @func_6677() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_4681() -> Tensor[(13, 13, 5), float64] {
  %441 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  log(%441) /* ty=Tensor[(13, 13, 5), float64] */
}

def @func_4033() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %442 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %443 = %442.0;
  %444 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  %445 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
  (%443, %444, %445)
}

def @func_1651(%var_1634: Tensor[(15, 9, 11), int16], %var_1635: Tensor[(15, 9, 11), int16]) -> (Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) {
  %446 = cast(%var_1635, dtype="int16") /* ty=Tensor[(15, 9, 11), int16] */;
  %447 = shape_of(%var_1634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_1634, dtype="int16") /* ty=Tensor[(15, 9, 11), int16] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %450 = cast(%var_1635, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %451 = add(%448, %449) /* ty=Tensor[(15, 9, 11), int16] */;
  %452 = acosh(%450) /* ty=Tensor[(15, 9, 11), float64] */;
  (%451, %452)
}

def @func_5344(%var_5292: Tensor[(550), float64], %var_5293: Tensor[(7, 10), float32], %var_5338: Tensor[(350), uint16], %var_5340: Tensor[(550), float64]) -> (Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) {
  %453 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %454 = cast(%var_5292, dtype="float64") /* ty=Tensor[(550), float64] */;
  %455 = cast(%var_5293, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %456 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %457 = reshape(%454, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %458 = reshape(%455, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %459 = reshape(%456, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %460 = @func_1956(%457, %458, %459) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %461 = %460.1;
  %462 = cast(%461, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %463 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 105), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 105), float32] */, dtype="bool") /* ty=Tensor[(10, 105), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %466 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %467 = cast(%var_5293, dtype="uint16") /* ty=Tensor[(7, 10), uint16] */;
  %468 = cast(%var_5293, dtype="uint16") /* ty=Tensor[(7, 10), uint16] */;
  %469 = cast(meta[relay.Constant][30] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %470 = cast(%var_5338, dtype="uint16") /* ty=Tensor[(350), uint16] */;
  %471 = reshape(%467, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), uint16] */;
  %472 = reshape(%468, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), uint16] */;
  %473 = reshape(%469, newshape=[]) /* ty=uint32 */;
  %474 = reshape(%470, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint16] */;
  %475 = @func_4569(%471, %472, %473, %474) /* ty=(Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) */;
  %476 = cast(%var_5340, dtype="bool") /* ty=Tensor[(550), bool] */;
  %477 = shape_of(%var_5292, dtype="int32") /* ty=Tensor[(1), int32] */;
  %478 = cast(%var_5292, dtype="bool") /* ty=Tensor[(550), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?), bool] */;
  %480 = %453.0;
  %481 = less(%464, %465) /* ty=Tensor[(10, 105), bool] */;
  %482 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
  %483 = %466.1;
  %484 = %475.4;
  %485 = greater_equal(%478, %479) /* ty=Tensor[(550), bool] */;
  (%480, %var_5293, %481, %482, %483, %484, meta[relay.Constant][30] /* ty=uint32 */, %var_5338, %485)
}

def @func_3490() -> (Tensor[(3, 7, 8), bool],) {
  %486 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %487 = %486.0;
  (%487,)
}

def @func_7599() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %488 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  %489 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
  %490 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  (%488, %489, %490)
}

def @func_1604(%var_1599: Tensor[(1, 16), int64]) -> Tensor[(?, 16), bool] {
  %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 16), int64] */, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %492 = shape_of(%var_1599, dtype="int32") /* ty=Tensor[(2), int32] */;
  %493 = cast(%var_1599, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  equal(%493, %494) /* ty=Tensor[(?, 16), bool] */
}

def @func_7438() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %495 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
  %496 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  (%495, %496)
}

def @func_5118() -> (Tensor[(3, 7, 8), float64],) {
  %497 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  (%497,)
}

def @func_7821() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %498 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %499 = %498.1;
  %500 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  (%499, %500)
}

def @func_2118(%var_2025: Tensor[(1, 1, 16), int8], %var_2033: uint8, %var_2051: Tensor[(128), float32], %var_2081: Tensor[(15, 99), int16], %var_2086: Tensor[(70, 1), float32], %var_2103: Tensor[(3, 2, 16), int8]) -> (Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) {
  %501 = cast(%var_2025, dtype="int8") /* ty=Tensor[(1, 1, 16), int8] */;
  %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 5, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 5, 16), int8] */;
  %503 = cast(%var_2033, dtype="uint8") /* ty=uint8 */;
  %504 = reshape(%503, newshape=[]) /* ty=uint8 */;
  %505 = @func_104(%504) /* ty=(Tensor[(9, ?, 12), int64],) */;
  %506 = cast(%var_2051, dtype="float32") /* ty=Tensor[(128), float32] */;
  %507 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
  %508 = reshape(%506, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %509 = reshape(%507, newshape=[]) /* ty=uint32 */;
  %510 = @func_1131(%508, %509) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %511 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %513 = reshape(%511, newshape=[]) /* ty=uint32 */;
  %514 = reshape(%512, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %515 = @func_488(%513, %514) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %516 = cast(%var_2081, dtype="int16") /* ty=Tensor[(15, 99), int16] */;
  %517 = cast(%var_2081, dtype="int16") /* ty=Tensor[(15, 99), int16] */;
  %518 = reshape(%516, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %519 = reshape(%517, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %520 = @func_1651(%518, %519) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
  %521 = cast(meta[relay.Constant][34] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %522 = cast(%var_2086, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %524 = reshape(%521, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %525 = reshape(%522, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %526 = reshape(%523, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %527 = @func_1956(%524, %525, %526) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %528 = cast(%var_2025, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
  %529 = cast(%var_2103, dtype="int32") /* ty=Tensor[(3, 2, 16), int32] */;
  %530 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %531 = %530.0;
  %532 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %535 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%531, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = %510.3;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
  %540 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
  %541 = reshape(%539, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %542 = reshape(%540, newshape=[]) /* ty=uint32 */;
  %543 = @func_1131(%541, %542) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %544 = bitwise_xor(%501, %502) /* ty=Tensor[(7, 5, 16), int8] */;
  %545 = %505.0;
  %546 = %515.0;
  %547 = %520.0;
  %548 = %527.0;
  %549 = bitwise_and(%528, %529) /* ty=Tensor[(3, 2, 16), int32] */;
  %550 = equal(%536, %537) /* ty=Tensor[(3, 7, 8), bool] */;
  %551 = %543.2;
  (%544, %545, %var_2033, %538, %var_2051, %546, meta[relay.Constant][33] /* ty=Tensor[(36), uint32] */, %547, %var_2081, %548, meta[relay.Constant][34] /* ty=Tensor[(550), float64] */, %var_2086, meta[relay.Constant][35] /* ty=Tensor[(1050), float32] */, %549, %550, %551)
}

def @func_7315() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %552 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %553 = @func_3664() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %554 = %552.1;
  %555 = @func_5937() /* ty=Tensor[(3, 7, 8), float32] */;
  %556 = %553.0;
  (%554, %555, %556)
}

def @func_6731(%var_6717: Tensor[(15, 10, 15), int32], %var_6718: Tensor[(15, 10, 15), int32]) -> Tensor[(15, 10, 15), int32] {
  %557 = cast(%var_6718, dtype="int32") /* ty=Tensor[(15, 10, 15), int32] */;
  %558 = shape_of(%var_6717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_6717, dtype="int32") /* ty=Tensor[(15, 10, 15), int32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%559, %560) /* ty=Tensor[(15, 10, 15), int32] */
}

def @func_7903() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %561 = @func_7821() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %562 = @func_7421() /* ty=(Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %563 = %561.1;
  %564 = %562.1;
  (%563, %564)
}

def @func_2899(%var_2889: Tensor[(3, 7, 8), bool]) -> (Tensor[(3, 7, 8), float32],) {
  %565 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %566 = %565.0;
  %567 = cast(%var_2889, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %571 = minimum(%569, %570) /* ty=Tensor[(3, 7, 8), float32] */;
  (%571,)
}

def @func_3129(%var_3118: Tensor[(13, 6, 11), float64]) -> (Tensor[(13, 6, 11), float64],) {
  %572 = cast(%var_3118, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
  %573 = exp(%572) /* ty=Tensor[(13, 6, 11), float64] */;
  (%573,)
}

def @func_9927(%var_9855: Tensor[(70), float32], %var_9879: Tensor[(11, 2, 4), float32], %var_9924: uint32, %var_9925: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64], Tensor[(11, 2, 4), bool], Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32], Tensor[(11, 2, 4), float32], uint32, Tensor[(130), uint32]) {
  %574 = cast(meta[relay.Constant][36] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %575 = cast(%var_9855, dtype="float32") /* ty=Tensor[(70), float32] */;
  %576 = reshape(%574, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %577 = reshape(%575, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
  %578 = @func_3374(%576, %577) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
  %579 = @func_5554() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %580 = cast(meta[relay.Constant][37] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %581 = cast(meta[relay.Constant][37] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %582 = reshape(%580, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %583 = reshape(%581, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %584 = @func_1651(%582, %583) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
  %585 = %584.1;
  %586 = cast(meta[relay.Constant][37] /* ty=Tensor[(1485), int16] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %590 = @func_7260() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) */;
  %591 = %590.0;
  %592 = cast(%var_9879, dtype="uint16") /* ty=Tensor[(11, 2, 4), uint16] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="uint16") /* ty=Tensor[(11, 2, 4), uint16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %596 = minimum(%594, %595) /* ty=Tensor[(11, 2, 4), uint16] */;
  %597 = cast(%var_9879, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %598 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%591, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %601 = subtract(%599, %600) /* ty=Tensor[(11, 2, 4), int16] */;
  %602 = cast(%601, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %603 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%596, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = cast(%591, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %607 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %608 = cast(%var_9924, dtype="uint32") /* ty=uint32 */;
  %609 = cast(%var_9925, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %610 = reshape(%608, newshape=[]) /* ty=uint32 */;
  %611 = reshape(%609, newshape=[130]) /* ty=Tensor[(130), uint32] */;
  %612 = @func_9346(%610, %611) /* ty=(Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) */;
  %613 = %578.5;
  %614 = %579.0;
  %615 = floor_divide(%588, %589) /* ty=Tensor[(15, 9, 11), float64] */;
  %616 = equal(%604, %605) /* ty=Tensor[(11, 2, 4), bool] */;
  %617 = exp(%606) /* ty=Tensor[(11, 2, 4), float32] */;
  %618 = %607.1;
  %619 = %612.0;
  (%613, meta[relay.Constant][36] /* ty=Tensor[(550), float64] */, %var_9855, %614, %615, %616, %617, %618, %619, %var_9924, %var_9925)
}

def @func_2182() -> Tensor[(3, 7, 8), float32] {
  %620 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %620.0
}

def @func_3061() -> (Tensor[(3, 7, 8), float32],) {
  %621 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  (%621,)
}

def @func_5157(%var_5155: Tensor[(150), float64]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  %622 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %623 = cast(%var_5155, dtype="float64") /* ty=Tensor[(150), float64] */;
  %624 = reshape(%623, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float64] */;
  %625 = %622.4;
  %626 = @func_1177(%624) /* ty=Tensor[(15, 5, 2), float64] */;
  (%625, %626, %var_5155)
}

def @func_1379(%var_1374: Tensor[(2, 5, 13), uint32], %var_1375: Tensor[(2, 5, 13), uint32]) -> Tensor[(2, 5, 13), bool] {
  %627 = cast(%var_1375, dtype="bool") /* ty=Tensor[(2, 5, 13), bool] */;
  %628 = shape_of(%var_1374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_1374, dtype="bool") /* ty=Tensor[(2, 5, 13), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%629, %630) /* ty=Tensor[(2, 5, 13), bool] */
}

def @func_8220() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  %631 = @func_8203() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */;
  %632 = %631.0;
  %633 = @func_5957() /* ty=Tensor[(3, 7, 8), float32] */;
  (%632, %633)
}

def @func_5501() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
  %634 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %635 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %636 = cast(meta[relay.Constant][39] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %637 = reshape(%635, newshape=[]) /* ty=uint16 */;
  %638 = reshape(%636, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %639 = @func_707(%637, %638) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %640 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
  %641 = %634.0;
  %642 = %639.0;
  (%640, %641, %642, meta[relay.Constant][38] /* ty=uint16 */, meta[relay.Constant][39] /* ty=Tensor[(320), uint16] */)
}

def @func_4632() -> Tensor[(4, 8, 13), bool] {
  %643 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %644 = cos(%643) /* ty=Tensor[(4, 8, 13), float64] */;
  %645 = cast(%644, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %646 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(4, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 8, 13), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%647, %648) /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_5880() -> Tensor[(3, 7, 8), float32] {
  %649 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %649.0
}

def @func_2573() -> Tensor[(3, 7, 8), float32] {
  @func_2182() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5170() -> Tensor[(3, 7, 8), bool] {
  %650 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %650.0
}

def @func_8455() -> Tensor[(4, 8, 13), bool] {
  @func_4632() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_6244(%var_6228: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), float32]) {
  %651 = @func_5937() /* ty=Tensor[(3, 7, 8), float32] */;
  %652 = cast(%var_6228, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %656 = add(%654, %655) /* ty=Tensor[(3, 7, 8), uint64] */;
  %657 = @func_5994() /* ty=Tensor[(3, 7, 8), float32] */;
  (%656, %657)
}

def @func_8576() -> (Tensor[(3, 7, 8), bool],) {
  %658 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
  (%658,)
}

def @func_8593() -> (Tensor[(3, 7, 8), float32],) {
  %659 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  (%659,)
}

def @func_7762() -> Tensor[(3, 7, 8), float64] {
  @func_3681() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_8759() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %660 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %661 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %662 = @func_7315() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %663 = %660.0;
  %664 = %661.2;
  %665 = %662.2;
  (%663, %664, %665)
}

def @func_2360() -> (Tensor[(3, 7, 8), float64],) {
  %666 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %668 = log10(%667) /* ty=Tensor[(3, 7, 8), float64] */;
  (%668,)
}

def @func_3649(%var_3608: Tensor[(550), float64], %var_3628: Tensor[(16), int64]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %669 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %670 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %673 = cast(%var_3608, dtype="float64") /* ty=Tensor[(550), float64] */;
  %674 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 70), float32] */, dtype="float32") /* ty=Tensor[(1, 70), float32] */;
  %675 = reshape(%673, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %676 = reshape(%674, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
  %677 = @func_3374(%675, %676) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
  %678 = cast(%var_3628, dtype="int64") /* ty=Tensor[(16), int64] */;
  %679 = reshape(%678, newshape=[1, 16]) /* ty=Tensor[(1, 16), int64] */;
  %680 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %681 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %682 = %669.0;
  %683 = rsqrt(%672) /* ty=Tensor[(3, 7, 8), float32] */;
  %684 = %677.5;
  %685 = @func_1604(%679) /* ty=Tensor[(?, 16), bool] */;
  %686 = %680.0;
  %687 = %681.0;
  (%682, %683, %684, %var_3608, meta[relay.Constant][41] /* ty=Tensor[(1, 70), float32] */, %685, %var_3628, %686, %687)
}

def @func_9547() -> Tensor[(3, 7, 8), bool] {
  @func_6073() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_2953() -> (Tensor[(3, 7, 8), bool],) {
  %688 = @func_2918() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */;
  %689 = %688.0;
  (%689,)
}

def @func_5688() -> Tensor[(4, 8, 13), bool] {
  @func_4632() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_8448(%var_8393: Tensor[(130), uint32], %var_8430: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), float64], Tensor[(2, 5, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(130), bool]) {
  %690 = cast(%var_8393, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %691 = cast(%var_8393, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %692 = reshape(%690, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %693 = reshape(%691, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %694 = cast(%var_8430, dtype="bool") /* ty=Tensor[(130), bool] */;
  %695 = shape_of(%var_8393, dtype="int32") /* ty=Tensor[(1), int32] */;
  %696 = cast(%var_8393, dtype="bool") /* ty=Tensor[(130), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?), bool] */;
  %698 = @func_6638() /* ty=Tensor[(3, 7, 8), float64] */;
  %699 = @func_1379(%692, %693) /* ty=Tensor[(2, 5, 13), bool] */;
  %700 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  %701 = equal(%696, %697) /* ty=Tensor[(130), bool] */;
  (%698, %699, %700, %701)
}

def @func_9106() -> Tensor[(3, 7, 8), bool] {
  %702 = @func_8576() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %702.0
}

def @func_10028() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %703 = @func_8593() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %704 = @func_7421() /* ty=(Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %705 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %706 = @func_6270() /* ty=Tensor[(3, 7, 8), bool] */;
  %707 = %703.0;
  %708 = %704.1;
  %709 = %705.0;
  (%706, %707, %708, %709)
}

def @func_4422(%var_4401: Tensor[(1050), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) {
  %710 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %711 = cast(meta[relay.Constant][43] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %712 = cast(meta[relay.Constant][42] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %713 = cast(%var_4401, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %714 = reshape(%711, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %715 = reshape(%712, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %716 = reshape(%713, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %717 = @func_1956(%714, %715, %716) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %718 = %717.3;
  %719 = cast(%718, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %720 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(550), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %721 = cast(meta[relay.Constant][43] /* ty=Tensor[(550), float64] */, dtype="bool") /* ty=Tensor[(550), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?), bool] */;
  %723 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %724 = %710.0;
  %725 = logical_and(%721, %722) /* ty=Tensor[(550), bool] */;
  %726 = %723.0;
  (%724, meta[relay.Constant][42] /* ty=Tensor[(70), float32] */, %var_4401, %725, %726)
}

def @func_5886() -> Tensor[(3, 7, 8), float64] {
  %727 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %727.0
}

def @func_2764() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %728 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %729 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %730 = %728.0;
  %731 = %729.0;
  (%730, %731)
}

def @func_5919() -> (Tensor[(3, 2, 4), float64],) {
  %732 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 4), float64] */;
  %733 = exp(%732) /* ty=Tensor[(3, 2, 4), float64] */;
  (%733,)
}

def @func_7705() -> (Tensor[(3, 7, 8), bool],) {
  %734 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %735 = %734.0;
  (%735,)
}

def @func_5957() -> Tensor[(3, 7, 8), float32] {
  %736 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %736.0
}

def @func_9346(%var_9314: uint32, %var_9341: Tensor[(130), uint32]) -> (Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) {
  %737 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %738 = cast(meta[relay.Constant][45] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %739 = reshape(%738, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %740 = @func_6433(%739) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) */;
  %741 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 42), float32] */, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %742 = cast(%var_9314, dtype="uint32") /* ty=uint32 */;
  %743 = reshape(%741, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %744 = reshape(%742, newshape=[]) /* ty=uint32 */;
  %745 = @func_1446(%743, %744) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %746 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %747 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %748 = reshape(%746, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %749 = reshape(%747, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %750 = cast(%var_9341, dtype="float64") /* ty=Tensor[(130), float64] */;
  %751 = %737.0;
  %752 = %740.1;
  %753 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  %754 = %745.3;
  %755 = @func_1379(%748, %749) /* ty=Tensor[(2, 5, 13), bool] */;
  %756 = asinh(%750) /* ty=Tensor[(130), float64] */;
  (%751, %752, meta[relay.Constant][45] /* ty=Tensor[(150), float64] */, %753, %754, meta[relay.Constant][46] /* ty=Tensor[(12, 42), float32] */, %var_9314, %755, %756)
}

def @func_8720() -> Tensor[(3, 7, 8), float32] {
  %757 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %757.0
}

def @func_8372() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %758 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %759 = %758.0;
  %760 = @func_5880() /* ty=Tensor[(3, 7, 8), float32] */;
  (%759, %760)
}

def @func_8696() -> Tensor[(3, 7, 8), float32] {
  %761 = @func_5829() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  log2(%763) /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5994() -> Tensor[(3, 7, 8), float32] {
  %764 = @func_5554() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %764.0
}

def @func_8164() -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) {
  %765 = cast(meta[relay.Constant][47] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %766 = cast(meta[relay.Constant][47] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %767 = reshape(%765, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %768 = reshape(%766, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %769 = @func_1651(%767, %768) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
  %770 = @func_6131() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %771 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
  %772 = %769.0;
  %773 = %770.0;
  (%771, %772, meta[relay.Constant][47] /* ty=Tensor[(1485), int16] */, %773)
}

def @func_7454(%var_7448: Tensor[(3, 2, 1), float32]) -> (Tensor[(3, 2, 1), float32],) {
  %774 = cast(%var_7448, dtype="float32") /* ty=Tensor[(3, 2, 1), float32] */;
  %775 = log10(%774) /* ty=Tensor[(3, 2, 1), float32] */;
  (%775,)
}

def @func_6163() -> Tensor[(3, 7, 8), float32] {
  %776 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %776.0
}

def @func_5829() -> (Tensor[(3, 7, 8), float32],) {
  %777 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %778 = %777.0;
  (%778,)
}

def @func_5022() -> Tensor[(3, 7, 8), bool] {
  %779 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %779.0
}

def @func_6208(%var_6190: Tensor[(858), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(13, 6, 11), float64], Tensor[(858), float64], Tensor[(4, 8, 13), bool]) {
  %780 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %781 = cast(%var_6190, dtype="float64") /* ty=Tensor[(858), float64] */;
  %782 = reshape(%781, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), float64] */;
  %783 = @func_3129(%782) /* ty=(Tensor[(13, 6, 11), float64],) */;
  %784 = %780.0;
  %785 = %783.0;
  %786 = @func_5688() /* ty=Tensor[(4, 8, 13), bool] */;
  (%784, %785, %var_6190, %786)
}

def @func_2918() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  %787 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %788 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %789 = %787.1;
  %790 = %788.0;
  (%789, %790)
}

def @func_7799() -> (Tensor[(3, 7, 8), float32],) {
  %791 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_5272() -> (Tensor[(3, 7, 8), bool],) {
  %793 = @func_5022() /* ty=Tensor[(3, 7, 8), bool] */;
  (%793,)
}

def @func_3681() -> Tensor[(3, 7, 8), float64] {
  %794 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %794.0
}

def @func_6638() -> Tensor[(3, 7, 8), float64] {
  %795 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %795.0
}

def @func_5622() -> (Tensor[(3, 7, 8), bool],) {
  %796 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
  (%796,)
}

def @func_9410(%var_9384: Tensor[(4, 8, 13), bool]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64], Tensor[(3, 7, 8), float32]) {
  %797 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %798 = cast(%var_9384, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %802 = cast(%var_9384, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %803 = multiply(%800, %801) /* ty=Tensor[(4, 8, 13), int64] */;
  %804 = exp(%802) /* ty=Tensor[(4, 8, 13), float64] */;
  %805 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  (%803, %804, %805)
}

def @func_5937() -> Tensor[(3, 7, 8), float32] {
  %806 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %806.0
}

def @func_10120() -> Tensor[(4, 8, 13), bool] {
  @func_8455() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_7421() -> (Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %807 = @func_7139() /* ty=(Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) */;
  %808 = %807.1;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(858), float32] */;
  %810 = sinh(%809) /* ty=Tensor[(858), float32] */;
  %811 = cast(%808, dtype="int16") /* ty=Tensor[(858), int16] */;
  %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %813 = cast(%810, dtype="int16") /* ty=Tensor[(858), int16] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?), int16] */;
  %815 = @func_6131() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %816 = right_shift(%813, %814) /* ty=Tensor[(858), int16] */;
  %817 = %815.0;
  %818 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  (%816, %817, %818)
}

def @func_6601(%var_6491: uint16, %var_6492: Tensor[(320, 1), uint16], %var_6505: Tensor[(128), float32], %var_6521: Tensor[(2, 48), int8]) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320, 1), uint16], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(2, 8, 2), float32], Tensor[(32), float64], Tensor[(3, 7, 8), bool], uint32, Tensor[(128), float32], Tensor[(3, 7, 8), float32], Tensor[(9, ?, 12), int64], Tensor[(16), int8], Tensor[(1485), int16], Tensor[(2, 48), int8], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(5, 110), float64], Tensor[(16), int64]) {
  %819 = @func_6282() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %820 = cast(%var_6491, dtype="uint16") /* ty=uint16 */;
  %821 = cast(%var_6492, dtype="uint16") /* ty=Tensor[(320, 1), uint16] */;
  %822 = reshape(%820, newshape=[]) /* ty=uint16 */;
  %823 = reshape(%821, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %824 = @func_707(%822, %823) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %825 = cast(meta[relay.Constant][48] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %826 = reshape(%825, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %827 = @func_4422(%826) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %828 = cast(meta[relay.Constant][49] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %829 = cast(meta[relay.Constant][49] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %830 = reshape(%828, newshape=[2, 8, 2]) /* ty=Tensor[(2, 8, 2), float64] */;
  %831 = reshape(%829, newshape=[2, 8, 2]) /* ty=Tensor[(2, 8, 2), float64] */;
  %832 = @func_2419(%830, %831) /* ty=(Tensor[(2, 8, 2), float32],) */;
  %833 = cast(%var_6505, dtype="float32") /* ty=Tensor[(128), float32] */;
  %834 = cast(%var_6491, dtype="uint32") /* ty=uint32 */;
  %835 = reshape(%833, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %836 = reshape(%834, newshape=[]) /* ty=uint32 */;
  %837 = @func_1131(%835, %836) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %838 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %839 = cast(meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %840 = %837.1;
  %841 = cast(%840, dtype="uint8") /* ty=uint8 */;
  %842 = cast(%var_6505, dtype="float32") /* ty=Tensor[(128), float32] */;
  %843 = cast(meta[relay.Constant][51] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %844 = %827.1;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(70), float32] */;
  %846 = cast(%var_6521, dtype="int8") /* ty=Tensor[(2, 48), int8] */;
  %847 = reshape(%839, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int8] */;
  %848 = reshape(%841, newshape=[]) /* ty=uint8 */;
  %849 = reshape(%842, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %850 = reshape(%843, newshape=[15, 99]) /* ty=Tensor[(15, 99), int16] */;
  %851 = reshape(%845, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
  %852 = reshape(%846, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), int8] */;
  %853 = @func_2118(%847, %848, %849, %850, %851, %852) /* ty=(Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) */;
  %854 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %855 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 110), float64] */, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %856 = cast(meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, dtype="int64") /* ty=Tensor[(16), int64] */;
  %857 = reshape(%855, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %858 = reshape(%856, newshape=[16]) /* ty=Tensor[(16), int64] */;
  %859 = @func_3649(%857, %858) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %860 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 110), float64] */, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %861 = cast(meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, dtype="int64") /* ty=Tensor[(16), int64] */;
  %862 = reshape(%860, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %863 = reshape(%861, newshape=[16]) /* ty=Tensor[(16), int64] */;
  %864 = @func_3649(%862, %863) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %865 = %819.0;
  %866 = %824.0;
  %867 = %832.0;
  %868 = @func_6073() /* ty=Tensor[(3, 7, 8), bool] */;
  %869 = %838.0;
  %870 = %853.1;
  %871 = %854.0;
  %872 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  %873 = %859.7;
  %874 = %864.6;
  (%865, %866, %var_6491, %var_6492, %844, meta[relay.Constant][48] /* ty=Tensor[(1050), float32] */, %867, meta[relay.Constant][49] /* ty=Tensor[(32), float64] */, %868, %840, %var_6505, %869, %870, meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, meta[relay.Constant][51] /* ty=Tensor[(1485), int16] */, %var_6521, %871, %872, %873, meta[relay.Constant][52] /* ty=Tensor[(5, 110), float64] */, %874)
}

def @func_9831(%var_9806: uint32) -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(4, 9, 1), bool], Tensor[(128), float32], uint32, Tensor[(3, 7, 8), bool]) {
  %875 = @func_8220() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */;
  %876 = @func_7705() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %877 = cast(meta[relay.Constant][53] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %878 = cast(%var_9806, dtype="uint32") /* ty=uint32 */;
  %879 = reshape(%877, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %880 = reshape(%878, newshape=[]) /* ty=uint32 */;
  %881 = @func_1131(%879, %880) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %882 = %875.0;
  %883 = %876.0;
  %884 = %881.0;
  %885 = @func_9106() /* ty=Tensor[(3, 7, 8), bool] */;
  (%882, %883, %884, meta[relay.Constant][53] /* ty=Tensor[(128), float32] */, %var_9806, %885)
}

def @func_2965() -> (Tensor[(3, 7, 8), bool],) {
  %886 = @func_2918() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */;
  %887 = %886.1;
  (%887,)
}

def @func_6084() -> Tensor[(3, 7, 8), float32] {
  @func_5937() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_104(%var_50: uint8) -> (Tensor[(9, ?, 12), int64],) {
  %888 = cast(%var_50, dtype="bool") /* ty=bool */;
  %889 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 1, 12), uint8] */, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %890 = less(%888, %889) /* ty=Tensor[(9, 1, 12), bool] */;
  %891 = cast(%890, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %892 = atanh(%891) /* ty=Tensor[(9, 1, 12), float64] */;
  %893 = cast(%890, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%892, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %897 = mod(%895, %896) /* ty=Tensor[(9, ?, 12), float64] */;
  %898 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 1, 12), uint8] */, dtype="int64") /* ty=Tensor[(9, 1, 12), int64] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%897, dtype="int64") /* ty=Tensor[(9, ?, 12), int64] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %902 = logical_xor(%900, %901) /* ty=Tensor[(9, ?, 12), int64] */;
  (%902,)
}

def @func_3664() -> (Tensor[(3, 7, 8), float64],) {
  %903 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %904 = %903.0;
  (%904,)
}

def @func_1131(%var_1095: Tensor[(16, 2, 4), float32], %var_1100: uint32) -> (Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) {
  %905 = cast(%var_1100, dtype="uint32") /* ty=uint32 */;
  %906 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %907 = reshape(%905, newshape=[]) /* ty=uint32 */;
  %908 = reshape(%906, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %909 = @func_488(%907, %908) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %910 = cast(%var_1095, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
  %911 = atan(%910) /* ty=Tensor[(16, 2, 4), float32] */;
  %912 = cast(%911, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
  %913 = %909.0;
  %914 = rsqrt(%912) /* ty=Tensor[(16, 2, 4), float32] */;
  (%913, %var_1100, meta[relay.Constant][55] /* ty=Tensor[(36), uint32] */, %914)
}

def @func_6270() -> Tensor[(3, 7, 8), bool] {
  @func_5022() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_8333(%var_8273: uint16, %var_8327: Tensor[(36), uint32]) -> (Tensor[(3, 7, 8), bool], uint16, Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(8, 8, 5), bool]) {
  %915 = @func_7903() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %916 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %917 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %918 = @func_7315() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %919 = cast(%var_8273, dtype="uint32") /* ty=uint32 */;
  %920 = cast(%var_8327, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %921 = reshape(%919, newshape=[]) /* ty=uint32 */;
  %922 = reshape(%920, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %923 = @func_488(%921, %922) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %924 = cast(%var_8273, dtype="uint16") /* ty=uint16 */;
  %925 = cast(meta[relay.Constant][56] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %926 = reshape(%924, newshape=[]) /* ty=uint16 */;
  %927 = reshape(%925, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %928 = @func_707(%926, %927) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %929 = %928.0;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %931 = cos(%930) /* ty=Tensor[(8, 8, 5), float32] */;
  %932 = cast(meta[relay.Constant][56] /* ty=Tensor[(320), uint16] */, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %933 = shape_of(%929, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(%929, dtype="uint64") /* ty=Tensor[(8, 8, 5), uint64] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %936 = maximum(%934, %935) /* ty=Tensor[(8, 8, 5), uint64] */;
  %937 = cast(%936, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %938 = shape_of(%931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%931, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = logical_or(%939, %940) /* ty=Tensor[(8, 8, 5), bool] */;
  %942 = cast(%936, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%941, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = %915.0;
  %947 = %916.0;
  %948 = %917.1;
  %949 = @func_5688() /* ty=Tensor[(4, 8, 13), bool] */;
  %950 = %918.1;
  %951 = %923.0;
  %952 = greater(%944, %945) /* ty=Tensor[(8, 8, 5), bool] */;
  (%946, %var_8273, %947, %948, %949, %950, %951, %var_8327, %952)
}

def @func_3799() -> (Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) {
  %953 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %954 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(11, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %955 = cast(meta[relay.Constant][57] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %957 = cast(meta[relay.Constant][57] /* ty=Tensor[(11, 2, 4), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 4), uint32] */;
  %958 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(11, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 2, 4), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 4), uint32] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %961 = divide(%955, %956) /* ty=Tensor[(11, 2, 4), float32] */;
  %962 = multiply(%959, %960) /* ty=Tensor[(11, 2, 4), uint32] */;
  (%961, %962)
}

def @func_6073() -> Tensor[(3, 7, 8), bool] {
  %963 = @func_5272() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %963.0
}

def @func_6677() -> Tensor[(3, 7, 8), bool] {
  @func_6270() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_2806(%var_2779: Tensor[(3, 6, 5), int64], %var_2780: Tensor[(3, 6, 5), int64], %var_2789: uint32, %var_2790: Tensor[(36, 1), uint32]) -> (Tensor[(3, 6, 5), int64], Tensor[(4, 9, 1), bool], uint32, Tensor[(36, 1), uint32], Tensor[(3, 7, 8), float32]) {
  %964 = cast(%var_2780, dtype="int64") /* ty=Tensor[(3, 6, 5), int64] */;
  %965 = shape_of(%var_2779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%var_2779, dtype="int64") /* ty=Tensor[(3, 6, 5), int64] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %968 = cast(%var_2789, dtype="uint32") /* ty=uint32 */;
  %969 = cast(%var_2790, dtype="uint32") /* ty=Tensor[(36, 1), uint32] */;
  %970 = reshape(%968, newshape=[]) /* ty=uint32 */;
  %971 = reshape(%969, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %972 = @func_488(%970, %971) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %973 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %974 = logical_xor(%966, %967) /* ty=Tensor[(3, 6, 5), int64] */;
  %975 = %972.0;
  %976 = %973.0;
  (%974, %975, %var_2789, %var_2790, %976)
}

def @func_2637() -> Tensor[(3, 7, 8), float32] {
  %977 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %978 = %977.0;
  %979 = cast(%978, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  erf(%979) /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7869() -> Tensor[(3, 7, 8), bool] {
  @func_6270() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_7750(%var_7719: Tensor[(7, 13, 2), int16]) -> (Tensor[(7, 13, 2), int16],) {
  %980 = cast(meta[relay.Constant][59] /* ty=Tensor[(7, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(7, 13, 2), int16] */;
  %981 = shape_of(%var_7719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(%var_7719, dtype="int16") /* ty=Tensor[(7, 13, 2), int16] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %984 = bitwise_xor(%982, %983) /* ty=Tensor[(7, 13, 2), int16] */;
  (%984,)
}

def @func_7139() -> (Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) {
  %985 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %986 = cast(meta[relay.Constant][60] /* ty=Tensor[(858), float64] */, dtype="float64") /* ty=Tensor[(858), float64] */;
  %987 = reshape(%986, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), float64] */;
  %988 = @func_3129(%987) /* ty=(Tensor[(13, 6, 11), float64],) */;
  %989 = %988.0;
  %990 = cast(%989, dtype="uint64") /* ty=Tensor[(13, 6, 11), uint64] */;
  %991 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(858), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %992 = cast(meta[relay.Constant][60] /* ty=Tensor[(858), float64] */, dtype="uint64") /* ty=Tensor[(858), uint64] */;
  %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %994 = %985.1;
  %995 = bitwise_or(%992, %993) /* ty=Tensor[(858), uint64] */;
  (%994, %995)
}

def @func_4196() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %996 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
  %997 = cast(%996, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %998 = reshape(%997, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), float32] */;
  %999 = @func_3281(%998) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) */;
  %1000 = %999.1;
  (%996, %1000)
}

def @func_8532() -> Tensor[(3, 7, 8), float32] {
  %1001 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %1001.1
}

def @func_3806() -> Tensor[(3, 7, 8), bool] {
  @func_2519() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_1858() -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) {
  %1002 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %1003 = %1002.0;
  %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %1005 = acosh(%1004) /* ty=Tensor[(3, 7, 8), float32] */;
  %1006 = cast(%1005, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %1007 = cast(%1003, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %1008 = shape_of(%1005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1005, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1011 = cosh(%1006) /* ty=Tensor[(3, 7, 8), float64] */;
  %1012 = greater(%1009, %1010) /* ty=Tensor[(3, 7, 8), bool] */;
  (%1011, %1012)
}

def @func_9593() -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32], Tensor[(4, 8, 13), bool]) {
  %1013 = @func_4945() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) */;
  %1014 = %1013.2;
  %1015 = cast(%1014, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
  %1016 = cast(%1014, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %1017 = sin(%1015) /* ty=Tensor[(11, 2, 4), float64] */;
  %1018 = asinh(%1016) /* ty=Tensor[(11, 2, 4), float32] */;
  %1019 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  (%1017, %1018, %1019)
}

def @func_4917() -> (Tensor[(11, 2, 4), float32],) {
  %1020 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %1021 = %1020.0;
  (%1021,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2639() -> Tensor[(3, 7, 8), float32] {
  @func_2637() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_6271() -> Tensor[(3, 7, 8), bool] {
  %0 = fn () -> Tensor[(3, 7, 8), bool] {
    @func_5022() /* ty=Tensor[(3, 7, 8), bool] */
  };
  %0() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_8165() -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) {
  %10 = fn () -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) {
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
    %3 = reshape(%1, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %4 = reshape(%2, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %5 = @func_1651(%3, %4) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
    %6 = @func_6131() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %7 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
    %8 = %5.0;
    %9 = %6.0;
    (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(1485), int16] */, %9)
  };
  %10() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) */
}

def @func_9051(%var_9044: uint16) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16], Tensor[(3, 7, 8), bool]) {
  %11 = cast(%var_9044, dtype="uint16") /* ty=uint16 */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %13 = reshape(%11, newshape=[]) /* ty=uint16 */;
  %14 = reshape(%12, newshape=[320]) /* ty=Tensor[(320), uint16] */;
  %15 = @func_5073(%13, %14) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */;
  %16 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %17 = @func_5022() /* ty=Tensor[(3, 7, 8), bool] */;
  %18 = %15.3;
  %19 = %16.0;
  (%17, %18, %var_9044, meta[relay.Constant][1] /* ty=Tensor[(320), uint16] */, %19)
}

def @func_9239(%var_9192: Tensor[(70), float32], %var_9193: Tensor[(35, 10), uint16], %var_9212: Tensor[(35, 10), uint16]) -> (Tensor[(3, 7, 8), bool], Tensor[(10, 105), bool], Tensor[(550, 1), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float64], Tensor[(35, 10), uint64]) {
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(550, 1), float64] */, dtype="float64") /* ty=Tensor[(550, 1), float64] */;
  %21 = cast(%var_9192, dtype="float32") /* ty=Tensor[(70), float32] */;
  %22 = cast(%var_9193, dtype="uint16") /* ty=Tensor[(35, 10), uint16] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(550, 1), float64] */, dtype="float64") /* ty=Tensor[(550, 1), float64] */;
  %24 = reshape(%20, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %25 = reshape(%21, newshape=[7, 10]) /* ty=Tensor[(7, 10), float32] */;
  %26 = reshape(%22, newshape=[350]) /* ty=Tensor[(350), uint16] */;
  %27 = reshape(%23, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %28 = @func_5344(%24, %25, %26, %27) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) */;
  %29 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %30 = cast(%var_9212, dtype="uint64") /* ty=Tensor[(35, 10), uint64] */;
  %31 = shape_of(%var_9193, dtype="int32") /* ty=Tensor[(2), int32] */;
  %32 = cast(%var_9193, dtype="uint64") /* ty=Tensor[(35, 10), uint64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %34 = @func_9083() /* ty=Tensor[(3, 7, 8), bool] */;
  %35 = %28.2;
  %36 = %29.0;
  %37 = bitwise_and(%32, %33) /* ty=Tensor[(35, 10), uint64] */;
  (%34, %35, meta[relay.Constant][2] /* ty=Tensor[(550, 1), float64] */, %var_9192, %36, %37)
}

def @func_5157(%var_5155: Tensor[(150), float64]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  %38 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %39 = cast(%var_5155, dtype="float64") /* ty=Tensor[(150), float64] */;
  %40 = reshape(%39, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float64] */;
  %41 = %38.4;
  %42 = @func_1177(%40) /* ty=Tensor[(15, 5, 2), float64] */;
  (%41, %42, %var_5155)
}

def @func_9287(%var_9282: Tensor[(15, 9, 11), int16]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64]) {
  %43 = @func_8164() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), int16], Tensor[(1485), int16], Tensor[(3, 7, 8), float32]) */;
  %44 = %43.1;
  %45 = cast(%var_9282, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %49 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  %50 = divide(%47, %48) /* ty=Tensor[(15, 9, 11), float64] */;
  (%49, %50)
}

def @func_2344(%var_2324: Tensor[(3, 7, 8), bool]) -> (Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) {
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 1), uint32] */, dtype="uint32") /* ty=Tensor[(130, 1), uint32] */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 1), uint32] */, dtype="uint32") /* ty=Tensor[(130, 1), uint32] */;
  %53 = reshape(%51, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %54 = reshape(%52, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 1), uint32] */, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
  %56 = cos(%55) /* ty=Tensor[(130, 1), float32] */;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %58 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %59 = %58.0;
  %60 = cast(%var_2324, dtype="uint16") /* ty=Tensor[(3, 7, 8), uint16] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="uint16") /* ty=Tensor[(3, 7, 8), uint16] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %64 = @func_1379(%53, %54) /* ty=Tensor[(2, 5, 13), bool] */;
  %65 = asinh(%57) /* ty=Tensor[(130, 1), float64] */;
  %66 = subtract(%62, %63) /* ty=Tensor[(3, 7, 8), uint16] */;
  (%64, %65, %66)
}

def @func_1450(%var_1448: Tensor[(9, 14, 4), float32], %var_1449: uint32) -> (Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) {
  @func_1446(%var_1448, %var_1449) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */
}

def @func_7551(%var_7529: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), bool], Tensor[(1050, 1), float32], Tensor[(3, 7, 8), bool]) {
  %67 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %70 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %71 = cast(%var_7529, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %72 = reshape(%71, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %73 = @func_4422(%72) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %74 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %75 = exp(%69) /* ty=Tensor[(3, 7, 8), float32] */;
  %76 = %70.0;
  %77 = %73.3;
  %78 = %74.3;
  (%75, %76, %77, %var_7529, %78)
}

def @func_1800() -> (Tensor[(3, 7, 8), bool],) {
  %79 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %80 = %79.0;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %85 = greater_equal(%83, %84) /* ty=Tensor[(3, 7, 8), bool] */;
  (%85,)
}

def @func_2765() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %90 = fn () -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
    %86 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %87 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %88 = %86.0;
    %89 = %87.0;
    (%88, %89)
  };
  %90() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */
}

def @func_9593() -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32], Tensor[(4, 8, 13), bool]) {
  %91 = @func_4945() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) */;
  %92 = %91.2;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
  %94 = cast(%92, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %95 = sin(%93) /* ty=Tensor[(11, 2, 4), float64] */;
  %96 = asinh(%94) /* ty=Tensor[(11, 2, 4), float32] */;
  %97 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  (%95, %96, %97)
}

def @func_7800() -> (Tensor[(3, 7, 8), float32],) {
  %100 = fn () -> (Tensor[(3, 7, 8), float32],) {
    %98 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %99 = %98.0;
    (%99,)
  };
  %100() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_1774() -> (Tensor[(3, 7, 8), float32],) {
  @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_2966() -> (Tensor[(3, 7, 8), bool],) {
  %103 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %101 = @func_2918() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */;
    %102 = %101.1;
    (%102,)
  };
  %103() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_4918() -> (Tensor[(11, 2, 4), float32],) {
  %106 = fn () -> (Tensor[(11, 2, 4), float32],) {
    %104 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
    %105 = %104.0;
    (%105,)
  };
  %106() /* ty=(Tensor[(11, 2, 4), float32],) */
}

def @func_6133() -> (Tensor[(3, 7, 8), float32],) {
  @func_6131() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_7187() -> Tensor[(3, 7, 8), float32] {
  %107 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_2182() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %107() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_9708(%var_9706: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  @func_9705(%var_9706) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_2920() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  @func_2918() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */
}

def @func_6073() -> Tensor[(3, 7, 8), bool] {
  %108 = @func_5272() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %108.0
}

def @func_2361() -> (Tensor[(3, 7, 8), float64],) {
  %112 = fn () -> (Tensor[(3, 7, 8), float64],) {
    %109 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
    %110 = cast(%109, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
    %111 = log10(%110) /* ty=Tensor[(3, 7, 8), float64] */;
    (%111,)
  };
  %112() /* ty=(Tensor[(3, 7, 8), float64],) */
}

def @func_10030() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  @func_10028() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */
}

def @func_8931() -> Tensor[(3, 7, 8), float32] {
  %113 = @func_8759() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %113.0
}

def @func_711(%var_709: uint16, %var_710: Tensor[(8, 8, 5), uint16]) -> (Tensor[(8, 8, 5), bool],) {
  @func_707(%var_709, %var_710) /* ty=(Tensor[(8, 8, 5), bool],) */
}

def @func_7139() -> (Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) {
  %114 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(858), float64] */, dtype="float64") /* ty=Tensor[(858), float64] */;
  %116 = reshape(%115, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), float64] */;
  %117 = @func_3129(%116) /* ty=(Tensor[(13, 6, 11), float64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="uint64") /* ty=Tensor[(13, 6, 11), uint64] */;
  %120 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(858), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(858), float64] */, dtype="uint64") /* ty=Tensor[(858), uint64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %123 = %114.1;
  %124 = bitwise_or(%121, %122) /* ty=Tensor[(858), uint64] */;
  (%123, %124)
}

def @func_8578() -> (Tensor[(3, 7, 8), bool],) {
  @func_8576() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_7554(%var_7552: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), bool], Tensor[(1050, 1), float32], Tensor[(3, 7, 8), bool]) {
  @func_7551(%var_7552) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), bool], Tensor[(1050, 1), float32], Tensor[(3, 7, 8), bool]) */
}

def @func_5831() -> (Tensor[(3, 7, 8), float32],) {
  @func_5829() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_6354(%var_6352: Tensor[(5, 2, 6), bool], %var_6353: Tensor[(5, 2, 6), bool]) -> (Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) {
  @func_6350(%var_6352, %var_6353) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) */
}

def @func_3653(%var_3651: Tensor[(550), float64], %var_3652: Tensor[(16), int64]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  @func_3649(%var_3651, %var_3652) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_6731(%var_6717: Tensor[(15, 10, 15), int32], %var_6718: Tensor[(15, 10, 15), int32]) -> Tensor[(15, 10, 15), int32] {
  %125 = cast(%var_6718, dtype="int32") /* ty=Tensor[(15, 10, 15), int32] */;
  %126 = shape_of(%var_6717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_6717, dtype="int32") /* ty=Tensor[(15, 10, 15), int32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%127, %128) /* ty=Tensor[(15, 10, 15), int32] */
}

def @func_7904() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %133 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
    %129 = @func_7821() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
    %130 = @func_7421() /* ty=(Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
    %131 = %129.1;
    %132 = %130.1;
    (%131, %132)
  };
  %133() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_9174() -> (Tensor[(3, 7, 8), bool],) {
  @func_9172() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_6744(%var_6743: Tensor[(13, 8, 14), int16]) -> (Tensor[(13, 8, 14), int16],) {
  %137 = fn (%var_6738: Tensor[(13, 8, 14), int16]) -> (Tensor[(13, 8, 14), int16],) {
    %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(13, 8, 1), int16] */;
    %135 = cast(%var_6738, dtype="int16") /* ty=Tensor[(13, 8, 14), int16] */;
    %136 = subtract(%134, %135) /* ty=Tensor[(13, 8, 14), int16] */;
    (%136,)
  };
  %137(%var_6743) /* ty=(Tensor[(13, 8, 14), int16],) */
}

def @func_737(%var_735: Tensor[(3, 4, 13), float64]) -> (Tensor[(3, 4, 13), float64],) {
  @func_734(%var_735) /* ty=(Tensor[(3, 4, 13), float64],) */
}

def @func_3045(%var_3044: Tensor[(3, 7, 8), float64]) -> Tensor[(3, 7, 8), int16] {
  %144 = fn (%var_3027: Tensor[(3, 7, 8), float64]) -> Tensor[(3, 7, 8), int16] {
    %138 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
    %139 = %138.0;
    %140 = cast(%var_3027, dtype="int16") /* ty=Tensor[(3, 7, 8), int16] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%139, dtype="int16") /* ty=Tensor[(3, 7, 8), int16] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    logical_xor(%142, %143) /* ty=Tensor[(3, 7, 8), int16] */
  };
  %144(%var_3044) /* ty=Tensor[(3, 7, 8), int16] */
}

def @func_9413(%var_9411: Tensor[(4, 8, 13), bool]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64], Tensor[(3, 7, 8), float32]) {
  @func_9410(%var_9411) /* ty=(Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64], Tensor[(3, 7, 8), float32]) */
}

def @func_7456(%var_7455: Tensor[(3, 2, 1), float32]) -> (Tensor[(3, 2, 1), float32],) {
  %147 = fn (%var_7448: Tensor[(3, 2, 1), float32]) -> (Tensor[(3, 2, 1), float32],) {
    %145 = cast(%var_7448, dtype="float32") /* ty=Tensor[(3, 2, 1), float32] */;
    %146 = log10(%145) /* ty=Tensor[(3, 2, 1), float32] */;
    (%146,)
  };
  %147(%var_7455) /* ty=(Tensor[(3, 2, 1), float32],) */
}

def @func_10197() -> Tensor[(3, 7, 8), float32] {
  %149 = fn () -> Tensor[(3, 7, 8), float32] {
    %148 = @func_5829() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %148.0
  };
  %149() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_9932(%var_9928: Tensor[(70), float32], %var_9929: Tensor[(11, 2, 4), float32], %var_9930: uint32, %var_9931: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64], Tensor[(11, 2, 4), bool], Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32], Tensor[(11, 2, 4), float32], uint32, Tensor[(130), uint32]) {
  %196 = fn (%var_9855: Tensor[(70), float32], %var_9879: Tensor[(11, 2, 4), float32], %var_9924: uint32, %var_9925: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64], Tensor[(11, 2, 4), bool], Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32], Tensor[(11, 2, 4), float32], uint32, Tensor[(130), uint32]) {
    %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %151 = cast(%var_9855, dtype="float32") /* ty=Tensor[(70), float32] */;
    %152 = reshape(%150, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %153 = reshape(%151, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
    %154 = @func_3374(%152, %153) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
    %155 = @func_5554() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
    %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
    %158 = reshape(%156, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %159 = reshape(%157, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %160 = @func_1651(%158, %159) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
    %161 = %160.1;
    %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(1485), int16] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%161, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %166 = @func_7260() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) */;
    %167 = %166.0;
    %168 = cast(%var_9879, dtype="uint16") /* ty=Tensor[(11, 2, 4), uint16] */;
    %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%167, dtype="uint16") /* ty=Tensor[(11, 2, 4), uint16] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %172 = minimum(%170, %171) /* ty=Tensor[(11, 2, 4), uint16] */;
    %173 = cast(%var_9879, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
    %174 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%167, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %177 = subtract(%175, %176) /* ty=Tensor[(11, 2, 4), int16] */;
    %178 = cast(%177, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
    %179 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%172, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %182 = cast(%167, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
    %183 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
    %184 = cast(%var_9924, dtype="uint32") /* ty=uint32 */;
    %185 = cast(%var_9925, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %186 = reshape(%184, newshape=[]) /* ty=uint32 */;
    %187 = reshape(%185, newshape=[130]) /* ty=Tensor[(130), uint32] */;
    %188 = @func_9346(%186, %187) /* ty=(Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) */;
    %189 = %154.5;
    %190 = %155.0;
    %191 = floor_divide(%164, %165) /* ty=Tensor[(15, 9, 11), float64] */;
    %192 = equal(%180, %181) /* ty=Tensor[(11, 2, 4), bool] */;
    %193 = exp(%182) /* ty=Tensor[(11, 2, 4), float32] */;
    %194 = %183.1;
    %195 = %188.0;
    (%189, meta[relay.Constant][7] /* ty=Tensor[(550), float64] */, %var_9855, %190, %191, %192, %193, %194, %195, %var_9924, %var_9925)
  };
  %196(%var_9928, %var_9929, %var_9930, %var_9931) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64], Tensor[(11, 2, 4), bool], Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32], Tensor[(11, 2, 4), float32], uint32, Tensor[(130), uint32]) */
}

def @func_5690() -> Tensor[(4, 8, 13), bool] {
  @func_5688() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_7821() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %197 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %198 = %197.1;
  %199 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  (%198, %199)
}

def @func_2637() -> Tensor[(3, 7, 8), float32] {
  %200 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %201 = %200.0;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  erf(%202) /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5556() -> (Tensor[(3, 7, 8), float32],) {
  @func_5554() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_707(%var_697: uint16, %var_698: Tensor[(8, 8, 5), uint16]) -> (Tensor[(8, 8, 5), bool],) {
  %203 = cast(%var_697, dtype="bool") /* ty=bool */;
  %204 = cast(%var_698, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %205 = less_equal(%203, %204) /* ty=Tensor[(8, 8, 5), bool] */;
  (%205,)
}

def @func_8457() -> Tensor[(4, 8, 13), bool] {
  @func_8455() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_2268(%var_2266: uint8) -> (Tensor[(9, ?, 12), int64], Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), int64]) {
  @func_2265(%var_2266) /* ty=(Tensor[(9, ?, 12), int64], Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), int64]) */
}

def @func_1180(%var_1178: Tensor[(15, 5, 2), float64]) -> Tensor[(15, 5, 2), float64] {
  @func_1177(%var_1178) /* ty=Tensor[(15, 5, 2), float64] */
}

def @func_4515(%var_4481: Tensor[(1050), float32], %var_4510: Tensor[(1, 550), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1050), float32], Tensor[(2, 5, 13), bool], Tensor[(1485, 70), bool], Tensor[(1, 550), float64], Tensor[(7, 10), float32]) {
  %206 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %207 = cast(%var_4481, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %208 = reshape(%207, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %209 = @func_4422(%208) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %210 = %206.0;
  %211 = cast(%210, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %212 = reshape(%211, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
  %213 = @func_2344(%212) /* ty=(Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) */;
  %214 = cast(%var_4510, dtype="float64") /* ty=Tensor[(1, 550), float64] */;
  %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %216 = reshape(%214, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %217 = reshape(%215, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
  %218 = @func_3374(%216, %217) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
  %219 = %209.4;
  %220 = %213.0;
  %221 = %218.7;
  (%210, %219, %var_4481, %220, %221, %var_4510, meta[relay.Constant][9] /* ty=Tensor[(7, 10), float32] */)
}

def @func_8029(%var_8027: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(60), bool], Tensor[(2, 5, 13), bool], Tensor[(130), uint32]) {
  @func_8026(%var_8027) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(60), bool], Tensor[(2, 5, 13), bool], Tensor[(130), uint32]) */
}

def @func_5554() -> (Tensor[(3, 7, 8), float32],) {
  %222 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %223 = %222.0;
  (%223,)
}

def @func_2812(%var_2808: Tensor[(3, 6, 5), int64], %var_2809: Tensor[(3, 6, 5), int64], %var_2810: uint32, %var_2811: Tensor[(36, 1), uint32]) -> (Tensor[(3, 6, 5), int64], Tensor[(4, 9, 1), bool], uint32, Tensor[(36, 1), uint32], Tensor[(3, 7, 8), float32]) {
  @func_2806(%var_2808, %var_2809, %var_2810, %var_2811) /* ty=(Tensor[(3, 6, 5), int64], Tensor[(4, 9, 1), bool], uint32, Tensor[(36, 1), uint32], Tensor[(3, 7, 8), float32]) */
}

def @func_10244() -> Tensor[(3, 7, 8), float32] {
  %224 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_3146() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %224() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7706() -> (Tensor[(3, 7, 8), bool],) {
  %227 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %225 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %226 = %225.0;
    (%226,)
  };
  %227() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_4519(%var_4517: Tensor[(1050), float32], %var_4518: Tensor[(1, 550), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1050), float32], Tensor[(2, 5, 13), bool], Tensor[(1485, 70), bool], Tensor[(1, 550), float64], Tensor[(7, 10), float32]) {
  @func_4515(%var_4517, %var_4518) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1050), float32], Tensor[(2, 5, 13), bool], Tensor[(1485, 70), bool], Tensor[(1, 550), float64], Tensor[(7, 10), float32]) */
}

def @func_6678() -> Tensor[(3, 7, 8), bool] {
  %228 = fn () -> Tensor[(3, 7, 8), bool] {
    @func_6270() /* ty=Tensor[(3, 7, 8), bool] */
  };
  %228() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_3374(%var_3334: Tensor[(550), float64], %var_3335: Tensor[(1, 70), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) {
  %229 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %230 = cast(%var_3334, dtype="float64") /* ty=Tensor[(550), float64] */;
  %231 = cast(%var_3335, dtype="float32") /* ty=Tensor[(1, 70), float32] */;
  %232 = cast(meta[relay.Constant][10] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %233 = reshape(%230, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %234 = reshape(%231, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %235 = reshape(%232, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %236 = @func_1956(%233, %234, %235) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %237 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485, 1), int16] */, dtype="int16") /* ty=Tensor[(1485, 1), int16] */;
  %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485, 1), int16] */, dtype="int16") /* ty=Tensor[(1485, 1), int16] */;
  %239 = reshape(%237, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %240 = reshape(%238, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
  %241 = @func_1651(%239, %240) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
  %242 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %243 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485, 1), int16] */, dtype="bool") /* ty=Tensor[(1485, 1), bool] */;
  %245 = cast(%var_3335, dtype="bool") /* ty=Tensor[(1, 70), bool] */;
  %246 = %229.0;
  %247 = %236.2;
  %248 = %241.1;
  %249 = %242.0;
  %250 = %243.1;
  %251 = logical_or(%244, %245) /* ty=Tensor[(1485, 70), bool] */;
  (%246, %247, %var_3334, meta[relay.Constant][10] /* ty=Tensor[(1050), float32] */, %248, %249, %250, %251)
}

def @func_8720() -> Tensor[(3, 7, 8), float32] {
  %252 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %252.0
}

def @func_9834(%var_9832: uint32) -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(4, 9, 1), bool], Tensor[(128), float32], uint32, Tensor[(3, 7, 8), bool]) {
  @func_9831(%var_9832) /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(4, 9, 1), bool], Tensor[(128), float32], uint32, Tensor[(3, 7, 8), bool]) */
}

def @func_8220() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  %253 = @func_8203() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */;
  %254 = %253.0;
  %255 = @func_5957() /* ty=Tensor[(3, 7, 8), float32] */;
  (%254, %255)
}

def @func_5919() -> (Tensor[(3, 2, 4), float64],) {
  %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 4), float64] */;
  %257 = exp(%256) /* ty=Tensor[(3, 2, 4), float64] */;
  (%257,)
}

def @func_2265(%var_2201: uint8) -> (Tensor[(9, ?, 12), int64], Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), int64]) {
  %258 = cast(%var_2201, dtype="uint8") /* ty=uint8 */;
  %259 = reshape(%258, newshape=[]) /* ty=uint8 */;
  %260 = @func_104(%259) /* ty=(Tensor[(9, ?, 12), int64],) */;
  %261 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %263 = asin(%262) /* ty=Tensor[(3, 7, 8), float64] */;
  %264 = cast(%263, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
  %265 = cast(%var_2201, dtype="uint64") /* ty=uint64 */;
  %266 = cast(%261, dtype="int64") /* ty=Tensor[(3, 7, 8), int64] */;
  %267 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%263, dtype="int64") /* ty=Tensor[(3, 7, 8), int64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %270 = %260.0;
  %271 = bitwise_xor(%264, %265) /* ty=Tensor[(3, 7, 8), uint64] */;
  %272 = left_shift(%268, %269) /* ty=Tensor[(3, 7, 8), int64] */;
  (%270, %271, %272)
}

def @func_1177(%var_1169: Tensor[(15, 5, 2), float64]) -> Tensor[(15, 5, 2), float64] {
  %273 = cast(%var_1169, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  acosh(%273) /* ty=Tensor[(15, 5, 2), float64] */
}

def @func_5170() -> Tensor[(3, 7, 8), bool] {
  %274 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %274.0
}

def @func_2806(%var_2779: Tensor[(3, 6, 5), int64], %var_2780: Tensor[(3, 6, 5), int64], %var_2789: uint32, %var_2790: Tensor[(36, 1), uint32]) -> (Tensor[(3, 6, 5), int64], Tensor[(4, 9, 1), bool], uint32, Tensor[(36, 1), uint32], Tensor[(3, 7, 8), float32]) {
  %275 = cast(%var_2780, dtype="int64") /* ty=Tensor[(3, 6, 5), int64] */;
  %276 = shape_of(%var_2779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_2779, dtype="int64") /* ty=Tensor[(3, 6, 5), int64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %279 = cast(%var_2789, dtype="uint32") /* ty=uint32 */;
  %280 = cast(%var_2790, dtype="uint32") /* ty=Tensor[(36, 1), uint32] */;
  %281 = reshape(%279, newshape=[]) /* ty=uint32 */;
  %282 = reshape(%280, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %283 = @func_488(%281, %282) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %284 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %285 = logical_xor(%277, %278) /* ty=Tensor[(3, 6, 5), int64] */;
  %286 = %283.0;
  %287 = %284.0;
  (%285, %286, %var_2789, %var_2790, %287)
}

def @func_492(%var_490: uint32, %var_491: Tensor[(4, 9, 1), uint32]) -> (Tensor[(4, 9, 1), bool],) {
  @func_488(%var_490, %var_491) /* ty=(Tensor[(4, 9, 1), bool],) */
}

def @func_3281(%var_3163: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) {
  %288 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %289 = %288.0;
  %290 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %294 = cast(%var_3163, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %295 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 7, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %298 = divide(%296, %297) /* ty=Tensor[(3, 7, 8), float32] */;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %300 = reshape(%299, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
  %301 = @func_2899(%300) /* ty=(Tensor[(3, 7, 8), float32],) */;
  %302 = cast(meta[relay.Constant][14] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
  %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %305 = reshape(%302, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %306 = reshape(%303, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %307 = reshape(%304, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %308 = @func_1956(%305, %306, %307) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %310 = cast(meta[relay.Constant][18] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %311 = reshape(%309, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %312 = reshape(%310, newshape=[]) /* ty=uint32 */;
  %313 = @func_1446(%311, %312) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %315 = reshape(%314, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), float64] */;
  %316 = floor_divide(%292, %293) /* ty=Tensor[(3, 7, 8), float64] */;
  %317 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  %318 = %301.0;
  %319 = %308.2;
  %320 = %313.2;
  %321 = @func_3043(%315) /* ty=Tensor[(3, 7, 8), int16] */;
  (%316, %298, %317, %318, %319, meta[relay.Constant][14] /* ty=Tensor[(550), float64] */, meta[relay.Constant][15] /* ty=Tensor[(14, 5), float32] */, meta[relay.Constant][16] /* ty=Tensor[(1050), float32] */, %320, meta[relay.Constant][17] /* ty=Tensor[(504), float32] */, meta[relay.Constant][18] /* ty=uint32 */, %321)
}

def @func_1724(%var_1722: Tensor[(1, 7, 10), float32], %var_1723: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), float32] {
  %324 = fn (%var_1698: Tensor[(1, 7, 10), float32], %var_1699: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), float32] {
    %322 = cast(%var_1698, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
    %323 = cast(%var_1699, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
    power(%322, %323) /* ty=Tensor[(15, 7, 10), float32] */
  };
  %324(%var_1722, %var_1723) /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_7497(%var_7495: Tensor[(11, 16, 16), int64]) -> Tensor[(11, 16, 16), bool] {
  @func_7494(%var_7495) /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_3131(%var_3130: Tensor[(13, 6, 11), float64]) -> (Tensor[(13, 6, 11), float64],) {
  %327 = fn (%var_3118: Tensor[(13, 6, 11), float64]) -> (Tensor[(13, 6, 11), float64],) {
    %325 = cast(%var_3118, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
    %326 = exp(%325) /* ty=Tensor[(13, 6, 11), float64] */;
    (%326,)
  };
  %327(%var_3130) /* ty=(Tensor[(13, 6, 11), float64],) */
}

def @func_2954() -> (Tensor[(3, 7, 8), bool],) {
  %330 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %328 = @func_2918() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */;
    %329 = %328.0;
    (%329,)
  };
  %330() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_7440() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_7752(%var_7751: Tensor[(7, 13, 2), int16]) -> (Tensor[(7, 13, 2), int16],) {
  %336 = fn (%var_7719: Tensor[(7, 13, 2), int16]) -> (Tensor[(7, 13, 2), int16],) {
    %331 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(7, 13, 2), int16] */;
    %332 = shape_of(%var_7719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%var_7719, dtype="int16") /* ty=Tensor[(7, 13, 2), int16] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %335 = bitwise_xor(%333, %334) /* ty=Tensor[(7, 13, 2), int16] */;
    (%335,)
  };
  %336(%var_7751) /* ty=(Tensor[(7, 13, 2), int16],) */
}

def @func_5957() -> Tensor[(3, 7, 8), float32] {
  %337 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %337.0
}

def @func_3807() -> Tensor[(3, 7, 8), bool] {
  %338 = fn () -> Tensor[(3, 7, 8), bool] {
    @func_2519() /* ty=Tensor[(3, 7, 8), bool] */
  };
  %338() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_5160(%var_5158: Tensor[(150), float64]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  @func_5157(%var_5158) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) */
}

def @func_1932() -> (Tensor[(3, 7, 8), bool],) {
  @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_3799() -> (Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) {
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %340 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 4), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 4), uint32] */;
  %344 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(11, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 2, 4), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 4), uint32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %347 = divide(%341, %342) /* ty=Tensor[(11, 2, 4), float32] */;
  %348 = multiply(%345, %346) /* ty=Tensor[(11, 2, 4), uint32] */;
  (%347, %348)
}

def @func_3682() -> Tensor[(3, 7, 8), float64] {
  %350 = fn () -> Tensor[(3, 7, 8), float64] {
    %349 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
    %349.0
  };
  %350() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_5829() -> (Tensor[(3, 7, 8), float32],) {
  %351 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %352 = %351.0;
  (%352,)
}

def @func_4809() -> (Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_5023() -> Tensor[(3, 7, 8), bool] {
  %354 = fn () -> Tensor[(3, 7, 8), bool] {
    %353 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %353.0
  };
  %354() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_8451(%var_8449: Tensor[(130), uint32], %var_8450: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), float64], Tensor[(2, 5, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(130), bool]) {
  %367 = fn (%var_8393: Tensor[(130), uint32], %var_8430: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), float64], Tensor[(2, 5, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(130), bool]) {
    %355 = cast(%var_8393, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %356 = cast(%var_8393, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %357 = reshape(%355, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
    %358 = reshape(%356, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
    %359 = cast(%var_8430, dtype="bool") /* ty=Tensor[(130), bool] */;
    %360 = shape_of(%var_8393, dtype="int32") /* ty=Tensor[(1), int32] */;
    %361 = cast(%var_8393, dtype="bool") /* ty=Tensor[(130), bool] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?), bool] */;
    %363 = @func_6638() /* ty=Tensor[(3, 7, 8), float64] */;
    %364 = @func_1379(%357, %358) /* ty=Tensor[(2, 5, 13), bool] */;
    %365 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
    %366 = equal(%361, %362) /* ty=Tensor[(130), bool] */;
    (%363, %364, %365, %366)
  };
  %367(%var_8449, %var_8450) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(2, 5, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(130), bool]) */
}

def @func_9350(%var_9348: uint32, %var_9349: Tensor[(130), uint32]) -> (Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) {
  @func_9346(%var_9348, %var_9349) /* ty=(Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) */
}

def @func_5938() -> Tensor[(3, 7, 8), float32] {
  %369 = fn () -> Tensor[(3, 7, 8), float32] {
    %368 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %368.0
  };
  %369() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5959() -> Tensor[(3, 7, 8), float32] {
  @func_5957() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_9525() -> Tensor[(3, 7, 8), float32] {
  @func_9523() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_734(%var_718: Tensor[(3, 4, 13), float64]) -> (Tensor[(3, 4, 13), float64],) {
  %370 = cast(%var_718, dtype="float64") /* ty=Tensor[(3, 4, 13), float64] */;
  %371 = rsqrt(%370) /* ty=Tensor[(3, 4, 13), float64] */;
  (%371,)
}

def @func_5624() -> (Tensor[(3, 7, 8), bool],) {
  @func_5622() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_6638() -> Tensor[(3, 7, 8), float64] {
  %372 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %372.0
}

def @func_7871() -> Tensor[(3, 7, 8), bool] {
  @func_7869() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_1382(%var_1380: Tensor[(2, 5, 13), uint32], %var_1381: Tensor[(2, 5, 13), uint32]) -> Tensor[(2, 5, 13), bool] {
  %377 = fn (%var_1374: Tensor[(2, 5, 13), uint32], %var_1375: Tensor[(2, 5, 13), uint32]) -> Tensor[(2, 5, 13), bool] {
    %373 = cast(%var_1375, dtype="bool") /* ty=Tensor[(2, 5, 13), bool] */;
    %374 = shape_of(%var_1374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%var_1374, dtype="bool") /* ty=Tensor[(2, 5, 13), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%375, %376) /* ty=Tensor[(2, 5, 13), bool] */
  };
  %377(%var_1380, %var_1381) /* ty=Tensor[(2, 5, 13), bool] */
}

def @func_2918() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  %378 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %379 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %380 = %378.1;
  %381 = %379.0;
  (%380, %381)
}

def @func_3720() -> Tensor[(3, 7, 8), float32] {
  %382 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_2573() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %382() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8333(%var_8273: uint16, %var_8327: Tensor[(36), uint32]) -> (Tensor[(3, 7, 8), bool], uint16, Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(8, 8, 5), bool]) {
  %383 = @func_7903() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %384 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %385 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %386 = @func_7315() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %387 = cast(%var_8273, dtype="uint32") /* ty=uint32 */;
  %388 = cast(%var_8327, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %389 = reshape(%387, newshape=[]) /* ty=uint32 */;
  %390 = reshape(%388, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %391 = @func_488(%389, %390) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %392 = cast(%var_8273, dtype="uint16") /* ty=uint16 */;
  %393 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %394 = reshape(%392, newshape=[]) /* ty=uint16 */;
  %395 = reshape(%393, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %396 = @func_707(%394, %395) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %397 = %396.0;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %399 = cos(%398) /* ty=Tensor[(8, 8, 5), float32] */;
  %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), uint16] */, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %401 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%397, dtype="uint64") /* ty=Tensor[(8, 8, 5), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %404 = maximum(%402, %403) /* ty=Tensor[(8, 8, 5), uint64] */;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %406 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%399, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = logical_or(%407, %408) /* ty=Tensor[(8, 8, 5), bool] */;
  %410 = cast(%404, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = %383.0;
  %415 = %384.0;
  %416 = %385.1;
  %417 = @func_5688() /* ty=Tensor[(4, 8, 13), bool] */;
  %418 = %386.1;
  %419 = %391.0;
  %420 = greater(%412, %413) /* ty=Tensor[(8, 8, 5), bool] */;
  (%414, %var_8273, %415, %416, %417, %418, %419, %var_8327, %420)
}

def @func_5077(%var_5075: uint16, %var_5076: Tensor[(320), uint16]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
  @func_5073(%var_5075, %var_5076) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */
}

def @func_2902(%var_2900: Tensor[(3, 7, 8), bool]) -> (Tensor[(3, 7, 8), float32],) {
  @func_2899(%var_2900) /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_5172() -> Tensor[(3, 7, 8), bool] {
  @func_5170() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_7317() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  @func_7315() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */
}

def @func_488(%var_473: uint32, %var_474: Tensor[(4, 9, 1), uint32]) -> (Tensor[(4, 9, 1), bool],) {
  %421 = cast(%var_473, dtype="bool") /* ty=bool */;
  %422 = cast(%var_474, dtype="bool") /* ty=Tensor[(4, 9, 1), bool] */;
  %423 = equal(%421, %422) /* ty=Tensor[(4, 9, 1), bool] */;
  (%423,)
}

def @func_3148() -> Tensor[(3, 7, 8), float32] {
  @func_3146() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8455() -> Tensor[(4, 8, 13), bool] {
  @func_4632() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_107(%var_105: uint8) -> (Tensor[(9, ?, 12), int64],) {
  @func_104(%var_105) /* ty=(Tensor[(9, ?, 12), int64],) */
}

def @func_5073(%var_5069: uint16, %var_5070: Tensor[(320), uint16]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float64], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
  %424 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %425 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %426 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
  %427 = cast(%var_5069, dtype="uint16") /* ty=uint16 */;
  %428 = cast(%var_5070, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %429 = reshape(%427, newshape=[]) /* ty=uint16 */;
  %430 = reshape(%428, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %431 = @func_707(%429, %430) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %432 = %424.0;
  %433 = %425.0;
  %434 = %426.0;
  %435 = %431.0;
  (%432, %433, %434, %435, %var_5069, %var_5070)
}

def @func_8026(%var_8023: Tensor[(130), uint32]) -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(60), bool], Tensor[(2, 5, 13), bool], Tensor[(130), uint32]) {
  %436 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %437 = @func_5622() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %438 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %440 = reshape(%438, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), bool] */;
  %441 = reshape(%439, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), bool] */;
  %442 = @func_6350(%440, %441) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) */;
  %443 = cast(%var_8023, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %444 = cast(%var_8023, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %445 = reshape(%443, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %446 = reshape(%444, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %447 = %436.1;
  %448 = %437.0;
  %449 = %442.1;
  %450 = @func_1379(%445, %446) /* ty=Tensor[(2, 5, 13), bool] */;
  (%447, %448, %449, meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, %450, %var_8023)
}

def @func_6085() -> Tensor[(3, 7, 8), float32] {
  %451 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_5937() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %451() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8203() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  %452 = @func_7260() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) */;
  %453 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %454 = %452.1;
  (%453, %454)
}

def @func_1859() -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) {
  %466 = fn () -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) {
    %455 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
    %458 = acosh(%457) /* ty=Tensor[(3, 7, 8), float32] */;
    %459 = cast(%458, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
    %460 = cast(%456, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %461 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%458, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %464 = cosh(%459) /* ty=Tensor[(3, 7, 8), float64] */;
    %465 = greater(%462, %463) /* ty=Tensor[(3, 7, 8), bool] */;
    (%464, %465)
  };
  %466() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */
}

def @func_7764() -> Tensor[(3, 7, 8), float64] {
  @func_7762() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_8698() -> Tensor[(3, 7, 8), float32] {
  @func_8696() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8576() -> (Tensor[(3, 7, 8), bool],) {
  %467 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
  (%467,)
}

def @func_3409(%var_3407: Tensor[(70), float32], %var_3408: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(5, 10, 11), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(1050, 1), float32]) {
  %478 = fn (%var_3394: Tensor[(70), float32], %var_3395: Tensor[(1050, 1), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(5, 10, 11), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(1050, 1), float32]) {
    %468 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %470 = cast(%var_3394, dtype="float32") /* ty=Tensor[(70), float32] */;
    %471 = cast(%var_3395, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
    %472 = reshape(%469, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
    %473 = reshape(%470, newshape=[70]) /* ty=Tensor[(70), float32] */;
    %474 = reshape(%471, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
    %475 = @func_1956(%472, %473, %474) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
    %476 = %468.0;
    %477 = %475.3;
    (%476, %477, meta[relay.Constant][24] /* ty=Tensor[(550), float64] */, %var_3394, %var_3395)
  };
  %478(%var_3407, %var_3408) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(5, 10, 11), bool], Tensor[(550), float64], Tensor[(70), float32], Tensor[(1050, 1), float32]) */
}

def @func_7869() -> Tensor[(3, 7, 8), bool] {
  @func_6270() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_8759() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %479 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %480 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %481 = @func_7315() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %482 = %479.0;
  %483 = %480.2;
  %484 = %481.2;
  (%482, %483, %484)
}

def @func_3801() -> (Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) {
  @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */
}

def @func_5688() -> Tensor[(4, 8, 13), bool] {
  @func_4632() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_1930() -> (Tensor[(3, 7, 8), bool],) {
  %485 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %486 = %485.0;
  (%486,)
}

def @func_4682() -> Tensor[(13, 13, 5), float64] {
  %488 = fn () -> Tensor[(13, 13, 5), float64] {
    %487 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    log(%487) /* ty=Tensor[(13, 13, 5), float64] */
  };
  %488() /* ty=Tensor[(13, 13, 5), float64] */
}

def @func_6601(%var_6491: uint16, %var_6492: Tensor[(320, 1), uint16], %var_6505: Tensor[(128), float32], %var_6521: Tensor[(2, 48), int8]) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320, 1), uint16], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(2, 8, 2), float32], Tensor[(32), float64], Tensor[(3, 7, 8), bool], uint32, Tensor[(128), float32], Tensor[(3, 7, 8), float32], Tensor[(9, ?, 12), int64], Tensor[(16), int8], Tensor[(1485), int16], Tensor[(2, 48), int8], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(5, 110), float64], Tensor[(16), int64]) {
  %489 = @func_6282() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %490 = cast(%var_6491, dtype="uint16") /* ty=uint16 */;
  %491 = cast(%var_6492, dtype="uint16") /* ty=Tensor[(320, 1), uint16] */;
  %492 = reshape(%490, newshape=[]) /* ty=uint16 */;
  %493 = reshape(%491, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
  %494 = @func_707(%492, %493) /* ty=(Tensor[(8, 8, 5), bool],) */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %496 = reshape(%495, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %497 = @func_4422(%496) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */;
  %498 = cast(meta[relay.Constant][27] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %499 = cast(meta[relay.Constant][27] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %500 = reshape(%498, newshape=[2, 8, 2]) /* ty=Tensor[(2, 8, 2), float64] */;
  %501 = reshape(%499, newshape=[2, 8, 2]) /* ty=Tensor[(2, 8, 2), float64] */;
  %502 = @func_2419(%500, %501) /* ty=(Tensor[(2, 8, 2), float32],) */;
  %503 = cast(%var_6505, dtype="float32") /* ty=Tensor[(128), float32] */;
  %504 = cast(%var_6491, dtype="uint32") /* ty=uint32 */;
  %505 = reshape(%503, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %506 = reshape(%504, newshape=[]) /* ty=uint32 */;
  %507 = @func_1131(%505, %506) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %508 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %509 = cast(meta[relay.Constant][28] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %510 = %507.1;
  %511 = cast(%510, dtype="uint8") /* ty=uint8 */;
  %512 = cast(%var_6505, dtype="float32") /* ty=Tensor[(128), float32] */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %514 = %497.1;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(70), float32] */;
  %516 = cast(%var_6521, dtype="int8") /* ty=Tensor[(2, 48), int8] */;
  %517 = reshape(%509, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int8] */;
  %518 = reshape(%511, newshape=[]) /* ty=uint8 */;
  %519 = reshape(%512, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %520 = reshape(%513, newshape=[15, 99]) /* ty=Tensor[(15, 99), int16] */;
  %521 = reshape(%515, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
  %522 = reshape(%516, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), int8] */;
  %523 = @func_2118(%517, %518, %519, %520, %521, %522) /* ty=(Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) */;
  %524 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %525 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 110), float64] */, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %526 = cast(meta[relay.Constant][28] /* ty=Tensor[(16), int8] */, dtype="int64") /* ty=Tensor[(16), int64] */;
  %527 = reshape(%525, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %528 = reshape(%526, newshape=[16]) /* ty=Tensor[(16), int64] */;
  %529 = @func_3649(%527, %528) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %530 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 110), float64] */, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %531 = cast(meta[relay.Constant][28] /* ty=Tensor[(16), int8] */, dtype="int64") /* ty=Tensor[(16), int64] */;
  %532 = reshape(%530, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %533 = reshape(%531, newshape=[16]) /* ty=Tensor[(16), int64] */;
  %534 = @func_3649(%532, %533) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %535 = %489.0;
  %536 = %494.0;
  %537 = %502.0;
  %538 = @func_6073() /* ty=Tensor[(3, 7, 8), bool] */;
  %539 = %508.0;
  %540 = %523.1;
  %541 = %524.0;
  %542 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  %543 = %529.7;
  %544 = %534.6;
  (%535, %536, %var_6491, %var_6492, %514, meta[relay.Constant][26] /* ty=Tensor[(1050), float32] */, %537, meta[relay.Constant][27] /* ty=Tensor[(32), float64] */, %538, %510, %var_6505, %539, %540, meta[relay.Constant][28] /* ty=Tensor[(16), int8] */, meta[relay.Constant][29] /* ty=Tensor[(1485), int16] */, %var_6521, %541, %542, %543, meta[relay.Constant][30] /* ty=Tensor[(5, 110), float64] */, %544)
}

def @func_4634() -> Tensor[(4, 8, 13), bool] {
  @func_4632() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_4154() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  @func_4152() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */
}

def @func_8841() -> Tensor[(10, 8, 15), float64] {
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 15), float64] */;
  cos(%545) /* ty=Tensor[(10, 8, 15), float64] */
}

def @func_5120() -> (Tensor[(3, 7, 8), float64],) {
  @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */
}

def @func_4575(%var_4571: Tensor[(14, 5, 1), uint16], %var_4572: Tensor[(14, 5, 1), uint16], %var_4573: uint32, %var_4574: Tensor[(14, 5, 5), uint16]) -> (Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) {
  @func_4569(%var_4571, %var_4572, %var_4573, %var_4574) /* ty=(Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) */
}

def @func_6075() -> Tensor[(3, 7, 8), bool] {
  @func_6073() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_5273() -> (Tensor[(3, 7, 8), bool],) {
  %547 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %546 = @func_5022() /* ty=Tensor[(3, 7, 8), bool] */;
    (%546,)
  };
  %547() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_5344(%var_5292: Tensor[(550), float64], %var_5293: Tensor[(7, 10), float32], %var_5338: Tensor[(350), uint16], %var_5340: Tensor[(550), float64]) -> (Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) {
  %548 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %549 = cast(%var_5292, dtype="float64") /* ty=Tensor[(550), float64] */;
  %550 = cast(%var_5293, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %552 = reshape(%549, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %553 = reshape(%550, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %554 = reshape(%551, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %555 = @func_1956(%552, %553, %554) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %556 = %555.1;
  %557 = cast(%556, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %558 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 105), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %559 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 105), float32] */, dtype="bool") /* ty=Tensor[(10, 105), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %561 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %562 = cast(%var_5293, dtype="uint16") /* ty=Tensor[(7, 10), uint16] */;
  %563 = cast(%var_5293, dtype="uint16") /* ty=Tensor[(7, 10), uint16] */;
  %564 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %565 = cast(%var_5338, dtype="uint16") /* ty=Tensor[(350), uint16] */;
  %566 = reshape(%562, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), uint16] */;
  %567 = reshape(%563, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), uint16] */;
  %568 = reshape(%564, newshape=[]) /* ty=uint32 */;
  %569 = reshape(%565, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint16] */;
  %570 = @func_4569(%566, %567, %568, %569) /* ty=(Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) */;
  %571 = cast(%var_5340, dtype="bool") /* ty=Tensor[(550), bool] */;
  %572 = shape_of(%var_5292, dtype="int32") /* ty=Tensor[(1), int32] */;
  %573 = cast(%var_5292, dtype="bool") /* ty=Tensor[(550), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), bool] */;
  %575 = %548.0;
  %576 = less(%559, %560) /* ty=Tensor[(10, 105), bool] */;
  %577 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
  %578 = %561.1;
  %579 = %570.4;
  %580 = greater_equal(%573, %574) /* ty=Tensor[(550), bool] */;
  (%575, %var_5293, %576, %577, %578, %579, meta[relay.Constant][33] /* ty=uint32 */, %var_5338, %580)
}

def @func_4087(%var_4085: Tensor[(2, 252), float32], %var_4086: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(9, 14, 4), uint16], Tensor[(2, 252), float32], uint32) {
  @func_4083(%var_4085, %var_4086) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(9, 14, 4), uint16], Tensor[(2, 252), float32], uint32) */
}

def @func_8222() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  @func_8220() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_2125(%var_2119: Tensor[(1, 1, 16), int8], %var_2120: uint8, %var_2121: Tensor[(128), float32], %var_2122: Tensor[(15, 99), int16], %var_2123: Tensor[(70, 1), float32], %var_2124: Tensor[(3, 2, 16), int8]) -> (Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) {
  %632 = fn (%var_2025: Tensor[(1, 1, 16), int8], %var_2033: uint8, %var_2051: Tensor[(128), float32], %var_2081: Tensor[(15, 99), int16], %var_2086: Tensor[(70, 1), float32], %var_2103: Tensor[(3, 2, 16), int8]) -> (Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) {
    %581 = cast(%var_2025, dtype="int8") /* ty=Tensor[(1, 1, 16), int8] */;
    %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 5, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 5, 16), int8] */;
    %583 = cast(%var_2033, dtype="uint8") /* ty=uint8 */;
    %584 = reshape(%583, newshape=[]) /* ty=uint8 */;
    %585 = @func_104(%584) /* ty=(Tensor[(9, ?, 12), int64],) */;
    %586 = cast(%var_2051, dtype="float32") /* ty=Tensor[(128), float32] */;
    %587 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
    %588 = reshape(%586, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
    %589 = reshape(%587, newshape=[]) /* ty=uint32 */;
    %590 = @func_1131(%588, %589) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
    %591 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
    %592 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
    %593 = reshape(%591, newshape=[]) /* ty=uint32 */;
    %594 = reshape(%592, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
    %595 = @func_488(%593, %594) /* ty=(Tensor[(4, 9, 1), bool],) */;
    %596 = cast(%var_2081, dtype="int16") /* ty=Tensor[(15, 99), int16] */;
    %597 = cast(%var_2081, dtype="int16") /* ty=Tensor[(15, 99), int16] */;
    %598 = reshape(%596, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %599 = reshape(%597, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int16] */;
    %600 = @func_1651(%598, %599) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */;
    %601 = cast(meta[relay.Constant][36] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %602 = cast(%var_2086, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
    %603 = cast(meta[relay.Constant][37] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %604 = reshape(%601, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
    %605 = reshape(%602, newshape=[70]) /* ty=Tensor[(70), float32] */;
    %606 = reshape(%603, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
    %607 = @func_1956(%604, %605, %606) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
    %608 = cast(%var_2025, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
    %609 = cast(%var_2103, dtype="int32") /* ty=Tensor[(3, 2, 16), int32] */;
    %610 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %611 = %610.0;
    %612 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %613 = %612.0;
    %614 = cast(%613, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %615 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
    %616 = cast(%611, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %618 = %590.3;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
    %620 = cast(%var_2033, dtype="uint32") /* ty=uint32 */;
    %621 = reshape(%619, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
    %622 = reshape(%620, newshape=[]) /* ty=uint32 */;
    %623 = @func_1131(%621, %622) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
    %624 = bitwise_xor(%581, %582) /* ty=Tensor[(7, 5, 16), int8] */;
    %625 = %585.0;
    %626 = %595.0;
    %627 = %600.0;
    %628 = %607.0;
    %629 = bitwise_and(%608, %609) /* ty=Tensor[(3, 2, 16), int32] */;
    %630 = equal(%616, %617) /* ty=Tensor[(3, 7, 8), bool] */;
    %631 = %623.2;
    (%624, %625, %var_2033, %618, %var_2051, %626, meta[relay.Constant][35] /* ty=Tensor[(36), uint32] */, %627, %var_2081, %628, meta[relay.Constant][36] /* ty=Tensor[(550), float64] */, %var_2086, meta[relay.Constant][37] /* ty=Tensor[(1050), float32] */, %629, %630, %631)
  };
  %632(%var_2119, %var_2120, %var_2121, %var_2122, %var_2123, %var_2124) /* ty=(Tensor[(7, 5, 16), int8], Tensor[(9, ?, 12), int64], uint8, Tensor[(16, 2, 4), float32], Tensor[(128), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(15, 9, 11), int16], Tensor[(15, 99), int16], Tensor[(70), float32], Tensor[(550), float64], Tensor[(70, 1), float32], Tensor[(1050), float32], Tensor[(3, 2, 16), int32], Tensor[(3, 7, 8), bool], Tensor[(36), uint32]) */
}

def @func_6163() -> Tensor[(3, 7, 8), float32] {
  %633 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %633.0
}

def @func_8205() -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) {
  @func_8203() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_5745() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %634 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %635 = %634.0;
  %636 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  (%635, %636)
}

def @func_1134(%var_1132: Tensor[(16, 2, 4), float32], %var_1133: uint32) -> (Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) {
  %647 = fn (%var_1095: Tensor[(16, 2, 4), float32], %var_1100: uint32) -> (Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) {
    %637 = cast(%var_1100, dtype="uint32") /* ty=uint32 */;
    %638 = cast(meta[relay.Constant][38] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
    %639 = reshape(%637, newshape=[]) /* ty=uint32 */;
    %640 = reshape(%638, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
    %641 = @func_488(%639, %640) /* ty=(Tensor[(4, 9, 1), bool],) */;
    %642 = cast(%var_1095, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
    %643 = atan(%642) /* ty=Tensor[(16, 2, 4), float32] */;
    %644 = cast(%643, dtype="float32") /* ty=Tensor[(16, 2, 4), float32] */;
    %645 = %641.0;
    %646 = rsqrt(%644) /* ty=Tensor[(16, 2, 4), float32] */;
    (%645, %var_1100, meta[relay.Constant][38] /* ty=Tensor[(36), uint32] */, %646)
  };
  %647(%var_1132, %var_1133) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */
}

def @func_1961(%var_1958: Tensor[(5, 10, 11), float64], %var_1959: Tensor[(70), float32], %var_1960: Tensor[(1050), float32]) -> (Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) {
  @func_1956(%var_1958, %var_1959, %var_1960) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */
}

def @func_2899(%var_2889: Tensor[(3, 7, 8), bool]) -> (Tensor[(3, 7, 8), float32],) {
  %648 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %649 = %648.0;
  %650 = cast(%var_2889, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %654 = minimum(%652, %653) /* ty=Tensor[(3, 7, 8), float32] */;
  (%654,)
}

def @func_2183() -> Tensor[(3, 7, 8), float32] {
  %656 = fn () -> Tensor[(3, 7, 8), float32] {
    %655 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %655.0
  };
  %656() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_9547() -> Tensor[(3, 7, 8), bool] {
  @func_6073() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_7762() -> Tensor[(3, 7, 8), float64] {
  @func_3681() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_2347(%var_2345: Tensor[(3, 7, 8), bool]) -> (Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) {
  @func_2344(%var_2345) /* ty=(Tensor[(2, 5, 13), bool], Tensor[(130, 1), float64], Tensor[(3, 7, 8), uint16]) */
}

def @func_1446(%var_1424: Tensor[(9, 14, 4), float32], %var_1444: uint32) -> (Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) {
  %657 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %658 = shape_of(%var_1424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_1424, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %661 = subtract(%659, %660) /* ty=Tensor[(9, 14, 4), float32] */;
  %662 = cast(%661, dtype="uint16") /* ty=Tensor[(9, 14, 4), uint16] */;
  %663 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 4), float32] */, dtype="uint16") /* ty=Tensor[(9, 14, 4), uint16] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %666 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 32), float32] */, dtype="float32") /* ty=Tensor[(4, 32), float32] */;
  %667 = cast(%var_1444, dtype="uint32") /* ty=uint32 */;
  %668 = reshape(%666, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %669 = reshape(%667, newshape=[]) /* ty=uint32 */;
  %670 = @func_1131(%668, %669) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %671 = bitwise_xor(%664, %665) /* ty=Tensor[(9, 14, 4), uint16] */;
  %672 = %670.3;
  (%671, %672, meta[relay.Constant][40] /* ty=Tensor[(4, 32), float32] */, %var_1444)
}

def @func_1802() -> (Tensor[(3, 7, 8), bool],) {
  @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_9595() -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32], Tensor[(4, 8, 13), bool]) {
  @func_9593() /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32], Tensor[(4, 8, 13), bool]) */
}

def @func_8086() -> Tensor[(3, 7, 8), float32] {
  %673 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_3907() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %673() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7315() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %674 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %675 = @func_3664() /* ty=(Tensor[(3, 7, 8), float64],) */;
  %676 = %674.1;
  %677 = @func_5937() /* ty=Tensor[(3, 7, 8), float32] */;
  %678 = %675.0;
  (%676, %677, %678)
}

def @func_4422(%var_4401: Tensor[(1050), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) {
  %679 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %680 = cast(meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %681 = cast(meta[relay.Constant][41] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %682 = cast(%var_4401, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %683 = reshape(%680, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float64] */;
  %684 = reshape(%681, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %685 = reshape(%682, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %686 = @func_1956(%683, %684, %685) /* ty=(Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) */;
  %687 = %686.3;
  %688 = cast(%687, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %689 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %690 = cast(meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, dtype="bool") /* ty=Tensor[(550), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), bool] */;
  %692 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %693 = %679.0;
  %694 = logical_and(%690, %691) /* ty=Tensor[(550), bool] */;
  %695 = %692.0;
  (%693, meta[relay.Constant][41] /* ty=Tensor[(70), float32] */, %var_4401, %694, %695)
}

def @func_10028() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %696 = @func_8593() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %697 = @func_7421() /* ty=(Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %698 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %699 = @func_6270() /* ty=Tensor[(3, 7, 8), bool] */;
  %700 = %696.0;
  %701 = %697.1;
  %702 = %698.0;
  (%699, %700, %701, %702)
}

def @func_2675() -> (Tensor[(3, 7, 8), float32],) {
  %704 = fn () -> (Tensor[(3, 7, 8), float32],) {
    %703 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
    (%703,)
  };
  %704() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_3103() -> Tensor[(3, 7, 8), bool] {
  %706 = fn () -> Tensor[(3, 7, 8), bool] {
    %705 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %705.0
  };
  %706() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_7141() -> (Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) {
  @func_7139() /* ty=(Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) */
}

def @func_6165() -> Tensor[(3, 7, 8), float32] {
  @func_6163() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7823() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  @func_7821() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */
}

def @func_3284(%var_3282: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) {
  @func_3281(%var_3282) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) */
}

def @func_5622() -> (Tensor[(3, 7, 8), bool],) {
  %707 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
  (%707,)
}

def @func_7601() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  @func_7599() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_3908() -> Tensor[(3, 7, 8), float32] {
  %709 = fn () -> Tensor[(3, 7, 8), float32] {
    %708 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %708.0
  };
  %709() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_6210(%var_6209: Tensor[(858), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(13, 6, 11), float64], Tensor[(858), float64], Tensor[(4, 8, 13), bool]) {
  %717 = fn (%var_6190: Tensor[(858), float64]) -> (Tensor[(3, 7, 8), bool], Tensor[(13, 6, 11), float64], Tensor[(858), float64], Tensor[(4, 8, 13), bool]) {
    %710 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %711 = cast(%var_6190, dtype="float64") /* ty=Tensor[(858), float64] */;
    %712 = reshape(%711, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), float64] */;
    %713 = @func_3129(%712) /* ty=(Tensor[(13, 6, 11), float64],) */;
    %714 = %710.0;
    %715 = %713.0;
    %716 = @func_5688() /* ty=Tensor[(4, 8, 13), bool] */;
    (%714, %715, %var_6190, %716)
  };
  %717(%var_6209) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(13, 6, 11), float64], Tensor[(858), float64], Tensor[(4, 8, 13), bool]) */
}

def @func_7421() -> (Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %718 = @func_7139() /* ty=(Tensor[(11, 2, 4), uint32], Tensor[(858), uint64]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(858), float32] */;
  %721 = sinh(%720) /* ty=Tensor[(858), float32] */;
  %722 = cast(%719, dtype="int16") /* ty=Tensor[(858), int16] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(1), int32] */;
  %724 = cast(%721, dtype="int16") /* ty=Tensor[(858), int16] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?), int16] */;
  %726 = @func_6131() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %727 = right_shift(%724, %725) /* ty=Tensor[(858), int16] */;
  %728 = %726.0;
  %729 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  (%727, %728, %729)
}

def @func_7261() -> (Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) {
  %733 = fn () -> (Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) {
    %730 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
    %731 = %730.0;
    %732 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
    (%731, %732)
  };
  %733() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_10166() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %736 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
    %734 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
    %735 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_6880() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  @func_6878() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) */
}

def @func_1654(%var_1652: Tensor[(15, 9, 11), int16], %var_1653: Tensor[(15, 9, 11), int16]) -> (Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) {
  %744 = fn (%var_1634: Tensor[(15, 9, 11), int16], %var_1635: Tensor[(15, 9, 11), int16]) -> (Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) {
    %737 = cast(%var_1635, dtype="int16") /* ty=Tensor[(15, 9, 11), int16] */;
    %738 = shape_of(%var_1634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(%var_1634, dtype="int16") /* ty=Tensor[(15, 9, 11), int16] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %741 = cast(%var_1635, dtype="float64") /* ty=Tensor[(15, 9, 11), float64] */;
    %742 = add(%739, %740) /* ty=Tensor[(15, 9, 11), int16] */;
    %743 = acosh(%741) /* ty=Tensor[(15, 9, 11), float64] */;
    (%742, %743)
  };
  %744(%var_1652, %var_1653) /* ty=(Tensor[(15, 9, 11), int16], Tensor[(15, 9, 11), float64]) */
}

def @func_2559() -> (Tensor[(3, 7, 8), float32],) {
  @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_4034() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %749 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
    %745 = @func_2965() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %746 = %745.0;
    %747 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
    %748 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
    (%746, %747, %748)
  };
  %749() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_6878() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool]) {
  %750 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %751 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %752 = %750.0;
  %753 = @func_5886() /* ty=Tensor[(3, 7, 8), float64] */;
  %754 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %755 = %751.0;
  (%752, %753, %754, %755)
}

def @func_9244(%var_9241: Tensor[(70), float32], %var_9242: Tensor[(35, 10), uint16], %var_9243: Tensor[(35, 10), uint16]) -> (Tensor[(3, 7, 8), bool], Tensor[(10, 105), bool], Tensor[(550, 1), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float64], Tensor[(35, 10), uint64]) {
  @func_9239(%var_9241, %var_9242, %var_9243) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(10, 105), bool], Tensor[(550, 1), float64], Tensor[(70), float32], Tensor[(3, 7, 8), float64], Tensor[(35, 10), uint64]) */
}

def @func_4947() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) {
  @func_4945() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) */
}

def @func_6945(%var_6942: Tensor[(4, 14, 3), int16], %var_6943: Tensor[(10, 6, 12), uint8], %var_6944: Tensor[(4, 14, 3), int16]) -> (Tensor[(4, 14, 3), int16], Tensor[(9, ?, 12), int64], Tensor[(10, 6, 12), float32], Tensor[(13, 13, 5), float64], Tensor[(3, 7, 8), bool], Tensor[(4, 14, 3), float64], Tensor[(4, 14, 3), float32]) {
  %780 = fn (%var_6881: Tensor[(4, 14, 3), int16], %var_6901: Tensor[(10, 6, 12), uint8], %var_6921: Tensor[(4, 14, 3), int16]) -> (Tensor[(4, 14, 3), int16], Tensor[(9, ?, 12), int64], Tensor[(10, 6, 12), float32], Tensor[(13, 13, 5), float64], Tensor[(3, 7, 8), bool], Tensor[(4, 14, 3), float64], Tensor[(4, 14, 3), float32]) {
    %756 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 14, 3), int16] */;
    %757 = shape_of(%var_6881, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%var_6881, dtype="int16") /* ty=Tensor[(4, 14, 3), int16] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %760 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %761 = reshape(%760, newshape=[]) /* ty=uint8 */;
    %762 = @func_104(%761) /* ty=(Tensor[(9, ?, 12), int64],) */;
    %763 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
    %764 = cast(%var_6901, dtype="float32") /* ty=Tensor[(10, 6, 12), float32] */;
    %765 = @func_4152() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
    %766 = cast(%var_6921, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
    %767 = shape_of(%var_6881, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%var_6881, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %770 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 3), int16] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
    %771 = acos(%770) /* ty=Tensor[(4, 14, 3), float32] */;
    %772 = cast(%771, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
    %773 = bitwise_or(%758, %759) /* ty=Tensor[(4, 14, 3), int16] */;
    %774 = %762.0;
    %775 = floor_mod(%763, %764) /* ty=Tensor[(10, 6, 12), float32] */;
    %776 = @func_4681() /* ty=Tensor[(13, 13, 5), float64] */;
    %777 = %765.1;
    %778 = divide(%768, %769) /* ty=Tensor[(4, 14, 3), float64] */;
    %779 = exp(%772) /* ty=Tensor[(4, 14, 3), float32] */;
    (%773, %774, %775, %776, %777, %778, %779)
  };
  %780(%var_6942, %var_6943, %var_6944) /* ty=(Tensor[(4, 14, 3), int16], Tensor[(9, ?, 12), int64], Tensor[(10, 6, 12), float32], Tensor[(13, 13, 5), float64], Tensor[(3, 7, 8), bool], Tensor[(4, 14, 3), float64], Tensor[(4, 14, 3), float32]) */
}

def @func_1956(%var_1936: Tensor[(5, 10, 11), float64], %var_1940: Tensor[(70), float32], %var_1941: Tensor[(1050), float32]) -> (Tensor[(70), float32], Tensor[(1050), float32], Tensor[(15, 7, 10), float32], Tensor[(5, 10, 11), bool]) {
  %781 = cast(%var_1940, dtype="float32") /* ty=Tensor[(70), float32] */;
  %782 = cast(%var_1941, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %783 = reshape(%781, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), float32] */;
  %784 = reshape(%782, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float32] */;
  %785 = @func_1721(%783, %784) /* ty=Tensor[(15, 7, 10), float32] */;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %787 = cast(%var_1936, dtype="float64") /* ty=Tensor[(5, 10, 11), float64] */;
  %788 = sin(%787) /* ty=Tensor[(5, 10, 11), float64] */;
  %789 = cast(%var_1936, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = sin(%786) /* ty=Tensor[(15, 7, 10), float32] */;
  %794 = less(%791, %792) /* ty=Tensor[(5, 10, 11), bool] */;
  (%var_1940, %var_1941, %793, %794)
}

def @func_9523() -> Tensor[(3, 7, 8), float32] {
  @func_8085() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8696() -> Tensor[(3, 7, 8), float32] {
  %795 = @func_5829() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  log2(%797) /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5350(%var_5346: Tensor[(550), float64], %var_5347: Tensor[(7, 10), float32], %var_5348: Tensor[(350), uint16], %var_5349: Tensor[(550), float64]) -> (Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) {
  @func_5344(%var_5346, %var_5347, %var_5348, %var_5349) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(7, 10), float32], Tensor[(10, 105), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(14, 5, 5), bool], uint32, Tensor[(350), uint16], Tensor[(550), bool]) */
}

def @func_9831(%var_9806: uint32) -> (Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(4, 9, 1), bool], Tensor[(128), float32], uint32, Tensor[(3, 7, 8), bool]) {
  %798 = @func_8220() /* ty=(Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32]) */;
  %799 = @func_7705() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %800 = cast(meta[relay.Constant][45] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %801 = cast(%var_9806, dtype="uint32") /* ty=uint32 */;
  %802 = reshape(%800, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %803 = reshape(%801, newshape=[]) /* ty=uint32 */;
  %804 = @func_1131(%802, %803) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %805 = %798.0;
  %806 = %799.0;
  %807 = %804.0;
  %808 = @func_9106() /* ty=Tensor[(3, 7, 8), bool] */;
  (%805, %806, %807, meta[relay.Constant][45] /* ty=Tensor[(128), float32] */, %var_9806, %808)
}

def @func_5995() -> Tensor[(3, 7, 8), float32] {
  %810 = fn () -> Tensor[(3, 7, 8), float32] {
    %809 = @func_5554() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %809.0
  };
  %810() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_1772() -> (Tensor[(3, 7, 8), float32],) {
  %811 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %812 = cos(%811) /* ty=Tensor[(3, 7, 8), float32] */;
  (%812,)
}

def @func_6664(%var_6663: Tensor[(6, 28), bool]) -> (Tensor[(8, 8, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(6, 28), bool], Tensor[(3, 7, 8), float32]) {
  %821 = fn (%var_6651: Tensor[(6, 28), bool]) -> (Tensor[(8, 8, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(6, 28), bool], Tensor[(3, 7, 8), float32]) {
    %813 = @func_5501() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */;
    %814 = cast(%var_6651, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
    %815 = reshape(%814, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), bool] */;
    %816 = @func_2899(%815) /* ty=(Tensor[(3, 7, 8), float32],) */;
    %817 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %818 = %813.2;
    %819 = %816.0;
    %820 = %817.0;
    (%818, %819, %var_6651, %820)
  };
  %821(%var_6663) /* ty=(Tensor[(8, 8, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(6, 28), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_3378(%var_3376: Tensor[(550), float64], %var_3377: Tensor[(1, 70), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) {
  @func_3374(%var_3376, %var_3377) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */
}

def @func_6283() -> (Tensor[(3, 7, 8), bool],) {
  %824 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %822 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
    %823 = %822.1;
    (%823,)
  };
  %824() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_8594() -> (Tensor[(3, 7, 8), float32],) {
  %826 = fn () -> (Tensor[(3, 7, 8), float32],) {
    %825 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
    (%825,)
  };
  %826() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_8337(%var_8335: uint16, %var_8336: Tensor[(36), uint32]) -> (Tensor[(3, 7, 8), bool], uint16, Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(8, 8, 5), bool]) {
  @func_8333(%var_8335, %var_8336) /* ty=(Tensor[(3, 7, 8), bool], uint16, Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], Tensor[(36), uint32], Tensor[(8, 8, 5), bool]) */
}

def @func_6735(%var_6733: Tensor[(15, 10, 15), int32], %var_6734: Tensor[(15, 10, 15), int32]) -> Tensor[(15, 10, 15), int32] {
  @func_6731(%var_6733, %var_6734) /* ty=Tensor[(15, 10, 15), int32] */
}

def @main(%var_10250: Tensor[(11, 2, 4), float32]) -> (Tensor[(11, 2, 4), bool],) {
  %827 = @func_4918() /* ty=(Tensor[(11, 2, 4), float32],) */;
  %828 = %827.0;
  %829 = cast(%var_10250, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %833 = greater(%831, %832) /* ty=Tensor[(11, 2, 4), bool] */;
  (%833,)
}

def @func_5118() -> (Tensor[(3, 7, 8), float64],) {
  %834 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  (%834,)
}

def @func_8761() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  @func_8759() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */
}

def @func_4569(%var_4538: Tensor[(14, 5, 1), uint16], %var_4539: Tensor[(14, 5, 1), uint16], %var_4546: uint32, %var_4548: Tensor[(14, 5, 5), uint16]) -> (Tensor[(14, 5, ?), uint16], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(14, 5, 5), bool], Tensor[(3, 7, 8), float32], Tensor[(16, 2, 4), float32]) {
  %835 = cast(%var_4539, dtype="uint16") /* ty=Tensor[(14, 5, 1), uint16] */;
  %836 = shape_of(%var_4538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_4538, dtype="uint16") /* ty=Tensor[(14, 5, 1), uint16] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %839 = cast(meta[relay.Constant][47] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %840 = cast(%var_4546, dtype="uint32") /* ty=uint32 */;
  %841 = reshape(%839, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %842 = reshape(%840, newshape=[]) /* ty=uint32 */;
  %843 = @func_1446(%841, %842) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %844 = cast(%var_4538, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
  %845 = cast(%var_4548, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %846 = @func_4196() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %847 = %843.2;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(4, 32), float32] */;
  %849 = cast(%var_4546, dtype="uint32") /* ty=uint32 */;
  %850 = reshape(%848, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %851 = reshape(%849, newshape=[]) /* ty=uint32 */;
  %852 = @func_1131(%850, %851) /* ty=(Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(16, 2, 4), float32]) */;
  %853 = logical_xor(%837, %838) /* ty=Tensor[(14, 5, ?), uint16] */;
  %854 = equal(%844, %845) /* ty=Tensor[(14, 5, 5), bool] */;
  %855 = %846.0;
  %856 = %852.3;
  (%853, %847, meta[relay.Constant][47] /* ty=Tensor[(504), float32] */, %var_4546, %854, %855, %856)
}

def @func_1604(%var_1599: Tensor[(1, 16), int64]) -> Tensor[(?, 16), bool] {
  %857 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 16), int64] */, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %858 = shape_of(%var_1599, dtype="int32") /* ty=Tensor[(2), int32] */;
  %859 = cast(%var_1599, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  equal(%859, %860) /* ty=Tensor[(?, 16), bool] */
}

def @func_9549() -> Tensor[(3, 7, 8), bool] {
  @func_9547() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_104(%var_50: uint8) -> (Tensor[(9, ?, 12), int64],) {
  %861 = cast(%var_50, dtype="bool") /* ty=bool */;
  %862 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 1, 12), uint8] */, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %863 = less(%861, %862) /* ty=Tensor[(9, 1, 12), bool] */;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %865 = atanh(%864) /* ty=Tensor[(9, 1, 12), float64] */;
  %866 = cast(%863, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %870 = mod(%868, %869) /* ty=Tensor[(9, ?, 12), float64] */;
  %871 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 1, 12), uint8] */, dtype="int64") /* ty=Tensor[(9, 1, 12), int64] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="int64") /* ty=Tensor[(9, ?, 12), int64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %875 = logical_xor(%873, %874) /* ty=Tensor[(9, ?, 12), int64] */;
  (%875,)
}

def @func_8533() -> Tensor[(3, 7, 8), float32] {
  %877 = fn () -> Tensor[(3, 7, 8), float32] {
    %876 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
    %876.1
  };
  %877() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8933() -> Tensor[(3, 7, 8), float32] {
  @func_8931() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_8373() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %881 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
    %878 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %879 = %878.0;
    %880 = @func_5880() /* ty=Tensor[(3, 7, 8), float32] */;
    (%879, %880)
  };
  %881() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */
}

def @func_9172() -> (Tensor[(3, 7, 8), bool],) {
  %882 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %883 = %882.0;
  (%883,)
}

def @func_6350(%var_6338: Tensor[(5, 2, 6), bool], %var_6345: Tensor[(5, 2, 6), bool]) -> (Tensor[(3, 7, 8), bool], Tensor[(5, 2, 6), bool], Tensor[(5, 2, 6), bool]) {
  %884 = @func_5272() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %885 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %886 = cos(%885) /* ty=Tensor[(5, 2, 6), float64] */;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %888 = acos(%887) /* ty=Tensor[(5, 2, 6), float32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%888, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %893 = not_equal(%891, %892) /* ty=Tensor[(5, 2, 6), bool] */;
  %894 = cast(%var_6338, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %898 = cast(%var_6345, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %899 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%893, dtype="bool") /* ty=Tensor[(5, 2, 6), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %902 = %884.0;
  %903 = less_equal(%896, %897) /* ty=Tensor[(5, 2, 6), bool] */;
  %904 = logical_and(%900, %901) /* ty=Tensor[(5, 2, 6), bool] */;
  (%902, %903, %904)
}

def @func_2574() -> Tensor[(3, 7, 8), float32] {
  %905 = fn () -> Tensor[(3, 7, 8), float32] {
    @func_2182() /* ty=Tensor[(3, 7, 8), float32] */
  };
  %905() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7494(%var_7471: Tensor[(11, 16, 16), int64]) -> Tensor[(11, 16, 16), bool] {
  %906 = cast(%var_7471, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %907 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(meta[relay.Constant][51] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %910 = add(%908, %909) /* ty=Tensor[(11, 16, 16), int64] */;
  %911 = cast(%var_7471, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %912 = shape_of(%910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%910, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%913, %914) /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_8843() -> Tensor[(10, 8, 15), float64] {
  @func_8841() /* ty=Tensor[(10, 8, 15), float64] */
}

def @func_7599() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %915 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  %916 = @func_3146() /* ty=Tensor[(3, 7, 8), float32] */;
  %917 = @func_3907() /* ty=Tensor[(3, 7, 8), float32] */;
  (%915, %916, %917)
}

def @func_4083(%var_4066: Tensor[(2, 252), float32], %var_4067: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(9, 14, 4), uint16], Tensor[(2, 252), float32], uint32) {
  %918 = @func_4033() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */;
  %919 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %920 = cast(%var_4066, dtype="float32") /* ty=Tensor[(2, 252), float32] */;
  %921 = cast(%var_4067, dtype="uint32") /* ty=uint32 */;
  %922 = reshape(%920, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %923 = reshape(%921, newshape=[]) /* ty=uint32 */;
  %924 = @func_1446(%922, %923) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %925 = %918.2;
  %926 = %919.0;
  %927 = %924.0;
  (%925, %926, %927, %var_4066, %var_4067)
}

def @func_4632() -> Tensor[(4, 8, 13), bool] {
  %928 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %929 = cos(%928) /* ty=Tensor[(4, 8, 13), float64] */;
  %930 = cast(%929, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %931 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(4, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 8, 13), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%932, %933) /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_6433(%var_6431: Tensor[(150), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  %934 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %935 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %938 = cast(%var_6431, dtype="float64") /* ty=Tensor[(150), float64] */;
  %939 = reshape(%938, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float64] */;
  %940 = bitwise_or(%936, %937) /* ty=Tensor[(10, 8, 9), uint32] */;
  %941 = @func_1177(%939) /* ty=Tensor[(15, 5, 2), float64] */;
  (%940, %941, %var_6431)
}

def @func_4945() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 2, 4), uint32], Tensor[(11, 2, 4), float32]) {
  %942 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %943 = @func_4917() /* ty=(Tensor[(11, 2, 4), float32],) */;
  %944 = @func_4681() /* ty=Tensor[(13, 13, 5), float64] */;
  %945 = %942.1;
  %946 = %943.0;
  (%944, %945, %946)
}

def @func_9346(%var_9314: uint32, %var_9341: Tensor[(130), uint32]) -> (Tensor[(11, 2, 4), float32], Tensor[(15, 5, 2), float64], Tensor[(150), float64], Tensor[(3, 7, 8), float64], uint32, Tensor[(12, 42), float32], uint32, Tensor[(2, 5, 13), bool], Tensor[(130), float64]) {
  %947 = @func_3799() /* ty=(Tensor[(11, 2, 4), float32], Tensor[(11, 2, 4), uint32]) */;
  %948 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %949 = reshape(%948, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %950 = @func_6433(%949) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) */;
  %951 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 42), float32] */, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %952 = cast(%var_9314, dtype="uint32") /* ty=uint32 */;
  %953 = reshape(%951, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float32] */;
  %954 = reshape(%952, newshape=[]) /* ty=uint32 */;
  %955 = @func_1446(%953, %954) /* ty=(Tensor[(9, 14, 4), uint16], Tensor[(16, 2, 4), float32], Tensor[(4, 32), float32], uint32) */;
  %956 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %957 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %958 = reshape(%956, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %959 = reshape(%957, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), uint32] */;
  %960 = cast(%var_9341, dtype="float64") /* ty=Tensor[(130), float64] */;
  %961 = %947.0;
  %962 = %950.1;
  %963 = @func_3681() /* ty=Tensor[(3, 7, 8), float64] */;
  %964 = %955.3;
  %965 = @func_1379(%958, %959) /* ty=Tensor[(2, 5, 13), bool] */;
  %966 = asinh(%960) /* ty=Tensor[(130), float64] */;
  (%961, %962, meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, %963, %964, meta[relay.Constant][56] /* ty=Tensor[(12, 42), float32] */, %var_9314, %965, %966)
}

def @func_3649(%var_3608: Tensor[(550), float64], %var_3628: Tensor[(16), int64]) -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(550), float64], Tensor[(1, 70), float32], Tensor[(?, 16), bool], Tensor[(16), int64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %967 = @func_3061() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %968 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %969 = %968.0;
  %970 = cast(%969, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %971 = cast(%var_3608, dtype="float64") /* ty=Tensor[(550), float64] */;
  %972 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 70), float32] */, dtype="float32") /* ty=Tensor[(1, 70), float32] */;
  %973 = reshape(%971, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %974 = reshape(%972, newshape=[1, 70]) /* ty=Tensor[(1, 70), float32] */;
  %975 = @func_3374(%973, %974) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(1050), float32], Tensor[(15, 9, 11), float64], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(1485, 70), bool]) */;
  %976 = cast(%var_3628, dtype="int64") /* ty=Tensor[(16), int64] */;
  %977 = reshape(%976, newshape=[1, 16]) /* ty=Tensor[(1, 16), int64] */;
  %978 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %979 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %980 = %967.0;
  %981 = rsqrt(%970) /* ty=Tensor[(3, 7, 8), float32] */;
  %982 = %975.5;
  %983 = @func_1604(%977) /* ty=Tensor[(?, 16), bool] */;
  %984 = %978.0;
  %985 = %979.0;
  (%980, %981, %982, %var_3608, meta[relay.Constant][57] /* ty=Tensor[(1, 70), float32] */, %983, %var_3628, %984, %985)
}

def @func_1607(%var_1605: Tensor[(1, 16), int64]) -> Tensor[(?, 16), bool] {
  @func_1604(%var_1605) /* ty=Tensor[(?, 16), bool] */
}

def @func_3491() -> (Tensor[(3, 7, 8), bool],) {
  %988 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %986 = @func_1800() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %987 = %986.0;
    (%987,)
  };
  %988() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_3665() -> (Tensor[(3, 7, 8), float64],) {
  %991 = fn () -> (Tensor[(3, 7, 8), float64],) {
    %989 = @func_2360() /* ty=(Tensor[(3, 7, 8), float64],) */;
    %990 = %989.0;
    (%990,)
  };
  %991() /* ty=(Tensor[(3, 7, 8), float64],) */
}

def @func_9410(%var_9384: Tensor[(4, 8, 13), bool]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64], Tensor[(3, 7, 8), float32]) {
  %992 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %993 = cast(%var_9384, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %994 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%992, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %997 = cast(%var_9384, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %998 = multiply(%995, %996) /* ty=Tensor[(4, 8, 13), int64] */;
  %999 = exp(%997) /* ty=Tensor[(4, 8, 13), float64] */;
  %1000 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
  (%998, %999, %1000)
}

def @func_3062() -> (Tensor[(3, 7, 8), float32],) {
  %1002 = fn () -> (Tensor[(3, 7, 8), float32],) {
    %1001 = @func_2637() /* ty=Tensor[(3, 7, 8), float32] */;
    (%1001,)
  };
  %1002() /* ty=(Tensor[(3, 7, 8), float32],) */
}

def @func_5881() -> Tensor[(3, 7, 8), float32] {
  %1004 = fn () -> Tensor[(3, 7, 8), float32] {
    %1003 = @func_2557() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %1003.0
  };
  %1004() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_6640() -> Tensor[(3, 7, 8), float64] {
  @func_6638() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_7438() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %1005 = @func_5170() /* ty=Tensor[(3, 7, 8), bool] */;
  %1006 = @func_6163() /* ty=Tensor[(3, 7, 8), float32] */;
  (%1005, %1006)
}

def @func_2422(%var_2420: Tensor[(2, 8, 2), float64], %var_2421: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float32],) {
  %1019 = fn (%var_2386: Tensor[(2, 8, 2), float64], %var_2387: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float32],) {
    %1007 = cast(%var_2387, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
    %1008 = shape_of(%var_2386, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1009 = cast(%var_2386, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
    %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1011 = add(%1009, %1010) /* ty=Tensor[(2, 8, 2), float64] */;
    %1012 = cast(%1011, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
    %1013 = cosh(%1012) /* ty=Tensor[(2, 8, 2), float32] */;
    %1014 = cast(%var_2386, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
    %1015 = shape_of(%1013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1016 = cast(%1013, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
    %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1018 = power(%1016, %1017) /* ty=Tensor[(2, 8, 2), float32] */;
    (%1018,)
  };
  %1019(%var_2420, %var_2421) /* ty=(Tensor[(2, 8, 2), float32],) */
}

def @func_5921() -> (Tensor[(3, 2, 4), float64],) {
  @func_5919() /* ty=(Tensor[(3, 2, 4), float64],) */
}

def @func_3942() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  %1026 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
    %1020 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %1021 = @func_3664() /* ty=(Tensor[(3, 7, 8), float64],) */;
    %1022 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
    %1023 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
    %1024 = %1020.0;
    %1025 = %1021.0;
    (%1022, %1023, %1024, %1025)
  };
  %1026() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */
}

def @func_4152() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) {
  %1027 = @func_2674() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %1028 = @func_2764() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %1029 = %1027.0;
  %1030 = %1028.1;
  (%1029, %1030)
}

def @func_4425(%var_4423: Tensor[(1050), float32]) -> (Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) {
  @func_4422(%var_4423) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(550), bool], Tensor[(3, 7, 8), bool]) */
}

def @func_6607(%var_6603: uint16, %var_6604: Tensor[(320, 1), uint16], %var_6605: Tensor[(128), float32], %var_6606: Tensor[(2, 48), int8]) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320, 1), uint16], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(2, 8, 2), float32], Tensor[(32), float64], Tensor[(3, 7, 8), bool], uint32, Tensor[(128), float32], Tensor[(3, 7, 8), float32], Tensor[(9, ?, 12), int64], Tensor[(16), int8], Tensor[(1485), int16], Tensor[(2, 48), int8], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(5, 110), float64], Tensor[(16), int64]) {
  @func_6601(%var_6603, %var_6604, %var_6605, %var_6606) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320, 1), uint16], Tensor[(70), float32], Tensor[(1050), float32], Tensor[(2, 8, 2), float32], Tensor[(32), float64], Tensor[(3, 7, 8), bool], uint32, Tensor[(128), float32], Tensor[(3, 7, 8), float32], Tensor[(9, ?, 12), int64], Tensor[(16), int8], Tensor[(1485), int16], Tensor[(2, 48), int8], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(5, 110), float64], Tensor[(16), int64]) */
}

def @func_5502() -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
  %1040 = fn () -> (Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) {
    %1031 = @func_1772() /* ty=(Tensor[(3, 7, 8), float32],) */;
    %1032 = cast(meta[relay.Constant][58] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %1033 = cast(meta[relay.Constant][59] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
    %1034 = reshape(%1032, newshape=[]) /* ty=uint16 */;
    %1035 = reshape(%1033, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), uint16] */;
    %1036 = @func_707(%1034, %1035) /* ty=(Tensor[(8, 8, 5), bool],) */;
    %1037 = @func_3806() /* ty=Tensor[(3, 7, 8), bool] */;
    %1038 = %1031.0;
    %1039 = %1036.0;
    (%1037, %1038, %1039, meta[relay.Constant][58] /* ty=uint16 */, meta[relay.Constant][59] /* ty=Tensor[(320), uint16] */)
  };
  %1040() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16]) */
}

def @func_10121() -> Tensor[(4, 8, 13), bool] {
  %1041 = fn () -> Tensor[(4, 8, 13), bool] {
    @func_8455() /* ty=Tensor[(4, 8, 13), bool] */
  };
  %1041() /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_6436(%var_6434: Tensor[(150), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) {
  @func_6433(%var_6434) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(15, 5, 2), float64], Tensor[(150), float64]) */
}

def @func_9705(%var_9643: uint32) -> (Tensor[(3, 7, 8), float32], Tensor[(4, 9, 1), bool], uint32, Tensor[(36), uint32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %1042 = @func_7438() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %1043 = cast(%var_9643, dtype="uint32") /* ty=uint32 */;
  %1044 = cast(meta[relay.Constant][60] /* ty=Tensor[(36), uint32] */, dtype="uint32") /* ty=Tensor[(36), uint32] */;
  %1045 = reshape(%1043, newshape=[]) /* ty=uint32 */;
  %1046 = reshape(%1044, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), uint32] */;
  %1047 = @func_488(%1045, %1046) /* ty=(Tensor[(4, 9, 1), bool],) */;
  %1048 = @func_4807() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) */;
  %1049 = @func_7821() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), bool]) */;
  %1050 = @func_7799() /* ty=(Tensor[(3, 7, 8), float32],) */;
  %1051 = %1042.1;
  %1052 = %1047.0;
  %1053 = %1048.4;
  %1054 = %1049.1;
  %1055 = @func_3719() /* ty=Tensor[(3, 7, 8), float32] */;
  %1056 = %1050.0;
  (%1051, %1052, %var_9643, meta[relay.Constant][60] /* ty=Tensor[(36), uint32] */, %1053, %1054, %1055, %1056)
}

def @func_9054(%var_9052: uint16) -> (Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16], Tensor[(3, 7, 8), bool]) {
  @func_9051(%var_9052) /* ty=(Tensor[(3, 7, 8), bool], Tensor[(8, 8, 5), bool], uint16, Tensor[(320), uint16], Tensor[(3, 7, 8), bool]) */
}

def @func_3146() -> Tensor[(3, 7, 8), float32] {
  @func_2637() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_7423() -> (Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  @func_7421() /* ty=(Tensor[(858), int16], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_4807() -> (Tensor[(3, 7, 8), bool], Tensor[(4, 8, 13), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32]) {
  %1057 = @func_1930() /* ty=(Tensor[(3, 7, 8), bool],) */;
  %1058 = @func_3941() /* ty=(Tensor[(3, 7, 8), bool], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */;
  %1059 = %1057.0;
  %1060 = @func_4632() /* ty=Tensor[(4, 8, 13), bool] */;
  %1061 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %1062 = @func_2519() /* ty=Tensor[(3, 7, 8), bool] */;
  %1063 = %1058.1;
  (%1059, %1060, %1061, %1062, %1063)
}

def @func_2557() -> (Tensor[(3, 7, 8), float32],) {
  %1064 = @func_2182() /* ty=Tensor[(3, 7, 8), float32] */;
  (%1064,)
}

def @func_9290(%var_9288: Tensor[(15, 9, 11), int16]) -> (Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64]) {
  @func_9287(%var_9288) /* ty=(Tensor[(3, 7, 8), float32], Tensor[(15, 9, 11), float64]) */
}

def @func_4197() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
  %1070 = fn () -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) {
    %1065 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
    %1066 = cast(%1065, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
    %1067 = reshape(%1066, newshape=[3, 7, 8]) /* ty=Tensor[(3, 7, 8), float32] */;
    %1068 = @func_3281(%1067) /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32], Tensor[(15, 7, 10), float32], Tensor[(550), float64], Tensor[(14, 5), float32], Tensor[(1050), float32], Tensor[(4, 32), float32], Tensor[(504), float32], uint32, Tensor[(3, 7, 8), int16]) */;
    %1069 = %1068.1;
    (%1065, %1069)
  };
  %1070() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float32]) */
}

def @func_6246(%var_6245: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), float32]) {
  %1078 = fn (%var_6228: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), float32]) {
    %1071 = @func_5937() /* ty=Tensor[(3, 7, 8), float32] */;
    %1072 = cast(%var_6228, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
    %1073 = shape_of(%1071, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1074 = cast(%1071, dtype="uint64") /* ty=Tensor[(3, 7, 8), uint64] */;
    %1075 = dyn.reshape(%1072, %1073, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1076 = add(%1074, %1075) /* ty=Tensor[(3, 7, 8), uint64] */;
    %1077 = @func_5994() /* ty=Tensor[(3, 7, 8), float32] */;
    (%1076, %1077)
  };
  %1078(%var_6245) /* ty=(Tensor[(3, 7, 8), uint64], Tensor[(3, 7, 8), float32]) */
}

def @func_4822() -> (Tensor[(3, 7, 8), bool],) {
  %1081 = fn () -> (Tensor[(3, 7, 8), bool],) {
    %1079 = @func_2953() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %1080 = %1079.0;
    (%1080,)
  };
  %1081() /* ty=(Tensor[(3, 7, 8), bool],) */
}

def @func_9084() -> Tensor[(3, 7, 8), bool] {
  %1082 = fn () -> Tensor[(3, 7, 8), bool] {
    @func_6677() /* ty=Tensor[(3, 7, 8), bool] */
  };
  %1082() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_8722() -> Tensor[(3, 7, 8), float32] {
  @func_8720() /* ty=Tensor[(3, 7, 8), float32] */
}

def @func_5747() -> (Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) {
  @func_5745() /* ty=(Tensor[(3, 7, 8), float32], Tensor[(3, 7, 8), float64]) */
}

def @func_6131() -> (Tensor[(3, 7, 8), float32],) {
  %1083 = @func_2573() /* ty=Tensor[(3, 7, 8), float32] */;
  (%1083,)
}

def @func_5887() -> Tensor[(3, 7, 8), float64] {
  %1085 = fn () -> Tensor[(3, 7, 8), float64] {
    %1084 = @func_5118() /* ty=(Tensor[(3, 7, 8), float64],) */;
    %1084.0
  };
  %1085() /* ty=Tensor[(3, 7, 8), float64] */
}

def @func_9107() -> Tensor[(3, 7, 8), bool] {
  %1087 = fn () -> Tensor[(3, 7, 8), bool] {
    %1086 = @func_8576() /* ty=(Tensor[(3, 7, 8), bool],) */;
    %1086.0
  };
  %1087() /* ty=Tensor[(3, 7, 8), bool] */
}

def @func_2520() -> Tensor[(3, 7, 8), bool] {
  %1089 = fn () -> Tensor[(3, 7, 8), bool] {
    %1088 = @func_1858() /* ty=(Tensor[(3, 7, 8), float64], Tensor[(3, 7, 8), bool]) */;
    %1088.1
  };
  %1089() /* ty=Tensor[(3, 7, 8), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen324/build/output.py", line 3231, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:07:13] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

