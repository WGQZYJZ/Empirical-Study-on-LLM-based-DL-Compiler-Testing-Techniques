==========mod==========
#[version = "0.0.5"]
def @func_1480(%var_1468: Tensor[(12, 42), int8]) -> (Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) {
  %0 = cast(%var_1468, dtype="int8") /* ty=Tensor[(12, 42), int8] */;
  %1 = reshape(%0, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int8] */;
  %2 = @func_124(%1) /* ty=(Tensor[(7, 8, 9), float32],) */;
  %3 = cast(%var_1468, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %4 = asinh(%3) /* ty=Tensor[(12, 42), float64] */;
  %5 = cast(%var_1468, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(2), int32] */;
  %7 = cast(%4, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %9 = mod(%7, %8) /* ty=Tensor[(12, 42), float32] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %11 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  %12 = %2.0;
  %13 = erf(%10) /* ty=Tensor[(12, 42), float64] */;
  (%11, %12, %13)
}

def @func_2627(%var_2612: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), float32],) {
  %14 = cast(%var_2612, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
  %15 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(14, 8, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = divide(%16, %17) /* ty=Tensor[(14, 8, 7), float32] */;
  %19 = cast(%var_2612, dtype="bool") /* ty=Tensor[(14, 8, 7), bool] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="bool") /* ty=Tensor[(14, 8, 7), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = not_equal(%21, %22) /* ty=Tensor[(14, 8, 7), bool] */;
  %24 = cast(%18, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %28 = floor_mod(%26, %27) /* ty=Tensor[(14, 8, 7), float32] */;
  (%28,)
}

def @func_2583() -> Tensor[(14, 13, 14), float32] {
  %29 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %29.0
}

def @func_5999() -> (Tensor[(14, 13, 14), float32],) {
  %30 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  (%30,)
}

def @func_5248() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(7, 12, ?), bool], Tensor[(36), float32], Tensor[(14, 13, 14), float64], Tensor[(9, 1, 4), float32], Tensor[(192), float32]) {
  %31 = @func_5104() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %32 = @func_3562() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %34 = reshape(%33, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %35 = @func_4278(%34) /* ty=(Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) */;
  %36 = @func_3095() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %40 = reshape(%37, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %41 = reshape(%38, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %42 = reshape(%39, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %43 = @func_2912(%40, %41, %42) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) */;
  %44 = %31.0;
  %45 = %32.0;
  %46 = %35.4;
  %47 = %36.0;
  %48 = %43.2;
  (%44, %45, %46, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, %47, %48, meta[relay.Constant][2] /* ty=Tensor[(192), float32] */)
}

def @func_4228(%var_4175: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), uint8], Tensor[(30, 2), uint8], Tensor[(6, 8, 9), float32], Tensor[(14, 13, 14), float64]) {
  %49 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %50 = cast(%var_4175, dtype="uint8") /* ty=Tensor[(14, 13, 14), uint8] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="uint8") /* ty=Tensor[(14, 13, 14), uint8] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %54 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
  %55 = @func_2404() /* ty=(Tensor[(6, 8, 9), float32],) */;
  %56 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %57 = bitwise_and(%52, %53) /* ty=Tensor[(14, 13, 14), uint8] */;
  %58 = %54.0;
  %59 = %55.0;
  %60 = %56.1;
  (%57, %58, %59, %60)
}

def @func_5688() -> (Tensor[(14, 13, 14), float64],) {
  %61 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  (%61,)
}

def @func_3497(%var_3416: Tensor[(14, 13, 14), float32], %var_3459: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
  %62 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
  %63 = cast(%var_3416, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %68 = cast(%var_3459, dtype="int16") /* ty=Tensor[(336), int16] */;
  %69 = reshape(%67, newshape=[60]) /* ty=Tensor[(60), uint8] */;
  %70 = reshape(%68, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %71 = @func_1400(%69, %70) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) */;
  %72 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %73 = greater(%65, %66) /* ty=Tensor[(14, 13, 14), bool] */;
  %74 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  %75 = %71.4;
  %76 = %72.1;
  (%73, %74, %75, meta[relay.Constant][3] /* ty=Tensor[(60), uint8] */, %var_3459, %76)
}

def @func_1218(%var_1201: int32) -> (Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) {
  %77 = cast(%var_1201, dtype="int32") /* ty=int32 */;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 1), int32] */;
  %79 = cast(%var_1201, dtype="int32") /* ty=int32 */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(14, 3, 1), int32] */;
  %81 = right_shift(%77, %78) /* ty=Tensor[(6, 1), int32] */;
  %82 = logical_xor(%79, %80) /* ty=Tensor[(14, 3, 1), int32] */;
  (%81, %82)
}

def @func_4012(%var_3983: Tensor[(36), float32]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36), float32], Tensor[(6, 2, 16), float64]) {
  %83 = cast(%var_3983, dtype="float32") /* ty=Tensor[(36), float32] */;
  %84 = reshape(%83, newshape=[9, 1, 4]) /* ty=Tensor[(9, 1, 4), float32] */;
  %85 = @func_679(%84) /* ty=(Tensor[(9, 1, 4), float32],) */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %87 = reshape(%86, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %88 = @func_2009(%87) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  %91 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  %92 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
  %93 = %85.0;
  %94 = sigmoid(%90) /* ty=Tensor[(6, 2, 16), float64] */;
  (%91, %92, meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, %93, %var_3983, %94)
}

def @func_1711() -> Tensor[(14, 13, 14), float64] {
  %95 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %95.1
}

def @func_1945(%var_1930: Tensor[(14, 13, 14), float64]) -> Tensor[(14, 13, 14), uint64] {
  %96 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  %97 = cast(%var_1930, dtype="uint64") /* ty=Tensor[(14, 13, 14), uint64] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="uint64") /* ty=Tensor[(14, 13, 14), uint64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%99, %100) /* ty=Tensor[(14, 13, 14), uint64] */
}

def @func_435() -> Tensor[(14, 13, 14), float64] {
  %101 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %101.1
}

def @func_679(%var_672: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32],) {
  %102 = cast(%var_672, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %103 = sqrt(%102) /* ty=Tensor[(9, 1, 4), float32] */;
  (%103,)
}

def @func_1780() -> Tensor[(14, 13, 14), float32] {
  %104 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %104.0
}

def @func_5336() -> Tensor[(14, 13, 14), float32] {
  %105 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %105.0
}

def @func_5295() -> Tensor[(504), int8] {
  %106 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
  %106.3
}

def @func_3069(%var_3047: Tensor[(192), float32], %var_3048: Tensor[(36), float32]) -> (Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) {
  %107 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %108 = cast(%var_3047, dtype="float32") /* ty=Tensor[(192), float32] */;
  %109 = cast(%var_3047, dtype="float32") /* ty=Tensor[(192), float32] */;
  %110 = cast(%var_3048, dtype="float32") /* ty=Tensor[(36), float32] */;
  %111 = reshape(%108, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %112 = reshape(%109, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %113 = reshape(%110, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %114 = @func_2912(%111, %112, %113) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %116 = reshape(%115, newshape=[1, 154]) /* ty=Tensor[(1, 154), float64] */;
  %117 = @func_1613(%116) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) */;
  %118 = %107.0;
  %119 = %114.3;
  %120 = %117.3;
  (%118, %119, %var_3047, %var_3048, %120, meta[relay.Constant][7] /* ty=Tensor[(154), float64] */)
}

def @func_1865(%var_1827: Tensor[(252, 2), int8]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %121 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %122 = cast(%var_1827, dtype="int8") /* ty=Tensor[(252, 2), int8] */;
  %123 = reshape(%122, newshape=[12, 42]) /* ty=Tensor[(12, 42), int8] */;
  %124 = @func_1480(%123) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) */;
  %125 = %124.2;
  %126 = cast(%var_1827, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(2), int32] */;
  %128 = cast(%125, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %130 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %131 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %132 = %121.1;
  %133 = add(%128, %129) /* ty=Tensor[(12, 42), float64] */;
  %134 = %130.0;
  %135 = %131.0;
  (%132, %133, %134, %135)
}

def @func_5368(%var_5361: Tensor[(336, 1), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(336, 1), int16]) {
  %136 = cast(%var_5361, dtype="int16") /* ty=Tensor[(336, 1), int16] */;
  %137 = reshape(%136, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %138 = @func_3637(%137) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) */;
  %139 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  %140 = %138.2;
  (%139, %140, %var_5361)
}

def @func_124(%var_45: Tensor[(7, 8, 9), int8]) -> (Tensor[(7, 8, 9), float32],) {
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 8, 9), int8] */, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %142 = shape_of(%var_45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_45, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = greater(%143, %144) /* ty=Tensor[(7, 8, 9), bool] */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 8, 9), int8] */, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %150 = floor_divide(%148, %149) /* ty=Tensor[(7, 8, 9), float64] */;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
  %152 = log2(%151) /* ty=Tensor[(7, 8, 9), float64] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  %154 = sin(%153) /* ty=Tensor[(7, 8, 9), float32] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
  %156 = log(%155) /* ty=Tensor[(7, 8, 9), float64] */;
  %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 8, 9), int8] */, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %161 = minimum(%159, %160) /* ty=Tensor[(7, 8, 9), float32] */;
  (%161,)
}

def @func_4842(%var_4838: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
  %162 = cast(%var_4838, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
  %163 = cos(%162) /* ty=Tensor[(9, 2, 5), float32] */;
  (%163,)
}

def @func_4733() -> (Tensor[(14, 13, 14), float32], Tensor[(4, 36), int16]) {
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 36), uint64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %165 = erf(%164) /* ty=Tensor[(4, 36), float64] */;
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 36), uint64] */, dtype="uint64") /* ty=Tensor[(4, 36), uint64] */;
  %167 = reshape(%166, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), uint64] */;
  %168 = @func_3376(%167) /* ty=(Tensor[(8, 6, 3), bool],) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %171 = shape_of(%165, dtype="int32") /* ty=Tensor[(2), int32] */;
  %172 = cast(%165, dtype="int16") /* ty=Tensor[(4, 36), int16] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %174 = @func_2583() /* ty=Tensor[(14, 13, 14), float32] */;
  %175 = minimum(%172, %173) /* ty=Tensor[(4, 36), int16] */;
  (%174, %175)
}

def @func_1168(%var_1160: Tensor[(1, 9, 7), int8]) -> Tensor[(1, 9, 7), int8] {
  %176 = cast(meta[relay.Constant][10] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %177 = cast(%var_1160, dtype="int8") /* ty=Tensor[(1, 9, 7), int8] */;
  left_shift(%176, %177) /* ty=Tensor[(1, 9, 7), int8] */
}

def @func_336(%var_331: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) {
  %178 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %181 = cast(%var_331, dtype="uint32") /* ty=Tensor[(14, 13, 14), uint32] */;
  %182 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%179, dtype="uint32") /* ty=Tensor[(14, 13, 14), uint32] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %185 = asinh(%180) /* ty=Tensor[(14, 13, 14), float64] */;
  %186 = left_shift(%183, %184) /* ty=Tensor[(14, 13, 14), uint32] */;
  (%185, %186)
}

def @func_5500() -> (Tensor[(14, 13, 14), float64],) {
  %187 = @func_3235() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %188 = %187.0;
  (%188,)
}

def @func_3581() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %189 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %190 = %189.1;
  %191 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
  (%190, %191)
}

def @func_2257() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) {
  %192 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(30, 2), uint8] */, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
  %194 = reshape(%193, newshape=[2, 2, 15]) /* ty=Tensor[(2, 2, 15), uint8] */;
  %195 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %196 = %192.1;
  %197 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
  %198 = @func_1138(%194) /* ty=Tensor[(2, 2, 15), uint8] */;
  %199 = %195.0;
  (%196, %197, %198, meta[relay.Constant][11] /* ty=Tensor[(30, 2), uint8] */, %199)
}

def @func_3562() -> (Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) {
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %201 = reshape(%200, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %202 = @func_195(%201) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %203 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  %204 = %202.2;
  (%203, %204, meta[relay.Constant][12] /* ty=Tensor[(336), int16] */)
}

def @func_4656() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) {
  %205 = @func_3562() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %208 = @func_2382() /* ty=(Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) */;
  %209 = atan(%207) /* ty=Tensor[(14, 13, 14), float64] */;
  %210 = %208.0;
  (%209, %210)
}

def @func_3924(%var_3894: int16, %var_3895: Tensor[(9, 1), int16], %var_3916: Tensor[(24, 14), int16]) -> (Tensor[(9, 1), bool], Tensor[(14, 3, 1), int32], Tensor[(144, 2), float64], Tensor[(288), float64], Tensor[(24, 14), int16]) {
  %211 = cast(%var_3894, dtype="bool") /* ty=bool */;
  %212 = cast(%var_3895, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
  %213 = cast(%var_3894, dtype="int32") /* ty=int32 */;
  %214 = reshape(%213, newshape=[]) /* ty=int32 */;
  %215 = @func_1218(%214) /* ty=(Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %217 = cast(%var_3916, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %218 = reshape(%216, newshape=[144, 2]) /* ty=Tensor[(144, 2), float64] */;
  %219 = reshape(%217, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %220 = @func_3837(%218, %219) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) */;
  %221 = greater(%211, %212) /* ty=Tensor[(9, 1), bool] */;
  %222 = %215.1;
  %223 = %220.3;
  (%221, %222, %223, meta[relay.Constant][13] /* ty=Tensor[(288), float64] */, %var_3916)
}

def @func_880(%var_836: float64, %var_837: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(14, 13, 14), float64], Tensor[(16, 13, 16), float64]) {
  %224 = cast(%var_836, dtype="float64") /* ty=float64 */;
  %225 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %226 = floor_mod(%224, %225) /* ty=Tensor[(16, 13, 16), float64] */;
  %227 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %231 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %232 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %233 = power(%229, %230) /* ty=Tensor[(16, 13, 16), float64] */;
  %234 = %231.0;
  %235 = cosh(%232) /* ty=Tensor[(16, 13, 16), float64] */;
  (%233, %234, %235)
}

def @func_5571() -> (Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
  %236 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %237 = %236.3;
  %238 = @func_3863() /* ty=Tensor[(14, 13, 14), float64] */;
  (%237, %238)
}

def @func_923() -> Tensor[(14, 13, 14), float64] {
  @func_435() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_587() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) {
  %239 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %241 = reshape(%240, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %242 = @func_195(%241) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %243 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  %244 = %239.1;
  %245 = %242.0;
  (%243, %244, %245, meta[relay.Constant][14] /* ty=Tensor[(336), int16] */)
}

def @func_2688() -> Tensor[(14, 13, 14), float32] {
  @func_2583() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_1686() -> Tensor[(14, 13, 14), float32] {
  @func_1275() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_1770() -> (Tensor[(14, 13, 14), float32],) {
  %246 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %248 = cosh(%247) /* ty=Tensor[(14, 13, 14), float64] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %250 = sigmoid(%249) /* ty=Tensor[(14, 13, 14), float32] */;
  (%250,)
}

def @func_4375() -> (Tensor[(14, 13, 14), float32],) {
  %251 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %252 = %251.0;
  (%252,)
}

def @func_3278() -> Tensor[(14, 13, 14), float32] {
  %253 = @func_2583() /* ty=Tensor[(14, 13, 14), float32] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  acosh(%254) /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_3637(%var_3609: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) {
  %255 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %256 = cast(%var_3609, dtype="int16") /* ty=Tensor[(336), int16] */;
  %257 = reshape(%256, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %258 = @func_195(%257) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %259 = %258.2;
  %260 = cast(%259, dtype="int8") /* ty=Tensor[(1, 504), int8] */;
  %261 = reshape(%260, newshape=[12, 42]) /* ty=Tensor[(12, 42), int8] */;
  %262 = @func_1480(%261) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) */;
  %263 = cast(%259, dtype="float64") /* ty=Tensor[(1, 504), float64] */;
  %264 = %255.0;
  %265 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
  %266 = %262.0;
  %267 = acosh(%263) /* ty=Tensor[(1, 504), float64] */;
  (%264, %var_3609, %265, %266, %267)
}

def @func_2009(%var_2000: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
  %268 = cast(%var_2000, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %270 = shape_of(%var_2000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_2000, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %273 = asinh(%268) /* ty=Tensor[(6, 2, 16), float32] */;
  %274 = minimum(%271, %272) /* ty=Tensor[(6, 2, 16), float32] */;
  (%273, %274)
}

def @func_3951(%var_3949: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16]) {
  %275 = cast(%var_3949, dtype="int16") /* ty=Tensor[(336), int16] */;
  %276 = reshape(%275, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %277 = @func_195(%276) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %278 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  %279 = %277.1;
  (%278, %279, %var_3949)
}

def @func_2912(%var_2887: Tensor[(192), float32], %var_2889: Tensor[(6, 2, 16), float32], %var_2895: Tensor[(36, 1), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) {
  %280 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %281 = cast(%var_2895, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %282 = reshape(%281, newshape=[9, 1, 4]) /* ty=Tensor[(9, 1, 4), float32] */;
  %283 = @func_679(%282) /* ty=(Tensor[(9, 1, 4), float32],) */;
  %284 = cast(%var_2887, dtype="float32") /* ty=Tensor[(192), float32] */;
  %285 = reshape(%284, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %286 = @func_2009(%285) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %287 = %286.0;
  %288 = cast(%var_2889, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %292 = left_shift(%290, %291) /* ty=Tensor[(6, 2, 16), int64] */;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  %294 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %295 = %280.1;
  %296 = %283.0;
  %297 = log2(%293) /* ty=Tensor[(6, 2, 16), float64] */;
  %298 = %294.0;
  (%295, %var_2887, %296, %var_2895, %297, %298)
}

def @func_733(%var_724: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), bool] {
  %299 = cast(%var_724, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %300 = log2(%299) /* ty=Tensor[(12, 12, 2), float64] */;
  %301 = cast(%var_724, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%303, %304) /* ty=Tensor[(12, 12, 2), bool] */
}

def @func_4124(%var_4113: Tensor[(4, 1, 16), float32]) -> (Tensor[(4, 1, 16), float32], Tensor[(14, 13, 14), float32]) {
  %305 = cast(%var_4113, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
  %306 = @func_3095() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %307 = sqrt(%305) /* ty=Tensor[(4, 1, 16), float32] */;
  %308 = %306.1;
  (%307, %308)
}

def @func_4397(%var_4393: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), uint32], Tensor[(288), float64], Tensor[(336), int16]) {
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %310 = cast(%var_4393, dtype="int16") /* ty=Tensor[(336), int16] */;
  %311 = reshape(%309, newshape=[144, 2]) /* ty=Tensor[(144, 2), float64] */;
  %312 = reshape(%310, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %313 = @func_3837(%311, %312) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) */;
  %314 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %315 = %313.4;
  (%314, %315, meta[relay.Constant][16] /* ty=Tensor[(288), float64] */, %var_4393)
}

def @func_2831() -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) {
  %316 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %317 = %316.0;
  %318 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
  %319 = cast(%318, dtype="uint16") /* ty=Tensor[(14, 13, 14), uint16] */;
  %320 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%317, dtype="uint16") /* ty=Tensor[(14, 13, 14), uint16] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %323 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %324 = reshape(%323, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint32] */;
  %325 = @func_2040(%324) /* ty=(Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) */;
  %326 = bitwise_or(%321, %322) /* ty=Tensor[(14, 13, 14), uint16] */;
  %327 = %325.3;
  %328 = @func_1711() /* ty=Tensor[(14, 13, 14), float64] */;
  (%326, %327, meta[relay.Constant][17] /* ty=Tensor[(4, 140), uint32] */, %328)
}

def @func_5395(%var_5379: float64, %var_5380: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), bool], Tensor[(14, 13, 14), float64]) {
  %329 = cast(%var_5379, dtype="bool") /* ty=bool */;
  %330 = cast(%var_5380, dtype="bool") /* ty=Tensor[(2, 9, 1), bool] */;
  %331 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %332 = equal(%329, %330) /* ty=Tensor[(2, 9, 1), bool] */;
  %333 = %331.0;
  (%332, %333)
}

def @func_4481() -> (Tensor[(14, 13, 14), float64],) {
  %334 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %335 = %334.0;
  (%335,)
}

def @func_1920(%var_1902: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) {
  %336 = @func_1635() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %337 = %336.0;
  %338 = cast(%var_1902, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %342 = bitwise_xor(%340, %341) /* ty=Tensor[(14, 13, 14), int32] */;
  %343 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
  (%342, %343)
}

def @func_3845(%var_3842: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), float64] {
  %344 = cast(%var_3842, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  atan(%344) /* ty=Tensor[(14, 10, 5), float64] */
}

def @func_1635() -> (Tensor[(14, 13, 14), float32],) {
  %345 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  (%345,)
}

def @func_830() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %346 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %347 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %350 = %346.0;
  %351 = log2(%349) /* ty=Tensor[(14, 13, 14), float64] */;
  (%350, %351)
}

def @func_6033(%var_6027: Tensor[(2548), float32]) -> (Tensor[(16, 8, 15), float64], Tensor[(14, 13, 14), bool], Tensor[(2548), float32]) {
  %352 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %353 = cast(%var_6027, dtype="float32") /* ty=Tensor[(2548), float32] */;
  %354 = reshape(%353, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %355 = @func_4603(%354) /* ty=(Tensor[(14, 13, 14), bool],) */;
  %356 = atan(%352) /* ty=Tensor[(16, 8, 15), float64] */;
  %357 = %355.0;
  (%356, %357, %var_6027)
}

def @func_3676() -> (Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) {
  %358 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
  %359 = cast(meta[relay.Constant][19] /* ty=Tensor[(504), int8] */, dtype="int8") /* ty=Tensor[(504), int8] */;
  %360 = reshape(%359, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
  %361 = @func_1865(%360) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %362 = @func_1635() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %363 = %358.3;
  %364 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %365 = %361.2;
  %366 = %362.0;
  (%363, %364, %365, meta[relay.Constant][19] /* ty=Tensor[(504), int8] */, %366)
}

def @func_1138(%var_1127: Tensor[(2, 2, 15), uint8]) -> Tensor[(2, 2, 15), uint8] {
  %367 = cast(%var_1127, dtype="uint8") /* ty=Tensor[(2, 2, 15), uint8] */;
  %368 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(2, 2, 15), uint8] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%369, %370) /* ty=Tensor[(2, 2, 15), uint8] */
}

def @func_4278(%var_4265: Tensor[(36), float32]) -> (Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) {
  %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %372 = acos(%371) /* ty=Tensor[(7, 12, 1), float32] */;
  %373 = cast(meta[relay.Constant][21] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %374 = cast(%var_4265, dtype="float32") /* ty=Tensor[(36), float32] */;
  %375 = reshape(%373, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %376 = reshape(%374, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %377 = @func_3069(%375, %376) /* ty=(Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) */;
  %378 = %377.0;
  %379 = cast(%372, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %380 = cast(%378, dtype="bool") /* ty=Tensor[(336), bool] */;
  %381 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 12, 1), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %382 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%372, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = logical_and(%379, %380) /* ty=Tensor[(7, 12, 336), bool] */;
  %386 = @func_2148() /* ty=Tensor[(14, 13, 14), float32] */;
  %387 = logical_or(%383, %384) /* ty=Tensor[(7, 12, ?), bool] */;
  (meta[relay.Constant][21] /* ty=Tensor[(192, 1), float32] */, %var_4265, %385, %386, %387)
}

def @func_4134() -> (Tensor[(14, 13, 14), float32],) {
  %388 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %389 = %388.0;
  (%389,)
}

def @func_3881(%var_3871: Tensor[(30, 2), uint8]) -> (Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) {
  %390 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
  %391 = %390.3;
  %392 = cast(%var_3871, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(2), int32] */;
  %394 = cast(%391, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %396 = cast(%var_3871, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %397 = logical_xor(%394, %395) /* ty=Tensor[(30, 2), uint8] */;
  %398 = cosh(%396) /* ty=Tensor[(30, 2), float32] */;
  (%397, %398)
}

def @func_5638() -> (Tensor[(14, 13, 14), float64],) {
  %399 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  (%399,)
}

def @func_402() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %400 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %403 = reshape(%402, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %404 = @func_336(%403) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %405 = %404.0;
  (%401, %405)
}

def @func_1327(%var_1311: Tensor[(1, 16, 16), float32], %var_1319: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) {
  %406 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %407 = cast(%var_1319, dtype="int16") /* ty=Tensor[(336), int16] */;
  %408 = reshape(%407, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %409 = @func_195(%408) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %410 = cast(%var_1311, dtype="float32") /* ty=Tensor[(1, 16, 16), float32] */;
  %411 = log10(%410) /* ty=Tensor[(1, 16, 16), float32] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(1, 16, 16), float64] */;
  %413 = %406.1;
  %414 = %409.1;
  %415 = asin(%412) /* ty=Tensor[(1, 16, 16), float64] */;
  (%413, %414, %var_1319, %415)
}

def @func_5104() -> (Tensor[(14, 13, 14), float64],) {
  %416 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
  (%416,)
}

def @func_1083() -> Tensor[(14, 13, 14), float64] {
  %417 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %417.1
}

def @func_3863() -> Tensor[(14, 13, 14), float64] {
  %418 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %418.0
}

def @func_4752() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %419 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %420 = %419.0;
  %421 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  (%420, %421)
}

def @func_5866(%var_5849: Tensor[(154), float64]) -> (Tensor[(14, 13, 14), float32], Tensor[(11, 14, 1), float64], Tensor[(154), float64], Tensor[(14, 13, 14), bool], Tensor[(336), int16]) {
  %422 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %423 = cast(%var_5849, dtype="float64") /* ty=Tensor[(154), float64] */;
  %424 = reshape(%423, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %425 = @func_1307(%424) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %426 = %422.0;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %428 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %429 = reshape(%427, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %430 = reshape(%428, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %431 = @func_3497(%429, %430) /* ty=(Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) */;
  %432 = %425.0;
  %433 = %431.0;
  (%426, %432, %var_5849, %433, meta[relay.Constant][23] /* ty=Tensor[(336), int16] */)
}

def @func_5672(%var_5646: Tensor[(8, 10, 6), float32]) -> (Tensor[(8, 10, 6), float32], Tensor[(14, 13, 14), float32], Tensor[(30, 2), uint8], Tensor[(60), uint8]) {
  %434 = cast(%var_5646, dtype="float32") /* ty=Tensor[(8, 10, 6), float32] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %436 = reshape(%435, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint8] */;
  %437 = @func_3881(%436) /* ty=(Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) */;
  %438 = sinh(%434) /* ty=Tensor[(8, 10, 6), float32] */;
  %439 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
  %440 = %437.0;
  (%438, %439, %440, meta[relay.Constant][24] /* ty=Tensor[(60), uint8] */)
}

def @func_1400(%var_1363: Tensor[(60), uint8], %var_1376: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) {
  %441 = cast(%var_1363, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %442 = reshape(%441, newshape=[2, 2, 15]) /* ty=Tensor[(2, 2, 15), uint8] */;
  %443 = cast(%var_1376, dtype="int16") /* ty=Tensor[(336), int16] */;
  %444 = reshape(%443, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %445 = @func_195(%444) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %446 = %445.0;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
  %448 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  %449 = @func_1138(%442) /* ty=Tensor[(2, 2, 15), uint8] */;
  %450 = cosh(%447) /* ty=Tensor[(8, 7, 6), float64] */;
  (%448, %449, %var_1363, %var_1376, %450)
}

def @func_3095() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %451 = @func_1711() /* ty=Tensor[(14, 13, 14), float64] */;
  %452 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  (%451, %452)
}

def @func_2754() -> (Tensor[(14, 13, 14), float64],) {
  %453 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
  %454 = %453.0;
  (%454,)
}

def @func_2228(%var_2210: Tensor[(7, 13, 4), int16], %var_2211: Tensor[(7, 13, 4), int16]) -> Tensor[(7, 13, 4), int16] {
  %455 = cast(%var_2211, dtype="int16") /* ty=Tensor[(7, 13, 4), int16] */;
  %456 = shape_of(%var_2210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_2210, dtype="int16") /* ty=Tensor[(7, 13, 4), int16] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%457, %458) /* ty=Tensor[(7, 13, 4), int16] */
}

def @func_1071() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
  %459 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %460 = %459.0;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %462 = reshape(%461, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %463 = @func_336(%462) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %464 = %463.0;
  (%460, %464)
}

def @func_3024() -> Tensor[(14, 13, 14), float64] {
  %465 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  acos(%467) /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_2876(%var_2866: Tensor[(504), int8]) -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float64], Tensor[(504), int8], int32) {
  %468 = @func_2831() /* ty=(Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) */;
  %469 = cast(%var_2866, dtype="int8") /* ty=Tensor[(504), int8] */;
  %470 = reshape(%469, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
  %471 = @func_1865(%470) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %472 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
  %473 = %468.0;
  %474 = %471.2;
  %475 = %472.2;
  (%473, %474, %var_2866, %475)
}

def @func_4153(%var_4141: Tensor[(12, 1, 5), int32], %var_4142: Tensor[(12, 15, 5), int32]) -> Tensor[(12, 15, 5), int32] {
  %476 = cast(%var_4141, dtype="int32") /* ty=Tensor[(12, 1, 5), int32] */;
  %477 = cast(%var_4142, dtype="int32") /* ty=Tensor[(12, 15, 5), int32] */;
  bitwise_or(%476, %477) /* ty=Tensor[(12, 15, 5), int32] */
}

def @func_1275() -> Tensor[(14, 13, 14), float32] {
  %478 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %478.1
}

def @func_5433(%var_5418: bool, %var_5419: Tensor[(13, 14, 3), bool]) -> (Tensor[(13, 14, 3), bool], Tensor[(13, 14, 3), float32]) {
  %479 = cast(%var_5418, dtype="bool") /* ty=bool */;
  %480 = cast(%var_5419, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %481 = cast(%var_5419, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
  %482 = logical_and(%479, %480) /* ty=Tensor[(13, 14, 3), bool] */;
  %483 = asinh(%481) /* ty=Tensor[(13, 14, 3), float32] */;
  (%482, %483)
}

def @func_3734(%var_3723: Tensor[(14, 13, 14), float64]) -> (Tensor[(14, 13, 14), int32],) {
  %484 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  %485 = cast(%var_3723, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %489 = maximum(%487, %488) /* ty=Tensor[(14, 13, 14), int32] */;
  (%489,)
}

def @func_707() -> (Tensor[(14, 13, 14), float64],) {
  %490 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  (%490,)
}

def @func_5059(%var_5037: Tensor[(2, 7, 8), float64]) -> (Tensor[(2, 7, 8), float32],) {
  %491 = cast(%var_5037, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %492 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %495 = divide(%493, %494) /* ty=Tensor[(2, 7, 8), float64] */;
  %496 = cast(%var_5037, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %500 = power(%498, %499) /* ty=Tensor[(2, 7, 8), float32] */;
  (%500,)
}

def @func_4819() -> (Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) {
  %501 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 24), float32] */, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %502 = cast(meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %503 = reshape(%501, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %504 = reshape(%502, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %505 = @func_3069(%503, %504) /* ty=(Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) */;
  %506 = %505.5;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(154), float64] */;
  %508 = reshape(%507, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %509 = @func_1307(%508) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %510 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %511 = %509.0;
  (%510, %506, meta[relay.Constant][26] /* ty=Tensor[(8, 24), float32] */, meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, %511)
}

def @func_3235() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
  %512 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  %513 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  (%512, %513)
}

def @func_5164(%var_5128: Tensor[(12, 9, 5), bool], %var_5129: Tensor[(12, 9, 5), bool]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 9, 5), float32]) {
  %514 = @func_4656() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) */;
  %515 = cast(%var_5129, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %516 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_5128, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = logical_or(%517, %518) /* ty=Tensor[(12, 9, 5), bool] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %521 = sqrt(%520) /* ty=Tensor[(12, 9, 5), float64] */;
  %522 = cast(%519, dtype="int16") /* ty=Tensor[(12, 9, 5), int16] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="int16") /* ty=Tensor[(12, 9, 5), int16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %526 = add(%524, %525) /* ty=Tensor[(12, 9, 5), int16] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %528 = %514.0;
  %529 = acosh(%527) /* ty=Tensor[(12, 9, 5), float32] */;
  (%528, %529)
}

def @func_5613(%var_5598: Tensor[(14, 4, 9), float32]) -> (Tensor[(14, 4, 9), float32], Tensor[(14, 4, 9), int16]) {
  %530 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 9), float32] */;
  %531 = cast(%var_5598, dtype="int16") /* ty=Tensor[(14, 4, 9), int16] */;
  %532 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(14, 4, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 4, 9), float32] */, dtype="int16") /* ty=Tensor[(14, 4, 9), int16] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %535 = sqrt(%530) /* ty=Tensor[(14, 4, 9), float32] */;
  %536 = maximum(%533, %534) /* ty=Tensor[(14, 4, 9), int16] */;
  (%535, %536)
}

def @func_5961(%var_5952: Tensor[(900, 1), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(504), int8], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(12, 15, 5), int32], Tensor[(60), int32], Tensor[(900, 1), int32], Tensor[(14, 13, 14), float64]) {
  %537 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %538 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %539 = @func_5295() /* ty=Tensor[(504), int8] */;
  %540 = cast(%539, dtype="int8") /* ty=Tensor[(504), int8] */;
  %541 = reshape(%540, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
  %542 = @func_1865(%541) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %543 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %544 = @func_5500() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %545 = @func_2754() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %546 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %547 = cast(%var_5952, dtype="int32") /* ty=Tensor[(900, 1), int32] */;
  %548 = reshape(%546, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), int32] */;
  %549 = reshape(%547, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), int32] */;
  %550 = %537.0;
  %551 = %538.1;
  %552 = %542.2;
  %553 = %543.0;
  %554 = %544.0;
  %555 = %545.0;
  %556 = @func_4153(%548, %549) /* ty=Tensor[(12, 15, 5), int32] */;
  %557 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  (%550, %539, %551, %552, %553, %554, %555, %556, meta[relay.Constant][29] /* ty=Tensor[(60), int32] */, %var_5952, %557)
}

def @main(%var_6132: Tensor[(12, 1, 2), float64]) -> Tensor[(12, 1, 2), float64] {
  %558 = cast(%var_6132, dtype="float64") /* ty=Tensor[(12, 1, 2), float64] */;
  acos(%558) /* ty=Tensor[(12, 1, 2), float64] */
}

def @func_5456(%var_5451: Tensor[(1, 13, 12), uint64], %var_5452: Tensor[(11, 13, 12), uint64]) -> Tensor[(11, 13, 12), uint64] {
  %559 = cast(%var_5451, dtype="uint64") /* ty=Tensor[(1, 13, 12), uint64] */;
  %560 = cast(%var_5452, dtype="uint64") /* ty=Tensor[(11, 13, 12), uint64] */;
  bitwise_and(%559, %560) /* ty=Tensor[(11, 13, 12), uint64] */
}

def @func_6096(%var_6062: Tensor[(2, 6, 13), uint64]) -> (Tensor[(2, 6, 13), bool],) {
  %561 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %562 = cast(%var_6062, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
  %563 = less(%561, %562) /* ty=Tensor[(2, 6, 13), bool] */;
  (%563,)
}

def @func_904() -> Tensor[(14, 13, 14), float64] {
  %564 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %564.0
}

def @func_1035() -> (Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %565 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %566 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %568 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %570 = tan(%569) /* ty=Tensor[(14, 13, 14), float64] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %572 = rsqrt(%571) /* ty=Tensor[(14, 13, 14), float64] */;
  %573 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %576 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%572, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %579 = %565.3;
  %580 = sinh(%567) /* ty=Tensor[(14, 13, 14), float32] */;
  %581 = mod(%577, %578) /* ty=Tensor[(14, 13, 14), float64] */;
  (%579, %580, %581)
}

def @func_2404() -> (Tensor[(6, 8, 9), float32],) {
  %582 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  %583 = rsqrt(%582) /* ty=Tensor[(6, 8, 9), float32] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  %585 = acos(%584) /* ty=Tensor[(6, 8, 9), float32] */;
  (%585,)
}

def @func_195(%var_186: Tensor[(8, 7, 6), int16]) -> (Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) {
  %586 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 7, 6), int16] */, dtype="bool") /* ty=Tensor[(8, 7, 6), bool] */;
  %587 = shape_of(%var_186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_186, dtype="bool") /* ty=Tensor[(8, 7, 6), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %590 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 504), int8] */, dtype="int8") /* ty=Tensor[(1, 504), int8] */;
  %591 = reshape(%590, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int8] */;
  %592 = @func_124(%591) /* ty=(Tensor[(7, 8, 9), float32],) */;
  %593 = equal(%588, %589) /* ty=Tensor[(8, 7, 6), bool] */;
  %594 = %592.0;
  (%593, %594, meta[relay.Constant][33] /* ty=Tensor[(1, 504), int8] */)
}

def @func_5780() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float32]) {
  %595 = @func_3235() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %596 = %595.1;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %598 = reshape(%597, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float64] */;
  %599 = cast(%596, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %600 = reshape(%599, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %601 = @func_1920(%600) /* ty=(Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) */;
  %602 = @func_1945(%598) /* ty=Tensor[(14, 13, 14), uint64] */;
  %603 = %601.1;
  (%596, %602, %603)
}

def @func_4984(%var_4909: Tensor[(9, 100), int32], %var_4920: Tensor[(3, 20), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(12, 15, 5), int32], Tensor[(9, 100), int32], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(154), float64], Tensor[(3, 20), float64]) {
  %604 = @func_4375() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %605 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 20), int32] */, dtype="int32") /* ty=Tensor[(3, 20), int32] */;
  %606 = cast(%var_4909, dtype="int32") /* ty=Tensor[(9, 100), int32] */;
  %607 = reshape(%605, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), int32] */;
  %608 = reshape(%606, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), int32] */;
  %609 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %610 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %611 = @func_4819() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) */;
  %612 = cast(%var_4920, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
  %613 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(3, 20), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %614 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 20), int32] */, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %616 = subtract(%614, %615) /* ty=Tensor[(3, 20), int64] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %618 = log(%617) /* ty=Tensor[(3, 20), float32] */;
  %619 = cast(%var_4920, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(2), int32] */;
  %621 = cast(%618, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %623 = %604.0;
  %624 = @func_4153(%607, %608) /* ty=Tensor[(12, 15, 5), int32] */;
  %625 = %609.1;
  %626 = %610.0;
  %627 = %611.1;
  %628 = divide(%621, %622) /* ty=Tensor[(3, 20), float64] */;
  (%623, %624, %var_4909, %625, %626, %627, %628)
}

def @func_1307(%var_1280: Tensor[(11, 14, 1), float64]) -> (Tensor[(11, 14, 1), float64],) {
  %629 = cast(%var_1280, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
  %630 = cosh(%629) /* ty=Tensor[(11, 14, 1), float64] */;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
  %632 = acosh(%631) /* ty=Tensor[(11, 14, 1), float64] */;
  (%632,)
}

def @func_2040(%var_2014: Tensor[(14, 8, 5), uint32]) -> (Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) {
  %633 = cast(%var_2014, dtype="uint32") /* ty=Tensor[(14, 8, 5), uint32] */;
  %634 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 8, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 8, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 8, 5), uint32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %637 = cast(%var_2014, dtype="float64") /* ty=Tensor[(14, 8, 5), float64] */;
  %638 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %639 = right_shift(%635, %636) /* ty=Tensor[(14, 8, 5), uint32] */;
  %640 = sigmoid(%637) /* ty=Tensor[(14, 8, 5), float64] */;
  %641 = %638.0;
  %642 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
  (%639, %640, %641, %642)
}

def @func_1655() -> (Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) {
  %643 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %644 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %645 = %643.2;
  %646 = %644.1;
  (%645, %646)
}

def @func_4603(%var_4590: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), bool],) {
  %647 = @func_4375() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %648 = %647.0;
  %649 = cast(%var_4590, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = less_equal(%651, %652) /* ty=Tensor[(14, 13, 14), bool] */;
  (%653,)
}

def @func_2382() -> (Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) {
  %654 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
  %655 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
  %656 = cast(%655, dtype="int16") /* ty=Tensor[(14, 13, 14), int16] */;
  %657 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%654, dtype="int16") /* ty=Tensor[(14, 13, 14), int16] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %660 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %661 = subtract(%658, %659) /* ty=Tensor[(14, 13, 14), int16] */;
  %662 = %660.1;
  (%661, %662)
}

def @func_3837(%var_3788: Tensor[(144, 2), float64], %var_3824: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) {
  %663 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
  %664 = @func_2382() /* ty=(Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) */;
  %665 = cast(%var_3788, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %666 = reshape(%665, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %667 = %664.0;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %669 = reshape(%668, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %670 = @func_336(%669) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %671 = %670.1;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %673 = reshape(%672, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float64] */;
  %674 = cast(%var_3824, dtype="int16") /* ty=Tensor[(336), int16] */;
  %675 = reshape(%674, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %676 = @func_195(%675) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %677 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %678 = %663.1;
  %679 = @func_733(%666) /* ty=Tensor[(12, 12, 2), bool] */;
  %680 = @func_1945(%673) /* ty=Tensor[(14, 13, 14), uint64] */;
  %681 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  %682 = %676.0;
  %683 = %677.0;
  (%678, %667, %679, %var_3788, %671, %680, %681, %682, %var_3824, %683)
}

def @func_3376(%var_3360: Tensor[(8, 6, 3), uint64]) -> (Tensor[(8, 6, 3), bool],) {
  %684 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 6, 3), uint64] */, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %685 = shape_of(%var_3360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%var_3360, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = less_equal(%686, %687) /* ty=Tensor[(8, 6, 3), bool] */;
  (%688,)
}

def @func_1448() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) {
  %689 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %690 = reshape(%689, newshape=[]) /* ty=int32 */;
  %691 = @func_1218(%690) /* ty=(Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) */;
  %692 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %694 = reshape(%693, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %695 = @func_336(%694) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %696 = cast(meta[relay.Constant][37] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %697 = reshape(%696, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %698 = @func_1307(%697) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %699 = %691.1;
  %700 = %695.1;
  %701 = %698.0;
  (%692, %699, -9 /* ty=int32 */, %700, %701, meta[relay.Constant][37] /* ty=Tensor[(154), float64] */)
}

def @func_1613(%var_1540: Tensor[(1, 154), float64]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) {
  %702 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %703 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %704 = cast(%var_1540, dtype="float64") /* ty=Tensor[(1, 154), float64] */;
  %705 = reshape(%704, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %706 = @func_1307(%705) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
  %709 = reshape(%708, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %710 = @func_1307(%709) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %711 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
  %712 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 128), float32] */, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %713 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 336), int16] */, dtype="int16") /* ty=Tensor[(1, 336), int16] */;
  %714 = reshape(%712, newshape=[1, 16, 16]) /* ty=Tensor[(1, 16, 16), float32] */;
  %715 = reshape(%713, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %716 = @func_1327(%714, %715) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) */;
  %717 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
  %718 = cast(%var_1540, dtype="uint8") /* ty=Tensor[(1, 154), uint8] */;
  %719 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%707, dtype="uint8") /* ty=Tensor[(11, 14, 1), uint8] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %722 = add(%720, %721) /* ty=Tensor[(11, 14, ?), uint8] */;
  %723 = cast(%722, dtype="int16") /* ty=Tensor[(11, 14, ?), int16] */;
  %724 = shape_of(%var_1540, dtype="int32") /* ty=Tensor[(2), int32] */;
  %725 = cast(%var_1540, dtype="int16") /* ty=Tensor[(1, 154), int16] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %727 = cast(%var_1540, dtype="float64") /* ty=Tensor[(1, 154), float64] */;
  %728 = asin(%727) /* ty=Tensor[(1, 154), float64] */;
  %729 = cast(%722, dtype="bool") /* ty=Tensor[(11, 14, ?), bool] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %731 = cast(%728, dtype="bool") /* ty=Tensor[(1, 154), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %733 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %734 = cast(%707, dtype="bool") /* ty=Tensor[(11, 14, 1), bool] */;
  %735 = shape_of(%728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %736 = cast(%728, dtype="bool") /* ty=Tensor[(1, 154), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %738 = greater(%736, %737) /* ty=Tensor[(?, 154), bool] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(?, 154), float64] */;
  %740 = acos(%739) /* ty=Tensor[(?, 154), float64] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(?, 154), float32] */;
  %742 = %702.1;
  %743 = %703.1;
  %744 = %710.0;
  %745 = %711.2;
  %746 = %716.1;
  %747 = %717.4;
  %748 = multiply(%725, %726) /* ty=Tensor[(?, 154), int16] */;
  %749 = logical_or(%731, %732) /* ty=Tensor[(?, 154), bool] */;
  %750 = %733.2;
  %751 = atan(%741) /* ty=Tensor[(?, 154), float32] */;
  (%742, %743, %744, %745, %746, meta[relay.Constant][38] /* ty=Tensor[(2, 128), float32] */, meta[relay.Constant][39] /* ty=Tensor[(1, 336), int16] */, %747, %748, %749, %750, %751)
}

def @func_2148() -> Tensor[(14, 13, 14), float32] {
  @func_698() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_310() -> (Tensor[(14, 13, 14), float32],) {
  %752 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %753 = erf(%752) /* ty=Tensor[(14, 13, 14), float32] */;
  (%753,)
}

def @func_698() -> Tensor[(14, 13, 14), float32] {
  %754 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %754.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4397(%var_4393: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), uint32], Tensor[(288), float64], Tensor[(336), int16]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %1 = cast(%var_4393, dtype="int16") /* ty=Tensor[(336), int16] */;
  %2 = reshape(%0, newshape=[144, 2]) /* ty=Tensor[(144, 2), float64] */;
  %3 = reshape(%1, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %4 = @func_3837(%2, %3) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) */;
  %5 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %6 = %4.4;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(288), float64] */, %var_4393)
}

def @func_6001() -> (Tensor[(14, 13, 14), float32],) {
  @func_5999() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_1138(%var_1127: Tensor[(2, 2, 15), uint8]) -> Tensor[(2, 2, 15), uint8] {
  %7 = cast(%var_1127, dtype="uint8") /* ty=Tensor[(2, 2, 15), uint8] */;
  %8 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(2, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(2, 2, 15), uint8] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%9, %10) /* ty=Tensor[(2, 2, 15), uint8] */
}

def @func_4844(%var_4843: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
  %13 = fn (%var_4838: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
    %11 = cast(%var_4838, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
    %12 = cos(%11) /* ty=Tensor[(9, 2, 5), float32] */;
    (%12,)
  };
  %13(%var_4843) /* ty=(Tensor[(9, 2, 5), float32],) */
}

def @func_5061(%var_5060: Tensor[(2, 7, 8), float64]) -> (Tensor[(2, 7, 8), float32],) {
  %24 = fn (%var_5037: Tensor[(2, 7, 8), float64]) -> (Tensor[(2, 7, 8), float32],) {
    %14 = cast(%var_5037, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
    %15 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %18 = divide(%16, %17) /* ty=Tensor[(2, 7, 8), float64] */;
    %19 = cast(%var_5037, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%18, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %23 = power(%21, %22) /* ty=Tensor[(2, 7, 8), float32] */;
    (%23,)
  };
  %24(%var_5060) /* ty=(Tensor[(2, 7, 8), float32],) */
}

def @func_3639(%var_3638: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) {
  %38 = fn (%var_3609: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) {
    %25 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %26 = cast(%var_3609, dtype="int16") /* ty=Tensor[(336), int16] */;
    %27 = reshape(%26, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
    %28 = @func_195(%27) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
    %29 = %28.2;
    %30 = cast(%29, dtype="int8") /* ty=Tensor[(1, 504), int8] */;
    %31 = reshape(%30, newshape=[12, 42]) /* ty=Tensor[(12, 42), int8] */;
    %32 = @func_1480(%31) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) */;
    %33 = cast(%29, dtype="float64") /* ty=Tensor[(1, 504), float64] */;
    %34 = %25.0;
    %35 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
    %36 = %32.0;
    %37 = acosh(%33) /* ty=Tensor[(1, 504), float64] */;
    (%34, %var_3609, %35, %36, %37)
  };
  %38(%var_3638) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) */
}

def @func_733(%var_724: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), bool] {
  %39 = cast(%var_724, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %40 = log2(%39) /* ty=Tensor[(12, 12, 2), float64] */;
  %41 = cast(%var_724, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%43, %44) /* ty=Tensor[(12, 12, 2), bool] */
}

def @func_311() -> (Tensor[(14, 13, 14), float32],) {
  %47 = fn () -> (Tensor[(14, 13, 14), float32],) {
    %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    %46 = erf(%45) /* ty=Tensor[(14, 13, 14), float32] */;
    (%46,)
  };
  %47() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_1276() -> Tensor[(14, 13, 14), float32] {
  %49 = fn () -> Tensor[(14, 13, 14), float32] {
    %48 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %48.1
  };
  %49() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_2042(%var_2041: Tensor[(14, 8, 5), uint32]) -> (Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) {
  %60 = fn (%var_2014: Tensor[(14, 8, 5), uint32]) -> (Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) {
    %50 = cast(%var_2014, dtype="uint32") /* ty=Tensor[(14, 8, 5), uint32] */;
    %51 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 8, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 8, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 8, 5), uint32] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %54 = cast(%var_2014, dtype="float64") /* ty=Tensor[(14, 8, 5), float64] */;
    %55 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %56 = right_shift(%52, %53) /* ty=Tensor[(14, 8, 5), uint32] */;
    %57 = sigmoid(%54) /* ty=Tensor[(14, 8, 5), float64] */;
    %58 = %55.0;
    %59 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
    (%56, %57, %58, %59)
  };
  %60(%var_2041) /* ty=(Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) */
}

def @func_4603(%var_4590: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), bool],) {
  %61 = @func_4375() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %62 = %61.0;
  %63 = cast(%var_4590, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = less_equal(%65, %66) /* ty=Tensor[(14, 13, 14), bool] */;
  (%67,)
}

def @main(%var_6132: Tensor[(12, 1, 2), float64]) -> Tensor[(12, 1, 2), float64] {
  %68 = cast(%var_6132, dtype="float64") /* ty=Tensor[(12, 1, 2), float64] */;
  acos(%68) /* ty=Tensor[(12, 1, 2), float64] */
}

def @func_2383() -> (Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) {
  %78 = fn () -> (Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) {
    %69 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
    %70 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
    %71 = cast(%70, dtype="int16") /* ty=Tensor[(14, 13, 14), int16] */;
    %72 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%69, dtype="int16") /* ty=Tensor[(14, 13, 14), int16] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %75 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
    %76 = subtract(%73, %74) /* ty=Tensor[(14, 13, 14), int16] */;
    %77 = %75.1;
    (%76, %77)
  };
  %78() /* ty=(Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) */
}

def @func_5250() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(7, 12, ?), bool], Tensor[(36), float32], Tensor[(14, 13, 14), float64], Tensor[(9, 1, 4), float32], Tensor[(192), float32]) {
  @func_5248() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(7, 12, ?), bool], Tensor[(36), float32], Tensor[(14, 13, 14), float64], Tensor[(9, 1, 4), float32], Tensor[(192), float32]) */
}

def @func_3928(%var_3925: int16, %var_3926: Tensor[(9, 1), int16], %var_3927: Tensor[(24, 14), int16]) -> (Tensor[(9, 1), bool], Tensor[(14, 3, 1), int32], Tensor[(144, 2), float64], Tensor[(288), float64], Tensor[(24, 14), int16]) {
  %92 = fn (%var_3894: int16, %var_3895: Tensor[(9, 1), int16], %var_3916: Tensor[(24, 14), int16]) -> (Tensor[(9, 1), bool], Tensor[(14, 3, 1), int32], Tensor[(144, 2), float64], Tensor[(288), float64], Tensor[(24, 14), int16]) {
    %79 = cast(%var_3894, dtype="bool") /* ty=bool */;
    %80 = cast(%var_3895, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
    %81 = cast(%var_3894, dtype="int32") /* ty=int32 */;
    %82 = reshape(%81, newshape=[]) /* ty=int32 */;
    %83 = @func_1218(%82) /* ty=(Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) */;
    %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %85 = cast(%var_3916, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
    %86 = reshape(%84, newshape=[144, 2]) /* ty=Tensor[(144, 2), float64] */;
    %87 = reshape(%85, newshape=[336]) /* ty=Tensor[(336), int16] */;
    %88 = @func_3837(%86, %87) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) */;
    %89 = greater(%79, %80) /* ty=Tensor[(9, 1), bool] */;
    %90 = %83.1;
    %91 = %88.3;
    (%89, %90, %91, meta[relay.Constant][5] /* ty=Tensor[(288), float64] */, %var_3916)
  };
  %92(%var_3925, %var_3926, %var_3927) /* ty=(Tensor[(9, 1), bool], Tensor[(14, 3, 1), int32], Tensor[(144, 2), float64], Tensor[(288), float64], Tensor[(24, 14), int16]) */
}

def @func_5399(%var_5397: float64, %var_5398: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), bool], Tensor[(14, 13, 14), float64]) {
  @func_5395(%var_5397, %var_5398) /* ty=(Tensor[(2, 9, 1), bool], Tensor[(14, 13, 14), float64]) */
}

def @func_1072() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
  %99 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
    %93 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
    %94 = %93.0;
    %95 = cast(%94, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    %96 = reshape(%95, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
    %97 = @func_336(%96) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
    %98 = %97.0;
    (%94, %98)
  };
  %99() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */
}

def @func_4376() -> (Tensor[(14, 13, 14), float32],) {
  %102 = fn () -> (Tensor[(14, 13, 14), float32],) {
    %100 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %101 = %100.0;
    (%101,)
  };
  %102() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_3737(%var_3735: Tensor[(14, 13, 14), float64]) -> (Tensor[(14, 13, 14), int32],) {
  @func_3734(%var_3735) /* ty=(Tensor[(14, 13, 14), int32],) */
}

def @func_884(%var_882: float64, %var_883: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(14, 13, 14), float64], Tensor[(16, 13, 16), float64]) {
  @func_880(%var_882, %var_883) /* ty=(Tensor[(16, 13, 16), float64], Tensor[(14, 13, 14), float64], Tensor[(16, 13, 16), float64]) */
}

def @func_3883(%var_3882: Tensor[(30, 2), uint8]) -> (Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) {
  %112 = fn (%var_3871: Tensor[(30, 2), uint8]) -> (Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) {
    %103 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
    %104 = %103.3;
    %105 = cast(%var_3871, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
    %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(2), int32] */;
    %107 = cast(%104, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %109 = cast(%var_3871, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %110 = logical_xor(%107, %108) /* ty=Tensor[(30, 2), uint8] */;
    %111 = cosh(%109) /* ty=Tensor[(30, 2), float32] */;
    (%110, %111)
  };
  %112(%var_3882) /* ty=(Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) */
}

def @func_3678() -> (Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) {
  @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */
}

def @func_905() -> Tensor[(14, 13, 14), float64] {
  %114 = fn () -> Tensor[(14, 13, 14), float64] {
    %113 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
    %113.0
  };
  %114() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_1483(%var_1481: Tensor[(12, 42), int8]) -> (Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) {
  @func_1480(%var_1481) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) */
}

def @func_1867(%var_1866: Tensor[(252, 2), int8]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %130 = fn (%var_1827: Tensor[(252, 2), int8]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
    %115 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %116 = cast(%var_1827, dtype="int8") /* ty=Tensor[(252, 2), int8] */;
    %117 = reshape(%116, newshape=[12, 42]) /* ty=Tensor[(12, 42), int8] */;
    %118 = @func_1480(%117) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) */;
    %119 = %118.2;
    %120 = cast(%var_1827, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(2), int32] */;
    %122 = cast(%119, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %124 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
    %125 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %126 = %115.1;
    %127 = add(%122, %123) /* ty=Tensor[(12, 42), float64] */;
    %128 = %124.0;
    %129 = %125.0;
    (%126, %127, %128, %129)
  };
  %130(%var_1866) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */
}

def @func_1635() -> (Tensor[(14, 13, 14), float32],) {
  %131 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  (%131,)
}

def @func_1771() -> (Tensor[(14, 13, 14), float32],) {
  %137 = fn () -> (Tensor[(14, 13, 14), float32],) {
    %132 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
    %133 = cast(%132, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
    %134 = cosh(%133) /* ty=Tensor[(14, 13, 14), float64] */;
    %135 = cast(%134, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    %136 = sigmoid(%135) /* ty=Tensor[(14, 13, 14), float32] */;
    (%136,)
  };
  %137() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_4400(%var_4398: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), uint32], Tensor[(288), float64], Tensor[(336), int16]) {
  @func_4397(%var_4398) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), uint32], Tensor[(288), float64], Tensor[(336), int16]) */
}

def @func_3564() -> (Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) {
  @func_3562() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) */
}

def @func_2232(%var_2230: Tensor[(7, 13, 4), int16], %var_2231: Tensor[(7, 13, 4), int16]) -> Tensor[(7, 13, 4), int16] {
  @func_2228(%var_2230, %var_2231) /* ty=Tensor[(7, 13, 4), int16] */
}

def @func_4658() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) {
  @func_4656() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) */
}

def @func_4987(%var_4985: Tensor[(9, 100), int32], %var_4986: Tensor[(3, 20), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(12, 15, 5), int32], Tensor[(9, 100), int32], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(154), float64], Tensor[(3, 20), float64]) {
  %163 = fn (%var_4909: Tensor[(9, 100), int32], %var_4920: Tensor[(3, 20), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(12, 15, 5), int32], Tensor[(9, 100), int32], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(154), float64], Tensor[(3, 20), float64]) {
    %138 = @func_4375() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 20), int32] */, dtype="int32") /* ty=Tensor[(3, 20), int32] */;
    %140 = cast(%var_4909, dtype="int32") /* ty=Tensor[(9, 100), int32] */;
    %141 = reshape(%139, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), int32] */;
    %142 = reshape(%140, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), int32] */;
    %143 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
    %144 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
    %145 = @func_4819() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) */;
    %146 = cast(%var_4920, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
    %147 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 20), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %148 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 20), int32] */, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %150 = subtract(%148, %149) /* ty=Tensor[(3, 20), int64] */;
    %151 = cast(%150, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %152 = log(%151) /* ty=Tensor[(3, 20), float32] */;
    %153 = cast(%var_4920, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
    %155 = cast(%152, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %157 = %138.0;
    %158 = @func_4153(%141, %142) /* ty=Tensor[(12, 15, 5), int32] */;
    %159 = %143.1;
    %160 = %144.0;
    %161 = %145.1;
    %162 = divide(%155, %156) /* ty=Tensor[(3, 20), float64] */;
    (%157, %158, %var_4909, %159, %160, %161, %162)
  };
  %163(%var_4985, %var_4986) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(12, 15, 5), int32], Tensor[(9, 100), int32], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(154), float64], Tensor[(3, 20), float64]) */
}

def @func_5639() -> (Tensor[(14, 13, 14), float64],) {
  %165 = fn () -> (Tensor[(14, 13, 14), float64],) {
    %164 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
    (%164,)
  };
  %165() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_5964(%var_5962: Tensor[(900, 1), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(504), int8], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(12, 15, 5), int32], Tensor[(60), int32], Tensor[(900, 1), int32], Tensor[(14, 13, 14), float64]) {
  @func_5961(%var_5962) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(504), int8], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(12, 15, 5), int32], Tensor[(60), int32], Tensor[(900, 1), int32], Tensor[(14, 13, 14), float64]) */
}

def @func_707() -> (Tensor[(14, 13, 14), float64],) {
  %166 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  (%166,)
}

def @func_1450() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) {
  @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */
}

def @func_3378(%var_3377: Tensor[(8, 6, 3), uint64]) -> (Tensor[(8, 6, 3), bool],) {
  %172 = fn (%var_3360: Tensor[(8, 6, 3), uint64]) -> (Tensor[(8, 6, 3), bool],) {
    %167 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 6, 3), uint64] */, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %168 = shape_of(%var_3360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%var_3360, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %171 = less_equal(%169, %170) /* ty=Tensor[(8, 6, 3), bool] */;
    (%171,)
  };
  %172(%var_3377) /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_1035() -> (Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %173 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %174 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %176 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %178 = tan(%177) /* ty=Tensor[(14, 13, 14), float64] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %180 = rsqrt(%179) /* ty=Tensor[(14, 13, 14), float64] */;
  %181 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%180, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = %173.3;
  %188 = sinh(%175) /* ty=Tensor[(14, 13, 14), float32] */;
  %189 = mod(%185, %186) /* ty=Tensor[(14, 13, 14), float64] */;
  (%187, %188, %189)
}

def @func_1084() -> Tensor[(14, 13, 14), float64] {
  %191 = fn () -> Tensor[(14, 13, 14), float64] {
    %190 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
    %190.1
  };
  %191() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_2754() -> (Tensor[(14, 13, 14), float64],) {
  %192 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
  %193 = %192.0;
  (%193,)
}

def @func_2011(%var_2010: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
  %201 = fn (%var_2000: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
    %194 = cast(%var_2000, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
    %195 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
    %196 = shape_of(%var_2000, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%var_2000, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %199 = asinh(%194) /* ty=Tensor[(6, 2, 16), float32] */;
    %200 = minimum(%197, %198) /* ty=Tensor[(6, 2, 16), float32] */;
    (%199, %200)
  };
  %201(%var_2010) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */
}

def @func_5395(%var_5379: float64, %var_5380: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), bool], Tensor[(14, 13, 14), float64]) {
  %202 = cast(%var_5379, dtype="bool") /* ty=bool */;
  %203 = cast(%var_5380, dtype="bool") /* ty=Tensor[(2, 9, 1), bool] */;
  %204 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %205 = equal(%202, %203) /* ty=Tensor[(2, 9, 1), bool] */;
  %206 = %204.0;
  (%205, %206)
}

def @func_3562() -> (Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) {
  %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %208 = reshape(%207, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %209 = @func_195(%208) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %210 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  %211 = %209.2;
  (%210, %211, meta[relay.Constant][9] /* ty=Tensor[(336), int16] */)
}

def @func_5368(%var_5361: Tensor[(336, 1), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(336, 1), int16]) {
  %212 = cast(%var_5361, dtype="int16") /* ty=Tensor[(336, 1), int16] */;
  %213 = reshape(%212, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %214 = @func_3637(%213) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(1, 504), float64]) */;
  %215 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
  %216 = %214.2;
  (%215, %216, %var_5361)
}

def @func_3951(%var_3949: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16]) {
  %217 = cast(%var_3949, dtype="int16") /* ty=Tensor[(336), int16] */;
  %218 = reshape(%217, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
  %219 = @func_195(%218) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
  %220 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  %221 = %219.1;
  (%220, %221, %var_3949)
}

def @func_4153(%var_4141: Tensor[(12, 1, 5), int32], %var_4142: Tensor[(12, 15, 5), int32]) -> Tensor[(12, 15, 5), int32] {
  %222 = cast(%var_4141, dtype="int32") /* ty=Tensor[(12, 1, 5), int32] */;
  %223 = cast(%var_4142, dtype="int32") /* ty=Tensor[(12, 15, 5), int32] */;
  bitwise_or(%222, %223) /* ty=Tensor[(12, 15, 5), int32] */
}

def @func_5500() -> (Tensor[(14, 13, 14), float64],) {
  %224 = @func_3235() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %225 = %224.0;
  (%225,)
}

def @func_5168(%var_5166: Tensor[(12, 9, 5), bool], %var_5167: Tensor[(12, 9, 5), bool]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 9, 5), float32]) {
  @func_5164(%var_5166, %var_5167) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 9, 5), float32]) */
}

def @func_2257() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) {
  %226 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %227 = cast(meta[relay.Constant][10] /* ty=Tensor[(30, 2), uint8] */, dtype="uint8") /* ty=Tensor[(30, 2), uint8] */;
  %228 = reshape(%227, newshape=[2, 2, 15]) /* ty=Tensor[(2, 2, 15), uint8] */;
  %229 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %230 = %226.1;
  %231 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
  %232 = @func_1138(%228) /* ty=Tensor[(2, 2, 15), uint8] */;
  %233 = %229.0;
  (%230, %231, %232, meta[relay.Constant][10] /* ty=Tensor[(30, 2), uint8] */, %233)
}

def @func_5104() -> (Tensor[(14, 13, 14), float64],) {
  %234 = @func_923() /* ty=Tensor[(14, 13, 14), float64] */;
  (%234,)
}

def @func_5106() -> (Tensor[(14, 13, 14), float64],) {
  @func_5104() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_1923(%var_1921: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) {
  @func_1920(%var_1921) /* ty=(Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) */
}

def @func_436() -> Tensor[(14, 13, 14), float64] {
  %236 = fn () -> Tensor[(14, 13, 14), float64] {
    %235 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %235.1
  };
  %236() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_4014(%var_4013: Tensor[(36), float32]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36), float32], Tensor[(6, 2, 16), float64]) {
  %249 = fn (%var_3983: Tensor[(36), float32]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36), float32], Tensor[(6, 2, 16), float64]) {
    %237 = cast(%var_3983, dtype="float32") /* ty=Tensor[(36), float32] */;
    %238 = reshape(%237, newshape=[9, 1, 4]) /* ty=Tensor[(9, 1, 4), float32] */;
    %239 = @func_679(%238) /* ty=(Tensor[(9, 1, 4), float32],) */;
    %240 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %241 = reshape(%240, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %242 = @func_2009(%241) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
    %245 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
    %246 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
    %247 = %239.0;
    %248 = sigmoid(%244) /* ty=Tensor[(6, 2, 16), float64] */;
    (%245, %246, meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, %247, %var_3983, %248)
  };
  %249(%var_4013) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36), float32], Tensor[(6, 2, 16), float64]) */
}

def @func_699() -> Tensor[(14, 13, 14), float32] {
  %251 = fn () -> Tensor[(14, 13, 14), float32] {
    %250 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %250.0
  };
  %251() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_339(%var_337: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) {
  @func_336(%var_337) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */
}

def @func_5961(%var_5952: Tensor[(900, 1), int32]) -> (Tensor[(14, 13, 14), float32], Tensor[(504), int8], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(12, 15, 5), int32], Tensor[(60), int32], Tensor[(900, 1), int32], Tensor[(14, 13, 14), float64]) {
  %252 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %253 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %254 = @func_5295() /* ty=Tensor[(504), int8] */;
  %255 = cast(%254, dtype="int8") /* ty=Tensor[(504), int8] */;
  %256 = reshape(%255, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
  %257 = @func_1865(%256) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %258 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %259 = @func_5500() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %260 = @func_2754() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %261 = cast(meta[relay.Constant][12] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %262 = cast(%var_5952, dtype="int32") /* ty=Tensor[(900, 1), int32] */;
  %263 = reshape(%261, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), int32] */;
  %264 = reshape(%262, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), int32] */;
  %265 = %252.0;
  %266 = %253.1;
  %267 = %257.2;
  %268 = %258.0;
  %269 = %259.0;
  %270 = %260.0;
  %271 = @func_4153(%263, %264) /* ty=Tensor[(12, 15, 5), int32] */;
  %272 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  (%265, %254, %266, %267, %268, %269, %270, %271, meta[relay.Constant][12] /* ty=Tensor[(60), int32] */, %var_5952, %272)
}

def @func_1613(%var_1540: Tensor[(1, 154), float64]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) {
  %273 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
  %274 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %275 = cast(%var_1540, dtype="float64") /* ty=Tensor[(1, 154), float64] */;
  %276 = reshape(%275, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %277 = @func_1307(%276) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %278 = %277.0;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
  %280 = reshape(%279, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %281 = @func_1307(%280) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %282 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 128), float32] */, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 336), int16] */, dtype="int16") /* ty=Tensor[(1, 336), int16] */;
  %285 = reshape(%283, newshape=[1, 16, 16]) /* ty=Tensor[(1, 16, 16), float32] */;
  %286 = reshape(%284, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %287 = @func_1327(%285, %286) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) */;
  %288 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
  %289 = cast(%var_1540, dtype="uint8") /* ty=Tensor[(1, 154), uint8] */;
  %290 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%278, dtype="uint8") /* ty=Tensor[(11, 14, 1), uint8] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %293 = add(%291, %292) /* ty=Tensor[(11, 14, ?), uint8] */;
  %294 = cast(%293, dtype="int16") /* ty=Tensor[(11, 14, ?), int16] */;
  %295 = shape_of(%var_1540, dtype="int32") /* ty=Tensor[(2), int32] */;
  %296 = cast(%var_1540, dtype="int16") /* ty=Tensor[(1, 154), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %298 = cast(%var_1540, dtype="float64") /* ty=Tensor[(1, 154), float64] */;
  %299 = asin(%298) /* ty=Tensor[(1, 154), float64] */;
  %300 = cast(%293, dtype="bool") /* ty=Tensor[(11, 14, ?), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(1, 154), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %304 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %305 = cast(%278, dtype="bool") /* ty=Tensor[(11, 14, 1), bool] */;
  %306 = shape_of(%299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %307 = cast(%299, dtype="bool") /* ty=Tensor[(1, 154), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %309 = greater(%307, %308) /* ty=Tensor[(?, 154), bool] */;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(?, 154), float64] */;
  %311 = acos(%310) /* ty=Tensor[(?, 154), float64] */;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(?, 154), float32] */;
  %313 = %273.1;
  %314 = %274.1;
  %315 = %281.0;
  %316 = %282.2;
  %317 = %287.1;
  %318 = %288.4;
  %319 = multiply(%296, %297) /* ty=Tensor[(?, 154), int16] */;
  %320 = logical_or(%302, %303) /* ty=Tensor[(?, 154), bool] */;
  %321 = %304.2;
  %322 = atan(%312) /* ty=Tensor[(?, 154), float32] */;
  (%313, %314, %315, %316, %317, meta[relay.Constant][13] /* ty=Tensor[(2, 128), float32] */, meta[relay.Constant][14] /* ty=Tensor[(1, 336), int16] */, %318, %319, %320, %321, %322)
}

def @func_3954(%var_3952: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16]) {
  @func_3951(%var_3952) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16]) */
}

def @func_336(%var_331: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) {
  %323 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %324 = %323.0;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %326 = cast(%var_331, dtype="uint32") /* ty=Tensor[(14, 13, 14), uint32] */;
  %327 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%324, dtype="uint32") /* ty=Tensor[(14, 13, 14), uint32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %330 = asinh(%325) /* ty=Tensor[(14, 13, 14), float64] */;
  %331 = left_shift(%328, %329) /* ty=Tensor[(14, 13, 14), uint32] */;
  (%330, %331)
}

def @func_5672(%var_5646: Tensor[(8, 10, 6), float32]) -> (Tensor[(8, 10, 6), float32], Tensor[(14, 13, 14), float32], Tensor[(30, 2), uint8], Tensor[(60), uint8]) {
  %332 = cast(%var_5646, dtype="float32") /* ty=Tensor[(8, 10, 6), float32] */;
  %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %334 = reshape(%333, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint8] */;
  %335 = @func_3881(%334) /* ty=(Tensor[(30, 2), uint8], Tensor[(30, 2), float32]) */;
  %336 = sinh(%332) /* ty=Tensor[(8, 10, 6), float32] */;
  %337 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
  %338 = %335.0;
  (%336, %337, %338, meta[relay.Constant][15] /* ty=Tensor[(60), uint8] */)
}

def @func_197(%var_196: Tensor[(8, 7, 6), int16]) -> (Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) {
  %348 = fn (%var_186: Tensor[(8, 7, 6), int16]) -> (Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) {
    %339 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 7, 6), int16] */, dtype="bool") /* ty=Tensor[(8, 7, 6), bool] */;
    %340 = shape_of(%var_186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%var_186, dtype="bool") /* ty=Tensor[(8, 7, 6), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %343 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 504), int8] */, dtype="int8") /* ty=Tensor[(1, 504), int8] */;
    %344 = reshape(%343, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int8] */;
    %345 = @func_124(%344) /* ty=(Tensor[(7, 8, 9), float32],) */;
    %346 = equal(%341, %342) /* ty=Tensor[(8, 7, 6), bool] */;
    %347 = %345.0;
    (%346, %347, meta[relay.Constant][17] /* ty=Tensor[(1, 504), int8] */)
  };
  %348(%var_196) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */
}

def @func_1141(%var_1139: Tensor[(2, 2, 15), uint8]) -> Tensor[(2, 2, 15), uint8] {
  @func_1138(%var_1139) /* ty=Tensor[(2, 2, 15), uint8] */
}

def @func_2149() -> Tensor[(14, 13, 14), float32] {
  %349 = fn () -> Tensor[(14, 13, 14), float32] {
    @func_698() /* ty=Tensor[(14, 13, 14), float32] */
  };
  %349() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_4820() -> (Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) {
  %361 = fn () -> (Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) {
    %350 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 24), float32] */, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
    %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %352 = reshape(%350, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %353 = reshape(%351, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %354 = @func_3069(%352, %353) /* ty=(Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) */;
    %355 = %354.5;
    %356 = cast(%355, dtype="float64") /* ty=Tensor[(154), float64] */;
    %357 = reshape(%356, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
    %358 = @func_1307(%357) /* ty=(Tensor[(11, 14, 1), float64],) */;
    %359 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
    %360 = %358.0;
    (%359, %355, meta[relay.Constant][18] /* ty=Tensor[(8, 24), float32] */, meta[relay.Constant][19] /* ty=Tensor[(36), float32] */, %360)
  };
  %361() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(154), float64], Tensor[(8, 24), float32], Tensor[(36), float32], Tensor[(11, 14, 1), float64]) */
}

def @func_5248() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(7, 12, ?), bool], Tensor[(36), float32], Tensor[(14, 13, 14), float64], Tensor[(9, 1, 4), float32], Tensor[(192), float32]) {
  %362 = @func_5104() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %363 = @func_3562() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) */;
  %364 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %365 = reshape(%364, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %366 = @func_4278(%365) /* ty=(Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) */;
  %367 = @func_3095() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %368 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %369 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %371 = reshape(%368, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %372 = reshape(%369, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %373 = reshape(%370, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %374 = @func_2912(%371, %372, %373) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) */;
  %375 = %362.0;
  %376 = %363.0;
  %377 = %366.4;
  %378 = %367.0;
  %379 = %374.2;
  (%375, %376, %377, meta[relay.Constant][20] /* ty=Tensor[(36), float32] */, %378, %379, meta[relay.Constant][21] /* ty=Tensor[(192), float32] */)
}

def @func_5572() -> (Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
  %383 = fn () -> (Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
    %380 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
    %381 = %380.3;
    %382 = @func_3863() /* ty=Tensor[(14, 13, 14), float64] */;
    (%381, %382)
  };
  %383() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float64]) */
}

def @func_2584() -> Tensor[(14, 13, 14), float32] {
  %385 = fn () -> Tensor[(14, 13, 14), float32] {
    %384 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %384.0
  };
  %385() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_4126(%var_4125: Tensor[(4, 1, 16), float32]) -> (Tensor[(4, 1, 16), float32], Tensor[(14, 13, 14), float32]) {
  %390 = fn (%var_4113: Tensor[(4, 1, 16), float32]) -> (Tensor[(4, 1, 16), float32], Tensor[(14, 13, 14), float32]) {
    %386 = cast(%var_4113, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
    %387 = @func_3095() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
    %388 = sqrt(%386) /* ty=Tensor[(4, 1, 16), float32] */;
    %389 = %387.1;
    (%388, %389)
  };
  %390(%var_4125) /* ty=(Tensor[(4, 1, 16), float32], Tensor[(14, 13, 14), float32]) */
}

def @func_2405() -> (Tensor[(6, 8, 9), float32],) {
  %395 = fn () -> (Tensor[(6, 8, 9), float32],) {
    %391 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
    %392 = rsqrt(%391) /* ty=Tensor[(6, 8, 9), float32] */;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
    %394 = acos(%393) /* ty=Tensor[(6, 8, 9), float32] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(6, 8, 9), float32],) */
}

def @func_2917(%var_2914: Tensor[(192), float32], %var_2915: Tensor[(6, 2, 16), float32], %var_2916: Tensor[(36, 1), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) {
  @func_2912(%var_2914, %var_2915, %var_2916) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) */
}

def @func_3279() -> Tensor[(14, 13, 14), float32] {
  %398 = fn () -> Tensor[(14, 13, 14), float32] {
    %396 = @func_2583() /* ty=Tensor[(14, 13, 14), float32] */;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    acosh(%397) /* ty=Tensor[(14, 13, 14), float32] */
  };
  %398() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_3734(%var_3723: Tensor[(14, 13, 14), float64]) -> (Tensor[(14, 13, 14), int32],) {
  %399 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
  %400 = cast(%var_3723, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %404 = maximum(%402, %403) /* ty=Tensor[(14, 13, 14), int32] */;
  (%404,)
}

def @func_5371(%var_5369: Tensor[(336, 1), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(336, 1), int16]) {
  @func_5368(%var_5369) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32], Tensor[(336, 1), int16]) */
}

def @func_3583() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  @func_3581() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */
}

def @func_1687() -> Tensor[(14, 13, 14), float32] {
  %405 = fn () -> Tensor[(14, 13, 14), float32] {
    @func_1275() /* ty=Tensor[(14, 13, 14), float32] */
  };
  %405() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_1947(%var_1946: Tensor[(14, 13, 14), float64]) -> Tensor[(14, 13, 14), uint64] {
  %411 = fn (%var_1930: Tensor[(14, 13, 14), float64]) -> Tensor[(14, 13, 14), uint64] {
    %406 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
    %407 = cast(%var_1930, dtype="uint64") /* ty=Tensor[(14, 13, 14), uint64] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="uint64") /* ty=Tensor[(14, 13, 14), uint64] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%409, %410) /* ty=Tensor[(14, 13, 14), uint64] */
  };
  %411(%var_1946) /* ty=Tensor[(14, 13, 14), uint64] */
}

def @func_736(%var_734: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), bool] {
  @func_733(%var_734) /* ty=Tensor[(12, 12, 2), bool] */
}

def @func_3501(%var_3499: Tensor[(14, 13, 14), float32], %var_3500: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
  @func_3497(%var_3499, %var_3500) /* ty=(Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) */
}

def @func_3096() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %414 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
    %412 = @func_1711() /* ty=Tensor[(14, 13, 14), float64] */;
    %413 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
    (%412, %413)
  };
  %414() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */
}

def @func_1037() -> (Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */
}

def @func_4753() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %418 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
    %415 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
    %416 = %415.0;
    %417 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */
}

def @func_2688() -> Tensor[(14, 13, 14), float32] {
  @func_2583() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_4230(%var_4229: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), uint8], Tensor[(30, 2), uint8], Tensor[(6, 8, 9), float32], Tensor[(14, 13, 14), float64]) {
  %431 = fn (%var_4175: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), uint8], Tensor[(30, 2), uint8], Tensor[(6, 8, 9), float32], Tensor[(14, 13, 14), float64]) {
    %419 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
    %420 = cast(%var_4175, dtype="uint8") /* ty=Tensor[(14, 13, 14), uint8] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%419, dtype="uint8") /* ty=Tensor[(14, 13, 14), uint8] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %424 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
    %425 = @func_2404() /* ty=(Tensor[(6, 8, 9), float32],) */;
    %426 = @func_830() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %427 = bitwise_and(%422, %423) /* ty=Tensor[(14, 13, 14), uint8] */;
    %428 = %424.0;
    %429 = %425.0;
    %430 = %426.1;
    (%427, %428, %429, %430)
  };
  %431(%var_4229) /* ty=(Tensor[(14, 13, 14), uint8], Tensor[(30, 2), uint8], Tensor[(6, 8, 9), float32], Tensor[(14, 13, 14), float64]) */
}

def @func_5688() -> (Tensor[(14, 13, 14), float64],) {
  %432 = @func_3024() /* ty=Tensor[(14, 13, 14), float64] */;
  (%432,)
}

def @func_1448() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) {
  %433 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %434 = reshape(%433, newshape=[]) /* ty=int32 */;
  %435 = @func_1218(%434) /* ty=(Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) */;
  %436 = @func_698() /* ty=Tensor[(14, 13, 14), float32] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %438 = reshape(%437, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %439 = @func_336(%438) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %440 = cast(meta[relay.Constant][23] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %441 = reshape(%440, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %442 = @func_1307(%441) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %443 = %435.1;
  %444 = %439.1;
  %445 = %442.0;
  (%436, %443, -9 /* ty=int32 */, %444, %445, meta[relay.Constant][23] /* ty=Tensor[(154), float64] */)
}

def @func_3863() -> Tensor[(14, 13, 14), float64] {
  %446 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %446.0
}

def @func_2690() -> Tensor[(14, 13, 14), float32] {
  @func_2688() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_5869(%var_5867: Tensor[(154), float64]) -> (Tensor[(14, 13, 14), float32], Tensor[(11, 14, 1), float64], Tensor[(154), float64], Tensor[(14, 13, 14), bool], Tensor[(336), int16]) {
  @func_5866(%var_5867) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(11, 14, 1), float64], Tensor[(154), float64], Tensor[(14, 13, 14), bool], Tensor[(336), int16]) */
}

def @func_3236() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
  %449 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) {
    %447 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
    %448 = @func_1083() /* ty=Tensor[(14, 13, 14), float64] */;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */
}

def @func_3025() -> Tensor[(14, 13, 14), float64] {
  %453 = fn () -> Tensor[(14, 13, 14), float64] {
    %450 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %451 = %450.0;
    %452 = cast(%451, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
    acos(%452) /* ty=Tensor[(14, 13, 14), float64] */
  };
  %453() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_5164(%var_5128: Tensor[(12, 9, 5), bool], %var_5129: Tensor[(12, 9, 5), bool]) -> (Tensor[(14, 13, 14), float64], Tensor[(12, 9, 5), float32]) {
  %454 = @func_4656() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) */;
  %455 = cast(%var_5129, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %456 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_5128, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = logical_or(%457, %458) /* ty=Tensor[(12, 9, 5), bool] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %461 = sqrt(%460) /* ty=Tensor[(12, 9, 5), float64] */;
  %462 = cast(%459, dtype="int16") /* ty=Tensor[(12, 9, 5), int16] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="int16") /* ty=Tensor[(12, 9, 5), int16] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %466 = add(%464, %465) /* ty=Tensor[(12, 9, 5), int16] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %468 = %454.0;
  %469 = acosh(%467) /* ty=Tensor[(12, 9, 5), float32] */;
  (%468, %469)
}

def @func_2259() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) {
  @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */
}

def @func_3497(%var_3416: Tensor[(14, 13, 14), float32], %var_3459: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) {
  %470 = @func_3278() /* ty=Tensor[(14, 13, 14), float32] */;
  %471 = cast(%var_3416, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(14, 13, 14), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = cast(meta[relay.Constant][24] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %476 = cast(%var_3459, dtype="int16") /* ty=Tensor[(336), int16] */;
  %477 = reshape(%475, newshape=[60]) /* ty=Tensor[(60), uint8] */;
  %478 = reshape(%476, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %479 = @func_1400(%477, %478) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) */;
  %480 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
  %481 = greater(%473, %474) /* ty=Tensor[(14, 13, 14), bool] */;
  %482 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  %483 = %479.4;
  %484 = %480.1;
  (%481, %482, %483, meta[relay.Constant][24] /* ty=Tensor[(60), uint8] */, %var_3459, %484)
}

def @func_3676() -> (Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) {
  %485 = @func_2257() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32]) */;
  %486 = cast(meta[relay.Constant][25] /* ty=Tensor[(504), int8] */, dtype="int8") /* ty=Tensor[(504), int8] */;
  %487 = reshape(%486, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
  %488 = @func_1865(%487) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
  %489 = @func_1635() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %490 = %485.3;
  %491 = @func_2688() /* ty=Tensor[(14, 13, 14), float32] */;
  %492 = %488.2;
  %493 = %489.0;
  (%490, %491, %492, meta[relay.Constant][25] /* ty=Tensor[(504), int8] */, %493)
}

def @func_4136() -> (Tensor[(14, 13, 14), float32],) {
  @func_4134() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_4281(%var_4279: Tensor[(36), float32]) -> (Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) {
  @func_4278(%var_4279) /* ty=(Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) */
}

def @func_5781() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float32]) {
  %503 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float32]) {
    %494 = @func_3235() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
    %495 = %494.1;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
    %497 = reshape(%496, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float64] */;
    %498 = cast(%495, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    %499 = reshape(%498, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
    %500 = @func_1920(%499) /* ty=(Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) */;
    %501 = @func_1945(%497) /* ty=Tensor[(14, 13, 14), uint64] */;
    %502 = %500.1;
    (%495, %501, %502)
  };
  %503() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float32]) */
}

def @func_4656() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), int16]) {
  %504 = @func_3562() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(1, 504), int8], Tensor[(336), int16]) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
  %507 = @func_2382() /* ty=(Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) */;
  %508 = atan(%506) /* ty=Tensor[(14, 13, 14), float64] */;
  %509 = %507.0;
  (%508, %509)
}

def @func_1220(%var_1219: int32) -> (Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) {
  %516 = fn (%var_1201: int32) -> (Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) {
    %510 = cast(%var_1201, dtype="int32") /* ty=int32 */;
    %511 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 1), int32] */;
    %512 = cast(%var_1201, dtype="int32") /* ty=int32 */;
    %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(14, 3, 1), int32] */;
    %514 = right_shift(%510, %511) /* ty=Tensor[(6, 1), int32] */;
    %515 = logical_xor(%512, %513) /* ty=Tensor[(14, 3, 1), int32] */;
    (%514, %515)
  };
  %516(%var_1219) /* ty=(Tensor[(6, 1), int32], Tensor[(14, 3, 1), int32]) */
}

def @func_2756() -> (Tensor[(14, 13, 14), float64],) {
  @func_2754() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_1403(%var_1401: Tensor[(60), uint8], %var_1402: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) {
  %527 = fn (%var_1363: Tensor[(60), uint8], %var_1376: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) {
    %517 = cast(%var_1363, dtype="uint8") /* ty=Tensor[(60), uint8] */;
    %518 = reshape(%517, newshape=[2, 2, 15]) /* ty=Tensor[(2, 2, 15), uint8] */;
    %519 = cast(%var_1376, dtype="int16") /* ty=Tensor[(336), int16] */;
    %520 = reshape(%519, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
    %521 = @func_195(%520) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
    %524 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
    %525 = @func_1138(%518) /* ty=Tensor[(2, 2, 15), uint8] */;
    %526 = cosh(%523) /* ty=Tensor[(8, 7, 6), float64] */;
    (%524, %525, %var_1363, %var_1376, %526)
  };
  %527(%var_1401, %var_1402) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(2, 2, 15), uint8], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(8, 7, 6), float64]) */
}

def @func_1309(%var_1308: Tensor[(11, 14, 1), float64]) -> (Tensor[(11, 14, 1), float64],) {
  %532 = fn (%var_1280: Tensor[(11, 14, 1), float64]) -> (Tensor[(11, 14, 1), float64],) {
    %528 = cast(%var_1280, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
    %529 = cosh(%528) /* ty=Tensor[(11, 14, 1), float64] */;
    %530 = cast(%529, dtype="float64") /* ty=Tensor[(11, 14, 1), float64] */;
    %531 = acosh(%530) /* ty=Tensor[(11, 14, 1), float64] */;
    (%531,)
  };
  %532(%var_1308) /* ty=(Tensor[(11, 14, 1), float64],) */
}

def @func_5502() -> (Tensor[(14, 13, 14), float64],) {
  @func_5500() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_3840(%var_3838: Tensor[(144, 2), float64], %var_3839: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) {
  %554 = fn (%var_3788: Tensor[(144, 2), float64], %var_3824: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) {
    %533 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
    %534 = @func_2382() /* ty=(Tensor[(14, 13, 14), int16], Tensor[(14, 13, 14), float64]) */;
    %535 = cast(%var_3788, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
    %536 = reshape(%535, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
    %537 = %534.0;
    %538 = cast(%537, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
    %539 = reshape(%538, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
    %540 = @func_336(%539) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
    %541 = %540.1;
    %542 = cast(%541, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
    %543 = reshape(%542, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float64] */;
    %544 = cast(%var_3824, dtype="int16") /* ty=Tensor[(336), int16] */;
    %545 = reshape(%544, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
    %546 = @func_195(%545) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
    %547 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %548 = %533.1;
    %549 = @func_733(%536) /* ty=Tensor[(12, 12, 2), bool] */;
    %550 = @func_1945(%543) /* ty=Tensor[(14, 13, 14), uint64] */;
    %551 = @func_904() /* ty=Tensor[(14, 13, 14), float64] */;
    %552 = %546.0;
    %553 = %547.0;
    (%548, %537, %549, %var_3788, %541, %550, %551, %552, %var_3824, %553)
  };
  %554(%var_3838, %var_3839) /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), int16], Tensor[(12, 12, 2), bool], Tensor[(144, 2), float64], Tensor[(14, 13, 14), uint32], Tensor[(14, 13, 14), uint64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16], Tensor[(14, 13, 14), float32]) */
}

def @func_1712() -> Tensor[(14, 13, 14), float64] {
  %556 = fn () -> Tensor[(14, 13, 14), float64] {
    %555 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
    %555.1
  };
  %556() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_588() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) {
  %564 = fn () -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) {
    %557 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %558 = cast(meta[relay.Constant][28] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
    %559 = reshape(%558, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
    %560 = @func_195(%559) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
    %561 = @func_435() /* ty=Tensor[(14, 13, 14), float64] */;
    %562 = %557.1;
    %563 = %560.0;
    (%561, %562, %563, meta[relay.Constant][28] /* ty=Tensor[(336), int16] */)
  };
  %564() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */
}

def @func_402() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %565 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %568 = reshape(%567, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %569 = @func_336(%568) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), uint32]) */;
  %570 = %569.0;
  (%566, %570)
}

def @func_1656() -> (Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) {
  %575 = fn () -> (Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) {
    %571 = @func_587() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(8, 7, 6), bool], Tensor[(336), int16]) */;
    %572 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
    %573 = %571.2;
    %574 = %572.1;
    (%573, %574)
  };
  %575() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */
}

def @func_3072(%var_3070: Tensor[(192), float32], %var_3071: Tensor[(36), float32]) -> (Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) {
  %590 = fn (%var_3047: Tensor[(192), float32], %var_3048: Tensor[(36), float32]) -> (Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) {
    %576 = @func_1035() /* ty=(Tensor[(336), int16], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %577 = cast(%var_3047, dtype="float32") /* ty=Tensor[(192), float32] */;
    %578 = cast(%var_3047, dtype="float32") /* ty=Tensor[(192), float32] */;
    %579 = cast(%var_3048, dtype="float32") /* ty=Tensor[(36), float32] */;
    %580 = reshape(%577, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %581 = reshape(%578, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %582 = reshape(%579, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %583 = @func_2912(%580, %581, %582) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) */;
    %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
    %585 = reshape(%584, newshape=[1, 154]) /* ty=Tensor[(1, 154), float64] */;
    %586 = @func_1613(%585) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) */;
    %587 = %576.0;
    %588 = %583.3;
    %589 = %586.3;
    (%587, %588, %var_3047, %var_3048, %589, meta[relay.Constant][29] /* ty=Tensor[(154), float64] */)
  };
  %590(%var_3070, %var_3071) /* ty=(Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) */
}

def @func_2228(%var_2210: Tensor[(7, 13, 4), int16], %var_2211: Tensor[(7, 13, 4), int16]) -> Tensor[(7, 13, 4), int16] {
  %591 = cast(%var_2211, dtype="int16") /* ty=Tensor[(7, 13, 4), int16] */;
  %592 = shape_of(%var_2210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_2210, dtype="int16") /* ty=Tensor[(7, 13, 4), int16] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%593, %594) /* ty=Tensor[(7, 13, 4), int16] */
}

def @func_4734() -> (Tensor[(14, 13, 14), float32], Tensor[(4, 36), int16]) {
  %607 = fn () -> (Tensor[(14, 13, 14), float32], Tensor[(4, 36), int16]) {
    %595 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 36), uint64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
    %596 = erf(%595) /* ty=Tensor[(4, 36), float64] */;
    %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 36), uint64] */, dtype="uint64") /* ty=Tensor[(4, 36), uint64] */;
    %598 = reshape(%597, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), uint64] */;
    %599 = @func_3376(%598) /* ty=(Tensor[(8, 6, 3), bool],) */;
    %600 = %599.0;
    %601 = cast(%600, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
    %602 = shape_of(%596, dtype="int32") /* ty=Tensor[(2), int32] */;
    %603 = cast(%596, dtype="int16") /* ty=Tensor[(4, 36), int16] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %605 = @func_2583() /* ty=Tensor[(14, 13, 14), float32] */;
    %606 = minimum(%603, %604) /* ty=Tensor[(4, 36), int16] */;
    (%605, %606)
  };
  %607() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(4, 36), int16]) */
}

def @func_5866(%var_5849: Tensor[(154), float64]) -> (Tensor[(14, 13, 14), float32], Tensor[(11, 14, 1), float64], Tensor[(154), float64], Tensor[(14, 13, 14), bool], Tensor[(336), int16]) {
  %608 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %609 = cast(%var_5849, dtype="float64") /* ty=Tensor[(154), float64] */;
  %610 = reshape(%609, newshape=[11, 14, 1]) /* ty=Tensor[(11, 14, 1), float64] */;
  %611 = @func_1307(%610) /* ty=(Tensor[(11, 14, 1), float64],) */;
  %612 = %608.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(14, 13, 14), float32] */;
  %614 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %615 = reshape(%613, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
  %616 = reshape(%614, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %617 = @func_3497(%615, %616) /* ty=(Tensor[(14, 13, 14), bool], Tensor[(14, 13, 14), float32], Tensor[(8, 7, 6), float64], Tensor[(60), uint8], Tensor[(336), int16], Tensor[(14, 13, 14), float64]) */;
  %618 = %611.0;
  %619 = %617.0;
  (%612, %618, %var_5849, %619, meta[relay.Constant][31] /* ty=Tensor[(336), int16] */)
}

def @func_5690() -> (Tensor[(14, 13, 14), float64],) {
  @func_5688() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_3581() -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) {
  %620 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %621 = %620.1;
  %622 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
  (%621, %622)
}

def @func_924() -> Tensor[(14, 13, 14), float64] {
  %623 = fn () -> Tensor[(14, 13, 14), float64] {
    @func_435() /* ty=Tensor[(14, 13, 14), float64] */
  };
  %623() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_5999() -> (Tensor[(14, 13, 14), float32],) {
  %624 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  (%624,)
}

def @func_709() -> (Tensor[(14, 13, 14), float64],) {
  @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */
}

def @func_681(%var_680: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32],) {
  %627 = fn (%var_672: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32],) {
    %625 = cast(%var_672, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
    %626 = sqrt(%625) /* ty=Tensor[(9, 1, 4), float32] */;
    (%626,)
  };
  %627(%var_680) /* ty=(Tensor[(9, 1, 4), float32],) */
}

def @func_880(%var_836: float64, %var_837: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(14, 13, 14), float64], Tensor[(16, 13, 16), float64]) {
  %628 = cast(%var_836, dtype="float64") /* ty=float64 */;
  %629 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %630 = floor_mod(%628, %629) /* ty=Tensor[(16, 13, 16), float64] */;
  %631 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %635 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
  %636 = cast(%var_837, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %637 = power(%633, %634) /* ty=Tensor[(16, 13, 16), float64] */;
  %638 = %635.0;
  %639 = cosh(%636) /* ty=Tensor[(16, 13, 16), float64] */;
  (%637, %638, %639)
}

def @func_2629(%var_2628: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), float32],) {
  %655 = fn (%var_2612: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), float32],) {
    %640 = cast(%var_2612, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
    %641 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 8, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %644 = divide(%642, %643) /* ty=Tensor[(14, 8, 7), float32] */;
    %645 = cast(%var_2612, dtype="bool") /* ty=Tensor[(14, 8, 7), bool] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%644, dtype="bool") /* ty=Tensor[(14, 8, 7), bool] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %649 = not_equal(%647, %648) /* ty=Tensor[(14, 8, 7), bool] */;
    %650 = cast(%644, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
    %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(%649, dtype="float32") /* ty=Tensor[(14, 8, 7), float32] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %654 = floor_mod(%652, %653) /* ty=Tensor[(14, 8, 7), float32] */;
    (%654,)
  };
  %655(%var_2628) /* ty=(Tensor[(14, 8, 7), float32],) */
}

def @func_6035(%var_6034: Tensor[(2548), float32]) -> (Tensor[(16, 8, 15), float64], Tensor[(14, 13, 14), bool], Tensor[(2548), float32]) {
  %662 = fn (%var_6027: Tensor[(2548), float32]) -> (Tensor[(16, 8, 15), float64], Tensor[(14, 13, 14), bool], Tensor[(2548), float32]) {
    %656 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
    %657 = cast(%var_6027, dtype="float32") /* ty=Tensor[(2548), float32] */;
    %658 = reshape(%657, newshape=[14, 13, 14]) /* ty=Tensor[(14, 13, 14), float32] */;
    %659 = @func_4603(%658) /* ty=(Tensor[(14, 13, 14), bool],) */;
    %660 = atan(%656) /* ty=Tensor[(16, 8, 15), float64] */;
    %661 = %659.0;
    (%660, %661, %var_6027)
  };
  %662(%var_6034) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(14, 13, 14), bool], Tensor[(2548), float32]) */
}

def @func_1330(%var_1328: Tensor[(1, 16, 16), float32], %var_1329: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) {
  %673 = fn (%var_1311: Tensor[(1, 16, 16), float32], %var_1319: Tensor[(336), int16]) -> (Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) {
    %663 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %664 = cast(%var_1319, dtype="int16") /* ty=Tensor[(336), int16] */;
    %665 = reshape(%664, newshape=[8, 7, 6]) /* ty=Tensor[(8, 7, 6), int16] */;
    %666 = @func_195(%665) /* ty=(Tensor[(8, 7, 6), bool], Tensor[(7, 8, 9), float32], Tensor[(1, 504), int8]) */;
    %667 = cast(%var_1311, dtype="float32") /* ty=Tensor[(1, 16, 16), float32] */;
    %668 = log10(%667) /* ty=Tensor[(1, 16, 16), float32] */;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(1, 16, 16), float64] */;
    %670 = %663.1;
    %671 = %666.1;
    %672 = asin(%669) /* ty=Tensor[(1, 16, 16), float64] */;
    (%670, %671, %var_1319, %672)
  };
  %673(%var_1328, %var_1329) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(7, 8, 9), float32], Tensor[(336), int16], Tensor[(1, 16, 16), float64]) */
}

def @func_1637() -> (Tensor[(14, 13, 14), float32],) {
  @func_1635() /* ty=(Tensor[(14, 13, 14), float32],) */
}

def @func_2832() -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) {
  %687 = fn () -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) {
    %674 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
    %675 = %674.0;
    %676 = @func_1686() /* ty=Tensor[(14, 13, 14), float32] */;
    %677 = cast(%676, dtype="uint16") /* ty=Tensor[(14, 13, 14), uint16] */;
    %678 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(%675, dtype="uint16") /* ty=Tensor[(14, 13, 14), uint16] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %681 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
    %682 = reshape(%681, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint32] */;
    %683 = @func_2040(%682) /* ty=(Tensor[(14, 8, 5), uint32], Tensor[(14, 8, 5), float64], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float32]) */;
    %684 = bitwise_or(%679, %680) /* ty=Tensor[(14, 13, 14), uint16] */;
    %685 = %683.3;
    %686 = @func_1711() /* ty=Tensor[(14, 13, 14), float64] */;
    (%684, %685, meta[relay.Constant][34] /* ty=Tensor[(4, 140), uint32] */, %686)
  };
  %687() /* ty=(Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) */
}

def @func_2912(%var_2887: Tensor[(192), float32], %var_2889: Tensor[(6, 2, 16), float32], %var_2895: Tensor[(36, 1), float32]) -> (Tensor[(14, 13, 14), float64], Tensor[(192), float32], Tensor[(9, 1, 4), float32], Tensor[(36, 1), float32], Tensor[(6, 2, 16), float64], Tensor[(14, 13, 14), float64]) {
  %688 = @func_1655() /* ty=(Tensor[(8, 7, 6), bool], Tensor[(14, 13, 14), float64]) */;
  %689 = cast(%var_2895, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %690 = reshape(%689, newshape=[9, 1, 4]) /* ty=Tensor[(9, 1, 4), float32] */;
  %691 = @func_679(%690) /* ty=(Tensor[(9, 1, 4), float32],) */;
  %692 = cast(%var_2887, dtype="float32") /* ty=Tensor[(192), float32] */;
  %693 = reshape(%692, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %694 = @func_2009(%693) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %695 = %694.0;
  %696 = cast(%var_2889, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %700 = left_shift(%698, %699) /* ty=Tensor[(6, 2, 16), int64] */;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  %702 = @func_1071() /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64]) */;
  %703 = %688.1;
  %704 = %691.0;
  %705 = log2(%701) /* ty=Tensor[(6, 2, 16), float64] */;
  %706 = %702.0;
  (%703, %var_2887, %704, %var_2895, %705, %706)
}

def @func_1170(%var_1169: Tensor[(1, 9, 7), int8]) -> Tensor[(1, 9, 7), int8] {
  %709 = fn (%var_1160: Tensor[(1, 9, 7), int8]) -> Tensor[(1, 9, 7), int8] {
    %707 = cast(meta[relay.Constant][35] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %708 = cast(%var_1160, dtype="int8") /* ty=Tensor[(1, 9, 7), int8] */;
    left_shift(%707, %708) /* ty=Tensor[(1, 9, 7), int8] */
  };
  %709(%var_1169) /* ty=Tensor[(1, 9, 7), int8] */
}

def @func_5459(%var_5457: Tensor[(1, 13, 12), uint64], %var_5458: Tensor[(11, 13, 12), uint64]) -> Tensor[(11, 13, 12), uint64] {
  %712 = fn (%var_5451: Tensor[(1, 13, 12), uint64], %var_5452: Tensor[(11, 13, 12), uint64]) -> Tensor[(11, 13, 12), uint64] {
    %710 = cast(%var_5451, dtype="uint64") /* ty=Tensor[(1, 13, 12), uint64] */;
    %711 = cast(%var_5452, dtype="uint64") /* ty=Tensor[(11, 13, 12), uint64] */;
    bitwise_and(%710, %711) /* ty=Tensor[(11, 13, 12), uint64] */
  };
  %712(%var_5457, %var_5458) /* ty=Tensor[(11, 13, 12), uint64] */
}

def @func_4134() -> (Tensor[(14, 13, 14), float32],) {
  %713 = @func_1770() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %714 = %713.0;
  (%714,)
}

def @func_831() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  %721 = fn () -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
    %715 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %716 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
    %717 = %716.0;
    %718 = cast(%717, dtype="float64") /* ty=Tensor[(14, 13, 14), float64] */;
    %719 = %715.0;
    %720 = log2(%718) /* ty=Tensor[(14, 13, 14), float64] */;
    (%719, %720)
  };
  %721() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */
}

def @func_1480(%var_1468: Tensor[(12, 42), int8]) -> (Tensor[(14, 13, 14), float32], Tensor[(7, 8, 9), float32], Tensor[(12, 42), float64]) {
  %722 = cast(%var_1468, dtype="int8") /* ty=Tensor[(12, 42), int8] */;
  %723 = reshape(%722, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int8] */;
  %724 = @func_124(%723) /* ty=(Tensor[(7, 8, 9), float32],) */;
  %725 = cast(%var_1468, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %726 = asinh(%725) /* ty=Tensor[(12, 42), float64] */;
  %727 = cast(%var_1468, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(2), int32] */;
  %729 = cast(%726, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %731 = mod(%729, %730) /* ty=Tensor[(12, 42), float32] */;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %733 = @func_1275() /* ty=Tensor[(14, 13, 14), float32] */;
  %734 = %724.0;
  %735 = erf(%732) /* ty=Tensor[(12, 42), float64] */;
  (%733, %734, %735)
}

def @func_5615(%var_5614: Tensor[(14, 4, 9), float32]) -> (Tensor[(14, 4, 9), float32], Tensor[(14, 4, 9), int16]) {
  %743 = fn (%var_5598: Tensor[(14, 4, 9), float32]) -> (Tensor[(14, 4, 9), float32], Tensor[(14, 4, 9), int16]) {
    %736 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 9), float32] */;
    %737 = cast(%var_5598, dtype="int16") /* ty=Tensor[(14, 4, 9), int16] */;
    %738 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 4, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 4, 9), float32] */, dtype="int16") /* ty=Tensor[(14, 4, 9), int16] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %741 = sqrt(%736) /* ty=Tensor[(14, 4, 9), float32] */;
    %742 = maximum(%739, %740) /* ty=Tensor[(14, 4, 9), int16] */;
    (%741, %742)
  };
  %743(%var_5614) /* ty=(Tensor[(14, 4, 9), float32], Tensor[(14, 4, 9), int16]) */
}

def @func_6096(%var_6062: Tensor[(2, 6, 13), uint64]) -> (Tensor[(2, 6, 13), bool],) {
  %744 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %745 = cast(%var_6062, dtype="bool") /* ty=Tensor[(2, 6, 13), bool] */;
  %746 = less(%744, %745) /* ty=Tensor[(2, 6, 13), bool] */;
  (%746,)
}

def @func_6099(%var_6097: Tensor[(2, 6, 13), uint64]) -> (Tensor[(2, 6, 13), bool],) {
  @func_6096(%var_6097) /* ty=(Tensor[(2, 6, 13), bool],) */
}

def @func_1781() -> Tensor[(14, 13, 14), float32] {
  %748 = fn () -> Tensor[(14, 13, 14), float32] {
    %747 = @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */;
    %747.0
  };
  %748() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_5337() -> Tensor[(14, 13, 14), float32] {
  %750 = fn () -> Tensor[(14, 13, 14), float32] {
    %749 = @func_310() /* ty=(Tensor[(14, 13, 14), float32],) */;
    %749.0
  };
  %750() /* ty=Tensor[(14, 13, 14), float32] */
}

def @func_1616(%var_1614: Tensor[(1, 154), float64]) -> (Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) {
  @func_1613(%var_1614) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float64], Tensor[(11, 14, 1), float64], int32, Tensor[(7, 8, 9), float32], Tensor[(2, 128), float32], Tensor[(1, 336), int16], Tensor[(11, 14, 1), float64], Tensor[(?, 154), int16], Tensor[(?, 154), bool], Tensor[(14, 13, 14), float64], Tensor[(?, 154), float32]) */
}

def @func_5675(%var_5673: Tensor[(8, 10, 6), float32]) -> (Tensor[(8, 10, 6), float32], Tensor[(14, 13, 14), float32], Tensor[(30, 2), uint8], Tensor[(60), uint8]) {
  @func_5672(%var_5673) /* ty=(Tensor[(8, 10, 6), float32], Tensor[(14, 13, 14), float32], Tensor[(30, 2), uint8], Tensor[(60), uint8]) */
}

def @func_3865() -> Tensor[(14, 13, 14), float64] {
  @func_3863() /* ty=Tensor[(14, 13, 14), float64] */
}

def @func_5296() -> Tensor[(504), int8] {
  %752 = fn () -> Tensor[(504), int8] {
    %751 = @func_3676() /* ty=(Tensor[(30, 2), uint8], Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64], Tensor[(504), int8], Tensor[(14, 13, 14), float32]) */;
    %751.3
  };
  %752() /* ty=Tensor[(504), int8] */
}

def @func_404() -> (Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) {
  @func_402() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 13, 14), float64]) */
}

def @func_4606(%var_4604: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), bool],) {
  @func_4603(%var_4604) /* ty=(Tensor[(14, 13, 14), bool],) */
}

def @func_4278(%var_4265: Tensor[(36), float32]) -> (Tensor[(192, 1), float32], Tensor[(36), float32], Tensor[(7, 12, 336), bool], Tensor[(14, 13, 14), float32], Tensor[(7, 12, ?), bool]) {
  %753 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %754 = acos(%753) /* ty=Tensor[(7, 12, 1), float32] */;
  %755 = cast(meta[relay.Constant][38] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %756 = cast(%var_4265, dtype="float32") /* ty=Tensor[(36), float32] */;
  %757 = reshape(%755, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %758 = reshape(%756, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %759 = @func_3069(%757, %758) /* ty=(Tensor[(336), int16], Tensor[(36, 1), float32], Tensor[(192), float32], Tensor[(36), float32], int32, Tensor[(154), float64]) */;
  %760 = %759.0;
  %761 = cast(%754, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %762 = cast(%760, dtype="bool") /* ty=Tensor[(336), bool] */;
  %763 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 12, 1), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %764 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%754, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = logical_and(%761, %762) /* ty=Tensor[(7, 12, 336), bool] */;
  %768 = @func_2148() /* ty=Tensor[(14, 13, 14), float32] */;
  %769 = logical_or(%765, %766) /* ty=Tensor[(7, 12, ?), bool] */;
  (meta[relay.Constant][38] /* ty=Tensor[(192, 1), float32] */, %var_4265, %767, %768, %769)
}

def @func_1920(%var_1902: Tensor[(14, 13, 14), float32]) -> (Tensor[(14, 13, 14), int32], Tensor[(14, 13, 14), float32]) {
  %770 = @func_1635() /* ty=(Tensor[(14, 13, 14), float32],) */;
  %771 = %770.0;
  %772 = cast(%var_1902, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="int32") /* ty=Tensor[(14, 13, 14), int32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %776 = bitwise_xor(%774, %775) /* ty=Tensor[(14, 13, 14), int32] */;
  %777 = @func_1780() /* ty=Tensor[(14, 13, 14), float32] */;
  (%776, %777)
}

def @func_126(%var_125: Tensor[(7, 8, 9), int8]) -> (Tensor[(7, 8, 9), float32],) {
  %799 = fn (%var_45: Tensor[(7, 8, 9), int8]) -> (Tensor[(7, 8, 9), float32],) {
    %778 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 8, 9), int8] */, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
    %779 = shape_of(%var_45, dtype="int32") /* ty=Tensor[(3), int32] */;
    %780 = cast(%var_45, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
    %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %782 = greater(%780, %781) /* ty=Tensor[(7, 8, 9), bool] */;
    %783 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 8, 9), int8] */, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
    %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%782, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %787 = floor_divide(%785, %786) /* ty=Tensor[(7, 8, 9), float64] */;
    %788 = cast(%787, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
    %789 = log2(%788) /* ty=Tensor[(7, 8, 9), float64] */;
    %790 = cast(%789, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
    %791 = sin(%790) /* ty=Tensor[(7, 8, 9), float32] */;
    %792 = cast(%791, dtype="float64") /* ty=Tensor[(7, 8, 9), float64] */;
    %793 = log(%792) /* ty=Tensor[(7, 8, 9), float64] */;
    %794 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 8, 9), int8] */, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
    %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%793, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %798 = minimum(%796, %797) /* ty=Tensor[(7, 8, 9), float32] */;
    (%798,)
  };
  %799(%var_125) /* ty=(Tensor[(7, 8, 9), float32],) */
}

def @func_4157(%var_4155: Tensor[(12, 1, 5), int32], %var_4156: Tensor[(12, 15, 5), int32]) -> Tensor[(12, 15, 5), int32] {
  @func_4153(%var_4155, %var_4156) /* ty=Tensor[(12, 15, 5), int32] */
}

def @func_5436(%var_5434: bool, %var_5435: Tensor[(13, 14, 3), bool]) -> (Tensor[(13, 14, 3), bool], Tensor[(13, 14, 3), float32]) {
  %805 = fn (%var_5418: bool, %var_5419: Tensor[(13, 14, 3), bool]) -> (Tensor[(13, 14, 3), bool], Tensor[(13, 14, 3), float32]) {
    %800 = cast(%var_5418, dtype="bool") /* ty=bool */;
    %801 = cast(%var_5419, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
    %802 = cast(%var_5419, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
    %803 = logical_and(%800, %801) /* ty=Tensor[(13, 14, 3), bool] */;
    %804 = asinh(%802) /* ty=Tensor[(13, 14, 3), float32] */;
    (%803, %804)
  };
  %805(%var_5434, %var_5435) /* ty=(Tensor[(13, 14, 3), bool], Tensor[(13, 14, 3), float32]) */
}

def @func_2878(%var_2877: Tensor[(504), int8]) -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float64], Tensor[(504), int8], int32) {
  %814 = fn (%var_2866: Tensor[(504), int8]) -> (Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float64], Tensor[(504), int8], int32) {
    %806 = @func_2831() /* ty=(Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float32], Tensor[(4, 140), uint32], Tensor[(14, 13, 14), float64]) */;
    %807 = cast(%var_2866, dtype="int8") /* ty=Tensor[(504), int8] */;
    %808 = reshape(%807, newshape=[252, 2]) /* ty=Tensor[(252, 2), int8] */;
    %809 = @func_1865(%808) /* ty=(Tensor[(14, 13, 14), float64], Tensor[(12, 42), float64], Tensor[(14, 13, 14), float64], Tensor[(14, 13, 14), float32]) */;
    %810 = @func_1448() /* ty=(Tensor[(14, 13, 14), float32], Tensor[(14, 3, 1), int32], int32, Tensor[(14, 13, 14), uint32], Tensor[(11, 14, 1), float64], Tensor[(154), float64]) */;
    %811 = %806.0;
    %812 = %809.2;
    %813 = %810.2;
    (%811, %812, %var_2866, %813)
  };
  %814(%var_2877) /* ty=(Tensor[(14, 13, 14), uint16], Tensor[(14, 13, 14), float64], Tensor[(504), int8], int32) */
}

def @func_3847(%var_3846: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), float64] {
  %816 = fn (%var_3842: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), float64] {
    %815 = cast(%var_3842, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
    atan(%815) /* ty=Tensor[(14, 10, 5), float64] */
  };
  %816(%var_3846) /* ty=Tensor[(14, 10, 5), float64] */
}

def @func_4482() -> (Tensor[(14, 13, 14), float64],) {
  %819 = fn () -> (Tensor[(14, 13, 14), float64],) {
    %817 = @func_707() /* ty=(Tensor[(14, 13, 14), float64],) */;
    %818 = %817.0;
    (%818,)
  };
  %819() /* ty=(Tensor[(14, 13, 14), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen57/build/output.py:2221: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen57/build/output.py", line 2226, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(24) tvmgen_default_fused_acos_kernel0(double* __restrict__ T_acos, double* __restrict__ placeholder) {
  T_acos[(((int)threadIdx.x))] = acos(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

