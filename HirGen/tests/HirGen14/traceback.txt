==========mod==========
#[version = "0.0.5"]
def @func_3522() -> Tensor[(9, 11, 2), float64] {
  %0 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %0.1
}

def @func_1953(%var_1883: Tensor[(7, 3, 8), float64], %var_1904: Tensor[(8, 28), float32], %var_1929: Tensor[(240), uint16], %var_1937: Tensor[(60, 12), float32], %var_1938: Tensor[(96, 30), uint8]) -> (Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) {
  %1 = cast(%var_1883, dtype="float64") /* ty=Tensor[(7, 3, 8), float64] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 8), float64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %5 = cast(%var_1904, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %6 = cast(%var_1904, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %7 = reshape(%5, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %8 = reshape(%6, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 8), float64] */, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %10 = shape_of(%var_1883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1883, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %13 = subtract(%11, %12) /* ty=Tensor[(7, 3, 8), uint32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 8), float64] */, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %19 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %20 = reshape(%18, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %21 = reshape(%19, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %22 = @func_1068(%20, %21) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %23 = cast(%var_1937, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %24 = @func_582(%7, %8) /* ty=Tensor[(7, 2, 16), int32] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %26 = cast(%var_1938, dtype="uint8") /* ty=Tensor[(96, 30), uint8] */;
  %27 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %28 = reshape(%23, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), float32] */;
  %29 = reshape(%25, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %30 = reshape(%26, newshape=[2880]) /* ty=Tensor[(2880), uint8] */;
  %31 = reshape(%27, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %32 = @func_1472(%28, %29, %30, %31) /* ty=(Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) */;
  %33 = add(%3, %4) /* ty=Tensor[(7, 3, 8), float64] */;
  %34 = logical_xor(%16, %17) /* ty=Tensor[(7, 3, 8), uint32] */;
  %35 = %22.0;
  %36 = %32.1;
  (%33, %24, %var_1904, %34, %35, %var_1929, %36, %var_1937, %var_1938)
}

def @func_3485() -> (Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  %37 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %41 = reshape(%40, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
  %42 = atanh(%39) /* ty=Tensor[(5, 5), float64] */;
  %43 = @func_37(%41) /* ty=Tensor[(6, 10), bool] */;
  (%42, %43, meta[relay.Constant][1] /* ty=Tensor[(60), int16] */)
}

def @func_2546() -> Tensor[(5, 5), float64] {
  @func_2458() /* ty=Tensor[(5, 5), float64] */
}

def @func_2674() -> (Tensor[(5, 5), float64],) {
  %44 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  (%44,)
}

def @func_5587(%var_5578: Tensor[(2, 2, 14), float32]) -> (Tensor[(2, 2, 14), float32],) {
  %45 = cast(%var_5578, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %46 = erf(%45) /* ty=Tensor[(2, 2, 14), float32] */;
  (%46,)
}

def @func_2961(%var_2929: Tensor[(1, 18), float32], %var_2930: Tensor[(1, 624), uint16], %var_2959: Tensor[(3, 66), float64]) -> (Tensor[(5, 5), float64], Tensor[(15, 6, 3), uint32], Tensor[(1, 18), float32], Tensor[(1, 624), uint16], Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(3, 66), float64]) {
  %47 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %48 = cast(%var_2929, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %49 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(1, 624), uint16] */;
  %50 = reshape(%48, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), float32] */;
  %51 = reshape(%49, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint16] */;
  %52 = @func_656(%50, %51) /* ty=(Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %53 = cast(%var_2959, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %54 = reshape(%53, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %55 = @func_2318(%54) /* ty=(Tensor[(9, 11, 2), float64],) */;
  %56 = %47.0;
  %57 = %52.2;
  %58 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  %59 = %55.0;
  (%56, %57, %var_2929, %var_2930, %58, %59, %var_2959)
}

def @func_5837(%var_5834: Tensor[(5, 9, 11), float32]) -> Tensor[(5, 9, 11), float32] {
  %60 = cast(%var_5834, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  erf(%60) /* ty=Tensor[(5, 9, 11), float32] */
}

def @func_2257(%var_2243: Tensor[(12, 16, 1), float64], %var_2251: Tensor[(168), float64], %var_2252: Tensor[(224), float32], %var_2254: Tensor[(720), float32], %var_2255: Tensor[(2880), uint8]) -> (Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) {
  %61 = cast(%var_2243, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
  %62 = cast(%var_2251, dtype="float64") /* ty=Tensor[(168), float64] */;
  %63 = cast(%var_2252, dtype="float32") /* ty=Tensor[(224), float32] */;
  %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %65 = cast(%var_2254, dtype="float32") /* ty=Tensor[(720), float32] */;
  %66 = cast(%var_2255, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %67 = reshape(%62, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %68 = reshape(%63, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %69 = reshape(%64, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %70 = reshape(%65, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %71 = reshape(%66, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %72 = @func_1953(%67, %68, %69, %70, %71) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %73 = erf(%61) /* ty=Tensor[(12, 16, 1), float64] */;
  %74 = %72.5;
  (%73, %74, %var_2251, %var_2252, meta[relay.Constant][2] /* ty=Tensor[(240), uint16] */, %var_2254, %var_2255)
}

def @func_4671() -> (Tensor[(14, 10, 14), float64], Tensor[(14, 10, 14), float64], Tensor[(9, 11, 2), uint16]) {
  %75 = cast(-5.37506f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %76 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %78 = @func_4471() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %79 = maximum(%75, %76) /* ty=Tensor[(14, 10, 14), float64] */;
  %80 = asin(%77) /* ty=Tensor[(14, 10, 14), float64] */;
  %81 = %78.0;
  (%79, %80, %81)
}

def @func_58(%var_51: Tensor[(13, 12, 4), uint16], %var_52: Tensor[(13, 12, 4), uint16]) -> Tensor[(13, 12, 4), bool] {
  %82 = cast(%var_52, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %83 = shape_of(%var_51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_51, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%84, %85) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_2085(%var_2034: Tensor[(3, 9, 16), int16], %var_2035: Tensor[(3, 9, 16), int16], %var_2051: Tensor[(224), float32], %var_2052: Tensor[(240), uint16], %var_2053: Tensor[(12, 60), float32], %var_2054: Tensor[(2880), uint8], %var_2067: Tensor[(12, 60), float32], %var_2079: Tensor[(8, 8), uint64]) -> (Tensor[(3, 9, 16), int16], Tensor[(3, 9, 16), float32], Tensor[(15, 12, 16), int8], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(12, 60), uint64], Tensor[(13, 12, 4), bool], Tensor[(8, 8), uint64]) {
  %86 = cast(%var_2035, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %87 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_2034, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %90 = cast(%var_2034, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %92 = cast(%var_2051, dtype="float32") /* ty=Tensor[(224), float32] */;
  %93 = cast(%var_2052, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %94 = cast(%var_2053, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %95 = cast(%var_2054, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %96 = reshape(%91, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %97 = reshape(%92, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %98 = reshape(%93, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %99 = reshape(%94, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %100 = reshape(%95, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %101 = @func_1953(%96, %97, %98, %99, %100) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %102 = cast(%var_2067, dtype="uint64") /* ty=Tensor[(12, 60), uint64] */;
  %103 = shape_of(%var_2053, dtype="int32") /* ty=Tensor[(2), int32] */;
  %104 = cast(%var_2053, dtype="uint64") /* ty=Tensor[(12, 60), uint64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %106 = cast(%var_2079, dtype="uint64") /* ty=Tensor[(8, 8), uint64] */;
  %107 = reshape(%106, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), uint64] */;
  %108 = @func_926(%107) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %109 = right_shift(%88, %89) /* ty=Tensor[(3, 9, 16), int16] */;
  %110 = sqrt(%90) /* ty=Tensor[(3, 9, 16), float32] */;
  %111 = %101.6;
  %112 = logical_xor(%104, %105) /* ty=Tensor[(12, 60), uint64] */;
  %113 = %108.1;
  (%109, %110, %111, meta[relay.Constant][4] /* ty=Tensor[(168), float64] */, %var_2051, %var_2052, %var_2054, %112, %113, %var_2079)
}

def @func_3345() -> (Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %115 = reshape(%114, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %116 = @func_2318(%115) /* ty=(Tensor[(9, 11, 2), float64],) */;
  %117 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
  %118 = %116.0;
  (%117, %118, meta[relay.Constant][5] /* ty=Tensor[(198), float64] */)
}

def @func_4389() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %119 = @func_2859() /* ty=Tensor[(5, 5), float64] */;
  %120 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  (%119, %120)
}

def @func_4782(%var_4711: Tensor[(6, 6, 15), float64], %var_4712: Tensor[(6, 6, 15), float64]) -> (Tensor[(5, 5), float64], Tensor[(6, 6, 15), bool], Tensor[(6, 6, 15), uint16]) {
  %121 = @func_4424() /* ty=(Tensor[(5, 5), float64],) */;
  %122 = cast(%var_4711, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %123 = asin(%122) /* ty=Tensor[(6, 6, 15), float64] */;
  %124 = cast(%var_4712, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %125 = shape_of(%var_4711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_4711, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %128 = floor_divide(%126, %127) /* ty=Tensor[(6, 6, 15), float64] */;
  %129 = cast(%var_4712, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %133 = bitwise_or(%131, %132) /* ty=Tensor[(6, 6, 15), uint8] */;
  %134 = cast(%var_4711, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %138 = minimum(%136, %137) /* ty=Tensor[(6, 6, 15), uint8] */;
  %139 = cast(%138, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %140 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%123, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %143 = cast(%138, dtype="int64") /* ty=Tensor[(6, 6, 15), int64] */;
  %144 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%123, dtype="int64") /* ty=Tensor[(6, 6, 15), int64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %147 = left_shift(%145, %146) /* ty=Tensor[(6, 6, 15), int64] */;
  %148 = cast(%var_4712, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %152 = floor_mod(%150, %151) /* ty=Tensor[(6, 6, 15), float32] */;
  %153 = cast(%152, dtype="uint16") /* ty=Tensor[(6, 6, 15), uint16] */;
  %154 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%128, dtype="uint16") /* ty=Tensor[(6, 6, 15), uint16] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %157 = %121.0;
  %158 = greater_equal(%141, %142) /* ty=Tensor[(6, 6, 15), bool] */;
  %159 = add(%155, %156) /* ty=Tensor[(6, 6, 15), uint16] */;
  (%157, %158, %159)
}

def @func_2888() -> Tensor[(5, 5), float64] {
  @func_2480() /* ty=Tensor[(5, 5), float64] */
}

def @func_3880() -> (Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %160 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %161 = cast(meta[relay.Constant][6] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %162 = reshape(%161, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %163 = @func_2318(%162) /* ty=(Tensor[(9, 11, 2), float64],) */;
  %164 = %160.2;
  %165 = %163.0;
  (%164, %165, meta[relay.Constant][6] /* ty=Tensor[(198), float64] */)
}

def @func_3629() -> Tensor[(5, 5), float64] {
  %166 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
  %166.0
}

def @func_2318(%var_2311: Tensor[(9, 11, 2), float64]) -> (Tensor[(9, 11, 2), float64],) {
  %167 = cast(%var_2311, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
  %168 = acos(%167) /* ty=Tensor[(9, 11, 2), float64] */;
  (%168,)
}

def @func_4216(%var_4210: Tensor[(224), float32]) -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  %169 = cast(%var_4210, dtype="float32") /* ty=Tensor[(224), float32] */;
  %170 = cast(%var_4210, dtype="float32") /* ty=Tensor[(224), float32] */;
  %171 = reshape(%169, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %172 = reshape(%170, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %173 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
  %174 = @func_582(%171, %172) /* ty=Tensor[(7, 2, 16), int32] */;
  (%173, %174, %var_4210)
}

def @func_5314() -> (Tensor[(9, 11, 2), uint16],) {
  %175 = @func_4471() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %176 = %175.0;
  (%176,)
}

def @func_4514() -> Tensor[(5, 5), float64] {
  @func_3280() /* ty=Tensor[(5, 5), float64] */
}

def @func_582(%var_540: Tensor[(7, 2, 16), float32], %var_541: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), int32] {
  %177 = cast(%var_541, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %178 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_540, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %181 = divide(%179, %180) /* ty=Tensor[(7, 2, 16), float32] */;
  %182 = cast(%181, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %183 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_540, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = logical_and(%184, %185) /* ty=Tensor[(7, 2, 16), bool] */;
  %187 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 2, 16), bool] */, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %191 = left_shift(%189, %190) /* ty=Tensor[(7, 2, 16), int16] */;
  %192 = cast(%181, dtype="int32") /* ty=Tensor[(7, 2, 16), int32] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="int32") /* ty=Tensor[(7, 2, 16), int32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%194, %195) /* ty=Tensor[(7, 2, 16), int32] */
}

def @func_2180(%var_2154: Tensor[(13, 3, 1), float64]) -> Tensor[(13, 3, 2), float64] {
  %196 = cast(%var_2154, dtype="float64") /* ty=Tensor[(13, 3, 1), float64] */;
  %197 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  floor_divide(%196, %197) /* ty=Tensor[(13, 3, 2), float64] */
}

def @func_6023(%var_6017: Tensor[(5, 8, 16), int16]) -> (Tensor[(5, 8, 16), int16], Tensor[(5, 8, 16), uint16]) {
  %198 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 16), int16] */;
  %199 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 16), int16] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %202 = cast(%var_6017, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %203 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 16), int16] */, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %206 = bitwise_or(%200, %201) /* ty=Tensor[(5, 8, 16), int16] */;
  %207 = add(%204, %205) /* ty=Tensor[(5, 8, 16), uint16] */;
  (%206, %207)
}

def @func_3976(%var_3952: Tensor[(4, 2, 10), float32], %var_3961: Tensor[(192), float64], %var_3962: Tensor[(168), float64], %var_3963: Tensor[(224), float32], %var_3964: Tensor[(720), float32]) -> (Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) {
  %208 = cast(%var_3952, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %209 = cast(%var_3961, dtype="float64") /* ty=Tensor[(192), float64] */;
  %210 = cast(%var_3962, dtype="float64") /* ty=Tensor[(168), float64] */;
  %211 = cast(%var_3963, dtype="float32") /* ty=Tensor[(224), float32] */;
  %212 = cast(%var_3964, dtype="float32") /* ty=Tensor[(720), float32] */;
  %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %214 = reshape(%209, newshape=[12, 16, 1]) /* ty=Tensor[(12, 16, 1), float64] */;
  %215 = reshape(%210, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %216 = reshape(%211, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %217 = reshape(%212, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %218 = reshape(%213, newshape=[2880]) /* ty=Tensor[(2880), uint8] */;
  %219 = @func_2257(%214, %215, %216, %217, %218) /* ty=(Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) */;
  %220 = tan(%208) /* ty=Tensor[(4, 2, 10), float32] */;
  %221 = %219.2;
  (%220, %221, %var_3961, %var_3962, %var_3963, %var_3964, meta[relay.Constant][11] /* ty=Tensor[(2880), uint8] */)
}

def @func_4807() -> Tensor[(5, 5), float64] {
  @func_4514() /* ty=Tensor[(5, 5), float64] */
}

def @func_5005(%var_4997: Tensor[(5, 2, 12), int8], %var_4998: Tensor[(5, 2, 12), int8]) -> (Tensor[(5, 2, 12), int8], Tensor[(5, 2, 12), float32]) {
  %222 = cast(%var_4998, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %223 = shape_of(%var_4997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_4997, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %226 = cast(%var_4997, dtype="float32") /* ty=Tensor[(5, 2, 12), float32] */;
  %227 = right_shift(%224, %225) /* ty=Tensor[(5, 2, 12), int8] */;
  %228 = log2(%226) /* ty=Tensor[(5, 2, 12), float32] */;
  (%227, %228)
}

def @func_5135(%var_5124: Tensor[(4, 15, 11), int64]) -> Tensor[(4, 15, 11), int64] {
  %229 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 15, 11), int64] */, dtype="int64") /* ty=Tensor[(4, 15, 11), int64] */;
  %230 = shape_of(%var_5124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_5124, dtype="int64") /* ty=Tensor[(4, 15, 11), int64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%231, %232) /* ty=Tensor[(4, 15, 11), int64] */
}

def @func_817(%var_780: Tensor[(15, 12, 16), uint8]) -> (Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) {
  %233 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %234 = reshape(%233, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 12, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 12, 16), uint8] */;
  %236 = shape_of(%var_780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%var_780, dtype="uint8") /* ty=Tensor[(15, 12, 16), uint8] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %239 = add(%237, %238) /* ty=Tensor[(15, 12, 16), uint8] */;
  %240 = cast(%var_780, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %244 = @func_37(%234) /* ty=Tensor[(6, 10), bool] */;
  %245 = subtract(%242, %243) /* ty=Tensor[(15, 12, 16), int8] */;
  (%244, meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, %245)
}

def @func_37(%var_5: Tensor[(6, 10), int16]) -> Tensor[(6, 10), bool] {
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 10), int16] */, dtype="bool") /* ty=Tensor[(6, 10), bool] */;
  %247 = shape_of(%var_5, dtype="int32") /* ty=Tensor[(2), int32] */;
  %248 = cast(%var_5, dtype="bool") /* ty=Tensor[(6, 10), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less_equal(%248, %249) /* ty=Tensor[(6, 10), bool] */
}

def @func_5172() -> Tensor[(5, 5), float64] {
  @func_4807() /* ty=Tensor[(5, 5), float64] */
}

def @func_4458() -> (Tensor[(5, 5), float64],) {
  %250 = @func_4389() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64]) */;
  %251 = %250.0;
  (%251,)
}

def @func_656(%var_596: Tensor[(1, 6, 3), float32], %var_600: Tensor[(24, 26), uint16]) -> (Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  %252 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %253 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %254 = reshape(%252, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %255 = reshape(%253, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %256 = @func_58(%254, %255) /* ty=Tensor[(13, 12, 4), bool] */;
  %257 = cast(%256, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
  %258 = shape_of(%var_600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %259 = cast(%var_600, dtype="uint8") /* ty=Tensor[(24, 26), uint8] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %261 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %262 = multiply(%259, %260) /* ty=Tensor[(24, 26), uint8] */;
  %263 = cast(%262, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %264 = reshape(%261, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %265 = reshape(%263, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %266 = cast(%var_596, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %267 = sin(%266) /* ty=Tensor[(1, 6, 3), float32] */;
  %268 = cast(%var_596, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %272 = logical_xor(%270, %271) /* ty=Tensor[(?, 6, 3), int16] */;
  %273 = cast(%267, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%272, dtype="int8") /* ty=Tensor[(?, 6, 3), int8] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %277 = bitwise_xor(%275, %276) /* ty=Tensor[(?, 6, 3), int8] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(?, 6, 3), float64] */;
  %279 = sigmoid(%278) /* ty=Tensor[(?, 6, 3), float64] */;
  %280 = cast(%277, dtype="uint16") /* ty=Tensor[(?, 6, 3), uint16] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="uint16") /* ty=Tensor[(?, 6, 3), uint16] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %284 = multiply(%282, %283) /* ty=Tensor[(?, 6, 3), uint16] */;
  %285 = cast(%284, dtype="uint32") /* ty=Tensor[(?, 6, 3), uint32] */;
  %286 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 6, 3), uint16] */, dtype="uint32") /* ty=Tensor[(15, 6, 3), uint32] */;
  %287 = cast(meta[relay.Constant][17] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %288 = reshape(%287, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
  %289 = @func_58(%264, %265) /* ty=Tensor[(13, 12, 4), bool] */;
  %290 = bitwise_and(%285, %286) /* ty=Tensor[(15, 6, 3), uint32] */;
  %291 = @func_37(%288) /* ty=Tensor[(6, 10), bool] */;
  (%262, %289, %290, %291, meta[relay.Constant][17] /* ty=Tensor[(60), int16] */)
}

def @func_4278(%var_4240: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) {
  %292 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %293 = cast(meta[relay.Constant][18] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %294 = reshape(%293, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float64] */;
  %295 = cast(%var_4240, dtype="int8") /* ty=Tensor[(39), int8] */;
  %296 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(39), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(39), float64] */, dtype="int8") /* ty=Tensor[(39), int8] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?), int8] */;
  %299 = cast(%var_4240, dtype="int64") /* ty=Tensor[(39), int64] */;
  %300 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(39), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(39), float64] */, dtype="int64") /* ty=Tensor[(39), int64] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), int64] */;
  %303 = %292.0;
  %304 = @func_2180(%294) /* ty=Tensor[(13, 3, 2), float64] */;
  %305 = bitwise_xor(%297, %298) /* ty=Tensor[(39), int8] */;
  %306 = bitwise_or(%301, %302) /* ty=Tensor[(39), int64] */;
  (%303, %304, %305, %306)
}

def @func_2397(%var_2384: Tensor[(11, 4, 1), float64]) -> (Tensor[(11, 4, 1), float64],) {
  %307 = cast(%var_2384, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %308 = atan(%307) /* ty=Tensor[(11, 4, 1), float64] */;
  (%308,)
}

def @func_1137(%var_1132: uint16, %var_1133: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 1, 14), uint16],) {
  %309 = cast(%var_1132, dtype="uint16") /* ty=uint16 */;
  %310 = cast(%var_1133, dtype="uint16") /* ty=Tensor[(15, 1, 14), uint16] */;
  %311 = subtract(%309, %310) /* ty=Tensor[(15, 1, 14), uint16] */;
  (%311,)
}

def @func_2787(%var_2745: Tensor[(9, 7), float64], %var_2759: Tensor[(224), float32], %var_2761: Tensor[(720), float32]) -> (Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) {
  %312 = cast(%var_2745, dtype="float64") /* ty=Tensor[(9, 7), float64] */;
  %313 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %314 = cast(%var_2759, dtype="float32") /* ty=Tensor[(224), float32] */;
  %315 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %316 = cast(%var_2761, dtype="float32") /* ty=Tensor[(720), float32] */;
  %317 = cast(meta[relay.Constant][21] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %318 = reshape(%313, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %319 = reshape(%314, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %320 = reshape(%315, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %321 = reshape(%316, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %322 = reshape(%317, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %323 = @func_1953(%318, %319, %320, %321, %322) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %324 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %325 = cast(meta[relay.Constant][21] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %326 = reshape(%325, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), uint8] */;
  %327 = @func_817(%326) /* ty=(Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) */;
  %328 = cos(%312) /* ty=Tensor[(9, 7), float64] */;
  %329 = %323.3;
  %330 = %324.0;
  %331 = %327.2;
  (%328, %329, meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, %var_2759, meta[relay.Constant][20] /* ty=Tensor[(240), uint16] */, %var_2761, meta[relay.Constant][21] /* ty=Tensor[(2880), uint8] */, %330, %331)
}

def @func_1618(%var_1608: Tensor[(16, 14, 13), float32], %var_1614: Tensor[(16, 14, 13), float32]) -> Tensor[(16, 14, 13), float32] {
  %332 = cast(%var_1608, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %333 = exp(%332) /* ty=Tensor[(16, 14, 13), float32] */;
  %334 = cast(%var_1614, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%336, %337) /* ty=Tensor[(16, 14, 13), float32] */
}

def @func_5507(%var_5491: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), uint16], Tensor[(16, 10, 3), float64]) {
  %338 = cast(%var_5491, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %339 = cos(%338) /* ty=Tensor[(16, 10, 3), float64] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %341 = shape_of(%var_5491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_5491, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = floor_divide(%342, %343) /* ty=Tensor[(16, 10, 3), float64] */;
  %345 = cast(%339, dtype="uint16") /* ty=Tensor[(16, 10, 3), uint16] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="uint16") /* ty=Tensor[(16, 10, 3), uint16] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %349 = cast(%339, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %350 = bitwise_or(%347, %348) /* ty=Tensor[(16, 10, 3), uint16] */;
  %351 = sinh(%349) /* ty=Tensor[(16, 10, 3), float64] */;
  (%350, %351)
}

def @func_5466(%var_5417: Tensor[(5, 351), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 351), float32]) {
  %352 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %353 = cast(%var_5417, dtype="uint8") /* ty=Tensor[(5, 351), uint8] */;
  %354 = reshape(%353, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint8] */;
  %355 = @func_1999(%354) /* ty=Tensor[(15, 9, 13), bool] */;
  %356 = cast(%355, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %357 = shape_of(%var_5417, dtype="int32") /* ty=Tensor[(2), int32] */;
  %358 = cast(%var_5417, dtype="bool") /* ty=Tensor[(5, 351), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %360 = greater_equal(%358, %359) /* ty=Tensor[(5, 351), bool] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(5, 351), float64] */;
  %362 = sigmoid(%361) /* ty=Tensor[(5, 351), float64] */;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(5, 351), float32] */;
  %364 = %352.0;
  %365 = log(%363) /* ty=Tensor[(5, 351), float32] */;
  (%364, %365)
}

def @func_1999(%var_1994: Tensor[(15, 9, 13), uint8]) -> Tensor[(15, 9, 13), bool] {
  %366 = cast(meta[relay.Constant][22] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %367 = cast(%var_1994, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  greater(%366, %367) /* ty=Tensor[(15, 9, 13), bool] */
}

def @func_4979() -> (Tensor[(5, 5), float64],) {
  %368 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %369 = %368.0;
  (%369,)
}

def @func_3051(%var_3008: Tensor[(5, 12, 12), uint16], %var_3009: Tensor[(5, 12, 12), uint16], %var_3023: Tensor[(168), float64], %var_3024: Tensor[(1, 224), float32], %var_3025: Tensor[(240), uint16], %var_3035: Tensor[(14, 224), float32], %var_3039: Tensor[(14, 224), float32]) -> (Tensor[(5, 12, 12), uint16], Tensor[(168), float64], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(14, 224), uint64], Tensor[(14, 224), bool], Tensor[(8, 28), int64]) {
  %370 = cast(%var_3009, dtype="uint16") /* ty=Tensor[(5, 12, 12), uint16] */;
  %371 = shape_of(%var_3008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_3008, dtype="uint16") /* ty=Tensor[(5, 12, 12), uint16] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %375 = cast(meta[relay.Constant][24] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %376 = reshape(%374, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %377 = reshape(%375, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %378 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(1, 224), uint64] */;
  %379 = cast(%var_3035, dtype="uint64") /* ty=Tensor[(14, 224), uint64] */;
  %380 = cast(%var_3039, dtype="bool") /* ty=Tensor[(14, 224), bool] */;
  %381 = shape_of(%var_3035, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(%var_3035, dtype="bool") /* ty=Tensor[(14, 224), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %384 = cast(%var_3023, dtype="float64") /* ty=Tensor[(168), float64] */;
  %385 = cast(%var_3024, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
  %386 = cast(%var_3025, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %387 = minimum(%372, %373) /* ty=Tensor[(5, 12, 12), uint16] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(5, 12, 12), float32] */;
  %389 = cast(meta[relay.Constant][23] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %390 = reshape(%384, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %391 = reshape(%385, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %392 = reshape(%386, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %393 = reshape(%388, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %394 = reshape(%389, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %395 = @func_1953(%390, %391, %392, %393, %394) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %396 = %395.2;
  %397 = cast(%var_3024, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(2), int32] */;
  %399 = cast(%396, dtype="int64") /* ty=Tensor[(8, 28), int64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %401 = @func_1618(%376, %377) /* ty=Tensor[(16, 14, 13), float32] */;
  %402 = bitwise_or(%378, %379) /* ty=Tensor[(14, 224), uint64] */;
  %403 = not_equal(%382, %383) /* ty=Tensor[(14, 224), bool] */;
  %404 = left_shift(%399, %400) /* ty=Tensor[(8, 28), int64] */;
  (%387, %var_3023, %var_3025, meta[relay.Constant][23] /* ty=Tensor[(2880), uint8] */, %401, meta[relay.Constant][24] /* ty=Tensor[(2912), float32] */, %402, %403, %404)
}

def @func_4992() -> (Tensor[(5, 5), float64],) {
  %405 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
  %406 = %405.0;
  (%406,)
}

def @func_2743() -> (Tensor[(5, 5), float64],) {
  %407 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
  %408 = %407.0;
  (%408,)
}

def @func_3445() -> Tensor[(5, 5), float64] {
  @func_2546() /* ty=Tensor[(5, 5), float64] */
}

def @func_4587() -> (Tensor[(14, 10, 7), float32],) {
  %409 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %410 = cos(%409) /* ty=Tensor[(14, 10, 7), float32] */;
  %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 10, 7), float32] */, dtype="int16") /* ty=Tensor[(14, 10, 7), int16] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int16") /* ty=Tensor[(14, 10, 7), int16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %415 = right_shift(%413, %414) /* ty=Tensor[(14, 10, 7), int16] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %417 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %420 = maximum(%418, %419) /* ty=Tensor[(14, 10, 7), float32] */;
  (%420,)
}

def @func_5661(%var_5640: Tensor[(1, 720), float32], %var_5656: Tensor[(324, 1), float32]) -> (Tensor[(60), int16], Tensor[(720), float32], Tensor[(1, 224), float32], Tensor[(1, 720), float32], Tensor[(3, 12, 9), float32], Tensor[(324, 1), float32]) {
  %421 = @func_4183() /* ty=(Tensor[(60), int16], Tensor[(5, 5), float64]) */;
  %422 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
  %423 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %424 = reshape(%422, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %425 = reshape(%423, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %426 = @func_5613(%424, %425) /* ty=(Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) */;
  %427 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %428 = cast(%var_5656, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %429 = reshape(%428, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), float32] */;
  %430 = %421.0;
  %431 = %426.4;
  %432 = acos(%427) /* ty=Tensor[(1, 720), float32] */;
  %433 = @func_3301(%429) /* ty=Tensor[(3, 12, 9), float32] */;
  (%430, %431, meta[relay.Constant][27] /* ty=Tensor[(1, 224), float32] */, %432, %433, %var_5656)
}

def @func_3280() -> Tensor[(5, 5), float64] {
  @func_2670() /* ty=Tensor[(5, 5), float64] */
}

def @func_3861(%var_3770: Tensor[(11, 6, 16), float64], %var_3771: Tensor[(11, 6, 16), float64], %var_3779: Tensor[(224), float32], %var_3813: Tensor[(11, 6, 16), float64]) -> (Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) {
  %434 = cast(%var_3771, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %435 = shape_of(%var_3770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%var_3770, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %438 = cast(%var_3770, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %439 = log2(%438) /* ty=Tensor[(11, 6, 16), float64] */;
  %440 = cast(%var_3813, dtype="int8") /* ty=Tensor[(11, 6, 16), int8] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="int8") /* ty=Tensor[(11, 6, 16), int8] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %444 = cast(%var_3779, dtype="float32") /* ty=Tensor[(224), float32] */;
  %445 = cast(%var_3779, dtype="float32") /* ty=Tensor[(224), float32] */;
  %446 = reshape(%444, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %447 = reshape(%445, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %448 = @func_582(%446, %447) /* ty=Tensor[(7, 2, 16), int32] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %450 = cast(%439, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %451 = cos(%450) /* ty=Tensor[(11, 6, 16), float64] */;
  %452 = cast(%var_3770, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = subtract(%436, %437) /* ty=Tensor[(11, 6, 16), float64] */;
  %457 = bitwise_or(%442, %443) /* ty=Tensor[(11, 6, 16), int8] */;
  %458 = atan(%449) /* ty=Tensor[(7, 2, 16), float64] */;
  %459 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  %460 = @func_2859() /* ty=Tensor[(5, 5), float64] */;
  %461 = not_equal(%454, %455) /* ty=Tensor[(11, 6, 16), bool] */;
  (%456, %var_3779, %457, %458, %459, %460, %461)
}

def @func_4089(%var_4067: Tensor[(1056), float64], %var_4075: Tensor[(1755), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(15, 9, 13), bool], Tensor[(1755), float32]) {
  %462 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %463 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %464 = cast(meta[relay.Constant][28] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %465 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %466 = reshape(%462, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %467 = reshape(%463, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %468 = reshape(%464, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %469 = reshape(%465, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %470 = @func_3861(%466, %467, %468, %469) /* ty=(Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) */;
  %471 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
  %472 = reshape(%471, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint8] */;
  %473 = cast(%var_4075, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %474 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
  %475 = %470.5;
  %476 = @func_1999(%472) /* ty=Tensor[(15, 9, 13), bool] */;
  %477 = exp(%473) /* ty=Tensor[(1755), float32] */;
  (%474, %475, %var_4067, meta[relay.Constant][28] /* ty=Tensor[(224), float32] */, %476, %477)
}

def @func_2458() -> Tensor[(5, 5), float64] {
  %478 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %479 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(5, 5), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%480, %481) /* ty=Tensor[(5, 5), float64] */
}

def @func_2581() -> (Tensor[(5, 5), float64],) {
  %482 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  (%482,)
}

def @func_3078() -> (Tensor[(5, 5), float64],) {
  %483 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %484 = %483.0;
  (%484,)
}

def @func_2985() -> (Tensor[(5, 5), float64],) {
  %485 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  (%485,)
}

def @func_4695() -> (Tensor[(5, 5), float64],) {
  %486 = @func_2985() /* ty=(Tensor[(5, 5), float64],) */;
  %487 = %486.0;
  (%487,)
}

def @func_4471() -> (Tensor[(9, 11, 2), uint16],) {
  %488 = @func_4052() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) */;
  %489 = %488.1;
  (%489,)
}

def @func_5613(%var_5606: Tensor[(224), float32], %var_5607: Tensor[(720), float32]) -> (Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) {
  %490 = @func_4458() /* ty=(Tensor[(5, 5), float64],) */;
  %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 63), float64] */, dtype="float64") /* ty=Tensor[(1, 63), float64] */;
  %492 = cast(%var_5606, dtype="float32") /* ty=Tensor[(224), float32] */;
  %493 = cast(%var_5607, dtype="float32") /* ty=Tensor[(720), float32] */;
  %494 = reshape(%491, newshape=[9, 7]) /* ty=Tensor[(9, 7), float64] */;
  %495 = reshape(%492, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %496 = reshape(%493, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %497 = @func_2787(%494, %495, %496) /* ty=(Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) */;
  %498 = %490.0;
  %499 = %497.0;
  (%498, %499, meta[relay.Constant][31] /* ty=Tensor[(1, 63), float64] */, %var_5606, %var_5607)
}

def @func_5927() -> (Tensor[(9, 11, 2), float64],) {
  %500 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %501 = %500.1;
  (%501,)
}

def @func_4507(%var_4486: Tensor[(7, 12, 4), int16]) -> (Tensor[(7, 12, 4), bool], Tensor[(624), uint16], Tensor[(64), uint64]) {
  %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 4), int16] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %503 = shape_of(%var_4486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_4486, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = cast(meta[relay.Constant][33] /* ty=Tensor[(64), uint64] */, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %507 = reshape(%506, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), uint64] */;
  %508 = @func_926(%507) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %509 = greater(%504, %505) /* ty=Tensor[(7, 12, 4), bool] */;
  %510 = %508.2;
  (%509, %510, meta[relay.Constant][33] /* ty=Tensor[(64), uint64] */)
}

def @func_5571() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %511 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %512 = %511.0;
  %513 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  (%512, %513)
}

def @func_3183(%var_3177: Tensor[(13, 5, 16), float64]) -> Tensor[(13, 5, 16), float64] {
  %514 = cast(%var_3177, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  asin(%514) /* ty=Tensor[(13, 5, 16), float64] */
}

def @func_5899() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(10, 9), float32], Tensor[(90), float32]) {
  %515 = @func_4458() /* ty=(Tensor[(5, 5), float64],) */;
  %516 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %517 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %518 = reshape(%517, newshape=[10, 9]) /* ty=Tensor[(10, 9), float32] */;
  %519 = %515.0;
  %520 = %516.0;
  %521 = @func_4514() /* ty=Tensor[(5, 5), float64] */;
  %522 = @func_955(%518) /* ty=Tensor[(10, 9), float32] */;
  (%519, %520, %521, %522, meta[relay.Constant][34] /* ty=Tensor[(90), float32] */)
}

def @func_2670() -> Tensor[(5, 5), float64] {
  @func_2480() /* ty=Tensor[(5, 5), float64] */
}

def @func_4183() -> (Tensor[(60), int16], Tensor[(5, 5), float64]) {
  %523 = @func_3880() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %524 = %523.0;
  %525 = @func_3629() /* ty=Tensor[(5, 5), float64] */;
  (%524, %525)
}

def @func_5542() -> (Tensor[(9, 11, 2), float64],) {
  %526 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %527 = %526.1;
  (%527,)
}

def @func_4828() -> (Tensor[(5, 5), float64],) {
  %528 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %529 = %528.0;
  (%529,)
}

def @func_4549() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(13, 12, 4), bool], Tensor[(4, 156), uint16], Tensor[(9, 11, 2), float64]) {
  %530 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
  %531 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 156), uint16] */, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %532 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 156), uint16] */, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %533 = reshape(%531, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %534 = reshape(%532, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %535 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %536 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  %537 = %530.0;
  %538 = @func_58(%533, %534) /* ty=Tensor[(13, 12, 4), bool] */;
  %539 = %535.1;
  (%536, %537, %538, meta[relay.Constant][35] /* ty=Tensor[(4, 156), uint16] */, %539)
}

def @func_3389() -> (Tensor[(5, 5), float64],) {
  %540 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
  %541 = %540.0;
  (%541,)
}

def @func_6036() -> Tensor[(60), int16] {
  %542 = @func_3880() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %542.0
}

def @func_4922(%var_4894: Tensor[(14, 10, 7), float64]) -> (Tensor[(14, 10, 7), bool], Tensor[(14, 10, 7), float32]) {
  %543 = @func_4587() /* ty=(Tensor[(14, 10, 7), float32],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(14, 10, 7), float64] */;
  %546 = asinh(%545) /* ty=Tensor[(14, 10, 7), float64] */;
  %547 = cast(%544, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(%var_4894, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
  %552 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%546, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = logical_or(%553, %554) /* ty=Tensor[(14, 10, 7), bool] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %557 = less(%549, %550) /* ty=Tensor[(14, 10, 7), bool] */;
  %558 = cosh(%556) /* ty=Tensor[(14, 10, 7), float32] */;
  (%557, %558)
}

def @func_3720(%var_3692: Tensor[(16, 7, 13), uint8], %var_3693: Tensor[(16, 7, 13), uint8], %var_3706: Tensor[(198), float64]) -> (Tensor[(16, 7, 13), uint8], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %559 = cast(%var_3693, dtype="uint8") /* ty=Tensor[(16, 7, 13), uint8] */;
  %560 = shape_of(%var_3692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_3692, dtype="uint8") /* ty=Tensor[(16, 7, 13), uint8] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %563 = cast(%var_3706, dtype="float64") /* ty=Tensor[(198), float64] */;
  %564 = reshape(%563, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
  %565 = @func_2318(%564) /* ty=(Tensor[(9, 11, 2), float64],) */;
  %566 = bitwise_xor(%561, %562) /* ty=Tensor[(16, 7, 13), uint8] */;
  %567 = %565.0;
  (%566, %567, %var_3706)
}

def @func_1472(%var_1358: Tensor[(9, 5, 16), float32], %var_1365: Tensor[(224), float32], %var_1382: Tensor[(2880), uint8], %var_1450: Tensor[(240), uint16]) -> (Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) {
  %568 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %569 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %570 = reshape(%568, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %571 = reshape(%569, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %572 = cast(%var_1382, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %573 = reshape(%572, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), uint8] */;
  %574 = @func_817(%573) /* ty=(Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) */;
  %575 = @func_582(%570, %571) /* ty=Tensor[(7, 2, 16), int32] */;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %577 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %578 = reshape(%576, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %579 = reshape(%577, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %580 = @func_582(%578, %579) /* ty=Tensor[(7, 2, 16), int32] */;
  %581 = cast(%var_1365, dtype="bool") /* ty=Tensor[(224), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = cast(meta[relay.Constant][36] /* ty=Tensor[(2880), uint8] */, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %586 = shape_of(%var_1382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %587 = cast(%var_1382, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %589 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %590 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %591 = reshape(%589, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %592 = reshape(%590, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %593 = @func_1068(%591, %592) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %594 = cast(%var_1358, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %595 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(9, 5, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %598 = greater_equal(%596, %597) /* ty=Tensor[(9, 5, 16), bool] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
  %600 = atanh(%599) /* ty=Tensor[(9, 5, 16), float32] */;
  %601 = cast(%598, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %606 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %607 = reshape(%605, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %608 = reshape(%606, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %609 = @func_1068(%607, %608) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %610 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %611 = reshape(%610, newshape=[10, 9]) /* ty=Tensor[(10, 9), float32] */;
  %612 = %574.2;
  %613 = less_equal(%583, %584) /* ty=Tensor[(7, 2, 16), bool] */;
  %614 = multiply(%587, %588) /* ty=Tensor[(2880), uint16] */;
  %615 = %593.2;
  %616 = equal(%603, %604) /* ty=Tensor[(9, 5, 16), bool] */;
  %617 = %609.1;
  %618 = @func_955(%611) /* ty=Tensor[(10, 9), float32] */;
  (%575, %612, %613, %614, %615, %var_1450, %616, %617, %618, meta[relay.Constant][38] /* ty=Tensor[(90), float32] */)
}

def @func_955(%var_942: Tensor[(10, 9), float32]) -> Tensor[(10, 9), float32] {
  %619 = cast(%var_942, dtype="float32") /* ty=Tensor[(10, 9), float32] */;
  sin(%619) /* ty=Tensor[(10, 9), float32] */
}

def @func_5240(%var_5218: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %620 = cast(%var_5218, dtype="float64") /* ty=Tensor[(39), float64] */;
  %621 = reshape(%620, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float64] */;
  %622 = cast(meta[relay.Constant][39] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %623 = cast(meta[relay.Constant][39] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %624 = reshape(%622, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %625 = reshape(%623, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %626 = @func_3389() /* ty=(Tensor[(5, 5), float64],) */;
  %627 = @func_2888() /* ty=Tensor[(5, 5), float64] */;
  %628 = @func_2180(%621) /* ty=Tensor[(13, 3, 2), float64] */;
  %629 = @func_1618(%624, %625) /* ty=Tensor[(16, 14, 13), float32] */;
  %630 = %626.0;
  %631 = @func_2888() /* ty=Tensor[(5, 5), float64] */;
  (%627, %628, %var_5218, %629, meta[relay.Constant][39] /* ty=Tensor[(2912), float32] */, %630, %631)
}

def @func_4052() -> (Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) {
  %632 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %633 = @func_3522() /* ty=Tensor[(9, 11, 2), float64] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
  %635 = sin(%634) /* ty=Tensor[(9, 11, 2), float64] */;
  %636 = cast(%635, dtype="uint16") /* ty=Tensor[(9, 11, 2), uint16] */;
  %637 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%633, dtype="uint16") /* ty=Tensor[(9, 11, 2), uint16] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %640 = %632.2;
  %641 = add(%638, %639) /* ty=Tensor[(9, 11, 2), uint16] */;
  (%640, %641)
}

def @func_5790(%var_5698: Tensor[(1056), float64], %var_5711: Tensor[(9, 11, 2), float32], %var_5723: Tensor[(4, 156), uint16], %var_5736: Tensor[(39), float64], %var_5759: Tensor[(192), float64], %var_5760: Tensor[(168), float64], %var_5761: Tensor[(2, 360), float32], %var_5769: Tensor[(2, 360), float32], %var_5774: Tensor[(4, 156), uint16]) -> (Tensor[(224), float32], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(9, 11, 2), uint16], Tensor[(13, 12, 4), bool], Tensor[(24, 26), uint8], Tensor[(18), float32], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(5, 5), float64], Tensor[(720), float32], Tensor[(80), float32], Tensor[(192), float64], Tensor[(168), float64], Tensor[(4, 15, 11), int64], Tensor[(660), int64], Tensor[(2, 360), bool], Tensor[(4, 156), bool], Tensor[(9, 11, 2), bool], Tensor[(5, 5), float64]) {
  %642 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %643 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %644 = cast(meta[relay.Constant][40] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %645 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %646 = reshape(%642, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %647 = reshape(%643, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %648 = reshape(%644, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %649 = reshape(%645, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %650 = @func_3861(%646, %647, %648, %649) /* ty=(Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) */;
  %651 = @func_5314() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %652 = cast(%var_5723, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %653 = cast(%var_5723, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %654 = reshape(%652, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %655 = reshape(%653, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %656 = cast(meta[relay.Constant][41] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %657 = @func_58(%654, %655) /* ty=Tensor[(13, 12, 4), bool] */;
  %658 = cast(%657, dtype="uint16") /* ty=Tensor[(13, 12, 4), uint16] */;
  %659 = reshape(%656, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), float32] */;
  %660 = reshape(%658, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint16] */;
  %661 = @func_656(%659, %660) /* ty=(Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %662 = cast(%var_5736, dtype="float64") /* ty=Tensor[(39), float64] */;
  %663 = reshape(%662, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %664 = @func_4278(%663) /* ty=(Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) */;
  %665 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %666 = cast(meta[relay.Constant][42] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %667 = cast(%var_5759, dtype="float64") /* ty=Tensor[(192), float64] */;
  %668 = cast(%var_5760, dtype="float64") /* ty=Tensor[(168), float64] */;
  %669 = %650.1;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(224), float32] */;
  %671 = cast(%var_5761, dtype="float32") /* ty=Tensor[(2, 360), float32] */;
  %672 = reshape(%666, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %673 = reshape(%667, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %674 = reshape(%668, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %675 = reshape(%670, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %676 = reshape(%671, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %677 = @func_3976(%672, %673, %674, %675, %676) /* ty=(Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) */;
  %678 = cast(meta[relay.Constant][43] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
  %679 = reshape(%678, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), int64] */;
  %680 = cast(%var_5769, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
  %681 = shape_of(%var_5761, dtype="int32") /* ty=Tensor[(2), int32] */;
  %682 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %684 = cast(%var_5774, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %685 = shape_of(%var_5723, dtype="int32") /* ty=Tensor[(2), int32] */;
  %686 = cast(%var_5723, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %688 = @func_5314() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %689 = %688.0;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
  %691 = exp(%690) /* ty=Tensor[(9, 11, 2), float32] */;
  %692 = cast(%var_5711, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = less_equal(%694, %695) /* ty=Tensor[(9, 11, 2), bool] */;
  %697 = cast(%var_5711, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = %651.0;
  %702 = %661.0;
  %703 = %664.1;
  %704 = %665.0;
  %705 = %677.5;
  %706 = @func_5135(%679) /* ty=Tensor[(4, 15, 11), int64] */;
  %707 = greater_equal(%682, %683) /* ty=Tensor[(2, 360), bool] */;
  %708 = less(%686, %687) /* ty=Tensor[(4, 156), bool] */;
  %709 = greater_equal(%699, %700) /* ty=Tensor[(9, 11, 2), bool] */;
  %710 = @func_3629() /* ty=Tensor[(5, 5), float64] */;
  (%669, %var_5698, meta[relay.Constant][40] /* ty=Tensor[(224), float32] */, %701, %657, %702, meta[relay.Constant][41] /* ty=Tensor[(18), float32] */, %703, %var_5736, %704, %705, meta[relay.Constant][42] /* ty=Tensor[(80), float32] */, %var_5759, %var_5760, %706, meta[relay.Constant][43] /* ty=Tensor[(660), int64] */, %707, %708, %709, %710)
}

def @func_2859() -> Tensor[(5, 5), float64] {
  @func_2458() /* ty=Tensor[(5, 5), float64] */
}

def @func_4424() -> (Tensor[(5, 5), float64],) {
  %711 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %712 = %711.0;
  (%712,)
}

def @func_3236(%var_3216: int64, %var_3217: Tensor[(10, 6, 13), int64]) -> (Tensor[(10, 6, 13), int64],) {
  %713 = cast(%var_3216, dtype="int64") /* ty=int64 */;
  %714 = cast(%var_3217, dtype="int64") /* ty=Tensor[(10, 6, 13), int64] */;
  %715 = minimum(%713, %714) /* ty=Tensor[(10, 6, 13), int64] */;
  (%715,)
}

def @func_2353(%var_2343: uint64) -> (Tensor[(3, 15, 4), uint64],) {
  %716 = cast(%var_2343, dtype="uint64") /* ty=uint64 */;
  %717 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 15, 4), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
  %718 = left_shift(%716, %717) /* ty=Tensor[(3, 15, 4), uint64] */;
  (%718,)
}

def @func_926(%var_898: Tensor[(4, 8, 2), uint64]) -> (Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
  %719 = cast(%var_898, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %720 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(4, 8, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 8, 2), uint64] */, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = cast(meta[relay.Constant][46] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %724 = cast(meta[relay.Constant][46] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %725 = reshape(%723, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %726 = reshape(%724, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %727 = not_equal(%721, %722) /* ty=Tensor[(4, 8, 2), bool] */;
  %728 = @func_58(%725, %726) /* ty=Tensor[(13, 12, 4), bool] */;
  (%727, %728, meta[relay.Constant][46] /* ty=Tensor[(624), uint16] */)
}

def @func_3301(%var_3298: Tensor[(3, 12, 9), float32]) -> Tensor[(3, 12, 9), float32] {
  %729 = cast(%var_3298, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  sqrt(%729) /* ty=Tensor[(3, 12, 9), float32] */
}

def @main(%var_6044: Tensor[(11, 2, 13), int16], %var_6045: Tensor[(11, 2, 13), int16]) -> Tensor[(11, 2, 13), bool] {
  %730 = cast(%var_6045, dtype="bool") /* ty=Tensor[(11, 2, 13), bool] */;
  %731 = shape_of(%var_6044, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%var_6044, dtype="bool") /* ty=Tensor[(11, 2, 13), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%732, %733) /* ty=Tensor[(11, 2, 13), bool] */
}

def @func_1068(%var_1044: Tensor[(4, 4, 15), uint16], %var_1045: Tensor[(4, 4, 15), uint16]) -> (Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
  %734 = cast(%var_1045, dtype="uint16") /* ty=Tensor[(4, 4, 15), uint16] */;
  %735 = shape_of(%var_1044, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_1044, dtype="uint16") /* ty=Tensor[(4, 4, 15), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = cast(meta[relay.Constant][47] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %739 = cast(meta[relay.Constant][47] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %740 = reshape(%738, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %741 = reshape(%739, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %742 = bitwise_or(%736, %737) /* ty=Tensor[(4, 4, 15), uint16] */;
  %743 = @func_58(%740, %741) /* ty=Tensor[(13, 12, 4), bool] */;
  (%742, %743, meta[relay.Constant][47] /* ty=Tensor[(624), uint16] */)
}

def @func_2480() -> Tensor[(5, 5), float64] {
  @func_2458() /* ty=Tensor[(5, 5), float64] */
}

def @func_4128() -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  %744 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
  %745 = cast(meta[relay.Constant][48] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %746 = cast(meta[relay.Constant][48] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %747 = reshape(%745, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %748 = reshape(%746, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %749 = %744.0;
  %750 = @func_582(%747, %748) /* ty=Tensor[(7, 2, 16), int32] */;
  (%749, %750, meta[relay.Constant][48] /* ty=Tensor[(224), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2458() -> Tensor[(5, 5), float64] {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 5), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%2, %3) /* ty=Tensor[(5, 5), float64] */
}

def @func_4389() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %4 = @func_2859() /* ty=Tensor[(5, 5), float64] */;
  %5 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  (%4, %5)
}

def @func_3724(%var_3721: Tensor[(16, 7, 13), uint8], %var_3722: Tensor[(16, 7, 13), uint8], %var_3723: Tensor[(198), float64]) -> (Tensor[(16, 7, 13), uint8], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %15 = fn (%var_3692: Tensor[(16, 7, 13), uint8], %var_3693: Tensor[(16, 7, 13), uint8], %var_3706: Tensor[(198), float64]) -> (Tensor[(16, 7, 13), uint8], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
    %6 = cast(%var_3693, dtype="uint8") /* ty=Tensor[(16, 7, 13), uint8] */;
    %7 = shape_of(%var_3692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%var_3692, dtype="uint8") /* ty=Tensor[(16, 7, 13), uint8] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %10 = cast(%var_3706, dtype="float64") /* ty=Tensor[(198), float64] */;
    %11 = reshape(%10, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
    %12 = @func_2318(%11) /* ty=(Tensor[(9, 11, 2), float64],) */;
    %13 = bitwise_xor(%8, %9) /* ty=Tensor[(16, 7, 13), uint8] */;
    %14 = %12.0;
    (%13, %14, %var_3706)
  };
  %15(%var_3721, %var_3722, %var_3723) /* ty=(Tensor[(16, 7, 13), uint8], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */
}

def @func_4054() -> (Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) {
  @func_4052() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) */
}

def @func_1622(%var_1620: Tensor[(16, 14, 13), float32], %var_1621: Tensor[(16, 14, 13), float32]) -> Tensor[(16, 14, 13), float32] {
  @func_1618(%var_1620, %var_1621) /* ty=Tensor[(16, 14, 13), float32] */
}

def @func_4786(%var_4784: Tensor[(6, 6, 15), float64], %var_4785: Tensor[(6, 6, 15), float64]) -> (Tensor[(5, 5), float64], Tensor[(6, 6, 15), bool], Tensor[(6, 6, 15), uint16]) {
  @func_4782(%var_4784, %var_4785) /* ty=(Tensor[(5, 5), float64], Tensor[(6, 6, 15), bool], Tensor[(6, 6, 15), uint16]) */
}

def @func_2397(%var_2384: Tensor[(11, 4, 1), float64]) -> (Tensor[(11, 4, 1), float64],) {
  %16 = cast(%var_2384, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %17 = atan(%16) /* ty=Tensor[(11, 4, 1), float64] */;
  (%17,)
}

def @func_3301(%var_3298: Tensor[(3, 12, 9), float32]) -> Tensor[(3, 12, 9), float32] {
  %18 = cast(%var_3298, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  sqrt(%18) /* ty=Tensor[(3, 12, 9), float32] */
}

def @func_4216(%var_4210: Tensor[(224), float32]) -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  %19 = cast(%var_4210, dtype="float32") /* ty=Tensor[(224), float32] */;
  %20 = cast(%var_4210, dtype="float32") /* ty=Tensor[(224), float32] */;
  %21 = reshape(%19, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %22 = reshape(%20, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %23 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
  %24 = @func_582(%21, %22) /* ty=Tensor[(7, 2, 16), int32] */;
  (%23, %24, %var_4210)
}

def @func_5928() -> (Tensor[(9, 11, 2), float64],) {
  %27 = fn () -> (Tensor[(9, 11, 2), float64],) {
    %25 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
    %26 = %25.1;
    (%26,)
  };
  %27() /* ty=(Tensor[(9, 11, 2), float64],) */
}

def @func_3487() -> (Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */
}

def @func_4782(%var_4711: Tensor[(6, 6, 15), float64], %var_4712: Tensor[(6, 6, 15), float64]) -> (Tensor[(5, 5), float64], Tensor[(6, 6, 15), bool], Tensor[(6, 6, 15), uint16]) {
  %28 = @func_4424() /* ty=(Tensor[(5, 5), float64],) */;
  %29 = cast(%var_4711, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %30 = asin(%29) /* ty=Tensor[(6, 6, 15), float64] */;
  %31 = cast(%var_4712, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %32 = shape_of(%var_4711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_4711, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %35 = floor_divide(%33, %34) /* ty=Tensor[(6, 6, 15), float64] */;
  %36 = cast(%var_4712, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %40 = bitwise_or(%38, %39) /* ty=Tensor[(6, 6, 15), uint8] */;
  %41 = cast(%var_4711, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="uint8") /* ty=Tensor[(6, 6, 15), uint8] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %45 = minimum(%43, %44) /* ty=Tensor[(6, 6, 15), uint8] */;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %47 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%30, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = cast(%45, dtype="int64") /* ty=Tensor[(6, 6, 15), int64] */;
  %51 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%30, dtype="int64") /* ty=Tensor[(6, 6, 15), int64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %54 = left_shift(%52, %53) /* ty=Tensor[(6, 6, 15), int64] */;
  %55 = cast(%var_4712, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = floor_mod(%57, %58) /* ty=Tensor[(6, 6, 15), float32] */;
  %60 = cast(%59, dtype="uint16") /* ty=Tensor[(6, 6, 15), uint16] */;
  %61 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%35, dtype="uint16") /* ty=Tensor[(6, 6, 15), uint16] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %64 = %28.0;
  %65 = greater_equal(%48, %49) /* ty=Tensor[(6, 6, 15), bool] */;
  %66 = add(%62, %63) /* ty=Tensor[(6, 6, 15), uint16] */;
  (%64, %65, %66)
}

def @func_4672() -> (Tensor[(14, 10, 14), float64], Tensor[(14, 10, 14), float64], Tensor[(9, 11, 2), uint16]) {
  %74 = fn () -> (Tensor[(14, 10, 14), float64], Tensor[(14, 10, 14), float64], Tensor[(9, 11, 2), uint16]) {
    %67 = cast(-5.37506f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
    %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
    %70 = @func_4471() /* ty=(Tensor[(9, 11, 2), uint16],) */;
    %71 = maximum(%67, %68) /* ty=Tensor[(14, 10, 14), float64] */;
    %72 = asin(%69) /* ty=Tensor[(14, 10, 14), float64] */;
    %73 = %70.0;
    (%71, %72, %73)
  };
  %74() /* ty=(Tensor[(14, 10, 14), float64], Tensor[(14, 10, 14), float64], Tensor[(9, 11, 2), uint16]) */
}

def @func_3239(%var_3237: int64, %var_3238: Tensor[(10, 6, 13), int64]) -> (Tensor[(10, 6, 13), int64],) {
  %78 = fn (%var_3216: int64, %var_3217: Tensor[(10, 6, 13), int64]) -> (Tensor[(10, 6, 13), int64],) {
    %75 = cast(%var_3216, dtype="int64") /* ty=int64 */;
    %76 = cast(%var_3217, dtype="int64") /* ty=Tensor[(10, 6, 13), int64] */;
    %77 = minimum(%75, %76) /* ty=Tensor[(10, 6, 13), int64] */;
    (%77,)
  };
  %78(%var_3237, %var_3238) /* ty=(Tensor[(10, 6, 13), int64],) */
}

def @func_3524() -> Tensor[(9, 11, 2), float64] {
  @func_3522() /* ty=Tensor[(9, 11, 2), float64] */
}

def @func_61(%var_59: Tensor[(13, 12, 4), uint16], %var_60: Tensor[(13, 12, 4), uint16]) -> Tensor[(13, 12, 4), bool] {
  %83 = fn (%var_51: Tensor[(13, 12, 4), uint16], %var_52: Tensor[(13, 12, 4), uint16]) -> Tensor[(13, 12, 4), bool] {
    %79 = cast(%var_52, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
    %80 = shape_of(%var_51, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%var_51, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%81, %82) /* ty=Tensor[(13, 12, 4), bool] */
  };
  %83(%var_59, %var_60) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_3976(%var_3952: Tensor[(4, 2, 10), float32], %var_3961: Tensor[(192), float64], %var_3962: Tensor[(168), float64], %var_3963: Tensor[(224), float32], %var_3964: Tensor[(720), float32]) -> (Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) {
  %84 = cast(%var_3952, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %85 = cast(%var_3961, dtype="float64") /* ty=Tensor[(192), float64] */;
  %86 = cast(%var_3962, dtype="float64") /* ty=Tensor[(168), float64] */;
  %87 = cast(%var_3963, dtype="float32") /* ty=Tensor[(224), float32] */;
  %88 = cast(%var_3964, dtype="float32") /* ty=Tensor[(720), float32] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %90 = reshape(%85, newshape=[12, 16, 1]) /* ty=Tensor[(12, 16, 1), float64] */;
  %91 = reshape(%86, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %92 = reshape(%87, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %93 = reshape(%88, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %94 = reshape(%89, newshape=[2880]) /* ty=Tensor[(2880), uint8] */;
  %95 = @func_2257(%90, %91, %92, %93, %94) /* ty=(Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) */;
  %96 = tan(%84) /* ty=Tensor[(4, 2, 10), float32] */;
  %97 = %95.2;
  (%96, %97, %var_3961, %var_3962, %var_3963, %var_3964, meta[relay.Constant][3] /* ty=Tensor[(2880), uint8] */)
}

def @func_4981() -> (Tensor[(5, 5), float64],) {
  @func_4979() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_2481() -> Tensor[(5, 5), float64] {
  %98 = fn () -> Tensor[(5, 5), float64] {
    @func_2458() /* ty=Tensor[(5, 5), float64] */
  };
  %98() /* ty=Tensor[(5, 5), float64] */
}

def @func_3079() -> (Tensor[(5, 5), float64],) {
  %101 = fn () -> (Tensor[(5, 5), float64],) {
    %99 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
    %100 = %99.0;
    (%100,)
  };
  %101() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_4828() -> (Tensor[(5, 5), float64],) {
  %102 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %103 = %102.0;
  (%103,)
}

def @func_4473() -> (Tensor[(9, 11, 2), uint16],) {
  @func_4471() /* ty=(Tensor[(9, 11, 2), uint16],) */
}

def @func_2744() -> (Tensor[(5, 5), float64],) {
  %106 = fn () -> (Tensor[(5, 5), float64],) {
    %104 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
    %105 = %104.0;
    (%105,)
  };
  %106() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_3447() -> Tensor[(5, 5), float64] {
  @func_3445() /* ty=Tensor[(5, 5), float64] */
}

def @func_5589(%var_5588: Tensor[(2, 2, 14), float32]) -> (Tensor[(2, 2, 14), float32],) {
  %109 = fn (%var_5578: Tensor[(2, 2, 14), float32]) -> (Tensor[(2, 2, 14), float32],) {
    %107 = cast(%var_5578, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
    %108 = erf(%107) /* ty=Tensor[(2, 2, 14), float32] */;
    (%108,)
  };
  %109(%var_5588) /* ty=(Tensor[(2, 2, 14), float32],) */
}

def @func_2460() -> Tensor[(5, 5), float64] {
  @func_2458() /* ty=Tensor[(5, 5), float64] */
}

def @func_819(%var_818: Tensor[(15, 12, 16), uint8]) -> (Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) {
  %123 = fn (%var_780: Tensor[(15, 12, 16), uint8]) -> (Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) {
    %110 = cast(meta[relay.Constant][4] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
    %111 = reshape(%110, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
    %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 12, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 12, 16), uint8] */;
    %113 = shape_of(%var_780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%var_780, dtype="uint8") /* ty=Tensor[(15, 12, 16), uint8] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %116 = add(%114, %115) /* ty=Tensor[(15, 12, 16), uint8] */;
    %117 = cast(%var_780, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %121 = @func_37(%111) /* ty=Tensor[(6, 10), bool] */;
    %122 = subtract(%119, %120) /* ty=Tensor[(15, 12, 16), int8] */;
    (%121, meta[relay.Constant][4] /* ty=Tensor[(60), int16] */, %122)
  };
  %123(%var_818) /* ty=(Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) */
}

def @func_4471() -> (Tensor[(9, 11, 2), uint16],) {
  %124 = @func_4052() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) */;
  %125 = %124.1;
  (%125,)
}

def @func_3183(%var_3177: Tensor[(13, 5, 16), float64]) -> Tensor[(13, 5, 16), float64] {
  %126 = cast(%var_3177, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  asin(%126) /* ty=Tensor[(13, 5, 16), float64] */
}

def @func_2675() -> (Tensor[(5, 5), float64],) {
  %128 = fn () -> (Tensor[(5, 5), float64],) {
    %127 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
    (%127,)
  };
  %128() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_2257(%var_2243: Tensor[(12, 16, 1), float64], %var_2251: Tensor[(168), float64], %var_2252: Tensor[(224), float32], %var_2254: Tensor[(720), float32], %var_2255: Tensor[(2880), uint8]) -> (Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) {
  %129 = cast(%var_2243, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
  %130 = cast(%var_2251, dtype="float64") /* ty=Tensor[(168), float64] */;
  %131 = cast(%var_2252, dtype="float32") /* ty=Tensor[(224), float32] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %133 = cast(%var_2254, dtype="float32") /* ty=Tensor[(720), float32] */;
  %134 = cast(%var_2255, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %135 = reshape(%130, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %136 = reshape(%131, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %137 = reshape(%132, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %138 = reshape(%133, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %139 = reshape(%134, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %140 = @func_1953(%135, %136, %137, %138, %139) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %141 = erf(%129) /* ty=Tensor[(12, 16, 1), float64] */;
  %142 = %140.5;
  (%141, %142, %var_2251, %var_2252, meta[relay.Constant][6] /* ty=Tensor[(240), uint16] */, %var_2254, %var_2255)
}

def @func_2987() -> (Tensor[(5, 5), float64],) {
  @func_2985() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_5572() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %146 = fn () -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
    %143 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
    %144 = %143.0;
    %145 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
    (%144, %145)
  };
  %146() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64]) */
}

def @func_4992() -> (Tensor[(5, 5), float64],) {
  %147 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
  %148 = %147.0;
  (%148,)
}

def @func_3630() -> Tensor[(5, 5), float64] {
  %150 = fn () -> Tensor[(5, 5), float64] {
    %149 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
    %149.0
  };
  %150() /* ty=Tensor[(5, 5), float64] */
}

def @func_1071(%var_1069: Tensor[(4, 4, 15), uint16], %var_1070: Tensor[(4, 4, 15), uint16]) -> (Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
  %161 = fn (%var_1044: Tensor[(4, 4, 15), uint16], %var_1045: Tensor[(4, 4, 15), uint16]) -> (Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
    %151 = cast(%var_1045, dtype="uint16") /* ty=Tensor[(4, 4, 15), uint16] */;
    %152 = shape_of(%var_1044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%var_1044, dtype="uint16") /* ty=Tensor[(4, 4, 15), uint16] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %155 = cast(meta[relay.Constant][7] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %157 = reshape(%155, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
    %158 = reshape(%156, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
    %159 = bitwise_or(%153, %154) /* ty=Tensor[(4, 4, 15), uint16] */;
    %160 = @func_58(%157, %158) /* ty=Tensor[(13, 12, 4), bool] */;
    (%159, %160, meta[relay.Constant][7] /* ty=Tensor[(624), uint16] */)
  };
  %161(%var_1069, %var_1070) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */
}

def @func_5242(%var_5241: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  %174 = fn (%var_5218: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
    %162 = cast(%var_5218, dtype="float64") /* ty=Tensor[(39), float64] */;
    %163 = reshape(%162, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float64] */;
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %166 = reshape(%164, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
    %167 = reshape(%165, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
    %168 = @func_3389() /* ty=(Tensor[(5, 5), float64],) */;
    %169 = @func_2888() /* ty=Tensor[(5, 5), float64] */;
    %170 = @func_2180(%163) /* ty=Tensor[(13, 3, 2), float64] */;
    %171 = @func_1618(%166, %167) /* ty=Tensor[(16, 14, 13), float32] */;
    %172 = %168.0;
    %173 = @func_2888() /* ty=Tensor[(5, 5), float64] */;
    (%169, %170, %var_5218, %171, meta[relay.Constant][8] /* ty=Tensor[(2912), float32] */, %172, %173)
  };
  %174(%var_5241) /* ty=(Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(5, 5), float64], Tensor[(5, 5), float64]) */
}

def @func_2085(%var_2034: Tensor[(3, 9, 16), int16], %var_2035: Tensor[(3, 9, 16), int16], %var_2051: Tensor[(224), float32], %var_2052: Tensor[(240), uint16], %var_2053: Tensor[(12, 60), float32], %var_2054: Tensor[(2880), uint8], %var_2067: Tensor[(12, 60), float32], %var_2079: Tensor[(8, 8), uint64]) -> (Tensor[(3, 9, 16), int16], Tensor[(3, 9, 16), float32], Tensor[(15, 12, 16), int8], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(12, 60), uint64], Tensor[(13, 12, 4), bool], Tensor[(8, 8), uint64]) {
  %175 = cast(%var_2035, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %176 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_2034, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %179 = cast(%var_2034, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %180 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %181 = cast(%var_2051, dtype="float32") /* ty=Tensor[(224), float32] */;
  %182 = cast(%var_2052, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %183 = cast(%var_2053, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %184 = cast(%var_2054, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %185 = reshape(%180, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %186 = reshape(%181, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %187 = reshape(%182, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %188 = reshape(%183, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %189 = reshape(%184, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %190 = @func_1953(%185, %186, %187, %188, %189) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %191 = cast(%var_2067, dtype="uint64") /* ty=Tensor[(12, 60), uint64] */;
  %192 = shape_of(%var_2053, dtype="int32") /* ty=Tensor[(2), int32] */;
  %193 = cast(%var_2053, dtype="uint64") /* ty=Tensor[(12, 60), uint64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %195 = cast(%var_2079, dtype="uint64") /* ty=Tensor[(8, 8), uint64] */;
  %196 = reshape(%195, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), uint64] */;
  %197 = @func_926(%196) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %198 = right_shift(%177, %178) /* ty=Tensor[(3, 9, 16), int16] */;
  %199 = sqrt(%179) /* ty=Tensor[(3, 9, 16), float32] */;
  %200 = %190.6;
  %201 = logical_xor(%193, %194) /* ty=Tensor[(12, 60), uint64] */;
  %202 = %197.1;
  (%198, %199, %200, meta[relay.Constant][9] /* ty=Tensor[(168), float64] */, %var_2051, %var_2052, %var_2054, %201, %202, %var_2079)
}

def @func_2985() -> (Tensor[(5, 5), float64],) {
  %203 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  (%203,)
}

def @func_3304(%var_3302: Tensor[(3, 12, 9), float32]) -> Tensor[(3, 12, 9), float32] {
  @func_3301(%var_3302) /* ty=Tensor[(3, 12, 9), float32] */
}

def @func_4509(%var_4508: Tensor[(7, 12, 4), int16]) -> (Tensor[(7, 12, 4), bool], Tensor[(624), uint16], Tensor[(64), uint64]) {
  %213 = fn (%var_4486: Tensor[(7, 12, 4), int16]) -> (Tensor[(7, 12, 4), bool], Tensor[(624), uint16], Tensor[(64), uint64]) {
    %204 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 12, 4), int16] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
    %205 = shape_of(%var_4486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%var_4486, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(64), uint64] */, dtype="uint64") /* ty=Tensor[(64), uint64] */;
    %209 = reshape(%208, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), uint64] */;
    %210 = @func_926(%209) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
    %211 = greater(%206, %207) /* ty=Tensor[(7, 12, 4), bool] */;
    %212 = %210.2;
    (%211, %212, meta[relay.Constant][11] /* ty=Tensor[(64), uint64] */)
  };
  %213(%var_4508) /* ty=(Tensor[(7, 12, 4), bool], Tensor[(624), uint16], Tensor[(64), uint64]) */
}

def @func_5617(%var_5615: Tensor[(224), float32], %var_5616: Tensor[(720), float32]) -> (Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) {
  @func_5613(%var_5615, %var_5616) /* ty=(Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) */
}

def @func_3522() -> Tensor[(9, 11, 2), float64] {
  %214 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %214.1
}

def @func_5009(%var_5007: Tensor[(5, 2, 12), int8], %var_5008: Tensor[(5, 2, 12), int8]) -> (Tensor[(5, 2, 12), int8], Tensor[(5, 2, 12), float32]) {
  @func_5005(%var_5007, %var_5008) /* ty=(Tensor[(5, 2, 12), int8], Tensor[(5, 2, 12), float32]) */
}

def @func_955(%var_942: Tensor[(10, 9), float32]) -> Tensor[(10, 9), float32] {
  %215 = cast(%var_942, dtype="float32") /* ty=Tensor[(10, 9), float32] */;
  sin(%215) /* ty=Tensor[(10, 9), float32] */
}

def @func_2183(%var_2181: Tensor[(13, 3, 1), float64]) -> Tensor[(13, 3, 2), float64] {
  @func_2180(%var_2181) /* ty=Tensor[(13, 3, 2), float64] */
}

def @func_4979() -> (Tensor[(5, 5), float64],) {
  %216 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %217 = %216.0;
  (%217,)
}

def @func_2547() -> Tensor[(5, 5), float64] {
  %218 = fn () -> Tensor[(5, 5), float64] {
    @func_2458() /* ty=Tensor[(5, 5), float64] */
  };
  %218() /* ty=Tensor[(5, 5), float64] */
}

def @func_5468(%var_5467: Tensor[(5, 351), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 351), float32]) {
  %233 = fn (%var_5417: Tensor[(5, 351), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 351), float32]) {
    %219 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
    %220 = cast(%var_5417, dtype="uint8") /* ty=Tensor[(5, 351), uint8] */;
    %221 = reshape(%220, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint8] */;
    %222 = @func_1999(%221) /* ty=Tensor[(15, 9, 13), bool] */;
    %223 = cast(%222, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
    %224 = shape_of(%var_5417, dtype="int32") /* ty=Tensor[(2), int32] */;
    %225 = cast(%var_5417, dtype="bool") /* ty=Tensor[(5, 351), bool] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %227 = greater_equal(%225, %226) /* ty=Tensor[(5, 351), bool] */;
    %228 = cast(%227, dtype="float64") /* ty=Tensor[(5, 351), float64] */;
    %229 = sigmoid(%228) /* ty=Tensor[(5, 351), float64] */;
    %230 = cast(%229, dtype="float32") /* ty=Tensor[(5, 351), float32] */;
    %231 = %219.0;
    %232 = log(%230) /* ty=Tensor[(5, 351), float32] */;
    (%231, %232)
  };
  %233(%var_5467) /* ty=(Tensor[(5, 5), float64], Tensor[(5, 351), float32]) */
}

def @func_4391() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64]) {
  @func_4389() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64]) */
}

def @func_2787(%var_2745: Tensor[(9, 7), float64], %var_2759: Tensor[(224), float32], %var_2761: Tensor[(720), float32]) -> (Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) {
  %234 = cast(%var_2745, dtype="float64") /* ty=Tensor[(9, 7), float64] */;
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %236 = cast(%var_2759, dtype="float32") /* ty=Tensor[(224), float32] */;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %238 = cast(%var_2761, dtype="float32") /* ty=Tensor[(720), float32] */;
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %240 = reshape(%235, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
  %241 = reshape(%236, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %242 = reshape(%237, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %243 = reshape(%238, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
  %244 = reshape(%239, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
  %245 = @func_1953(%240, %241, %242, %243, %244) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
  %246 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
  %247 = cast(meta[relay.Constant][14] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %248 = reshape(%247, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), uint8] */;
  %249 = @func_817(%248) /* ty=(Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) */;
  %250 = cos(%234) /* ty=Tensor[(9, 7), float64] */;
  %251 = %245.3;
  %252 = %246.0;
  %253 = %249.2;
  (%250, %251, meta[relay.Constant][12] /* ty=Tensor[(168), float64] */, %var_2759, meta[relay.Constant][13] /* ty=Tensor[(240), uint16] */, %var_2761, meta[relay.Constant][14] /* ty=Tensor[(2880), uint8] */, %252, %253)
}

def @func_4459() -> (Tensor[(5, 5), float64],) {
  %256 = fn () -> (Tensor[(5, 5), float64],) {
    %254 = @func_4389() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64]) */;
    %255 = %254.0;
    (%255,)
  };
  %256() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_6038() -> Tensor[(60), int16] {
  @func_6036() /* ty=Tensor[(60), int16] */
}

def @func_4549() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(13, 12, 4), bool], Tensor[(4, 156), uint16], Tensor[(9, 11, 2), float64]) {
  %257 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
  %258 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 156), uint16] */, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %259 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 156), uint16] */, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %260 = reshape(%258, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %261 = reshape(%259, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %262 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %263 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  %264 = %257.0;
  %265 = @func_58(%260, %261) /* ty=Tensor[(13, 12, 4), bool] */;
  %266 = %262.1;
  (%263, %264, %265, meta[relay.Constant][15] /* ty=Tensor[(4, 156), uint16] */, %266)
}

def @func_4183() -> (Tensor[(60), int16], Tensor[(5, 5), float64]) {
  %267 = @func_3880() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %268 = %267.0;
  %269 = @func_3629() /* ty=Tensor[(5, 5), float64] */;
  (%268, %269)
}

def @func_39(%var_38: Tensor[(6, 10), int16]) -> Tensor[(6, 10), bool] {
  %274 = fn (%var_5: Tensor[(6, 10), int16]) -> Tensor[(6, 10), bool] {
    %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 10), int16] */, dtype="bool") /* ty=Tensor[(6, 10), bool] */;
    %271 = shape_of(%var_5, dtype="int32") /* ty=Tensor[(2), int32] */;
    %272 = cast(%var_5, dtype="bool") /* ty=Tensor[(6, 10), bool] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    less_equal(%272, %273) /* ty=Tensor[(6, 10), bool] */
  };
  %274(%var_38) /* ty=Tensor[(6, 10), bool] */
}

def @func_1953(%var_1883: Tensor[(7, 3, 8), float64], %var_1904: Tensor[(8, 28), float32], %var_1929: Tensor[(240), uint16], %var_1937: Tensor[(60, 12), float32], %var_1938: Tensor[(96, 30), uint8]) -> (Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) {
  %275 = cast(%var_1883, dtype="float64") /* ty=Tensor[(7, 3, 8), float64] */;
  %276 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 8), float64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %279 = cast(%var_1904, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %280 = cast(%var_1904, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %281 = reshape(%279, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %282 = reshape(%280, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %283 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 3, 8), float64] */, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %284 = shape_of(%var_1883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_1883, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %287 = subtract(%285, %286) /* ty=Tensor[(7, 3, 8), uint32] */;
  %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 3, 8), float64] */, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="uint32") /* ty=Tensor[(7, 3, 8), uint32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %292 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %293 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %294 = reshape(%292, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %295 = reshape(%293, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %296 = @func_1068(%294, %295) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %297 = cast(%var_1937, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %298 = @func_582(%281, %282) /* ty=Tensor[(7, 2, 16), int32] */;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %300 = cast(%var_1938, dtype="uint8") /* ty=Tensor[(96, 30), uint8] */;
  %301 = cast(%var_1929, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %302 = reshape(%297, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), float32] */;
  %303 = reshape(%299, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %304 = reshape(%300, newshape=[2880]) /* ty=Tensor[(2880), uint8] */;
  %305 = reshape(%301, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %306 = @func_1472(%302, %303, %304, %305) /* ty=(Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) */;
  %307 = add(%277, %278) /* ty=Tensor[(7, 3, 8), float64] */;
  %308 = logical_xor(%290, %291) /* ty=Tensor[(7, 3, 8), uint32] */;
  %309 = %296.0;
  %310 = %306.1;
  (%307, %298, %var_1904, %308, %309, %var_1929, %310, %var_1937, %var_1938)
}

def @func_5005(%var_4997: Tensor[(5, 2, 12), int8], %var_4998: Tensor[(5, 2, 12), int8]) -> (Tensor[(5, 2, 12), int8], Tensor[(5, 2, 12), float32]) {
  %311 = cast(%var_4998, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %312 = shape_of(%var_4997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%var_4997, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %315 = cast(%var_4997, dtype="float32") /* ty=Tensor[(5, 2, 12), float32] */;
  %316 = right_shift(%313, %314) /* ty=Tensor[(5, 2, 12), int8] */;
  %317 = log2(%315) /* ty=Tensor[(5, 2, 12), float32] */;
  (%316, %317)
}

def @func_3867(%var_3863: Tensor[(11, 6, 16), float64], %var_3864: Tensor[(11, 6, 16), float64], %var_3865: Tensor[(224), float32], %var_3866: Tensor[(11, 6, 16), float64]) -> (Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) {
  @func_3861(%var_3863, %var_3864, %var_3865, %var_3866) /* ty=(Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) */
}

def @func_6036() -> Tensor[(60), int16] {
  %318 = @func_3880() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %318.0
}

def @func_5509(%var_5508: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), uint16], Tensor[(16, 10, 3), float64]) {
  %333 = fn (%var_5491: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), uint16], Tensor[(16, 10, 3), float64]) {
    %319 = cast(%var_5491, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
    %320 = cos(%319) /* ty=Tensor[(16, 10, 3), float64] */;
    %321 = cast(%320, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
    %322 = shape_of(%var_5491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_5491, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %325 = floor_divide(%323, %324) /* ty=Tensor[(16, 10, 3), float64] */;
    %326 = cast(%320, dtype="uint16") /* ty=Tensor[(16, 10, 3), uint16] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%325, dtype="uint16") /* ty=Tensor[(16, 10, 3), uint16] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %330 = cast(%320, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
    %331 = bitwise_or(%328, %329) /* ty=Tensor[(16, 10, 3), uint16] */;
    %332 = sinh(%330) /* ty=Tensor[(16, 10, 3), float64] */;
    (%331, %332)
  };
  %333(%var_5508) /* ty=(Tensor[(16, 10, 3), uint16], Tensor[(16, 10, 3), float64]) */
}

def @func_1960(%var_1955: Tensor[(7, 3, 8), float64], %var_1956: Tensor[(8, 28), float32], %var_1957: Tensor[(240), uint16], %var_1958: Tensor[(60, 12), float32], %var_1959: Tensor[(96, 30), uint8]) -> (Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) {
  @func_1953(%var_1955, %var_1956, %var_1957, %var_1958, %var_1959) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */
}

def @func_5135(%var_5124: Tensor[(4, 15, 11), int64]) -> Tensor[(4, 15, 11), int64] {
  %334 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 11), int64] */, dtype="int64") /* ty=Tensor[(4, 15, 11), int64] */;
  %335 = shape_of(%var_5124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_5124, dtype="int64") /* ty=Tensor[(4, 15, 11), int64] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%336, %337) /* ty=Tensor[(4, 15, 11), int64] */
}

def @func_4092(%var_4090: Tensor[(1056), float64], %var_4091: Tensor[(1755), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(15, 9, 13), bool], Tensor[(1755), float32]) {
  %354 = fn (%var_4067: Tensor[(1056), float64], %var_4075: Tensor[(1755), uint8]) -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(15, 9, 13), bool], Tensor[(1755), float32]) {
    %338 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %339 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %341 = cast(%var_4067, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %342 = reshape(%338, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
    %343 = reshape(%339, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
    %344 = reshape(%340, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %345 = reshape(%341, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
    %346 = @func_3861(%342, %343, %344, %345) /* ty=(Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) */;
    %347 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
    %348 = reshape(%347, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint8] */;
    %349 = cast(%var_4075, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %350 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
    %351 = %346.5;
    %352 = @func_1999(%348) /* ty=Tensor[(15, 9, 13), bool] */;
    %353 = exp(%349) /* ty=Tensor[(1755), float32] */;
    (%350, %351, %var_4067, meta[relay.Constant][19] /* ty=Tensor[(224), float32] */, %352, %353)
  };
  %354(%var_4090, %var_4091) /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(15, 9, 13), bool], Tensor[(1755), float32]) */
}

def @func_585(%var_583: Tensor[(7, 2, 16), float32], %var_584: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), int32] {
  %374 = fn (%var_540: Tensor[(7, 2, 16), float32], %var_541: Tensor[(7, 2, 16), float32]) -> Tensor[(7, 2, 16), int32] {
    %355 = cast(%var_541, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %356 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%var_540, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %359 = divide(%357, %358) /* ty=Tensor[(7, 2, 16), float32] */;
    %360 = cast(%359, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
    %361 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %362 = cast(%var_540, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
    %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %364 = logical_and(%362, %363) /* ty=Tensor[(7, 2, 16), bool] */;
    %365 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 2, 16), bool] */, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
    %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(%364, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %369 = left_shift(%367, %368) /* ty=Tensor[(7, 2, 16), int16] */;
    %370 = cast(%359, dtype="int32") /* ty=Tensor[(7, 2, 16), int32] */;
    %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%369, dtype="int32") /* ty=Tensor[(7, 2, 16), int32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_and(%372, %373) /* ty=Tensor[(7, 2, 16), int32] */
  };
  %374(%var_583, %var_584) /* ty=Tensor[(7, 2, 16), int32] */
}

def @func_2860() -> Tensor[(5, 5), float64] {
  %375 = fn () -> Tensor[(5, 5), float64] {
    @func_2458() /* ty=Tensor[(5, 5), float64] */
  };
  %375() /* ty=Tensor[(5, 5), float64] */
}

def @func_4830() -> (Tensor[(5, 5), float64],) {
  @func_4828() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_2180(%var_2154: Tensor[(13, 3, 1), float64]) -> Tensor[(13, 3, 2), float64] {
  %376 = cast(%var_2154, dtype="float64") /* ty=Tensor[(13, 3, 1), float64] */;
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  floor_divide(%376, %377) /* ty=Tensor[(13, 3, 2), float64] */
}

def @func_5900() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(10, 9), float32], Tensor[(90), float32]) {
  %386 = fn () -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(10, 9), float32], Tensor[(90), float32]) {
    %378 = @func_4458() /* ty=(Tensor[(5, 5), float64],) */;
    %379 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
    %380 = cast(meta[relay.Constant][22] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %381 = reshape(%380, newshape=[10, 9]) /* ty=Tensor[(10, 9), float32] */;
    %382 = %378.0;
    %383 = %379.0;
    %384 = @func_4514() /* ty=Tensor[(5, 5), float64] */;
    %385 = @func_955(%381) /* ty=Tensor[(10, 9), float32] */;
    (%382, %383, %384, %385, meta[relay.Constant][22] /* ty=Tensor[(90), float32] */)
  };
  %386() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(10, 9), float32], Tensor[(90), float32]) */
}

def @func_1472(%var_1358: Tensor[(9, 5, 16), float32], %var_1365: Tensor[(224), float32], %var_1382: Tensor[(2880), uint8], %var_1450: Tensor[(240), uint16]) -> (Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) {
  %387 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %388 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %389 = reshape(%387, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %390 = reshape(%388, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %391 = cast(%var_1382, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
  %392 = reshape(%391, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), uint8] */;
  %393 = @func_817(%392) /* ty=(Tensor[(6, 10), bool], Tensor[(60), int16], Tensor[(15, 12, 16), int8]) */;
  %394 = @func_582(%389, %390) /* ty=Tensor[(7, 2, 16), int32] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %396 = cast(%var_1365, dtype="float32") /* ty=Tensor[(224), float32] */;
  %397 = reshape(%395, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %398 = reshape(%396, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %399 = @func_582(%397, %398) /* ty=Tensor[(7, 2, 16), int32] */;
  %400 = cast(%var_1365, dtype="bool") /* ty=Tensor[(224), bool] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %404 = cast(meta[relay.Constant][23] /* ty=Tensor[(2880), uint8] */, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %405 = shape_of(%var_1382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(%var_1382, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %408 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %409 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %410 = reshape(%408, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %411 = reshape(%409, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %412 = @func_1068(%410, %411) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %413 = cast(%var_1358, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %414 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(9, 5, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 5, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = greater_equal(%415, %416) /* ty=Tensor[(9, 5, 16), bool] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
  %419 = atanh(%418) /* ty=Tensor[(9, 5, 16), float32] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %425 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %426 = reshape(%424, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %427 = reshape(%425, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), uint16] */;
  %428 = @func_1068(%426, %427) /* ty=(Tensor[(4, 4, 15), uint16], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */;
  %429 = cast(meta[relay.Constant][25] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %430 = reshape(%429, newshape=[10, 9]) /* ty=Tensor[(10, 9), float32] */;
  %431 = %393.2;
  %432 = less_equal(%402, %403) /* ty=Tensor[(7, 2, 16), bool] */;
  %433 = multiply(%406, %407) /* ty=Tensor[(2880), uint16] */;
  %434 = %412.2;
  %435 = equal(%422, %423) /* ty=Tensor[(9, 5, 16), bool] */;
  %436 = %428.1;
  %437 = @func_955(%430) /* ty=Tensor[(10, 9), float32] */;
  (%394, %431, %432, %433, %434, %var_1450, %435, %436, %437, meta[relay.Constant][25] /* ty=Tensor[(90), float32] */)
}

def @func_2965(%var_2962: Tensor[(1, 18), float32], %var_2963: Tensor[(1, 624), uint16], %var_2964: Tensor[(3, 66), float64]) -> (Tensor[(5, 5), float64], Tensor[(15, 6, 3), uint32], Tensor[(1, 18), float32], Tensor[(1, 624), uint16], Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(3, 66), float64]) {
  %451 = fn (%var_2929: Tensor[(1, 18), float32], %var_2930: Tensor[(1, 624), uint16], %var_2959: Tensor[(3, 66), float64]) -> (Tensor[(5, 5), float64], Tensor[(15, 6, 3), uint32], Tensor[(1, 18), float32], Tensor[(1, 624), uint16], Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(3, 66), float64]) {
    %438 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
    %439 = cast(%var_2929, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
    %440 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(1, 624), uint16] */;
    %441 = reshape(%439, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), float32] */;
    %442 = reshape(%440, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint16] */;
    %443 = @func_656(%441, %442) /* ty=(Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
    %444 = cast(%var_2959, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
    %445 = reshape(%444, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
    %446 = @func_2318(%445) /* ty=(Tensor[(9, 11, 2), float64],) */;
    %447 = %438.0;
    %448 = %443.2;
    %449 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
    %450 = %446.0;
    (%447, %448, %var_2929, %var_2930, %449, %450, %var_2959)
  };
  %451(%var_2962, %var_2963, %var_2964) /* ty=(Tensor[(5, 5), float64], Tensor[(15, 6, 3), uint32], Tensor[(1, 18), float32], Tensor[(1, 624), uint16], Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(3, 66), float64]) */
}

def @func_2890() -> Tensor[(5, 5), float64] {
  @func_2888() /* ty=Tensor[(5, 5), float64] */
}

def @func_2264(%var_2259: Tensor[(12, 16, 1), float64], %var_2260: Tensor[(168), float64], %var_2261: Tensor[(224), float32], %var_2262: Tensor[(720), float32], %var_2263: Tensor[(2880), uint8]) -> (Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) {
  @func_2257(%var_2259, %var_2260, %var_2261, %var_2262, %var_2263) /* ty=(Tensor[(12, 16, 1), float64], Tensor[(240), uint16], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8]) */
}

def @func_5613(%var_5606: Tensor[(224), float32], %var_5607: Tensor[(720), float32]) -> (Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) {
  %452 = @func_4458() /* ty=(Tensor[(5, 5), float64],) */;
  %453 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 63), float64] */, dtype="float64") /* ty=Tensor[(1, 63), float64] */;
  %454 = cast(%var_5606, dtype="float32") /* ty=Tensor[(224), float32] */;
  %455 = cast(%var_5607, dtype="float32") /* ty=Tensor[(720), float32] */;
  %456 = reshape(%453, newshape=[9, 7]) /* ty=Tensor[(9, 7), float64] */;
  %457 = reshape(%454, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %458 = reshape(%455, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %459 = @func_2787(%456, %457, %458) /* ty=(Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) */;
  %460 = %452.0;
  %461 = %459.0;
  (%460, %461, meta[relay.Constant][26] /* ty=Tensor[(1, 63), float64] */, %var_5606, %var_5607)
}

def @func_2792(%var_2789: Tensor[(9, 7), float64], %var_2790: Tensor[(224), float32], %var_2791: Tensor[(720), float32]) -> (Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) {
  @func_2787(%var_2789, %var_2790, %var_2791) /* ty=(Tensor[(9, 7), float64], Tensor[(7, 3, 8), uint32], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(720), float32], Tensor[(2880), uint8], Tensor[(5, 5), float64], Tensor[(15, 12, 16), int8]) */
}

def @func_3983(%var_3978: Tensor[(4, 2, 10), float32], %var_3979: Tensor[(192), float64], %var_3980: Tensor[(168), float64], %var_3981: Tensor[(224), float32], %var_3982: Tensor[(720), float32]) -> (Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) {
  @func_3976(%var_3978, %var_3979, %var_3980, %var_3981, %var_3982) /* ty=(Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) */
}

def @func_4551() -> (Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(13, 12, 4), bool], Tensor[(4, 156), uint16], Tensor[(9, 11, 2), float64]) {
  @func_4549() /* ty=(Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(13, 12, 4), bool], Tensor[(4, 156), uint16], Tensor[(9, 11, 2), float64]) */
}

def @func_2355(%var_2354: uint64) -> (Tensor[(3, 15, 4), uint64],) {
  %465 = fn (%var_2343: uint64) -> (Tensor[(3, 15, 4), uint64],) {
    %462 = cast(%var_2343, dtype="uint64") /* ty=uint64 */;
    %463 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 15, 4), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
    %464 = left_shift(%462, %463) /* ty=Tensor[(3, 15, 4), uint64] */;
    (%464,)
  };
  %465(%var_2354) /* ty=(Tensor[(3, 15, 4), uint64],) */
}

def @func_4219(%var_4217: Tensor[(224), float32]) -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  @func_4216(%var_4217) /* ty=(Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) */
}

def @func_3445() -> Tensor[(5, 5), float64] {
  @func_2546() /* ty=Tensor[(5, 5), float64] */
}

def @func_2320(%var_2319: Tensor[(9, 11, 2), float64]) -> (Tensor[(9, 11, 2), float64],) {
  %468 = fn (%var_2311: Tensor[(9, 11, 2), float64]) -> (Tensor[(9, 11, 2), float64],) {
    %466 = cast(%var_2311, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
    %467 = acos(%466) /* ty=Tensor[(9, 11, 2), float64] */;
    (%467,)
  };
  %468(%var_2319) /* ty=(Tensor[(9, 11, 2), float64],) */
}

def @func_4587() -> (Tensor[(14, 10, 7), float32],) {
  %469 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %470 = cos(%469) /* ty=Tensor[(14, 10, 7), float32] */;
  %471 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 10, 7), float32] */, dtype="int16") /* ty=Tensor[(14, 10, 7), int16] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="int16") /* ty=Tensor[(14, 10, 7), int16] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %475 = right_shift(%473, %474) /* ty=Tensor[(14, 10, 7), int16] */;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %477 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %480 = maximum(%478, %479) /* ty=Tensor[(14, 10, 7), float32] */;
  (%480,)
}

def @func_928(%var_927: Tensor[(4, 8, 2), uint64]) -> (Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
  %491 = fn (%var_898: Tensor[(4, 8, 2), uint64]) -> (Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) {
    %481 = cast(%var_898, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
    %482 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 2), uint64] */, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %486 = cast(meta[relay.Constant][31] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %487 = reshape(%485, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
    %488 = reshape(%486, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
    %489 = not_equal(%483, %484) /* ty=Tensor[(4, 8, 2), bool] */;
    %490 = @func_58(%487, %488) /* ty=Tensor[(13, 12, 4), bool] */;
    (%489, %490, meta[relay.Constant][31] /* ty=Tensor[(624), uint16] */)
  };
  %491(%var_927) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(13, 12, 4), bool], Tensor[(624), uint16]) */
}

def @func_4424() -> (Tensor[(5, 5), float64],) {
  %492 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %493 = %492.0;
  (%493,)
}

def @func_5801(%var_5792: Tensor[(1056), float64], %var_5793: Tensor[(9, 11, 2), float32], %var_5794: Tensor[(4, 156), uint16], %var_5795: Tensor[(39), float64], %var_5796: Tensor[(192), float64], %var_5797: Tensor[(168), float64], %var_5798: Tensor[(2, 360), float32], %var_5799: Tensor[(2, 360), float32], %var_5800: Tensor[(4, 156), uint16]) -> (Tensor[(224), float32], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(9, 11, 2), uint16], Tensor[(13, 12, 4), bool], Tensor[(24, 26), uint8], Tensor[(18), float32], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(5, 5), float64], Tensor[(720), float32], Tensor[(80), float32], Tensor[(192), float64], Tensor[(168), float64], Tensor[(4, 15, 11), int64], Tensor[(660), int64], Tensor[(2, 360), bool], Tensor[(4, 156), bool], Tensor[(9, 11, 2), bool], Tensor[(5, 5), float64]) {
  @func_5790(%var_5792, %var_5793, %var_5794, %var_5795, %var_5796, %var_5797, %var_5798, %var_5799, %var_5800) /* ty=(Tensor[(224), float32], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(9, 11, 2), uint16], Tensor[(13, 12, 4), bool], Tensor[(24, 26), uint8], Tensor[(18), float32], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(5, 5), float64], Tensor[(720), float32], Tensor[(80), float32], Tensor[(192), float64], Tensor[(168), float64], Tensor[(4, 15, 11), int64], Tensor[(660), int64], Tensor[(2, 360), bool], Tensor[(4, 156), bool], Tensor[(9, 11, 2), bool], Tensor[(5, 5), float64]) */
}

def @func_3861(%var_3770: Tensor[(11, 6, 16), float64], %var_3771: Tensor[(11, 6, 16), float64], %var_3779: Tensor[(224), float32], %var_3813: Tensor[(11, 6, 16), float64]) -> (Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) {
  %494 = cast(%var_3771, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %495 = shape_of(%var_3770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_3770, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %498 = cast(%var_3770, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %499 = log2(%498) /* ty=Tensor[(11, 6, 16), float64] */;
  %500 = cast(%var_3813, dtype="int8") /* ty=Tensor[(11, 6, 16), int8] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="int8") /* ty=Tensor[(11, 6, 16), int8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %504 = cast(%var_3779, dtype="float32") /* ty=Tensor[(224), float32] */;
  %505 = cast(%var_3779, dtype="float32") /* ty=Tensor[(224), float32] */;
  %506 = reshape(%504, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %507 = reshape(%505, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %508 = @func_582(%506, %507) /* ty=Tensor[(7, 2, 16), int32] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %510 = cast(%499, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %511 = cos(%510) /* ty=Tensor[(11, 6, 16), float64] */;
  %512 = cast(%var_3770, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = subtract(%496, %497) /* ty=Tensor[(11, 6, 16), float64] */;
  %517 = bitwise_or(%502, %503) /* ty=Tensor[(11, 6, 16), int8] */;
  %518 = atan(%509) /* ty=Tensor[(7, 2, 16), float64] */;
  %519 = @func_2670() /* ty=Tensor[(5, 5), float64] */;
  %520 = @func_2859() /* ty=Tensor[(5, 5), float64] */;
  %521 = not_equal(%514, %515) /* ty=Tensor[(11, 6, 16), bool] */;
  (%516, %var_3779, %517, %518, %519, %520, %521)
}

def @func_1618(%var_1608: Tensor[(16, 14, 13), float32], %var_1614: Tensor[(16, 14, 13), float32]) -> Tensor[(16, 14, 13), float32] {
  %522 = cast(%var_1608, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %523 = exp(%522) /* ty=Tensor[(16, 14, 13), float32] */;
  %524 = cast(%var_1614, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%526, %527) /* ty=Tensor[(16, 14, 13), float32] */
}

def @func_5172() -> Tensor[(5, 5), float64] {
  @func_4807() /* ty=Tensor[(5, 5), float64] */
}

def @func_4514() -> Tensor[(5, 5), float64] {
  @func_3280() /* ty=Tensor[(5, 5), float64] */
}

def @func_5542() -> (Tensor[(9, 11, 2), float64],) {
  %528 = @func_3345() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */;
  %529 = %528.1;
  (%529,)
}

def @func_4185() -> (Tensor[(60), int16], Tensor[(5, 5), float64]) {
  @func_4183() /* ty=(Tensor[(60), int16], Tensor[(5, 5), float64]) */
}

def @func_2583() -> (Tensor[(5, 5), float64],) {
  @func_2581() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_660(%var_658: Tensor[(1, 6, 3), float32], %var_659: Tensor[(24, 26), uint16]) -> (Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  @func_656(%var_658, %var_659) /* ty=(Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) */
}

def @func_5138(%var_5136: Tensor[(4, 15, 11), int64]) -> Tensor[(4, 15, 11), int64] {
  @func_5135(%var_5136) /* ty=Tensor[(4, 15, 11), int64] */
}

def @func_4052() -> (Tensor[(60), int16], Tensor[(9, 11, 2), uint16]) {
  %530 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %531 = @func_3522() /* ty=Tensor[(9, 11, 2), float64] */;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
  %533 = sin(%532) /* ty=Tensor[(9, 11, 2), float64] */;
  %534 = cast(%533, dtype="uint16") /* ty=Tensor[(9, 11, 2), uint16] */;
  %535 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%531, dtype="uint16") /* ty=Tensor[(9, 11, 2), uint16] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %538 = %530.2;
  %539 = add(%536, %537) /* ty=Tensor[(9, 11, 2), uint16] */;
  (%538, %539)
}

def @func_3059(%var_3052: Tensor[(5, 12, 12), uint16], %var_3053: Tensor[(5, 12, 12), uint16], %var_3054: Tensor[(168), float64], %var_3055: Tensor[(1, 224), float32], %var_3056: Tensor[(240), uint16], %var_3057: Tensor[(14, 224), float32], %var_3058: Tensor[(14, 224), float32]) -> (Tensor[(5, 12, 12), uint16], Tensor[(168), float64], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(14, 224), uint64], Tensor[(14, 224), bool], Tensor[(8, 28), int64]) {
  %575 = fn (%var_3008: Tensor[(5, 12, 12), uint16], %var_3009: Tensor[(5, 12, 12), uint16], %var_3023: Tensor[(168), float64], %var_3024: Tensor[(1, 224), float32], %var_3025: Tensor[(240), uint16], %var_3035: Tensor[(14, 224), float32], %var_3039: Tensor[(14, 224), float32]) -> (Tensor[(5, 12, 12), uint16], Tensor[(168), float64], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(14, 224), uint64], Tensor[(14, 224), bool], Tensor[(8, 28), int64]) {
    %540 = cast(%var_3009, dtype="uint16") /* ty=Tensor[(5, 12, 12), uint16] */;
    %541 = shape_of(%var_3008, dtype="int32") /* ty=Tensor[(3), int32] */;
    %542 = cast(%var_3008, dtype="uint16") /* ty=Tensor[(5, 12, 12), uint16] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %544 = cast(meta[relay.Constant][33] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %546 = reshape(%544, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
    %547 = reshape(%545, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
    %548 = cast(%var_3024, dtype="uint64") /* ty=Tensor[(1, 224), uint64] */;
    %549 = cast(%var_3035, dtype="uint64") /* ty=Tensor[(14, 224), uint64] */;
    %550 = cast(%var_3039, dtype="bool") /* ty=Tensor[(14, 224), bool] */;
    %551 = shape_of(%var_3035, dtype="int32") /* ty=Tensor[(2), int32] */;
    %552 = cast(%var_3035, dtype="bool") /* ty=Tensor[(14, 224), bool] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %554 = cast(%var_3023, dtype="float64") /* ty=Tensor[(168), float64] */;
    %555 = cast(%var_3024, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
    %556 = cast(%var_3025, dtype="uint16") /* ty=Tensor[(240), uint16] */;
    %557 = minimum(%542, %543) /* ty=Tensor[(5, 12, 12), uint16] */;
    %558 = cast(%557, dtype="float32") /* ty=Tensor[(5, 12, 12), float32] */;
    %559 = cast(meta[relay.Constant][32] /* ty=Tensor[(2880), uint8] */, dtype="uint8") /* ty=Tensor[(2880), uint8] */;
    %560 = reshape(%554, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), float64] */;
    %561 = reshape(%555, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
    %562 = reshape(%556, newshape=[240]) /* ty=Tensor[(240), uint16] */;
    %563 = reshape(%558, newshape=[60, 12]) /* ty=Tensor[(60, 12), float32] */;
    %564 = reshape(%559, newshape=[96, 30]) /* ty=Tensor[(96, 30), uint8] */;
    %565 = @func_1953(%560, %561, %562, %563, %564) /* ty=(Tensor[(7, 3, 8), float64], Tensor[(7, 2, 16), int32], Tensor[(8, 28), float32], Tensor[(7, 3, 8), uint32], Tensor[(4, 4, 15), uint16], Tensor[(240), uint16], Tensor[(15, 12, 16), int8], Tensor[(60, 12), float32], Tensor[(96, 30), uint8]) */;
    %566 = %565.2;
    %567 = cast(%var_3024, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
    %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
    %569 = cast(%566, dtype="int64") /* ty=Tensor[(8, 28), int64] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %571 = @func_1618(%546, %547) /* ty=Tensor[(16, 14, 13), float32] */;
    %572 = bitwise_or(%548, %549) /* ty=Tensor[(14, 224), uint64] */;
    %573 = not_equal(%552, %553) /* ty=Tensor[(14, 224), bool] */;
    %574 = left_shift(%569, %570) /* ty=Tensor[(8, 28), int64] */;
    (%557, %var_3023, %var_3025, meta[relay.Constant][32] /* ty=Tensor[(2880), uint8] */, %571, meta[relay.Constant][33] /* ty=Tensor[(2912), float32] */, %572, %573, %574)
  };
  %575(%var_3052, %var_3053, %var_3054, %var_3055, %var_3056, %var_3057, %var_3058) /* ty=(Tensor[(5, 12, 12), uint16], Tensor[(168), float64], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(16, 14, 13), float32], Tensor[(2912), float32], Tensor[(14, 224), uint64], Tensor[(14, 224), bool], Tensor[(8, 28), int64]) */
}

def @func_5174() -> Tensor[(5, 5), float64] {
  @func_5172() /* ty=Tensor[(5, 5), float64] */
}

def @func_4695() -> (Tensor[(5, 5), float64],) {
  %576 = @func_2985() /* ty=(Tensor[(5, 5), float64],) */;
  %577 = %576.0;
  (%577,)
}

def @func_1140(%var_1138: uint16, %var_1139: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 1, 14), uint16],) {
  %581 = fn (%var_1132: uint16, %var_1133: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 1, 14), uint16],) {
    %578 = cast(%var_1132, dtype="uint16") /* ty=uint16 */;
    %579 = cast(%var_1133, dtype="uint16") /* ty=Tensor[(15, 1, 14), uint16] */;
    %580 = subtract(%578, %579) /* ty=Tensor[(15, 1, 14), uint16] */;
    (%580,)
  };
  %581(%var_1138, %var_1139) /* ty=(Tensor[(15, 1, 14), uint16],) */
}

def @func_2671() -> Tensor[(5, 5), float64] {
  %582 = fn () -> Tensor[(5, 5), float64] {
    @func_2480() /* ty=Tensor[(5, 5), float64] */
  };
  %582() /* ty=Tensor[(5, 5), float64] */
}

def @func_4589() -> (Tensor[(14, 10, 7), float32],) {
  @func_4587() /* ty=(Tensor[(14, 10, 7), float32],) */
}

def @func_958(%var_956: Tensor[(10, 9), float32]) -> Tensor[(10, 9), float32] {
  @func_955(%var_956) /* ty=Tensor[(10, 9), float32] */
}

def @func_6025(%var_6024: Tensor[(5, 8, 16), int16]) -> (Tensor[(5, 8, 16), int16], Tensor[(5, 8, 16), uint16]) {
  %593 = fn (%var_6017: Tensor[(5, 8, 16), int16]) -> (Tensor[(5, 8, 16), int16], Tensor[(5, 8, 16), uint16]) {
    %583 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 16), int16] */;
    %584 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 16), int16] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %587 = cast(%var_6017, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
    %588 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 8, 16), int16] */, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %591 = bitwise_or(%585, %586) /* ty=Tensor[(5, 8, 16), int16] */;
    %592 = add(%589, %590) /* ty=Tensor[(5, 8, 16), uint16] */;
    (%591, %592)
  };
  %593(%var_6024) /* ty=(Tensor[(5, 8, 16), int16], Tensor[(5, 8, 16), uint16]) */
}

def @func_5839(%var_5838: Tensor[(5, 9, 11), float32]) -> Tensor[(5, 9, 11), float32] {
  %595 = fn (%var_5834: Tensor[(5, 9, 11), float32]) -> Tensor[(5, 9, 11), float32] {
    %594 = cast(%var_5834, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
    erf(%594) /* ty=Tensor[(5, 9, 11), float32] */
  };
  %595(%var_5838) /* ty=Tensor[(5, 9, 11), float32] */
}

def @func_4128() -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  %596 = @func_2674() /* ty=(Tensor[(5, 5), float64],) */;
  %597 = cast(meta[relay.Constant][36] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %598 = cast(meta[relay.Constant][36] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %599 = reshape(%597, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %600 = reshape(%598, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), float32] */;
  %601 = %596.0;
  %602 = @func_582(%599, %600) /* ty=Tensor[(7, 2, 16), int32] */;
  (%601, %602, meta[relay.Constant][36] /* ty=Tensor[(224), float32] */)
}

def @func_4130() -> (Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) {
  @func_4128() /* ty=(Tensor[(5, 5), float64], Tensor[(7, 2, 16), int32], Tensor[(224), float32]) */
}

def @func_5790(%var_5698: Tensor[(1056), float64], %var_5711: Tensor[(9, 11, 2), float32], %var_5723: Tensor[(4, 156), uint16], %var_5736: Tensor[(39), float64], %var_5759: Tensor[(192), float64], %var_5760: Tensor[(168), float64], %var_5761: Tensor[(2, 360), float32], %var_5769: Tensor[(2, 360), float32], %var_5774: Tensor[(4, 156), uint16]) -> (Tensor[(224), float32], Tensor[(1056), float64], Tensor[(224), float32], Tensor[(9, 11, 2), uint16], Tensor[(13, 12, 4), bool], Tensor[(24, 26), uint8], Tensor[(18), float32], Tensor[(13, 3, 2), float64], Tensor[(39), float64], Tensor[(5, 5), float64], Tensor[(720), float32], Tensor[(80), float32], Tensor[(192), float64], Tensor[(168), float64], Tensor[(4, 15, 11), int64], Tensor[(660), int64], Tensor[(2, 360), bool], Tensor[(4, 156), bool], Tensor[(9, 11, 2), bool], Tensor[(5, 5), float64]) {
  %603 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %604 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %606 = cast(%var_5698, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %607 = reshape(%603, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %608 = reshape(%604, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %609 = reshape(%605, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %610 = reshape(%606, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float64] */;
  %611 = @func_3861(%607, %608, %609, %610) /* ty=(Tensor[(11, 6, 16), float64], Tensor[(224), float32], Tensor[(11, 6, 16), int8], Tensor[(7, 2, 16), float64], Tensor[(5, 5), float64], Tensor[(5, 5), float64], Tensor[(11, 6, 16), bool]) */;
  %612 = @func_5314() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %613 = cast(%var_5723, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %614 = cast(%var_5723, dtype="uint16") /* ty=Tensor[(4, 156), uint16] */;
  %615 = reshape(%613, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %616 = reshape(%614, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %617 = cast(meta[relay.Constant][38] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %618 = @func_58(%615, %616) /* ty=Tensor[(13, 12, 4), bool] */;
  %619 = cast(%618, dtype="uint16") /* ty=Tensor[(13, 12, 4), uint16] */;
  %620 = reshape(%617, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), float32] */;
  %621 = reshape(%619, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint16] */;
  %622 = @func_656(%620, %621) /* ty=(Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
  %623 = cast(%var_5736, dtype="float64") /* ty=Tensor[(39), float64] */;
  %624 = reshape(%623, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %625 = @func_4278(%624) /* ty=(Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) */;
  %626 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %627 = cast(meta[relay.Constant][39] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %628 = cast(%var_5759, dtype="float64") /* ty=Tensor[(192), float64] */;
  %629 = cast(%var_5760, dtype="float64") /* ty=Tensor[(168), float64] */;
  %630 = %611.1;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(224), float32] */;
  %632 = cast(%var_5761, dtype="float32") /* ty=Tensor[(2, 360), float32] */;
  %633 = reshape(%627, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %634 = reshape(%628, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %635 = reshape(%629, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %636 = reshape(%631, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %637 = reshape(%632, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %638 = @func_3976(%633, %634, %635, %636, %637) /* ty=(Tensor[(4, 2, 10), float32], Tensor[(168), float64], Tensor[(192), float64], Tensor[(168), float64], Tensor[(224), float32], Tensor[(720), float32], Tensor[(2880), uint8]) */;
  %639 = cast(meta[relay.Constant][40] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
  %640 = reshape(%639, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), int64] */;
  %641 = cast(%var_5769, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
  %642 = shape_of(%var_5761, dtype="int32") /* ty=Tensor[(2), int32] */;
  %643 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %645 = cast(%var_5774, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %646 = shape_of(%var_5723, dtype="int32") /* ty=Tensor[(2), int32] */;
  %647 = cast(%var_5723, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %649 = @func_5314() /* ty=(Tensor[(9, 11, 2), uint16],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
  %652 = exp(%651) /* ty=Tensor[(9, 11, 2), float32] */;
  %653 = cast(%var_5711, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %657 = less_equal(%655, %656) /* ty=Tensor[(9, 11, 2), bool] */;
  %658 = cast(%var_5711, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = %612.0;
  %663 = %622.0;
  %664 = %625.1;
  %665 = %626.0;
  %666 = %638.5;
  %667 = @func_5135(%640) /* ty=Tensor[(4, 15, 11), int64] */;
  %668 = greater_equal(%643, %644) /* ty=Tensor[(2, 360), bool] */;
  %669 = less(%647, %648) /* ty=Tensor[(4, 156), bool] */;
  %670 = greater_equal(%660, %661) /* ty=Tensor[(9, 11, 2), bool] */;
  %671 = @func_3629() /* ty=Tensor[(5, 5), float64] */;
  (%630, %var_5698, meta[relay.Constant][37] /* ty=Tensor[(224), float32] */, %662, %618, %663, meta[relay.Constant][38] /* ty=Tensor[(18), float32] */, %664, %var_5736, %665, %666, meta[relay.Constant][39] /* ty=Tensor[(80), float32] */, %var_5759, %var_5760, %667, meta[relay.Constant][40] /* ty=Tensor[(660), int64] */, %668, %669, %670, %671)
}

def @func_3390() -> (Tensor[(5, 5), float64],) {
  %674 = fn () -> (Tensor[(5, 5), float64],) {
    %672 = @func_2581() /* ty=(Tensor[(5, 5), float64],) */;
    %673 = %672.0;
    (%673,)
  };
  %674() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_656(%var_596: Tensor[(1, 6, 3), float32], %var_600: Tensor[(24, 26), uint16]) -> (Tensor[(24, 26), uint8], Tensor[(13, 12, 4), bool], Tensor[(15, 6, 3), uint32], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  %675 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %676 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %677 = reshape(%675, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %678 = reshape(%676, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %679 = @func_58(%677, %678) /* ty=Tensor[(13, 12, 4), bool] */;
  %680 = cast(%679, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
  %681 = shape_of(%var_600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %682 = cast(%var_600, dtype="uint8") /* ty=Tensor[(24, 26), uint8] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %684 = cast(%var_600, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %685 = multiply(%682, %683) /* ty=Tensor[(24, 26), uint8] */;
  %686 = cast(%685, dtype="uint16") /* ty=Tensor[(24, 26), uint16] */;
  %687 = reshape(%684, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %688 = reshape(%686, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), uint16] */;
  %689 = cast(%var_596, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %690 = sin(%689) /* ty=Tensor[(1, 6, 3), float32] */;
  %691 = cast(%var_596, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %695 = logical_xor(%693, %694) /* ty=Tensor[(?, 6, 3), int16] */;
  %696 = cast(%690, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="int8") /* ty=Tensor[(?, 6, 3), int8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %700 = bitwise_xor(%698, %699) /* ty=Tensor[(?, 6, 3), int8] */;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(?, 6, 3), float64] */;
  %702 = sigmoid(%701) /* ty=Tensor[(?, 6, 3), float64] */;
  %703 = cast(%700, dtype="uint16") /* ty=Tensor[(?, 6, 3), uint16] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="uint16") /* ty=Tensor[(?, 6, 3), uint16] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %707 = multiply(%705, %706) /* ty=Tensor[(?, 6, 3), uint16] */;
  %708 = cast(%707, dtype="uint32") /* ty=Tensor[(?, 6, 3), uint32] */;
  %709 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 6, 3), uint16] */, dtype="uint32") /* ty=Tensor[(15, 6, 3), uint32] */;
  %710 = cast(meta[relay.Constant][42] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %711 = reshape(%710, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
  %712 = @func_58(%687, %688) /* ty=Tensor[(13, 12, 4), bool] */;
  %713 = bitwise_and(%708, %709) /* ty=Tensor[(15, 6, 3), uint32] */;
  %714 = @func_37(%711) /* ty=Tensor[(6, 10), bool] */;
  (%685, %712, %713, %714, meta[relay.Constant][42] /* ty=Tensor[(60), int16] */)
}

def @func_3186(%var_3184: Tensor[(13, 5, 16), float64]) -> Tensor[(13, 5, 16), float64] {
  @func_3183(%var_3184) /* ty=Tensor[(13, 5, 16), float64] */
}

def @func_3346() -> (Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %720 = fn () -> (Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
    %715 = cast(meta[relay.Constant][43] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %716 = reshape(%715, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
    %717 = @func_2318(%716) /* ty=(Tensor[(9, 11, 2), float64],) */;
    %718 = @func_2480() /* ty=Tensor[(5, 5), float64] */;
    %719 = %717.0;
    (%718, %719, meta[relay.Constant][43] /* ty=Tensor[(198), float64] */)
  };
  %720() /* ty=(Tensor[(5, 5), float64], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */
}

def @func_4697() -> (Tensor[(5, 5), float64],) {
  @func_4695() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_4280(%var_4279: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) {
  %736 = fn (%var_4240: Tensor[(39), float64]) -> (Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) {
    %721 = @func_2743() /* ty=(Tensor[(5, 5), float64],) */;
    %722 = cast(meta[relay.Constant][44] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
    %723 = reshape(%722, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float64] */;
    %724 = cast(%var_4240, dtype="int8") /* ty=Tensor[(39), int8] */;
    %725 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(39), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %726 = cast(meta[relay.Constant][44] /* ty=Tensor[(39), float64] */, dtype="int8") /* ty=Tensor[(39), int8] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?), int8] */;
    %728 = cast(%var_4240, dtype="int64") /* ty=Tensor[(39), int64] */;
    %729 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(39), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %730 = cast(meta[relay.Constant][44] /* ty=Tensor[(39), float64] */, dtype="int64") /* ty=Tensor[(39), int64] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?), int64] */;
    %732 = %721.0;
    %733 = @func_2180(%723) /* ty=Tensor[(13, 3, 2), float64] */;
    %734 = bitwise_xor(%726, %727) /* ty=Tensor[(39), int8] */;
    %735 = bitwise_or(%730, %731) /* ty=Tensor[(39), int64] */;
    (%732, %733, %734, %735)
  };
  %736(%var_4279) /* ty=(Tensor[(5, 5), float64], Tensor[(13, 3, 2), float64], Tensor[(39), int8], Tensor[(39), int64]) */
}

def @func_5664(%var_5662: Tensor[(1, 720), float32], %var_5663: Tensor[(324, 1), float32]) -> (Tensor[(60), int16], Tensor[(720), float32], Tensor[(1, 224), float32], Tensor[(1, 720), float32], Tensor[(3, 12, 9), float32], Tensor[(324, 1), float32]) {
  %750 = fn (%var_5640: Tensor[(1, 720), float32], %var_5656: Tensor[(324, 1), float32]) -> (Tensor[(60), int16], Tensor[(720), float32], Tensor[(1, 224), float32], Tensor[(1, 720), float32], Tensor[(3, 12, 9), float32], Tensor[(324, 1), float32]) {
    %737 = @func_4183() /* ty=(Tensor[(60), int16], Tensor[(5, 5), float64]) */;
    %738 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
    %739 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %740 = reshape(%738, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %741 = reshape(%739, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %742 = @func_5613(%740, %741) /* ty=(Tensor[(5, 5), float64], Tensor[(9, 7), float64], Tensor[(1, 63), float64], Tensor[(224), float32], Tensor[(720), float32]) */;
    %743 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %744 = cast(%var_5656, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %745 = reshape(%744, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), float32] */;
    %746 = %737.0;
    %747 = %742.4;
    %748 = acos(%743) /* ty=Tensor[(1, 720), float32] */;
    %749 = @func_3301(%745) /* ty=Tensor[(3, 12, 9), float32] */;
    (%746, %747, meta[relay.Constant][45] /* ty=Tensor[(1, 224), float32] */, %748, %749, %var_5656)
  };
  %750(%var_5662, %var_5663) /* ty=(Tensor[(60), int16], Tensor[(720), float32], Tensor[(1, 224), float32], Tensor[(1, 720), float32], Tensor[(3, 12, 9), float32], Tensor[(324, 1), float32]) */
}

def @func_4426() -> (Tensor[(5, 5), float64],) {
  @func_4424() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_4808() -> Tensor[(5, 5), float64] {
  %751 = fn () -> Tensor[(5, 5), float64] {
    @func_4514() /* ty=Tensor[(5, 5), float64] */
  };
  %751() /* ty=Tensor[(5, 5), float64] */
}

def @func_4994() -> (Tensor[(5, 5), float64],) {
  @func_4992() /* ty=(Tensor[(5, 5), float64],) */
}

def @func_2001(%var_2000: Tensor[(15, 9, 13), uint8]) -> Tensor[(15, 9, 13), bool] {
  %754 = fn (%var_1994: Tensor[(15, 9, 13), uint8]) -> Tensor[(15, 9, 13), bool] {
    %752 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="bool") /* ty=bool */;
    %753 = cast(%var_1994, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
    greater(%752, %753) /* ty=Tensor[(15, 9, 13), bool] */
  };
  %754(%var_2000) /* ty=Tensor[(15, 9, 13), bool] */
}

def @main(%var_6044: Tensor[(11, 2, 13), int16], %var_6045: Tensor[(11, 2, 13), int16]) -> Tensor[(11, 2, 13), bool] {
  %755 = cast(%var_6045, dtype="bool") /* ty=Tensor[(11, 2, 13), bool] */;
  %756 = shape_of(%var_6044, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_6044, dtype="bool") /* ty=Tensor[(11, 2, 13), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%757, %758) /* ty=Tensor[(11, 2, 13), bool] */
}

def @func_1478(%var_1474: Tensor[(9, 5, 16), float32], %var_1475: Tensor[(224), float32], %var_1476: Tensor[(2880), uint8], %var_1477: Tensor[(240), uint16]) -> (Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) {
  @func_1472(%var_1474, %var_1475, %var_1476, %var_1477) /* ty=(Tensor[(7, 2, 16), int32], Tensor[(15, 12, 16), int8], Tensor[(7, 2, 16), bool], Tensor[(2880), uint16], Tensor[(624), uint16], Tensor[(240), uint16], Tensor[(9, 5, 16), bool], Tensor[(13, 12, 4), bool], Tensor[(10, 9), float32], Tensor[(90), float32]) */
}

def @func_3485() -> (Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) {
  %759 = @func_3078() /* ty=(Tensor[(5, 5), float64],) */;
  %760 = %759.0;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(5, 5), float64] */;
  %762 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %763 = reshape(%762, newshape=[6, 10]) /* ty=Tensor[(6, 10), int16] */;
  %764 = atanh(%761) /* ty=Tensor[(5, 5), float64] */;
  %765 = @func_37(%763) /* ty=Tensor[(6, 10), bool] */;
  (%764, %765, meta[relay.Constant][47] /* ty=Tensor[(60), int16] */)
}

def @func_2581() -> (Tensor[(5, 5), float64],) {
  %766 = @func_2546() /* ty=Tensor[(5, 5), float64] */;
  (%766,)
}

def @func_3881() -> (Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
  %773 = fn () -> (Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) {
    %767 = @func_3485() /* ty=(Tensor[(5, 5), float64], Tensor[(6, 10), bool], Tensor[(60), int16]) */;
    %768 = cast(meta[relay.Constant][48] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %769 = reshape(%768, newshape=[9, 11, 2]) /* ty=Tensor[(9, 11, 2), float64] */;
    %770 = @func_2318(%769) /* ty=(Tensor[(9, 11, 2), float64],) */;
    %771 = %767.2;
    %772 = %770.0;
    (%771, %772, meta[relay.Constant][48] /* ty=Tensor[(198), float64] */)
  };
  %773() /* ty=(Tensor[(60), int16], Tensor[(9, 11, 2), float64], Tensor[(198), float64]) */
}

def @func_2400(%var_2398: Tensor[(11, 4, 1), float64]) -> (Tensor[(11, 4, 1), float64],) {
  @func_2397(%var_2398) /* ty=(Tensor[(11, 4, 1), float64],) */
}

def @func_3281() -> Tensor[(5, 5), float64] {
  %774 = fn () -> Tensor[(5, 5), float64] {
    @func_2670() /* ty=Tensor[(5, 5), float64] */
  };
  %774() /* ty=Tensor[(5, 5), float64] */
}

def @func_5544() -> (Tensor[(9, 11, 2), float64],) {
  @func_5542() /* ty=(Tensor[(9, 11, 2), float64],) */
}

def @func_2095(%var_2087: Tensor[(3, 9, 16), int16], %var_2088: Tensor[(3, 9, 16), int16], %var_2089: Tensor[(224), float32], %var_2090: Tensor[(240), uint16], %var_2091: Tensor[(12, 60), float32], %var_2092: Tensor[(2880), uint8], %var_2093: Tensor[(12, 60), float32], %var_2094: Tensor[(8, 8), uint64]) -> (Tensor[(3, 9, 16), int16], Tensor[(3, 9, 16), float32], Tensor[(15, 12, 16), int8], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(12, 60), uint64], Tensor[(13, 12, 4), bool], Tensor[(8, 8), uint64]) {
  @func_2085(%var_2087, %var_2088, %var_2089, %var_2090, %var_2091, %var_2092, %var_2093, %var_2094) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(3, 9, 16), float32], Tensor[(15, 12, 16), int8], Tensor[(168), float64], Tensor[(224), float32], Tensor[(240), uint16], Tensor[(2880), uint8], Tensor[(12, 60), uint64], Tensor[(13, 12, 4), bool], Tensor[(8, 8), uint64]) */
}

def @func_5315() -> (Tensor[(9, 11, 2), uint16],) {
  %777 = fn () -> (Tensor[(9, 11, 2), uint16],) {
    %775 = @func_4471() /* ty=(Tensor[(9, 11, 2), uint16],) */;
    %776 = %775.0;
    (%776,)
  };
  %777() /* ty=(Tensor[(9, 11, 2), uint16],) */
}

def @func_2888() -> Tensor[(5, 5), float64] {
  @func_2480() /* ty=Tensor[(5, 5), float64] */
}

def @func_4516() -> Tensor[(5, 5), float64] {
  @func_4514() /* ty=Tensor[(5, 5), float64] */
}

def @func_4924(%var_4923: Tensor[(14, 10, 7), float64]) -> (Tensor[(14, 10, 7), bool], Tensor[(14, 10, 7), float32]) {
  %794 = fn (%var_4894: Tensor[(14, 10, 7), float64]) -> (Tensor[(14, 10, 7), bool], Tensor[(14, 10, 7), float32]) {
    %778 = @func_4587() /* ty=(Tensor[(14, 10, 7), float32],) */;
    %779 = %778.0;
    %780 = cast(%779, dtype="float64") /* ty=Tensor[(14, 10, 7), float64] */;
    %781 = asinh(%780) /* ty=Tensor[(14, 10, 7), float64] */;
    %782 = cast(%779, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
    %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%781, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %786 = cast(%var_4894, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
    %787 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %788 = cast(%781, dtype="bool") /* ty=Tensor[(14, 10, 7), bool] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %790 = logical_or(%788, %789) /* ty=Tensor[(14, 10, 7), bool] */;
    %791 = cast(%790, dtype="float32") /* ty=Tensor[(14, 10, 7), float32] */;
    %792 = less(%784, %785) /* ty=Tensor[(14, 10, 7), bool] */;
    %793 = cosh(%791) /* ty=Tensor[(14, 10, 7), float32] */;
    (%792, %793)
  };
  %794(%var_4923) /* ty=(Tensor[(14, 10, 7), bool], Tensor[(14, 10, 7), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen14/build/output.py:1822: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen14/build/output.py", line 1827, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(286) tvmgen_default_fused_cast_cast_reshape_not_equal_kernel0(signed char* __restrict__ T_not_equal, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

