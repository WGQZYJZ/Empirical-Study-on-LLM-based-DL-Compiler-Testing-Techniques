==========mod==========
#[version = "0.0.5"]
def @func_6580() -> Tensor[(1716), float64] {
  %0 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %0.0
}

def @func_7366(%var_7355: Tensor[(1, 90), float32]) -> (Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %2 = cast(%var_7355, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %3 = reshape(%2, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), float32] */;
  %4 = @func_5099(%3) /* ty=(Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) */;
  %5 = cast(%var_7355, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %6 = rsqrt(%1) /* ty=Tensor[(7, 7, 2), float64] */;
  %7 = %4.1;
  %8 = asin(%5) /* ty=Tensor[(1, 90), float64] */;
  (%6, %7, %8)
}

def @func_9130() -> Tensor[(1716), uint16] {
  %9 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %9.1
}

def @func_3085(%var_3038: Tensor[(3, 6, 12), float32], %var_3055: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), int32], Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  %10 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %11 = %10.1;
  %12 = cast(%var_3038, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %16 = cast(%var_3055, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %17 = reshape(%16, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %18 = @func_2760(%17) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %19 = cast(%11, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %20 = add(%14, %15) /* ty=Tensor[(3, 6, 12), int32] */;
  %21 = %18.1;
  %22 = rsqrt(%19) /* ty=Tensor[(3, 6, 12), float32] */;
  (%20, %21, %var_3055, %22)
}

def @func_3383() -> Tensor[(3, 6, 12), float32] {
  %23 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %23.1
}

def @func_4493(%var_4457: Tensor[(3, 14, 11), float64], %var_4458: Tensor[(3, 14, 11), float64], %var_4478: Tensor[(1800), uint32], %var_4484: Tensor[(216), float32], %var_4485: Tensor[(1, 2240), uint8], %var_4486: Tensor[(672), int8]) -> (Tensor[(3, 14, 11), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32], Tensor[(8, 84), int8], Tensor[(312, 1), float32], Tensor[(216), float32], Tensor[(1, 2240), uint8], Tensor[(672), int8]) {
  %24 = cast(%var_4458, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
  %25 = shape_of(%var_4457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_4457, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %28 = cast(%var_4478, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %29 = reshape(%28, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %30 = @func_2569(%29) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(312, 1), float32] */, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
  %32 = cast(%var_4484, dtype="float32") /* ty=Tensor[(216), float32] */;
  %33 = cast(%var_4485, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
  %34 = cast(%var_4486, dtype="int8") /* ty=Tensor[(672), int8] */;
  %35 = reshape(%31, newshape=[2, 13, 12]) /* ty=Tensor[(2, 13, 12), float32] */;
  %36 = reshape(%32, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %37 = reshape(%33, newshape=[280, 8]) /* ty=Tensor[(280, 8), uint8] */;
  %38 = reshape(%34, newshape=[8, 84]) /* ty=Tensor[(8, 84), int8] */;
  %39 = @func_1455(%35, %36, %37, %38) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) */;
  %40 = floor_mod(%26, %27) /* ty=Tensor[(3, 14, 11), float64] */;
  %41 = %30.1;
  %42 = %39.7;
  (%40, %41, %var_4478, %42, meta[relay.Constant][1] /* ty=Tensor[(312, 1), float32] */, %var_4484, %var_4485, %var_4486)
}

def @func_5099(%var_5084: Tensor[(6, 15, 1), float32]) -> (Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) {
  %43 = cast(%var_5084, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %44 = rsqrt(%43) /* ty=Tensor[(6, 15, 1), float32] */;
  %45 = cast(%var_5084, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %49 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %50 = bitwise_and(%47, %48) /* ty=Tensor[(6, 15, ?), int8] */;
  %51 = %49.0;
  (%50, %51)
}

def @func_5228() -> Tensor[(1716), float64] {
  %52 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %52.1
}

def @func_2909(%var_2901: Tensor[(9, 6, 14), uint64], %var_2902: Tensor[(9, 6, 14), uint64], %var_2907: Tensor[(672), int8]) -> (Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) {
  %53 = cast(%var_2902, dtype="uint64") /* ty=Tensor[(9, 6, 14), uint64] */;
  %54 = shape_of(%var_2901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_2901, dtype="uint64") /* ty=Tensor[(9, 6, 14), uint64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %57 = cast(%var_2907, dtype="int8") /* ty=Tensor[(672), int8] */;
  %58 = reshape(%57, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %59 = @func_828(%58) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %60 = add(%55, %56) /* ty=Tensor[(9, 6, 14), uint64] */;
  %61 = %59.4;
  (%60, %61, %var_2907)
}

def @func_3879() -> Tensor[(3, 6, 12), float32] {
  %62 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %63 = %62.1;
  %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%66, %67) /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_8792() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %68 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %69 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  %70 = @func_5228() /* ty=Tensor[(1716), float64] */;
  %71 = %68.0;
  (%69, %70, %71)
}

def @func_650(%var_590: Tensor[(2, 10, 15), float32], %var_606: Tensor[(216), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) {
  %72 = cast(%var_606, dtype="float32") /* ty=Tensor[(216), float32] */;
  %73 = reshape(%72, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %74 = cast(%var_606, dtype="float32") /* ty=Tensor[(216), float32] */;
  %75 = reshape(%74, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %76 = @func_179(%73) /* ty=Tensor[(3, 6, 12), float32] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %78 = reshape(%77, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %79 = cast(%var_590, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %80 = acosh(%79) /* ty=Tensor[(2, 10, 15), float32] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %82 = sigmoid(%81) /* ty=Tensor[(2, 10, 15), float32] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(2, 10, 15), float64] */;
  %84 = atanh(%83) /* ty=Tensor[(2, 10, 15), float64] */;
  %85 = cast(%84, dtype="bool") /* ty=Tensor[(2, 10, 15), bool] */;
  %86 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%80, dtype="bool") /* ty=Tensor[(2, 10, 15), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = @func_179(%75) /* ty=Tensor[(3, 6, 12), float32] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %91 = reshape(%90, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %92 = @func_179(%78) /* ty=Tensor[(3, 6, 12), float32] */;
  %93 = not_equal(%87, %88) /* ty=Tensor[(2, 10, 15), bool] */;
  %94 = @func_179(%91) /* ty=Tensor[(3, 6, 12), float32] */;
  (%76, %var_606, %89, %92, %93, %94)
}

def @func_2940() -> (Tensor[(1716), int8], Tensor[(1716), float64]) {
  %95 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %96 = %95.0;
  %97 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %100 = shape_of(%96, dtype="int32") /* ty=Tensor[(1), int32] */;
  %101 = cast(%96, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?), int8] */;
  %103 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %104 = bitwise_xor(%101, %102) /* ty=Tensor[(1716), int8] */;
  %105 = %103.0;
  (%104, %105)
}

def @func_2075() -> Tensor[(1716), float64] {
  %106 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %106.0
}

def @func_4429() -> (Tensor[(3, 6, 12), float32],) {
  %107 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
  (%107,)
}

def @func_9371() -> (Tensor[(1716), uint64], Tensor[(3, 6, 12), float32]) {
  %108 = @func_6520() /* ty=Tensor[(1716), uint64] */;
  %109 = cast(%108, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %110 = reshape(%109, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %111 = @func_1905(%110) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
  %112 = %111.1;
  (%108, %112)
}

def @func_9194(%var_9175: Tensor[(1716), float64], %var_9176: Tensor[(1800, 1), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1800, 216), float32]) {
  %113 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %114 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %115 = cast(%var_9175, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %116 = cast(%var_9176, dtype="uint32") /* ty=Tensor[(1800, 1), uint32] */;
  %117 = reshape(%115, newshape=[1716]) /* ty=Tensor[(1716), float64] */;
  %118 = reshape(%116, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %119 = @func_6727(%117, %118) /* ty=(Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) */;
  %120 = %119.4;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(216), float32] */;
  %122 = cast(%var_9176, dtype="float32") /* ty=Tensor[(1800, 1), float32] */;
  %123 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %124 = %113.0;
  %125 = %114.0;
  %126 = minimum(%121, %122) /* ty=Tensor[(1800, 216), float32] */;
  (%123, %124, %125, %var_9175, %126)
}

def @func_8748() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %127 = cast(meta[relay.Constant][3] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %128 = reshape(%127, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %129 = @func_2760(%128) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %130 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %131 = %129.0;
  %132 = @func_7859() /* ty=Tensor[(1716), float32] */;
  %133 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  (%130, %131, meta[relay.Constant][3] /* ty=Tensor[(1800), uint32] */, %132, %133)
}

def @func_7003() -> (Tensor[(1716), float32],) {
  %134 = @func_6375() /* ty=(Tensor[(1716), float64],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %137 = cos(%136) /* ty=Tensor[(1716), float32] */;
  (%137,)
}

def @func_7616(%var_7573: Tensor[(11, 156), float32], %var_7595: Tensor[(1716), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(11, 156), int32]) {
  %138 = cast(%var_7573, dtype="float32") /* ty=Tensor[(11, 156), float32] */;
  %139 = reshape(%138, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %140 = @func_4038(%139) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) */;
  %141 = %140.1;
  %142 = cast(%var_7595, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), float64] */;
  %146 = cast(%141, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %147 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%var_7573, dtype="float32") /* ty=Tensor[(11, 156), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %150 = power(%148, %149) /* ty=Tensor[(11, 156), float32] */;
  %151 = cast(%150, dtype="int32") /* ty=Tensor[(11, 156), int32] */;
  %152 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%var_7573, dtype="int32") /* ty=Tensor[(11, 156), int32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %155 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
  %156 = power(%144, %145) /* ty=Tensor[(1716), float64] */;
  %157 = left_shift(%153, %154) /* ty=Tensor[(11, 156), int32] */;
  (%155, %156, %157)
}

def @func_2444(%var_2410: Tensor[(900, 2), uint32]) -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) {
  %158 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %161 = reshape(%160, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %162 = @func_1905(%161) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
  %163 = cast(%var_2410, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %164 = reshape(%163, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %165 = @func_2254(%164) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) */;
  %166 = %165.2;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(12, 15, 10), float32] */;
  %168 = exp(%167) /* ty=Tensor[(12, 15, 10), float32] */;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %170 = cast(%168, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %171 = %162.2;
  %172 = atanh(%169) /* ty=Tensor[(12, 15, 10), float64] */;
  %173 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %174 = asin(%170) /* ty=Tensor[(12, 15, 10), float64] */;
  (%159, %171, %var_2410, %172, %173, %174)
}

def @func_3709() -> Tensor[(1716), float32] {
  %175 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(1716), float32] */;
  atanh(%177) /* ty=Tensor[(1716), float32] */
}

def @func_4942(%var_4918: Tensor[(3, 6, 12), float32], %var_4932: Tensor[(3, 6, 12), uint64]) -> (Tensor[(3, 6, 12), int32], Tensor[(3, 6, 12), bool]) {
  %178 = @func_3879() /* ty=Tensor[(3, 6, 12), float32] */;
  %179 = cast(%var_4918, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %183 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 6, 12), float32] */, dtype="uint64") /* ty=Tensor[(3, 6, 12), uint64] */;
  %184 = shape_of(%var_4918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_4918, dtype="uint64") /* ty=Tensor[(3, 6, 12), uint64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %187 = bitwise_xor(%185, %186) /* ty=Tensor[(3, 6, 12), uint64] */;
  %188 = cast(%var_4932, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = minimum(%181, %182) /* ty=Tensor[(3, 6, 12), int32] */;
  %193 = greater(%190, %191) /* ty=Tensor[(3, 6, 12), bool] */;
  (%192, %193)
}

def @func_8079() -> Tensor[(1716), float64] {
  %194 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %194.0
}

def @func_9770() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
  %195 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %196 = cast(meta[relay.Constant][5] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %197 = reshape(%196, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %198 = @func_8981(%197) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */;
  %199 = %195.2;
  %200 = @func_3709() /* ty=Tensor[(1716), float32] */;
  %201 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
  %202 = %198.3;
  (%199, %200, %201, %202, meta[relay.Constant][5] /* ty=Tensor[(300), float32] */)
}

def @func_3374() -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %203 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %204 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
  %205 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %208 = cosh(%207) /* ty=Tensor[(1716), float64] */;
  %209 = cast(%206, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(1), int32] */;
  %211 = cast(%208, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %213 = %203.0;
  %214 = %204.0;
  %215 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %216 = multiply(%211, %212) /* ty=Tensor[(1716), uint16] */;
  (%213, %214, %215, %216)
}

def @func_4387() -> Tensor[(3, 6, 12), float32] {
  @func_3879() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_5496() -> Tensor[(1716), float64] {
  %217 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %217.0
}

def @func_6852() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) {
  %218 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %219 = %218.1;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %221 = reshape(%220, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %222 = @func_179(%221) /* ty=Tensor[(3, 6, 12), float32] */;
  (%219, %222)
}

def @func_8148() -> Tensor[(15, 13, 13), int16] {
  %223 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 13), float32] */;
  %224 = atanh(%223) /* ty=Tensor[(15, 13, 13), float32] */;
  %225 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 13, 13), float32] */, dtype="int16") /* ty=Tensor[(15, 13, 13), int16] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="int16") /* ty=Tensor[(15, 13, 13), int16] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%227, %228) /* ty=Tensor[(15, 13, 13), int16] */
}

def @func_4097() -> (Tensor[(1716), uint16],) {
  %229 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %230 = %229.0;
  (%230,)
}

def @func_6561(%var_6550: Tensor[(1800), uint32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  %231 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %233 = cast(%var_6550, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %234 = reshape(%232, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %235 = reshape(%233, newshape=[3, 600]) /* ty=Tensor[(3, 600), uint32] */;
  %236 = @func_4732(%234, %235) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) */;
  %237 = %231.0;
  %238 = %236.0;
  %239 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  (%237, %238, meta[relay.Constant][8] /* ty=Tensor[(715), int32] */, %var_6550, %239)
}

def @func_6520() -> Tensor[(1716), uint64] {
  @func_3977() /* ty=Tensor[(1716), uint64] */
}

def @main(%var_9961: Tensor[(1716), uint16]) -> Tensor[(1716), bool] {
  %240 = @func_5245() /* ty=(Tensor[(1716), uint16],) */;
  %241 = %240.0;
  %242 = cast(%var_9961, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%244, %245) /* ty=Tensor[(1716), bool] */
}

def @func_7914(%var_7909: Tensor[(1716), uint16]) -> (Tensor[(1716), uint32],) {
  %246 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %247 = %246.1;
  %248 = cast(%var_7909, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(1), int32] */;
  %250 = cast(%247, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %252 = bitwise_and(%250, %251) /* ty=Tensor[(1716), uint32] */;
  (%252,)
}

def @func_9789() -> (Tensor[(1716), uint16],) {
  %253 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %254 = %253.1;
  (%254,)
}

def @func_4084() -> Tensor[(3, 6, 12), float32] {
  @func_3879() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_9669() -> (Tensor[(1716), float64],) {
  %255 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %256 = %255.0;
  (%256,)
}

def @func_8173() -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
  %257 = @func_5496() /* ty=Tensor[(1716), float64] */;
  %258 = @func_6742() /* ty=Tensor[(1716), float64] */;
  (%257, %258)
}

def @func_4740() -> Tensor[(1716), uint16] {
  %259 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %259.1
}

def @func_1186(%var_1153: Tensor[(1, 10, 14), uint8], %var_1154: Tensor[(16, 10, 14), uint8], %var_1160: Tensor[(108, 2), float32], %var_1170: Tensor[(672), int8]) -> (Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) {
  %260 = cast(%var_1153, dtype="bool") /* ty=Tensor[(1, 10, 14), bool] */;
  %261 = cast(%var_1154, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
  %262 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %263 = cast(%var_1160, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %264 = reshape(%262, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %265 = reshape(%263, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %266 = @func_650(%264, %265) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %267 = cast(%var_1170, dtype="int8") /* ty=Tensor[(672), int8] */;
  %268 = reshape(%267, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %269 = @func_828(%268) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %270 = less_equal(%260, %261) /* ty=Tensor[(16, 10, 14), bool] */;
  %271 = %266.4;
  %272 = %269.1;
  (%270, %271, meta[relay.Constant][9] /* ty=Tensor[(300), float32] */, %var_1160, %272, %var_1170)
}

def @func_5245() -> (Tensor[(1716), uint16],) {
  %273 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %274 = %273.0;
  (%274,)
}

def @func_5066() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %275 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %276 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %277 = %275.1;
  %278 = %276.0;
  (%277, %278)
}

def @func_5919() -> (Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %279 = cast(meta[relay.Constant][10] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %280 = cast(meta[relay.Constant][10] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %282 = reshape(%279, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %283 = reshape(%280, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %284 = reshape(%281, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %285 = @func_2909(%282, %283, %284) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
  %286 = %285.2;
  %287 = cast(%286, dtype="int8") /* ty=Tensor[(672), int8] */;
  %288 = reshape(%287, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %289 = @func_828(%288) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %290 = @func_5066() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %291 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %292 = %289.5;
  %293 = @func_3742() /* ty=Tensor[(1716), float64] */;
  %294 = %290.0;
  (%291, %286, meta[relay.Constant][10] /* ty=Tensor[(756), uint64] */, meta[relay.Constant][11] /* ty=Tensor[(672), int8] */, %292, %293, %294)
}

def @func_8281() -> (Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) {
  %295 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %296 = %295.1;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %298 = reshape(%297, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %299 = @func_5264(%298) /* ty=(Tensor[(3, 6, 12), bool],) */;
  %300 = cast(%296, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %301 = %299.0;
  %302 = sinh(%300) /* ty=Tensor[(3, 6, 12), float32] */;
  (%301, %302)
}

def @func_7019(%var_7013: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), int16],) {
  %303 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %304 = %303.2;
  %305 = cast(%var_7013, dtype="int16") /* ty=Tensor[(3, 6, 12), int16] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="int16") /* ty=Tensor[(3, 6, 12), int16] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %309 = multiply(%307, %308) /* ty=Tensor[(3, 6, 12), int16] */;
  (%309,)
}

def @func_5174(%var_5129: Tensor[(2, 16, 2), float32]) -> (Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) {
  %310 = cast(%var_5129, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
  %311 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %312 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %313 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %314 = sinh(%310) /* ty=Tensor[(2, 16, 2), float32] */;
  %315 = %311.1;
  %316 = %312.0;
  %317 = %313.0;
  (%314, %315, %316, %317)
}

def @func_9386() -> Tensor[(1716), uint16] {
  %318 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %318.0
}

def @func_5415() -> (Tensor[(3, 6, 12), float32],) {
  %319 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_3016(%var_2982: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) {
  %321 = cast(%var_2982, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %323 = cast(meta[relay.Constant][12] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %324 = reshape(%322, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %325 = reshape(%323, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %326 = @func_2184(%324, %325) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %327 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %328 = cos(%321) /* ty=Tensor[(5, 3, 16), float64] */;
  %329 = %326.0;
  %330 = %327.0;
  (%328, %329, meta[relay.Constant][12] /* ty=Tensor[(715), int32] */, %330)
}

def @func_7985(%var_7965: Tensor[(715), int32], %var_7966: Tensor[(312), float32], %var_7967: Tensor[(64), float32]) -> (Tensor[(1716), float64], Tensor[(715), int32], Tensor[(715), int32], Tensor[(312), float32], Tensor[(64), float32]) {
  %331 = cast(%var_7965, dtype="int32") /* ty=Tensor[(715), int32] */;
  %332 = cast(%var_7966, dtype="float32") /* ty=Tensor[(312), float32] */;
  %333 = cast(%var_7967, dtype="float32") /* ty=Tensor[(64), float32] */;
  %334 = reshape(%331, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %335 = reshape(%332, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %336 = reshape(%333, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %337 = @func_7223(%334, %335, %336) /* ty=(Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) */;
  %338 = @func_5771() /* ty=Tensor[(1716), float64] */;
  %339 = %337.2;
  (%338, %339, %var_7965, %var_7966, %var_7967)
}

def @func_3804() -> Tensor[(1716), float64] {
  %340 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %340.2
}

def @func_3195(%var_3190: Tensor[(1716), int8]) -> (Tensor[(1716), int64],) {
  %341 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %342 = %341.0;
  %343 = cast(%var_3190, dtype="int64") /* ty=Tensor[(1716), int64] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%342, dtype="int64") /* ty=Tensor[(1716), int64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), int64] */;
  %347 = subtract(%345, %346) /* ty=Tensor[(1716), int64] */;
  (%347,)
}

def @func_9858() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %348 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %349 = @func_3709() /* ty=Tensor[(1716), float32] */;
  %350 = %348.0;
  (%349, %350)
}

def @func_3775(%var_3756: Tensor[(1716), float32], %var_3773: Tensor[(13, 55), int32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) {
  %351 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %352 = cast(%var_3756, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(1), int32] */;
  %354 = cast(%351, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?), float64] */;
  %356 = cast(%351, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %357 = reshape(%356, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %358 = @func_972(%357) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %359 = %358.1;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %361 = cast(%var_3773, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %362 = cast(%var_3773, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %363 = reshape(%361, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %364 = reshape(%362, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %365 = @func_2184(%363, %364) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %366 = add(%354, %355) /* ty=Tensor[(1716), float64] */;
  %367 = atanh(%360) /* ty=Tensor[(3, 6, 12), float32] */;
  %368 = %365.0;
  (%366, %367, %368, %var_3773)
}

def @func_3977() -> Tensor[(1716), uint64] {
  %369 = @func_3709() /* ty=Tensor[(1716), float32] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %371 = exp(%370) /* ty=Tensor[(1716), float32] */;
  %372 = cast(%371, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %373 = shape_of(%369, dtype="int32") /* ty=Tensor[(1), int32] */;
  %374 = cast(%369, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?), uint64] */;
  bitwise_or(%374, %375) /* ty=Tensor[(1716), uint64] */
}

def @func_1970() -> (Tensor[(1716), float64],) {
  %376 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %377 = %376.4;
  %378 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %379 = %378.4;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %381 = shape_of(%377, dtype="int32") /* ty=Tensor[(1), int32] */;
  %382 = cast(%377, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?), float64] */;
  %384 = floor_divide(%382, %383) /* ty=Tensor[(1716), float64] */;
  (%384,)
}

def @func_2184(%var_2149: Tensor[(11, 13, 5), int32], %var_2150: Tensor[(11, 13, 5), int32]) -> (Tensor[(11, 13, 5), bool],) {
  %385 = cast(%var_2150, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %386 = shape_of(%var_2149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_2149, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %389 = less_equal(%387, %388) /* ty=Tensor[(11, 13, 5), bool] */;
  %390 = cast(%389, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %391 = shape_of(%var_2150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_2150, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = logical_or(%392, %393) /* ty=Tensor[(11, 13, 5), bool] */;
  (%394,)
}

def @func_6954(%var_6949: Tensor[(156, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) {
  %395 = @func_6216() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */;
  %396 = @func_6520() /* ty=Tensor[(1716), uint64] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %398 = cast(%var_6949, dtype="float32") /* ty=Tensor[(156, 2), float32] */;
  %399 = cast(meta[relay.Constant][13] /* ty=Tensor[(2240), uint8] */, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %400 = cast(meta[relay.Constant][14] /* ty=Tensor[(336, 2), int8] */, dtype="int8") /* ty=Tensor[(336, 2), int8] */;
  %401 = reshape(%398, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %402 = reshape(%399, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
  %403 = reshape(%400, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %404 = @func_6014(%401, %402, %403) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) */;
  %405 = %395.1;
  %406 = sin(%397) /* ty=Tensor[(1716), float64] */;
  %407 = %404.0;
  (%405, %406, %407, %var_6949, meta[relay.Constant][13] /* ty=Tensor[(2240), uint8] */, meta[relay.Constant][14] /* ty=Tensor[(336, 2), int8] */)
}

def @func_5123() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64]) {
  %408 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %409 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %411 = %408.1;
  %412 = tan(%410) /* ty=Tensor[(3, 6, 12), float64] */;
  (%411, %412)
}

def @func_3489() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) {
  %413 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %414 = cast(meta[relay.Constant][15] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %415 = reshape(%414, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %416 = @func_2760(%415) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %419 = cast(meta[relay.Constant][15] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %420 = reshape(%419, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %421 = @func_1551(%420) /* ty=(Tensor[(12, 15, 10), uint32],) */;
  %422 = cast(meta[relay.Constant][15] /* ty=Tensor[(1800), uint32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %423 = %413.0;
  %424 = asinh(%418) /* ty=Tensor[(3, 6, 12), float32] */;
  %425 = %421.0;
  %426 = asinh(%422) /* ty=Tensor[(1800), float32] */;
  (%423, %424, %425, %426)
}

def @func_6065() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %427 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %428 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %429 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  %430 = %427.1;
  %431 = %428.0;
  (%429, %430, %431)
}

def @func_6897() -> Tensor[(1716), uint16] {
  %432 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %432.4
}

def @func_7533(%var_7452: Tensor[(108, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float32], Tensor[(5, 3, 16), float64], Tensor[(240), float64], Tensor[(1716), float64], Tensor[(108, 2), float32], Tensor[(1716), float64], Tensor[(108, 2), float32]) {
  %433 = @func_7438() /* ty=(Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) */;
  %434 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %435 = reshape(%434, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
  %436 = @func_3016(%435) /* ty=(Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) */;
  %437 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %438 = cast(%var_7452, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %439 = acos(%438) /* ty=Tensor[(108, 2), float32] */;
  %440 = cast(%var_7452, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %441 = reshape(%440, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %442 = @func_7019(%441) /* ty=(Tensor[(3, 6, 12), int16],) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="int64") /* ty=Tensor[(3, 6, 12), int64] */;
  %445 = shape_of(%439, dtype="int32") /* ty=Tensor[(2), int32] */;
  %446 = cast(%439, dtype="int64") /* ty=Tensor[(108, 2), int64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %448 = right_shift(%446, %447) /* ty=Tensor[(108, 2), int64] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %450 = shape_of(%439, dtype="int32") /* ty=Tensor[(2), int32] */;
  %451 = cast(%439, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %453 = mod(%451, %452) /* ty=Tensor[(108, 2), float32] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %455 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %456 = cast(%439, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %457 = shape_of(%448, dtype="int32") /* ty=Tensor[(2), int32] */;
  %458 = cast(%448, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %460 = @func_6580() /* ty=Tensor[(1716), float64] */;
  %461 = %433.0;
  %462 = %436.0;
  %463 = %437.0;
  %464 = tan(%454) /* ty=Tensor[(108, 2), float32] */;
  %465 = %455.0;
  %466 = minimum(%458, %459) /* ty=Tensor[(108, 2), float32] */;
  (%460, %461, %462, meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, %463, %464, %465, %466)
}

def @func_4890() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %467 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %468 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  %469 = %467.0;
  %470 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  (%468, %469, %470)
}

def @func_4207() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
  %471 = @func_3682() /* ty=Tensor[(1716), float64] */;
  %472 = @func_3682() /* ty=Tensor[(1716), float64] */;
  %473 = cast(%472, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %474 = shape_of(%471, dtype="int32") /* ty=Tensor[(1), int32] */;
  %475 = cast(%471, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %477 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %478 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  %479 = left_shift(%475, %476) /* ty=Tensor[(1716), uint16] */;
  (%477, %478, %479)
}

def @func_6742() -> Tensor[(1716), float64] {
  %480 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %480.0
}

def @func_4732(%var_4671: Tensor[(715), int32], %var_4683: Tensor[(3, 600), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) {
  %481 = cast(%var_4671, dtype="int32") /* ty=Tensor[(715), int32] */;
  %482 = cast(%var_4671, dtype="int32") /* ty=Tensor[(715), int32] */;
  %483 = reshape(%481, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %484 = reshape(%482, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %485 = @func_2184(%483, %484) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %486 = cast(%var_4683, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
  %487 = sigmoid(%486) /* ty=Tensor[(3, 600), float32] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %489 = asin(%488) /* ty=Tensor[(3, 600), float64] */;
  %490 = cast(%var_4683, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %491 = reshape(%490, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %492 = @func_2569(%491) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %493 = %492.2;
  %494 = cast(%493, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %495 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %496 = cast(%489, dtype="bool") /* ty=Tensor[(3, 600), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %498 = logical_and(%496, %497) /* ty=Tensor[(3, 600), bool] */;
  %499 = cast(%498, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %500 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %501 = reshape(%499, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %502 = reshape(%500, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), float64] */;
  %503 = @func_2676(%501, %502) /* ty=(Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) */;
  %504 = cast(%487, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %505 = cast(%498, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
  %506 = cast(%498, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %507 = @func_3879() /* ty=Tensor[(3, 6, 12), float32] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %509 = reshape(%508, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %510 = %485.0;
  %511 = %503.2;
  %512 = log(%504) /* ty=Tensor[(3, 600), float64] */;
  %513 = log2(%505) /* ty=Tensor[(3, 600), float32] */;
  %514 = atan(%506) /* ty=Tensor[(3, 600), float64] */;
  %515 = @func_179(%509) /* ty=Tensor[(3, 6, 12), float32] */;
  (%507, %510, %var_4671, %511, %512, %513, %514, %515)
}

def @func_9580() -> Tensor[(3, 6, 12), float32] {
  %516 = @func_5608() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %516.0
}

def @func_6727(%var_6696: Tensor[(1716), float64], %var_6704: Tensor[(1800), uint32]) -> (Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) {
  %517 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %518 = %517.0;
  %519 = cast(%var_6696, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(1), int32] */;
  %521 = cast(%518, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), bool] */;
  %523 = cast(%var_6704, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %524 = reshape(%523, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %525 = @func_2254(%524) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) */;
  %526 = cast(meta[relay.Constant][17] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %527 = cast(meta[relay.Constant][18] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %528 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 168), int8] */, dtype="int8") /* ty=Tensor[(4, 168), int8] */;
  %529 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %530 = reshape(%526, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %531 = reshape(%527, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %532 = reshape(%528, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %533 = reshape(%529, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %534 = @func_5753(%530, %531, %532, %533) /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) */;
  %535 = less_equal(%521, %522) /* ty=Tensor[(1716), bool] */;
  %536 = %525.1;
  %537 = %534.6;
  (%535, %536, %var_6704, %537, meta[relay.Constant][17] /* ty=Tensor[(216), float32] */, meta[relay.Constant][18] /* ty=Tensor[(756), uint64] */, meta[relay.Constant][19] /* ty=Tensor[(4, 168), int8] */, meta[relay.Constant][20] /* ty=Tensor[(240), float64] */)
}

def @func_3742() -> Tensor[(1716), float64] {
  %538 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %538.0
}

def @func_3682() -> Tensor[(1716), float64] {
  %539 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %539.0
}

def @func_7793() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %540 = @func_7097() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %541 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %542 = %540.0;
  (%541, %542)
}

def @func_3816() -> (Tensor[(3, 6, 12), float32],) {
  %543 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %544 = %543.0;
  (%544,)
}

def @func_9630() -> (Tensor[(1716), uint16], Tensor[(6, 15, ?), float64]) {
  %545 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %546 = @func_8387() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */;
  %547 = %546.1;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(6, 15, ?), float64] */;
  %549 = %545.1;
  %550 = cos(%548) /* ty=Tensor[(6, 15, ?), float64] */;
  (%549, %550)
}

def @func_5753(%var_5683: Tensor[(216), float32], %var_5733: Tensor[(756), uint64], %var_5734: Tensor[(672), int8], %var_5738: Tensor[(240), float64]) -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) {
  %551 = @func_5245() /* ty=(Tensor[(1716), uint16],) */;
  %552 = cast(%var_5683, dtype="float32") /* ty=Tensor[(216), float32] */;
  %553 = reshape(%552, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %554 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %555 = %551.0;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %557 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 55), int32] */, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %558 = reshape(%556, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %559 = reshape(%557, newshape=[13, 55]) /* ty=Tensor[(13, 55), int32] */;
  %560 = @func_3775(%558, %559) /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) */;
  %561 = %560.3;
  %562 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 55), int32] */, dtype="bool") /* ty=Tensor[(13, 55), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(13, 55), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %566 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %567 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %568 = cast(%var_5734, dtype="int8") /* ty=Tensor[(672), int8] */;
  %569 = reshape(%566, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %570 = reshape(%567, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %571 = reshape(%568, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %572 = @func_2909(%569, %570, %571) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
  %573 = cast(%var_5738, dtype="float64") /* ty=Tensor[(240), float64] */;
  %574 = reshape(%573, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
  %575 = @func_3016(%574) /* ty=(Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) */;
  %576 = @func_179(%553) /* ty=Tensor[(3, 6, 12), float32] */;
  %577 = %554.0;
  %578 = @func_5496() /* ty=Tensor[(1716), float64] */;
  %579 = greater_equal(%564, %565) /* ty=Tensor[(13, 55), bool] */;
  %580 = %572.1;
  %581 = %575.1;
  (%555, %576, %var_5683, %577, %578, %579, %580, %var_5733, %var_5734, %581, %var_5738)
}

def @func_2569(%var_2567: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
  %582 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %583 = cast(%var_2567, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %584 = reshape(%583, newshape=[900, 2]) /* ty=Tensor[(900, 2), uint32] */;
  %585 = @func_2444(%584) /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) */;
  %586 = %582.1;
  %587 = %585.2;
  (%586, %587, %var_2567)
}

def @func_2760(%var_2758: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) {
  %588 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %589 = %588.1;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %591 = acosh(%590) /* ty=Tensor[(3, 6, 12), float64] */;
  %592 = cast(%589, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %593 = log2(%592) /* ty=Tensor[(3, 6, 12), float64] */;
  %594 = cast(%593, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %595 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%591, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %598 = cast(%var_2758, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %599 = cast(%var_2758, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %600 = reshape(%598, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %601 = reshape(%599, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), float64] */;
  %602 = @func_2676(%600, %601) /* ty=(Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) */;
  %603 = less(%596, %597) /* ty=Tensor[(3, 6, 12), bool] */;
  %604 = %602.0;
  (%603, %604, %var_2758)
}

def @func_6437(%var_6425: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(13, 11, 12), float64], Tensor[(1716), uint16]) {
  %605 = cast(%var_6425, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %606 = reshape(%605, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %607 = @func_972(%606) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %608 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
  %609 = %607.0;
  (%608, %609, %var_6425)
}

def @func_4791() -> Tensor[(1716), float64] {
  @func_2075() /* ty=Tensor[(1716), float64] */
}

def @func_6375() -> (Tensor[(1716), float64],) {
  %610 = @func_3682() /* ty=Tensor[(1716), float64] */;
  (%610,)
}

def @func_8909() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %611 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %612 = @func_8748() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */;
  %613 = %611.0;
  %614 = %612.4;
  %615 = @func_6742() /* ty=Tensor[(1716), float64] */;
  (%613, %614, %615)
}

def @func_6655() -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %616 = @func_5919() /* ty=(Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %617 = %616.5;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %619 = reshape(%618, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %620 = @func_4038(%619) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) */;
  %621 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %622 = %620.1;
  %623 = %621.1;
  (%617, %622, %623)
}

def @func_179(%var_176: Tensor[(3, 6, 12), float32]) -> Tensor[(3, 6, 12), float32] {
  %624 = cast(%var_176, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  erf(%624) /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_7223(%var_7202: Tensor[(715), int32], %var_7205: Tensor[(312), float32], %var_7214: Tensor[(64), float32]) -> (Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) {
  %625 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %626 = cast(%var_7202, dtype="int32") /* ty=Tensor[(715), int32] */;
  %627 = cast(%var_7202, dtype="int32") /* ty=Tensor[(715), int32] */;
  %628 = reshape(%626, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %629 = reshape(%627, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %630 = @func_2184(%628, %629) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %631 = cast(%var_7205, dtype="float32") /* ty=Tensor[(312), float32] */;
  %632 = reshape(%631, newshape=[156, 2]) /* ty=Tensor[(156, 2), float32] */;
  %633 = @func_6954(%632) /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) */;
  %634 = cast(%var_7214, dtype="float32") /* ty=Tensor[(64), float32] */;
  %635 = reshape(%634, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %636 = @func_5174(%635) /* ty=(Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %637 = %633.0;
  %638 = cast(%637, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %639 = reshape(%638, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
  %640 = @func_3195(%639) /* ty=(Tensor[(1716), int64],) */;
  %641 = %625.5;
  %642 = %630.0;
  %643 = %636.0;
  %644 = %640.0;
  (%641, %642, %var_7202, %637, %var_7205, %643, %var_7214, %644)
}

def @func_7268() -> (Tensor[(1716), uint16],) {
  %645 = @func_4740() /* ty=Tensor[(1716), uint16] */;
  (%645,)
}

def @func_4038(%var_4016: Tensor[(1716), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) {
  %646 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %647 = @func_3977() /* ty=Tensor[(1716), uint64] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %649 = rsqrt(%648) /* ty=Tensor[(1716), float32] */;
  %650 = cast(%var_4016, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), bool] */;
  %654 = cast(%647, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %655 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
  %656 = %646.0;
  %657 = less(%652, %653) /* ty=Tensor[(1716), bool] */;
  %658 = asinh(%654) /* ty=Tensor[(1716), float32] */;
  (%655, %656, %657, %658)
}

def @func_8301() -> Tensor[(1716), float64] {
  @func_3742() /* ty=Tensor[(1716), float64] */
}

def @func_6255() -> Tensor[(1716), uint16] {
  %659 = @func_4097() /* ty=(Tensor[(1716), uint16],) */;
  %659.0
}

def @func_8369() -> (Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %660 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %661 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %662 = %660.0;
  %663 = %661.0;
  (%662, %663)
}

def @func_2024() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %664 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %665 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %666 = %664.0;
  %667 = %665.3;
  (%666, %667)
}

def @func_2676(%var_2616: Tensor[(1800), uint32], %var_2656: Tensor[(12, 15, 10), float64]) -> (Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) {
  %668 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %669 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %670 = reshape(%669, newshape=[900, 2]) /* ty=Tensor[(900, 2), uint32] */;
  %671 = @func_2444(%670) /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) */;
  %672 = %671.3;
  %673 = cast(%var_2656, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = %668.2;
  %678 = greater_equal(%675, %676) /* ty=Tensor[(12, 15, 10), bool] */;
  (%677, %var_2616, %678)
}

def @func_9830() -> (Tensor[(1716), float64], Tensor[(3, 16, 16), float32], Tensor[(768), float32]) {
  %679 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %680 = reshape(%679, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float32] */;
  %681 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %682 = @func_8547(%680) /* ty=Tensor[(3, 16, 16), float32] */;
  (%681, %682, meta[relay.Constant][22] /* ty=Tensor[(768), float32] */)
}

def @func_8460() -> Tensor[(1716), float64] {
  @func_3804() /* ty=Tensor[(1716), float64] */
}

def @func_5044() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) {
  %683 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %684 = %683.0;
  %685 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %689 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %690 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %691 = subtract(%687, %688) /* ty=Tensor[(3, 6, 12), float32] */;
  %692 = %689.1;
  %693 = %690.1;
  (%691, %692, %693)
}

def @func_7859() -> Tensor[(1716), float32] {
  %694 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(1716), float32] */;
  log2(%696) /* ty=Tensor[(1716), float32] */
}

def @func_6014(%var_5999: Tensor[(312), float32], %var_6001: Tensor[(2240), uint8], %var_6002: Tensor[(672), int8]) -> (Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) {
  %697 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %698 = cast(%var_5999, dtype="float32") /* ty=Tensor[(312), float32] */;
  %699 = cast(meta[relay.Constant][24] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %700 = cast(%var_6001, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %701 = cast(%var_6002, dtype="int8") /* ty=Tensor[(672), int8] */;
  %702 = reshape(%698, newshape=[2, 13, 12]) /* ty=Tensor[(2, 13, 12), float32] */;
  %703 = reshape(%699, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %704 = reshape(%700, newshape=[280, 8]) /* ty=Tensor[(280, 8), uint8] */;
  %705 = reshape(%701, newshape=[8, 84]) /* ty=Tensor[(8, 84), int8] */;
  %706 = @func_1455(%702, %703, %704, %705) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) */;
  %707 = cast(meta[relay.Constant][25] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %708 = reshape(%707, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %709 = @func_1774(%708) /* ty=Tensor[(12, 12, 2), float64] */;
  %710 = cast(meta[relay.Constant][25] /* ty=Tensor[(288), float64] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = %697.0;
  %715 = %706.2;
  %716 = equal(%712, %713) /* ty=Tensor[(12, 12, 2), bool] */;
  (%714, %715, %var_5999, meta[relay.Constant][24] /* ty=Tensor[(216), float32] */, %var_6001, %var_6002, %716)
}

def @func_6689() -> (Tensor[(1716), float64], Tensor[(1716), int64], Tensor[(3, 6, 12), bool], Tensor[(216), float32], Tensor[(1716), float64]) {
  %717 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %720 = reshape(%719, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
  %721 = @func_3195(%720) /* ty=(Tensor[(1716), int64],) */;
  %722 = cast(meta[relay.Constant][26] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %723 = reshape(%722, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %724 = @func_5264(%723) /* ty=(Tensor[(3, 6, 12), bool],) */;
  %725 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %726 = %721.0;
  %727 = %724.0;
  %728 = %725.2;
  (%718, %726, %727, meta[relay.Constant][26] /* ty=Tensor[(216), float32] */, %728)
}

def @func_4293(%var_4273: Tensor[(1716), int8]) -> Tensor[(1716), float32] {
  %729 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %730 = %729.0;
  %731 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(1), int32] */;
  %733 = cast(%730, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%733, %734) /* ty=Tensor[(1716), float32] */
}

def @func_6216() -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
  %735 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %736 = %735.0;
  %737 = @func_5771() /* ty=Tensor[(1716), float64] */;
  (%736, %737)
}

def @func_2254(%var_2245: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) {
  %738 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %739 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %740 = cast(%var_2245, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %741 = reshape(%740, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %742 = @func_1551(%741) /* ty=(Tensor[(12, 15, 10), uint32],) */;
  %743 = %738.1;
  %744 = %739.0;
  %745 = %742.0;
  (%743, %744, %745, %var_2245)
}

def @func_1551(%var_1537: Tensor[(12, 15, 10), uint32]) -> (Tensor[(12, 15, 10), uint32],) {
  %746 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %747 = cast(%var_1537, dtype="uint32") /* ty=Tensor[(12, 15, 10), uint32] */;
  %748 = maximum(%746, %747) /* ty=Tensor[(12, 15, 10), uint32] */;
  (%748,)
}

def @func_5312() -> (Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %749 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %750 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %751 = %749.5;
  %752 = %750.0;
  %753 = @func_2075() /* ty=Tensor[(1716), float64] */;
  (%751, %752, %753)
}

def @func_8547(%var_8543: Tensor[(3, 16, 16), float32]) -> Tensor[(3, 16, 16), float32] {
  %754 = cast(%var_8543, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  sin(%754) /* ty=Tensor[(3, 16, 16), float32] */
}

def @func_3609() -> Tensor[(3, 6, 12), float32] {
  %755 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %755.1
}

def @func_828(%var_762: Tensor[(14, 4, 12), int8]) -> (Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) {
  %756 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 4, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 4, 12), int8] */;
  %757 = shape_of(%var_762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_762, dtype="int8") /* ty=Tensor[(14, 4, 12), int8] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %760 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %761 = reshape(%760, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %762 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %763 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %764 = reshape(%762, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %765 = reshape(%763, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %766 = @func_650(%764, %765) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %767 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 4, 12), int8] */, dtype="float32") /* ty=Tensor[(14, 4, 12), float32] */;
  %768 = left_shift(%758, %759) /* ty=Tensor[(14, 4, 12), int8] */;
  %769 = @func_179(%761) /* ty=Tensor[(3, 6, 12), float32] */;
  %770 = %766.2;
  %771 = rsqrt(%767) /* ty=Tensor[(14, 4, 12), float32] */;
  (%768, %769, meta[relay.Constant][29] /* ty=Tensor[(216), float32] */, %770, meta[relay.Constant][30] /* ty=Tensor[(300), float32] */, %771)
}

def @func_1455(%var_1405: Tensor[(2, 13, 12), float32], %var_1426: Tensor[(216), float32], %var_1444: Tensor[(280, 8), uint8], %var_1445: Tensor[(8, 84), int8]) -> (Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) {
  %772 = cast(%var_1405, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
  %773 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %774 = cast(%var_1426, dtype="float32") /* ty=Tensor[(216), float32] */;
  %775 = reshape(%773, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %776 = reshape(%774, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %777 = @func_650(%775, %776) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %778 = cast(meta[relay.Constant][32] /* ty=Tensor[(140, 1), uint8] */, dtype="uint8") /* ty=Tensor[(140, 1), uint8] */;
  %779 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(280, 8), uint8] */;
  %780 = %777.3;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %782 = cast(%var_1445, dtype="int8") /* ty=Tensor[(8, 84), int8] */;
  %783 = reshape(%778, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), uint8] */;
  %784 = reshape(%779, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), uint8] */;
  %785 = reshape(%781, newshape=[108, 2]) /* ty=Tensor[(108, 2), float32] */;
  %786 = reshape(%782, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %787 = @func_1186(%783, %784, %785, %786) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) */;
  %788 = cast(meta[relay.Constant][32] /* ty=Tensor[(140, 1), uint8] */, dtype="uint8") /* ty=Tensor[(140, 1), uint8] */;
  %789 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(280, 8), uint8] */;
  %790 = cast(%var_1426, dtype="float32") /* ty=Tensor[(216), float32] */;
  %791 = %787.5;
  %792 = cast(%791, dtype="int8") /* ty=Tensor[(672), int8] */;
  %793 = reshape(%788, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), uint8] */;
  %794 = reshape(%789, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), uint8] */;
  %795 = reshape(%790, newshape=[108, 2]) /* ty=Tensor[(108, 2), float32] */;
  %796 = reshape(%792, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %797 = @func_1186(%793, %794, %795, %796) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) */;
  %798 = log2(%772) /* ty=Tensor[(2, 13, 12), float32] */;
  %799 = %797.3;
  (%798, %780, meta[relay.Constant][31] /* ty=Tensor[(1, 300), float32] */, %var_1426, %791, meta[relay.Constant][32] /* ty=Tensor[(140, 1), uint8] */, %var_1444, %var_1445, %799)
}

def @func_6831(%var_6804: Tensor[(15, 5, 16), uint8], %var_6805: Tensor[(15, 5, 16), uint8]) -> (Tensor[(15, 5, 16), bool], Tensor[(9, 6, 14), uint64], Tensor[(54, 14), uint64], Tensor[(8, 84), int8]) {
  %800 = cast(%var_6805, dtype="bool") /* ty=Tensor[(15, 5, 16), bool] */;
  %801 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%var_6804, dtype="bool") /* ty=Tensor[(15, 5, 16), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = cast(meta[relay.Constant][33] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %805 = cast(meta[relay.Constant][33] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %806 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 84), int8] */, dtype="int8") /* ty=Tensor[(8, 84), int8] */;
  %807 = reshape(%804, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %808 = reshape(%805, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %809 = reshape(%806, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %810 = @func_2909(%807, %808, %809) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
  %811 = greater(%802, %803) /* ty=Tensor[(15, 5, 16), bool] */;
  %812 = %810.0;
  (%811, %812, meta[relay.Constant][33] /* ty=Tensor[(54, 14), uint64] */, meta[relay.Constant][34] /* ty=Tensor[(8, 84), int8] */)
}

def @func_5455(%var_5444: Tensor[(16, 11, 6), float64]) -> Tensor[(16, 11, 6), float64] {
  %813 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %814 = shape_of(%var_5444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%var_5444, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%815, %816) /* ty=Tensor[(16, 11, 6), float64] */
}

def @func_8593() -> (Tensor[(3, 6, 12), bool],) {
  %817 = @func_8281() /* ty=(Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) */;
  %818 = %817.0;
  (%818,)
}

def @func_5608() -> (Tensor[(3, 6, 12), float32],) {
  %819 = @func_4429() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_7097() -> (Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %821 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %822 = reshape(%821, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %823 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %824 = @func_1774(%822) /* ty=Tensor[(12, 12, 2), float64] */;
  (%823, %824, meta[relay.Constant][36] /* ty=Tensor[(288), float64] */)
}

def @func_7438() -> (Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %825 = @func_7003() /* ty=(Tensor[(1716), float32],) */;
  %826 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %827 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %828 = @func_6216() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */;
  %829 = %825.0;
  %830 = %826.0;
  %831 = %827.1;
  %832 = %828.0;
  (%829, %830, %831, %832)
}

def @func_2699() -> (Tensor[(1716), float64],) {
  %833 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %834 = %833.0;
  (%834,)
}

def @func_6482() -> (Tensor[(1716), uint16], Tensor[(1716), uint16]) {
  %835 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %836 = @func_5245() /* ty=(Tensor[(1716), uint16],) */;
  %837 = %835.0;
  %838 = %836.0;
  (%837, %838)
}

def @func_9421(%var_9412: Tensor[(300), float32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(312, 1), float32], Tensor[(1, 90), float32]) {
  %839 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %840 = cast(%var_9412, dtype="float32") /* ty=Tensor[(300), float32] */;
  %841 = cast(meta[relay.Constant][37] /* ty=Tensor[(312, 1), float32] */, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
  %842 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 90), float32] */, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %843 = reshape(%840, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %844 = reshape(%841, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %845 = reshape(%842, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %846 = @func_9317(%843, %844, %845) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */;
  %847 = %839.0;
  %848 = %846.0;
  (%847, %848, %var_9412, meta[relay.Constant][37] /* ty=Tensor[(312, 1), float32] */, meta[relay.Constant][38] /* ty=Tensor[(1, 90), float32] */)
}

def @func_9462(%var_9438: Tensor[(15, 4, 13), uint16], %var_9439: Tensor[(15, 4, 13), uint16], %var_9451: Tensor[(715), int32], %var_9452: Tensor[(1800), uint32]) -> (Tensor[(15, 4, 13), uint16], Tensor[(1716), float64], Tensor[(3, 600), float64], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(240), float64]) {
  %849 = cast(%var_9439, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %850 = shape_of(%var_9438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%var_9438, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %853 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %854 = cast(%var_9451, dtype="int32") /* ty=Tensor[(715), int32] */;
  %855 = cast(%var_9452, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %856 = reshape(%854, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %857 = reshape(%855, newshape=[3, 600]) /* ty=Tensor[(3, 600), uint32] */;
  %858 = @func_4732(%856, %857) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) */;
  %859 = @func_9110() /* ty=(Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) */;
  %860 = right_shift(%851, %852) /* ty=Tensor[(15, 4, 13), uint16] */;
  %861 = %853.0;
  %862 = %858.6;
  %863 = %859.6;
  (%860, %861, %862, %var_9451, %var_9452, %863)
}

def @func_7893() -> (Tensor[(3, 6, 12), float32],) {
  %864 = @func_6852() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) */;
  %865 = %864.1;
  (%865,)
}

def @func_4869() -> Tensor[(3, 6, 12), float32] {
  @func_4387() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_9317(%var_9259: Tensor[(300), float32], %var_9263: Tensor[(312), float32], %var_9299: Tensor[(90), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
  %866 = @func_7893() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %867 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %868 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %869 = cast(%var_9259, dtype="float32") /* ty=Tensor[(300), float32] */;
  %870 = reshape(%869, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %871 = @func_8981(%870) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */;
  %872 = cast(%var_9263, dtype="float32") /* ty=Tensor[(312), float32] */;
  %873 = reshape(%872, newshape=[156, 2]) /* ty=Tensor[(156, 2), float32] */;
  %874 = @func_6954(%873) /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) */;
  %875 = cast(%var_9299, dtype="float32") /* ty=Tensor[(90), float32] */;
  %876 = reshape(%875, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %877 = @func_7366(%876) /* ty=(Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) */;
  %878 = @func_7793() /* ty=(Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */;
  %879 = %866.0;
  %880 = %867.1;
  %881 = %868.1;
  %882 = %871.1;
  %883 = %874.4;
  %884 = @func_8079() /* ty=Tensor[(1716), float64] */;
  %885 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  %886 = %877.1;
  %887 = %878.1;
  (%879, %880, %881, %882, %var_9259, %883, %var_9263, %884, %885, %886, %var_9299, %887)
}

def @func_8387() -> (Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
  %888 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %889 = cast(meta[relay.Constant][39] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %890 = reshape(%889, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), float32] */;
  %891 = @func_5099(%890) /* ty=(Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) */;
  %892 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %893 = %888.0;
  %894 = %891.0;
  %895 = %892.0;
  (%893, %894, meta[relay.Constant][39] /* ty=Tensor[(90), float32] */, %895)
}

def @func_2281() -> (Tensor[(1716), float64],) {
  %896 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %897 = %896.0;
  (%897,)
}

def @func_4750() -> (Tensor[(1716), uint16],) {
  %898 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
  %899 = %898.0;
  (%899,)
}

def @func_972(%var_955: Tensor[(13, 11, 12), uint16]) -> (Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) {
  %900 = cast(%var_955, dtype="uint16") /* ty=Tensor[(13, 11, 12), uint16] */;
  %901 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 12), uint16] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %904 = right_shift(%902, %903) /* ty=Tensor[(13, 11, 12), uint16] */;
  %905 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %909 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %910 = reshape(%909, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %911 = floor_divide(%907, %908) /* ty=Tensor[(13, 11, 12), float64] */;
  %912 = @func_179(%910) /* ty=Tensor[(3, 6, 12), float32] */;
  (%911, %912, meta[relay.Constant][41] /* ty=Tensor[(216), float32] */)
}

def @func_1774(%var_1768: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), float64] {
  %913 = cast(%var_1768, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  asinh(%913) /* ty=Tensor[(12, 12, 2), float64] */
}

def @func_8981(%var_8977: Tensor[(300), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
  %914 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %915 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %916 = cast(%var_8977, dtype="float32") /* ty=Tensor[(300), float32] */;
  %917 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  %918 = cast(%917, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %919 = reshape(%916, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %920 = reshape(%918, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %921 = @func_650(%919, %920) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %922 = %914.1;
  %923 = %915.0;
  %924 = %921.4;
  (%917, %922, %923, %924, %var_8977)
}

def @func_2307() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %925 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %926 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %927 = %925.1;
  (%926, %927)
}

def @func_6301(%var_6265: float32, %var_6266: Tensor[(3, 8, 7), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 8, 7), float64], Tensor[(3, 6, 12), float32]) {
  %928 = @func_5608() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %929 = cast(%var_6265, dtype="float32") /* ty=float32 */;
  %930 = cast(%var_6266, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %931 = floor_divide(%929, %930) /* ty=Tensor[(3, 8, 7), float32] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(3, 8, 7), float64] */;
  %933 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %934 = %928.0;
  %935 = log2(%932) /* ty=Tensor[(3, 8, 7), float64] */;
  %936 = %933.0;
  (%934, %935, %936)
}

def @func_1869() -> (Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) {
  %937 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
  %938 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %939 = reshape(%938, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %940 = @func_828(%939) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %941 = cast(meta[relay.Constant][44] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %942 = reshape(%941, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %943 = @func_972(%942) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %944 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %945 = reshape(%944, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %946 = @func_828(%945) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %947 = log(%937) /* ty=Tensor[(4, 4, 4), float64] */;
  %948 = %940.3;
  %949 = %943.1;
  %950 = %946.2;
  (%947, %948, meta[relay.Constant][43] /* ty=Tensor[(672), int8] */, %949, meta[relay.Constant][44] /* ty=Tensor[(1716), uint16] */, %950)
}

def @func_3309() -> (Tensor[(3, 6, 12), float32],) {
  %951 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %952 = %951.1;
  %953 = cast(%952, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %954 = log10(%953) /* ty=Tensor[(3, 6, 12), float32] */;
  (%954,)
}

def @func_3513() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) {
  %955 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %956 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %957 = %956.0;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %959 = %955.1;
  %960 = acos(%958) /* ty=Tensor[(3, 6, 12), float64] */;
  (%959, %960)
}

def @func_9110() -> (Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) {
  %961 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %962 = reshape(%961, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %963 = @func_2760(%962) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %964 = @func_3977() /* ty=Tensor[(1716), uint64] */;
  %965 = cast(%964, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %966 = reshape(%965, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
  %967 = @func_7097() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %968 = %967.1;
  %969 = cast(%968, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %970 = atan(%969) /* ty=Tensor[(12, 12, 2), float64] */;
  %971 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%970, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %975 = cast(%964, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %976 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %977 = reshape(%975, newshape=[1716]) /* ty=Tensor[(1716), float64] */;
  %978 = reshape(%976, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %979 = @func_6727(%977, %978) /* ty=(Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) */;
  %980 = %963.1;
  %981 = @func_4293(%966) /* ty=Tensor[(1716), float32] */;
  %982 = @func_6520() /* ty=Tensor[(1716), uint64] */;
  %983 = less(%973, %974) /* ty=Tensor[(12, 12, 2), bool] */;
  %984 = %979.7;
  (%964, %980, meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, %981, %982, %983, %984)
}

def @func_4252(%var_4209: Tensor[(10, 11, 16), uint16], %var_4210: Tensor[(10, 11, 16), uint16], %var_4228: Tensor[(1800), uint32]) -> (Tensor[(10, 11, 16), uint16], Tensor[(3, 6, 12), float32], Tensor[(10, 11, 16), float32], Tensor[(900, 2), uint32], Tensor[(1716), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
  %985 = cast(%var_4210, dtype="uint16") /* ty=Tensor[(10, 11, 16), uint16] */;
  %986 = shape_of(%var_4209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %987 = cast(%var_4209, dtype="uint16") /* ty=Tensor[(10, 11, 16), uint16] */;
  %988 = dyn.reshape(%985, %986, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %989 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %990 = cast(%var_4209, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
  %991 = shape_of(%var_4210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %992 = cast(%var_4210, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
  %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %994 = cast(%var_4228, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %995 = reshape(%994, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %996 = @func_2569(%995) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %997 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %998 = %996.1;
  %999 = cast(%998, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %1000 = reshape(%999, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %1001 = @func_2569(%1000) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %1002 = cast(meta[relay.Constant][47] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %1003 = shape_of(%var_4228, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1004 = cast(%var_4228, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %1006 = add(%987, %988) /* ty=Tensor[(10, 11, 16), uint16] */;
  %1007 = %989.1;
  %1008 = power(%992, %993) /* ty=Tensor[(10, 11, 16), float32] */;
  %1009 = %997.0;
  %1010 = %1001.1;
  %1011 = bitwise_xor(%1004, %1005) /* ty=Tensor[(1800), uint32] */;
  (%1006, %1007, %1008, %998, %1009, %1010, %1011)
}

def @func_9021() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint32], Tensor[(1716), uint16]) {
  %1012 = @func_4429() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %1013 = cast(meta[relay.Constant][48] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %1014 = reshape(%1013, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %1015 = @func_7914(%1014) /* ty=(Tensor[(1716), uint32],) */;
  %1016 = %1012.0;
  %1017 = %1015.0;
  (%1016, %1017, meta[relay.Constant][48] /* ty=Tensor[(1716), uint16] */)
}

def @func_9212() -> (Tensor[(1716), uint64],) {
  %1018 = @func_3977() /* ty=Tensor[(1716), uint64] */;
  (%1018,)
}

def @func_1905(%var_1900: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
  %1019 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %1020 = cast(%var_1900, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %1021 = reshape(%1020, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %1022 = @func_972(%1021) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %1023 = %1019.3;
  %1024 = %1022.1;
  (%1023, %1024, %var_1900)
}

def @func_5771() -> Tensor[(1716), float64] {
  @func_3682() /* ty=Tensor[(1716), float64] */
}

def @func_8680() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
  %1025 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
  %1026 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %1027 = %1025.0;
  %1028 = %1026.1;
  (%1027, %1028)
}

def @func_3176() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %1029 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %1030 = %1029.1;
  %1031 = cast(%1030, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %1032 = asin(%1031) /* ty=Tensor[(3, 6, 12), float32] */;
  %1033 = @func_2075() /* ty=Tensor[(1716), float64] */;
  (%1032, %1033)
}

def @func_8844() -> (Tensor[(216), float32],) {
  %1034 = @func_5312() /* ty=(Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) */;
  %1035 = %1034.0;
  (%1035,)
}

def @func_3581() -> Tensor[(1716), float32] {
  %1036 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %1037 = %1036.4;
  %1038 = cast(%1037, dtype="float32") /* ty=Tensor[(1716), float32] */;
  sinh(%1038) /* ty=Tensor[(1716), float32] */
}

def @func_8566() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
  %1039 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %1040 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %1041 = %1039.1;
  %1042 = %1040.0;
  (%1041, %1042)
}

def @func_5264(%var_5254: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), bool],) {
  %1043 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %1044 = cast(%var_5254, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %1045 = shape_of(%1043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1046 = cast(%1043, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1048 = greater_equal(%1046, %1047) /* ty=Tensor[(3, 6, 12), bool] */;
  (%1048,)
}

def @func_2960() -> (Tensor[(1716), uint16],) {
  %1049 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %1050 = %1049.4;
  (%1050,)
}

def @func_2772() -> (Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %1051 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %1052 = %1051.0;
  %1053 = cast(%1052, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %1054 = reshape(%1053, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %1055 = @func_1905(%1054) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
  %1056 = %1055.2;
  (%1052, %1056)
}

def @func_4632() -> (Tensor[(1716), float64],) {
  %1057 = @func_3742() /* ty=Tensor[(1716), float64] */;
  (%1057,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3779(%var_3777: Tensor[(1716), float32], %var_3778: Tensor[(13, 55), int32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) {
  @func_3775(%var_3777, %var_3778) /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) */
}

def @func_4793() -> Tensor[(1716), float64] {
  @func_4791() /* ty=Tensor[(1716), float64] */
}

def @func_8281() -> (Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) {
  %0 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %3 = reshape(%2, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %4 = @func_5264(%3) /* ty=(Tensor[(3, 6, 12), bool],) */;
  %5 = cast(%1, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %6 = %4.0;
  %7 = sinh(%5) /* ty=Tensor[(3, 6, 12), float32] */;
  (%6, %7)
}

def @func_5458(%var_5456: Tensor[(16, 11, 6), float64]) -> Tensor[(16, 11, 6), float64] {
  @func_5455(%var_5456) /* ty=Tensor[(16, 11, 6), float64] */
}

def @func_1455(%var_1405: Tensor[(2, 13, 12), float32], %var_1426: Tensor[(216), float32], %var_1444: Tensor[(280, 8), uint8], %var_1445: Tensor[(8, 84), int8]) -> (Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) {
  %8 = cast(%var_1405, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %10 = cast(%var_1426, dtype="float32") /* ty=Tensor[(216), float32] */;
  %11 = reshape(%9, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %12 = reshape(%10, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %13 = @func_650(%11, %12) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(140, 1), uint8] */, dtype="uint8") /* ty=Tensor[(140, 1), uint8] */;
  %15 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(280, 8), uint8] */;
  %16 = %13.3;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %18 = cast(%var_1445, dtype="int8") /* ty=Tensor[(8, 84), int8] */;
  %19 = reshape(%14, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), uint8] */;
  %20 = reshape(%15, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), uint8] */;
  %21 = reshape(%17, newshape=[108, 2]) /* ty=Tensor[(108, 2), float32] */;
  %22 = reshape(%18, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %23 = @func_1186(%19, %20, %21, %22) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(140, 1), uint8] */, dtype="uint8") /* ty=Tensor[(140, 1), uint8] */;
  %25 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(280, 8), uint8] */;
  %26 = cast(%var_1426, dtype="float32") /* ty=Tensor[(216), float32] */;
  %27 = %23.5;
  %28 = cast(%27, dtype="int8") /* ty=Tensor[(672), int8] */;
  %29 = reshape(%24, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), uint8] */;
  %30 = reshape(%25, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), uint8] */;
  %31 = reshape(%26, newshape=[108, 2]) /* ty=Tensor[(108, 2), float32] */;
  %32 = reshape(%28, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %33 = @func_1186(%29, %30, %31, %32) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) */;
  %34 = log2(%8) /* ty=Tensor[(2, 13, 12), float32] */;
  %35 = %33.3;
  (%34, %16, meta[relay.Constant][0] /* ty=Tensor[(1, 300), float32] */, %var_1426, %27, meta[relay.Constant][1] /* ty=Tensor[(140, 1), uint8] */, %var_1444, %var_1445, %35)
}

def @func_4098() -> (Tensor[(1716), uint16],) {
  %38 = fn () -> (Tensor[(1716), uint16],) {
    %36 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
    %37 = %36.0;
    (%37,)
  };
  %38() /* ty=(Tensor[(1716), uint16],) */
}

def @func_3374() -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %39 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %40 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
  %41 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %44 = cosh(%43) /* ty=Tensor[(1716), float64] */;
  %45 = cast(%42, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(1), int32] */;
  %47 = cast(%44, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %49 = %39.0;
  %50 = %40.0;
  %51 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %52 = multiply(%47, %48) /* ty=Tensor[(1716), uint16] */;
  (%49, %50, %51, %52)
}

def @func_2308() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %56 = fn () -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
    %53 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %54 = @func_2075() /* ty=Tensor[(1716), float64] */;
    %55 = %53.1;
    (%54, %55)
  };
  %56() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_3376() -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) {
  @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */
}

def @func_3742() -> Tensor[(1716), float64] {
  %57 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %57.0
}

def @func_2187(%var_2185: Tensor[(11, 13, 5), int32], %var_2186: Tensor[(11, 13, 5), int32]) -> (Tensor[(11, 13, 5), bool],) {
  %68 = fn (%var_2149: Tensor[(11, 13, 5), int32], %var_2150: Tensor[(11, 13, 5), int32]) -> (Tensor[(11, 13, 5), bool],) {
    %58 = cast(%var_2150, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %59 = shape_of(%var_2149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%var_2149, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %62 = less_equal(%60, %61) /* ty=Tensor[(11, 13, 5), bool] */;
    %63 = cast(%62, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %64 = shape_of(%var_2150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%var_2150, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = logical_or(%65, %66) /* ty=Tensor[(11, 13, 5), bool] */;
    (%67,)
  };
  %68(%var_2185, %var_2186) /* ty=(Tensor[(11, 13, 5), bool],) */
}

def @func_3611() -> Tensor[(3, 6, 12), float32] {
  @func_3609() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_6835(%var_6833: Tensor[(15, 5, 16), uint8], %var_6834: Tensor[(15, 5, 16), uint8]) -> (Tensor[(15, 5, 16), bool], Tensor[(9, 6, 14), uint64], Tensor[(54, 14), uint64], Tensor[(8, 84), int8]) {
  @func_6831(%var_6833, %var_6834) /* ty=(Tensor[(15, 5, 16), bool], Tensor[(9, 6, 14), uint64], Tensor[(54, 14), uint64], Tensor[(8, 84), int8]) */
}

def @func_7366(%var_7355: Tensor[(1, 90), float32]) -> (Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) {
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %70 = cast(%var_7355, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %71 = reshape(%70, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), float32] */;
  %72 = @func_5099(%71) /* ty=(Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) */;
  %73 = cast(%var_7355, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %74 = rsqrt(%69) /* ty=Tensor[(7, 7, 2), float64] */;
  %75 = %72.1;
  %76 = asin(%73) /* ty=Tensor[(1, 90), float64] */;
  (%74, %75, %76)
}

def @func_8369() -> (Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %77 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %78 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %79 = %77.0;
  %80 = %78.0;
  (%79, %80)
}

def @func_9580() -> Tensor[(3, 6, 12), float32] {
  %81 = @func_5608() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %81.0
}

def @func_7795() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  @func_7793() /* ty=(Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_9670() -> (Tensor[(1716), float64],) {
  %84 = fn () -> (Tensor[(1716), float64],) {
    %82 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
    %83 = %82.0;
    (%83,)
  };
  %84() /* ty=(Tensor[(1716), float64],) */
}

def @func_2444(%var_2410: Tensor[(900, 2), uint32]) -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) {
  %85 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %88 = reshape(%87, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %89 = @func_1905(%88) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
  %90 = cast(%var_2410, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %91 = reshape(%90, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %92 = @func_2254(%91) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) */;
  %93 = %92.2;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(12, 15, 10), float32] */;
  %95 = exp(%94) /* ty=Tensor[(12, 15, 10), float32] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %97 = cast(%95, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %98 = %89.2;
  %99 = atanh(%96) /* ty=Tensor[(12, 15, 10), float64] */;
  %100 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %101 = asin(%97) /* ty=Tensor[(12, 15, 10), float64] */;
  (%86, %98, %var_2410, %99, %100, %101)
}

def @func_2257(%var_2255: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) {
  @func_2254(%var_2255) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) */
}

def @func_8081() -> Tensor[(1716), float64] {
  @func_8079() /* ty=Tensor[(1716), float64] */
}

def @func_9632() -> (Tensor[(1716), uint16], Tensor[(6, 15, ?), float64]) {
  @func_9630() /* ty=(Tensor[(1716), uint16], Tensor[(6, 15, ?), float64]) */
}

def @func_9023() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint32], Tensor[(1716), uint16]) {
  @func_9021() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint32], Tensor[(1716), uint16]) */
}

def @func_9112() -> (Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) {
  @func_9110() /* ty=(Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) */
}

def @func_5067() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %106 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
    %102 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %103 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %104 = %102.1;
    %105 = %103.0;
    (%104, %105)
  };
  %106() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */
}

def @func_2962() -> (Tensor[(1716), uint16],) {
  @func_2960() /* ty=(Tensor[(1716), uint16],) */
}

def @func_4751() -> (Tensor[(1716), uint16],) {
  %109 = fn () -> (Tensor[(1716), uint16],) {
    %107 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
    %108 = %107.0;
    (%108,)
  };
  %109() /* ty=(Tensor[(1716), uint16],) */
}

def @func_4208() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
  %119 = fn () -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
    %110 = @func_3682() /* ty=Tensor[(1716), float64] */;
    %111 = @func_3682() /* ty=Tensor[(1716), float64] */;
    %112 = cast(%111, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %113 = shape_of(%110, dtype="int32") /* ty=Tensor[(1), int32] */;
    %114 = cast(%110, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %116 = @func_3581() /* ty=Tensor[(1716), float32] */;
    %117 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
    %118 = left_shift(%114, %115) /* ty=Tensor[(1716), uint16] */;
    (%116, %117, %118)
  };
  %119() /* ty=(Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */
}

def @func_3085(%var_3038: Tensor[(3, 6, 12), float32], %var_3055: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), int32], Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  %120 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %121 = %120.1;
  %122 = cast(%var_3038, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %126 = cast(%var_3055, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %127 = reshape(%126, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %128 = @func_2760(%127) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %129 = cast(%121, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %130 = add(%124, %125) /* ty=Tensor[(3, 6, 12), int32] */;
  %131 = %128.1;
  %132 = rsqrt(%129) /* ty=Tensor[(3, 6, 12), float32] */;
  (%130, %131, %var_3055, %132)
}

def @func_2571(%var_2570: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
  %139 = fn (%var_2567: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
    %133 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %134 = cast(%var_2567, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %135 = reshape(%134, newshape=[900, 2]) /* ty=Tensor[(900, 2), uint32] */;
    %136 = @func_2444(%135) /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) */;
    %137 = %133.1;
    %138 = %136.2;
    (%137, %138, %var_2567)
  };
  %139(%var_2570) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */
}

def @func_5920() -> (Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %156 = fn () -> (Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
    %140 = cast(meta[relay.Constant][3] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %141 = cast(meta[relay.Constant][3] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
    %143 = reshape(%140, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
    %144 = reshape(%141, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
    %145 = reshape(%142, newshape=[672]) /* ty=Tensor[(672), int8] */;
    %146 = @func_2909(%143, %144, %145) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
    %147 = %146.2;
    %148 = cast(%147, dtype="int8") /* ty=Tensor[(672), int8] */;
    %149 = reshape(%148, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
    %150 = @func_828(%149) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
    %151 = @func_5066() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
    %152 = @func_3581() /* ty=Tensor[(1716), float32] */;
    %153 = %150.5;
    %154 = @func_3742() /* ty=Tensor[(1716), float64] */;
    %155 = %151.0;
    (%152, %147, meta[relay.Constant][3] /* ty=Tensor[(756), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(672), int8] */, %153, %154, %155)
  };
  %156() /* ty=(Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_6743() -> Tensor[(1716), float64] {
  %158 = fn () -> Tensor[(1716), float64] {
    %157 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
    %157.0
  };
  %158() /* ty=Tensor[(1716), float64] */
}

def @func_6954(%var_6949: Tensor[(156, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) {
  %159 = @func_6216() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */;
  %160 = @func_6520() /* ty=Tensor[(1716), uint64] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %162 = cast(%var_6949, dtype="float32") /* ty=Tensor[(156, 2), float32] */;
  %163 = cast(meta[relay.Constant][5] /* ty=Tensor[(2240), uint8] */, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %164 = cast(meta[relay.Constant][6] /* ty=Tensor[(336, 2), int8] */, dtype="int8") /* ty=Tensor[(336, 2), int8] */;
  %165 = reshape(%162, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %166 = reshape(%163, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
  %167 = reshape(%164, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %168 = @func_6014(%165, %166, %167) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) */;
  %169 = %159.1;
  %170 = sin(%161) /* ty=Tensor[(1716), float64] */;
  %171 = %168.0;
  (%169, %170, %171, %var_6949, meta[relay.Constant][5] /* ty=Tensor[(2240), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(336, 2), int8] */)
}

def @func_3879() -> Tensor[(3, 6, 12), float32] {
  %172 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %173 = %172.1;
  %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%176, %177) /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_3089(%var_3087: Tensor[(3, 6, 12), float32], %var_3088: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), int32], Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  @func_3085(%var_3087, %var_3088) /* ty=(Tensor[(3, 6, 12), int32], Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) */
}

def @func_5102(%var_5100: Tensor[(6, 15, 1), float32]) -> (Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) {
  @func_5099(%var_5100) /* ty=(Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) */
}

def @func_7893() -> (Tensor[(3, 6, 12), float32],) {
  %178 = @func_6852() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) */;
  %179 = %178.1;
  (%179,)
}

def @func_8174() -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
  %182 = fn () -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
    %180 = @func_5496() /* ty=Tensor[(1716), float64] */;
    %181 = @func_6742() /* ty=Tensor[(1716), float64] */;
    (%180, %181)
  };
  %182() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */
}

def @func_9630() -> (Tensor[(1716), uint16], Tensor[(6, 15, ?), float64]) {
  %183 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %184 = @func_8387() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */;
  %185 = %184.1;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(6, 15, ?), float64] */;
  %187 = %183.1;
  %188 = cos(%186) /* ty=Tensor[(6, 15, ?), float64] */;
  (%187, %188)
}

def @func_9131() -> Tensor[(1716), uint16] {
  %190 = fn () -> Tensor[(1716), uint16] {
    %189 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
    %189.1
  };
  %190() /* ty=Tensor[(1716), uint16] */
}

def @func_1908(%var_1906: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
  @func_1905(%var_1906) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */
}

def @func_8748() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %191 = cast(meta[relay.Constant][8] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %192 = reshape(%191, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %193 = @func_2760(%192) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %194 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %195 = %193.0;
  %196 = @func_7859() /* ty=Tensor[(1716), float32] */;
  %197 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  (%194, %195, meta[relay.Constant][8] /* ty=Tensor[(1800), uint32] */, %196, %197)
}

def @func_1191(%var_1187: Tensor[(1, 10, 14), uint8], %var_1188: Tensor[(16, 10, 14), uint8], %var_1189: Tensor[(108, 2), float32], %var_1190: Tensor[(672), int8]) -> (Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) {
  %211 = fn (%var_1153: Tensor[(1, 10, 14), uint8], %var_1154: Tensor[(16, 10, 14), uint8], %var_1160: Tensor[(108, 2), float32], %var_1170: Tensor[(672), int8]) -> (Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) {
    %198 = cast(%var_1153, dtype="bool") /* ty=Tensor[(1, 10, 14), bool] */;
    %199 = cast(%var_1154, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
    %200 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %201 = cast(%var_1160, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
    %202 = reshape(%200, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
    %203 = reshape(%201, newshape=[216]) /* ty=Tensor[(216), float32] */;
    %204 = @func_650(%202, %203) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
    %205 = cast(%var_1170, dtype="int8") /* ty=Tensor[(672), int8] */;
    %206 = reshape(%205, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
    %207 = @func_828(%206) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
    %208 = less_equal(%198, %199) /* ty=Tensor[(16, 10, 14), bool] */;
    %209 = %204.4;
    %210 = %207.1;
    (%208, %209, meta[relay.Constant][9] /* ty=Tensor[(300), float32] */, %var_1160, %210, %var_1170)
  };
  %211(%var_1187, %var_1188, %var_1189, %var_1190) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(2, 10, 15), bool], Tensor[(300), float32], Tensor[(108, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(672), int8]) */
}

def @func_8682() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
  @func_8680() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) */
}

def @func_9832() -> (Tensor[(1716), float64], Tensor[(3, 16, 16), float32], Tensor[(768), float32]) {
  @func_9830() /* ty=(Tensor[(1716), float64], Tensor[(3, 16, 16), float32], Tensor[(768), float32]) */
}

def @func_6957(%var_6955: Tensor[(156, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) {
  @func_6954(%var_6955) /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) */
}

def @func_7861() -> Tensor[(1716), float32] {
  @func_7859() /* ty=Tensor[(1716), float32] */
}

def @func_3491() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) {
  @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */
}

def @func_2960() -> (Tensor[(1716), uint16],) {
  %212 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %213 = %212.4;
  (%213,)
}

def @func_4736(%var_4734: Tensor[(715), int32], %var_4735: Tensor[(3, 600), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) {
  @func_4732(%var_4734, %var_4735) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_4501(%var_4495: Tensor[(3, 14, 11), float64], %var_4496: Tensor[(3, 14, 11), float64], %var_4497: Tensor[(1800), uint32], %var_4498: Tensor[(216), float32], %var_4499: Tensor[(1, 2240), uint8], %var_4500: Tensor[(672), int8]) -> (Tensor[(3, 14, 11), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32], Tensor[(8, 84), int8], Tensor[(312, 1), float32], Tensor[(216), float32], Tensor[(1, 2240), uint8], Tensor[(672), int8]) {
  @func_4493(%var_4495, %var_4496, %var_4497, %var_4498, %var_4499, %var_4500) /* ty=(Tensor[(3, 14, 11), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32], Tensor[(8, 84), int8], Tensor[(312, 1), float32], Tensor[(216), float32], Tensor[(1, 2240), uint8], Tensor[(672), int8]) */
}

def @func_3019(%var_3017: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) {
  @func_3016(%var_3017) /* ty=(Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) */
}

def @func_6854() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) {
  @func_6852() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_1553(%var_1552: Tensor[(12, 15, 10), uint32]) -> (Tensor[(12, 15, 10), uint32],) {
  %217 = fn (%var_1537: Tensor[(12, 15, 10), uint32]) -> (Tensor[(12, 15, 10), uint32],) {
    %214 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %215 = cast(%var_1537, dtype="uint32") /* ty=Tensor[(12, 15, 10), uint32] */;
    %216 = maximum(%214, %215) /* ty=Tensor[(12, 15, 10), uint32] */;
    (%216,)
  };
  %217(%var_1552) /* ty=(Tensor[(12, 15, 10), uint32],) */
}

def @func_6564(%var_6562: Tensor[(1800), uint32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  @func_6561(%var_6562) /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) */
}

def @func_2914(%var_2911: Tensor[(9, 6, 14), uint64], %var_2912: Tensor[(9, 6, 14), uint64], %var_2913: Tensor[(672), int8]) -> (Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) {
  @func_2909(%var_2911, %var_2912, %var_2913) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */
}

def @func_7536(%var_7534: Tensor[(108, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float32], Tensor[(5, 3, 16), float64], Tensor[(240), float64], Tensor[(1716), float64], Tensor[(108, 2), float32], Tensor[(1716), float64], Tensor[(108, 2), float32]) {
  @func_7533(%var_7534) /* ty=(Tensor[(1716), float64], Tensor[(1716), float32], Tensor[(5, 3, 16), float64], Tensor[(240), float64], Tensor[(1716), float64], Tensor[(108, 2), float32], Tensor[(1716), float64], Tensor[(108, 2), float32]) */
}

def @func_3684() -> Tensor[(1716), float64] {
  @func_3682() /* ty=Tensor[(1716), float64] */
}

def @func_6831(%var_6804: Tensor[(15, 5, 16), uint8], %var_6805: Tensor[(15, 5, 16), uint8]) -> (Tensor[(15, 5, 16), bool], Tensor[(9, 6, 14), uint64], Tensor[(54, 14), uint64], Tensor[(8, 84), int8]) {
  %218 = cast(%var_6805, dtype="bool") /* ty=Tensor[(15, 5, 16), bool] */;
  %219 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_6804, dtype="bool") /* ty=Tensor[(15, 5, 16), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 84), int8] */, dtype="int8") /* ty=Tensor[(8, 84), int8] */;
  %225 = reshape(%222, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %226 = reshape(%223, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %227 = reshape(%224, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %228 = @func_2909(%225, %226, %227) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
  %229 = greater(%220, %221) /* ty=Tensor[(15, 5, 16), bool] */;
  %230 = %228.0;
  (%229, %230, meta[relay.Constant][11] /* ty=Tensor[(54, 14), uint64] */, meta[relay.Constant][12] /* ty=Tensor[(8, 84), int8] */)
}

def @func_8462() -> Tensor[(1716), float64] {
  @func_8460() /* ty=Tensor[(1716), float64] */
}

def @func_7019(%var_7013: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), int16],) {
  %231 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %232 = %231.2;
  %233 = cast(%var_7013, dtype="int16") /* ty=Tensor[(3, 6, 12), int16] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="int16") /* ty=Tensor[(3, 6, 12), int16] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %237 = multiply(%235, %236) /* ty=Tensor[(3, 6, 12), int16] */;
  (%237,)
}

def @func_3881() -> Tensor[(3, 6, 12), float32] {
  @func_3879() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_4890() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %238 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %239 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  %240 = %238.0;
  %241 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
  (%239, %240, %241)
}

def @func_5759(%var_5755: Tensor[(216), float32], %var_5756: Tensor[(756), uint64], %var_5757: Tensor[(672), int8], %var_5758: Tensor[(240), float64]) -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) {
  @func_5753(%var_5755, %var_5756, %var_5757, %var_5758) /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) */
}

def @func_7022(%var_7020: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), int16],) {
  @func_7019(%var_7020) /* ty=(Tensor[(3, 6, 12), int16],) */
}

def @func_7533(%var_7452: Tensor[(108, 2), float32]) -> (Tensor[(1716), float64], Tensor[(1716), float32], Tensor[(5, 3, 16), float64], Tensor[(240), float64], Tensor[(1716), float64], Tensor[(108, 2), float32], Tensor[(1716), float64], Tensor[(108, 2), float32]) {
  %242 = @func_7438() /* ty=(Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) */;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %244 = reshape(%243, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
  %245 = @func_3016(%244) /* ty=(Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) */;
  %246 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %247 = cast(%var_7452, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %248 = acos(%247) /* ty=Tensor[(108, 2), float32] */;
  %249 = cast(%var_7452, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %250 = reshape(%249, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %251 = @func_7019(%250) /* ty=(Tensor[(3, 6, 12), int16],) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="int64") /* ty=Tensor[(3, 6, 12), int64] */;
  %254 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %255 = cast(%248, dtype="int64") /* ty=Tensor[(108, 2), int64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %257 = right_shift(%255, %256) /* ty=Tensor[(108, 2), int64] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %259 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %260 = cast(%248, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %262 = mod(%260, %261) /* ty=Tensor[(108, 2), float32] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %264 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %265 = cast(%248, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %266 = shape_of(%257, dtype="int32") /* ty=Tensor[(2), int32] */;
  %267 = cast(%257, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %269 = @func_6580() /* ty=Tensor[(1716), float64] */;
  %270 = %242.0;
  %271 = %245.0;
  %272 = %246.0;
  %273 = tan(%263) /* ty=Tensor[(108, 2), float32] */;
  %274 = %264.0;
  %275 = minimum(%267, %268) /* ty=Tensor[(108, 2), float32] */;
  (%269, %270, %271, meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, %272, %273, %274, %275)
}

def @func_7099() -> (Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  @func_7097() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */
}

def @func_6581() -> Tensor[(1716), float64] {
  %277 = fn () -> Tensor[(1716), float64] {
    %276 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %276.0
  };
  %277() /* ty=Tensor[(1716), float64] */
}

def @func_9198(%var_9196: Tensor[(1716), float64], %var_9197: Tensor[(1800, 1), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1800, 216), float32]) {
  @func_9194(%var_9196, %var_9197) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1800, 216), float32]) */
}

def @func_1970() -> (Tensor[(1716), float64],) {
  %278 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %279 = %278.4;
  %280 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %281 = %280.4;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %283 = shape_of(%279, dtype="int32") /* ty=Tensor[(1), int32] */;
  %284 = cast(%279, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?), float64] */;
  %286 = floor_divide(%284, %285) /* ty=Tensor[(1716), float64] */;
  (%286,)
}

def @func_9789() -> (Tensor[(1716), uint16],) {
  %287 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %288 = %287.1;
  (%288,)
}

def @func_6018(%var_6015: Tensor[(312), float32], %var_6016: Tensor[(2240), uint8], %var_6017: Tensor[(672), int8]) -> (Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) {
  %309 = fn (%var_5999: Tensor[(312), float32], %var_6001: Tensor[(2240), uint8], %var_6002: Tensor[(672), int8]) -> (Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) {
    %289 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %290 = cast(%var_5999, dtype="float32") /* ty=Tensor[(312), float32] */;
    %291 = cast(meta[relay.Constant][14] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %292 = cast(%var_6001, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
    %293 = cast(%var_6002, dtype="int8") /* ty=Tensor[(672), int8] */;
    %294 = reshape(%290, newshape=[2, 13, 12]) /* ty=Tensor[(2, 13, 12), float32] */;
    %295 = reshape(%291, newshape=[216]) /* ty=Tensor[(216), float32] */;
    %296 = reshape(%292, newshape=[280, 8]) /* ty=Tensor[(280, 8), uint8] */;
    %297 = reshape(%293, newshape=[8, 84]) /* ty=Tensor[(8, 84), int8] */;
    %298 = @func_1455(%294, %295, %296, %297) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) */;
    %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %300 = reshape(%299, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
    %301 = @func_1774(%300) /* ty=Tensor[(12, 12, 2), float64] */;
    %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float64] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %306 = %289.0;
    %307 = %298.2;
    %308 = equal(%304, %305) /* ty=Tensor[(12, 12, 2), bool] */;
    (%306, %307, %var_5999, meta[relay.Constant][14] /* ty=Tensor[(216), float32] */, %var_6001, %var_6002, %308)
  };
  %309(%var_6015, %var_6016, %var_6017) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(1, 300), float32], Tensor[(312), float32], Tensor[(216), float32], Tensor[(2240), uint8], Tensor[(672), int8], Tensor[(12, 12, 2), bool]) */
}

def @func_8984(%var_8982: Tensor[(300), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
  @func_8981(%var_8982) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */
}

def @func_4740() -> Tensor[(1716), uint16] {
  %310 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %310.1
}

def @func_4732(%var_4671: Tensor[(715), int32], %var_4683: Tensor[(3, 600), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) {
  %311 = cast(%var_4671, dtype="int32") /* ty=Tensor[(715), int32] */;
  %312 = cast(%var_4671, dtype="int32") /* ty=Tensor[(715), int32] */;
  %313 = reshape(%311, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %314 = reshape(%312, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %315 = @func_2184(%313, %314) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %316 = cast(%var_4683, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
  %317 = sigmoid(%316) /* ty=Tensor[(3, 600), float32] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %319 = asin(%318) /* ty=Tensor[(3, 600), float64] */;
  %320 = cast(%var_4683, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %321 = reshape(%320, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %322 = @func_2569(%321) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %323 = %322.2;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %325 = shape_of(%319, dtype="int32") /* ty=Tensor[(2), int32] */;
  %326 = cast(%319, dtype="bool") /* ty=Tensor[(3, 600), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %328 = logical_and(%326, %327) /* ty=Tensor[(3, 600), bool] */;
  %329 = cast(%328, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %330 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %331 = reshape(%329, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %332 = reshape(%330, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), float64] */;
  %333 = @func_2676(%331, %332) /* ty=(Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) */;
  %334 = cast(%317, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %335 = cast(%328, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
  %336 = cast(%328, dtype="float64") /* ty=Tensor[(3, 600), float64] */;
  %337 = @func_3879() /* ty=Tensor[(3, 6, 12), float32] */;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %339 = reshape(%338, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %340 = %315.0;
  %341 = %333.2;
  %342 = log(%334) /* ty=Tensor[(3, 600), float64] */;
  %343 = log2(%335) /* ty=Tensor[(3, 600), float32] */;
  %344 = atan(%336) /* ty=Tensor[(3, 600), float64] */;
  %345 = @func_179(%339) /* ty=Tensor[(3, 6, 12), float32] */;
  (%337, %340, %var_4671, %341, %342, %343, %344, %345)
}

def @func_9421(%var_9412: Tensor[(300), float32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(312, 1), float32], Tensor[(1, 90), float32]) {
  %346 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %347 = cast(%var_9412, dtype="float32") /* ty=Tensor[(300), float32] */;
  %348 = cast(meta[relay.Constant][16] /* ty=Tensor[(312, 1), float32] */, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
  %349 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 90), float32] */, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %350 = reshape(%347, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %351 = reshape(%348, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %352 = reshape(%349, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %353 = @func_9317(%350, %351, %352) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */;
  %354 = %346.0;
  %355 = %353.0;
  (%354, %355, %var_9412, meta[relay.Constant][16] /* ty=Tensor[(312, 1), float32] */, meta[relay.Constant][17] /* ty=Tensor[(1, 90), float32] */)
}

def @func_8567() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
  %360 = fn () -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
    %356 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %357 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %358 = %356.1;
    %359 = %357.0;
    (%358, %359)
  };
  %360() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) */
}

def @func_8846() -> (Tensor[(216), float32],) {
  @func_8844() /* ty=(Tensor[(216), float32],) */
}

def @func_5245() -> (Tensor[(1716), uint16],) {
  %361 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
  %362 = %361.0;
  (%362,)
}

def @func_6484() -> (Tensor[(1716), uint16], Tensor[(1716), uint16]) {
  @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */
}

def @func_8909() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %363 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %364 = @func_8748() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */;
  %365 = %363.0;
  %366 = %364.4;
  %367 = @func_6742() /* ty=Tensor[(1716), float64] */;
  (%365, %366, %367)
}

def @func_8911() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  @func_8909() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */
}

def @func_5497() -> Tensor[(1716), float64] {
  %369 = fn () -> Tensor[(1716), float64] {
    %368 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %368.0
  };
  %369() /* ty=Tensor[(1716), float64] */
}

def @func_3310() -> (Tensor[(3, 6, 12), float32],) {
  %374 = fn () -> (Tensor[(3, 6, 12), float32],) {
    %370 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %371 = %370.1;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
    %373 = log10(%372) /* ty=Tensor[(3, 6, 12), float32] */;
    (%373,)
  };
  %374() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_6376() -> (Tensor[(1716), float64],) {
  %376 = fn () -> (Tensor[(1716), float64],) {
    %375 = @func_3682() /* ty=Tensor[(1716), float64] */;
    (%375,)
  };
  %376() /* ty=(Tensor[(1716), float64],) */
}

def @func_4892() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  @func_4890() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_5099(%var_5084: Tensor[(6, 15, 1), float32]) -> (Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) {
  %377 = cast(%var_5084, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %378 = rsqrt(%377) /* ty=Tensor[(6, 15, 1), float32] */;
  %379 = cast(%var_5084, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %383 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %384 = bitwise_and(%381, %382) /* ty=Tensor[(6, 15, ?), int8] */;
  %385 = %383.0;
  (%384, %385)
}

def @func_8283() -> (Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) {
  @func_8281() /* ty=(Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) */
}

def @func_8844() -> (Tensor[(216), float32],) {
  %386 = @func_5312() /* ty=(Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) */;
  %387 = %386.0;
  (%387,)
}

def @func_9321(%var_9318: Tensor[(300), float32], %var_9319: Tensor[(312), float32], %var_9320: Tensor[(90), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
  %410 = fn (%var_9259: Tensor[(300), float32], %var_9263: Tensor[(312), float32], %var_9299: Tensor[(90), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
    %388 = @func_7893() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %389 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
    %390 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
    %391 = cast(%var_9259, dtype="float32") /* ty=Tensor[(300), float32] */;
    %392 = reshape(%391, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %393 = @func_8981(%392) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */;
    %394 = cast(%var_9263, dtype="float32") /* ty=Tensor[(312), float32] */;
    %395 = reshape(%394, newshape=[156, 2]) /* ty=Tensor[(156, 2), float32] */;
    %396 = @func_6954(%395) /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) */;
    %397 = cast(%var_9299, dtype="float32") /* ty=Tensor[(90), float32] */;
    %398 = reshape(%397, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
    %399 = @func_7366(%398) /* ty=(Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) */;
    %400 = @func_7793() /* ty=(Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */;
    %401 = %388.0;
    %402 = %389.1;
    %403 = %390.1;
    %404 = %393.1;
    %405 = %396.4;
    %406 = @func_8079() /* ty=Tensor[(1716), float64] */;
    %407 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
    %408 = %399.1;
    %409 = %400.1;
    (%401, %402, %403, %404, %var_9259, %405, %var_9263, %406, %407, %408, %var_9299, %409)
  };
  %410(%var_9318, %var_9319, %var_9320) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(3, 6, 12), float64], Tensor[(1716), uint16], Tensor[(300), float32], Tensor[(2240), uint8], Tensor[(312), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_9582() -> Tensor[(3, 6, 12), float32] {
  @func_9580() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_828(%var_762: Tensor[(14, 4, 12), int8]) -> (Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) {
  %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 4, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 4, 12), int8] */;
  %412 = shape_of(%var_762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_762, dtype="int8") /* ty=Tensor[(14, 4, 12), int8] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %415 = cast(meta[relay.Constant][19] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %416 = reshape(%415, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %417 = cast(meta[relay.Constant][20] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %418 = cast(meta[relay.Constant][19] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %419 = reshape(%417, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %420 = reshape(%418, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %421 = @func_650(%419, %420) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 4, 12), int8] */, dtype="float32") /* ty=Tensor[(14, 4, 12), float32] */;
  %423 = left_shift(%413, %414) /* ty=Tensor[(14, 4, 12), int8] */;
  %424 = @func_179(%416) /* ty=Tensor[(3, 6, 12), float32] */;
  %425 = %421.2;
  %426 = rsqrt(%422) /* ty=Tensor[(14, 4, 12), float32] */;
  (%423, %424, meta[relay.Constant][19] /* ty=Tensor[(216), float32] */, %425, meta[relay.Constant][20] /* ty=Tensor[(300), float32] */, %426)
}

def @func_3016(%var_2982: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) {
  %427 = cast(%var_2982, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %428 = cast(meta[relay.Constant][21] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %429 = cast(meta[relay.Constant][21] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %430 = reshape(%428, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %431 = reshape(%429, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %432 = @func_2184(%430, %431) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %433 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %434 = cos(%427) /* ty=Tensor[(5, 3, 16), float64] */;
  %435 = %432.0;
  %436 = %433.0;
  (%434, %435, meta[relay.Constant][21] /* ty=Tensor[(715), int32] */, %436)
}

def @func_9386() -> Tensor[(1716), uint16] {
  %437 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %437.0
}

def @func_182(%var_180: Tensor[(3, 6, 12), float32]) -> Tensor[(3, 6, 12), float32] {
  @func_179(%var_180) /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_4084() -> Tensor[(3, 6, 12), float32] {
  @func_3879() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_6305(%var_6303: float32, %var_6304: Tensor[(3, 8, 7), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 8, 7), float64], Tensor[(3, 6, 12), float32]) {
  @func_6301(%var_6303, %var_6304) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 8, 7), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_1870() -> (Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) {
  %452 = fn () -> (Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) {
    %438 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
    %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
    %440 = reshape(%439, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
    %441 = @func_828(%440) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
    %442 = cast(meta[relay.Constant][24] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %443 = reshape(%442, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
    %444 = @func_972(%443) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
    %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
    %446 = reshape(%445, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
    %447 = @func_828(%446) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
    %448 = log(%438) /* ty=Tensor[(4, 4, 4), float64] */;
    %449 = %441.3;
    %450 = %444.1;
    %451 = %447.2;
    (%448, %449, meta[relay.Constant][23] /* ty=Tensor[(672), int8] */, %450, meta[relay.Constant][24] /* ty=Tensor[(1716), uint16] */, %451)
  };
  %452() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */
}

def @func_6852() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32]) {
  %453 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %454 = %453.1;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %456 = reshape(%455, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %457 = @func_179(%456) /* ty=Tensor[(3, 6, 12), float32] */;
  (%454, %457)
}

def @func_4387() -> Tensor[(3, 6, 12), float32] {
  @func_3879() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_6561(%var_6550: Tensor[(1800), uint32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(3, 6, 12), float32]) {
  %458 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %459 = cast(meta[relay.Constant][25] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %460 = cast(%var_6550, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %461 = reshape(%459, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %462 = reshape(%460, newshape=[3, 600]) /* ty=Tensor[(3, 600), uint32] */;
  %463 = @func_4732(%461, %462) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) */;
  %464 = %458.0;
  %465 = %463.0;
  %466 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  (%464, %465, meta[relay.Constant][25] /* ty=Tensor[(715), int32] */, %var_6550, %466)
}

def @func_8594() -> (Tensor[(3, 6, 12), bool],) {
  %469 = fn () -> (Tensor[(3, 6, 12), bool],) {
    %467 = @func_8281() /* ty=(Tensor[(3, 6, 12), bool], Tensor[(3, 6, 12), float32]) */;
    %468 = %467.0;
    (%468,)
  };
  %469() /* ty=(Tensor[(3, 6, 12), bool],) */
}

def @func_3817() -> (Tensor[(3, 6, 12), float32],) {
  %472 = fn () -> (Tensor[(3, 6, 12), float32],) {
    %470 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %471 = %470.0;
    (%471,)
  };
  %472() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_5773() -> Tensor[(1716), float64] {
  @func_5771() /* ty=Tensor[(1716), float64] */
}

def @func_8371() -> (Tensor[(1716), uint16], Tensor[(1716), float64]) {
  @func_8369() /* ty=(Tensor[(1716), uint16], Tensor[(1716), float64]) */
}

def @func_5176(%var_5175: Tensor[(2, 16, 2), float32]) -> (Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) {
  %481 = fn (%var_5129: Tensor[(2, 16, 2), float32]) -> (Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) {
    %473 = cast(%var_5129, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
    %474 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %475 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
    %476 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %477 = sinh(%473) /* ty=Tensor[(2, 16, 2), float32] */;
    %478 = %474.1;
    %479 = %475.0;
    %480 = %476.0;
    (%477, %478, %479, %480)
  };
  %481(%var_5175) /* ty=(Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) */
}

def @func_2773() -> (Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %488 = fn () -> (Tensor[(1716), float64], Tensor[(1716), uint16]) {
    %482 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %483 = %482.0;
    %484 = cast(%483, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %485 = reshape(%484, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
    %486 = @func_1905(%485) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
    %487 = %486.2;
    (%483, %487)
  };
  %488() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */
}

def @func_9213() -> (Tensor[(1716), uint64],) {
  %490 = fn () -> (Tensor[(1716), uint64],) {
    %489 = @func_3977() /* ty=Tensor[(1716), uint64] */;
    (%489,)
  };
  %490() /* ty=(Tensor[(1716), uint64],) */
}

def @func_3710() -> Tensor[(1716), float32] {
  %494 = fn () -> Tensor[(1716), float32] {
    %491 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="float32") /* ty=Tensor[(1716), float32] */;
    atanh(%493) /* ty=Tensor[(1716), float32] */
  };
  %494() /* ty=Tensor[(1716), float32] */
}

def @func_1461(%var_1457: Tensor[(2, 13, 12), float32], %var_1458: Tensor[(216), float32], %var_1459: Tensor[(280, 8), uint8], %var_1460: Tensor[(8, 84), int8]) -> (Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) {
  @func_1455(%var_1457, %var_1458, %var_1459, %var_1460) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) */
}

def @func_2700() -> (Tensor[(1716), float64],) {
  %497 = fn () -> (Tensor[(1716), float64],) {
    %495 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %496 = %495.0;
    (%496,)
  };
  %497() /* ty=(Tensor[(1716), float64],) */
}

def @func_2076() -> Tensor[(1716), float64] {
  %499 = fn () -> Tensor[(1716), float64] {
    %498 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %498.0
  };
  %499() /* ty=Tensor[(1716), float64] */
}

def @func_8388() -> (Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
  %508 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) {
    %500 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %501 = cast(meta[relay.Constant][26] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %502 = reshape(%501, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), float32] */;
    %503 = @func_5099(%502) /* ty=(Tensor[(6, 15, ?), int8], Tensor[(1716), float64]) */;
    %504 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %505 = %500.0;
    %506 = %503.0;
    %507 = %504.0;
    (%505, %506, meta[relay.Constant][26] /* ty=Tensor[(90), float32] */, %507)
  };
  %508() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(6, 15, ?), int8], Tensor[(90), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_4256(%var_4253: Tensor[(10, 11, 16), uint16], %var_4254: Tensor[(10, 11, 16), uint16], %var_4255: Tensor[(1800), uint32]) -> (Tensor[(10, 11, 16), uint16], Tensor[(3, 6, 12), float32], Tensor[(10, 11, 16), float32], Tensor[(900, 2), uint32], Tensor[(1716), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
  %536 = fn (%var_4209: Tensor[(10, 11, 16), uint16], %var_4210: Tensor[(10, 11, 16), uint16], %var_4228: Tensor[(1800), uint32]) -> (Tensor[(10, 11, 16), uint16], Tensor[(3, 6, 12), float32], Tensor[(10, 11, 16), float32], Tensor[(900, 2), uint32], Tensor[(1716), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) {
    %509 = cast(%var_4210, dtype="uint16") /* ty=Tensor[(10, 11, 16), uint16] */;
    %510 = shape_of(%var_4209, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_4209, dtype="uint16") /* ty=Tensor[(10, 11, 16), uint16] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %513 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %514 = cast(%var_4209, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
    %515 = shape_of(%var_4210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%var_4210, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %518 = cast(%var_4228, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %519 = reshape(%518, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %520 = @func_2569(%519) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
    %521 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
    %522 = %520.1;
    %523 = cast(%522, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
    %524 = reshape(%523, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %525 = @func_2569(%524) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
    %526 = cast(meta[relay.Constant][27] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %527 = shape_of(%var_4228, dtype="int32") /* ty=Tensor[(1), int32] */;
    %528 = cast(%var_4228, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %530 = add(%511, %512) /* ty=Tensor[(10, 11, 16), uint16] */;
    %531 = %513.1;
    %532 = power(%516, %517) /* ty=Tensor[(10, 11, 16), float32] */;
    %533 = %521.0;
    %534 = %525.1;
    %535 = bitwise_xor(%528, %529) /* ty=Tensor[(1800), uint32] */;
    (%530, %531, %532, %522, %533, %534, %535)
  };
  %536(%var_4253, %var_4254, %var_4255) /* ty=(Tensor[(10, 11, 16), uint16], Tensor[(3, 6, 12), float32], Tensor[(10, 11, 16), float32], Tensor[(900, 2), uint32], Tensor[(1716), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */
}

def @func_6301(%var_6265: float32, %var_6266: Tensor[(3, 8, 7), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 8, 7), float64], Tensor[(3, 6, 12), float32]) {
  %537 = @func_5608() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %538 = cast(%var_6265, dtype="float32") /* ty=float32 */;
  %539 = cast(%var_6266, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %540 = floor_divide(%538, %539) /* ty=Tensor[(3, 8, 7), float32] */;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(3, 8, 7), float64] */;
  %542 = @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %543 = %537.0;
  %544 = log2(%541) /* ty=Tensor[(3, 8, 7), float64] */;
  %545 = %542.0;
  (%543, %544, %545)
}

def @func_9194(%var_9175: Tensor[(1716), float64], %var_9176: Tensor[(1800, 1), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1800, 216), float32]) {
  %546 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %547 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
  %548 = cast(%var_9175, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %549 = cast(%var_9176, dtype="uint32") /* ty=Tensor[(1800, 1), uint32] */;
  %550 = reshape(%548, newshape=[1716]) /* ty=Tensor[(1716), float64] */;
  %551 = reshape(%549, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %552 = @func_6727(%550, %551) /* ty=(Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) */;
  %553 = %552.4;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(216), float32] */;
  %555 = cast(%var_9176, dtype="float32") /* ty=Tensor[(1800, 1), float32] */;
  %556 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %557 = %546.0;
  %558 = %547.0;
  %559 = minimum(%554, %555) /* ty=Tensor[(1800, 216), float32] */;
  (%556, %557, %558, %var_9175, %559)
}

def @func_7004() -> (Tensor[(1716), float32],) {
  %564 = fn () -> (Tensor[(1716), float32],) {
    %560 = @func_6375() /* ty=(Tensor[(1716), float64],) */;
    %561 = %560.0;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %563 = cos(%562) /* ty=Tensor[(1716), float32] */;
    (%563,)
  };
  %564() /* ty=(Tensor[(1716), float32],) */
}

def @func_3805() -> Tensor[(1716), float64] {
  %566 = fn () -> Tensor[(1716), float64] {
    %565 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %565.2
  };
  %566() /* ty=Tensor[(1716), float64] */
}

def @func_9388() -> Tensor[(1716), uint16] {
  @func_9386() /* ty=Tensor[(1716), uint16] */
}

def @func_6727(%var_6696: Tensor[(1716), float64], %var_6704: Tensor[(1800), uint32]) -> (Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) {
  %567 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
  %568 = %567.0;
  %569 = cast(%var_6696, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(1), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?), bool] */;
  %573 = cast(%var_6704, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %574 = reshape(%573, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %575 = @func_2254(%574) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) */;
  %576 = cast(meta[relay.Constant][28] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %577 = cast(meta[relay.Constant][29] /* ty=Tensor[(756), uint64] */, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %578 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 168), int8] */, dtype="int8") /* ty=Tensor[(4, 168), int8] */;
  %579 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %580 = reshape(%576, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %581 = reshape(%577, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %582 = reshape(%578, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %583 = reshape(%579, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %584 = @func_5753(%580, %581, %582, %583) /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) */;
  %585 = less_equal(%571, %572) /* ty=Tensor[(1716), bool] */;
  %586 = %575.1;
  %587 = %584.6;
  (%585, %586, %var_6704, %587, meta[relay.Constant][28] /* ty=Tensor[(216), float32] */, meta[relay.Constant][29] /* ty=Tensor[(756), uint64] */, meta[relay.Constant][30] /* ty=Tensor[(4, 168), int8] */, meta[relay.Constant][31] /* ty=Tensor[(240), float64] */)
}

def @func_2025() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %592 = fn () -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
    %588 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %589 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %590 = %588.0;
    %591 = %589.3;
    (%590, %591)
  };
  %592() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_3979() -> Tensor[(1716), uint64] {
  @func_3977() /* ty=Tensor[(1716), uint64] */
}

def @func_2254(%var_2245: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(12, 15, 10), uint32], Tensor[(1800), uint32]) {
  %593 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %594 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %595 = cast(%var_2245, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %596 = reshape(%595, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %597 = @func_1551(%596) /* ty=(Tensor[(12, 15, 10), uint32],) */;
  %598 = %593.1;
  %599 = %594.0;
  %600 = %597.0;
  (%598, %599, %600, %var_2245)
}

def @func_1905(%var_1900: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) {
  %601 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %602 = cast(%var_1900, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %603 = reshape(%602, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %604 = @func_972(%603) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %605 = %601.3;
  %606 = %604.1;
  (%605, %606, %var_1900)
}

def @func_8680() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32]) {
  %607 = @func_2960() /* ty=(Tensor[(1716), uint16],) */;
  %608 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %609 = %607.0;
  %610 = %608.1;
  (%609, %610)
}

def @func_7793() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %611 = @func_7097() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %612 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %613 = %611.0;
  (%612, %613)
}

def @func_3775(%var_3756: Tensor[(1716), float32], %var_3773: Tensor[(13, 55), int32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) {
  %614 = @func_3581() /* ty=Tensor[(1716), float32] */;
  %615 = cast(%var_3756, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(1), int32] */;
  %617 = cast(%614, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?), float64] */;
  %619 = cast(%614, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %620 = reshape(%619, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
  %621 = @func_972(%620) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
  %622 = %621.1;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %624 = cast(%var_3773, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %625 = cast(%var_3773, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %626 = reshape(%624, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %627 = reshape(%625, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %628 = @func_2184(%626, %627) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %629 = add(%617, %618) /* ty=Tensor[(1716), float64] */;
  %630 = atanh(%623) /* ty=Tensor[(3, 6, 12), float32] */;
  %631 = %628.0;
  (%629, %630, %631, %var_3773)
}

def @func_1777(%var_1775: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), float64] {
  @func_1774(%var_1775) /* ty=Tensor[(12, 12, 2), float64] */
}

def @func_5417() -> (Tensor[(3, 6, 12), float32],) {
  @func_5415() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_6656() -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(1716), uint16]) {
  %640 = fn () -> (Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(1716), uint16]) {
    %632 = @func_5919() /* ty=(Tensor[(1716), float32], Tensor[(672), int8], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(14, 4, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %633 = %632.5;
    %634 = cast(%633, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %635 = reshape(%634, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
    %636 = @func_4038(%635) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) */;
    %637 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %638 = %636.1;
    %639 = %637.1;
    (%633, %638, %639)
  };
  %640() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(1716), uint16]) */
}

def @func_3489() -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) {
  %641 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
  %642 = cast(meta[relay.Constant][32] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %643 = reshape(%642, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %644 = @func_2760(%643) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %647 = cast(meta[relay.Constant][32] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %648 = reshape(%647, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %649 = @func_1551(%648) /* ty=(Tensor[(12, 15, 10), uint32],) */;
  %650 = cast(meta[relay.Constant][32] /* ty=Tensor[(1800), uint32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %651 = %641.0;
  %652 = asinh(%646) /* ty=Tensor[(3, 6, 12), float32] */;
  %653 = %649.0;
  %654 = asinh(%650) /* ty=Tensor[(1800), float32] */;
  (%651, %652, %653, %654)
}

def @func_7895() -> (Tensor[(3, 6, 12), float32],) {
  @func_7893() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_6899() -> Tensor[(1716), uint16] {
  @func_6897() /* ty=Tensor[(1716), uint16] */
}

def @func_9424(%var_9422: Tensor[(300), float32]) -> (Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(312, 1), float32], Tensor[(1, 90), float32]) {
  @func_9421(%var_9422) /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(312, 1), float32], Tensor[(1, 90), float32]) */
}

def @func_9771() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
  %663 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
    %655 = @func_5044() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */;
    %656 = cast(meta[relay.Constant][33] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %657 = reshape(%656, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %658 = @func_8981(%657) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */;
    %659 = %655.2;
    %660 = @func_3709() /* ty=Tensor[(1716), float32] */;
    %661 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
    %662 = %658.3;
    (%659, %660, %661, %662, meta[relay.Constant][33] /* ty=Tensor[(300), float32] */)
  };
  %663() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) */
}

def @func_9791() -> (Tensor[(1716), uint16],) {
  @func_9789() /* ty=(Tensor[(1716), uint16],) */
}

def @func_8793() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
  %668 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) {
    %664 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %665 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
    %666 = @func_5228() /* ty=Tensor[(1716), float64] */;
    %667 = %664.0;
    (%665, %666, %667)
  };
  %668() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_1774(%var_1768: Tensor[(12, 12, 2), float64]) -> Tensor[(12, 12, 2), float64] {
  %669 = cast(%var_1768, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  asinh(%669) /* ty=Tensor[(12, 12, 2), float64] */
}

def @func_3582() -> Tensor[(1716), float32] {
  %673 = fn () -> Tensor[(1716), float32] {
    %670 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %671 = %670.4;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(1716), float32] */;
    sinh(%672) /* ty=Tensor[(1716), float32] */
  };
  %673() /* ty=Tensor[(1716), float32] */
}

def @func_5124() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64]) {
  %679 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64]) {
    %674 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
    %675 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
    %676 = cast(%675, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
    %677 = %674.1;
    %678 = tan(%676) /* ty=Tensor[(3, 6, 12), float64] */;
    (%677, %678)
  };
  %679() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64]) */
}

def @func_9830() -> (Tensor[(1716), float64], Tensor[(3, 16, 16), float32], Tensor[(768), float32]) {
  %680 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %681 = reshape(%680, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float32] */;
  %682 = @func_2075() /* ty=Tensor[(1716), float64] */;
  %683 = @func_8547(%681) /* ty=Tensor[(3, 16, 16), float32] */;
  (%682, %683, meta[relay.Constant][34] /* ty=Tensor[(768), float32] */)
}

def @func_6256() -> Tensor[(1716), uint16] {
  %685 = fn () -> Tensor[(1716), uint16] {
    %684 = @func_4097() /* ty=(Tensor[(1716), uint16],) */;
    %684.0
  };
  %685() /* ty=Tensor[(1716), uint16] */
}

def @func_5455(%var_5444: Tensor[(16, 11, 6), float64]) -> Tensor[(16, 11, 6), float64] {
  %686 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %687 = shape_of(%var_5444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_5444, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%688, %689) /* ty=Tensor[(16, 11, 6), float64] */
}

def @func_4086() -> Tensor[(3, 6, 12), float32] {
  @func_4084() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_7616(%var_7573: Tensor[(11, 156), float32], %var_7595: Tensor[(1716), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(11, 156), int32]) {
  %690 = cast(%var_7573, dtype="float32") /* ty=Tensor[(11, 156), float32] */;
  %691 = reshape(%690, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %692 = @func_4038(%691) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) */;
  %693 = %692.1;
  %694 = cast(%var_7595, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(1), int32] */;
  %696 = cast(%693, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?), float64] */;
  %698 = cast(%693, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %699 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %700 = cast(%var_7573, dtype="float32") /* ty=Tensor[(11, 156), float32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %702 = power(%700, %701) /* ty=Tensor[(11, 156), float32] */;
  %703 = cast(%702, dtype="int32") /* ty=Tensor[(11, 156), int32] */;
  %704 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %705 = cast(%var_7573, dtype="int32") /* ty=Tensor[(11, 156), int32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %707 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
  %708 = power(%696, %697) /* ty=Tensor[(1716), float64] */;
  %709 = left_shift(%705, %706) /* ty=Tensor[(11, 156), int32] */;
  (%707, %708, %709)
}

def @func_7914(%var_7909: Tensor[(1716), uint16]) -> (Tensor[(1716), uint32],) {
  %710 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
  %711 = %710.1;
  %712 = cast(%var_7909, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(1), int32] */;
  %714 = cast(%711, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %716 = bitwise_and(%714, %715) /* ty=Tensor[(1716), uint32] */;
  (%716,)
}

def @func_4942(%var_4918: Tensor[(3, 6, 12), float32], %var_4932: Tensor[(3, 6, 12), uint64]) -> (Tensor[(3, 6, 12), int32], Tensor[(3, 6, 12), bool]) {
  %717 = @func_3879() /* ty=Tensor[(3, 6, 12), float32] */;
  %718 = cast(%var_4918, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="int32") /* ty=Tensor[(3, 6, 12), int32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %722 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 6, 12), float32] */, dtype="uint64") /* ty=Tensor[(3, 6, 12), uint64] */;
  %723 = shape_of(%var_4918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%var_4918, dtype="uint64") /* ty=Tensor[(3, 6, 12), uint64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %726 = bitwise_xor(%724, %725) /* ty=Tensor[(3, 6, 12), uint64] */;
  %727 = cast(%var_4932, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = minimum(%720, %721) /* ty=Tensor[(3, 6, 12), int32] */;
  %732 = greater(%729, %730) /* ty=Tensor[(3, 6, 12), bool] */;
  (%731, %732)
}

def @func_8301() -> Tensor[(1716), float64] {
  @func_3742() /* ty=Tensor[(1716), float64] */
}

def @func_974(%var_973: Tensor[(13, 11, 12), uint16]) -> (Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) {
  %746 = fn (%var_955: Tensor[(13, 11, 12), uint16]) -> (Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) {
    %733 = cast(%var_955, dtype="uint16") /* ty=Tensor[(13, 11, 12), uint16] */;
    %734 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 12), uint16] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %737 = right_shift(%735, %736) /* ty=Tensor[(13, 11, 12), uint16] */;
    %738 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 11, 12), uint16] */, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%737, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %742 = cast(meta[relay.Constant][38] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %743 = reshape(%742, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %744 = floor_divide(%740, %741) /* ty=Tensor[(13, 11, 12), float64] */;
    %745 = @func_179(%743) /* ty=Tensor[(3, 6, 12), float32] */;
    (%744, %745, meta[relay.Constant][38] /* ty=Tensor[(216), float32] */)
  };
  %746(%var_973) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */
}

def @func_7228(%var_7225: Tensor[(715), int32], %var_7226: Tensor[(312), float32], %var_7227: Tensor[(64), float32]) -> (Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) {
  @func_7223(%var_7225, %var_7226, %var_7227) /* ty=(Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) */
}

def @func_6731(%var_6729: Tensor[(1716), float64], %var_6730: Tensor[(1800), uint32]) -> (Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) {
  @func_6727(%var_6729, %var_6730) /* ty=(Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) */
}

def @func_653(%var_651: Tensor[(2, 10, 15), float32], %var_652: Tensor[(216), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) {
  %770 = fn (%var_590: Tensor[(2, 10, 15), float32], %var_606: Tensor[(216), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) {
    %747 = cast(%var_606, dtype="float32") /* ty=Tensor[(216), float32] */;
    %748 = reshape(%747, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %749 = cast(%var_606, dtype="float32") /* ty=Tensor[(216), float32] */;
    %750 = reshape(%749, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %751 = @func_179(%748) /* ty=Tensor[(3, 6, 12), float32] */;
    %752 = cast(%751, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
    %753 = reshape(%752, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %754 = cast(%var_590, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
    %755 = acosh(%754) /* ty=Tensor[(2, 10, 15), float32] */;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
    %757 = sigmoid(%756) /* ty=Tensor[(2, 10, 15), float32] */;
    %758 = cast(%757, dtype="float64") /* ty=Tensor[(2, 10, 15), float64] */;
    %759 = atanh(%758) /* ty=Tensor[(2, 10, 15), float64] */;
    %760 = cast(%759, dtype="bool") /* ty=Tensor[(2, 10, 15), bool] */;
    %761 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %762 = cast(%755, dtype="bool") /* ty=Tensor[(2, 10, 15), bool] */;
    %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %764 = @func_179(%750) /* ty=Tensor[(3, 6, 12), float32] */;
    %765 = cast(%764, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
    %766 = reshape(%765, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %767 = @func_179(%753) /* ty=Tensor[(3, 6, 12), float32] */;
    %768 = not_equal(%762, %763) /* ty=Tensor[(2, 10, 15), bool] */;
    %769 = @func_179(%766) /* ty=Tensor[(3, 6, 12), float32] */;
    (%751, %var_606, %764, %767, %768, %769)
  };
  %770(%var_651, %var_652) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */
}

def @func_7989(%var_7986: Tensor[(715), int32], %var_7987: Tensor[(312), float32], %var_7988: Tensor[(64), float32]) -> (Tensor[(1716), float64], Tensor[(715), int32], Tensor[(715), int32], Tensor[(312), float32], Tensor[(64), float32]) {
  %780 = fn (%var_7965: Tensor[(715), int32], %var_7966: Tensor[(312), float32], %var_7967: Tensor[(64), float32]) -> (Tensor[(1716), float64], Tensor[(715), int32], Tensor[(715), int32], Tensor[(312), float32], Tensor[(64), float32]) {
    %771 = cast(%var_7965, dtype="int32") /* ty=Tensor[(715), int32] */;
    %772 = cast(%var_7966, dtype="float32") /* ty=Tensor[(312), float32] */;
    %773 = cast(%var_7967, dtype="float32") /* ty=Tensor[(64), float32] */;
    %774 = reshape(%771, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %775 = reshape(%772, newshape=[312]) /* ty=Tensor[(312), float32] */;
    %776 = reshape(%773, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %777 = @func_7223(%774, %775, %776) /* ty=(Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) */;
    %778 = @func_5771() /* ty=Tensor[(1716), float64] */;
    %779 = %777.2;
    (%778, %779, %var_7965, %var_7966, %var_7967)
  };
  %780(%var_7986, %var_7987, %var_7988) /* ty=(Tensor[(1716), float64], Tensor[(715), int32], Tensor[(715), int32], Tensor[(312), float32], Tensor[(64), float32]) */
}

def @func_4946(%var_4944: Tensor[(3, 6, 12), float32], %var_4945: Tensor[(3, 6, 12), uint64]) -> (Tensor[(3, 6, 12), int32], Tensor[(3, 6, 12), bool]) {
  @func_4942(%var_4944, %var_4945) /* ty=(Tensor[(3, 6, 12), int32], Tensor[(3, 6, 12), bool]) */
}

def @func_7917(%var_7915: Tensor[(1716), uint16]) -> (Tensor[(1716), uint32],) {
  @func_7914(%var_7915) /* ty=(Tensor[(1716), uint32],) */
}

def @func_2941() -> (Tensor[(1716), int8], Tensor[(1716), float64]) {
  %792 = fn () -> (Tensor[(1716), int8], Tensor[(1716), float64]) {
    %781 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
    %782 = %781.0;
    %783 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %784 = %783.0;
    %785 = cast(%784, dtype="int8") /* ty=Tensor[(1716), int8] */;
    %786 = shape_of(%782, dtype="int32") /* ty=Tensor[(1), int32] */;
    %787 = cast(%782, dtype="int8") /* ty=Tensor[(1716), int8] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?), int8] */;
    %789 = @func_2307() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %790 = bitwise_xor(%787, %788) /* ty=Tensor[(1716), int8] */;
    %791 = %789.0;
    (%790, %791)
  };
  %792() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */
}

def @func_6217() -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
  %796 = fn () -> (Tensor[(1716), float64], Tensor[(1716), float64]) {
    %793 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
    %794 = %793.0;
    %795 = @func_5771() /* ty=Tensor[(1716), float64] */;
    (%794, %795)
  };
  %796() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */
}

def @func_7439() -> (Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %805 = fn () -> (Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) {
    %797 = @func_7003() /* ty=(Tensor[(1716), float32],) */;
    %798 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
    %799 = @func_6482() /* ty=(Tensor[(1716), uint16], Tensor[(1716), uint16]) */;
    %800 = @func_6216() /* ty=(Tensor[(1716), float64], Tensor[(1716), float64]) */;
    %801 = %797.0;
    %802 = %798.0;
    %803 = %799.1;
    %804 = %800.0;
    (%801, %802, %803, %804)
  };
  %805() /* ty=(Tensor[(1716), float32], Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64]) */
}

def @func_8303() -> Tensor[(1716), float64] {
  @func_8301() /* ty=Tensor[(1716), float64] */
}

def @func_4791() -> Tensor[(1716), float64] {
  @func_2075() /* ty=Tensor[(1716), float64] */
}

def @func_3609() -> Tensor[(3, 6, 12), float32] {
  %806 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %806.1
}

def @func_3744() -> Tensor[(1716), float64] {
  @func_3742() /* ty=Tensor[(1716), float64] */
}

def @func_4869() -> Tensor[(3, 6, 12), float32] {
  @func_4387() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_9467(%var_9463: Tensor[(15, 4, 13), uint16], %var_9464: Tensor[(15, 4, 13), uint16], %var_9465: Tensor[(715), int32], %var_9466: Tensor[(1800), uint32]) -> (Tensor[(15, 4, 13), uint16], Tensor[(1716), float64], Tensor[(3, 600), float64], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(240), float64]) {
  %822 = fn (%var_9438: Tensor[(15, 4, 13), uint16], %var_9439: Tensor[(15, 4, 13), uint16], %var_9451: Tensor[(715), int32], %var_9452: Tensor[(1800), uint32]) -> (Tensor[(15, 4, 13), uint16], Tensor[(1716), float64], Tensor[(3, 600), float64], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(240), float64]) {
    %807 = cast(%var_9439, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
    %808 = shape_of(%var_9438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%var_9438, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %811 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
    %812 = cast(%var_9451, dtype="int32") /* ty=Tensor[(715), int32] */;
    %813 = cast(%var_9452, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %814 = reshape(%812, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %815 = reshape(%813, newshape=[3, 600]) /* ty=Tensor[(3, 600), uint32] */;
    %816 = @func_4732(%814, %815) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(12, 15, 10), bool], Tensor[(3, 600), float64], Tensor[(3, 600), float32], Tensor[(3, 600), float64], Tensor[(3, 6, 12), float32]) */;
    %817 = @func_9110() /* ty=(Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) */;
    %818 = right_shift(%809, %810) /* ty=Tensor[(15, 4, 13), uint16] */;
    %819 = %811.0;
    %820 = %816.6;
    %821 = %817.6;
    (%818, %819, %820, %var_9451, %var_9452, %821)
  };
  %822(%var_9463, %var_9464, %var_9465, %var_9466) /* ty=(Tensor[(15, 4, 13), uint16], Tensor[(1716), float64], Tensor[(3, 600), float64], Tensor[(715), int32], Tensor[(1800), uint32], Tensor[(240), float64]) */
}

def @func_6066() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %828 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
    %823 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %824 = @func_4632() /* ty=(Tensor[(1716), float64],) */;
    %825 = @func_4387() /* ty=Tensor[(3, 6, 12), float32] */;
    %826 = %823.1;
    %827 = %824.0;
    (%825, %826, %827)
  };
  %828() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) */
}

def @func_8079() -> Tensor[(1716), float64] {
  %829 = @func_3489() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(12, 15, 10), uint32], Tensor[(1800), float32]) */;
  %829.0
}

def @func_5228() -> Tensor[(1716), float64] {
  %830 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %830.1
}

def @func_8750() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  @func_8748() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool], Tensor[(1800), uint32], Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_4871() -> Tensor[(3, 6, 12), float32] {
  @func_4869() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_5314() -> (Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  @func_5312() /* ty=(Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) */
}

def @func_5247() -> (Tensor[(1716), uint16],) {
  @func_5245() /* ty=(Tensor[(1716), uint16],) */
}

def @func_4295(%var_4294: Tensor[(1716), int8]) -> Tensor[(1716), float32] {
  %837 = fn (%var_4273: Tensor[(1716), int8]) -> Tensor[(1716), float32] {
    %831 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
    %832 = %831.0;
    %833 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(1), int32] */;
    %835 = cast(%832, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?), float32] */;
    floor_mod(%835, %836) /* ty=Tensor[(1716), float32] */
  };
  %837(%var_4294) /* ty=Tensor[(1716), float32] */
}

def @func_9859() -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
  %841 = fn () -> (Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) {
    %838 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %839 = @func_3709() /* ty=Tensor[(1716), float32] */;
    %840 = %838.0;
    (%839, %840)
  };
  %841() /* ty=(Tensor[(1716), float32], Tensor[(3, 6, 12), float32]) */
}

def @func_6482() -> (Tensor[(1716), uint16], Tensor[(1716), uint16]) {
  %842 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %843 = @func_5245() /* ty=(Tensor[(1716), uint16],) */;
  %844 = %842.0;
  %845 = %843.0;
  (%844, %845)
}

def @func_4389() -> Tensor[(3, 6, 12), float32] {
  @func_4387() /* ty=Tensor[(3, 6, 12), float32] */
}

def @main(%var_9961: Tensor[(1716), uint16]) -> Tensor[(1716), bool] {
  %846 = @func_5247() /* ty=(Tensor[(1716), uint16],) */;
  %847 = %846.0;
  %848 = cast(%var_9961, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(1), int32] */;
  %850 = cast(%847, dtype="bool") /* ty=Tensor[(1716), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%850, %851) /* ty=Tensor[(1716), bool] */
}

def @func_6439(%var_6438: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(13, 11, 12), float64], Tensor[(1716), uint16]) {
  %857 = fn (%var_6425: Tensor[(1716), uint16]) -> (Tensor[(3, 6, 12), float32], Tensor[(13, 11, 12), float64], Tensor[(1716), uint16]) {
    %852 = cast(%var_6425, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %853 = reshape(%852, newshape=[13, 11, 12]) /* ty=Tensor[(13, 11, 12), uint16] */;
    %854 = @func_972(%853) /* ty=(Tensor[(13, 11, 12), float64], Tensor[(3, 6, 12), float32], Tensor[(216), float32]) */;
    %855 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
    %856 = %854.0;
    (%855, %856, %var_6425)
  };
  %857(%var_6438) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(13, 11, 12), float64], Tensor[(1716), uint16]) */
}

def @func_5045() -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) {
  %869 = fn () -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) {
    %858 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %859 = %858.0;
    %860 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%859, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %864 = @func_3513() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */;
    %865 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %866 = subtract(%862, %863) /* ty=Tensor[(3, 6, 12), float32] */;
    %867 = %864.1;
    %868 = %865.1;
    (%866, %867, %868)
  };
  %869() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float64], Tensor[(3, 6, 12), float32]) */
}

def @func_2447(%var_2445: Tensor[(900, 2), uint32]) -> (Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) {
  @func_2444(%var_2445) /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) */
}

def @func_3514() -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) {
  %876 = fn () -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) {
    %870 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %871 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
    %872 = %871.0;
    %873 = cast(%872, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
    %874 = %870.1;
    %875 = acos(%873) /* ty=Tensor[(3, 6, 12), float64] */;
    (%874, %875)
  };
  %876() /* ty=(Tensor[(1716), uint16], Tensor[(3, 6, 12), float64]) */
}

def @func_5312() -> (Tensor[(216), float32], Tensor[(1716), uint16], Tensor[(1716), float64]) {
  %877 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %878 = @func_4750() /* ty=(Tensor[(1716), uint16],) */;
  %879 = %877.5;
  %880 = %878.0;
  %881 = @func_2075() /* ty=Tensor[(1716), float64] */;
  (%879, %880, %881)
}

def @func_4742() -> Tensor[(1716), uint16] {
  @func_4740() /* ty=Tensor[(1716), uint16] */
}

def @func_2679(%var_2677: Tensor[(1800), uint32], %var_2678: Tensor[(12, 15, 10), float64]) -> (Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) {
  %893 = fn (%var_2616: Tensor[(1800), uint32], %var_2656: Tensor[(12, 15, 10), float64]) -> (Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) {
    %882 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %883 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %884 = reshape(%883, newshape=[900, 2]) /* ty=Tensor[(900, 2), uint32] */;
    %885 = @func_2444(%884) /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(900, 2), uint32], Tensor[(12, 15, 10), float64], Tensor[(1716), float64], Tensor[(12, 15, 10), float64]) */;
    %886 = %885.3;
    %887 = cast(%var_2656, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %891 = %882.2;
    %892 = greater_equal(%889, %890) /* ty=Tensor[(12, 15, 10), bool] */;
    (%891, %var_2616, %892)
  };
  %893(%var_2677, %var_2678) /* ty=(Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) */
}

def @func_5415() -> (Tensor[(3, 6, 12), float32],) {
  %894 = @func_3309() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %895 = %894.0;
  (%895,)
}

def @func_831(%var_829: Tensor[(14, 4, 12), int8]) -> (Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) {
  @func_828(%var_829) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */
}

def @func_7097() -> (Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %896 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %897 = reshape(%896, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %898 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
  %899 = @func_1774(%897) /* ty=Tensor[(12, 12, 2), float64] */;
  (%898, %899, meta[relay.Constant][40] /* ty=Tensor[(288), float64] */)
}

def @func_3384() -> Tensor[(3, 6, 12), float32] {
  %901 = fn () -> Tensor[(3, 6, 12), float32] {
    %900 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %900.1
  };
  %901() /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_6521() -> Tensor[(1716), uint64] {
  %902 = fn () -> Tensor[(1716), uint64] {
    @func_3977() /* ty=Tensor[(1716), uint64] */
  };
  %902() /* ty=Tensor[(1716), uint64] */
}

def @func_8149() -> Tensor[(15, 13, 13), int16] {
  %909 = fn () -> Tensor[(15, 13, 13), int16] {
    %903 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 13), float32] */;
    %904 = atanh(%903) /* ty=Tensor[(15, 13, 13), float32] */;
    %905 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 13, 13), float32] */, dtype="int16") /* ty=Tensor[(15, 13, 13), int16] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="int16") /* ty=Tensor[(15, 13, 13), int16] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    add(%907, %908) /* ty=Tensor[(15, 13, 13), int16] */
  };
  %909() /* ty=Tensor[(15, 13, 13), int16] */
}

def @func_6897() -> Tensor[(1716), uint16] {
  %910 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %910.4
}

def @func_2909(%var_2901: Tensor[(9, 6, 14), uint64], %var_2902: Tensor[(9, 6, 14), uint64], %var_2907: Tensor[(672), int8]) -> (Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) {
  %911 = cast(%var_2902, dtype="uint64") /* ty=Tensor[(9, 6, 14), uint64] */;
  %912 = shape_of(%var_2901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%var_2901, dtype="uint64") /* ty=Tensor[(9, 6, 14), uint64] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %915 = cast(%var_2907, dtype="int8") /* ty=Tensor[(672), int8] */;
  %916 = reshape(%915, newshape=[14, 4, 12]) /* ty=Tensor[(14, 4, 12), int8] */;
  %917 = @func_828(%916) /* ty=(Tensor[(14, 4, 12), int8], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(300), float32], Tensor[(14, 4, 12), float32]) */;
  %918 = add(%913, %914) /* ty=Tensor[(9, 6, 14), uint64] */;
  %919 = %917.4;
  (%918, %919, %var_2907)
}

def @func_5230() -> Tensor[(1716), float64] {
  @func_5228() /* ty=Tensor[(1716), float64] */
}

def @func_7369(%var_7367: Tensor[(1, 90), float32]) -> (Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) {
  @func_7366(%var_7367) /* ty=(Tensor[(7, 7, 2), float64], Tensor[(1716), float64], Tensor[(1, 90), float64]) */
}

def @func_7269() -> (Tensor[(1716), uint16],) {
  %921 = fn () -> (Tensor[(1716), uint16],) {
    %920 = @func_4740() /* ty=Tensor[(1716), uint16] */;
    (%920,)
  };
  %921() /* ty=(Tensor[(1716), uint16],) */
}

def @func_2282() -> (Tensor[(1716), float64],) {
  %924 = fn () -> (Tensor[(1716), float64],) {
    %922 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
    %923 = %922.0;
    (%923,)
  };
  %924() /* ty=(Tensor[(1716), float64],) */
}

def @func_5753(%var_5683: Tensor[(216), float32], %var_5733: Tensor[(756), uint64], %var_5734: Tensor[(672), int8], %var_5738: Tensor[(240), float64]) -> (Tensor[(1716), uint16], Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(13, 55), bool], Tensor[(300), float32], Tensor[(756), uint64], Tensor[(672), int8], Tensor[(11, 13, 5), bool], Tensor[(240), float64]) {
  %925 = @func_5245() /* ty=(Tensor[(1716), uint16],) */;
  %926 = cast(%var_5683, dtype="float32") /* ty=Tensor[(216), float32] */;
  %927 = reshape(%926, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
  %928 = @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */;
  %929 = %925.0;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %931 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 55), int32] */, dtype="int32") /* ty=Tensor[(13, 55), int32] */;
  %932 = reshape(%930, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %933 = reshape(%931, newshape=[13, 55]) /* ty=Tensor[(13, 55), int32] */;
  %934 = @func_3775(%932, %933) /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32], Tensor[(11, 13, 5), bool], Tensor[(13, 55), int32]) */;
  %935 = %934.3;
  %936 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 55), int32] */, dtype="bool") /* ty=Tensor[(13, 55), bool] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(2), int32] */;
  %938 = cast(%935, dtype="bool") /* ty=Tensor[(13, 55), bool] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %940 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %941 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %942 = cast(%var_5734, dtype="int8") /* ty=Tensor[(672), int8] */;
  %943 = reshape(%940, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %944 = reshape(%941, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint64] */;
  %945 = reshape(%942, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %946 = @func_2909(%943, %944, %945) /* ty=(Tensor[(9, 6, 14), uint64], Tensor[(300), float32], Tensor[(672), int8]) */;
  %947 = cast(%var_5738, dtype="float64") /* ty=Tensor[(240), float64] */;
  %948 = reshape(%947, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
  %949 = @func_3016(%948) /* ty=(Tensor[(5, 3, 16), float64], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64]) */;
  %950 = @func_179(%927) /* ty=Tensor[(3, 6, 12), float32] */;
  %951 = %928.0;
  %952 = @func_5496() /* ty=Tensor[(1716), float64] */;
  %953 = greater_equal(%938, %939) /* ty=Tensor[(13, 55), bool] */;
  %954 = %946.1;
  %955 = %949.1;
  (%929, %950, %var_5683, %951, %952, %953, %954, %var_5733, %var_5734, %955, %var_5738)
}

def @func_179(%var_176: Tensor[(3, 6, 12), float32]) -> Tensor[(3, 6, 12), float32] {
  %956 = cast(%var_176, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  erf(%956) /* ty=Tensor[(3, 6, 12), float32] */
}

def @func_4493(%var_4457: Tensor[(3, 14, 11), float64], %var_4458: Tensor[(3, 14, 11), float64], %var_4478: Tensor[(1800), uint32], %var_4484: Tensor[(216), float32], %var_4485: Tensor[(1, 2240), uint8], %var_4486: Tensor[(672), int8]) -> (Tensor[(3, 14, 11), float64], Tensor[(900, 2), uint32], Tensor[(1800), uint32], Tensor[(8, 84), int8], Tensor[(312, 1), float32], Tensor[(216), float32], Tensor[(1, 2240), uint8], Tensor[(672), int8]) {
  %957 = cast(%var_4458, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
  %958 = shape_of(%var_4457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(%var_4457, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %961 = cast(%var_4478, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %962 = reshape(%961, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %963 = @func_2569(%962) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(900, 2), uint32], Tensor[(1800), uint32]) */;
  %964 = cast(meta[relay.Constant][44] /* ty=Tensor[(312, 1), float32] */, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
  %965 = cast(%var_4484, dtype="float32") /* ty=Tensor[(216), float32] */;
  %966 = cast(%var_4485, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
  %967 = cast(%var_4486, dtype="int8") /* ty=Tensor[(672), int8] */;
  %968 = reshape(%964, newshape=[2, 13, 12]) /* ty=Tensor[(2, 13, 12), float32] */;
  %969 = reshape(%965, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %970 = reshape(%966, newshape=[280, 8]) /* ty=Tensor[(280, 8), uint8] */;
  %971 = reshape(%967, newshape=[8, 84]) /* ty=Tensor[(8, 84), int8] */;
  %972 = @func_1455(%968, %969, %970, %971) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1, 300), float32], Tensor[(216), float32], Tensor[(672), int8], Tensor[(140, 1), uint8], Tensor[(280, 8), uint8], Tensor[(8, 84), int8], Tensor[(108, 2), float32]) */;
  %973 = floor_mod(%959, %960) /* ty=Tensor[(3, 14, 11), float64] */;
  %974 = %963.1;
  %975 = %972.7;
  (%973, %974, %var_4478, %975, meta[relay.Constant][44] /* ty=Tensor[(312, 1), float32] */, %var_4484, %var_4485, %var_4486)
}

def @func_7223(%var_7202: Tensor[(715), int32], %var_7205: Tensor[(312), float32], %var_7214: Tensor[(64), float32]) -> (Tensor[(216), float32], Tensor[(11, 13, 5), bool], Tensor[(715), int32], Tensor[(1716), float64], Tensor[(312), float32], Tensor[(2, 16, 2), float32], Tensor[(64), float32], Tensor[(1716), int64]) {
  %976 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %977 = cast(%var_7202, dtype="int32") /* ty=Tensor[(715), int32] */;
  %978 = cast(%var_7202, dtype="int32") /* ty=Tensor[(715), int32] */;
  %979 = reshape(%977, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %980 = reshape(%978, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int32] */;
  %981 = @func_2184(%979, %980) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %982 = cast(%var_7205, dtype="float32") /* ty=Tensor[(312), float32] */;
  %983 = reshape(%982, newshape=[156, 2]) /* ty=Tensor[(156, 2), float32] */;
  %984 = @func_6954(%983) /* ty=(Tensor[(1716), float64], Tensor[(1716), float64], Tensor[(4, 4, 4), float64], Tensor[(156, 2), float32], Tensor[(2240), uint8], Tensor[(336, 2), int8]) */;
  %985 = cast(%var_7214, dtype="float32") /* ty=Tensor[(64), float32] */;
  %986 = reshape(%985, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %987 = @func_5174(%986) /* ty=(Tensor[(2, 16, 2), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %988 = %984.0;
  %989 = cast(%988, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %990 = reshape(%989, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
  %991 = @func_3195(%990) /* ty=(Tensor[(1716), int64],) */;
  %992 = %976.5;
  %993 = %981.0;
  %994 = %987.0;
  %995 = %991.0;
  (%992, %993, %var_7202, %988, %var_7205, %994, %var_7214, %995)
}

def @func_8550(%var_8548: Tensor[(3, 16, 16), float32]) -> Tensor[(3, 16, 16), float32] {
  @func_8547(%var_8548) /* ty=Tensor[(3, 16, 16), float32] */
}

def @func_9110() -> (Tensor[(1716), uint64], Tensor[(672), int8], Tensor[(3, 600), uint32], Tensor[(1716), float32], Tensor[(1716), uint64], Tensor[(12, 12, 2), bool], Tensor[(240), float64]) {
  %996 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %997 = reshape(%996, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %998 = @func_2760(%997) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */;
  %999 = @func_3977() /* ty=Tensor[(1716), uint64] */;
  %1000 = cast(%999, dtype="int8") /* ty=Tensor[(1716), int8] */;
  %1001 = reshape(%1000, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
  %1002 = @func_7097() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %1003 = %1002.1;
  %1004 = cast(%1003, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %1005 = atan(%1004) /* ty=Tensor[(12, 12, 2), float64] */;
  %1006 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %1007 = shape_of(%1005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%1005, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1010 = cast(%999, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %1011 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, dtype="uint32") /* ty=Tensor[(3, 600), uint32] */;
  %1012 = reshape(%1010, newshape=[1716]) /* ty=Tensor[(1716), float64] */;
  %1013 = reshape(%1011, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %1014 = @func_6727(%1012, %1013) /* ty=(Tensor[(1716), bool], Tensor[(1716), float64], Tensor[(1800), uint32], Tensor[(300), float32], Tensor[(216), float32], Tensor[(756), uint64], Tensor[(4, 168), int8], Tensor[(240), float64]) */;
  %1015 = %998.1;
  %1016 = @func_4293(%1001) /* ty=Tensor[(1716), float32] */;
  %1017 = @func_6520() /* ty=Tensor[(1716), uint64] */;
  %1018 = less(%1008, %1009) /* ty=Tensor[(12, 12, 2), bool] */;
  %1019 = %1014.7;
  (%999, %1015, meta[relay.Constant][45] /* ty=Tensor[(3, 600), uint32] */, %1016, %1017, %1018, %1019)
}

def @func_2762(%var_2761: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) {
  %1037 = fn (%var_2758: Tensor[(1800), uint32]) -> (Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) {
    %1020 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
    %1021 = %1020.1;
    %1022 = cast(%1021, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
    %1023 = acosh(%1022) /* ty=Tensor[(3, 6, 12), float64] */;
    %1024 = cast(%1021, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
    %1025 = log2(%1024) /* ty=Tensor[(3, 6, 12), float64] */;
    %1026 = cast(%1025, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
    %1027 = shape_of(%1023, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1028 = cast(%1023, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
    %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1030 = cast(%var_2758, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %1031 = cast(%var_2758, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %1032 = reshape(%1030, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %1033 = reshape(%1031, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), float64] */;
    %1034 = @func_2676(%1032, %1033) /* ty=(Tensor[(672), int8], Tensor[(1800), uint32], Tensor[(12, 15, 10), bool]) */;
    %1035 = less(%1028, %1029) /* ty=Tensor[(3, 6, 12), bool] */;
    %1036 = %1034.0;
    (%1035, %1036, %var_2758)
  };
  %1037(%var_2761) /* ty=(Tensor[(3, 6, 12), bool], Tensor[(672), int8], Tensor[(1800), uint32]) */
}

def @func_4430() -> (Tensor[(3, 6, 12), float32],) {
  %1039 = fn () -> (Tensor[(3, 6, 12), float32],) {
    %1038 = @func_4084() /* ty=Tensor[(3, 6, 12), float32] */;
    (%1038,)
  };
  %1039() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_1972() -> (Tensor[(1716), float64],) {
  @func_1970() /* ty=(Tensor[(1716), float64],) */
}

def @func_5609() -> (Tensor[(3, 6, 12), float32],) {
  %1042 = fn () -> (Tensor[(3, 6, 12), float32],) {
    %1040 = @func_4429() /* ty=(Tensor[(3, 6, 12), float32],) */;
    %1041 = %1040.0;
    (%1041,)
  };
  %1042() /* ty=(Tensor[(3, 6, 12), float32],) */
}

def @func_8547(%var_8543: Tensor[(3, 16, 16), float32]) -> Tensor[(3, 16, 16), float32] {
  %1043 = cast(%var_8543, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  sin(%1043) /* ty=Tensor[(3, 16, 16), float32] */
}

def @func_9372() -> (Tensor[(1716), uint64], Tensor[(3, 6, 12), float32]) {
  %1049 = fn () -> (Tensor[(1716), uint64], Tensor[(3, 6, 12), float32]) {
    %1044 = @func_6520() /* ty=Tensor[(1716), uint64] */;
    %1045 = cast(%1044, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %1046 = reshape(%1045, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
    %1047 = @func_1905(%1046) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16]) */;
    %1048 = %1047.1;
    (%1044, %1048)
  };
  %1049() /* ty=(Tensor[(1716), uint64], Tensor[(3, 6, 12), float32]) */
}

def @func_5771() -> Tensor[(1716), float64] {
  @func_3682() /* ty=Tensor[(1716), float64] */
}

def @func_4633() -> (Tensor[(1716), float64],) {
  %1051 = fn () -> (Tensor[(1716), float64],) {
    %1050 = @func_3742() /* ty=Tensor[(1716), float64] */;
    (%1050,)
  };
  %1051() /* ty=(Tensor[(1716), float64],) */
}

def @func_7620(%var_7618: Tensor[(11, 156), float32], %var_7619: Tensor[(1716), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(11, 156), int32]) {
  @func_7616(%var_7618, %var_7619) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(11, 156), int32]) */
}

def @func_3977() -> Tensor[(1716), uint64] {
  %1052 = @func_3709() /* ty=Tensor[(1716), float32] */;
  %1053 = cast(%1052, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %1054 = exp(%1053) /* ty=Tensor[(1716), float32] */;
  %1055 = cast(%1054, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %1056 = shape_of(%1052, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1057 = cast(%1052, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?), uint64] */;
  bitwise_or(%1057, %1058) /* ty=Tensor[(1716), uint64] */
}

def @func_3178() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  @func_3176() /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) */
}

def @func_4040(%var_4039: Tensor[(1716), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) {
  %1072 = fn (%var_4016: Tensor[(1716), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) {
    %1059 = @func_1970() /* ty=(Tensor[(1716), float64],) */;
    %1060 = @func_3977() /* ty=Tensor[(1716), uint64] */;
    %1061 = cast(%1060, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %1062 = rsqrt(%1061) /* ty=Tensor[(1716), float32] */;
    %1063 = cast(%var_4016, dtype="bool") /* ty=Tensor[(1716), bool] */;
    %1064 = shape_of(%1062, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1065 = cast(%1062, dtype="bool") /* ty=Tensor[(1716), bool] */;
    %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1067 = cast(%1060, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %1068 = @func_3383() /* ty=Tensor[(3, 6, 12), float32] */;
    %1069 = %1059.0;
    %1070 = less(%1065, %1066) /* ty=Tensor[(1716), bool] */;
    %1071 = asinh(%1067) /* ty=Tensor[(1716), float32] */;
    (%1068, %1069, %1070, %1071)
  };
  %1072(%var_4039) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(1716), float64], Tensor[(1716), bool], Tensor[(1716), float32]) */
}

def @func_7859() -> Tensor[(1716), float32] {
  %1073 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %1074 = %1073.0;
  %1075 = cast(%1074, dtype="float32") /* ty=Tensor[(1716), float32] */;
  log2(%1075) /* ty=Tensor[(1716), float32] */
}

def @func_8460() -> Tensor[(1716), float64] {
  @func_3804() /* ty=Tensor[(1716), float64] */
}

def @func_8981(%var_8977: Tensor[(300), float32]) -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(2, 10, 15), bool], Tensor[(300), float32]) {
  %1076 = @func_2772() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16]) */;
  %1077 = @func_2024() /* ty=(Tensor[(1716), float64], Tensor[(3, 6, 12), float32]) */;
  %1078 = cast(%var_8977, dtype="float32") /* ty=Tensor[(300), float32] */;
  %1079 = @func_3609() /* ty=Tensor[(3, 6, 12), float32] */;
  %1080 = cast(%1079, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %1081 = reshape(%1078, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), float32] */;
  %1082 = reshape(%1080, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %1083 = @func_650(%1081, %1082) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(216), float32], Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), float32], Tensor[(2, 10, 15), bool], Tensor[(3, 6, 12), float32]) */;
  %1084 = %1076.1;
  %1085 = %1077.0;
  %1086 = %1083.4;
  (%1079, %1084, %1085, %1086, %var_8977)
}

def @func_9021() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), uint32], Tensor[(1716), uint16]) {
  %1087 = @func_4429() /* ty=(Tensor[(3, 6, 12), float32],) */;
  %1088 = cast(meta[relay.Constant][47] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %1089 = reshape(%1088, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %1090 = @func_7914(%1089) /* ty=(Tensor[(1716), uint32],) */;
  %1091 = %1087.0;
  %1092 = %1090.0;
  (%1091, %1092, meta[relay.Constant][47] /* ty=Tensor[(1716), uint16] */)
}

def @func_3176() -> (Tensor[(3, 6, 12), float32], Tensor[(1716), float64]) {
  %1093 = @func_1869() /* ty=(Tensor[(4, 4, 4), float64], Tensor[(3, 6, 12), float32], Tensor[(672), int8], Tensor[(3, 6, 12), float32], Tensor[(1716), uint16], Tensor[(216), float32]) */;
  %1094 = %1093.1;
  %1095 = cast(%1094, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %1096 = asin(%1095) /* ty=Tensor[(3, 6, 12), float32] */;
  %1097 = @func_2075() /* ty=Tensor[(1716), float64] */;
  (%1096, %1097)
}

def @func_3198(%var_3196: Tensor[(1716), int8]) -> (Tensor[(1716), int64],) {
  @func_3195(%var_3196) /* ty=(Tensor[(1716), int64],) */
}

def @func_3195(%var_3190: Tensor[(1716), int8]) -> (Tensor[(1716), int64],) {
  %1098 = @func_2940() /* ty=(Tensor[(1716), int8], Tensor[(1716), float64]) */;
  %1099 = %1098.0;
  %1100 = cast(%var_3190, dtype="int64") /* ty=Tensor[(1716), int64] */;
  %1101 = shape_of(%1099, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1102 = cast(%1099, dtype="int64") /* ty=Tensor[(1716), int64] */;
  %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?), int64] */;
  %1104 = subtract(%1102, %1103) /* ty=Tensor[(1716), int64] */;
  (%1104,)
}

def @func_6690() -> (Tensor[(1716), float64], Tensor[(1716), int64], Tensor[(3, 6, 12), bool], Tensor[(216), float32], Tensor[(1716), float64]) {
  %1117 = fn () -> (Tensor[(1716), float64], Tensor[(1716), int64], Tensor[(3, 6, 12), bool], Tensor[(216), float32], Tensor[(1716), float64]) {
    %1105 = @func_2699() /* ty=(Tensor[(1716), float64],) */;
    %1106 = %1105.0;
    %1107 = cast(%1106, dtype="int8") /* ty=Tensor[(1716), int8] */;
    %1108 = reshape(%1107, newshape=[1716]) /* ty=Tensor[(1716), int8] */;
    %1109 = @func_3195(%1108) /* ty=(Tensor[(1716), int64],) */;
    %1110 = cast(meta[relay.Constant][48] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %1111 = reshape(%1110, newshape=[3, 6, 12]) /* ty=Tensor[(3, 6, 12), float32] */;
    %1112 = @func_5264(%1111) /* ty=(Tensor[(3, 6, 12), bool],) */;
    %1113 = @func_3374() /* ty=(Tensor[(1716), float64], Tensor[(1716), uint16], Tensor[(1716), float64], Tensor[(1716), uint16]) */;
    %1114 = %1109.0;
    %1115 = %1112.0;
    %1116 = %1113.2;
    (%1106, %1114, %1115, meta[relay.Constant][48] /* ty=Tensor[(216), float32] */, %1116)
  };
  %1117() /* ty=(Tensor[(1716), float64], Tensor[(1716), int64], Tensor[(3, 6, 12), bool], Tensor[(216), float32], Tensor[(1716), float64]) */
}

def @func_3682() -> Tensor[(1716), float64] {
  %1118 = @func_2281() /* ty=(Tensor[(1716), float64],) */;
  %1118.0
}

def @func_5266(%var_5265: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), bool],) {
  %1125 = fn (%var_5254: Tensor[(3, 6, 12), float32]) -> (Tensor[(3, 6, 12), bool],) {
    %1119 = @func_4869() /* ty=Tensor[(3, 6, 12), float32] */;
    %1120 = cast(%var_5254, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
    %1121 = shape_of(%1119, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1122 = cast(%1119, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
    %1123 = dyn.reshape(%1120, %1121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1124 = greater_equal(%1122, %1123) /* ty=Tensor[(3, 6, 12), bool] */;
    (%1124,)
  };
  %1125(%var_5265) /* ty=(Tensor[(3, 6, 12), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen495/build/output.py", line 3175, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:23:56] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

