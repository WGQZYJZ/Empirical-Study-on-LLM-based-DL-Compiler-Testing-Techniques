==========mod==========
#[version = "0.0.5"]
def @func_1279(%var_1276: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %1 = reshape(%0, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %2 = @func_1209(%1) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
  %3 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %4 = %3.0;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 15, 7), float32] */, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %9 = not_equal(%7, %8) /* ty=Tensor[(3, 15, 7), bool] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %11 = cast(%var_1276, dtype="int64") /* ty=Tensor[(192), int64] */;
  %12 = reshape(%11, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %13 = @func_555(%12) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %14 = %2.2;
  %15 = rsqrt(%10) /* ty=Tensor[(3, 15, 7), float32] */;
  %16 = %13.0;
  (%14, meta[relay.Constant][0] /* ty=Tensor[(84), float32] */, %15, %16, %var_1276)
}

def @func_1433() -> (Tensor[(3, 15, 7), float32],) {
  %17 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %18 = %17.1;
  (%18,)
}

def @func_7479() -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) {
  %19 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  %20 = @func_5521() /* ty=Tensor[(4, 12, 8), float32] */;
  (%19, %20)
}

def @func_1527() -> Tensor[(384), float64] {
  %21 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %21.2
}

def @func_2141() -> (Tensor[(4, 12, 8), float32],) {
  %22 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %23 = %22.0;
  (%23,)
}

def @func_8316(%var_8214: Tensor[(14, 13, 6), float32], %var_8274: Tensor[(4, 48), float64]) -> (Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 48), float64]) {
  %24 = cast(-6.41021f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %25 = cast(%var_8214, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
  %26 = floor_divide(%24, %25) /* ty=Tensor[(14, 13, 6), float32] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
  %28 = cast(%var_8214, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
  %29 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %30 = @func_6222() /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) */;
  %31 = %30.2;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %33 = erf(%32) /* ty=Tensor[(4, 48), float64] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %35 = atan(%34) /* ty=Tensor[(4, 48), float64] */;
  %36 = cast(%var_8274, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(2), int32] */;
  %38 = cast(%35, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %40 = minimum(%38, %39) /* ty=Tensor[(4, 48), float32] */;
  %41 = cast(%40, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
  %42 = shape_of(%33, dtype="int32") /* ty=Tensor[(2), int32] */;
  %43 = cast(%33, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %45 = logical_and(%43, %44) /* ty=Tensor[(4, 48), bool] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %47 = shape_of(%33, dtype="int32") /* ty=Tensor[(2), int32] */;
  %48 = cast(%33, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %50 = exp(%27) /* ty=Tensor[(14, 13, 6), float32] */;
  %51 = @func_5185() /* ty=Tensor[(3, 15, 7), float32] */;
  %52 = log10(%28) /* ty=Tensor[(14, 13, 6), float32] */;
  %53 = %29.0;
  %54 = mod(%48, %49) /* ty=Tensor[(4, 48), float64] */;
  (%50, %51, %52, %53, %54)
}

def @func_7191() -> (Tensor[(3, 15, 7), float32], Tensor[(1, 384), uint8], Tensor[(384), float64]) {
  %55 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %56 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %57 = @func_7015() /* ty=(Tensor[(384), float64],) */;
  %58 = %55.0;
  %59 = %56.2;
  %60 = %57.0;
  (%58, %59, %60)
}

def @func_2564(%var_2548: Tensor[(192), int64]) -> (Tensor[(2, 192), float64], Tensor[(1, 192), int64], Tensor[(192), int64], Tensor[(4, 12, 4), int64]) {
  %61 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %62 = cast(%var_2548, dtype="int64") /* ty=Tensor[(192), int64] */;
  %63 = reshape(%62, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %64 = @func_1348(%63) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %65 = %64.4;
  %66 = cast(%65, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %67 = reshape(%66, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %68 = @func_555(%67) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %69 = %61.0;
  %70 = %68.0;
  (%69, %65, %var_2548, %70)
}

def @func_5058(%var_5003: float64, %var_5010: Tensor[(192), int64]) -> (Tensor[(4, 12, 8), bool], Tensor[(72), int64], float64, Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  %71 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %74 = rsqrt(%73) /* ty=Tensor[(4, 12, 8), float32] */;
  %75 = cast(%72, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(%var_5003, dtype="float64") /* ty=float64 */;
  %80 = reshape(%79, newshape=[]) /* ty=float64 */;
  %81 = @func_3393(%80) /* ty=(Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) */;
  %82 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %83 = cast(%var_5010, dtype="int64") /* ty=Tensor[(192), int64] */;
  %84 = reshape(%83, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %85 = @func_2581(%84) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */;
  %86 = cast(%74, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %87 = reshape(%86, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %88 = @func_2686(%87) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) */;
  %89 = %85.0;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %91 = reshape(%90, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %92 = @func_1467(%91) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */;
  %93 = greater(%77, %78) /* ty=Tensor[(4, 12, 8), bool] */;
  %94 = %81.2;
  %95 = %82.0;
  %96 = %88.3;
  %97 = %92.1;
  (%93, %94, %var_5003, %95, %89, %var_5010, %96, %97)
}

def @func_1294() -> (Tensor[(4, 12, 8), float32],) {
  %98 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %99 = %98.0;
  (%99,)
}

def @func_7498() -> (Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) {
  %100 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %101 = @func_5602() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) */;
  %102 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %103 = %100.0;
  %104 = %101.4;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_8463(%var_8393: Tensor[(168), int64], %var_8461: Tensor[(52, 4), uint32]) -> (Tensor[(384), float64], Tensor[(192), int64], Tensor[(168), int64], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), uint8], Tensor[(8, 2, 13), uint32], Tensor[(52, 4), uint32]) {
  %106 = @func_5162() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %107 = cast(%var_8393, dtype="int64") /* ty=Tensor[(168), int64] */;
  %108 = reshape(%107, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %109 = @func_4106(%108) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) */;
  %110 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %111 = %110.3;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %113 = acosh(%112) /* ty=Tensor[(4, 12, 8), float64] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %115 = %109.3;
  %116 = cast(%115, dtype="int64") /* ty=Tensor[(192), int64] */;
  %117 = reshape(%116, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %118 = @func_1760(%117) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) */;
  %119 = cast(%var_8461, dtype="uint32") /* ty=Tensor[(52, 4), uint32] */;
  %120 = cast(%var_8461, dtype="uint32") /* ty=Tensor[(52, 4), uint32] */;
  %121 = reshape(%119, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), uint32] */;
  %122 = reshape(%120, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), uint32] */;
  %123 = @func_6946(%121, %122) /* ty=(Tensor[(8, 2, 13), uint32],) */;
  %124 = %106.0;
  %125 = asin(%114) /* ty=Tensor[(4, 12, 8), float32] */;
  %126 = %118.2;
  %127 = %123.0;
  (%124, %115, %var_8393, %125, %126, %127, %var_8461)
}

def @func_2437(%var_2396: Tensor[(14, 6, 2), int64], %var_2397: Tensor[(14, 6, 2), int64], %var_2413: Tensor[(192), int64], %var_2428: Tensor[(4, 12, 4), int64]) -> (Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) {
  %128 = cast(%var_2397, dtype="bool") /* ty=Tensor[(14, 6, 2), bool] */;
  %129 = shape_of(%var_2396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_2396, dtype="bool") /* ty=Tensor[(14, 6, 2), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %133 = cast(%var_2413, dtype="int64") /* ty=Tensor[(192), int64] */;
  %134 = reshape(%133, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %135 = @func_555(%134) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %136 = %135.0;
  %137 = cast(%var_2428, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %141 = equal(%130, %131) /* ty=Tensor[(14, 6, 2), bool] */;
  %142 = %132.0;
  %143 = divide(%139, %140) /* ty=Tensor[(4, 12, 4), float64] */;
  (%141, %142, %var_2413, %143)
}

def @func_3583(%var_3547: Tensor[(4, 14, 1), float32], %var_3557: Tensor[(4, 14, 16), float32], %var_3575: Tensor[(32), uint64]) -> (Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) {
  %144 = cast(%var_3547, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %145 = sqrt(%144) /* ty=Tensor[(4, 14, 1), float32] */;
  %146 = cast(%145, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %147 = cast(%var_3557, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %148 = cast(%var_3575, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %149 = reshape(%148, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %150 = @func_629(%149) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %151 = greater(%146, %147) /* ty=Tensor[(4, 14, 16), bool] */;
  %152 = %150.0;
  (%151, %152, %var_3575)
}

def @func_2925(%var_2866: Tensor[(7, 1, 10), uint32], %var_2867: Tensor[(7, 16, 10), uint32]) -> (Tensor[(7, 16, 10), bool], Tensor[(8, 15, 5), float64], Tensor[(32), uint64], Tensor[(156), uint8], Tensor[(7, 16, 10), float32], Tensor[(4, 12, 8), float32]) {
  %153 = cast(%var_2866, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
  %154 = cast(%var_2867, dtype="bool") /* ty=Tensor[(7, 16, 10), bool] */;
  %155 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %158 = cast(meta[relay.Constant][2] /* ty=Tensor[(156), uint8] */, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %159 = reshape(%158, newshape=[156]) /* ty=Tensor[(156), uint8] */;
  %160 = @func_2639(%159) /* ty=(Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) */;
  %161 = cast(%var_2867, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
  %162 = @func_2753() /* ty=(Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) */;
  %163 = less_equal(%153, %154) /* ty=Tensor[(7, 16, 10), bool] */;
  %164 = erf(%157) /* ty=Tensor[(8, 15, 5), float64] */;
  %165 = %160.0;
  %166 = log2(%161) /* ty=Tensor[(7, 16, 10), float32] */;
  %167 = %162.1;
  (%163, %164, %165, meta[relay.Constant][2] /* ty=Tensor[(156), uint8] */, %166, %167)
}

def @func_3610(%var_3605: Tensor[(4, 12, 8), uint8]) -> Tensor[(4, 12, 8), uint64] {
  %168 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %169 = %168.3;
  %170 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%172, %173) /* ty=Tensor[(4, 12, 8), uint64] */
}

def @func_4005() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) {
  %174 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 384), uint8] */, dtype="uint8") /* ty=Tensor[(1, 384), uint8] */;
  %175 = reshape(%174, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), uint8] */;
  %176 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
  %177 = @func_3610(%175) /* ty=Tensor[(4, 12, 8), uint64] */;
  (%176, %177, meta[relay.Constant][3] /* ty=Tensor[(1, 384), uint8] */)
}

def @func_7890() -> Tensor[(4, 12, 8), bool] {
  %178 = @func_6145() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */;
  %178.1
}

def @func_8065() -> Tensor[(3, 15, 7), float32] {
  @func_5185() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_2357(%var_2267: Tensor[(192), int64], %var_2275: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(84), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), int32]) {
  %179 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %180 = cast(%var_2267, dtype="int64") /* ty=Tensor[(192), int64] */;
  %181 = reshape(%180, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %182 = @func_1348(%181) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %183 = cast(%var_2275, dtype="float32") /* ty=Tensor[(84), float32] */;
  %184 = reshape(%183, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %185 = @func_1209(%184) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
  %186 = @func_2129() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %187 = %186.1;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %189 = reshape(%188, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %190 = cast(%var_2267, dtype="int64") /* ty=Tensor[(192), int64] */;
  %191 = reshape(%190, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %192 = @func_1279(%191) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %193 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %194 = @func_1771() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %195 = %194.0;
  %196 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="int32") /* ty=Tensor[(4, 12, 8), int32] */;
  %199 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%195, dtype="int32") /* ty=Tensor[(4, 12, 8), int32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %202 = %179.0;
  %203 = %182.1;
  %204 = %185.4;
  %205 = @func_1016(%189) /* ty=Tensor[(3, 15, 7), float64] */;
  %206 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  %207 = %192.0;
  %208 = %193.0;
  %209 = add(%200, %201) /* ty=Tensor[(4, 12, 8), int32] */;
  (%202, %203, %var_2267, %204, %var_2275, %187, %205, %206, %207, %208, %209)
}

def @func_4060(%var_4058: Tensor[(384), bool]) -> (Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) {
  %210 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 7), uint32] */;
  %211 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 7), uint32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %214 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %217 = cast(%var_4058, dtype="bool") /* ty=Tensor[(384), bool] */;
  %218 = reshape(%216, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %219 = reshape(%217, newshape=[384]) /* ty=Tensor[(384), bool] */;
  %220 = @func_3536(%218, %219) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) */;
  %221 = logical_xor(%212, %213) /* ty=Tensor[(8, 16, 7), uint32] */;
  %222 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
  %223 = %220.2;
  (%221, %222, %215, %223, %var_4058)
}

def @func_152(%var_117: Tensor[(4, 12, 8), float64], %var_118: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  %224 = cast(%var_118, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %225 = shape_of(%var_117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_117, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%226, %227) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_7719() -> (Tensor[(3, 15, 7), float32],) {
  %228 = @func_5411() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %229 = %228.0;
  (%229,)
}

def @func_2797() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  %230 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %231 = @func_2141() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %232 = %230.2;
  %233 = %231.0;
  (%232, %233)
}

def @func_5830() -> Tensor[(4, 12, 8), float32] {
  @func_5521() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_5904(%var_5863: Tensor[(315), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) {
  %234 = cast(%var_5863, dtype="float32") /* ty=Tensor[(315), float32] */;
  %235 = reshape(%234, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %236 = @func_1467(%235) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */;
  %237 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %238 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
  %239 = %236.2;
  %240 = %237.1;
  %241 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  (%238, %239, %var_5863, %240, %241)
}

def @func_1443() -> (Tensor[(3, 15, 7), float32],) {
  %242 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %243 = %242.0;
  (%243,)
}

def @func_3275() -> Tensor[(4, 12, 8), bool] {
  %244 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %244.1
}

def @func_1348(%var_1335: Tensor[(1, 192), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) {
  %245 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %246 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %247 = cast(%var_1335, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %248 = reshape(%247, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %249 = @func_1279(%248) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %250 = %245.0;
  %251 = %246.1;
  %252 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  %253 = %249.0;
  (%250, %251, %252, %253, %var_1335)
}

def @func_8103() -> (Tensor[(6, 13, 16), int8], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  %254 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %255 = acosh(%254) /* ty=Tensor[(6, 13, 16), float64] */;
  %256 = cast(%255, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %257 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 16), float64] */, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %260 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %261 = multiply(%258, %259) /* ty=Tensor[(6, 13, 16), int8] */;
  %262 = @func_5224() /* ty=Tensor[(3, 15, 7), float32] */;
  %263 = %260.1;
  (%261, %262, %263)
}

def @func_3768() -> Tensor[(8, 15, 5), float32] {
  %264 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %264.1
}

def @func_3536(%var_3499: Tensor[(3, 15, 7), float32], %var_3516: Tensor[(384), bool]) -> (Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) {
  %265 = @func_1048() /* ty=Tensor[(3, 15, 7), float32] */;
  %266 = cast(%var_3499, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = cast(%var_3516, dtype="bool") /* ty=Tensor[(384), bool] */;
  %271 = reshape(%270, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
  %272 = @func_780(%271) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
  %273 = equal(%268, %269) /* ty=Tensor[(3, 15, 7), bool] */;
  %274 = %272.2;
  (%273, %274, %var_3516)
}

def @func_578() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) {
  %275 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %276 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %277 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %278 = reshape(%276, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %279 = reshape(%277, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %280 = @func_152(%278, %279) /* ty=Tensor[(4, 12, 8), bool] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %282 = cast(%280, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %283 = reshape(%281, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %284 = reshape(%282, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %285 = %275.0;
  %286 = @func_152(%283, %284) /* ty=Tensor[(4, 12, 8), bool] */;
  (%285, %280, meta[relay.Constant][7] /* ty=Tensor[(2, 192), float64] */, %286)
}

def @func_2179() -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) {
  %287 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %288 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %289 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %290 = %287.1;
  %291 = %288.0;
  %292 = %289.2;
  (%290, %291, %292)
}

def @func_5602() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  %293 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %294 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %295 = reshape(%294, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %296 = @func_555(%295) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %297 = cast(meta[relay.Constant][9] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %298 = reshape(%297, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %299 = @func_629(%298) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %300 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %301 = %293.0;
  %302 = %296.0;
  %303 = %299.1;
  %304 = %300.0;
  (%301, %302, meta[relay.Constant][8] /* ty=Tensor[(192), int64] */, %303, meta[relay.Constant][9] /* ty=Tensor[(32), uint64] */, %304)
}

def @main(%var_8530: Tensor[(56, 16), float32]) -> (Tensor[(8, 4, 1), uint64], Tensor[(56, 16), float32], Tensor[(32), uint64], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(105, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(105, 3), bool], Tensor[(105, 3), bool]) {
  %305 = cast(%var_8530, dtype="float32") /* ty=Tensor[(56, 16), float32] */;
  %306 = cast(meta[relay.Constant][10] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %307 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %308 = reshape(%305, newshape=[2, 448]) /* ty=Tensor[(2, 448), float32] */;
  %309 = reshape(%306, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %310 = reshape(%307, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %311 = @func_5671(%308, %309, %310) /* ty=(Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) */;
  %312 = @func_4442() /* ty=(Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */;
  %313 = @func_7301() /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) */;
  %314 = %313.5;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %316 = asin(%315) /* ty=Tensor[(105, 3), float32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(2), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %321 = greater_equal(%319, %320) /* ty=Tensor[(105, 3), bool] */;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %323 = log2(%322) /* ty=Tensor[(105, 3), float64] */;
  %324 = cast(%316, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(2), int32] */;
  %326 = cast(%323, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %328 = mod(%326, %327) /* ty=Tensor[(105, 3), float32] */;
  %329 = cast(meta[relay.Constant][12] /* ty=Tensor[(105, 3), float64] */, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %330 = shape_of(%323, dtype="int32") /* ty=Tensor[(2), int32] */;
  %331 = cast(%323, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %333 = equal(%331, %332) /* ty=Tensor[(105, 3), bool] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %335 = shape_of(%328, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%328, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %338 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %339 = reshape(%338, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %340 = @func_555(%339) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %341 = @func_7498() /* ty=(Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) */;
  %342 = cast(%328, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %343 = asinh(%342) /* ty=Tensor[(105, 3), float64] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %345 = sigmoid(%344) /* ty=Tensor[(105, 3), float64] */;
  %346 = cast(%328, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(2), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %350 = cast(%321, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %351 = shape_of(%316, dtype="int32") /* ty=Tensor[(2), int32] */;
  %352 = cast(%316, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %354 = less(%352, %353) /* ty=Tensor[(105, 3), bool] */;
  %355 = cast(%328, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(2), int32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %359 = %311.1;
  %360 = %312.0;
  %361 = maximum(%336, %337) /* ty=Tensor[(105, 3), float64] */;
  %362 = %340.1;
  %363 = %341.1;
  %364 = greater(%348, %349) /* ty=Tensor[(105, 3), bool] */;
  %365 = not_equal(%357, %358) /* ty=Tensor[(105, 3), bool] */;
  (%359, %var_8530, meta[relay.Constant][10] /* ty=Tensor[(32), uint64] */, meta[relay.Constant][11] /* ty=Tensor[(192), int64] */, %360, %361, %362, %363, %364, %365)
}

def @func_629(%var_604: Tensor[(8, 4, 1), uint64]) -> (Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) {
  %366 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %367 = cast(%var_604, dtype="uint64") /* ty=Tensor[(8, 4, 1), uint64] */;
  %368 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %369 = bitwise_or(%366, %367) /* ty=Tensor[(8, 4, 1), uint64] */;
  %370 = %368.1;
  (%369, %370)
}

def @func_1812() -> Tensor[(3, 15, 7), float32] {
  %371 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %371.1
}

def @func_1467(%var_1449: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  %372 = @func_1048() /* ty=Tensor[(3, 15, 7), float32] */;
  %373 = cast(%var_1449, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %378 = reshape(%377, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %379 = @func_555(%378) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %380 = greater(%375, %376) /* ty=Tensor[(3, 15, 7), bool] */;
  %381 = %379.1;
  (%380, %381, meta[relay.Constant][14] /* ty=Tensor[(192), int64] */)
}

def @func_3493() -> (Tensor[(3, 15, 7), float64],) {
  %382 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %383 = %382.0;
  (%383,)
}

def @func_2753() -> (Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) {
  %384 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %385 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %386 = %384.0;
  %387 = %385.0;
  (%386, %387)
}

def @func_6889() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
  %388 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  %389 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  (%388, %389)
}

def @func_6573(%var_6547: Tensor[(12, 4, 11), int8], %var_6556: Tensor[(384), bool]) -> (Tensor[(12, 4, 11), bool], Tensor[(384), bool], Tensor[(384), bool]) {
  %390 = cast(%var_6547, dtype="bool") /* ty=Tensor[(12, 4, 11), bool] */;
  %391 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 11), int8] */, dtype="bool") /* ty=Tensor[(12, 4, 11), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = cast(%var_6556, dtype="bool") /* ty=Tensor[(384), bool] */;
  %395 = reshape(%394, newshape=[384]) /* ty=Tensor[(384), bool] */;
  %396 = @func_4060(%395) /* ty=(Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) */;
  %397 = not_equal(%392, %393) /* ty=Tensor[(12, 4, 11), bool] */;
  %398 = %396.3;
  (%397, %398, %var_6556)
}

def @func_8057() -> (Tensor[(14, 2, 3), float64], Tensor[(84), float32], Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 3, 8), float64], Tensor[(315), float32]) {
  %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %400 = reshape(%399, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
  %401 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %402 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
  %403 = %402.1;
  %404 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %405 = %404.0;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %407 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%403, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %410 = @func_7301() /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) */;
  %411 = cast(%403, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %412 = reshape(%411, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %413 = @func_5904(%412) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) */;
  %414 = @func_1132(%400) /* ty=Tensor[(14, 2, 3), float64] */;
  %415 = @func_5521() /* ty=Tensor[(4, 12, 8), float32] */;
  %416 = %401.0;
  %417 = divide(%408, %409) /* ty=Tensor[(3, 15, 7), float32] */;
  %418 = %410.2;
  %419 = %413.2;
  (%414, meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, %415, %416, %417, %418, %419)
}

def @func_477() -> (Tensor[(3, 15, 7), float32],) {
  %420 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %421 = %420.0;
  (%421,)
}

def @func_448() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) {
  %422 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %423 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %424 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %425 = reshape(%423, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %426 = reshape(%424, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %427 = sin(%422) /* ty=Tensor[(3, 15, 7), float32] */;
  %428 = @func_152(%425, %426) /* ty=Tensor[(4, 12, 8), bool] */;
  (%427, %428, meta[relay.Constant][18] /* ty=Tensor[(384), float64] */)
}

def @func_4628() -> Tensor[(3, 15, 7), float64] {
  %429 = @func_4345() /* ty=(Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) */;
  %429.0
}

def @func_1223() -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) {
  %430 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %431 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %432 = %430.0;
  %433 = %431.0;
  (%432, %433)
}

def @func_1377() -> (Tensor[(4, 12, 8), float64],) {
  %434 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %437 = atanh(%436) /* ty=Tensor[(4, 12, 8), float64] */;
  (%437,)
}

def @func_555(%var_538: Tensor[(4, 12, 4), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) {
  %438 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %439 = cast(%var_538, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %440 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %441 = maximum(%438, %439) /* ty=Tensor[(4, 12, 4), int64] */;
  %442 = %440.0;
  (%441, %442)
}

def @func_6589() -> Tensor[(4, 12, 8), bool] {
  %443 = @func_5392() /* ty=(Tensor[(4, 12, 8), bool],) */;
  %443.0
}

def @func_7751() -> Tensor[(3, 15, 7), float32] {
  %444 = @func_7719() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %444.0
}

def @func_8188(%var_8183: Tensor[(4, 12, 8), bool]) -> (Tensor[(4, 12, 8), uint32],) {
  %445 = @func_4208() /* ty=Tensor[(4, 12, 8), bool] */;
  %446 = cast(%var_8183, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %450 = bitwise_and(%448, %449) /* ty=Tensor[(4, 12, 8), uint32] */;
  (%450,)
}

def @func_838() -> (Tensor[(2, 192), float64],) {
  %451 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %452 = %451.2;
  (%452,)
}

def @func_5760() -> (Tensor[(3, 15, 7), float64],) {
  %453 = @func_4442() /* ty=(Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */;
  %454 = %453.1;
  (%454,)
}

def @func_6968() -> (Tensor[(4, 12, 8), float64],) {
  %455 = @func_1377() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %456 = %455.0;
  (%456,)
}

def @func_4208() -> Tensor[(4, 12, 8), bool] {
  @func_3275() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_780(%var_734: Tensor[(4, 12, 8), bool]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) {
  %457 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %458 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %459 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %460 = %459.1;
  %461 = cast(%var_734, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %465 = %458.1;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %467 = cast(%var_734, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %468 = reshape(%466, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %469 = reshape(%467, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %470 = %457.0;
  %471 = minimum(%463, %464) /* ty=Tensor[(4, 12, 8), uint8] */;
  %472 = @func_152(%468, %469) /* ty=Tensor[(4, 12, 8), bool] */;
  (%470, %465, %471, %472)
}

def @func_7920(%var_7910: Tensor[(2, 192), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), bool]) {
  %473 = @func_3019() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) */;
  %474 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %475 = %474.0;
  %476 = cast(%var_7910, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(2), int32] */;
  %478 = cast(%475, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %480 = %473.0;
  %481 = equal(%478, %479) /* ty=Tensor[(2, 192), bool] */;
  (%480, %481)
}

def @func_3693(%var_3674: Tensor[(10, 16, 14), float32], %var_3675: Tensor[(10, 16, 14), float32], %var_3686: Tensor[(192), int64]) -> (Tensor[(10, 16, 14), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
  %482 = cast(%var_3675, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %483 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_3674, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %486 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %487 = cast(%var_3686, dtype="int64") /* ty=Tensor[(192), int64] */;
  %488 = reshape(%487, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %489 = @func_2581(%488) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */;
  %490 = power(%484, %485) /* ty=Tensor[(10, 16, 14), float32] */;
  %491 = %486.0;
  %492 = %489.1;
  (%490, %491, %492, %var_3686)
}

def @func_1132(%var_1106: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float64] {
  %493 = cast(%var_1106, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %494 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = greater(%495, %496) /* ty=Tensor[(14, 2, 3), bool] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(14, 2, 3), float64] */;
  acos(%498) /* ty=Tensor[(14, 2, 3), float64] */
}

def @func_7669() -> (Tensor[(3, 15, 7), float64],) {
  %499 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %500 = %499.0;
  (%500,)
}

def @func_3019() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) {
  %501 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %502 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %503 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %504 = %501.0;
  %505 = %502.1;
  %506 = %503.0;
  (%504, %505, %506)
}

def @func_5392() -> (Tensor[(4, 12, 8), bool],) {
  %507 = @func_4208() /* ty=Tensor[(4, 12, 8), bool] */;
  (%507,)
}

def @func_6422(%var_6371: Tensor[(11, 2, 13), float64]) -> (Tensor[(11, 2, 13), float64], Tensor[(11, 2, 13), float32], Tensor[(4, 12, 8), float32]) {
  %508 = cast(%var_6371, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %509 = cast(%var_6371, dtype="float32") /* ty=Tensor[(11, 2, 13), float32] */;
  %510 = @func_6222() /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) */;
  %511 = erf(%508) /* ty=Tensor[(11, 2, 13), float64] */;
  %512 = log(%509) /* ty=Tensor[(11, 2, 13), float32] */;
  %513 = %510.0;
  (%511, %512, %513)
}

def @func_7817() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  %514 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %515 = @func_7479() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) */;
  %516 = %514.2;
  %517 = %515.1;
  (%516, %517)
}

def @func_5671(%var_5656: Tensor[(2, 448), float32], %var_5657: Tensor[(32), uint64], %var_5669: Tensor[(192), int64]) -> (Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) {
  %518 = cast(meta[relay.Constant][20] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %519 = cast(%var_5656, dtype="float32") /* ty=Tensor[(2, 448), float32] */;
  %520 = cast(%var_5657, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %521 = reshape(%518, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float32] */;
  %522 = reshape(%519, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
  %523 = reshape(%520, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %524 = @func_3583(%521, %522, %523) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) */;
  %525 = cast(%var_5669, dtype="int64") /* ty=Tensor[(192), int64] */;
  %526 = reshape(%525, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %527 = @func_1348(%526) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %528 = @func_1527() /* ty=Tensor[(384), float64] */;
  %529 = %524.1;
  %530 = %527.0;
  (%528, %529, meta[relay.Constant][20] /* ty=Tensor[(56), float32] */, %var_5656, %var_5657, %530, %var_5669)
}

def @func_1030() -> (Tensor[(4, 12, 8), float32],) {
  %531 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %533 = log(%532) /* ty=Tensor[(4, 12, 8), float32] */;
  (%533,)
}

def @func_3645(%var_3640: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64],) {
  %534 = cast(%var_3640, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %535 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(7, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %538 = power(%536, %537) /* ty=Tensor[(7, 11, 15), float64] */;
  (%538,)
}

def @func_3758() -> (Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
  %539 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %540 = %539.0;
  %541 = @func_1829() /* ty=Tensor[(8, 15, 5), float32] */;
  (%540, %541)
}

def @func_2486() -> Tensor[(3, 15, 7), float32] {
  %542 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %542.0
}

def @func_3973() -> Tensor[(4, 12, 8), bool] {
  @func_3275() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_6302() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %543 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
  %544 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  (%543, %544)
}

def @func_1958() -> (Tensor[(3, 15, 7), float32],) {
  %545 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %546 = %545.0;
  (%546,)
}

def @func_5224() -> Tensor[(3, 15, 7), float32] {
  %547 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %548 = %547.0;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  exp(%549) /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_5821(%var_5812: Tensor[(315), float32]) -> (Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) {
  %550 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %551 = cast(%var_5812, dtype="float32") /* ty=Tensor[(315), float32] */;
  %552 = reshape(%551, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %553 = %550.1;
  %554 = @func_1016(%552) /* ty=Tensor[(3, 15, 7), float64] */;
  (%553, %554, %var_5812)
}

def @func_2032() -> (Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
  %555 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %556 = cast(meta[relay.Constant][22] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %557 = reshape(%556, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %558 = @func_1348(%557) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %559 = %558.3;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %561 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %562 = %555.0;
  %563 = log2(%560) /* ty=Tensor[(3, 15, 7), float32] */;
  %564 = %561.0;
  (%562, meta[relay.Constant][22] /* ty=Tensor[(192), int64] */, %563, %564)
}

def @func_4122() -> (Tensor[(3, 15, 7), float32],) {
  %565 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %566 = %565.0;
  (%566,)
}

def @func_4106(%var_4103: Tensor[(168), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) {
  %567 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %568 = cast(%var_4103, dtype="int64") /* ty=Tensor[(168), int64] */;
  %569 = cast(%var_4103, dtype="int64") /* ty=Tensor[(168), int64] */;
  %570 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %571 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %572 = reshape(%568, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %573 = reshape(%569, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %574 = reshape(%570, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %575 = reshape(%571, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %576 = @func_2437(%572, %573, %574, %575) /* ty=(Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) */;
  %577 = %567.0;
  %578 = %576.3;
  (%577, %578, %var_4103, meta[relay.Constant][23] /* ty=Tensor[(192), int64] */)
}

def @func_6048() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  %579 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %580 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %581 = %579.0;
  %582 = %580.0;
  (%581, %582)
}

def @func_3824(%var_3817: Tensor[(3, 1, 5), float64], %var_3818: Tensor[(3, 6, 5), float64]) -> Tensor[(3, 6, 5), float64] {
  %583 = cast(%var_3817, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %584 = cast(%var_3818, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  floor_divide(%583, %584) /* ty=Tensor[(3, 6, 5), float64] */
}

def @func_7551() -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
  %585 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %586 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
  %587 = %585.3;
  %588 = %586.0;
  (%587, %588)
}

def @func_2581(%var_2574: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
  %589 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %590 = cast(%var_2574, dtype="int64") /* ty=Tensor[(192), int64] */;
  %591 = reshape(%590, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %592 = @func_1348(%591) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %593 = %589.1;
  %594 = %592.2;
  (%593, %594, %var_2574)
}

def @func_4442() -> (Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
  %595 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %596 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %599 = reshape(%598, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %600 = cast(%597, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %601 = %595.1;
  %602 = @func_1016(%599) /* ty=Tensor[(3, 15, 7), float64] */;
  %603 = erf(%600) /* ty=Tensor[(3, 15, 7), float32] */;
  (%601, %602, %603)
}

def @func_5457(%var_5422: Tensor[(1155), float64]) -> (Tensor[(384), float64], Tensor[(4, 12, 8), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(8, 15, 5), float64]) {
  %604 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %605 = @func_1771() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %606 = cast(%var_5422, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %607 = reshape(%606, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %608 = @func_3645(%607) /* ty=(Tensor[(7, 11, 15), float64],) */;
  %609 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %611 = %604.2;
  %612 = %605.0;
  %613 = %608.0;
  %614 = sin(%610) /* ty=Tensor[(8, 15, 5), float64] */;
  (%611, %612, %613, %var_5422, %614)
}

def @func_6159() -> (Tensor[(3, 15, 7), float32],) {
  %615 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  (%615,)
}

def @func_5261() -> Tensor[(384), float64] {
  %616 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %616.2
}

def @func_7078() -> Tensor[(3, 15, 7), float32] {
  %617 = @func_6159() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %617.0
}

def @func_6222() -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) {
  %618 = @func_5359() /* ty=Tensor[(4, 12, 8), float32] */;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %620 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 48), int64] */, dtype="int64") /* ty=Tensor[(4, 48), int64] */;
  %621 = reshape(%620, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %622 = @func_1348(%621) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %623 = sqrt(%619) /* ty=Tensor[(4, 12, 8), float32] */;
  %624 = %622.2;
  (%623, %624, meta[relay.Constant][24] /* ty=Tensor[(4, 48), int64] */)
}

def @func_1771() -> (Tensor[(4, 12, 8), float64],) {
  %625 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  (%625,)
}

def @func_2390() -> (Tensor[(3, 15, 7), float64],) {
  %626 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %627 = %626.1;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %629 = atan(%628) /* ty=Tensor[(3, 15, 7), float64] */;
  (%629,)
}

def @func_1209(%var_1205: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) {
  %630 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %633 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %634 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %635 = cast(%var_1205, dtype="float32") /* ty=Tensor[(84), float32] */;
  %636 = reshape(%635, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
  %637 = tan(%632) /* ty=Tensor[(3, 15, 7), float64] */;
  %638 = %633.2;
  %639 = %634.0;
  %640 = @func_1132(%636) /* ty=Tensor[(14, 2, 3), float64] */;
  (%637, %638, %639, %640, %var_1205)
}

def @func_1016(%var_997: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float64] {
  %641 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %642 = %641.0;
  %643 = cast(%var_997, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%645, %646) /* ty=Tensor[(3, 15, 7), float64] */
}

def @func_5521() -> Tensor[(4, 12, 8), float32] {
  %647 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %647.0
}

def @func_4140() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %648 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %649 = %648.0;
  %650 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
  (%649, %650)
}

def @func_2639(%var_2620: Tensor[(156), uint8]) -> (Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) {
  %651 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %652 = cast(%var_2620, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %653 = cast(%var_2620, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %654 = reshape(%652, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), uint8] */;
  %655 = reshape(%653, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), uint8] */;
  %656 = @func_1880(%654, %655) /* ty=(Tensor[(4, 3, 13), uint8],) */;
  %657 = %651.1;
  %658 = cast(%657, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %659 = reshape(%658, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %660 = @func_629(%659) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %661 = %656.0;
  %662 = %660.1;
  (%657, %661, %var_2620, %662)
}

def @func_3787() -> (Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) {
  %663 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %664 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %665 = acosh(%663) /* ty=Tensor[(15, 12, 4), float64] */;
  %666 = %664.0;
  (%665, %666)
}

def @func_6537() -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), float32], Tensor[(2, 192), float64], Tensor[(2, 192), float64]) {
  %667 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %668 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %669 = %668.0;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %671 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %672 = shape_of(%669, dtype="int32") /* ty=Tensor[(2), int32] */;
  %673 = cast(%669, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %675 = cast(%669, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %676 = atanh(%675) /* ty=Tensor[(2, 192), float32] */;
  %677 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 192), float32] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(2), int32] */;
  %679 = cast(%676, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %681 = %667.0;
  %682 = asinh(%670) /* ty=Tensor[(2, 192), float32] */;
  %683 = power(%673, %674) /* ty=Tensor[(2, 192), float64] */;
  %684 = floor_divide(%679, %680) /* ty=Tensor[(2, 192), float64] */;
  (%681, %682, %683, %684)
}

def @func_1880(%var_1860: Tensor[(4, 3, 13), uint8], %var_1861: Tensor[(4, 3, 13), uint8]) -> (Tensor[(4, 3, 13), uint8],) {
  %685 = cast(%var_1861, dtype="uint8") /* ty=Tensor[(4, 3, 13), uint8] */;
  %686 = shape_of(%var_1860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_1860, dtype="uint8") /* ty=Tensor[(4, 3, 13), uint8] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %689 = right_shift(%687, %688) /* ty=Tensor[(4, 3, 13), uint8] */;
  (%689,)
}

def @func_3393(%var_3379: float64) -> (Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) {
  %690 = cast(%var_3379, dtype="float64") /* ty=float64 */;
  %691 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 8, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 4), float64] */;
  %692 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %693 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %694 = reshape(%692, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %695 = reshape(%693, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %696 = mod(%690, %691) /* ty=Tensor[(11, 8, 4), float64] */;
  %697 = @func_1546(%694, %695) /* ty=Tensor[(3, 3, 8), int64] */;
  (%696, %697, meta[relay.Constant][29] /* ty=Tensor[(72), int64] */)
}

def @func_4159() -> (Tensor[(3, 15, 7), float32],) {
  %698 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %699 = %698.0;
  (%699,)
}

def @func_4696() -> Tensor[(3, 15, 7), float32] {
  %700 = @func_4548() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %700.0
}

def @func_5359() -> Tensor[(4, 12, 8), float32] {
  %701 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %701.0
}

def @func_4195(%var_4174: Tensor[(168), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(14, 6, 2), bool], Tensor[(168), int64], Tensor[(48, 4), int64], Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
  %702 = @func_1958() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %703 = cast(%var_4174, dtype="int64") /* ty=Tensor[(168), int64] */;
  %704 = cast(%var_4174, dtype="int64") /* ty=Tensor[(168), int64] */;
  %705 = cast(meta[relay.Constant][30] /* ty=Tensor[(48, 4), int64] */, dtype="int64") /* ty=Tensor[(48, 4), int64] */;
  %706 = cast(meta[relay.Constant][30] /* ty=Tensor[(48, 4), int64] */, dtype="int64") /* ty=Tensor[(48, 4), int64] */;
  %707 = reshape(%703, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %708 = reshape(%704, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %709 = reshape(%705, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %710 = reshape(%706, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %711 = @func_2437(%707, %708, %709, %710) /* ty=(Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) */;
  %712 = @func_4159() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %713 = %702.0;
  %714 = %711.0;
  %715 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
  %716 = %712.0;
  (%713, %714, %var_4174, meta[relay.Constant][30] /* ty=Tensor[(48, 4), int64] */, %715, %716)
}

def @func_6946(%var_6907: Tensor[(8, 2, 13), uint32], %var_6908: Tensor[(8, 2, 13), uint32]) -> (Tensor[(8, 2, 13), uint32],) {
  %717 = cast(%var_6908, dtype="uint32") /* ty=Tensor[(8, 2, 13), uint32] */;
  %718 = shape_of(%var_6907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%var_6907, dtype="uint32") /* ty=Tensor[(8, 2, 13), uint32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %721 = right_shift(%719, %720) /* ty=Tensor[(8, 2, 13), uint32] */;
  (%721,)
}

def @func_7301() -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) {
  %722 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %724 = cast(%722, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %725 = reshape(%723, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %726 = reshape(%724, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %727 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %728 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %729 = reshape(%727, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %730 = reshape(%728, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %731 = @func_1546(%729, %730) /* ty=Tensor[(3, 3, 8), int64] */;
  %732 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), int64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %736 = cast(meta[relay.Constant][32] /* ty=Tensor[(105, 3), float32] */, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %737 = reshape(%736, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %738 = @func_5821(%737) /* ty=(Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) */;
  %739 = @func_2753() /* ty=(Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) */;
  %740 = cast(meta[relay.Constant][32] /* ty=Tensor[(105, 3), float32] */, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %741 = cosh(%740) /* ty=Tensor[(105, 3), float32] */;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %743 = rsqrt(%742) /* ty=Tensor[(105, 3), float64] */;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %745 = @func_3787() /* ty=(Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) */;
  %746 = @func_152(%725, %726) /* ty=Tensor[(4, 12, 8), bool] */;
  %747 = floor_divide(%734, %735) /* ty=Tensor[(3, 3, 8), float64] */;
  %748 = %738.1;
  %749 = %739.1;
  %750 = atanh(%744) /* ty=Tensor[(105, 3), float64] */;
  %751 = %745.0;
  (%722, %746, %747, %748, %749, %750, %751)
}

def @func_4280() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64]) {
  %752 = @func_4159() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %753 = %752.0;
  %754 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  (%753, %754)
}

def @func_4890(%var_4852: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), uint64], Tensor[(3, 15, 7), float32]) {
  %755 = @func_4696() /* ty=Tensor[(3, 15, 7), float32] */;
  %756 = cast(%var_4852, dtype="uint64") /* ty=Tensor[(3, 15, 7), uint64] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="uint64") /* ty=Tensor[(3, 15, 7), uint64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %760 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %761 = left_shift(%758, %759) /* ty=Tensor[(3, 15, 7), uint64] */;
  %762 = %760.0;
  (%761, %762)
}

def @func_4548() -> (Tensor[(3, 15, 7), float32],) {
  %763 = @func_1958() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %764 = %763.0;
  (%764,)
}

def @func_7015() -> (Tensor[(384), float64],) {
  %765 = @func_1527() /* ty=Tensor[(384), float64] */;
  (%765,)
}

def @func_1546(%var_1536: Tensor[(3, 3, 8), int64], %var_1537: Tensor[(3, 3, 8), int64]) -> Tensor[(3, 3, 8), int64] {
  %766 = cast(%var_1537, dtype="int64") /* ty=Tensor[(3, 3, 8), int64] */;
  %767 = shape_of(%var_1536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_1536, dtype="int64") /* ty=Tensor[(3, 3, 8), int64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%768, %769) /* ty=Tensor[(3, 3, 8), int64] */
}

def @func_8179() -> Tensor[(3, 15, 7), float32] {
  @func_7751() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_3262(%var_3203: Tensor[(2, 192), float64]) -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint8], Tensor[(2, 192), bool], Tensor[(2, 192), float32]) {
  %770 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %771 = %770.0;
  %772 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(2), int32] */;
  %774 = cast(%771, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %776 = multiply(%774, %775) /* ty=Tensor[(2, 192), float32] */;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %778 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %779 = cast(%776, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %780 = reshape(%779, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
  %781 = @func_780(%780) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
  %782 = cast(%771, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %783 = exp(%782) /* ty=Tensor[(2, 192), float64] */;
  %784 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 192), float64] */, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(2), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %788 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %789 = log10(%777) /* ty=Tensor[(2, 192), float64] */;
  %790 = %778.0;
  %791 = %781.2;
  %792 = greater_equal(%786, %787) /* ty=Tensor[(2, 192), bool] */;
  %793 = acos(%788) /* ty=Tensor[(2, 192), float32] */;
  (%789, %790, %791, %792, %793)
}

def @func_2686(%var_2679: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) {
  %794 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %795 = %794.0;
  %796 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = cast(%795, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %801 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = cast(meta[relay.Constant][35] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %805 = reshape(%804, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %806 = @func_629(%805) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %807 = cast(%var_2679, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %808 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 12, 8), float32] */, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %811 = equal(%798, %799) /* ty=Tensor[(4, 12, 8), bool] */;
  %812 = not_equal(%802, %803) /* ty=Tensor[(4, 12, 8), bool] */;
  %813 = %806.1;
  %814 = floor_divide(%809, %810) /* ty=Tensor[(4, 12, 8), float64] */;
  (%811, %812, %813, meta[relay.Constant][35] /* ty=Tensor[(32), uint64] */, %814)
}

def @func_5162() -> (Tensor[(384), float64], Tensor[(384), float64]) {
  %815 = @func_2797() /* ty=(Tensor[(384), float64], Tensor[(4, 12, 8), float32]) */;
  %816 = @func_1527() /* ty=Tensor[(384), float64] */;
  %817 = %815.0;
  (%816, %817)
}

def @func_1048() -> Tensor[(3, 15, 7), float32] {
  %818 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %818.0
}

def @func_2129() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %819 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %820 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %821 = %819.0;
  %822 = %820.0;
  (%821, %822)
}

def @func_6145() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
  %823 = @func_5411() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %824 = %823.0;
  %825 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
  (%824, %825)
}

def @func_1760(%var_1730: Tensor[(192), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) {
  %826 = cast(%var_1730, dtype="int64") /* ty=Tensor[(192), int64] */;
  %827 = reshape(%826, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %828 = @func_1279(%827) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %829 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %830 = %829.0;
  %831 = cast(%830, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %832 = tan(%831) /* ty=Tensor[(4, 12, 8), float32] */;
  %833 = cast(%830, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %837 = %828.3;
  %838 = bitwise_or(%835, %836) /* ty=Tensor[(4, 12, 8), uint8] */;
  (%837, %var_1730, %838)
}

def @func_1829() -> Tensor[(8, 15, 5), float32] {
  %839 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %839.0
}

def @func_973() -> (Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) {
  %840 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %841 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %842 = %841.0;
  %843 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %844 = reshape(%843, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %845 = @func_629(%844) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %846 = %845.1;
  %847 = cast(%846, dtype="int64") /* ty=Tensor[(4, 12, 8), int64] */;
  %848 = shape_of(%842, dtype="int32") /* ty=Tensor[(2), int32] */;
  %849 = cast(%842, dtype="int64") /* ty=Tensor[(2, 192), int64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %851 = cast(%846, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %852 = reshape(%851, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
  %853 = @func_780(%852) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
  %854 = %840.0;
  %855 = add(%849, %850) /* ty=Tensor[(2, 192), int64] */;
  %856 = %853.2;
  (%854, meta[relay.Constant][36] /* ty=Tensor[(32), uint64] */, %855, %856)
}

def @func_4514() -> (Tensor[(3, 15, 7), float32],) {
  %857 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %858 = %857.0;
  (%858,)
}

def @func_6837() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint64]) {
  %859 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %860 = @func_5185() /* ty=Tensor[(3, 15, 7), float32] */;
  %861 = %859.1;
  (%860, %861)
}

def @func_5411() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %862 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %863 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
  %864 = %862.0;
  %865 = %863.0;
  (%864, %865)
}

def @func_4345() -> (Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) {
  %866 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %867 = %866.0;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %869 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %870 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %871 = log(%868) /* ty=Tensor[(3, 15, 7), float64] */;
  %872 = %869.3;
  %873 = %870.0;
  (%871, %872, %873)
}

def @func_1509() -> (Tensor[(8, 15, 5), float32],) {
  %874 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %875 = cosh(%874) /* ty=Tensor[(8, 15, 5), float32] */;
  (%875,)
}

def @func_7365() -> (Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
  %876 = @func_5760() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %877 = %876.0;
  %878 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
  (%877, %878)
}

def @func_2111() -> (Tensor[(3, 15, 7), float32],) {
  %879 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %880 = %879.0;
  (%880,)
}

def @func_5321() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  %881 = @func_2129() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %882 = %881.1;
  %883 = @func_4628() /* ty=Tensor[(3, 15, 7), float64] */;
  (%882, %883)
}

def @func_5850() -> (Tensor[(3, 15, 7), float32],) {
  %884 = @func_5224() /* ty=Tensor[(3, 15, 7), float32] */;
  (%884,)
}

def @func_4795(%var_4767: Tensor[(8, 15, 5), float32], %var_4778: Tensor[(56), float32], %var_4780: Tensor[(2, 16), uint64]) -> (Tensor[(8, 15, 5), uint16], Tensor[(4, 14, 16), bool], Tensor[(896), float32], Tensor[(2, 16), uint64], Tensor[(56), bool]) {
  %885 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %886 = %885.1;
  %887 = cast(%var_4767, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %891 = cast(%var_4778, dtype="float32") /* ty=Tensor[(56), float32] */;
  %892 = cast(meta[relay.Constant][38] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %893 = cast(%var_4780, dtype="uint64") /* ty=Tensor[(2, 16), uint64] */;
  %894 = reshape(%891, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float32] */;
  %895 = reshape(%892, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
  %896 = reshape(%893, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %897 = @func_3583(%894, %895, %896) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) */;
  %898 = cast(meta[relay.Constant][39] /* ty=Tensor[(56), float32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %899 = shape_of(%var_4778, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%var_4778, dtype="bool") /* ty=Tensor[(56), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?), bool] */;
  %902 = maximum(%889, %890) /* ty=Tensor[(8, 15, 5), uint16] */;
  %903 = %897.0;
  %904 = not_equal(%900, %901) /* ty=Tensor[(56), bool] */;
  (%902, %903, meta[relay.Constant][38] /* ty=Tensor[(896), float32] */, %var_4780, %904)
}

def @func_5989(%var_5983: bool, %var_5984: Tensor[(1, 2, 15), bool]) -> Tensor[(1, 2, 15), bool] {
  %905 = cast(%var_5983, dtype="bool") /* ty=bool */;
  %906 = cast(%var_5984, dtype="bool") /* ty=Tensor[(1, 2, 15), bool] */;
  logical_and(%905, %906) /* ty=Tensor[(1, 2, 15), bool] */
}

def @func_7609(%var_7589: bool) -> (Tensor[(3, 15, 7), float32], Tensor[(1, 2, 15), bool], bool, Tensor[(5, 6), bool], Tensor[(3, 15, 7), float32]) {
  %907 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %908 = cast(%var_7589, dtype="bool") /* ty=bool */;
  %909 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 6), bool] */;
  %910 = reshape(%908, newshape=[]) /* ty=bool */;
  %911 = reshape(%909, newshape=[1, 2, 15]) /* ty=Tensor[(1, 2, 15), bool] */;
  %912 = @func_6889() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */;
  %913 = %907.0;
  %914 = @func_5989(%910, %911) /* ty=Tensor[(1, 2, 15), bool] */;
  %915 = %912.0;
  (%913, %914, %var_7589, meta[relay.Constant][40] /* ty=Tensor[(5, 6), bool] */, %915)
}

def @func_3170(%var_3104: Tensor[(8, 10, 8), float32], %var_3125: Tensor[(315), float32], %var_3128: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(315), float32], Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(8, 10, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %916 = cast(%var_3125, dtype="float32") /* ty=Tensor[(315), float32] */;
  %917 = reshape(%916, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %918 = cast(%var_3128, dtype="float32") /* ty=Tensor[(84), float32] */;
  %919 = reshape(%918, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %920 = @func_1209(%919) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
  %921 = cast(%var_3104, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %922 = sqrt(%921) /* ty=Tensor[(8, 10, 8), float32] */;
  %923 = cast(%922, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %924 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %925 = @func_1016(%917) /* ty=Tensor[(3, 15, 7), float64] */;
  %926 = %920.2;
  %927 = cosh(%923) /* ty=Tensor[(8, 10, 8), float32] */;
  %928 = %924.0;
  %929 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  (%925, %var_3125, %926, %var_3128, %927, %928, %929)
}

def @func_526() -> (Tensor[(3, 15, 7), float32],) {
  %930 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %931 = %930.0;
  (%931,)
}

def @func_884() -> Tensor[(4, 12, 8), float64] {
  %932 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %933 = %932.1;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  erf(%934) /* ty=Tensor[(4, 12, 8), float64] */
}

def @func_6623() -> Tensor[(3, 15, 7), float32] {
  %935 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %935.0
}

def @func_2826() -> (Tensor[(3, 15, 7), float32],) {
  %936 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %937 = %936.0;
  (%937,)
}

def @func_5185() -> Tensor[(3, 15, 7), float32] {
  %938 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %938.1
}

def @func_2066(%var_2054: Tensor[(3, 4, 2), float64], %var_2055: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), bool], Tensor[(4, 12, 8), float64]) {
  %939 = cast(%var_2055, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %940 = shape_of(%var_2054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%var_2054, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %943 = @func_1377() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %944 = greater(%941, %942) /* ty=Tensor[(3, 4, 2), bool] */;
  %945 = %943.0;
  (%944, %945)
}

def @func_5101(%var_5090: Tensor[(4, 12, 8), bool]) -> Tensor[(4, 12, 8), uint32] {
  %946 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  %947 = cast(%var_5090, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%946, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%949, %950) /* ty=Tensor[(4, 12, 8), uint32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4109(%var_4107: Tensor[(168), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) {
  @func_4106(%var_4107) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) */
}

def @func_7303() -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) {
  @func_7301() /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) */
}

def @func_5992(%var_5990: bool, %var_5991: Tensor[(1, 2, 15), bool]) -> Tensor[(1, 2, 15), bool] {
  %2 = fn (%var_5983: bool, %var_5984: Tensor[(1, 2, 15), bool]) -> Tensor[(1, 2, 15), bool] {
    %0 = cast(%var_5983, dtype="bool") /* ty=bool */;
    %1 = cast(%var_5984, dtype="bool") /* ty=Tensor[(1, 2, 15), bool] */;
    logical_and(%0, %1) /* ty=Tensor[(1, 2, 15), bool] */
  };
  %2(%var_5990, %var_5991) /* ty=Tensor[(1, 2, 15), bool] */
}

def @func_7552() -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
  %7 = fn () -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
    %3 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
    %4 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
    %5 = %3.3;
    %6 = %4.0;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) */
}

def @func_2753() -> (Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) {
  %8 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %9 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %10 = %8.0;
  %11 = %9.0;
  (%10, %11)
}

def @func_3587(%var_3584: Tensor[(4, 14, 1), float32], %var_3585: Tensor[(4, 14, 16), float32], %var_3586: Tensor[(32), uint64]) -> (Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) {
  %21 = fn (%var_3547: Tensor[(4, 14, 1), float32], %var_3557: Tensor[(4, 14, 16), float32], %var_3575: Tensor[(32), uint64]) -> (Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) {
    %12 = cast(%var_3547, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
    %13 = sqrt(%12) /* ty=Tensor[(4, 14, 1), float32] */;
    %14 = cast(%13, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %15 = cast(%var_3557, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
    %16 = cast(%var_3575, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %17 = reshape(%16, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
    %18 = @func_629(%17) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
    %19 = greater(%14, %15) /* ty=Tensor[(4, 14, 16), bool] */;
    %20 = %18.0;
    (%19, %20, %var_3575)
  };
  %21(%var_3584, %var_3585, %var_3586) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) */
}

def @func_8067() -> Tensor[(3, 15, 7), float32] {
  @func_8065() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_6160() -> (Tensor[(3, 15, 7), float32],) {
  %23 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %22 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
    (%22,)
  };
  %23() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_6576(%var_6574: Tensor[(12, 4, 11), int8], %var_6575: Tensor[(384), bool]) -> (Tensor[(12, 4, 11), bool], Tensor[(384), bool], Tensor[(384), bool]) {
  %33 = fn (%var_6547: Tensor[(12, 4, 11), int8], %var_6556: Tensor[(384), bool]) -> (Tensor[(12, 4, 11), bool], Tensor[(384), bool], Tensor[(384), bool]) {
    %24 = cast(%var_6547, dtype="bool") /* ty=Tensor[(12, 4, 11), bool] */;
    %25 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(12, 4, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 4, 11), int8] */, dtype="bool") /* ty=Tensor[(12, 4, 11), bool] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %28 = cast(%var_6556, dtype="bool") /* ty=Tensor[(384), bool] */;
    %29 = reshape(%28, newshape=[384]) /* ty=Tensor[(384), bool] */;
    %30 = @func_4060(%29) /* ty=(Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) */;
    %31 = not_equal(%26, %27) /* ty=Tensor[(12, 4, 11), bool] */;
    %32 = %30.3;
    (%31, %32, %var_6556)
  };
  %33(%var_6574, %var_6575) /* ty=(Tensor[(12, 4, 11), bool], Tensor[(384), bool], Tensor[(384), bool]) */
}

def @func_4197(%var_4196: Tensor[(168), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(14, 6, 2), bool], Tensor[(168), int64], Tensor[(48, 4), int64], Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
  %49 = fn (%var_4174: Tensor[(168), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(14, 6, 2), bool], Tensor[(168), int64], Tensor[(48, 4), int64], Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) {
    %34 = @func_1958() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %35 = cast(%var_4174, dtype="int64") /* ty=Tensor[(168), int64] */;
    %36 = cast(%var_4174, dtype="int64") /* ty=Tensor[(168), int64] */;
    %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 4), int64] */, dtype="int64") /* ty=Tensor[(48, 4), int64] */;
    %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 4), int64] */, dtype="int64") /* ty=Tensor[(48, 4), int64] */;
    %39 = reshape(%35, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
    %40 = reshape(%36, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
    %41 = reshape(%37, newshape=[192]) /* ty=Tensor[(192), int64] */;
    %42 = reshape(%38, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %43 = @func_2437(%39, %40, %41, %42) /* ty=(Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) */;
    %44 = @func_4159() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %45 = %34.0;
    %46 = %43.0;
    %47 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
    %48 = %44.0;
    (%45, %46, %var_4174, meta[relay.Constant][1] /* ty=Tensor[(48, 4), int64] */, %47, %48)
  };
  %49(%var_4196) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(14, 6, 2), bool], Tensor[(168), int64], Tensor[(48, 4), int64], Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32]) */
}

def @func_4005() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) {
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 384), uint8] */, dtype="uint8") /* ty=Tensor[(1, 384), uint8] */;
  %51 = reshape(%50, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), uint8] */;
  %52 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
  %53 = @func_3610(%51) /* ty=Tensor[(4, 12, 8), uint64] */;
  (%52, %53, meta[relay.Constant][2] /* ty=Tensor[(1, 384), uint8] */)
}

def @func_5321() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  %54 = @func_2129() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %55 = %54.1;
  %56 = @func_4628() /* ty=Tensor[(3, 15, 7), float64] */;
  (%55, %56)
}

def @func_5460(%var_5458: Tensor[(1155), float64]) -> (Tensor[(384), float64], Tensor[(4, 12, 8), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(8, 15, 5), float64]) {
  @func_5457(%var_5458) /* ty=(Tensor[(384), float64], Tensor[(4, 12, 8), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(8, 15, 5), float64]) */
}

def @func_7671() -> (Tensor[(3, 15, 7), float64],) {
  @func_7669() /* ty=(Tensor[(3, 15, 7), float64],) */
}

def @func_8188(%var_8183: Tensor[(4, 12, 8), bool]) -> (Tensor[(4, 12, 8), uint32],) {
  %57 = @func_4208() /* ty=Tensor[(4, 12, 8), bool] */;
  %58 = cast(%var_8183, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%57, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %62 = bitwise_and(%60, %61) /* ty=Tensor[(4, 12, 8), uint32] */;
  (%62,)
}

def @func_3494() -> (Tensor[(3, 15, 7), float64],) {
  %65 = fn () -> (Tensor[(3, 15, 7), float64],) {
    %63 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
    %64 = %63.0;
    (%64,)
  };
  %65() /* ty=(Tensor[(3, 15, 7), float64],) */
}

def @func_7720() -> (Tensor[(3, 15, 7), float32],) {
  %68 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %66 = @func_5411() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
    %67 = %66.0;
    (%67,)
  };
  %68() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_885() -> Tensor[(4, 12, 8), float64] {
  %72 = fn () -> Tensor[(4, 12, 8), float64] {
    %69 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
    %70 = %69.1;
    %71 = cast(%70, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
    erf(%71) /* ty=Tensor[(4, 12, 8), float64] */
  };
  %72() /* ty=Tensor[(4, 12, 8), float64] */
}

def @func_2689(%var_2687: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) {
  @func_2686(%var_2687) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) */
}

def @func_477() -> (Tensor[(3, 15, 7), float32],) {
  %73 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %74 = %73.0;
  (%74,)
}

def @func_3759() -> (Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
  %78 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
    %75 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %76 = %75.0;
    %77 = @func_1829() /* ty=Tensor[(8, 15, 5), float32] */;
    (%76, %77)
  };
  %78() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */
}

def @func_4892(%var_4891: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), uint64], Tensor[(3, 15, 7), float32]) {
  %87 = fn (%var_4852: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), uint64], Tensor[(3, 15, 7), float32]) {
    %79 = @func_4696() /* ty=Tensor[(3, 15, 7), float32] */;
    %80 = cast(%var_4852, dtype="uint64") /* ty=Tensor[(3, 15, 7), uint64] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="uint64") /* ty=Tensor[(3, 15, 7), uint64] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %84 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %85 = left_shift(%82, %83) /* ty=Tensor[(3, 15, 7), uint64] */;
    %86 = %84.0;
    (%85, %86)
  };
  %87(%var_4891) /* ty=(Tensor[(3, 15, 7), uint64], Tensor[(3, 15, 7), float32]) */
}

def @func_7891() -> Tensor[(4, 12, 8), bool] {
  %89 = fn () -> Tensor[(4, 12, 8), bool] {
    %88 = @func_6145() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */;
    %88.1
  };
  %89() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_973() -> (Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) {
  %90 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %91 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %92 = %91.0;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %94 = reshape(%93, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %95 = @func_629(%94) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %96 = %95.1;
  %97 = cast(%96, dtype="int64") /* ty=Tensor[(4, 12, 8), int64] */;
  %98 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%92, dtype="int64") /* ty=Tensor[(2, 192), int64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %101 = cast(%96, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %102 = reshape(%101, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
  %103 = @func_780(%102) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
  %104 = %90.0;
  %105 = add(%99, %100) /* ty=Tensor[(2, 192), int64] */;
  %106 = %103.2;
  (%104, meta[relay.Constant][3] /* ty=Tensor[(32), uint64] */, %105, %106)
}

def @func_2361(%var_2359: Tensor[(192), int64], %var_2360: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(84), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), int32]) {
  @func_2357(%var_2359, %var_2360) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(84), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), int32]) */
}

def @func_5602() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  %107 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %109 = reshape(%108, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %110 = @func_555(%109) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %112 = reshape(%111, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %113 = @func_629(%112) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %114 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %115 = %107.0;
  %116 = %110.0;
  %117 = %113.1;
  %118 = %114.0;
  (%115, %116, meta[relay.Constant][4] /* ty=Tensor[(192), int64] */, %117, meta[relay.Constant][5] /* ty=Tensor[(32), uint64] */, %118)
}

def @func_1433() -> (Tensor[(3, 15, 7), float32],) {
  %119 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %120 = %119.1;
  (%120,)
}

def @func_8065() -> Tensor[(3, 15, 7), float32] {
  @func_5185() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_1546(%var_1536: Tensor[(3, 3, 8), int64], %var_1537: Tensor[(3, 3, 8), int64]) -> Tensor[(3, 3, 8), int64] {
  %121 = cast(%var_1537, dtype="int64") /* ty=Tensor[(3, 3, 8), int64] */;
  %122 = shape_of(%var_1536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%var_1536, dtype="int64") /* ty=Tensor[(3, 3, 8), int64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%123, %124) /* ty=Tensor[(3, 3, 8), int64] */
}

def @func_1959() -> (Tensor[(3, 15, 7), float32],) {
  %127 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %125 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %126 = %125.0;
    (%126,)
  };
  %127() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_3393(%var_3379: float64) -> (Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) {
  %128 = cast(%var_3379, dtype="float64") /* ty=float64 */;
  %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 8, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 4), float64] */;
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %131 = cast(meta[relay.Constant][7] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %132 = reshape(%130, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %133 = reshape(%131, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %134 = mod(%128, %129) /* ty=Tensor[(11, 8, 4), float64] */;
  %135 = @func_1546(%132, %133) /* ty=Tensor[(3, 3, 8), int64] */;
  (%134, %135, meta[relay.Constant][7] /* ty=Tensor[(72), int64] */)
}

def @func_1527() -> Tensor[(384), float64] {
  %136 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %136.2
}

def @func_1467(%var_1449: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  %137 = @func_1048() /* ty=Tensor[(3, 15, 7), float32] */;
  %138 = cast(%var_1449, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %143 = reshape(%142, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %144 = @func_555(%143) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %145 = greater(%140, %141) /* ty=Tensor[(3, 15, 7), bool] */;
  %146 = %144.1;
  (%145, %146, meta[relay.Constant][8] /* ty=Tensor[(192), int64] */)
}

def @func_3789() -> (Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) {
  @func_3787() /* ty=(Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) */
}

def @func_6590() -> Tensor[(4, 12, 8), bool] {
  %148 = fn () -> Tensor[(4, 12, 8), bool] {
    %147 = @func_5392() /* ty=(Tensor[(4, 12, 8), bool],) */;
    %147.0
  };
  %148() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_2443(%var_2439: Tensor[(14, 6, 2), int64], %var_2440: Tensor[(14, 6, 2), int64], %var_2441: Tensor[(192), int64], %var_2442: Tensor[(4, 12, 4), int64]) -> (Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) {
  @func_2437(%var_2439, %var_2440, %var_2441, %var_2442) /* ty=(Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) */
}

def @func_5104(%var_5102: Tensor[(4, 12, 8), bool]) -> Tensor[(4, 12, 8), uint32] {
  @func_5101(%var_5102) /* ty=Tensor[(4, 12, 8), uint32] */
}

def @func_2799() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  @func_2797() /* ty=(Tensor[(384), float64], Tensor[(4, 12, 8), float32]) */
}

def @func_2032() -> (Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
  %149 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %150 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %151 = reshape(%150, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %152 = @func_1348(%151) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %153 = %152.3;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %155 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %156 = %149.0;
  %157 = log2(%154) /* ty=Tensor[(3, 15, 7), float32] */;
  %158 = %155.0;
  (%156, meta[relay.Constant][9] /* ty=Tensor[(192), int64] */, %157, %158)
}

def @func_2755() -> (Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) {
  @func_2753() /* ty=(Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) */
}

def @func_3276() -> Tensor[(4, 12, 8), bool] {
  %160 = fn () -> Tensor[(4, 12, 8), bool] {
    %159 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
    %159.1
  };
  %160() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_3975() -> Tensor[(4, 12, 8), bool] {
  @func_3973() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_5832() -> Tensor[(4, 12, 8), float32] {
  @func_5830() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_2180() -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) {
  %167 = fn () -> (Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) {
    %161 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
    %162 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
    %163 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
    %164 = %161.1;
    %165 = %162.0;
    %166 = %163.2;
    (%164, %165, %166)
  };
  %167() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */
}

def @func_5360() -> Tensor[(4, 12, 8), float32] {
  %169 = fn () -> Tensor[(4, 12, 8), float32] {
    %168 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
    %168.0
  };
  %169() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_5186() -> Tensor[(3, 15, 7), float32] {
  %171 = fn () -> Tensor[(3, 15, 7), float32] {
    %170 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
    %170.1
  };
  %171() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_2437(%var_2396: Tensor[(14, 6, 2), int64], %var_2397: Tensor[(14, 6, 2), int64], %var_2413: Tensor[(192), int64], %var_2428: Tensor[(4, 12, 4), int64]) -> (Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) {
  %172 = cast(%var_2397, dtype="bool") /* ty=Tensor[(14, 6, 2), bool] */;
  %173 = shape_of(%var_2396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_2396, dtype="bool") /* ty=Tensor[(14, 6, 2), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %177 = cast(%var_2413, dtype="int64") /* ty=Tensor[(192), int64] */;
  %178 = reshape(%177, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %179 = @func_555(%178) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %180 = %179.0;
  %181 = cast(%var_2428, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %185 = equal(%174, %175) /* ty=Tensor[(14, 6, 2), bool] */;
  %186 = %176.0;
  %187 = divide(%183, %184) /* ty=Tensor[(4, 12, 4), float64] */;
  (%185, %186, %var_2413, %187)
}

def @func_8467(%var_8465: Tensor[(168), int64], %var_8466: Tensor[(52, 4), uint32]) -> (Tensor[(384), float64], Tensor[(192), int64], Tensor[(168), int64], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), uint8], Tensor[(8, 2, 13), uint32], Tensor[(52, 4), uint32]) {
  @func_8463(%var_8465, %var_8466) /* ty=(Tensor[(384), float64], Tensor[(192), int64], Tensor[(168), int64], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), uint8], Tensor[(8, 2, 13), uint32], Tensor[(52, 4), uint32]) */
}

def @func_1281(%var_1280: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) {
  %205 = fn (%var_1276: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) {
    %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
    %189 = reshape(%188, newshape=[84]) /* ty=Tensor[(84), float32] */;
    %190 = @func_1209(%189) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
    %191 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %192 = %191.0;
    %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 15, 7), float32] */, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%192, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %197 = not_equal(%195, %196) /* ty=Tensor[(3, 15, 7), bool] */;
    %198 = cast(%197, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %199 = cast(%var_1276, dtype="int64") /* ty=Tensor[(192), int64] */;
    %200 = reshape(%199, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %201 = @func_555(%200) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
    %202 = %190.2;
    %203 = rsqrt(%198) /* ty=Tensor[(3, 15, 7), float32] */;
    %204 = %201.0;
    (%202, meta[relay.Constant][10] /* ty=Tensor[(84), float32] */, %203, %204, %var_1276)
  };
  %205(%var_1280) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */
}

def @func_4629() -> Tensor[(3, 15, 7), float64] {
  %207 = fn () -> Tensor[(3, 15, 7), float64] {
    %206 = @func_4345() /* ty=(Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) */;
    %206.0
  };
  %207() /* ty=Tensor[(3, 15, 7), float64] */
}

def @func_1377() -> (Tensor[(4, 12, 8), float64],) {
  %208 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %211 = atanh(%210) /* ty=Tensor[(4, 12, 8), float64] */;
  (%211,)
}

def @func_7366() -> (Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
  %215 = fn () -> (Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
    %212 = @func_5760() /* ty=(Tensor[(3, 15, 7), float64],) */;
    %213 = %212.0;
    %214 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
    (%213, %214)
  };
  %215() /* ty=(Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */
}

def @func_5851() -> (Tensor[(3, 15, 7), float32],) {
  %217 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %216 = @func_5224() /* ty=Tensor[(3, 15, 7), float32] */;
    (%216,)
  };
  %217() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_156(%var_154: Tensor[(4, 12, 8), float64], %var_155: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  @func_152(%var_154, %var_155) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_3020() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) {
  %224 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) {
    %218 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %219 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
    %220 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
    %221 = %218.0;
    %222 = %219.1;
    %223 = %220.0;
    (%221, %222, %223)
  };
  %224() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) */
}

def @func_632(%var_630: Tensor[(8, 4, 1), uint64]) -> (Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) {
  @func_629(%var_630) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */
}

def @func_3645(%var_3640: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64],) {
  %225 = cast(%var_3640, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %226 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = power(%227, %228) /* ty=Tensor[(7, 11, 15), float64] */;
  (%229,)
}

def @func_5762() -> (Tensor[(3, 15, 7), float64],) {
  @func_5760() /* ty=(Tensor[(3, 15, 7), float64],) */
}

def @func_450() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) {
  @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */
}

def @func_558(%var_556: Tensor[(4, 12, 4), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) {
  @func_555(%var_556) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */
}

def @func_4208() -> Tensor[(4, 12, 8), bool] {
  @func_3275() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_975() -> (Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) {
  @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */
}

def @func_2797() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  %230 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %231 = @func_2141() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %232 = %230.2;
  %233 = %231.0;
  (%232, %233)
}

def @func_4443() -> (Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
  %243 = fn () -> (Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) {
    %234 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
    %235 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %236 = %235.0;
    %237 = cast(%236, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %238 = reshape(%237, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
    %239 = cast(%236, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %240 = %234.1;
    %241 = @func_1016(%238) /* ty=Tensor[(3, 15, 7), float64] */;
    %242 = erf(%239) /* ty=Tensor[(3, 15, 7), float32] */;
    (%240, %241, %242)
  };
  %243() /* ty=(Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */
}

def @func_7752() -> Tensor[(3, 15, 7), float32] {
  %245 = fn () -> Tensor[(3, 15, 7), float32] {
    %244 = @func_7719() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %244.0
  };
  %245() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_1049() -> Tensor[(3, 15, 7), float32] {
  %247 = fn () -> Tensor[(3, 15, 7), float32] {
    %246 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
    %246.0
  };
  %247() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_2486() -> Tensor[(3, 15, 7), float32] {
  %248 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %248.0
}

def @func_1510() -> (Tensor[(8, 15, 5), float32],) {
  %251 = fn () -> (Tensor[(8, 15, 5), float32],) {
    %249 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
    %250 = cosh(%249) /* ty=Tensor[(8, 15, 5), float32] */;
    (%250,)
  };
  %251() /* ty=(Tensor[(8, 15, 5), float32],) */
}

def @func_6422(%var_6371: Tensor[(11, 2, 13), float64]) -> (Tensor[(11, 2, 13), float64], Tensor[(11, 2, 13), float32], Tensor[(4, 12, 8), float32]) {
  %252 = cast(%var_6371, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %253 = cast(%var_6371, dtype="float32") /* ty=Tensor[(11, 2, 13), float32] */;
  %254 = @func_6222() /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) */;
  %255 = erf(%252) /* ty=Tensor[(11, 2, 13), float64] */;
  %256 = log(%253) /* ty=Tensor[(11, 2, 13), float32] */;
  %257 = %254.0;
  (%255, %256, %257)
}

def @func_5413() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  @func_5411() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */
}

def @func_783(%var_781: Tensor[(4, 12, 8), bool]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) {
  @func_780(%var_781) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */
}

def @func_6969() -> (Tensor[(4, 12, 8), float64],) {
  %260 = fn () -> (Tensor[(4, 12, 8), float64],) {
    %258 = @func_1377() /* ty=(Tensor[(4, 12, 8), float64],) */;
    %259 = %258.0;
    (%259,)
  };
  %260() /* ty=(Tensor[(4, 12, 8), float64],) */
}

def @func_6624() -> Tensor[(3, 15, 7), float32] {
  %262 = fn () -> Tensor[(3, 15, 7), float32] {
    %261 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %261.0
  };
  %262() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_6950(%var_6948: Tensor[(8, 2, 13), uint32], %var_6949: Tensor[(8, 2, 13), uint32]) -> (Tensor[(8, 2, 13), uint32],) {
  @func_6946(%var_6948, %var_6949) /* ty=(Tensor[(8, 2, 13), uint32],) */
}

def @func_4123() -> (Tensor[(3, 15, 7), float32],) {
  %265 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %263 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %264 = %263.0;
    (%264,)
  };
  %265() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_7191() -> (Tensor[(3, 15, 7), float32], Tensor[(1, 384), uint8], Tensor[(384), float64]) {
  %266 = @func_1443() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %267 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
  %268 = @func_7015() /* ty=(Tensor[(384), float64],) */;
  %269 = %266.0;
  %270 = %267.2;
  %271 = %268.0;
  (%269, %270, %271)
}

def @func_479() -> (Tensor[(3, 15, 7), float32],) {
  @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_8103() -> (Tensor[(6, 13, 16), int8], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  %272 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %273 = acosh(%272) /* ty=Tensor[(6, 13, 16), float64] */;
  %274 = cast(%273, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %275 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(6, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 13, 16), float64] */, dtype="int8") /* ty=Tensor[(6, 13, 16), int8] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %278 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %279 = multiply(%276, %277) /* ty=Tensor[(6, 13, 16), int8] */;
  %280 = @func_5224() /* ty=Tensor[(3, 15, 7), float32] */;
  %281 = %278.1;
  (%279, %280, %281)
}

def @func_7499() -> (Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) {
  %288 = fn () -> (Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) {
    %282 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
    %283 = @func_5602() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) */;
    %284 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
    %285 = %282.0;
    %286 = %283.4;
    %287 = %284.0;
    (%285, %286, %287)
  };
  %288() /* ty=(Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) */
}

def @func_1763(%var_1761: Tensor[(192), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) {
  @func_1760(%var_1761) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) */
}

def @func_3648(%var_3646: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64],) {
  @func_3645(%var_3646) /* ty=(Tensor[(7, 11, 15), float64],) */
}

def @func_4210() -> Tensor[(4, 12, 8), bool] {
  @func_4208() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_1444() -> (Tensor[(3, 15, 7), float32],) {
  %291 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %289 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
    %290 = %289.0;
    (%290,)
  };
  %291() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_152(%var_117: Tensor[(4, 12, 8), float64], %var_118: Tensor[(4, 12, 8), float64]) -> Tensor[(4, 12, 8), bool] {
  %292 = cast(%var_118, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %293 = shape_of(%var_117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%var_117, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%294, %295) /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_2034() -> (Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) {
  @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */
}

def @func_7193() -> (Tensor[(3, 15, 7), float32], Tensor[(1, 384), uint8], Tensor[(384), float64]) {
  @func_7191() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(1, 384), uint8], Tensor[(384), float64]) */
}

def @func_8059() -> (Tensor[(14, 2, 3), float64], Tensor[(84), float32], Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 3, 8), float64], Tensor[(315), float32]) {
  @func_8057() /* ty=(Tensor[(14, 2, 3), float64], Tensor[(84), float32], Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 3, 8), float64], Tensor[(315), float32]) */
}

def @func_1211(%var_1210: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) {
  %307 = fn (%var_1205: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) {
    %296 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
    %297 = %296.0;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %299 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
    %300 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %301 = cast(%var_1205, dtype="float32") /* ty=Tensor[(84), float32] */;
    %302 = reshape(%301, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
    %303 = tan(%298) /* ty=Tensor[(3, 15, 7), float64] */;
    %304 = %299.2;
    %305 = %300.0;
    %306 = @func_1132(%302) /* ty=Tensor[(14, 2, 3), float64] */;
    (%303, %304, %305, %306, %var_1205)
  };
  %307(%var_1210) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */
}

def @func_1223() -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) {
  %308 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %309 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %310 = %308.0;
  %311 = %309.0;
  (%310, %311)
}

def @func_2392() -> (Tensor[(3, 15, 7), float64],) {
  @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */
}

def @func_5262() -> Tensor[(384), float64] {
  %313 = fn () -> Tensor[(384), float64] {
    %312 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
    %312.2
  };
  %313() /* ty=Tensor[(384), float64] */
}

def @func_448() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) {
  %314 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %315 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %316 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %317 = reshape(%315, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %318 = reshape(%316, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %319 = sin(%314) /* ty=Tensor[(3, 15, 7), float32] */;
  %320 = @func_152(%317, %318) /* ty=Tensor[(4, 12, 8), bool] */;
  (%319, %320, meta[relay.Constant][16] /* ty=Tensor[(384), float64] */)
}

def @func_2642(%var_2640: Tensor[(156), uint8]) -> (Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) {
  @func_2639(%var_2640) /* ty=(Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) */
}

def @func_4346() -> (Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) {
  %329 = fn () -> (Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) {
    %321 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %322 = %321.0;
    %323 = cast(%322, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %324 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
    %325 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
    %326 = log(%323) /* ty=Tensor[(3, 15, 7), float64] */;
    %327 = %324.3;
    %328 = %325.0;
    (%326, %327, %328)
  };
  %329() /* ty=(Tensor[(3, 15, 7), float64], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64]) */
}

def @func_7016() -> (Tensor[(384), float64],) {
  %331 = fn () -> (Tensor[(384), float64],) {
    %330 = @func_1527() /* ty=Tensor[(384), float64] */;
    (%330,)
  };
  %331() /* ty=(Tensor[(384), float64],) */
}

def @func_3769() -> Tensor[(8, 15, 5), float32] {
  %333 = fn () -> Tensor[(8, 15, 5), float32] {
    %332 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
    %332.1
  };
  %333() /* ty=Tensor[(8, 15, 5), float32] */
}

def @func_8105() -> (Tensor[(6, 13, 16), int8], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  @func_8103() /* ty=(Tensor[(6, 13, 16), int8], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */
}

def @func_5393() -> (Tensor[(4, 12, 8), bool],) {
  %335 = fn () -> (Tensor[(4, 12, 8), bool],) {
    %334 = @func_4208() /* ty=Tensor[(4, 12, 8), bool] */;
    (%334,)
  };
  %335() /* ty=(Tensor[(4, 12, 8), bool],) */
}

def @func_6048() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  %336 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %337 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %338 = %336.0;
  %339 = %337.0;
  (%338, %339)
}

def @func_6946(%var_6907: Tensor[(8, 2, 13), uint32], %var_6908: Tensor[(8, 2, 13), uint32]) -> (Tensor[(8, 2, 13), uint32],) {
  %340 = cast(%var_6908, dtype="uint32") /* ty=Tensor[(8, 2, 13), uint32] */;
  %341 = shape_of(%var_6907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_6907, dtype="uint32") /* ty=Tensor[(8, 2, 13), uint32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %344 = right_shift(%342, %343) /* ty=Tensor[(8, 2, 13), uint32] */;
  (%344,)
}

def @func_4799(%var_4796: Tensor[(8, 15, 5), float32], %var_4797: Tensor[(56), float32], %var_4798: Tensor[(2, 16), uint64]) -> (Tensor[(8, 15, 5), uint16], Tensor[(4, 14, 16), bool], Tensor[(896), float32], Tensor[(2, 16), uint64], Tensor[(56), bool]) {
  %365 = fn (%var_4767: Tensor[(8, 15, 5), float32], %var_4778: Tensor[(56), float32], %var_4780: Tensor[(2, 16), uint64]) -> (Tensor[(8, 15, 5), uint16], Tensor[(4, 14, 16), bool], Tensor[(896), float32], Tensor[(2, 16), uint64], Tensor[(56), bool]) {
    %345 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
    %346 = %345.1;
    %347 = cast(%var_4767, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
    %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%346, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %351 = cast(%var_4778, dtype="float32") /* ty=Tensor[(56), float32] */;
    %352 = cast(meta[relay.Constant][17] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
    %353 = cast(%var_4780, dtype="uint64") /* ty=Tensor[(2, 16), uint64] */;
    %354 = reshape(%351, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float32] */;
    %355 = reshape(%352, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
    %356 = reshape(%353, newshape=[32]) /* ty=Tensor[(32), uint64] */;
    %357 = @func_3583(%354, %355, %356) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) */;
    %358 = cast(meta[relay.Constant][18] /* ty=Tensor[(56), float32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
    %359 = shape_of(%var_4778, dtype="int32") /* ty=Tensor[(1), int32] */;
    %360 = cast(%var_4778, dtype="bool") /* ty=Tensor[(56), bool] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?), bool] */;
    %362 = maximum(%349, %350) /* ty=Tensor[(8, 15, 5), uint16] */;
    %363 = %357.0;
    %364 = not_equal(%360, %361) /* ty=Tensor[(56), bool] */;
    (%362, %363, meta[relay.Constant][17] /* ty=Tensor[(896), float32] */, %var_4780, %364)
  };
  %365(%var_4796, %var_4797, %var_4798) /* ty=(Tensor[(8, 15, 5), uint16], Tensor[(4, 14, 16), bool], Tensor[(896), float32], Tensor[(2, 16), uint64], Tensor[(56), bool]) */
}

def @func_4141() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %369 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
    %366 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %367 = %366.0;
    %368 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
    (%367, %368)
  };
  %369() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */
}

def @func_4062(%var_4061: Tensor[(384), bool]) -> (Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) {
  %384 = fn (%var_4058: Tensor[(384), bool]) -> (Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) {
    %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 7), uint32] */;
    %371 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 7), uint32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %374 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %375 = %374.0;
    %376 = cast(%375, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    %377 = cast(%var_4058, dtype="bool") /* ty=Tensor[(384), bool] */;
    %378 = reshape(%376, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
    %379 = reshape(%377, newshape=[384]) /* ty=Tensor[(384), bool] */;
    %380 = @func_3536(%378, %379) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) */;
    %381 = logical_xor(%372, %373) /* ty=Tensor[(8, 16, 7), uint32] */;
    %382 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
    %383 = %380.2;
    (%381, %382, %375, %383, %var_4058)
  };
  %384(%var_4061) /* ty=(Tensor[(8, 16, 7), uint32], Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float32], Tensor[(384), bool], Tensor[(384), bool]) */
}

def @func_4280() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64]) {
  %385 = @func_4159() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %386 = %385.0;
  %387 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  (%386, %387)
}

def @func_3612(%var_3611: Tensor[(4, 12, 8), uint8]) -> Tensor[(4, 12, 8), uint64] {
  %394 = fn (%var_3605: Tensor[(4, 12, 8), uint8]) -> Tensor[(4, 12, 8), uint64] {
    %388 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
    %389 = %388.3;
    %390 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%392, %393) /* ty=Tensor[(4, 12, 8), uint64] */
  };
  %394(%var_3611) /* ty=Tensor[(4, 12, 8), uint64] */
}

def @func_2639(%var_2620: Tensor[(156), uint8]) -> (Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) {
  %395 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %396 = cast(%var_2620, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %397 = cast(%var_2620, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %398 = reshape(%396, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), uint8] */;
  %399 = reshape(%397, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), uint8] */;
  %400 = @func_1880(%398, %399) /* ty=(Tensor[(4, 3, 13), uint8],) */;
  %401 = %395.1;
  %402 = cast(%401, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %403 = reshape(%402, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %404 = @func_629(%403) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %405 = %400.0;
  %406 = %404.1;
  (%401, %405, %var_2620, %406)
}

def @func_4549() -> (Tensor[(3, 15, 7), float32],) {
  %409 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %407 = @func_1958() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %408 = %407.0;
    (%408,)
  };
  %409() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_3539(%var_3537: Tensor[(3, 15, 7), float32], %var_3538: Tensor[(384), bool]) -> (Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) {
  %420 = fn (%var_3499: Tensor[(3, 15, 7), float32], %var_3516: Tensor[(384), bool]) -> (Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) {
    %410 = @func_1048() /* ty=Tensor[(3, 15, 7), float32] */;
    %411 = cast(%var_3499, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%410, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %415 = cast(%var_3516, dtype="bool") /* ty=Tensor[(384), bool] */;
    %416 = reshape(%415, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
    %417 = @func_780(%416) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
    %418 = equal(%413, %414) /* ty=Tensor[(3, 15, 7), bool] */;
    %419 = %417.2;
    (%418, %419, %var_3516)
  };
  %420(%var_3537, %var_3538) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(4, 12, 8), uint8], Tensor[(384), bool]) */
}

def @func_2066(%var_2054: Tensor[(3, 4, 2), float64], %var_2055: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), bool], Tensor[(4, 12, 8), float64]) {
  %421 = cast(%var_2055, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %422 = shape_of(%var_2054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_2054, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = @func_1377() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %426 = greater(%423, %424) /* ty=Tensor[(3, 4, 2), bool] */;
  %427 = %425.0;
  (%426, %427)
}

def @func_1529() -> Tensor[(384), float64] {
  @func_1527() /* ty=Tensor[(384), float64] */
}

def @func_4007() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) {
  @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */
}

def @func_2112() -> (Tensor[(3, 15, 7), float32],) {
  %430 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %428 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %429 = %428.0;
    (%429,)
  };
  %430() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_4514() -> (Tensor[(3, 15, 7), float32],) {
  %431 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %432 = %431.0;
  (%432,)
}

def @func_5062(%var_5060: float64, %var_5061: Tensor[(192), int64]) -> (Tensor[(4, 12, 8), bool], Tensor[(72), int64], float64, Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  @func_5058(%var_5060, %var_5061) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(72), int64], float64, Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) */
}

def @func_5225() -> Tensor[(3, 15, 7), float32] {
  %436 = fn () -> Tensor[(3, 15, 7), float32] {
    %433 = @func_3493() /* ty=(Tensor[(3, 15, 7), float64],) */;
    %434 = %433.0;
    %435 = cast(%434, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
    exp(%435) /* ty=Tensor[(3, 15, 7), float32] */
  };
  %436() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_2828() -> (Tensor[(3, 15, 7), float32],) {
  @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_3170(%var_3104: Tensor[(8, 10, 8), float32], %var_3125: Tensor[(315), float32], %var_3128: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(315), float32], Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(8, 10, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %437 = cast(%var_3125, dtype="float32") /* ty=Tensor[(315), float32] */;
  %438 = reshape(%437, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %439 = cast(%var_3128, dtype="float32") /* ty=Tensor[(84), float32] */;
  %440 = reshape(%439, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %441 = @func_1209(%440) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
  %442 = cast(%var_3104, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %443 = sqrt(%442) /* ty=Tensor[(8, 10, 8), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %445 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %446 = @func_1016(%438) /* ty=Tensor[(3, 15, 7), float64] */;
  %447 = %441.2;
  %448 = cosh(%444) /* ty=Tensor[(8, 10, 8), float32] */;
  %449 = %445.0;
  %450 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  (%446, %var_3125, %447, %var_3128, %448, %449, %450)
}

def @func_6146() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
  %454 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
    %451 = @func_5411() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
    %452 = %451.0;
    %453 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
    (%452, %453)
  };
  %454() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */
}

def @func_7079() -> Tensor[(3, 15, 7), float32] {
  %456 = fn () -> Tensor[(3, 15, 7), float32] {
    %455 = @func_6159() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %455.0
  };
  %456() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_5604() -> (Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  @func_5602() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) */
}

def @func_7612(%var_7610: bool) -> (Tensor[(3, 15, 7), float32], Tensor[(1, 2, 15), bool], bool, Tensor[(5, 6), bool], Tensor[(3, 15, 7), float32]) {
  @func_7609(%var_7610) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(1, 2, 15), bool], bool, Tensor[(5, 6), bool], Tensor[(3, 15, 7), float32]) */
}

def @func_1379() -> (Tensor[(4, 12, 8), float64],) {
  @func_1377() /* ty=(Tensor[(4, 12, 8), float64],) */
}

def @func_1295() -> (Tensor[(4, 12, 8), float32],) {
  %459 = fn () -> (Tensor[(4, 12, 8), float32],) {
    %457 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
    %458 = %457.0;
    (%458,)
  };
  %459() /* ty=(Tensor[(4, 12, 8), float32],) */
}

def @func_7819() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  @func_7817() /* ty=(Tensor[(384), float64], Tensor[(4, 12, 8), float32]) */
}

def @func_8463(%var_8393: Tensor[(168), int64], %var_8461: Tensor[(52, 4), uint32]) -> (Tensor[(384), float64], Tensor[(192), int64], Tensor[(168), int64], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), uint8], Tensor[(8, 2, 13), uint32], Tensor[(52, 4), uint32]) {
  %460 = @func_5162() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %461 = cast(%var_8393, dtype="int64") /* ty=Tensor[(168), int64] */;
  %462 = reshape(%461, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %463 = @func_4106(%462) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) */;
  %464 = @func_973() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(2, 192), int64], Tensor[(4, 12, 8), uint8]) */;
  %465 = %464.3;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %467 = acosh(%466) /* ty=Tensor[(4, 12, 8), float64] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %469 = %463.3;
  %470 = cast(%469, dtype="int64") /* ty=Tensor[(192), int64] */;
  %471 = reshape(%470, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %472 = @func_1760(%471) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) */;
  %473 = cast(%var_8461, dtype="uint32") /* ty=Tensor[(52, 4), uint32] */;
  %474 = cast(%var_8461, dtype="uint32") /* ty=Tensor[(52, 4), uint32] */;
  %475 = reshape(%473, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), uint32] */;
  %476 = reshape(%474, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), uint32] */;
  %477 = @func_6946(%475, %476) /* ty=(Tensor[(8, 2, 13), uint32],) */;
  %478 = %460.0;
  %479 = asin(%468) /* ty=Tensor[(4, 12, 8), float32] */;
  %480 = %472.2;
  %481 = %477.0;
  (%478, %469, %var_8393, %479, %480, %481, %var_8461)
}

def @func_5906(%var_5905: Tensor[(315), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) {
  %490 = fn (%var_5863: Tensor[(315), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) {
    %482 = cast(%var_5863, dtype="float32") /* ty=Tensor[(315), float32] */;
    %483 = reshape(%482, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
    %484 = @func_1467(%483) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */;
    %485 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
    %486 = @func_3275() /* ty=Tensor[(4, 12, 8), bool] */;
    %487 = %484.2;
    %488 = %485.1;
    %489 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
    (%486, %487, %var_5863, %488, %489)
  };
  %490(%var_5905) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) */
}

def @func_1883(%var_1881: Tensor[(4, 3, 13), uint8], %var_1882: Tensor[(4, 3, 13), uint8]) -> (Tensor[(4, 3, 13), uint8],) {
  %496 = fn (%var_1860: Tensor[(4, 3, 13), uint8], %var_1861: Tensor[(4, 3, 13), uint8]) -> (Tensor[(4, 3, 13), uint8],) {
    %491 = cast(%var_1861, dtype="uint8") /* ty=Tensor[(4, 3, 13), uint8] */;
    %492 = shape_of(%var_1860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%var_1860, dtype="uint8") /* ty=Tensor[(4, 3, 13), uint8] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %495 = right_shift(%493, %494) /* ty=Tensor[(4, 3, 13), uint8] */;
    (%495,)
  };
  %496(%var_1881, %var_1882) /* ty=(Tensor[(4, 3, 13), uint8],) */
}

def @func_6303() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %499 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
    %497 = @func_2486() /* ty=Tensor[(3, 15, 7), float32] */;
    %498 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
    (%497, %498)
  };
  %499() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */
}

def @func_2357(%var_2267: Tensor[(192), int64], %var_2275: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(84), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), int32]) {
  %500 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %501 = cast(%var_2267, dtype="int64") /* ty=Tensor[(192), int64] */;
  %502 = reshape(%501, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %503 = @func_1348(%502) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %504 = cast(%var_2275, dtype="float32") /* ty=Tensor[(84), float32] */;
  %505 = reshape(%504, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %506 = @func_1209(%505) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(2, 192), int64], Tensor[(3, 15, 7), float32], Tensor[(14, 2, 3), float64], Tensor[(84), float32]) */;
  %507 = @func_2129() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */;
  %508 = %507.1;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %510 = reshape(%509, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %511 = cast(%var_2267, dtype="int64") /* ty=Tensor[(192), int64] */;
  %512 = reshape(%511, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %513 = @func_1279(%512) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %514 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %515 = @func_1771() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %516 = %515.0;
  %517 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="int32") /* ty=Tensor[(4, 12, 8), int32] */;
  %520 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%516, dtype="int32") /* ty=Tensor[(4, 12, 8), int32] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %523 = %500.0;
  %524 = %503.1;
  %525 = %506.4;
  %526 = @func_1016(%510) /* ty=Tensor[(3, 15, 7), float64] */;
  %527 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
  %528 = %513.0;
  %529 = %514.0;
  %530 = add(%521, %522) /* ty=Tensor[(4, 12, 8), int32] */;
  (%523, %524, %var_2267, %525, %var_2275, %508, %526, %527, %528, %529, %530)
}

def @func_7923(%var_7921: Tensor[(2, 192), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), bool]) {
  @func_7920(%var_7921) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(2, 192), bool]) */
}

def @func_5457(%var_5422: Tensor[(1155), float64]) -> (Tensor[(384), float64], Tensor[(4, 12, 8), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(8, 15, 5), float64]) {
  %531 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %532 = @func_1771() /* ty=(Tensor[(4, 12, 8), float64],) */;
  %533 = cast(%var_5422, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %534 = reshape(%533, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %535 = @func_3645(%534) /* ty=(Tensor[(7, 11, 15), float64],) */;
  %536 = @func_3768() /* ty=Tensor[(8, 15, 5), float32] */;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %538 = %531.2;
  %539 = %532.0;
  %540 = %535.0;
  %541 = sin(%537) /* ty=Tensor[(8, 15, 5), float64] */;
  (%538, %539, %540, %var_5422, %541)
}

def @func_7481() -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) {
  @func_7479() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) */
}

def @func_2686(%var_2679: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) {
  %542 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %543 = %542.0;
  %544 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = cast(%543, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %549 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %553 = reshape(%552, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), uint64] */;
  %554 = @func_629(%553) /* ty=(Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) */;
  %555 = cast(%var_2679, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %556 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 8), float32] */, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %559 = equal(%546, %547) /* ty=Tensor[(4, 12, 8), bool] */;
  %560 = not_equal(%550, %551) /* ty=Tensor[(4, 12, 8), bool] */;
  %561 = %554.1;
  %562 = floor_divide(%557, %558) /* ty=Tensor[(4, 12, 8), float64] */;
  (%559, %560, %561, meta[relay.Constant][22] /* ty=Tensor[(32), uint64] */, %562)
}

def @func_1018(%var_1017: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float64] {
  %569 = fn (%var_997: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float64] {
    %563 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %564 = %563.0;
    %565 = cast(%var_997, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%564, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    subtract(%567, %568) /* ty=Tensor[(3, 15, 7), float64] */
  };
  %569(%var_1017) /* ty=Tensor[(3, 15, 7), float64] */
}

def @func_5824(%var_5822: Tensor[(315), float32]) -> (Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) {
  @func_5821(%var_5822) /* ty=(Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) */
}

def @func_4160() -> (Tensor[(3, 15, 7), float32],) {
  %572 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %570 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %571 = %570.0;
    (%571,)
  };
  %572() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_1132(%var_1106: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float64] {
  %573 = cast(%var_1106, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %574 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = greater(%575, %576) /* ty=Tensor[(14, 2, 3), bool] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(14, 2, 3), float64] */;
  acos(%578) /* ty=Tensor[(14, 2, 3), float64] */
}

def @func_4516() -> (Tensor[(3, 15, 7), float32],) {
  @func_4514() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_5411() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %579 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %580 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
  %581 = %579.0;
  %582 = %580.0;
  (%581, %582)
}

def @func_7301() -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) {
  %583 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %585 = cast(%583, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %586 = reshape(%584, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %587 = reshape(%585, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %588 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %589 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %590 = reshape(%588, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %591 = reshape(%589, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), int64] */;
  %592 = @func_1546(%590, %591) /* ty=Tensor[(3, 3, 8), int64] */;
  %593 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), int64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = cast(meta[relay.Constant][25] /* ty=Tensor[(105, 3), float32] */, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %598 = reshape(%597, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %599 = @func_5821(%598) /* ty=(Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) */;
  %600 = @func_2753() /* ty=(Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) */;
  %601 = cast(meta[relay.Constant][25] /* ty=Tensor[(105, 3), float32] */, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %602 = cosh(%601) /* ty=Tensor[(105, 3), float32] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %604 = rsqrt(%603) /* ty=Tensor[(105, 3), float64] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %606 = @func_3787() /* ty=(Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) */;
  %607 = @func_152(%586, %587) /* ty=Tensor[(4, 12, 8), bool] */;
  %608 = floor_divide(%595, %596) /* ty=Tensor[(3, 3, 8), float64] */;
  %609 = %599.1;
  %610 = %600.1;
  %611 = atanh(%605) /* ty=Tensor[(105, 3), float64] */;
  %612 = %606.0;
  (%583, %607, %608, %609, %610, %611, %612)
}

def @func_579() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) {
  %625 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) {
    %613 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %614 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %615 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %616 = reshape(%614, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
    %617 = reshape(%615, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
    %618 = @func_152(%616, %617) /* ty=Tensor[(4, 12, 8), bool] */;
    %619 = cast(%618, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
    %620 = cast(%618, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
    %621 = reshape(%619, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
    %622 = reshape(%620, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
    %623 = %613.0;
    %624 = @func_152(%621, %622) /* ty=Tensor[(4, 12, 8), bool] */;
    (%623, %618, meta[relay.Constant][26] /* ty=Tensor[(2, 192), float64] */, %624)
  };
  %625() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */
}

def @func_5675(%var_5672: Tensor[(2, 448), float32], %var_5673: Tensor[(32), uint64], %var_5674: Tensor[(192), int64]) -> (Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) {
  %639 = fn (%var_5656: Tensor[(2, 448), float32], %var_5657: Tensor[(32), uint64], %var_5669: Tensor[(192), int64]) -> (Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) {
    %626 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %627 = cast(%var_5656, dtype="float32") /* ty=Tensor[(2, 448), float32] */;
    %628 = cast(%var_5657, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %629 = reshape(%626, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float32] */;
    %630 = reshape(%627, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
    %631 = reshape(%628, newshape=[32]) /* ty=Tensor[(32), uint64] */;
    %632 = @func_3583(%629, %630, %631) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(8, 4, 1), uint64], Tensor[(32), uint64]) */;
    %633 = cast(%var_5669, dtype="int64") /* ty=Tensor[(192), int64] */;
    %634 = reshape(%633, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
    %635 = @func_1348(%634) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
    %636 = @func_1527() /* ty=Tensor[(384), float64] */;
    %637 = %632.1;
    %638 = %635.0;
    (%636, %637, meta[relay.Constant][27] /* ty=Tensor[(56), float32] */, %var_5656, %var_5657, %638, %var_5669)
  };
  %639(%var_5672, %var_5673, %var_5674) /* ty=(Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) */
}

def @func_7479() -> (Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) {
  %640 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  %641 = @func_5521() /* ty=Tensor[(4, 12, 8), float32] */;
  (%640, %641)
}

def @func_6890() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
  %644 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) {
    %642 = @func_1812() /* ty=Tensor[(3, 15, 7), float32] */;
    %643 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
    (%642, %643)
  };
  %644() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */
}

def @func_1813() -> Tensor[(3, 15, 7), float32] {
  %646 = fn () -> Tensor[(3, 15, 7), float32] {
    %645 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
    %645.1
  };
  %646() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_5830() -> Tensor[(4, 12, 8), float32] {
  @func_5521() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_1435() -> (Tensor[(3, 15, 7), float32],) {
  @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_8319(%var_8317: Tensor[(14, 13, 6), float32], %var_8318: Tensor[(4, 48), float64]) -> (Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 48), float64]) {
  %678 = fn (%var_8214: Tensor[(14, 13, 6), float32], %var_8274: Tensor[(4, 48), float64]) -> (Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 48), float64]) {
    %647 = cast(-6.41021f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %648 = cast(%var_8214, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
    %649 = floor_divide(%647, %648) /* ty=Tensor[(14, 13, 6), float32] */;
    %650 = cast(%649, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
    %651 = cast(%var_8214, dtype="float32") /* ty=Tensor[(14, 13, 6), float32] */;
    %652 = @func_2826() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %653 = @func_6222() /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) */;
    %654 = %653.2;
    %655 = cast(%654, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %656 = erf(%655) /* ty=Tensor[(4, 48), float64] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %658 = atan(%657) /* ty=Tensor[(4, 48), float64] */;
    %659 = cast(%var_8274, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(2), int32] */;
    %661 = cast(%658, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %663 = minimum(%661, %662) /* ty=Tensor[(4, 48), float32] */;
    %664 = cast(%663, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
    %665 = shape_of(%656, dtype="int32") /* ty=Tensor[(2), int32] */;
    %666 = cast(%656, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %668 = logical_and(%666, %667) /* ty=Tensor[(4, 48), bool] */;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %670 = shape_of(%656, dtype="int32") /* ty=Tensor[(2), int32] */;
    %671 = cast(%656, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %673 = exp(%650) /* ty=Tensor[(14, 13, 6), float32] */;
    %674 = @func_5185() /* ty=Tensor[(3, 15, 7), float32] */;
    %675 = log10(%651) /* ty=Tensor[(14, 13, 6), float32] */;
    %676 = %652.0;
    %677 = mod(%671, %672) /* ty=Tensor[(4, 48), float64] */;
    (%673, %674, %675, %676, %677)
  };
  %678(%var_8317, %var_8318) /* ty=(Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(14, 13, 6), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 48), float64]) */
}

def @func_2929(%var_2927: Tensor[(7, 1, 10), uint32], %var_2928: Tensor[(7, 16, 10), uint32]) -> (Tensor[(7, 16, 10), bool], Tensor[(8, 15, 5), float64], Tensor[(32), uint64], Tensor[(156), uint8], Tensor[(7, 16, 10), float32], Tensor[(4, 12, 8), float32]) {
  @func_2925(%var_2927, %var_2928) /* ty=(Tensor[(7, 16, 10), bool], Tensor[(8, 15, 5), float64], Tensor[(32), uint64], Tensor[(156), uint8], Tensor[(7, 16, 10), float32], Tensor[(4, 12, 8), float32]) */
}

def @func_4106(%var_4103: Tensor[(168), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 4), float64], Tensor[(168), int64], Tensor[(192), int64]) {
  %679 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %680 = cast(%var_4103, dtype="int64") /* ty=Tensor[(168), int64] */;
  %681 = cast(%var_4103, dtype="int64") /* ty=Tensor[(168), int64] */;
  %682 = cast(meta[relay.Constant][28] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %683 = cast(meta[relay.Constant][28] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %684 = reshape(%680, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %685 = reshape(%681, newshape=[14, 6, 2]) /* ty=Tensor[(14, 6, 2), int64] */;
  %686 = reshape(%682, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %687 = reshape(%683, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %688 = @func_2437(%684, %685, %686, %687) /* ty=(Tensor[(14, 6, 2), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(4, 12, 4), float64]) */;
  %689 = %679.0;
  %690 = %688.3;
  (%689, %690, %var_4103, meta[relay.Constant][28] /* ty=Tensor[(192), int64] */)
}

def @func_1225() -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) {
  @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */
}

def @func_555(%var_538: Tensor[(4, 12, 4), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) {
  %691 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %692 = cast(%var_538, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %693 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %694 = maximum(%691, %692) /* ty=Tensor[(4, 12, 4), int64] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_1829() -> Tensor[(8, 15, 5), float32] {
  %696 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %696.0
}

def @func_6050() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  @func_6048() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */
}

def @func_1470(%var_1468: Tensor[(3, 15, 7), float32]) -> (Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) {
  @func_1467(%var_1468) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */
}

def @func_5058(%var_5003: float64, %var_5010: Tensor[(192), int64]) -> (Tensor[(4, 12, 8), bool], Tensor[(72), int64], float64, Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(3, 15, 7), float32]) {
  %697 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %700 = rsqrt(%699) /* ty=Tensor[(4, 12, 8), float32] */;
  %701 = cast(%698, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %705 = cast(%var_5003, dtype="float64") /* ty=float64 */;
  %706 = reshape(%705, newshape=[]) /* ty=float64 */;
  %707 = @func_3393(%706) /* ty=(Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) */;
  %708 = @func_4122() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %709 = cast(%var_5010, dtype="int64") /* ty=Tensor[(192), int64] */;
  %710 = reshape(%709, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %711 = @func_2581(%710) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */;
  %712 = cast(%700, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %713 = reshape(%712, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %714 = @func_2686(%713) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), bool], Tensor[(32), uint64], Tensor[(4, 12, 8), float64]) */;
  %715 = %711.0;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %717 = reshape(%716, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %718 = @func_1467(%717) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(3, 15, 7), float32], Tensor[(192), int64]) */;
  %719 = greater(%703, %704) /* ty=Tensor[(4, 12, 8), bool] */;
  %720 = %707.2;
  %721 = %708.0;
  %722 = %714.3;
  %723 = %718.1;
  (%719, %720, %var_5003, %721, %715, %var_5010, %722, %723)
}

def @func_6223() -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) {
  %731 = fn () -> (Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) {
    %724 = @func_5359() /* ty=Tensor[(4, 12, 8), float32] */;
    %725 = cast(%724, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
    %726 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 48), int64] */, dtype="int64") /* ty=Tensor[(4, 48), int64] */;
    %727 = reshape(%726, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
    %728 = @func_1348(%727) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
    %729 = sqrt(%725) /* ty=Tensor[(4, 12, 8), float32] */;
    %730 = %728.2;
    (%729, %730, meta[relay.Constant][29] /* ty=Tensor[(4, 48), int64] */)
  };
  %731() /* ty=(Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(4, 48), int64]) */
}

def @main(%var_8530: Tensor[(56, 16), float32]) -> (Tensor[(8, 4, 1), uint64], Tensor[(56, 16), float32], Tensor[(32), uint64], Tensor[(192), int64], Tensor[(32), uint64], Tensor[(105, 3), float64], Tensor[(3, 15, 7), float32], Tensor[(32), uint64], Tensor[(105, 3), bool], Tensor[(105, 3), bool]) {
  %732 = cast(%var_8530, dtype="float32") /* ty=Tensor[(56, 16), float32] */;
  %733 = cast(meta[relay.Constant][30] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %734 = cast(meta[relay.Constant][31] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %735 = reshape(%732, newshape=[2, 448]) /* ty=Tensor[(2, 448), float32] */;
  %736 = reshape(%733, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %737 = reshape(%734, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %738 = @func_5675(%735, %736, %737) /* ty=(Tensor[(384), float64], Tensor[(8, 4, 1), uint64], Tensor[(56), float32], Tensor[(2, 448), float32], Tensor[(32), uint64], Tensor[(4, 12, 8), float32], Tensor[(192), int64]) */;
  %739 = @func_4443() /* ty=(Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */;
  %740 = @func_7303() /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) */;
  %741 = %740.5;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %743 = asin(%742) /* ty=Tensor[(105, 3), float32] */;
  %744 = cast(%741, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(2), int32] */;
  %746 = cast(%743, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %748 = greater_equal(%746, %747) /* ty=Tensor[(105, 3), bool] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %750 = log2(%749) /* ty=Tensor[(105, 3), float64] */;
  %751 = cast(%743, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(2), int32] */;
  %753 = cast(%750, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %755 = mod(%753, %754) /* ty=Tensor[(105, 3), float32] */;
  %756 = cast(meta[relay.Constant][32] /* ty=Tensor[(105, 3), float64] */, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %757 = shape_of(%750, dtype="int32") /* ty=Tensor[(2), int32] */;
  %758 = cast(%750, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %760 = equal(%758, %759) /* ty=Tensor[(105, 3), bool] */;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %762 = shape_of(%755, dtype="int32") /* ty=Tensor[(2), int32] */;
  %763 = cast(%755, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %765 = cast(meta[relay.Constant][31] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %766 = reshape(%765, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %767 = @func_558(%766) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %768 = @func_7499() /* ty=(Tensor[(2, 192), float64], Tensor[(32), uint64], Tensor[(8, 15, 5), float32]) */;
  %769 = cast(%755, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %770 = asinh(%769) /* ty=Tensor[(105, 3), float64] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %772 = sigmoid(%771) /* ty=Tensor[(105, 3), float64] */;
  %773 = cast(%755, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %775 = cast(%772, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %777 = cast(%748, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %778 = shape_of(%743, dtype="int32") /* ty=Tensor[(2), int32] */;
  %779 = cast(%743, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %781 = less(%779, %780) /* ty=Tensor[(105, 3), bool] */;
  %782 = cast(%755, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(2), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(105, 3), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %786 = %738.1;
  %787 = %739.0;
  %788 = maximum(%763, %764) /* ty=Tensor[(105, 3), float64] */;
  %789 = %767.1;
  %790 = %768.1;
  %791 = greater(%775, %776) /* ty=Tensor[(105, 3), bool] */;
  %792 = not_equal(%784, %785) /* ty=Tensor[(105, 3), bool] */;
  (%786, %var_8530, meta[relay.Constant][30] /* ty=Tensor[(32), uint64] */, meta[relay.Constant][31] /* ty=Tensor[(192), int64] */, %787, %788, %789, %790, %791, %792)
}

def @func_7817() -> (Tensor[(384), float64], Tensor[(4, 12, 8), float32]) {
  %793 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
  %794 = @func_7479() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), float32]) */;
  %795 = %793.2;
  %796 = %794.1;
  (%795, %796)
}

def @func_2583(%var_2582: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
  %803 = fn (%var_2574: Tensor[(192), int64]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
    %797 = @func_2179() /* ty=(Tensor[(4, 12, 8), bool], Tensor[(3, 15, 7), float32], Tensor[(384), float64]) */;
    %798 = cast(%var_2574, dtype="int64") /* ty=Tensor[(192), int64] */;
    %799 = reshape(%798, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
    %800 = @func_1348(%799) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
    %801 = %797.1;
    %802 = %800.2;
    (%801, %802, %var_2574)
  };
  %803(%var_2582) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */
}

def @func_2564(%var_2548: Tensor[(192), int64]) -> (Tensor[(2, 192), float64], Tensor[(1, 192), int64], Tensor[(192), int64], Tensor[(4, 12, 4), int64]) {
  %804 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
  %805 = cast(%var_2548, dtype="int64") /* ty=Tensor[(192), int64] */;
  %806 = reshape(%805, newshape=[1, 192]) /* ty=Tensor[(1, 192), int64] */;
  %807 = @func_1348(%806) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */;
  %808 = %807.4;
  %809 = cast(%808, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %810 = reshape(%809, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %811 = @func_555(%810) /* ty=(Tensor[(4, 12, 4), int64], Tensor[(3, 15, 7), float32]) */;
  %812 = %804.0;
  %813 = %811.0;
  (%812, %808, %var_2548, %813)
}

def @func_2488() -> Tensor[(3, 15, 7), float32] {
  @func_2486() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_2130() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  %818 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
    %814 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %815 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %816 = %814.0;
    %817 = %815.0;
    (%816, %817)
  };
  %818() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */
}

def @func_1348(%var_1335: Tensor[(1, 192), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) {
  %819 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %820 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %821 = cast(%var_1335, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %822 = reshape(%821, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %823 = @func_1279(%822) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %824 = %819.0;
  %825 = %820.1;
  %826 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  %827 = %823.0;
  (%824, %825, %826, %827, %var_1335)
}

def @func_7609(%var_7589: bool) -> (Tensor[(3, 15, 7), float32], Tensor[(1, 2, 15), bool], bool, Tensor[(5, 6), bool], Tensor[(3, 15, 7), float32]) {
  %828 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %829 = cast(%var_7589, dtype="bool") /* ty=bool */;
  %830 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 6), bool] */;
  %831 = reshape(%829, newshape=[]) /* ty=bool */;
  %832 = reshape(%830, newshape=[1, 2, 15]) /* ty=Tensor[(1, 2, 15), bool] */;
  %833 = @func_6889() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool]) */;
  %834 = %828.0;
  %835 = @func_5989(%831, %832) /* ty=Tensor[(1, 2, 15), bool] */;
  %836 = %833.0;
  (%834, %835, %var_7589, meta[relay.Constant][33] /* ty=Tensor[(5, 6), bool] */, %836)
}

def @func_3787() -> (Tensor[(15, 12, 4), float64], Tensor[(8, 15, 5), float32]) {
  %837 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %838 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %839 = acosh(%837) /* ty=Tensor[(15, 12, 4), float64] */;
  %840 = %838.0;
  (%839, %840)
}

def @func_3264(%var_3263: Tensor[(2, 192), float64]) -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint8], Tensor[(2, 192), bool], Tensor[(2, 192), float32]) {
  %865 = fn (%var_3203: Tensor[(2, 192), float64]) -> (Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint8], Tensor[(2, 192), bool], Tensor[(2, 192), float32]) {
    %841 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
    %842 = %841.0;
    %843 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(2), int32] */;
    %845 = cast(%842, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %847 = multiply(%845, %846) /* ty=Tensor[(2, 192), float32] */;
    %848 = cast(%847, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %849 = @func_1433() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %850 = cast(%847, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
    %851 = reshape(%850, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), bool] */;
    %852 = @func_780(%851) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) */;
    %853 = cast(%842, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %854 = exp(%853) /* ty=Tensor[(2, 192), float64] */;
    %855 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 192), float64] */, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
    %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(2), int32] */;
    %857 = cast(%854, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %859 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %860 = log10(%848) /* ty=Tensor[(2, 192), float64] */;
    %861 = %849.0;
    %862 = %852.2;
    %863 = greater_equal(%857, %858) /* ty=Tensor[(2, 192), bool] */;
    %864 = acos(%859) /* ty=Tensor[(2, 192), float32] */;
    (%860, %861, %862, %863, %864)
  };
  %865(%var_3263) /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint8], Tensor[(2, 192), bool], Tensor[(2, 192), float32]) */
}

def @func_5163() -> (Tensor[(384), float64], Tensor[(384), float64]) {
  %869 = fn () -> (Tensor[(384), float64], Tensor[(384), float64]) {
    %866 = @func_2797() /* ty=(Tensor[(384), float64], Tensor[(4, 12, 8), float32]) */;
    %867 = @func_1527() /* ty=Tensor[(384), float64] */;
    %868 = %866.0;
    (%867, %868)
  };
  %869() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */
}

def @func_3698(%var_3695: Tensor[(10, 16, 14), float32], %var_3696: Tensor[(10, 16, 14), float32], %var_3697: Tensor[(192), int64]) -> (Tensor[(10, 16, 14), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
  @func_3693(%var_3695, %var_3696, %var_3697) /* ty=(Tensor[(10, 16, 14), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */
}

def @func_5821(%var_5812: Tensor[(315), float32]) -> (Tensor[(8, 15, 5), float32], Tensor[(3, 15, 7), float64], Tensor[(315), float32]) {
  %870 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %871 = cast(%var_5812, dtype="float32") /* ty=Tensor[(315), float32] */;
  %872 = reshape(%871, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), float32] */;
  %873 = %870.1;
  %874 = @func_1016(%872) /* ty=Tensor[(3, 15, 7), float64] */;
  (%873, %874, %var_5812)
}

def @func_5522() -> Tensor[(4, 12, 8), float32] {
  %876 = fn () -> Tensor[(4, 12, 8), float32] {
    %875 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
    %875.0
  };
  %876() /* ty=Tensor[(4, 12, 8), float32] */
}

def @func_2567(%var_2565: Tensor[(192), int64]) -> (Tensor[(2, 192), float64], Tensor[(1, 192), int64], Tensor[(192), int64], Tensor[(4, 12, 4), int64]) {
  @func_2564(%var_2565) /* ty=(Tensor[(2, 192), float64], Tensor[(1, 192), int64], Tensor[(192), int64], Tensor[(4, 12, 4), int64]) */
}

def @func_3396(%var_3394: float64) -> (Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) {
  @func_3393(%var_3394) /* ty=(Tensor[(11, 8, 4), float64], Tensor[(3, 3, 8), int64], Tensor[(72), int64]) */
}

def @func_780(%var_734: Tensor[(4, 12, 8), bool]) -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(4, 12, 8), uint8], Tensor[(4, 12, 8), bool]) {
  %877 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %878 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %879 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
  %880 = %879.1;
  %881 = cast(%var_734, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %885 = %878.1;
  %886 = cast(%885, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %887 = cast(%var_734, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %888 = reshape(%886, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %889 = reshape(%887, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float64] */;
  %890 = %877.0;
  %891 = minimum(%883, %884) /* ty=Tensor[(4, 12, 8), uint8] */;
  %892 = @func_152(%888, %889) /* ty=Tensor[(4, 12, 8), bool] */;
  (%890, %885, %891, %892)
}

def @func_629(%var_604: Tensor[(8, 4, 1), uint64]) -> (Tensor[(8, 4, 1), uint64], Tensor[(4, 12, 8), bool]) {
  %893 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %894 = cast(%var_604, dtype="uint64") /* ty=Tensor[(8, 4, 1), uint64] */;
  %895 = @func_448() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(384), float64]) */;
  %896 = bitwise_or(%893, %894) /* ty=Tensor[(8, 4, 1), uint64] */;
  %897 = %895.1;
  (%896, %897)
}

def @func_527() -> (Tensor[(3, 15, 7), float32],) {
  %900 = fn () -> (Tensor[(3, 15, 7), float32],) {
    %898 = @func_477() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %899 = %898.0;
    (%899,)
  };
  %900() /* ty=(Tensor[(3, 15, 7), float32],) */
}

def @func_2070(%var_2068: Tensor[(3, 4, 2), float64], %var_2069: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), bool], Tensor[(4, 12, 8), float64]) {
  @func_2066(%var_2068, %var_2069) /* ty=(Tensor[(3, 4, 2), bool], Tensor[(4, 12, 8), float64]) */
}

def @func_1760(%var_1730: Tensor[(192), int64]) -> (Tensor[(4, 12, 4), int64], Tensor[(192), int64], Tensor[(4, 12, 8), uint8]) {
  %901 = cast(%var_1730, dtype="int64") /* ty=Tensor[(192), int64] */;
  %902 = reshape(%901, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %903 = @func_1279(%902) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 4), int64], Tensor[(192), int64]) */;
  %904 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %907 = tan(%906) /* ty=Tensor[(4, 12, 8), float32] */;
  %908 = cast(%905, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %912 = %903.3;
  %913 = bitwise_or(%910, %911) /* ty=Tensor[(4, 12, 8), uint8] */;
  (%912, %var_1730, %913)
}

def @func_5760() -> (Tensor[(3, 15, 7), float64],) {
  %914 = @func_4442() /* ty=(Tensor[(32), uint64], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32]) */;
  %915 = %914.1;
  (%915,)
}

def @func_6538() -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), float32], Tensor[(2, 192), float64], Tensor[(2, 192), float64]) {
  %934 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), float32], Tensor[(2, 192), float64], Tensor[(2, 192), float64]) {
    %916 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %917 = @func_838() /* ty=(Tensor[(2, 192), float64],) */;
    %918 = %917.0;
    %919 = cast(%918, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %920 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 192), float64] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %921 = shape_of(%918, dtype="int32") /* ty=Tensor[(2), int32] */;
    %922 = cast(%918, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %924 = cast(%918, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %925 = atanh(%924) /* ty=Tensor[(2, 192), float32] */;
    %926 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 192), float32] */, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %927 = shape_of(%925, dtype="int32") /* ty=Tensor[(2), int32] */;
    %928 = cast(%925, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
    %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %930 = %916.0;
    %931 = asinh(%919) /* ty=Tensor[(2, 192), float32] */;
    %932 = power(%922, %923) /* ty=Tensor[(2, 192), float64] */;
    %933 = floor_divide(%928, %929) /* ty=Tensor[(2, 192), float64] */;
    (%930, %931, %932, %933)
  };
  %934() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(2, 192), float32], Tensor[(2, 192), float64], Tensor[(2, 192), float64]) */
}

def @func_5323() -> (Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) {
  @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */
}

def @func_3175(%var_3172: Tensor[(8, 10, 8), float32], %var_3173: Tensor[(315), float32], %var_3174: Tensor[(84), float32]) -> (Tensor[(3, 15, 7), float64], Tensor[(315), float32], Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(8, 10, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) {
  @func_3170(%var_3172, %var_3173, %var_3174) /* ty=(Tensor[(3, 15, 7), float64], Tensor[(315), float32], Tensor[(3, 15, 7), float32], Tensor[(84), float32], Tensor[(8, 10, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32]) */
}

def @func_3828(%var_3826: Tensor[(3, 1, 5), float64], %var_3827: Tensor[(3, 6, 5), float64]) -> Tensor[(3, 6, 5), float64] {
  @func_3824(%var_3826, %var_3827) /* ty=Tensor[(3, 6, 5), float64] */
}

def @func_7669() -> (Tensor[(3, 15, 7), float64],) {
  %935 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %936 = %935.0;
  (%936,)
}

def @func_1773() -> (Tensor[(4, 12, 8), float64],) {
  @func_1771() /* ty=(Tensor[(4, 12, 8), float64],) */
}

def @func_4697() -> Tensor[(3, 15, 7), float32] {
  %938 = fn () -> Tensor[(3, 15, 7), float32] {
    %937 = @func_4548() /* ty=(Tensor[(3, 15, 7), float32],) */;
    %937.0
  };
  %938() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_1135(%var_1133: Tensor[(14, 2, 3), float32]) -> Tensor[(14, 2, 3), float64] {
  @func_1132(%var_1133) /* ty=Tensor[(14, 2, 3), float64] */
}

def @func_1550(%var_1548: Tensor[(3, 3, 8), int64], %var_1549: Tensor[(3, 3, 8), int64]) -> Tensor[(3, 3, 8), int64] {
  @func_1546(%var_1548, %var_1549) /* ty=Tensor[(3, 3, 8), int64] */
}

def @func_3824(%var_3817: Tensor[(3, 1, 5), float64], %var_3818: Tensor[(3, 6, 5), float64]) -> Tensor[(3, 6, 5), float64] {
  %939 = cast(%var_3817, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %940 = cast(%var_3818, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  floor_divide(%939, %940) /* ty=Tensor[(3, 6, 5), float64] */
}

def @func_8191(%var_8189: Tensor[(4, 12, 8), bool]) -> (Tensor[(4, 12, 8), uint32],) {
  @func_8188(%var_8189) /* ty=(Tensor[(4, 12, 8), uint32],) */
}

def @func_3693(%var_3674: Tensor[(10, 16, 14), float32], %var_3675: Tensor[(10, 16, 14), float32], %var_3686: Tensor[(192), int64]) -> (Tensor[(10, 16, 14), float32], Tensor[(4, 12, 8), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) {
  %941 = cast(%var_3675, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %942 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_3674, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %945 = @func_1294() /* ty=(Tensor[(4, 12, 8), float32],) */;
  %946 = cast(%var_3686, dtype="int64") /* ty=Tensor[(192), int64] */;
  %947 = reshape(%946, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %948 = @func_2581(%947) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(192), int64]) */;
  %949 = power(%943, %944) /* ty=Tensor[(10, 16, 14), float32] */;
  %950 = %945.0;
  %951 = %948.1;
  (%949, %950, %951, %var_3686)
}

def @func_3973() -> Tensor[(4, 12, 8), bool] {
  @func_3275() /* ty=Tensor[(4, 12, 8), bool] */
}

def @func_1031() -> (Tensor[(4, 12, 8), float32],) {
  %955 = fn () -> (Tensor[(4, 12, 8), float32],) {
    %952 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
    %953 = cast(%952, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
    %954 = log(%953) /* ty=Tensor[(4, 12, 8), float32] */;
    (%954,)
  };
  %955() /* ty=(Tensor[(4, 12, 8), float32],) */
}

def @func_2390() -> (Tensor[(3, 15, 7), float64],) {
  %956 = @func_1223() /* ty=(Tensor[(2, 192), float64], Tensor[(3, 15, 7), float32]) */;
  %957 = %956.1;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(3, 15, 7), float64] */;
  %959 = atan(%958) /* ty=Tensor[(3, 15, 7), float64] */;
  (%959,)
}

def @func_5101(%var_5090: Tensor[(4, 12, 8), bool]) -> Tensor[(4, 12, 8), uint32] {
  %960 = @func_3973() /* ty=Tensor[(4, 12, 8), bool] */;
  %961 = cast(%var_5090, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %962 = shape_of(%960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %963 = cast(%960, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%963, %964) /* ty=Tensor[(4, 12, 8), uint32] */
}

def @func_1351(%var_1349: Tensor[(1, 192), int64]) -> (Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) {
  @func_1348(%var_1349) /* ty=(Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64], Tensor[(3, 15, 7), float32], Tensor[(1, 192), int64]) */
}

def @func_4282() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64]) {
  @func_4280() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float64]) */
}

def @func_1771() -> (Tensor[(4, 12, 8), float64],) {
  %965 = @func_884() /* ty=Tensor[(4, 12, 8), float64] */;
  (%965,)
}

def @func_7920(%var_7910: Tensor[(2, 192), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(2, 192), bool]) {
  %966 = @func_3019() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), float32]) */;
  %967 = @func_2032() /* ty=(Tensor[(2, 192), float64], Tensor[(192), int64], Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %968 = %967.0;
  %969 = cast(%var_7910, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %970 = shape_of(%968, dtype="int32") /* ty=Tensor[(2), int32] */;
  %971 = cast(%968, dtype="bool") /* ty=Tensor[(2, 192), bool] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %973 = %966.0;
  %974 = equal(%971, %972) /* ty=Tensor[(2, 192), bool] */;
  (%973, %974)
}

def @func_6425(%var_6423: Tensor[(11, 2, 13), float64]) -> (Tensor[(11, 2, 13), float64], Tensor[(11, 2, 13), float32], Tensor[(4, 12, 8), float32]) {
  @func_6422(%var_6423) /* ty=(Tensor[(11, 2, 13), float64], Tensor[(11, 2, 13), float32], Tensor[(4, 12, 8), float32]) */
}

def @func_2142() -> (Tensor[(4, 12, 8), float32],) {
  %977 = fn () -> (Tensor[(4, 12, 8), float32],) {
    %975 = @func_1030() /* ty=(Tensor[(4, 12, 8), float32],) */;
    %976 = %975.0;
    (%976,)
  };
  %977() /* ty=(Tensor[(4, 12, 8), float32],) */
}

def @func_1831() -> Tensor[(8, 15, 5), float32] {
  @func_1829() /* ty=Tensor[(8, 15, 5), float32] */
}

def @func_8180() -> Tensor[(3, 15, 7), float32] {
  %978 = fn () -> Tensor[(3, 15, 7), float32] {
    @func_7751() /* ty=Tensor[(3, 15, 7), float32] */
  };
  %978() /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_839() -> (Tensor[(2, 192), float64],) {
  %981 = fn () -> (Tensor[(2, 192), float64],) {
    %979 = @func_578() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), bool], Tensor[(2, 192), float64], Tensor[(4, 12, 8), bool]) */;
    %980 = %979.2;
    (%980,)
  };
  %981() /* ty=(Tensor[(2, 192), float64],) */
}

def @func_8057() -> (Tensor[(14, 2, 3), float64], Tensor[(84), float32], Tensor[(4, 12, 8), float32], Tensor[(3, 15, 7), float64], Tensor[(3, 15, 7), float32], Tensor[(3, 3, 8), float64], Tensor[(315), float32]) {
  %982 = cast(meta[relay.Constant][39] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %983 = reshape(%982, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), float32] */;
  %984 = @func_2390() /* ty=(Tensor[(3, 15, 7), float64],) */;
  %985 = @func_5321() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(3, 15, 7), float64]) */;
  %986 = %985.1;
  %987 = @func_3758() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(8, 15, 5), float32]) */;
  %988 = %987.0;
  %989 = cast(%988, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %990 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(%986, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %993 = @func_7301() /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 15, 7), float64], Tensor[(4, 12, 8), float32], Tensor[(105, 3), float64], Tensor[(15, 12, 4), float64]) */;
  %994 = cast(%986, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %995 = reshape(%994, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %996 = @func_5904(%995) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(192), int64], Tensor[(315), float32], Tensor[(192), int64], Tensor[(4, 12, 8), bool]) */;
  %997 = @func_1132(%983) /* ty=Tensor[(14, 2, 3), float64] */;
  %998 = @func_5521() /* ty=Tensor[(4, 12, 8), float32] */;
  %999 = %984.0;
  %1000 = divide(%991, %992) /* ty=Tensor[(3, 15, 7), float32] */;
  %1001 = %993.2;
  %1002 = %996.2;
  (%997, meta[relay.Constant][39] /* ty=Tensor[(84), float32] */, %998, %999, %1000, %1001, %1002)
}

def @func_2826() -> (Tensor[(3, 15, 7), float32],) {
  %1003 = @func_526() /* ty=(Tensor[(3, 15, 7), float32],) */;
  %1004 = %1003.0;
  (%1004,)
}

def @func_2925(%var_2866: Tensor[(7, 1, 10), uint32], %var_2867: Tensor[(7, 16, 10), uint32]) -> (Tensor[(7, 16, 10), bool], Tensor[(8, 15, 5), float64], Tensor[(32), uint64], Tensor[(156), uint8], Tensor[(7, 16, 10), float32], Tensor[(4, 12, 8), float32]) {
  %1005 = cast(%var_2866, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
  %1006 = cast(%var_2867, dtype="bool") /* ty=Tensor[(7, 16, 10), bool] */;
  %1007 = @func_1509() /* ty=(Tensor[(8, 15, 5), float32],) */;
  %1008 = %1007.0;
  %1009 = cast(%1008, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %1010 = cast(meta[relay.Constant][40] /* ty=Tensor[(156), uint8] */, dtype="uint8") /* ty=Tensor[(156), uint8] */;
  %1011 = reshape(%1010, newshape=[156]) /* ty=Tensor[(156), uint8] */;
  %1012 = @func_2639(%1011) /* ty=(Tensor[(32), uint64], Tensor[(4, 3, 13), uint8], Tensor[(156), uint8], Tensor[(4, 12, 8), bool]) */;
  %1013 = cast(%var_2867, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
  %1014 = @func_2753() /* ty=(Tensor[(2, 192), float64], Tensor[(4, 12, 8), float32]) */;
  %1015 = less_equal(%1005, %1006) /* ty=Tensor[(7, 16, 10), bool] */;
  %1016 = erf(%1009) /* ty=Tensor[(8, 15, 5), float64] */;
  %1017 = %1012.0;
  %1018 = log2(%1013) /* ty=Tensor[(7, 16, 10), float32] */;
  %1019 = %1014.1;
  (%1015, %1016, %1017, meta[relay.Constant][40] /* ty=Tensor[(156), uint8] */, %1018, %1019)
}

def @func_6838() -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint64]) {
  %1023 = fn () -> (Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint64]) {
    %1020 = @func_4005() /* ty=(Tensor[(8, 15, 5), float32], Tensor[(4, 12, 8), uint64], Tensor[(1, 384), uint8]) */;
    %1021 = @func_5185() /* ty=Tensor[(3, 15, 7), float32] */;
    %1022 = %1020.1;
    (%1021, %1022)
  };
  %1023() /* ty=(Tensor[(3, 15, 7), float32], Tensor[(4, 12, 8), uint64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen640/build/output.py", line 2953, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:43:53] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

