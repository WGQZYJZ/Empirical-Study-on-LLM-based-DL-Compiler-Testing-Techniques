==========mod==========
#[version = "0.0.5"]
def @func_3379() -> (Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) {
  %0 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
  %1 = @func_2817() /* ty=bool */;
  %2 = cast(%0, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
  %3 = cast(%1, dtype="bool") /* ty=bool */;
  %4 = cast(%0, dtype="float32") /* ty=Tensor[(?, ?, 9), float32] */;
  %5 = sigmoid(%4) /* ty=Tensor[(?, ?, 9), float32] */;
  %6 = cast(%5, dtype="uint64") /* ty=Tensor[(?, ?, 9), uint64] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 14, 9), float32] */, dtype="uint64") /* ty=Tensor[(1, 14, 9), uint64] */;
  %8 = logical_or(%2, %3) /* ty=Tensor[(?, ?, 9), bool] */;
  %9 = logical_xor(%6, %7) /* ty=Tensor[(?, 14, 9), uint64] */;
  (%8, %9)
}

def @func_2343(%var_2335: Tensor[(14, 16, 5), uint16]) -> Tensor[(14, 16, 5), float64] {
  %10 = cast(%var_2335, dtype="uint16") /* ty=Tensor[(14, 16, 5), uint16] */;
  %11 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 16, 5), uint16] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %14 = bitwise_or(%12, %13) /* ty=Tensor[(14, 16, 5), uint16] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%17, %18) /* ty=Tensor[(14, 16, 5), float64] */
}

def @func_912() -> bool {
  %19 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %19.2
}

def @func_5052() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  %20 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %21 = @func_1186() /* ty=Tensor[(9), float64] */;
  %22 = %20.0;
  (%21, %22)
}

def @func_1846() -> (Tensor[(9), float64],) {
  %23 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %24 = %23.0;
  (%24,)
}

def @func_4203(%var_4148: Tensor[(11, 16, 2), float32], %var_4149: Tensor[(11, 16, 2), float32], %var_4187: Tensor[(1200), float32], %var_4192: Tensor[(297), float64], %var_4193: Tensor[(45), float32]) -> (Tensor[(11, 16, 2), float32], Tensor[(?, ?, 9), float32], Tensor[(10, 14, 9), bool], Tensor[(1200), float32], Tensor[(1260), float32], Tensor[(11, 3, 9), float32], Tensor[(297), float64], Tensor[(45), float32]) {
  %25 = cast(%var_4149, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %26 = shape_of(%var_4148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_4148, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %29 = @func_2408() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %30 = %29.0;
  %31 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(9), float32] */;
  %34 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%30, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %37 = cast(%var_4187, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %39 = reshape(%37, newshape=[15, 8, 10]) /* ty=Tensor[(15, 8, 10), float32] */;
  %40 = reshape(%38, newshape=[9, 140]) /* ty=Tensor[(9, 140), float32] */;
  %41 = @func_2383(%39, %40) /* ty=(Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) */;
  %42 = cast(%var_4192, dtype="float64") /* ty=Tensor[(297), float64] */;
  %43 = cast(%var_4193, dtype="float32") /* ty=Tensor[(45), float32] */;
  %44 = reshape(%42, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float64] */;
  %45 = reshape(%43, newshape=[45]) /* ty=Tensor[(45), float32] */;
  %46 = @func_2230(%44, %45) /* ty=(Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) */;
  %47 = minimum(%27, %28) /* ty=Tensor[(11, 16, 2), float32] */;
  %48 = maximum(%35, %36) /* ty=Tensor[(?, ?, 9), float32] */;
  %49 = %41.1;
  %50 = %46.0;
  (%47, %48, %49, %var_4187, meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, %50, %var_4192, %var_4193)
}

def @func_5842() -> (Tensor[(13, 2, 7), float64], Tensor[(11, 5, 9), float64], Tensor[(495), float64]) {
  %51 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %53 = reshape(%52, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), float64] */;
  %54 = @func_5750(%53) /* ty=(Tensor[(11, 5, 9), float64],) */;
  %55 = %51.0;
  %56 = %54.0;
  (%55, %56, meta[relay.Constant][3] /* ty=Tensor[(495), float64] */)
}

def @func_4126() -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) {
  %57 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %58 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %59 = %57.0;
  %60 = %58.0;
  (%59, %60)
}

def @func_5218() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) {
  %61 = @func_2448() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */;
  %62 = @func_2497() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */;
  %63 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %66 = atan(%65) /* ty=Tensor[(13, 2, 7), float32] */;
  %67 = cast(%66, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %68 = reshape(%67, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), bool] */;
  %69 = @func_2780(%68) /* ty=(Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) */;
  %70 = %61.0;
  %71 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
  %72 = %62.2;
  %73 = %69.1;
  (%70, %71, %72, %66, %73)
}

def @func_3893() -> Tensor[(?, ?, 9), float64] {
  %74 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %74.1
}

def @func_2497() -> (Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  %75 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %77 = reshape(%76, newshape=[15, 9, 9]) /* ty=Tensor[(15, 9, 9), float32] */;
  %78 = %75.1;
  %79 = @func_2104(%77) /* ty=Tensor[(15, 9, 9), bool] */;
  (%78, %79, meta[relay.Constant][4] /* ty=Tensor[(1215), float32] */)
}

def @func_745() -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) {
  %80 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %81 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %82 = %80.0;
  %83 = %81.0;
  (%82, %83)
}

def @func_3966() -> (Tensor[(?, ?, 9), float64],) {
  %84 = @func_2967() /* ty=Tensor[(?, ?, 9), bool] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %86 = tan(%85) /* ty=Tensor[(?, ?, 9), float64] */;
  (%86,)
}

def @func_5164() -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32]) {
  %87 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
  %88 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
  (%87, %88)
}

def @func_2292() -> (Tensor[(13, 2, 7), float64],) {
  %89 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
  %92 = acos(%91) /* ty=Tensor[(13, 2, 7), float64] */;
  (%92,)
}

def @func_4283() -> (Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) {
  %93 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %94 = %93.1;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %96 = cast(%94, dtype="int8") /* ty=Tensor[(?, ?, 9), int8] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 14, 9), int64] */, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %98 = acosh(%95) /* ty=Tensor[(?, ?, 9), float64] */;
  %99 = bitwise_xor(%96, %97) /* ty=Tensor[(13, 14, 9), int8] */;
  (%98, %99)
}

def @func_906(%var_854: Tensor[(1, 5, 9), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) {
  %100 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %101 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %104 = reshape(%103, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %105 = @func_20(%104) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %106 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %107 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %108 = cast(%102, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %109 = acos(%108) /* ty=Tensor[(1, 1, 9), float64] */;
  %110 = @func_663() /* ty=bool */;
  %111 = cast(%102, dtype="int32") /* ty=Tensor[(1, 1, 9), int32] */;
  %112 = cast(%var_854, dtype="int32") /* ty=Tensor[(1, 5, 9), int32] */;
  %113 = bitwise_and(%111, %112) /* ty=Tensor[(1, 5, 9), int32] */;
  %114 = cast(%110, dtype="float64") /* ty=float64 */;
  %115 = cast(%113, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %116 = divide(%114, %115) /* ty=Tensor[(1, 5, 9), float64] */;
  %117 = cast(%109, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %118 = cast(%116, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %119 = logical_or(%117, %118) /* ty=Tensor[(1, 5, 9), bool] */;
  %120 = cast(%113, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = %100.0;
  %125 = %105.0;
  %126 = %106.0;
  %127 = %107.2;
  %128 = greater(%122, %123) /* ty=Tensor[(?, 5, 9), bool] */;
  (%124, %125, %126, %127, %128)
}

def @func_5260() -> (Tensor[(1, 1, 9), float32],) {
  %129 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
  (%129,)
}

def @func_6041() -> bool {
  %130 = @func_2474() /* ty=(bool,) */;
  %130.0
}

def @func_2967() -> Tensor[(?, ?, 9), bool] {
  %131 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %132 = %131.1;
  %133 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %134 = %133.0;
  %135 = cast(%134, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %136 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%132, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%137, %138) /* ty=Tensor[(?, ?, 9), bool] */
}

def @func_1186() -> Tensor[(9), float64] {
  %139 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %139.2
}

def @func_5941(%var_5898: Tensor[(630, 2), float32], %var_5923: Tensor[(630, 2), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(630, 2), int32], Tensor[(630, 2), float64], Tensor[(1, 1, 9), float32]) {
  %140 = cast(%var_5898, dtype="float32") /* ty=Tensor[(630, 2), float32] */;
  %141 = reshape(%140, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float32] */;
  %142 = @func_2180(%141) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) */;
  %143 = cast(%var_5923, dtype="int32") /* ty=Tensor[(630, 2), int32] */;
  %144 = shape_of(%var_5898, dtype="int32") /* ty=Tensor[(2), int32] */;
  %145 = cast(%var_5898, dtype="int32") /* ty=Tensor[(630, 2), int32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %147 = cast(%var_5898, dtype="float64") /* ty=Tensor[(630, 2), float64] */;
  %148 = @func_5260() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %149 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
  %150 = %142.0;
  %151 = logical_xor(%145, %146) /* ty=Tensor[(630, 2), int32] */;
  %152 = acos(%147) /* ty=Tensor[(630, 2), float64] */;
  %153 = %148.0;
  (%149, %150, %151, %152, %153)
}

def @func_20(%var_10: Tensor[(1, 1, 9), float64]) -> (Tensor[(1, 1, 9), float32],) {
  %154 = cast(%var_10, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %155 = log10(%154) /* ty=Tensor[(1, 1, 9), float64] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %157 = log2(%156) /* ty=Tensor[(1, 1, 9), float32] */;
  (%157,)
}

def @func_557() -> (Tensor[(1, 1, 9), float32],) {
  %158 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %159 = %158.1;
  (%159,)
}

def @func_4753(%var_4748: uint64, %var_4749: Tensor[(1, 15, 15), uint64]) -> Tensor[(1, 15, 15), uint64] {
  %160 = cast(%var_4748, dtype="uint64") /* ty=uint64 */;
  %161 = cast(%var_4749, dtype="uint64") /* ty=Tensor[(1, 15, 15), uint64] */;
  right_shift(%160, %161) /* ty=Tensor[(1, 15, 15), uint64] */
}

def @func_4849() -> (Tensor[(9), float64], Tensor[(924), uint32], Tensor[(11, 6, 14), int16]) {
  %162 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %163 = cast(meta[relay.Constant][6] /* ty=Tensor[(924), uint32] */, dtype="uint32") /* ty=Tensor[(924), uint32] */;
  %164 = cast(meta[relay.Constant][6] /* ty=Tensor[(924), uint32] */, dtype="uint32") /* ty=Tensor[(924), uint32] */;
  %165 = reshape(%163, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint32] */;
  %166 = reshape(%164, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint32] */;
  %167 = @func_4794(%165, %166) /* ty=Tensor[(11, 6, 14), uint32] */;
  %168 = @func_2817() /* ty=bool */;
  %169 = cast(%167, dtype="int16") /* ty=Tensor[(11, 6, 14), int16] */;
  %170 = cast(%168, dtype="int16") /* ty=int16 */;
  %171 = %162.0;
  %172 = multiply(%169, %170) /* ty=Tensor[(11, 6, 14), int16] */;
  (%171, meta[relay.Constant][6] /* ty=Tensor[(924), uint32] */, %172)
}

def @func_6413(%var_6341: Tensor[(10, 14, 8), float32], %var_6355: Tensor[(10, 14, 8), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(10, 14, 8), bool], bool, Tensor[(10, 14, 8), float64], Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), bool]) {
  %173 = @func_5218() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) */;
  %174 = cast(%var_6341, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %175 = log2(%174) /* ty=Tensor[(10, 14, 8), float64] */;
  %176 = cast(%var_6341, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %177 = sin(%176) /* ty=Tensor[(10, 14, 8), float32] */;
  %178 = cast(%var_6355, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %182 = logical_or(%180, %181) /* ty=Tensor[(10, 14, 8), bool] */;
  %183 = cast(%182, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %184 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%175, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = @func_2474() /* ty=(bool,) */;
  %188 = cast(%175, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %189 = asinh(%188) /* ty=Tensor[(10, 14, 8), float64] */;
  %190 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %191 = shape_of(%var_6341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_6341, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = greater(%192, %193) /* ty=Tensor[(10, 14, 8), bool] */;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %196 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%189, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = equal(%197, %198) /* ty=Tensor[(10, 14, 8), bool] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %201 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %202 = %173.3;
  %203 = logical_and(%185, %186) /* ty=Tensor[(10, 14, 8), bool] */;
  %204 = %187.0;
  %205 = rsqrt(%200) /* ty=Tensor[(10, 14, 8), float64] */;
  %206 = %201.0;
  %207 = @func_2967() /* ty=Tensor[(?, ?, 9), bool] */;
  (%202, %203, %204, %205, %206, %207)
}

def @func_4041(%var_4013: Tensor[(12, 14, 12), float64]) -> (Tensor[(12, 14, 12), float64], Tensor[(13, 2, 7), bool]) {
  %208 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %209 = log(%208) /* ty=Tensor[(12, 14, 12), float64] */;
  %210 = @func_3064() /* ty=Tensor[(13, 2, 7), bool] */;
  (%209, %210)
}

def @func_3998(%var_3972: Tensor[(12, 13, 1), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64], Tensor[(12, 13, ?), float32], Tensor[(?, ?, 9), float64]) {
  %211 = @func_3064() /* ty=Tensor[(13, 2, 7), bool] */;
  %212 = cast(%211, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %213 = reshape(%212, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), bool] */;
  %214 = @func_2780(%213) /* ty=(Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) */;
  %215 = cast(%var_3972, dtype="float32") /* ty=Tensor[(12, 13, 1), float32] */;
  %216 = erf(%215) /* ty=Tensor[(12, 13, 1), float32] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(12, 13, 1), float32] */;
  %218 = atanh(%217) /* ty=Tensor[(12, 13, 1), float32] */;
  %219 = cast(%216, dtype="int8") /* ty=Tensor[(12, 13, 1), int8] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="int8") /* ty=Tensor[(12, 13, 1), int8] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %223 = bitwise_xor(%221, %222) /* ty=Tensor[(12, 13, ?), int8] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(12, 13, ?), float32] */;
  %225 = @func_3966() /* ty=(Tensor[(?, ?, 9), float64],) */;
  %226 = %214.1;
  %227 = sin(%224) /* ty=Tensor[(12, 13, ?), float32] */;
  %228 = %225.0;
  (%211, %226, %227, %228)
}

def @func_3852() -> (Tensor[(?, ?, 9), float64],) {
  %229 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
  (%229,)
}

def @func_983() -> Tensor[(13, 2, 7), bool] {
  %230 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %230.0
}

def @func_1760() -> (Tensor[(13, 2, 7), bool],) {
  %231 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %232 = %231.0;
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = greater_equal(%235, %236) /* ty=Tensor[(13, 2, 7), bool] */;
  (%237,)
}

def @func_1829() -> (Tensor[(9), float64],) {
  %238 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %239 = %238.0;
  (%239,)
}

def @func_4675(%var_4637: Tensor[(300), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(1, 1, 9), float32], Tensor[(300), float64], Tensor[(?, 14, 9), uint64], Tensor[(13, 2, 7), float32]) {
  %240 = @func_4283() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) */;
  %241 = cast(%var_4637, dtype="float64") /* ty=Tensor[(300), float64] */;
  %242 = reshape(%241, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %243 = @func_4397(%242) /* ty=(Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) */;
  %244 = @func_3379() /* ty=(Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) */;
  %245 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %246 = %240.1;
  %247 = %243.1;
  %248 = %244.1;
  %249 = %245.2;
  (%246, %247, %var_4637, %248, %249)
}

def @func_5132() -> (Tensor[(11, 3, 9), uint8],) {
  %250 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %252 = atan(%251) /* ty=Tensor[(11, 3, 9), float64] */;
  %253 = cast(%250, dtype="uint8") /* ty=Tensor[(11, 3, 9), uint8] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="uint8") /* ty=Tensor[(11, 3, 9), uint8] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %257 = right_shift(%255, %256) /* ty=Tensor[(11, 3, 9), uint8] */;
  (%257,)
}

def @func_2044(%var_2039: Tensor[(286), bool]) -> (Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) {
  %258 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %259 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %260 = reshape(%258, newshape=[]) /* ty=bool */;
  %261 = reshape(%259, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
  %262 = @func_477(%260, %261) /* ty=(Tensor[(2, 13, 11), bool],) */;
  %263 = %262.0;
  %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 13, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = cast(%263, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %269 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %270 = cast(%var_2039, dtype="bool") /* ty=Tensor[(286), bool] */;
  %271 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %272 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), bool] */;
  %274 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
  %275 = greater(%266, %267) /* ty=Tensor[(2, 13, 11), bool] */;
  %276 = cosh(%268) /* ty=Tensor[(2, 13, 11), float64] */;
  %277 = @func_912() /* ty=bool */;
  %278 = %269.0;
  %279 = logical_and(%272, %273) /* ty=Tensor[(286), bool] */;
  (%274, True /* ty=bool */, %275, %276, %277, %278, %279)
}

def @func_5590() -> (Tensor[(9), float64],) {
  %280 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %281 = %280.0;
  (%281,)
}

def @func_1620(%var_1609: Tensor[(10, 5, 9), float64]) -> (Tensor[(10, 5, 9), float32],) {
  %282 = cast(%var_1609, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %283 = sinh(%282) /* ty=Tensor[(10, 5, 9), float64] */;
  %284 = cast(%var_1609, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %288 = floor_mod(%286, %287) /* ty=Tensor[(10, 5, 9), float64] */;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %290 = sin(%289) /* ty=Tensor[(10, 5, 9), float32] */;
  (%290,)
}

def @func_5641(%var_5633: Tensor[(45), float32]) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(45), uint64]) {
  %291 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %292 = cast(meta[relay.Constant][11] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %293 = reshape(%292, newshape=[1, 45]) /* ty=Tensor[(1, 45), float32] */;
  %294 = @func_1133(%293) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) */;
  %295 = cast(%var_5633, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %296 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(45), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %297 = cast(meta[relay.Constant][11] /* ty=Tensor[(45), float32] */, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %299 = %291.0;
  %300 = %294.2;
  %301 = left_shift(%297, %298) /* ty=Tensor[(45), uint64] */;
  (%299, %300, %301)
}

def @func_3543(%var_3515: Tensor[(720), float64], %var_3533: Tensor[(105), uint64], %var_3534: Tensor[(210), uint64]) -> (bool, Tensor[(9), float64], Tensor[(720), float64], Tensor[(2, 7, 15), uint64], Tensor[(105), uint64], Tensor[(210), uint64]) {
  %302 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %303 = cast(%var_3515, dtype="float64") /* ty=Tensor[(720), float64] */;
  %304 = reshape(%303, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), float64] */;
  %305 = @func_3467(%304) /* ty=(Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) */;
  %306 = cast(%var_3533, dtype="uint64") /* ty=Tensor[(105), uint64] */;
  %307 = cast(%var_3534, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %308 = reshape(%306, newshape=[1, 7, 15]) /* ty=Tensor[(1, 7, 15), uint64] */;
  %309 = reshape(%307, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint64] */;
  %310 = @func_2256(%308, %309) /* ty=(Tensor[(2, 7, 15), uint64],) */;
  %311 = %302.0;
  %312 = %305.1;
  %313 = %310.0;
  (%311, %312, %var_3515, %313, %var_3533, %var_3534)
}

def @func_2180(%var_2162: Tensor[(10, 14, 9), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) {
  %314 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %315 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %316 = %315.0;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %318 = cast(%var_2162, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %319 = add(%317, %318) /* ty=Tensor[(10, 14, 9), float64] */;
  %320 = cast(%319, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %321 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_2162, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = @func_1700() /* ty=bool */;
  %325 = cast(%324, dtype="uint32") /* ty=uint32 */;
  %326 = cast(%319, dtype="uint32") /* ty=Tensor[(10, 14, 9), uint32] */;
  %327 = %314.0;
  %328 = greater_equal(%322, %323) /* ty=Tensor[(10, 14, 9), bool] */;
  %329 = multiply(%325, %326) /* ty=Tensor[(10, 14, 9), uint32] */;
  (%327, %328, %329)
}

def @func_1785() -> Tensor[(?, ?, 9), float64] {
  %330 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %330.1
}

def @func_2817() -> bool {
  @func_663() /* ty=bool */
}

def @func_2383(%var_2371: Tensor[(15, 8, 10), float32], %var_2377: Tensor[(9, 140), float32]) -> (Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) {
  %331 = cast(%var_2371, dtype="float32") /* ty=Tensor[(15, 8, 10), float32] */;
  %332 = cast(%var_2377, dtype="float32") /* ty=Tensor[(9, 140), float32] */;
  %333 = reshape(%332, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float32] */;
  %334 = @func_2180(%333) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) */;
  %335 = log(%331) /* ty=Tensor[(15, 8, 10), float32] */;
  %336 = %334.1;
  (%335, %336, %var_2377)
}

def @func_6313(%var_6256: Tensor[(1, 9), float64]) -> (Tensor[(1, 9), float64], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(11, 3, 9), bool]) {
  %337 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %338 = cast(meta[relay.Constant][12] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %339 = reshape(%337, newshape=[]) /* ty=bool */;
  %340 = reshape(%338, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
  %341 = @func_477(%339, %340) /* ty=(Tensor[(2, 13, 11), bool],) */;
  %342 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %343 = cast(%var_6256, dtype="float64") /* ty=Tensor[(1, 9), float64] */;
  %344 = reshape(%343, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %345 = @func_20(%344) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="int8") /* ty=Tensor[(1, 1, 9), int8] */;
  %348 = cast(%342, dtype="int8") /* ty=Tensor[(11, 3, 9), int8] */;
  %349 = bitwise_xor(%347, %348) /* ty=Tensor[(11, 3, 9), int8] */;
  %350 = cast(%349, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %351 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%342, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = %341.0;
  %355 = logical_and(%352, %353) /* ty=Tensor[(11, 3, 9), bool] */;
  (%var_6256, %354, False /* ty=bool */, meta[relay.Constant][12] /* ty=Tensor[(286), bool] */, %355)
}

def @func_3064() -> Tensor[(13, 2, 7), bool] {
  %356 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
  %356.2
}

def @func_477(%var_449: bool, %var_450: Tensor[(2, 13, 11), bool]) -> (Tensor[(2, 13, 11), bool],) {
  %357 = cast(%var_449, dtype="bool") /* ty=bool */;
  %358 = cast(%var_450, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %359 = logical_or(%357, %358) /* ty=Tensor[(2, 13, 11), bool] */;
  %360 = cast(%var_450, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = not_equal(%362, %363) /* ty=Tensor[(2, 13, 11), bool] */;
  (%364,)
}

def @func_5429(%var_5414: Tensor[(45), float32], %var_5417: Tensor[(720), float64]) -> (Tensor[(9), float64], Tensor[(11, 3, 9), int16], Tensor[(1, 1, 9), float32], Tensor[(45), float32], Tensor[(8, 10, 9), bool], Tensor[(720), float64]) {
  %365 = @func_2448() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */;
  %366 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %367 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
  %368 = cast(%366, dtype="int16") /* ty=Tensor[(11, 3, 9), int16] */;
  %369 = cast(%367, dtype="int16") /* ty=Tensor[(1, 1, 9), int16] */;
  %370 = cast(%var_5414, dtype="float32") /* ty=Tensor[(45), float32] */;
  %371 = reshape(%370, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), float32] */;
  %372 = @func_906(%371) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) */;
  %373 = cast(%var_5417, dtype="float64") /* ty=Tensor[(720), float64] */;
  %374 = reshape(%373, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), float64] */;
  %375 = @func_3467(%374) /* ty=(Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) */;
  %376 = %365.0;
  %377 = bitwise_or(%368, %369) /* ty=Tensor[(11, 3, 9), int16] */;
  %378 = %372.0;
  %379 = %375.0;
  (%376, %377, %378, %var_5414, %379, %var_5417)
}

def @func_5285(%var_5281: Tensor[(11, 15, 1), float32]) -> (Tensor[(11, 15, 1), float32],) {
  %380 = cast(%var_5281, dtype="float32") /* ty=Tensor[(11, 15, 1), float32] */;
  %381 = atan(%380) /* ty=Tensor[(11, 15, 1), float32] */;
  (%381,)
}

def @func_4794(%var_4789: Tensor[(11, 6, 14), uint32], %var_4790: Tensor[(11, 6, 14), uint32]) -> Tensor[(11, 6, 14), uint32] {
  %382 = cast(%var_4790, dtype="uint32") /* ty=Tensor[(11, 6, 14), uint32] */;
  %383 = shape_of(%var_4789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%var_4789, dtype="uint32") /* ty=Tensor[(11, 6, 14), uint32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%384, %385) /* ty=Tensor[(11, 6, 14), uint32] */
}

def @func_1480() -> (bool, Tensor[(?, ?, 9), float64]) {
  %386 = cast(meta[relay.Constant][13] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %387 = reshape(%386, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %388 = @func_20(%387) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %389 = %388.0;
  %390 = cast(meta[relay.Constant][13] /* ty=Tensor[(9), float64] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %394 = floor_mod(%392, %393) /* ty=Tensor[(?, ?, 9), float32] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %396 = @func_663() /* ty=bool */;
  %397 = sin(%395) /* ty=Tensor[(?, ?, 9), float64] */;
  (%396, %397)
}

def @func_3244() -> Tensor[(1, 1, 9), float32] {
  @func_3033() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_4533(%var_4479: Tensor[(6, 1, 9), float64], %var_4484: Tensor[(14, 15, 9), float64], %var_4515: Tensor[(14, 15, 9), int8]) -> (Tensor[(6, ?, 9), float64], Tensor[(14, 15, 9), bool]) {
  %398 = @func_3893() /* ty=Tensor[(?, ?, 9), float64] */;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %400 = cast(%var_4479, dtype="float64") /* ty=Tensor[(6, 1, 9), float64] */;
  %401 = cast(%398, dtype="int8") /* ty=Tensor[(?, ?, 9), int8] */;
  %402 = cast(%var_4484, dtype="int8") /* ty=Tensor[(14, 15, 9), int8] */;
  %403 = subtract(%401, %402) /* ty=Tensor[(14, 15, 9), int8] */;
  %404 = cast(%var_4515, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = equal(%406, %407) /* ty=Tensor[(14, 15, 9), bool] */;
  %409 = cast(%408, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %410 = cast(%398, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
  %411 = power(%399, %400) /* ty=Tensor[(6, ?, 9), float64] */;
  %412 = logical_or(%409, %410) /* ty=Tensor[(14, 15, 9), bool] */;
  (%411, %412)
}

def @func_3863() -> (Tensor[(?, ?, 9), float64],) {
  %413 = @func_3852() /* ty=(Tensor[(?, ?, 9), float64],) */;
  %414 = %413.0;
  (%414,)
}

def @func_6425() -> Tensor[(1, 1, 9), float32] {
  %415 = @func_5218() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) */;
  %415.1
}

def @func_1167() -> (Tensor[(9), float64],) {
  %416 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %417 = %416.2;
  (%417,)
}

def @func_4931() -> bool {
  %418 = @func_3713() /* ty=(bool,) */;
  %418.0
}

def @func_5498() -> Tensor[(9), float64] {
  %419 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %419.0
}

def @func_3202(%var_3154: Tensor[(286, 1), bool]) -> (Tensor[(?, ?, 9), int64], Tensor[(286, 1), uint8], Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float64], Tensor[(286, 1), float64], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  %420 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
  %421 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="int64") /* ty=Tensor[(9), int64] */;
  %424 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%420, dtype="int64") /* ty=Tensor[(?, ?, 9), int64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %427 = cast(%var_3154, dtype="bool") /* ty=Tensor[(286, 1), bool] */;
  %428 = reshape(%427, newshape=[286]) /* ty=Tensor[(286), bool] */;
  %429 = @func_2044(%428) /* ty=(Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) */;
  %430 = %429.1;
  %431 = cast(%430, dtype="uint8") /* ty=uint8 */;
  %432 = cast(%var_3154, dtype="uint8") /* ty=Tensor[(286, 1), uint8] */;
  %433 = cast(%420, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %434 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %437 = cast(%var_3154, dtype="float64") /* ty=Tensor[(286, 1), float64] */;
  %438 = cast(meta[relay.Constant][14] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %439 = reshape(%438, newshape=[15, 9, 9]) /* ty=Tensor[(15, 9, 9), float32] */;
  %440 = left_shift(%425, %426) /* ty=Tensor[(?, ?, 9), int64] */;
  %441 = minimum(%431, %432) /* ty=Tensor[(286, 1), uint8] */;
  %442 = cos(%433) /* ty=Tensor[(?, ?, 9), float64] */;
  %443 = cosh(%436) /* ty=Tensor[(1, 1, 9), float64] */;
  %444 = log(%437) /* ty=Tensor[(286, 1), float64] */;
  %445 = @func_2104(%439) /* ty=Tensor[(15, 9, 9), bool] */;
  (%440, %441, %442, %443, %444, %445, meta[relay.Constant][14] /* ty=Tensor[(1215), float32] */)
}

def @func_4397(%var_4377: Tensor[(10, 15, 2), float64]) -> (Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) {
  %446 = cast(%var_4377, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %447 = @func_4126() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) */;
  %448 = log10(%446) /* ty=Tensor[(10, 15, 2), float64] */;
  %449 = %447.0;
  (%448, %449)
}

def @func_4974() -> (Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float32]) {
  %450 = @func_4283() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) */;
  %451 = @func_1004() /* ty=(Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) */;
  %452 = %450.0;
  %453 = %451.1;
  (%452, %453)
}

def @func_3033() -> Tensor[(1, 1, 9), float32] {
  %454 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %454.0
}

def @func_1590(%var_1562: Tensor[(13, 14, 15), float32], %var_1563: Tensor[(13, 14, 15), float32]) -> (Tensor[(13, 14, 15), float32], Tensor[(13, 14, 15), float64], Tensor[(13, 14, 15), float32], Tensor[(13, 2, 7), float32]) {
  %455 = cast(%var_1563, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %456 = shape_of(%var_1562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_1562, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %459 = cast(%var_1562, dtype="float64") /* ty=Tensor[(13, 14, 15), float64] */;
  %460 = cast(%var_1562, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %461 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %462 = floor_divide(%457, %458) /* ty=Tensor[(13, 14, 15), float32] */;
  %463 = tan(%459) /* ty=Tensor[(13, 14, 15), float64] */;
  %464 = asinh(%460) /* ty=Tensor[(13, 14, 15), float32] */;
  %465 = %461.0;
  (%462, %463, %464, %465)
}

def @func_2474() -> (bool,) {
  %466 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %467 = %466.0;
  (%467,)
}

def @func_2713(%var_2654: Tensor[(13, 5, 3), int64], %var_2655: Tensor[(13, 5, 3), int64], %var_2683: Tensor[(13, 2, 7), float64]) -> (Tensor[(13, 5, 3), int64], Tensor[(9), float64], Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
  %468 = cast(%var_2655, dtype="int64") /* ty=Tensor[(13, 5, 3), int64] */;
  %469 = shape_of(%var_2654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_2654, dtype="int64") /* ty=Tensor[(13, 5, 3), int64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %472 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %473 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
  %474 = %473.0;
  %475 = cast(%var_2683, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%474, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
  %480 = bitwise_and(%470, %471) /* ty=Tensor[(13, 5, 3), int64] */;
  %481 = %472.0;
  %482 = less_equal(%477, %478) /* ty=Tensor[(13, 2, 7), bool] */;
  %483 = tan(%479) /* ty=Tensor[(13, 2, 7), float64] */;
  (%480, %481, %482, %483)
}

def @func_2780(%var_2771: Tensor[(1, 13, 14), bool]) -> (Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) {
  %484 = @func_1700() /* ty=bool */;
  %485 = cast(%484, dtype="float64") /* ty=float64 */;
  %486 = cast(%var_2771, dtype="float64") /* ty=Tensor[(1, 13, 14), float64] */;
  %487 = floor_mod(%485, %486) /* ty=Tensor[(1, 13, 14), float64] */;
  %488 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  (%487, %488)
}

def @func_5976(%var_5947: int64) -> (Tensor[(2, 8, 3), bool], Tensor[(1, 1, 9), float32], bool) {
  %489 = cast(%var_5947, dtype="bool") /* ty=bool */;
  %490 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 8, 3), int64] */, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %491 = @func_2497() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */;
  %492 = equal(%489, %490) /* ty=Tensor[(2, 8, 3), bool] */;
  %493 = %491.0;
  %494 = @func_1700() /* ty=bool */;
  (%492, %493, %494)
}

def @func_602() -> (Tensor[(1, 1, 9), float32],) {
  %495 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %496 = %495.0;
  (%496,)
}

def @func_663() -> bool {
  %497 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %497.2
}

def @func_411() -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) {
  %498 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
  %499 = sinh(%498) /* ty=Tensor[(13, 2, 7), float64] */;
  %500 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 2, 7), float64] */, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %504 = cast(meta[relay.Constant][17] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %505 = reshape(%504, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %506 = @func_20(%505) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %507 = power(%502, %503) /* ty=Tensor[(13, 2, 7), float32] */;
  %508 = %506.0;
  (%507, %508, meta[relay.Constant][17] /* ty=Tensor[(9), float64] */)
}

def @func_2923() -> (Tensor[(2, 13, 11), uint16],) {
  %509 = @func_663() /* ty=bool */;
  %510 = cast(%509, dtype="bool") /* ty=bool */;
  %511 = reshape(%510, newshape=[]) /* ty=bool */;
  %512 = @func_523(%511) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) */;
  %513 = %512.2;
  %514 = cast(%513, dtype="uint16") /* ty=Tensor[(2, 13, 11), uint16] */;
  %515 = cast(%509, dtype="uint16") /* ty=uint16 */;
  %516 = add(%514, %515) /* ty=Tensor[(2, 13, 11), uint16] */;
  (%516,)
}

def @func_2627() -> (Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) {
  %517 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
  %518 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %519 = %518.0;
  %520 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %521 = cast(%519, dtype="float64") /* ty=float64 */;
  %522 = cast(%520, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %523 = %517.3;
  %524 = divide(%521, %522) /* ty=Tensor[(11, 3, 9), float64] */;
  (%523, %524)
}

def @func_2332() -> (Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
  %525 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %526 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %527 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %528 = @func_2292() /* ty=(Tensor[(13, 2, 7), float64],) */;
  %529 = %525.0;
  %530 = %526.0;
  %531 = %527.0;
  %532 = %528.0;
  (%529, %530, %531, %532)
}

def @func_3713() -> (bool,) {
  %533 = @func_663() /* ty=bool */;
  (%533,)
}

def @func_574() -> (Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) {
  %534 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %535 = cos(%534) /* ty=Tensor[(5, 3, 14), float32] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
  %537 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %538 = reshape(%537, newshape=[]) /* ty=bool */;
  %539 = @func_523(%538) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) */;
  %540 = atanh(%536) /* ty=Tensor[(5, 3, 14), float64] */;
  %541 = %539.5;
  (%540, %541, False /* ty=bool */)
}

def @func_4629() -> (Tensor[(13, 2, 7), bool],) {
  %542 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
  (%542,)
}

def @func_523(%var_518: bool) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) {
  %543 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %544 = %543.2;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(9), float64] */;
  %546 = reshape(%545, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %547 = @func_20(%546) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %548 = cast(%var_518, dtype="bool") /* ty=bool */;
  %549 = cast(meta[relay.Constant][19] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %550 = reshape(%548, newshape=[]) /* ty=bool */;
  %551 = reshape(%549, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
  %552 = @func_477(%550, %551) /* ty=(Tensor[(2, 13, 11), bool],) */;
  %553 = cast(%var_518, dtype="bool") /* ty=bool */;
  %554 = %552.0;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %556 = reshape(%553, newshape=[]) /* ty=bool */;
  %557 = reshape(%555, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
  %558 = @func_477(%556, %557) /* ty=(Tensor[(2, 13, 11), bool],) */;
  %559 = %547.0;
  %560 = %558.0;
  (%544, %559, %554, %var_518, meta[relay.Constant][19] /* ty=Tensor[(286), bool] */, %560)
}

def @func_1415() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) {
  %561 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %562 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %563 = %562.0;
  %564 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
  %567 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%563, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %570 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %571 = rsqrt(%570) /* ty=Tensor[(13, 2, 7), float32] */;
  %572 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %573 = %572.0;
  %574 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = logical_and(%576, %577) /* ty=Tensor[(13, 2, 7), bool] */;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %580 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%571, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %583 = %561.0;
  %584 = bitwise_or(%568, %569) /* ty=Tensor[(?, ?, 9), int64] */;
  %585 = mod(%581, %582) /* ty=Tensor[(13, 2, 7), float32] */;
  (%583, %584, %585)
}

def @func_5538() -> bool {
  %586 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %586.2
}

def @func_5798() -> bool {
  @func_5538() /* ty=bool */
}

def @func_1700() -> bool {
  @func_663() /* ty=bool */
}

def @func_6144() -> Tensor[(?, ?, 9), int64] {
  %587 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %587.1
}

def @main(%var_6554: Tensor[(15, 4, 2), int64]) -> (Tensor[(15, 4, 2), int64],) {
  %588 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(15, 4, 2), int64] */;
  %589 = shape_of(%var_6554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_6554, dtype="int64") /* ty=Tensor[(15, 4, 2), int64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %592 = add(%590, %591) /* ty=Tensor[(15, 4, 2), int64] */;
  (%592,)
}

def @func_2230(%var_2204: Tensor[(11, 3, 9), float64], %var_2210: Tensor[(45), float32]) -> (Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) {
  %593 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %595 = acos(%594) /* ty=Tensor[(11, 3, 9), float64] */;
  %596 = cast(%var_2204, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %600 = cast(%var_2210, dtype="float32") /* ty=Tensor[(45), float32] */;
  %601 = reshape(%600, newshape=[1, 45]) /* ty=Tensor[(1, 45), float32] */;
  %602 = @func_1133(%601) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) */;
  %603 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %604 = cast(%593, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %605 = power(%598, %599) /* ty=Tensor[(11, 3, 9), float32] */;
  %606 = %602.3;
  %607 = %603.0;
  %608 = atanh(%604) /* ty=Tensor[(11, 3, 9), float64] */;
  (%605, %606, %var_2210, %607, %608)
}

def @func_4604() -> Tensor[(1, 1, 9), float32] {
  %609 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %609.0
}

def @func_975() -> (Tensor[(13, 2, 7), bool],) {
  %610 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %611 = %610.0;
  %612 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = logical_or(%614, %615) /* ty=Tensor[(13, 2, 7), bool] */;
  (%616,)
}

def @func_4091() -> (Tensor[(13, 2, 7), bool],) {
  %617 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
  (%617,)
}

def @func_1004() -> (Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) {
  %618 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %619 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 3), float64] */;
  %620 = reshape(%619, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %621 = @func_20(%620) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %622 = %618.1;
  %623 = %621.0;
  (%622, %623, meta[relay.Constant][23] /* ty=Tensor[(3, 3), float64] */)
}

def @func_2425() -> Tensor[(9), float64] {
  %624 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %624.0
}

def @func_802() -> (Tensor[(1, 1, 9), float32],) {
  %625 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %626 = %625.0;
  (%626,)
}

def @func_2448() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  %627 = @func_1004() /* ty=(Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) */;
  %628 = @func_2425() /* ty=Tensor[(9), float64] */;
  %629 = %627.1;
  (%628, %629)
}

def @func_3467(%var_3405: Tensor[(8, 10, 9), float64]) -> (Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) {
  %630 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %631 = %630.1;
  %632 = cast(%631, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
  %633 = cast(%var_3405, dtype="bool") /* ty=Tensor[(8, 10, 9), bool] */;
  %634 = @func_1829() /* ty=(Tensor[(9), float64],) */;
  %635 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %636 = %635.1;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %638 = not_equal(%632, %633) /* ty=Tensor[(8, 10, 9), bool] */;
  %639 = %634.0;
  %640 = acosh(%637) /* ty=Tensor[(2, 13, 11), float64] */;
  (%638, %639, %640)
}

def @func_5806() -> (bool, Tensor[(1, 1, 9), float32]) {
  %641 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
  %642 = @func_912() /* ty=bool */;
  %643 = %641.0;
  (%642, %643)
}

def @func_1690() -> Tensor[(11, 3, 9), float64] {
  %644 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  exp(%644) /* ty=Tensor[(11, 3, 9), float64] */
}

def @func_2408() -> (Tensor[(1, 1, 9), float32],) {
  %645 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %646 = %645.0;
  (%646,)
}

def @func_2104(%var_2099: Tensor[(15, 9, 9), float32]) -> Tensor[(15, 9, 9), bool] {
  %647 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %648 = %647.1;
  %649 = cast(%648, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %650 = cast(%var_2099, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  greater_equal(%649, %650) /* ty=Tensor[(15, 9, 9), bool] */
}

def @func_6237() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64]) {
  %651 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %652 = %651.0;
  %653 = @func_6144() /* ty=Tensor[(?, ?, 9), int64] */;
  (%652, %653)
}

def @func_5717(%var_5708: Tensor[(14, 14, 12), uint16], %var_5709: Tensor[(14, 14, 12), uint16]) -> (Tensor[(14, 14, 12), uint16],) {
  %654 = cast(%var_5709, dtype="uint16") /* ty=Tensor[(14, 14, 12), uint16] */;
  %655 = shape_of(%var_5708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_5708, dtype="uint16") /* ty=Tensor[(14, 14, 12), uint16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %658 = left_shift(%656, %657) /* ty=Tensor[(14, 14, 12), uint16] */;
  (%658,)
}

def @func_5750(%var_5747: Tensor[(11, 5, 9), float64]) -> (Tensor[(11, 5, 9), float64],) {
  %659 = cast(%var_5747, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
  %660 = cosh(%659) /* ty=Tensor[(11, 5, 9), float64] */;
  (%660,)
}

def @func_1133(%var_1131: Tensor[(1, 45), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) {
  %661 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %662 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %663 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %664 = cast(%var_1131, dtype="float32") /* ty=Tensor[(1, 45), float32] */;
  %665 = reshape(%664, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), float32] */;
  %666 = @func_906(%665) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) */;
  %667 = %661.0;
  %668 = %662.0;
  %669 = %663.0;
  %670 = %666.3;
  (%667, %668, %669, %670, %var_1131)
}

def @func_2256(%var_2241: Tensor[(1, 7, 15), uint64], %var_2242: Tensor[(2, 7, 15), uint64]) -> (Tensor[(2, 7, 15), uint64],) {
  %671 = cast(%var_2241, dtype="uint64") /* ty=Tensor[(1, 7, 15), uint64] */;
  %672 = cast(%var_2242, dtype="uint64") /* ty=Tensor[(2, 7, 15), uint64] */;
  %673 = right_shift(%671, %672) /* ty=Tensor[(2, 7, 15), uint64] */;
  (%673,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6237() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64]) {
  %0 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %1 = %0.0;
  %2 = @func_6144() /* ty=Tensor[(?, ?, 9), int64] */;
  (%1, %2)
}

def @func_3547(%var_3544: Tensor[(720), float64], %var_3545: Tensor[(105), uint64], %var_3546: Tensor[(210), uint64]) -> (bool, Tensor[(9), float64], Tensor[(720), float64], Tensor[(2, 7, 15), uint64], Tensor[(105), uint64], Tensor[(210), uint64]) {
  %15 = fn (%var_3515: Tensor[(720), float64], %var_3533: Tensor[(105), uint64], %var_3534: Tensor[(210), uint64]) -> (bool, Tensor[(9), float64], Tensor[(720), float64], Tensor[(2, 7, 15), uint64], Tensor[(105), uint64], Tensor[(210), uint64]) {
    %3 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
    %4 = cast(%var_3515, dtype="float64") /* ty=Tensor[(720), float64] */;
    %5 = reshape(%4, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), float64] */;
    %6 = @func_3467(%5) /* ty=(Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) */;
    %7 = cast(%var_3533, dtype="uint64") /* ty=Tensor[(105), uint64] */;
    %8 = cast(%var_3534, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %9 = reshape(%7, newshape=[1, 7, 15]) /* ty=Tensor[(1, 7, 15), uint64] */;
    %10 = reshape(%8, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint64] */;
    %11 = @func_2256(%9, %10) /* ty=(Tensor[(2, 7, 15), uint64],) */;
    %12 = %3.0;
    %13 = %6.1;
    %14 = %11.0;
    (%12, %13, %var_3515, %14, %var_3533, %var_3534)
  };
  %15(%var_3544, %var_3545, %var_3546) /* ty=(bool, Tensor[(9), float64], Tensor[(720), float64], Tensor[(2, 7, 15), uint64], Tensor[(105), uint64], Tensor[(210), uint64]) */
}

def @func_3470(%var_3468: Tensor[(8, 10, 9), float64]) -> (Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) {
  @func_3467(%var_3468) /* ty=(Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) */
}

def @func_5165() -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32]) {
  %18 = fn () -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32]) {
    %16 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
    %17 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
    (%16, %17)
  };
  %18() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32]) */
}

def @func_2047(%var_2045: Tensor[(286), bool]) -> (Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) {
  @func_2044(%var_2045) /* ty=(Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) */
}

def @func_3714() -> (bool,) {
  %20 = fn () -> (bool,) {
    %19 = @func_663() /* ty=bool */;
    (%19,)
  };
  %20() /* ty=(bool,) */
}

def @func_5798() -> bool {
  @func_5538() /* ty=bool */
}

def @func_4400(%var_4398: Tensor[(10, 15, 2), float64]) -> (Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) {
  @func_4397(%var_4398) /* ty=(Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) */
}

def @func_6417(%var_6415: Tensor[(10, 14, 8), float32], %var_6416: Tensor[(10, 14, 8), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(10, 14, 8), bool], bool, Tensor[(10, 14, 8), float64], Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), bool]) {
  @func_6413(%var_6415, %var_6416) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(10, 14, 8), bool], bool, Tensor[(10, 14, 8), float64], Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), bool]) */
}

def @func_5643(%var_5642: Tensor[(45), float32]) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(45), uint64]) {
  %32 = fn (%var_5633: Tensor[(45), float32]) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(45), uint64]) {
    %21 = @func_1846() /* ty=(Tensor[(9), float64],) */;
    %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %23 = reshape(%22, newshape=[1, 45]) /* ty=Tensor[(1, 45), float32] */;
    %24 = @func_1133(%23) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) */;
    %25 = cast(%var_5633, dtype="uint64") /* ty=Tensor[(45), uint64] */;
    %26 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(45), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(45), float32] */, dtype="uint64") /* ty=Tensor[(45), uint64] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %29 = %21.0;
    %30 = %24.2;
    %31 = left_shift(%27, %28) /* ty=Tensor[(45), uint64] */;
    (%29, %30, %31)
  };
  %32(%var_5642) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(45), uint64]) */
}

def @func_3381() -> (Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) {
  @func_3379() /* ty=(Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) */
}

def @func_2474() -> (bool,) {
  %33 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %34 = %33.0;
  (%34,)
}

def @func_664() -> bool {
  %36 = fn () -> bool {
    %35 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
    %35.2
  };
  %36() /* ty=bool */
}

def @func_2183(%var_2181: Tensor[(10, 14, 9), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) {
  @func_2180(%var_2181) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) */
}

def @func_4975() -> (Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float32]) {
  %41 = fn () -> (Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float32]) {
    %37 = @func_4283() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) */;
    %38 = @func_1004() /* ty=(Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) */;
    %39 = %37.0;
    %40 = %38.1;
    (%39, %40)
  };
  %41() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float32]) */
}

def @func_4283() -> (Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) {
  %42 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %43 = %42.1;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %45 = cast(%43, dtype="int8") /* ty=Tensor[(?, ?, 9), int8] */;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 9), int64] */, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %47 = acosh(%44) /* ty=Tensor[(?, ?, 9), float64] */;
  %48 = bitwise_xor(%45, %46) /* ty=Tensor[(13, 14, 9), int8] */;
  (%47, %48)
}

def @func_5720(%var_5718: Tensor[(14, 14, 12), uint16], %var_5719: Tensor[(14, 14, 12), uint16]) -> (Tensor[(14, 14, 12), uint16],) {
  %54 = fn (%var_5708: Tensor[(14, 14, 12), uint16], %var_5709: Tensor[(14, 14, 12), uint16]) -> (Tensor[(14, 14, 12), uint16],) {
    %49 = cast(%var_5709, dtype="uint16") /* ty=Tensor[(14, 14, 12), uint16] */;
    %50 = shape_of(%var_5708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%var_5708, dtype="uint16") /* ty=Tensor[(14, 14, 12), uint16] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %53 = left_shift(%51, %52) /* ty=Tensor[(14, 14, 12), uint16] */;
    (%53,)
  };
  %54(%var_5718, %var_5719) /* ty=(Tensor[(14, 14, 12), uint16],) */
}

def @func_1590(%var_1562: Tensor[(13, 14, 15), float32], %var_1563: Tensor[(13, 14, 15), float32]) -> (Tensor[(13, 14, 15), float32], Tensor[(13, 14, 15), float64], Tensor[(13, 14, 15), float32], Tensor[(13, 2, 7), float32]) {
  %55 = cast(%var_1563, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %56 = shape_of(%var_1562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_1562, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = cast(%var_1562, dtype="float64") /* ty=Tensor[(13, 14, 15), float64] */;
  %60 = cast(%var_1562, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  %61 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %62 = floor_divide(%57, %58) /* ty=Tensor[(13, 14, 15), float32] */;
  %63 = tan(%59) /* ty=Tensor[(13, 14, 15), float64] */;
  %64 = asinh(%60) /* ty=Tensor[(13, 14, 15), float32] */;
  %65 = %61.0;
  (%62, %63, %64, %65)
}

def @func_3033() -> Tensor[(1, 1, 9), float32] {
  %66 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %66.0
}

def @func_1594(%var_1592: Tensor[(13, 14, 15), float32], %var_1593: Tensor[(13, 14, 15), float32]) -> (Tensor[(13, 14, 15), float32], Tensor[(13, 14, 15), float64], Tensor[(13, 14, 15), float32], Tensor[(13, 2, 7), float32]) {
  @func_1590(%var_1592, %var_1593) /* ty=(Tensor[(13, 14, 15), float32], Tensor[(13, 14, 15), float64], Tensor[(13, 14, 15), float32], Tensor[(13, 2, 7), float32]) */
}

def @func_22(%var_21: Tensor[(1, 1, 9), float64]) -> (Tensor[(1, 1, 9), float32],) {
  %71 = fn (%var_10: Tensor[(1, 1, 9), float64]) -> (Tensor[(1, 1, 9), float32],) {
    %67 = cast(%var_10, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
    %68 = log10(%67) /* ty=Tensor[(1, 1, 9), float64] */;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
    %70 = log2(%69) /* ty=Tensor[(1, 1, 9), float32] */;
    (%70,)
  };
  %71(%var_21) /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @func_3246() -> Tensor[(1, 1, 9), float32] {
  @func_3244() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_1787() -> Tensor[(?, ?, 9), float64] {
  @func_1785() /* ty=Tensor[(?, ?, 9), float64] */
}

def @func_6144() -> Tensor[(?, ?, 9), int64] {
  %72 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %72.1
}

def @func_2346(%var_2344: Tensor[(14, 16, 5), uint16]) -> Tensor[(14, 16, 5), float64] {
  @func_2343(%var_2344) /* ty=Tensor[(14, 16, 5), float64] */
}

def @func_3244() -> Tensor[(1, 1, 9), float32] {
  @func_3033() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_6042() -> bool {
  %74 = fn () -> bool {
    %73 = @func_2474() /* ty=(bool,) */;
    %73.0
  };
  %74() /* ty=bool */
}

def @func_6146() -> Tensor[(?, ?, 9), int64] {
  @func_6144() /* ty=Tensor[(?, ?, 9), int64] */
}

def @func_6239() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64]) {
  @func_6237() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64]) */
}

def @func_1829() -> (Tensor[(9), float64],) {
  %75 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %76 = %75.0;
  (%76,)
}

def @func_5219() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) {
  %90 = fn () -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) {
    %77 = @func_2448() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */;
    %78 = @func_2497() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */;
    %79 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
    %80 = %79.0;
    %81 = cast(%80, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
    %82 = atan(%81) /* ty=Tensor[(13, 2, 7), float32] */;
    %83 = cast(%82, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %84 = reshape(%83, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), bool] */;
    %85 = @func_2780(%84) /* ty=(Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) */;
    %86 = %77.0;
    %87 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
    %88 = %78.2;
    %89 = %85.1;
    (%86, %87, %88, %82, %89)
  };
  %90() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) */
}

def @func_2476() -> (bool,) {
  @func_2474() /* ty=(bool,) */
}

def @func_3893() -> Tensor[(?, ?, 9), float64] {
  %91 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %91.1
}

def @func_4209(%var_4204: Tensor[(11, 16, 2), float32], %var_4205: Tensor[(11, 16, 2), float32], %var_4206: Tensor[(1200), float32], %var_4207: Tensor[(297), float64], %var_4208: Tensor[(45), float32]) -> (Tensor[(11, 16, 2), float32], Tensor[(?, ?, 9), float32], Tensor[(10, 14, 9), bool], Tensor[(1200), float32], Tensor[(1260), float32], Tensor[(11, 3, 9), float32], Tensor[(297), float64], Tensor[(45), float32]) {
  %118 = fn (%var_4148: Tensor[(11, 16, 2), float32], %var_4149: Tensor[(11, 16, 2), float32], %var_4187: Tensor[(1200), float32], %var_4192: Tensor[(297), float64], %var_4193: Tensor[(45), float32]) -> (Tensor[(11, 16, 2), float32], Tensor[(?, ?, 9), float32], Tensor[(10, 14, 9), bool], Tensor[(1200), float32], Tensor[(1260), float32], Tensor[(11, 3, 9), float32], Tensor[(297), float64], Tensor[(45), float32]) {
    %92 = cast(%var_4149, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
    %93 = shape_of(%var_4148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%var_4148, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %96 = @func_2408() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %97 = %96.0;
    %98 = @func_1846() /* ty=(Tensor[(9), float64],) */;
    %99 = %98.0;
    %100 = cast(%99, dtype="float32") /* ty=Tensor[(9), float32] */;
    %101 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %102 = cast(%97, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %104 = cast(%var_4187, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %105 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %106 = reshape(%104, newshape=[15, 8, 10]) /* ty=Tensor[(15, 8, 10), float32] */;
    %107 = reshape(%105, newshape=[9, 140]) /* ty=Tensor[(9, 140), float32] */;
    %108 = @func_2383(%106, %107) /* ty=(Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) */;
    %109 = cast(%var_4192, dtype="float64") /* ty=Tensor[(297), float64] */;
    %110 = cast(%var_4193, dtype="float32") /* ty=Tensor[(45), float32] */;
    %111 = reshape(%109, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float64] */;
    %112 = reshape(%110, newshape=[45]) /* ty=Tensor[(45), float32] */;
    %113 = @func_2230(%111, %112) /* ty=(Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) */;
    %114 = minimum(%94, %95) /* ty=Tensor[(11, 16, 2), float32] */;
    %115 = maximum(%102, %103) /* ty=Tensor[(?, ?, 9), float32] */;
    %116 = %108.1;
    %117 = %113.0;
    (%114, %115, %116, %var_4187, meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, %117, %var_4192, %var_4193)
  };
  %118(%var_4204, %var_4205, %var_4206, %var_4207, %var_4208) /* ty=(Tensor[(11, 16, 2), float32], Tensor[(?, ?, 9), float32], Tensor[(10, 14, 9), bool], Tensor[(1200), float32], Tensor[(1260), float32], Tensor[(11, 3, 9), float32], Tensor[(297), float64], Tensor[(45), float32]) */
}

def @func_4631() -> (Tensor[(13, 2, 7), bool],) {
  @func_4629() /* ty=(Tensor[(13, 2, 7), bool],) */
}

def @func_2628() -> (Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) {
  %127 = fn () -> (Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) {
    %119 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
    %120 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
    %121 = %120.0;
    %122 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
    %123 = cast(%121, dtype="float64") /* ty=float64 */;
    %124 = cast(%122, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
    %125 = %119.3;
    %126 = divide(%123, %124) /* ty=Tensor[(11, 3, 9), float64] */;
    (%125, %126)
  };
  %127() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */
}

def @func_1415() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) {
  %128 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %129 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %130 = %129.0;
  %131 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
  %134 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%130, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %137 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %138 = rsqrt(%137) /* ty=Tensor[(13, 2, 7), float32] */;
  %139 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %140 = %139.0;
  %141 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = logical_and(%143, %144) /* ty=Tensor[(13, 2, 7), bool] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %147 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%138, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %150 = %128.0;
  %151 = bitwise_or(%135, %136) /* ty=Tensor[(?, ?, 9), int64] */;
  %152 = mod(%148, %149) /* ty=Tensor[(13, 2, 7), float32] */;
  (%150, %151, %152)
}

def @func_4604() -> Tensor[(1, 1, 9), float32] {
  %153 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %153.0
}

def @func_4931() -> bool {
  %154 = @func_3713() /* ty=(bool,) */;
  %154.0
}

def @func_4798(%var_4796: Tensor[(11, 6, 14), uint32], %var_4797: Tensor[(11, 6, 14), uint32]) -> Tensor[(11, 6, 14), uint32] {
  @func_4794(%var_4796, %var_4797) /* ty=Tensor[(11, 6, 14), uint32] */
}

def @func_1690() -> Tensor[(11, 3, 9), float64] {
  %155 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  exp(%155) /* ty=Tensor[(11, 3, 9), float64] */
}

def @func_1623(%var_1621: Tensor[(10, 5, 9), float64]) -> (Tensor[(10, 5, 9), float32],) {
  @func_1620(%var_1621) /* ty=(Tensor[(10, 5, 9), float32],) */
}

def @func_5941(%var_5898: Tensor[(630, 2), float32], %var_5923: Tensor[(630, 2), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(630, 2), int32], Tensor[(630, 2), float64], Tensor[(1, 1, 9), float32]) {
  %156 = cast(%var_5898, dtype="float32") /* ty=Tensor[(630, 2), float32] */;
  %157 = reshape(%156, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float32] */;
  %158 = @func_2180(%157) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) */;
  %159 = cast(%var_5923, dtype="int32") /* ty=Tensor[(630, 2), int32] */;
  %160 = shape_of(%var_5898, dtype="int32") /* ty=Tensor[(2), int32] */;
  %161 = cast(%var_5898, dtype="int32") /* ty=Tensor[(630, 2), int32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %163 = cast(%var_5898, dtype="float64") /* ty=Tensor[(630, 2), float64] */;
  %164 = @func_5260() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %165 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
  %166 = %158.0;
  %167 = logical_xor(%161, %162) /* ty=Tensor[(630, 2), int32] */;
  %168 = acos(%163) /* ty=Tensor[(630, 2), float64] */;
  %169 = %164.0;
  (%165, %166, %167, %168, %169)
}

def @func_6426() -> Tensor[(1, 1, 9), float32] {
  %171 = fn () -> Tensor[(1, 1, 9), float32] {
    %170 = @func_5218() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) */;
    %170.1
  };
  %171() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_3035() -> Tensor[(1, 1, 9), float32] {
  @func_3033() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_3202(%var_3154: Tensor[(286, 1), bool]) -> (Tensor[(?, ?, 9), int64], Tensor[(286, 1), uint8], Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float64], Tensor[(286, 1), float64], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  %172 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
  %173 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="int64") /* ty=Tensor[(9), int64] */;
  %176 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%172, dtype="int64") /* ty=Tensor[(?, ?, 9), int64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %179 = cast(%var_3154, dtype="bool") /* ty=Tensor[(286, 1), bool] */;
  %180 = reshape(%179, newshape=[286]) /* ty=Tensor[(286), bool] */;
  %181 = @func_2044(%180) /* ty=(Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="uint8") /* ty=uint8 */;
  %184 = cast(%var_3154, dtype="uint8") /* ty=Tensor[(286, 1), uint8] */;
  %185 = cast(%172, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %186 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %189 = cast(%var_3154, dtype="float64") /* ty=Tensor[(286, 1), float64] */;
  %190 = cast(meta[relay.Constant][5] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %191 = reshape(%190, newshape=[15, 9, 9]) /* ty=Tensor[(15, 9, 9), float32] */;
  %192 = left_shift(%177, %178) /* ty=Tensor[(?, ?, 9), int64] */;
  %193 = minimum(%183, %184) /* ty=Tensor[(286, 1), uint8] */;
  %194 = cos(%185) /* ty=Tensor[(?, ?, 9), float64] */;
  %195 = cosh(%188) /* ty=Tensor[(1, 1, 9), float64] */;
  %196 = log(%189) /* ty=Tensor[(286, 1), float64] */;
  %197 = @func_2104(%191) /* ty=Tensor[(15, 9, 9), bool] */;
  (%192, %193, %194, %195, %196, %197, meta[relay.Constant][5] /* ty=Tensor[(1215), float32] */)
}

def @func_1701() -> bool {
  %198 = fn () -> bool {
    @func_663() /* ty=bool */
  };
  %198() /* ty=bool */
}

def @func_5807() -> (bool, Tensor[(1, 1, 9), float32]) {
  %202 = fn () -> (bool, Tensor[(1, 1, 9), float32]) {
    %199 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
    %200 = @func_912() /* ty=bool */;
    %201 = %199.0;
    (%200, %201)
  };
  %202() /* ty=(bool, Tensor[(1, 1, 9), float32]) */
}

def @func_913() -> bool {
  %204 = fn () -> bool {
    %203 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
    %203.2
  };
  %204() /* ty=bool */
}

def @func_4043(%var_4042: Tensor[(12, 14, 12), float64]) -> (Tensor[(12, 14, 12), float64], Tensor[(13, 2, 7), bool]) {
  %208 = fn (%var_4013: Tensor[(12, 14, 12), float64]) -> (Tensor[(12, 14, 12), float64], Tensor[(13, 2, 7), bool]) {
    %205 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
    %206 = log(%205) /* ty=Tensor[(12, 14, 12), float64] */;
    %207 = @func_3064() /* ty=Tensor[(13, 2, 7), bool] */;
    (%206, %207)
  };
  %208(%var_4042) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(13, 2, 7), bool]) */
}

def @func_411() -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) {
  %209 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
  %210 = sinh(%209) /* ty=Tensor[(13, 2, 7), float64] */;
  %211 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 2, 7), float64] */, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %215 = cast(meta[relay.Constant][7] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %216 = reshape(%215, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %217 = @func_20(%216) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %218 = power(%213, %214) /* ty=Tensor[(13, 2, 7), float32] */;
  %219 = %217.0;
  (%218, %219, meta[relay.Constant][7] /* ty=Tensor[(9), float64] */)
}

def @func_2386(%var_2384: Tensor[(15, 8, 10), float32], %var_2385: Tensor[(9, 140), float32]) -> (Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) {
  %226 = fn (%var_2371: Tensor[(15, 8, 10), float32], %var_2377: Tensor[(9, 140), float32]) -> (Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) {
    %220 = cast(%var_2371, dtype="float32") /* ty=Tensor[(15, 8, 10), float32] */;
    %221 = cast(%var_2377, dtype="float32") /* ty=Tensor[(9, 140), float32] */;
    %222 = reshape(%221, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float32] */;
    %223 = @func_2180(%222) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) */;
    %224 = log(%220) /* ty=Tensor[(15, 8, 10), float32] */;
    %225 = %223.1;
    (%224, %225, %var_2377)
  };
  %226(%var_2384, %var_2385) /* ty=(Tensor[(15, 8, 10), float32], Tensor[(10, 14, 9), bool], Tensor[(9, 140), float32]) */
}

def @func_1480() -> (bool, Tensor[(?, ?, 9), float64]) {
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %228 = reshape(%227, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
  %229 = @func_20(%228) /* ty=(Tensor[(1, 1, 9), float32],) */;
  %230 = %229.0;
  %231 = cast(meta[relay.Constant][8] /* ty=Tensor[(9), float64] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %235 = floor_mod(%233, %234) /* ty=Tensor[(?, ?, 9), float32] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
  %237 = @func_663() /* ty=bool */;
  %238 = sin(%236) /* ty=Tensor[(?, ?, 9), float64] */;
  (%237, %238)
}

def @func_4851() -> (Tensor[(9), float64], Tensor[(924), uint32], Tensor[(11, 6, 14), int16]) {
  @func_4849() /* ty=(Tensor[(9), float64], Tensor[(924), uint32], Tensor[(11, 6, 14), int16]) */
}

def @func_557() -> (Tensor[(1, 1, 9), float32],) {
  %239 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %240 = %239.1;
  (%240,)
}

def @func_2044(%var_2039: Tensor[(286), bool]) -> (Tensor[(13, 2, 7), bool], bool, Tensor[(2, 13, 11), bool], Tensor[(2, 13, 11), float64], bool, Tensor[(1, 1, 9), float32], Tensor[(286), bool]) {
  %241 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %242 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %243 = reshape(%241, newshape=[]) /* ty=bool */;
  %244 = reshape(%242, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
  %245 = @func_477(%243, %244) /* ty=(Tensor[(2, 13, 11), bool],) */;
  %246 = %245.0;
  %247 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 13, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = cast(%246, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %252 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %253 = cast(%var_2039, dtype="bool") /* ty=Tensor[(286), bool] */;
  %254 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %255 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?), bool] */;
  %257 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
  %258 = greater(%249, %250) /* ty=Tensor[(2, 13, 11), bool] */;
  %259 = cosh(%251) /* ty=Tensor[(2, 13, 11), float64] */;
  %260 = @func_912() /* ty=bool */;
  %261 = %252.0;
  %262 = logical_and(%255, %256) /* ty=Tensor[(286), bool] */;
  (%257, True /* ty=bool */, %258, %259, %260, %261, %262)
}

def @func_746() -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) {
  %267 = fn () -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) {
    %263 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
    %264 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %265 = %263.0;
    %266 = %264.0;
    (%265, %266)
  };
  %267() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */
}

def @func_3853() -> (Tensor[(?, ?, 9), float64],) {
  %269 = fn () -> (Tensor[(?, ?, 9), float64],) {
    %268 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
    (%268,)
  };
  %269() /* ty=(Tensor[(?, ?, 9), float64],) */
}

def @func_5261() -> (Tensor[(1, 1, 9), float32],) {
  %271 = fn () -> (Tensor[(1, 1, 9), float32],) {
    %270 = @func_4604() /* ty=Tensor[(1, 1, 9), float32] */;
    (%270,)
  };
  %271() /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @main(%var_6554: Tensor[(15, 4, 2), int64]) -> (Tensor[(15, 4, 2), int64],) {
  %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(15, 4, 2), int64] */;
  %273 = shape_of(%var_6554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%var_6554, dtype="int64") /* ty=Tensor[(15, 4, 2), int64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %276 = add(%274, %275) /* ty=Tensor[(15, 4, 2), int64] */;
  (%276,)
}

def @func_2343(%var_2335: Tensor[(14, 16, 5), uint16]) -> Tensor[(14, 16, 5), float64] {
  %277 = cast(%var_2335, dtype="uint16") /* ty=Tensor[(14, 16, 5), uint16] */;
  %278 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 16, 5), uint16] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %281 = bitwise_or(%279, %280) /* ty=Tensor[(14, 16, 5), uint16] */;
  %282 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 16, 5), uint16] */, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%284, %285) /* ty=Tensor[(14, 16, 5), float64] */
}

def @func_2450() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  @func_2448() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */
}

def @func_2409() -> (Tensor[(1, 1, 9), float32],) {
  %288 = fn () -> (Tensor[(1, 1, 9), float32],) {
    %286 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @func_480(%var_478: bool, %var_479: Tensor[(2, 13, 11), bool]) -> (Tensor[(2, 13, 11), bool],) {
  %297 = fn (%var_449: bool, %var_450: Tensor[(2, 13, 11), bool]) -> (Tensor[(2, 13, 11), bool],) {
    %289 = cast(%var_449, dtype="bool") /* ty=bool */;
    %290 = cast(%var_450, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
    %291 = logical_or(%289, %290) /* ty=Tensor[(2, 13, 11), bool] */;
    %292 = cast(%var_450, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%291, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %296 = not_equal(%294, %295) /* ty=Tensor[(2, 13, 11), bool] */;
    (%296,)
  };
  %297(%var_478, %var_479) /* ty=(Tensor[(2, 13, 11), bool],) */
}

def @func_5133() -> (Tensor[(11, 3, 9), uint8],) {
  %306 = fn () -> (Tensor[(11, 3, 9), uint8],) {
    %298 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
    %299 = cast(%298, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
    %300 = atan(%299) /* ty=Tensor[(11, 3, 9), float64] */;
    %301 = cast(%298, dtype="uint8") /* ty=Tensor[(11, 3, 9), uint8] */;
    %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%300, dtype="uint8") /* ty=Tensor[(11, 3, 9), uint8] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %305 = right_shift(%303, %304) /* ty=Tensor[(11, 3, 9), uint8] */;
    (%305,)
  };
  %306() /* ty=(Tensor[(11, 3, 9), uint8],) */
}

def @func_5752(%var_5751: Tensor[(11, 5, 9), float64]) -> (Tensor[(11, 5, 9), float64],) {
  %309 = fn (%var_5747: Tensor[(11, 5, 9), float64]) -> (Tensor[(11, 5, 9), float64],) {
    %307 = cast(%var_5747, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
    %308 = cosh(%307) /* ty=Tensor[(11, 5, 9), float64] */;
    (%308,)
  };
  %309(%var_5751) /* ty=(Tensor[(11, 5, 9), float64],) */
}

def @func_5978(%var_5977: int64) -> (Tensor[(2, 8, 3), bool], Tensor[(1, 1, 9), float32], bool) {
  %316 = fn (%var_5947: int64) -> (Tensor[(2, 8, 3), bool], Tensor[(1, 1, 9), float32], bool) {
    %310 = cast(%var_5947, dtype="bool") /* ty=bool */;
    %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 8, 3), int64] */, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
    %312 = @func_2497() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */;
    %313 = equal(%310, %311) /* ty=Tensor[(2, 8, 3), bool] */;
    %314 = %312.0;
    %315 = @func_1700() /* ty=bool */;
    (%313, %314, %315)
  };
  %316(%var_5977) /* ty=(Tensor[(2, 8, 3), bool], Tensor[(1, 1, 9), float32], bool) */
}

def @func_6413(%var_6341: Tensor[(10, 14, 8), float32], %var_6355: Tensor[(10, 14, 8), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(10, 14, 8), bool], bool, Tensor[(10, 14, 8), float64], Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), bool]) {
  %317 = @func_5218() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(1215), float32], Tensor[(13, 2, 7), float32], Tensor[(11, 3, 9), float64]) */;
  %318 = cast(%var_6341, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %319 = log2(%318) /* ty=Tensor[(10, 14, 8), float64] */;
  %320 = cast(%var_6341, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %321 = sin(%320) /* ty=Tensor[(10, 14, 8), float32] */;
  %322 = cast(%var_6355, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = logical_or(%324, %325) /* ty=Tensor[(10, 14, 8), bool] */;
  %327 = cast(%326, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %328 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%319, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = @func_2474() /* ty=(bool,) */;
  %332 = cast(%319, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %333 = asinh(%332) /* ty=Tensor[(10, 14, 8), float64] */;
  %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %335 = shape_of(%var_6341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_6341, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = greater(%336, %337) /* ty=Tensor[(10, 14, 8), bool] */;
  %339 = cast(%338, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %340 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%333, dtype="bool") /* ty=Tensor[(10, 14, 8), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = equal(%341, %342) /* ty=Tensor[(10, 14, 8), bool] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %345 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %346 = %317.3;
  %347 = logical_and(%329, %330) /* ty=Tensor[(10, 14, 8), bool] */;
  %348 = %331.0;
  %349 = rsqrt(%344) /* ty=Tensor[(10, 14, 8), float64] */;
  %350 = %345.0;
  %351 = @func_2967() /* ty=Tensor[(?, ?, 9), bool] */;
  (%346, %347, %348, %349, %350, %351)
}

def @func_4794(%var_4789: Tensor[(11, 6, 14), uint32], %var_4790: Tensor[(11, 6, 14), uint32]) -> Tensor[(11, 6, 14), uint32] {
  %352 = cast(%var_4790, dtype="uint32") /* ty=Tensor[(11, 6, 14), uint32] */;
  %353 = shape_of(%var_4789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_4789, dtype="uint32") /* ty=Tensor[(11, 6, 14), uint32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%354, %355) /* ty=Tensor[(11, 6, 14), uint32] */
}

def @func_559() -> (Tensor[(1, 1, 9), float32],) {
  @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @func_2180(%var_2162: Tensor[(10, 14, 9), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), uint32]) {
  %356 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %357 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %358 = %357.0;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %360 = cast(%var_2162, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %361 = add(%359, %360) /* ty=Tensor[(10, 14, 9), float64] */;
  %362 = cast(%361, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %363 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_2162, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = @func_1700() /* ty=bool */;
  %367 = cast(%366, dtype="uint32") /* ty=uint32 */;
  %368 = cast(%361, dtype="uint32") /* ty=Tensor[(10, 14, 9), uint32] */;
  %369 = %356.0;
  %370 = greater_equal(%364, %365) /* ty=Tensor[(10, 14, 9), bool] */;
  %371 = multiply(%367, %368) /* ty=Tensor[(10, 14, 9), uint32] */;
  (%369, %370, %371)
}

def @func_6315(%var_6314: Tensor[(1, 9), float64]) -> (Tensor[(1, 9), float64], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(11, 3, 9), bool]) {
  %391 = fn (%var_6256: Tensor[(1, 9), float64]) -> (Tensor[(1, 9), float64], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(11, 3, 9), bool]) {
    %372 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %373 = cast(meta[relay.Constant][15] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
    %374 = reshape(%372, newshape=[]) /* ty=bool */;
    %375 = reshape(%373, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
    %376 = @func_477(%374, %375) /* ty=(Tensor[(2, 13, 11), bool],) */;
    %377 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
    %378 = cast(%var_6256, dtype="float64") /* ty=Tensor[(1, 9), float64] */;
    %379 = reshape(%378, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
    %380 = @func_20(%379) /* ty=(Tensor[(1, 1, 9), float32],) */;
    %381 = %380.0;
    %382 = cast(%381, dtype="int8") /* ty=Tensor[(1, 1, 9), int8] */;
    %383 = cast(%377, dtype="int8") /* ty=Tensor[(11, 3, 9), int8] */;
    %384 = bitwise_xor(%382, %383) /* ty=Tensor[(11, 3, 9), int8] */;
    %385 = cast(%384, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
    %386 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%377, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %389 = %376.0;
    %390 = logical_and(%387, %388) /* ty=Tensor[(11, 3, 9), bool] */;
    (%var_6256, %389, False /* ty=bool */, meta[relay.Constant][15] /* ty=Tensor[(286), bool] */, %390)
  };
  %391(%var_6314) /* ty=(Tensor[(1, 9), float64], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(11, 3, 9), bool]) */
}

def @func_5843() -> (Tensor[(13, 2, 7), float64], Tensor[(11, 5, 9), float64], Tensor[(495), float64]) {
  %398 = fn () -> (Tensor[(13, 2, 7), float64], Tensor[(11, 5, 9), float64], Tensor[(495), float64]) {
    %392 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
    %393 = cast(meta[relay.Constant][16] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %394 = reshape(%393, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), float64] */;
    %395 = @func_5750(%394) /* ty=(Tensor[(11, 5, 9), float64],) */;
    %396 = %392.0;
    %397 = %395.0;
    (%396, %397, meta[relay.Constant][16] /* ty=Tensor[(495), float64] */)
  };
  %398() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 5, 9), float64], Tensor[(495), float64]) */
}

def @func_413() -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) {
  @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */
}

def @func_4397(%var_4377: Tensor[(10, 15, 2), float64]) -> (Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) {
  %399 = cast(%var_4377, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %400 = @func_4126() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) */;
  %401 = log10(%399) /* ty=Tensor[(10, 15, 2), float64] */;
  %402 = %400.0;
  (%401, %402)
}

def @func_5499() -> Tensor[(9), float64] {
  %404 = fn () -> Tensor[(9), float64] {
    %403 = @func_1167() /* ty=(Tensor[(9), float64],) */;
    %403.0
  };
  %404() /* ty=Tensor[(9), float64] */
}

def @func_575() -> (Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) {
  %413 = fn () -> (Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) {
    %405 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
    %406 = cos(%405) /* ty=Tensor[(5, 3, 14), float32] */;
    %407 = cast(%406, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
    %408 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %409 = reshape(%408, newshape=[]) /* ty=bool */;
    %410 = @func_523(%409) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) */;
    %411 = atanh(%407) /* ty=Tensor[(5, 3, 14), float64] */;
    %412 = %410.5;
    (%411, %412, False /* ty=bool */)
  };
  %413() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */
}

def @func_1005() -> (Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) {
  %420 = fn () -> (Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) {
    %414 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
    %415 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 3), float64] */;
    %416 = reshape(%415, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
    %417 = @func_20(%416) /* ty=(Tensor[(1, 1, 9), float32],) */;
    %418 = %414.1;
    %419 = %417.0;
    (%418, %419, meta[relay.Constant][18] /* ty=Tensor[(3, 3), float64] */)
  };
  %420() /* ty=(Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) */
}

def @func_1692() -> Tensor[(11, 3, 9), float64] {
  @func_1690() /* ty=Tensor[(11, 3, 9), float64] */
}

def @func_2713(%var_2654: Tensor[(13, 5, 3), int64], %var_2655: Tensor[(13, 5, 3), int64], %var_2683: Tensor[(13, 2, 7), float64]) -> (Tensor[(13, 5, 3), int64], Tensor[(9), float64], Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
  %421 = cast(%var_2655, dtype="int64") /* ty=Tensor[(13, 5, 3), int64] */;
  %422 = shape_of(%var_2654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_2654, dtype="int64") /* ty=Tensor[(13, 5, 3), int64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %425 = @func_1846() /* ty=(Tensor[(9), float64],) */;
  %426 = @func_2627() /* ty=(Tensor[(13, 2, 7), float64], Tensor[(11, 3, 9), float64]) */;
  %427 = %426.0;
  %428 = cast(%var_2683, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = cast(%427, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
  %433 = bitwise_and(%423, %424) /* ty=Tensor[(13, 5, 3), int64] */;
  %434 = %425.0;
  %435 = less_equal(%430, %431) /* ty=Tensor[(13, 2, 7), bool] */;
  %436 = tan(%432) /* ty=Tensor[(13, 2, 7), float64] */;
  (%433, %434, %435, %436)
}

def @func_1785() -> Tensor[(?, ?, 9), float64] {
  %437 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %437.1
}

def @func_2780(%var_2771: Tensor[(1, 13, 14), bool]) -> (Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) {
  %438 = @func_1700() /* ty=bool */;
  %439 = cast(%438, dtype="float64") /* ty=float64 */;
  %440 = cast(%var_2771, dtype="float64") /* ty=Tensor[(1, 13, 14), float64] */;
  %441 = floor_mod(%439, %440) /* ty=Tensor[(1, 13, 14), float64] */;
  %442 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  (%441, %442)
}

def @func_603() -> (Tensor[(1, 1, 9), float32],) {
  %445 = fn () -> (Tensor[(1, 1, 9), float32],) {
    %443 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %444 = %443.0;
    (%444,)
  };
  %445() /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @func_2718(%var_2715: Tensor[(13, 5, 3), int64], %var_2716: Tensor[(13, 5, 3), int64], %var_2717: Tensor[(13, 2, 7), float64]) -> (Tensor[(13, 5, 3), int64], Tensor[(9), float64], Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
  @func_2713(%var_2715, %var_2716, %var_2717) /* ty=(Tensor[(13, 5, 3), int64], Tensor[(9), float64], Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */
}

def @func_4933() -> bool {
  @func_4931() /* ty=bool */
}

def @func_1133(%var_1131: Tensor[(1, 45), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) {
  %446 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
  %447 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %448 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %449 = cast(%var_1131, dtype="float32") /* ty=Tensor[(1, 45), float32] */;
  %450 = reshape(%449, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), float32] */;
  %451 = @func_906(%450) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) */;
  %452 = %446.0;
  %453 = %447.0;
  %454 = %448.0;
  %455 = %451.3;
  (%452, %453, %454, %455, %var_1131)
}

def @func_3967() -> (Tensor[(?, ?, 9), float64],) {
  %459 = fn () -> (Tensor[(?, ?, 9), float64],) {
    %456 = @func_2967() /* ty=Tensor[(?, ?, 9), bool] */;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
    %458 = tan(%457) /* ty=Tensor[(?, ?, 9), float64] */;
    (%458,)
  };
  %459() /* ty=(Tensor[(?, ?, 9), float64],) */
}

def @func_1136(%var_1134: Tensor[(1, 45), float32]) -> (Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) {
  @func_1133(%var_1134) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) */
}

def @func_2497() -> (Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  %460 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %461 = cast(meta[relay.Constant][19] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %462 = reshape(%461, newshape=[15, 9, 9]) /* ty=Tensor[(15, 9, 9), float32] */;
  %463 = %460.1;
  %464 = @func_2104(%462) /* ty=Tensor[(15, 9, 9), bool] */;
  (%463, %464, meta[relay.Constant][19] /* ty=Tensor[(1215), float32] */)
}

def @func_2233(%var_2231: Tensor[(11, 3, 9), float64], %var_2232: Tensor[(45), float32]) -> (Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) {
  %481 = fn (%var_2204: Tensor[(11, 3, 9), float64], %var_2210: Tensor[(45), float32]) -> (Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) {
    %465 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
    %466 = cast(%465, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
    %467 = acos(%466) /* ty=Tensor[(11, 3, 9), float64] */;
    %468 = cast(%var_2204, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
    %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%467, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %472 = cast(%var_2210, dtype="float32") /* ty=Tensor[(45), float32] */;
    %473 = reshape(%472, newshape=[1, 45]) /* ty=Tensor[(1, 45), float32] */;
    %474 = @func_1133(%473) /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(1, 45), float32]) */;
    %475 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
    %476 = cast(%465, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
    %477 = power(%470, %471) /* ty=Tensor[(11, 3, 9), float32] */;
    %478 = %474.3;
    %479 = %475.0;
    %480 = atanh(%476) /* ty=Tensor[(11, 3, 9), float64] */;
    (%477, %478, %var_2210, %479, %480)
  };
  %481(%var_2231, %var_2232) /* ty=(Tensor[(11, 3, 9), float32], bool, Tensor[(45), float32], Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64]) */
}

def @func_4128() -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) {
  @func_4126() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) */
}

def @func_3065() -> Tensor[(13, 2, 7), bool] {
  %483 = fn () -> Tensor[(13, 2, 7), bool] {
    %482 = @func_2332() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */;
    %482.2
  };
  %483() /* ty=Tensor[(13, 2, 7), bool] */
}

def @func_1760() -> (Tensor[(13, 2, 7), bool],) {
  %484 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %485 = %484.0;
  %486 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = greater_equal(%488, %489) /* ty=Tensor[(13, 2, 7), bool] */;
  (%490,)
}

def @func_985() -> Tensor[(13, 2, 7), bool] {
  @func_983() /* ty=Tensor[(13, 2, 7), bool] */
}

def @func_1187() -> Tensor[(9), float64] {
  %492 = fn () -> Tensor[(9), float64] {
    %491 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
    %491.2
  };
  %492() /* ty=Tensor[(9), float64] */
}

def @func_1831() -> (Tensor[(9), float64],) {
  @func_1829() /* ty=(Tensor[(9), float64],) */
}

def @func_5538() -> bool {
  %493 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %493.2
}

def @func_2259(%var_2257: Tensor[(1, 7, 15), uint64], %var_2258: Tensor[(2, 7, 15), uint64]) -> (Tensor[(2, 7, 15), uint64],) {
  %497 = fn (%var_2241: Tensor[(1, 7, 15), uint64], %var_2242: Tensor[(2, 7, 15), uint64]) -> (Tensor[(2, 7, 15), uint64],) {
    %494 = cast(%var_2241, dtype="uint64") /* ty=Tensor[(1, 7, 15), uint64] */;
    %495 = cast(%var_2242, dtype="uint64") /* ty=Tensor[(2, 7, 15), uint64] */;
    %496 = right_shift(%494, %495) /* ty=Tensor[(2, 7, 15), uint64] */;
    (%496,)
  };
  %497(%var_2257, %var_2258) /* ty=(Tensor[(2, 7, 15), uint64],) */
}

def @func_976() -> (Tensor[(13, 2, 7), bool],) {
  %505 = fn () -> (Tensor[(13, 2, 7), bool],) {
    %498 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
    %499 = %498.0;
    %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %504 = logical_or(%502, %503) /* ty=Tensor[(13, 2, 7), bool] */;
    (%504,)
  };
  %505() /* ty=(Tensor[(13, 2, 7), bool],) */
}

def @func_4756(%var_4754: uint64, %var_4755: Tensor[(1, 15, 15), uint64]) -> Tensor[(1, 15, 15), uint64] {
  %508 = fn (%var_4748: uint64, %var_4749: Tensor[(1, 15, 15), uint64]) -> Tensor[(1, 15, 15), uint64] {
    %506 = cast(%var_4748, dtype="uint64") /* ty=uint64 */;
    %507 = cast(%var_4749, dtype="uint64") /* ty=Tensor[(1, 15, 15), uint64] */;
    right_shift(%506, %507) /* ty=Tensor[(1, 15, 15), uint64] */
  };
  %508(%var_4754, %var_4755) /* ty=Tensor[(1, 15, 15), uint64] */
}

def @func_5800() -> bool {
  @func_5798() /* ty=bool */
}

def @func_5945(%var_5943: Tensor[(630, 2), float32], %var_5944: Tensor[(630, 2), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(630, 2), int32], Tensor[(630, 2), float64], Tensor[(1, 1, 9), float32]) {
  @func_5941(%var_5943, %var_5944) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(630, 2), int32], Tensor[(630, 2), float64], Tensor[(1, 1, 9), float32]) */
}

def @func_2293() -> (Tensor[(13, 2, 7), float64],) {
  %513 = fn () -> (Tensor[(13, 2, 7), float64],) {
    %509 = @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */;
    %510 = %509.0;
    %511 = cast(%510, dtype="float64") /* ty=Tensor[(13, 2, 7), float64] */;
    %512 = acos(%511) /* ty=Tensor[(13, 2, 7), float64] */;
    (%512,)
  };
  %513() /* ty=(Tensor[(13, 2, 7), float64],) */
}

def @func_803() -> (Tensor[(1, 1, 9), float32],) {
  %516 = fn () -> (Tensor[(1, 1, 9), float32],) {
    %514 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %515 = %514.0;
    (%515,)
  };
  %516() /* ty=(Tensor[(1, 1, 9), float32],) */
}

def @func_4285() -> (Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) {
  @func_4283() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) */
}

def @func_5433(%var_5431: Tensor[(45), float32], %var_5432: Tensor[(720), float64]) -> (Tensor[(9), float64], Tensor[(11, 3, 9), int16], Tensor[(1, 1, 9), float32], Tensor[(45), float32], Tensor[(8, 10, 9), bool], Tensor[(720), float64]) {
  @func_5429(%var_5431, %var_5432) /* ty=(Tensor[(9), float64], Tensor[(11, 3, 9), int16], Tensor[(1, 1, 9), float32], Tensor[(45), float32], Tensor[(8, 10, 9), bool], Tensor[(720), float64]) */
}

def @func_3895() -> Tensor[(?, ?, 9), float64] {
  @func_3893() /* ty=Tensor[(?, ?, 9), float64] */
}

def @func_2817() -> bool {
  @func_663() /* ty=bool */
}

def @func_1169() -> (Tensor[(9), float64],) {
  @func_1167() /* ty=(Tensor[(9), float64],) */
}

def @func_5054() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  @func_5052() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */
}

def @func_1762() -> (Tensor[(13, 2, 7), bool],) {
  @func_1760() /* ty=(Tensor[(13, 2, 7), bool],) */
}

def @func_2426() -> Tensor[(9), float64] {
  %518 = fn () -> Tensor[(9), float64] {
    %517 = @func_1846() /* ty=(Tensor[(9), float64],) */;
    %517.0
  };
  %518() /* ty=Tensor[(9), float64] */
}

def @func_2499() -> (Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  @func_2497() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */
}

def @func_983() -> Tensor[(13, 2, 7), bool] {
  %519 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
  %519.0
}

def @func_2924() -> (Tensor[(2, 13, 11), uint16],) {
  %528 = fn () -> (Tensor[(2, 13, 11), uint16],) {
    %520 = @func_663() /* ty=bool */;
    %521 = cast(%520, dtype="bool") /* ty=bool */;
    %522 = reshape(%521, newshape=[]) /* ty=bool */;
    %523 = @func_523(%522) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) */;
    %524 = %523.2;
    %525 = cast(%524, dtype="uint16") /* ty=Tensor[(2, 13, 11), uint16] */;
    %526 = cast(%520, dtype="uint16") /* ty=uint16 */;
    %527 = add(%525, %526) /* ty=Tensor[(2, 13, 11), uint16] */;
    (%527,)
  };
  %528() /* ty=(Tensor[(2, 13, 11), uint16],) */
}

def @func_4675(%var_4637: Tensor[(300), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(1, 1, 9), float32], Tensor[(300), float64], Tensor[(?, 14, 9), uint64], Tensor[(13, 2, 7), float32]) {
  %529 = @func_4283() /* ty=(Tensor[(?, ?, 9), float64], Tensor[(13, 14, 9), int8]) */;
  %530 = cast(%var_4637, dtype="float64") /* ty=Tensor[(300), float64] */;
  %531 = reshape(%530, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %532 = @func_4397(%531) /* ty=(Tensor[(10, 15, 2), float64], Tensor[(1, 1, 9), float32]) */;
  %533 = @func_3379() /* ty=(Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) */;
  %534 = @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */;
  %535 = %529.1;
  %536 = %532.1;
  %537 = %533.1;
  %538 = %534.2;
  (%535, %536, %var_4637, %537, %538)
}

def @func_5540() -> bool {
  @func_5538() /* ty=bool */
}

def @func_5052() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  %539 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %540 = @func_1186() /* ty=Tensor[(9), float64] */;
  %541 = %539.0;
  (%540, %541)
}

def @func_1167() -> (Tensor[(9), float64],) {
  %542 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %543 = %542.2;
  (%543,)
}

def @func_3205(%var_3203: Tensor[(286, 1), bool]) -> (Tensor[(?, ?, 9), int64], Tensor[(286, 1), uint8], Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float64], Tensor[(286, 1), float64], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) {
  @func_3202(%var_3203) /* ty=(Tensor[(?, ?, 9), int64], Tensor[(286, 1), uint8], Tensor[(?, ?, 9), float64], Tensor[(1, 1, 9), float64], Tensor[(286, 1), float64], Tensor[(15, 9, 9), bool], Tensor[(1215), float32]) */
}

def @func_4678(%var_4676: Tensor[(300), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(1, 1, 9), float32], Tensor[(300), float64], Tensor[(?, 14, 9), uint64], Tensor[(13, 2, 7), float32]) {
  @func_4675(%var_4676) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1, 1, 9), float32], Tensor[(300), float64], Tensor[(?, 14, 9), uint64], Tensor[(13, 2, 7), float32]) */
}

def @func_5287(%var_5286: Tensor[(11, 15, 1), float32]) -> (Tensor[(11, 15, 1), float32],) {
  %546 = fn (%var_5281: Tensor[(11, 15, 1), float32]) -> (Tensor[(11, 15, 1), float32],) {
    %544 = cast(%var_5281, dtype="float32") /* ty=Tensor[(11, 15, 1), float32] */;
    %545 = atan(%544) /* ty=Tensor[(11, 15, 1), float32] */;
    (%545,)
  };
  %546(%var_5286) /* ty=(Tensor[(11, 15, 1), float32],) */
}

def @func_1847() -> (Tensor[(9), float64],) {
  %549 = fn () -> (Tensor[(9), float64],) {
    %547 = @func_1167() /* ty=(Tensor[(9), float64],) */;
    %548 = %547.0;
    (%548,)
  };
  %549() /* ty=(Tensor[(9), float64],) */
}

def @func_525(%var_524: bool) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) {
  %568 = fn (%var_518: bool) -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) {
    %550 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
    %551 = %550.2;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(9), float64] */;
    %553 = reshape(%552, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
    %554 = @func_20(%553) /* ty=(Tensor[(1, 1, 9), float32],) */;
    %555 = cast(%var_518, dtype="bool") /* ty=bool */;
    %556 = cast(meta[relay.Constant][22] /* ty=Tensor[(286), bool] */, dtype="bool") /* ty=Tensor[(286), bool] */;
    %557 = reshape(%555, newshape=[]) /* ty=bool */;
    %558 = reshape(%556, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
    %559 = @func_477(%557, %558) /* ty=(Tensor[(2, 13, 11), bool],) */;
    %560 = cast(%var_518, dtype="bool") /* ty=bool */;
    %561 = %559.0;
    %562 = cast(%561, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
    %563 = reshape(%560, newshape=[]) /* ty=bool */;
    %564 = reshape(%562, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), bool] */;
    %565 = @func_477(%563, %564) /* ty=(Tensor[(2, 13, 11), bool],) */;
    %566 = %554.0;
    %567 = %565.0;
    (%551, %566, %561, %var_518, meta[relay.Constant][22] /* ty=Tensor[(286), bool] */, %567)
  };
  %568(%var_524) /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32], Tensor[(2, 13, 11), bool], bool, Tensor[(286), bool], Tensor[(2, 13, 11), bool]) */
}

def @func_2819() -> bool {
  @func_2817() /* ty=bool */
}

def @func_1417() -> (Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) {
  @func_1415() /* ty=(Tensor[(1, 1, 9), float32], Tensor[(?, ?, 9), int64], Tensor[(13, 2, 7), float32]) */
}

def @func_908(%var_907: Tensor[(1, 5, 9), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) {
  %598 = fn (%var_854: Tensor[(1, 5, 9), float32]) -> (Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) {
    %569 = @func_557() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %570 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %571 = %570.0;
    %572 = cast(%571, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
    %573 = reshape(%572, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), float64] */;
    %574 = @func_20(%573) /* ty=(Tensor[(1, 1, 9), float32],) */;
    %575 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %576 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
    %577 = cast(%571, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
    %578 = acos(%577) /* ty=Tensor[(1, 1, 9), float64] */;
    %579 = @func_663() /* ty=bool */;
    %580 = cast(%571, dtype="int32") /* ty=Tensor[(1, 1, 9), int32] */;
    %581 = cast(%var_854, dtype="int32") /* ty=Tensor[(1, 5, 9), int32] */;
    %582 = bitwise_and(%580, %581) /* ty=Tensor[(1, 5, 9), int32] */;
    %583 = cast(%579, dtype="float64") /* ty=float64 */;
    %584 = cast(%582, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
    %585 = divide(%583, %584) /* ty=Tensor[(1, 5, 9), float64] */;
    %586 = cast(%578, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
    %587 = cast(%585, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
    %588 = logical_or(%586, %587) /* ty=Tensor[(1, 5, 9), bool] */;
    %589 = cast(%582, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
    %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%588, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %593 = %569.0;
    %594 = %574.0;
    %595 = %575.0;
    %596 = %576.2;
    %597 = greater(%591, %592) /* ty=Tensor[(?, 5, 9), bool] */;
    (%593, %594, %595, %596, %597)
  };
  %598(%var_907) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) */
}

def @func_3379() -> (Tensor[(?, ?, 9), bool], Tensor[(?, 14, 9), uint64]) {
  %599 = @func_1785() /* ty=Tensor[(?, ?, 9), float64] */;
  %600 = @func_2817() /* ty=bool */;
  %601 = cast(%599, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
  %602 = cast(%600, dtype="bool") /* ty=bool */;
  %603 = cast(%599, dtype="float32") /* ty=Tensor[(?, ?, 9), float32] */;
  %604 = sigmoid(%603) /* ty=Tensor[(?, ?, 9), float32] */;
  %605 = cast(%604, dtype="uint64") /* ty=Tensor[(?, ?, 9), uint64] */;
  %606 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 14, 9), float32] */, dtype="uint64") /* ty=Tensor[(1, 14, 9), uint64] */;
  %607 = logical_or(%601, %602) /* ty=Tensor[(?, ?, 9), bool] */;
  %608 = logical_xor(%605, %606) /* ty=Tensor[(?, 14, 9), uint64] */;
  (%607, %608)
}

def @func_1482() -> (bool, Tensor[(?, ?, 9), float64]) {
  @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */
}

def @func_4606() -> Tensor[(1, 1, 9), float32] {
  @func_4604() /* ty=Tensor[(1, 1, 9), float32] */
}

def @func_1620(%var_1609: Tensor[(10, 5, 9), float64]) -> (Tensor[(10, 5, 9), float32],) {
  %609 = cast(%var_1609, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %610 = sinh(%609) /* ty=Tensor[(10, 5, 9), float64] */;
  %611 = cast(%var_1609, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %615 = floor_mod(%613, %614) /* ty=Tensor[(10, 5, 9), float64] */;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %617 = sin(%616) /* ty=Tensor[(10, 5, 9), float32] */;
  (%617,)
}

def @func_5429(%var_5414: Tensor[(45), float32], %var_5417: Tensor[(720), float64]) -> (Tensor[(9), float64], Tensor[(11, 3, 9), int16], Tensor[(1, 1, 9), float32], Tensor[(45), float32], Tensor[(8, 10, 9), bool], Tensor[(720), float64]) {
  %618 = @func_2448() /* ty=(Tensor[(9), float64], Tensor[(1, 1, 9), float32]) */;
  %619 = @func_1690() /* ty=Tensor[(11, 3, 9), float64] */;
  %620 = @func_3244() /* ty=Tensor[(1, 1, 9), float32] */;
  %621 = cast(%619, dtype="int16") /* ty=Tensor[(11, 3, 9), int16] */;
  %622 = cast(%620, dtype="int16") /* ty=Tensor[(1, 1, 9), int16] */;
  %623 = cast(%var_5414, dtype="float32") /* ty=Tensor[(45), float32] */;
  %624 = reshape(%623, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), float32] */;
  %625 = @func_906(%624) /* ty=(Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], Tensor[(1, 1, 9), float32], bool, Tensor[(?, 5, 9), bool]) */;
  %626 = cast(%var_5417, dtype="float64") /* ty=Tensor[(720), float64] */;
  %627 = reshape(%626, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), float64] */;
  %628 = @func_3467(%627) /* ty=(Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) */;
  %629 = %618.0;
  %630 = bitwise_or(%621, %622) /* ty=Tensor[(11, 3, 9), int16] */;
  %631 = %625.0;
  %632 = %628.0;
  (%629, %630, %631, %var_5414, %632, %var_5417)
}

def @func_3864() -> (Tensor[(?, ?, 9), float64],) {
  %635 = fn () -> (Tensor[(?, ?, 9), float64],) {
    %633 = @func_3852() /* ty=(Tensor[(?, ?, 9), float64],) */;
    %634 = %633.0;
    (%634,)
  };
  %635() /* ty=(Tensor[(?, ?, 9), float64],) */
}

def @func_4537(%var_4534: Tensor[(6, 1, 9), float64], %var_4535: Tensor[(14, 15, 9), float64], %var_4536: Tensor[(14, 15, 9), int8]) -> (Tensor[(6, ?, 9), float64], Tensor[(14, 15, 9), bool]) {
  %651 = fn (%var_4479: Tensor[(6, 1, 9), float64], %var_4484: Tensor[(14, 15, 9), float64], %var_4515: Tensor[(14, 15, 9), int8]) -> (Tensor[(6, ?, 9), float64], Tensor[(14, 15, 9), bool]) {
    %636 = @func_3893() /* ty=Tensor[(?, ?, 9), float64] */;
    %637 = cast(%636, dtype="float64") /* ty=Tensor[(?, ?, 9), float64] */;
    %638 = cast(%var_4479, dtype="float64") /* ty=Tensor[(6, 1, 9), float64] */;
    %639 = cast(%636, dtype="int8") /* ty=Tensor[(?, ?, 9), int8] */;
    %640 = cast(%var_4484, dtype="int8") /* ty=Tensor[(14, 15, 9), int8] */;
    %641 = subtract(%639, %640) /* ty=Tensor[(14, 15, 9), int8] */;
    %642 = cast(%var_4515, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %646 = equal(%644, %645) /* ty=Tensor[(14, 15, 9), bool] */;
    %647 = cast(%646, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
    %648 = cast(%636, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
    %649 = power(%637, %638) /* ty=Tensor[(6, ?, 9), float64] */;
    %650 = logical_or(%647, %648) /* ty=Tensor[(14, 15, 9), bool] */;
    (%649, %650)
  };
  %651(%var_4534, %var_4535, %var_4536) /* ty=(Tensor[(6, ?, 9), float64], Tensor[(14, 15, 9), bool]) */
}

def @func_2783(%var_2781: Tensor[(1, 13, 14), bool]) -> (Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) {
  @func_2780(%var_2781) /* ty=(Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) */
}

def @func_4629() -> (Tensor[(13, 2, 7), bool],) {
  %652 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
  (%652,)
}

def @func_4849() -> (Tensor[(9), float64], Tensor[(924), uint32], Tensor[(11, 6, 14), int16]) {
  %653 = @func_1167() /* ty=(Tensor[(9), float64],) */;
  %654 = cast(meta[relay.Constant][24] /* ty=Tensor[(924), uint32] */, dtype="uint32") /* ty=Tensor[(924), uint32] */;
  %655 = cast(meta[relay.Constant][24] /* ty=Tensor[(924), uint32] */, dtype="uint32") /* ty=Tensor[(924), uint32] */;
  %656 = reshape(%654, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint32] */;
  %657 = reshape(%655, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint32] */;
  %658 = @func_4794(%656, %657) /* ty=Tensor[(11, 6, 14), uint32] */;
  %659 = @func_2817() /* ty=bool */;
  %660 = cast(%658, dtype="int16") /* ty=Tensor[(11, 6, 14), int16] */;
  %661 = cast(%659, dtype="int16") /* ty=int16 */;
  %662 = %653.0;
  %663 = multiply(%660, %661) /* ty=Tensor[(11, 6, 14), int16] */;
  (%662, meta[relay.Constant][24] /* ty=Tensor[(924), uint32] */, %663)
}

def @func_4000(%var_3999: Tensor[(12, 13, 1), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64], Tensor[(12, 13, ?), float32], Tensor[(?, ?, 9), float64]) {
  %682 = fn (%var_3972: Tensor[(12, 13, 1), float32]) -> (Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64], Tensor[(12, 13, ?), float32], Tensor[(?, ?, 9), float64]) {
    %664 = @func_3064() /* ty=Tensor[(13, 2, 7), bool] */;
    %665 = cast(%664, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %666 = reshape(%665, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), bool] */;
    %667 = @func_2780(%666) /* ty=(Tensor[(1, 13, 14), float64], Tensor[(11, 3, 9), float64]) */;
    %668 = cast(%var_3972, dtype="float32") /* ty=Tensor[(12, 13, 1), float32] */;
    %669 = erf(%668) /* ty=Tensor[(12, 13, 1), float32] */;
    %670 = cast(%669, dtype="float32") /* ty=Tensor[(12, 13, 1), float32] */;
    %671 = atanh(%670) /* ty=Tensor[(12, 13, 1), float32] */;
    %672 = cast(%669, dtype="int8") /* ty=Tensor[(12, 13, 1), int8] */;
    %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
    %674 = cast(%671, dtype="int8") /* ty=Tensor[(12, 13, 1), int8] */;
    %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %676 = bitwise_xor(%674, %675) /* ty=Tensor[(12, 13, ?), int8] */;
    %677 = cast(%676, dtype="float32") /* ty=Tensor[(12, 13, ?), float32] */;
    %678 = @func_3966() /* ty=(Tensor[(?, ?, 9), float64],) */;
    %679 = %667.1;
    %680 = sin(%677) /* ty=Tensor[(12, 13, ?), float32] */;
    %681 = %678.0;
    (%664, %679, %680, %681)
  };
  %682(%var_3999) /* ty=(Tensor[(13, 2, 7), bool], Tensor[(11, 3, 9), float64], Tensor[(12, 13, ?), float32], Tensor[(?, ?, 9), float64]) */
}

def @func_3467(%var_3405: Tensor[(8, 10, 9), float64]) -> (Tensor[(8, 10, 9), bool], Tensor[(9), float64], Tensor[(2, 13, 11), float64]) {
  %683 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
  %684 = %683.1;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(?, ?, 9), bool] */;
  %686 = cast(%var_3405, dtype="bool") /* ty=Tensor[(8, 10, 9), bool] */;
  %687 = @func_1829() /* ty=(Tensor[(9), float64],) */;
  %688 = @func_574() /* ty=(Tensor[(5, 3, 14), float64], Tensor[(2, 13, 11), bool], bool) */;
  %689 = %688.1;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %691 = not_equal(%685, %686) /* ty=Tensor[(8, 10, 9), bool] */;
  %692 = %687.0;
  %693 = acosh(%690) /* ty=Tensor[(2, 13, 11), float64] */;
  (%691, %692, %693)
}

def @func_5591() -> (Tensor[(9), float64],) {
  %696 = fn () -> (Tensor[(9), float64],) {
    %694 = @func_1846() /* ty=(Tensor[(9), float64],) */;
    %695 = %694.0;
    (%695,)
  };
  %696() /* ty=(Tensor[(9), float64],) */
}

def @func_2448() -> (Tensor[(9), float64], Tensor[(1, 1, 9), float32]) {
  %697 = @func_1004() /* ty=(Tensor[(2, 13, 11), bool], Tensor[(1, 1, 9), float32], Tensor[(3, 3), float64]) */;
  %698 = @func_2425() /* ty=Tensor[(9), float64] */;
  %699 = %697.1;
  (%698, %699)
}

def @func_4092() -> (Tensor[(13, 2, 7), bool],) {
  %701 = fn () -> (Tensor[(13, 2, 7), bool],) {
    %700 = @func_983() /* ty=Tensor[(13, 2, 7), bool] */;
    (%700,)
  };
  %701() /* ty=(Tensor[(13, 2, 7), bool],) */
}

def @func_4126() -> (Tensor[(1, 1, 9), float32], Tensor[(13, 2, 7), float32]) {
  %702 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
  %703 = @func_411() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32], Tensor[(9), float64]) */;
  %704 = %702.0;
  %705 = %703.0;
  (%704, %705)
}

def @func_2968() -> Tensor[(?, ?, 9), bool] {
  %714 = fn () -> Tensor[(?, ?, 9), bool] {
    %706 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
    %707 = %706.1;
    %708 = @func_602() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %709 = %708.0;
    %710 = cast(%709, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
    %711 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%707, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%712, %713) /* ty=Tensor[(?, ?, 9), bool] */
  };
  %714() /* ty=Tensor[(?, ?, 9), bool] */
}

def @func_2106(%var_2105: Tensor[(15, 9, 9), float32]) -> Tensor[(15, 9, 9), bool] {
  %719 = fn (%var_2099: Tensor[(15, 9, 9), float32]) -> Tensor[(15, 9, 9), bool] {
    %715 = @func_745() /* ty=(Tensor[(13, 2, 7), float32], Tensor[(1, 1, 9), float32]) */;
    %716 = %715.1;
    %717 = cast(%716, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
    %718 = cast(%var_2099, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
    greater_equal(%717, %718) /* ty=Tensor[(15, 9, 9), bool] */
  };
  %719(%var_2105) /* ty=Tensor[(15, 9, 9), bool] */
}

def @func_2333() -> (Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
  %728 = fn () -> (Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) {
    %720 = @func_802() /* ty=(Tensor[(1, 1, 9), float32],) */;
    %721 = @func_1480() /* ty=(bool, Tensor[(?, ?, 9), float64]) */;
    %722 = @func_975() /* ty=(Tensor[(13, 2, 7), bool],) */;
    %723 = @func_2292() /* ty=(Tensor[(13, 2, 7), float64],) */;
    %724 = %720.0;
    %725 = %721.0;
    %726 = %722.0;
    %727 = %723.0;
    (%724, %725, %726, %727)
  };
  %728() /* ty=(Tensor[(1, 1, 9), float32], bool, Tensor[(13, 2, 7), bool], Tensor[(13, 2, 7), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen199/build/output.py:2065: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen199/build/output.py", line 2070, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_add_kernel0(int64_t* __restrict__ T_add, int64_t* __restrict__ placeholder, int64_t* __restrict__ placeholder1) {
  T_add[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] + placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

