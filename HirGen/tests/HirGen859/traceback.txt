==========mod==========
#[version = "0.0.5"]
def @func_9572() -> (Tensor[(2, 10, 11), uint16],) {
  %0 = @func_7771() /* ty=(Tensor[(2, 1, 11), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 10, 11), float64] */, dtype="uint16") /* ty=Tensor[(2, 10, 11), uint16] */;
  %4 = bitwise_xor(%2, %3) /* ty=Tensor[(2, 10, 11), uint16] */;
  (%4,)
}

def @func_1931() -> (Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) {
  %5 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %6 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%5, %6)
}

def @func_6775(%var_6771: Tensor[(1, 5, 13), float64]) -> (Tensor[(1, 5, 13), float64],) {
  %7 = cast(%var_6771, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %8 = asin(%7) /* ty=Tensor[(1, 5, 13), float64] */;
  (%8,)
}

def @func_3878() -> (Tensor[(1, 8, 1), float32],) {
  %9 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %10 = %9.0;
  (%10,)
}

def @func_9072() -> Tensor[(1, 8, 1), float32] {
  @func_1011() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_10522(%var_10457: Tensor[(420), float32]) -> (Tensor[(10, 7, 6), float32], Tensor[(10, 2, 6), bool], Tensor[(120), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, 420), float32]) {
  %11 = cast(%var_10457, dtype="float32") /* ty=Tensor[(420), float32] */;
  %12 = reshape(%11, newshape=[10, 7, 6]) /* ty=Tensor[(10, 7, 6), float32] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %14 = reshape(%13, newshape=[10, 2, 6]) /* ty=Tensor[(10, 2, 6), int16] */;
  %15 = @func_4349(%14) /* ty=(Tensor[(10, 2, 6), bool],) */;
  %16 = @func_6671() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
  %17 = %16.1;
  %18 = cast(%17, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
  %19 = cast(%var_10457, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %20 = right_shift(%18, %19) /* ty=Tensor[(1, 8, 420), uint16] */;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(1, 8, 420), float32] */;
  %22 = acos(%21) /* ty=Tensor[(1, 8, 420), float32] */;
  %23 = cast(%var_10457, dtype="bool") /* ty=Tensor[(420), bool] */;
  %24 = cast(%17, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %25 = less_equal(%23, %24) /* ty=Tensor[(1, 8, 420), bool] */;
  %26 = cast(%25, dtype="int16") /* ty=Tensor[(1, 8, 420), int16] */;
  %27 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%22, dtype="int16") /* ty=Tensor[(1, 8, 420), int16] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %30 = bitwise_xor(%28, %29) /* ty=Tensor[(?, 8, 420), int16] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(?, 8, 420), float32] */;
  %32 = @func_5198(%12) /* ty=Tensor[(10, 7, 6), float32] */;
  %33 = %15.0;
  %34 = @func_9350() /* ty=Tensor[(1, 8, 1), float32] */;
  %35 = sin(%31) /* ty=Tensor[(?, 8, 420), float32] */;
  (%32, %33, meta[relay.Constant][1] /* ty=Tensor[(120), int16] */, %34, %35)
}

def @func_9872() -> (Tensor[(1, 8, 1), float32],) {
  %36 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %37 = %36.0;
  (%37,)
}

def @func_2920(%var_2913: Tensor[(2, 8, 16), float32]) -> (Tensor[(2, 8, 16), bool],) {
  %38 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %39 = %38.0;
  %40 = cast(%39, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %41 = cast(%var_2913, dtype="bool") /* ty=Tensor[(2, 8, 16), bool] */;
  %42 = equal(%40, %41) /* ty=Tensor[(2, 8, 16), bool] */;
  (%42,)
}

def @main(%var_10814: Tensor[(1, 8, 6), float32]) -> (Tensor[(?, 8, ?), uint16], Tensor[(2, 1, 11), float64], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 6), float64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(96, 2), int32]) {
  %43 = @func_7771() /* ty=(Tensor[(2, 1, 11), float64],) */;
  %44 = @func_4841() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %45 = %44.0;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(96, 2), float32] */, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
  %47 = reshape(%46, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float32] */;
  %48 = @func_2063(%47) /* ty=(Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) */;
  %49 = %48.1;
  %50 = cast(%49, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %51 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%45, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %55 = %54.0;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %57 = cast(%var_10814, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %58 = @func_8261() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %59 = @func_5760() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %60 = @func_7908() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %61 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %62 = @func_4792() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %63 = @func_7599() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(96, 2), float32] */, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %65 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(96, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(96, 2), float32] */, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %68 = maximum(%66, %67) /* ty=Tensor[(96, 2), uint16] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
  %70 = rsqrt(%69) /* ty=Tensor[(96, 2), float32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(96, 2), float32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
  %73 = cast(%70, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %75 = bitwise_or(%73, %74) /* ty=Tensor[(96, 2), uint32] */;
  %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(96, 2), float32] */, dtype="int32") /* ty=Tensor[(96, 2), int32] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(2), int32] */;
  %78 = cast(%75, dtype="int32") /* ty=Tensor[(96, 2), int32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %80 = @func_8737() /* ty=Tensor[(?, 8, ?), uint16] */;
  %81 = %43.0;
  %82 = equal(%52, %53) /* ty=Tensor[(?, 8, ?), bool] */;
  %83 = mod(%56, %57) /* ty=Tensor[(1, 8, 6), float64] */;
  %84 = %58.1;
  %85 = @func_10138() /* ty=Tensor[(1, 8, 1), float32] */;
  %86 = %59.0;
  %87 = %60.0;
  %88 = %61.0;
  %89 = %62.1;
  %90 = %63.0;
  %91 = bitwise_xor(%78, %79) /* ty=Tensor[(96, 2), int32] */;
  (%80, %81, %82, %83, %84, %85, %86, %87, %88, %89, %90, %91)
}

def @func_6203(%var_6181: float32, %var_6182: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(1, 8, 1), float32]) {
  %92 = cast(%var_6181, dtype="float32") /* ty=float32 */;
  %93 = cast(%var_6182, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %94 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %97 = cast(%var_6181, dtype="float32") /* ty=float32 */;
  %98 = floor_mod(%92, %93) /* ty=Tensor[(13, 15, 12), float32] */;
  %99 = floor_mod(%96, %97) /* ty=Tensor[(1, 8, 1), float32] */;
  (%98, %99)
}

def @func_2788() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %100 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %101 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  (%100, %101)
}

def @func_9365() -> (Tensor[(256), float32],) {
  %102 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %103 = %102.2;
  (%103,)
}

def @func_2798() -> Tensor[(1, 8, 1), float32] {
  %104 = @func_2410() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %104.1
}

def @func_8347(%var_8281: Tensor[(1, 10, 4), float32], %var_8335: Tensor[(8064, 1), int8]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 10, 4), float32], Tensor[(?, 10, 4), int16], Tensor[(1, 8, 1), float32], float64, Tensor[(8064, 1), int8], Tensor[(2, 8, 16), bool]) {
  %105 = cast(%var_8281, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %106 = @func_4557() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %107 = cast(%var_8281, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %108 = cosh(%107) /* ty=Tensor[(1, 10, 4), float32] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %110 = rsqrt(%109) /* ty=Tensor[(1, 10, 4), float32] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %112 = cast(%110, dtype="int16") /* ty=Tensor[(1, 10, 4), int16] */;
  %113 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%108, dtype="int16") /* ty=Tensor[(1, 10, 4), int16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %116 = cast(6.92488f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %117 = cast(%var_8335, dtype="int8") /* ty=Tensor[(8064, 1), int8] */;
  %118 = reshape(%116, newshape=[]) /* ty=float64 */;
  %119 = reshape(%117, newshape=[8064]) /* ty=Tensor[(8064), int8] */;
  %120 = @func_4277(%118, %119) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) */;
  %121 = @func_6472() /* ty=(Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %122 = log10(%105) /* ty=Tensor[(1, 10, 4), float32] */;
  %123 = %106.1;
  %124 = acos(%111) /* ty=Tensor[(1, 10, 4), float32] */;
  %125 = subtract(%114, %115) /* ty=Tensor[(?, 10, 4), int16] */;
  %126 = %120.2;
  %127 = %121.3;
  (%122, %123, %124, %125, %126, 6.92488f64 /* ty=float64 */, %var_8335, %127)
}

def @func_7726() -> (Tensor[(1, 8, 1), float32],) {
  %128 = @func_4792() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %129 = %128.1;
  (%129,)
}

def @func_8737() -> Tensor[(?, 8, ?), uint16] {
  @func_7548() /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_8936(%var_8887: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) {
  %130 = @func_7881() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %133 = cast(%var_8887, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %134 = logical_or(%132, %133) /* ty=Tensor[(15, 8, 9), bool] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %136 = cast(%var_8887, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %137 = cast(%131, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %138 = sigmoid(%135) /* ty=Tensor[(15, 8, 9), float32] */;
  %139 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  %140 = divide(%136, %137) /* ty=Tensor[(15, 8, 9), float32] */;
  %141 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  (%138, %139, %140, %141)
}

def @func_1270(%var_1257: float64, %var_1258: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) {
  %142 = cast(%var_1257, dtype="float64") /* ty=float64 */;
  %143 = cast(%var_1258, dtype="float64") /* ty=Tensor[(72), float64] */;
  %144 = reshape(%142, newshape=[]) /* ty=float64 */;
  %145 = reshape(%143, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float64] */;
  %146 = @func_175(%144, %145) /* ty=(Tensor[(1, 8, 9), bool],) */;
  %147 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  %148 = %146.0;
  %149 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  (%147, %148, %var_1257, %var_1258, %149)
}

def @func_6108() -> (Tensor[(2, 8, 16), bool], Tensor[(440), float32]) {
  %150 = @func_5442() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %151 = @func_5960() /* ty=(Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
  %152 = %150.0;
  %153 = %151.3;
  (%152, %153)
}

def @func_7881() -> (Tensor[(1, 8, 1), float32],) {
  %154 = @func_5148() /* ty=Tensor[(1, 8, 1), float32] */;
  (%154,)
}

def @func_1539() -> Tensor[(1, 8, 1), float32] {
  %155 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %155.0
}

def @func_6690() -> (Tensor[(1, 8, 1), float32],) {
  %156 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
  (%156,)
}

def @func_3184() -> Tensor[(1, 8, 1), float32] {
  %157 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %157.0
}

def @func_3390(%var_3363: Tensor[(10, 8, 15), float32]) -> (Tensor[(10, 8, 15), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  %158 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %161 = cast(%var_3363, dtype="int16") /* ty=Tensor[(10, 8, 15), int16] */;
  %162 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %163 = add(%160, %161) /* ty=Tensor[(10, 8, 15), int16] */;
  %164 = %162.0;
  %165 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%163, %164, %165)
}

def @func_6056() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %166 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %167 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %168 = %166.0;
  %169 = %167.0;
  (%168, %169)
}

def @func_5721() -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %170 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %171 = cast(%170, dtype="bool") /* ty=Tensor[(?, 8, ?), bool] */;
  %172 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 8, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %173 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %174 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %175 = equal(%171, %172) /* ty=Tensor[(11, 8, 10), bool] */;
  %176 = %173.0;
  %177 = %174.0;
  (%175, %176, %177)
}

def @func_6379() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %178 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
  %179 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  (%178, %179)
}

def @func_6943() -> Tensor[(1, 8, 1), float32] {
  @func_4327() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2284() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %180 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %181 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%180, %181)
}

def @func_2101() -> (Tensor[(1, 8, 1), float32],) {
  %182 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %183 = %182.0;
  (%183,)
}

def @func_7965() -> (Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
  %184 = @func_7797() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %185 = @func_7500() /* ty=(Tensor[(12, 8, 2), uint8],) */;
  %186 = %184.0;
  %187 = %185.0;
  (%186, %187)
}

def @func_2369() -> Tensor[(1, 8, 10), float32] {
  %188 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %191 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 10), float32] */;
  power(%190, %191) /* ty=Tensor[(1, 8, 10), float32] */
}

def @func_2410() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %192 = @func_1733() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %193 = %192.0;
  %194 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  (%193, %194)
}

def @func_10559(%var_10551: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, ?), float32],) {
  %195 = @func_7548() /* ty=Tensor[(?, 8, ?), uint16] */;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(?, 8, ?), float32] */;
  %197 = cast(%var_10551, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %198 = subtract(%196, %197) /* ty=Tensor[(9, 8, ?), float32] */;
  (%198,)
}

def @func_4014() -> Tensor[(?, 8, ?), uint16] {
  %199 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %199.0
}

def @func_9518() -> (Tensor[(12, 8, 2), uint8],) {
  %200 = @func_9405() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) */;
  %201 = %200.0;
  (%201,)
}

def @func_2232() -> (Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %202 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  %203 = @func_2160() /* ty=(Tensor[(?, 8, ?), float64],) */;
  %204 = %203.0;
  %205 = cast(%204, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %206 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%202, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %209 = @func_1592() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %210 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %211 = maximum(%207, %208) /* ty=Tensor[(?, 8, ?), int16] */;
  %212 = %209.0;
  %213 = %210.0;
  (%211, %212, %213)
}

def @func_3292() -> (Tensor[(1, 8, 1), float32],) {
  %214 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %215 = %214.1;
  (%215,)
}

def @func_7398(%var_7378: Tensor[(65), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 5, 13), float64], Tensor[(65), float64]) {
  %216 = @func_5522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %217 = cast(%var_7378, dtype="float64") /* ty=Tensor[(65), float64] */;
  %218 = reshape(%217, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), float64] */;
  %219 = @func_6775(%218) /* ty=(Tensor[(1, 5, 13), float64],) */;
  %220 = %216.1;
  %221 = %219.0;
  (%220, %221, %var_7378)
}

def @func_10012(%var_9948: Tensor[(10, 4, 9), uint16], %var_9952: Tensor[(10, 4, 9), uint16]) -> (Tensor[(10, 4, 9), uint16], Tensor[(10, 4, 9), int8], Tensor[(?, 8, ?), uint16], Tensor[(?, 8, 256), uint16], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32]) {
  %222 = cast(%var_9948, dtype="uint16") /* ty=Tensor[(10, 4, 9), uint16] */;
  %223 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="uint16") /* ty=Tensor[(10, 4, 9), uint16] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %226 = cast(%var_9952, dtype="int8") /* ty=Tensor[(10, 4, 9), int8] */;
  %227 = shape_of(%var_9948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_9948, dtype="int8") /* ty=Tensor[(10, 4, 9), int8] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %230 = @func_5034() /* ty=(Tensor[(?, 8, 256), uint16],) */;
  %231 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %232 = @func_9105() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %233 = right_shift(%224, %225) /* ty=Tensor[(10, 4, 9), uint16] */;
  %234 = multiply(%228, %229) /* ty=Tensor[(10, 4, 9), int8] */;
  %235 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %236 = %230.0;
  %237 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  %238 = %231.0;
  %239 = %232.1;
  (%233, %234, %235, %236, %237, %238, %239)
}

def @func_3808() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  %240 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %241 = %240.1;
  %242 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%241, %242)
}

def @func_8106(%var_8017: float64, %var_8044: Tensor[(154, 4), float32]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32], Tensor[(154, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
  %243 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %244 = @func_5960() /* ty=(Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
  %245 = %244.1;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %247 = cast(%var_8017, dtype="float64") /* ty=float64 */;
  %248 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %249 = reshape(%247, newshape=[]) /* ty=float64 */;
  %250 = reshape(%248, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %251 = @func_1270(%249, %250) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) */;
  %252 = cast(%var_8044, dtype="float32") /* ty=Tensor[(154, 4), float32] */;
  %253 = reshape(%252, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %254 = @func_4487(%253) /* ty=(Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) */;
  %255 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %256 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
  %257 = %243.0;
  %258 = cos(%246) /* ty=Tensor[(1, 8, 1), float32] */;
  %259 = %251.3;
  %260 = %254.1;
  %261 = %255.0;
  %262 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %263 = %256.1;
  (%257, %258, %259, %var_8017, meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, %260, %var_8044, %261, %262, %263)
}

def @func_4557() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %264 = @func_4390() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %265 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %266 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %267 = %264.1;
  %268 = %265.1;
  %269 = %266.0;
  (%267, %268, %269)
}

def @func_6502() -> (Tensor[(1, 8, 10), float32],) {
  %270 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %271 = %270.1;
  (%271,)
}

def @func_3576() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %272 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %273 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %274 = %272.0;
  %275 = %273.1;
  (%274, %275)
}

def @func_10751() -> (Tensor[(1, 8, 1), float32],) {
  %276 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %277 = %276.0;
  (%277,)
}

def @func_7859() -> Tensor[(1, 8, 1), float32] {
  @func_7433() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_10660() -> (Tensor[(1, 8, 1), float32],) {
  %278 = @func_6349() /* ty=Tensor[(1, 8, 1), float32] */;
  (%278,)
}

def @func_7412() -> Tensor[(1, 8, 1), float32] {
  %279 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %279.1
}

def @func_10297(%var_10287: int64, %var_10288: Tensor[(13, 1, 6), int64]) -> (Tensor[(13, 1, 6), int64], Tensor[(13, 1, 6), int8]) {
  %280 = cast(%var_10287, dtype="int64") /* ty=int64 */;
  %281 = cast(%var_10288, dtype="int64") /* ty=Tensor[(13, 1, 6), int64] */;
  %282 = cast(%var_10287, dtype="int8") /* ty=int8 */;
  %283 = cast(%var_10288, dtype="int8") /* ty=Tensor[(13, 1, 6), int8] */;
  %284 = maximum(%280, %281) /* ty=Tensor[(13, 1, 6), int64] */;
  %285 = bitwise_and(%282, %283) /* ty=Tensor[(13, 1, 6), int8] */;
  (%284, %285)
}

def @func_9405() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) {
  %286 = @func_8667() /* ty=(Tensor[(12, 8, 2), uint8],) */;
  %287 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %288 = %286.0;
  %289 = %287.0;
  (%288, %289)
}

def @func_7848() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %290 = @func_6379() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %291 = @func_5760() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %292 = %290.0;
  %293 = %291.1;
  (%292, %293)
}

def @func_2611() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float64]) {
  %294 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %295 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %298 = %294.0;
  %299 = sigmoid(%297) /* ty=Tensor[(1, 8, 1), float64] */;
  (%298, %299)
}

def @func_3520(%var_3515: Tensor[(5, 13, 14), uint16], %var_3516: Tensor[(5, 13, 14), uint16]) -> (Tensor[(5, 13, 14), uint16],) {
  %300 = cast(%var_3516, dtype="uint16") /* ty=Tensor[(5, 13, 14), uint16] */;
  %301 = shape_of(%var_3515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_3515, dtype="uint16") /* ty=Tensor[(5, 13, 14), uint16] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %304 = add(%302, %303) /* ty=Tensor[(5, 13, 14), uint16] */;
  (%304,)
}

def @func_7500() -> (Tensor[(12, 8, 2), uint8],) {
  %305 = @func_6758() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %306 = %305.2;
  %307 = cast(%306, dtype="uint8") /* ty=Tensor[(1, 8, 1), uint8] */;
  %308 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 8, 2), float32] */, dtype="uint8") /* ty=Tensor[(12, 8, 2), uint8] */;
  %309 = logical_xor(%307, %308) /* ty=Tensor[(12, 8, 2), uint8] */;
  (%309,)
}

def @func_2012() -> (Tensor[(1, 8, 1), float32],) {
  %310 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %311 = %310.0;
  (%311,)
}

def @func_833() -> Tensor[(1, 8, 1), float32] {
  %312 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %313 = tan(%312) /* ty=Tensor[(1, 8, 1), float64] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  atan(%314) /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7363() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %315 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %316 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %317 = %315.0;
  %318 = %316.1;
  (%317, %318)
}

def @func_4349(%var_4344: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), bool],) {
  %319 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 2, 6), int16] */, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %320 = shape_of(%var_4344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_4344, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = not_equal(%321, %322) /* ty=Tensor[(10, 2, 6), bool] */;
  (%323,)
}

def @func_6230() -> Tensor[(1, 8, 1), float32] {
  %324 = @func_3144() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %324.0
}

def @func_8420(%var_8392: Tensor[(5, 8, 4), float32]) -> (Tensor[(5, 8, 4), int16], Tensor[(?, 8, ?), uint16]) {
  %325 = @func_7229() /* ty=Tensor[(1, 8, 1), float32] */;
  %326 = cast(%325, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %327 = cast(%var_8392, dtype="int16") /* ty=Tensor[(5, 8, 4), int16] */;
  %328 = minimum(%326, %327) /* ty=Tensor[(5, 8, 4), int16] */;
  %329 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%328, %329)
}

def @func_6215() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %330 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %331 = @func_5312() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) */;
  %332 = %330.0;
  %333 = %331.4;
  (%332, %333)
}

def @func_8964() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %334 = @func_6039() /* ty=Tensor[(1, 8, 1), float32] */;
  %335 = @func_5815() /* ty=Tensor[(1, 8, 1), float32] */;
  (%334, %335)
}

def @func_1217(%var_1179: Tensor[(5, 8, 11), float32]) -> (Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) {
  %336 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %337 = cast(%336, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %338 = cast(%var_1179, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
  %339 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %341 = logical_and(%337, %338) /* ty=Tensor[(5, 8, 11), bool] */;
  %342 = atanh(%340) /* ty=Tensor[(1, 8, 1), float32] */;
  (%341, %342)
}

def @func_7758() -> (Tensor[(1, 8, 1), float32],) {
  %343 = @func_7412() /* ty=Tensor[(1, 8, 1), float32] */;
  (%343,)
}

def @func_9751(%var_9722: Tensor[(11, 8, 8), float32], %var_9723: Tensor[(11, 8, 8), float32]) -> (Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64]) {
  %344 = cast(%var_9723, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %345 = shape_of(%var_9722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_9722, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = @func_7771() /* ty=(Tensor[(2, 1, 11), float64],) */;
  %349 = cast(%var_9723, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %350 = divide(%346, %347) /* ty=Tensor[(11, 8, 8), float32] */;
  %351 = %348.0;
  %352 = rsqrt(%349) /* ty=Tensor[(11, 8, 8), float32] */;
  %353 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%350, %351, %352, %353)
}

def @func_6472() -> (Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
  %354 = @func_2522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) */;
  %355 = @func_6260() /* ty=(Tensor[(5, 8, 1), int32],) */;
  %356 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %357 = @func_5442() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %358 = %354.1;
  %359 = %355.0;
  %360 = %356.2;
  %361 = %357.0;
  %362 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  (%358, %359, %360, %361, %362)
}

def @func_3686() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  %363 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %364 = cast(meta[relay.Constant][12] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %365 = reshape(%364, newshape=[2, 8, 16]) /* ty=Tensor[(2, 8, 16), float32] */;
  %366 = @func_2920(%365) /* ty=(Tensor[(2, 8, 16), bool],) */;
  %367 = %363.0;
  %368 = %366.0;
  (%367, %368, meta[relay.Constant][12] /* ty=Tensor[(256), float32] */)
}

def @func_8261() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %369 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %370 = %369.1;
  %371 = @func_7859() /* ty=Tensor[(1, 8, 1), float32] */;
  (%370, %371)
}

def @func_2063(%var_2046: Tensor[(8, 8, 3), float32]) -> (Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) {
  %372 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %373 = cast(%372, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %374 = cast(%var_2046, dtype="bool") /* ty=Tensor[(8, 8, 3), bool] */;
  %375 = equal(%373, %374) /* ty=Tensor[(8, 8, 3), bool] */;
  %376 = cast(%372, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %377 = cast(%375, dtype="bool") /* ty=Tensor[(8, 8, 3), bool] */;
  %378 = greater_equal(%376, %377) /* ty=Tensor[(8, 8, 3), bool] */;
  %379 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  (%378, %379)
}

def @func_7797() -> (Tensor[(1, 8, 1), float32],) {
  %380 = @func_2798() /* ty=Tensor[(1, 8, 1), float32] */;
  (%380,)
}

def @func_9105() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %381 = @func_7881() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %382 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
  %383 = %381.0;
  %384 = %382.0;
  (%383, %384)
}

def @func_10229() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %385 = @func_7726() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %386 = %385.0;
  %387 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%386, %387)
}

def @func_2114() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  %388 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  %389 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%388, %389)
}

def @func_3743() -> (Tensor[(1, 8, 1), float32],) {
  %390 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  (%390,)
}

def @func_6671() -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
  %391 = @func_6472() /* ty=(Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %392 = cast(meta[relay.Constant][13] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %393 = reshape(%392, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
  %394 = @func_1217(%393) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
  %395 = %391.3;
  %396 = %394.1;
  (%395, %396, meta[relay.Constant][13] /* ty=Tensor[(440), float32] */)
}

def @func_9050() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) {
  %397 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
  %398 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %399 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  %400 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %403 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%399, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = %397.1;
  %407 = %398.1;
  %408 = greater(%404, %405) /* ty=Tensor[(?, 8, ?), bool] */;
  (%406, %407, %408)
}

def @func_4607() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %409 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %410 = @func_4045() /* ty=Tensor[(1, 8, 1), float32] */;
  %411 = %409.1;
  (%410, %411)
}

def @func_4390() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %412 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %413 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_3144() -> (Tensor[(1, 8, 1), float32],) {
  %415 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %416 = %415.0;
  (%416,)
}

def @func_10138() -> Tensor[(1, 8, 1), float32] {
  %417 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %417.0
}

def @func_4487(%var_4454: Tensor[(11, 8, 7), float32]) -> (Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) {
  %418 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %419 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %420 = %419.1;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %422 = cast(%var_4454, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %423 = subtract(%421, %422) /* ty=Tensor[(11, 8, 7), float32] */;
  %424 = @func_4124() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %425 = %424.5;
  %426 = cast(%423, dtype="int8") /* ty=Tensor[(11, 8, 7), int8] */;
  %427 = cast(%425, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
  %428 = %418.1;
  %429 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %430 = minimum(%426, %427) /* ty=Tensor[(11, 8, 7), int8] */;
  (%428, %429, %430)
}

def @func_1516() -> (Tensor[(1, 8, 1), float32],) {
  %431 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %433 = acos(%432) /* ty=Tensor[(1, 8, 1), float32] */;
  (%433,)
}

def @func_7908() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %434 = @func_4841() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %435 = %434.0;
  %436 = @func_7859() /* ty=Tensor[(1, 8, 1), float32] */;
  (%435, %436)
}

def @func_8217() -> (Tensor[(256), float32], Tensor[(1, 8, 1), float32]) {
  %437 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %438 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %439 = %437.2;
  %440 = %438.0;
  (%439, %440)
}

def @func_7548() -> Tensor[(?, 8, ?), uint16] {
  %441 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %441.0
}

def @func_9449(%var_9423: Tensor[(15, 8, 256), float64], %var_9435: Tensor[(15, 8, 256), float32]) -> (Tensor[(12, 8, 2), uint8], Tensor[(15, 8, 256), uint32], Tensor[(?, 8, ?), uint16]) {
  %442 = @func_9050() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) */;
  %443 = @func_5034() /* ty=(Tensor[(?, 8, 256), uint16],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(?, 8, 256), float64] */;
  %446 = cos(%445) /* ty=Tensor[(?, 8, 256), float64] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(?, 8, 256), float32] */;
  %448 = cast(%var_9423, dtype="float32") /* ty=Tensor[(15, 8, 256), float32] */;
  %449 = mod(%447, %448) /* ty=Tensor[(15, 8, 256), float32] */;
  %450 = cast(%var_9435, dtype="uint32") /* ty=Tensor[(15, 8, 256), uint32] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="uint32") /* ty=Tensor[(15, 8, 256), uint32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %454 = %442.0;
  %455 = left_shift(%452, %453) /* ty=Tensor[(15, 8, 256), uint32] */;
  %456 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%454, %455, %456)
}

def @func_1814() -> (Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) {
  %457 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %458 = cast(%457, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %459 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 8, 6), float32] */, dtype="int16") /* ty=Tensor[(1, 8, 6), int16] */;
  %460 = add(%458, %459) /* ty=Tensor[(1, 8, 6), int16] */;
  %461 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  (%460, %461)
}

def @func_2570() -> Tensor[(1, 8, 1), float32] {
  %462 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %462.0
}

def @func_7229() -> Tensor[(1, 8, 1), float32] {
  %463 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %463.0
}

def @func_9350() -> Tensor[(1, 8, 1), float32] {
  %464 = @func_5596() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %464.0
}

def @func_6260() -> (Tensor[(5, 8, 1), int32],) {
  %465 = @func_4390() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %466 = %465.1;
  %467 = cast(%466, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
  %468 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(5, 8, 1), int32] */;
  %469 = bitwise_or(%467, %468) /* ty=Tensor[(5, 8, 1), int32] */;
  (%469,)
}

def @func_7627() -> (Tensor[(?, 8, ?), uint16],) {
  %470 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %471 = %470.1;
  (%471,)
}

def @func_1011() -> Tensor[(1, 8, 1), float32] {
  %472 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  asin(%473) /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2160() -> (Tensor[(?, 8, ?), float64],) {
  %474 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(?, 8, ?), float64] */;
  %476 = rsqrt(%475) /* ty=Tensor[(?, 8, ?), float64] */;
  (%476,)
}

def @func_2032() -> Tensor[(?, 8, ?), uint16] {
  %477 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %480 = exp(%479) /* ty=Tensor[(1, 8, 1), float64] */;
  %481 = cast(%478, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%483, %484) /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_7293(%var_7278: Tensor[(350), uint8]) -> (Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) {
  %485 = cast(%var_7278, dtype="uint8") /* ty=Tensor[(350), uint8] */;
  %486 = cast(%var_7278, dtype="uint8") /* ty=Tensor[(350), uint8] */;
  %487 = reshape(%485, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint8] */;
  %488 = reshape(%486, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint8] */;
  %489 = @func_4815() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %490 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  %491 = @func_6617(%487, %488) /* ty=Tensor[(5, 10, 7), uint8] */;
  %492 = %489.1;
  (%490, %491, %var_7278, %492)
}

def @func_1497() -> Tensor[(1, 8, 1), float32] {
  @func_1330() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9638() -> (Tensor[(1, 8, 1), float32],) {
  %493 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
  (%493,)
}

def @func_4124() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %494 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %495 = @func_3878() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %496 = @func_3808() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %497 = %496.0;
  %498 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %499 = cast(%498, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %500 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%497, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %503 = cast(meta[relay.Constant][16] /* ty=Tensor[(78), int8] */, dtype="int8") /* ty=Tensor[(78), int8] */;
  %504 = reshape(%503, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int8] */;
  %505 = @func_3434(%504) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) */;
  %506 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %507 = %494.0;
  %508 = %495.0;
  %509 = bitwise_and(%501, %502) /* ty=Tensor[(?, 8, ?), int16] */;
  %510 = %505.1;
  %511 = %506.0;
  %512 = @func_4045() /* ty=Tensor[(1, 8, 1), float32] */;
  (%507, %508, %509, %510, meta[relay.Constant][16] /* ty=Tensor[(78), int8] */, %511, %512)
}

def @func_1369() -> (Tensor[(1, 8, 1), float32],) {
  %513 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%513,)
}

def @func_2724() -> (Tensor[(2, 1, 11), float64],) {
  %514 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %515 = %514.0;
  (%515,)
}

def @func_9513() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %516 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %517 = @func_3576() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %518 = %516.0;
  %519 = %517.1;
  (%518, %519)
}

def @func_4841() -> (Tensor[(1, 8, 1), float32],) {
  %520 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  (%520,)
}

def @func_5110(%var_5072: Tensor[(7, 1, 16), uint64], %var_5073: Tensor[(7, 1, 16), uint64]) -> (Tensor[(7, ?, 16), uint64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32], Tensor[(5, 13, 14), uint16], Tensor[(910), uint16], Tensor[(1, 8, 10), float32]) {
  %521 = cast(%var_5073, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %522 = shape_of(%var_5072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_5072, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %525 = @func_3144() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %526 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %527 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %528 = cast(meta[relay.Constant][17] /* ty=Tensor[(910), uint16] */, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %529 = cast(meta[relay.Constant][17] /* ty=Tensor[(910), uint16] */, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %530 = reshape(%528, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), uint16] */;
  %531 = reshape(%529, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), uint16] */;
  %532 = @func_3520(%530, %531) /* ty=(Tensor[(5, 13, 14), uint16],) */;
  %533 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %534 = bitwise_xor(%523, %524) /* ty=Tensor[(7, ?, 16), uint64] */;
  %535 = %525.0;
  %536 = %526.0;
  %537 = %527.0;
  %538 = %532.0;
  %539 = %533.1;
  (%534, %535, %536, %537, %538, meta[relay.Constant][17] /* ty=Tensor[(910), uint16] */, %539)
}

def @func_7771() -> (Tensor[(2, 1, 11), float64],) {
  %540 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%540,)
}

def @func_8564() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %541 = @func_5581() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) */;
  %542 = %541.1;
  %543 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
  (%542, %543)
}

def @func_3950() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  %544 = @func_3878() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %545 = %544.0;
  %546 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%545, %546)
}

def @func_6039() -> Tensor[(1, 8, 1), float32] {
  @func_1539() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2522() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) {
  %547 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %548 = %547.0;
  %549 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %551 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%548, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = cast(-3.70151f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %555 = cast(meta[relay.Constant][18] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %556 = reshape(%554, newshape=[]) /* ty=float64 */;
  %557 = reshape(%555, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %558 = @func_877(%556, %557) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
  %559 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %560 = mod(%552, %553) /* ty=Tensor[(?, 8, ?), float64] */;
  %561 = %558.4;
  %562 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%559, %560, %561, -3.70151f64 /* ty=float64 */, meta[relay.Constant][18] /* ty=Tensor[(72), float64] */, %562)
}

def @func_4045() -> Tensor[(1, 8, 1), float32] {
  %563 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  sqrt(%564) /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8367() -> Tensor[(1, 8, 1), float32] {
  @func_6039() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_10708() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %565 = @func_9105() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %566 = @func_3300() /* ty=Tensor[(1, 8, 1), float32] */;
  %567 = %565.0;
  (%566, %567)
}

def @func_5960() -> (Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
  %568 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %570 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %571 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %572 = cast(meta[relay.Constant][20] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %573 = reshape(%572, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
  %574 = @func_1217(%573) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
  %575 = mod(%569, %570) /* ty=Tensor[(9, 8, 4), float32] */;
  %576 = %571.0;
  %577 = %574.1;
  (%575, %576, %577, meta[relay.Constant][20] /* ty=Tensor[(440), float32] */)
}

def @func_1358() -> Tensor[(1, 8, 1), float32] {
  @func_1330() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_3210() -> (Tensor[(1, 8, 1), float32],) {
  %578 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %579 = %578.0;
  (%579,)
}

def @func_1131() -> Tensor[(1, 8, 1), float32] {
  @func_1011() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9163(%var_9131: Tensor[(2, 1, 11), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, ?, 11), int64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
  %580 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %581 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %582 = cast(%var_9131, dtype="int64") /* ty=Tensor[(2, 1, 11), int64] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int64") /* ty=Tensor[(2, 1, 11), int64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %586 = cast(meta[relay.Constant][21] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %587 = reshape(%586, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
  %588 = @func_8936(%587) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) */;
  %589 = %580.0;
  %590 = maximum(%584, %585) /* ty=Tensor[(2, ?, 11), int64] */;
  %591 = %588.0;
  (%589, %590, %591, meta[relay.Constant][21] /* ty=Tensor[(1080), float32] */)
}

def @func_8667() -> (Tensor[(12, 8, 2), uint8],) {
  %592 = @func_7500() /* ty=(Tensor[(12, 8, 2), uint8],) */;
  %593 = %592.0;
  (%593,)
}

def @func_1576() -> Tensor[(2, 1, 11), float64] {
  %594 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  tan(%594) /* ty=Tensor[(2, 1, 11), float64] */
}

def @func_9896() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8]) {
  %595 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %596 = cast(meta[relay.Constant][23] /* ty=Tensor[(350), uint8] */, dtype="uint8") /* ty=Tensor[(350), uint8] */;
  %597 = reshape(%596, newshape=[350]) /* ty=Tensor[(350), uint8] */;
  %598 = @func_7293(%597) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) */;
  %599 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
  %600 = %595.1;
  %601 = %598.1;
  (%599, %600, %601, meta[relay.Constant][23] /* ty=Tensor[(350), uint8] */)
}

def @func_3718() -> (Tensor[(1, 8, 1), float32],) {
  %602 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %603 = %602.0;
  (%603,)
}

def @func_5815() -> Tensor[(1, 8, 1), float32] {
  @func_2618() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7433() -> Tensor[(1, 8, 1), float32] {
  %604 = @func_6056() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %604.1
}

def @func_3022(%var_3005: Tensor[(6, 8, 4), float32]) -> (Tensor[(6, 8, 4), float64],) {
  %605 = @func_2522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="uint64") /* ty=Tensor[(1, 8, 1), uint64] */;
  %608 = cast(%var_3005, dtype="uint64") /* ty=Tensor[(6, 8, 4), uint64] */;
  %609 = right_shift(%607, %608) /* ty=Tensor[(6, 8, 4), uint64] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %611 = log(%610) /* ty=Tensor[(6, 8, 4), float64] */;
  (%611,)
}

def @func_4409() -> (Tensor[(1, 8, 1), float32],) {
  %612 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %613 = %612.0;
  (%613,)
}

def @func_9206(%var_9177: Tensor[(13, 6, 7), int8]) -> (Tensor[(13, 6, 7), int8], Tensor[(11, 8, 10), bool], Tensor[(13, 6, 7), float32]) {
  %614 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6, 7), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 7), int8] */;
  %615 = shape_of(%var_9177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%var_9177, dtype="int8") /* ty=Tensor[(13, 6, 7), int8] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %618 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %619 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6, 7), int8] */, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %620 = bitwise_or(%616, %617) /* ty=Tensor[(13, 6, 7), int8] */;
  %621 = %618.0;
  %622 = sigmoid(%619) /* ty=Tensor[(13, 6, 7), float32] */;
  (%620, %621, %622)
}

def @func_9674() -> (Tensor[(1, 8, 1), float32],) {
  %623 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
  (%623,)
}

def @func_2770() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %624 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  %625 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%624, %625)
}

def @func_4943() -> (Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) {
  %626 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %627 = %626.0;
  %628 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %631 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%627, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = greater_equal(%632, %633) /* ty=Tensor[(?, 8, ?), bool] */;
  %635 = cast(%627, dtype="uint8") /* ty=Tensor[(1, 8, 1), uint8] */;
  %636 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 8, 15), float32] */, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
  %637 = bitwise_and(%635, %636) /* ty=Tensor[(1, 8, 15), uint8] */;
  %638 = cast(%634, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %639 = cast(%637, dtype="int16") /* ty=Tensor[(1, 8, 15), int16] */;
  %640 = cast(%637, dtype="int16") /* ty=Tensor[(1, 8, 15), int16] */;
  %641 = reshape(%640, newshape=[10, 2, 6]) /* ty=Tensor[(10, 2, 6), int16] */;
  %642 = @func_4349(%641) /* ty=(Tensor[(10, 2, 6), bool],) */;
  %643 = cast(%634, dtype="float64") /* ty=Tensor[(?, 8, ?), float64] */;
  %644 = cast(%637, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %645 = left_shift(%638, %639) /* ty=Tensor[(?, 8, 15), int16] */;
  %646 = %642.0;
  %647 = power(%643, %644) /* ty=Tensor[(?, 8, 15), float64] */;
  (%645, %646, %647)
}

def @func_1693() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %648 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %649 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  (%648, %649)
}

def @func_877(%var_866: float64, %var_867: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) {
  %650 = cast(%var_866, dtype="float64") /* ty=float64 */;
  %651 = cast(%var_867, dtype="float64") /* ty=Tensor[(72), float64] */;
  %652 = reshape(%650, newshape=[]) /* ty=float64 */;
  %653 = reshape(%651, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float64] */;
  %654 = @func_175(%652, %653) /* ty=(Tensor[(1, 8, 9), bool],) */;
  %655 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %656 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %657 = %654.0;
  (%655, %656, %657, %var_866, %var_867)
}

def @func_7210(%var_7184: Tensor[(11, 8, 3), float32]) -> (Tensor[(11, 8, 3), uint16], Tensor[(11, 8, 3), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 3), float64]) {
  %658 = @func_6758() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %659 = %658.2;
  %660 = cast(%659, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
  %661 = cast(%var_7184, dtype="uint16") /* ty=Tensor[(11, 8, 3), uint16] */;
  %662 = cast(%var_7184, dtype="float32") /* ty=Tensor[(11, 8, 3), float32] */;
  %663 = cast(%var_7184, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
  %664 = right_shift(%660, %661) /* ty=Tensor[(11, 8, 3), uint16] */;
  %665 = asinh(%662) /* ty=Tensor[(11, 8, 3), float32] */;
  %666 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %667 = cosh(%663) /* ty=Tensor[(11, 8, 3), float64] */;
  (%664, %665, %666, %667)
}

def @func_7599() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %668 = @func_1592() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %669 = @func_2232() /* ty=(Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
  %670 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %671 = %668.1;
  %672 = %669.2;
  (%670, %671, %672)
}

def @func_4327() -> Tensor[(1, 8, 1), float32] {
  %673 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %673.1
}

def @func_5581() -> (Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) {
  %674 = @func_4943() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) */;
  %675 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %676 = %674.0;
  %677 = %675.1;
  (%676, %677)
}

def @func_7052() -> (Tensor[(1, 8, 1), float32],) {
  %678 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %679 = %678.1;
  (%679,)
}

def @func_1535() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %680 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %681 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  %682 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  %683 = %680.0;
  (%681, %682, %683)
}

def @func_6490(%var_6481: Tensor[(13, 16, 13), float32]) -> (Tensor[(13, 16, 13), bool], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  %684 = cast(%var_6481, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %685 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(13, 16, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %689 = reshape(%688, newshape=[2, 8, 16]) /* ty=Tensor[(2, 8, 16), float32] */;
  %690 = @func_2920(%689) /* ty=(Tensor[(2, 8, 16), bool],) */;
  %691 = not_equal(%686, %687) /* ty=Tensor[(13, 16, 13), bool] */;
  %692 = %690.0;
  (%691, %692, meta[relay.Constant][27] /* ty=Tensor[(256), float32] */)
}

def @func_4815() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %693 = @func_4409() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %694 = %693.0;
  %695 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  (%694, %695)
}

def @func_5034() -> (Tensor[(?, 8, 256), uint16],) {
  %696 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %697 = %696.2;
  %698 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %699 = cast(%697, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %700 = cast(%698, dtype="uint16") /* ty=Tensor[(?, 8, ?), uint16] */;
  %701 = subtract(%699, %700) /* ty=Tensor[(?, 8, 256), uint16] */;
  (%701,)
}

def @func_6617(%var_6579: Tensor[(5, 10, 7), uint8], %var_6580: Tensor[(5, 10, 7), uint8]) -> Tensor[(5, 10, 7), uint8] {
  %702 = cast(%var_6580, dtype="uint8") /* ty=Tensor[(5, 10, 7), uint8] */;
  %703 = shape_of(%var_6579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_6579, dtype="uint8") /* ty=Tensor[(5, 10, 7), uint8] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%704, %705) /* ty=Tensor[(5, 10, 7), uint8] */
}

def @func_5198(%var_5185: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
  %706 = cast(%var_5185, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  rsqrt(%706) /* ty=Tensor[(10, 7, 6), float32] */
}

def @func_2320() -> Tensor[(1, 8, 1), float32] {
  %707 = @func_2284() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %707.0
}

def @func_3434(%var_3396: Tensor[(1, 13, 6), int8]) -> (Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) {
  %708 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %709 = cast(%var_3396, dtype="int8") /* ty=Tensor[(1, 13, 6), int8] */;
  %710 = bitwise_or(%708, %709) /* ty=Tensor[(1, 13, 6), int8] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(1, 13, 6), float32] */;
  %712 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %713 = cast(meta[relay.Constant][29] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %714 = reshape(%712, newshape=[]) /* ty=float64 */;
  %715 = reshape(%713, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %716 = @func_877(%714, %715) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
  %717 = acosh(%711) /* ty=Tensor[(1, 13, 6), float32] */;
  %718 = %716.4;
  (%717, %718, meta[relay.Constant][29] /* ty=Tensor[(72, 1), float64] */)
}

def @func_175(%var_170: float64, %var_171: Tensor[(1, 8, 9), float64]) -> (Tensor[(1, 8, 9), bool],) {
  %719 = cast(%var_170, dtype="bool") /* ty=bool */;
  %720 = cast(%var_171, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %721 = less_equal(%719, %720) /* ty=Tensor[(1, 8, 9), bool] */;
  (%721,)
}

def @func_4792() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %722 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %723 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %724 = %722.0;
  %725 = %723.0;
  (%724, %725)
}

def @func_4277(%var_4258: float64, %var_4259: Tensor[(8064), int8]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) {
  %726 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %727 = cast(%var_4258, dtype="float64") /* ty=float64 */;
  %728 = cast(%var_4259, dtype="int8") /* ty=Tensor[(8064), int8] */;
  %729 = reshape(%727, newshape=[]) /* ty=float64 */;
  %730 = reshape(%728, newshape=[14, 8, 72]) /* ty=Tensor[(14, 8, 72), int8] */;
  %731 = @func_1652(%729, %730) /* ty=(Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) */;
  %732 = cast(%var_4259, dtype="float32") /* ty=Tensor[(8064), float32] */;
  %733 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %736 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %737 = %726.1;
  %738 = %731.4;
  %739 = cosh(%732) /* ty=Tensor[(8064), float32] */;
  %740 = log2(%735) /* ty=Tensor[(1, 8, 1), float32] */;
  (%736, %737, %738, %var_4258, %739, %740)
}

def @func_7516() -> (Tensor[(1, 8, 1), float32],) {
  %741 = @func_2798() /* ty=Tensor[(1, 8, 1), float32] */;
  (%741,)
}

def @func_1733() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %742 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %743 = %742.0;
  %744 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  (%743, %744)
}

def @func_3300() -> Tensor[(1, 8, 1), float32] {
  @func_1497() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6758() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
  %745 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %746 = @func_2232() /* ty=(Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
  %747 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %748 = %745.1;
  %749 = %746.2;
  %750 = %747.0;
  (%748, %749, %750)
}

def @func_1330() -> Tensor[(1, 8, 1), float32] {
  @func_833() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2880() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
  %751 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %752 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
  %753 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %754 = %751.0;
  (%752, %753, %754)
}

def @func_8767() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %755 = @func_7516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %756 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  %757 = %755.0;
  (%756, %757)
}

def @func_10414() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32]) {
  %758 = @func_8667() /* ty=(Tensor[(12, 8, 2), uint8],) */;
  %759 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %760 = %758.0;
  %761 = %759.1;
  (%760, %761)
}

def @func_1592() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %762 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %763 = %762.0;
  %764 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  (%763, %764)
}

def @func_3645() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %765 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %767 = erf(%766) /* ty=Tensor[(1, 8, 1), float32] */;
  %768 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  (%767, %768)
}

def @func_3259() -> (Tensor[(1, 8, 1), float32],) {
  %769 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%769,)
}

def @func_2618() -> Tensor[(1, 8, 1), float32] {
  %770 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %770.1
}

def @func_3502() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %771 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  %772 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  (%771, %772)
}

def @func_5148() -> Tensor[(1, 8, 1), float32] {
  %773 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %773.0
}

def @func_8810() -> Tensor[(1, 8, 1), float32] {
  %774 = @func_7726() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %774.0
}

def @func_7327(%var_7311: Tensor[(12, 8, 14), float32]) -> Tensor[(12, 8, 14), int8] {
  %775 = @func_5312() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) */;
  %776 = %775.6;
  %777 = cast(%776, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
  %778 = cast(%var_7311, dtype="int8") /* ty=Tensor[(12, 8, 14), int8] */;
  add(%777, %778) /* ty=Tensor[(12, 8, 14), int8] */
}

def @func_5636() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %779 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %780 = %779.0;
  %781 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  (%780, %781)
}

def @func_5522() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %782 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
  %783 = @func_3184() /* ty=Tensor[(1, 8, 1), float32] */;
  (%782, %783)
}

def @func_5312() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) {
  %784 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %785 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %786 = %785.0;
  %787 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %788 = %787.1;
  %789 = cast(%788, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %790 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%786, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %794 = %793.0;
  %795 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  %796 = cast(%794, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %797 = cast(%795, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
  %798 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %799 = %798.0;
  %800 = cast(%788, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %801 = cast(%799, dtype="bool") /* ty=Tensor[(1, 8, 6), bool] */;
  %802 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %803 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
  %805 = log(%804) /* ty=Tensor[(1, 8, 10), float64] */;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
  %807 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %808 = %784.0;
  %809 = logical_or(%791, %792) /* ty=Tensor[(?, 8, ?), bool] */;
  %810 = greater_equal(%796, %797) /* ty=Tensor[(1, 8, 10), bool] */;
  %811 = equal(%800, %801) /* ty=Tensor[(1, 8, 6), bool] */;
  %812 = %802.0;
  %813 = atanh(%806) /* ty=Tensor[(1, 8, 10), float64] */;
  %814 = %807.0;
  (%808, %809, %810, %811, %812, %813, %814)
}

def @func_6349() -> Tensor[(1, 8, 1), float32] {
  %815 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %815.0
}

def @func_7166(%var_7138: Tensor[(220, 2), float32], %var_7150: Tensor[(220, 2), float64]) -> (Tensor[(2, 3, 11), bool], Tensor[(1, 8, 1), float32], Tensor[(5, 8, 11), bool], Tensor[(220, 2), bool], Tensor[(1, 8, 10), float32]) {
  %816 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %817 = %816.1;
  %818 = cast(%817, dtype="bool") /* ty=Tensor[(2, 1, 11), bool] */;
  %819 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 11), bool] */;
  %820 = @func_6690() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %821 = cast(%var_7138, dtype="float32") /* ty=Tensor[(220, 2), float32] */;
  %822 = reshape(%821, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
  %823 = @func_1217(%822) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
  %824 = cast(%var_7138, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %825 = rsqrt(%824) /* ty=Tensor[(220, 2), float64] */;
  %826 = cast(%var_7150, dtype="bool") /* ty=Tensor[(220, 2), bool] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(2), int32] */;
  %828 = cast(%825, dtype="bool") /* ty=Tensor[(220, 2), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %830 = logical_or(%818, %819) /* ty=Tensor[(2, 3, 11), bool] */;
  %831 = %820.0;
  %832 = %823.0;
  %833 = logical_and(%828, %829) /* ty=Tensor[(220, 2), bool] */;
  %834 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%830, %831, %832, %833, %834)
}

def @func_5760() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %835 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %836 = @func_3300() /* ty=Tensor[(1, 8, 1), float32] */;
  %837 = %835.1;
  (%836, %837)
}

def @func_2008() -> (Tensor[(1, 8, 1), float32],) {
  %838 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %839 = %838.0;
  (%839,)
}

def @func_5442() -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
  %840 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %841 = %840.1;
  %842 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
  (%841, %842)
}

def @func_1652(%var_1616: float64, %var_1645: Tensor[(14, 8, 72), int8]) -> (Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) {
  %843 = cast(%var_1616, dtype="float64") /* ty=float64 */;
  %844 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %845 = reshape(%843, newshape=[]) /* ty=float64 */;
  %846 = reshape(%844, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %847 = @func_877(%845, %846) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
  %848 = %847.1;
  %849 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, dtype="int8") /* ty=Tensor[(72), int8] */;
  %850 = cast(%848, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
  %851 = bitwise_xor(%849, %850) /* ty=Tensor[(1, 8, 72), int8] */;
  %852 = cast(%848, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %853 = cast(%851, dtype="bool") /* ty=Tensor[(1, 8, 72), bool] */;
  %854 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %855 = cast(%851, dtype="bool") /* ty=Tensor[(1, 8, 72), bool] */;
  %856 = cast(%var_1645, dtype="bool") /* ty=Tensor[(14, 8, 72), bool] */;
  %857 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %858 = @func_1539() /* ty=Tensor[(1, 8, 1), float32] */;
  %859 = logical_or(%852, %853) /* ty=Tensor[(1, 8, 72), bool] */;
  %860 = %854.1;
  %861 = logical_and(%855, %856) /* ty=Tensor[(14, 8, 72), bool] */;
  (%857, %var_1616, %858, %859, %860, %861)
}

def @func_5596() -> (Tensor[(1, 8, 1), float32],) {
  %862 = @func_1733() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %863 = %862.0;
  (%863,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7169(%var_7167: Tensor[(220, 2), float32], %var_7168: Tensor[(220, 2), float64]) -> (Tensor[(2, 3, 11), bool], Tensor[(1, 8, 1), float32], Tensor[(5, 8, 11), bool], Tensor[(220, 2), bool], Tensor[(1, 8, 10), float32]) {
  %19 = fn (%var_7138: Tensor[(220, 2), float32], %var_7150: Tensor[(220, 2), float64]) -> (Tensor[(2, 3, 11), bool], Tensor[(1, 8, 1), float32], Tensor[(5, 8, 11), bool], Tensor[(220, 2), bool], Tensor[(1, 8, 10), float32]) {
    %0 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
    %1 = %0.1;
    %2 = cast(%1, dtype="bool") /* ty=Tensor[(2, 1, 11), bool] */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 3, 11), bool] */;
    %4 = @func_6690() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %5 = cast(%var_7138, dtype="float32") /* ty=Tensor[(220, 2), float32] */;
    %6 = reshape(%5, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
    %7 = @func_1217(%6) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
    %8 = cast(%var_7138, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
    %9 = rsqrt(%8) /* ty=Tensor[(220, 2), float64] */;
    %10 = cast(%var_7150, dtype="bool") /* ty=Tensor[(220, 2), bool] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(2), int32] */;
    %12 = cast(%9, dtype="bool") /* ty=Tensor[(220, 2), bool] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %14 = logical_or(%2, %3) /* ty=Tensor[(2, 3, 11), bool] */;
    %15 = %4.0;
    %16 = %7.0;
    %17 = logical_and(%12, %13) /* ty=Tensor[(220, 2), bool] */;
    %18 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
    (%14, %15, %16, %17, %18)
  };
  %19(%var_7167, %var_7168) /* ty=(Tensor[(2, 3, 11), bool], Tensor[(1, 8, 1), float32], Tensor[(5, 8, 11), bool], Tensor[(220, 2), bool], Tensor[(1, 8, 10), float32]) */
}

def @func_7502() -> (Tensor[(12, 8, 2), uint8],) {
  @func_7500() /* ty=(Tensor[(12, 8, 2), uint8],) */
}

def @func_7859() -> Tensor[(1, 8, 1), float32] {
  @func_7433() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2234() -> (Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  @func_2232() /* ty=(Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */
}

def @func_3950() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  %20 = @func_3878() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %21 = %20.0;
  %22 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%21, %22)
}

def @func_2009() -> (Tensor[(1, 8, 1), float32],) {
  %25 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %23 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %24 = %23.0;
    (%24,)
  };
  %25() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_5443() -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
  %29 = fn () -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
    %26 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
    %27 = %26.1;
    %28 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
    (%27, %28)
  };
  %29() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */
}

def @func_2726() -> (Tensor[(2, 1, 11), float64],) {
  @func_2724() /* ty=(Tensor[(2, 1, 11), float64],) */
}

def @func_6758() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
  %30 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %31 = @func_2232() /* ty=(Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
  %32 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %33 = %30.1;
  %34 = %31.2;
  %35 = %32.0;
  (%33, %34, %35)
}

def @func_1011() -> Tensor[(1, 8, 1), float32] {
  %36 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  asin(%37) /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6473() -> (Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
  %47 = fn () -> (Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) {
    %38 = @func_2522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) */;
    %39 = @func_6260() /* ty=(Tensor[(5, 8, 1), int32],) */;
    %40 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %41 = @func_5442() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
    %42 = %38.1;
    %43 = %39.0;
    %44 = %40.2;
    %45 = %41.0;
    %46 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    (%42, %43, %44, %45, %46)
  };
  %47() /* ty=(Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */
}

def @func_7517() -> (Tensor[(1, 8, 1), float32],) {
  %49 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %48 = @func_2798() /* ty=Tensor[(1, 8, 1), float32] */;
    (%48,)
  };
  %49() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_8564() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %50 = @func_5581() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) */;
  %51 = %50.1;
  %52 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
  (%51, %52)
}

def @func_3293() -> (Tensor[(1, 8, 1), float32],) {
  %55 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %53 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %54 = %53.1;
    (%54,)
  };
  %55() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_9406() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) {
  %60 = fn () -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) {
    %56 = @func_8667() /* ty=(Tensor[(12, 8, 2), uint8],) */;
    %57 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %58 = %56.0;
    %59 = %57.0;
    (%58, %59)
  };
  %60() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) */
}

def @func_1594() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_1592() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_1013() -> Tensor[(1, 8, 1), float32] {
  @func_1011() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6493(%var_6491: Tensor[(13, 16, 13), float32]) -> (Tensor[(13, 16, 13), bool], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  @func_6490(%var_6491) /* ty=(Tensor[(13, 16, 13), bool], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */
}

def @func_178(%var_176: float64, %var_177: Tensor[(1, 8, 9), float64]) -> (Tensor[(1, 8, 9), bool],) {
  %64 = fn (%var_170: float64, %var_171: Tensor[(1, 8, 9), float64]) -> (Tensor[(1, 8, 9), bool],) {
    %61 = cast(%var_170, dtype="bool") /* ty=bool */;
    %62 = cast(%var_171, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
    %63 = less_equal(%61, %62) /* ty=Tensor[(1, 8, 9), bool] */;
    (%63,)
  };
  %64(%var_176, %var_177) /* ty=(Tensor[(1, 8, 9), bool],) */
}

def @func_1592() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %65 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %66 = %65.0;
  %67 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  (%66, %67)
}

def @func_9515() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_9513() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_1219(%var_1218: Tensor[(5, 8, 11), float32]) -> (Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) {
  %75 = fn (%var_1179: Tensor[(5, 8, 11), float32]) -> (Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) {
    %68 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
    %69 = cast(%68, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %70 = cast(%var_1179, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
    %71 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
    %72 = cast(%71, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %73 = logical_and(%69, %70) /* ty=Tensor[(5, 8, 11), bool] */;
    %74 = atanh(%72) /* ty=Tensor[(1, 8, 1), float32] */;
    (%73, %74)
  };
  %75(%var_1218) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */
}

def @func_2232() -> (Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %76 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  %77 = @func_2160() /* ty=(Tensor[(?, 8, ?), float64],) */;
  %78 = %77.0;
  %79 = cast(%78, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %80 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%76, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %83 = @func_1592() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %84 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %85 = maximum(%81, %82) /* ty=Tensor[(?, 8, ?), int16] */;
  %86 = %83.0;
  %87 = %84.0;
  (%85, %86, %87)
}

def @func_4390() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %88 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %89 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %90 = %88.0;
  (%89, %90)
}

def @func_5961() -> (Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
  %101 = fn () -> (Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
    %91 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %93 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
    %94 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %96 = reshape(%95, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
    %97 = @func_1217(%96) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
    %98 = mod(%92, %93) /* ty=Tensor[(9, 8, 4), float32] */;
    %99 = %94.0;
    %100 = %97.1;
    (%98, %99, %100, meta[relay.Constant][2] /* ty=Tensor[(440), float32] */)
  };
  %101() /* ty=(Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */
}

def @func_7398(%var_7378: Tensor[(65), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 5, 13), float64], Tensor[(65), float64]) {
  %102 = @func_5522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %103 = cast(%var_7378, dtype="float64") /* ty=Tensor[(65), float64] */;
  %104 = reshape(%103, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), float64] */;
  %105 = @func_6775(%104) /* ty=(Tensor[(1, 5, 13), float64],) */;
  %106 = %102.1;
  %107 = %105.0;
  (%106, %107, %var_7378)
}

def @func_4843() -> (Tensor[(1, 8, 1), float32],) {
  @func_4841() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_9365() -> (Tensor[(256), float32],) {
  %108 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %109 = %108.2;
  (%109,)
}

def @func_2033() -> Tensor[(?, 8, ?), uint16] {
  %118 = fn () -> Tensor[(?, 8, ?), uint16] {
    %110 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %111 = %110.0;
    %112 = cast(%111, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
    %113 = exp(%112) /* ty=Tensor[(1, 8, 1), float64] */;
    %114 = cast(%111, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
    %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%113, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    add(%116, %117) /* ty=Tensor[(?, 8, ?), uint16] */
  };
  %118() /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_4609() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_4607() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_9751(%var_9722: Tensor[(11, 8, 8), float32], %var_9723: Tensor[(11, 8, 8), float32]) -> (Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64]) {
  %119 = cast(%var_9723, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %120 = shape_of(%var_9722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_9722, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %123 = @func_7771() /* ty=(Tensor[(2, 1, 11), float64],) */;
  %124 = cast(%var_9723, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %125 = divide(%121, %122) /* ty=Tensor[(11, 8, 8), float32] */;
  %126 = %123.0;
  %127 = rsqrt(%124) /* ty=Tensor[(11, 8, 8), float32] */;
  %128 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%125, %126, %127, %128)
}

def @func_7053() -> (Tensor[(1, 8, 1), float32],) {
  %131 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %129 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %130 = %129.1;
    (%130,)
  };
  %131() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_10231() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  @func_10229() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */
}

def @func_8810() -> Tensor[(1, 8, 1), float32] {
  %132 = @func_7726() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %132.0
}

def @func_10229() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %133 = @func_7726() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %134 = %133.0;
  %135 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%134, %135)
}

def @func_6943() -> Tensor[(1, 8, 1), float32] {
  @func_4327() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7229() -> Tensor[(1, 8, 1), float32] {
  %136 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %136.0
}

def @func_1539() -> Tensor[(1, 8, 1), float32] {
  %137 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %137.0
}

def @func_8110(%var_8108: float64, %var_8109: Tensor[(154, 4), float32]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32], Tensor[(154, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
  @func_8106(%var_8108, %var_8109) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32], Tensor[(154, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */
}

def @func_3880() -> (Tensor[(1, 8, 1), float32],) {
  @func_3878() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_5815() -> Tensor[(1, 8, 1), float32] {
  @func_2618() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6232() -> Tensor[(1, 8, 1), float32] {
  @func_6230() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_4792() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %138 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %139 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %140 = %138.0;
  %141 = %139.0;
  (%140, %141)
}

def @func_7549() -> Tensor[(?, 8, ?), uint16] {
  %143 = fn () -> Tensor[(?, 8, ?), uint16] {
    %142 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
    %142.0
  };
  %143() /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_5198(%var_5185: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
  %144 = cast(%var_5185, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  rsqrt(%144) /* ty=Tensor[(10, 7, 6), float32] */
}

def @func_10300(%var_10298: int64, %var_10299: Tensor[(13, 1, 6), int64]) -> (Tensor[(13, 1, 6), int64], Tensor[(13, 1, 6), int8]) {
  %151 = fn (%var_10287: int64, %var_10288: Tensor[(13, 1, 6), int64]) -> (Tensor[(13, 1, 6), int64], Tensor[(13, 1, 6), int8]) {
    %145 = cast(%var_10287, dtype="int64") /* ty=int64 */;
    %146 = cast(%var_10288, dtype="int64") /* ty=Tensor[(13, 1, 6), int64] */;
    %147 = cast(%var_10287, dtype="int8") /* ty=int8 */;
    %148 = cast(%var_10288, dtype="int8") /* ty=Tensor[(13, 1, 6), int8] */;
    %149 = maximum(%145, %146) /* ty=Tensor[(13, 1, 6), int64] */;
    %150 = bitwise_and(%147, %148) /* ty=Tensor[(13, 1, 6), int8] */;
    (%149, %150)
  };
  %151(%var_10298, %var_10299) /* ty=(Tensor[(13, 1, 6), int64], Tensor[(13, 1, 6), int8]) */
}

def @func_7882() -> (Tensor[(1, 8, 1), float32],) {
  %153 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %152 = @func_5148() /* ty=Tensor[(1, 8, 1), float32] */;
    (%152,)
  };
  %153() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_4014() -> Tensor[(?, 8, ?), uint16] {
  %154 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %154.0
}

def @func_4410() -> (Tensor[(1, 8, 1), float32],) {
  %157 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %155 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %156 = %155.0;
    (%156,)
  };
  %157() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_3720() -> (Tensor[(1, 8, 1), float32],) {
  @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_7231() -> Tensor[(1, 8, 1), float32] {
  @func_7229() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9675() -> (Tensor[(1, 8, 1), float32],) {
  %159 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %158 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
    (%158,)
  };
  %159() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_7849() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %164 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %160 = @func_6379() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %161 = @func_5760() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %162 = %160.0;
    %163 = %161.1;
    (%162, %163)
  };
  %164() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2524() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) {
  @func_2522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) */
}

def @func_3503() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %167 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %165 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
    %166 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2066(%var_2064: Tensor[(8, 8, 3), float32]) -> (Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) {
  @func_2063(%var_2064) /* ty=(Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) */
}

def @func_7414() -> Tensor[(1, 8, 1), float32] {
  @func_7412() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7909() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %171 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %168 = @func_4841() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %169 = %168.0;
    %170 = @func_7859() /* ty=Tensor[(1, 8, 1), float32] */;
    (%169, %170)
  };
  %171() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_3145() -> (Tensor[(1, 8, 1), float32],) {
  %174 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %172 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %173 = %172.0;
    (%173,)
  };
  %174() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_2522() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) {
  %175 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %176 = %175.0;
  %177 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %179 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%176, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = cast(-3.70151f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %183 = cast(meta[relay.Constant][3] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %184 = reshape(%182, newshape=[]) /* ty=float64 */;
  %185 = reshape(%183, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %186 = @func_877(%184, %185) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
  %187 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %188 = mod(%180, %181) /* ty=Tensor[(?, 8, ?), float64] */;
  %189 = %186.4;
  %190 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%187, %188, %189, -3.70151f64 /* ty=float64 */, meta[relay.Constant][3] /* ty=Tensor[(72), float64] */, %190)
}

def @func_2285() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %193 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %191 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    %192 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    (%191, %192)
  };
  %193() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_834() -> Tensor[(1, 8, 1), float32] {
  %197 = fn () -> Tensor[(1, 8, 1), float32] {
    %194 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
    %195 = tan(%194) /* ty=Tensor[(1, 8, 1), float64] */;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    atan(%196) /* ty=Tensor[(1, 8, 1), float32] */
  };
  %197() /* ty=Tensor[(1, 8, 1), float32] */
}

def @main(%var_10814: Tensor[(1, 8, 6), float32]) -> (Tensor[(?, 8, ?), uint16], Tensor[(2, 1, 11), float64], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 6), float64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(96, 2), int32]) {
  %198 = @func_7772() /* ty=(Tensor[(2, 1, 11), float64],) */;
  %199 = @func_4843() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %200 = %199.0;
  %201 = cast(meta[relay.Constant][5] /* ty=Tensor[(96, 2), float32] */, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
  %202 = reshape(%201, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float32] */;
  %203 = @func_2066(%202) /* ty=(Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) */;
  %204 = %203.1;
  %205 = cast(%204, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %206 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%200, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = @func_2103() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
  %212 = cast(%var_10814, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %213 = @func_8263() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %214 = @func_5761() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %215 = @func_7909() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %216 = @func_3688() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %217 = @func_4794() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %218 = @func_7600() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
  %219 = cast(meta[relay.Constant][6] /* ty=Tensor[(96, 2), float32] */, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %220 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(96, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %221 = cast(meta[relay.Constant][5] /* ty=Tensor[(96, 2), float32] */, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %223 = maximum(%221, %222) /* ty=Tensor[(96, 2), uint16] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
  %225 = rsqrt(%224) /* ty=Tensor[(96, 2), float32] */;
  %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(96, 2), float32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(2), int32] */;
  %228 = cast(%225, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %230 = bitwise_or(%228, %229) /* ty=Tensor[(96, 2), uint32] */;
  %231 = cast(meta[relay.Constant][5] /* ty=Tensor[(96, 2), float32] */, dtype="int32") /* ty=Tensor[(96, 2), int32] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(2), int32] */;
  %233 = cast(%230, dtype="int32") /* ty=Tensor[(96, 2), int32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %235 = @func_8737() /* ty=Tensor[(?, 8, ?), uint16] */;
  %236 = %198.0;
  %237 = equal(%207, %208) /* ty=Tensor[(?, 8, ?), bool] */;
  %238 = mod(%211, %212) /* ty=Tensor[(1, 8, 6), float64] */;
  %239 = %213.1;
  %240 = @func_10138() /* ty=Tensor[(1, 8, 1), float32] */;
  %241 = %214.0;
  %242 = %215.0;
  %243 = %216.0;
  %244 = %217.1;
  %245 = %218.0;
  %246 = bitwise_xor(%233, %234) /* ty=Tensor[(96, 2), int32] */;
  (%235, %236, %237, %238, %239, %240, %241, %242, %243, %244, %245, %246)
}

def @func_4487(%var_4454: Tensor[(11, 8, 7), float32]) -> (Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) {
  %247 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %248 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %249 = %248.1;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %251 = cast(%var_4454, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %252 = subtract(%250, %251) /* ty=Tensor[(11, 8, 7), float32] */;
  %253 = @func_4124() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %254 = %253.5;
  %255 = cast(%252, dtype="int8") /* ty=Tensor[(11, 8, 7), int8] */;
  %256 = cast(%254, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
  %257 = %247.1;
  %258 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %259 = minimum(%255, %256) /* ty=Tensor[(11, 8, 7), int8] */;
  (%257, %258, %259)
}

def @func_1273(%var_1271: float64, %var_1272: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) {
  %268 = fn (%var_1257: float64, %var_1258: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) {
    %260 = cast(%var_1257, dtype="float64") /* ty=float64 */;
    %261 = cast(%var_1258, dtype="float64") /* ty=Tensor[(72), float64] */;
    %262 = reshape(%260, newshape=[]) /* ty=float64 */;
    %263 = reshape(%261, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float64] */;
    %264 = @func_175(%262, %263) /* ty=(Tensor[(1, 8, 9), bool],) */;
    %265 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
    %266 = %264.0;
    %267 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
    (%265, %266, %var_1257, %var_1258, %267)
  };
  %268(%var_1271, %var_1272) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) */
}

def @func_3523(%var_3521: Tensor[(5, 13, 14), uint16], %var_3522: Tensor[(5, 13, 14), uint16]) -> (Tensor[(5, 13, 14), uint16],) {
  %274 = fn (%var_3515: Tensor[(5, 13, 14), uint16], %var_3516: Tensor[(5, 13, 14), uint16]) -> (Tensor[(5, 13, 14), uint16],) {
    %269 = cast(%var_3516, dtype="uint16") /* ty=Tensor[(5, 13, 14), uint16] */;
    %270 = shape_of(%var_3515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%var_3515, dtype="uint16") /* ty=Tensor[(5, 13, 14), uint16] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %273 = add(%271, %272) /* ty=Tensor[(5, 13, 14), uint16] */;
    (%273,)
  };
  %274(%var_3521, %var_3522) /* ty=(Tensor[(5, 13, 14), uint16],) */
}

def @func_10752() -> (Tensor[(1, 8, 1), float32],) {
  %277 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %275 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %276 = %275.0;
    (%276,)
  };
  %277() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_7627() -> (Tensor[(?, 8, ?), uint16],) {
  %278 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %279 = %278.1;
  (%279,)
}

def @func_1132() -> Tensor[(1, 8, 1), float32] {
  %280 = fn () -> Tensor[(1, 8, 1), float32] {
    @func_1011() /* ty=Tensor[(1, 8, 1), float32] */
  };
  %280() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8368() -> Tensor[(1, 8, 1), float32] {
  %281 = fn () -> Tensor[(1, 8, 1), float32] {
    @func_6039() /* ty=Tensor[(1, 8, 1), float32] */
  };
  %281() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9052() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) {
  @func_9050() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) */
}

def @func_3743() -> (Tensor[(1, 8, 1), float32],) {
  %282 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  (%282,)
}

def @func_7798() -> (Tensor[(1, 8, 1), float32],) {
  %284 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %283 = @func_2798() /* ty=Tensor[(1, 8, 1), float32] */;
    (%283,)
  };
  %284() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_1693() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %285 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %286 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  (%285, %286)
}

def @func_4817() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_4815() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6760() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
  @func_6758() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */
}

def @func_7861() -> Tensor[(1, 8, 1), float32] {
  @func_7859() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_5313() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) {
  %318 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) {
    %287 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
    %288 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %289 = %288.0;
    %290 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %291 = %290.1;
    %292 = cast(%291, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %293 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%289, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %296 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
    %297 = %296.0;
    %298 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
    %299 = cast(%297, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %300 = cast(%298, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
    %301 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %302 = %301.0;
    %303 = cast(%291, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %304 = cast(%302, dtype="bool") /* ty=Tensor[(1, 8, 6), bool] */;
    %305 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %306 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
    %307 = cast(%306, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
    %308 = log(%307) /* ty=Tensor[(1, 8, 10), float64] */;
    %309 = cast(%308, dtype="float64") /* ty=Tensor[(1, 8, 10), float64] */;
    %310 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %311 = %287.0;
    %312 = logical_or(%294, %295) /* ty=Tensor[(?, 8, ?), bool] */;
    %313 = greater_equal(%299, %300) /* ty=Tensor[(1, 8, 10), bool] */;
    %314 = equal(%303, %304) /* ty=Tensor[(1, 8, 6), bool] */;
    %315 = %305.0;
    %316 = atanh(%309) /* ty=Tensor[(1, 8, 10), float64] */;
    %317 = %310.0;
    (%311, %312, %313, %314, %315, %316, %317)
  };
  %318() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) */
}

def @func_3261() -> (Tensor[(1, 8, 1), float32],) {
  @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_5149() -> Tensor[(1, 8, 1), float32] {
  %320 = fn () -> Tensor[(1, 8, 1), float32] {
    %319 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %319.0
  };
  %320() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6349() -> Tensor[(1, 8, 1), float32] {
  %321 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %321.0
}

def @func_8422(%var_8421: Tensor[(5, 8, 4), float32]) -> (Tensor[(5, 8, 4), int16], Tensor[(?, 8, ?), uint16]) {
  %327 = fn (%var_8392: Tensor[(5, 8, 4), float32]) -> (Tensor[(5, 8, 4), int16], Tensor[(?, 8, ?), uint16]) {
    %322 = @func_7229() /* ty=Tensor[(1, 8, 1), float32] */;
    %323 = cast(%322, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
    %324 = cast(%var_8392, dtype="int16") /* ty=Tensor[(5, 8, 4), int16] */;
    %325 = minimum(%323, %324) /* ty=Tensor[(5, 8, 4), int16] */;
    %326 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
    (%325, %326)
  };
  %327(%var_8421) /* ty=(Tensor[(5, 8, 4), int16], Tensor[(?, 8, ?), uint16]) */
}

def @func_7629() -> (Tensor[(?, 8, ?), uint16],) {
  @func_7627() /* ty=(Tensor[(?, 8, ?), uint16],) */
}

def @func_4046() -> Tensor[(1, 8, 1), float32] {
  %330 = fn () -> Tensor[(1, 8, 1), float32] {
    %328 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    %329 = cast(%328, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    sqrt(%329) /* ty=Tensor[(1, 8, 1), float32] */
  };
  %330() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7727() -> (Tensor[(1, 8, 1), float32],) {
  %333 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %331 = @func_4792() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %332 = %331.1;
    (%332,)
  };
  %333() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_9106() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %338 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %334 = @func_7881() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %335 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
    %336 = %334.0;
    %337 = %335.0;
    (%336, %337)
  };
  %338() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_3259() -> (Tensor[(1, 8, 1), float32],) {
  %339 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%339,)
}

def @func_8938(%var_8937: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) {
  %352 = fn (%var_8887: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) {
    %340 = @func_7881() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %343 = cast(%var_8887, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
    %344 = logical_or(%342, %343) /* ty=Tensor[(15, 8, 9), bool] */;
    %345 = cast(%344, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
    %346 = cast(%var_8887, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
    %347 = cast(%341, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %348 = sigmoid(%345) /* ty=Tensor[(15, 8, 9), float32] */;
    %349 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
    %350 = divide(%346, %347) /* ty=Tensor[(15, 8, 9), float32] */;
    %351 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
    (%348, %349, %350, %351)
  };
  %352(%var_8937) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_8566() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_8564() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_3808() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  %353 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %354 = %353.1;
  %355 = @func_2369() /* ty=Tensor[(1, 8, 10), float32] */;
  (%354, %355)
}

def @func_8106(%var_8017: float64, %var_8044: Tensor[(154, 4), float32]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32], Tensor[(154, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
  %356 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %357 = @func_5960() /* ty=(Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
  %358 = %357.1;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %360 = cast(%var_8017, dtype="float64") /* ty=float64 */;
  %361 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %362 = reshape(%360, newshape=[]) /* ty=float64 */;
  %363 = reshape(%361, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %364 = @func_1270(%362, %363) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64], Tensor[(1, 8, 1), float32]) */;
  %365 = cast(%var_8044, dtype="float32") /* ty=Tensor[(154, 4), float32] */;
  %366 = reshape(%365, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %367 = @func_4487(%366) /* ty=(Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) */;
  %368 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %369 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
  %370 = %356.0;
  %371 = cos(%359) /* ty=Tensor[(1, 8, 1), float32] */;
  %372 = %364.3;
  %373 = %367.1;
  %374 = %368.0;
  %375 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %376 = %369.1;
  (%370, %371, %372, %var_8017, meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, %373, %var_8044, %374, %375, %376)
}

def @func_5761() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %380 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %377 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %378 = @func_3300() /* ty=Tensor[(1, 8, 1), float32] */;
    %379 = %377.1;
    (%378, %379)
  };
  %380() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_3645() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %381 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %383 = erf(%382) /* ty=Tensor[(1, 8, 1), float32] */;
  %384 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  (%383, %384)
}

def @func_10016(%var_10014: Tensor[(10, 4, 9), uint16], %var_10015: Tensor[(10, 4, 9), uint16]) -> (Tensor[(10, 4, 9), uint16], Tensor[(10, 4, 9), int8], Tensor[(?, 8, ?), uint16], Tensor[(?, 8, 256), uint16], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32]) {
  @func_10012(%var_10014, %var_10015) /* ty=(Tensor[(10, 4, 9), uint16], Tensor[(10, 4, 9), int8], Tensor[(?, 8, ?), uint16], Tensor[(?, 8, 256), uint16], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32]) */
}

def @func_1933() -> (Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) {
  @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */
}

def @func_4815() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %385 = @func_4409() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %386 = %385.0;
  %387 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  (%386, %387)
}

def @func_7500() -> (Tensor[(12, 8, 2), uint8],) {
  %388 = @func_6758() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %389 = %388.2;
  %390 = cast(%389, dtype="uint8") /* ty=Tensor[(1, 8, 1), uint8] */;
  %391 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 8, 2), float32] */, dtype="uint8") /* ty=Tensor[(12, 8, 2), uint8] */;
  %392 = logical_xor(%390, %391) /* ty=Tensor[(12, 8, 2), uint8] */;
  (%392,)
}

def @func_6380() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %395 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %393 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
    %394 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
    (%393, %394)
  };
  %395() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2411() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %399 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %396 = @func_1733() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %397 = %396.0;
    %398 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
    (%397, %398)
  };
  %399() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2922(%var_2921: Tensor[(2, 8, 16), float32]) -> (Tensor[(2, 8, 16), bool],) {
  %405 = fn (%var_2913: Tensor[(2, 8, 16), float32]) -> (Tensor[(2, 8, 16), bool],) {
    %400 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
    %401 = %400.0;
    %402 = cast(%401, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %403 = cast(%var_2913, dtype="bool") /* ty=Tensor[(2, 8, 16), bool] */;
    %404 = equal(%402, %403) /* ty=Tensor[(2, 8, 16), bool] */;
    (%404,)
  };
  %405(%var_2921) /* ty=(Tensor[(2, 8, 16), bool],) */
}

def @func_6216() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %410 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %406 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %407 = @func_5312() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) */;
    %408 = %406.0;
    %409 = %407.4;
    (%408, %409)
  };
  %410() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6504() -> (Tensor[(1, 8, 10), float32],) {
  @func_6502() /* ty=(Tensor[(1, 8, 10), float32],) */
}

def @func_9350() -> Tensor[(1, 8, 1), float32] {
  %411 = @func_5596() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %411.0
}

def @func_2724() -> (Tensor[(2, 1, 11), float64],) {
  %412 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %413 = %412.0;
  (%413,)
}

def @func_2881() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
  %418 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) {
    %414 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %415 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
    %416 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
    %417 = %414.0;
    (%415, %416, %417)
  };
  %418() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */
}

def @func_6490(%var_6481: Tensor[(13, 16, 13), float32]) -> (Tensor[(13, 16, 13), bool], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  %419 = cast(%var_6481, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %420 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 16, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = cast(meta[relay.Constant][11] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %424 = reshape(%423, newshape=[2, 8, 16]) /* ty=Tensor[(2, 8, 16), float32] */;
  %425 = @func_2920(%424) /* ty=(Tensor[(2, 8, 16), bool],) */;
  %426 = not_equal(%421, %422) /* ty=Tensor[(13, 16, 13), bool] */;
  %427 = %425.0;
  (%426, %427, meta[relay.Constant][11] /* ty=Tensor[(256), float32] */)
}

def @func_6690() -> (Tensor[(1, 8, 1), float32],) {
  %428 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
  (%428,)
}

def @func_6261() -> (Tensor[(5, 8, 1), int32],) {
  %434 = fn () -> (Tensor[(5, 8, 1), int32],) {
    %429 = @func_4390() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %430 = %429.1;
    %431 = cast(%430, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
    %432 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(5, 8, 1), int32] */;
    %433 = bitwise_or(%431, %432) /* ty=Tensor[(5, 8, 1), int32] */;
    (%433,)
  };
  %434() /* ty=(Tensor[(5, 8, 1), int32],) */
}

def @func_7401(%var_7399: Tensor[(65), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 5, 13), float64], Tensor[(65), float64]) {
  @func_7398(%var_7399) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 5, 13), float64], Tensor[(65), float64]) */
}

def @func_4349(%var_4344: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), bool],) {
  %435 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 6), int16] */, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %436 = shape_of(%var_4344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_4344, dtype="bool") /* ty=Tensor[(10, 2, 6), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = not_equal(%437, %438) /* ty=Tensor[(10, 2, 6), bool] */;
  (%439,)
}

def @func_6778(%var_6776: Tensor[(1, 5, 13), float64]) -> (Tensor[(1, 5, 13), float64],) {
  @func_6775(%var_6776) /* ty=(Tensor[(1, 5, 13), float64],) */
}

def @func_5036() -> (Tensor[(?, 8, 256), uint16],) {
  @func_5034() /* ty=(Tensor[(?, 8, 256), uint16],) */
}

def @func_7329(%var_7328: Tensor[(12, 8, 14), float32]) -> Tensor[(12, 8, 14), int8] {
  %444 = fn (%var_7311: Tensor[(12, 8, 14), float32]) -> Tensor[(12, 8, 14), int8] {
    %440 = @func_5312() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool], Tensor[(1, 8, 10), bool], Tensor[(1, 8, 6), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float64], Tensor[(1, 8, 1), float32]) */;
    %441 = %440.6;
    %442 = cast(%441, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
    %443 = cast(%var_7311, dtype="int8") /* ty=Tensor[(12, 8, 14), int8] */;
    add(%442, %443) /* ty=Tensor[(12, 8, 14), int8] */
  };
  %444(%var_7328) /* ty=Tensor[(12, 8, 14), int8] */
}

def @func_8261() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %445 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
  %446 = %445.1;
  %447 = @func_7859() /* ty=Tensor[(1, 8, 1), float32] */;
  (%446, %447)
}

def @func_7772() -> (Tensor[(2, 1, 11), float64],) {
  %449 = fn () -> (Tensor[(2, 1, 11), float64],) {
    %448 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
    (%448,)
  };
  %449() /* ty=(Tensor[(2, 1, 11), float64],) */
}

def @func_3212() -> (Tensor[(1, 8, 1), float32],) {
  @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_8768() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %453 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %450 = @func_7516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %451 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    %452 = %450.0;
    (%451, %452)
  };
  %453() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6057() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %458 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %454 = @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %455 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %456 = %454.0;
    %457 = %455.0;
    (%456, %457)
  };
  %458() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_1734() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %462 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %459 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %460 = %459.0;
    %461 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
    (%460, %461)
  };
  %462() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_1330() -> Tensor[(1, 8, 1), float32] {
  @func_833() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2771() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %465 = fn () -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
    %463 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
    %464 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    (%463, %464)
  };
  %465() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */
}

def @func_4125() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %485 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %466 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %467 = @func_3878() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %468 = @func_3808() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
    %469 = %468.0;
    %470 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    %471 = cast(%470, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
    %472 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%469, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %475 = cast(meta[relay.Constant][14] /* ty=Tensor[(78), int8] */, dtype="int8") /* ty=Tensor[(78), int8] */;
    %476 = reshape(%475, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int8] */;
    %477 = @func_3434(%476) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) */;
    %478 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %479 = %466.0;
    %480 = %467.0;
    %481 = bitwise_and(%473, %474) /* ty=Tensor[(?, 8, ?), int16] */;
    %482 = %477.1;
    %483 = %478.0;
    %484 = @func_4045() /* ty=Tensor[(1, 8, 1), float32] */;
    (%479, %480, %481, %482, meta[relay.Constant][14] /* ty=Tensor[(78), int8] */, %483, %484)
  };
  %485() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), int16], Tensor[(72), float64], Tensor[(78), int8], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2161() -> (Tensor[(?, 8, ?), float64],) {
  %489 = fn () -> (Tensor[(?, 8, ?), float64],) {
    %486 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
    %487 = cast(%486, dtype="float64") /* ty=Tensor[(?, 8, ?), float64] */;
    %488 = rsqrt(%487) /* ty=Tensor[(?, 8, ?), float64] */;
    (%488,)
  };
  %489() /* ty=(Tensor[(?, 8, ?), float64],) */
}

def @func_6673() -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
  @func_6671() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */
}

def @func_3210() -> (Tensor[(1, 8, 1), float32],) {
  %490 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %491 = %490.0;
  (%491,)
}

def @func_1499() -> Tensor[(1, 8, 1), float32] {
  @func_1497() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_5201(%var_5199: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
  @func_5198(%var_5199) /* ty=Tensor[(10, 7, 6), float32] */
}

def @func_1577() -> Tensor[(2, 1, 11), float64] {
  %493 = fn () -> Tensor[(2, 1, 11), float64] {
    %492 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
    tan(%492) /* ty=Tensor[(2, 1, 11), float64] */
  };
  %493() /* ty=Tensor[(2, 1, 11), float64] */
}

def @func_3576() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %494 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %495 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %496 = %494.0;
  %497 = %495.1;
  (%496, %497)
}

def @func_2320() -> Tensor[(1, 8, 1), float32] {
  %498 = @func_2284() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %498.0
}

def @func_9639() -> (Tensor[(1, 8, 1), float32],) {
  %500 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %499 = @func_4327() /* ty=Tensor[(1, 8, 1), float32] */;
    (%499,)
  };
  %500() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_3436(%var_3435: Tensor[(1, 13, 6), int8]) -> (Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) {
  %512 = fn (%var_3396: Tensor[(1, 13, 6), int8]) -> (Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) {
    %501 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %502 = cast(%var_3396, dtype="int8") /* ty=Tensor[(1, 13, 6), int8] */;
    %503 = bitwise_or(%501, %502) /* ty=Tensor[(1, 13, 6), int8] */;
    %504 = cast(%503, dtype="float32") /* ty=Tensor[(1, 13, 6), float32] */;
    %505 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %506 = cast(meta[relay.Constant][17] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
    %507 = reshape(%505, newshape=[]) /* ty=float64 */;
    %508 = reshape(%506, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %509 = @func_877(%507, %508) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
    %510 = acosh(%504) /* ty=Tensor[(1, 13, 6), float32] */;
    %511 = %509.4;
    (%510, %511, meta[relay.Constant][17] /* ty=Tensor[(72, 1), float64] */)
  };
  %512(%var_3435) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(72), float64], Tensor[(72, 1), float64]) */
}

def @func_1371() -> (Tensor[(1, 8, 1), float32],) {
  @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_9898() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8]) {
  @func_9896() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8]) */
}

def @func_6041() -> Tensor[(1, 8, 1), float32] {
  @func_6039() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_1536() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %517 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %513 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %514 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    %515 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    %516 = %513.0;
    (%514, %515, %516)
  };
  %517() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_3184() -> Tensor[(1, 8, 1), float32] {
  %518 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %518.0
}

def @func_4841() -> (Tensor[(1, 8, 1), float32],) {
  %519 = @func_2618() /* ty=Tensor[(1, 8, 1), float32] */;
  (%519,)
}

def @func_3393(%var_3391: Tensor[(10, 8, 15), float32]) -> (Tensor[(10, 8, 15), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  @func_3390(%var_3391) /* ty=(Tensor[(10, 8, 15), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */
}

def @func_9513() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %520 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %521 = @func_3576() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %522 = %520.0;
  %523 = %521.1;
  (%522, %523)
}

def @func_2101() -> (Tensor[(1, 8, 1), float32],) {
  %524 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %525 = %524.0;
  (%525,)
}

def @func_5524() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_5522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_4557() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %526 = @func_4390() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %527 = @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %528 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %529 = %526.1;
  %530 = %527.1;
  %531 = %528.0;
  (%529, %530, %531)
}

def @func_6351() -> Tensor[(1, 8, 1), float32] {
  @func_6349() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_3810() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  @func_3808() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */
}

def @func_5582() -> (Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) {
  %536 = fn () -> (Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) {
    %532 = @func_4943() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) */;
    %533 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %534 = %532.0;
    %535 = %533.1;
    (%534, %535)
  };
  %536() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(1, 8, 1), float32]) */
}

def @func_9519() -> (Tensor[(12, 8, 2), uint8],) {
  %539 = fn () -> (Tensor[(12, 8, 2), uint8],) {
    %537 = @func_9405() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 6), int16]) */;
    %538 = %537.0;
    (%538,)
  };
  %539() /* ty=(Tensor[(12, 8, 2), uint8],) */
}

def @func_9755(%var_9753: Tensor[(11, 8, 8), float32], %var_9754: Tensor[(11, 8, 8), float32]) -> (Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64]) {
  @func_9751(%var_9753, %var_9754) /* ty=(Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 8), float32], Tensor[(2, 1, 11), float64]) */
}

def @func_3878() -> (Tensor[(1, 8, 1), float32],) {
  %540 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %541 = %540.0;
  (%541,)
}

def @func_4559() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_4557() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6110() -> (Tensor[(2, 8, 16), bool], Tensor[(440), float32]) {
  @func_6108() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(440), float32]) */
}

def @func_9367() -> (Tensor[(256), float32],) {
  @func_9365() /* ty=(Tensor[(256), float32],) */
}

def @func_9896() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8]) {
  %542 = @func_1931() /* ty=(Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) */;
  %543 = cast(meta[relay.Constant][18] /* ty=Tensor[(350), uint8] */, dtype="uint8") /* ty=Tensor[(350), uint8] */;
  %544 = reshape(%543, newshape=[350]) /* ty=Tensor[(350), uint8] */;
  %545 = @func_7293(%544) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) */;
  %546 = @func_6230() /* ty=Tensor[(1, 8, 1), float32] */;
  %547 = %542.1;
  %548 = %545.1;
  (%546, %547, %548, meta[relay.Constant][18] /* ty=Tensor[(350), uint8] */)
}

def @func_881(%var_879: float64, %var_880: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) {
  @func_877(%var_879, %var_880) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */
}

def @func_3578() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_3576() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_10561(%var_10560: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, ?), float32],) {
  %553 = fn (%var_10551: Tensor[(9, 8, 1), uint16]) -> (Tensor[(9, 8, ?), float32],) {
    %549 = @func_7548() /* ty=Tensor[(?, 8, ?), uint16] */;
    %550 = cast(%549, dtype="float32") /* ty=Tensor[(?, 8, ?), float32] */;
    %551 = cast(%var_10551, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
    %552 = subtract(%550, %551) /* ty=Tensor[(9, 8, ?), float32] */;
    (%552,)
  };
  %553(%var_10560) /* ty=(Tensor[(9, 8, ?), float32],) */
}

def @func_7364() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  %558 = fn () -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
    %554 = @func_2770() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
    %555 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %556 = %554.0;
    %557 = %555.1;
    (%556, %557)
  };
  %558() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */
}

def @func_8668() -> (Tensor[(12, 8, 2), uint8],) {
  %561 = fn () -> (Tensor[(12, 8, 2), uint8],) {
    %559 = @func_7500() /* ty=(Tensor[(12, 8, 2), uint8],) */;
    %560 = %559.0;
    (%560,)
  };
  %561() /* ty=(Tensor[(12, 8, 2), uint8],) */
}

def @func_7600() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
  %567 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) {
    %562 = @func_1592() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %563 = @func_2232() /* ty=(Tensor[(?, 8, ?), int16], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */;
    %564 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
    %565 = %562.1;
    %566 = %563.2;
    (%564, %565, %566)
  };
  %567() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64]) */
}

def @func_9873() -> (Tensor[(1, 8, 1), float32],) {
  %570 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %568 = @func_3259() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %569 = %568.0;
    (%569,)
  };
  %570() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_2620() -> Tensor[(1, 8, 1), float32] {
  @func_2618() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_6108() -> (Tensor[(2, 8, 16), bool], Tensor[(440), float32]) {
  %571 = @func_5442() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %572 = @func_5960() /* ty=(Tensor[(9, 8, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
  %573 = %571.0;
  %574 = %572.3;
  (%573, %574)
}

def @func_9165(%var_9164: Tensor[(2, 1, 11), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, ?, 11), int64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
  %587 = fn (%var_9131: Tensor[(2, 1, 11), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, ?, 11), int64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
    %575 = @func_1516() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %576 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
    %577 = cast(%var_9131, dtype="int64") /* ty=Tensor[(2, 1, 11), int64] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="int64") /* ty=Tensor[(2, 1, 11), int64] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %581 = cast(meta[relay.Constant][19] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %582 = reshape(%581, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
    %583 = @func_8936(%582) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32], Tensor[(15, 8, 9), float32], Tensor[(1, 8, 1), float32]) */;
    %584 = %575.0;
    %585 = maximum(%579, %580) /* ty=Tensor[(2, ?, 11), int64] */;
    %586 = %583.0;
    (%584, %585, %586, meta[relay.Constant][19] /* ty=Tensor[(1080), float32] */)
  };
  %587(%var_9164) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, ?, 11), int64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) */
}

def @func_1517() -> (Tensor[(1, 8, 1), float32],) {
  %591 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %588 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    %589 = cast(%588, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %590 = acos(%589) /* ty=Tensor[(1, 8, 1), float32] */;
    (%590,)
  };
  %591() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_2799() -> Tensor[(1, 8, 1), float32] {
  %593 = fn () -> Tensor[(1, 8, 1), float32] {
    %592 = @func_2410() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %592.1
  };
  %593() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_5522() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %594 = @func_2570() /* ty=Tensor[(1, 8, 1), float32] */;
  %595 = @func_3184() /* ty=Tensor[(1, 8, 1), float32] */;
  (%594, %595)
}

def @func_3390(%var_3363: Tensor[(10, 8, 15), float32]) -> (Tensor[(10, 8, 15), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  %596 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %599 = cast(%var_3363, dtype="int16") /* ty=Tensor[(10, 8, 15), int16] */;
  %600 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %601 = add(%598, %599) /* ty=Tensor[(10, 8, 15), int16] */;
  %602 = %600.0;
  %603 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%601, %602, %603)
}

def @func_9453(%var_9451: Tensor[(15, 8, 256), float64], %var_9452: Tensor[(15, 8, 256), float32]) -> (Tensor[(12, 8, 2), uint8], Tensor[(15, 8, 256), uint32], Tensor[(?, 8, ?), uint16]) {
  @func_9449(%var_9451, %var_9452) /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(15, 8, 256), uint32], Tensor[(?, 8, ?), uint16]) */
}

def @func_8738() -> Tensor[(?, 8, ?), uint16] {
  %604 = fn () -> Tensor[(?, 8, ?), uint16] {
    @func_7548() /* ty=Tensor[(?, 8, ?), uint16] */
  };
  %604() /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_1497() -> Tensor[(1, 8, 1), float32] {
  @func_1330() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8347(%var_8281: Tensor[(1, 10, 4), float32], %var_8335: Tensor[(8064, 1), int8]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 10, 4), float32], Tensor[(?, 10, 4), int16], Tensor[(1, 8, 1), float32], float64, Tensor[(8064, 1), int8], Tensor[(2, 8, 16), bool]) {
  %605 = cast(%var_8281, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %606 = @func_4557() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %607 = cast(%var_8281, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %608 = cosh(%607) /* ty=Tensor[(1, 10, 4), float32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %610 = rsqrt(%609) /* ty=Tensor[(1, 10, 4), float32] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %612 = cast(%610, dtype="int16") /* ty=Tensor[(1, 10, 4), int16] */;
  %613 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%608, dtype="int16") /* ty=Tensor[(1, 10, 4), int16] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %616 = cast(6.92488f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %617 = cast(%var_8335, dtype="int8") /* ty=Tensor[(8064, 1), int8] */;
  %618 = reshape(%616, newshape=[]) /* ty=float64 */;
  %619 = reshape(%617, newshape=[8064]) /* ty=Tensor[(8064), int8] */;
  %620 = @func_4277(%618, %619) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) */;
  %621 = @func_6472() /* ty=(Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %622 = log10(%605) /* ty=Tensor[(1, 10, 4), float32] */;
  %623 = %606.1;
  %624 = acos(%611) /* ty=Tensor[(1, 10, 4), float32] */;
  %625 = subtract(%614, %615) /* ty=Tensor[(?, 10, 4), int16] */;
  %626 = %620.2;
  %627 = %621.3;
  (%622, %623, %624, %625, %626, 6.92488f64 /* ty=float64 */, %var_8335, %627)
}

def @func_1652(%var_1616: float64, %var_1645: Tensor[(14, 8, 72), int8]) -> (Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) {
  %628 = cast(%var_1616, dtype="float64") /* ty=float64 */;
  %629 = cast(meta[relay.Constant][20] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %630 = reshape(%628, newshape=[]) /* ty=float64 */;
  %631 = reshape(%629, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %632 = @func_877(%630, %631) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) */;
  %633 = %632.1;
  %634 = cast(meta[relay.Constant][20] /* ty=Tensor[(72), float64] */, dtype="int8") /* ty=Tensor[(72), int8] */;
  %635 = cast(%633, dtype="int8") /* ty=Tensor[(1, 8, 1), int8] */;
  %636 = bitwise_xor(%634, %635) /* ty=Tensor[(1, 8, 72), int8] */;
  %637 = cast(%633, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %638 = cast(%636, dtype="bool") /* ty=Tensor[(1, 8, 72), bool] */;
  %639 = @func_1535() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %640 = cast(%636, dtype="bool") /* ty=Tensor[(1, 8, 72), bool] */;
  %641 = cast(%var_1645, dtype="bool") /* ty=Tensor[(14, 8, 72), bool] */;
  %642 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %643 = @func_1539() /* ty=Tensor[(1, 8, 1), float32] */;
  %644 = logical_or(%637, %638) /* ty=Tensor[(1, 8, 72), bool] */;
  %645 = %639.1;
  %646 = logical_and(%640, %641) /* ty=Tensor[(14, 8, 72), bool] */;
  (%642, %var_1616, %643, %644, %645, %646)
}

def @func_10139() -> Tensor[(1, 8, 1), float32] {
  %648 = fn () -> Tensor[(1, 8, 1), float32] {
    %647 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %647.0
  };
  %648() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_5721() -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %649 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(?, 8, ?), bool] */;
  %651 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 8, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %652 = @func_3718() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %653 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %654 = equal(%650, %651) /* ty=Tensor[(11, 8, 10), bool] */;
  %655 = %652.0;
  %656 = %653.0;
  (%654, %655, %656)
}

def @func_3647() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_3645() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_8218() -> (Tensor[(256), float32], Tensor[(1, 8, 1), float32]) {
  %661 = fn () -> (Tensor[(256), float32], Tensor[(1, 8, 1), float32]) {
    %657 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
    %658 = @func_1369() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %659 = %657.2;
    %660 = %658.0;
    (%659, %660)
  };
  %661() /* ty=(Tensor[(256), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_4607() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %662 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %663 = @func_4045() /* ty=Tensor[(1, 8, 1), float32] */;
  %664 = %662.1;
  (%663, %664)
}

def @func_6620(%var_6618: Tensor[(5, 10, 7), uint8], %var_6619: Tensor[(5, 10, 7), uint8]) -> Tensor[(5, 10, 7), uint8] {
  %669 = fn (%var_6579: Tensor[(5, 10, 7), uint8], %var_6580: Tensor[(5, 10, 7), uint8]) -> Tensor[(5, 10, 7), uint8] {
    %665 = cast(%var_6580, dtype="uint8") /* ty=Tensor[(5, 10, 7), uint8] */;
    %666 = shape_of(%var_6579, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%var_6579, dtype="uint8") /* ty=Tensor[(5, 10, 7), uint8] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    minimum(%667, %668) /* ty=Tensor[(5, 10, 7), uint8] */
  };
  %669(%var_6618, %var_6619) /* ty=Tensor[(5, 10, 7), uint8] */
}

def @func_10660() -> (Tensor[(1, 8, 1), float32],) {
  %670 = @func_6349() /* ty=Tensor[(1, 8, 1), float32] */;
  (%670,)
}

def @func_3952() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) {
  @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */
}

def @func_4392() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_4390() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_7434() -> Tensor[(1, 8, 1), float32] {
  %672 = fn () -> Tensor[(1, 8, 1), float32] {
    %671 = @func_6056() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %671.1
  };
  %672() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8812() -> Tensor[(1, 8, 1), float32] {
  @func_8810() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_4328() -> Tensor[(1, 8, 1), float32] {
  %674 = fn () -> Tensor[(1, 8, 1), float32] {
    %673 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %673.1
  };
  %674() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7760() -> (Tensor[(1, 8, 1), float32],) {
  @func_7758() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_9449(%var_9423: Tensor[(15, 8, 256), float64], %var_9435: Tensor[(15, 8, 256), float32]) -> (Tensor[(12, 8, 2), uint8], Tensor[(15, 8, 256), uint32], Tensor[(?, 8, ?), uint16]) {
  %675 = @func_9050() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) */;
  %676 = @func_5034() /* ty=(Tensor[(?, 8, 256), uint16],) */;
  %677 = %676.0;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(?, 8, 256), float64] */;
  %679 = cos(%678) /* ty=Tensor[(?, 8, 256), float64] */;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(?, 8, 256), float32] */;
  %681 = cast(%var_9423, dtype="float32") /* ty=Tensor[(15, 8, 256), float32] */;
  %682 = mod(%680, %681) /* ty=Tensor[(15, 8, 256), float32] */;
  %683 = cast(%var_9435, dtype="uint32") /* ty=Tensor[(15, 8, 256), uint32] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="uint32") /* ty=Tensor[(15, 8, 256), uint32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %687 = %675.0;
  %688 = left_shift(%685, %686) /* ty=Tensor[(15, 8, 256), uint32] */;
  %689 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%687, %688, %689)
}

def @func_8263() -> (Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) {
  @func_8261() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */
}

def @func_5113(%var_5111: Tensor[(7, 1, 16), uint64], %var_5112: Tensor[(7, 1, 16), uint64]) -> (Tensor[(7, ?, 16), uint64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32], Tensor[(5, 13, 14), uint16], Tensor[(910), uint16], Tensor[(1, 8, 10), float32]) {
  %709 = fn (%var_5072: Tensor[(7, 1, 16), uint64], %var_5073: Tensor[(7, 1, 16), uint64]) -> (Tensor[(7, ?, 16), uint64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32], Tensor[(5, 13, 14), uint16], Tensor[(910), uint16], Tensor[(1, 8, 10), float32]) {
    %690 = cast(%var_5073, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
    %691 = shape_of(%var_5072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%var_5072, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %694 = @func_3144() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %695 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
    %696 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %697 = cast(meta[relay.Constant][22] /* ty=Tensor[(910), uint16] */, dtype="uint16") /* ty=Tensor[(910), uint16] */;
    %698 = cast(meta[relay.Constant][22] /* ty=Tensor[(910), uint16] */, dtype="uint16") /* ty=Tensor[(910), uint16] */;
    %699 = reshape(%697, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), uint16] */;
    %700 = reshape(%698, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), uint16] */;
    %701 = @func_3520(%699, %700) /* ty=(Tensor[(5, 13, 14), uint16],) */;
    %702 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
    %703 = bitwise_xor(%692, %693) /* ty=Tensor[(7, ?, 16), uint64] */;
    %704 = %694.0;
    %705 = %695.0;
    %706 = %696.0;
    %707 = %701.0;
    %708 = %702.1;
    (%703, %704, %705, %706, %707, meta[relay.Constant][22] /* ty=Tensor[(910), uint16] */, %708)
  };
  %709(%var_5111, %var_5112) /* ty=(Tensor[(7, ?, 16), uint64], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32], Tensor[(5, 13, 14), uint16], Tensor[(910), uint16], Tensor[(1, 8, 10), float32]) */
}

def @func_5723() -> (Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6206(%var_6204: float32, %var_6205: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(1, 8, 1), float32]) {
  %718 = fn (%var_6181: float32, %var_6182: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(1, 8, 1), float32]) {
    %710 = cast(%var_6181, dtype="float32") /* ty=float32 */;
    %711 = cast(%var_6182, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
    %712 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
    %713 = %712.0;
    %714 = cast(%713, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %715 = cast(%var_6181, dtype="float32") /* ty=float32 */;
    %716 = floor_mod(%710, %711) /* ty=Tensor[(13, 15, 12), float32] */;
    %717 = floor_mod(%714, %715) /* ty=Tensor[(1, 8, 1), float32] */;
    (%716, %717)
  };
  %718(%var_6204, %var_6205) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_5637() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %722 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %719 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %720 = %719.0;
    %721 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
    (%720, %721)
  };
  %722() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_5034() -> (Tensor[(?, 8, 256), uint16],) {
  %723 = @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */;
  %724 = %723.2;
  %725 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %726 = cast(%724, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %727 = cast(%725, dtype="uint16") /* ty=Tensor[(?, 8, ?), uint16] */;
  %728 = subtract(%726, %727) /* ty=Tensor[(?, 8, 256), uint16] */;
  (%728,)
}

def @func_5817() -> Tensor[(1, 8, 1), float32] {
  @func_5815() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9073() -> Tensor[(1, 8, 1), float32] {
  %729 = fn () -> Tensor[(1, 8, 1), float32] {
    @func_1011() /* ty=Tensor[(1, 8, 1), float32] */
  };
  %729() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2612() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float64]) {
  %736 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float64]) {
    %730 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %731 = @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %732 = %731.0;
    %733 = cast(%732, dtype="float64") /* ty=Tensor[(1, 8, 1), float64] */;
    %734 = %730.0;
    %735 = sigmoid(%733) /* ty=Tensor[(1, 8, 1), float64] */;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float64]) */
}

def @func_6692() -> (Tensor[(1, 8, 1), float32],) {
  @func_6690() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_1332() -> Tensor[(1, 8, 1), float32] {
  @func_1330() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_2103() -> (Tensor[(1, 8, 1), float32],) {
  @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_4943() -> (Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) {
  %737 = @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %738 = %737.0;
  %739 = @func_3292() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %742 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%738, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %745 = greater_equal(%743, %744) /* ty=Tensor[(?, 8, ?), bool] */;
  %746 = cast(%738, dtype="uint8") /* ty=Tensor[(1, 8, 1), uint8] */;
  %747 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 8, 15), float32] */, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
  %748 = bitwise_and(%746, %747) /* ty=Tensor[(1, 8, 15), uint8] */;
  %749 = cast(%745, dtype="int16") /* ty=Tensor[(?, 8, ?), int16] */;
  %750 = cast(%748, dtype="int16") /* ty=Tensor[(1, 8, 15), int16] */;
  %751 = cast(%748, dtype="int16") /* ty=Tensor[(1, 8, 15), int16] */;
  %752 = reshape(%751, newshape=[10, 2, 6]) /* ty=Tensor[(10, 2, 6), int16] */;
  %753 = @func_4349(%752) /* ty=(Tensor[(10, 2, 6), bool],) */;
  %754 = cast(%745, dtype="float64") /* ty=Tensor[(?, 8, ?), float64] */;
  %755 = cast(%748, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %756 = left_shift(%749, %750) /* ty=Tensor[(?, 8, 15), int16] */;
  %757 = %753.0;
  %758 = power(%754, %755) /* ty=Tensor[(?, 8, 15), float64] */;
  (%756, %757, %758)
}

def @func_877(%var_866: float64, %var_867: Tensor[(72), float64]) -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 9), bool], float64, Tensor[(72), float64]) {
  %759 = cast(%var_866, dtype="float64") /* ty=float64 */;
  %760 = cast(%var_867, dtype="float64") /* ty=Tensor[(72), float64] */;
  %761 = reshape(%759, newshape=[]) /* ty=float64 */;
  %762 = reshape(%760, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float64] */;
  %763 = @func_175(%761, %762) /* ty=(Tensor[(1, 8, 9), bool],) */;
  %764 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %765 = @func_833() /* ty=Tensor[(1, 8, 1), float32] */;
  %766 = %763.0;
  (%764, %765, %766, %var_866, %var_867)
}

def @func_6039() -> Tensor[(1, 8, 1), float32] {
  @func_1539() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9208(%var_9207: Tensor[(13, 6, 7), int8]) -> (Tensor[(13, 6, 7), int8], Tensor[(11, 8, 10), bool], Tensor[(13, 6, 7), float32]) {
  %776 = fn (%var_9177: Tensor[(13, 6, 7), int8]) -> (Tensor[(13, 6, 7), int8], Tensor[(11, 8, 10), bool], Tensor[(13, 6, 7), float32]) {
    %767 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6, 7), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 7), int8] */;
    %768 = shape_of(%var_9177, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%var_9177, dtype="int8") /* ty=Tensor[(13, 6, 7), int8] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %771 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %772 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6, 7), int8] */, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
    %773 = bitwise_or(%769, %770) /* ty=Tensor[(13, 6, 7), int8] */;
    %774 = %771.0;
    %775 = sigmoid(%772) /* ty=Tensor[(13, 6, 7), float32] */;
    (%773, %774, %775)
  };
  %776(%var_9207) /* ty=(Tensor[(13, 6, 7), int8], Tensor[(11, 8, 10), bool], Tensor[(13, 6, 7), float32]) */
}

def @func_3301() -> Tensor[(1, 8, 1), float32] {
  %777 = fn () -> Tensor[(1, 8, 1), float32] {
    @func_1497() /* ty=Tensor[(1, 8, 1), float32] */
  };
  %777() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_7295(%var_7294: Tensor[(350), uint8]) -> (Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) {
  %786 = fn (%var_7278: Tensor[(350), uint8]) -> (Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) {
    %778 = cast(%var_7278, dtype="uint8") /* ty=Tensor[(350), uint8] */;
    %779 = cast(%var_7278, dtype="uint8") /* ty=Tensor[(350), uint8] */;
    %780 = reshape(%778, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint8] */;
    %781 = reshape(%779, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint8] */;
    %782 = @func_4815() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %783 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
    %784 = @func_6617(%780, %781) /* ty=Tensor[(5, 10, 7), uint8] */;
    %785 = %782.1;
    (%783, %784, %var_7278, %785)
  };
  %786(%var_7294) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(5, 10, 7), uint8], Tensor[(350), uint8], Tensor[(1, 8, 1), float32]) */
}

def @func_2116() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */
}

def @func_2322() -> Tensor[(1, 8, 1), float32] {
  @func_2320() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_1541() -> Tensor[(1, 8, 1), float32] {
  @func_1539() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_1656(%var_1654: float64, %var_1655: Tensor[(14, 8, 72), int8]) -> (Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) {
  @func_1652(%var_1654, %var_1655) /* ty=(Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) */
}

def @func_10524(%var_10523: Tensor[(420), float32]) -> (Tensor[(10, 7, 6), float32], Tensor[(10, 2, 6), bool], Tensor[(120), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, 420), float32]) {
  %812 = fn (%var_10457: Tensor[(420), float32]) -> (Tensor[(10, 7, 6), float32], Tensor[(10, 2, 6), bool], Tensor[(120), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, 420), float32]) {
    %787 = cast(%var_10457, dtype="float32") /* ty=Tensor[(420), float32] */;
    %788 = reshape(%787, newshape=[10, 7, 6]) /* ty=Tensor[(10, 7, 6), float32] */;
    %789 = cast(meta[relay.Constant][25] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
    %790 = reshape(%789, newshape=[10, 2, 6]) /* ty=Tensor[(10, 2, 6), int16] */;
    %791 = @func_4349(%790) /* ty=(Tensor[(10, 2, 6), bool],) */;
    %792 = @func_6671() /* ty=(Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) */;
    %793 = %792.1;
    %794 = cast(%793, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
    %795 = cast(%var_10457, dtype="uint16") /* ty=Tensor[(420), uint16] */;
    %796 = right_shift(%794, %795) /* ty=Tensor[(1, 8, 420), uint16] */;
    %797 = cast(%796, dtype="float32") /* ty=Tensor[(1, 8, 420), float32] */;
    %798 = acos(%797) /* ty=Tensor[(1, 8, 420), float32] */;
    %799 = cast(%var_10457, dtype="bool") /* ty=Tensor[(420), bool] */;
    %800 = cast(%793, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
    %801 = less_equal(%799, %800) /* ty=Tensor[(1, 8, 420), bool] */;
    %802 = cast(%801, dtype="int16") /* ty=Tensor[(1, 8, 420), int16] */;
    %803 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%798, dtype="int16") /* ty=Tensor[(1, 8, 420), int16] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %806 = bitwise_xor(%804, %805) /* ty=Tensor[(?, 8, 420), int16] */;
    %807 = cast(%806, dtype="float32") /* ty=Tensor[(?, 8, 420), float32] */;
    %808 = @func_5198(%788) /* ty=Tensor[(10, 7, 6), float32] */;
    %809 = %791.0;
    %810 = @func_9350() /* ty=Tensor[(1, 8, 1), float32] */;
    %811 = sin(%807) /* ty=Tensor[(?, 8, 420), float32] */;
    (%808, %809, meta[relay.Constant][25] /* ty=Tensor[(120), int16] */, %810, %811)
  };
  %812(%var_10523) /* ty=(Tensor[(10, 7, 6), float32], Tensor[(10, 2, 6), bool], Tensor[(120), int16], Tensor[(1, 8, 1), float32], Tensor[(?, 8, 420), float32]) */
}

def @func_5597() -> (Tensor[(1, 8, 1), float32],) {
  %815 = fn () -> (Tensor[(1, 8, 1), float32],) {
    %813 = @func_1733() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %814 = %813.0;
    (%814,)
  };
  %815() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_2571() -> Tensor[(1, 8, 1), float32] {
  %817 = fn () -> Tensor[(1, 8, 1), float32] {
    %816 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %816.0
  };
  %817() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_4352(%var_4350: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), bool],) {
  @func_4349(%var_4350) /* ty=(Tensor[(10, 2, 6), bool],) */
}

def @func_1695() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_1693() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_4281(%var_4279: float64, %var_4280: Tensor[(8064), int8]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) {
  @func_4277(%var_4279, %var_4280) /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_9573() -> (Tensor[(2, 10, 11), uint16],) {
  %823 = fn () -> (Tensor[(2, 10, 11), uint16],) {
    %818 = @func_7771() /* ty=(Tensor[(2, 1, 11), float64],) */;
    %819 = %818.0;
    %820 = cast(%819, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
    %821 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 10, 11), float64] */, dtype="uint16") /* ty=Tensor[(2, 10, 11), uint16] */;
    %822 = bitwise_xor(%820, %821) /* ty=Tensor[(2, 10, 11), uint16] */;
    (%822,)
  };
  %823() /* ty=(Tensor[(2, 10, 11), uint16],) */
}

def @func_3024(%var_3023: Tensor[(6, 8, 4), float32]) -> (Tensor[(6, 8, 4), float64],) {
  %831 = fn (%var_3005: Tensor[(6, 8, 4), float32]) -> (Tensor[(6, 8, 4), float64],) {
    %824 = @func_2522() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), float64], Tensor[(72), float64], float64, Tensor[(72), float64], Tensor[(1, 8, 10), float32]) */;
    %825 = %824.0;
    %826 = cast(%825, dtype="uint64") /* ty=Tensor[(1, 8, 1), uint64] */;
    %827 = cast(%var_3005, dtype="uint64") /* ty=Tensor[(6, 8, 4), uint64] */;
    %828 = right_shift(%826, %827) /* ty=Tensor[(6, 8, 4), uint64] */;
    %829 = cast(%828, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
    %830 = log(%829) /* ty=Tensor[(6, 8, 4), float64] */;
    (%830,)
  };
  %831(%var_3023) /* ty=(Tensor[(6, 8, 4), float64],) */
}

def @func_6502() -> (Tensor[(1, 8, 10), float32],) {
  %832 = @func_3950() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 10), float32]) */;
  %833 = %832.1;
  (%833,)
}

def @func_2014() -> (Tensor[(1, 8, 1), float32],) {
  @func_2012() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_7412() -> Tensor[(1, 8, 1), float32] {
  %834 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %834.1
}

def @func_3718() -> (Tensor[(1, 8, 1), float32],) {
  %835 = @func_2788() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %836 = %835.0;
  (%836,)
}

def @func_3186() -> Tensor[(1, 8, 1), float32] {
  @func_3184() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_4945() -> (Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) {
  @func_4943() /* ty=(Tensor[(?, 8, 15), int16], Tensor[(10, 2, 6), bool], Tensor[(?, 8, 15), float64]) */
}

def @func_3745() -> (Tensor[(1, 8, 1), float32],) {
  @func_3743() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_4794() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  @func_4792() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6230() -> Tensor[(1, 8, 1), float32] {
  %837 = @func_3144() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %837.0
}

def @func_2618() -> Tensor[(1, 8, 1), float32] {
  %838 = @func_1814() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */;
  %838.1
}

def @func_4016() -> Tensor[(?, 8, ?), uint16] {
  @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */
}

def @func_1815() -> (Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) {
  %844 = fn () -> (Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) {
    %839 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
    %840 = cast(%839, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
    %841 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 8, 6), float32] */, dtype="int16") /* ty=Tensor[(1, 8, 6), int16] */;
    %842 = add(%840, %841) /* ty=Tensor[(1, 8, 6), int16] */;
    %843 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
    (%842, %843)
  };
  %844() /* ty=(Tensor[(1, 8, 6), int16], Tensor[(1, 8, 1), float32]) */
}

def @func_3686() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  %845 = @func_3210() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %846 = cast(meta[relay.Constant][28] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %847 = reshape(%846, newshape=[2, 8, 16]) /* ty=Tensor[(2, 8, 16), float32] */;
  %848 = @func_2920(%847) /* ty=(Tensor[(2, 8, 16), bool],) */;
  %849 = %845.0;
  %850 = %848.0;
  (%849, %850, meta[relay.Constant][28] /* ty=Tensor[(256), float32] */)
}

def @func_1369() -> (Tensor[(1, 8, 1), float32],) {
  %851 = @func_1330() /* ty=Tensor[(1, 8, 1), float32] */;
  (%851,)
}

def @func_2370() -> Tensor[(1, 8, 10), float32] {
  %856 = fn () -> Tensor[(1, 8, 10), float32] {
    %852 = @func_2114() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) */;
    %853 = %852.0;
    %854 = cast(%853, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
    %855 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 10), float32] */;
    power(%854, %855) /* ty=Tensor[(1, 8, 10), float32] */
  };
  %856() /* ty=Tensor[(1, 8, 10), float32] */
}

def @func_1359() -> Tensor[(1, 8, 1), float32] {
  %857 = fn () -> Tensor[(1, 8, 1), float32] {
    @func_1330() /* ty=Tensor[(1, 8, 1), float32] */
  };
  %857() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8965() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %860 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %858 = @func_6039() /* ty=Tensor[(1, 8, 1), float32] */;
    %859 = @func_5815() /* ty=Tensor[(1, 8, 1), float32] */;
    (%858, %859)
  };
  %860() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_2063(%var_2046: Tensor[(8, 8, 3), float32]) -> (Tensor[(8, 8, 3), bool], Tensor[(1, 8, 1), float32]) {
  %861 = @func_1131() /* ty=Tensor[(1, 8, 1), float32] */;
  %862 = cast(%861, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %863 = cast(%var_2046, dtype="bool") /* ty=Tensor[(8, 8, 3), bool] */;
  %864 = equal(%862, %863) /* ty=Tensor[(8, 8, 3), bool] */;
  %865 = cast(%861, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %866 = cast(%864, dtype="bool") /* ty=Tensor[(8, 8, 3), bool] */;
  %867 = greater_equal(%865, %866) /* ty=Tensor[(8, 8, 3), bool] */;
  %868 = @func_1358() /* ty=Tensor[(1, 8, 1), float32] */;
  (%867, %868)
}

def @func_2114() -> (Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), uint16]) {
  %869 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  %870 = @func_2032() /* ty=Tensor[(?, 8, ?), uint16] */;
  (%869, %870)
}

def @func_2012() -> (Tensor[(1, 8, 1), float32],) {
  %871 = @func_2008() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %872 = %871.0;
  (%872,)
}

def @func_7966() -> (Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
  %877 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) {
    %873 = @func_7797() /* ty=(Tensor[(1, 8, 1), float32],) */;
    %874 = @func_7500() /* ty=(Tensor[(12, 8, 2), uint8],) */;
    %875 = %873.0;
    %876 = %874.0;
    (%875, %876)
  };
  %877() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */
}

def @func_7758() -> (Tensor[(1, 8, 1), float32],) {
  %878 = @func_7412() /* ty=Tensor[(1, 8, 1), float32] */;
  (%878,)
}

def @func_10709() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %882 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %879 = @func_9105() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
    %880 = @func_3300() /* ty=Tensor[(1, 8, 1), float32] */;
    %881 = %879.0;
    (%880, %881)
  };
  %882() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_6775(%var_6771: Tensor[(1, 5, 13), float64]) -> (Tensor[(1, 5, 13), float64],) {
  %883 = cast(%var_6771, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %884 = asin(%883) /* ty=Tensor[(1, 5, 13), float64] */;
  (%884,)
}

def @func_9050() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32], Tensor[(?, 8, ?), bool]) {
  %885 = @func_7965() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(12, 8, 2), uint8]) */;
  %886 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
  %887 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
  %888 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %889 = %888.0;
  %890 = cast(%889, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %891 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%887, dtype="bool") /* ty=Tensor[(1, 8, 1), bool] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %894 = %885.1;
  %895 = %886.1;
  %896 = greater(%892, %893) /* ty=Tensor[(?, 8, ?), bool] */;
  (%894, %895, %896)
}

def @func_3688() -> (Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) {
  @func_3686() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(256), float32]) */
}

def @func_7212(%var_7211: Tensor[(11, 8, 3), float32]) -> (Tensor[(11, 8, 3), uint16], Tensor[(11, 8, 3), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 3), float64]) {
  %907 = fn (%var_7184: Tensor[(11, 8, 3), float32]) -> (Tensor[(11, 8, 3), uint16], Tensor[(11, 8, 3), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 3), float64]) {
    %897 = @func_6758() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
    %898 = %897.2;
    %899 = cast(%898, dtype="uint16") /* ty=Tensor[(1, 8, 1), uint16] */;
    %900 = cast(%var_7184, dtype="uint16") /* ty=Tensor[(11, 8, 3), uint16] */;
    %901 = cast(%var_7184, dtype="float32") /* ty=Tensor[(11, 8, 3), float32] */;
    %902 = cast(%var_7184, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
    %903 = right_shift(%899, %900) /* ty=Tensor[(11, 8, 3), uint16] */;
    %904 = asinh(%901) /* ty=Tensor[(11, 8, 3), float32] */;
    %905 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
    %906 = cosh(%902) /* ty=Tensor[(11, 8, 3), float64] */;
    (%903, %904, %905, %906)
  };
  %907(%var_7211) /* ty=(Tensor[(11, 8, 3), uint16], Tensor[(11, 8, 3), float32], Tensor[(2, 1, 11), float64], Tensor[(11, 8, 3), float64]) */
}

def @func_2789() -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
  %910 = fn () -> (Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) {
    %908 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
    %909 = @func_1497() /* ty=Tensor[(1, 8, 1), float32] */;
    (%908, %909)
  };
  %910() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */
}

def @func_10662() -> (Tensor[(1, 8, 1), float32],) {
  @func_10660() /* ty=(Tensor[(1, 8, 1), float32],) */
}

def @func_1931() -> (Tensor[(2, 1, 11), float64], Tensor[(2, 1, 11), float64]) {
  %911 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  %912 = @func_1576() /* ty=Tensor[(2, 1, 11), float64] */;
  (%911, %912)
}

def @func_4277(%var_4258: float64, %var_4259: Tensor[(8064), int8]) -> (Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32], float64, Tensor[(8064), float32], Tensor[(1, 8, 1), float32]) {
  %913 = @func_2880() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(2, 1, 11), float64], Tensor[(1, 8, 1), float32]) */;
  %914 = cast(%var_4258, dtype="float64") /* ty=float64 */;
  %915 = cast(%var_4259, dtype="int8") /* ty=Tensor[(8064), int8] */;
  %916 = reshape(%914, newshape=[]) /* ty=float64 */;
  %917 = reshape(%915, newshape=[14, 8, 72]) /* ty=Tensor[(14, 8, 72), int8] */;
  %918 = @func_1652(%916, %917) /* ty=(Tensor[(2, 1, 11), float64], float64, Tensor[(1, 8, 1), float32], Tensor[(1, 8, 72), bool], Tensor[(1, 8, 1), float32], Tensor[(14, 8, 72), bool]) */;
  %919 = cast(%var_4259, dtype="float32") /* ty=Tensor[(8064), float32] */;
  %920 = @func_2101() /* ty=(Tensor[(1, 8, 1), float32],) */;
  %921 = %920.0;
  %922 = cast(%921, dtype="float32") /* ty=Tensor[(1, 8, 1), float32] */;
  %923 = @func_2320() /* ty=Tensor[(1, 8, 1), float32] */;
  %924 = %913.1;
  %925 = %918.4;
  %926 = cosh(%919) /* ty=Tensor[(8064), float32] */;
  %927 = log2(%922) /* ty=Tensor[(1, 8, 1), float32] */;
  (%923, %924, %925, %var_4258, %926, %927)
}

def @func_6671() -> (Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32], Tensor[(440), float32]) {
  %928 = @func_6472() /* ty=(Tensor[(?, 8, ?), float64], Tensor[(5, 8, 1), int32], Tensor[(1, 8, 1), float32], Tensor[(2, 8, 16), bool], Tensor[(1, 8, 1), float32]) */;
  %929 = cast(meta[relay.Constant][30] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %930 = reshape(%929, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), float32] */;
  %931 = @func_1217(%930) /* ty=(Tensor[(5, 8, 11), bool], Tensor[(1, 8, 1), float32]) */;
  %932 = %928.3;
  %933 = %931.1;
  (%932, %933, meta[relay.Constant][30] /* ty=Tensor[(440), float32] */)
}

def @func_10012(%var_9948: Tensor[(10, 4, 9), uint16], %var_9952: Tensor[(10, 4, 9), uint16]) -> (Tensor[(10, 4, 9), uint16], Tensor[(10, 4, 9), int8], Tensor[(?, 8, ?), uint16], Tensor[(?, 8, 256), uint16], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32]) {
  %934 = cast(%var_9948, dtype="uint16") /* ty=Tensor[(10, 4, 9), uint16] */;
  %935 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 4, 9), uint16] */, dtype="uint16") /* ty=Tensor[(10, 4, 9), uint16] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %938 = cast(%var_9952, dtype="int8") /* ty=Tensor[(10, 4, 9), int8] */;
  %939 = shape_of(%var_9948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(%var_9948, dtype="int8") /* ty=Tensor[(10, 4, 9), int8] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %942 = @func_5034() /* ty=(Tensor[(?, 8, 256), uint16],) */;
  %943 = @func_5721() /* ty=(Tensor[(11, 8, 10), bool], Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %944 = @func_9105() /* ty=(Tensor[(1, 8, 1), float32], Tensor[(1, 8, 1), float32]) */;
  %945 = right_shift(%936, %937) /* ty=Tensor[(10, 4, 9), uint16] */;
  %946 = multiply(%940, %941) /* ty=Tensor[(10, 4, 9), int8] */;
  %947 = @func_4014() /* ty=Tensor[(?, 8, ?), uint16] */;
  %948 = %942.0;
  %949 = @func_1011() /* ty=Tensor[(1, 8, 1), float32] */;
  %950 = %943.0;
  %951 = %944.1;
  (%945, %946, %947, %948, %949, %950, %951)
}

def @func_10415() -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32]) {
  %956 = fn () -> (Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32]) {
    %952 = @func_8667() /* ty=(Tensor[(12, 8, 2), uint8],) */;
    %953 = @func_7363() /* ty=(Tensor[(?, 8, ?), uint16], Tensor[(1, 8, 1), float32]) */;
    %954 = %952.0;
    %955 = %953.1;
    (%954, %955)
  };
  %956() /* ty=(Tensor[(12, 8, 2), uint8], Tensor[(1, 8, 1), float32]) */
}

def @func_6945() -> Tensor[(1, 8, 1), float32] {
  @func_6943() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_9352() -> Tensor[(1, 8, 1), float32] {
  @func_9350() /* ty=Tensor[(1, 8, 1), float32] */
}

def @func_8351(%var_8349: Tensor[(1, 10, 4), float32], %var_8350: Tensor[(8064, 1), int8]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 10, 4), float32], Tensor[(?, 10, 4), int16], Tensor[(1, 8, 1), float32], float64, Tensor[(8064, 1), int8], Tensor[(2, 8, 16), bool]) {
  @func_8347(%var_8349, %var_8350) /* ty=(Tensor[(1, 10, 4), float32], Tensor[(1, 8, 1), float32], Tensor[(1, 10, 4), float32], Tensor[(?, 10, 4), int16], Tensor[(1, 8, 1), float32], float64, Tensor[(8064, 1), int8], Tensor[(2, 8, 16), bool]) */
}

def @func_4490(%var_4488: Tensor[(11, 8, 7), float32]) -> (Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) {
  @func_4487(%var_4488) /* ty=(Tensor[(1, 8, 10), float32], Tensor[(1, 8, 1), float32], Tensor[(11, 8, 7), int8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen859/build/output.py", line 3484, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:30:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

