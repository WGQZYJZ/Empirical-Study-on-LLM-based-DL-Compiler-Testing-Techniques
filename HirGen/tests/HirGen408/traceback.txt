==========mod==========
#[version = "0.0.5"]
def @func_3365(%var_3326: Tensor[(120), uint32], %var_3327: Tensor[(729), uint32], %var_3328: Tensor[(16, 14), float32]) -> (Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 500), float64] */, dtype="float64") /* ty=Tensor[(3, 500), float64] */;
  %1 = reshape(%0, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %2 = @func_1637(%1) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) */;
  %3 = cast(%var_3326, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %4 = cast(%var_3326, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %5 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %6 = cast(%var_3328, dtype="float32") /* ty=Tensor[(16, 14), float32] */;
  %7 = reshape(%3, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %8 = reshape(%4, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %9 = reshape(%5, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %10 = reshape(%6, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %11 = @func_1744(%7, %8, %9, %10) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %12 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %13 = %12.0;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 5, 3), int32] */, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = maximum(%16, %17) /* ty=Tensor[(10, 5, 3), uint32] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 5, 3), int32] */, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %23 = %2.2;
  %24 = %11.4;
  %25 = power(%21, %22) /* ty=Tensor[(10, 5, 3), float32] */;
  (%23, meta[relay.Constant][0] /* ty=Tensor[(3, 500), float64] */, %24, %var_3326, %var_3327, %var_3328, %25)
}

def @func_1188(%var_1154: Tensor[(729), uint32]) -> (Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) {
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %28 = cast(%var_1154, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %29 = cast(%var_1154, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %30 = reshape(%28, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %31 = reshape(%29, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %32 = @func_987(%30, %31) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %33 = cast(5.87015f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %35 = reshape(%33, newshape=[]) /* ty=float64 */;
  %36 = reshape(%34, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float64] */;
  %37 = @func_860(%35, %36) /* ty=(Tensor[(12, 11, 13), int32],) */;
  %38 = cast(%var_1154, dtype="int64") /* ty=Tensor[(729), int64] */;
  %39 = cast(5.87015f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %40 = sigmoid(%26) /* ty=Tensor[(16, 12, 6), float64] */;
  %41 = log10(%27) /* ty=Tensor[(16, 12, 6), float64] */;
  %42 = %32.0;
  %43 = %37.0;
  %44 = bitwise_or(%38, %39) /* ty=Tensor[(729), int64] */;
  (%40, %41, %42, %43, meta[relay.Constant][3] /* ty=Tensor[(1716), float64] */, %44)
}

def @func_4716() -> Tensor[(10, 5, 3), float64] {
  %45 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %47 = atanh(%46) /* ty=Tensor[(10, 5, 3), float32] */;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  exp(%48) /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_3059() -> (Tensor[(10, 5, 3), float32],) {
  %49 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %52 = log10(%51) /* ty=Tensor[(10, 5, 3), float32] */;
  (%52,)
}

def @func_5508(%var_5495: float32, %var_5496: Tensor[(10, 1, 14), float32]) -> (Tensor[(10, 1, 14), bool],) {
  %53 = cast(%var_5495, dtype="bool") /* ty=bool */;
  %54 = cast(%var_5496, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %55 = greater(%53, %54) /* ty=Tensor[(10, 1, 14), bool] */;
  (%55,)
}

def @func_5007() -> (Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) {
  %56 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 30), int32] */, dtype="int32") /* ty=Tensor[(5, 30), int32] */;
  %58 = reshape(%57, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %59 = %56.1;
  %60 = cast(%59, dtype="uint64") /* ty=Tensor[(729), uint64] */;
  %61 = reshape(%60, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %62 = @func_2815(%61) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 30), int32] */, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %64 = @func_3999(%58) /* ty=Tensor[(10, 5, 3), int16] */;
  %65 = %62.1;
  %66 = erf(%63) /* ty=Tensor[(5, 30), float32] */;
  (%59, %64, %65, %66)
}

def @func_2931(%var_2915: Tensor[(210), float64]) -> (Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %67 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %68 = %67.1;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(729), float64] */;
  %70 = cast(%var_2915, dtype="float64") /* ty=Tensor[(210), float64] */;
  %71 = reshape(%70, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %72 = @func_764(%71) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %73 = erf(%69) /* ty=Tensor[(729), float64] */;
  %74 = %72.0;
  (%73, %74, %var_2915)
}

def @func_5908() -> (Tensor[(10, 5, 3), int32],) {
  %75 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %76 = %75.0;
  (%76,)
}

def @func_6885() -> Tensor[(10, 5, 3), float64] {
  %77 = @func_6823() /* ty=(Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) */;
  %77.1
}

def @func_7016(%var_7005: Tensor[(729), uint64]) -> (Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), float32], Tensor[(729), uint64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %78 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %79 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %80 = cast(%var_7005, dtype="uint64") /* ty=Tensor[(729), uint64] */;
  %81 = reshape(%80, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %82 = @func_2815(%81) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %84 = reshape(%83, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %85 = @func_764(%84) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %86 = %78.2;
  %87 = %79.0;
  %88 = %82.3;
  %89 = %85.0;
  (%86, %87, %88, %var_7005, %89, meta[relay.Constant][5] /* ty=Tensor[(210), float64] */)
}

def @func_7264(%var_7256: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 5, 4), float32], Tensor[(72), int64], Tensor[(10, 5, 3), bool]) {
  %90 = @func_6565() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %91 = cast(%var_7256, dtype="int64") /* ty=Tensor[(72), int64] */;
  %92 = reshape(%91, newshape=[72]) /* ty=Tensor[(72), int64] */;
  %93 = @func_2622(%92) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
  %94 = %90.0;
  %95 = cast(%94, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %96 = reshape(%95, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %97 = @func_2994(%96) /* ty=(Tensor[(10, 5, 3), bool],) */;
  %98 = %93.3;
  %99 = %97.0;
  (%94, %98, %var_7256, %99)
}

def @func_6392() -> (Tensor[(5, 42), float32],) {
  %100 = @func_6014() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) */;
  %101 = %100.3;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %103 = sigmoid(%102) /* ty=Tensor[(5, 42), float32] */;
  (%103,)
}

def @func_6442(%var_6415: Tensor[(25, 6), int32], %var_6439: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int16], Tensor[(25, 6), int32], Tensor[(3, 243), float32], Tensor[(12, 6, 16), bool], Tensor[(72), int64]) {
  %104 = cast(%var_6415, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
  %105 = reshape(%104, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %106 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
  %107 = %106.2;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %109 = cast(%var_6439, dtype="int64") /* ty=Tensor[(72), int64] */;
  %110 = reshape(%109, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %111 = @func_2342(%110) /* ty=(Tensor[(12, 6, 16), bool],) */;
  %112 = @func_3999(%105) /* ty=Tensor[(10, 5, 3), int16] */;
  %113 = sin(%108) /* ty=Tensor[(3, 243), float32] */;
  %114 = %111.0;
  (%112, %var_6415, %113, %114, %var_6439)
}

def @func_7876() -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  %115 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
  %116 = cast(%115, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %117 = reshape(%116, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %118 = @func_2444(%117) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %119 = %118.1;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(729), uint32] */, dtype="bool") /* ty=Tensor[(729), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(1), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(729), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?), bool] */;
  %124 = greater(%122, %123) /* ty=Tensor[(729), bool] */;
  (%115, %124)
}

def @func_4785(%var_4771: Tensor[(120), uint32], %var_4772: Tensor[(729), uint32]) -> (Tensor[(150), int32], Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32]) {
  %125 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %126 = cast(%var_4771, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %127 = cast(%var_4772, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %128 = reshape(%126, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %129 = reshape(%127, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %130 = @func_2692(%128, %129) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %131 = %125.2;
  %132 = %130.5;
  (%131, %132, %var_4771, %var_4772)
}

def @func_2881() -> (Tensor[(10, 5, 3), int32],) {
  %133 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %134 = %133.0;
  (%134,)
}

def @func_2994(%var_2985: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool],) {
  %135 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %136 = %135.0;
  %137 = cast(%var_2985, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = greater(%139, %140) /* ty=Tensor[(10, 5, 3), bool] */;
  (%141,)
}

def @func_8232() -> Tensor[(10, 5, 3), float32] {
  @func_4906() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_6625() -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float32]) {
  %142 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %145 = @func_6370() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
  %146 = tan(%144) /* ty=Tensor[(10, 5, 3), float64] */;
  %147 = %145.1;
  (%146, %147)
}

def @func_8268(%var_8262: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  %148 = @func_6235() /* ty=(Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) */;
  %149 = %148.2;
  %150 = cast(%var_8262, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %154 = add(%152, %153) /* ty=Tensor[(3, 14, 5), float64] */;
  (%154,)
}

def @func_172(%var_154: Tensor[(7, 4, 8), float32], %var_155: Tensor[(7, 4, 8), float32]) -> (Tensor[(7, 4, 8), bool],) {
  %155 = cast(%var_155, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %156 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%var_154, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = not_equal(%157, %158) /* ty=Tensor[(7, 4, 8), bool] */;
  (%159,)
}

def @func_6686(%var_6682: Tensor[(132), float32], %var_6683: Tensor[(96), float32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(132), float32], Tensor[(96), float32]) {
  %160 = @func_5332() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) */;
  %161 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %162 = cast(%var_6682, dtype="float32") /* ty=Tensor[(132), float32] */;
  %163 = cast(%var_6683, dtype="float32") /* ty=Tensor[(96), float32] */;
  %164 = reshape(%162, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float32] */;
  %165 = reshape(%163, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %166 = @func_3736(%164, %165) /* ty=(Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) */;
  %167 = %160.3;
  %168 = %161.0;
  %169 = %166.4;
  (%167, %168, %169, %var_6682, %var_6683)
}

def @func_2305(%var_2300: Tensor[(13, 8, 14), int64], %var_2301: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), int64],) {
  %170 = cast(%var_2301, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %171 = shape_of(%var_2300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_2300, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %174 = right_shift(%172, %173) /* ty=Tensor[(13, 8, 14), int64] */;
  (%174,)
}

def @func_7505(%var_7350: float32, %var_7351: Tensor[(140), float32], %var_7432: Tensor[(2184), float64]) -> (Tensor[(10, 5, 3), int32], float32, Tensor[(3, 14, 5), float32], Tensor[(729), int8], Tensor[(16, 4, 13), uint32], Tensor[(10, 5, 3), int32], Tensor[(12, 13, 14), float64], Tensor[(2184), float64], Tensor[(10, ?, 14), int64], Tensor[(16, 4, 13), uint32], Tensor[(729), float64], Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), bool]) {
  %175 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %176 = %175.1;
  %177 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %178 = %177.1;
  %179 = cast(%178, dtype="int8") /* ty=Tensor[(729), int8] */;
  %180 = shape_of(%176, dtype="int32") /* ty=Tensor[(1), int32] */;
  %181 = cast(%176, dtype="int8") /* ty=Tensor[(729), int8] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?), int8] */;
  %183 = cast(%var_7432, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %184 = cast(%var_7432, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %185 = reshape(%183, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
  %186 = reshape(%184, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
  %187 = cast(%var_7350, dtype="float32") /* ty=float32 */;
  %188 = cast(%var_7351, dtype="float32") /* ty=Tensor[(140), float32] */;
  %189 = reshape(%187, newshape=[]) /* ty=float32 */;
  %190 = reshape(%188, newshape=[10, 1, 14]) /* ty=Tensor[(10, 1, 14), float32] */;
  %191 = @func_5508(%189, %190) /* ty=(Tensor[(10, 1, 14), bool],) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
  %194 = sigmoid(%193) /* ty=Tensor[(10, 1, 14), float64] */;
  %195 = cast(%var_7351, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint64") /* ty=Tensor[(10, 1, 14), uint64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %199 = subtract(%197, %198) /* ty=Tensor[(10, ?, 14), uint64] */;
  %200 = cast(%192, dtype="int64") /* ty=Tensor[(10, 1, 14), int64] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int64") /* ty=Tensor[(10, ?, 14), int64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %204 = @func_7304() /* ty=Tensor[(3, 14, 5), float32] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %206 = reshape(%205, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %207 = @func_2931(%206) /* ty=(Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */;
  %208 = multiply(%181, %182) /* ty=Tensor[(729), int8] */;
  %209 = cast(%208, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %210 = reshape(%209, newshape=[1, 729]) /* ty=Tensor[(1, 729), uint32] */;
  %211 = @func_6342(%210) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) */;
  %212 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  %213 = cast(%212, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %214 = reshape(%213, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %215 = @func_2994(%214) /* ty=(Tensor[(10, 5, 3), bool],) */;
  %216 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %217 = @func_6951() /* ty=Tensor[(16, 4, 13), uint32] */;
  %218 = @func_7088(%185, %186) /* ty=Tensor[(12, 13, 14), float64] */;
  %219 = logical_xor(%202, %203) /* ty=Tensor[(10, ?, 14), int64] */;
  %220 = @func_6951() /* ty=Tensor[(16, 4, 13), uint32] */;
  %221 = %207.0;
  %222 = %211.1;
  %223 = %215.0;
  (%216, %var_7350, %204, %208, %217, %212, %218, %var_7432, %219, %220, %221, %222, %223)
}

def @func_2512() -> (Tensor[(10, 5, 3), int32],) {
  %224 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %225 = %224.0;
  (%225,)
}

def @func_2342(%var_2329: Tensor[(12, 6, 1), int64]) -> (Tensor[(12, 6, 16), bool],) {
  %226 = cast(%var_2329, dtype="bool") /* ty=Tensor[(12, 6, 1), bool] */;
  %227 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 6, 16), int64] */, dtype="bool") /* ty=Tensor[(12, 6, 16), bool] */;
  %228 = less_equal(%226, %227) /* ty=Tensor[(12, 6, 16), bool] */;
  (%228,)
}

def @func_3758() -> Tensor[(10, 5, 3), int32] {
  %229 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %229.0
}

def @func_2324() -> (Tensor[(10, 5, 3), int32],) {
  %230 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %231 = cosh(%230) /* ty=Tensor[(10, 5, 3), float32] */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %236 = logical_xor(%234, %235) /* ty=Tensor[(10, 5, 3), int32] */;
  (%236,)
}

def @func_6342(%var_6329: Tensor[(1, 729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) {
  %237 = @func_5908() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %238 = cast(%var_6329, dtype="uint32") /* ty=Tensor[(1, 729), uint32] */;
  %239 = cast(%var_6329, dtype="uint32") /* ty=Tensor[(1, 729), uint32] */;
  %240 = reshape(%238, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %241 = reshape(%239, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %242 = @func_987(%240, %241) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %243 = %237.0;
  %244 = %242.0;
  %245 = @func_4906() /* ty=Tensor[(10, 5, 3), float32] */;
  (%243, %244, %var_6329, %245)
}

def @func_4892(%var_4860: Tensor[(10, 5, 3), int32], %var_4872: Tensor[(729), uint32], %var_4885: Tensor[(1500), float64]) -> (Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 40), uint32], Tensor[(729), uint32], Tensor[(224), float32], Tensor[(1500), uint8]) {
  %246 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %247 = %246.0;
  %248 = cast(%var_4860, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 40), uint32] */, dtype="uint32") /* ty=Tensor[(3, 40), uint32] */;
  %253 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %254 = cast(meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %255 = reshape(%252, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %256 = reshape(%253, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %257 = reshape(%254, newshape=[16, 14]) /* ty=Tensor[(16, 14), float32] */;
  %258 = @func_3365(%255, %256, %257) /* ty=(Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) */;
  %259 = cast(%var_4885, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %260 = reshape(%259, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %261 = @func_1637(%260) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="uint8") /* ty=Tensor[(10, 15, 10), uint8] */;
  %264 = shape_of(%var_4885, dtype="int32") /* ty=Tensor[(1), int32] */;
  %265 = cast(%var_4885, dtype="uint8") /* ty=Tensor[(1500), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %267 = equal(%250, %251) /* ty=Tensor[(10, 5, 3), bool] */;
  %268 = %258.3;
  %269 = multiply(%265, %266) /* ty=Tensor[(1500), uint8] */;
  (%267, %268, meta[relay.Constant][9] /* ty=Tensor[(3, 40), uint32] */, %var_4872, meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, %269)
}

def @func_6235() -> (Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) {
  %270 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %273 = reshape(%272, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %274 = @func_2931(%273) /* ty=(Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */;
  %275 = log2(%271) /* ty=Tensor[(10, 5, 3), float32] */;
  %276 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %277 = %274.1;
  (%275, %276, %277, meta[relay.Constant][11] /* ty=Tensor[(1, 210), float64] */)
}

def @func_1637(%var_1601: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) {
  %278 = cast(%var_1601, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %279 = cast(meta[relay.Constant][12] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %280 = reshape(%279, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %281 = @func_1290(%280) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %282 = cosh(%278) /* ty=Tensor[(10, 15, 10), float64] */;
  %283 = %281.1;
  (%282, %283, meta[relay.Constant][12] /* ty=Tensor[(240), float32] */)
}

def @func_5141() -> Tensor[(10, 5, 3), float32] {
  @func_4906() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_6152() -> (Tensor[(10, 5, 3), int32],) {
  %284 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %285 = %284.0;
  (%285,)
}

def @func_8107(%var_8077: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), int8]) {
  %286 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %287 = cast(%var_8077, dtype="bool") /* ty=Tensor[(729), bool] */;
  %288 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(729), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(729), uint32] */, dtype="bool") /* ty=Tensor[(729), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?), bool] */;
  %291 = not_equal(%289, %290) /* ty=Tensor[(729), bool] */;
  %292 = @func_6565() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %293 = %292.1;
  %294 = cast(meta[relay.Constant][13] /* ty=Tensor[(729), uint32] */, dtype="float64") /* ty=Tensor[(729), float64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(1), int32] */;
  %296 = cast(%293, dtype="float64") /* ty=Tensor[(729), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), float64] */;
  %298 = floor_mod(%296, %297) /* ty=Tensor[(729), float64] */;
  %299 = cast(%298, dtype="int8") /* ty=Tensor[(729), int8] */;
  %300 = shape_of(%291, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(%291, dtype="int8") /* ty=Tensor[(729), int8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), int8] */;
  %303 = %286.0;
  %304 = maximum(%301, %302) /* ty=Tensor[(729), int8] */;
  (%303, %304)
}

def @func_3736(%var_3716: Tensor[(2, 11, 6), float32], %var_3725: Tensor[(96), float32]) -> (Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) {
  %305 = cast(%var_3716, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
  %306 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %307 = cast(%var_3725, dtype="float32") /* ty=Tensor[(96), float32] */;
  %308 = cast(%var_3725, dtype="float32") /* ty=Tensor[(96), float32] */;
  %309 = reshape(%307, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
  %310 = reshape(%308, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
  %311 = @func_2969(%309, %310) /* ty=(Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) */;
  %312 = sigmoid(%305) /* ty=Tensor[(2, 11, 6), float32] */;
  %313 = %306.0;
  %314 = %311.3;
  %315 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
  (%312, %313, %314, %var_3725, %315)
}

def @func_6271(%var_6252: Tensor[(120), uint32], %var_6253: Tensor[(729), uint32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) {
  %316 = cast(%var_6252, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %317 = cast(%var_6252, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %318 = cast(%var_6253, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %319 = cast(meta[relay.Constant][14] /* ty=Tensor[(224, 1), float32] */, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %320 = reshape(%316, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %321 = reshape(%317, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %322 = reshape(%318, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %323 = reshape(%319, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %324 = @func_1744(%320, %321, %322, %323) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %325 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %326 = %325.0;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %328 = cast(%var_6253, dtype="uint64") /* ty=Tensor[(729), uint64] */;
  %329 = reshape(%328, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %330 = @func_2815(%329) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %331 = %324.2;
  %332 = cos(%327) /* ty=Tensor[(10, 5, 3), float32] */;
  %333 = %330.3;
  (%331, %var_6252, %var_6253, meta[relay.Constant][14] /* ty=Tensor[(224, 1), float32] */, %332, %333)
}

def @func_2374() -> (Tensor[(10, 5, 3), int32],) {
  %334 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %335 = %334.0;
  (%335,)
}

def @func_3999(%var_3994: Tensor[(10, 5, 3), int32]) -> Tensor[(10, 5, 3), int16] {
  %336 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %337 = %336.0;
  %338 = cast(%var_3994, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%340, %341) /* ty=Tensor[(10, 5, 3), int16] */
}

def @func_5532() -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) {
  %342 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %343 = @func_5200() /* ty=Tensor[(10, 5, 3), int32] */;
  %344 = %342.0;
  (%343, %344)
}

def @func_3466() -> Tensor[(10, 5, 3), int32] {
  %345 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %345.0
}

def @func_2755() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) {
  %346 = cast(meta[relay.Constant][15] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %347 = cast(meta[relay.Constant][15] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %348 = reshape(%346, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %349 = reshape(%347, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %350 = @func_987(%348, %349) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %351 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %352 = %351.0;
  %353 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="uint16") /* ty=Tensor[(10, 5, 3), uint16] */;
  %356 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%352, dtype="uint16") /* ty=Tensor[(10, 5, 3), uint16] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %359 = %350.0;
  %360 = bitwise_xor(%357, %358) /* ty=Tensor[(10, 5, 3), uint16] */;
  (%359, meta[relay.Constant][15] /* ty=Tensor[(729), uint32] */, %360)
}

def @func_2815(%var_2786: Tensor[(9, 9, 9), uint64]) -> (Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) {
  %361 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %362 = %361.0;
  %363 = cast(%var_2786, dtype="uint16") /* ty=Tensor[(9, 9, 9), uint16] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="uint16") /* ty=Tensor[(9, 9, 9), uint16] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %367 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %368 = reshape(%367, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %369 = @func_1290(%368) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %370 = cast(%362, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
  %371 = shape_of(%var_2786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_2786, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %374 = bitwise_or(%365, %366) /* ty=Tensor[(9, 9, 9), uint16] */;
  %375 = %369.1;
  %376 = power(%372, %373) /* ty=Tensor[(9, 9, 9), float32] */;
  (%374, %375, meta[relay.Constant][16] /* ty=Tensor[(240), float32] */, %376)
}

def @func_2553() -> Tensor[(10, 5, 3), float64] {
  %377 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  sqrt(%379) /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_6059(%var_6056: Tensor[(1152), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool], Tensor[(1152), float64]) {
  %380 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %381 = cast(%var_6056, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %382 = reshape(%381, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float64] */;
  %383 = @func_5282(%382) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) */;
  %384 = %380.0;
  %385 = %383.1;
  (%384, %385, %var_6056)
}

def @func_3424() -> (Tensor[(10, 5, 3), int32],) {
  %386 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %387 = %386.0;
  (%387,)
}

def @func_4291() -> (Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) {
  %388 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %389 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %390 = reshape(%389, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %391 = @func_764(%390) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %392 = %391.0;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %394 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 210), float64] */, dtype="float32") /* ty=Tensor[(1, 210), float32] */;
  %395 = sin(%394) /* ty=Tensor[(1, 210), float32] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %397 = log10(%396) /* ty=Tensor[(1, 210), float64] */;
  %398 = cast(%395, dtype="uint8") /* ty=Tensor[(1, 210), uint8] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(2), int32] */;
  %400 = cast(%397, dtype="uint8") /* ty=Tensor[(1, 210), uint8] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %402 = %388.0;
  %403 = erf(%393) /* ty=Tensor[(3, 14, 5), float64] */;
  %404 = bitwise_xor(%400, %401) /* ty=Tensor[(?, 210), uint8] */;
  (%402, %403, %404)
}

def @func_4634(%var_4622: Tensor[(10, 5, 3), float32], %var_4632: Tensor[(224), float32]) -> (Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
  %405 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %406 = %405.0;
  %407 = cast(%var_4622, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = cast(%var_4632, dtype="float32") /* ty=Tensor[(224), float32] */;
  %412 = cast(%var_4632, dtype="float32") /* ty=Tensor[(224), float32] */;
  %413 = reshape(%411, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %414 = reshape(%412, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %415 = @func_172(%413, %414) /* ty=(Tensor[(7, 4, 8), bool],) */;
  %416 = less_equal(%409, %410) /* ty=Tensor[(10, 5, 3), bool] */;
  %417 = %415.0;
  (%416, %417, %var_4632)
}

def @func_2444(%var_2427: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) {
  %418 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %419 = %418.0;
  %420 = cast(%var_2427, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %425 = reshape(%424, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %426 = @func_1290(%425) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %427 = greater_equal(%422, %423) /* ty=Tensor[(10, 5, 3), bool] */;
  %428 = %426.2;
  (%427, %428, meta[relay.Constant][18] /* ty=Tensor[(240), float32] */)
}

def @func_6951() -> Tensor[(16, 4, 13), uint32] {
  %429 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %430 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 13), uint32] */, dtype="uint32") /* ty=Tensor[(16, 4, 13), uint32] */;
  subtract(%429, %430) /* ty=Tensor[(16, 4, 13), uint32] */
}

def @func_1744(%var_1691: Tensor[(5, 12, 2), uint32], %var_1692: Tensor[(5, 12, 2), uint32], %var_1712: Tensor[(729), uint32], %var_1731: Tensor[(224), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
  %431 = cast(%var_1712, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %432 = cast(%var_1712, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %433 = reshape(%431, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %434 = reshape(%432, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %435 = @func_987(%433, %434) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %436 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %437 = reshape(%436, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %438 = @func_1290(%437) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %439 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
  %440 = shape_of(%var_1692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_1692, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %443 = subtract(%441, %442) /* ty=Tensor[(5, 12, 2), uint32] */;
  %444 = cast(%var_1692, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
  %445 = shape_of(%var_1691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %448 = multiply(%446, %447) /* ty=Tensor[(5, 12, 2), uint32] */;
  %449 = cast(%448, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
  %450 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%443, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = logical_and(%451, %452) /* ty=Tensor[(5, 12, 2), bool] */;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
  %455 = cast(%var_1731, dtype="float32") /* ty=Tensor[(224), float32] */;
  %456 = cast(%var_1731, dtype="float32") /* ty=Tensor[(224), float32] */;
  %457 = reshape(%455, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %458 = reshape(%456, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %459 = @func_172(%457, %458) /* ty=(Tensor[(7, 4, 8), bool],) */;
  %460 = %435.0;
  %461 = %438.1;
  %462 = asin(%454) /* ty=Tensor[(5, 12, 2), float64] */;
  %463 = %459.0;
  (%460, %var_1712, %461, meta[relay.Constant][21] /* ty=Tensor[(240), float32] */, %462, %463, %var_1731)
}

def @func_4906() -> Tensor[(10, 5, 3), float32] {
  %464 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %464.0
}

def @func_4087() -> (Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) {
  %465 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %468 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
  %469 = erf(%467) /* ty=Tensor[(10, 5, 3), float64] */;
  %470 = %468.1;
  (%469, %470)
}

def @func_7150(%var_7128: Tensor[(729), uint32]) -> (Tensor[(5, 42), float32], Tensor[(10, 5, 3), int32], Tensor[(729), int32], Tensor[(10, 5, 3), bool]) {
  %471 = @func_6392() /* ty=(Tensor[(5, 42), float32],) */;
  %472 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %473 = cast(%var_7128, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %474 = reshape(%473, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %475 = @func_1188(%474) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %476 = %475.5;
  %477 = cast(%var_7128, dtype="int32") /* ty=Tensor[(729), int32] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(1), int32] */;
  %479 = cast(%476, dtype="int32") /* ty=Tensor[(729), int32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?), int32] */;
  %481 = %472.0;
  %482 = cast(%481, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %483 = reshape(%482, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %484 = @func_2994(%483) /* ty=(Tensor[(10, 5, 3), bool],) */;
  %485 = %471.0;
  %486 = subtract(%479, %480) /* ty=Tensor[(729), int32] */;
  %487 = %484.0;
  (%485, %481, %486, %487)
}

def @func_2969(%var_2938: Tensor[(4, 2, 12), float32], %var_2939: Tensor[(4, 2, 12), float32]) -> (Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) {
  %488 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %489 = cast(meta[relay.Constant][23] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %490 = reshape(%488, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %491 = reshape(%489, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %492 = @func_2692(%490, %491) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %493 = cast(%var_2939, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
  %494 = shape_of(%var_2938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_2938, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %497 = divide(%495, %496) /* ty=Tensor[(4, 2, 12), float32] */;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
  %499 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %500 = reshape(%499, newshape=[72]) /* ty=Tensor[(72), int64] */;
  %501 = @func_2622(%500) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
  %502 = %492.5;
  %503 = acosh(%498) /* ty=Tensor[(4, 2, 12), float32] */;
  %504 = %501.4;
  (%502, meta[relay.Constant][22] /* ty=Tensor[(120), uint32] */, meta[relay.Constant][23] /* ty=Tensor[(729), uint32] */, %503, %504, meta[relay.Constant][24] /* ty=Tensor[(72), int64] */)
}

def @func_4817() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) {
  %505 = @func_3603() /* ty=Tensor[(10, 5, 3), int32] */;
  %506 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  (%505, %506)
}

def @func_5050(%var_5040: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  %507 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %508 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %509 = %508.1;
  %510 = cast(%var_5040, dtype="bool") /* ty=Tensor[(729), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(1), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(729), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?), bool] */;
  %514 = %507.0;
  %515 = less_equal(%512, %513) /* ty=Tensor[(729), bool] */;
  (%514, %515)
}

def @func_2622(%var_2594: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) {
  %516 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %517 = cast(%var_2594, dtype="int64") /* ty=Tensor[(72), int64] */;
  %518 = reshape(%517, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
  %519 = @func_2342(%518) /* ty=(Tensor[(12, 6, 16), bool],) */;
  %520 = cast(meta[relay.Constant][25] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %521 = reshape(%520, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %522 = @func_1290(%521) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %523 = %516.0;
  %524 = %519.0;
  %525 = %522.0;
  (%523, %524, %var_2594, %525, meta[relay.Constant][25] /* ty=Tensor[(240), float32] */)
}

def @func_8059() -> (Tensor[(240), float32],) {
  %526 = @func_6014() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) */;
  %527 = %526.2;
  (%527,)
}

def @func_8045() -> Tensor[(10, 5, 3), float32] {
  %528 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %528.0
}

def @func_6783() -> (Tensor[(10, 5, 3), float32],) {
  %529 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %532 = rsqrt(%531) /* ty=Tensor[(10, 5, 3), float32] */;
  (%532,)
}

def @func_3220(%var_3204: Tensor[(240), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) {
  %533 = cast(%var_3204, dtype="float32") /* ty=Tensor[(240), float32] */;
  %534 = reshape(%533, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %535 = @func_1290(%534) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %536 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %539 = %535.1;
  %540 = sigmoid(%538) /* ty=Tensor[(10, 5, 3), float64] */;
  (%539, %var_3204, %540)
}

def @func_5465() -> (Tensor[(10, 5, 3), float64],) {
  %541 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
  (%541,)
}

def @func_6823() -> (Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) {
  %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 10), float64] */;
  %543 = acosh(%542) /* ty=Tensor[(6, 3, 10), float64] */;
  %544 = cast(%543, dtype="int32") /* ty=Tensor[(6, 3, 10), int32] */;
  %545 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(6, 3, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 3, 10), float64] */, dtype="int32") /* ty=Tensor[(6, 3, 10), int32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %548 = @func_5332() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) */;
  %549 = logical_xor(%546, %547) /* ty=Tensor[(6, 3, 10), int32] */;
  %550 = %548.2;
  (%549, %550)
}

def @func_7851(%var_7740: Tensor[(9, 9, 9), uint64], %var_7788: Tensor[(120), uint32], %var_7813: Tensor[(1188, 4), int32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), bool], Tensor[(120), uint32], Tensor[(9, 11, 12), uint32], Tensor[(10, 5, 3), float32], Tensor[(1188, 4), uint64], Tensor[(10, 5, 3), int32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(1188, 120), float64], Tensor[(10, 5, 3), int32]) {
  %551 = @func_6885() /* ty=Tensor[(10, 5, 3), float64] */;
  %552 = cast(%551, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %553 = reshape(%552, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %554 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %555 = %554.0;
  %556 = cast(%var_7740, dtype="bool") /* ty=Tensor[(9, 9, 9), bool] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="bool") /* ty=Tensor[(9, 9, 9), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = cast(%var_7788, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %561 = not_equal(%558, %559) /* ty=Tensor[(9, 9, 9), bool] */;
  %562 = cast(%561, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %563 = reshape(%560, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %564 = reshape(%562, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %565 = @func_6271(%563, %564) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) */;
  %566 = cast(meta[relay.Constant][27] /* ty=Tensor[(1188, 1), int32] */, dtype="int32") /* ty=Tensor[(1188, 1), int32] */;
  %567 = reshape(%566, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), int32] */;
  %568 = @func_5792() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
  %569 = cast(meta[relay.Constant][27] /* ty=Tensor[(1188, 1), int32] */, dtype="uint64") /* ty=Tensor[(1188, 1), uint64] */;
  %570 = cast(%var_7813, dtype="uint64") /* ty=Tensor[(1188, 4), uint64] */;
  %571 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %572 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %573 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %574 = reshape(%572, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
  %575 = reshape(%573, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
  %576 = @func_2969(%574, %575) /* ty=(Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) */;
  %577 = cast(meta[relay.Constant][27] /* ty=Tensor[(1188, 1), int32] */, dtype="bool") /* ty=Tensor[(1188, 1), bool] */;
  %578 = cast(%var_7788, dtype="bool") /* ty=Tensor[(120), bool] */;
  %579 = equal(%577, %578) /* ty=Tensor[(1188, 120), bool] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(1188, 120), float64] */;
  %581 = cast(%555, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %582 = reshape(%581, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %583 = @func_5050(%582) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), bool]) */;
  %584 = @func_3999(%553) /* ty=Tensor[(10, 5, 3), int16] */;
  %585 = %565.1;
  %586 = @func_4674(%567) /* ty=Tensor[(9, 11, 12), uint32] */;
  %587 = %568.1;
  %588 = bitwise_xor(%569, %570) /* ty=Tensor[(1188, 4), uint64] */;
  %589 = %571.0;
  %590 = %576.3;
  %591 = log10(%580) /* ty=Tensor[(1188, 120), float64] */;
  %592 = %583.0;
  (%551, %584, %561, %585, %586, %587, %588, %589, %590, meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, %591, %592)
}

def @func_3390() -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) {
  %593 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 243), uint32] */, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %594 = reshape(%593, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %595 = @func_1188(%594) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %596 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %597 = %595.0;
  (%596, %597, meta[relay.Constant][29] /* ty=Tensor[(3, 243), uint32] */)
}

def @func_2692(%var_2672: Tensor[(120), uint32], %var_2673: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) {
  %598 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %601 = reshape(%600, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %602 = @func_2444(%601) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %603 = cast(%var_2672, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %604 = cast(%var_2672, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %605 = cast(%var_2673, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 112), float32] */, dtype="float32") /* ty=Tensor[(2, 112), float32] */;
  %607 = reshape(%603, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %608 = reshape(%604, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %609 = reshape(%605, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %610 = reshape(%606, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %611 = @func_1744(%607, %608, %609, %610) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %612 = %602.0;
  %613 = %611.5;
  (%599, %612, %613, %var_2672, %var_2673, meta[relay.Constant][30] /* ty=Tensor[(2, 112), float32] */)
}

def @func_5282(%var_5273: Tensor[(16, 12, 6), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) {
  %614 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
  %615 = %614.1;
  %616 = cast(%var_5273, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
  %621 = greater_equal(%618, %619) /* ty=Tensor[(16, 12, 6), bool] */;
  (%620, %621)
}

def @func_5200() -> Tensor[(10, 5, 3), int32] {
  %622 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %622.0
}

def @func_4199(%var_4130: Tensor[(729), uint32], %var_4139: Tensor[(10, 5, 3), int32], %var_4149: Tensor[(224), float32]) -> (Tensor[(12, 11, 13), int32], Tensor[(10, 5, 3), bool], Tensor[(224), float32], Tensor[(30, 4), uint32], Tensor[(224), float32], Tensor[(16, 12, 6), float64], Tensor[(729), float32], Tensor[(3, 500), float64], Tensor[(10, 5, 3), int32]) {
  %623 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %624 = reshape(%623, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %625 = @func_1188(%624) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %626 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
  %627 = %626.0;
  %628 = cast(%var_4139, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = cast(meta[relay.Constant][31] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
  %633 = cast(meta[relay.Constant][31] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
  %634 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %635 = cast(%var_4149, dtype="float32") /* ty=Tensor[(224), float32] */;
  %636 = reshape(%632, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %637 = reshape(%633, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %638 = reshape(%634, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %639 = reshape(%635, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %640 = @func_1744(%636, %637, %638, %639) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %641 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
  %642 = cast(%var_4130, dtype="float64") /* ty=Tensor[(729), float64] */;
  %643 = atanh(%642) /* ty=Tensor[(729), float64] */;
  %644 = cast(%var_4130, dtype="int64") /* ty=Tensor[(729), int64] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(%643, dtype="int64") /* ty=Tensor[(729), int64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), int64] */;
  %648 = left_shift(%646, %647) /* ty=Tensor[(729), int64] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(729), float32] */;
  %650 = cast(meta[relay.Constant][31] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
  %651 = tan(%649) /* ty=Tensor[(729), float32] */;
  %652 = cast(%651, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %653 = cast(%var_4149, dtype="float32") /* ty=Tensor[(224), float32] */;
  %654 = reshape(%650, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %655 = reshape(%652, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %656 = reshape(%653, newshape=[16, 14]) /* ty=Tensor[(16, 14), float32] */;
  %657 = @func_3365(%654, %655, %656) /* ty=(Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) */;
  %658 = %625.3;
  %659 = logical_and(%630, %631) /* ty=Tensor[(10, 5, 3), bool] */;
  %660 = %640.6;
  %661 = %641.1;
  %662 = %657.1;
  %663 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
  (%658, %659, %660, meta[relay.Constant][31] /* ty=Tensor[(30, 4), uint32] */, %var_4149, %661, %651, %662, %663)
}

def @func_5376() -> (Tensor[(10, 5, 3), float64],) {
  %664 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
  (%664,)
}

def @func_7304() -> Tensor[(3, 14, 5), float32] {
  %665 = @func_4291() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) */;
  %666 = %665.1;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
  atan(%667) /* ty=Tensor[(3, 14, 5), float32] */
}

def @main(%var_8402: Tensor[(10, 5, 3), float32]) -> Tensor[(10, 5, 3), uint32] {
  %668 = @func_4906() /* ty=Tensor[(10, 5, 3), float32] */;
  %669 = cast(%var_8402, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%671, %672) /* ty=Tensor[(10, 5, 3), uint32] */
}

def @func_6565() -> (Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) {
  %673 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
  %674 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %675 = reshape(%674, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %676 = @func_1290(%675) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %677 = %673.1;
  %678 = %676.2;
  (%677, %678, meta[relay.Constant][32] /* ty=Tensor[(240), float32] */)
}

def @func_3622() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) {
  %679 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %680 = cast(meta[relay.Constant][33] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %681 = reshape(%680, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %682 = @func_2444(%681) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %683 = %679.0;
  %684 = %682.1;
  (%683, %684, meta[relay.Constant][33] /* ty=Tensor[(150), int32] */)
}

def @func_6849() -> (Tensor[(5, 42), float32],) {
  %685 = @func_6739() /* ty=Tensor[(5, 42), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %687 = log10(%686) /* ty=Tensor[(5, 42), float32] */;
  (%687,)
}

def @func_5792() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %688 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %689 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %690 = %688.0;
  %691 = %689.0;
  (%690, %691)
}

def @func_1290(%var_1278: Tensor[(12, 5, 4), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) {
  %692 = cast(%var_1278, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %693 = cast(meta[relay.Constant][34] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %694 = cast(meta[relay.Constant][34] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %695 = reshape(%693, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %696 = reshape(%694, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %697 = @func_987(%695, %696) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %698 = sqrt(%692) /* ty=Tensor[(12, 5, 4), float32] */;
  %699 = %697.0;
  (%698, %699, meta[relay.Constant][34] /* ty=Tensor[(729), uint32] */)
}

def @func_3581(%var_3513: Tensor[(240), float32], %var_3536: Tensor[(1, 210), float64]) -> (Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) {
  %700 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %701 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %704 = cast(%var_3513, dtype="float32") /* ty=Tensor[(240), float32] */;
  %705 = reshape(%704, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %706 = @func_3220(%705) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) */;
  %707 = cast(%702, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %708 = acosh(%707) /* ty=Tensor[(10, 5, 3), float64] */;
  %709 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %713 = cast(%708, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %714 = reshape(%713, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %715 = @func_2444(%714) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %716 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %717 = cast(%var_3536, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %718 = reshape(%717, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %719 = @func_764(%718) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %720 = %700.0;
  %721 = cast(%720, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %722 = reshape(%721, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %723 = @func_1188(%722) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %724 = cast(%720, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
  %725 = reshape(%724, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %726 = @func_2815(%725) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %727 = asinh(%703) /* ty=Tensor[(10, 5, 3), float32] */;
  %728 = %706.2;
  %729 = floor_divide(%711, %712) /* ty=Tensor[(10, 5, 3), float64] */;
  %730 = %715.0;
  %731 = %716.0;
  %732 = %719.0;
  %733 = %723.3;
  %734 = %726.2;
  (%720, %727, %728, %var_3513, %729, %730, %731, %732, %var_3536, %733, %734)
}

def @func_5695() -> (Tensor[(10, 5, 3), int32],) {
  %735 = @func_4291() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) */;
  %736 = %735.0;
  (%736,)
}

def @func_6014() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) {
  %737 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %738 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %739 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %740 = reshape(%738, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %741 = reshape(%739, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %742 = @func_4938(%740, %741) /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) */;
  %743 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %744 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %745 = reshape(%744, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %746 = @func_1290(%745) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %747 = %737.0;
  %748 = %742.0;
  %749 = %743.0;
  %750 = %746.2;
  (%747, %748, meta[relay.Constant][36] /* ty=Tensor[(240), float32] */, meta[relay.Constant][37] /* ty=Tensor[(5, 42), float64] */, %749, %750)
}

def @func_3603() -> Tensor[(10, 5, 3), int32] {
  %751 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %751.0
}

def @func_4938(%var_4928: Tensor[(240), float32], %var_4929: Tensor[(210), float64]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) {
  %752 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %753 = %752.0;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %755 = cast(%var_4928, dtype="float32") /* ty=Tensor[(240), float32] */;
  %756 = cast(%var_4929, dtype="float64") /* ty=Tensor[(210), float64] */;
  %757 = reshape(%755, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %758 = reshape(%756, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
  %759 = @func_3581(%757, %758) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) */;
  %760 = acos(%754) /* ty=Tensor[(10, 5, 3), float64] */;
  %761 = %759.2;
  (%760, %761, %var_4928, %var_4929)
}

def @func_987(%var_970: Tensor[(9, 9, 9), uint32], %var_971: Tensor[(9, 9, 9), uint32]) -> (Tensor[(9, 9, 9), uint64],) {
  %762 = cast(%var_971, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %763 = shape_of(%var_970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_970, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %766 = subtract(%764, %765) /* ty=Tensor[(9, 9, 9), uint32] */;
  %767 = cast(%766, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
  %768 = shape_of(%var_971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_971, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %771 = logical_xor(%769, %770) /* ty=Tensor[(9, 9, 9), uint64] */;
  (%771,)
}

def @func_7088(%var_7053: Tensor[(12, 13, 14), float64], %var_7072: Tensor[(12, 13, 14), float64]) -> Tensor[(12, 13, 14), float64] {
  %772 = cast(%var_7053, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %773 = cos(%772) /* ty=Tensor[(12, 13, 14), float64] */;
  %774 = cast(%773, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %775 = acos(%774) /* ty=Tensor[(12, 13, 14), float64] */;
  %776 = cast(%var_7072, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%778, %779) /* ty=Tensor[(12, 13, 14), float64] */
}

def @func_5900() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int16], Tensor[(10, 5, 3), float64]) {
  %780 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
  %781 = @func_5007() /* ty=(Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) */;
  %782 = %780.1;
  %783 = %781.1;
  %784 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
  (%782, %783, %784)
}

def @func_8178() -> (Tensor[(10, 5, 3), int32],) {
  %785 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  (%785,)
}

def @func_7529(%var_7518: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), float32],) {
  %786 = cast(%var_7518, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
  %787 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(16, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %790 = floor_divide(%788, %789) /* ty=Tensor[(16, 11, 9), float32] */;
  (%790,)
}

def @func_3170(%var_3139: Tensor[(6, 15, 13), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(10, 5, 3), int32]) {
  %791 = cast(%var_3139, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %792 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %793 = atanh(%791) /* ty=Tensor[(6, 15, 13), float32] */;
  %794 = %792.0;
  (%793, %794)
}

def @func_8212() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %795 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %796 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %797 = %795.0;
  (%796, %797)
}

def @func_7621() -> (Tensor[(10, 5, 3), float64],) {
  %798 = @func_5465() /* ty=(Tensor[(10, 5, 3), float64],) */;
  %799 = %798.0;
  (%799,)
}

def @func_8011(%var_7928: Tensor[(120), uint32], %var_7929: Tensor[(3, 243), uint32], %var_7978: float64, %var_8009: Tensor[(1188), int32]) -> (Tensor[(16, 12, 6), float64], Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 243), uint32], Tensor[(10, 5, 3), float32], Tensor[(7, 4, 8), bool], Tensor[(10, 5, 3), bool], Tensor[(1716), float64], Tensor[(12, 11, 13), float64], Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 11, 12), uint32], Tensor[(1188), int32]) {
  %800 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
  %801 = cast(%var_7928, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %802 = cast(%var_7929, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %803 = reshape(%801, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %804 = reshape(%802, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %805 = @func_2692(%803, %804) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %806 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %807 = @func_5532() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) */;
  %808 = %807.0;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %810 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%806, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %813 = cast(%var_7928, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %814 = cast(%var_7929, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %815 = reshape(%813, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %816 = reshape(%814, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %817 = @func_2692(%815, %816) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %818 = cast(%808, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %819 = %817.2;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %821 = reshape(%818, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), float32] */;
  %822 = reshape(%820, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %823 = @func_4634(%821, %822) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %824 = cast(%var_7978, dtype="float64") /* ty=float64 */;
  %825 = cast(meta[relay.Constant][39] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %826 = reshape(%824, newshape=[]) /* ty=float64 */;
  %827 = reshape(%825, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float64] */;
  %828 = @func_860(%826, %827) /* ty=(Tensor[(12, 11, 13), int32],) */;
  %829 = %828.0;
  %830 = cast(%829, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
  %831 = cast(%var_7978, dtype="float64") /* ty=float64 */;
  %832 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %833 = @func_5792() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
  %834 = cast(%var_8009, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %835 = reshape(%834, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), int32] */;
  %836 = %800.1;
  %837 = %805.1;
  %838 = divide(%811, %812) /* ty=Tensor[(10, 5, 3), float32] */;
  %839 = %823.0;
  %840 = power(%830, %831) /* ty=Tensor[(12, 11, 13), float64] */;
  %841 = %832.2;
  %842 = %833.0;
  %843 = @func_4674(%835) /* ty=Tensor[(9, 11, 12), uint32] */;
  (%836, %837, %var_7928, %var_7929, %838, %819, %839, meta[relay.Constant][39] /* ty=Tensor[(1716), float64] */, %840, %841, %842, %843, %var_8009)
}

def @func_8378(%var_8368: int16, %var_8369: Tensor[(1, 14, 5), int16]) -> (Tensor[(1, 14, 5), int16], Tensor[(10, 5, 3), int32], Tensor[(48, 24), float64]) {
  %844 = cast(%var_8368, dtype="int16") /* ty=int16 */;
  %845 = cast(%var_8369, dtype="int16") /* ty=Tensor[(1, 14, 5), int16] */;
  %846 = cast(meta[relay.Constant][40] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
  %847 = reshape(%846, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float64] */;
  %848 = @func_5282(%847) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) */;
  %849 = bitwise_xor(%844, %845) /* ty=Tensor[(1, 14, 5), int16] */;
  %850 = %848.0;
  (%849, %850, meta[relay.Constant][40] /* ty=Tensor[(48, 24), float64] */)
}

def @func_3276() -> Tensor[(10, 5, 3), int32] {
  %851 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %851.0
}

def @func_6739() -> Tensor[(5, 42), float32] {
  %852 = @func_6392() /* ty=(Tensor[(5, 42), float32],) */;
  %852.0
}

def @func_6370() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %853 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %854 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %855 = %853.0;
  (%854, %855)
}

def @func_1870(%var_1785: Tensor[(14, 16, 9), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(240), float32], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), float64], Tensor[(14, 16, 9), uint16], Tensor[(35, 6), float64], Tensor[(14, 16, 9), float32], Tensor[(3, 14, 5), float64], Tensor[(3, 14, 5), float64]) {
  %856 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %857 = reshape(%856, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %858 = @func_1290(%857) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %859 = cast(meta[relay.Constant][42] /* ty=Tensor[(729, 1), uint32] */, dtype="uint32") /* ty=Tensor[(729, 1), uint32] */;
  %860 = reshape(%859, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %861 = @func_1188(%860) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %862 = %858.0;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %864 = reshape(%863, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %865 = @func_1290(%864) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %866 = %865.1;
  %867 = cast(meta[relay.Constant][42] /* ty=Tensor[(729, 1), uint32] */, dtype="float64") /* ty=Tensor[(729, 1), float64] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="float64") /* ty=Tensor[(9, 9, 9), float64] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %871 = cast(%var_1785, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %872 = acos(%871) /* ty=Tensor[(14, 16, 9), float32] */;
  %873 = cast(%var_1785, dtype="uint16") /* ty=Tensor[(14, 16, 9), uint16] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%872, dtype="uint16") /* ty=Tensor[(14, 16, 9), uint16] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %877 = cast(%872, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
  %878 = exp(%877) /* ty=Tensor[(14, 16, 9), float64] */;
  %879 = cast(%878, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %880 = cast(meta[relay.Constant][43] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %881 = reshape(%880, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %882 = @func_764(%881) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %883 = cast(meta[relay.Constant][43] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %884 = reshape(%883, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %885 = @func_764(%884) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %886 = %885.0;
  %887 = cast(%886, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %888 = %861.0;
  %889 = floor_mod(%869, %870) /* ty=Tensor[(9, 9, 9), float64] */;
  %890 = bitwise_and(%875, %876) /* ty=Tensor[(14, 16, 9), uint16] */;
  %891 = log2(%879) /* ty=Tensor[(14, 16, 9), float32] */;
  %892 = %882.0;
  %893 = rsqrt(%887) /* ty=Tensor[(3, 14, 5), float64] */;
  (%862, meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, %888, %889, %890, meta[relay.Constant][43] /* ty=Tensor[(35, 6), float64] */, %891, %892, %893)
}

def @func_4674(%var_4654: Tensor[(9, 11, 12), int32]) -> Tensor[(9, 11, 12), uint32] {
  %894 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %895 = shape_of(%var_4654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%var_4654, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %898 = subtract(%896, %897) /* ty=Tensor[(9, 11, 12), int32] */;
  %899 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 11, 12), int32] */, dtype="uint32") /* ty=Tensor[(9, 11, 12), uint32] */;
  %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%898, dtype="uint32") /* ty=Tensor[(9, 11, 12), uint32] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%901, %902) /* ty=Tensor[(9, 11, 12), uint32] */
}

def @func_7195() -> (Tensor[(10, 5, 3), int32],) {
  %903 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
  %904 = %903.0;
  (%904,)
}

def @func_5332() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) {
  %905 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %906 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
  %907 = %905.0;
  %908 = @func_5200() /* ty=Tensor[(10, 5, 3), int32] */;
  %909 = @func_4716() /* ty=Tensor[(10, 5, 3), float64] */;
  %910 = %906.0;
  (%907, %908, %909, %910)
}

def @func_1977(%var_1936: Tensor[(4, 11, 1), uint8], %var_1969: Tensor[(120), uint32], %var_1970: Tensor[(224), float32]) -> (Tensor[(4, 11, 11), bool], Tensor[(729), uint32], Tensor[(240), float32], Tensor[(9, 9, 9), uint64], Tensor[(224), float32], Tensor[(120), uint32], Tensor[(224), float32]) {
  %911 = cast(%var_1936, dtype="bool") /* ty=Tensor[(4, 11, 1), bool] */;
  %912 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 11, 11), uint8] */, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
  %913 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %914 = reshape(%913, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %915 = @func_1290(%914) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %916 = %915.2;
  %917 = cast(%916, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %918 = cast(%916, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %919 = reshape(%917, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %920 = reshape(%918, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %921 = @func_987(%919, %920) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %922 = cast(%var_1969, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %923 = cast(%var_1969, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %924 = %921.0;
  %925 = cast(%924, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %926 = cast(%var_1970, dtype="float32") /* ty=Tensor[(224), float32] */;
  %927 = reshape(%922, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %928 = reshape(%923, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %929 = reshape(%925, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %930 = reshape(%926, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %931 = @func_1744(%927, %928, %929, %930) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %932 = less(%911, %912) /* ty=Tensor[(4, 11, 11), bool] */;
  %933 = %931.6;
  (%932, %916, meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, %924, %933, %var_1969, %var_1970)
}

def @func_764(%var_746: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  %934 = cast(%var_746, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %935 = exp(%934) /* ty=Tensor[(3, 14, 5), float64] */;
  (%935,)
}

def @func_860(%var_848: float64, %var_849: Tensor[(12, 11, 13), float64]) -> (Tensor[(12, 11, 13), int32],) {
  %936 = cast(%var_848, dtype="float64") /* ty=float64 */;
  %937 = cast(%var_849, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
  %938 = floor_divide(%936, %937) /* ty=Tensor[(12, 11, 13), float64] */;
  %939 = cast(%938, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  %940 = rsqrt(%939) /* ty=Tensor[(12, 11, 13), float32] */;
  %941 = cast(%var_848, dtype="int32") /* ty=int32 */;
  %942 = cast(%940, dtype="int32") /* ty=Tensor[(12, 11, 13), int32] */;
  %943 = bitwise_or(%941, %942) /* ty=Tensor[(12, 11, 13), int32] */;
  (%943,)
}

def @func_4553(%var_4477: Tensor[(18, 4), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(72), int64], Tensor[(18, 4), int64], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %944 = cast(%var_4477, dtype="int64") /* ty=Tensor[(18, 4), int64] */;
  %945 = reshape(%944, newshape=[72]) /* ty=Tensor[(72), int64] */;
  %946 = @func_2622(%945) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
  %947 = cast(meta[relay.Constant][48] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %948 = reshape(%947, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %949 = @func_3220(%948) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) */;
  %950 = cast(meta[relay.Constant][49] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %951 = reshape(%950, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %952 = @func_764(%951) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %953 = @func_3603() /* ty=Tensor[(10, 5, 3), int32] */;
  %954 = %946.2;
  %955 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %956 = %949.0;
  %957 = %952.0;
  (%953, %954, %var_4477, %955, %956, meta[relay.Constant][48] /* ty=Tensor[(240), float32] */, %957, meta[relay.Constant][49] /* ty=Tensor[(210), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6690(%var_6688: Tensor[(132), float32], %var_6689: Tensor[(96), float32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(132), float32], Tensor[(96), float32]) {
  @func_6686(%var_6688, %var_6689) /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(132), float32], Tensor[(96), float32]) */
}

def @func_4089() -> (Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) {
  @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */
}

def @func_8011(%var_7928: Tensor[(120), uint32], %var_7929: Tensor[(3, 243), uint32], %var_7978: float64, %var_8009: Tensor[(1188), int32]) -> (Tensor[(16, 12, 6), float64], Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 243), uint32], Tensor[(10, 5, 3), float32], Tensor[(7, 4, 8), bool], Tensor[(10, 5, 3), bool], Tensor[(1716), float64], Tensor[(12, 11, 13), float64], Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 11, 12), uint32], Tensor[(1188), int32]) {
  %0 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
  %1 = cast(%var_7928, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %2 = cast(%var_7929, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %3 = reshape(%1, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %4 = reshape(%2, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %5 = @func_2692(%3, %4) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %6 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %7 = @func_5532() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) */;
  %8 = %7.0;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %10 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%6, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %13 = cast(%var_7928, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %14 = cast(%var_7929, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %15 = reshape(%13, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %16 = reshape(%14, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %17 = @func_2692(%15, %16) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %18 = cast(%8, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %19 = %17.2;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %21 = reshape(%18, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), float32] */;
  %22 = reshape(%20, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %23 = @func_4634(%21, %22) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %24 = cast(%var_7978, dtype="float64") /* ty=float64 */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %26 = reshape(%24, newshape=[]) /* ty=float64 */;
  %27 = reshape(%25, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float64] */;
  %28 = @func_860(%26, %27) /* ty=(Tensor[(12, 11, 13), int32],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
  %31 = cast(%var_7978, dtype="float64") /* ty=float64 */;
  %32 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %33 = @func_5792() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
  %34 = cast(%var_8009, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %35 = reshape(%34, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), int32] */;
  %36 = %0.1;
  %37 = %5.1;
  %38 = divide(%11, %12) /* ty=Tensor[(10, 5, 3), float32] */;
  %39 = %23.0;
  %40 = power(%30, %31) /* ty=Tensor[(12, 11, 13), float64] */;
  %41 = %32.2;
  %42 = %33.0;
  %43 = @func_4674(%35) /* ty=Tensor[(9, 11, 12), uint32] */;
  (%36, %37, %var_7928, %var_7929, %38, %19, %39, meta[relay.Constant][0] /* ty=Tensor[(1716), float64] */, %40, %41, %42, %43, %var_8009)
}

def @func_4677(%var_4675: Tensor[(9, 11, 12), int32]) -> Tensor[(9, 11, 12), uint32] {
  @func_4674(%var_4675) /* ty=Tensor[(9, 11, 12), uint32] */
}

def @func_5142() -> Tensor[(10, 5, 3), float32] {
  %44 = fn () -> Tensor[(10, 5, 3), float32] {
    @func_4906() /* ty=Tensor[(10, 5, 3), float32] */
  };
  %44() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_5466() -> (Tensor[(10, 5, 3), float64],) {
  %46 = fn () -> (Tensor[(10, 5, 3), float64],) {
    %45 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
    (%45,)
  };
  %46() /* ty=(Tensor[(10, 5, 3), float64],) */
}

def @func_8214() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  @func_8212() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */
}

def @func_3760() -> Tensor[(10, 5, 3), int32] {
  @func_3758() /* ty=Tensor[(10, 5, 3), int32] */
}

def @func_172(%var_154: Tensor[(7, 4, 8), float32], %var_155: Tensor[(7, 4, 8), float32]) -> (Tensor[(7, 4, 8), bool],) {
  %47 = cast(%var_155, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %48 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_154, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = not_equal(%49, %50) /* ty=Tensor[(7, 4, 8), bool] */;
  (%51,)
}

def @func_5909() -> (Tensor[(10, 5, 3), int32],) {
  %54 = fn () -> (Tensor[(10, 5, 3), int32],) {
    %52 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %53 = %52.0;
    (%53,)
  };
  %54() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_5901() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int16], Tensor[(10, 5, 3), float64]) {
  %60 = fn () -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int16], Tensor[(10, 5, 3), float64]) {
    %55 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
    %56 = @func_5007() /* ty=(Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) */;
    %57 = %55.1;
    %58 = %56.1;
    %59 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
    (%57, %58, %59)
  };
  %60() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int16], Tensor[(10, 5, 3), float64]) */
}

def @func_3758() -> Tensor[(10, 5, 3), int32] {
  %61 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %61.0
}

def @func_7150(%var_7128: Tensor[(729), uint32]) -> (Tensor[(5, 42), float32], Tensor[(10, 5, 3), int32], Tensor[(729), int32], Tensor[(10, 5, 3), bool]) {
  %62 = @func_6392() /* ty=(Tensor[(5, 42), float32],) */;
  %63 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %64 = cast(%var_7128, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %65 = reshape(%64, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %66 = @func_1188(%65) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %67 = %66.5;
  %68 = cast(%var_7128, dtype="int32") /* ty=Tensor[(729), int32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="int32") /* ty=Tensor[(729), int32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), int32] */;
  %72 = %63.0;
  %73 = cast(%72, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %74 = reshape(%73, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %75 = @func_2994(%74) /* ty=(Tensor[(10, 5, 3), bool],) */;
  %76 = %62.0;
  %77 = subtract(%70, %71) /* ty=Tensor[(729), int32] */;
  %78 = %75.0;
  (%76, %72, %77, %78)
}

def @func_8178() -> (Tensor[(10, 5, 3), int32],) {
  %79 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  (%79,)
}

def @func_6849() -> (Tensor[(5, 42), float32],) {
  %80 = @func_6739() /* ty=Tensor[(5, 42), float32] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %82 = log10(%81) /* ty=Tensor[(5, 42), float32] */;
  (%82,)
}

def @func_2695(%var_2693: Tensor[(120), uint32], %var_2694: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) {
  %99 = fn (%var_2672: Tensor[(120), uint32], %var_2673: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) {
    %83 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %84 = %83.0;
    %85 = cast(%84, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %86 = reshape(%85, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %87 = @func_2444(%86) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
    %88 = cast(%var_2672, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %89 = cast(%var_2672, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %90 = cast(%var_2673, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %91 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 112), float32] */, dtype="float32") /* ty=Tensor[(2, 112), float32] */;
    %92 = reshape(%88, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %93 = reshape(%89, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %94 = reshape(%90, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %95 = reshape(%91, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %96 = @func_1744(%92, %93, %94, %95) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
    %97 = %87.0;
    %98 = %96.5;
    (%84, %97, %98, %var_2672, %var_2673, meta[relay.Constant][1] /* ty=Tensor[(2, 112), float32] */)
  };
  %99(%var_2693, %var_2694) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */
}

def @func_767(%var_765: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  @func_764(%var_765) /* ty=(Tensor[(3, 14, 5), float64],) */
}

def @func_6237() -> (Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) {
  @func_6235() /* ty=(Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) */
}

def @func_8047() -> Tensor[(10, 5, 3), float32] {
  @func_8045() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_6565() -> (Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) {
  %100 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
  %101 = cast(meta[relay.Constant][2] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %102 = reshape(%101, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %103 = @func_1290(%102) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %104 = %100.1;
  %105 = %103.2;
  (%104, %105, meta[relay.Constant][2] /* ty=Tensor[(240), float32] */)
}

def @func_6235() -> (Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) {
  %106 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %108 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %109 = reshape(%108, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %110 = @func_2931(%109) /* ty=(Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */;
  %111 = log2(%107) /* ty=Tensor[(10, 5, 3), float32] */;
  %112 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %113 = %110.1;
  (%111, %112, %113, meta[relay.Constant][3] /* ty=Tensor[(1, 210), float64] */)
}

def @func_4819() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) {
  @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */
}

def @func_7531(%var_7530: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), float32],) {
  %119 = fn (%var_7518: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), float32],) {
    %114 = cast(%var_7518, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
    %115 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %118 = floor_divide(%116, %117) /* ty=Tensor[(16, 11, 9), float32] */;
    (%118,)
  };
  %119(%var_7530) /* ty=(Tensor[(16, 11, 9), float32],) */
}

def @func_4553(%var_4477: Tensor[(18, 4), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(72), int64], Tensor[(18, 4), int64], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %120 = cast(%var_4477, dtype="int64") /* ty=Tensor[(18, 4), int64] */;
  %121 = reshape(%120, newshape=[72]) /* ty=Tensor[(72), int64] */;
  %122 = @func_2622(%121) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
  %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %124 = reshape(%123, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %125 = @func_3220(%124) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) */;
  %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %127 = reshape(%126, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %128 = @func_764(%127) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %129 = @func_3603() /* ty=Tensor[(10, 5, 3), int32] */;
  %130 = %122.2;
  %131 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %132 = %125.0;
  %133 = %128.0;
  (%129, %130, %var_4477, %131, %132, meta[relay.Constant][5] /* ty=Tensor[(240), float32] */, %133, meta[relay.Constant][6] /* ty=Tensor[(210), float64] */)
}

def @func_5053(%var_5051: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  @func_5050(%var_5051) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), bool]) */
}

def @func_4087() -> (Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) {
  %134 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  %137 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
  %138 = erf(%136) /* ty=Tensor[(10, 5, 3), float64] */;
  %139 = %137.1;
  (%138, %139)
}

def @func_5697() -> (Tensor[(10, 5, 3), int32],) {
  @func_5695() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_6370() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %140 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %141 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %142 = %140.0;
  (%141, %142)
}

def @func_1977(%var_1936: Tensor[(4, 11, 1), uint8], %var_1969: Tensor[(120), uint32], %var_1970: Tensor[(224), float32]) -> (Tensor[(4, 11, 11), bool], Tensor[(729), uint32], Tensor[(240), float32], Tensor[(9, 9, 9), uint64], Tensor[(224), float32], Tensor[(120), uint32], Tensor[(224), float32]) {
  %143 = cast(%var_1936, dtype="bool") /* ty=Tensor[(4, 11, 1), bool] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 11, 11), uint8] */, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
  %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %146 = reshape(%145, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %147 = @func_1290(%146) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %148 = %147.2;
  %149 = cast(%148, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %150 = cast(%148, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %151 = reshape(%149, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %152 = reshape(%150, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %153 = @func_987(%151, %152) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %154 = cast(%var_1969, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %155 = cast(%var_1969, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %156 = %153.0;
  %157 = cast(%156, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %158 = cast(%var_1970, dtype="float32") /* ty=Tensor[(224), float32] */;
  %159 = reshape(%154, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %160 = reshape(%155, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
  %161 = reshape(%157, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %162 = reshape(%158, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %163 = @func_1744(%159, %160, %161, %162) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
  %164 = less(%143, %144) /* ty=Tensor[(4, 11, 11), bool] */;
  %165 = %163.6;
  (%164, %148, meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, %156, %165, %var_1969, %var_1970)
}

def @func_7091(%var_7089: Tensor[(12, 13, 14), float64], %var_7090: Tensor[(12, 13, 14), float64]) -> Tensor[(12, 13, 14), float64] {
  %174 = fn (%var_7053: Tensor[(12, 13, 14), float64], %var_7072: Tensor[(12, 13, 14), float64]) -> Tensor[(12, 13, 14), float64] {
    %166 = cast(%var_7053, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
    %167 = cos(%166) /* ty=Tensor[(12, 13, 14), float64] */;
    %168 = cast(%167, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
    %169 = acos(%168) /* ty=Tensor[(12, 13, 14), float64] */;
    %170 = cast(%var_7072, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%169, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%172, %173) /* ty=Tensor[(12, 13, 14), float64] */
  };
  %174(%var_7089, %var_7090) /* ty=Tensor[(12, 13, 14), float64] */
}

def @func_4293() -> (Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) {
  @func_4291() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) */
}

def @func_8271(%var_8269: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  @func_8268(%var_8269) /* ty=(Tensor[(3, 14, 5), float64],) */
}

def @func_1292(%var_1291: Tensor[(12, 5, 4), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) {
  %183 = fn (%var_1278: Tensor[(12, 5, 4), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) {
    %175 = cast(%var_1278, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %178 = reshape(%176, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
    %179 = reshape(%177, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
    %180 = @func_987(%178, %179) /* ty=(Tensor[(9, 9, 9), uint64],) */;
    %181 = sqrt(%175) /* ty=Tensor[(12, 5, 4), float32] */;
    %182 = %180.0;
    (%181, %182, meta[relay.Constant][9] /* ty=Tensor[(729), uint32] */)
  };
  %183(%var_1291) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */
}

def @func_4941(%var_4939: Tensor[(240), float32], %var_4940: Tensor[(210), float64]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) {
  %194 = fn (%var_4928: Tensor[(240), float32], %var_4929: Tensor[(210), float64]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) {
    %184 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %187 = cast(%var_4928, dtype="float32") /* ty=Tensor[(240), float32] */;
    %188 = cast(%var_4929, dtype="float64") /* ty=Tensor[(210), float64] */;
    %189 = reshape(%187, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %190 = reshape(%188, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
    %191 = @func_3581(%189, %190) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) */;
    %192 = acos(%186) /* ty=Tensor[(10, 5, 3), float64] */;
    %193 = %191.2;
    (%192, %193, %var_4928, %var_4929)
  };
  %194(%var_4939, %var_4940) /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) */
}

def @func_4892(%var_4860: Tensor[(10, 5, 3), int32], %var_4872: Tensor[(729), uint32], %var_4885: Tensor[(1500), float64]) -> (Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 40), uint32], Tensor[(729), uint32], Tensor[(224), float32], Tensor[(1500), uint8]) {
  %195 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %196 = %195.0;
  %197 = cast(%var_4860, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 40), uint32] */, dtype="uint32") /* ty=Tensor[(3, 40), uint32] */;
  %202 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %204 = reshape(%201, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %205 = reshape(%202, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %206 = reshape(%203, newshape=[16, 14]) /* ty=Tensor[(16, 14), float32] */;
  %207 = @func_3365(%204, %205, %206) /* ty=(Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) */;
  %208 = cast(%var_4885, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %209 = reshape(%208, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %210 = @func_1637(%209) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="uint8") /* ty=Tensor[(10, 15, 10), uint8] */;
  %213 = shape_of(%var_4885, dtype="int32") /* ty=Tensor[(1), int32] */;
  %214 = cast(%var_4885, dtype="uint8") /* ty=Tensor[(1500), uint8] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %216 = equal(%199, %200) /* ty=Tensor[(10, 5, 3), bool] */;
  %217 = %207.3;
  %218 = multiply(%214, %215) /* ty=Tensor[(1500), uint8] */;
  (%216, %217, meta[relay.Constant][10] /* ty=Tensor[(3, 40), uint32] */, %var_4872, meta[relay.Constant][11] /* ty=Tensor[(224), float32] */, %218)
}

def @func_3170(%var_3139: Tensor[(6, 15, 13), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(10, 5, 3), int32]) {
  %219 = cast(%var_3139, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %220 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %221 = atanh(%219) /* ty=Tensor[(6, 15, 13), float32] */;
  %222 = %220.0;
  (%221, %222)
}

def @func_2554() -> Tensor[(10, 5, 3), float64] {
  %226 = fn () -> Tensor[(10, 5, 3), float64] {
    %223 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %224 = %223.0;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    sqrt(%225) /* ty=Tensor[(10, 5, 3), float64] */
  };
  %226() /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_5333() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) {
  %233 = fn () -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) {
    %227 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %228 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
    %229 = %227.0;
    %230 = @func_5200() /* ty=Tensor[(10, 5, 3), int32] */;
    %231 = @func_4716() /* ty=Tensor[(10, 5, 3), float64] */;
    %232 = %228.0;
    (%229, %230, %231, %232)
  };
  %233() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) */
}

def @func_5794() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  @func_5792() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */
}

def @func_4291() -> (Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) {
  %234 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %236 = reshape(%235, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %237 = @func_764(%236) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 210), float64] */, dtype="float32") /* ty=Tensor[(1, 210), float32] */;
  %241 = sin(%240) /* ty=Tensor[(1, 210), float32] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %243 = log10(%242) /* ty=Tensor[(1, 210), float64] */;
  %244 = cast(%241, dtype="uint8") /* ty=Tensor[(1, 210), uint8] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(2), int32] */;
  %246 = cast(%243, dtype="uint8") /* ty=Tensor[(1, 210), uint8] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %248 = %234.0;
  %249 = erf(%239) /* ty=Tensor[(3, 14, 5), float64] */;
  %250 = bitwise_xor(%246, %247) /* ty=Tensor[(?, 210), uint8] */;
  (%248, %249, %250)
}

def @func_6342(%var_6329: Tensor[(1, 729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) {
  %251 = @func_5908() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %252 = cast(%var_6329, dtype="uint32") /* ty=Tensor[(1, 729), uint32] */;
  %253 = cast(%var_6329, dtype="uint32") /* ty=Tensor[(1, 729), uint32] */;
  %254 = reshape(%252, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %255 = reshape(%253, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %256 = @func_987(%254, %255) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %257 = %251.0;
  %258 = %256.0;
  %259 = @func_4906() /* ty=Tensor[(10, 5, 3), float32] */;
  (%257, %258, %var_6329, %259)
}

def @func_6951() -> Tensor[(16, 4, 13), uint32] {
  %260 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %261 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 4, 13), uint32] */, dtype="uint32") /* ty=Tensor[(16, 4, 13), uint32] */;
  subtract(%260, %261) /* ty=Tensor[(16, 4, 13), uint32] */
}

def @func_3061() -> (Tensor[(10, 5, 3), float32],) {
  @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */
}

def @func_7019(%var_7017: Tensor[(729), uint64]) -> (Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), float32], Tensor[(729), uint64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  @func_7016(%var_7017) /* ty=(Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), float32], Tensor[(729), uint64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */
}

def @func_4718() -> Tensor[(10, 5, 3), float64] {
  @func_4716() /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_2446(%var_2445: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) {
  %273 = fn (%var_2427: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) {
    %262 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %263 = %262.0;
    %264 = cast(%var_2427, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%263, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %269 = reshape(%268, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %270 = @func_1290(%269) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %271 = greater_equal(%266, %267) /* ty=Tensor[(10, 5, 3), bool] */;
    %272 = %270.2;
    (%271, %272, meta[relay.Constant][15] /* ty=Tensor[(240), float32] */)
  };
  %273(%var_2445) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */
}

def @func_7016(%var_7005: Tensor[(729), uint64]) -> (Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), float32], Tensor[(729), uint64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %274 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %275 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %276 = cast(%var_7005, dtype="uint64") /* ty=Tensor[(729), uint64] */;
  %277 = reshape(%276, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %278 = @func_2815(%277) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %280 = reshape(%279, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
  %281 = @func_764(%280) /* ty=(Tensor[(3, 14, 5), float64],) */;
  %282 = %274.2;
  %283 = %275.0;
  %284 = %278.3;
  %285 = %281.0;
  (%282, %283, %284, %var_7005, %285, meta[relay.Constant][16] /* ty=Tensor[(210), float64] */)
}

def @func_3426() -> (Tensor[(10, 5, 3), int32],) {
  @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_4001(%var_4000: Tensor[(10, 5, 3), int32]) -> Tensor[(10, 5, 3), int16] {
  %292 = fn (%var_3994: Tensor[(10, 5, 3), int32]) -> Tensor[(10, 5, 3), int16] {
    %286 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %287 = %286.0;
    %288 = cast(%var_3994, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%290, %291) /* ty=Tensor[(10, 5, 3), int16] */
  };
  %292(%var_4000) /* ty=Tensor[(10, 5, 3), int16] */
}

def @func_3424() -> (Tensor[(10, 5, 3), int32],) {
  %293 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %294 = %293.0;
  (%294,)
}

def @func_6886() -> Tensor[(10, 5, 3), float64] {
  %296 = fn () -> Tensor[(10, 5, 3), float64] {
    %295 = @func_6823() /* ty=(Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) */;
    %295.1
  };
  %296() /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_176(%var_174: Tensor[(7, 4, 8), float32], %var_175: Tensor[(7, 4, 8), float32]) -> (Tensor[(7, 4, 8), bool],) {
  @func_172(%var_174, %var_175) /* ty=(Tensor[(7, 4, 8), bool],) */
}

def @func_2883() -> (Tensor[(10, 5, 3), int32],) {
  @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_1749(%var_1745: Tensor[(5, 12, 2), uint32], %var_1746: Tensor[(5, 12, 2), uint32], %var_1747: Tensor[(729), uint32], %var_1748: Tensor[(224), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
  %330 = fn (%var_1691: Tensor[(5, 12, 2), uint32], %var_1692: Tensor[(5, 12, 2), uint32], %var_1712: Tensor[(729), uint32], %var_1731: Tensor[(224), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
    %297 = cast(%var_1712, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %298 = cast(%var_1712, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %299 = reshape(%297, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
    %300 = reshape(%298, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
    %301 = @func_987(%299, %300) /* ty=(Tensor[(9, 9, 9), uint64],) */;
    %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %303 = reshape(%302, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %304 = @func_1290(%303) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %305 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
    %306 = shape_of(%var_1692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%var_1692, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %309 = subtract(%307, %308) /* ty=Tensor[(5, 12, 2), uint32] */;
    %310 = cast(%var_1692, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
    %311 = shape_of(%var_1691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %314 = multiply(%312, %313) /* ty=Tensor[(5, 12, 2), uint32] */;
    %315 = cast(%314, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
    %316 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%309, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = logical_and(%317, %318) /* ty=Tensor[(5, 12, 2), bool] */;
    %320 = cast(%319, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
    %321 = cast(%var_1731, dtype="float32") /* ty=Tensor[(224), float32] */;
    %322 = cast(%var_1731, dtype="float32") /* ty=Tensor[(224), float32] */;
    %323 = reshape(%321, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
    %324 = reshape(%322, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
    %325 = @func_172(%323, %324) /* ty=(Tensor[(7, 4, 8), bool],) */;
    %326 = %301.0;
    %327 = %304.1;
    %328 = asin(%320) /* ty=Tensor[(5, 12, 2), float64] */;
    %329 = %325.0;
    (%326, %var_1712, %327, meta[relay.Constant][17] /* ty=Tensor[(240), float32] */, %328, %329, %var_1731)
  };
  %330(%var_1745, %var_1746, %var_1747, %var_1748) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */
}

def @func_6851() -> (Tensor[(5, 42), float32],) {
  @func_6849() /* ty=(Tensor[(5, 42), float32],) */
}

def @func_6274(%var_6272: Tensor[(120), uint32], %var_6273: Tensor[(729), uint32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) {
  %349 = fn (%var_6252: Tensor[(120), uint32], %var_6253: Tensor[(729), uint32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) {
    %331 = cast(%var_6252, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %332 = cast(%var_6252, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %333 = cast(%var_6253, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %334 = cast(meta[relay.Constant][18] /* ty=Tensor[(224, 1), float32] */, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
    %335 = reshape(%331, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %336 = reshape(%332, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %337 = reshape(%333, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %338 = reshape(%334, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %339 = @func_1744(%335, %336, %337, %338) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
    %340 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %343 = cast(%var_6253, dtype="uint64") /* ty=Tensor[(729), uint64] */;
    %344 = reshape(%343, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
    %345 = @func_2815(%344) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
    %346 = %339.2;
    %347 = cos(%342) /* ty=Tensor[(10, 5, 3), float32] */;
    %348 = %345.3;
    (%346, %var_6252, %var_6253, meta[relay.Constant][18] /* ty=Tensor[(224, 1), float32] */, %347, %348)
  };
  %349(%var_6272, %var_6273) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) */
}

def @func_2325() -> (Tensor[(10, 5, 3), int32],) {
  %357 = fn () -> (Tensor[(10, 5, 3), int32],) {
    %350 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %351 = cosh(%350) /* ty=Tensor[(10, 5, 3), float32] */;
    %352 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 5, 3), float32] */, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%351, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %356 = logical_xor(%354, %355) /* ty=Tensor[(10, 5, 3), int32] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_1188(%var_1154: Tensor[(729), uint32]) -> (Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) {
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %360 = cast(%var_1154, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %361 = cast(%var_1154, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %362 = reshape(%360, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %363 = reshape(%361, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %364 = @func_987(%362, %363) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %365 = cast(5.87015f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %367 = reshape(%365, newshape=[]) /* ty=float64 */;
  %368 = reshape(%366, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float64] */;
  %369 = @func_860(%367, %368) /* ty=(Tensor[(12, 11, 13), int32],) */;
  %370 = cast(%var_1154, dtype="int64") /* ty=Tensor[(729), int64] */;
  %371 = cast(5.87015f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %372 = sigmoid(%358) /* ty=Tensor[(16, 12, 6), float64] */;
  %373 = log10(%359) /* ty=Tensor[(16, 12, 6), float64] */;
  %374 = %364.0;
  %375 = %369.0;
  %376 = bitwise_or(%370, %371) /* ty=Tensor[(729), int64] */;
  (%372, %373, %374, %375, meta[relay.Constant][21] /* ty=Tensor[(1716), float64] */, %376)
}

def @func_2624(%var_2623: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) {
  %387 = fn (%var_2594: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) {
    %377 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %378 = cast(%var_2594, dtype="int64") /* ty=Tensor[(72), int64] */;
    %379 = reshape(%378, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
    %380 = @func_2342(%379) /* ty=(Tensor[(12, 6, 16), bool],) */;
    %381 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %382 = reshape(%381, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %383 = @func_1290(%382) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %384 = %377.0;
    %385 = %380.0;
    %386 = %383.0;
    (%384, %385, %var_2594, %386, meta[relay.Constant][22] /* ty=Tensor[(240), float32] */)
  };
  %387(%var_2623) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */
}

def @func_6445(%var_6443: Tensor[(25, 6), int32], %var_6444: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int16], Tensor[(25, 6), int32], Tensor[(3, 243), float32], Tensor[(12, 6, 16), bool], Tensor[(72), int64]) {
  %399 = fn (%var_6415: Tensor[(25, 6), int32], %var_6439: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int16], Tensor[(25, 6), int32], Tensor[(3, 243), float32], Tensor[(12, 6, 16), bool], Tensor[(72), int64]) {
    %388 = cast(%var_6415, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
    %389 = reshape(%388, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %390 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
    %391 = %390.2;
    %392 = cast(%391, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
    %393 = cast(%var_6439, dtype="int64") /* ty=Tensor[(72), int64] */;
    %394 = reshape(%393, newshape=[12, 6, 1]) /* ty=Tensor[(12, 6, 1), int64] */;
    %395 = @func_2342(%394) /* ty=(Tensor[(12, 6, 16), bool],) */;
    %396 = @func_3999(%389) /* ty=Tensor[(10, 5, 3), int16] */;
    %397 = sin(%392) /* ty=Tensor[(3, 243), float32] */;
    %398 = %395.0;
    (%396, %var_6415, %397, %398, %var_6439)
  };
  %399(%var_6443, %var_6444) /* ty=(Tensor[(10, 5, 3), int16], Tensor[(25, 6), int32], Tensor[(3, 243), float32], Tensor[(12, 6, 16), bool], Tensor[(72), int64]) */
}

def @func_5376() -> (Tensor[(10, 5, 3), float64],) {
  %400 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
  (%400,)
}

def @func_7304() -> Tensor[(3, 14, 5), float32] {
  %401 = @func_4291() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) */;
  %402 = %401.1;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
  atan(%403) /* ty=Tensor[(3, 14, 5), float32] */
}

def @func_6784() -> (Tensor[(10, 5, 3), float32],) {
  %408 = fn () -> (Tensor[(10, 5, 3), float32],) {
    %404 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %405 = %404.0;
    %406 = cast(%405, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %407 = rsqrt(%406) /* ty=Tensor[(10, 5, 3), float32] */;
    (%407,)
  };
  %408() /* ty=(Tensor[(10, 5, 3), float32],) */
}

def @func_7622() -> (Tensor[(10, 5, 3), float64],) {
  %411 = fn () -> (Tensor[(10, 5, 3), float64],) {
    %409 = @func_5465() /* ty=(Tensor[(10, 5, 3), float64],) */;
    %410 = %409.0;
    (%410,)
  };
  %411() /* ty=(Tensor[(10, 5, 3), float64],) */
}

def @func_2881() -> (Tensor[(10, 5, 3), int32],) {
  %412 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %413 = %412.0;
  (%413,)
}

def @func_2344(%var_2343: Tensor[(12, 6, 1), int64]) -> (Tensor[(12, 6, 16), bool],) {
  %417 = fn (%var_2329: Tensor[(12, 6, 1), int64]) -> (Tensor[(12, 6, 16), bool],) {
    %414 = cast(%var_2329, dtype="bool") /* ty=Tensor[(12, 6, 1), bool] */;
    %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 6, 16), int64] */, dtype="bool") /* ty=Tensor[(12, 6, 16), bool] */;
    %416 = less_equal(%414, %415) /* ty=Tensor[(12, 6, 16), bool] */;
    (%416,)
  };
  %417(%var_2343) /* ty=(Tensor[(12, 6, 16), bool],) */
}

def @func_4716() -> Tensor[(10, 5, 3), float64] {
  %418 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %420 = atanh(%419) /* ty=Tensor[(10, 5, 3), float32] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
  exp(%421) /* ty=Tensor[(10, 5, 3), float64] */
}

def @func_8233() -> Tensor[(10, 5, 3), float32] {
  %422 = fn () -> Tensor[(10, 5, 3), float32] {
    @func_4906() /* ty=Tensor[(10, 5, 3), float32] */
  };
  %422() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_4907() -> Tensor[(10, 5, 3), float32] {
  %424 = fn () -> Tensor[(10, 5, 3), float32] {
    %423 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
    %423.0
  };
  %424() /* ty=Tensor[(10, 5, 3), float32] */
}

def @func_3277() -> Tensor[(10, 5, 3), int32] {
  %426 = fn () -> Tensor[(10, 5, 3), int32] {
    %425 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %425.0
  };
  %426() /* ty=Tensor[(10, 5, 3), int32] */
}

def @func_3392() -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) {
  @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */
}

def @func_2757() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) {
  @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */
}

def @func_4634(%var_4622: Tensor[(10, 5, 3), float32], %var_4632: Tensor[(224), float32]) -> (Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
  %427 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %428 = %427.0;
  %429 = cast(%var_4622, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(%var_4632, dtype="float32") /* ty=Tensor[(224), float32] */;
  %434 = cast(%var_4632, dtype="float32") /* ty=Tensor[(224), float32] */;
  %435 = reshape(%433, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %436 = reshape(%434, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), float32] */;
  %437 = @func_172(%435, %436) /* ty=(Tensor[(7, 4, 8), bool],) */;
  %438 = less_equal(%431, %432) /* ty=Tensor[(10, 5, 3), bool] */;
  %439 = %437.0;
  (%438, %439, %var_4632)
}

def @func_4674(%var_4654: Tensor[(9, 11, 12), int32]) -> Tensor[(9, 11, 12), uint32] {
  %440 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 11, 12), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %441 = shape_of(%var_4654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_4654, dtype="int32") /* ty=Tensor[(9, 11, 12), int32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %444 = subtract(%442, %443) /* ty=Tensor[(9, 11, 12), int32] */;
  %445 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 11, 12), int32] */, dtype="uint32") /* ty=Tensor[(9, 11, 12), uint32] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="uint32") /* ty=Tensor[(9, 11, 12), uint32] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%447, %448) /* ty=Tensor[(9, 11, 12), uint32] */
}

def @func_6152() -> (Tensor[(10, 5, 3), int32],) {
  %449 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %450 = %449.0;
  (%450,)
}

def @func_7878() -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  @func_7876() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), bool]) */
}

def @func_2972(%var_2970: Tensor[(4, 2, 12), float32], %var_2971: Tensor[(4, 2, 12), float32]) -> (Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) {
  %468 = fn (%var_2938: Tensor[(4, 2, 12), float32], %var_2939: Tensor[(4, 2, 12), float32]) -> (Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) {
    %451 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %452 = cast(meta[relay.Constant][27] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %453 = reshape(%451, newshape=[120]) /* ty=Tensor[(120), uint32] */;
    %454 = reshape(%452, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %455 = @func_2692(%453, %454) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
    %456 = cast(%var_2939, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
    %457 = shape_of(%var_2938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_2938, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %460 = divide(%458, %459) /* ty=Tensor[(4, 2, 12), float32] */;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
    %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
    %463 = reshape(%462, newshape=[72]) /* ty=Tensor[(72), int64] */;
    %464 = @func_2622(%463) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
    %465 = %455.5;
    %466 = acosh(%461) /* ty=Tensor[(4, 2, 12), float32] */;
    %467 = %464.4;
    (%465, meta[relay.Constant][26] /* ty=Tensor[(120), uint32] */, meta[relay.Constant][27] /* ty=Tensor[(729), uint32] */, %466, %467, meta[relay.Constant][28] /* ty=Tensor[(72), int64] */)
  };
  %468(%var_2970, %var_2971) /* ty=(Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) */
}

def @func_2375() -> (Tensor[(10, 5, 3), int32],) {
  %471 = fn () -> (Tensor[(10, 5, 3), int32],) {
    %469 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %470 = %469.0;
    (%470,)
  };
  %471() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_3622() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) {
  %472 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %473 = cast(meta[relay.Constant][29] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %474 = reshape(%473, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %475 = @func_2444(%474) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %476 = %472.0;
  %477 = %475.1;
  (%476, %477, meta[relay.Constant][29] /* ty=Tensor[(150), int32] */)
}

def @func_5534() -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) {
  @func_5532() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) */
}

def @func_2933(%var_2932: Tensor[(210), float64]) -> (Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  %486 = fn (%var_2915: Tensor[(210), float64]) -> (Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
    %478 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %479 = %478.1;
    %480 = cast(%479, dtype="float64") /* ty=Tensor[(729), float64] */;
    %481 = cast(%var_2915, dtype="float64") /* ty=Tensor[(210), float64] */;
    %482 = reshape(%481, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
    %483 = @func_764(%482) /* ty=(Tensor[(3, 14, 5), float64],) */;
    %484 = erf(%480) /* ty=Tensor[(729), float64] */;
    %485 = %483.0;
    (%484, %485, %var_2915)
  };
  %486(%var_2932) /* ty=(Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */
}

def @func_8109(%var_8108: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), int8]) {
  %506 = fn (%var_8077: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), int8]) {
    %487 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %488 = cast(%var_8077, dtype="bool") /* ty=Tensor[(729), bool] */;
    %489 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(729), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %490 = cast(meta[relay.Constant][30] /* ty=Tensor[(729), uint32] */, dtype="bool") /* ty=Tensor[(729), bool] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?), bool] */;
    %492 = not_equal(%490, %491) /* ty=Tensor[(729), bool] */;
    %493 = @func_6565() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) */;
    %494 = %493.1;
    %495 = cast(meta[relay.Constant][30] /* ty=Tensor[(729), uint32] */, dtype="float64") /* ty=Tensor[(729), float64] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
    %497 = cast(%494, dtype="float64") /* ty=Tensor[(729), float64] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), float64] */;
    %499 = floor_mod(%497, %498) /* ty=Tensor[(729), float64] */;
    %500 = cast(%499, dtype="int8") /* ty=Tensor[(729), int8] */;
    %501 = shape_of(%492, dtype="int32") /* ty=Tensor[(1), int32] */;
    %502 = cast(%492, dtype="int8") /* ty=Tensor[(729), int8] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), int8] */;
    %504 = %487.0;
    %505 = maximum(%502, %503) /* ty=Tensor[(729), int8] */;
    (%504, %505)
  };
  %506(%var_8108) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), int8]) */
}

def @func_2512() -> (Tensor[(10, 5, 3), int32],) {
  %507 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %508 = %507.0;
  (%508,)
}

def @func_3604() -> Tensor[(10, 5, 3), int32] {
  %510 = fn () -> Tensor[(10, 5, 3), int32] {
    %509 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %509.0
  };
  %510() /* ty=Tensor[(10, 5, 3), int32] */
}

def @func_8059() -> (Tensor[(240), float32],) {
  %511 = @func_6014() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) */;
  %512 = %511.2;
  (%512,)
}

def @func_4789(%var_4787: Tensor[(120), uint32], %var_4788: Tensor[(729), uint32]) -> (Tensor[(150), int32], Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32]) {
  @func_4785(%var_4787, %var_4788) /* ty=(Tensor[(150), int32], Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32]) */
}

def @func_1872(%var_1871: Tensor[(14, 16, 9), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(240), float32], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), float64], Tensor[(14, 16, 9), uint16], Tensor[(35, 6), float64], Tensor[(14, 16, 9), float32], Tensor[(3, 14, 5), float64], Tensor[(3, 14, 5), float64]) {
  %551 = fn (%var_1785: Tensor[(14, 16, 9), float32]) -> (Tensor[(12, 5, 4), float32], Tensor[(240), float32], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), float64], Tensor[(14, 16, 9), uint16], Tensor[(35, 6), float64], Tensor[(14, 16, 9), float32], Tensor[(3, 14, 5), float64], Tensor[(3, 14, 5), float64]) {
    %513 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %514 = reshape(%513, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %515 = @func_1290(%514) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %516 = cast(meta[relay.Constant][32] /* ty=Tensor[(729, 1), uint32] */, dtype="uint32") /* ty=Tensor[(729, 1), uint32] */;
    %517 = reshape(%516, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %518 = @func_1188(%517) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
    %519 = %515.0;
    %520 = cast(%519, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
    %521 = reshape(%520, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %522 = @func_1290(%521) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %523 = %522.1;
    %524 = cast(meta[relay.Constant][32] /* ty=Tensor[(729, 1), uint32] */, dtype="float64") /* ty=Tensor[(729, 1), float64] */;
    %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%523, dtype="float64") /* ty=Tensor[(9, 9, 9), float64] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %528 = cast(%var_1785, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
    %529 = acos(%528) /* ty=Tensor[(14, 16, 9), float32] */;
    %530 = cast(%var_1785, dtype="uint16") /* ty=Tensor[(14, 16, 9), uint16] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="uint16") /* ty=Tensor[(14, 16, 9), uint16] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %534 = cast(%529, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
    %535 = exp(%534) /* ty=Tensor[(14, 16, 9), float64] */;
    %536 = cast(%535, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
    %537 = cast(meta[relay.Constant][33] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
    %538 = reshape(%537, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
    %539 = @func_764(%538) /* ty=(Tensor[(3, 14, 5), float64],) */;
    %540 = cast(meta[relay.Constant][33] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
    %541 = reshape(%540, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
    %542 = @func_764(%541) /* ty=(Tensor[(3, 14, 5), float64],) */;
    %543 = %542.0;
    %544 = cast(%543, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
    %545 = %518.0;
    %546 = floor_mod(%526, %527) /* ty=Tensor[(9, 9, 9), float64] */;
    %547 = bitwise_and(%532, %533) /* ty=Tensor[(14, 16, 9), uint16] */;
    %548 = log2(%536) /* ty=Tensor[(14, 16, 9), float32] */;
    %549 = %539.0;
    %550 = rsqrt(%544) /* ty=Tensor[(3, 14, 5), float64] */;
    (%519, meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, %545, %546, %547, meta[relay.Constant][33] /* ty=Tensor[(35, 6), float64] */, %548, %549, %550)
  };
  %551(%var_1871) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(240), float32], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), float64], Tensor[(14, 16, 9), uint16], Tensor[(35, 6), float64], Tensor[(14, 16, 9), float32], Tensor[(3, 14, 5), float64], Tensor[(3, 14, 5), float64]) */
}

def @func_5007() -> (Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) {
  %552 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %553 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 30), int32] */, dtype="int32") /* ty=Tensor[(5, 30), int32] */;
  %554 = reshape(%553, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %555 = %552.1;
  %556 = cast(%555, dtype="uint64") /* ty=Tensor[(729), uint64] */;
  %557 = reshape(%556, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
  %558 = @func_2815(%557) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
  %559 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 30), int32] */, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %560 = @func_3999(%554) /* ty=Tensor[(10, 5, 3), int16] */;
  %561 = %558.1;
  %562 = erf(%559) /* ty=Tensor[(5, 30), float32] */;
  (%555, %560, %561, %562)
}

def @func_6372() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  @func_6370() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */
}

def @func_8381(%var_8379: int16, %var_8380: Tensor[(1, 14, 5), int16]) -> (Tensor[(1, 14, 5), int16], Tensor[(10, 5, 3), int32], Tensor[(48, 24), float64]) {
  %570 = fn (%var_8368: int16, %var_8369: Tensor[(1, 14, 5), int16]) -> (Tensor[(1, 14, 5), int16], Tensor[(10, 5, 3), int32], Tensor[(48, 24), float64]) {
    %563 = cast(%var_8368, dtype="int16") /* ty=int16 */;
    %564 = cast(%var_8369, dtype="int16") /* ty=Tensor[(1, 14, 5), int16] */;
    %565 = cast(meta[relay.Constant][35] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
    %566 = reshape(%565, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float64] */;
    %567 = @func_5282(%566) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) */;
    %568 = bitwise_xor(%563, %564) /* ty=Tensor[(1, 14, 5), int16] */;
    %569 = %567.0;
    (%568, %569, meta[relay.Constant][35] /* ty=Tensor[(48, 24), float64] */)
  };
  %570(%var_8379, %var_8380) /* ty=(Tensor[(1, 14, 5), int16], Tensor[(10, 5, 3), int32], Tensor[(48, 24), float64]) */
}

def @func_2996(%var_2995: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool],) {
  %578 = fn (%var_2985: Tensor[(10, 5, 3), int32]) -> (Tensor[(10, 5, 3), bool],) {
    %571 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %572 = %571.0;
    %573 = cast(%var_2985, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%572, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %577 = greater(%575, %576) /* ty=Tensor[(10, 5, 3), bool] */;
    (%577,)
  };
  %578(%var_2995) /* ty=(Tensor[(10, 5, 3), bool],) */
}

def @func_5200() -> Tensor[(10, 5, 3), int32] {
  %579 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %579.0
}

def @func_6061(%var_6060: Tensor[(1152), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool], Tensor[(1152), float64]) {
  %586 = fn (%var_6056: Tensor[(1152), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool], Tensor[(1152), float64]) {
    %580 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %581 = cast(%var_6056, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %582 = reshape(%581, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float64] */;
    %583 = @func_5282(%582) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) */;
    %584 = %580.0;
    %585 = %583.1;
    (%584, %585, %var_6056)
  };
  %586(%var_6060) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool], Tensor[(1152), float64]) */
}

def @func_987(%var_970: Tensor[(9, 9, 9), uint32], %var_971: Tensor[(9, 9, 9), uint32]) -> (Tensor[(9, 9, 9), uint64],) {
  %587 = cast(%var_971, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %588 = shape_of(%var_970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_970, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %591 = subtract(%589, %590) /* ty=Tensor[(9, 9, 9), uint32] */;
  %592 = cast(%591, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
  %593 = shape_of(%var_971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_971, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %596 = logical_xor(%594, %595) /* ty=Tensor[(9, 9, 9), uint64] */;
  (%596,)
}

def @func_4817() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) {
  %597 = @func_3603() /* ty=Tensor[(10, 5, 3), int32] */;
  %598 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
  (%597, %598)
}

def @func_4556(%var_4554: Tensor[(18, 4), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(72), int64], Tensor[(18, 4), int64], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) {
  @func_4553(%var_4554) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(72), int64], Tensor[(18, 4), int64], Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */
}

def @func_2308(%var_2306: Tensor[(13, 8, 14), int64], %var_2307: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), int64],) {
  %604 = fn (%var_2300: Tensor[(13, 8, 14), int64], %var_2301: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), int64],) {
    %599 = cast(%var_2301, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
    %600 = shape_of(%var_2300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%var_2300, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %603 = right_shift(%601, %602) /* ty=Tensor[(13, 8, 14), int64] */;
    (%603,)
  };
  %604(%var_2306, %var_2307) /* ty=(Tensor[(13, 8, 14), int64],) */
}

def @func_5792() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %605 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %606 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %607 = %605.0;
  %608 = %606.0;
  (%607, %608)
}

def @func_6823() -> (Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) {
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 10), float64] */;
  %610 = acosh(%609) /* ty=Tensor[(6, 3, 10), float64] */;
  %611 = cast(%610, dtype="int32") /* ty=Tensor[(6, 3, 10), int32] */;
  %612 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 3, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 3, 10), float64] */, dtype="int32") /* ty=Tensor[(6, 3, 10), int32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %615 = @func_5332() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) */;
  %616 = logical_xor(%613, %614) /* ty=Tensor[(6, 3, 10), int32] */;
  %617 = %615.2;
  (%616, %617)
}

def @func_3584(%var_3582: Tensor[(240), float32], %var_3583: Tensor[(1, 210), float64]) -> (Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) {
  %653 = fn (%var_3513: Tensor[(240), float32], %var_3536: Tensor[(1, 210), float64]) -> (Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) {
    %618 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %619 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %620 = %619.0;
    %621 = cast(%620, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %622 = cast(%var_3513, dtype="float32") /* ty=Tensor[(240), float32] */;
    %623 = reshape(%622, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %624 = @func_3220(%623) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) */;
    %625 = cast(%620, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %626 = acosh(%625) /* ty=Tensor[(10, 5, 3), float64] */;
    %627 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%626, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %631 = cast(%626, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %632 = reshape(%631, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %633 = @func_2444(%632) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
    %634 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %635 = cast(%var_3536, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
    %636 = reshape(%635, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float64] */;
    %637 = @func_764(%636) /* ty=(Tensor[(3, 14, 5), float64],) */;
    %638 = %618.0;
    %639 = cast(%638, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
    %640 = reshape(%639, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %641 = @func_1188(%640) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
    %642 = cast(%638, dtype="uint64") /* ty=Tensor[(9, 9, 9), uint64] */;
    %643 = reshape(%642, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint64] */;
    %644 = @func_2815(%643) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */;
    %645 = asinh(%621) /* ty=Tensor[(10, 5, 3), float32] */;
    %646 = %624.2;
    %647 = floor_divide(%629, %630) /* ty=Tensor[(10, 5, 3), float64] */;
    %648 = %633.0;
    %649 = %634.0;
    %650 = %637.0;
    %651 = %641.3;
    %652 = %644.2;
    (%638, %645, %646, %var_3513, %647, %648, %649, %650, %var_3536, %651, %652)
  };
  %653(%var_3582, %var_3583) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), bool], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64], Tensor[(12, 11, 13), int32], Tensor[(240), float32]) */
}

def @func_5284(%var_5283: Tensor[(16, 12, 6), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) {
  %662 = fn (%var_5273: Tensor[(16, 12, 6), float64]) -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) {
    %654 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
    %655 = %654.1;
    %656 = cast(%var_5273, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
    %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%655, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %660 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
    %661 = greater_equal(%658, %659) /* ty=Tensor[(16, 12, 6), bool] */;
    (%660, %661)
  };
  %662(%var_5283) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), bool]) */
}

def @func_6741() -> Tensor[(5, 42), float32] {
  @func_6739() /* ty=Tensor[(5, 42), float32] */
}

def @func_6626() -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float32]) {
  %669 = fn () -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float32]) {
    %663 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %664 = %663.0;
    %665 = cast(%664, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %666 = @func_6370() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
    %667 = tan(%665) /* ty=Tensor[(10, 5, 3), float64] */;
    %668 = %666.1;
    (%667, %668)
  };
  %669() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float32]) */
}

def @func_2755() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) {
  %670 = cast(meta[relay.Constant][38] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %671 = cast(meta[relay.Constant][38] /* ty=Tensor[(729), uint32] */, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %672 = reshape(%670, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %673 = reshape(%671, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), uint32] */;
  %674 = @func_987(%672, %673) /* ty=(Tensor[(9, 9, 9), uint64],) */;
  %675 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %676 = %675.0;
  %677 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="uint16") /* ty=Tensor[(10, 5, 3), uint16] */;
  %680 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%676, dtype="uint16") /* ty=Tensor[(10, 5, 3), uint16] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %683 = %674.0;
  %684 = bitwise_xor(%681, %682) /* ty=Tensor[(10, 5, 3), uint16] */;
  (%683, meta[relay.Constant][38] /* ty=Tensor[(729), uint32] */, %684)
}

def @func_7195() -> (Tensor[(10, 5, 3), int32],) {
  %685 = @func_4817() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32]) */;
  %686 = %685.0;
  (%686,)
}

def @func_6016() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) {
  @func_6014() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) */
}

def @func_7855(%var_7852: Tensor[(9, 9, 9), uint64], %var_7853: Tensor[(120), uint32], %var_7854: Tensor[(1188, 4), int32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), bool], Tensor[(120), uint32], Tensor[(9, 11, 12), uint32], Tensor[(10, 5, 3), float32], Tensor[(1188, 4), uint64], Tensor[(10, 5, 3), int32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(1188, 120), float64], Tensor[(10, 5, 3), int32]) {
  %729 = fn (%var_7740: Tensor[(9, 9, 9), uint64], %var_7788: Tensor[(120), uint32], %var_7813: Tensor[(1188, 4), int32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), bool], Tensor[(120), uint32], Tensor[(9, 11, 12), uint32], Tensor[(10, 5, 3), float32], Tensor[(1188, 4), uint64], Tensor[(10, 5, 3), int32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(1188, 120), float64], Tensor[(10, 5, 3), int32]) {
    %687 = @func_6885() /* ty=Tensor[(10, 5, 3), float64] */;
    %688 = cast(%687, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %689 = reshape(%688, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %690 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %691 = %690.0;
    %692 = cast(%var_7740, dtype="bool") /* ty=Tensor[(9, 9, 9), bool] */;
    %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(%691, dtype="bool") /* ty=Tensor[(9, 9, 9), bool] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %696 = cast(%var_7788, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %697 = not_equal(%694, %695) /* ty=Tensor[(9, 9, 9), bool] */;
    %698 = cast(%697, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
    %699 = reshape(%696, newshape=[120]) /* ty=Tensor[(120), uint32] */;
    %700 = reshape(%698, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %701 = @func_6271(%699, %700) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(224, 1), float32], Tensor[(10, 5, 3), float32], Tensor[(9, 9, 9), float32]) */;
    %702 = cast(meta[relay.Constant][39] /* ty=Tensor[(1188, 1), int32] */, dtype="int32") /* ty=Tensor[(1188, 1), int32] */;
    %703 = reshape(%702, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), int32] */;
    %704 = @func_5792() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) */;
    %705 = cast(meta[relay.Constant][39] /* ty=Tensor[(1188, 1), int32] */, dtype="uint64") /* ty=Tensor[(1188, 1), uint64] */;
    %706 = cast(%var_7813, dtype="uint64") /* ty=Tensor[(1188, 4), uint64] */;
    %707 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %708 = cast(meta[relay.Constant][40] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %709 = cast(meta[relay.Constant][40] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %710 = reshape(%708, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
    %711 = reshape(%709, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
    %712 = @func_2969(%710, %711) /* ty=(Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) */;
    %713 = cast(meta[relay.Constant][39] /* ty=Tensor[(1188, 1), int32] */, dtype="bool") /* ty=Tensor[(1188, 1), bool] */;
    %714 = cast(%var_7788, dtype="bool") /* ty=Tensor[(120), bool] */;
    %715 = equal(%713, %714) /* ty=Tensor[(1188, 120), bool] */;
    %716 = cast(%715, dtype="float64") /* ty=Tensor[(1188, 120), float64] */;
    %717 = cast(%691, dtype="uint32") /* ty=Tensor[(9, 9, 9), uint32] */;
    %718 = reshape(%717, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %719 = @func_5050(%718) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), bool]) */;
    %720 = @func_3999(%689) /* ty=Tensor[(10, 5, 3), int16] */;
    %721 = %701.1;
    %722 = @func_4674(%703) /* ty=Tensor[(9, 11, 12), uint32] */;
    %723 = %704.1;
    %724 = bitwise_xor(%705, %706) /* ty=Tensor[(1188, 4), uint64] */;
    %725 = %707.0;
    %726 = %712.3;
    %727 = log10(%716) /* ty=Tensor[(1188, 120), float64] */;
    %728 = %719.0;
    (%687, %720, %697, %721, %722, %723, %724, %725, %726, meta[relay.Constant][40] /* ty=Tensor[(96), float32] */, %727, %728)
  };
  %729(%var_7852, %var_7853, %var_7854) /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), bool], Tensor[(120), uint32], Tensor[(9, 11, 12), uint32], Tensor[(10, 5, 3), float32], Tensor[(1188, 4), uint64], Tensor[(10, 5, 3), int32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(1188, 120), float64], Tensor[(10, 5, 3), int32]) */
}

def @func_7509(%var_7506: float32, %var_7507: Tensor[(140), float32], %var_7508: Tensor[(2184), float64]) -> (Tensor[(10, 5, 3), int32], float32, Tensor[(3, 14, 5), float32], Tensor[(729), int8], Tensor[(16, 4, 13), uint32], Tensor[(10, 5, 3), int32], Tensor[(12, 13, 14), float64], Tensor[(2184), float64], Tensor[(10, ?, 14), int64], Tensor[(16, 4, 13), uint32], Tensor[(729), float64], Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), bool]) {
  %779 = fn (%var_7350: float32, %var_7351: Tensor[(140), float32], %var_7432: Tensor[(2184), float64]) -> (Tensor[(10, 5, 3), int32], float32, Tensor[(3, 14, 5), float32], Tensor[(729), int8], Tensor[(16, 4, 13), uint32], Tensor[(10, 5, 3), int32], Tensor[(12, 13, 14), float64], Tensor[(2184), float64], Tensor[(10, ?, 14), int64], Tensor[(16, 4, 13), uint32], Tensor[(729), float64], Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), bool]) {
    %730 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %731 = %730.1;
    %732 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %733 = %732.1;
    %734 = cast(%733, dtype="int8") /* ty=Tensor[(729), int8] */;
    %735 = shape_of(%731, dtype="int32") /* ty=Tensor[(1), int32] */;
    %736 = cast(%731, dtype="int8") /* ty=Tensor[(729), int8] */;
    %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?), int8] */;
    %738 = cast(%var_7432, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %739 = cast(%var_7432, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %740 = reshape(%738, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
    %741 = reshape(%739, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
    %742 = cast(%var_7350, dtype="float32") /* ty=float32 */;
    %743 = cast(%var_7351, dtype="float32") /* ty=Tensor[(140), float32] */;
    %744 = reshape(%742, newshape=[]) /* ty=float32 */;
    %745 = reshape(%743, newshape=[10, 1, 14]) /* ty=Tensor[(10, 1, 14), float32] */;
    %746 = @func_5508(%744, %745) /* ty=(Tensor[(10, 1, 14), bool],) */;
    %747 = %746.0;
    %748 = cast(%747, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
    %749 = sigmoid(%748) /* ty=Tensor[(10, 1, 14), float64] */;
    %750 = cast(%var_7351, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%749, dtype="uint64") /* ty=Tensor[(10, 1, 14), uint64] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %754 = subtract(%752, %753) /* ty=Tensor[(10, ?, 14), uint64] */;
    %755 = cast(%747, dtype="int64") /* ty=Tensor[(10, 1, 14), int64] */;
    %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%754, dtype="int64") /* ty=Tensor[(10, ?, 14), int64] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %759 = @func_7304() /* ty=Tensor[(3, 14, 5), float32] */;
    %760 = cast(%759, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
    %761 = reshape(%760, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %762 = @func_2931(%761) /* ty=(Tensor[(729), float64], Tensor[(3, 14, 5), float64], Tensor[(210), float64]) */;
    %763 = multiply(%736, %737) /* ty=Tensor[(729), int8] */;
    %764 = cast(%763, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %765 = reshape(%764, newshape=[1, 729]) /* ty=Tensor[(1, 729), uint32] */;
    %766 = @func_6342(%765) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) */;
    %767 = @func_3466() /* ty=Tensor[(10, 5, 3), int32] */;
    %768 = cast(%767, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %769 = reshape(%768, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %770 = @func_2994(%769) /* ty=(Tensor[(10, 5, 3), bool],) */;
    %771 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
    %772 = @func_6951() /* ty=Tensor[(16, 4, 13), uint32] */;
    %773 = @func_7088(%740, %741) /* ty=Tensor[(12, 13, 14), float64] */;
    %774 = logical_xor(%757, %758) /* ty=Tensor[(10, ?, 14), int64] */;
    %775 = @func_6951() /* ty=Tensor[(16, 4, 13), uint32] */;
    %776 = %762.0;
    %777 = %766.1;
    %778 = %770.0;
    (%771, %var_7350, %759, %763, %772, %767, %773, %var_7432, %774, %775, %776, %777, %778)
  };
  %779(%var_7506, %var_7507, %var_7508) /* ty=(Tensor[(10, 5, 3), int32], float32, Tensor[(3, 14, 5), float32], Tensor[(729), int8], Tensor[(16, 4, 13), uint32], Tensor[(10, 5, 3), int32], Tensor[(12, 13, 14), float64], Tensor[(2184), float64], Tensor[(10, ?, 14), int64], Tensor[(16, 4, 13), uint32], Tensor[(729), float64], Tensor[(9, 9, 9), uint64], Tensor[(10, 5, 3), bool]) */
}

def @func_5050(%var_5040: Tensor[(729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  %780 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %781 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %782 = %781.1;
  %783 = cast(%var_5040, dtype="bool") /* ty=Tensor[(729), bool] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(1), int32] */;
  %785 = cast(%782, dtype="bool") /* ty=Tensor[(729), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?), bool] */;
  %787 = %780.0;
  %788 = less_equal(%785, %786) /* ty=Tensor[(729), bool] */;
  (%787, %788)
}

def @func_991(%var_989: Tensor[(9, 9, 9), uint32], %var_990: Tensor[(9, 9, 9), uint32]) -> (Tensor[(9, 9, 9), uint64],) {
  @func_987(%var_989, %var_990) /* ty=(Tensor[(9, 9, 9), uint64],) */
}

def @func_5378() -> (Tensor[(10, 5, 3), float64],) {
  @func_5376() /* ty=(Tensor[(10, 5, 3), float64],) */
}

def @func_6686(%var_6682: Tensor[(132), float32], %var_6683: Tensor[(96), float32]) -> (Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(132), float32], Tensor[(96), float32]) {
  %789 = @func_5332() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64]) */;
  %790 = @func_3424() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %791 = cast(%var_6682, dtype="float32") /* ty=Tensor[(132), float32] */;
  %792 = cast(%var_6683, dtype="float32") /* ty=Tensor[(96), float32] */;
  %793 = reshape(%791, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float32] */;
  %794 = reshape(%792, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %795 = @func_3736(%793, %794) /* ty=(Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) */;
  %796 = %789.3;
  %797 = %790.0;
  %798 = %795.4;
  (%796, %797, %798, %var_6682, %var_6683)
}

def @func_8045() -> Tensor[(10, 5, 3), float32] {
  %799 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %799.0
}

def @func_764(%var_746: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  %800 = cast(%var_746, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %801 = exp(%800) /* ty=Tensor[(3, 14, 5), float64] */;
  (%801,)
}

def @func_5532() -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64]) {
  %802 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
  %803 = @func_5200() /* ty=Tensor[(10, 5, 3), int32] */;
  %804 = %802.0;
  (%803, %804)
}

def @func_6345(%var_6343: Tensor[(1, 729), uint32]) -> (Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) {
  @func_6342(%var_6343) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(9, 9, 9), uint64], Tensor[(1, 729), uint32], Tensor[(10, 5, 3), float32]) */
}

def @func_7153(%var_7151: Tensor[(729), uint32]) -> (Tensor[(5, 42), float32], Tensor[(10, 5, 3), int32], Tensor[(729), int32], Tensor[(10, 5, 3), bool]) {
  @func_7150(%var_7151) /* ty=(Tensor[(5, 42), float32], Tensor[(10, 5, 3), int32], Tensor[(729), int32], Tensor[(10, 5, 3), bool]) */
}

def @func_864(%var_862: float64, %var_863: Tensor[(12, 11, 13), float64]) -> (Tensor[(12, 11, 13), int32],) {
  @func_860(%var_862, %var_863) /* ty=(Tensor[(12, 11, 13), int32],) */
}

def @func_1982(%var_1979: Tensor[(4, 11, 1), uint8], %var_1980: Tensor[(120), uint32], %var_1981: Tensor[(224), float32]) -> (Tensor[(4, 11, 11), bool], Tensor[(729), uint32], Tensor[(240), float32], Tensor[(9, 9, 9), uint64], Tensor[(224), float32], Tensor[(120), uint32], Tensor[(224), float32]) {
  @func_1977(%var_1979, %var_1980, %var_1981) /* ty=(Tensor[(4, 11, 11), bool], Tensor[(729), uint32], Tensor[(240), float32], Tensor[(9, 9, 9), uint64], Tensor[(224), float32], Tensor[(120), uint32], Tensor[(224), float32]) */
}

def @func_8061() -> (Tensor[(240), float32],) {
  @func_8059() /* ty=(Tensor[(240), float32],) */
}

def @func_1639(%var_1638: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) {
  %811 = fn (%var_1601: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) {
    %805 = cast(%var_1601, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
    %806 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %807 = reshape(%806, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %808 = @func_1290(%807) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %809 = cosh(%805) /* ty=Tensor[(10, 15, 10), float64] */;
    %810 = %808.1;
    (%809, %810, meta[relay.Constant][41] /* ty=Tensor[(240), float32] */)
  };
  %811(%var_1638) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) */
}

def @func_3173(%var_3171: Tensor[(6, 15, 13), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(10, 5, 3), int32]) {
  @func_3170(%var_3171) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(10, 5, 3), int32]) */
}

def @func_2817(%var_2816: Tensor[(9, 9, 9), uint64]) -> (Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) {
  %828 = fn (%var_2786: Tensor[(9, 9, 9), uint64]) -> (Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) {
    %812 = @func_2755() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(10, 5, 3), uint16]) */;
    %813 = %812.0;
    %814 = cast(%var_2786, dtype="uint16") /* ty=Tensor[(9, 9, 9), uint16] */;
    %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %816 = cast(%813, dtype="uint16") /* ty=Tensor[(9, 9, 9), uint16] */;
    %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %818 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %819 = reshape(%818, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %820 = @func_1290(%819) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %821 = cast(%813, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
    %822 = shape_of(%var_2786, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%var_2786, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %825 = bitwise_or(%816, %817) /* ty=Tensor[(9, 9, 9), uint16] */;
    %826 = %820.1;
    %827 = power(%823, %824) /* ty=Tensor[(9, 9, 9), float32] */;
    (%825, %826, meta[relay.Constant][42] /* ty=Tensor[(240), float32] */, %827)
  };
  %828(%var_2816) /* ty=(Tensor[(9, 9, 9), uint16], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(9, 9, 9), float32]) */
}

def @func_6567() -> (Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) {
  @func_6565() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) */
}

def @func_4203(%var_4200: Tensor[(729), uint32], %var_4201: Tensor[(10, 5, 3), int32], %var_4202: Tensor[(224), float32]) -> (Tensor[(12, 11, 13), int32], Tensor[(10, 5, 3), bool], Tensor[(224), float32], Tensor[(30, 4), uint32], Tensor[(224), float32], Tensor[(16, 12, 6), float64], Tensor[(729), float32], Tensor[(3, 500), float64], Tensor[(10, 5, 3), int32]) {
  %870 = fn (%var_4130: Tensor[(729), uint32], %var_4139: Tensor[(10, 5, 3), int32], %var_4149: Tensor[(224), float32]) -> (Tensor[(12, 11, 13), int32], Tensor[(10, 5, 3), bool], Tensor[(224), float32], Tensor[(30, 4), uint32], Tensor[(224), float32], Tensor[(16, 12, 6), float64], Tensor[(729), float32], Tensor[(3, 500), float64], Tensor[(10, 5, 3), int32]) {
    %829 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %830 = reshape(%829, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %831 = @func_1188(%830) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
    %832 = @func_3390() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) */;
    %833 = %832.0;
    %834 = cast(%var_4139, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(%833, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %838 = cast(meta[relay.Constant][43] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
    %839 = cast(meta[relay.Constant][43] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
    %840 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %841 = cast(%var_4149, dtype="float32") /* ty=Tensor[(224), float32] */;
    %842 = reshape(%838, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %843 = reshape(%839, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %844 = reshape(%840, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %845 = reshape(%841, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %846 = @func_1744(%842, %843, %844, %845) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
    %847 = @func_4087() /* ty=(Tensor[(10, 5, 3), float64], Tensor[(16, 12, 6), float64]) */;
    %848 = cast(%var_4130, dtype="float64") /* ty=Tensor[(729), float64] */;
    %849 = atanh(%848) /* ty=Tensor[(729), float64] */;
    %850 = cast(%var_4130, dtype="int64") /* ty=Tensor[(729), int64] */;
    %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(1), int32] */;
    %852 = cast(%849, dtype="int64") /* ty=Tensor[(729), int64] */;
    %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?), int64] */;
    %854 = left_shift(%852, %853) /* ty=Tensor[(729), int64] */;
    %855 = cast(%854, dtype="float32") /* ty=Tensor[(729), float32] */;
    %856 = cast(meta[relay.Constant][43] /* ty=Tensor[(30, 4), uint32] */, dtype="uint32") /* ty=Tensor[(30, 4), uint32] */;
    %857 = tan(%855) /* ty=Tensor[(729), float32] */;
    %858 = cast(%857, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %859 = cast(%var_4149, dtype="float32") /* ty=Tensor[(224), float32] */;
    %860 = reshape(%856, newshape=[120]) /* ty=Tensor[(120), uint32] */;
    %861 = reshape(%858, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %862 = reshape(%859, newshape=[16, 14]) /* ty=Tensor[(16, 14), float32] */;
    %863 = @func_3365(%860, %861, %862) /* ty=(Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) */;
    %864 = %831.3;
    %865 = logical_and(%836, %837) /* ty=Tensor[(10, 5, 3), bool] */;
    %866 = %846.6;
    %867 = %847.1;
    %868 = %863.1;
    %869 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
    (%864, %865, %866, meta[relay.Constant][43] /* ty=Tensor[(30, 4), uint32] */, %var_4149, %867, %857, %868, %869)
  };
  %870(%var_4200, %var_4201, %var_4202) /* ty=(Tensor[(12, 11, 13), int32], Tensor[(10, 5, 3), bool], Tensor[(224), float32], Tensor[(30, 4), uint32], Tensor[(224), float32], Tensor[(16, 12, 6), float64], Tensor[(729), float32], Tensor[(3, 500), float64], Tensor[(10, 5, 3), int32]) */
}

def @func_7266(%var_7265: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 5, 4), float32], Tensor[(72), int64], Tensor[(10, 5, 3), bool]) {
  %881 = fn (%var_7256: Tensor[(72), int64]) -> (Tensor[(10, 5, 3), int32], Tensor[(12, 5, 4), float32], Tensor[(72), int64], Tensor[(10, 5, 3), bool]) {
    %871 = @func_6565() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(729), uint32], Tensor[(240), float32]) */;
    %872 = cast(%var_7256, dtype="int64") /* ty=Tensor[(72), int64] */;
    %873 = reshape(%872, newshape=[72]) /* ty=Tensor[(72), int64] */;
    %874 = @func_2622(%873) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 6, 16), bool], Tensor[(72), int64], Tensor[(12, 5, 4), float32], Tensor[(240), float32]) */;
    %875 = %871.0;
    %876 = cast(%875, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
    %877 = reshape(%876, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
    %878 = @func_2994(%877) /* ty=(Tensor[(10, 5, 3), bool],) */;
    %879 = %874.3;
    %880 = %878.0;
    (%875, %879, %var_7256, %880)
  };
  %881(%var_7265) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(12, 5, 4), float32], Tensor[(72), int64], Tensor[(10, 5, 3), bool]) */
}

def @func_6953() -> Tensor[(16, 4, 13), uint32] {
  @func_6951() /* ty=Tensor[(16, 4, 13), uint32] */
}

def @func_7306() -> Tensor[(3, 14, 5), float32] {
  @func_7304() /* ty=Tensor[(3, 14, 5), float32] */
}

def @func_5695() -> (Tensor[(10, 5, 3), int32],) {
  %882 = @func_4291() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(?, 210), uint8]) */;
  %883 = %882.0;
  (%883,)
}

def @func_6393() -> (Tensor[(5, 42), float32],) {
  %888 = fn () -> (Tensor[(5, 42), float32],) {
    %884 = @func_6014() /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) */;
    %885 = %884.3;
    %886 = cast(%885, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
    %887 = sigmoid(%886) /* ty=Tensor[(5, 42), float32] */;
    (%887,)
  };
  %888() /* ty=(Tensor[(5, 42), float32],) */
}

def @func_4785(%var_4771: Tensor[(120), uint32], %var_4772: Tensor[(729), uint32]) -> (Tensor[(150), int32], Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32]) {
  %889 = @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */;
  %890 = cast(%var_4771, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %891 = cast(%var_4772, dtype="uint32") /* ty=Tensor[(729), uint32] */;
  %892 = reshape(%890, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %893 = reshape(%891, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %894 = @func_2692(%892, %893) /* ty=(Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(2, 112), float32]) */;
  %895 = %889.2;
  %896 = %894.5;
  (%895, %896, %var_4771, %var_4772)
}

def @func_3222(%var_3221: Tensor[(240), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) {
  %905 = fn (%var_3204: Tensor[(240), float32]) -> (Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) {
    %897 = cast(%var_3204, dtype="float32") /* ty=Tensor[(240), float32] */;
    %898 = reshape(%897, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
    %899 = @func_1290(%898) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
    %900 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %901 = %900.0;
    %902 = cast(%901, dtype="float64") /* ty=Tensor[(10, 5, 3), float64] */;
    %903 = %899.1;
    %904 = sigmoid(%902) /* ty=Tensor[(10, 5, 3), float64] */;
    (%903, %var_3204, %904)
  };
  %905(%var_3221) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(10, 5, 3), float64]) */
}

def @func_6014() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(5, 42), float64], Tensor[(10, 5, 3), int32], Tensor[(729), uint32]) {
  %906 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %907 = cast(meta[relay.Constant][44] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %908 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %909 = reshape(%907, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %910 = reshape(%908, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %911 = @func_4938(%909, %910) /* ty=(Tensor[(10, 5, 3), float64], Tensor[(10, 5, 3), float64], Tensor[(240), float32], Tensor[(210), float64]) */;
  %912 = @func_2374() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %913 = cast(meta[relay.Constant][44] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %914 = reshape(%913, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), float32] */;
  %915 = @func_1290(%914) /* ty=(Tensor[(12, 5, 4), float32], Tensor[(9, 9, 9), uint64], Tensor[(729), uint32]) */;
  %916 = %906.0;
  %917 = %911.0;
  %918 = %912.0;
  %919 = %915.2;
  (%916, %917, meta[relay.Constant][44] /* ty=Tensor[(240), float32] */, meta[relay.Constant][45] /* ty=Tensor[(5, 42), float64] */, %918, %919)
}

def @func_3624() -> (Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) {
  @func_3622() /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(150), int32]) */
}

def @func_5202() -> Tensor[(10, 5, 3), int32] {
  @func_5200() /* ty=Tensor[(10, 5, 3), int32] */
}

def @func_3739(%var_3737: Tensor[(2, 11, 6), float32], %var_3738: Tensor[(96), float32]) -> (Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) {
  %931 = fn (%var_3716: Tensor[(2, 11, 6), float32], %var_3725: Tensor[(96), float32]) -> (Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) {
    %920 = cast(%var_3716, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
    %921 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
    %922 = cast(%var_3725, dtype="float32") /* ty=Tensor[(96), float32] */;
    %923 = cast(%var_3725, dtype="float32") /* ty=Tensor[(96), float32] */;
    %924 = reshape(%922, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
    %925 = reshape(%923, newshape=[4, 2, 12]) /* ty=Tensor[(4, 2, 12), float32] */;
    %926 = @func_2969(%924, %925) /* ty=(Tensor[(2, 112), float32], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(4, 2, 12), float32], Tensor[(240), float32], Tensor[(72), int64]) */;
    %927 = sigmoid(%920) /* ty=Tensor[(2, 11, 6), float32] */;
    %928 = %921.0;
    %929 = %926.3;
    %930 = @func_2553() /* ty=Tensor[(10, 5, 3), float64] */;
    (%927, %928, %929, %var_3725, %930)
  };
  %931(%var_3737, %var_3738) /* ty=(Tensor[(2, 11, 6), float32], Tensor[(10, 5, 3), float32], Tensor[(4, 2, 12), float32], Tensor[(96), float32], Tensor[(10, 5, 3), float64]) */
}

def @main(%var_8402: Tensor[(10, 5, 3), float32]) -> Tensor[(10, 5, 3), uint32] {
  %932 = @func_4906() /* ty=Tensor[(10, 5, 3), float32] */;
  %933 = cast(%var_8402, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%935, %936) /* ty=Tensor[(10, 5, 3), uint32] */
}

def @func_7197() -> (Tensor[(10, 5, 3), int32],) {
  @func_7195() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_8268(%var_8262: Tensor[(3, 14, 5), float64]) -> (Tensor[(3, 14, 5), float64],) {
  %937 = @func_6235() /* ty=(Tensor[(10, 5, 3), float32], Tensor[(10, 5, 3), int32], Tensor[(3, 14, 5), float64], Tensor[(1, 210), float64]) */;
  %938 = %937.2;
  %939 = cast(%var_8262, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%938, dtype="float64") /* ty=Tensor[(3, 14, 5), float64] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %943 = add(%941, %942) /* ty=Tensor[(3, 14, 5), float64] */;
  (%943,)
}

def @func_6154() -> (Tensor[(10, 5, 3), int32],) {
  @func_6152() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_8017(%var_8013: Tensor[(120), uint32], %var_8014: Tensor[(3, 243), uint32], %var_8015: float64, %var_8016: Tensor[(1188), int32]) -> (Tensor[(16, 12, 6), float64], Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 243), uint32], Tensor[(10, 5, 3), float32], Tensor[(7, 4, 8), bool], Tensor[(10, 5, 3), bool], Tensor[(1716), float64], Tensor[(12, 11, 13), float64], Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 11, 12), uint32], Tensor[(1188), int32]) {
  @func_8011(%var_8013, %var_8014, %var_8015, %var_8016) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 243), uint32], Tensor[(10, 5, 3), float32], Tensor[(7, 4, 8), bool], Tensor[(10, 5, 3), bool], Tensor[(1716), float64], Tensor[(12, 11, 13), float64], Tensor[(150), int32], Tensor[(10, 5, 3), int32], Tensor[(9, 11, 12), uint32], Tensor[(1188), int32]) */
}

def @func_4897(%var_4894: Tensor[(10, 5, 3), int32], %var_4895: Tensor[(729), uint32], %var_4896: Tensor[(1500), float64]) -> (Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 40), uint32], Tensor[(729), uint32], Tensor[(224), float32], Tensor[(1500), uint8]) {
  @func_4892(%var_4894, %var_4895, %var_4896) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(120), uint32], Tensor[(3, 40), uint32], Tensor[(729), uint32], Tensor[(224), float32], Tensor[(1500), uint8]) */
}

def @func_4638(%var_4636: Tensor[(10, 5, 3), float32], %var_4637: Tensor[(224), float32]) -> (Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) {
  @func_4634(%var_4636, %var_4637) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */
}

def @func_3467() -> Tensor[(10, 5, 3), int32] {
  %945 = fn () -> Tensor[(10, 5, 3), int32] {
    %944 = @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %944.0
  };
  %945() /* ty=Tensor[(10, 5, 3), int32] */
}

def @func_3369(%var_3366: Tensor[(120), uint32], %var_3367: Tensor[(729), uint32], %var_3368: Tensor[(16, 14), float32]) -> (Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) {
  %972 = fn (%var_3326: Tensor[(120), uint32], %var_3327: Tensor[(729), uint32], %var_3328: Tensor[(16, 14), float32]) -> (Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) {
    %946 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 500), float64] */, dtype="float64") /* ty=Tensor[(3, 500), float64] */;
    %947 = reshape(%946, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
    %948 = @func_1637(%947) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(9, 9, 9), uint64], Tensor[(240), float32]) */;
    %949 = cast(%var_3326, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %950 = cast(%var_3326, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %951 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(729), uint32] */;
    %952 = cast(%var_3328, dtype="float32") /* ty=Tensor[(16, 14), float32] */;
    %953 = reshape(%949, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %954 = reshape(%950, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint32] */;
    %955 = reshape(%951, newshape=[729]) /* ty=Tensor[(729), uint32] */;
    %956 = reshape(%952, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %957 = @func_1744(%953, %954, %955, %956) /* ty=(Tensor[(9, 9, 9), uint64], Tensor[(729), uint32], Tensor[(9, 9, 9), uint64], Tensor[(240), float32], Tensor[(5, 12, 2), float64], Tensor[(7, 4, 8), bool], Tensor[(224), float32]) */;
    %958 = @func_2881() /* ty=(Tensor[(10, 5, 3), int32],) */;
    %959 = %958.0;
    %960 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 5, 3), int32] */, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
    %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
    %962 = cast(%959, dtype="uint32") /* ty=Tensor[(10, 5, 3), uint32] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %964 = maximum(%962, %963) /* ty=Tensor[(10, 5, 3), uint32] */;
    %965 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 5, 3), int32] */, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %966 = shape_of(%964, dtype="int32") /* ty=Tensor[(3), int32] */;
    %967 = cast(%964, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %969 = %948.2;
    %970 = %957.4;
    %971 = power(%967, %968) /* ty=Tensor[(10, 5, 3), float32] */;
    (%969, meta[relay.Constant][46] /* ty=Tensor[(3, 500), float64] */, %970, %var_3326, %var_3327, %var_3328, %971)
  };
  %972(%var_3366, %var_3367, %var_3368) /* ty=(Tensor[(240), float32], Tensor[(3, 500), float64], Tensor[(5, 12, 2), float64], Tensor[(120), uint32], Tensor[(729), uint32], Tensor[(16, 14), float32], Tensor[(10, 5, 3), float32]) */
}

def @func_860(%var_848: float64, %var_849: Tensor[(12, 11, 13), float64]) -> (Tensor[(12, 11, 13), int32],) {
  %973 = cast(%var_848, dtype="float64") /* ty=float64 */;
  %974 = cast(%var_849, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
  %975 = floor_divide(%973, %974) /* ty=Tensor[(12, 11, 13), float64] */;
  %976 = cast(%975, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  %977 = rsqrt(%976) /* ty=Tensor[(12, 11, 13), float32] */;
  %978 = cast(%var_848, dtype="int32") /* ty=int32 */;
  %979 = cast(%977, dtype="int32") /* ty=Tensor[(12, 11, 13), int32] */;
  %980 = bitwise_or(%978, %979) /* ty=Tensor[(12, 11, 13), int32] */;
  (%980,)
}

def @func_3390() -> (Tensor[(10, 5, 3), int32], Tensor[(16, 12, 6), float64], Tensor[(3, 243), uint32]) {
  %981 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 243), uint32] */, dtype="uint32") /* ty=Tensor[(3, 243), uint32] */;
  %982 = reshape(%981, newshape=[729]) /* ty=Tensor[(729), uint32] */;
  %983 = @func_1188(%982) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */;
  %984 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %985 = %983.0;
  (%984, %985, meta[relay.Constant][48] /* ty=Tensor[(3, 243), uint32] */)
}

def @func_8180() -> (Tensor[(10, 5, 3), int32],) {
  @func_8178() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_5511(%var_5509: float32, %var_5510: Tensor[(10, 1, 14), float32]) -> (Tensor[(10, 1, 14), bool],) {
  %989 = fn (%var_5495: float32, %var_5496: Tensor[(10, 1, 14), float32]) -> (Tensor[(10, 1, 14), bool],) {
    %986 = cast(%var_5495, dtype="bool") /* ty=bool */;
    %987 = cast(%var_5496, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %988 = greater(%986, %987) /* ty=Tensor[(10, 1, 14), bool] */;
    (%988,)
  };
  %989(%var_5509, %var_5510) /* ty=(Tensor[(10, 1, 14), bool],) */
}

def @func_8212() -> (Tensor[(10, 5, 3), int32], Tensor[(10, 5, 3), float32]) {
  %990 = @func_3059() /* ty=(Tensor[(10, 5, 3), float32],) */;
  %991 = @func_3276() /* ty=Tensor[(10, 5, 3), int32] */;
  %992 = %990.0;
  (%991, %992)
}

def @func_2514() -> (Tensor[(10, 5, 3), int32],) {
  @func_2512() /* ty=(Tensor[(10, 5, 3), int32],) */
}

def @func_5009() -> (Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) {
  @func_5007() /* ty=(Tensor[(729), uint32], Tensor[(10, 5, 3), int16], Tensor[(9, 9, 9), uint64], Tensor[(5, 30), float32]) */
}

def @func_3059() -> (Tensor[(10, 5, 3), float32],) {
  %993 = @func_2324() /* ty=(Tensor[(10, 5, 3), int32],) */;
  %994 = %993.0;
  %995 = cast(%994, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %996 = log10(%995) /* ty=Tensor[(10, 5, 3), float32] */;
  (%996,)
}

def @func_7876() -> (Tensor[(10, 5, 3), int32], Tensor[(729), bool]) {
  %997 = @func_3758() /* ty=Tensor[(10, 5, 3), int32] */;
  %998 = cast(%997, dtype="int32") /* ty=Tensor[(10, 5, 3), int32] */;
  %999 = reshape(%998, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), int32] */;
  %1000 = @func_2444(%999) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(729), uint32], Tensor[(240), float32]) */;
  %1001 = %1000.1;
  %1002 = cast(meta[relay.Constant][49] /* ty=Tensor[(729), uint32] */, dtype="bool") /* ty=Tensor[(729), bool] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1004 = cast(%1001, dtype="bool") /* ty=Tensor[(729), bool] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1006 = greater(%1004, %1005) /* ty=Tensor[(729), bool] */;
  (%997, %1006)
}

def @func_1191(%var_1189: Tensor[(729), uint32]) -> (Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) {
  @func_1188(%var_1189) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(16, 12, 6), float64], Tensor[(9, 9, 9), uint64], Tensor[(12, 11, 13), int32], Tensor[(1716), float64], Tensor[(729), int64]) */
}

def @func_6825() -> (Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) {
  @func_6823() /* ty=(Tensor[(6, 3, 10), int32], Tensor[(10, 5, 3), float64]) */
}

def @func_6739() -> Tensor[(5, 42), float32] {
  %1007 = @func_6392() /* ty=(Tensor[(5, 42), float32],) */;
  %1007.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen408/build/output.py", line 2370, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:14:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

