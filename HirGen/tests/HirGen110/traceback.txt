==========mod==========
#[version = "0.0.5"]
def @func_2253() -> Tensor[(8, 12, ?), float32] {
  %0 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %0.0
}

def @func_5667() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %1 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %2 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %3 = @func_5100() /* ty=Tensor[(8, 12, ?), float32] */;
  %4 = %1.0;
  %5 = %2.0;
  (%3, %4, %5)
}

def @func_4294() -> (Tensor[(1248), uint64],) {
  %6 = @func_4157() /* ty=(Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) */;
  %7 = %6.0;
  (%7,)
}

def @func_4476(%var_4407: Tensor[(8, 12, 14), float32], %var_4439: Tensor[(312, 4), uint64]) -> (Tensor[(6, 84), int32], Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), uint8], Tensor[(312, 4), int16], Tensor[(1248), uint64], Tensor[(312, 4), bool]) {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 84), int32] */, dtype="int32") /* ty=Tensor[(6, 84), int32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 84), int32] */, dtype="int32") /* ty=Tensor[(6, 84), int32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %11 = reshape(%8, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int32] */;
  %12 = reshape(%9, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int32] */;
  %13 = reshape(%10, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %14 = @func_2999(%11, %12, %13) /* ty=(Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) */;
  %15 = %14.4;
  %16 = cast(%15, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
  %17 = reshape(%16, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %18 = @func_341(%17) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %19 = @func_3871() /* ty=Tensor[(8, 12, ?), float32] */;
  %20 = cast(%19, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %21 = cast(%var_4407, dtype="bool") /* ty=Tensor[(8, 12, 14), bool] */;
  %22 = greater_equal(%20, %21) /* ty=Tensor[(8, 12, 14), bool] */;
  %23 = cast(%22, dtype="uint8") /* ty=Tensor[(8, 12, 14), uint8] */;
  %24 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_4407, dtype="uint8") /* ty=Tensor[(8, 12, 14), uint8] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %27 = cast(%var_4439, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %28 = shape_of(%15, dtype="int32") /* ty=Tensor[(2), int32] */;
  %29 = cast(%15, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %31 = equal(%29, %30) /* ty=Tensor[(312, 4), bool] */;
  %32 = cast(%var_4439, dtype="int16") /* ty=Tensor[(312, 4), int16] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(2), int32] */;
  %34 = cast(%31, dtype="int16") /* ty=Tensor[(312, 4), int16] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %36 = @func_4294() /* ty=(Tensor[(1248), uint64],) */;
  %37 = cast(%var_4439, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %38 = shape_of(%15, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(%15, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %41 = %18.1;
  %42 = right_shift(%25, %26) /* ty=Tensor[(8, 12, 14), uint8] */;
  %43 = bitwise_or(%34, %35) /* ty=Tensor[(312, 4), int16] */;
  %44 = %36.0;
  %45 = less_equal(%39, %40) /* ty=Tensor[(312, 4), bool] */;
  (meta[relay.Constant][0] /* ty=Tensor[(6, 84), int32] */, meta[relay.Constant][1] /* ty=Tensor[(1248), uint64] */, %41, %42, %43, %44, %45)
}

def @func_1921() -> (Tensor[(8, 12, ?), float32],) {
  %46 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %47 = %46.0;
  (%47,)
}

def @func_2589() -> (Tensor[(8, 12, ?), float64],) {
  %48 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %49 = %48.0;
  (%49,)
}

def @main(%var_6459: Tensor[(2, 6, 15), float64], %var_6463: Tensor[(20, 48), float64]) -> (Tensor[(1800), uint64], Tensor[(20, 48), float64], Tensor[(1800), float32], Tensor[(2, 6, 15), bool]) {
  %50 = cast(%var_6463, dtype="float64") /* ty=Tensor[(20, 48), float64] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %52 = reshape(%50, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), float64] */;
  %53 = reshape(%51, newshape=[3, 600]) /* ty=Tensor[(3, 600), float32] */;
  %54 = @func_2461(%52, %53) /* ty=(Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) */;
  %55 = cast(%var_6459, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %56 = rsqrt(%55) /* ty=Tensor[(2, 6, 15), float64] */;
  %57 = cast(%var_6459, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = %54.1;
  %62 = not_equal(%59, %60) /* ty=Tensor[(2, 6, 15), bool] */;
  (%61, %var_6463, meta[relay.Constant][2] /* ty=Tensor[(1800), float32] */, %62)
}

def @func_1606() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %63 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %64 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_408(%var_403: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
  %67 = cast(%var_403, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  exp(%67) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_2108() -> (Tensor[(8, 12, ?), float32],) {
  %68 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  (%68,)
}

def @func_1741(%var_1674: Tensor[(312, 4), uint64], %var_1676: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) {
  %69 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %71 = reshape(%70, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
  %72 = @func_644(%71) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
  %73 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %74 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %75 = cast(%var_1674, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
  %76 = reshape(%75, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %77 = @func_847(%76) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %78 = %77.2;
  %79 = cast(%var_1676, dtype="int64") /* ty=Tensor[(1248), int64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(%78, dtype="int64") /* ty=Tensor[(1248), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), int64] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(1536), float32] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %84 = %69.1;
  %85 = %72.0;
  %86 = %73.1;
  %87 = %74.0;
  %88 = add(%81, %82) /* ty=Tensor[(1248), int64] */;
  %89 = sinh(%83) /* ty=Tensor[(1536), float64] */;
  %90 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  (%84, %85, %86, %87, %var_1674, %88, %89, %90)
}

def @func_1832() -> (Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) {
  %91 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %94 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %97 = cast(%92, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %98 = log10(%93) /* ty=Tensor[(1248), float32] */;
  %99 = mod(%96, %97) /* ty=Tensor[(8, 12, 1248), float64] */;
  (%98, %99)
}

def @func_3622() -> (Tensor[(1248), uint64],) {
  %100 = @func_1899() /* ty=(Tensor[(1248), uint64],) */;
  %101 = %100.0;
  (%101,)
}

def @func_904() -> Tensor[(1248), uint64] {
  %102 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %102.2
}

def @func_6340() -> Tensor[(120), float64] {
  @func_6225() /* ty=Tensor[(120), float64] */
}

def @func_1276() -> (Tensor[(1248), uint64],) {
  %103 = @func_904() /* ty=Tensor[(1248), uint64] */;
  (%103,)
}

def @func_2890(%var_2877: Tensor[(4, 484), bool]) -> (Tensor[(8, 12, ?), float32], Tensor[(4, 484), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %104 = cast(%var_2877, dtype="bool") /* ty=Tensor[(4, 484), bool] */;
  %105 = cast(%var_2877, dtype="bool") /* ty=Tensor[(4, 484), bool] */;
  %106 = reshape(%104, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), bool] */;
  %107 = reshape(%105, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), bool] */;
  %108 = @func_2780(%106, %107) /* ty=(Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) */;
  %109 = @func_2589() /* ty=(Tensor[(8, 12, ?), float64],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %112 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
  %113 = %108.3;
  %114 = tan(%111) /* ty=Tensor[(8, 12, ?), float32] */;
  %115 = %112.1;
  (%113, %var_2877, %114, %115)
}

def @func_3105() -> (Tensor[(8, 12, ?), float32],) {
  %116 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %117 = %116.0;
  (%117,)
}

def @func_892() -> Tensor[(8, 12, ?), float64] {
  %118 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  erf(%120) /* ty=Tensor[(8, 12, ?), float64] */
}

def @func_4005() -> Tensor[(1, 1248), uint64] {
  @func_3310() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_4103() -> (Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) {
  %121 = @func_2788() /* ty=Tensor[(6, 16, 13), uint32] */;
  %122 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %126 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %127 = cast(%121, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %128 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = power(%124, %125) /* ty=Tensor[(6, 16, 13), float64] */;
  %132 = %126.0;
  %133 = less(%129, %130) /* ty=Tensor[(6, 16, 13), bool] */;
  (%131, %132, %133)
}

def @func_2053() -> (Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) {
  %134 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %135 = %134.1;
  %136 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %137 = %136.1;
  %138 = cast(%137, dtype="bool") /* ty=Tensor[(120), bool] */;
  %139 = cast(%135, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %140 = logical_and(%138, %139) /* ty=Tensor[(8, 12, 120), bool] */;
  %141 = cast(%135, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %142 = cast(%140, dtype="float64") /* ty=Tensor[(8, 12, 120), float64] */;
  %143 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1248), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1248), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
  %145 = reshape(%143, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %146 = reshape(%144, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %147 = @func_1741(%145, %146) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
  %148 = subtract(%141, %142) /* ty=Tensor[(8, 12, 120), float64] */;
  %149 = %147.3;
  (%148, %149, meta[relay.Constant][5] /* ty=Tensor[(1, 1248), uint64] */)
}

def @func_1899() -> (Tensor[(1248), uint64],) {
  %150 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %151 = %150.0;
  (%151,)
}

def @func_2373(%var_2360: Tensor[(1800), float32]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) {
  %152 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %153 = cast(%var_2360, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %154 = reshape(%153, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), float32] */;
  %155 = @func_1351(%154) /* ty=(Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) */;
  %156 = %152.0;
  %157 = %155.1;
  %158 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  (%156, %157, %var_2360, %158)
}

def @func_2999(%var_2967: Tensor[(7, 8, 9), int32], %var_2968: Tensor[(7, 8, 9), int32], %var_2997: Tensor[(312, 4), uint64]) -> (Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) {
  %159 = cast(%var_2968, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
  %160 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_2967, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %163 = bitwise_or(%161, %162) /* ty=Tensor[(7, 8, 9), int32] */;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %165 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_2967, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(meta[relay.Constant][6] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %169 = reshape(%168, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float32] */;
  %170 = @func_2861(%169) /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) */;
  %171 = cast(%var_2997, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
  %172 = reshape(%171, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %173 = @func_341(%172) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %174 = logical_and(%166, %167) /* ty=Tensor[(7, 8, 9), bool] */;
  %175 = %170.0;
  %176 = %173.2;
  (%174, %175, meta[relay.Constant][6] /* ty=Tensor[(1056), float32] */, %176, %var_2997)
}

def @func_257() -> (Tensor[(8, 12, ?), float32],) {
  %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 1), float32] */;
  %178 = cos(%177) /* ty=Tensor[(8, 12, 1), float32] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(8, 12, 1), float64] */;
  %180 = sqrt(%179) /* ty=Tensor[(8, 12, 1), float64] */;
  %181 = cast(%180, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %182 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%178, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %185 = minimum(%183, %184) /* ty=Tensor[(8, 12, ?), uint8] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %187 = sin(%186) /* ty=Tensor[(8, 12, ?), float32] */;
  (%187,)
}

def @func_3515() -> Tensor[(1, 1248), uint64] {
  @func_3310() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_3084() -> (Tensor[(8, 12, ?), int64],) {
  %188 = @func_1600() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %191 = asinh(%190) /* ty=Tensor[(8, 12, ?), float64] */;
  %192 = cast(%189, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %196 = subtract(%194, %195) /* ty=Tensor[(8, 12, ?), int64] */;
  (%196,)
}

def @func_4358(%var_4323: Tensor[(1536), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float64]) {
  %197 = cast(%var_4323, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %198 = reshape(%197, newshape=[64, 24]) /* ty=Tensor[(64, 24), float32] */;
  %199 = @func_1561(%198) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %200 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %201 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %202 = %201.0;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
  %204 = cast(%202, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %205 = %199.1;
  %206 = logical_and(%203, %204) /* ty=Tensor[(8, 12, 1248), bool] */;
  %207 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  (%205, %var_4323, %206, %207)
}

def @func_3344(%var_3337: Tensor[(9, 4, 5), int64]) -> Tensor[(9, 4, 5), int64] {
  %208 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 4, 5), int64] */, dtype="int64") /* ty=Tensor[(9, 4, 5), int64] */;
  %209 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_3337, dtype="int64") /* ty=Tensor[(9, 4, 5), int64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%210, %211) /* ty=Tensor[(9, 4, 5), int64] */
}

def @func_5265() -> Tensor[(1248), uint64] {
  %212 = @func_1899() /* ty=(Tensor[(1248), uint64],) */;
  %212.0
}

def @func_5048(%var_5034: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float64],) {
  %213 = cast(%var_5034, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %214 = exp(%213) /* ty=Tensor[(11, 13, 14), float64] */;
  (%214,)
}

def @func_3735(%var_3731: Tensor[(104, 12), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(104, 12), uint64]) {
  %215 = cast(%var_3731, dtype="uint64") /* ty=Tensor[(104, 12), uint64] */;
  %216 = reshape(%215, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
  %217 = @func_531(%216) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
  %218 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %219 = %217.3;
  (%218, %219, %var_3731)
}

def @func_1351(%var_1334: Tensor[(10, 15, 12), float32]) -> (Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) {
  %220 = cast(%var_1334, dtype="float32") /* ty=Tensor[(10, 15, 12), float32] */;
  %221 = acos(%220) /* ty=Tensor[(10, 15, 12), float32] */;
  %222 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  (%221, %222)
}

def @func_2953(%var_2930: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) {
  %223 = @func_2589() /* ty=(Tensor[(8, 12, ?), float64],) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 12, 11), float64] */, dtype="bool") /* ty=Tensor[(8, 12, 11), bool] */;
  %227 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %228 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %229 = %228.0;
  %230 = cast(%229, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %231 = cast(%var_2930, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %232 = less_equal(%225, %226) /* ty=Tensor[(8, 12, 11), bool] */;
  %233 = %227.0;
  %234 = less_equal(%230, %231) /* ty=Tensor[(8, 12, 9), bool] */;
  (%232, %233, %234)
}

def @func_481() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %235 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %236 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %239 = reshape(%236, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %240 = reshape(%237, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %241 = reshape(%238, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %242 = @func_66(%239, %240, %241) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %243 = %235.0;
  %244 = %242.0;
  (%243, %244, meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */)
}

def @func_6025() -> (Tensor[(8, 12, ?), float32],) {
  %245 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %246 = %245.0;
  (%246,)
}

def @func_4555(%var_4546: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), uint32],) {
  %247 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
  %248 = cast(%247, dtype="uint32") /* ty=Tensor[(8, 12, ?), uint32] */;
  %249 = cast(%var_4546, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
  %250 = right_shift(%248, %249) /* ty=Tensor[(8, 12, 3), uint32] */;
  (%250,)
}

def @func_6247() -> (Tensor[(8, 12, ?), float32],) {
  %251 = @func_3419() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %252 = %251.0;
  (%252,)
}

def @func_3310() -> Tensor[(1, 1248), uint64] {
  %253 = @func_3130() /* ty=(Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) */;
  %253.0
}

def @func_5000() -> (Tensor[(3, 4, 6), float64],) {
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
  %255 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %258 = maximum(%256, %257) /* ty=Tensor[(3, 4, 6), float64] */;
  (%258,)
}

def @func_1600() -> (Tensor[(8, 12, ?), float32],) {
  %259 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %260 = %259.0;
  (%260,)
}

def @func_2635() -> (Tensor[(8, 12, 16), uint32], Tensor[(?, 1248), uint8]) {
  %261 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %264 = reshape(%263, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
  %265 = @func_531(%264) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
  %266 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
  %267 = %266.2;
  %268 = cast(%262, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(2), int32] */;
  %270 = cast(%267, dtype="uint8") /* ty=Tensor[(1, 1248), uint8] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %272 = %265.1;
  %273 = subtract(%270, %271) /* ty=Tensor[(?, 1248), uint8] */;
  (%272, %273)
}

def @func_2829() -> (Tensor[(120), float64], Tensor[(8, 12, ?), float32]) {
  %274 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %275 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %276 = %274.4;
  %277 = %275.1;
  (%276, %277)
}

def @func_3217(%var_3207: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64]) {
  %278 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
  %279 = cast(%var_3207, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %280 = cast(%var_3207, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %281 = reshape(%279, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %282 = reshape(%280, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %283 = @func_1741(%281, %282) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
  %284 = %278.1;
  %285 = %283.1;
  (%284, %285, %var_3207)
}

def @func_4199(%var_4191: Tensor[(1536), float32]) -> (Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) {
  %286 = @func_3486() /* ty=(Tensor[(1, 1248), float32],) */;
  %287 = cast(%var_4191, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %288 = reshape(%287, newshape=[64, 24]) /* ty=Tensor[(64, 24), float32] */;
  %289 = @func_1561(%288) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %290 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %291 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %292 = reshape(%290, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
  %293 = reshape(%291, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
  %294 = @func_3700(%292, %293) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) */;
  %295 = %286.0;
  %296 = %289.0;
  %297 = %294.0;
  (%295, %296, %var_4191, %297, meta[relay.Constant][13] /* ty=Tensor[(432), float32] */)
}

def @func_6457() -> Tensor[(6, 16, 13), uint32] {
  @func_2788() /* ty=Tensor[(6, 16, 13), uint32] */
}

def @func_958() -> (Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %298 = @func_904() /* ty=Tensor[(1248), uint64] */;
  %299 = cast(%298, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %300 = cast(%298, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %301 = cast(%298, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %302 = reshape(%299, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %303 = reshape(%300, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %304 = reshape(%301, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %305 = @func_66(%302, %303, %304) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %306 = cast(%298, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %307 = reshape(%306, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %308 = @func_341(%307) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %309 = %305.0;
  %310 = %308.2;
  (%298, %309, %310)
}

def @func_5100() -> Tensor[(8, 12, ?), float32] {
  %311 = @func_5082() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) */;
  %311.0
}

def @func_3130() -> (Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) {
  %312 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
  %313 = %312.2;
  %314 = cast(%313, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
  %315 = reshape(%314, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %316 = @func_2210(%315) /* ty=(Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) */;
  %317 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  %318 = %316.2;
  (%313, %317, %318)
}

def @func_4869(%var_4864: Tensor[(16, 3, 3), int32], %var_4865: Tensor[(16, 3, 3), int32]) -> Tensor[(16, 3, 3), int32] {
  %319 = cast(%var_4865, dtype="int32") /* ty=Tensor[(16, 3, 3), int32] */;
  %320 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_4864, dtype="int32") /* ty=Tensor[(16, 3, 3), int32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%321, %322) /* ty=Tensor[(16, 3, 3), int32] */
}

def @func_644(%var_609: Tensor[(8, 12, 16), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) {
  %323 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %324 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %325 = cast(%324, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %326 = cast(%var_609, dtype="bool") /* ty=Tensor[(8, 12, 16), bool] */;
  %327 = less(%325, %326) /* ty=Tensor[(8, 12, 16), bool] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(8, 12, 16), float64] */;
  %329 = %323.0;
  %330 = sigmoid(%328) /* ty=Tensor[(8, 12, 16), float64] */;
  (%329, %330)
}

def @func_847(%var_798: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %331 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %334 = asin(%333) /* ty=Tensor[(8, 12, ?), float32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(%var_798, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %340 = reshape(%339, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %341 = @func_341(%340) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %342 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %343 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %344 = equal(%337, %338) /* ty=Tensor[(8, 12, ?), bool] */;
  %345 = %341.0;
  %346 = %342.0;
  %347 = %343.0;
  (%344, %345, %var_798, %346, %347)
}

def @func_4986() -> Tensor[(8, 12, 16), bool] {
  %348 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %348.0
}

def @func_66(%var_30: Tensor[(6, 16, 13), uint64], %var_31: Tensor[(6, 16, 13), uint64], %var_55: Tensor[(6, 16, 13), uint64]) -> (Tensor[(6, 16, 13), uint32],) {
  %349 = cast(%var_31, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %350 = shape_of(%var_30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_30, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %353 = bitwise_or(%351, %352) /* ty=Tensor[(6, 16, 13), uint64] */;
  %354 = cast(%var_55, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %358 = right_shift(%356, %357) /* ty=Tensor[(6, 16, 13), uint32] */;
  (%358,)
}

def @func_1561(%var_1525: Tensor[(64, 24), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %359 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %360 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %361 = cast(meta[relay.Constant][14] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %362 = reshape(%361, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), float32] */;
  %363 = @func_1351(%362) /* ty=(Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) */;
  %364 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %365 = %364.2;
  %366 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %367 = %366.1;
  %368 = cast(%365, dtype="int64") /* ty=Tensor[(1248), int64] */;
  %369 = cast(%367, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
  %370 = bitwise_or(%368, %369) /* ty=Tensor[(8, 12, 1248), int64] */;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
  %372 = log(%371) /* ty=Tensor[(8, 12, 1248), float64] */;
  %373 = cast(%370, dtype="uint16") /* ty=Tensor[(8, 12, 1248), uint16] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="uint16") /* ty=Tensor[(8, 12, 1248), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = right_shift(%375, %376) /* ty=Tensor[(8, 12, 1248), uint16] */;
  %378 = cast(%377, dtype="uint8") /* ty=Tensor[(8, 12, 1248), uint8] */;
  %379 = cast(%365, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %380 = add(%378, %379) /* ty=Tensor[(8, 12, 1248), uint8] */;
  %381 = cast(%380, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
  %382 = cast(%367, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %383 = greater_equal(%381, %382) /* ty=Tensor[(8, 12, 1248), bool] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
  %385 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%380, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %388 = cast(%372, dtype="int32") /* ty=Tensor[(8, 12, 1248), int32] */;
  %389 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%380, dtype="int32") /* ty=Tensor[(8, 12, 1248), int32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %392 = cast(%372, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
  %393 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%370, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = cast(%var_1525, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
  %397 = reshape(%396, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
  %398 = @func_644(%397) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
  %399 = cast(%365, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %400 = cast(%365, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %401 = cast(%365, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %402 = reshape(%399, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %403 = reshape(%400, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %404 = reshape(%401, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %405 = @func_66(%402, %403, %404) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %406 = cast(%var_1525, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
  %407 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %408 = cast(%365, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %409 = reshape(%408, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %410 = @func_847(%409) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %411 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %412 = %359.0;
  %413 = %360.0;
  %414 = %363.0;
  %415 = subtract(%386, %387) /* ty=Tensor[(8, 12, 1248), float64] */;
  %416 = minimum(%390, %391) /* ty=Tensor[(8, 12, 1248), int32] */;
  %417 = less_equal(%394, %395) /* ty=Tensor[(8, 12, 1248), bool] */;
  %418 = %398.0;
  %419 = %405.0;
  %420 = exp(%406) /* ty=Tensor[(64, 24), float32] */;
  %421 = %407.1;
  %422 = %410.1;
  %423 = %411.0;
  (%412, %413, %414, meta[relay.Constant][14] /* ty=Tensor[(1800), float32] */, %415, %416, %417, %418, %419, %420, %421, %422, %423)
}

def @func_2780(%var_2729: Tensor[(16, 11, 11), bool], %var_2730: Tensor[(16, 11, 11), bool]) -> (Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) {
  %424 = cast(%var_2730, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %425 = shape_of(%var_2729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%var_2729, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = cast(meta[relay.Constant][15] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %429 = reshape(%428, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
  %430 = @func_644(%429) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
  %431 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 312), uint64] */, dtype="uint64") /* ty=Tensor[(4, 312), uint64] */;
  %432 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 312), uint64] */, dtype="uint64") /* ty=Tensor[(4, 312), uint64] */;
  %433 = reshape(%431, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %434 = reshape(%432, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %435 = @func_1741(%433, %434) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
  %436 = logical_and(%426, %427) /* ty=Tensor[(16, 11, 11), bool] */;
  %437 = %430.0;
  %438 = %435.7;
  (%436, %437, meta[relay.Constant][15] /* ty=Tensor[(1536), float32] */, %438, meta[relay.Constant][16] /* ty=Tensor[(4, 312), uint64] */)
}

def @func_5447(%var_5421: Tensor[(864), float32], %var_5438: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool], Tensor[(864), float32], Tensor[(8, 12, ?), uint8], Tensor[(120), float64], Tensor[(1248), uint64]) {
  %439 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %440 = cast(%var_5421, dtype="float32") /* ty=Tensor[(864), float32] */;
  %441 = reshape(%440, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %442 = @func_2953(%441) /* ty=(Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) */;
  %443 = %439.0;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %445 = reshape(%444, newshape=[8, 12, 1]) /* ty=Tensor[(8, 12, 1), float32] */;
  %446 = cast(%var_5438, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %447 = reshape(%446, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %448 = @func_2210(%447) /* ty=(Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) */;
  %449 = %442.2;
  %450 = @func_4714(%445) /* ty=Tensor[(8, 12, ?), uint8] */;
  %451 = %448.5;
  (%443, %449, %var_5421, %450, %451, %var_5438)
}

def @func_1208() -> Tensor[(8, 12, ?), float32] {
  %452 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %452.0
}

def @func_1109() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  %453 = cast(meta[relay.Constant][17] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %454 = reshape(%453, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float64] */;
  %455 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  %456 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %457 = @func_904() /* ty=Tensor[(1248), uint64] */;
  %458 = @func_408(%454) /* ty=Tensor[(10, 4, 3), float64] */;
  (%455, %456, %457, %458, meta[relay.Constant][17] /* ty=Tensor[(120), float64] */)
}

def @func_341(%var_339: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %459 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %460 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %461 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %462 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %463 = reshape(%460, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %464 = reshape(%461, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %465 = reshape(%462, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %466 = @func_66(%463, %464, %465) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %467 = %459.0;
  %468 = %466.0;
  (%467, %468, %var_339)
}

def @func_6100() -> (Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) {
  %469 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %470 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %471 = %469.0;
  %472 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %473 = %470.0;
  %474 = @func_5199() /* ty=Tensor[(1, 1248), float64] */;
  (%471, %472, %473, %474)
}

def @func_2012() -> (Tensor[(8, 12, 14), float64], Tensor[(120), float64]) {
  %475 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %478 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 12, 14), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
  %479 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %480 = mod(%477, %478) /* ty=Tensor[(8, 12, 14), float64] */;
  %481 = %479.4;
  (%480, %481)
}

def @func_4157() -> (Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) {
  %482 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %483 = %482.2;
  %484 = cast(%483, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %485 = reshape(%484, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
  %486 = @func_531(%485) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
  %487 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %488 = %486.1;
  %489 = %487.0;
  (%483, %488, %489)
}

def @func_531(%var_528: Tensor[(2, 624), uint64]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) {
  %490 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %491 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %492 = %491.0;
  %493 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %494 = %493.0;
  %495 = cast(%492, dtype="uint32") /* ty=Tensor[(8, 12, ?), uint32] */;
  %496 = cast(%494, dtype="uint32") /* ty=Tensor[(8, 12, 16), uint32] */;
  %497 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %498 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %499 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %500 = reshape(%497, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %501 = reshape(%498, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %502 = reshape(%499, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %503 = @func_66(%500, %501, %502) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %504 = %490.0;
  %505 = bitwise_or(%495, %496) /* ty=Tensor[(8, 12, 16), uint32] */;
  %506 = %503.0;
  (%504, %505, %506, %var_528)
}

def @func_4593() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) {
  %507 = @func_4103() /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) */;
  %508 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
  %509 = %507.0;
  (%508, %509)
}

def @func_2461(%var_2406: Tensor[(8, 12, 10), float64], %var_2412: Tensor[(3, 600), float32]) -> (Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) {
  %510 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %513 = cast(%var_2406, dtype="float64") /* ty=Tensor[(8, 12, 10), float64] */;
  %514 = cast(%var_2412, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
  %515 = reshape(%514, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
  %516 = @func_2373(%515) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) */;
  %517 = %516.2;
  %518 = cast(%var_2412, dtype="uint64") /* ty=Tensor[(3, 600), uint64] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(1), int32] */;
  %520 = cast(%517, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %522 = cast(%517, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %523 = asin(%522) /* ty=Tensor[(1800), float64] */;
  %524 = cast(%517, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %525 = cast(%511, dtype="int32") /* ty=Tensor[(8, 12, ?), int32] */;
  %526 = right_shift(%524, %525) /* ty=Tensor[(8, 12, 1800), int32] */;
  %527 = cast(%517, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %528 = cast(%526, dtype="bool") /* ty=Tensor[(8, 12, 1800), bool] */;
  %529 = not_equal(%527, %528) /* ty=Tensor[(8, 12, 1800), bool] */;
  %530 = cast(%523, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %531 = cast(%529, dtype="bool") /* ty=Tensor[(8, 12, 1800), bool] */;
  %532 = power(%512, %513) /* ty=Tensor[(8, 12, 10), float64] */;
  %533 = subtract(%520, %521) /* ty=Tensor[(1800), uint64] */;
  %534 = logical_or(%530, %531) /* ty=Tensor[(8, 12, 1800), bool] */;
  (%532, %533, %534)
}

def @func_3460() -> (Tensor[(8, 12, ?), float64], Tensor[(1, 1248), uint64]) {
  %535 = @func_1977() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %536 = %535.0;
  %537 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  (%536, %537)
}

def @func_4677() -> (Tensor[(8, 12, ?), float32],) {
  %538 = @func_3871() /* ty=Tensor[(8, 12, ?), float32] */;
  (%538,)
}

def @func_4714(%var_4707: Tensor[(8, 12, 1), float32]) -> Tensor[(8, 12, ?), uint8] {
  %539 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %540 = %539.0;
  %541 = cast(%var_4707, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="uint8") /* ty=Tensor[(8, 12, ?), uint8] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%543, %544) /* ty=Tensor[(8, 12, ?), uint8] */
}

def @func_3764() -> Tensor[(8, 12, ?), float32] {
  %545 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %545.1
}

def @func_3700(%var_3678: Tensor[(6, 12, 6), float32], %var_3679: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) {
  %546 = cast(%var_3679, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %547 = shape_of(%var_3678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_3678, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %550 = add(%548, %549) /* ty=Tensor[(6, 12, 6), float32] */;
  %551 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  (%550, %551)
}

def @func_5914(%var_5873: Tensor[(12, 8, 12), float32], %var_5883: Tensor[(2002), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(2002), float64], Tensor[(12, 8, 12), float64]) {
  %552 = cast(%var_5883, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %553 = reshape(%552, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float64] */;
  %554 = @func_5048(%553) /* ty=(Tensor[(11, 13, 14), float64],) */;
  %555 = cast(%var_5873, dtype="float32") /* ty=Tensor[(12, 8, 12), float32] */;
  %556 = tan(%555) /* ty=Tensor[(12, 8, 12), float32] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(12, 8, 12), float64] */;
  %558 = %554.0;
  %559 = sin(%557) /* ty=Tensor[(12, 8, 12), float64] */;
  (%558, %var_5883, %559)
}

def @func_455() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %560 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %561 = %560.0;
  %562 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %565 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%561, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %568 = divide(%566, %567) /* ty=Tensor[(8, 12, ?), float32] */;
  %569 = cast(%563, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %573 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %574 = power(%571, %572) /* ty=Tensor[(8, 12, ?), float32] */;
  %575 = %573.0;
  (%574, %575)
}

def @func_3115() -> (Tensor[(8, 12, ?), float32],) {
  %576 = @func_3105() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %577 = %576.0;
  (%577,)
}

def @func_6300() -> (Tensor[(8, 12, ?), float32],) {
  %578 = @func_1208() /* ty=Tensor[(8, 12, ?), float32] */;
  (%578,)
}

def @func_282() -> (Tensor[(8, 12, 16), bool],) {
  %579 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %582 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 12, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 16), bool] */;
  %583 = greater_equal(%581, %582) /* ty=Tensor[(8, 12, 16), bool] */;
  (%583,)
}

def @func_567() -> (Tensor[(8, 12, ?), float32],) {
  %584 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  (%584,)
}

def @func_2241() -> Tensor[(8, 12, ?), float32] {
  %585 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %585.0
}

def @func_2210(%var_2186: Tensor[(1248), uint64]) -> (Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) {
  %586 = @func_1832() /* ty=(Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) */;
  %587 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %588 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %589 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %592 = cast(%var_2186, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %593 = shape_of(%590, dtype="int32") /* ty=Tensor[(1), int32] */;
  %594 = cast(%590, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?), bool] */;
  %596 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %597 = %586.0;
  %598 = %587.1;
  %599 = %588.0;
  %600 = atan(%591) /* ty=Tensor[(1248), float32] */;
  %601 = logical_and(%594, %595) /* ty=Tensor[(1248), bool] */;
  %602 = %596.1;
  (%597, %598, %599, %600, %601, %602)
}

def @func_5985(%var_5966: Tensor[(6, 4, 5), int64], %var_5967: Tensor[(6, 4, 5), int64]) -> (Tensor[(6, 4, 5), float32],) {
  %603 = cast(%var_5967, dtype="int64") /* ty=Tensor[(6, 4, 5), int64] */;
  %604 = shape_of(%var_5966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%var_5966, dtype="int64") /* ty=Tensor[(6, 4, 5), int64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %607 = left_shift(%605, %606) /* ty=Tensor[(6, 4, 5), int64] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %609 = tan(%608) /* ty=Tensor[(6, 4, 5), float32] */;
  (%609,)
}

def @func_5998() -> Tensor[(6, 16, 13), uint32] {
  %610 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %610.1
}

def @func_6437() -> (Tensor[(120), float64], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32]) {
  %611 = @func_6100() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) */;
  %612 = @func_5241() /* ty=Tensor[(120), float64] */;
  %613 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %614 = %611.0;
  (%612, %613, %614)
}

def @func_5363(%var_5290: Tensor[(15, 3, 5), float64], %var_5298: Tensor[(1536), float32], %var_5317: Tensor[(1248), uint64]) -> (Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) {
  %615 = cast(%var_5298, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %616 = reshape(%615, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %617 = @func_4199(%616) /* ty=(Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) */;
  %618 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %619 = cast(%var_5317, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %620 = reshape(%619, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
  %621 = @func_531(%620) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
  %622 = @func_4103() /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) */;
  %623 = cast(%var_5290, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
  %624 = erf(%623) /* ty=Tensor[(15, 3, 5), float64] */;
  %625 = cast(%var_5290, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
  %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%624, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = cast(%var_5317, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %630 = sqrt(%629) /* ty=Tensor[(1248), float64] */;
  %631 = @func_1832() /* ty=(Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) */;
  %632 = %631.1;
  %633 = cast(%630, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %634 = cast(%632, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
  %635 = %617.3;
  %636 = %618.0;
  %637 = %621.3;
  %638 = %622.1;
  %639 = logical_and(%627, %628) /* ty=Tensor[(15, 3, 5), bool] */;
  %640 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  %641 = less(%633, %634) /* ty=Tensor[(8, 12, 1248), bool] */;
  %642 = @func_5265() /* ty=Tensor[(1248), uint64] */;
  (%635, %var_5298, %636, %637, %638, %639, %640, %641, %642)
}

def @func_1037() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %643 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %644 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  %645 = %643.1;
  (%644, %645)
}

def @func_4835() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), int16], Tensor[(8, 12, 16), bool], Tensor[(8, 12, 14), uint16], Tensor[(8, 12, 14), float32]) {
  %646 = @func_3261() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %647 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %648 = %647.0;
  %649 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %650 = cast(%648, dtype="int16") /* ty=Tensor[(8, 12, ?), int16] */;
  %651 = cast(%649, dtype="int16") /* ty=Tensor[(1, 1248), int16] */;
  %652 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %653 = cast(%648, dtype="uint16") /* ty=Tensor[(8, 12, ?), uint16] */;
  %654 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 12, 14), float32] */, dtype="uint16") /* ty=Tensor[(8, 12, 14), uint16] */;
  %655 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 14), float32] */;
  %656 = cast(%648, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %657 = %646.0;
  %658 = bitwise_and(%650, %651) /* ty=Tensor[(8, 12, 1248), int16] */;
  %659 = %652.0;
  %660 = maximum(%653, %654) /* ty=Tensor[(8, 12, 14), uint16] */;
  %661 = subtract(%655, %656) /* ty=Tensor[(8, 12, 14), float32] */;
  (%657, %658, %659, %660, %661)
}

def @func_6021() -> Tensor[(8, 12, ?), float64] {
  @func_892() /* ty=Tensor[(8, 12, ?), float64] */
}

def @func_3949() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %662 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %664 = cast(%662, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %665 = log(%663) /* ty=Tensor[(8, 12, ?), float32] */;
  %666 = sigmoid(%664) /* ty=Tensor[(8, 12, ?), float64] */;
  (%665, %666)
}

def @func_3782(%var_3778: Tensor[(120), float64]) -> (Tensor[(1, 1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  %667 = cast(%var_3778, dtype="float64") /* ty=Tensor[(120), float64] */;
  %668 = reshape(%667, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float64] */;
  %669 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  %670 = @func_408(%668) /* ty=Tensor[(10, 4, 3), float64] */;
  (%669, %670, %var_3778)
}

def @func_1977() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %671 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %672 = %671.0;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %674 = cast(%672, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %675 = atan(%674) /* ty=Tensor[(8, 12, ?), float32] */;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %677 = rsqrt(%673) /* ty=Tensor[(8, 12, ?), float64] */;
  %678 = atanh(%676) /* ty=Tensor[(8, 12, ?), float32] */;
  (%677, %678)
}

def @func_5241() -> Tensor[(120), float64] {
  @func_4284() /* ty=Tensor[(120), float64] */
}

def @func_391() -> Tensor[(8, 12, ?), float32] {
  %679 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %682 = log10(%681) /* ty=Tensor[(8, 12, ?), float64] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  acosh(%683) /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_5523(%var_5518: Tensor[(14, 10, 14), float32]) -> (Tensor[(14, 10, 14), float32],) {
  %684 = cast(%var_5518, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %685 = log10(%684) /* ty=Tensor[(14, 10, 14), float32] */;
  (%685,)
}

def @func_6380(%var_6375: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), bool], Tensor[(1248), uint64]) {
  %686 = @func_6300() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %687 = cast(%var_6375, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %688 = reshape(%687, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %689 = @func_847(%688) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %690 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %691 = %686.0;
  %692 = %689.0;
  (%690, %691, %692, %var_6375)
}

def @func_3987(%var_3971: Tensor[(16, 8, 4), bool], %var_3972: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 8, 4), float32]) {
  %693 = cast(%var_3972, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %694 = shape_of(%var_3971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_3971, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = cast(%var_3972, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
  %698 = logical_and(%695, %696) /* ty=Tensor[(16, 8, 4), bool] */;
  %699 = acosh(%697) /* ty=Tensor[(16, 8, 4), float32] */;
  (%698, %699)
}

def @func_4937() -> Tensor[(8, 12, ?), float32] {
  %700 = @func_3105() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %700.0
}

def @func_2861(%var_2856: Tensor[(8, 12, 11), float32]) -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) {
  %701 = @func_1208() /* ty=Tensor[(8, 12, ?), float32] */;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %703 = cast(%var_2856, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %704 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  %705 = floor_divide(%702, %703) /* ty=Tensor[(8, 12, 11), float64] */;
  (%704, %705)
}

def @func_5389() -> Tensor[(8, 12, ?), float32] {
  %706 = @func_3261() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %706.0
}

def @func_984() -> (Tensor[(8, 12, ?), float32],) {
  %707 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  (%707,)
}

def @func_2788() -> Tensor[(6, 16, 13), uint32] {
  %708 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %708.1
}

def @func_4284() -> Tensor[(120), float64] {
  %709 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %709.4
}

def @func_3261() -> (Tensor[(8, 12, ?), float32],) {
  %710 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %711 = %710.0;
  (%711,)
}

def @func_5199() -> Tensor[(1, 1248), float64] {
  %712 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(1, 1248), float64] */;
  cosh(%713) /* ty=Tensor[(1, 1248), float64] */
}

def @func_3419() -> (Tensor[(8, 12, ?), float32],) {
  %714 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  (%714,)
}

def @func_5082() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %715 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %716 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %717 = %716.1;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %719 = %715.0;
  %720 = exp(%718) /* ty=Tensor[(8, 12, ?), float64] */;
  (%719, %720)
}

def @func_6225() -> Tensor[(120), float64] {
  @func_5241() /* ty=Tensor[(120), float64] */
}

def @func_3871() -> Tensor[(8, 12, ?), float32] {
  %721 = @func_3115() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %721.0
}

def @func_5829(%var_5808: Tensor[(1248), uint64]) -> (Tensor[(864), float32], Tensor[(8, 12, ?), float32], Tensor[(225), float64], Tensor[(1248), uint64], Tensor[(8, 12, 1536), float32], Tensor[(8, 12, 11), float32]) {
  %722 = cast(meta[relay.Constant][22] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %723 = cast(meta[relay.Constant][23] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %724 = cast(%var_5808, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %725 = reshape(%722, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), float64] */;
  %726 = reshape(%723, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %727 = reshape(%724, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %728 = @func_5363(%725, %726, %727) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) */;
  %729 = @func_3084() /* ty=(Tensor[(8, 12, ?), int64],) */;
  %730 = %729.0;
  %731 = cast(meta[relay.Constant][23] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %732 = cast(%730, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %733 = cast(meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %734 = reshape(%733, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %735 = @func_2953(%734) /* ty=(Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(8, 12, 11), float32] */;
  %738 = %728.2;
  %739 = floor_mod(%731, %732) /* ty=Tensor[(8, 12, 1536), float32] */;
  %740 = sigmoid(%737) /* ty=Tensor[(8, 12, 11), float32] */;
  (meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, %738, meta[relay.Constant][22] /* ty=Tensor[(225), float64] */, %var_5808, %739, %740)
}

def @func_3486() -> (Tensor[(1, 1248), float32],) {
  %741 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(1, 1248), float32] */;
  %743 = log10(%742) /* ty=Tensor[(1, 1248), float32] */;
  (%743,)
}

def @func_5733(%var_5692: Tensor[(8, 12, 16), bool]) -> (Tensor[(8, 12, 16), uint64], Tensor[(1248), uint64], Tensor[(8, 12, 16), float64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %744 = @func_4986() /* ty=Tensor[(8, 12, 16), bool] */;
  %745 = cast(%var_5692, dtype="uint64") /* ty=Tensor[(8, 12, 16), uint64] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%744, dtype="uint64") /* ty=Tensor[(8, 12, 16), uint64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %749 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %750 = cast(%744, dtype="float64") /* ty=Tensor[(8, 12, 16), float64] */;
  %751 = @func_4593() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) */;
  %752 = minimum(%747, %748) /* ty=Tensor[(8, 12, 16), uint64] */;
  %753 = %749.0;
  %754 = erf(%750) /* ty=Tensor[(8, 12, 16), float64] */;
  %755 = @func_2253() /* ty=Tensor[(8, 12, ?), float32] */;
  %756 = %751.0;
  (%752, %753, %754, %755, %756)
}

def @func_999(%var_989: Tensor[(5, 7, 12), uint64]) -> (Tensor[(5, 7, 12), float32],) {
  %757 = cast(%var_989, dtype="uint64") /* ty=Tensor[(5, 7, 12), uint64] */;
  %758 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 7, 12), uint64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %761 = logical_xor(%759, %760) /* ty=Tensor[(5, 7, 12), uint64] */;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(5, 7, 12), float32] */;
  %763 = sinh(%762) /* ty=Tensor[(5, 7, 12), float32] */;
  (%763,)
}

def @func_6195(%var_6180: int64, %var_6181: Tensor[(10, 1, 7), int64]) -> (Tensor[(10, 1, 7), int64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %764 = cast(%var_6180, dtype="int64") /* ty=int64 */;
  %765 = cast(%var_6181, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
  %766 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %767 = logical_xor(%764, %765) /* ty=Tensor[(10, 1, 7), int64] */;
  %768 = %766.0;
  %769 = @func_5100() /* ty=Tensor[(8, 12, ?), float32] */;
  (%767, %768, %769)
}

def @func_5575(%var_5558: Tensor[(10, 10, 7), int64]) -> (Tensor[(10, 10, 7), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %770 = cast(%var_5558, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %771 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 10, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 10, 7), int64] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = less_equal(%772, %773) /* ty=Tensor[(10, 10, 7), bool] */;
  %775 = @func_4937() /* ty=Tensor[(8, 12, ?), float32] */;
  %776 = @func_5389() /* ty=Tensor[(8, 12, ?), float32] */;
  (%774, %775, %776)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4361(%var_4359: Tensor[(1536), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float64]) {
  @func_4358(%var_4359) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float64]) */
}

def @func_3219(%var_3218: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64]) {
  %8 = fn (%var_3207: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64]) {
    %0 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
    %1 = cast(%var_3207, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %2 = cast(%var_3207, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %3 = reshape(%1, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
    %4 = reshape(%2, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %5 = @func_1741(%3, %4) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
    %6 = %0.1;
    %7 = %5.1;
    (%6, %7, %var_3207)
  };
  %8(%var_3218) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64]) */
}

def @func_3419() -> (Tensor[(8, 12, ?), float32],) {
  %9 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  (%9,)
}

def @func_3737(%var_3736: Tensor[(104, 12), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(104, 12), uint64]) {
  %15 = fn (%var_3731: Tensor[(104, 12), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(104, 12), uint64]) {
    %10 = cast(%var_3731, dtype="uint64") /* ty=Tensor[(104, 12), uint64] */;
    %11 = reshape(%10, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
    %12 = @func_531(%11) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
    %13 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
    %14 = %12.3;
    (%13, %14, %var_3731)
  };
  %15(%var_3736) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(104, 12), uint64]) */
}

def @func_5390() -> Tensor[(8, 12, ?), float32] {
  %17 = fn () -> Tensor[(8, 12, ?), float32] {
    %16 = @func_3261() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %16.0
  };
  %17() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_4714(%var_4707: Tensor[(8, 12, 1), float32]) -> Tensor[(8, 12, ?), uint8] {
  %18 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %19 = %18.0;
  %20 = cast(%var_4707, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="uint8") /* ty=Tensor[(8, 12, ?), uint8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%22, %23) /* ty=Tensor[(8, 12, ?), uint8] */
}

def @func_457() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_906() -> Tensor[(1248), uint64] {
  @func_904() /* ty=Tensor[(1248), uint64] */
}

def @func_5917(%var_5915: Tensor[(12, 8, 12), float32], %var_5916: Tensor[(2002), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(2002), float64], Tensor[(12, 8, 12), float64]) {
  %32 = fn (%var_5873: Tensor[(12, 8, 12), float32], %var_5883: Tensor[(2002), float64]) -> (Tensor[(11, 13, 14), float64], Tensor[(2002), float64], Tensor[(12, 8, 12), float64]) {
    %24 = cast(%var_5883, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %25 = reshape(%24, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float64] */;
    %26 = @func_5048(%25) /* ty=(Tensor[(11, 13, 14), float64],) */;
    %27 = cast(%var_5873, dtype="float32") /* ty=Tensor[(12, 8, 12), float32] */;
    %28 = tan(%27) /* ty=Tensor[(12, 8, 12), float32] */;
    %29 = cast(%28, dtype="float64") /* ty=Tensor[(12, 8, 12), float64] */;
    %30 = %26.0;
    %31 = sin(%29) /* ty=Tensor[(12, 8, 12), float64] */;
    (%30, %var_5883, %31)
  };
  %32(%var_5915, %var_5916) /* ty=(Tensor[(11, 13, 14), float64], Tensor[(2002), float64], Tensor[(12, 8, 12), float64]) */
}

def @func_3131() -> (Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) {
  %40 = fn () -> (Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) {
    %33 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
    %34 = %33.2;
    %35 = cast(%34, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
    %36 = reshape(%35, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %37 = @func_2210(%36) /* ty=(Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) */;
    %38 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
    %39 = %37.2;
    (%34, %38, %39)
  };
  %40() /* ty=(Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) */
}

def @func_1278() -> (Tensor[(1248), uint64],) {
  @func_1276() /* ty=(Tensor[(1248), uint64],) */
}

def @func_6301() -> (Tensor[(8, 12, ?), float32],) {
  %42 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %41 = @func_1208() /* ty=Tensor[(8, 12, ?), float32] */;
    (%41,)
  };
  %42() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_5266() -> Tensor[(1248), uint64] {
  %44 = fn () -> Tensor[(1248), uint64] {
    %43 = @func_1899() /* ty=(Tensor[(1248), uint64],) */;
    %43.0
  };
  %44() /* ty=Tensor[(1248), uint64] */
}

def @func_2780(%var_2729: Tensor[(16, 11, 11), bool], %var_2730: Tensor[(16, 11, 11), bool]) -> (Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) {
  %45 = cast(%var_2730, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %46 = shape_of(%var_2729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_2729, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %50 = reshape(%49, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
  %51 = @func_644(%50) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 312), uint64] */, dtype="uint64") /* ty=Tensor[(4, 312), uint64] */;
  %53 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 312), uint64] */, dtype="uint64") /* ty=Tensor[(4, 312), uint64] */;
  %54 = reshape(%52, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %55 = reshape(%53, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %56 = @func_1741(%54, %55) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
  %57 = logical_and(%47, %48) /* ty=Tensor[(16, 11, 11), bool] */;
  %58 = %51.0;
  %59 = %56.7;
  (%57, %58, meta[relay.Constant][0] /* ty=Tensor[(1536), float32] */, %59, meta[relay.Constant][1] /* ty=Tensor[(4, 312), uint64] */)
}

def @func_2013() -> (Tensor[(8, 12, 14), float64], Tensor[(120), float64]) {
  %67 = fn () -> (Tensor[(8, 12, 14), float64], Tensor[(120), float64]) {
    %60 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %61 = %60.0;
    %62 = cast(%61, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 12, 14), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
    %64 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
    %65 = mod(%62, %63) /* ty=Tensor[(8, 12, 14), float64] */;
    %66 = %64.4;
    (%65, %66)
  };
  %67() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */
}

def @func_1923() -> (Tensor[(8, 12, ?), float32],) {
  @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_4286() -> Tensor[(120), float64] {
  @func_4284() /* ty=Tensor[(120), float64] */
}

def @func_1899() -> (Tensor[(1248), uint64],) {
  %68 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %69 = %68.0;
  (%69,)
}

def @func_1039() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */
}

def @func_4836() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), int16], Tensor[(8, 12, 16), bool], Tensor[(8, 12, 14), uint16], Tensor[(8, 12, 14), float32]) {
  %86 = fn () -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), int16], Tensor[(8, 12, 16), bool], Tensor[(8, 12, 14), uint16], Tensor[(8, 12, 14), float32]) {
    %70 = @func_3261() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %71 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %72 = %71.0;
    %73 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
    %74 = cast(%72, dtype="int16") /* ty=Tensor[(8, 12, ?), int16] */;
    %75 = cast(%73, dtype="int16") /* ty=Tensor[(1, 1248), int16] */;
    %76 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
    %77 = cast(%72, dtype="uint16") /* ty=Tensor[(8, 12, ?), uint16] */;
    %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 12, 14), float32] */, dtype="uint16") /* ty=Tensor[(8, 12, 14), uint16] */;
    %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 14), float32] */;
    %80 = cast(%72, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %81 = %70.0;
    %82 = bitwise_and(%74, %75) /* ty=Tensor[(8, 12, 1248), int16] */;
    %83 = %76.0;
    %84 = maximum(%77, %78) /* ty=Tensor[(8, 12, 14), uint16] */;
    %85 = subtract(%79, %80) /* ty=Tensor[(8, 12, 14), float32] */;
    (%81, %82, %83, %84, %85)
  };
  %86() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), int16], Tensor[(8, 12, 16), bool], Tensor[(8, 12, 14), uint16], Tensor[(8, 12, 14), float32]) */
}

def @func_392() -> Tensor[(8, 12, ?), float32] {
  %92 = fn () -> Tensor[(8, 12, ?), float32] {
    %87 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %88 = %87.0;
    %89 = cast(%88, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %90 = log10(%89) /* ty=Tensor[(8, 12, ?), float64] */;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    acosh(%91) /* ty=Tensor[(8, 12, ?), float32] */
  };
  %92() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_5831(%var_5830: Tensor[(1248), uint64]) -> (Tensor[(864), float32], Tensor[(8, 12, ?), float32], Tensor[(225), float64], Tensor[(1248), uint64], Tensor[(8, 12, 1536), float32], Tensor[(8, 12, 11), float32]) {
  %112 = fn (%var_5808: Tensor[(1248), uint64]) -> (Tensor[(864), float32], Tensor[(8, 12, ?), float32], Tensor[(225), float64], Tensor[(1248), uint64], Tensor[(8, 12, 1536), float32], Tensor[(8, 12, 11), float32]) {
    %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
    %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %95 = cast(%var_5808, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %96 = reshape(%93, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), float64] */;
    %97 = reshape(%94, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
    %98 = reshape(%95, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %99 = @func_5363(%96, %97, %98) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) */;
    %100 = @func_3084() /* ty=(Tensor[(8, 12, ?), int64],) */;
    %101 = %100.0;
    %102 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %103 = cast(%101, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %105 = reshape(%104, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
    %106 = @func_2953(%105) /* ty=(Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) */;
    %107 = %106.0;
    %108 = cast(%107, dtype="float32") /* ty=Tensor[(8, 12, 11), float32] */;
    %109 = %99.2;
    %110 = floor_mod(%102, %103) /* ty=Tensor[(8, 12, 1536), float32] */;
    %111 = sigmoid(%108) /* ty=Tensor[(8, 12, 11), float32] */;
    (meta[relay.Constant][4] /* ty=Tensor[(864), float32] */, %109, meta[relay.Constant][5] /* ty=Tensor[(225), float64] */, %var_5808, %110, %111)
  };
  %112(%var_5830) /* ty=(Tensor[(864), float32], Tensor[(8, 12, ?), float32], Tensor[(225), float64], Tensor[(1248), uint64], Tensor[(8, 12, 1536), float32], Tensor[(8, 12, 11), float32]) */
}

def @func_2055() -> (Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) {
  @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */
}

def @func_2953(%var_2930: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) {
  %113 = @func_2589() /* ty=(Tensor[(8, 12, ?), float64],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %116 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 12, 11), float64] */, dtype="bool") /* ty=Tensor[(8, 12, 11), bool] */;
  %117 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %118 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %121 = cast(%var_2930, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %122 = less_equal(%115, %116) /* ty=Tensor[(8, 12, 11), bool] */;
  %123 = %117.0;
  %124 = less_equal(%120, %121) /* ty=Tensor[(8, 12, 9), bool] */;
  (%122, %123, %124)
}

def @func_3703(%var_3701: Tensor[(6, 12, 6), float32], %var_3702: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) {
  %131 = fn (%var_3678: Tensor[(6, 12, 6), float32], %var_3679: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) {
    %125 = cast(%var_3679, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
    %126 = shape_of(%var_3678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%var_3678, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %129 = add(%127, %128) /* ty=Tensor[(6, 12, 6), float32] */;
    %130 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
    (%129, %130)
  };
  %131(%var_3701, %var_3702) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) */
}

def @func_3003(%var_3000: Tensor[(7, 8, 9), int32], %var_3001: Tensor[(7, 8, 9), int32], %var_3002: Tensor[(312, 4), uint64]) -> (Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) {
  %150 = fn (%var_2967: Tensor[(7, 8, 9), int32], %var_2968: Tensor[(7, 8, 9), int32], %var_2997: Tensor[(312, 4), uint64]) -> (Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) {
    %132 = cast(%var_2968, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
    %133 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%var_2967, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %136 = bitwise_or(%134, %135) /* ty=Tensor[(7, 8, 9), int32] */;
    %137 = cast(%136, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
    %138 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%var_2967, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %142 = reshape(%141, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float32] */;
    %143 = @func_2861(%142) /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) */;
    %144 = cast(%var_2997, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
    %145 = reshape(%144, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %146 = @func_341(%145) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %147 = logical_and(%139, %140) /* ty=Tensor[(7, 8, 9), bool] */;
    %148 = %143.0;
    %149 = %146.2;
    (%147, %148, meta[relay.Constant][8] /* ty=Tensor[(1056), float32] */, %149, %var_2997)
  };
  %150(%var_3000, %var_3001, %var_3002) /* ty=(Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) */
}

def @func_1276() -> (Tensor[(1248), uint64],) {
  %151 = @func_904() /* ty=Tensor[(1248), uint64] */;
  (%151,)
}

def @func_2590() -> (Tensor[(8, 12, ?), float64],) {
  %154 = fn () -> (Tensor[(8, 12, ?), float64],) {
    %152 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %153 = %152.0;
    (%153,)
  };
  %154() /* ty=(Tensor[(8, 12, ?), float64],) */
}

def @func_4104() -> (Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) {
  %168 = fn () -> (Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) {
    %155 = @func_2788() /* ty=Tensor[(6, 16, 13), uint32] */;
    %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
    %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %158 = cast(%155, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %160 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %161 = cast(%155, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %162 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 16, 13), uint32] */, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %165 = power(%158, %159) /* ty=Tensor[(6, 16, 13), float64] */;
    %166 = %160.0;
    %167 = less(%163, %164) /* ty=Tensor[(6, 16, 13), bool] */;
    (%165, %166, %167)
  };
  %168() /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) */
}

def @func_5101() -> Tensor[(8, 12, ?), float32] {
  %170 = fn () -> Tensor[(8, 12, ?), float32] {
    %169 = @func_5082() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) */;
    %169.0
  };
  %170() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_3085() -> (Tensor[(8, 12, ?), int64],) {
  %180 = fn () -> (Tensor[(8, 12, ?), int64],) {
    %171 = @func_1600() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %172 = %171.0;
    %173 = cast(%172, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %174 = asinh(%173) /* ty=Tensor[(8, 12, ?), float64] */;
    %175 = cast(%172, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
    %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%174, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %179 = subtract(%177, %178) /* ty=Tensor[(8, 12, ?), int64] */;
    (%179,)
  };
  %180() /* ty=(Tensor[(8, 12, ?), int64],) */
}

def @func_3990(%var_3988: Tensor[(16, 8, 4), bool], %var_3989: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 8, 4), float32]) {
  %188 = fn (%var_3971: Tensor[(16, 8, 4), bool], %var_3972: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 8, 4), float32]) {
    %181 = cast(%var_3972, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
    %182 = shape_of(%var_3971, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%var_3971, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %185 = cast(%var_3972, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
    %186 = logical_and(%183, %184) /* ty=Tensor[(16, 8, 4), bool] */;
    %187 = acosh(%185) /* ty=Tensor[(16, 8, 4), float32] */;
    (%186, %187)
  };
  %188(%var_3988, %var_3989) /* ty=(Tensor[(16, 8, 4), bool], Tensor[(16, 8, 4), float32]) */
}

def @func_4679() -> (Tensor[(8, 12, ?), float32],) {
  @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_3516() -> Tensor[(1, 1248), uint64] {
  %189 = fn () -> Tensor[(1, 1248), uint64] {
    @func_3310() /* ty=Tensor[(1, 1248), uint64] */
  };
  %189() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_3623() -> (Tensor[(1248), uint64],) {
  %192 = fn () -> (Tensor[(1248), uint64],) {
    %190 = @func_1899() /* ty=(Tensor[(1248), uint64],) */;
    %191 = %190.0;
    (%191,)
  };
  %192() /* ty=(Tensor[(1248), uint64],) */
}

def @func_4557(%var_4556: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), uint32],) {
  %197 = fn (%var_4546: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), uint32],) {
    %193 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
    %194 = cast(%193, dtype="uint32") /* ty=Tensor[(8, 12, ?), uint32] */;
    %195 = cast(%var_4546, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
    %196 = right_shift(%194, %195) /* ty=Tensor[(8, 12, 3), uint32] */;
    (%196,)
  };
  %197(%var_4556) /* ty=(Tensor[(8, 12, 3), uint32],) */
}

def @func_3782(%var_3778: Tensor[(120), float64]) -> (Tensor[(1, 1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  %198 = cast(%var_3778, dtype="float64") /* ty=Tensor[(120), float64] */;
  %199 = reshape(%198, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float64] */;
  %200 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  %201 = @func_408(%199) /* ty=Tensor[(10, 4, 3), float64] */;
  (%200, %201, %var_3778)
}

def @func_4938() -> Tensor[(8, 12, ?), float32] {
  %203 = fn () -> Tensor[(8, 12, ?), float32] {
    %202 = @func_3105() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %202.0
  };
  %203() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_6025() -> (Tensor[(8, 12, ?), float32],) {
  %204 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %205 = %204.0;
  (%205,)
}

def @func_5733(%var_5692: Tensor[(8, 12, 16), bool]) -> (Tensor[(8, 12, 16), uint64], Tensor[(1248), uint64], Tensor[(8, 12, 16), float64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %206 = @func_4986() /* ty=Tensor[(8, 12, 16), bool] */;
  %207 = cast(%var_5692, dtype="uint64") /* ty=Tensor[(8, 12, 16), uint64] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="uint64") /* ty=Tensor[(8, 12, 16), uint64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %211 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %212 = cast(%206, dtype="float64") /* ty=Tensor[(8, 12, 16), float64] */;
  %213 = @func_4593() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) */;
  %214 = minimum(%209, %210) /* ty=Tensor[(8, 12, 16), uint64] */;
  %215 = %211.0;
  %216 = erf(%212) /* ty=Tensor[(8, 12, 16), float64] */;
  %217 = @func_2253() /* ty=Tensor[(8, 12, ?), float32] */;
  %218 = %213.0;
  (%214, %215, %216, %217, %218)
}

def @func_4158() -> (Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) {
  %227 = fn () -> (Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) {
    %219 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
    %220 = %219.2;
    %221 = cast(%220, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %222 = reshape(%221, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
    %223 = @func_531(%222) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
    %224 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
    %225 = %223.1;
    %226 = %224.0;
    (%220, %225, %226)
  };
  %227() /* ty=(Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) */
}

def @func_1978() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %236 = fn () -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
    %228 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %229 = %228.0;
    %230 = cast(%229, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %231 = cast(%229, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %232 = atan(%231) /* ty=Tensor[(8, 12, ?), float32] */;
    %233 = cast(%232, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %234 = rsqrt(%230) /* ty=Tensor[(8, 12, ?), float64] */;
    %235 = atanh(%233) /* ty=Tensor[(8, 12, ?), float32] */;
    (%234, %235)
  };
  %236() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */
}

def @func_2109() -> (Tensor[(8, 12, ?), float32],) {
  %238 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %237 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
    (%237,)
  };
  %238() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_3421() -> (Tensor[(8, 12, ?), float32],) {
  @func_3419() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_3766() -> Tensor[(8, 12, ?), float32] {
  @func_3764() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_2831() -> (Tensor[(120), float64], Tensor[(8, 12, ?), float32]) {
  @func_2829() /* ty=(Tensor[(120), float64], Tensor[(8, 12, ?), float32]) */
}

def @func_6198(%var_6196: int64, %var_6197: Tensor[(10, 1, 7), int64]) -> (Tensor[(10, 1, 7), int64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %245 = fn (%var_6180: int64, %var_6181: Tensor[(10, 1, 7), int64]) -> (Tensor[(10, 1, 7), int64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
    %239 = cast(%var_6180, dtype="int64") /* ty=int64 */;
    %240 = cast(%var_6181, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
    %241 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %242 = logical_xor(%239, %240) /* ty=Tensor[(10, 1, 7), int64] */;
    %243 = %241.0;
    %244 = @func_5100() /* ty=Tensor[(8, 12, ?), float32] */;
    (%242, %243, %244)
  };
  %245(%var_6196, %var_6197) /* ty=(Tensor[(10, 1, 7), int64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_3461() -> (Tensor[(8, 12, ?), float64], Tensor[(1, 1248), uint64]) {
  %249 = fn () -> (Tensor[(8, 12, ?), float64], Tensor[(1, 1248), uint64]) {
    %246 = @func_1977() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %247 = %246.0;
    %248 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
    (%247, %248)
  };
  %249() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(1, 1248), uint64]) */
}

def @func_2376(%var_2374: Tensor[(1800), float32]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) {
  @func_2373(%var_2374) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_5999() -> Tensor[(6, 16, 13), uint32] {
  %251 = fn () -> Tensor[(6, 16, 13), uint32] {
    %250 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %250.1
  };
  %251() /* ty=Tensor[(6, 16, 13), uint32] */
}

def @func_481() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %252 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %253 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %254 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %256 = reshape(%253, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %257 = reshape(%254, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %258 = reshape(%255, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %259 = @func_66(%256, %257, %258) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %260 = %252.0;
  %261 = %259.0;
  (%260, %261, meta[relay.Constant][10] /* ty=Tensor[(1248), uint64] */)
}

def @func_3116() -> (Tensor[(8, 12, ?), float32],) {
  %264 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %262 = @func_3105() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %263 = %262.0;
    (%263,)
  };
  %264() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_6225() -> Tensor[(120), float64] {
  @func_5241() /* ty=Tensor[(120), float64] */
}

def @func_567() -> (Tensor[(8, 12, ?), float32],) {
  %265 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  (%265,)
}

def @func_1111() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */
}

def @func_1563(%var_1562: Tensor[(64, 24), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %331 = fn (%var_1525: Tensor[(64, 24), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
    %266 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %267 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %268 = cast(meta[relay.Constant][11] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %269 = reshape(%268, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), float32] */;
    %270 = @func_1351(%269) /* ty=(Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) */;
    %271 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %272 = %271.2;
    %273 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %274 = %273.1;
    %275 = cast(%272, dtype="int64") /* ty=Tensor[(1248), int64] */;
    %276 = cast(%274, dtype="int64") /* ty=Tensor[(8, 12, ?), int64] */;
    %277 = bitwise_or(%275, %276) /* ty=Tensor[(8, 12, 1248), int64] */;
    %278 = cast(%277, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
    %279 = log(%278) /* ty=Tensor[(8, 12, 1248), float64] */;
    %280 = cast(%277, dtype="uint16") /* ty=Tensor[(8, 12, 1248), uint16] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="uint16") /* ty=Tensor[(8, 12, 1248), uint16] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %284 = right_shift(%282, %283) /* ty=Tensor[(8, 12, 1248), uint16] */;
    %285 = cast(%284, dtype="uint8") /* ty=Tensor[(8, 12, 1248), uint8] */;
    %286 = cast(%272, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
    %287 = add(%285, %286) /* ty=Tensor[(8, 12, 1248), uint8] */;
    %288 = cast(%287, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
    %289 = cast(%274, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
    %290 = greater_equal(%288, %289) /* ty=Tensor[(8, 12, 1248), bool] */;
    %291 = cast(%290, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
    %292 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %293 = cast(%287, dtype="float64") /* ty=Tensor[(8, 12, 1248), float64] */;
    %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %295 = cast(%279, dtype="int32") /* ty=Tensor[(8, 12, 1248), int32] */;
    %296 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%287, dtype="int32") /* ty=Tensor[(8, 12, 1248), int32] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %299 = cast(%279, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
    %300 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%277, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %303 = cast(%var_1525, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
    %304 = reshape(%303, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
    %305 = @func_644(%304) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
    %306 = cast(%272, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %307 = cast(%272, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %308 = cast(%272, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %309 = reshape(%306, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %310 = reshape(%307, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %311 = reshape(%308, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %312 = @func_66(%309, %310, %311) /* ty=(Tensor[(6, 16, 13), uint32],) */;
    %313 = cast(%var_1525, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
    %314 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %315 = cast(%272, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %316 = reshape(%315, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %317 = @func_847(%316) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %318 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %319 = %266.0;
    %320 = %267.0;
    %321 = %270.0;
    %322 = subtract(%293, %294) /* ty=Tensor[(8, 12, 1248), float64] */;
    %323 = minimum(%297, %298) /* ty=Tensor[(8, 12, 1248), int32] */;
    %324 = less_equal(%301, %302) /* ty=Tensor[(8, 12, 1248), bool] */;
    %325 = %305.0;
    %326 = %312.0;
    %327 = exp(%313) /* ty=Tensor[(64, 24), float32] */;
    %328 = %314.1;
    %329 = %317.1;
    %330 = %318.0;
    (%319, %320, %321, meta[relay.Constant][11] /* ty=Tensor[(1800), float32] */, %322, %323, %324, %325, %326, %327, %328, %329, %330)
  };
  %331(%var_1562) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_2210(%var_2186: Tensor[(1248), uint64]) -> (Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) {
  %332 = @func_1832() /* ty=(Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) */;
  %333 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %334 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %335 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %338 = cast(%var_2186, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %339 = shape_of(%336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %340 = cast(%336, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?), bool] */;
  %342 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %343 = %332.0;
  %344 = %333.1;
  %345 = %334.0;
  %346 = atan(%337) /* ty=Tensor[(1248), float32] */;
  %347 = logical_and(%340, %341) /* ty=Tensor[(1248), bool] */;
  %348 = %342.1;
  (%343, %344, %345, %346, %347, %348)
}

def @func_5241() -> Tensor[(120), float64] {
  @func_4284() /* ty=Tensor[(120), float64] */
}

def @func_71(%var_68: Tensor[(6, 16, 13), uint64], %var_69: Tensor[(6, 16, 13), uint64], %var_70: Tensor[(6, 16, 13), uint64]) -> (Tensor[(6, 16, 13), uint32],) {
  @func_66(%var_68, %var_69, %var_70) /* ty=(Tensor[(6, 16, 13), uint32],) */
}

def @func_4005() -> Tensor[(1, 1248), uint64] {
  @func_3310() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_646(%var_645: Tensor[(8, 12, 16), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) {
  %357 = fn (%var_609: Tensor[(8, 12, 16), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) {
    %349 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %350 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
    %351 = cast(%350, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
    %352 = cast(%var_609, dtype="bool") /* ty=Tensor[(8, 12, 16), bool] */;
    %353 = less(%351, %352) /* ty=Tensor[(8, 12, 16), bool] */;
    %354 = cast(%353, dtype="float64") /* ty=Tensor[(8, 12, 16), float64] */;
    %355 = %349.0;
    %356 = sigmoid(%354) /* ty=Tensor[(8, 12, 16), float64] */;
    (%355, %356)
  };
  %357(%var_645) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */
}

def @func_3488() -> (Tensor[(1, 1248), float32],) {
  @func_3486() /* ty=(Tensor[(1, 1248), float32],) */
}

def @func_3871() -> Tensor[(8, 12, ?), float32] {
  %358 = @func_3115() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %358.0
}

def @func_5523(%var_5518: Tensor[(14, 10, 14), float32]) -> (Tensor[(14, 10, 14), float32],) {
  %359 = cast(%var_5518, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %360 = log10(%359) /* ty=Tensor[(14, 10, 14), float32] */;
  (%360,)
}

def @func_5988(%var_5986: Tensor[(6, 4, 5), int64], %var_5987: Tensor[(6, 4, 5), int64]) -> (Tensor[(6, 4, 5), float32],) {
  %368 = fn (%var_5966: Tensor[(6, 4, 5), int64], %var_5967: Tensor[(6, 4, 5), int64]) -> (Tensor[(6, 4, 5), float32],) {
    %361 = cast(%var_5967, dtype="int64") /* ty=Tensor[(6, 4, 5), int64] */;
    %362 = shape_of(%var_5966, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%var_5966, dtype="int64") /* ty=Tensor[(6, 4, 5), int64] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %365 = left_shift(%363, %364) /* ty=Tensor[(6, 4, 5), int64] */;
    %366 = cast(%365, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %367 = tan(%366) /* ty=Tensor[(6, 4, 5), float32] */;
    (%367,)
  };
  %368(%var_5986, %var_5987) /* ty=(Tensor[(6, 4, 5), float32],) */
}

def @main(%var_6459: Tensor[(2, 6, 15), float64], %var_6463: Tensor[(20, 48), float64]) -> (Tensor[(1800), uint64], Tensor[(20, 48), float64], Tensor[(1800), float32], Tensor[(2, 6, 15), bool]) {
  %369 = cast(%var_6463, dtype="float64") /* ty=Tensor[(20, 48), float64] */;
  %370 = cast(meta[relay.Constant][12] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %371 = reshape(%369, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), float64] */;
  %372 = reshape(%370, newshape=[3, 600]) /* ty=Tensor[(3, 600), float32] */;
  %373 = @func_2464(%371, %372) /* ty=(Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) */;
  %374 = cast(%var_6459, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %375 = rsqrt(%374) /* ty=Tensor[(2, 6, 15), float64] */;
  %376 = cast(%var_6459, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = %373.1;
  %381 = not_equal(%378, %379) /* ty=Tensor[(2, 6, 15), bool] */;
  (%380, %var_6463, meta[relay.Constant][12] /* ty=Tensor[(1800), float32] */, %381)
}

def @func_3347(%var_3345: Tensor[(9, 4, 5), int64]) -> Tensor[(9, 4, 5), int64] {
  @func_3344(%var_3345) /* ty=Tensor[(9, 4, 5), int64] */
}

def @func_569() -> (Tensor[(8, 12, ?), float32],) {
  @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_3261() -> (Tensor[(8, 12, ?), float32],) {
  %382 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %383 = %382.0;
  (%383,)
}

def @func_5082() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %384 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %385 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %386 = %385.1;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %388 = %384.0;
  %389 = exp(%387) /* ty=Tensor[(8, 12, ?), float64] */;
  (%388, %389)
}

def @func_5050(%var_5049: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float64],) {
  %392 = fn (%var_5034: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float64],) {
    %390 = cast(%var_5034, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %391 = exp(%390) /* ty=Tensor[(11, 13, 14), float64] */;
    (%391,)
  };
  %392(%var_5049) /* ty=(Tensor[(11, 13, 14), float64],) */
}

def @func_6248() -> (Tensor[(8, 12, ?), float32],) {
  %395 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %393 = @func_3419() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %394 = %393.0;
    (%394,)
  };
  %395() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_5367(%var_5364: Tensor[(15, 3, 5), float64], %var_5365: Tensor[(1536), float32], %var_5366: Tensor[(1248), uint64]) -> (Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) {
  %424 = fn (%var_5290: Tensor[(15, 3, 5), float64], %var_5298: Tensor[(1536), float32], %var_5317: Tensor[(1248), uint64]) -> (Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) {
    %396 = cast(%var_5298, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %397 = reshape(%396, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
    %398 = @func_4199(%397) /* ty=(Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) */;
    %399 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %400 = cast(%var_5317, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %401 = reshape(%400, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
    %402 = @func_531(%401) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
    %403 = @func_4103() /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) */;
    %404 = cast(%var_5290, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
    %405 = erf(%404) /* ty=Tensor[(15, 3, 5), float64] */;
    %406 = cast(%var_5290, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%405, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %410 = cast(%var_5317, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %411 = sqrt(%410) /* ty=Tensor[(1248), float64] */;
    %412 = @func_1832() /* ty=(Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) */;
    %413 = %412.1;
    %414 = cast(%411, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %415 = cast(%413, dtype="bool") /* ty=Tensor[(8, 12, 1248), bool] */;
    %416 = %398.3;
    %417 = %399.0;
    %418 = %402.3;
    %419 = %403.1;
    %420 = logical_and(%408, %409) /* ty=Tensor[(15, 3, 5), bool] */;
    %421 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
    %422 = less(%414, %415) /* ty=Tensor[(8, 12, 1248), bool] */;
    %423 = @func_5265() /* ty=Tensor[(1248), uint64] */;
    (%416, %var_5298, %417, %418, %419, %420, %421, %422, %423)
  };
  %424(%var_5364, %var_5365, %var_5366) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(2, 624), uint64], Tensor[(8, 12, ?), float64], Tensor[(15, 3, 5), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 1248), bool], Tensor[(1248), uint64]) */
}

def @func_5736(%var_5734: Tensor[(8, 12, 16), bool]) -> (Tensor[(8, 12, 16), uint64], Tensor[(1248), uint64], Tensor[(8, 12, 16), float64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  @func_5733(%var_5734) /* ty=(Tensor[(8, 12, 16), uint64], Tensor[(1248), uint64], Tensor[(8, 12, 16), float64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_1601() -> (Tensor[(8, 12, ?), float32],) {
  %427 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %425 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %426 = %425.0;
    (%426,)
  };
  %427() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_3950() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %433 = fn () -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
    %428 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
    %429 = cast(%428, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %430 = cast(%428, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %431 = log(%429) /* ty=Tensor[(8, 12, ?), float32] */;
    %432 = sigmoid(%430) /* ty=Tensor[(8, 12, ?), float64] */;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) */
}

def @func_6022() -> Tensor[(8, 12, ?), float64] {
  %434 = fn () -> Tensor[(8, 12, ?), float64] {
    @func_892() /* ty=Tensor[(8, 12, ?), float64] */
  };
  %434() /* ty=Tensor[(8, 12, ?), float64] */
}

def @func_1037() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %435 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %436 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  %437 = %435.1;
  (%436, %437)
}

def @func_985() -> (Tensor[(8, 12, ?), float32],) {
  %439 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %438 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
    (%438,)
  };
  %439() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_2956(%var_2954: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) {
  @func_2953(%var_2954) /* ty=(Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) */
}

def @func_1109() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  %440 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %441 = reshape(%440, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float64] */;
  %442 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  %443 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %444 = @func_904() /* ty=Tensor[(1248), uint64] */;
  %445 = @func_408(%441) /* ty=Tensor[(10, 4, 3), float64] */;
  (%442, %443, %444, %445, meta[relay.Constant][13] /* ty=Tensor[(120), float64] */)
}

def @func_5669() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  @func_5667() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) */
}

def @func_257() -> (Tensor[(8, 12, ?), float32],) {
  %446 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 1), float32] */;
  %447 = cos(%446) /* ty=Tensor[(8, 12, 1), float32] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(8, 12, 1), float64] */;
  %449 = sqrt(%448) /* ty=Tensor[(8, 12, 1), float64] */;
  %450 = cast(%449, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %451 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%447, dtype="uint8") /* ty=Tensor[(8, 12, 1), uint8] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %454 = minimum(%452, %453) /* ty=Tensor[(8, 12, ?), uint8] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %456 = sin(%455) /* ty=Tensor[(8, 12, ?), float32] */;
  (%456,)
}

def @func_410(%var_409: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
  %458 = fn (%var_403: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
    %457 = cast(%var_403, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
    exp(%457) /* ty=Tensor[(10, 4, 3), float64] */
  };
  %458(%var_409) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_534(%var_532: Tensor[(2, 624), uint64]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) {
  @func_531(%var_532) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */
}

def @func_960() -> (Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */
}

def @func_4294() -> (Tensor[(1248), uint64],) {
  %459 = @func_4157() /* ty=(Tensor[(1248), uint64], Tensor[(8, 12, 16), uint32], Tensor[(8, 12, 16), bool]) */;
  %460 = %459.0;
  (%460,)
}

def @func_1001(%var_1000: Tensor[(5, 7, 12), uint64]) -> (Tensor[(5, 7, 12), float32],) {
  %468 = fn (%var_989: Tensor[(5, 7, 12), uint64]) -> (Tensor[(5, 7, 12), float32],) {
    %461 = cast(%var_989, dtype="uint64") /* ty=Tensor[(5, 7, 12), uint64] */;
    %462 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 7, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 7, 12), uint64] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %465 = logical_xor(%463, %464) /* ty=Tensor[(5, 7, 12), uint64] */;
    %466 = cast(%465, dtype="float32") /* ty=Tensor[(5, 7, 12), float32] */;
    %467 = sinh(%466) /* ty=Tensor[(5, 7, 12), float32] */;
    (%467,)
  };
  %468(%var_1000) /* ty=(Tensor[(5, 7, 12), float32],) */
}

def @func_1921() -> (Tensor[(8, 12, ?), float32],) {
  %469 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %470 = %469.0;
  (%470,)
}

def @func_5667() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  %471 = @func_4677() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %472 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %473 = @func_5100() /* ty=Tensor[(8, 12, ?), float32] */;
  %474 = %471.0;
  %475 = %472.0;
  (%473, %474, %475)
}

def @func_6458() -> Tensor[(6, 16, 13), uint32] {
  %476 = fn () -> Tensor[(6, 16, 13), uint32] {
    @func_2788() /* ty=Tensor[(6, 16, 13), uint32] */
  };
  %476() /* ty=Tensor[(6, 16, 13), uint32] */
}

def @func_2373(%var_2360: Tensor[(1800), float32]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) {
  %477 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %478 = cast(%var_2360, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %479 = reshape(%478, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), float32] */;
  %480 = @func_1351(%479) /* ty=(Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) */;
  %481 = %477.0;
  %482 = %480.1;
  %483 = @func_2241() /* ty=Tensor[(8, 12, ?), float32] */;
  (%481, %482, %var_2360, %483)
}

def @func_3486() -> (Tensor[(1, 1248), float32],) {
  %484 = @func_3310() /* ty=Tensor[(1, 1248), uint64] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(1, 1248), float32] */;
  %486 = log10(%485) /* ty=Tensor[(1, 1248), float32] */;
  (%486,)
}

def @func_849(%var_848: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %504 = fn (%var_798: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
    %487 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %488 = %487.0;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %490 = asin(%489) /* ty=Tensor[(8, 12, ?), float32] */;
    %491 = cast(%488, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
    %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%490, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %495 = cast(%var_798, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %496 = reshape(%495, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %497 = @func_341(%496) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %498 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %499 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %500 = equal(%493, %494) /* ty=Tensor[(8, 12, ?), bool] */;
    %501 = %497.0;
    %502 = %498.0;
    %503 = %499.0;
    (%500, %501, %var_798, %502, %503)
  };
  %504(%var_848) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_1744(%var_1742: Tensor[(312, 4), uint64], %var_1743: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) {
  %527 = fn (%var_1674: Tensor[(312, 4), uint64], %var_1676: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) {
    %505 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %506 = cast(meta[relay.Constant][16] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %507 = reshape(%506, newshape=[8, 12, 16]) /* ty=Tensor[(8, 12, 16), float32] */;
    %508 = @func_644(%507) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 16), float64]) */;
    %509 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %510 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %511 = cast(%var_1674, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
    %512 = reshape(%511, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
    %513 = @func_847(%512) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %514 = %513.2;
    %515 = cast(%var_1676, dtype="int64") /* ty=Tensor[(1248), int64] */;
    %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(1), int32] */;
    %517 = cast(%514, dtype="int64") /* ty=Tensor[(1248), int64] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?), int64] */;
    %519 = cast(meta[relay.Constant][16] /* ty=Tensor[(1536), float32] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %520 = %505.1;
    %521 = %508.0;
    %522 = %509.1;
    %523 = %510.0;
    %524 = add(%517, %518) /* ty=Tensor[(1248), int64] */;
    %525 = sinh(%519) /* ty=Tensor[(1536), float64] */;
    %526 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
    (%520, %521, %522, %523, %var_1674, %524, %525, %526)
  };
  %527(%var_1742, %var_1743) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */
}

def @func_3344(%var_3337: Tensor[(9, 4, 5), int64]) -> Tensor[(9, 4, 5), int64] {
  %528 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 4, 5), int64] */, dtype="int64") /* ty=Tensor[(9, 4, 5), int64] */;
  %529 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%var_3337, dtype="int64") /* ty=Tensor[(9, 4, 5), int64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%530, %531) /* ty=Tensor[(9, 4, 5), int64] */
}

def @func_904() -> Tensor[(1248), uint64] {
  %532 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %532.2
}

def @func_4480(%var_4478: Tensor[(8, 12, 14), float32], %var_4479: Tensor[(312, 4), uint64]) -> (Tensor[(6, 84), int32], Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), uint8], Tensor[(312, 4), int16], Tensor[(1248), uint64], Tensor[(312, 4), bool]) {
  @func_4476(%var_4478, %var_4479) /* ty=(Tensor[(6, 84), int32], Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), uint8], Tensor[(312, 4), int16], Tensor[(1248), uint64], Tensor[(312, 4), bool]) */
}

def @func_66(%var_30: Tensor[(6, 16, 13), uint64], %var_31: Tensor[(6, 16, 13), uint64], %var_55: Tensor[(6, 16, 13), uint64]) -> (Tensor[(6, 16, 13), uint32],) {
  %533 = cast(%var_31, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %534 = shape_of(%var_30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_30, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %537 = bitwise_or(%535, %536) /* ty=Tensor[(6, 16, 13), uint64] */;
  %538 = cast(%var_55, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %542 = right_shift(%540, %541) /* ty=Tensor[(6, 16, 13), uint32] */;
  (%542,)
}

def @func_5451(%var_5449: Tensor[(864), float32], %var_5450: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool], Tensor[(864), float32], Tensor[(8, 12, ?), uint8], Tensor[(120), float64], Tensor[(1248), uint64]) {
  @func_5447(%var_5449, %var_5450) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool], Tensor[(864), float32], Tensor[(8, 12, ?), uint8], Tensor[(120), float64], Tensor[(1248), uint64]) */
}

def @func_4007() -> Tensor[(1, 1248), uint64] {
  @func_4005() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_5201() -> Tensor[(1, 1248), float64] {
  @func_5199() /* ty=Tensor[(1, 1248), float64] */
}

def @func_2892(%var_2891: Tensor[(4, 484), bool]) -> (Tensor[(8, 12, ?), float32], Tensor[(4, 484), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %555 = fn (%var_2877: Tensor[(4, 484), bool]) -> (Tensor[(8, 12, ?), float32], Tensor[(4, 484), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
    %543 = cast(%var_2877, dtype="bool") /* ty=Tensor[(4, 484), bool] */;
    %544 = cast(%var_2877, dtype="bool") /* ty=Tensor[(4, 484), bool] */;
    %545 = reshape(%543, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), bool] */;
    %546 = reshape(%544, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), bool] */;
    %547 = @func_2780(%545, %546) /* ty=(Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) */;
    %548 = @func_2589() /* ty=(Tensor[(8, 12, ?), float64],) */;
    %549 = %548.0;
    %550 = cast(%549, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
    %551 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
    %552 = %547.3;
    %553 = tan(%550) /* ty=Tensor[(8, 12, ?), float32] */;
    %554 = %551.1;
    (%552, %var_2877, %553, %554)
  };
  %555(%var_2891) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(4, 484), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_3764() -> Tensor[(8, 12, ?), float32] {
  %556 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %556.1
}

def @func_1901() -> (Tensor[(1248), uint64],) {
  @func_1899() /* ty=(Tensor[(1248), uint64],) */
}

def @func_1353(%var_1352: Tensor[(10, 15, 12), float32]) -> (Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) {
  %560 = fn (%var_1334: Tensor[(10, 15, 12), float32]) -> (Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) {
    %557 = cast(%var_1334, dtype="float32") /* ty=Tensor[(10, 15, 12), float32] */;
    %558 = acos(%557) /* ty=Tensor[(10, 15, 12), float32] */;
    %559 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
    (%558, %559)
  };
  %560(%var_1352) /* ty=(Tensor[(10, 15, 12), float32], Tensor[(8, 12, ?), float64]) */
}

def @func_5526(%var_5524: Tensor[(14, 10, 14), float32]) -> (Tensor[(14, 10, 14), float32],) {
  @func_5523(%var_5524) /* ty=(Tensor[(14, 10, 14), float32],) */
}

def @func_5000() -> (Tensor[(3, 4, 6), float64],) {
  %561 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
  %562 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(3, 4, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %565 = maximum(%563, %564) /* ty=Tensor[(3, 4, 6), float64] */;
  (%565,)
}

def @func_4296() -> (Tensor[(1248), uint64],) {
  @func_4294() /* ty=(Tensor[(1248), uint64],) */
}

def @func_2254() -> Tensor[(8, 12, ?), float32] {
  %567 = fn () -> Tensor[(8, 12, ?), float32] {
    %566 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %566.0
  };
  %567() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_6383(%var_6381: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), bool], Tensor[(1248), uint64]) {
  @func_6380(%var_6381) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), bool], Tensor[(1248), uint64]) */
}

def @func_958() -> (Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %568 = @func_904() /* ty=Tensor[(1248), uint64] */;
  %569 = cast(%568, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %570 = cast(%568, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %571 = cast(%568, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %572 = reshape(%569, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %573 = reshape(%570, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %574 = reshape(%571, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %575 = @func_66(%572, %573, %574) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %576 = cast(%568, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %577 = reshape(%576, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %578 = @func_341(%577) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %579 = %575.0;
  %580 = %578.2;
  (%568, %579, %580)
}

def @func_3311() -> Tensor[(1, 1248), uint64] {
  %582 = fn () -> Tensor[(1, 1248), uint64] {
    %581 = @func_3130() /* ty=(Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 14), float64]) */;
    %581.0
  };
  %582() /* ty=Tensor[(1, 1248), uint64] */
}

def @func_2213(%var_2211: Tensor[(1248), uint64]) -> (Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) {
  @func_2210(%var_2211) /* ty=(Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) */
}

def @func_4284() -> Tensor[(120), float64] {
  %583 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %583.4
}

def @func_6100() -> (Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) {
  %584 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %585 = @func_567() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %586 = %584.0;
  %587 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %588 = %585.0;
  %589 = @func_5199() /* ty=Tensor[(1, 1248), float64] */;
  (%586, %587, %588, %589)
}

def @func_3873() -> Tensor[(8, 12, ?), float32] {
  @func_3871() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_2636() -> (Tensor[(8, 12, 16), uint32], Tensor[(?, 1248), uint8]) {
  %603 = fn () -> (Tensor[(8, 12, 16), uint32], Tensor[(?, 1248), uint8]) {
    %590 = @func_958() /* ty=(Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %591 = %590.0;
    %592 = cast(%591, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %593 = reshape(%592, newshape=[2, 624]) /* ty=Tensor[(2, 624), uint64] */;
    %594 = @func_531(%593) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) */;
    %595 = @func_2053() /* ty=(Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) */;
    %596 = %595.2;
    %597 = cast(%591, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
    %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(2), int32] */;
    %599 = cast(%596, dtype="uint8") /* ty=Tensor[(1, 1248), uint8] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %601 = %594.1;
    %602 = subtract(%599, %600) /* ty=Tensor[(?, 1248), uint8] */;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(8, 12, 16), uint32], Tensor[(?, 1248), uint8]) */
}

def @func_283() -> (Tensor[(8, 12, 16), bool],) {
  %609 = fn () -> (Tensor[(8, 12, 16), bool],) {
    %604 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %605 = %604.0;
    %606 = cast(%605, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
    %607 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 12, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 16), bool] */;
    %608 = greater_equal(%606, %607) /* ty=Tensor[(8, 12, 16), bool] */;
    (%608,)
  };
  %609() /* ty=(Tensor[(8, 12, 16), bool],) */
}

def @func_1607() -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
  %614 = fn () -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) {
    %610 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %611 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %612 = %610.0;
    %613 = %611.0;
    (%612, %613)
  };
  %614() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */
}

def @func_6439() -> (Tensor[(120), float64], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32]) {
  @func_6437() /* ty=(Tensor[(120), float64], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32]) */
}

def @func_6380(%var_6375: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), bool], Tensor[(1248), uint64]) {
  %615 = @func_6300() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %616 = cast(%var_6375, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %617 = reshape(%616, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %618 = @func_847(%617) /* ty=(Tensor[(8, 12, ?), bool], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %619 = @func_391() /* ty=Tensor[(8, 12, ?), float32] */;
  %620 = %615.0;
  %621 = %618.0;
  (%619, %620, %621, %var_6375)
}

def @func_2784(%var_2782: Tensor[(16, 11, 11), bool], %var_2783: Tensor[(16, 11, 11), bool]) -> (Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) {
  @func_2780(%var_2782, %var_2783) /* ty=(Tensor[(16, 11, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, ?), float32], Tensor[(4, 312), uint64]) */
}

def @func_4595() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) {
  @func_4593() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) */
}

def @func_4987() -> Tensor[(8, 12, 16), bool] {
  %623 = fn () -> Tensor[(8, 12, 16), bool] {
    %622 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
    %622.0
  };
  %623() /* ty=Tensor[(8, 12, 16), bool] */
}

def @func_2863(%var_2862: Tensor[(8, 12, 11), float32]) -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) {
  %629 = fn (%var_2856: Tensor[(8, 12, 11), float32]) -> (Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) {
    %624 = @func_1208() /* ty=Tensor[(8, 12, ?), float32] */;
    %625 = cast(%624, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %626 = cast(%var_2856, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
    %627 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
    %628 = floor_divide(%625, %626) /* ty=Tensor[(8, 12, 11), float64] */;
    (%627, %628)
  };
  %629(%var_2862) /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, 11), float64]) */
}

def @func_4358(%var_4323: Tensor[(1536), float32]) -> (Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float64]) {
  %630 = cast(%var_4323, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %631 = reshape(%630, newshape=[64, 24]) /* ty=Tensor[(64, 24), float32] */;
  %632 = @func_1561(%631) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
  %633 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %634 = @func_1921() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %635 = %634.0;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(1, 1248), bool] */;
  %637 = cast(%635, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %638 = %632.1;
  %639 = logical_and(%636, %637) /* ty=Tensor[(8, 12, 1248), bool] */;
  %640 = @func_892() /* ty=Tensor[(8, 12, ?), float64] */;
  (%638, %var_4323, %639, %640)
}

def @func_5243() -> Tensor[(120), float64] {
  @func_5241() /* ty=Tensor[(120), float64] */
}

def @func_2789() -> Tensor[(6, 16, 13), uint32] {
  %642 = fn () -> Tensor[(6, 16, 13), uint32] {
    %641 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %641.1
  };
  %642() /* ty=Tensor[(6, 16, 13), uint32] */
}

def @func_893() -> Tensor[(8, 12, ?), float64] {
  %646 = fn () -> Tensor[(8, 12, ?), float64] {
    %643 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %644 = %643.0;
    %645 = cast(%644, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    erf(%645) /* ty=Tensor[(8, 12, ?), float64] */
  };
  %646() /* ty=Tensor[(8, 12, ?), float64] */
}

def @func_5084() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) {
  @func_5082() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float64]) */
}

def @func_2053() -> (Tensor[(8, 12, 120), float64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64]) {
  %647 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %648 = %647.1;
  %649 = @func_2012() /* ty=(Tensor[(8, 12, 14), float64], Tensor[(120), float64]) */;
  %650 = %649.1;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(120), bool] */;
  %652 = cast(%648, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %653 = logical_and(%651, %652) /* ty=Tensor[(8, 12, 120), bool] */;
  %654 = cast(%648, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %655 = cast(%653, dtype="float64") /* ty=Tensor[(8, 12, 120), float64] */;
  %656 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1248), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
  %657 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1248), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1248), uint64] */;
  %658 = reshape(%656, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %659 = reshape(%657, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %660 = @func_1741(%658, %659) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(312, 4), uint64], Tensor[(1248), int64], Tensor[(1536), float64], Tensor[(8, 12, ?), float32]) */;
  %661 = subtract(%654, %655) /* ty=Tensor[(8, 12, 120), float64] */;
  %662 = %660.3;
  (%661, %662, meta[relay.Constant][21] /* ty=Tensor[(1, 1248), uint64] */)
}

def @func_6437() -> (Tensor[(120), float64], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32]) {
  %663 = @func_6100() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) */;
  %664 = @func_5241() /* ty=Tensor[(120), float64] */;
  %665 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %666 = %663.0;
  (%664, %665, %666)
}

def @func_3785(%var_3783: Tensor[(120), float64]) -> (Tensor[(1, 1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) {
  @func_3782(%var_3783) /* ty=(Tensor[(1, 1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */
}

def @func_1834() -> (Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) {
  @func_1832() /* ty=(Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) */
}

def @func_483() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */
}

def @func_6027() -> (Tensor[(8, 12, ?), float32],) {
  @func_6025() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_4677() -> (Tensor[(8, 12, ?), float32],) {
  %667 = @func_3871() /* ty=Tensor[(8, 12, ?), float32] */;
  (%667,)
}

def @func_2464(%var_2462: Tensor[(8, 12, 10), float64], %var_2463: Tensor[(3, 600), float32]) -> (Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) {
  %693 = fn (%var_2406: Tensor[(8, 12, 10), float64], %var_2412: Tensor[(3, 600), float32]) -> (Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) {
    %668 = @func_1606() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
    %669 = %668.0;
    %670 = cast(%669, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
    %671 = cast(%var_2406, dtype="float64") /* ty=Tensor[(8, 12, 10), float64] */;
    %672 = cast(%var_2412, dtype="float32") /* ty=Tensor[(3, 600), float32] */;
    %673 = reshape(%672, newshape=[1800]) /* ty=Tensor[(1800), float32] */;
    %674 = @func_2373(%673) /* ty=(Tensor[(8, 12, 16), bool], Tensor[(8, 12, ?), float64], Tensor[(1800), float32], Tensor[(8, 12, ?), float32]) */;
    %675 = %674.2;
    %676 = cast(%var_2412, dtype="uint64") /* ty=Tensor[(3, 600), uint64] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(1), int32] */;
    %678 = cast(%675, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %680 = cast(%675, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %681 = asin(%680) /* ty=Tensor[(1800), float64] */;
    %682 = cast(%675, dtype="int32") /* ty=Tensor[(1800), int32] */;
    %683 = cast(%669, dtype="int32") /* ty=Tensor[(8, 12, ?), int32] */;
    %684 = right_shift(%682, %683) /* ty=Tensor[(8, 12, 1800), int32] */;
    %685 = cast(%675, dtype="bool") /* ty=Tensor[(1800), bool] */;
    %686 = cast(%684, dtype="bool") /* ty=Tensor[(8, 12, 1800), bool] */;
    %687 = not_equal(%685, %686) /* ty=Tensor[(8, 12, 1800), bool] */;
    %688 = cast(%681, dtype="bool") /* ty=Tensor[(1800), bool] */;
    %689 = cast(%687, dtype="bool") /* ty=Tensor[(8, 12, 1800), bool] */;
    %690 = power(%670, %671) /* ty=Tensor[(8, 12, 10), float64] */;
    %691 = subtract(%678, %679) /* ty=Tensor[(1800), uint64] */;
    %692 = logical_or(%688, %689) /* ty=Tensor[(8, 12, 1800), bool] */;
    (%690, %691, %692)
  };
  %693(%var_2462, %var_2463) /* ty=(Tensor[(8, 12, 10), float64], Tensor[(1800), uint64], Tensor[(8, 12, 1800), bool]) */
}

def @func_6341() -> Tensor[(120), float64] {
  %694 = fn () -> Tensor[(120), float64] {
    @func_6225() /* ty=Tensor[(120), float64] */
  };
  %694() /* ty=Tensor[(120), float64] */
}

def @func_3263() -> (Tensor[(8, 12, ?), float32],) {
  @func_3261() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_2242() -> Tensor[(8, 12, ?), float32] {
  %696 = fn () -> Tensor[(8, 12, ?), float32] {
    %695 = @func_455() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %695.0
  };
  %696() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_4593() -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), float64]) {
  %697 = @func_4103() /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 12, ?), float64], Tensor[(6, 16, 13), bool]) */;
  %698 = @func_3764() /* ty=Tensor[(8, 12, ?), float32] */;
  %699 = %697.0;
  (%698, %699)
}

def @func_5002() -> (Tensor[(3, 4, 6), float64],) {
  @func_5000() /* ty=(Tensor[(3, 4, 6), float64],) */
}

def @func_4476(%var_4407: Tensor[(8, 12, 14), float32], %var_4439: Tensor[(312, 4), uint64]) -> (Tensor[(6, 84), int32], Tensor[(1248), uint64], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), uint8], Tensor[(312, 4), int16], Tensor[(1248), uint64], Tensor[(312, 4), bool]) {
  %700 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 84), int32] */, dtype="int32") /* ty=Tensor[(6, 84), int32] */;
  %701 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 84), int32] */, dtype="int32") /* ty=Tensor[(6, 84), int32] */;
  %702 = cast(meta[relay.Constant][23] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %703 = reshape(%700, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int32] */;
  %704 = reshape(%701, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), int32] */;
  %705 = reshape(%702, newshape=[312, 4]) /* ty=Tensor[(312, 4), uint64] */;
  %706 = @func_2999(%703, %704, %705) /* ty=(Tensor[(7, 8, 9), bool], Tensor[(8, 12, ?), float64], Tensor[(1056), float32], Tensor[(1248), uint64], Tensor[(312, 4), uint64]) */;
  %707 = %706.4;
  %708 = cast(%707, dtype="uint64") /* ty=Tensor[(312, 4), uint64] */;
  %709 = reshape(%708, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %710 = @func_341(%709) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
  %711 = @func_3871() /* ty=Tensor[(8, 12, ?), float32] */;
  %712 = cast(%711, dtype="bool") /* ty=Tensor[(8, 12, ?), bool] */;
  %713 = cast(%var_4407, dtype="bool") /* ty=Tensor[(8, 12, 14), bool] */;
  %714 = greater_equal(%712, %713) /* ty=Tensor[(8, 12, 14), bool] */;
  %715 = cast(%714, dtype="uint8") /* ty=Tensor[(8, 12, 14), uint8] */;
  %716 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_4407, dtype="uint8") /* ty=Tensor[(8, 12, 14), uint8] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %719 = cast(%var_4439, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %720 = shape_of(%707, dtype="int32") /* ty=Tensor[(2), int32] */;
  %721 = cast(%707, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %723 = equal(%721, %722) /* ty=Tensor[(312, 4), bool] */;
  %724 = cast(%var_4439, dtype="int16") /* ty=Tensor[(312, 4), int16] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(2), int32] */;
  %726 = cast(%723, dtype="int16") /* ty=Tensor[(312, 4), int16] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %728 = @func_4294() /* ty=(Tensor[(1248), uint64],) */;
  %729 = cast(%var_4439, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %730 = shape_of(%707, dtype="int32") /* ty=Tensor[(2), int32] */;
  %731 = cast(%707, dtype="bool") /* ty=Tensor[(312, 4), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %733 = %710.1;
  %734 = right_shift(%717, %718) /* ty=Tensor[(8, 12, 14), uint8] */;
  %735 = bitwise_or(%726, %727) /* ty=Tensor[(312, 4), int16] */;
  %736 = %728.0;
  %737 = less_equal(%731, %732) /* ty=Tensor[(312, 4), bool] */;
  (meta[relay.Constant][22] /* ty=Tensor[(6, 84), int32] */, meta[relay.Constant][23] /* ty=Tensor[(1248), uint64] */, %733, %734, %735, %736, %737)
}

def @func_343(%var_342: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
  %748 = fn (%var_339: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) {
    %738 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %739 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %740 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %741 = cast(%var_339, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %742 = reshape(%739, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %743 = reshape(%740, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %744 = reshape(%741, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
    %745 = @func_66(%742, %743, %744) /* ty=(Tensor[(6, 16, 13), uint32],) */;
    %746 = %738.0;
    %747 = %745.0;
    (%746, %747, %var_339)
  };
  %748(%var_342) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */
}

def @func_531(%var_528: Tensor[(2, 624), uint64]) -> (Tensor[(8, 12, 16), bool], Tensor[(8, 12, 16), uint32], Tensor[(6, 16, 13), uint32], Tensor[(2, 624), uint64]) {
  %749 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %750 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %751 = %750.0;
  %752 = @func_282() /* ty=(Tensor[(8, 12, 16), bool],) */;
  %753 = %752.0;
  %754 = cast(%751, dtype="uint32") /* ty=Tensor[(8, 12, ?), uint32] */;
  %755 = cast(%753, dtype="uint32") /* ty=Tensor[(8, 12, 16), uint32] */;
  %756 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %757 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %758 = cast(%var_528, dtype="uint64") /* ty=Tensor[(2, 624), uint64] */;
  %759 = reshape(%756, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %760 = reshape(%757, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %761 = reshape(%758, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint64] */;
  %762 = @func_66(%759, %760, %761) /* ty=(Tensor[(6, 16, 13), uint32],) */;
  %763 = %749.0;
  %764 = bitwise_or(%754, %755) /* ty=Tensor[(8, 12, 16), uint32] */;
  %765 = %762.0;
  (%763, %764, %765, %var_528)
}

def @func_4717(%var_4715: Tensor[(8, 12, 1), float32]) -> Tensor[(8, 12, ?), uint8] {
  @func_4714(%var_4715) /* ty=Tensor[(8, 12, ?), uint8] */
}

def @func_1209() -> Tensor[(8, 12, ?), float32] {
  %767 = fn () -> Tensor[(8, 12, ?), float32] {
    %766 = @func_481() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(1248), uint64]) */;
    %766.0
  };
  %767() /* ty=Tensor[(8, 12, ?), float32] */
}

def @func_6102() -> (Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) {
  @func_6100() /* ty=(Tensor[(8, 12, ?), float32], Tensor[(1, 1248), uint64], Tensor[(8, 12, ?), float32], Tensor[(1, 1248), float64]) */
}

def @func_1832() -> (Tensor[(1248), float32], Tensor[(8, 12, 1248), float64]) {
  %768 = @func_1276() /* ty=(Tensor[(1248), uint64],) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %771 = @func_984() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(8, 12, ?), float64] */;
  %774 = cast(%769, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %775 = log10(%770) /* ty=Tensor[(1248), float32] */;
  %776 = mod(%773, %774) /* ty=Tensor[(8, 12, 1248), float64] */;
  (%775, %776)
}

def @func_4201(%var_4200: Tensor[(1536), float32]) -> (Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) {
  %789 = fn (%var_4191: Tensor[(1536), float32]) -> (Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) {
    %777 = @func_3486() /* ty=(Tensor[(1, 1248), float32],) */;
    %778 = cast(%var_4191, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %779 = reshape(%778, newshape=[64, 24]) /* ty=Tensor[(64, 24), float32] */;
    %780 = @func_1561(%779) /* ty=(Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32], Tensor[(10, 15, 12), float32], Tensor[(1800), float32], Tensor[(8, 12, 1248), float64], Tensor[(8, 12, 1248), int32], Tensor[(8, 12, 1248), bool], Tensor[(8, 12, ?), float32], Tensor[(6, 16, 13), uint32], Tensor[(64, 24), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */;
    %781 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %782 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %783 = reshape(%781, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
    %784 = reshape(%782, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
    %785 = @func_3700(%783, %784) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(1, 1248), uint64]) */;
    %786 = %777.0;
    %787 = %780.0;
    %788 = %785.0;
    (%786, %787, %var_4191, %788, meta[relay.Constant][24] /* ty=Tensor[(432), float32] */)
  };
  %789(%var_4200) /* ty=(Tensor[(1, 1248), float32], Tensor[(8, 12, ?), float32], Tensor[(1536), float32], Tensor[(6, 12, 6), float32], Tensor[(432), float32]) */
}

def @func_259() -> (Tensor[(8, 12, ?), float32],) {
  @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_5575(%var_5558: Tensor[(10, 10, 7), int64]) -> (Tensor[(10, 10, 7), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %790 = cast(%var_5558, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %791 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 10, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 10, 7), int64] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = less_equal(%792, %793) /* ty=Tensor[(10, 10, 7), bool] */;
  %795 = @func_4937() /* ty=Tensor[(8, 12, ?), float32] */;
  %796 = @func_5389() /* ty=Tensor[(8, 12, ?), float32] */;
  (%794, %795, %796)
}

def @func_455() -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  %797 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %798 = %797.0;
  %799 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %802 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%798, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %805 = divide(%803, %804) /* ty=Tensor[(8, 12, ?), float32] */;
  %806 = cast(%800, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %810 = @func_257() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %811 = power(%808, %809) /* ty=Tensor[(8, 12, ?), float32] */;
  %812 = %810.0;
  (%811, %812)
}

def @func_5199() -> Tensor[(1, 1248), float64] {
  %813 = @func_3515() /* ty=Tensor[(1, 1248), uint64] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(1, 1248), float64] */;
  cosh(%814) /* ty=Tensor[(1, 1248), float64] */
}

def @func_5578(%var_5576: Tensor[(10, 10, 7), int64]) -> (Tensor[(10, 10, 7), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) {
  @func_5575(%var_5576) /* ty=(Tensor[(10, 10, 7), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, ?), float32]) */
}

def @func_2829() -> (Tensor[(120), float64], Tensor[(8, 12, ?), float32]) {
  %815 = @func_1109() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32], Tensor[(1248), uint64], Tensor[(10, 4, 3), float64], Tensor[(120), float64]) */;
  %816 = @func_1037() /* ty=(Tensor[(8, 12, ?), float64], Tensor[(8, 12, ?), float32]) */;
  %817 = %815.4;
  %818 = %816.1;
  (%817, %818)
}

def @func_4872(%var_4870: Tensor[(16, 3, 3), int32], %var_4871: Tensor[(16, 3, 3), int32]) -> Tensor[(16, 3, 3), int32] {
  %823 = fn (%var_4864: Tensor[(16, 3, 3), int32], %var_4865: Tensor[(16, 3, 3), int32]) -> Tensor[(16, 3, 3), int32] {
    %819 = cast(%var_4865, dtype="int32") /* ty=Tensor[(16, 3, 3), int32] */;
    %820 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %821 = cast(%var_4864, dtype="int32") /* ty=Tensor[(16, 3, 3), int32] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    logical_xor(%821, %822) /* ty=Tensor[(16, 3, 3), int32] */
  };
  %823(%var_4870, %var_4871) /* ty=Tensor[(16, 3, 3), int32] */
}

def @func_5447(%var_5421: Tensor[(864), float32], %var_5438: Tensor[(1248), uint64]) -> (Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool], Tensor[(864), float32], Tensor[(8, 12, ?), uint8], Tensor[(120), float64], Tensor[(1248), uint64]) {
  %824 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
  %825 = cast(%var_5421, dtype="float32") /* ty=Tensor[(864), float32] */;
  %826 = reshape(%825, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %827 = @func_2953(%826) /* ty=(Tensor[(8, 12, 11), bool], Tensor[(8, 12, ?), float32], Tensor[(8, 12, 9), bool]) */;
  %828 = %824.0;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(8, 12, ?), float32] */;
  %830 = reshape(%829, newshape=[8, 12, 1]) /* ty=Tensor[(8, 12, 1), float32] */;
  %831 = cast(%var_5438, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %832 = reshape(%831, newshape=[1248]) /* ty=Tensor[(1248), uint64] */;
  %833 = @func_2210(%832) /* ty=(Tensor[(1248), float32], Tensor[(6, 16, 13), uint32], Tensor[(8, 12, 14), float64], Tensor[(1248), float32], Tensor[(1248), bool], Tensor[(120), float64]) */;
  %834 = %827.2;
  %835 = @func_4714(%830) /* ty=Tensor[(8, 12, ?), uint8] */;
  %836 = %833.5;
  (%828, %834, %var_5421, %835, %836, %var_5438)
}

def @func_3106() -> (Tensor[(8, 12, ?), float32],) {
  %839 = fn () -> (Tensor[(8, 12, ?), float32],) {
    %837 = @func_2108() /* ty=(Tensor[(8, 12, ?), float32],) */;
    %838 = %837.0;
    (%838,)
  };
  %839() /* ty=(Tensor[(8, 12, ?), float32],) */
}

def @func_6227() -> Tensor[(120), float64] {
  @func_6225() /* ty=Tensor[(120), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen110/build/output.py", line 2344, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:25] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

