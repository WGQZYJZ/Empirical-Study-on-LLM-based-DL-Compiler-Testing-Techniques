==========mod==========
#[version = "0.0.5"]
def @func_4641() -> Tensor[(105), int16] {
  @func_2352() /* ty=Tensor[(105), int16] */
}

def @func_6715() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) {
  %0 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %1 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %2 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %3 = %0.0;
  %4 = %1.1;
  %5 = %2.1;
  (%3, %4, %5)
}

def @func_6414() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64]) {
  %6 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %7 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %8 = %6.0;
  %9 = %7.1;
  (%8, %9)
}

def @func_3095(%var_3080: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  %10 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %11 = cast(%var_3080, dtype="float64") /* ty=Tensor[(720), float64] */;
  %12 = reshape(%11, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %13 = @func_1519(%12) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %16 = reshape(%14, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %17 = reshape(%15, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %18 = %10.0;
  %19 = %13.2;
  %20 = @func_30(%16, %17) /* ty=Tensor[(3, 7, 5), int16] */;
  (%18, %19, %var_3080, %20, meta[relay.Constant][0] /* ty=Tensor[(105), int16] */)
}

def @func_4119() -> (Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) {
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %22 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %24 = reshape(%21, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %25 = reshape(%23, newshape=[8, 10, 4]) /* ty=Tensor[(8, 10, 4), float32] */;
  %26 = @func_1420(%24, %25) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) */;
  %27 = %26.1;
  (%22, %27, meta[relay.Constant][1] /* ty=Tensor[(40), float64] */)
}

def @func_1038() -> (Tensor[(1, 8, 9), float64],) {
  %28 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %29 = %28.0;
  (%29,)
}

def @func_6391() -> (Tensor[(1, 8, 9), float32],) {
  %30 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %31 = %30.0;
  (%31,)
}

def @func_1636() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) {
  %32 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
  %33 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %37 = reshape(%36, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %38 = @func_1372(%37) /* ty=(Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) */;
  %39 = %32.2;
  %40 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %41 = acosh(%35) /* ty=Tensor[(1, 8, 9), float32] */;
  %42 = %38.0;
  (%39, %40, %41, %42, meta[relay.Constant][2] /* ty=Tensor[(720), float32] */)
}

def @func_1317(%var_1268: Tensor[(2, 10, 13), uint16], %var_1269: Tensor[(2, 10, 13), uint16], %var_1274: Tensor[(2, 10, 13), bool]) -> (Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) {
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %44 = reshape(%43, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %45 = @func_911(%44) /* ty=Tensor[(12, 8, 9), bool] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %47 = cast(%var_1269, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %48 = shape_of(%var_1268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_1268, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = not_equal(%49, %50) /* ty=Tensor[(2, 10, 13), bool] */;
  %52 = cast(%var_1274, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %56 = right_shift(%54, %55) /* ty=Tensor[(2, 10, 13), uint16] */;
  %57 = cast(%56, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %58 = shape_of(%var_1268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_1268, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = exp(%46) /* ty=Tensor[(12, 8, 9), float64] */;
  %62 = greater_equal(%59, %60) /* ty=Tensor[(2, 10, 13), bool] */;
  (meta[relay.Constant][3] /* ty=Tensor[(864), float32] */, %61, %62)
}

def @func_1902() -> (Tensor[(8, 10, 4), float32],) {
  %63 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %64 = %63.0;
  (%64,)
}

def @func_3463() -> (Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) {
  %65 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %68 = reshape(%66, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
  %69 = reshape(%67, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), float32] */;
  %70 = @func_1674(%68, %69) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) */;
  %71 = %70.1;
  %72 = cast(%65, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %73 = cast(%71, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  %74 = divide(%72, %73) /* ty=Tensor[(7, 8, 9), float32] */;
  (meta[relay.Constant][4] /* ty=Tensor[(70), float32] */, meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, %74)
}

def @func_5391() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %75 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %76 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %77 = %76.0;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %82 = %75.0;
  %83 = power(%80, %81) /* ty=Tensor[(8, 10, 4), float32] */;
  (%82, %83)
}

def @func_1519(%var_1513: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %84 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %85 = cast(%var_1513, dtype="float64") /* ty=Tensor[(720), float64] */;
  %86 = reshape(%85, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %87 = @func_661(%86) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %88 = %84.0;
  %89 = %87.0;
  (%88, %89, %var_1513)
}

def @func_4174(%var_4161: Tensor[(10, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) {
  %90 = @func_3875() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %91 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %93 = cast(%var_4161, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
  %94 = %90.0;
  %95 = divide(%92, %93) /* ty=Tensor[(10, 8, 9), float32] */;
  (%94, %95)
}

def @func_6229(%var_6216: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, 1, 3), float64],) {
  %96 = cast(%var_6216, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %97 = asin(%96) /* ty=Tensor[(14, 1, 3), float64] */;
  (%97,)
}

def @func_7089() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), int64]) {
  %98 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
  %99 = @func_3529() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %100 = @func_6715() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) */;
  %101 = %98.0;
  %102 = %99.0;
  %103 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
  %104 = %100.1;
  (%101, %102, %103, %104)
}

def @func_4049() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %105 = @func_2847() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %106 = %105.0;
  %107 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
  (%106, %107)
}

def @func_6473() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %108 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %109 = %108.1;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %111 = @func_5572() /* ty=Tensor[(8, 10, 4), float32] */;
  %112 = exp(%110) /* ty=Tensor[(8, 10, 4), float32] */;
  (%111, %112)
}

def @func_3649() -> Tensor[(1, 8, 9), float32] {
  %113 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %113.1
}

def @func_1157() -> Tensor[(1, 8, 9), float32] {
  @func_511() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_2847() -> (Tensor[(1, 8, 9), float64],) {
  %114 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %115 = %114.0;
  (%115,)
}

def @func_2046(%var_2026: Tensor[(5, 8, 9), float64], %var_2034: Tensor[(504), float32]) -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float64], Tensor[(3, 7, 5), int16], Tensor[(1, 8, 9), float32], Tensor[(5, 8, 9), int64], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  %116 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %117 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %118 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %120 = %116.0;
  %121 = cast(%120, dtype="int16") /* ty=Tensor[(105), int16] */;
  %122 = reshape(%121, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %123 = @func_872(%122) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) */;
  %124 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %125 = cast(%118, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %126 = rsqrt(%125) /* ty=Tensor[(1, 8, 9), float64] */;
  %127 = cast(%126, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
  %128 = cast(%var_2026, dtype="int64") /* ty=Tensor[(5, 8, 9), int64] */;
  %129 = cast(%var_2034, dtype="float32") /* ty=Tensor[(504), float32] */;
  %130 = reshape(%129, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), float32] */;
  %131 = @func_573(%130) /* ty=(Tensor[(7, 8, 9), int32],) */;
  %132 = %117.1;
  %133 = atan(%119) /* ty=Tensor[(1, 8, 9), float64] */;
  %134 = %123.5;
  %135 = %124.0;
  %136 = bitwise_xor(%127, %128) /* ty=Tensor[(5, 8, 9), int64] */;
  %137 = %131.0;
  (%120, %132, %133, %134, %135, %136, %137, %var_2034)
}

def @func_2452() -> Tensor[(8, 10, 4), float64] {
  %138 = @func_1488() /* ty=Tensor[(8, 10, 4), float32] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
  asin(%139) /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_6265(%var_6237: Tensor[(6, 5, 3), float32], %var_6238: Tensor[(6, 5, 3), float32]) -> (Tensor[(6, 5, 3), float32],) {
  %140 = cast(%var_6238, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
  %141 = shape_of(%var_6237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_6237, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %144 = mod(%142, %143) /* ty=Tensor[(6, 5, 3), float32] */;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
  %146 = log10(%145) /* ty=Tensor[(6, 5, 3), float32] */;
  (%146,)
}

def @func_5238() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) {
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(65, 4), uint16] */, dtype="uint16") /* ty=Tensor[(65, 4), uint16] */;
  %148 = cast(meta[relay.Constant][7] /* ty=Tensor[(65, 4), uint16] */, dtype="uint16") /* ty=Tensor[(65, 4), uint16] */;
  %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(65, 4), uint16] */, dtype="bool") /* ty=Tensor[(65, 4), bool] */;
  %150 = reshape(%147, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), uint16] */;
  %151 = reshape(%148, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), uint16] */;
  %152 = reshape(%149, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
  %153 = @func_1317(%150, %151, %152) /* ty=(Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) */;
  %154 = @func_4641() /* ty=Tensor[(105), int16] */;
  %155 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  %156 = %153.2;
  (%154, %155, %156, meta[relay.Constant][7] /* ty=Tensor[(65, 4), uint16] */)
}

def @func_5132(%var_5076: Tensor[(720), float32]) -> (Tensor[(?, 8, 9), float32], Tensor[(720), float32], Tensor[(?, 8, 9), uint8], Tensor[(8, 10, 4), float32], Tensor[(?, 8, 9), float64]) {
  %157 = cast(%var_5076, dtype="float32") /* ty=Tensor[(720), float32] */;
  %158 = reshape(%157, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %159 = @func_1372(%158) /* ty=(Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) */;
  %160 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %161 = %160.1;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %163 = log(%162) /* ty=Tensor[(1, 8, 9), float64] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = not_equal(%166, %167) /* ty=Tensor[(?, 8, 9), bool] */;
  %169 = cast(%168, dtype="uint8") /* ty=Tensor[(?, 8, 9), uint8] */;
  %170 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%163, dtype="uint8") /* ty=Tensor[(1, 8, 9), uint8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %173 = cast(%var_5076, dtype="float32") /* ty=Tensor[(720), float32] */;
  %174 = reshape(%173, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %175 = @func_4174(%174) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) */;
  %176 = cast(%161, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %177 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%163, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = greater(%178, %179) /* ty=Tensor[(?, 8, 9), bool] */;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(?, 8, 9), float64] */;
  %182 = %159.1;
  %183 = subtract(%171, %172) /* ty=Tensor[(?, 8, 9), uint8] */;
  %184 = %175.0;
  %185 = cosh(%181) /* ty=Tensor[(?, 8, 9), float64] */;
  (%182, %var_5076, %183, %184, %185)
}

def @func_4210(%var_4205: Tensor[(4, 13, 13), bool], %var_4206: Tensor[(4, 13, 13), bool]) -> (Tensor[(4, 13, 13), bool],) {
  %186 = cast(%var_4206, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %187 = shape_of(%var_4205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_4205, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = logical_and(%188, %189) /* ty=Tensor[(4, 13, 13), bool] */;
  (%190,)
}

def @func_2897(%var_2895: Tensor[(720), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %191 = cast(%var_2895, dtype="float64") /* ty=Tensor[(720), float64] */;
  %192 = reshape(%191, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %193 = @func_661(%192) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %194 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %195 = %193.0;
  (%194, %195, %var_2895)
}

def @func_6089() -> (Tensor[(720), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %196 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %197 = @func_4119() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) */;
  %198 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %199 = %196.4;
  %200 = %197.0;
  %201 = %198.0;
  (%199, %200, %201)
}

def @func_4372(%var_4366: Tensor[(15, 11, 12), int64], %var_4367: Tensor[(15, 11, 12), int64]) -> (Tensor[(15, 11, 12), int64],) {
  %202 = cast(%var_4367, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %203 = shape_of(%var_4366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_4366, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %206 = logical_xor(%204, %205) /* ty=Tensor[(15, 11, 12), int64] */;
  (%206,)
}

def @func_5048() -> (Tensor[(11, 11, 6), int64], Tensor[(8, 10, 4), float32]) {
  %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %208 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %211 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %212 = right_shift(%209, %210) /* ty=Tensor[(11, 11, 6), int64] */;
  %213 = %211.0;
  (%212, %213)
}

def @func_6570() -> (Tensor[(105), int16],) {
  %214 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
  %215 = %214.0;
  (%215,)
}

def @func_5286() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %216 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %219 = asinh(%218) /* ty=Tensor[(1, 8, 9), float64] */;
  %220 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%219, %220)
}

def @func_6982(%var_6922: Tensor[(12, 60), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(176), uint64], Tensor[(10, 8, 9), bool], Tensor[(12, 60), float64]) {
  %221 = @func_6391() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(176), float32] */, dtype="uint64") /* ty=Tensor[(176), uint64] */;
  %223 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(176), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float32] */, dtype="uint64") /* ty=Tensor[(176), uint64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %227 = cast(%var_6922, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %228 = reshape(%226, newshape=[1, 16, 11]) /* ty=Tensor[(1, 16, 11), float32] */;
  %229 = reshape(%227, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %230 = @func_4275(%228, %229) /* ty=(Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %231 = %230.2;
  %232 = @func_6151() /* ty=(Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) */;
  %233 = %232.2;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
  %235 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%231, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = cast(%var_6922, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %239 = %221.0;
  %240 = logical_xor(%224, %225) /* ty=Tensor[(176), uint64] */;
  %241 = less(%236, %237) /* ty=Tensor[(10, 8, 9), bool] */;
  %242 = exp(%238) /* ty=Tensor[(12, 60), float64] */;
  (%239, %240, %241, %242)
}

def @func_6848(%var_6811: Tensor[(396), int32]) -> (Tensor[(1, 8, 9), float32], Tensor[(396), int32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), float32], Tensor[(60, 12), float32], Tensor[(1, 8, 9), float32]) {
  %243 = @func_2376() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %244 = cast(%var_6811, dtype="int32") /* ty=Tensor[(396), int32] */;
  %245 = reshape(%244, newshape=[9, 11, 4]) /* ty=Tensor[(9, 11, 4), int32] */;
  %246 = @func_2513(%245) /* ty=(Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %249 = shape_of(%var_6811, dtype="int32") /* ty=Tensor[(1), int32] */;
  %250 = cast(%var_6811, dtype="int32") /* ty=Tensor[(396), int32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?), int32] */;
  %252 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %255 = cast(meta[relay.Constant][12] /* ty=Tensor[(60, 12), float32] */, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %256 = reshape(%255, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %257 = @func_4174(%256) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) */;
  %258 = cast(%253, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %259 = %243.0;
  %260 = right_shift(%250, %251) /* ty=Tensor[(396), int32] */;
  %261 = acos(%254) /* ty=Tensor[(1, 8, 9), float32] */;
  %262 = %257.1;
  %263 = sin(%258) /* ty=Tensor[(1, 8, 9), float32] */;
  (%259, %260, %261, %262, meta[relay.Constant][12] /* ty=Tensor[(60, 12), float32] */, %263)
}

def @func_2133() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %264 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %265 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %266 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %267 = %264.0;
  %268 = %265.0;
  %269 = %266.0;
  (%267, %268, %269)
}

def @func_4802() -> (Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) {
  %270 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %271 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %272 = %271.0;
  %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 10, 4), float32] */, dtype="int64") /* ty=Tensor[(8, 10, 4), int64] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%272, dtype="int64") /* ty=Tensor[(8, 10, 4), int64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %277 = %270.3;
  %278 = maximum(%275, %276) /* ty=Tensor[(8, 10, 4), int64] */;
  (%277, %278)
}

def @func_7208() -> (Tensor[(105), int16], Tensor[(9, 8, 9), bool], Tensor[(648), float32]) {
  %279 = @func_6570() /* ty=(Tensor[(105), int16],) */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %281 = reshape(%280, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %282 = @func_4435(%281) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) */;
  %283 = %279.0;
  %284 = %282.2;
  (%283, %284, meta[relay.Constant][14] /* ty=Tensor[(648), float32] */)
}

def @func_2376() -> (Tensor[(1, 8, 9), float32],) {
  %285 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %286 = %285.0;
  (%286,)
}

def @func_3337() -> (Tensor[(8, 10, 4), float32],) {
  %287 = @func_1902() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %288 = %287.0;
  (%288,)
}

def @func_1246(%var_1224: Tensor[(5, 2, 4), float64], %var_1225: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %289 = cast(%var_1225, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %290 = shape_of(%var_1224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1224, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %293 = cast(%var_1225, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %294 = multiply(%291, %292) /* ty=Tensor[(5, 2, 4), float64] */;
  %295 = cosh(%293) /* ty=Tensor[(5, 2, 4), float64] */;
  (%294, %295)
}

def @func_3492() -> Tensor[(12, 3, 5), float64] {
  @func_1806() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_6777() -> Tensor[(8, 10, 4), float32] {
  %296 = @func_5487() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) */;
  %296.1
}

def @func_4677() -> (Tensor[(105), int16],) {
  %297 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
  %298 = %297.0;
  (%298,)
}

def @func_7396() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 7, 5), int16]) {
  %299 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
  %300 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
  %301 = %299.1;
  (%300, %301)
}

def @func_6151() -> (Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) {
  %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(360, 2), float64] */, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %303 = reshape(%302, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %304 = @func_3095(%303) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
  %305 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
  %306 = @func_4641() /* ty=Tensor[(105), int16] */;
  %307 = %304.4;
  %308 = %305.0;
  (%306, %307, meta[relay.Constant][15] /* ty=Tensor[(360, 2), float64] */, %308)
}

def @func_7187() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %309 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %310 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %311 = %309.0;
  %312 = %310.0;
  (%311, %312)
}

def @func_3529() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %313 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %314 = %313.0;
  %315 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  (%314, %315)
}

def @func_5487() -> (Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) {
  %316 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  %317 = @func_2263() /* ty=Tensor[(8, 10, 4), float32] */;
  (%316, %317)
}

def @func_3234() -> Tensor[(1, 8, 9), float32] {
  %318 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %318.0
}

def @func_6517() -> Tensor[(720), float64] {
  %319 = @func_3763() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) */;
  %319.2
}

def @func_4920() -> (Tensor[(8, 10, 4), uint16], Tensor[(8, 10, 4), float32]) {
  %320 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %321 = %320.0;
  %322 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
  %323 = %322.1;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
  %325 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%321, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = less(%326, %327) /* ty=Tensor[(8, 10, 4), bool] */;
  %329 = cast(%323, dtype="uint16") /* ty=Tensor[(8, 10, 4), uint16] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="uint16") /* ty=Tensor[(8, 10, 4), uint16] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %333 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %334 = right_shift(%331, %332) /* ty=Tensor[(8, 10, 4), uint16] */;
  %335 = %333.0;
  (%334, %335)
}

def @func_911(%var_898: Tensor[(12, 8, 9), float32]) -> Tensor[(12, 8, 9), bool] {
  %336 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %339 = cast(%var_898, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  greater_equal(%338, %339) /* ty=Tensor[(12, 8, 9), bool] */
}

def @func_661(%var_640: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) {
  %340 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="uint32") /* ty=Tensor[(1, 8, 9), uint32] */;
  %343 = cast(%var_640, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %344 = cast(%341, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
  %345 = cast(%var_640, dtype="int64") /* ty=Tensor[(10, 8, 9), int64] */;
  %346 = bitwise_xor(%342, %343) /* ty=Tensor[(10, 8, 9), uint32] */;
  %347 = minimum(%344, %345) /* ty=Tensor[(10, 8, 9), int64] */;
  (%346, %347)
}

def @func_4450() -> Tensor[(12, 3, 5), float64] {
  @func_3492() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_3981(%var_3948: Tensor[(14, 16, 10), float32], %var_3964: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) {
  %348 = cast(%var_3948, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %349 = cast(%var_3964, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %350 = shape_of(%var_3948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_3948, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %354 = reshape(%353, newshape=[]) /* ty=int16 */;
  %355 = log(%348) /* ty=Tensor[(14, 16, 10), float32] */;
  %356 = less(%351, %352) /* ty=Tensor[(14, 16, 10), bool] */;
  %357 = @func_2236(%354) /* ty=Tensor[(10, 3, 9), int16] */;
  (%355, %356, %357, meta[relay.Constant][16] /* ty=int16 */)
}

def @func_1792(%var_1785: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
  %358 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %361 = log10(%360) /* ty=Tensor[(8, 10, 4), float32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %367 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %368 = reshape(%366, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %369 = reshape(%367, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %370 = @func_1246(%368, %369) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %373 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 20), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %374 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 20), float64] */, dtype="bool") /* ty=Tensor[(2, 20), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %376 = cast(%var_1785, dtype="float64") /* ty=Tensor[(720), float64] */;
  %377 = reshape(%376, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %378 = @func_661(%377) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %379 = not_equal(%364, %365) /* ty=Tensor[(8, 10, 4), bool] */;
  %380 = greater(%374, %375) /* ty=Tensor[(2, 20), bool] */;
  %381 = %378.1;
  (%379, %380, %381, %var_1785)
}

def @func_2080(%var_2059: Tensor[(1, 40), float64]) -> (Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) {
  %382 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %383 = cast(%var_2059, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %384 = cast(%var_2059, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %385 = reshape(%383, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %386 = reshape(%384, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %387 = @func_1246(%385, %386) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %390 = shape_of(%var_2059, dtype="int32") /* ty=Tensor[(2), int32] */;
  %391 = cast(%var_2059, dtype="bool") /* ty=Tensor[(1, 40), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %393 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %394 = %382.0;
  %395 = less_equal(%391, %392) /* ty=Tensor[(?, 40), bool] */;
  %396 = %393.1;
  (%394, %395, %396)
}

def @func_1862() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %397 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %398 = %397.0;
  %399 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%398, %399)
}

def @func_4592() -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float64], Tensor[(720), float64]) {
  %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %401 = reshape(%400, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %402 = @func_661(%401) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %403 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
  %404 = cast(%403, dtype="uint64") /* ty=Tensor[(1, 8, 9), uint64] */;
  %405 = reshape(%404, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), uint64] */;
  %406 = @func_2970(%405) /* ty=(Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) */;
  %407 = %402.1;
  %408 = %406.3;
  (%403, %407, meta[relay.Constant][18] /* ty=Tensor[(720), float64] */, %408)
}

def @func_5888(%var_5825: Tensor[(3, 8, 12), float64], %var_5826: Tensor[(3, 8, 12), float64], %var_5836: Tensor[(2940), float32]) -> (Tensor[(3, 8, 12), float64], Tensor[(14, 14, 15), int64], Tensor[(2940), float32], Tensor[(12, 8, 9), uint32], Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %409 = cast(%var_5826, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %410 = shape_of(%var_5825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_5825, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %413 = cast(%var_5836, dtype="float32") /* ty=Tensor[(2940), float32] */;
  %414 = cast(%var_5836, dtype="float32") /* ty=Tensor[(2940), float32] */;
  %415 = reshape(%413, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), float32] */;
  %416 = reshape(%414, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), float32] */;
  %417 = @func_2817(%415, %416) /* ty=(Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) */;
  %418 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
  %419 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %420 = @func_5463() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32]) */;
  %421 = divide(%411, %412) /* ty=Tensor[(3, 8, 12), float64] */;
  %422 = %417.1;
  %423 = %418.0;
  %424 = %419.0;
  %425 = %420.1;
  (%421, %422, %var_5836, %423, %424, %425)
}

def @func_7268(%var_7233: Tensor[(9, 13, 4), float32]) -> (Tensor[(9, 13, 4), float64], Tensor[(9, 13, 4), float64], Tensor[(8, 10, 4), float32]) {
  %426 = cast(%var_7233, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
  %427 = sinh(%426) /* ty=Tensor[(9, 13, 4), float32] */;
  %428 = cast(%var_7233, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = not_equal(%430, %431) /* ty=Tensor[(9, 13, 4), bool] */;
  %433 = cast(%var_7233, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = cast(%var_7233, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
  %438 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %439 = floor_mod(%435, %436) /* ty=Tensor[(9, 13, 4), float64] */;
  %440 = log10(%437) /* ty=Tensor[(9, 13, 4), float64] */;
  %441 = %438.0;
  (%439, %440, %441)
}

def @func_3214() -> (Tensor[(7, 11, 12), float32],) {
  %442 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %443 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %446 = bitwise_xor(%444, %445) /* ty=Tensor[(7, 11, 12), uint16] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %448 = sqrt(%447) /* ty=Tensor[(7, 11, 12), float32] */;
  (%448,)
}

def @func_2236(%var_2209: int16) -> Tensor[(10, 3, 9), int16] {
  %449 = cast(%var_2209, dtype="int16") /* ty=int16 */;
  %450 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 3, 9), int16] */, dtype="int16") /* ty=Tensor[(10, 3, 9), int16] */;
  right_shift(%449, %450) /* ty=Tensor[(10, 3, 9), int16] */
}

def @func_3040() -> (Tensor[(12, 3, 5), float64], Tensor[(1, 8, 9), float64], Tensor[(8, 10, 4), float64]) {
  %451 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %452 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
  %454 = @func_1806() /* ty=Tensor[(12, 3, 5), float64] */;
  %455 = %451.0;
  %456 = sin(%453) /* ty=Tensor[(8, 10, 4), float64] */;
  (%454, %455, %456)
}

def @func_4275(%var_4256: Tensor[(1, 16, 11), float32], %var_4273: Tensor[(720), float64]) -> (Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %457 = cast(%var_4256, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
  %458 = asin(%457) /* ty=Tensor[(1, 16, 11), float32] */;
  %459 = cast(%458, dtype="bool") /* ty=Tensor[(1, 16, 11), bool] */;
  %460 = shape_of(%var_4256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_4256, dtype="bool") /* ty=Tensor[(1, 16, 11), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = cast(%458, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
  %464 = cast(%var_4273, dtype="float64") /* ty=Tensor[(720), float64] */;
  %465 = reshape(%464, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %466 = @func_1519(%465) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %467 = greater(%461, %462) /* ty=Tensor[(?, 16, 11), bool] */;
  %468 = sin(%463) /* ty=Tensor[(1, 16, 11), float64] */;
  %469 = %466.1;
  (%467, %468, %469, %var_4273)
}

def @func_5163(%var_5159: Tensor[(14, 16, 4), int8]) -> (Tensor[(14, 16, 4), int8],) {
  %470 = cast(%var_5159, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
  %471 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %474 = logical_xor(%472, %473) /* ty=Tensor[(14, 16, 4), int8] */;
  (%474,)
}

def @func_7168(%var_7148: Tensor[(2, 16, 3), float64]) -> Tensor[(2, 16, 3), uint8] {
  %475 = cast(%var_7148, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %476 = asinh(%475) /* ty=Tensor[(2, 16, 3), float64] */;
  %477 = cast(%476, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %478 = shape_of(%var_7148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_7148, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %481 = add(%479, %480) /* ty=Tensor[(2, 16, 3), uint8] */;
  %482 = cast(%481, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %483 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%476, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%484, %485) /* ty=Tensor[(2, 16, 3), uint8] */
}

def @func_6298() -> Tensor[(7, 8, 9), float32] {
  %486 = @func_3463() /* ty=(Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) */;
  %486.2
}

def @func_3808(%var_3787: Tensor[(3, 9, 12), bool]) -> (Tensor[(3, 9, 12), bool], Tensor[(105), int16]) {
  %487 = cast(%var_3787, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %488 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(3, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = logical_and(%489, %490) /* ty=Tensor[(3, 9, 12), bool] */;
  %492 = @func_2352() /* ty=Tensor[(105), int16] */;
  (%491, %492)
}

def @func_5737(%var_5677: int16) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 3, 9), int16], int16, Tensor[(105), int16], Tensor[(1, 8, 9), float64], Tensor[(14, 16, 10), bool], Tensor[(2240), float32]) {
  %493 = @func_3305() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %494 = cast(%var_5677, dtype="int16") /* ty=int16 */;
  %495 = reshape(%494, newshape=[]) /* ty=int16 */;
  %496 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
  %497 = @func_2847() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %498 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %499 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %500 = reshape(%498, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), float32] */;
  %501 = reshape(%499, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), float32] */;
  %502 = @func_3981(%500, %501) /* ty=(Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) */;
  %503 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %504 = %493.0;
  %505 = @func_2236(%495) /* ty=Tensor[(10, 3, 9), int16] */;
  %506 = %496.0;
  %507 = %497.0;
  %508 = %502.1;
  %509 = sin(%503) /* ty=Tensor[(2240), float32] */;
  (%504, %505, %var_5677, %506, %507, %508, %509)
}

def @func_6623(%var_6600: Tensor[(105), int16]) -> (Tensor[(13, 7, 12), float64], Tensor[(1, 8, 9), float32], Tensor[(105), int16]) {
  %510 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %511 = cast(%var_6600, dtype="int16") /* ty=Tensor[(105), int16] */;
  %512 = reshape(%511, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %513 = @func_872(%512) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) */;
  %514 = erf(%510) /* ty=Tensor[(13, 7, 12), float64] */;
  %515 = %513.2;
  (%514, %515, %var_6600)
}

def @func_1372(%var_1343: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) {
  %516 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %517 = cast(%516, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
  %518 = cast(%var_1343, dtype="int64") /* ty=Tensor[(10, 8, 9), int64] */;
  %519 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %521 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%516, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %524 = logical_xor(%517, %518) /* ty=Tensor[(10, 8, 9), int64] */;
  %525 = divide(%522, %523) /* ty=Tensor[(?, 8, 9), float32] */;
  (%524, %525)
}

def @func_4575() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
  %526 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
  %527 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %529 = cos(%528) /* ty=Tensor[(1, 8, 9), float64] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %531 = %526.0;
  %532 = asin(%530) /* ty=Tensor[(1, 8, 9), float32] */;
  (%531, %532)
}

def @func_5179(%var_5170: Tensor[(15, 12, 14), float32], %var_5171: Tensor[(15, 12, 14), float32]) -> Tensor[(15, 12, 14), bool] {
  %533 = cast(%var_5171, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
  %534 = shape_of(%var_5170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_5170, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%535, %536) /* ty=Tensor[(15, 12, 14), bool] */
}

def @func_496() -> (Tensor[(1, 8, 9), float64],) {
  %537 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %538 = atanh(%537) /* ty=Tensor[(1, 8, 9), float64] */;
  (%538,)
}

def @func_7127() -> (Tensor[(1, 8, 9), float32],) {
  %539 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %540 = %539.0;
  (%540,)
}

def @func_2936() -> (Tensor[(8, 10, 4), float32],) {
  %541 = @func_1902() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %542 = %541.0;
  (%542,)
}

def @func_2617() -> Tensor[(8, 10, 4), float64] {
  @func_2452() /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_1420(%var_1390: Tensor[(40), float64], %var_1406: Tensor[(8, 10, 4), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) {
  %543 = cast(%var_1390, dtype="float64") /* ty=Tensor[(40), float64] */;
  %544 = cast(%var_1390, dtype="float64") /* ty=Tensor[(40), float64] */;
  %545 = reshape(%543, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %546 = reshape(%544, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %547 = @func_1246(%545, %546) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %548 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %549 = %548.0;
  %550 = cast(%var_1406, dtype="uint32") /* ty=Tensor[(8, 10, 4), uint32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="uint32") /* ty=Tensor[(8, 10, 4), uint32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %554 = %547.1;
  %555 = logical_xor(%552, %553) /* ty=Tensor[(8, 10, 4), uint32] */;
  (%554, %var_1390, %555)
}

def @func_1576() -> (Tensor[(8, 10, 4), float32],) {
  %556 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %557 = %556.0;
  (%557,)
}

def @func_2712() -> (Tensor[(8, 10, 4), float64], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
  %558 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %559 = reshape(%558, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %560 = @func_661(%559) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %561 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
  %562 = %560.1;
  (%561, %562, meta[relay.Constant][27] /* ty=Tensor[(720), float64] */)
}

def @func_3172() -> (Tensor[(8, 10, 4), float64],) {
  %563 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  (%563,)
}

def @func_3305() -> (Tensor[(8, 10, 4), float32],) {
  %564 = @func_1488() /* ty=Tensor[(8, 10, 4), float32] */;
  (%564,)
}

def @func_2970(%var_2940: Tensor[(6, 6, 2), uint64]) -> (Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) {
  %565 = cast(%var_2940, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %566 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %569 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %570 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
  %571 = log2(%570) /* ty=Tensor[(6, 6, 2), float64] */;
  %572 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
  %573 = shape_of(%var_2940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_2940, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %576 = subtract(%574, %575) /* ty=Tensor[(6, 6, 2), float32] */;
  %577 = cast(%576, dtype="bool") /* ty=Tensor[(6, 6, 2), bool] */;
  %578 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%571, dtype="bool") /* ty=Tensor[(6, 6, 2), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = cast(meta[relay.Constant][29] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %582 = reshape(%581, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %583 = @func_2897(%582) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %584 = minimum(%567, %568) /* ty=Tensor[(6, 6, 2), uint64] */;
  %585 = %569.0;
  %586 = less_equal(%579, %580) /* ty=Tensor[(6, 6, 2), bool] */;
  %587 = %583.2;
  (%584, %585, %586, %587, meta[relay.Constant][29] /* ty=Tensor[(720), float64] */)
}

def @func_3149() -> (Tensor[(8, 10, 4), float32],) {
  %588 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
  (%588,)
}

def @func_5572() -> Tensor[(8, 10, 4), float32] {
  %589 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %589.0
}

def @func_7017(%var_7005: Tensor[(40, 1), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(40, 1), float64]) {
  %590 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %591 = @func_6473() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */;
  %592 = cast(%var_7005, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %593 = reshape(%592, newshape=[1, 40]) /* ty=Tensor[(1, 40), float64] */;
  %594 = @func_2080(%593) /* ty=(Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) */;
  %595 = cast(%var_7005, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %596 = %590.0;
  %597 = %591.1;
  %598 = @func_3649() /* ty=Tensor[(1, 8, 9), float32] */;
  %599 = %594.2;
  %600 = atanh(%595) /* ty=Tensor[(40, 1), float64] */;
  (%596, %597, %598, %599, %600)
}

def @func_6665(%var_6636: Tensor[(8, 4, 2), int32], %var_6637: Tensor[(8, 4, 2), int32]) -> (Tensor[(8, 4, 2), bool],) {
  %601 = cast(%var_6637, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %602 = shape_of(%var_6636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_6636, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = equal(%603, %604) /* ty=Tensor[(8, 4, 2), bool] */;
  (%605,)
}

def @func_5463() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
  %606 = @func_4677() /* ty=(Tensor[(105), int16],) */;
  %607 = %606.0;
  %608 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  (%607, %608)
}

def @func_4435(%var_4399: Tensor[(9, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) {
  %609 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
  %610 = @func_2376() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %611 = %610.0;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %613 = cast(%var_4399, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
  %614 = floor_mod(%612, %613) /* ty=Tensor[(9, 8, 9), float64] */;
  %615 = cast(%614, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %616 = shape_of(%var_4399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_4399, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
  %620 = %609.0;
  %621 = not_equal(%617, %618) /* ty=Tensor[(9, 8, 9), bool] */;
  %622 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
  (%619, %620, %621, %622)
}

def @func_1185() -> (Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  %623 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %625 = cast(meta[relay.Constant][30] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %626 = reshape(%624, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %627 = reshape(%625, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %628 = %623.0;
  %629 = @func_30(%626, %627) /* ty=Tensor[(3, 7, 5), int16] */;
  (%628, %629, meta[relay.Constant][30] /* ty=Tensor[(105), int16] */)
}

def @func_1958() -> Tensor[(8, 10, 4), float32] {
  %630 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %630.0
}

def @func_7323() -> (Tensor[(16, 7, 12), float32],) {
  %631 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %632 = log(%631) /* ty=Tensor[(16, 7, 12), float32] */;
  (%632,)
}

def @func_3875() -> (Tensor[(8, 10, 4), float32],) {
  %633 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %634 = %633.0;
  (%634,)
}

def @main() -> (Tensor[(1, 8, 9), float32],) {
  %635 = @func_3649() /* ty=Tensor[(1, 8, 9), float32] */;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %637 = log2(%636) /* ty=Tensor[(1, 8, 9), float32] */;
  (%637,)
}

def @func_5958() -> Tensor[(8, 10, 4), float32] {
  %638 = @func_3763() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) */;
  %638.0
}

def @func_2513(%var_2460: Tensor[(9, 11, 4), int32]) -> (Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) {
  %639 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 11, 4), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %640 = shape_of(%var_2460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%var_2460, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %643 = minimum(%641, %642) /* ty=Tensor[(9, 11, 4), int32] */;
  %644 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 11, 4), int32] */, dtype="uint64") /* ty=Tensor[(9, 11, 4), uint64] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="uint64") /* ty=Tensor[(9, 11, 4), uint64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %648 = left_shift(%646, %647) /* ty=Tensor[(9, 11, 4), uint64] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(9, 11, 4), float64] */;
  %650 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %651 = asinh(%649) /* ty=Tensor[(9, 11, 4), float64] */;
  %652 = %650.0;
  (%651, %652)
}

def @func_4468() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32]) {
  %653 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %654 = @func_2352() /* ty=Tensor[(105), int16] */;
  %655 = %653.0;
  (%654, %655)
}

def @func_2174(%var_2164: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), uint16], Tensor[(1, 8, 9), float32]) {
  %656 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %657 = cast(%656, dtype="uint16") /* ty=Tensor[(1, 8, 9), uint16] */;
  %658 = cast(%var_2164, dtype="uint16") /* ty=Tensor[(15, 8, 9), uint16] */;
  %659 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %660 = bitwise_xor(%657, %658) /* ty=Tensor[(15, 8, 9), uint16] */;
  %661 = %659.0;
  (%660, %661)
}

def @func_872(%var_830: Tensor[(105), int16]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) {
  %662 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %663 = reshape(%662, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %664 = @func_661(%663) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
  %667 = log10(%666) /* ty=Tensor[(10, 8, 9), float32] */;
  %668 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), float64] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %673 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
  %674 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
  %675 = reshape(%673, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %676 = reshape(%674, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %677 = @func_30(%675, %676) /* ty=Tensor[(3, 7, 5), int16] */;
  %678 = cast(%677, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %679 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
  %680 = reshape(%678, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %681 = reshape(%679, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %682 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %683 = %682.0;
  %684 = cast(%667, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
  %685 = cast(%683, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %686 = mod(%684, %685) /* ty=Tensor[(10, 8, 9), float32] */;
  %687 = cast(%667, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  %692 = equal(%670, %671) /* ty=Tensor[(10, 8, 9), bool] */;
  %693 = %672.0;
  %694 = @func_30(%680, %681) /* ty=Tensor[(3, 7, 5), int16] */;
  %695 = logical_and(%689, %690) /* ty=Tensor[(10, 8, 9), bool] */;
  (%691, %692, %693, %677, %var_830, %694, %695)
}

def @func_1674(%var_1646: Tensor[(14, 5, 1), float32], %var_1647: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  %696 = cast(%var_1646, dtype="float32") /* ty=Tensor[(14, 5, 1), float32] */;
  %697 = cast(%var_1647, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %698 = cast(meta[relay.Constant][34] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %699 = reshape(%698, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), float32] */;
  %700 = @func_573(%699) /* ty=(Tensor[(7, 8, 9), int32],) */;
  %701 = power(%696, %697) /* ty=Tensor[(14, 5, 7), float32] */;
  %702 = %700.0;
  (%701, %702, meta[relay.Constant][34] /* ty=Tensor[(504), float32] */)
}

def @func_1140() -> (Tensor[(8, 10, 4), float32],) {
  %703 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %704 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(8, 10, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = minimum(%705, %706) /* ty=Tensor[(8, 10, 4), float32] */;
  (%707,)
}

def @func_2817(%var_2797: Tensor[(14, 14, 15), float32], %var_2798: Tensor[(14, 14, 15), float32]) -> (Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) {
  %708 = cast(%var_2798, dtype="float32") /* ty=Tensor[(14, 14, 15), float32] */;
  %709 = shape_of(%var_2797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_2797, dtype="float32") /* ty=Tensor[(14, 14, 15), float32] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %712 = cast(%var_2797, dtype="int64") /* ty=Tensor[(14, 14, 15), int64] */;
  %713 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_2798, dtype="int64") /* ty=Tensor[(14, 14, 15), int64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %716 = divide(%710, %711) /* ty=Tensor[(14, 14, 15), float32] */;
  %717 = multiply(%714, %715) /* ty=Tensor[(14, 14, 15), int64] */;
  (%716, %717)
}

def @func_2352() -> Tensor[(105), int16] {
  %718 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
  %718.2
}

def @func_1488() -> Tensor[(8, 10, 4), float32] {
  %719 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %719.0
}

def @func_30(%var_19: Tensor[(3, 7, 5), int16], %var_20: Tensor[(3, 7, 5), int16]) -> Tensor[(3, 7, 5), int16] {
  %720 = cast(%var_20, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %721 = shape_of(%var_19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_19, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%722, %723) /* ty=Tensor[(3, 7, 5), int16] */
}

def @func_3745() -> (Tensor[(12, 8, 9), uint32],) {
  %724 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %725 = %724.1;
  %726 = cast(%725, dtype="uint32") /* ty=Tensor[(1, 8, 9), uint32] */;
  %727 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 8, 9), float32] */, dtype="uint32") /* ty=Tensor[(12, 8, 9), uint32] */;
  %728 = left_shift(%726, %727) /* ty=Tensor[(12, 8, 9), uint32] */;
  (%728,)
}

def @func_5798(%var_5759: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), float64], Tensor[(10, 8, 9), uint32]) {
  %729 = @func_4049() /* ty=(Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) */;
  %730 = %729.1;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %732 = cast(%var_5759, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %733 = multiply(%731, %732) /* ty=Tensor[(10, 8, 9), float64] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %735 = reshape(%734, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %736 = @func_2897(%735) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %737 = %736.1;
  (%733, %737)
}

def @func_573(%var_564: Tensor[(7, 8, 9), float32]) -> (Tensor[(7, 8, 9), int32],) {
  %738 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  %739 = cast(%738, dtype="int32") /* ty=Tensor[(1, 8, 9), int32] */;
  %740 = cast(%var_564, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
  %741 = right_shift(%739, %740) /* ty=Tensor[(7, 8, 9), int32] */;
  (%741,)
}

def @func_3763() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) {
  %742 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %743 = cast(meta[relay.Constant][38] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %744 = reshape(%743, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %745 = @func_1792(%744) /* ty=(Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) */;
  %746 = %742.0;
  %747 = %745.0;
  (%746, %747, meta[relay.Constant][38] /* ty=Tensor[(720), float64] */)
}

def @func_3825() -> Tensor[(12, 8, 9), uint32] {
  %748 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
  %748.0
}

def @func_3628(%var_3612: Tensor[(15, 2, 7), float64], %var_3622: Tensor[(60, 12), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(8, 10, 4), float64], Tensor[(1, 8, 9), float32], Tensor[(60, 12), float64]) {
  %749 = cast(%var_3612, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %750 = @func_3172() /* ty=(Tensor[(8, 10, 4), float64],) */;
  %751 = cast(%var_3622, dtype="float64") /* ty=Tensor[(60, 12), float64] */;
  %752 = reshape(%751, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %753 = @func_2897(%752) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %754 = cosh(%749) /* ty=Tensor[(15, 2, 7), float64] */;
  %755 = %750.0;
  %756 = %753.0;
  (%754, %755, %756, %var_3622)
}

def @func_1549() -> (Tensor[(1, 8, 9), float32],) {
  %757 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%757,)
}

def @func_1806() -> Tensor[(12, 3, 5), float64] {
  %758 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 5), float64] */;
  erf(%758) /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_511() -> Tensor[(1, 8, 9), float32] {
  %759 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %760 = %759.0;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  sinh(%761) /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_738() -> (Tensor[(1, 8, 9), float32],) {
  %762 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  (%762,)
}

def @func_5928() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64]) {
  %763 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %764 = @func_3172() /* ty=(Tensor[(8, 10, 4), float64],) */;
  %765 = %763.0;
  %766 = %764.0;
  (%765, %766)
}

def @func_2263() -> Tensor[(8, 10, 4), float32] {
  @func_1488() /* ty=Tensor[(8, 10, 4), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4372(%var_4366: Tensor[(15, 11, 12), int64], %var_4367: Tensor[(15, 11, 12), int64]) -> (Tensor[(15, 11, 12), int64],) {
  %0 = cast(%var_4367, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %1 = shape_of(%var_4366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_4366, dtype="int64") /* ty=Tensor[(15, 11, 12), int64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %4 = logical_xor(%2, %3) /* ty=Tensor[(15, 11, 12), int64] */;
  (%4,)
}

def @func_4121() -> (Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) {
  @func_4119() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) */
}

def @func_7270(%var_7269: Tensor[(9, 13, 4), float32]) -> (Tensor[(9, 13, 4), float64], Tensor[(9, 13, 4), float64], Tensor[(8, 10, 4), float32]) {
  %21 = fn (%var_7233: Tensor[(9, 13, 4), float32]) -> (Tensor[(9, 13, 4), float64], Tensor[(9, 13, 4), float64], Tensor[(8, 10, 4), float32]) {
    %5 = cast(%var_7233, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
    %6 = sinh(%5) /* ty=Tensor[(9, 13, 4), float32] */;
    %7 = cast(%var_7233, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %11 = not_equal(%9, %10) /* ty=Tensor[(9, 13, 4), bool] */;
    %12 = cast(%var_7233, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %16 = cast(%var_7233, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
    %17 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %18 = floor_mod(%14, %15) /* ty=Tensor[(9, 13, 4), float64] */;
    %19 = log10(%16) /* ty=Tensor[(9, 13, 4), float64] */;
    %20 = %17.0;
    (%18, %19, %20)
  };
  %21(%var_7269) /* ty=(Tensor[(9, 13, 4), float64], Tensor[(9, 13, 4), float64], Tensor[(8, 10, 4), float32]) */
}

def @func_6392() -> (Tensor[(1, 8, 9), float32],) {
  %24 = fn () -> (Tensor[(1, 8, 9), float32],) {
    %22 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %23 = %22.0;
    (%23,)
  };
  %24() /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_5893(%var_5890: Tensor[(3, 8, 12), float64], %var_5891: Tensor[(3, 8, 12), float64], %var_5892: Tensor[(2940), float32]) -> (Tensor[(3, 8, 12), float64], Tensor[(14, 14, 15), int64], Tensor[(2940), float32], Tensor[(12, 8, 9), uint32], Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  @func_5888(%var_5890, %var_5891, %var_5892) /* ty=(Tensor[(3, 8, 12), float64], Tensor[(14, 14, 15), int64], Tensor[(2940), float32], Tensor[(12, 8, 9), uint32], Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) */
}

def @func_6668(%var_6666: Tensor[(8, 4, 2), int32], %var_6667: Tensor[(8, 4, 2), int32]) -> (Tensor[(8, 4, 2), bool],) {
  %30 = fn (%var_6636: Tensor[(8, 4, 2), int32], %var_6637: Tensor[(8, 4, 2), int32]) -> (Tensor[(8, 4, 2), bool],) {
    %25 = cast(%var_6637, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
    %26 = shape_of(%var_6636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_6636, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = equal(%27, %28) /* ty=Tensor[(8, 4, 2), bool] */;
    (%29,)
  };
  %30(%var_6666, %var_6667) /* ty=(Tensor[(8, 4, 2), bool],) */
}

def @func_1187() -> (Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */
}

def @func_7187() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %31 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %32 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %33 = %31.0;
  %34 = %32.0;
  (%33, %34)
}

def @func_1140() -> (Tensor[(8, 10, 4), float32],) {
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %36 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 10, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %39 = minimum(%37, %38) /* ty=Tensor[(8, 10, 4), float32] */;
  (%39,)
}

def @func_3337() -> (Tensor[(8, 10, 4), float32],) {
  %40 = @func_1902() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %41 = %40.0;
  (%41,)
}

def @func_6715() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) {
  %42 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %43 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %44 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %45 = %42.0;
  %46 = %43.1;
  %47 = %44.1;
  (%45, %46, %47)
}

def @func_3531() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  @func_3529() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */
}

def @func_1489() -> Tensor[(8, 10, 4), float32] {
  %49 = fn () -> Tensor[(8, 10, 4), float32] {
    %48 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %48.0
  };
  %49() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_5134(%var_5133: Tensor[(720), float32]) -> (Tensor[(?, 8, 9), float32], Tensor[(720), float32], Tensor[(?, 8, 9), uint8], Tensor[(8, 10, 4), float32], Tensor[(?, 8, 9), float64]) {
  %79 = fn (%var_5076: Tensor[(720), float32]) -> (Tensor[(?, 8, 9), float32], Tensor[(720), float32], Tensor[(?, 8, 9), uint8], Tensor[(8, 10, 4), float32], Tensor[(?, 8, 9), float64]) {
    %50 = cast(%var_5076, dtype="float32") /* ty=Tensor[(720), float32] */;
    %51 = reshape(%50, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
    %52 = @func_1372(%51) /* ty=(Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) */;
    %53 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
    %54 = %53.1;
    %55 = cast(%54, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
    %56 = log(%55) /* ty=Tensor[(1, 8, 9), float64] */;
    %57 = cast(%54, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
    %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(%56, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %61 = not_equal(%59, %60) /* ty=Tensor[(?, 8, 9), bool] */;
    %62 = cast(%61, dtype="uint8") /* ty=Tensor[(?, 8, 9), uint8] */;
    %63 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(%56, dtype="uint8") /* ty=Tensor[(1, 8, 9), uint8] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %66 = cast(%var_5076, dtype="float32") /* ty=Tensor[(720), float32] */;
    %67 = reshape(%66, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
    %68 = @func_4174(%67) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) */;
    %69 = cast(%54, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
    %70 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%56, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %73 = greater(%71, %72) /* ty=Tensor[(?, 8, 9), bool] */;
    %74 = cast(%73, dtype="float64") /* ty=Tensor[(?, 8, 9), float64] */;
    %75 = %52.1;
    %76 = subtract(%64, %65) /* ty=Tensor[(?, 8, 9), uint8] */;
    %77 = %68.0;
    %78 = cosh(%74) /* ty=Tensor[(?, 8, 9), float64] */;
    (%75, %var_5076, %76, %77, %78)
  };
  %79(%var_5133) /* ty=(Tensor[(?, 8, 9), float32], Tensor[(720), float32], Tensor[(?, 8, 9), uint8], Tensor[(8, 10, 4), float32], Tensor[(?, 8, 9), float64]) */
}

def @func_5487() -> (Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) {
  %80 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  %81 = @func_2263() /* ty=Tensor[(8, 10, 4), float32] */;
  (%80, %81)
}

def @func_6571() -> (Tensor[(105), int16],) {
  %84 = fn () -> (Tensor[(105), int16],) {
    %82 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
    %83 = %82.0;
    (%83,)
  };
  %84() /* ty=(Tensor[(105), int16],) */
}

def @func_1038() -> (Tensor[(1, 8, 9), float64],) {
  %85 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %86 = %85.0;
  (%86,)
}

def @func_7017(%var_7005: Tensor[(40, 1), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(40, 1), float64]) {
  %87 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %88 = @func_6473() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */;
  %89 = cast(%var_7005, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %90 = reshape(%89, newshape=[1, 40]) /* ty=Tensor[(1, 40), float64] */;
  %91 = @func_2080(%90) /* ty=(Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) */;
  %92 = cast(%var_7005, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %93 = %87.0;
  %94 = %88.1;
  %95 = @func_3649() /* ty=Tensor[(1, 8, 9), float32] */;
  %96 = %91.2;
  %97 = atanh(%92) /* ty=Tensor[(40, 1), float64] */;
  (%93, %94, %95, %96, %97)
}

def @func_2820(%var_2818: Tensor[(14, 14, 15), float32], %var_2819: Tensor[(14, 14, 15), float32]) -> (Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) {
  %108 = fn (%var_2797: Tensor[(14, 14, 15), float32], %var_2798: Tensor[(14, 14, 15), float32]) -> (Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) {
    %98 = cast(%var_2798, dtype="float32") /* ty=Tensor[(14, 14, 15), float32] */;
    %99 = shape_of(%var_2797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%var_2797, dtype="float32") /* ty=Tensor[(14, 14, 15), float32] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %102 = cast(%var_2797, dtype="int64") /* ty=Tensor[(14, 14, 15), int64] */;
    %103 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%var_2798, dtype="int64") /* ty=Tensor[(14, 14, 15), int64] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %106 = divide(%100, %101) /* ty=Tensor[(14, 14, 15), float32] */;
    %107 = multiply(%104, %105) /* ty=Tensor[(14, 14, 15), int64] */;
    (%106, %107)
  };
  %108(%var_2818, %var_2819) /* ty=(Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) */
}

def @func_1040() -> (Tensor[(1, 8, 9), float64],) {
  @func_1038() /* ty=(Tensor[(1, 8, 9), float64],) */
}

def @func_7090() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), int64]) {
  %116 = fn () -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), int64]) {
    %109 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
    %110 = @func_3529() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
    %111 = @func_6715() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) */;
    %112 = %109.0;
    %113 = %110.0;
    %114 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
    %115 = %111.1;
    (%112, %113, %114, %115)
  };
  %116() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), int64]) */
}

def @func_3041() -> (Tensor[(12, 3, 5), float64], Tensor[(1, 8, 9), float64], Tensor[(8, 10, 4), float64]) {
  %123 = fn () -> (Tensor[(12, 3, 5), float64], Tensor[(1, 8, 9), float64], Tensor[(8, 10, 4), float64]) {
    %117 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
    %118 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
    %120 = @func_1806() /* ty=Tensor[(12, 3, 5), float64] */;
    %121 = %117.0;
    %122 = sin(%119) /* ty=Tensor[(8, 10, 4), float64] */;
    (%120, %121, %122)
  };
  %123() /* ty=(Tensor[(12, 3, 5), float64], Tensor[(1, 8, 9), float64], Tensor[(8, 10, 4), float64]) */
}

def @func_3763() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) {
  %124 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %125 = cast(meta[relay.Constant][2] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %126 = reshape(%125, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %127 = @func_1792(%126) /* ty=(Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) */;
  %128 = %124.0;
  %129 = %127.0;
  (%128, %129, meta[relay.Constant][2] /* ty=Tensor[(720), float64] */)
}

def @func_1903() -> (Tensor[(8, 10, 4), float32],) {
  %132 = fn () -> (Tensor[(8, 10, 4), float32],) {
    %130 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %131 = %130.0;
    (%131,)
  };
  %132() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_1551() -> (Tensor[(1, 8, 9), float32],) {
  @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_3631(%var_3629: Tensor[(15, 2, 7), float64], %var_3630: Tensor[(60, 12), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(8, 10, 4), float64], Tensor[(1, 8, 9), float32], Tensor[(60, 12), float64]) {
  %141 = fn (%var_3612: Tensor[(15, 2, 7), float64], %var_3622: Tensor[(60, 12), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(8, 10, 4), float64], Tensor[(1, 8, 9), float32], Tensor[(60, 12), float64]) {
    %133 = cast(%var_3612, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
    %134 = @func_3172() /* ty=(Tensor[(8, 10, 4), float64],) */;
    %135 = cast(%var_3622, dtype="float64") /* ty=Tensor[(60, 12), float64] */;
    %136 = reshape(%135, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %137 = @func_2897(%136) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
    %138 = cosh(%133) /* ty=Tensor[(15, 2, 7), float64] */;
    %139 = %134.0;
    %140 = %137.0;
    (%138, %139, %140, %var_3622)
  };
  %141(%var_3629, %var_3630) /* ty=(Tensor[(15, 2, 7), float64], Tensor[(8, 10, 4), float64], Tensor[(1, 8, 9), float32], Tensor[(60, 12), float64]) */
}

def @func_1959() -> Tensor[(8, 10, 4), float32] {
  %143 = fn () -> Tensor[(8, 10, 4), float32] {
    %142 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %142.0
  };
  %143() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_2352() -> Tensor[(105), int16] {
  %144 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
  %144.2
}

def @func_4803() -> (Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) {
  %154 = fn () -> (Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) {
    %145 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
    %146 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %147 = %146.0;
    %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 10, 4), float32] */, dtype="int64") /* ty=Tensor[(8, 10, 4), int64] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%147, dtype="int64") /* ty=Tensor[(8, 10, 4), int64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %152 = %145.3;
    %153 = maximum(%150, %151) /* ty=Tensor[(8, 10, 4), int64] */;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */
}

def @func_3339() -> (Tensor[(8, 10, 4), float32],) {
  @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_3149() -> (Tensor[(8, 10, 4), float32],) {
  %155 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
  (%155,)
}

def @func_4376(%var_4374: Tensor[(15, 11, 12), int64], %var_4375: Tensor[(15, 11, 12), int64]) -> (Tensor[(15, 11, 12), int64],) {
  @func_4372(%var_4374, %var_4375) /* ty=(Tensor[(15, 11, 12), int64],) */
}

def @func_1157() -> Tensor[(1, 8, 9), float32] {
  @func_511() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_6982(%var_6922: Tensor[(12, 60), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(176), uint64], Tensor[(10, 8, 9), bool], Tensor[(12, 60), float64]) {
  %156 = @func_6391() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(176), float32] */, dtype="uint64") /* ty=Tensor[(176), uint64] */;
  %158 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(176), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %159 = cast(meta[relay.Constant][4] /* ty=Tensor[(176), float32] */, dtype="uint64") /* ty=Tensor[(176), uint64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %161 = cast(meta[relay.Constant][4] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %162 = cast(%var_6922, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %163 = reshape(%161, newshape=[1, 16, 11]) /* ty=Tensor[(1, 16, 11), float32] */;
  %164 = reshape(%162, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %165 = @func_4275(%163, %164) /* ty=(Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %166 = %165.2;
  %167 = @func_6151() /* ty=(Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) */;
  %168 = %167.2;
  %169 = cast(%168, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
  %170 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%166, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(%var_6922, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %174 = %156.0;
  %175 = logical_xor(%159, %160) /* ty=Tensor[(176), uint64] */;
  %176 = less(%171, %172) /* ty=Tensor[(10, 8, 9), bool] */;
  %177 = exp(%173) /* ty=Tensor[(12, 60), float64] */;
  (%174, %175, %176, %177)
}

def @func_2050(%var_2048: Tensor[(5, 8, 9), float64], %var_2049: Tensor[(504), float32]) -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float64], Tensor[(3, 7, 5), int16], Tensor[(1, 8, 9), float32], Tensor[(5, 8, 9), int64], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  @func_2046(%var_2048, %var_2049) /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float64], Tensor[(3, 7, 5), int16], Tensor[(1, 8, 9), float32], Tensor[(5, 8, 9), int64], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) */
}

def @func_5801(%var_5799: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), float64], Tensor[(10, 8, 9), uint32]) {
  @func_5798(%var_5799) /* ty=(Tensor[(10, 8, 9), float64], Tensor[(10, 8, 9), uint32]) */
}

def @func_3808(%var_3787: Tensor[(3, 9, 12), bool]) -> (Tensor[(3, 9, 12), bool], Tensor[(105), int16]) {
  %178 = cast(%var_3787, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %179 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %182 = logical_and(%180, %181) /* ty=Tensor[(3, 9, 12), bool] */;
  %183 = @func_2352() /* ty=Tensor[(105), int16] */;
  (%182, %183)
}

def @func_4451() -> Tensor[(12, 3, 5), float64] {
  %184 = fn () -> Tensor[(12, 3, 5), float64] {
    @func_3492() /* ty=Tensor[(12, 3, 5), float64] */
  };
  %184() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_6779() -> Tensor[(8, 10, 4), float32] {
  @func_6777() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_5050() -> (Tensor[(11, 11, 6), int64], Tensor[(8, 10, 4), float32]) {
  @func_5048() /* ty=(Tensor[(11, 11, 6), int64], Tensor[(8, 10, 4), float32]) */
}

def @func_4576() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
  %192 = fn () -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
    %185 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
    %186 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
    %187 = cast(%186, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
    %188 = cos(%187) /* ty=Tensor[(1, 8, 9), float64] */;
    %189 = cast(%188, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
    %190 = %185.0;
    %191 = asin(%189) /* ty=Tensor[(1, 8, 9), float32] */;
    (%190, %191)
  };
  %192() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32]) */
}

def @func_2083(%var_2081: Tensor[(1, 40), float64]) -> (Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) {
  @func_2080(%var_2081) /* ty=(Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) */
}

def @func_5048() -> (Tensor[(11, 11, 6), int64], Tensor[(8, 10, 4), float32]) {
  %193 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %194 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 11, 6), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %197 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %198 = right_shift(%195, %196) /* ty=Tensor[(11, 11, 6), int64] */;
  %199 = %197.0;
  (%198, %199)
}

def @func_663(%var_662: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) {
  %208 = fn (%var_640: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) {
    %200 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
    %201 = %200.0;
    %202 = cast(%201, dtype="uint32") /* ty=Tensor[(1, 8, 9), uint32] */;
    %203 = cast(%var_640, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
    %204 = cast(%201, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
    %205 = cast(%var_640, dtype="int64") /* ty=Tensor[(10, 8, 9), int64] */;
    %206 = bitwise_xor(%202, %203) /* ty=Tensor[(10, 8, 9), uint32] */;
    %207 = minimum(%204, %205) /* ty=Tensor[(10, 8, 9), int64] */;
    (%206, %207)
  };
  %208(%var_662) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */
}

def @func_511() -> Tensor[(1, 8, 9), float32] {
  %209 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  sinh(%211) /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_4214(%var_4212: Tensor[(4, 13, 13), bool], %var_4213: Tensor[(4, 13, 13), bool]) -> (Tensor[(4, 13, 13), bool],) {
  @func_4210(%var_4212, %var_4213) /* ty=(Tensor[(4, 13, 13), bool],) */
}

def @func_2938() -> (Tensor[(8, 10, 4), float32],) {
  @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_3463() -> (Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) {
  %212 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %214 = cast(meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %215 = reshape(%213, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
  %216 = reshape(%214, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), float32] */;
  %217 = @func_1674(%215, %216) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) */;
  %218 = %217.1;
  %219 = cast(%212, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %220 = cast(%218, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  %221 = divide(%219, %220) /* ty=Tensor[(7, 8, 9), float32] */;
  (meta[relay.Constant][9] /* ty=Tensor[(70), float32] */, meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, %221)
}

def @func_6623(%var_6600: Tensor[(105), int16]) -> (Tensor[(13, 7, 12), float64], Tensor[(1, 8, 9), float32], Tensor[(105), int16]) {
  %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  %223 = cast(%var_6600, dtype="int16") /* ty=Tensor[(105), int16] */;
  %224 = reshape(%223, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %225 = @func_872(%224) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) */;
  %226 = erf(%222) /* ty=Tensor[(13, 7, 12), float64] */;
  %227 = %225.2;
  (%226, %227, %var_6600)
}

def @func_1864() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */
}

def @func_3651() -> Tensor[(1, 8, 9), float32] {
  @func_3649() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_5573() -> Tensor[(8, 10, 4), float32] {
  %229 = fn () -> Tensor[(8, 10, 4), float32] {
    %228 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %228.0
  };
  %229() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_1674(%var_1646: Tensor[(14, 5, 1), float32], %var_1647: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  %230 = cast(%var_1646, dtype="float32") /* ty=Tensor[(14, 5, 1), float32] */;
  %231 = cast(%var_1647, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %233 = reshape(%232, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), float32] */;
  %234 = @func_573(%233) /* ty=(Tensor[(7, 8, 9), int32],) */;
  %235 = power(%230, %231) /* ty=Tensor[(14, 5, 7), float32] */;
  %236 = %234.0;
  (%235, %236, meta[relay.Constant][12] /* ty=Tensor[(504), float32] */)
}

def @func_5286() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %237 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %240 = asinh(%239) /* ty=Tensor[(1, 8, 9), float64] */;
  %241 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%240, %241)
}

def @func_2238(%var_2237: int16) -> Tensor[(10, 3, 9), int16] {
  %244 = fn (%var_2209: int16) -> Tensor[(10, 3, 9), int16] {
    %242 = cast(%var_2209, dtype="int16") /* ty=int16 */;
    %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 3, 9), int16] */, dtype="int16") /* ty=Tensor[(10, 3, 9), int16] */;
    right_shift(%242, %243) /* ty=Tensor[(10, 3, 9), int16] */
  };
  %244(%var_2237) /* ty=Tensor[(10, 3, 9), int16] */
}

def @func_5888(%var_5825: Tensor[(3, 8, 12), float64], %var_5826: Tensor[(3, 8, 12), float64], %var_5836: Tensor[(2940), float32]) -> (Tensor[(3, 8, 12), float64], Tensor[(14, 14, 15), int64], Tensor[(2940), float32], Tensor[(12, 8, 9), uint32], Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %245 = cast(%var_5826, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %246 = shape_of(%var_5825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_5825, dtype="float64") /* ty=Tensor[(3, 8, 12), float64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %249 = cast(%var_5836, dtype="float32") /* ty=Tensor[(2940), float32] */;
  %250 = cast(%var_5836, dtype="float32") /* ty=Tensor[(2940), float32] */;
  %251 = reshape(%249, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), float32] */;
  %252 = reshape(%250, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), float32] */;
  %253 = @func_2817(%251, %252) /* ty=(Tensor[(14, 14, 15), float32], Tensor[(14, 14, 15), int64]) */;
  %254 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
  %255 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %256 = @func_5463() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32]) */;
  %257 = divide(%247, %248) /* ty=Tensor[(3, 8, 12), float64] */;
  %258 = %253.1;
  %259 = %254.0;
  %260 = %255.0;
  %261 = %256.1;
  (%257, %258, %var_5836, %259, %260, %261)
}

def @func_5239() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) {
  %272 = fn () -> (Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) {
    %262 = cast(meta[relay.Constant][14] /* ty=Tensor[(65, 4), uint16] */, dtype="uint16") /* ty=Tensor[(65, 4), uint16] */;
    %263 = cast(meta[relay.Constant][14] /* ty=Tensor[(65, 4), uint16] */, dtype="uint16") /* ty=Tensor[(65, 4), uint16] */;
    %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(65, 4), uint16] */, dtype="bool") /* ty=Tensor[(65, 4), bool] */;
    %265 = reshape(%262, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), uint16] */;
    %266 = reshape(%263, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), uint16] */;
    %267 = reshape(%264, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
    %268 = @func_1317(%265, %266, %267) /* ty=(Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) */;
    %269 = @func_4641() /* ty=Tensor[(105), int16] */;
    %270 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
    %271 = %268.2;
    (%269, %270, %271, meta[relay.Constant][14] /* ty=Tensor[(65, 4), uint16] */)
  };
  %272() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */
}

def @func_2174(%var_2164: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), uint16], Tensor[(1, 8, 9), float32]) {
  %273 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %274 = cast(%273, dtype="uint16") /* ty=Tensor[(1, 8, 9), uint16] */;
  %275 = cast(%var_2164, dtype="uint16") /* ty=Tensor[(15, 8, 9), uint16] */;
  %276 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %277 = bitwise_xor(%274, %275) /* ty=Tensor[(15, 8, 9), uint16] */;
  %278 = %276.0;
  (%277, %278)
}

def @func_3305() -> (Tensor[(8, 10, 4), float32],) {
  %279 = @func_1488() /* ty=Tensor[(8, 10, 4), float32] */;
  (%279,)
}

def @func_4176(%var_4175: Tensor[(10, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) {
  %286 = fn (%var_4161: Tensor[(10, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) {
    %280 = @func_3875() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %281 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
    %282 = cast(%281, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
    %283 = cast(%var_4161, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
    %284 = %280.0;
    %285 = divide(%282, %283) /* ty=Tensor[(10, 8, 9), float32] */;
    (%284, %285)
  };
  %286(%var_4175) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) */
}

def @func_4051() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  @func_4049() /* ty=(Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) */
}

def @func_3216() -> (Tensor[(7, 11, 12), float32],) {
  @func_3214() /* ty=(Tensor[(7, 11, 12), float32],) */
}

def @func_1806() -> Tensor[(12, 3, 5), float64] {
  %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 5), float64] */;
  erf(%287) /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_6626(%var_6624: Tensor[(105), int16]) -> (Tensor[(13, 7, 12), float64], Tensor[(1, 8, 9), float32], Tensor[(105), int16]) {
  @func_6623(%var_6624) /* ty=(Tensor[(13, 7, 12), float64], Tensor[(1, 8, 9), float32], Tensor[(105), int16]) */
}

def @func_5737(%var_5677: int16) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 3, 9), int16], int16, Tensor[(105), int16], Tensor[(1, 8, 9), float64], Tensor[(14, 16, 10), bool], Tensor[(2240), float32]) {
  %288 = @func_3305() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %289 = cast(%var_5677, dtype="int16") /* ty=int16 */;
  %290 = reshape(%289, newshape=[]) /* ty=int16 */;
  %291 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
  %292 = @func_2847() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %294 = cast(meta[relay.Constant][16] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %295 = reshape(%293, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), float32] */;
  %296 = reshape(%294, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), float32] */;
  %297 = @func_3981(%295, %296) /* ty=(Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) */;
  %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %299 = %288.0;
  %300 = @func_2236(%290) /* ty=Tensor[(10, 3, 9), int16] */;
  %301 = %291.0;
  %302 = %292.0;
  %303 = %297.1;
  %304 = sin(%298) /* ty=Tensor[(2240), float32] */;
  (%299, %300, %var_5677, %301, %302, %303, %304)
}

def @main() -> (Tensor[(1, 8, 9), float32],) {
  %305 = @func_3649() /* ty=Tensor[(1, 8, 9), float32] */;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %307 = log2(%306) /* ty=Tensor[(1, 8, 9), float32] */;
  (%307,)
}

def @func_5489() -> (Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) {
  @func_5487() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) */
}

def @func_2080(%var_2059: Tensor[(1, 40), float64]) -> (Tensor[(1, 8, 9), float64], Tensor[(?, 40), bool], Tensor[(1, 8, 9), float32]) {
  %308 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %309 = cast(%var_2059, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %310 = cast(%var_2059, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %311 = reshape(%309, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %312 = reshape(%310, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %313 = @func_1246(%311, %312) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %314 = %313.1;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %316 = shape_of(%var_2059, dtype="int32") /* ty=Tensor[(2), int32] */;
  %317 = cast(%var_2059, dtype="bool") /* ty=Tensor[(1, 40), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %319 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %320 = %308.0;
  %321 = less_equal(%317, %318) /* ty=Tensor[(?, 40), bool] */;
  %322 = %319.1;
  (%320, %321, %322)
}

def @func_6152() -> (Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) {
  %330 = fn () -> (Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) {
    %323 = cast(meta[relay.Constant][17] /* ty=Tensor[(360, 2), float64] */, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
    %324 = reshape(%323, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %325 = @func_3095(%324) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
    %326 = @func_5238() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float64], Tensor[(2, 10, 13), bool], Tensor[(65, 4), uint16]) */;
    %327 = @func_4641() /* ty=Tensor[(105), int16] */;
    %328 = %325.4;
    %329 = %326.0;
    (%327, %328, meta[relay.Constant][17] /* ty=Tensor[(360, 2), float64] */, %329)
  };
  %330() /* ty=(Tensor[(105), int16], Tensor[(105), int16], Tensor[(360, 2), float64], Tensor[(105), int16]) */
}

def @func_7209() -> (Tensor[(105), int16], Tensor[(9, 8, 9), bool], Tensor[(648), float32]) {
  %337 = fn () -> (Tensor[(105), int16], Tensor[(9, 8, 9), bool], Tensor[(648), float32]) {
    %331 = @func_6570() /* ty=(Tensor[(105), int16],) */;
    %332 = cast(meta[relay.Constant][18] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %333 = reshape(%332, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
    %334 = @func_4435(%333) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) */;
    %335 = %331.0;
    %336 = %334.2;
    (%335, %336, meta[relay.Constant][18] /* ty=Tensor[(648), float32] */)
  };
  %337() /* ty=(Tensor[(105), int16], Tensor[(9, 8, 9), bool], Tensor[(648), float32]) */
}

def @func_2713() -> (Tensor[(8, 10, 4), float64], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
  %343 = fn () -> (Tensor[(8, 10, 4), float64], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
    %338 = cast(meta[relay.Constant][19] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %339 = reshape(%338, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
    %340 = @func_661(%339) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
    %341 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
    %342 = %340.1;
    (%341, %342, meta[relay.Constant][19] /* ty=Tensor[(720), float64] */)
  };
  %343() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) */
}

def @func_2618() -> Tensor[(8, 10, 4), float64] {
  %344 = fn () -> Tensor[(8, 10, 4), float64] {
    @func_2452() /* ty=Tensor[(8, 10, 4), float64] */
  };
  %344() /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_4921() -> (Tensor[(8, 10, 4), uint16], Tensor[(8, 10, 4), float32]) {
  %361 = fn () -> (Tensor[(8, 10, 4), uint16], Tensor[(8, 10, 4), float32]) {
    %345 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %346 = %345.0;
    %347 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
    %348 = %347.1;
    %349 = cast(%348, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
    %350 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%346, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %353 = less(%351, %352) /* ty=Tensor[(8, 10, 4), bool] */;
    %354 = cast(%348, dtype="uint16") /* ty=Tensor[(8, 10, 4), uint16] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%353, dtype="uint16") /* ty=Tensor[(8, 10, 4), uint16] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %358 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %359 = right_shift(%356, %357) /* ty=Tensor[(8, 10, 4), uint16] */;
    %360 = %358.0;
    (%359, %360)
  };
  %361() /* ty=(Tensor[(8, 10, 4), uint16], Tensor[(8, 10, 4), float32]) */
}

def @func_6268(%var_6266: Tensor[(6, 5, 3), float32], %var_6267: Tensor[(6, 5, 3), float32]) -> (Tensor[(6, 5, 3), float32],) {
  %369 = fn (%var_6237: Tensor[(6, 5, 3), float32], %var_6238: Tensor[(6, 5, 3), float32]) -> (Tensor[(6, 5, 3), float32],) {
    %362 = cast(%var_6238, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
    %363 = shape_of(%var_6237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%var_6237, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %366 = mod(%364, %365) /* ty=Tensor[(6, 5, 3), float32] */;
    %367 = cast(%366, dtype="float32") /* ty=Tensor[(6, 5, 3), float32] */;
    %368 = log10(%367) /* ty=Tensor[(6, 5, 3), float32] */;
    (%368,)
  };
  %369(%var_6266, %var_6267) /* ty=(Tensor[(6, 5, 3), float32],) */
}

def @func_3746() -> (Tensor[(12, 8, 9), uint32],) {
  %375 = fn () -> (Tensor[(12, 8, 9), uint32],) {
    %370 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
    %371 = %370.1;
    %372 = cast(%371, dtype="uint32") /* ty=Tensor[(1, 8, 9), uint32] */;
    %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 8, 9), float32] */, dtype="uint32") /* ty=Tensor[(12, 8, 9), uint32] */;
    %374 = left_shift(%372, %373) /* ty=Tensor[(12, 8, 9), uint32] */;
    (%374,)
  };
  %375() /* ty=(Tensor[(12, 8, 9), uint32],) */
}

def @func_1159() -> Tensor[(1, 8, 9), float32] {
  @func_1157() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_2454() -> Tensor[(8, 10, 4), float64] {
  @func_2452() /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_6717() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) {
  @func_6715() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64], Tensor[(8, 10, 4), int64]) */
}

def @func_5959() -> Tensor[(8, 10, 4), float32] {
  %377 = fn () -> Tensor[(8, 10, 4), float32] {
    %376 = @func_3763() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) */;
    %376.0
  };
  %377() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_1808() -> Tensor[(12, 3, 5), float64] {
  @func_1806() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_3649() -> Tensor[(1, 8, 9), float32] {
  %378 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %378.1
}

def @func_911(%var_898: Tensor[(12, 8, 9), float32]) -> Tensor[(12, 8, 9), bool] {
  %379 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="bool") /* ty=Tensor[(1, 8, 9), bool] */;
  %382 = cast(%var_898, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  greater_equal(%381, %382) /* ty=Tensor[(12, 8, 9), bool] */
}

def @func_5165(%var_5164: Tensor[(14, 16, 4), int8]) -> (Tensor[(14, 16, 4), int8],) {
  %388 = fn (%var_5159: Tensor[(14, 16, 4), int8]) -> (Tensor[(14, 16, 4), int8],) {
    %383 = cast(%var_5159, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
    %384 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %387 = logical_xor(%385, %386) /* ty=Tensor[(14, 16, 4), int8] */;
    (%387,)
  };
  %388(%var_5164) /* ty=(Tensor[(14, 16, 4), int8],) */
}

def @func_2133() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %389 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %390 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %391 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %392 = %389.0;
  %393 = %390.0;
  %394 = %391.0;
  (%392, %393, %394)
}

def @func_6232(%var_6230: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, 1, 3), float64],) {
  @func_6229(%var_6230) /* ty=(Tensor[(14, 1, 3), float64],) */
}

def @func_2513(%var_2460: Tensor[(9, 11, 4), int32]) -> (Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) {
  %395 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 11, 4), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %396 = shape_of(%var_2460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%var_2460, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %399 = minimum(%397, %398) /* ty=Tensor[(9, 11, 4), int32] */;
  %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 11, 4), int32] */, dtype="uint64") /* ty=Tensor[(9, 11, 4), uint64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="uint64") /* ty=Tensor[(9, 11, 4), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %404 = left_shift(%402, %403) /* ty=Tensor[(9, 11, 4), uint64] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(9, 11, 4), float64] */;
  %406 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %407 = asinh(%405) /* ty=Tensor[(9, 11, 4), float64] */;
  %408 = %406.0;
  (%407, %408)
}

def @func_3172() -> (Tensor[(8, 10, 4), float64],) {
  %409 = @func_2452() /* ty=Tensor[(8, 10, 4), float64] */;
  (%409,)
}

def @func_6299() -> Tensor[(7, 8, 9), float32] {
  %411 = fn () -> Tensor[(7, 8, 9), float32] {
    %410 = @func_3463() /* ty=(Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) */;
    %410.2
  };
  %411() /* ty=Tensor[(7, 8, 9), float32] */
}

def @func_6416() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64]) {
  @func_6414() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64]) */
}

def @func_3234() -> Tensor[(1, 8, 9), float32] {
  %412 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %412.0
}

def @func_497() -> (Tensor[(1, 8, 9), float64],) {
  %415 = fn () -> (Tensor[(1, 8, 9), float64],) {
    %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
    %414 = atanh(%413) /* ty=Tensor[(1, 8, 9), float64] */;
    (%414,)
  };
  %415() /* ty=(Tensor[(1, 8, 9), float64],) */
}

def @func_3826() -> Tensor[(12, 8, 9), uint32] {
  %417 = fn () -> Tensor[(12, 8, 9), uint32] {
    %416 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
    %416.0
  };
  %417() /* ty=Tensor[(12, 8, 9), uint32] */
}

def @func_6475() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  @func_6473() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */
}

def @func_874(%var_873: Tensor[(105), int16]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) {
  %452 = fn (%var_830: Tensor[(105), int16]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) {
    %418 = cast(meta[relay.Constant][24] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %419 = reshape(%418, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
    %420 = @func_661(%419) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
    %421 = %420.0;
    %422 = cast(%421, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
    %423 = log10(%422) /* ty=Tensor[(10, 8, 9), float32] */;
    %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(720), float64] */, dtype="bool") /* ty=Tensor[(720), bool] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %428 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %429 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
    %430 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
    %431 = reshape(%429, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
    %432 = reshape(%430, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
    %433 = @func_30(%431, %432) /* ty=Tensor[(3, 7, 5), int16] */;
    %434 = cast(%433, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
    %435 = cast(%var_830, dtype="int16") /* ty=Tensor[(105), int16] */;
    %436 = reshape(%434, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
    %437 = reshape(%435, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
    %438 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %439 = %438.0;
    %440 = cast(%423, dtype="float32") /* ty=Tensor[(10, 8, 9), float32] */;
    %441 = cast(%439, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
    %442 = mod(%440, %441) /* ty=Tensor[(10, 8, 9), float32] */;
    %443 = cast(%423, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %447 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
    %448 = equal(%426, %427) /* ty=Tensor[(10, 8, 9), bool] */;
    %449 = %428.0;
    %450 = @func_30(%436, %437) /* ty=Tensor[(3, 7, 5), int16] */;
    %451 = logical_and(%445, %446) /* ty=Tensor[(10, 8, 9), bool] */;
    (%447, %448, %449, %433, %var_830, %450, %451)
  };
  %452(%var_873) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) */
}

def @func_5288() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  @func_5286() /* ty=(Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) */
}

def @func_7127() -> (Tensor[(1, 8, 9), float32],) {
  %453 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %454 = %453.0;
  (%454,)
}

def @func_1521(%var_1520: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %461 = fn (%var_1513: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
    %455 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %456 = cast(%var_1513, dtype="float64") /* ty=Tensor[(720), float64] */;
    %457 = reshape(%456, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
    %458 = @func_661(%457) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
    %459 = %455.0;
    %460 = %458.0;
    (%459, %460, %var_1513)
  };
  %461(%var_1520) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */
}

def @func_1862() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %462 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %463 = %462.0;
  %464 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%463, %464)
}

def @func_6091() -> (Tensor[(720), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  @func_6089() /* ty=(Tensor[(720), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */
}

def @func_6229(%var_6216: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, 1, 3), float64],) {
  %465 = cast(%var_6216, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %466 = asin(%465) /* ty=Tensor[(14, 1, 3), float64] */;
  (%466,)
}

def @func_1423(%var_1421: Tensor[(40), float64], %var_1422: Tensor[(8, 10, 4), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) {
  %480 = fn (%var_1390: Tensor[(40), float64], %var_1406: Tensor[(8, 10, 4), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) {
    %467 = cast(%var_1390, dtype="float64") /* ty=Tensor[(40), float64] */;
    %468 = cast(%var_1390, dtype="float64") /* ty=Tensor[(40), float64] */;
    %469 = reshape(%467, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %470 = reshape(%468, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %471 = @func_1246(%469, %470) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %472 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %473 = %472.0;
    %474 = cast(%var_1406, dtype="uint32") /* ty=Tensor[(8, 10, 4), uint32] */;
    %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(%473, dtype="uint32") /* ty=Tensor[(8, 10, 4), uint32] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %478 = %471.1;
    %479 = logical_xor(%476, %477) /* ty=Tensor[(8, 10, 4), uint32] */;
    (%478, %var_1390, %479)
  };
  %480(%var_1421, %var_1422) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) */
}

def @func_6848(%var_6811: Tensor[(396), int32]) -> (Tensor[(1, 8, 9), float32], Tensor[(396), int32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), float32], Tensor[(60, 12), float32], Tensor[(1, 8, 9), float32]) {
  %481 = @func_2376() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %482 = cast(%var_6811, dtype="int32") /* ty=Tensor[(396), int32] */;
  %483 = reshape(%482, newshape=[9, 11, 4]) /* ty=Tensor[(9, 11, 4), int32] */;
  %484 = @func_2513(%483) /* ty=(Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %487 = shape_of(%var_6811, dtype="int32") /* ty=Tensor[(1), int32] */;
  %488 = cast(%var_6811, dtype="int32") /* ty=Tensor[(396), int32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?), int32] */;
  %490 = @func_738() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %491 = %490.0;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %493 = cast(meta[relay.Constant][25] /* ty=Tensor[(60, 12), float32] */, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %494 = reshape(%493, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
  %495 = @func_4174(%494) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), float32]) */;
  %496 = cast(%491, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %497 = %481.0;
  %498 = right_shift(%488, %489) /* ty=Tensor[(396), int32] */;
  %499 = acos(%492) /* ty=Tensor[(1, 8, 9), float32] */;
  %500 = %495.1;
  %501 = sin(%496) /* ty=Tensor[(1, 8, 9), float32] */;
  (%497, %498, %499, %500, meta[relay.Constant][25] /* ty=Tensor[(60, 12), float32] */, %501)
}

def @func_3765() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) {
  @func_3763() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) */
}

def @func_7189() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  @func_7187() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */
}

def @func_6985(%var_6983: Tensor[(12, 60), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(176), uint64], Tensor[(10, 8, 9), bool], Tensor[(12, 60), float64]) {
  @func_6982(%var_6983) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(176), uint64], Tensor[(10, 8, 9), bool], Tensor[(12, 60), float64]) */
}

def @func_5798(%var_5759: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), float64], Tensor[(10, 8, 9), uint32]) {
  %502 = @func_4049() /* ty=(Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) */;
  %503 = %502.1;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %505 = cast(%var_5759, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %506 = multiply(%504, %505) /* ty=Tensor[(10, 8, 9), float64] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %508 = reshape(%507, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %509 = @func_2897(%508) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %510 = %509.1;
  (%506, %510)
}

def @func_2848() -> (Tensor[(1, 8, 9), float64],) {
  %513 = fn () -> (Tensor[(1, 8, 9), float64],) {
    %511 = @func_496() /* ty=(Tensor[(1, 8, 9), float64],) */;
    %512 = %511.0;
    (%512,)
  };
  %513() /* ty=(Tensor[(1, 8, 9), float64],) */
}

def @func_7020(%var_7018: Tensor[(40, 1), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(40, 1), float64]) {
  @func_7017(%var_7018) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(40, 1), float64]) */
}

def @func_1142() -> (Tensor[(8, 10, 4), float32],) {
  @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_4642() -> Tensor[(105), int16] {
  %514 = fn () -> Tensor[(105), int16] {
    @func_2352() /* ty=Tensor[(105), int16] */
  };
  %514() /* ty=Tensor[(105), int16] */
}

def @func_7170(%var_7169: Tensor[(2, 16, 3), float64]) -> Tensor[(2, 16, 3), uint8] {
  %526 = fn (%var_7148: Tensor[(2, 16, 3), float64]) -> Tensor[(2, 16, 3), uint8] {
    %515 = cast(%var_7148, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %516 = asinh(%515) /* ty=Tensor[(2, 16, 3), float64] */;
    %517 = cast(%516, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %518 = shape_of(%var_7148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%var_7148, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %521 = add(%519, %520) /* ty=Tensor[(2, 16, 3), uint8] */;
    %522 = cast(%521, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %523 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%516, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%524, %525) /* ty=Tensor[(2, 16, 3), uint8] */
  };
  %526(%var_7169) /* ty=Tensor[(2, 16, 3), uint8] */
}

def @func_5393() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  @func_5391() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */
}

def @func_1321(%var_1318: Tensor[(2, 10, 13), uint16], %var_1319: Tensor[(2, 10, 13), uint16], %var_1320: Tensor[(2, 10, 13), bool]) -> (Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) {
  %547 = fn (%var_1268: Tensor[(2, 10, 13), uint16], %var_1269: Tensor[(2, 10, 13), uint16], %var_1274: Tensor[(2, 10, 13), bool]) -> (Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) {
    %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %528 = reshape(%527, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
    %529 = @func_911(%528) /* ty=Tensor[(12, 8, 9), bool] */;
    %530 = cast(%529, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
    %531 = cast(%var_1269, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
    %532 = shape_of(%var_1268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%var_1268, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = not_equal(%533, %534) /* ty=Tensor[(2, 10, 13), bool] */;
    %536 = cast(%var_1274, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
    %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(%535, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %540 = right_shift(%538, %539) /* ty=Tensor[(2, 10, 13), uint16] */;
    %541 = cast(%540, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
    %542 = shape_of(%var_1268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_1268, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %545 = exp(%530) /* ty=Tensor[(12, 8, 9), float64] */;
    %546 = greater_equal(%543, %544) /* ty=Tensor[(2, 10, 13), bool] */;
    (meta[relay.Constant][26] /* ty=Tensor[(864), float32] */, %545, %546)
  };
  %547(%var_1318, %var_1319, %var_1320) /* ty=(Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(2, 10, 13), bool]) */
}

def @func_513() -> Tensor[(1, 8, 9), float32] {
  @func_511() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_3307() -> (Tensor[(8, 10, 4), float32],) {
  @func_3305() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_3095(%var_3080: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  %548 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %549 = cast(%var_3080, dtype="float64") /* ty=Tensor[(720), float64] */;
  %550 = reshape(%549, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %551 = @func_1519(%550) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
  %552 = cast(meta[relay.Constant][27] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %553 = cast(meta[relay.Constant][27] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %554 = reshape(%552, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %555 = reshape(%553, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %556 = %548.0;
  %557 = %551.2;
  %558 = @func_30(%554, %555) /* ty=Tensor[(3, 7, 5), int16] */;
  (%556, %557, %var_3080, %558, meta[relay.Constant][27] /* ty=Tensor[(105), int16] */)
}

def @func_4049() -> (Tensor[(1, 8, 9), float64], Tensor[(1, 8, 9), float32]) {
  %559 = @func_2847() /* ty=(Tensor[(1, 8, 9), float64],) */;
  %560 = %559.0;
  %561 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
  (%560, %561)
}

def @func_1678(%var_1676: Tensor[(14, 5, 1), float32], %var_1677: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  @func_1674(%var_1676, %var_1677) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) */
}

def @func_3465() -> (Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) {
  @func_3463() /* ty=(Tensor[(70), float32], Tensor[(490), float32], Tensor[(7, 8, 9), float32]) */
}

def @func_1577() -> (Tensor[(8, 10, 4), float32],) {
  %564 = fn () -> (Tensor[(8, 10, 4), float32],) {
    %562 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %563 = %562.0;
    (%563,)
  };
  %564() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_914(%var_912: Tensor[(12, 8, 9), float32]) -> Tensor[(12, 8, 9), bool] {
  @func_911(%var_912) /* ty=Tensor[(12, 8, 9), bool] */
}

def @func_3151() -> (Tensor[(8, 10, 4), float32],) {
  @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_3876() -> (Tensor[(8, 10, 4), float32],) {
  %567 = fn () -> (Tensor[(8, 10, 4), float32],) {
    %565 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %566 = %565.0;
    (%566,)
  };
  %567() /* ty=(Tensor[(8, 10, 4), float32],) */
}

def @func_3981(%var_3948: Tensor[(14, 16, 10), float32], %var_3964: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) {
  %568 = cast(%var_3948, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %569 = cast(%var_3964, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %570 = shape_of(%var_3948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_3948, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = cast(meta[relay.Constant][28] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %574 = reshape(%573, newshape=[]) /* ty=int16 */;
  %575 = log(%568) /* ty=Tensor[(14, 16, 10), float32] */;
  %576 = less(%571, %572) /* ty=Tensor[(14, 16, 10), bool] */;
  %577 = @func_2236(%574) /* ty=Tensor[(10, 3, 9), int16] */;
  (%575, %576, %577, meta[relay.Constant][28] /* ty=int16 */)
}

def @func_4679() -> (Tensor[(105), int16],) {
  @func_4677() /* ty=(Tensor[(105), int16],) */
}

def @func_3492() -> Tensor[(12, 3, 5), float64] {
  @func_1806() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_6777() -> Tensor[(8, 10, 4), float32] {
  %578 = @func_5487() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(8, 10, 4), float32]) */;
  %578.1
}

def @func_4677() -> (Tensor[(105), int16],) {
  %579 = @func_4468() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */;
  %580 = %579.0;
  (%580,)
}

def @func_2452() -> Tensor[(8, 10, 4), float64] {
  %581 = @func_1488() /* ty=Tensor[(8, 10, 4), float32] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
  asin(%582) /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_2264() -> Tensor[(8, 10, 4), float32] {
  %583 = fn () -> Tensor[(8, 10, 4), float32] {
    @func_1488() /* ty=Tensor[(8, 10, 4), float32] */
  };
  %583() /* ty=Tensor[(8, 10, 4), float32] */
}

def @func_4210(%var_4205: Tensor[(4, 13, 13), bool], %var_4206: Tensor[(4, 13, 13), bool]) -> (Tensor[(4, 13, 13), bool],) {
  %584 = cast(%var_4206, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %585 = shape_of(%var_4205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_4205, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = logical_and(%586, %587) /* ty=Tensor[(4, 13, 13), bool] */;
  (%588,)
}

def @func_575(%var_574: Tensor[(7, 8, 9), float32]) -> (Tensor[(7, 8, 9), int32],) {
  %593 = fn (%var_564: Tensor[(7, 8, 9), float32]) -> (Tensor[(7, 8, 9), int32],) {
    %589 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
    %590 = cast(%589, dtype="int32") /* ty=Tensor[(1, 8, 9), int32] */;
    %591 = cast(%var_564, dtype="int32") /* ty=Tensor[(7, 8, 9), int32] */;
    %592 = right_shift(%590, %591) /* ty=Tensor[(7, 8, 9), int32] */;
    (%592,)
  };
  %593(%var_574) /* ty=(Tensor[(7, 8, 9), int32],) */
}

def @func_6414() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), int64]) {
  %594 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %595 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %596 = %594.0;
  %597 = %595.1;
  (%596, %597)
}

def @func_7324() -> (Tensor[(16, 7, 12), float32],) {
  %600 = fn () -> (Tensor[(16, 7, 12), float32],) {
    %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %599 = log(%598) /* ty=Tensor[(16, 7, 12), float32] */;
    (%599,)
  };
  %600() /* ty=(Tensor[(16, 7, 12), float32],) */
}

def @func_2972(%var_2971: Tensor[(6, 6, 2), uint64]) -> (Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) {
  %624 = fn (%var_2940: Tensor[(6, 6, 2), uint64]) -> (Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) {
    %601 = cast(%var_2940, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
    %602 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %605 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
    %607 = log2(%606) /* ty=Tensor[(6, 6, 2), float64] */;
    %608 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 6, 2), uint64] */, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
    %609 = shape_of(%var_2940, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_2940, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %612 = subtract(%610, %611) /* ty=Tensor[(6, 6, 2), float32] */;
    %613 = cast(%612, dtype="bool") /* ty=Tensor[(6, 6, 2), bool] */;
    %614 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%607, dtype="bool") /* ty=Tensor[(6, 6, 2), bool] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %618 = reshape(%617, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %619 = @func_2897(%618) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
    %620 = minimum(%603, %604) /* ty=Tensor[(6, 6, 2), uint64] */;
    %621 = %605.0;
    %622 = less_equal(%615, %616) /* ty=Tensor[(6, 6, 2), bool] */;
    %623 = %619.2;
    (%620, %621, %622, %623, meta[relay.Constant][31] /* ty=Tensor[(720), float64] */)
  };
  %624(%var_2971) /* ty=(Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) */
}

def @func_4593() -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float64], Tensor[(720), float64]) {
  %634 = fn () -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float64], Tensor[(720), float64]) {
    %625 = cast(meta[relay.Constant][32] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %626 = reshape(%625, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
    %627 = @func_661(%626) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
    %628 = @func_3234() /* ty=Tensor[(1, 8, 9), float32] */;
    %629 = cast(%628, dtype="uint64") /* ty=Tensor[(1, 8, 9), uint64] */;
    %630 = reshape(%629, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), uint64] */;
    %631 = @func_2970(%630) /* ty=(Tensor[(6, 6, 2), uint64], Tensor[(8, 10, 4), float32], Tensor[(6, 6, 2), bool], Tensor[(720), float64], Tensor[(720), float64]) */;
    %632 = %627.1;
    %633 = %631.3;
    (%628, %632, meta[relay.Constant][32] /* ty=Tensor[(720), float64] */, %633)
  };
  %634() /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float64], Tensor[(720), float64]) */
}

def @func_2354() -> Tensor[(105), int16] {
  @func_2352() /* ty=Tensor[(105), int16] */
}

def @func_3236() -> Tensor[(1, 8, 9), float32] {
  @func_3234() /* ty=Tensor[(1, 8, 9), float32] */
}

def @func_7397() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 7, 5), int16]) {
  %638 = fn () -> (Tensor[(8, 10, 4), float64], Tensor[(3, 7, 5), int16]) {
    %635 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
    %636 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
    %637 = %635.1;
    (%636, %637)
  };
  %638() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 7, 5), int16]) */
}

def @func_5182(%var_5180: Tensor[(15, 12, 14), float32], %var_5181: Tensor[(15, 12, 14), float32]) -> Tensor[(15, 12, 14), bool] {
  %643 = fn (%var_5170: Tensor[(15, 12, 14), float32], %var_5171: Tensor[(15, 12, 14), float32]) -> Tensor[(15, 12, 14), bool] {
    %639 = cast(%var_5171, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
    %640 = shape_of(%var_5170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%var_5170, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%641, %642) /* ty=Tensor[(15, 12, 14), bool] */
  };
  %643(%var_5180, %var_5181) /* ty=Tensor[(15, 12, 14), bool] */
}

def @func_2377() -> (Tensor[(1, 8, 9), float32],) {
  %646 = fn () -> (Tensor[(1, 8, 9), float32],) {
    %644 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %645 = %644.0;
    (%645,)
  };
  %646() /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_1549() -> (Tensor[(1, 8, 9), float32],) {
  %647 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  (%647,)
}

def @func_739() -> (Tensor[(1, 8, 9), float32],) {
  %649 = fn () -> (Tensor[(1, 8, 9), float32],) {
    %648 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
    (%648,)
  };
  %649() /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_3529() -> (Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) {
  %650 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %651 = %650.0;
  %652 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
  (%651, %652)
}

def @func_5464() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
  %656 = fn () -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32]) {
    %653 = @func_4677() /* ty=(Tensor[(105), int16],) */;
    %654 = %653.0;
    %655 = @func_511() /* ty=Tensor[(1, 8, 9), float32] */;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32]) */
}

def @func_2936() -> (Tensor[(8, 10, 4), float32],) {
  %657 = @func_1902() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %658 = %657.0;
  (%658,)
}

def @func_5930() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64]) {
  @func_5928() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64]) */
}

def @func_3174() -> (Tensor[(8, 10, 4), float64],) {
  @func_3172() /* ty=(Tensor[(8, 10, 4), float64],) */
}

def @func_1375(%var_1373: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) {
  @func_1372(%var_1373) /* ty=(Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) */
}

def @func_4437(%var_4436: Tensor[(9, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) {
  %673 = fn (%var_4399: Tensor[(9, 8, 9), float32]) -> (Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) {
    %659 = @func_3745() /* ty=(Tensor[(12, 8, 9), uint32],) */;
    %660 = @func_2376() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %661 = %660.0;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
    %663 = cast(%var_4399, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
    %664 = floor_mod(%662, %663) /* ty=Tensor[(9, 8, 9), float64] */;
    %665 = cast(%664, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %666 = shape_of(%var_4399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%var_4399, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %669 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
    %670 = %659.0;
    %671 = not_equal(%667, %668) /* ty=Tensor[(9, 8, 9), bool] */;
    %672 = @func_2617() /* ty=Tensor[(8, 10, 4), float64] */;
    (%669, %670, %671, %672)
  };
  %673(%var_4436) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(12, 8, 9), uint32], Tensor[(9, 8, 9), bool], Tensor[(8, 10, 4), float64]) */
}

def @func_6851(%var_6849: Tensor[(396), int32]) -> (Tensor[(1, 8, 9), float32], Tensor[(396), int32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), float32], Tensor[(60, 12), float32], Tensor[(1, 8, 9), float32]) {
  @func_6848(%var_6849) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(396), int32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), float32], Tensor[(60, 12), float32], Tensor[(1, 8, 9), float32]) */
}

def @func_1794(%var_1793: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
  %698 = fn (%var_1785: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) {
    %674 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %675 = %674.0;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
    %677 = log10(%676) /* ty=Tensor[(8, 10, 4), float32] */;
    %678 = cast(%675, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
    %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(%677, dtype="bool") /* ty=Tensor[(8, 10, 4), bool] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %682 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
    %683 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
    %684 = reshape(%682, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %685 = reshape(%683, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %686 = @func_1246(%684, %685) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %687 = %686.1;
    %688 = cast(%687, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %689 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 20), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %690 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 20), float64] */, dtype="bool") /* ty=Tensor[(2, 20), bool] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %692 = cast(%var_1785, dtype="float64") /* ty=Tensor[(720), float64] */;
    %693 = reshape(%692, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
    %694 = @func_661(%693) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
    %695 = not_equal(%680, %681) /* ty=Tensor[(8, 10, 4), bool] */;
    %696 = greater(%690, %691) /* ty=Tensor[(2, 20), bool] */;
    %697 = %694.1;
    (%695, %696, %697, %var_1785)
  };
  %698(%var_1793) /* ty=(Tensor[(8, 10, 4), bool], Tensor[(2, 20), bool], Tensor[(10, 8, 9), int64], Tensor[(720), float64]) */
}

def @func_5391() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %699 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %700 = @func_3337() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %701 = %700.0;
  %702 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %706 = %699.0;
  %707 = power(%704, %705) /* ty=Tensor[(8, 10, 4), float32] */;
  (%706, %707)
}

def @func_2900(%var_2898: Tensor[(720), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  @func_2897(%var_2898) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */
}

def @func_2135() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  @func_2133() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) */
}

def @func_2177(%var_2175: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), uint16], Tensor[(1, 8, 9), float32]) {
  @func_2174(%var_2175) /* ty=(Tensor[(15, 8, 9), uint16], Tensor[(1, 8, 9), float32]) */
}

def @func_3214() -> (Tensor[(7, 11, 12), float32],) {
  %708 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %709 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %712 = bitwise_xor(%710, %711) /* ty=Tensor[(7, 11, 12), uint16] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %714 = sqrt(%713) /* ty=Tensor[(7, 11, 12), float32] */;
  (%714,)
}

def @func_1185() -> (Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  %715 = @func_1140() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %716 = cast(meta[relay.Constant][37] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %717 = cast(meta[relay.Constant][37] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %718 = reshape(%716, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %719 = reshape(%717, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), int16] */;
  %720 = %715.0;
  %721 = @func_30(%718, %719) /* ty=Tensor[(3, 7, 5), int16] */;
  (%720, %721, meta[relay.Constant][37] /* ty=Tensor[(105), int16] */)
}

def @func_4469() -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32]) {
  %725 = fn () -> (Tensor[(105), int16], Tensor[(8, 10, 4), float32]) {
    %722 = @func_2936() /* ty=(Tensor[(8, 10, 4), float32],) */;
    %723 = @func_2352() /* ty=Tensor[(105), int16] */;
    %724 = %722.0;
    (%723, %724)
  };
  %725() /* ty=(Tensor[(105), int16], Tensor[(8, 10, 4), float32]) */
}

def @func_1637() -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) {
  %737 = fn () -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) {
    %726 = @func_1185() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */;
    %727 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
    %728 = %727.0;
    %729 = cast(%728, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
    %730 = cast(meta[relay.Constant][38] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %731 = reshape(%730, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float32] */;
    %732 = @func_1372(%731) /* ty=(Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) */;
    %733 = %726.2;
    %734 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
    %735 = acosh(%729) /* ty=Tensor[(1, 8, 9), float32] */;
    %736 = %732.0;
    (%733, %734, %735, %736, meta[relay.Constant][38] /* ty=Tensor[(720), float32] */)
  };
  %737() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */
}

def @func_2046(%var_2026: Tensor[(5, 8, 9), float64], %var_2034: Tensor[(504), float32]) -> (Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float64], Tensor[(3, 7, 5), int16], Tensor[(1, 8, 9), float32], Tensor[(5, 8, 9), int64], Tensor[(7, 8, 9), int32], Tensor[(504), float32]) {
  %738 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %739 = @func_1862() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(1, 8, 9), float32]) */;
  %740 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %742 = %738.0;
  %743 = cast(%742, dtype="int16") /* ty=Tensor[(105), int16] */;
  %744 = reshape(%743, newshape=[105]) /* ty=Tensor[(105), int16] */;
  %745 = @func_872(%744) /* ty=(Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), bool], Tensor[(1, 8, 9), float32], Tensor[(3, 7, 5), int16], Tensor[(105), int16], Tensor[(3, 7, 5), int16], Tensor[(10, 8, 9), bool]) */;
  %746 = @func_1549() /* ty=(Tensor[(1, 8, 9), float32],) */;
  %747 = cast(%740, dtype="float64") /* ty=Tensor[(1, 8, 9), float64] */;
  %748 = rsqrt(%747) /* ty=Tensor[(1, 8, 9), float64] */;
  %749 = cast(%748, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
  %750 = cast(%var_2026, dtype="int64") /* ty=Tensor[(5, 8, 9), int64] */;
  %751 = cast(%var_2034, dtype="float32") /* ty=Tensor[(504), float32] */;
  %752 = reshape(%751, newshape=[7, 8, 9]) /* ty=Tensor[(7, 8, 9), float32] */;
  %753 = @func_573(%752) /* ty=(Tensor[(7, 8, 9), int32],) */;
  %754 = %739.1;
  %755 = atan(%741) /* ty=Tensor[(1, 8, 9), float64] */;
  %756 = %745.5;
  %757 = %746.0;
  %758 = bitwise_xor(%749, %750) /* ty=Tensor[(5, 8, 9), int64] */;
  %759 = %753.0;
  (%742, %754, %755, %756, %757, %758, %759, %var_2034)
}

def @func_4119() -> (Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) {
  %760 = cast(meta[relay.Constant][39] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %761 = @func_1958() /* ty=Tensor[(8, 10, 4), float32] */;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %763 = reshape(%760, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %764 = reshape(%762, newshape=[8, 10, 4]) /* ty=Tensor[(8, 10, 4), float32] */;
  %765 = @func_1420(%763, %764) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(40), float64], Tensor[(8, 10, 4), uint32]) */;
  %766 = %765.1;
  (%761, %766, meta[relay.Constant][39] /* ty=Tensor[(40), float64] */)
}

def @func_1372(%var_1343: Tensor[(10, 8, 9), float32]) -> (Tensor[(10, 8, 9), int64], Tensor[(?, 8, 9), float32]) {
  %767 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %768 = cast(%767, dtype="int64") /* ty=Tensor[(1, 8, 9), int64] */;
  %769 = cast(%var_1343, dtype="int64") /* ty=Tensor[(10, 8, 9), int64] */;
  %770 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %772 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%767, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %775 = logical_xor(%768, %769) /* ty=Tensor[(10, 8, 9), int64] */;
  %776 = divide(%773, %774) /* ty=Tensor[(?, 8, 9), float32] */;
  (%775, %776)
}

def @func_6473() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %777 = @func_4802() /* ty=(Tensor[(10, 8, 9), int64], Tensor[(8, 10, 4), int64]) */;
  %778 = %777.1;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(8, 10, 4), float32] */;
  %780 = @func_5572() /* ty=Tensor[(8, 10, 4), float32] */;
  %781 = exp(%779) /* ty=Tensor[(8, 10, 4), float32] */;
  (%780, %781)
}

def @func_3811(%var_3809: Tensor[(3, 9, 12), bool]) -> (Tensor[(3, 9, 12), bool], Tensor[(105), int16]) {
  @func_3808(%var_3809) /* ty=(Tensor[(3, 9, 12), bool], Tensor[(105), int16]) */
}

def @func_2897(%var_2895: Tensor[(720), float64]) -> (Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %782 = cast(%var_2895, dtype="float64") /* ty=Tensor[(720), float64] */;
  %783 = reshape(%782, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %784 = @func_661(%783) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(10, 8, 9), int64]) */;
  %785 = @func_1157() /* ty=Tensor[(1, 8, 9), float32] */;
  %786 = %784.0;
  (%785, %786, %var_2895)
}

def @func_5928() -> (Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float64]) {
  %787 = @func_3149() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %788 = @func_3172() /* ty=(Tensor[(8, 10, 4), float64],) */;
  %789 = %787.0;
  %790 = %788.0;
  (%789, %790)
}

def @func_2516(%var_2514: Tensor[(9, 11, 4), int32]) -> (Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) {
  @func_2513(%var_2514) /* ty=(Tensor[(9, 11, 4), float64], Tensor[(8, 10, 4), float32]) */
}

def @func_3098(%var_3096: Tensor[(720), float64]) -> (Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) {
  @func_3095(%var_3096) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(3, 7, 5), int16], Tensor[(105), int16]) */
}

def @func_3985(%var_3983: Tensor[(14, 16, 10), float32], %var_3984: Tensor[(14, 16, 10), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) {
  @func_3981(%var_3983, %var_3984) /* ty=(Tensor[(14, 16, 10), float32], Tensor[(14, 16, 10), bool], Tensor[(10, 3, 9), int16], int16) */
}

def @func_7129() -> (Tensor[(1, 8, 9), float32],) {
  @func_7127() /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_4278(%var_4276: Tensor[(1, 16, 11), float32], %var_4277: Tensor[(720), float64]) -> (Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
  %804 = fn (%var_4256: Tensor[(1, 16, 11), float32], %var_4273: Tensor[(720), float64]) -> (Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) {
    %791 = cast(%var_4256, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
    %792 = asin(%791) /* ty=Tensor[(1, 16, 11), float32] */;
    %793 = cast(%792, dtype="bool") /* ty=Tensor[(1, 16, 11), bool] */;
    %794 = shape_of(%var_4256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %795 = cast(%var_4256, dtype="bool") /* ty=Tensor[(1, 16, 11), bool] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %797 = cast(%792, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
    %798 = cast(%var_4273, dtype="float64") /* ty=Tensor[(720), float64] */;
    %799 = reshape(%798, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %800 = @func_1519(%799) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */;
    %801 = greater(%795, %796) /* ty=Tensor[(?, 16, 11), bool] */;
    %802 = sin(%797) /* ty=Tensor[(1, 16, 11), float64] */;
    %803 = %800.1;
    (%801, %802, %803, %var_4273)
  };
  %804(%var_4276, %var_4277) /* ty=(Tensor[(?, 16, 11), bool], Tensor[(1, 16, 11), float64], Tensor[(10, 8, 9), uint32], Tensor[(720), float64]) */
}

def @func_34(%var_32: Tensor[(3, 7, 5), int16], %var_33: Tensor[(3, 7, 5), int16]) -> Tensor[(3, 7, 5), int16] {
  @func_30(%var_32, %var_33) /* ty=Tensor[(3, 7, 5), int16] */
}

def @func_5740(%var_5738: int16) -> (Tensor[(8, 10, 4), float32], Tensor[(10, 3, 9), int16], int16, Tensor[(105), int16], Tensor[(1, 8, 9), float64], Tensor[(14, 16, 10), bool], Tensor[(2240), float32]) {
  @func_5737(%var_5738) /* ty=(Tensor[(8, 10, 4), float32], Tensor[(10, 3, 9), int16], int16, Tensor[(105), int16], Tensor[(1, 8, 9), float64], Tensor[(14, 16, 10), bool], Tensor[(2240), float32]) */
}

def @func_3494() -> Tensor[(12, 3, 5), float64] {
  @func_3492() /* ty=Tensor[(12, 3, 5), float64] */
}

def @func_30(%var_19: Tensor[(3, 7, 5), int16], %var_20: Tensor[(3, 7, 5), int16]) -> Tensor[(3, 7, 5), int16] {
  %805 = cast(%var_20, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %806 = shape_of(%var_19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_19, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%807, %808) /* ty=Tensor[(3, 7, 5), int16] */
}

def @func_1249(%var_1247: Tensor[(5, 2, 4), float64], %var_1248: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %816 = fn (%var_1224: Tensor[(5, 2, 4), float64], %var_1225: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
    %809 = cast(%var_1225, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %810 = shape_of(%var_1224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_1224, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %813 = cast(%var_1225, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %814 = multiply(%811, %812) /* ty=Tensor[(5, 2, 4), float64] */;
    %815 = cosh(%813) /* ty=Tensor[(5, 2, 4), float64] */;
    (%814, %815)
  };
  %816(%var_1247, %var_1248) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_6089() -> (Tensor[(720), float32], Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), float32]) {
  %817 = @func_1636() /* ty=(Tensor[(105), int16], Tensor[(1, 8, 9), float32], Tensor[(1, 8, 9), float32], Tensor[(10, 8, 9), int64], Tensor[(720), float32]) */;
  %818 = @func_4119() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(40), float64], Tensor[(40), float64]) */;
  %819 = @func_1576() /* ty=(Tensor[(8, 10, 4), float32],) */;
  %820 = %817.4;
  %821 = %818.0;
  %822 = %819.0;
  (%820, %821, %822)
}

def @func_6518() -> Tensor[(720), float64] {
  %824 = fn () -> Tensor[(720), float64] {
    %823 = @func_3763() /* ty=(Tensor[(8, 10, 4), float32], Tensor[(8, 10, 4), bool], Tensor[(720), float64]) */;
    %823.2
  };
  %824() /* ty=Tensor[(720), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen157/build/output.py", line 2396, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:53:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

