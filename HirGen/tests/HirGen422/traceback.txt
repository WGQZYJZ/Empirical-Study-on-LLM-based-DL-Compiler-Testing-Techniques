==========mod==========
#[version = "0.0.5"]
def @func_1469(%var_1465: Tensor[(9, 15, 7), float64]) -> Tensor[(9, 15, 7), float64] {
  %0 = cast(%var_1465, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  acosh(%0) /* ty=Tensor[(9, 15, 7), float64] */
}

def @func_6440() -> (Tensor[(4, 3, 8), bool],) {
  %1 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %2 = %1.0;
  (%2,)
}

def @func_8289() -> (Tensor[(4, 3, 8), bool],) {
  %3 = @func_6250() /* ty=Tensor[(4, 3, 8), bool] */;
  (%3,)
}

def @func_6801() -> (Tensor[(4, 3, 8), bool],) {
  %4 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  (%4,)
}

def @func_1454(%var_1425: Tensor[(14, 14, 15), uint32], %var_1426: Tensor[(14, 14, 15), uint32]) -> (Tensor[(14, 14, 15), uint32],) {
  %5 = cast(%var_1426, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
  %6 = shape_of(%var_1425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_1425, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %9 = right_shift(%7, %8) /* ty=Tensor[(14, 14, 15), uint32] */;
  (%9,)
}

def @func_8469(%var_8451: float32, %var_8452: Tensor[(11, 12, 9), float32], %var_8466: Tensor[(154, 10), float64]) -> (Tensor[(11, 12, 9), float64], Tensor[(10, 14, 11), float64], Tensor[(154, 10), float64]) {
  %10 = cast(%var_8451, dtype="float32") /* ty=float32 */;
  %11 = cast(%var_8452, dtype="float32") /* ty=Tensor[(11, 12, 9), float32] */;
  %12 = maximum(%10, %11) /* ty=Tensor[(11, 12, 9), float32] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(11, 12, 9), float64] */;
  %14 = cast(%var_8466, dtype="float64") /* ty=Tensor[(154, 10), float64] */;
  %15 = reshape(%14, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float64] */;
  %16 = @func_3177(%15) /* ty=(Tensor[(10, 14, 11), float64],) */;
  %17 = sin(%13) /* ty=Tensor[(11, 12, 9), float64] */;
  %18 = %16.0;
  (%17, %18, %var_8466)
}

def @func_6906(%var_6875: Tensor[(56, 14), float64], %var_6896: int64, %var_6899: Tensor[(234, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(56, 14), float64], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(2940), uint32], Tensor[(234, 1), int8]) {
  %19 = cast(%var_6875, dtype="float64") /* ty=Tensor[(56, 14), float64] */;
  %20 = reshape(%19, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float64] */;
  %21 = @func_4655(%20) /* ty=(Tensor[(7, 7, 16), float64],) */;
  %22 = cast(%var_6896, dtype="int64") /* ty=int64 */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %25 = cast(%var_6899, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
  %26 = reshape(%22, newshape=[]) /* ty=int64 */;
  %27 = reshape(%23, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %28 = reshape(%24, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %29 = reshape(%25, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %30 = @func_2291(%26, %27, %28, %29) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %31 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %32 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %33 = %21.0;
  %34 = %30.5;
  (%31, %32, %33, %var_6875, %34, %var_6896, meta[relay.Constant][0] /* ty=Tensor[(1440), bool] */, meta[relay.Constant][1] /* ty=Tensor[(2940), uint32] */, %var_6899)
}

def @func_6569(%var_6564: Tensor[(15, 15, 7), float32]) -> (Tensor[(15, 15, 7), float32],) {
  %35 = cast(%var_6564, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %36 = sin(%35) /* ty=Tensor[(15, 15, 7), float32] */;
  (%36,)
}

def @func_7517() -> (Tensor[(4, 3, 8), bool],) {
  %37 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
  (%37,)
}

def @func_6401() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %38 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  %39 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
  (%38, %39)
}

def @func_8714(%var_8708: Tensor[(24, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(546), float64]) {
  %40 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %41 = cast(%var_8708, dtype="int8") /* ty=Tensor[(24, 1), int8] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %44 = reshape(%41, newshape=[24]) /* ty=Tensor[(24), int8] */;
  %45 = reshape(%42, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %46 = reshape(%43, newshape=[1, 546]) /* ty=Tensor[(1, 546), float64] */;
  %47 = @func_5678(%44, %45, %46) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) */;
  %48 = %40.0;
  %49 = %47.4;
  (%48, %49, %var_8708, meta[relay.Constant][2] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][3] /* ty=Tensor[(546), float64] */)
}

def @func_6521() -> Tensor[(4, 3, 8), bool] {
  %50 = @func_6440() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %50.0
}

def @func_4018(%var_4008: Tensor[(810), int16], %var_4012: Tensor[(3840), uint32]) -> (Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 14, 3), float64] */;
  %52 = cast(%var_4008, dtype="int16") /* ty=Tensor[(810), int16] */;
  %53 = reshape(%52, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
  %54 = cast(%var_4012, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %55 = reshape(%54, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %56 = @func_2456(%55) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %57 = log(%51) /* ty=Tensor[(7, 14, 3), float64] */;
  %58 = @func_2616(%53) /* ty=Tensor[(9, 6, 15), int16] */;
  %59 = %56.0;
  (%57, %58, %var_4008, %59, %var_4012)
}

def @func_4048(%var_4043: Tensor[(13, 7, 6), float64]) -> Tensor[(13, 7, 6), float64] {
  %60 = cast(%var_4043, dtype="float64") /* ty=Tensor[(13, 7, 6), float64] */;
  atanh(%60) /* ty=Tensor[(13, 7, 6), float64] */
}

def @func_5627(%var_5547: Tensor[(6, 10, 13), float32], %var_5578: Tensor[(3840), uint32], %var_5581: Tensor[(378, 1), uint64], %var_5582: Tensor[(20, 72), int8], %var_5618: Tensor[(1800), float64]) -> (Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) {
  %61 = cast(%var_5547, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %62 = sigmoid(%61) /* ty=Tensor[(6, 10, 13), float32] */;
  %63 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(6, 10, 13), int32] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="int32") /* ty=Tensor[(6, 10, 13), int32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
  %68 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%62, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = greater_equal(%69, %70) /* ty=Tensor[(6, 10, 13), bool] */;
  %72 = cast(%71, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
  %73 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%62, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = cast(%var_5578, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %77 = reshape(%76, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %78 = @func_2456(%77) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %79 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
  %80 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
  %81 = cast(%var_5582, dtype="int8") /* ty=Tensor[(20, 72), int8] */;
  %82 = reshape(%79, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %83 = reshape(%80, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %84 = reshape(%81, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %85 = @func_1884(%82, %83, %84) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
  %86 = cast(%62, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %87 = acos(%86) /* ty=Tensor[(6, 10, 13), float32] */;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(6, 10, 13), float64] */;
  %89 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
  %90 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
  %91 = cast(%var_5582, dtype="int8") /* ty=Tensor[(20, 72), int8] */;
  %92 = reshape(%89, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %93 = reshape(%90, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %94 = reshape(%91, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %95 = @func_1884(%92, %93, %94) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %97 = reshape(%96, newshape=[80]) /* ty=Tensor[(80), uint64] */;
  %98 = @func_3713(%97) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) */;
  %99 = cast(%var_5618, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %100 = reshape(%99, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %101 = @func_170(%100) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %102 = maximum(%65, %66) /* ty=Tensor[(6, 10, 13), int32] */;
  %103 = greater(%74, %75) /* ty=Tensor[(6, 10, 13), bool] */;
  %104 = %78.0;
  %105 = %85.4;
  %106 = acosh(%88) /* ty=Tensor[(6, 10, 13), float64] */;
  %107 = %95.5;
  %108 = %98.2;
  %109 = %101.0;
  (%102, %103, %104, %var_5578, %105, %var_5581, %var_5582, %106, %107, %108, meta[relay.Constant][6] /* ty=Tensor[(80), uint64] */, %109, %var_5618)
}

def @func_4374(%var_4308: bool, %var_4309: Tensor[(15, 12, 10), bool], %var_4315: Tensor[(1, 1440), bool], %var_4352: Tensor[(8, 1440), bool], %var_4360: Tensor[(14, 224), int32]) -> (Tensor[(15, 12, 10), bool], Tensor[(1800), float64], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 1440), float32], Tensor[(8, 1440), bool], Tensor[(15, 196), uint32], Tensor[(14, 224), int32], Tensor[(1, 330), float32], Tensor[(350, 2), float64]) {
  %110 = cast(%var_4308, dtype="bool") /* ty=bool */;
  %111 = cast(%var_4309, dtype="bool") /* ty=Tensor[(15, 12, 10), bool] */;
  %112 = cast(%var_4308, dtype="int64") /* ty=int64 */;
  %113 = cast(%var_4315, dtype="bool") /* ty=Tensor[(1, 1440), bool] */;
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %116 = reshape(%112, newshape=[]) /* ty=int64 */;
  %117 = reshape(%113, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %118 = reshape(%114, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %119 = reshape(%115, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %120 = @func_2291(%116, %117, %118, %119) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %121 = cast(%var_4315, dtype="float32") /* ty=Tensor[(1, 1440), float32] */;
  %122 = cast(%var_4308, dtype="float32") /* ty=float32 */;
  %123 = cast(%var_4315, dtype="bool") /* ty=Tensor[(1, 1440), bool] */;
  %124 = cast(%var_4352, dtype="bool") /* ty=Tensor[(8, 1440), bool] */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(350, 2), float64] */, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
  %126 = cast(%var_4360, dtype="int32") /* ty=Tensor[(14, 224), int32] */;
  %127 = cast(meta[relay.Constant][8] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %128 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 330), float32] */, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %130 = reshape(%125, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %131 = reshape(%126, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %132 = reshape(%127, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %133 = reshape(%128, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %134 = reshape(%129, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %135 = @func_2960(%130, %131, %132, %133, %134) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(350, 2), float64] */, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
  %137 = logical_or(%110, %111) /* ty=Tensor[(15, 12, 10), bool] */;
  %138 = %120.4;
  %139 = floor_mod(%121, %122) /* ty=Tensor[(1, 1440), float32] */;
  %140 = less(%123, %124) /* ty=Tensor[(8, 1440), bool] */;
  %141 = %135.6;
  %142 = cosh(%136) /* ty=Tensor[(350, 2), float64] */;
  (%137, %138, meta[relay.Constant][7] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][8] /* ty=Tensor[(234), int8] */, %139, %140, %141, %var_4360, meta[relay.Constant][10] /* ty=Tensor[(1, 330), float32] */, %142)
}

def @func_6456() -> Tensor[(4, 3, 8), bool] {
  @func_6250() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8437(%var_8390: Tensor[(378), uint64], %var_8416: int64, %var_8431: Tensor[(234), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(378), uint64], Tensor[(15, 16, 6), uint64], int64, Tensor[(1440), bool], Tensor[(2940, 1), uint32], Tensor[(234), float32]) {
  %143 = cast(%var_8390, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %144 = reshape(%143, newshape=[378]) /* ty=Tensor[(378), uint64] */;
  %145 = @func_6851(%144) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) */;
  %146 = cast(%var_8416, dtype="int64") /* ty=int64 */;
  %147 = cast(meta[relay.Constant][11] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %148 = cast(meta[relay.Constant][12] /* ty=Tensor[(2940, 1), uint32] */, dtype="uint32") /* ty=Tensor[(2940, 1), uint32] */;
  %149 = cast(meta[relay.Constant][13] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %150 = reshape(%146, newshape=[]) /* ty=int64 */;
  %151 = reshape(%147, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %152 = reshape(%148, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %153 = reshape(%149, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %154 = @func_2291(%150, %151, %152, %153) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %155 = cast(%var_8431, dtype="float32") /* ty=Tensor[(234), float32] */;
  %156 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(234), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %157 = cast(meta[relay.Constant][13] /* ty=Tensor[(234), int8] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?), float32] */;
  %159 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
  %160 = %145.0;
  %161 = %154.1;
  %162 = floor_divide(%157, %158) /* ty=Tensor[(234), float32] */;
  (%159, %160, %var_8390, %161, %var_8416, meta[relay.Constant][11] /* ty=Tensor[(1440), bool] */, meta[relay.Constant][12] /* ty=Tensor[(2940, 1), uint32] */, %162)
}

def @func_5806() -> (Tensor[(4, 3, 8), bool],) {
  %163 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  (%163,)
}

def @func_5995(%var_5963: Tensor[(810), int16], %var_5964: Tensor[(3840), uint32], %var_5981: Tensor[(396, 1), float32]) -> (Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) {
  %164 = cast(%var_5963, dtype="int16") /* ty=Tensor[(810), int16] */;
  %165 = cast(%var_5964, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %166 = reshape(%164, newshape=[810]) /* ty=Tensor[(810), int16] */;
  %167 = reshape(%165, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %168 = @func_4018(%166, %167) /* ty=(Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */;
  %169 = %168.3;
  %170 = cast(%169, dtype="int16") /* ty=Tensor[(15, 16, 16), int16] */;
  %171 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%var_5964, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), int16] */;
  %174 = bitwise_or(%172, %173) /* ty=Tensor[(3840), int16] */;
  %175 = cast(%174, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %176 = reshape(%175, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %177 = @func_5856(%176) /* ty=(Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */;
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %179 = cast(%var_5981, dtype="float32") /* ty=Tensor[(396, 1), float32] */;
  %180 = reshape(%178, newshape=[4, 6, 7]) /* ty=Tensor[(4, 6, 7), float32] */;
  %181 = reshape(%179, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %182 = @func_4903(%180, %181) /* ty=(Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) */;
  %183 = cast(%var_5964, dtype="bool") /* ty=Tensor[(3840), bool] */;
  %184 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%169, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  %188 = %177.0;
  %189 = %182.2;
  %190 = logical_and(%185, %186) /* ty=Tensor[(15, 16, 16), bool] */;
  (%187, %var_5963, %174, %188, %189, meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, %var_5981, %190)
}

def @func_2517(%var_2496: Tensor[(11, 6, 6), float32], %var_2497: Tensor[(11, 6, 6), float32], %var_2515: Tensor[(1440), int8]) -> (Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) {
  %191 = cast(%var_2497, dtype="float32") /* ty=Tensor[(11, 6, 6), float32] */;
  %192 = shape_of(%var_2496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_2496, dtype="float32") /* ty=Tensor[(11, 6, 6), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %195 = cast(%var_2497, dtype="uint64") /* ty=Tensor[(11, 6, 6), uint64] */;
  %196 = shape_of(%var_2496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_2496, dtype="uint64") /* ty=Tensor[(11, 6, 6), uint64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 378), uint64] */, dtype="uint64") /* ty=Tensor[(1, 378), uint64] */;
  %200 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 378), uint64] */, dtype="uint64") /* ty=Tensor[(1, 378), uint64] */;
  %201 = cast(%var_2515, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %202 = reshape(%199, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %203 = reshape(%200, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %204 = reshape(%201, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %205 = @func_1884(%202, %203, %204) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
  %206 = floor_mod(%193, %194) /* ty=Tensor[(11, 6, 6), float32] */;
  %207 = multiply(%197, %198) /* ty=Tensor[(11, 6, 6), uint64] */;
  %208 = %205.4;
  (%206, %207, %208, meta[relay.Constant][15] /* ty=Tensor[(1, 378), uint64] */, %var_2515)
}

def @func_5541() -> Tensor[(4, 3, 8), bool] {
  %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %210 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%211, %212) /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_6114(%var_6099: Tensor[(4, 13, 9), bool], %var_6100: Tensor[(4, 13, 9), bool]) -> (Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) {
  %213 = cast(%var_6100, dtype="bool") /* ty=Tensor[(4, 13, 9), bool] */;
  %214 = shape_of(%var_6099, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%var_6099, dtype="bool") /* ty=Tensor[(4, 13, 9), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = cast(%var_6100, dtype="float64") /* ty=Tensor[(4, 13, 9), float64] */;
  %218 = acosh(%217) /* ty=Tensor[(4, 13, 9), float64] */;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
  %220 = logical_or(%215, %216) /* ty=Tensor[(4, 13, 9), bool] */;
  %221 = exp(%219) /* ty=Tensor[(4, 13, 9), float32] */;
  (%220, %221)
}

def @main() -> Tensor[(4, 3, 8), float64] {
  %222 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %223 = %222.0;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  acos(%224) /* ty=Tensor[(4, 3, 8), float64] */
}

def @func_1604(%var_1545: Tensor[(14, 16, 14), int32], %var_1546: Tensor[(14, 16, 14), int32], %var_1556: Tensor[(1, 234), int8], %var_1563: Tensor[(330), float32]) -> (Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) {
  %225 = cast(%var_1546, dtype="int32") /* ty=Tensor[(14, 16, 14), int32] */;
  %226 = shape_of(%var_1545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_1545, dtype="int32") /* ty=Tensor[(14, 16, 14), int32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %229 = cast(%var_1556, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %230 = cast(%var_1556, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %231 = reshape(%229, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %232 = reshape(%230, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %233 = @func_624(%231, %232) /* ty=Tensor[(9, 2, 13), int8] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %235 = shape_of(%var_1556, dtype="int32") /* ty=Tensor[(2), int32] */;
  %236 = cast(%var_1556, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %238 = cast(%var_1563, dtype="float32") /* ty=Tensor[(330), float32] */;
  %239 = reshape(%238, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), float32] */;
  %240 = @func_986(%239) /* ty=(Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) */;
  %241 = cast(%var_1546, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %242 = bitwise_xor(%227, %228) /* ty=Tensor[(14, 16, 14), int32] */;
  %243 = divide(%236, %237) /* ty=Tensor[(?, 234), float64] */;
  %244 = %240.1;
  %245 = atanh(%241) /* ty=Tensor[(14, 16, 14), float32] */;
  (%242, %243, %244, %var_1563, %245)
}

def @func_5151(%var_5120: Tensor[(13, 11, 13), float32], %var_5130: Tensor[(945), float64], %var_5135: Tensor[(3136), int32], %var_5136: Tensor[(234, 1), int8], %var_5137: Tensor[(330), float32], %var_5138: Tensor[(2940), uint32]) -> (Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) {
  %246 = cast(%var_5120, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %248 = cast(%var_5130, dtype="float64") /* ty=Tensor[(945), float64] */;
  %249 = reshape(%247, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
  %250 = reshape(%248, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %251 = @func_3379(%249, %250) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
  %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %253 = cast(%var_5135, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %254 = cast(%var_5136, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
  %255 = cast(%var_5137, dtype="float32") /* ty=Tensor[(330), float32] */;
  %256 = cast(%var_5138, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %257 = reshape(%252, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %258 = reshape(%253, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %259 = reshape(%254, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %260 = reshape(%255, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %261 = reshape(%256, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %262 = @func_2960(%257, %258, %259, %260, %261) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %263 = asin(%246) /* ty=Tensor[(13, 11, 13), float32] */;
  %264 = %251.0;
  %265 = %262.3;
  (%263, %264, meta[relay.Constant][18] /* ty=Tensor[(80), uint64] */, %var_5130, %265, meta[relay.Constant][19] /* ty=Tensor[(700), float64] */, %var_5135, %var_5136, %var_5137, %var_5138)
}

def @func_7295(%var_7249: Tensor[(10, 10, 11), float32], %var_7273: Tensor[(810), int16], %var_7274: Tensor[(3840), uint32], %var_7280: Tensor[(780), float32], %var_7281: Tensor[(378), uint64]) -> (Tensor[(10, 10, 11), int32], Tensor[(396), float32], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(396), float32], Tensor[(15, 15, 8), float32], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64]) {
  %266 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
  %267 = %266.1;
  %268 = cast(%267, dtype="int32") /* ty=Tensor[(10, 10, ?), int32] */;
  %269 = cast(%var_7249, dtype="int32") /* ty=Tensor[(10, 10, 11), int32] */;
  %270 = cast(%var_7273, dtype="int16") /* ty=Tensor[(810), int16] */;
  %271 = cast(%var_7274, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %272 = cast(meta[relay.Constant][20] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %273 = reshape(%270, newshape=[810]) /* ty=Tensor[(810), int16] */;
  %274 = reshape(%271, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %275 = reshape(%272, newshape=[396, 1]) /* ty=Tensor[(396, 1), float32] */;
  %276 = @func_5995(%273, %274, %275) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) */;
  %277 = cast(%var_7280, dtype="float32") /* ty=Tensor[(780), float32] */;
  %278 = cast(%var_7274, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %279 = cast(%var_7281, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %280 = cast(meta[relay.Constant][21] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %281 = cast(meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %282 = reshape(%277, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
  %283 = reshape(%278, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %284 = reshape(%279, newshape=[378, 1]) /* ty=Tensor[(378, 1), uint64] */;
  %285 = reshape(%280, newshape=[20, 72]) /* ty=Tensor[(20, 72), int8] */;
  %286 = reshape(%281, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %287 = @func_5627(%282, %283, %284, %285, %286) /* ty=(Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) */;
  %288 = add(%268, %269) /* ty=Tensor[(10, 10, 11), int32] */;
  %289 = %276.4;
  %290 = %287.11;
  (%288, %289, %var_7273, %var_7274, meta[relay.Constant][20] /* ty=Tensor[(396), float32] */, %290, %var_7280, %var_7281, meta[relay.Constant][21] /* ty=Tensor[(1440), int8] */, meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */)
}

def @func_6258() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8074() -> (Tensor[(10, 10, ?), float32], Tensor[(9, 15, 7), float64], Tensor[(1, 945), uint16]) {
  %291 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 945), float64] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
  %292 = reshape(%291, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %293 = @func_6988() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) */;
  %294 = %293.2;
  %295 = cast(%294, dtype="uint16") /* ty=uint16 */;
  %296 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 945), float64] */, dtype="uint16") /* ty=Tensor[(1, 945), uint16] */;
  %297 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
  %298 = @func_1469(%292) /* ty=Tensor[(9, 15, 7), float64] */;
  %299 = right_shift(%295, %296) /* ty=Tensor[(1, 945), uint16] */;
  (%297, %298, %299)
}

def @func_2456(%var_2452: Tensor[(15, 16, 16), uint32]) -> (Tensor[(15, 16, 16), uint32],) {
  %300 = cast(%var_2452, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
  %301 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(15, 16, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 16, 16), uint32] */, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %304 = right_shift(%302, %303) /* ty=Tensor[(15, 16, 16), uint32] */;
  (%304,)
}

def @func_3177(%var_3173: Tensor[(10, 14, 11), float64]) -> (Tensor[(10, 14, 11), float64],) {
  %305 = cast(%var_3173, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %306 = sigmoid(%305) /* ty=Tensor[(10, 14, 11), float64] */;
  (%306,)
}

def @func_8217() -> (Tensor[(4, 3, 8), uint16],) {
  %307 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
  %308 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 8), bool] */, dtype="uint16") /* ty=Tensor[(4, 3, 8), uint16] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="uint16") /* ty=Tensor[(4, 3, 8), uint16] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %312 = logical_xor(%310, %311) /* ty=Tensor[(4, 3, 8), uint16] */;
  (%312,)
}

def @func_5694() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_5746() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8352(%var_8347: Tensor[(14, 5, 13), uint8]) -> Tensor[(14, 5, 13), uint8] {
  %313 = cast(meta[relay.Constant][26] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %314 = cast(%var_8347, dtype="uint8") /* ty=Tensor[(14, 5, 13), uint8] */;
  subtract(%313, %314) /* ty=Tensor[(14, 5, 13), uint8] */
}

def @func_8693(%var_8666: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), bool],) {
  %315 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  %316 = cast(%var_8666, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = not_equal(%318, %319) /* ty=Tensor[(4, 3, 8), bool] */;
  (%320,)
}

def @func_6480() -> Tensor[(10, 10, ?), float32] {
  %321 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
  %321.1
}

def @func_6988() -> (Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) {
  %322 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %323 = cast(meta[relay.Constant][28] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %324 = reshape(%322, newshape=[]) /* ty=int8 */;
  %325 = reshape(%323, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %326 = @func_484(%324, %325) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %327 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %328 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
  %329 = %326.0;
  %330 = %327.0;
  (%328, %329, meta[relay.Constant][27] /* ty=int8 */, meta[relay.Constant][28] /* ty=Tensor[(1440), int8] */, %330)
}

def @func_8233() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %331 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %332 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %333 = %331.0;
  %334 = %332.0;
  (%333, %334)
}

def @func_5304(%var_5281: Tensor[(7, 4, 12), float32], %var_5286: Tensor[(810), int16]) -> (Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) {
  %335 = cast(%var_5281, dtype="float32") /* ty=Tensor[(7, 4, 12), float32] */;
  %336 = cast(%var_5286, dtype="int16") /* ty=Tensor[(810), int16] */;
  %337 = reshape(%336, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
  %338 = atan(%335) /* ty=Tensor[(7, 4, 12), float32] */;
  %339 = @func_2616(%337) /* ty=Tensor[(9, 6, 15), int16] */;
  (%338, %339, %var_5286)
}

def @func_8121() -> (Tensor[(4, 3, 8), bool],) {
  %340 = @func_7517() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %341 = %340.0;
  (%341,)
}

def @func_7107() -> (Tensor[(4, 3, 8), bool],) {
  %342 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  (%342,)
}

def @func_986(%var_974: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) {
  %343 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 10), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %344 = shape_of(%var_974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_974, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = cast(%var_974, dtype="float64") /* ty=Tensor[(3, 11, 10), float64] */;
  %348 = less_equal(%345, %346) /* ty=Tensor[(3, 11, 10), bool] */;
  %349 = sin(%347) /* ty=Tensor[(3, 11, 10), float64] */;
  (%348, %349)
}

def @func_5448(%var_5377: Tensor[(12, 10, 9), float32], %var_5381: int8, %var_5384: Tensor[(117, 2), int8], %var_5443: Tensor[(10, 2940), float64]) -> (int8, Tensor[(24), int8], Tensor[(546), float64], Tensor[(117, 2), bool], Tensor[(12, 10, 9), float64], Tensor[(14, 14, 15), uint32], Tensor[(?, 2940), bool], Tensor[(10, 2940), uint16]) {
  %350 = cast(%var_5381, dtype="int8") /* ty=int8 */;
  %351 = cast(meta[relay.Constant][30] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
  %352 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 2940), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %353 = cast(%var_5384, dtype="int8") /* ty=Tensor[(117, 2), int8] */;
  %354 = cast(meta[relay.Constant][31] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %355 = reshape(%350, newshape=[]) /* ty=int8 */;
  %356 = reshape(%351, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %357 = reshape(%352, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %358 = reshape(%353, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %359 = reshape(%354, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %360 = @func_4431(%355, %356, %357, %358, %359) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %361 = %360.4;
  %362 = cast(%361, dtype="bool") /* ty=Tensor[(234), bool] */;
  %363 = shape_of(%var_5384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %364 = cast(%var_5384, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %366 = cast(%var_5377, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %367 = sinh(%366) /* ty=Tensor[(12, 10, 9), float32] */;
  %368 = cast(%var_5377, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %372 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 2940), uint32] */, dtype="float32") /* ty=Tensor[(1, 2940), float32] */;
  %373 = log2(%372) /* ty=Tensor[(1, 2940), float32] */;
  %374 = cast(%373, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %375 = cast(%373, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %376 = reshape(%374, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %377 = reshape(%375, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %378 = @func_1454(%376, %377) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %379 = cast(%373, dtype="float64") /* ty=Tensor[(1, 2940), float64] */;
  %380 = sinh(%379) /* ty=Tensor[(1, 2940), float64] */;
  %381 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 2940), uint32] */, dtype="bool") /* ty=Tensor[(1, 2940), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(1, 2940), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %385 = cast(%373, dtype="float64") /* ty=Tensor[(1, 2940), float64] */;
  %386 = sigmoid(%385) /* ty=Tensor[(1, 2940), float64] */;
  %387 = cast(%386, dtype="uint16") /* ty=Tensor[(1, 2940), uint16] */;
  %388 = cast(%var_5443, dtype="uint16") /* ty=Tensor[(10, 2940), uint16] */;
  %389 = equal(%364, %365) /* ty=Tensor[(117, 2), bool] */;
  %390 = subtract(%370, %371) /* ty=Tensor[(12, 10, 9), float64] */;
  %391 = %378.0;
  %392 = less_equal(%383, %384) /* ty=Tensor[(?, 2940), bool] */;
  %393 = bitwise_and(%387, %388) /* ty=Tensor[(10, 2940), uint16] */;
  (%var_5381, meta[relay.Constant][30] /* ty=Tensor[(24), int8] */, meta[relay.Constant][31] /* ty=Tensor[(546), float64] */, %389, %390, %391, %392, %393)
}

def @func_5950(%var_5914: Tensor[(90, 20), float64], %var_5930: int8, %var_5934: Tensor[(546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(15, 15, 8), float32], Tensor[(90, 20), float64], Tensor[(13, 7, 6), float64], int8, Tensor[(2, 12), int8], Tensor[(2940), uint32], Tensor[(39, 6), int8], Tensor[(546), float64]) {
  %394 = cast(%var_5914, dtype="float64") /* ty=Tensor[(90, 20), float64] */;
  %395 = reshape(%394, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %396 = @func_170(%395) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %397 = cast(%var_5930, dtype="int8") /* ty=int8 */;
  %398 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 12), int8] */, dtype="int8") /* ty=Tensor[(2, 12), int8] */;
  %399 = cast(meta[relay.Constant][34] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %400 = cast(meta[relay.Constant][35] /* ty=Tensor[(39, 6), int8] */, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %401 = cast(%var_5934, dtype="float64") /* ty=Tensor[(546), float64] */;
  %402 = reshape(%397, newshape=[]) /* ty=int8 */;
  %403 = reshape(%398, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %404 = reshape(%399, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %405 = reshape(%400, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %406 = reshape(%401, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %407 = @func_4431(%402, %403, %404, %405, %406) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %408 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %409 = %396.0;
  %410 = %407.5;
  (%408, %409, %var_5914, %410, %var_5930, meta[relay.Constant][33] /* ty=Tensor[(2, 12), int8] */, meta[relay.Constant][34] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][35] /* ty=Tensor[(39, 6), int8] */, %var_5934)
}

def @func_1884(%var_1846: Tensor[(14, 3, 9), uint64], %var_1847: Tensor[(14, 3, 9), uint64], %var_1861: Tensor[(1440), int8]) -> (Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) {
  %411 = cast(%var_1847, dtype="uint64") /* ty=Tensor[(14, 3, 9), uint64] */;
  %412 = shape_of(%var_1846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_1846, dtype="uint64") /* ty=Tensor[(14, 3, 9), uint64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %415 = cast(meta[relay.Constant][36] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %416 = reshape(%415, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %417 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %418 = cast(%var_1861, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %419 = reshape(%417, newshape=[]) /* ty=int8 */;
  %420 = reshape(%418, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %421 = @func_484(%419, %420) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %422 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %423 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 117), float64] */, dtype="float64") /* ty=Tensor[(11, 117), float64] */;
  %424 = reshape(%422, newshape=[]) /* ty=float64 */;
  %425 = reshape(%423, newshape=[11, 13, 9]) /* ty=Tensor[(11, 13, 9), float64] */;
  %426 = add(%413, %414) /* ty=Tensor[(14, 3, 9), uint64] */;
  %427 = @func_1469(%416) /* ty=Tensor[(9, 15, 7), float64] */;
  %428 = %421.0;
  %429 = @func_1161(%424, %425) /* ty=Tensor[(11, 13, 9), float64] */;
  (%426, %427, meta[relay.Constant][36] /* ty=Tensor[(945), float64] */, %428, meta[relay.Constant][37] /* ty=int8 */, %var_1861, %429, meta[relay.Constant][38] /* ty=Tensor[(11, 117), float64] */)
}

def @func_624(%var_618: Tensor[(9, 2, 13), int8], %var_619: Tensor[(9, 2, 13), int8]) -> Tensor[(9, 2, 13), int8] {
  %430 = cast(%var_619, dtype="int8") /* ty=Tensor[(9, 2, 13), int8] */;
  %431 = shape_of(%var_618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_618, dtype="int8") /* ty=Tensor[(9, 2, 13), int8] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%432, %433) /* ty=Tensor[(9, 2, 13), int8] */
}

def @func_7995() -> (Tensor[(10, 10, ?), float32], Tensor[(3, 11, 10), float64], Tensor[(330), float32]) {
  %434 = cast(meta[relay.Constant][39] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %435 = reshape(%434, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), float32] */;
  %436 = @func_986(%435) /* ty=(Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) */;
  %437 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
  %438 = %436.1;
  (%437, %438, meta[relay.Constant][39] /* ty=Tensor[(330), float32] */)
}

def @func_4793(%var_4733: Tensor[(2, 1, 9), uint16], %var_4734: Tensor[(2, 8, 9), uint16], %var_4752: Tensor[(3, 980), uint32]) -> (Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) {
  %439 = cast(%var_4733, dtype="uint16") /* ty=Tensor[(2, 1, 9), uint16] */;
  %440 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(2, 8, 9), uint16] */;
  %441 = cast(meta[relay.Constant][40] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %442 = cast(meta[relay.Constant][41] /* ty=Tensor[(3136), int32] */, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %443 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %444 = cast(meta[relay.Constant][43] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %445 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %446 = reshape(%441, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %447 = reshape(%442, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %448 = reshape(%443, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %449 = reshape(%444, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %450 = reshape(%445, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %451 = @func_2960(%446, %447, %448, %449, %450) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %452 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %453 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %454 = reshape(%452, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %455 = reshape(%453, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %456 = @func_1454(%454, %455) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %457 = bitwise_or(%439, %440) /* ty=Tensor[(2, 8, 9), uint16] */;
  %458 = %451.0;
  %459 = %456.0;
  (%457, %458, meta[relay.Constant][40] /* ty=Tensor[(700), float64] */, meta[relay.Constant][41] /* ty=Tensor[(3136), int32] */, meta[relay.Constant][42] /* ty=Tensor[(234), int8] */, meta[relay.Constant][43] /* ty=Tensor[(330), float32] */, %var_4752, %459)
}

def @func_7383() -> (Tensor[(4, 3, 8), bool],) {
  %460 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
  (%460,)
}

def @func_4596(%var_4567: Tensor[(5, 14, 11), float32], %var_4591: Tensor[(1440), bool]) -> (Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) {
  %461 = cast(%var_4567, dtype="float32") /* ty=Tensor[(5, 14, 11), float32] */;
  %462 = cast(meta[relay.Constant][44] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %463 = cast(meta[relay.Constant][44] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %464 = reshape(%462, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %465 = reshape(%463, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %466 = @func_1454(%464, %465) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %467 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %468 = cast(%var_4591, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %469 = %466.0;
  %470 = cast(%469, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
  %471 = cast(meta[relay.Constant][45] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %472 = reshape(%467, newshape=[]) /* ty=int64 */;
  %473 = reshape(%468, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %474 = reshape(%470, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %475 = reshape(%471, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %476 = @func_2291(%472, %473, %474, %475) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %477 = atanh(%461) /* ty=Tensor[(5, 14, 11), float32] */;
  %478 = %476.2;
  (%477, %469, meta[relay.Constant][44] /* ty=Tensor[(2940), uint32] */, %478, 6 /* ty=int64 */, %var_4591, meta[relay.Constant][45] /* ty=Tensor[(234), int8] */)
}

def @func_2616(%var_2611: Tensor[(9, 6, 15), int16]) -> Tensor[(9, 6, 15), int16] {
  %479 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 1, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 1, 15), int16] */;
  %480 = cast(%var_2611, dtype="int16") /* ty=Tensor[(9, 6, 15), int16] */;
  multiply(%479, %480) /* ty=Tensor[(9, 6, 15), int16] */
}

def @func_6060(%var_6038: Tensor[(3840), uint32], %var_6055: Tensor[(2940), uint32], %var_6056: Tensor[(234), int8]) -> (Tensor[(396), float32], Tensor[(1440), int8], Tensor[(3840), int16], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(5, 2, 16), bool], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(15, 16, 16), uint32]) {
  %481 = cast(meta[relay.Constant][49] /* ty=Tensor[(810), int16] */, dtype="int16") /* ty=Tensor[(810), int16] */;
  %482 = cast(%var_6038, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %483 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %484 = reshape(%481, newshape=[810]) /* ty=Tensor[(810), int16] */;
  %485 = reshape(%482, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %486 = reshape(%483, newshape=[396, 1]) /* ty=Tensor[(396, 1), float32] */;
  %487 = @func_5995(%484, %485, %486) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) */;
  %488 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %489 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %490 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %491 = cast(meta[relay.Constant][48] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %492 = reshape(%489, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %493 = reshape(%490, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %494 = reshape(%491, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %495 = @func_2517(%492, %493, %494) /* ty=(Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) */;
  %496 = %495.2;
  %497 = cast(%488, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %498 = cast(%496, dtype="float32") /* ty=float32 */;
  %499 = power(%497, %498) /* ty=Tensor[(4, 3, 8), float32] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %501 = cast(%496, dtype="int64") /* ty=int64 */;
  %502 = cast(meta[relay.Constant][48] /* ty=Tensor[(1440), int8] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %503 = cast(%var_6055, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %504 = cast(%var_6056, dtype="int8") /* ty=Tensor[(234), int8] */;
  %505 = reshape(%501, newshape=[]) /* ty=int64 */;
  %506 = reshape(%502, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %507 = reshape(%503, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %508 = reshape(%504, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %509 = @func_2291(%505, %506, %507, %508) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %510 = cast(%var_6038, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %511 = reshape(%510, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %512 = @func_2456(%511) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %513 = %487.2;
  %514 = sin(%500) /* ty=Tensor[(4, 3, 8), float32] */;
  %515 = %509.5;
  %516 = %512.0;
  (meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, meta[relay.Constant][48] /* ty=Tensor[(1440), int8] */, %513, meta[relay.Constant][49] /* ty=Tensor[(810), int16] */, %var_6038, %514, %515, %var_6055, %var_6056, %516)
}

def @func_5856(%var_5839: Tensor[(3840), uint32]) -> (Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
  %517 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %519 = cast(%517, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %520 = sinh(%519) /* ty=Tensor[(4, 3, 8), float32] */;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  %522 = cast(%var_5839, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %523 = reshape(%522, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %524 = @func_2456(%523) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %525 = exp(%518) /* ty=Tensor[(4, 3, 8), float32] */;
  %526 = log(%521) /* ty=Tensor[(4, 3, 8), float64] */;
  %527 = %524.0;
  (%525, %526, %527, %var_5839)
}

def @func_6779() -> Tensor[(4, 3, 8), bool] {
  %528 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %528.0
}

def @func_7444(%var_7430: Tensor[(3, 8, 3), float64], %var_7437: Tensor[(1, 18), uint16], %var_7438: Tensor[(144, 1), uint16], %var_7439: Tensor[(2940), uint32]) -> (Tensor[(3, 8, 3), bool], Tensor[(3, 980), uint32], Tensor[(1, 18), uint16], Tensor[(144, 1), uint16], Tensor[(2940), uint32]) {
  %529 = cast(%var_7430, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %530 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(3, 8, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = cast(%var_7437, dtype="uint16") /* ty=Tensor[(1, 18), uint16] */;
  %534 = cast(%var_7438, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
  %535 = cast(%var_7439, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %536 = reshape(%533, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), uint16] */;
  %537 = reshape(%534, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), uint16] */;
  %538 = reshape(%535, newshape=[3, 980]) /* ty=Tensor[(3, 980), uint32] */;
  %539 = @func_4793(%536, %537, %538) /* ty=(Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) */;
  %540 = greater_equal(%531, %532) /* ty=Tensor[(3, 8, 3), bool] */;
  %541 = %539.6;
  (%540, %541, %var_7437, %var_7438, %var_7439)
}

def @func_898(%var_878: Tensor[(3, 13, 14), float32]) -> (Tensor[(15, 15, 8), float32], Tensor[(16, 10), uint8], Tensor[(1800), float64], Tensor[(3, 13, 14), float32], Tensor[(5, 2, 16), bool]) {
  %542 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
  %543 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
  %544 = cast(meta[relay.Constant][52] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %545 = reshape(%542, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %546 = reshape(%543, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %547 = reshape(%544, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %548 = @func_245(%545, %546, %547) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %549 = cast(%var_878, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %550 = sigmoid(%549) /* ty=Tensor[(3, 13, 14), float32] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %552 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
  %553 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
  %554 = cast(meta[relay.Constant][52] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %555 = reshape(%552, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %556 = reshape(%553, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %557 = reshape(%554, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %558 = @func_245(%555, %556, %557) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %559 = %548.1;
  %560 = tan(%551) /* ty=Tensor[(3, 13, 14), float32] */;
  %561 = %558.0;
  (%559, meta[relay.Constant][51] /* ty=Tensor[(16, 10), uint8] */, meta[relay.Constant][52] /* ty=Tensor[(1800), float64] */, %560, %561)
}

def @func_7946() -> (Tensor[(11, 16, 13), float64],) {
  %562 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
  %563 = log(%562) /* ty=Tensor[(11, 16, 13), float32] */;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  %565 = cosh(%564) /* ty=Tensor[(11, 16, 13), float64] */;
  (%565,)
}

def @func_7823(%var_7782: Tensor[(1859), float32], %var_7784: Tensor[(1568, 2), int32]) -> (Tensor[(4, 3, 8), float32], Tensor[(700), float64], Tensor[(1859), float32], Tensor[(1568, 2), int32], Tensor[(234), int8], Tensor[(330, 1), float32], Tensor[(1470, 2), uint32], Tensor[(945), float64]) {
  %566 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %569 = cast(%var_7782, dtype="float32") /* ty=Tensor[(1859), float32] */;
  %570 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %571 = cast(%var_7784, dtype="int32") /* ty=Tensor[(1568, 2), int32] */;
  %572 = cast(meta[relay.Constant][55] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %573 = cast(meta[relay.Constant][56] /* ty=Tensor[(330, 1), float32] */, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %574 = cast(meta[relay.Constant][57] /* ty=Tensor[(1470, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1470, 2), uint32] */;
  %575 = reshape(%569, newshape=[13, 11, 13]) /* ty=Tensor[(13, 11, 13), float32] */;
  %576 = reshape(%570, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %577 = reshape(%571, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %578 = reshape(%572, newshape=[234, 1]) /* ty=Tensor[(234, 1), int8] */;
  %579 = reshape(%573, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %580 = reshape(%574, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %581 = @func_5151(%575, %576, %577, %578, %579, %580) /* ty=(Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) */;
  %582 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %583 = log2(%568) /* ty=Tensor[(4, 3, 8), float32] */;
  %584 = %581.5;
  %585 = asinh(%582) /* ty=Tensor[(945), float64] */;
  (%583, %584, %var_7782, %var_7784, meta[relay.Constant][55] /* ty=Tensor[(234), int8] */, meta[relay.Constant][56] /* ty=Tensor[(330, 1), float32] */, meta[relay.Constant][57] /* ty=Tensor[(1470, 2), uint32] */, %585)
}

def @func_7060() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %586 = @func_6687() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %587 = %586.0;
  %588 = @func_7025() /* ty=Tensor[(4, 3, 8), bool] */;
  (%587, %588)
}

def @func_6185() -> Tensor[(4, 3, 8), bool] {
  @func_5694() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_170(%var_151: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float32],) {
  %589 = cast(8.50459f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %590 = cast(%var_151, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %591 = divide(%589, %590) /* ty=Tensor[(15, 15, 8), float64] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
  %593 = acosh(%592) /* ty=Tensor[(15, 15, 8), float32] */;
  (%593,)
}

def @func_6687() -> (Tensor[(4, 3, 8), bool],) {
  %594 = @func_6250() /* ty=Tensor[(4, 3, 8), bool] */;
  (%594,)
}

def @func_6794() -> Tensor[(4, 3, 8), bool] {
  @func_5694() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_4431(%var_4409: int8, %var_4410: Tensor[(1, 3, 8), int8], %var_4421: Tensor[(30, 98), uint32], %var_4422: Tensor[(234), int8], %var_4425: Tensor[(91, 6), float64]) -> (Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) {
  %595 = cast(%var_4409, dtype="bool") /* ty=bool */;
  %596 = cast(%var_4410, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %597 = cast(%var_4409, dtype="int64") /* ty=int64 */;
  %598 = cast(meta[relay.Constant][58] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %599 = cast(%var_4421, dtype="uint32") /* ty=Tensor[(30, 98), uint32] */;
  %600 = cast(%var_4422, dtype="int8") /* ty=Tensor[(234), int8] */;
  %601 = reshape(%597, newshape=[]) /* ty=int64 */;
  %602 = reshape(%598, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %603 = reshape(%599, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %604 = reshape(%600, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %605 = @func_2291(%601, %602, %603, %604) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %606 = cast(%var_4425, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %607 = reshape(%606, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %608 = equal(%595, %596) /* ty=Tensor[(1, 3, 8), bool] */;
  %609 = %605.4;
  %610 = @func_4048(%607) /* ty=Tensor[(13, 7, 6), float64] */;
  (%608, %609, meta[relay.Constant][58] /* ty=Tensor[(1440), bool] */, %var_4421, %var_4422, %610, %var_4425)
}

def @func_7320() -> (Tensor[(4, 3, 8), bool],) {
  %611 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %612 = %611.0;
  (%612,)
}

def @func_5678(%var_5673: Tensor[(24), int8], %var_5674: Tensor[(2940), uint32], %var_5676: Tensor[(1, 546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) {
  %613 = cast(meta[relay.Constant][59] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %614 = cast(%var_5673, dtype="int8") /* ty=Tensor[(24), int8] */;
  %615 = cast(%var_5674, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %616 = cast(meta[relay.Constant][60] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %617 = cast(%var_5676, dtype="float64") /* ty=Tensor[(1, 546), float64] */;
  %618 = reshape(%613, newshape=[]) /* ty=int8 */;
  %619 = reshape(%614, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %620 = reshape(%615, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %621 = reshape(%616, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %622 = reshape(%617, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %623 = @func_4431(%618, %619, %620, %621, %622) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %624 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %625 = %623.4;
  (%624, %625, meta[relay.Constant][59] /* ty=int8 */, %var_5673, %var_5674, meta[relay.Constant][60] /* ty=Tensor[(234), int8] */, %var_5676)
}

def @func_7025() -> Tensor[(4, 3, 8), bool] {
  @func_6521() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_2960(%var_2910: Tensor[(14, 5, 10), float64], %var_2926: Tensor[(3136), int32], %var_2927: Tensor[(234), int8], %var_2933: Tensor[(330), float32], %var_2940: Tensor[(15, 196), uint32]) -> (Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) {
  %626 = cast(%var_2910, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %627 = cast(%var_2926, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %628 = cast(%var_2926, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %629 = cast(%var_2927, dtype="int8") /* ty=Tensor[(234), int8] */;
  %630 = cast(meta[relay.Constant][61] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %631 = reshape(%627, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), int32] */;
  %632 = reshape(%628, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), int32] */;
  %633 = reshape(%629, newshape=[1, 234]) /* ty=Tensor[(1, 234), int8] */;
  %634 = reshape(%630, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %635 = @func_1604(%631, %632, %633, %634) /* ty=(Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) */;
  %636 = cast(%var_2933, dtype="int64") /* ty=Tensor[(330), int64] */;
  %637 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(330), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %638 = cast(meta[relay.Constant][61] /* ty=Tensor[(330), float32] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?), int64] */;
  %640 = cast(%var_2940, dtype="uint32") /* ty=Tensor[(15, 196), uint32] */;
  %641 = cast(%var_2940, dtype="uint32") /* ty=Tensor[(15, 196), uint32] */;
  %642 = reshape(%640, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %643 = reshape(%641, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %644 = @func_1454(%642, %643) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %645 = log10(%626) /* ty=Tensor[(14, 5, 10), float64] */;
  %646 = %635.4;
  %647 = logical_xor(%638, %639) /* ty=Tensor[(330), int64] */;
  %648 = %644.0;
  (%645, %646, %var_2926, %var_2927, %647, %648, %var_2940)
}

def @func_3379(%var_3371: Tensor[(5, 8, 2), uint64], %var_3377: Tensor[(945), float64]) -> (Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) {
  %649 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 8, 2), uint64] */, dtype="uint64") /* ty=Tensor[(5, 8, 2), uint64] */;
  %650 = shape_of(%var_3371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_3371, dtype="uint64") /* ty=Tensor[(5, 8, 2), uint64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %653 = cast(%var_3377, dtype="float64") /* ty=Tensor[(945), float64] */;
  %654 = reshape(%653, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %655 = multiply(%651, %652) /* ty=Tensor[(5, 8, 2), uint64] */;
  %656 = @func_1469(%654) /* ty=Tensor[(9, 15, 7), float64] */;
  (%655, %656, %var_3377)
}

def @func_6250() -> Tensor[(4, 3, 8), bool] {
  %657 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %657.0
}

def @func_6851(%var_6807: Tensor[(378), uint64]) -> (Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) {
  %658 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %659 = cast(%var_6807, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %660 = cast(%var_6807, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %661 = cast(meta[relay.Constant][63] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %662 = reshape(%659, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %663 = reshape(%660, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %664 = reshape(%661, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %665 = @func_1884(%662, %663, %664) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
  %666 = cast(%var_6807, dtype="float64") /* ty=Tensor[(378), float64] */;
  %667 = %658.0;
  %668 = %665.5;
  %669 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %670 = atan(%666) /* ty=Tensor[(378), float64] */;
  (%667, %668, meta[relay.Constant][63] /* ty=Tensor[(1440), int8] */, %669, %670)
}

def @func_7194(%var_7122: Tensor[(1, 14, 14), bool], %var_7123: Tensor[(1, 14, 14), bool], %var_7166: Tensor[(945), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(?, 14, 14), int16], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(10, 10, ?), float32], Tensor[(4, 3, 8), float32]) {
  %671 = @func_6401() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
  %672 = cast(%var_7123, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %673 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_7122, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %676 = logical_or(%674, %675) /* ty=Tensor[(?, 14, 14), bool] */;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(?, 14, 14), float32] */;
  %678 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_7122, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %681 = mod(%679, %680) /* ty=Tensor[(?, 14, 14), float32] */;
  %682 = cast(%676, dtype="int16") /* ty=Tensor[(?, 14, 14), int16] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="int16") /* ty=Tensor[(?, 14, 14), int16] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %686 = cast(%var_7166, dtype="float64") /* ty=Tensor[(945), float64] */;
  %687 = reshape(%686, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %688 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %689 = %688.0;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %691 = %671.0;
  %692 = maximum(%684, %685) /* ty=Tensor[(?, 14, 14), int16] */;
  %693 = @func_1469(%687) /* ty=Tensor[(9, 15, 7), float64] */;
  %694 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
  %695 = sigmoid(%690) /* ty=Tensor[(4, 3, 8), float32] */;
  (%691, %692, %693, %var_7166, %694, %695)
}

def @func_6286() -> (Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) {
  %696 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
  %697 = cast(meta[relay.Constant][65] /* ty=Tensor[(10, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
  %698 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
  %699 = asinh(%698) /* ty=Tensor[(10, 10, 1), float64] */;
  %700 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %704 = power(%696, %697) /* ty=Tensor[(10, 10, 9), float64] */;
  %705 = mod(%702, %703) /* ty=Tensor[(10, 10, ?), float32] */;
  (%704, %705)
}

def @func_7906(%var_7873: Tensor[(3, 14, 16), uint8], %var_7874: Tensor[(3, 14, 16), uint8], %var_7879: Tensor[(810), int16], %var_7891: Tensor[(3840), uint32], %var_7904: Tensor[(945), float64]) -> (Tensor[(3, 14, 16), uint8], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(810), uint32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64]) {
  %706 = cast(%var_7874, dtype="uint8") /* ty=Tensor[(3, 14, 16), uint8] */;
  %707 = shape_of(%var_7873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_7873, dtype="uint8") /* ty=Tensor[(3, 14, 16), uint8] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %710 = cast(%var_7891, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %711 = reshape(%710, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %712 = @func_2456(%711) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %713 = cast(%var_7879, dtype="int16") /* ty=Tensor[(810), int16] */;
  %714 = reshape(%713, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
  %715 = @func_2616(%714) /* ty=Tensor[(9, 6, 15), int16] */;
  %716 = cast(%715, dtype="uint32") /* ty=Tensor[(9, 6, 15), uint32] */;
  %717 = shape_of(%var_7879, dtype="int32") /* ty=Tensor[(1), int32] */;
  %718 = cast(%var_7879, dtype="uint32") /* ty=Tensor[(810), uint32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %720 = cast(meta[relay.Constant][66] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %721 = cast(%var_7904, dtype="float64") /* ty=Tensor[(945), float64] */;
  %722 = reshape(%720, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
  %723 = reshape(%721, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %724 = @func_3379(%722, %723) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
  %725 = bitwise_and(%708, %709) /* ty=Tensor[(3, 14, 16), uint8] */;
  %726 = %712.0;
  %727 = left_shift(%718, %719) /* ty=Tensor[(810), uint32] */;
  %728 = %724.0;
  (%725, %726, %var_7891, %727, %728, meta[relay.Constant][66] /* ty=Tensor[(80), uint64] */, %var_7904)
}

def @func_4903(%var_4891: Tensor[(4, 6, 7), float32], %var_4898: Tensor[(396), float32]) -> (Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) {
  %729 = cast(%var_4891, dtype="float32") /* ty=Tensor[(4, 6, 7), float32] */;
  %730 = cast(%var_4898, dtype="float32") /* ty=Tensor[(396), float32] */;
  %731 = cast(%var_4898, dtype="float32") /* ty=Tensor[(396), float32] */;
  %732 = cast(meta[relay.Constant][67] /* ty=Tensor[(60, 24), int8] */, dtype="int8") /* ty=Tensor[(60, 24), int8] */;
  %733 = reshape(%730, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %734 = reshape(%731, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %735 = reshape(%732, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %736 = @func_2517(%733, %734, %735) /* ty=(Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) */;
  %737 = tan(%729) /* ty=Tensor[(4, 6, 7), float32] */;
  %738 = %736.3;
  (%737, %738, %var_4898, meta[relay.Constant][67] /* ty=Tensor[(60, 24), int8] */)
}

def @func_1161(%var_1153: float64, %var_1154: Tensor[(11, 13, 9), float64]) -> Tensor[(11, 13, 9), float64] {
  %739 = cast(%var_1153, dtype="float64") /* ty=float64 */;
  %740 = cast(%var_1154, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  minimum(%739, %740) /* ty=Tensor[(11, 13, 9), float64] */
}

def @func_7099() -> Tensor[(4, 3, 8), int32] {
  %741 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %742 = %741.0;
  %743 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %747 = less(%745, %746) /* ty=Tensor[(4, 3, 8), bool] */;
  %748 = cast(%742, dtype="int32") /* ty=Tensor[(4, 3, 8), int32] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="int32") /* ty=Tensor[(4, 3, 8), int32] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%750, %751) /* ty=Tensor[(4, 3, 8), int32] */
}

def @func_484(%var_472: int8, %var_473: Tensor[(15, 16, 6), int8]) -> (Tensor[(15, 16, 6), bool],) {
  %752 = cast(%var_472, dtype="bool") /* ty=bool */;
  %753 = cast(%var_473, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
  %754 = greater(%752, %753) /* ty=Tensor[(15, 16, 6), bool] */;
  (%754,)
}

def @func_3713(%var_3703: Tensor[(80), uint64]) -> (Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) {
  %755 = cast(meta[relay.Constant][69] /* ty=Tensor[(7, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %756 = cast(%var_3703, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %757 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 945), float64] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
  %758 = reshape(%756, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
  %759 = reshape(%757, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %760 = @func_3379(%758, %759) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
  %761 = log10(%755) /* ty=Tensor[(7, 14, 6), float32] */;
  %762 = %760.0;
  (%761, %762, %var_3703, meta[relay.Constant][70] /* ty=Tensor[(1, 945), float64] */)
}

def @func_2291(%var_2199: int64, %var_2220: Tensor[(15, 16, 6), bool], %var_2261: Tensor[(2940), uint32], %var_2277: Tensor[(39, 6), int8]) -> (Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) {
  %763 = cast(%var_2199, dtype="int8") /* ty=int8 */;
  %764 = cast(meta[relay.Constant][71] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %765 = reshape(%763, newshape=[]) /* ty=int8 */;
  %766 = reshape(%764, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %767 = @func_484(%765, %766) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %768 = %767.0;
  %769 = cast(%var_2220, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %773 = mod(%771, %772) /* ty=Tensor[(15, 16, 6), float64] */;
  %774 = cast(%773, dtype="uint64") /* ty=Tensor[(15, 16, 6), uint64] */;
  %775 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%768, dtype="uint64") /* ty=Tensor[(15, 16, 6), uint64] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %778 = cast(meta[relay.Constant][72] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %779 = cast(meta[relay.Constant][72] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %780 = cast(meta[relay.Constant][73] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %781 = reshape(%778, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %782 = reshape(%779, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %783 = reshape(%780, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %784 = @func_245(%781, %782, %783) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %785 = cast(meta[relay.Constant][72] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %786 = %784.0;
  %787 = cast(%786, dtype="uint8") /* ty=Tensor[(5, 2, 16), uint8] */;
  %788 = cast(meta[relay.Constant][73] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %789 = reshape(%785, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %790 = reshape(%787, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %791 = reshape(%788, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %792 = @func_245(%789, %790, %791) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %793 = cast(%var_2261, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %794 = cast(%var_2261, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %795 = reshape(%793, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %796 = reshape(%794, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %797 = @func_1454(%795, %796) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %798 = cast(%var_2199, dtype="int8") /* ty=int8 */;
  %799 = cast(%768, dtype="int8") /* ty=Tensor[(15, 16, 6), int8] */;
  %800 = reshape(%798, newshape=[]) /* ty=int8 */;
  %801 = reshape(%799, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %802 = @func_484(%800, %801) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %803 = cast(%var_2277, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %804 = cast(%var_2277, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %805 = reshape(%803, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %806 = reshape(%804, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %807 = cast(meta[relay.Constant][74] /* ty=Tensor[(2, 12, 14), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 14), float32] */;
  %808 = sin(%807) /* ty=Tensor[(2, 12, 14), float32] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(2, 12, 14), float32] */;
  %810 = asin(%809) /* ty=Tensor[(2, 12, 14), float32] */;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(2, 12, 14), float64] */;
  %812 = cast(%var_2199, dtype="bool") /* ty=bool */;
  %813 = cast(meta[relay.Constant][74] /* ty=Tensor[(2, 12, 14), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 14), bool] */;
  %814 = greater(%812, %813) /* ty=Tensor[(2, 12, 14), bool] */;
  %815 = cast(%814, dtype="uint64") /* ty=Tensor[(2, 12, 14), uint64] */;
  %816 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%810, dtype="uint64") /* ty=Tensor[(2, 12, 14), uint64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %819 = maximum(%776, %777) /* ty=Tensor[(15, 16, 6), uint64] */;
  %820 = %792.0;
  %821 = %797.0;
  %822 = %802.0;
  %823 = @func_624(%805, %806) /* ty=Tensor[(9, 2, 13), int8] */;
  %824 = atanh(%811) /* ty=Tensor[(2, 12, 14), float64] */;
  %825 = bitwise_or(%817, %818) /* ty=Tensor[(2, 12, 14), uint64] */;
  (meta[relay.Constant][71] /* ty=Tensor[(1440), int8] */, %819, %786, meta[relay.Constant][72] /* ty=Tensor[(160), uint8] */, meta[relay.Constant][73] /* ty=Tensor[(1800), float64] */, %820, %821, %var_2261, %822, %823, %var_2277, %824, %825)
}

def @func_6658(%var_6623: Tensor[(1800), float64], %var_6627: Tensor[(4, 3, 8), bool]) -> (Tensor[(15, 15, 8), float32], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(4, 3, 8), float32], Tensor[(4, 13, 9), float32], Tensor[(468), bool], Tensor[(13, 7, 6), float64], int8, Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(234, 1), int8], Tensor[(546), float64], Tensor[(4, 3, 8), bool]) {
  %826 = cast(meta[relay.Constant][75] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %827 = cast(meta[relay.Constant][75] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %828 = cast(%var_6623, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %829 = reshape(%826, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %830 = reshape(%827, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %831 = reshape(%828, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %832 = @func_245(%829, %830, %831) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %833 = @func_6521() /* ty=Tensor[(4, 3, 8), bool] */;
  %834 = cast(%var_6627, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %838 = cast(meta[relay.Constant][76] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %839 = cast(meta[relay.Constant][76] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %840 = reshape(%838, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), bool] */;
  %841 = reshape(%839, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), bool] */;
  %842 = @func_6114(%840, %841) /* ty=(Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) */;
  %843 = cast(meta[relay.Constant][77] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %844 = cast(meta[relay.Constant][78] /* ty=Tensor[(24, 1), int8] */, dtype="int8") /* ty=Tensor[(24, 1), int8] */;
  %845 = cast(meta[relay.Constant][79] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %846 = cast(meta[relay.Constant][80] /* ty=Tensor[(234, 1), int8] */, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
  %847 = cast(meta[relay.Constant][81] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %848 = reshape(%843, newshape=[]) /* ty=int8 */;
  %849 = reshape(%844, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %850 = reshape(%845, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %851 = reshape(%846, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %852 = reshape(%847, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %853 = @func_4431(%848, %849, %850, %851, %852) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %854 = %832.1;
  %855 = mod(%836, %837) /* ty=Tensor[(4, 3, 8), float32] */;
  %856 = %842.1;
  %857 = %853.5;
  %858 = @func_6185() /* ty=Tensor[(4, 3, 8), bool] */;
  (%854, meta[relay.Constant][75] /* ty=Tensor[(160), uint8] */, %var_6623, %855, %856, meta[relay.Constant][76] /* ty=Tensor[(468), bool] */, %857, meta[relay.Constant][77] /* ty=int8 */, meta[relay.Constant][78] /* ty=Tensor[(24, 1), int8] */, meta[relay.Constant][79] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][80] /* ty=Tensor[(234, 1), int8] */, meta[relay.Constant][81] /* ty=Tensor[(546), float64] */, %858)
}

def @func_245(%var_223: Tensor[(5, 2, 16), uint8], %var_224: Tensor[(5, 2, 16), uint8], %var_229: Tensor[(1800), float64]) -> (Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) {
  %859 = cast(%var_224, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %860 = shape_of(%var_223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%var_223, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %863 = cast(%var_229, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %864 = reshape(%863, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %865 = @func_170(%864) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %866 = cast(%var_229, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %867 = reshape(%866, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %868 = @func_170(%867) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %869 = less(%861, %862) /* ty=Tensor[(5, 2, 16), bool] */;
  %870 = %865.0;
  %871 = %868.0;
  (%869, %870, %var_229, %871)
}

def @func_4655(%var_4642: Tensor[(7, 7, 16), float64]) -> (Tensor[(7, 7, 16), float64],) {
  %872 = cast(%var_4642, dtype="float64") /* ty=Tensor[(7, 7, 16), float64] */;
  %873 = rsqrt(%872) /* ty=Tensor[(7, 7, 16), float64] */;
  (%873,)
}

def @func_8171(%var_8156: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), int16],) {
  %874 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %875 = %874.0;
  %876 = cast(%var_8156, dtype="int16") /* ty=Tensor[(4, 3, 8), int16] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="int16") /* ty=Tensor[(4, 3, 8), int16] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %880 = maximum(%878, %879) /* ty=Tensor[(4, 3, 8), int16] */;
  (%880,)
}

def @func_8631(%var_8576: Tensor[(6, 3), uint16], %var_8577: Tensor[(144), uint16], %var_8578: Tensor[(2940), uint32], %var_8588: Tensor[(3840), uint32], %var_8609: Tensor[(780), float32], %var_8611: Tensor[(1440), int8], %var_8620: Tensor[(770), float32], %var_8624: Tensor[(810), int16]) -> (Tensor[(4, 3, 8), bool], Tensor[(3136), int32], Tensor[(6, 3), uint16], Tensor[(144), uint16], Tensor[(2940), uint32], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(1800), float64], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64], Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(770), float32], Tensor[(7, 4, 12), float32], Tensor[(336), float32], Tensor[(810), int16]) {
  %881 = cast(%var_8576, dtype="uint16") /* ty=Tensor[(6, 3), uint16] */;
  %882 = cast(%var_8577, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %883 = cast(%var_8578, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %884 = reshape(%881, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), uint16] */;
  %885 = reshape(%882, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), uint16] */;
  %886 = reshape(%883, newshape=[3, 980]) /* ty=Tensor[(3, 980), uint32] */;
  %887 = @func_4793(%884, %885, %886) /* ty=(Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) */;
  %888 = cast(%var_8588, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %889 = reshape(%888, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %890 = @func_2456(%889) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %891 = @func_7025() /* ty=Tensor[(4, 3, 8), bool] */;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %893 = cast(%var_8609, dtype="float32") /* ty=Tensor[(780), float32] */;
  %894 = %890.0;
  %895 = cast(%894, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
  %896 = cast(meta[relay.Constant][82] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %897 = cast(%var_8611, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %898 = cast(meta[relay.Constant][83] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %899 = reshape(%893, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
  %900 = reshape(%895, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %901 = reshape(%896, newshape=[378, 1]) /* ty=Tensor[(378, 1), uint64] */;
  %902 = reshape(%897, newshape=[20, 72]) /* ty=Tensor[(20, 72), int8] */;
  %903 = reshape(%898, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %904 = @func_5627(%899, %900, %901, %902, %903) /* ty=(Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) */;
  %905 = @func_7060() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
  %906 = cast(%var_8620, dtype="float32") /* ty=Tensor[(770), float32] */;
  %907 = cast(%var_8611, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %908 = reshape(%906, newshape=[5, 14, 11]) /* ty=Tensor[(5, 14, 11), float32] */;
  %909 = reshape(%907, newshape=[1440]) /* ty=Tensor[(1440), bool] */;
  %910 = @func_4596(%908, %909) /* ty=(Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) */;
  %911 = cast(meta[relay.Constant][84] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %912 = cast(%var_8624, dtype="int16") /* ty=Tensor[(810), int16] */;
  %913 = reshape(%911, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float32] */;
  %914 = reshape(%912, newshape=[810]) /* ty=Tensor[(810), int16] */;
  %915 = @func_5304(%913, %914) /* ty=(Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) */;
  %916 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %917 = %887.3;
  %918 = rsqrt(%892) /* ty=Tensor[(4, 3, 8), float32] */;
  %919 = %904.12;
  %920 = %905.1;
  %921 = %910.2;
  %922 = %915.0;
  (%916, %917, %var_8576, %var_8577, %var_8578, %894, %var_8588, %918, %919, %var_8609, meta[relay.Constant][82] /* ty=Tensor[(378), uint64] */, %var_8611, meta[relay.Constant][83] /* ty=Tensor[(1800), float64] */, %920, %921, %var_8620, %922, meta[relay.Constant][84] /* ty=Tensor[(336), float32] */, %var_8624)
}

def @func_6430() -> (Tensor[(10, 10, 9), float64], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(784), float64]) {
  %923 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
  %924 = @func_6401() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
  %925 = cast(meta[relay.Constant][85] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %926 = reshape(%925, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float64] */;
  %927 = @func_4655(%926) /* ty=(Tensor[(7, 7, 16), float64],) */;
  %928 = %923.0;
  %929 = %924.0;
  %930 = %927.0;
  (%928, %929, %930, meta[relay.Constant][85] /* ty=Tensor[(784), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7320() -> (Tensor[(4, 3, 8), bool],) {
  %0 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_172(%var_171: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float32],) {
  %7 = fn (%var_151: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float32],) {
    %2 = cast(8.50459f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %3 = cast(%var_151, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %4 = divide(%2, %3) /* ty=Tensor[(15, 15, 8), float64] */;
    %5 = cast(%4, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
    %6 = acosh(%5) /* ty=Tensor[(15, 15, 8), float32] */;
    (%6,)
  };
  %7(%var_171) /* ty=(Tensor[(15, 15, 8), float32],) */
}

def @func_1604(%var_1545: Tensor[(14, 16, 14), int32], %var_1546: Tensor[(14, 16, 14), int32], %var_1556: Tensor[(1, 234), int8], %var_1563: Tensor[(330), float32]) -> (Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) {
  %8 = cast(%var_1546, dtype="int32") /* ty=Tensor[(14, 16, 14), int32] */;
  %9 = shape_of(%var_1545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_1545, dtype="int32") /* ty=Tensor[(14, 16, 14), int32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %12 = cast(%var_1556, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %13 = cast(%var_1556, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %14 = reshape(%12, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %15 = reshape(%13, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %16 = @func_624(%14, %15) /* ty=Tensor[(9, 2, 13), int8] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %18 = shape_of(%var_1556, dtype="int32") /* ty=Tensor[(2), int32] */;
  %19 = cast(%var_1556, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %21 = cast(%var_1563, dtype="float32") /* ty=Tensor[(330), float32] */;
  %22 = reshape(%21, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), float32] */;
  %23 = @func_986(%22) /* ty=(Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) */;
  %24 = cast(%var_1546, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %25 = bitwise_xor(%10, %11) /* ty=Tensor[(14, 16, 14), int32] */;
  %26 = divide(%19, %20) /* ty=Tensor[(?, 234), float64] */;
  %27 = %23.1;
  %28 = atanh(%24) /* ty=Tensor[(14, 16, 14), float32] */;
  (%25, %26, %27, %var_1563, %28)
}

def @func_8122() -> (Tensor[(4, 3, 8), bool],) {
  %31 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %29 = @func_7517() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %30 = %29.0;
    (%30,)
  };
  %31() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_8640(%var_8632: Tensor[(6, 3), uint16], %var_8633: Tensor[(144), uint16], %var_8634: Tensor[(2940), uint32], %var_8635: Tensor[(3840), uint32], %var_8636: Tensor[(780), float32], %var_8637: Tensor[(1440), int8], %var_8638: Tensor[(770), float32], %var_8639: Tensor[(810), int16]) -> (Tensor[(4, 3, 8), bool], Tensor[(3136), int32], Tensor[(6, 3), uint16], Tensor[(144), uint16], Tensor[(2940), uint32], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(1800), float64], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64], Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(770), float32], Tensor[(7, 4, 12), float32], Tensor[(336), float32], Tensor[(810), int16]) {
  %74 = fn (%var_8576: Tensor[(6, 3), uint16], %var_8577: Tensor[(144), uint16], %var_8578: Tensor[(2940), uint32], %var_8588: Tensor[(3840), uint32], %var_8609: Tensor[(780), float32], %var_8611: Tensor[(1440), int8], %var_8620: Tensor[(770), float32], %var_8624: Tensor[(810), int16]) -> (Tensor[(4, 3, 8), bool], Tensor[(3136), int32], Tensor[(6, 3), uint16], Tensor[(144), uint16], Tensor[(2940), uint32], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(1800), float64], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64], Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(770), float32], Tensor[(7, 4, 12), float32], Tensor[(336), float32], Tensor[(810), int16]) {
    %32 = cast(%var_8576, dtype="uint16") /* ty=Tensor[(6, 3), uint16] */;
    %33 = cast(%var_8577, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %34 = cast(%var_8578, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
    %35 = reshape(%32, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), uint16] */;
    %36 = reshape(%33, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), uint16] */;
    %37 = reshape(%34, newshape=[3, 980]) /* ty=Tensor[(3, 980), uint32] */;
    %38 = @func_4793(%35, %36, %37) /* ty=(Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) */;
    %39 = cast(%var_8588, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %40 = reshape(%39, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
    %41 = @func_2456(%40) /* ty=(Tensor[(15, 16, 16), uint32],) */;
    %42 = @func_7025() /* ty=Tensor[(4, 3, 8), bool] */;
    %43 = cast(%42, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %44 = cast(%var_8609, dtype="float32") /* ty=Tensor[(780), float32] */;
    %45 = %41.0;
    %46 = cast(%45, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
    %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(378), uint64] */, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %48 = cast(%var_8611, dtype="int8") /* ty=Tensor[(1440), int8] */;
    %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %50 = reshape(%44, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
    %51 = reshape(%46, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
    %52 = reshape(%47, newshape=[378, 1]) /* ty=Tensor[(378, 1), uint64] */;
    %53 = reshape(%48, newshape=[20, 72]) /* ty=Tensor[(20, 72), int8] */;
    %54 = reshape(%49, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %55 = @func_5627(%50, %51, %52, %53, %54) /* ty=(Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) */;
    %56 = @func_7060() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
    %57 = cast(%var_8620, dtype="float32") /* ty=Tensor[(770), float32] */;
    %58 = cast(%var_8611, dtype="bool") /* ty=Tensor[(1440), bool] */;
    %59 = reshape(%57, newshape=[5, 14, 11]) /* ty=Tensor[(5, 14, 11), float32] */;
    %60 = reshape(%58, newshape=[1440]) /* ty=Tensor[(1440), bool] */;
    %61 = @func_4596(%59, %60) /* ty=(Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) */;
    %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %63 = cast(%var_8624, dtype="int16") /* ty=Tensor[(810), int16] */;
    %64 = reshape(%62, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float32] */;
    %65 = reshape(%63, newshape=[810]) /* ty=Tensor[(810), int16] */;
    %66 = @func_5304(%64, %65) /* ty=(Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) */;
    %67 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
    %68 = %38.3;
    %69 = rsqrt(%43) /* ty=Tensor[(4, 3, 8), float32] */;
    %70 = %55.12;
    %71 = %56.1;
    %72 = %61.2;
    %73 = %66.0;
    (%67, %68, %var_8576, %var_8577, %var_8578, %45, %var_8588, %69, %70, %var_8609, meta[relay.Constant][0] /* ty=Tensor[(378), uint64] */, %var_8611, meta[relay.Constant][1] /* ty=Tensor[(1800), float64] */, %71, %72, %var_8620, %73, meta[relay.Constant][2] /* ty=Tensor[(336), float32] */, %var_8624)
  };
  %74(%var_8632, %var_8633, %var_8634, %var_8635, %var_8636, %var_8637, %var_8638, %var_8639) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(3136), int32], Tensor[(6, 3), uint16], Tensor[(144), uint16], Tensor[(2940), uint32], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(1800), float64], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64], Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(770), float32], Tensor[(7, 4, 12), float32], Tensor[(336), float32], Tensor[(810), int16]) */
}

def @func_2291(%var_2199: int64, %var_2220: Tensor[(15, 16, 6), bool], %var_2261: Tensor[(2940), uint32], %var_2277: Tensor[(39, 6), int8]) -> (Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) {
  %75 = cast(%var_2199, dtype="int8") /* ty=int8 */;
  %76 = cast(meta[relay.Constant][3] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %77 = reshape(%75, newshape=[]) /* ty=int8 */;
  %78 = reshape(%76, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %79 = @func_484(%77, %78) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %80 = %79.0;
  %81 = cast(%var_2220, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %85 = mod(%83, %84) /* ty=Tensor[(15, 16, 6), float64] */;
  %86 = cast(%85, dtype="uint64") /* ty=Tensor[(15, 16, 6), uint64] */;
  %87 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%80, dtype="uint64") /* ty=Tensor[(15, 16, 6), uint64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %93 = reshape(%90, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %94 = reshape(%91, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %95 = reshape(%92, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %96 = @func_245(%93, %94, %95) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %98 = %96.0;
  %99 = cast(%98, dtype="uint8") /* ty=Tensor[(5, 2, 16), uint8] */;
  %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %101 = reshape(%97, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %102 = reshape(%99, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
  %103 = reshape(%100, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %104 = @func_245(%101, %102, %103) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
  %105 = cast(%var_2261, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %106 = cast(%var_2261, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %107 = reshape(%105, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %108 = reshape(%106, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %109 = @func_1454(%107, %108) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %110 = cast(%var_2199, dtype="int8") /* ty=int8 */;
  %111 = cast(%80, dtype="int8") /* ty=Tensor[(15, 16, 6), int8] */;
  %112 = reshape(%110, newshape=[]) /* ty=int8 */;
  %113 = reshape(%111, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %114 = @func_484(%112, %113) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %115 = cast(%var_2277, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %116 = cast(%var_2277, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %117 = reshape(%115, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %118 = reshape(%116, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int8] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 12, 14), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 14), float32] */;
  %120 = sin(%119) /* ty=Tensor[(2, 12, 14), float32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(2, 12, 14), float32] */;
  %122 = asin(%121) /* ty=Tensor[(2, 12, 14), float32] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(2, 12, 14), float64] */;
  %124 = cast(%var_2199, dtype="bool") /* ty=bool */;
  %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 12, 14), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 14), bool] */;
  %126 = greater(%124, %125) /* ty=Tensor[(2, 12, 14), bool] */;
  %127 = cast(%126, dtype="uint64") /* ty=Tensor[(2, 12, 14), uint64] */;
  %128 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%122, dtype="uint64") /* ty=Tensor[(2, 12, 14), uint64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %131 = maximum(%88, %89) /* ty=Tensor[(15, 16, 6), uint64] */;
  %132 = %104.0;
  %133 = %109.0;
  %134 = %114.0;
  %135 = @func_624(%117, %118) /* ty=Tensor[(9, 2, 13), int8] */;
  %136 = atanh(%123) /* ty=Tensor[(2, 12, 14), float64] */;
  %137 = bitwise_or(%129, %130) /* ty=Tensor[(2, 12, 14), uint64] */;
  (meta[relay.Constant][3] /* ty=Tensor[(1440), int8] */, %131, %98, meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */, meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, %132, %133, %var_2261, %134, %135, %var_2277, %136, %137)
}

def @func_4438(%var_4433: int8, %var_4434: Tensor[(1, 3, 8), int8], %var_4435: Tensor[(30, 98), uint32], %var_4436: Tensor[(234), int8], %var_4437: Tensor[(91, 6), float64]) -> (Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) {
  @func_4431(%var_4433, %var_4434, %var_4435, %var_4436, %var_4437) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */
}

def @func_6794() -> Tensor[(4, 3, 8), bool] {
  @func_5694() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_7947() -> (Tensor[(11, 16, 13), float64],) {
  %142 = fn () -> (Tensor[(11, 16, 13), float64],) {
    %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
    %139 = log(%138) /* ty=Tensor[(11, 16, 13), float32] */;
    %140 = cast(%139, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
    %141 = cosh(%140) /* ty=Tensor[(11, 16, 13), float64] */;
    (%141,)
  };
  %142() /* ty=(Tensor[(11, 16, 13), float64],) */
}

def @func_989(%var_987: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) {
  @func_986(%var_987) /* ty=(Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) */
}

def @func_4022(%var_4020: Tensor[(810), int16], %var_4021: Tensor[(3840), uint32]) -> (Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
  @func_4018(%var_4020, %var_4021) /* ty=(Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */
}

def @func_5746() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8234() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %147 = fn () -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
    %143 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %144 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %145 = %143.0;
    %146 = %144.0;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */
}

def @func_7449(%var_7445: Tensor[(3, 8, 3), float64], %var_7446: Tensor[(1, 18), uint16], %var_7447: Tensor[(144, 1), uint16], %var_7448: Tensor[(2940), uint32]) -> (Tensor[(3, 8, 3), bool], Tensor[(3, 980), uint32], Tensor[(1, 18), uint16], Tensor[(144, 1), uint16], Tensor[(2940), uint32]) {
  %161 = fn (%var_7430: Tensor[(3, 8, 3), float64], %var_7437: Tensor[(1, 18), uint16], %var_7438: Tensor[(144, 1), uint16], %var_7439: Tensor[(2940), uint32]) -> (Tensor[(3, 8, 3), bool], Tensor[(3, 980), uint32], Tensor[(1, 18), uint16], Tensor[(144, 1), uint16], Tensor[(2940), uint32]) {
    %148 = cast(%var_7430, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
    %149 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 8, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %152 = cast(%var_7437, dtype="uint16") /* ty=Tensor[(1, 18), uint16] */;
    %153 = cast(%var_7438, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
    %154 = cast(%var_7439, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
    %155 = reshape(%152, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), uint16] */;
    %156 = reshape(%153, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), uint16] */;
    %157 = reshape(%154, newshape=[3, 980]) /* ty=Tensor[(3, 980), uint32] */;
    %158 = @func_4793(%155, %156, %157) /* ty=(Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) */;
    %159 = greater_equal(%150, %151) /* ty=Tensor[(3, 8, 3), bool] */;
    %160 = %158.6;
    (%159, %160, %var_7437, %var_7438, %var_7439)
  };
  %161(%var_7445, %var_7446, %var_7447, %var_7448) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(3, 980), uint32], Tensor[(1, 18), uint16], Tensor[(144, 1), uint16], Tensor[(2940), uint32]) */
}

def @func_6060(%var_6038: Tensor[(3840), uint32], %var_6055: Tensor[(2940), uint32], %var_6056: Tensor[(234), int8]) -> (Tensor[(396), float32], Tensor[(1440), int8], Tensor[(3840), int16], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(5, 2, 16), bool], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(15, 16, 16), uint32]) {
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(810), int16] */, dtype="int16") /* ty=Tensor[(810), int16] */;
  %163 = cast(%var_6038, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %165 = reshape(%162, newshape=[810]) /* ty=Tensor[(810), int16] */;
  %166 = reshape(%163, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
  %167 = reshape(%164, newshape=[396, 1]) /* ty=Tensor[(396, 1), float32] */;
  %168 = @func_5995(%165, %166, %167) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) */;
  %169 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %170 = cast(meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %172 = cast(meta[relay.Constant][10] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %173 = reshape(%170, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %174 = reshape(%171, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %175 = reshape(%172, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %176 = @func_2517(%173, %174, %175) /* ty=(Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) */;
  %177 = %176.2;
  %178 = cast(%169, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %179 = cast(%177, dtype="float32") /* ty=float32 */;
  %180 = power(%178, %179) /* ty=Tensor[(4, 3, 8), float32] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %182 = cast(%177, dtype="int64") /* ty=int64 */;
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(1440), int8] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %184 = cast(%var_6055, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %185 = cast(%var_6056, dtype="int8") /* ty=Tensor[(234), int8] */;
  %186 = reshape(%182, newshape=[]) /* ty=int64 */;
  %187 = reshape(%183, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %188 = reshape(%184, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %189 = reshape(%185, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %190 = @func_2291(%186, %187, %188, %189) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %191 = cast(%var_6038, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %192 = reshape(%191, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %193 = @func_2456(%192) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %194 = %168.2;
  %195 = sin(%181) /* ty=Tensor[(4, 3, 8), float32] */;
  %196 = %190.5;
  %197 = %193.0;
  (meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, meta[relay.Constant][10] /* ty=Tensor[(1440), int8] */, %194, meta[relay.Constant][11] /* ty=Tensor[(810), int16] */, %var_6038, %195, %196, %var_6055, %var_6056, %197)
}

def @func_2456(%var_2452: Tensor[(15, 16, 16), uint32]) -> (Tensor[(15, 16, 16), uint32],) {
  %198 = cast(%var_2452, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
  %199 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 16, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 16, 16), uint32] */, dtype="uint32") /* ty=Tensor[(15, 16, 16), uint32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %202 = right_shift(%200, %201) /* ty=Tensor[(15, 16, 16), uint32] */;
  (%202,)
}

def @func_6781() -> Tensor[(4, 3, 8), bool] {
  @func_6779() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_5807() -> (Tensor[(4, 3, 8), bool],) {
  %204 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %203 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
    (%203,)
  };
  %204() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_7995() -> (Tensor[(10, 10, ?), float32], Tensor[(3, 11, 10), float64], Tensor[(330), float32]) {
  %205 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %206 = reshape(%205, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), float32] */;
  %207 = @func_986(%206) /* ty=(Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) */;
  %208 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
  %209 = %207.1;
  (%208, %209, meta[relay.Constant][13] /* ty=Tensor[(330), float32] */)
}

def @func_4903(%var_4891: Tensor[(4, 6, 7), float32], %var_4898: Tensor[(396), float32]) -> (Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) {
  %210 = cast(%var_4891, dtype="float32") /* ty=Tensor[(4, 6, 7), float32] */;
  %211 = cast(%var_4898, dtype="float32") /* ty=Tensor[(396), float32] */;
  %212 = cast(%var_4898, dtype="float32") /* ty=Tensor[(396), float32] */;
  %213 = cast(meta[relay.Constant][14] /* ty=Tensor[(60, 24), int8] */, dtype="int8") /* ty=Tensor[(60, 24), int8] */;
  %214 = reshape(%211, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %215 = reshape(%212, newshape=[11, 6, 6]) /* ty=Tensor[(11, 6, 6), float32] */;
  %216 = reshape(%213, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %217 = @func_2517(%214, %215, %216) /* ty=(Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) */;
  %218 = tan(%210) /* ty=Tensor[(4, 6, 7), float32] */;
  %219 = %217.3;
  (%218, %219, %var_4898, meta[relay.Constant][14] /* ty=Tensor[(60, 24), int8] */)
}

def @func_5858(%var_5857: Tensor[(3840), uint32]) -> (Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
  %231 = fn (%var_5839: Tensor[(3840), uint32]) -> (Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
    %220 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
    %221 = cast(%220, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %222 = cast(%220, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %223 = sinh(%222) /* ty=Tensor[(4, 3, 8), float32] */;
    %224 = cast(%223, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
    %225 = cast(%var_5839, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %226 = reshape(%225, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
    %227 = @func_2456(%226) /* ty=(Tensor[(15, 16, 16), uint32],) */;
    %228 = exp(%221) /* ty=Tensor[(4, 3, 8), float32] */;
    %229 = log(%224) /* ty=Tensor[(4, 3, 8), float64] */;
    %230 = %227.0;
    (%228, %229, %230, %var_5839)
  };
  %231(%var_5857) /* ty=(Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */
}

def @func_7061() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %235 = fn () -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
    %232 = @func_6687() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %233 = %232.0;
    %234 = @func_7025() /* ty=Tensor[(4, 3, 8), bool] */;
    (%233, %234)
  };
  %235() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */
}

def @func_4596(%var_4567: Tensor[(5, 14, 11), float32], %var_4591: Tensor[(1440), bool]) -> (Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) {
  %236 = cast(%var_4567, dtype="float32") /* ty=Tensor[(5, 14, 11), float32] */;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %239 = reshape(%237, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %240 = reshape(%238, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %241 = @func_1454(%239, %240) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %242 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %243 = cast(%var_4591, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %244 = %241.0;
  %245 = cast(%244, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %247 = reshape(%242, newshape=[]) /* ty=int64 */;
  %248 = reshape(%243, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %249 = reshape(%245, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %250 = reshape(%246, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %251 = @func_2291(%247, %248, %249, %250) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %252 = atanh(%236) /* ty=Tensor[(5, 14, 11), float32] */;
  %253 = %251.2;
  (%252, %244, meta[relay.Constant][15] /* ty=Tensor[(2940), uint32] */, %253, 6 /* ty=int64 */, %var_4591, meta[relay.Constant][16] /* ty=Tensor[(234), int8] */)
}

def @func_6259() -> Tensor[(4, 3, 8), bool] {
  %254 = fn () -> Tensor[(4, 3, 8), bool] {
    @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
  };
  %254() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_6482() -> Tensor[(10, 10, ?), float32] {
  @func_6480() /* ty=Tensor[(10, 10, ?), float32] */
}

def @func_6065(%var_6062: Tensor[(3840), uint32], %var_6063: Tensor[(2940), uint32], %var_6064: Tensor[(234), int8]) -> (Tensor[(396), float32], Tensor[(1440), int8], Tensor[(3840), int16], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(5, 2, 16), bool], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(15, 16, 16), uint32]) {
  @func_6060(%var_6062, %var_6063, %var_6064) /* ty=(Tensor[(396), float32], Tensor[(1440), int8], Tensor[(3840), int16], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(4, 3, 8), float32], Tensor[(5, 2, 16), bool], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(15, 16, 16), uint32]) */
}

def @func_7101() -> Tensor[(4, 3, 8), int32] {
  @func_7099() /* ty=Tensor[(4, 3, 8), int32] */
}

def @func_6851(%var_6807: Tensor[(378), uint64]) -> (Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) {
  %255 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %256 = cast(%var_6807, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %257 = cast(%var_6807, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %259 = reshape(%256, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %260 = reshape(%257, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
  %261 = reshape(%258, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
  %262 = @func_1884(%259, %260, %261) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
  %263 = cast(%var_6807, dtype="float64") /* ty=Tensor[(378), float64] */;
  %264 = %255.0;
  %265 = %262.5;
  %266 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %267 = atan(%263) /* ty=Tensor[(378), float64] */;
  (%264, %265, meta[relay.Constant][17] /* ty=Tensor[(1440), int8] */, %266, %267)
}

def @func_487(%var_485: int8, %var_486: Tensor[(15, 16, 6), int8]) -> (Tensor[(15, 16, 6), bool],) {
  %271 = fn (%var_472: int8, %var_473: Tensor[(15, 16, 6), int8]) -> (Tensor[(15, 16, 6), bool],) {
    %268 = cast(%var_472, dtype="bool") /* ty=bool */;
    %269 = cast(%var_473, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
    %270 = greater(%268, %269) /* ty=Tensor[(15, 16, 6), bool] */;
    (%270,)
  };
  %271(%var_485, %var_486) /* ty=(Tensor[(15, 16, 6), bool],) */
}

def @func_2459(%var_2457: Tensor[(15, 16, 16), uint32]) -> (Tensor[(15, 16, 16), uint32],) {
  @func_2456(%var_2457) /* ty=(Tensor[(15, 16, 16), uint32],) */
}

def @func_4018(%var_4008: Tensor[(810), int16], %var_4012: Tensor[(3840), uint32]) -> (Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) {
  %272 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 14, 3), float64] */;
  %273 = cast(%var_4008, dtype="int16") /* ty=Tensor[(810), int16] */;
  %274 = reshape(%273, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
  %275 = cast(%var_4012, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
  %276 = reshape(%275, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
  %277 = @func_2456(%276) /* ty=(Tensor[(15, 16, 16), uint32],) */;
  %278 = log(%272) /* ty=Tensor[(7, 14, 3), float64] */;
  %279 = @func_2616(%274) /* ty=Tensor[(9, 6, 15), int16] */;
  %280 = %277.0;
  (%278, %279, %var_4008, %280, %var_4012)
}

def @func_6114(%var_6099: Tensor[(4, 13, 9), bool], %var_6100: Tensor[(4, 13, 9), bool]) -> (Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) {
  %281 = cast(%var_6100, dtype="bool") /* ty=Tensor[(4, 13, 9), bool] */;
  %282 = shape_of(%var_6099, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_6099, dtype="bool") /* ty=Tensor[(4, 13, 9), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = cast(%var_6100, dtype="float64") /* ty=Tensor[(4, 13, 9), float64] */;
  %286 = acosh(%285) /* ty=Tensor[(4, 13, 9), float64] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
  %288 = logical_or(%283, %284) /* ty=Tensor[(4, 13, 9), bool] */;
  %289 = exp(%287) /* ty=Tensor[(4, 13, 9), float32] */;
  (%288, %289)
}

def @func_5307(%var_5305: Tensor[(7, 4, 12), float32], %var_5306: Tensor[(810), int16]) -> (Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) {
  %295 = fn (%var_5281: Tensor[(7, 4, 12), float32], %var_5286: Tensor[(810), int16]) -> (Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) {
    %290 = cast(%var_5281, dtype="float32") /* ty=Tensor[(7, 4, 12), float32] */;
    %291 = cast(%var_5286, dtype="int16") /* ty=Tensor[(810), int16] */;
    %292 = reshape(%291, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
    %293 = atan(%290) /* ty=Tensor[(7, 4, 12), float32] */;
    %294 = @func_2616(%292) /* ty=Tensor[(9, 6, 15), int16] */;
    (%293, %294, %var_5286)
  };
  %295(%var_5305, %var_5306) /* ty=(Tensor[(7, 4, 12), float32], Tensor[(9, 6, 15), int16], Tensor[(810), int16]) */
}

def @func_1161(%var_1153: float64, %var_1154: Tensor[(11, 13, 9), float64]) -> Tensor[(11, 13, 9), float64] {
  %296 = cast(%var_1153, dtype="float64") /* ty=float64 */;
  %297 = cast(%var_1154, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  minimum(%296, %297) /* ty=Tensor[(11, 13, 9), float64] */
}

def @func_6572(%var_6570: Tensor[(15, 15, 7), float32]) -> (Tensor[(15, 15, 7), float32],) {
  @func_6569(%var_6570) /* ty=(Tensor[(15, 15, 7), float32],) */
}

def @func_2618(%var_2617: Tensor[(9, 6, 15), int16]) -> Tensor[(9, 6, 15), int16] {
  %300 = fn (%var_2611: Tensor[(9, 6, 15), int16]) -> Tensor[(9, 6, 15), int16] {
    %298 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 1, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 1, 15), int16] */;
    %299 = cast(%var_2611, dtype="int16") /* ty=Tensor[(9, 6, 15), int16] */;
    multiply(%298, %299) /* ty=Tensor[(9, 6, 15), int16] */
  };
  %300(%var_2617) /* ty=Tensor[(9, 6, 15), int16] */
}

def @func_1888(%var_1885: Tensor[(14, 3, 9), uint64], %var_1886: Tensor[(14, 3, 9), uint64], %var_1887: Tensor[(1440), int8]) -> (Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) {
  %320 = fn (%var_1846: Tensor[(14, 3, 9), uint64], %var_1847: Tensor[(14, 3, 9), uint64], %var_1861: Tensor[(1440), int8]) -> (Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) {
    %301 = cast(%var_1847, dtype="uint64") /* ty=Tensor[(14, 3, 9), uint64] */;
    %302 = shape_of(%var_1846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%var_1846, dtype="uint64") /* ty=Tensor[(14, 3, 9), uint64] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
    %306 = reshape(%305, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
    %307 = cast(meta[relay.Constant][21] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %308 = cast(%var_1861, dtype="int8") /* ty=Tensor[(1440), int8] */;
    %309 = reshape(%307, newshape=[]) /* ty=int8 */;
    %310 = reshape(%308, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
    %311 = @func_484(%309, %310) /* ty=(Tensor[(15, 16, 6), bool],) */;
    %312 = cast(meta[relay.Constant][21] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %313 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 117), float64] */, dtype="float64") /* ty=Tensor[(11, 117), float64] */;
    %314 = reshape(%312, newshape=[]) /* ty=float64 */;
    %315 = reshape(%313, newshape=[11, 13, 9]) /* ty=Tensor[(11, 13, 9), float64] */;
    %316 = add(%303, %304) /* ty=Tensor[(14, 3, 9), uint64] */;
    %317 = @func_1469(%306) /* ty=Tensor[(9, 15, 7), float64] */;
    %318 = %311.0;
    %319 = @func_1161(%314, %315) /* ty=Tensor[(11, 13, 9), float64] */;
    (%316, %317, meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, %318, meta[relay.Constant][21] /* ty=int8 */, %var_1861, %319, meta[relay.Constant][22] /* ty=Tensor[(11, 117), float64] */)
  };
  %320(%var_1885, %var_1886, %var_1887) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */
}

def @func_250(%var_247: Tensor[(5, 2, 16), uint8], %var_248: Tensor[(5, 2, 16), uint8], %var_249: Tensor[(1800), float64]) -> (Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) {
  @func_245(%var_247, %var_248, %var_249) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */
}

def @func_6661(%var_6659: Tensor[(1800), float64], %var_6660: Tensor[(4, 3, 8), bool]) -> (Tensor[(15, 15, 8), float32], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(4, 3, 8), float32], Tensor[(4, 13, 9), float32], Tensor[(468), bool], Tensor[(13, 7, 6), float64], int8, Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(234, 1), int8], Tensor[(546), float64], Tensor[(4, 3, 8), bool]) {
  %354 = fn (%var_6623: Tensor[(1800), float64], %var_6627: Tensor[(4, 3, 8), bool]) -> (Tensor[(15, 15, 8), float32], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(4, 3, 8), float32], Tensor[(4, 13, 9), float32], Tensor[(468), bool], Tensor[(13, 7, 6), float64], int8, Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(234, 1), int8], Tensor[(546), float64], Tensor[(4, 3, 8), bool]) {
    %321 = cast(meta[relay.Constant][23] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %322 = cast(meta[relay.Constant][23] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %323 = cast(%var_6623, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %324 = reshape(%321, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %325 = reshape(%322, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %326 = reshape(%323, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %327 = @func_245(%324, %325, %326) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
    %328 = @func_6521() /* ty=Tensor[(4, 3, 8), bool] */;
    %329 = cast(%var_6627, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%328, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %334 = cast(meta[relay.Constant][24] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %335 = reshape(%333, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), bool] */;
    %336 = reshape(%334, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), bool] */;
    %337 = @func_6114(%335, %336) /* ty=(Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) */;
    %338 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %339 = cast(meta[relay.Constant][26] /* ty=Tensor[(24, 1), int8] */, dtype="int8") /* ty=Tensor[(24, 1), int8] */;
    %340 = cast(meta[relay.Constant][27] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
    %341 = cast(meta[relay.Constant][28] /* ty=Tensor[(234, 1), int8] */, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
    %342 = cast(meta[relay.Constant][29] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
    %343 = reshape(%338, newshape=[]) /* ty=int8 */;
    %344 = reshape(%339, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
    %345 = reshape(%340, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
    %346 = reshape(%341, newshape=[234]) /* ty=Tensor[(234), int8] */;
    %347 = reshape(%342, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
    %348 = @func_4431(%343, %344, %345, %346, %347) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
    %349 = %327.1;
    %350 = mod(%331, %332) /* ty=Tensor[(4, 3, 8), float32] */;
    %351 = %337.1;
    %352 = %348.5;
    %353 = @func_6185() /* ty=Tensor[(4, 3, 8), bool] */;
    (%349, meta[relay.Constant][23] /* ty=Tensor[(160), uint8] */, %var_6623, %350, %351, meta[relay.Constant][24] /* ty=Tensor[(468), bool] */, %352, meta[relay.Constant][25] /* ty=int8 */, meta[relay.Constant][26] /* ty=Tensor[(24, 1), int8] */, meta[relay.Constant][27] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][28] /* ty=Tensor[(234, 1), int8] */, meta[relay.Constant][29] /* ty=Tensor[(546), float64] */, %353)
  };
  %354(%var_6659, %var_6660) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(4, 3, 8), float32], Tensor[(4, 13, 9), float32], Tensor[(468), bool], Tensor[(13, 7, 6), float64], int8, Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(234, 1), int8], Tensor[(546), float64], Tensor[(4, 3, 8), bool]) */
}

def @func_4374(%var_4308: bool, %var_4309: Tensor[(15, 12, 10), bool], %var_4315: Tensor[(1, 1440), bool], %var_4352: Tensor[(8, 1440), bool], %var_4360: Tensor[(14, 224), int32]) -> (Tensor[(15, 12, 10), bool], Tensor[(1800), float64], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 1440), float32], Tensor[(8, 1440), bool], Tensor[(15, 196), uint32], Tensor[(14, 224), int32], Tensor[(1, 330), float32], Tensor[(350, 2), float64]) {
  %355 = cast(%var_4308, dtype="bool") /* ty=bool */;
  %356 = cast(%var_4309, dtype="bool") /* ty=Tensor[(15, 12, 10), bool] */;
  %357 = cast(%var_4308, dtype="int64") /* ty=int64 */;
  %358 = cast(%var_4315, dtype="bool") /* ty=Tensor[(1, 1440), bool] */;
  %359 = cast(meta[relay.Constant][30] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %360 = cast(meta[relay.Constant][31] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %361 = reshape(%357, newshape=[]) /* ty=int64 */;
  %362 = reshape(%358, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %363 = reshape(%359, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %364 = reshape(%360, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %365 = @func_2291(%361, %362, %363, %364) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %366 = cast(%var_4315, dtype="float32") /* ty=Tensor[(1, 1440), float32] */;
  %367 = cast(%var_4308, dtype="float32") /* ty=float32 */;
  %368 = cast(%var_4315, dtype="bool") /* ty=Tensor[(1, 1440), bool] */;
  %369 = cast(%var_4352, dtype="bool") /* ty=Tensor[(8, 1440), bool] */;
  %370 = cast(meta[relay.Constant][32] /* ty=Tensor[(350, 2), float64] */, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
  %371 = cast(%var_4360, dtype="int32") /* ty=Tensor[(14, 224), int32] */;
  %372 = cast(meta[relay.Constant][31] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %373 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 330), float32] */, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %374 = cast(meta[relay.Constant][30] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %375 = reshape(%370, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %376 = reshape(%371, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %377 = reshape(%372, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %378 = reshape(%373, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %379 = reshape(%374, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %380 = @func_2960(%375, %376, %377, %378, %379) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %381 = cast(meta[relay.Constant][32] /* ty=Tensor[(350, 2), float64] */, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
  %382 = logical_or(%355, %356) /* ty=Tensor[(15, 12, 10), bool] */;
  %383 = %365.4;
  %384 = floor_mod(%366, %367) /* ty=Tensor[(1, 1440), float32] */;
  %385 = less(%368, %369) /* ty=Tensor[(8, 1440), bool] */;
  %386 = %380.6;
  %387 = cosh(%381) /* ty=Tensor[(350, 2), float64] */;
  (%382, %383, meta[relay.Constant][30] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][31] /* ty=Tensor[(234), int8] */, %384, %385, %386, %var_4360, meta[relay.Constant][33] /* ty=Tensor[(1, 330), float32] */, %387)
}

def @func_6803() -> (Tensor[(4, 3, 8), bool],) {
  @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_900(%var_899: Tensor[(3, 13, 14), float32]) -> (Tensor[(15, 15, 8), float32], Tensor[(16, 10), uint8], Tensor[(1800), float64], Tensor[(3, 13, 14), float32], Tensor[(5, 2, 16), bool]) {
  %408 = fn (%var_878: Tensor[(3, 13, 14), float32]) -> (Tensor[(15, 15, 8), float32], Tensor[(16, 10), uint8], Tensor[(1800), float64], Tensor[(3, 13, 14), float32], Tensor[(5, 2, 16), bool]) {
    %388 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
    %389 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
    %390 = cast(meta[relay.Constant][35] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %391 = reshape(%388, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %392 = reshape(%389, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %393 = reshape(%390, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %394 = @func_245(%391, %392, %393) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
    %395 = cast(%var_878, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
    %396 = sigmoid(%395) /* ty=Tensor[(3, 13, 14), float32] */;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
    %398 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
    %399 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
    %400 = cast(meta[relay.Constant][35] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %401 = reshape(%398, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %402 = reshape(%399, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint8] */;
    %403 = reshape(%400, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %404 = @func_245(%401, %402, %403) /* ty=(Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) */;
    %405 = %394.1;
    %406 = tan(%397) /* ty=Tensor[(3, 13, 14), float32] */;
    %407 = %404.0;
    (%405, meta[relay.Constant][34] /* ty=Tensor[(16, 10), uint8] */, meta[relay.Constant][35] /* ty=Tensor[(1800), float64] */, %406, %407)
  };
  %408(%var_899) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(16, 10), uint8], Tensor[(1800), float64], Tensor[(3, 13, 14), float32], Tensor[(5, 2, 16), bool]) */
}

def @func_6442() -> (Tensor[(4, 3, 8), bool],) {
  @func_6440() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_8174(%var_8172: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), int16],) {
  @func_8171(%var_8172) /* ty=(Tensor[(4, 3, 8), int16],) */
}

def @func_5543() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_3715(%var_3714: Tensor[(80), uint64]) -> (Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) {
  %417 = fn (%var_3703: Tensor[(80), uint64]) -> (Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) {
    %409 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
    %410 = cast(%var_3703, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %411 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 945), float64] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
    %412 = reshape(%410, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
    %413 = reshape(%411, newshape=[945]) /* ty=Tensor[(945), float64] */;
    %414 = @func_3379(%412, %413) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
    %415 = log10(%409) /* ty=Tensor[(7, 14, 6), float32] */;
    %416 = %414.0;
    (%415, %416, %var_3703, meta[relay.Constant][37] /* ty=Tensor[(1, 945), float64] */)
  };
  %417(%var_3714) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) */
}

def @func_8469(%var_8451: float32, %var_8452: Tensor[(11, 12, 9), float32], %var_8466: Tensor[(154, 10), float64]) -> (Tensor[(11, 12, 9), float64], Tensor[(10, 14, 11), float64], Tensor[(154, 10), float64]) {
  %418 = cast(%var_8451, dtype="float32") /* ty=float32 */;
  %419 = cast(%var_8452, dtype="float32") /* ty=Tensor[(11, 12, 9), float32] */;
  %420 = maximum(%418, %419) /* ty=Tensor[(11, 12, 9), float32] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(11, 12, 9), float64] */;
  %422 = cast(%var_8466, dtype="float64") /* ty=Tensor[(154, 10), float64] */;
  %423 = reshape(%422, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float64] */;
  %424 = @func_3177(%423) /* ty=(Tensor[(10, 14, 11), float64],) */;
  %425 = sin(%421) /* ty=Tensor[(11, 12, 9), float64] */;
  %426 = %424.0;
  (%425, %426, %var_8466)
}

def @func_4658(%var_4656: Tensor[(7, 7, 16), float64]) -> (Tensor[(7, 7, 16), float64],) {
  @func_4655(%var_4656) /* ty=(Tensor[(7, 7, 16), float64],) */
}

def @func_6287() -> (Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) {
  %437 = fn () -> (Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) {
    %427 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
    %428 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 9), float64] */;
    %429 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
    %430 = asinh(%429) /* ty=Tensor[(10, 10, 1), float64] */;
    %431 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%430, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %435 = power(%427, %428) /* ty=Tensor[(10, 10, 9), float64] */;
    %436 = mod(%433, %434) /* ty=Tensor[(10, 10, ?), float32] */;
    (%435, %436)
  };
  %437() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */
}

def @func_4600(%var_4598: Tensor[(5, 14, 11), float32], %var_4599: Tensor[(1440), bool]) -> (Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) {
  @func_4596(%var_4598, %var_4599) /* ty=(Tensor[(5, 14, 11), float32], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(234), int8]) */
}

def @func_6250() -> Tensor[(4, 3, 8), bool] {
  %438 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %438.0
}

def @func_5541() -> Tensor[(4, 3, 8), bool] {
  %439 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %440 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 3, 8), uint64] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%441, %442) /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_2297(%var_2293: int64, %var_2294: Tensor[(15, 16, 6), bool], %var_2295: Tensor[(2940), uint32], %var_2296: Tensor[(39, 6), int8]) -> (Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) {
  @func_2291(%var_2293, %var_2294, %var_2295, %var_2296) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */
}

def @func_4798(%var_4795: Tensor[(2, 1, 9), uint16], %var_4796: Tensor[(2, 8, 9), uint16], %var_4797: Tensor[(3, 980), uint32]) -> (Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) {
  @func_4793(%var_4795, %var_4796, %var_4797) /* ty=(Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) */
}

def @func_6522() -> Tensor[(4, 3, 8), bool] {
  %444 = fn () -> Tensor[(4, 3, 8), bool] {
    %443 = @func_6440() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %443.0
  };
  %444() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8441(%var_8438: Tensor[(378), uint64], %var_8439: int64, %var_8440: Tensor[(234), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(378), uint64], Tensor[(15, 16, 6), uint64], int64, Tensor[(1440), bool], Tensor[(2940, 1), uint32], Tensor[(234), float32]) {
  %465 = fn (%var_8390: Tensor[(378), uint64], %var_8416: int64, %var_8431: Tensor[(234), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(378), uint64], Tensor[(15, 16, 6), uint64], int64, Tensor[(1440), bool], Tensor[(2940, 1), uint32], Tensor[(234), float32]) {
    %445 = cast(%var_8390, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %446 = reshape(%445, newshape=[378]) /* ty=Tensor[(378), uint64] */;
    %447 = @func_6851(%446) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) */;
    %448 = cast(%var_8416, dtype="int64") /* ty=int64 */;
    %449 = cast(meta[relay.Constant][42] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
    %450 = cast(meta[relay.Constant][43] /* ty=Tensor[(2940, 1), uint32] */, dtype="uint32") /* ty=Tensor[(2940, 1), uint32] */;
    %451 = cast(meta[relay.Constant][44] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
    %452 = reshape(%448, newshape=[]) /* ty=int64 */;
    %453 = reshape(%449, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
    %454 = reshape(%450, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
    %455 = reshape(%451, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
    %456 = @func_2291(%452, %453, %454, %455) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
    %457 = cast(%var_8431, dtype="float32") /* ty=Tensor[(234), float32] */;
    %458 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(234), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %459 = cast(meta[relay.Constant][44] /* ty=Tensor[(234), int8] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?), float32] */;
    %461 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
    %462 = %447.0;
    %463 = %456.1;
    %464 = floor_divide(%459, %460) /* ty=Tensor[(234), float32] */;
    (%461, %462, %var_8390, %463, %var_8416, meta[relay.Constant][42] /* ty=Tensor[(1440), bool] */, meta[relay.Constant][43] /* ty=Tensor[(2940, 1), uint32] */, %464)
  };
  %465(%var_8438, %var_8439, %var_8440) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(378), uint64], Tensor[(15, 16, 6), uint64], int64, Tensor[(1440), bool], Tensor[(2940, 1), uint32], Tensor[(234), float32]) */
}

def @func_8717(%var_8715: Tensor[(24, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(546), float64]) {
  @func_8714(%var_8715) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(546), float64]) */
}

def @func_4381(%var_4376: bool, %var_4377: Tensor[(15, 12, 10), bool], %var_4378: Tensor[(1, 1440), bool], %var_4379: Tensor[(8, 1440), bool], %var_4380: Tensor[(14, 224), int32]) -> (Tensor[(15, 12, 10), bool], Tensor[(1800), float64], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 1440), float32], Tensor[(8, 1440), bool], Tensor[(15, 196), uint32], Tensor[(14, 224), int32], Tensor[(1, 330), float32], Tensor[(350, 2), float64]) {
  @func_4374(%var_4376, %var_4377, %var_4378, %var_4379, %var_4380) /* ty=(Tensor[(15, 12, 10), bool], Tensor[(1800), float64], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 1440), float32], Tensor[(8, 1440), bool], Tensor[(15, 196), uint32], Tensor[(14, 224), int32], Tensor[(1, 330), float32], Tensor[(350, 2), float64]) */
}

def @func_6430() -> (Tensor[(10, 10, 9), float64], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(784), float64]) {
  %466 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
  %467 = @func_6401() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
  %468 = cast(meta[relay.Constant][45] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %469 = reshape(%468, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float64] */;
  %470 = @func_4655(%469) /* ty=(Tensor[(7, 7, 16), float64],) */;
  %471 = %466.0;
  %472 = %467.0;
  %473 = %470.0;
  (%471, %472, %473, meta[relay.Constant][45] /* ty=Tensor[(784), float64] */)
}

def @func_2521(%var_2518: Tensor[(11, 6, 6), float32], %var_2519: Tensor[(11, 6, 6), float32], %var_2520: Tensor[(1440), int8]) -> (Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) {
  %492 = fn (%var_2496: Tensor[(11, 6, 6), float32], %var_2497: Tensor[(11, 6, 6), float32], %var_2515: Tensor[(1440), int8]) -> (Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) {
    %474 = cast(%var_2497, dtype="float32") /* ty=Tensor[(11, 6, 6), float32] */;
    %475 = shape_of(%var_2496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(%var_2496, dtype="float32") /* ty=Tensor[(11, 6, 6), float32] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %478 = cast(%var_2497, dtype="uint64") /* ty=Tensor[(11, 6, 6), uint64] */;
    %479 = shape_of(%var_2496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_2496, dtype="uint64") /* ty=Tensor[(11, 6, 6), uint64] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %482 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 378), uint64] */, dtype="uint64") /* ty=Tensor[(1, 378), uint64] */;
    %483 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 378), uint64] */, dtype="uint64") /* ty=Tensor[(1, 378), uint64] */;
    %484 = cast(%var_2515, dtype="int8") /* ty=Tensor[(1440), int8] */;
    %485 = reshape(%482, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %486 = reshape(%483, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %487 = reshape(%484, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
    %488 = @func_1884(%485, %486, %487) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
    %489 = floor_mod(%476, %477) /* ty=Tensor[(11, 6, 6), float32] */;
    %490 = multiply(%480, %481) /* ty=Tensor[(11, 6, 6), uint64] */;
    %491 = %488.4;
    (%489, %490, %491, meta[relay.Constant][46] /* ty=Tensor[(1, 378), uint64] */, %var_2515)
  };
  %492(%var_2518, %var_2519, %var_2520) /* ty=(Tensor[(11, 6, 6), float32], Tensor[(11, 6, 6), uint64], int8, Tensor[(1, 378), uint64], Tensor[(1440), int8]) */
}

def @func_6990() -> (Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) {
  @func_6988() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) */
}

def @func_8218() -> (Tensor[(4, 3, 8), uint16],) {
  %499 = fn () -> (Tensor[(4, 3, 8), uint16],) {
    %493 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
    %494 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 3, 8), bool] */, dtype="uint16") /* ty=Tensor[(4, 3, 8), uint16] */;
    %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%493, dtype="uint16") /* ty=Tensor[(4, 3, 8), uint16] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %498 = logical_xor(%496, %497) /* ty=Tensor[(4, 3, 8), uint16] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(4, 3, 8), uint16],) */
}

def @func_627(%var_625: Tensor[(9, 2, 13), int8], %var_626: Tensor[(9, 2, 13), int8]) -> Tensor[(9, 2, 13), int8] {
  %504 = fn (%var_618: Tensor[(9, 2, 13), int8], %var_619: Tensor[(9, 2, 13), int8]) -> Tensor[(9, 2, 13), int8] {
    %500 = cast(%var_619, dtype="int8") /* ty=Tensor[(9, 2, 13), int8] */;
    %501 = shape_of(%var_618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%var_618, dtype="int8") /* ty=Tensor[(9, 2, 13), int8] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%502, %503) /* ty=Tensor[(9, 2, 13), int8] */
  };
  %504(%var_625, %var_626) /* ty=Tensor[(9, 2, 13), int8] */
}

def @func_5633(%var_5628: Tensor[(6, 10, 13), float32], %var_5629: Tensor[(3840), uint32], %var_5630: Tensor[(378, 1), uint64], %var_5631: Tensor[(20, 72), int8], %var_5632: Tensor[(1800), float64]) -> (Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) {
  %554 = fn (%var_5547: Tensor[(6, 10, 13), float32], %var_5578: Tensor[(3840), uint32], %var_5581: Tensor[(378, 1), uint64], %var_5582: Tensor[(20, 72), int8], %var_5618: Tensor[(1800), float64]) -> (Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) {
    %505 = cast(%var_5547, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
    %506 = sigmoid(%505) /* ty=Tensor[(6, 10, 13), float32] */;
    %507 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(6, 10, 13), int32] */;
    %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%506, dtype="int32") /* ty=Tensor[(6, 10, 13), int32] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %511 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
    %512 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%506, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %515 = greater_equal(%513, %514) /* ty=Tensor[(6, 10, 13), bool] */;
    %516 = cast(%515, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
    %517 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%506, dtype="bool") /* ty=Tensor[(6, 10, 13), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %520 = cast(%var_5578, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %521 = reshape(%520, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
    %522 = @func_2456(%521) /* ty=(Tensor[(15, 16, 16), uint32],) */;
    %523 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
    %524 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
    %525 = cast(%var_5582, dtype="int8") /* ty=Tensor[(20, 72), int8] */;
    %526 = reshape(%523, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %527 = reshape(%524, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %528 = reshape(%525, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
    %529 = @func_1884(%526, %527, %528) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
    %530 = cast(%506, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
    %531 = acos(%530) /* ty=Tensor[(6, 10, 13), float32] */;
    %532 = cast(%531, dtype="float64") /* ty=Tensor[(6, 10, 13), float64] */;
    %533 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
    %534 = cast(%var_5581, dtype="uint64") /* ty=Tensor[(378, 1), uint64] */;
    %535 = cast(%var_5582, dtype="int8") /* ty=Tensor[(20, 72), int8] */;
    %536 = reshape(%533, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %537 = reshape(%534, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), uint64] */;
    %538 = reshape(%535, newshape=[1440]) /* ty=Tensor[(1440), int8] */;
    %539 = @func_1884(%536, %537, %538) /* ty=(Tensor[(14, 3, 9), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(11, 13, 9), float64], Tensor[(11, 117), float64]) */;
    %540 = cast(meta[relay.Constant][49] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %541 = reshape(%540, newshape=[80]) /* ty=Tensor[(80), uint64] */;
    %542 = @func_3713(%541) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(1, 945), float64]) */;
    %543 = cast(%var_5618, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %544 = reshape(%543, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %545 = @func_170(%544) /* ty=(Tensor[(15, 15, 8), float32],) */;
    %546 = maximum(%509, %510) /* ty=Tensor[(6, 10, 13), int32] */;
    %547 = greater(%518, %519) /* ty=Tensor[(6, 10, 13), bool] */;
    %548 = %522.0;
    %549 = %529.4;
    %550 = acosh(%532) /* ty=Tensor[(6, 10, 13), float64] */;
    %551 = %539.5;
    %552 = %542.2;
    %553 = %545.0;
    (%546, %547, %548, %var_5578, %549, %var_5581, %var_5582, %550, %551, %552, meta[relay.Constant][49] /* ty=Tensor[(80), uint64] */, %553, %var_5618)
  };
  %554(%var_5628, %var_5629, %var_5630, %var_5631, %var_5632) /* ty=(Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) */
}

def @func_8075() -> (Tensor[(10, 10, ?), float32], Tensor[(9, 15, 7), float64], Tensor[(1, 945), uint16]) {
  %564 = fn () -> (Tensor[(10, 10, ?), float32], Tensor[(9, 15, 7), float64], Tensor[(1, 945), uint16]) {
    %555 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 945), float64] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
    %556 = reshape(%555, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
    %557 = @func_6988() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) */;
    %558 = %557.2;
    %559 = cast(%558, dtype="uint16") /* ty=uint16 */;
    %560 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 945), float64] */, dtype="uint16") /* ty=Tensor[(1, 945), uint16] */;
    %561 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
    %562 = @func_1469(%556) /* ty=Tensor[(9, 15, 7), float64] */;
    %563 = right_shift(%559, %560) /* ty=Tensor[(1, 945), uint16] */;
    (%561, %562, %563)
  };
  %564() /* ty=(Tensor[(10, 10, ?), float32], Tensor[(9, 15, 7), float64], Tensor[(1, 945), uint16]) */
}

def @func_6569(%var_6564: Tensor[(15, 15, 7), float32]) -> (Tensor[(15, 15, 7), float32],) {
  %565 = cast(%var_6564, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %566 = sin(%565) /* ty=Tensor[(15, 15, 7), float32] */;
  (%566,)
}

def @func_7099() -> Tensor[(4, 3, 8), int32] {
  %567 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %568 = %567.0;
  %569 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = less(%571, %572) /* ty=Tensor[(4, 3, 8), bool] */;
  %574 = cast(%568, dtype="int32") /* ty=Tensor[(4, 3, 8), int32] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="int32") /* ty=Tensor[(4, 3, 8), int32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%576, %577) /* ty=Tensor[(4, 3, 8), int32] */
}

def @func_5694() -> Tensor[(4, 3, 8), bool] {
  @func_5541() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_7198(%var_7195: Tensor[(1, 14, 14), bool], %var_7196: Tensor[(1, 14, 14), bool], %var_7197: Tensor[(945), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(?, 14, 14), int16], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(10, 10, ?), float32], Tensor[(4, 3, 8), float32]) {
  %603 = fn (%var_7122: Tensor[(1, 14, 14), bool], %var_7123: Tensor[(1, 14, 14), bool], %var_7166: Tensor[(945), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(?, 14, 14), int16], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(10, 10, ?), float32], Tensor[(4, 3, 8), float32]) {
    %578 = @func_6401() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */;
    %579 = cast(%var_7123, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
    %580 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%var_7122, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %583 = logical_or(%581, %582) /* ty=Tensor[(?, 14, 14), bool] */;
    %584 = cast(%583, dtype="float32") /* ty=Tensor[(?, 14, 14), float32] */;
    %585 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%var_7122, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %588 = mod(%586, %587) /* ty=Tensor[(?, 14, 14), float32] */;
    %589 = cast(%583, dtype="int16") /* ty=Tensor[(?, 14, 14), int16] */;
    %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%588, dtype="int16") /* ty=Tensor[(?, 14, 14), int16] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %593 = cast(%var_7166, dtype="float64") /* ty=Tensor[(945), float64] */;
    %594 = reshape(%593, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
    %595 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %596 = %595.0;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %598 = %578.0;
    %599 = maximum(%591, %592) /* ty=Tensor[(?, 14, 14), int16] */;
    %600 = @func_1469(%594) /* ty=Tensor[(9, 15, 7), float64] */;
    %601 = @func_6480() /* ty=Tensor[(10, 10, ?), float32] */;
    %602 = sigmoid(%597) /* ty=Tensor[(4, 3, 8), float32] */;
    (%598, %599, %600, %var_7166, %601, %602)
  };
  %603(%var_7195, %var_7196, %var_7197) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(?, 14, 14), int16], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(10, 10, ?), float32], Tensor[(4, 3, 8), float32]) */
}

def @func_1457(%var_1455: Tensor[(14, 14, 15), uint32], %var_1456: Tensor[(14, 14, 15), uint32]) -> (Tensor[(14, 14, 15), uint32],) {
  %609 = fn (%var_1425: Tensor[(14, 14, 15), uint32], %var_1426: Tensor[(14, 14, 15), uint32]) -> (Tensor[(14, 14, 15), uint32],) {
    %604 = cast(%var_1426, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
    %605 = shape_of(%var_1425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%var_1425, dtype="uint32") /* ty=Tensor[(14, 14, 15), uint32] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %608 = right_shift(%606, %607) /* ty=Tensor[(14, 14, 15), uint32] */;
    (%608,)
  };
  %609(%var_1455, %var_1456) /* ty=(Tensor[(14, 14, 15), uint32],) */
}

def @func_6440() -> (Tensor[(4, 3, 8), bool],) {
  %610 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %611 = %610.0;
  (%611,)
}

def @func_6402() -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
  %614 = fn () -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) {
    %612 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
    %613 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
    (%612, %613)
  };
  %614() /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool]) */
}

def @func_6988() -> (Tensor[(4, 3, 8), bool], Tensor[(15, 16, 6), bool], int8, Tensor[(1440), int8], Tensor[(4, 3, 8), bool]) {
  %615 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %616 = cast(meta[relay.Constant][53] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %617 = reshape(%615, newshape=[]) /* ty=int8 */;
  %618 = reshape(%616, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), int8] */;
  %619 = @func_484(%617, %618) /* ty=(Tensor[(15, 16, 6), bool],) */;
  %620 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %621 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
  %622 = %619.0;
  %623 = %620.0;
  (%621, %622, meta[relay.Constant][52] /* ty=int8 */, meta[relay.Constant][53] /* ty=Tensor[(1440), int8] */, %623)
}

def @func_4051(%var_4049: Tensor[(13, 7, 6), float64]) -> Tensor[(13, 7, 6), float64] {
  @func_4048(%var_4049) /* ty=Tensor[(13, 7, 6), float64] */
}

def @func_5683(%var_5680: Tensor[(24), int8], %var_5681: Tensor[(2940), uint32], %var_5682: Tensor[(1, 546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) {
  @func_5678(%var_5680, %var_5681, %var_5682) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) */
}

def @func_5696() -> Tensor[(4, 3, 8), bool] {
  @func_5694() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_6252() -> Tensor[(4, 3, 8), bool] {
  @func_6250() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_7997() -> (Tensor[(10, 10, ?), float32], Tensor[(3, 11, 10), float64], Tensor[(330), float32]) {
  @func_7995() /* ty=(Tensor[(10, 10, ?), float32], Tensor[(3, 11, 10), float64], Tensor[(330), float32]) */
}

def @func_2966(%var_2961: Tensor[(14, 5, 10), float64], %var_2962: Tensor[(3136), int32], %var_2963: Tensor[(234), int8], %var_2964: Tensor[(330), float32], %var_2965: Tensor[(15, 196), uint32]) -> (Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) {
  %647 = fn (%var_2910: Tensor[(14, 5, 10), float64], %var_2926: Tensor[(3136), int32], %var_2927: Tensor[(234), int8], %var_2933: Tensor[(330), float32], %var_2940: Tensor[(15, 196), uint32]) -> (Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) {
    %624 = cast(%var_2910, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
    %625 = cast(%var_2926, dtype="int32") /* ty=Tensor[(3136), int32] */;
    %626 = cast(%var_2926, dtype="int32") /* ty=Tensor[(3136), int32] */;
    %627 = cast(%var_2927, dtype="int8") /* ty=Tensor[(234), int8] */;
    %628 = cast(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %629 = reshape(%625, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), int32] */;
    %630 = reshape(%626, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), int32] */;
    %631 = reshape(%627, newshape=[1, 234]) /* ty=Tensor[(1, 234), int8] */;
    %632 = reshape(%628, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %633 = @func_1604(%629, %630, %631, %632) /* ty=(Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) */;
    %634 = cast(%var_2933, dtype="int64") /* ty=Tensor[(330), int64] */;
    %635 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %636 = cast(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="int64") /* ty=Tensor[(330), int64] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?), int64] */;
    %638 = cast(%var_2940, dtype="uint32") /* ty=Tensor[(15, 196), uint32] */;
    %639 = cast(%var_2940, dtype="uint32") /* ty=Tensor[(15, 196), uint32] */;
    %640 = reshape(%638, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
    %641 = reshape(%639, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
    %642 = @func_1454(%640, %641) /* ty=(Tensor[(14, 14, 15), uint32],) */;
    %643 = log10(%624) /* ty=Tensor[(14, 5, 10), float64] */;
    %644 = %633.4;
    %645 = logical_xor(%636, %637) /* ty=Tensor[(330), int64] */;
    %646 = %642.0;
    (%643, %644, %var_2926, %var_2927, %645, %646, %var_2940)
  };
  %647(%var_2961, %var_2962, %var_2963, %var_2964, %var_2965) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */
}

def @func_6118(%var_6116: Tensor[(4, 13, 9), bool], %var_6117: Tensor[(4, 13, 9), bool]) -> (Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) {
  @func_6114(%var_6116, %var_6117) /* ty=(Tensor[(4, 13, 9), bool], Tensor[(4, 13, 9), float32]) */
}

def @func_6480() -> Tensor[(10, 10, ?), float32] {
  %648 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
  %648.1
}

def @func_5950(%var_5914: Tensor[(90, 20), float64], %var_5930: int8, %var_5934: Tensor[(546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(15, 15, 8), float32], Tensor[(90, 20), float64], Tensor[(13, 7, 6), float64], int8, Tensor[(2, 12), int8], Tensor[(2940), uint32], Tensor[(39, 6), int8], Tensor[(546), float64]) {
  %649 = cast(%var_5914, dtype="float64") /* ty=Tensor[(90, 20), float64] */;
  %650 = reshape(%649, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %651 = @func_170(%650) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %652 = cast(%var_5930, dtype="int8") /* ty=int8 */;
  %653 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 12), int8] */, dtype="int8") /* ty=Tensor[(2, 12), int8] */;
  %654 = cast(meta[relay.Constant][56] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %655 = cast(meta[relay.Constant][57] /* ty=Tensor[(39, 6), int8] */, dtype="int8") /* ty=Tensor[(39, 6), int8] */;
  %656 = cast(%var_5934, dtype="float64") /* ty=Tensor[(546), float64] */;
  %657 = reshape(%652, newshape=[]) /* ty=int8 */;
  %658 = reshape(%653, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %659 = reshape(%654, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %660 = reshape(%655, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %661 = reshape(%656, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %662 = @func_4431(%657, %658, %659, %660, %661) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %663 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
  %664 = %651.0;
  %665 = %662.5;
  (%663, %664, %var_5914, %665, %var_5930, meta[relay.Constant][55] /* ty=Tensor[(2, 12), int8] */, meta[relay.Constant][56] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][57] /* ty=Tensor[(39, 6), int8] */, %var_5934)
}

def @func_5448(%var_5377: Tensor[(12, 10, 9), float32], %var_5381: int8, %var_5384: Tensor[(117, 2), int8], %var_5443: Tensor[(10, 2940), float64]) -> (int8, Tensor[(24), int8], Tensor[(546), float64], Tensor[(117, 2), bool], Tensor[(12, 10, 9), float64], Tensor[(14, 14, 15), uint32], Tensor[(?, 2940), bool], Tensor[(10, 2940), uint16]) {
  %666 = cast(%var_5381, dtype="int8") /* ty=int8 */;
  %667 = cast(meta[relay.Constant][58] /* ty=Tensor[(24), int8] */, dtype="int8") /* ty=Tensor[(24), int8] */;
  %668 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2940), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %669 = cast(%var_5384, dtype="int8") /* ty=Tensor[(117, 2), int8] */;
  %670 = cast(meta[relay.Constant][59] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %671 = reshape(%666, newshape=[]) /* ty=int8 */;
  %672 = reshape(%667, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %673 = reshape(%668, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %674 = reshape(%669, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %675 = reshape(%670, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %676 = @func_4431(%671, %672, %673, %674, %675) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %677 = %676.4;
  %678 = cast(%677, dtype="bool") /* ty=Tensor[(234), bool] */;
  %679 = shape_of(%var_5384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%var_5384, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %682 = cast(%var_5377, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %683 = sinh(%682) /* ty=Tensor[(12, 10, 9), float32] */;
  %684 = cast(%var_5377, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %688 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2940), uint32] */, dtype="float32") /* ty=Tensor[(1, 2940), float32] */;
  %689 = log2(%688) /* ty=Tensor[(1, 2940), float32] */;
  %690 = cast(%689, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %691 = cast(%689, dtype="uint32") /* ty=Tensor[(1, 2940), uint32] */;
  %692 = reshape(%690, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %693 = reshape(%691, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %694 = @func_1454(%692, %693) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %695 = cast(%689, dtype="float64") /* ty=Tensor[(1, 2940), float64] */;
  %696 = sinh(%695) /* ty=Tensor[(1, 2940), float64] */;
  %697 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2940), uint32] */, dtype="bool") /* ty=Tensor[(1, 2940), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(1, 2940), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %701 = cast(%689, dtype="float64") /* ty=Tensor[(1, 2940), float64] */;
  %702 = sigmoid(%701) /* ty=Tensor[(1, 2940), float64] */;
  %703 = cast(%702, dtype="uint16") /* ty=Tensor[(1, 2940), uint16] */;
  %704 = cast(%var_5443, dtype="uint16") /* ty=Tensor[(10, 2940), uint16] */;
  %705 = equal(%680, %681) /* ty=Tensor[(117, 2), bool] */;
  %706 = subtract(%686, %687) /* ty=Tensor[(12, 10, 9), float64] */;
  %707 = %694.0;
  %708 = less_equal(%699, %700) /* ty=Tensor[(?, 2940), bool] */;
  %709 = bitwise_and(%703, %704) /* ty=Tensor[(10, 2940), uint16] */;
  (%var_5381, meta[relay.Constant][58] /* ty=Tensor[(24), int8] */, meta[relay.Constant][59] /* ty=Tensor[(546), float64] */, %705, %706, %707, %708, %709)
}

def @func_986(%var_974: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), bool], Tensor[(3, 11, 10), float64]) {
  %710 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 11, 10), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %711 = shape_of(%var_974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_974, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = cast(%var_974, dtype="float64") /* ty=Tensor[(3, 11, 10), float64] */;
  %715 = less_equal(%712, %713) /* ty=Tensor[(3, 11, 10), bool] */;
  %716 = sin(%714) /* ty=Tensor[(3, 11, 10), float64] */;
  (%715, %716)
}

def @func_6186() -> Tensor[(4, 3, 8), bool] {
  %717 = fn () -> Tensor[(4, 3, 8), bool] {
    @func_5694() /* ty=Tensor[(4, 3, 8), bool] */
  };
  %717() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_5151(%var_5120: Tensor[(13, 11, 13), float32], %var_5130: Tensor[(945), float64], %var_5135: Tensor[(3136), int32], %var_5136: Tensor[(234, 1), int8], %var_5137: Tensor[(330), float32], %var_5138: Tensor[(2940), uint32]) -> (Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) {
  %718 = cast(%var_5120, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %719 = cast(meta[relay.Constant][62] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %720 = cast(%var_5130, dtype="float64") /* ty=Tensor[(945), float64] */;
  %721 = reshape(%719, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
  %722 = reshape(%720, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %723 = @func_3379(%721, %722) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
  %724 = cast(meta[relay.Constant][63] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %725 = cast(%var_5135, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %726 = cast(%var_5136, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
  %727 = cast(%var_5137, dtype="float32") /* ty=Tensor[(330), float32] */;
  %728 = cast(%var_5138, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %729 = reshape(%724, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %730 = reshape(%725, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %731 = reshape(%726, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %732 = reshape(%727, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %733 = reshape(%728, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %734 = @func_2960(%729, %730, %731, %732, %733) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %735 = asin(%718) /* ty=Tensor[(13, 11, 13), float32] */;
  %736 = %723.0;
  %737 = %734.3;
  (%735, %736, meta[relay.Constant][62] /* ty=Tensor[(80), uint64] */, %var_5130, %737, meta[relay.Constant][63] /* ty=Tensor[(700), float64] */, %var_5135, %var_5136, %var_5137, %var_5138)
}

def @func_8352(%var_8347: Tensor[(14, 5, 13), uint8]) -> Tensor[(14, 5, 13), uint8] {
  %738 = cast(meta[relay.Constant][64] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %739 = cast(%var_8347, dtype="uint8") /* ty=Tensor[(14, 5, 13), uint8] */;
  subtract(%738, %739) /* ty=Tensor[(14, 5, 13), uint8] */
}

def @func_7026() -> Tensor[(4, 3, 8), bool] {
  %740 = fn () -> Tensor[(4, 3, 8), bool] {
    @func_6521() /* ty=Tensor[(4, 3, 8), bool] */
  };
  %740() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8355(%var_8353: Tensor[(14, 5, 13), uint8]) -> Tensor[(14, 5, 13), uint8] {
  @func_8352(%var_8353) /* ty=Tensor[(14, 5, 13), uint8] */
}

def @func_7322() -> (Tensor[(4, 3, 8), bool],) {
  @func_7320() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @main() -> Tensor[(4, 3, 8), float64] {
  %741 = @func_6803() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  acos(%743) /* ty=Tensor[(4, 3, 8), float64] */
}

def @func_7912(%var_7907: Tensor[(3, 14, 16), uint8], %var_7908: Tensor[(3, 14, 16), uint8], %var_7909: Tensor[(810), int16], %var_7910: Tensor[(3840), uint32], %var_7911: Tensor[(945), float64]) -> (Tensor[(3, 14, 16), uint8], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(810), uint32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64]) {
  %767 = fn (%var_7873: Tensor[(3, 14, 16), uint8], %var_7874: Tensor[(3, 14, 16), uint8], %var_7879: Tensor[(810), int16], %var_7891: Tensor[(3840), uint32], %var_7904: Tensor[(945), float64]) -> (Tensor[(3, 14, 16), uint8], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(810), uint32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64]) {
    %744 = cast(%var_7874, dtype="uint8") /* ty=Tensor[(3, 14, 16), uint8] */;
    %745 = shape_of(%var_7873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%var_7873, dtype="uint8") /* ty=Tensor[(3, 14, 16), uint8] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %748 = cast(%var_7891, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %749 = reshape(%748, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), uint32] */;
    %750 = @func_2456(%749) /* ty=(Tensor[(15, 16, 16), uint32],) */;
    %751 = cast(%var_7879, dtype="int16") /* ty=Tensor[(810), int16] */;
    %752 = reshape(%751, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), int16] */;
    %753 = @func_2616(%752) /* ty=Tensor[(9, 6, 15), int16] */;
    %754 = cast(%753, dtype="uint32") /* ty=Tensor[(9, 6, 15), uint32] */;
    %755 = shape_of(%var_7879, dtype="int32") /* ty=Tensor[(1), int32] */;
    %756 = cast(%var_7879, dtype="uint32") /* ty=Tensor[(810), uint32] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %758 = cast(meta[relay.Constant][65] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %759 = cast(%var_7904, dtype="float64") /* ty=Tensor[(945), float64] */;
    %760 = reshape(%758, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint64] */;
    %761 = reshape(%759, newshape=[945]) /* ty=Tensor[(945), float64] */;
    %762 = @func_3379(%760, %761) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */;
    %763 = bitwise_and(%746, %747) /* ty=Tensor[(3, 14, 16), uint8] */;
    %764 = %750.0;
    %765 = left_shift(%756, %757) /* ty=Tensor[(810), uint32] */;
    %766 = %762.0;
    (%763, %764, %var_7891, %765, %766, meta[relay.Constant][65] /* ty=Tensor[(80), uint64] */, %var_7904)
  };
  %767(%var_7907, %var_7908, %var_7909, %var_7910, %var_7911) /* ty=(Tensor[(3, 14, 16), uint8], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], Tensor[(810), uint32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64]) */
}

def @func_8474(%var_8471: float32, %var_8472: Tensor[(11, 12, 9), float32], %var_8473: Tensor[(154, 10), float64]) -> (Tensor[(11, 12, 9), float64], Tensor[(10, 14, 11), float64], Tensor[(154, 10), float64]) {
  @func_8469(%var_8471, %var_8472, %var_8473) /* ty=(Tensor[(11, 12, 9), float64], Tensor[(10, 14, 11), float64], Tensor[(154, 10), float64]) */
}

def @func_6432() -> (Tensor[(10, 10, 9), float64], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(784), float64]) {
  @func_6430() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(784), float64]) */
}

def @func_4048(%var_4043: Tensor[(13, 7, 6), float64]) -> Tensor[(13, 7, 6), float64] {
  %768 = cast(%var_4043, dtype="float64") /* ty=Tensor[(13, 7, 6), float64] */;
  atanh(%768) /* ty=Tensor[(13, 7, 6), float64] */
}

def @func_7385() -> (Tensor[(4, 3, 8), bool],) {
  @func_7383() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_5159(%var_5153: Tensor[(13, 11, 13), float32], %var_5154: Tensor[(945), float64], %var_5155: Tensor[(3136), int32], %var_5156: Tensor[(234, 1), int8], %var_5157: Tensor[(330), float32], %var_5158: Tensor[(2940), uint32]) -> (Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) {
  @func_5151(%var_5153, %var_5154, %var_5155, %var_5156, %var_5157, %var_5158) /* ty=(Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) */
}

def @func_8714(%var_8708: Tensor[(24, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(2940), uint32], Tensor[(24, 1), int8], Tensor[(2940), uint32], Tensor[(546), float64]) {
  %769 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %770 = cast(%var_8708, dtype="int8") /* ty=Tensor[(24, 1), int8] */;
  %771 = cast(meta[relay.Constant][66] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %772 = cast(meta[relay.Constant][67] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %773 = reshape(%770, newshape=[24]) /* ty=Tensor[(24), int8] */;
  %774 = reshape(%771, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %775 = reshape(%772, newshape=[1, 546]) /* ty=Tensor[(1, 546), float64] */;
  %776 = @func_5678(%773, %774, %775) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) */;
  %777 = %769.0;
  %778 = %776.4;
  (%777, %778, %var_8708, meta[relay.Constant][66] /* ty=Tensor[(2940), uint32] */, meta[relay.Constant][67] /* ty=Tensor[(546), float64] */)
}

def @func_1472(%var_1470: Tensor[(9, 15, 7), float64]) -> Tensor[(9, 15, 7), float64] {
  @func_1469(%var_1470) /* ty=Tensor[(9, 15, 7), float64] */
}

def @func_3382(%var_3380: Tensor[(5, 8, 2), uint64], %var_3381: Tensor[(945), float64]) -> (Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) {
  %787 = fn (%var_3371: Tensor[(5, 8, 2), uint64], %var_3377: Tensor[(945), float64]) -> (Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) {
    %779 = cast(meta[relay.Constant][68] /* ty=Tensor[(5, 8, 2), uint64] */, dtype="uint64") /* ty=Tensor[(5, 8, 2), uint64] */;
    %780 = shape_of(%var_3371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%var_3371, dtype="uint64") /* ty=Tensor[(5, 8, 2), uint64] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %783 = cast(%var_3377, dtype="float64") /* ty=Tensor[(945), float64] */;
    %784 = reshape(%783, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
    %785 = multiply(%781, %782) /* ty=Tensor[(5, 8, 2), uint64] */;
    %786 = @func_1469(%784) /* ty=Tensor[(9, 15, 7), float64] */;
    (%785, %786, %var_3377)
  };
  %787(%var_3380, %var_3381) /* ty=(Tensor[(5, 8, 2), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64]) */
}

def @func_8290() -> (Tensor[(4, 3, 8), bool],) {
  %789 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %788 = @func_6250() /* ty=Tensor[(4, 3, 8), bool] */;
    (%788,)
  };
  %789() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_6854(%var_6852: Tensor[(378), uint64]) -> (Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) {
  @func_6851(%var_6852) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(1440), int8], Tensor[(1440), int8], Tensor[(4, 3, 8), bool], Tensor[(378), float64]) */
}

def @func_5454(%var_5450: Tensor[(12, 10, 9), float32], %var_5451: int8, %var_5452: Tensor[(117, 2), int8], %var_5453: Tensor[(10, 2940), float64]) -> (int8, Tensor[(24), int8], Tensor[(546), float64], Tensor[(117, 2), bool], Tensor[(12, 10, 9), float64], Tensor[(14, 14, 15), uint32], Tensor[(?, 2940), bool], Tensor[(10, 2940), uint16]) {
  @func_5448(%var_5450, %var_5451, %var_5452, %var_5453) /* ty=(int8, Tensor[(24), int8], Tensor[(546), float64], Tensor[(117, 2), bool], Tensor[(12, 10, 9), float64], Tensor[(14, 14, 15), uint32], Tensor[(?, 2940), bool], Tensor[(10, 2940), uint16]) */
}

def @func_1165(%var_1163: float64, %var_1164: Tensor[(11, 13, 9), float64]) -> Tensor[(11, 13, 9), float64] {
  @func_1161(%var_1163, %var_1164) /* ty=Tensor[(11, 13, 9), float64] */
}

def @func_4907(%var_4905: Tensor[(4, 6, 7), float32], %var_4906: Tensor[(396), float32]) -> (Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) {
  @func_4903(%var_4905, %var_4906) /* ty=(Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) */
}

def @func_4431(%var_4409: int8, %var_4410: Tensor[(1, 3, 8), int8], %var_4421: Tensor[(30, 98), uint32], %var_4422: Tensor[(234), int8], %var_4425: Tensor[(91, 6), float64]) -> (Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) {
  %790 = cast(%var_4409, dtype="bool") /* ty=bool */;
  %791 = cast(%var_4410, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %792 = cast(%var_4409, dtype="int64") /* ty=int64 */;
  %793 = cast(meta[relay.Constant][69] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
  %794 = cast(%var_4421, dtype="uint32") /* ty=Tensor[(30, 98), uint32] */;
  %795 = cast(%var_4422, dtype="int8") /* ty=Tensor[(234), int8] */;
  %796 = reshape(%792, newshape=[]) /* ty=int64 */;
  %797 = reshape(%793, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
  %798 = reshape(%794, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
  %799 = reshape(%795, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
  %800 = @func_2291(%796, %797, %798, %799) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
  %801 = cast(%var_4425, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %802 = reshape(%801, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %803 = equal(%790, %791) /* ty=Tensor[(1, 3, 8), bool] */;
  %804 = %800.4;
  %805 = @func_4048(%802) /* ty=Tensor[(13, 7, 6), float64] */;
  (%803, %804, meta[relay.Constant][69] /* ty=Tensor[(1440), bool] */, %var_4421, %var_4422, %805, %var_4425)
}

def @func_7518() -> (Tensor[(4, 3, 8), bool],) {
  %807 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %806 = @func_6794() /* ty=Tensor[(4, 3, 8), bool] */;
    (%806,)
  };
  %807() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_7108() -> (Tensor[(4, 3, 8), bool],) {
  %809 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %808 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
    (%808,)
  };
  %809() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_5999(%var_5996: Tensor[(810), int16], %var_5997: Tensor[(3840), uint32], %var_5998: Tensor[(396, 1), float32]) -> (Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) {
  %837 = fn (%var_5963: Tensor[(810), int16], %var_5964: Tensor[(3840), uint32], %var_5981: Tensor[(396, 1), float32]) -> (Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) {
    %810 = cast(%var_5963, dtype="int16") /* ty=Tensor[(810), int16] */;
    %811 = cast(%var_5964, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %812 = reshape(%810, newshape=[810]) /* ty=Tensor[(810), int16] */;
    %813 = reshape(%811, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
    %814 = @func_4018(%812, %813) /* ty=(Tensor[(7, 14, 3), float64], Tensor[(9, 6, 15), int16], Tensor[(810), int16], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */;
    %815 = %814.3;
    %816 = cast(%815, dtype="int16") /* ty=Tensor[(15, 16, 16), int16] */;
    %817 = shape_of(%var_5964, dtype="int32") /* ty=Tensor[(1), int32] */;
    %818 = cast(%var_5964, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?), int16] */;
    %820 = bitwise_or(%818, %819) /* ty=Tensor[(3840), int16] */;
    %821 = cast(%820, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %822 = reshape(%821, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
    %823 = @func_5856(%822) /* ty=(Tensor[(4, 3, 8), float32], Tensor[(4, 3, 8), float64], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32]) */;
    %824 = cast(meta[relay.Constant][70] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %825 = cast(%var_5981, dtype="float32") /* ty=Tensor[(396, 1), float32] */;
    %826 = reshape(%824, newshape=[4, 6, 7]) /* ty=Tensor[(4, 6, 7), float32] */;
    %827 = reshape(%825, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %828 = @func_4903(%826, %827) /* ty=(Tensor[(4, 6, 7), float32], Tensor[(1, 378), uint64], Tensor[(396), float32], Tensor[(60, 24), int8]) */;
    %829 = cast(%var_5964, dtype="bool") /* ty=Tensor[(3840), bool] */;
    %830 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%815, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %833 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
    %834 = %823.0;
    %835 = %828.2;
    %836 = logical_and(%831, %832) /* ty=Tensor[(15, 16, 16), bool] */;
    (%833, %var_5963, %820, %834, %835, meta[relay.Constant][70] /* ty=Tensor[(168), float32] */, %var_5981, %836)
  };
  %837(%var_5996, %var_5997, %var_5998) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) */
}

def @func_1610(%var_1606: Tensor[(14, 16, 14), int32], %var_1607: Tensor[(14, 16, 14), int32], %var_1608: Tensor[(1, 234), int8], %var_1609: Tensor[(330), float32]) -> (Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) {
  @func_1604(%var_1606, %var_1607, %var_1608, %var_1609) /* ty=(Tensor[(14, 16, 14), int32], Tensor[(?, 234), float64], Tensor[(3, 11, 10), float64], Tensor[(330), float32], Tensor[(14, 16, 14), float32]) */
}

def @func_8695(%var_8694: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), bool],) {
  %844 = fn (%var_8666: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), bool],) {
    %838 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
    %839 = cast(%var_8666, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
    %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(%838, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %843 = not_equal(%841, %842) /* ty=Tensor[(4, 3, 8), bool] */;
    (%843,)
  };
  %844(%var_8694) /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_6801() -> (Tensor[(4, 3, 8), bool],) {
  %845 = @func_5694() /* ty=Tensor[(4, 3, 8), bool] */;
  (%845,)
}

def @func_6457() -> Tensor[(4, 3, 8), bool] {
  %846 = fn () -> Tensor[(4, 3, 8), bool] {
    @func_6250() /* ty=Tensor[(4, 3, 8), bool] */
  };
  %846() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_8171(%var_8156: Tensor[(4, 3, 8), bool]) -> (Tensor[(4, 3, 8), int16],) {
  %847 = @func_8121() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %848 = %847.0;
  %849 = cast(%var_8156, dtype="int16") /* ty=Tensor[(4, 3, 8), int16] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="int16") /* ty=Tensor[(4, 3, 8), int16] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %853 = maximum(%851, %852) /* ty=Tensor[(4, 3, 8), int16] */;
  (%853,)
}

def @func_3179(%var_3178: Tensor[(10, 14, 11), float64]) -> (Tensor[(10, 14, 11), float64],) {
  %856 = fn (%var_3173: Tensor[(10, 14, 11), float64]) -> (Tensor[(10, 14, 11), float64],) {
    %854 = cast(%var_3173, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
    %855 = sigmoid(%854) /* ty=Tensor[(10, 14, 11), float64] */;
    (%855,)
  };
  %856(%var_3178) /* ty=(Tensor[(10, 14, 11), float64],) */
}

def @func_1469(%var_1465: Tensor[(9, 15, 7), float64]) -> Tensor[(9, 15, 7), float64] {
  %857 = cast(%var_1465, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  acosh(%857) /* ty=Tensor[(9, 15, 7), float64] */
}

def @func_7301(%var_7296: Tensor[(10, 10, 11), float32], %var_7297: Tensor[(810), int16], %var_7298: Tensor[(3840), uint32], %var_7299: Tensor[(780), float32], %var_7300: Tensor[(378), uint64]) -> (Tensor[(10, 10, 11), int32], Tensor[(396), float32], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(396), float32], Tensor[(15, 15, 8), float32], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64]) {
  %883 = fn (%var_7249: Tensor[(10, 10, 11), float32], %var_7273: Tensor[(810), int16], %var_7274: Tensor[(3840), uint32], %var_7280: Tensor[(780), float32], %var_7281: Tensor[(378), uint64]) -> (Tensor[(10, 10, 11), int32], Tensor[(396), float32], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(396), float32], Tensor[(15, 15, 8), float32], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64]) {
    %858 = @func_6286() /* ty=(Tensor[(10, 10, 9), float64], Tensor[(10, 10, ?), float32]) */;
    %859 = %858.1;
    %860 = cast(%859, dtype="int32") /* ty=Tensor[(10, 10, ?), int32] */;
    %861 = cast(%var_7249, dtype="int32") /* ty=Tensor[(10, 10, 11), int32] */;
    %862 = cast(%var_7273, dtype="int16") /* ty=Tensor[(810), int16] */;
    %863 = cast(%var_7274, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %864 = cast(meta[relay.Constant][71] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %865 = reshape(%862, newshape=[810]) /* ty=Tensor[(810), int16] */;
    %866 = reshape(%863, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
    %867 = reshape(%864, newshape=[396, 1]) /* ty=Tensor[(396, 1), float32] */;
    %868 = @func_5995(%865, %866, %867) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(810), int16], Tensor[(3840), int16], Tensor[(4, 3, 8), float32], Tensor[(396), float32], Tensor[(168), float32], Tensor[(396, 1), float32], Tensor[(15, 16, 16), bool]) */;
    %869 = cast(%var_7280, dtype="float32") /* ty=Tensor[(780), float32] */;
    %870 = cast(%var_7274, dtype="uint32") /* ty=Tensor[(3840), uint32] */;
    %871 = cast(%var_7281, dtype="uint64") /* ty=Tensor[(378), uint64] */;
    %872 = cast(meta[relay.Constant][72] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
    %873 = cast(meta[relay.Constant][73] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %874 = reshape(%869, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
    %875 = reshape(%870, newshape=[3840]) /* ty=Tensor[(3840), uint32] */;
    %876 = reshape(%871, newshape=[378, 1]) /* ty=Tensor[(378, 1), uint64] */;
    %877 = reshape(%872, newshape=[20, 72]) /* ty=Tensor[(20, 72), int8] */;
    %878 = reshape(%873, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %879 = @func_5627(%874, %875, %876, %877, %878) /* ty=(Tensor[(6, 10, 13), int32], Tensor[(6, 10, 13), bool], Tensor[(15, 16, 16), uint32], Tensor[(3840), uint32], int8, Tensor[(378, 1), uint64], Tensor[(20, 72), int8], Tensor[(6, 10, 13), float64], Tensor[(1440), int8], Tensor[(80), uint64], Tensor[(80), uint64], Tensor[(15, 15, 8), float32], Tensor[(1800), float64]) */;
    %880 = add(%860, %861) /* ty=Tensor[(10, 10, 11), int32] */;
    %881 = %868.4;
    %882 = %879.11;
    (%880, %881, %var_7273, %var_7274, meta[relay.Constant][71] /* ty=Tensor[(396), float32] */, %882, %var_7280, %var_7281, meta[relay.Constant][72] /* ty=Tensor[(1440), int8] */, meta[relay.Constant][73] /* ty=Tensor[(1800), float64] */)
  };
  %883(%var_7296, %var_7297, %var_7298, %var_7299, %var_7300) /* ty=(Tensor[(10, 10, 11), int32], Tensor[(396), float32], Tensor[(810), int16], Tensor[(3840), uint32], Tensor[(396), float32], Tensor[(15, 15, 8), float32], Tensor[(780), float32], Tensor[(378), uint64], Tensor[(1440), int8], Tensor[(1800), float64]) */
}

def @func_7383() -> (Tensor[(4, 3, 8), bool],) {
  %884 = @func_6258() /* ty=Tensor[(4, 3, 8), bool] */;
  (%884,)
}

def @func_4793(%var_4733: Tensor[(2, 1, 9), uint16], %var_4734: Tensor[(2, 8, 9), uint16], %var_4752: Tensor[(3, 980), uint32]) -> (Tensor[(2, 8, 9), uint16], Tensor[(14, 5, 10), float64], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), float32], Tensor[(3, 980), uint32], Tensor[(14, 14, 15), uint32]) {
  %885 = cast(%var_4733, dtype="uint16") /* ty=Tensor[(2, 1, 9), uint16] */;
  %886 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(2, 8, 9), uint16] */;
  %887 = cast(meta[relay.Constant][74] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %888 = cast(meta[relay.Constant][75] /* ty=Tensor[(3136), int32] */, dtype="int32") /* ty=Tensor[(3136), int32] */;
  %889 = cast(meta[relay.Constant][76] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %890 = cast(meta[relay.Constant][77] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %891 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %892 = reshape(%887, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), float64] */;
  %893 = reshape(%888, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
  %894 = reshape(%889, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %895 = reshape(%890, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %896 = reshape(%891, newshape=[15, 196]) /* ty=Tensor[(15, 196), uint32] */;
  %897 = @func_2960(%892, %893, %894, %895, %896) /* ty=(Tensor[(14, 5, 10), float64], Tensor[(14, 16, 14), float32], Tensor[(3136), int32], Tensor[(234), int8], Tensor[(330), int64], Tensor[(14, 14, 15), uint32], Tensor[(15, 196), uint32]) */;
  %898 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %899 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(3, 980), uint32] */;
  %900 = reshape(%898, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %901 = reshape(%899, newshape=[14, 14, 15]) /* ty=Tensor[(14, 14, 15), uint32] */;
  %902 = @func_1454(%900, %901) /* ty=(Tensor[(14, 14, 15), uint32],) */;
  %903 = bitwise_or(%885, %886) /* ty=Tensor[(2, 8, 9), uint16] */;
  %904 = %897.0;
  %905 = %902.0;
  (%903, %904, meta[relay.Constant][74] /* ty=Tensor[(700), float64] */, meta[relay.Constant][75] /* ty=Tensor[(3136), int32] */, meta[relay.Constant][76] /* ty=Tensor[(234), int8] */, meta[relay.Constant][77] /* ty=Tensor[(330), float32] */, %var_4752, %905)
}

def @func_245(%var_223: Tensor[(5, 2, 16), uint8], %var_224: Tensor[(5, 2, 16), uint8], %var_229: Tensor[(1800), float64]) -> (Tensor[(5, 2, 16), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(15, 15, 8), float32]) {
  %906 = cast(%var_224, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %907 = shape_of(%var_223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%var_223, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %910 = cast(%var_229, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %911 = reshape(%910, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %912 = @func_170(%911) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %913 = cast(%var_229, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %914 = reshape(%913, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %915 = @func_170(%914) /* ty=(Tensor[(15, 15, 8), float32],) */;
  %916 = less(%908, %909) /* ty=Tensor[(5, 2, 16), bool] */;
  %917 = %912.0;
  %918 = %915.0;
  (%916, %917, %var_229, %918)
}

def @func_5748() -> Tensor[(4, 3, 8), bool] {
  @func_5746() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_6796() -> Tensor[(4, 3, 8), bool] {
  @func_6794() /* ty=Tensor[(4, 3, 8), bool] */
}

def @func_4655(%var_4642: Tensor[(7, 7, 16), float64]) -> (Tensor[(7, 7, 16), float64],) {
  %919 = cast(%var_4642, dtype="float64") /* ty=Tensor[(7, 7, 16), float64] */;
  %920 = rsqrt(%919) /* ty=Tensor[(7, 7, 16), float64] */;
  (%920,)
}

def @func_6688() -> (Tensor[(4, 3, 8), bool],) {
  %922 = fn () -> (Tensor[(4, 3, 8), bool],) {
    %921 = @func_6250() /* ty=Tensor[(4, 3, 8), bool] */;
    (%921,)
  };
  %922() /* ty=(Tensor[(4, 3, 8), bool],) */
}

def @func_7826(%var_7824: Tensor[(1859), float32], %var_7825: Tensor[(1568, 2), int32]) -> (Tensor[(4, 3, 8), float32], Tensor[(700), float64], Tensor[(1859), float32], Tensor[(1568, 2), int32], Tensor[(234), int8], Tensor[(330, 1), float32], Tensor[(1470, 2), uint32], Tensor[(945), float64]) {
  %943 = fn (%var_7782: Tensor[(1859), float32], %var_7784: Tensor[(1568, 2), int32]) -> (Tensor[(4, 3, 8), float32], Tensor[(700), float64], Tensor[(1859), float32], Tensor[(1568, 2), int32], Tensor[(234), int8], Tensor[(330, 1), float32], Tensor[(1470, 2), uint32], Tensor[(945), float64]) {
    %923 = @func_6801() /* ty=(Tensor[(4, 3, 8), bool],) */;
    %924 = %923.0;
    %925 = cast(%924, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %926 = cast(%var_7782, dtype="float32") /* ty=Tensor[(1859), float32] */;
    %927 = cast(meta[relay.Constant][78] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
    %928 = cast(%var_7784, dtype="int32") /* ty=Tensor[(1568, 2), int32] */;
    %929 = cast(meta[relay.Constant][79] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
    %930 = cast(meta[relay.Constant][80] /* ty=Tensor[(330, 1), float32] */, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
    %931 = cast(meta[relay.Constant][81] /* ty=Tensor[(1470, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1470, 2), uint32] */;
    %932 = reshape(%926, newshape=[13, 11, 13]) /* ty=Tensor[(13, 11, 13), float32] */;
    %933 = reshape(%927, newshape=[945]) /* ty=Tensor[(945), float64] */;
    %934 = reshape(%928, newshape=[3136]) /* ty=Tensor[(3136), int32] */;
    %935 = reshape(%929, newshape=[234, 1]) /* ty=Tensor[(234, 1), int8] */;
    %936 = reshape(%930, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %937 = reshape(%931, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
    %938 = @func_5151(%932, %933, %934, %935, %936, %937) /* ty=(Tensor[(13, 11, 13), float32], Tensor[(5, 8, 2), uint64], Tensor[(80), uint64], Tensor[(945), float64], Tensor[(234), int8], Tensor[(700), float64], Tensor[(3136), int32], Tensor[(234, 1), int8], Tensor[(330), float32], Tensor[(2940), uint32]) */;
    %939 = cast(meta[relay.Constant][78] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
    %940 = log2(%925) /* ty=Tensor[(4, 3, 8), float32] */;
    %941 = %938.5;
    %942 = asinh(%939) /* ty=Tensor[(945), float64] */;
    (%940, %941, %var_7782, %var_7784, meta[relay.Constant][79] /* ty=Tensor[(234), int8] */, meta[relay.Constant][80] /* ty=Tensor[(330, 1), float32] */, meta[relay.Constant][81] /* ty=Tensor[(1470, 2), uint32] */, %942)
  };
  %943(%var_7824, %var_7825) /* ty=(Tensor[(4, 3, 8), float32], Tensor[(700), float64], Tensor[(1859), float32], Tensor[(1568, 2), int32], Tensor[(234), int8], Tensor[(330, 1), float32], Tensor[(1470, 2), uint32], Tensor[(945), float64]) */
}

def @func_5678(%var_5673: Tensor[(24), int8], %var_5674: Tensor[(2940), uint32], %var_5676: Tensor[(1, 546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(234), int8], int8, Tensor[(24), int8], Tensor[(2940), uint32], Tensor[(234), int8], Tensor[(1, 546), float64]) {
  %944 = cast(meta[relay.Constant][82] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %945 = cast(%var_5673, dtype="int8") /* ty=Tensor[(24), int8] */;
  %946 = cast(%var_5674, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
  %947 = cast(meta[relay.Constant][83] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %948 = cast(%var_5676, dtype="float64") /* ty=Tensor[(1, 546), float64] */;
  %949 = reshape(%944, newshape=[]) /* ty=int8 */;
  %950 = reshape(%945, newshape=[1, 3, 8]) /* ty=Tensor[(1, 3, 8), int8] */;
  %951 = reshape(%946, newshape=[30, 98]) /* ty=Tensor[(30, 98), uint32] */;
  %952 = reshape(%947, newshape=[234]) /* ty=Tensor[(234), int8] */;
  %953 = reshape(%948, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %954 = @func_4431(%949, %950, %951, %952, %953) /* ty=(Tensor[(1, 3, 8), bool], Tensor[(1800), float64], Tensor[(1440), bool], Tensor[(30, 98), uint32], Tensor[(234), int8], Tensor[(13, 7, 6), float64], Tensor[(91, 6), float64]) */;
  %955 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
  %956 = %954.4;
  (%955, %956, meta[relay.Constant][82] /* ty=int8 */, %var_5673, %var_5674, meta[relay.Constant][83] /* ty=Tensor[(234), int8] */, %var_5676)
}

def @func_5955(%var_5952: Tensor[(90, 20), float64], %var_5953: int8, %var_5954: Tensor[(546), float64]) -> (Tensor[(4, 3, 8), bool], Tensor[(15, 15, 8), float32], Tensor[(90, 20), float64], Tensor[(13, 7, 6), float64], int8, Tensor[(2, 12), int8], Tensor[(2940), uint32], Tensor[(39, 6), int8], Tensor[(546), float64]) {
  @func_5950(%var_5952, %var_5953, %var_5954) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(15, 15, 8), float32], Tensor[(90, 20), float64], Tensor[(13, 7, 6), float64], int8, Tensor[(2, 12), int8], Tensor[(2940), uint32], Tensor[(39, 6), int8], Tensor[(546), float64]) */
}

def @func_6779() -> Tensor[(4, 3, 8), bool] {
  %957 = @func_5806() /* ty=(Tensor[(4, 3, 8), bool],) */;
  %957.0
}

def @func_6910(%var_6907: Tensor[(56, 14), float64], %var_6908: int64, %var_6909: Tensor[(234, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(56, 14), float64], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(2940), uint32], Tensor[(234, 1), int8]) {
  %974 = fn (%var_6875: Tensor[(56, 14), float64], %var_6896: int64, %var_6899: Tensor[(234, 1), int8]) -> (Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(56, 14), float64], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(2940), uint32], Tensor[(234, 1), int8]) {
    %958 = cast(%var_6875, dtype="float64") /* ty=Tensor[(56, 14), float64] */;
    %959 = reshape(%958, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float64] */;
    %960 = @func_4655(%959) /* ty=(Tensor[(7, 7, 16), float64],) */;
    %961 = cast(%var_6896, dtype="int64") /* ty=int64 */;
    %962 = cast(meta[relay.Constant][84] /* ty=Tensor[(1440), bool] */, dtype="bool") /* ty=Tensor[(1440), bool] */;
    %963 = cast(meta[relay.Constant][85] /* ty=Tensor[(2940), uint32] */, dtype="uint32") /* ty=Tensor[(2940), uint32] */;
    %964 = cast(%var_6899, dtype="int8") /* ty=Tensor[(234, 1), int8] */;
    %965 = reshape(%961, newshape=[]) /* ty=int64 */;
    %966 = reshape(%962, newshape=[15, 16, 6]) /* ty=Tensor[(15, 16, 6), bool] */;
    %967 = reshape(%963, newshape=[2940]) /* ty=Tensor[(2940), uint32] */;
    %968 = reshape(%964, newshape=[39, 6]) /* ty=Tensor[(39, 6), int8] */;
    %969 = @func_2291(%965, %966, %967, %968) /* ty=(Tensor[(1440), int8], Tensor[(15, 16, 6), uint64], Tensor[(5, 2, 16), bool], Tensor[(160), uint8], Tensor[(1800), float64], Tensor[(5, 2, 16), bool], Tensor[(14, 14, 15), uint32], Tensor[(2940), uint32], Tensor[(15, 16, 6), bool], Tensor[(9, 2, 13), int8], Tensor[(39, 6), int8], Tensor[(2, 12, 14), float64], Tensor[(2, 12, 14), uint64]) */;
    %970 = @func_5541() /* ty=Tensor[(4, 3, 8), bool] */;
    %971 = @func_5746() /* ty=Tensor[(4, 3, 8), bool] */;
    %972 = %960.0;
    %973 = %969.5;
    (%970, %971, %972, %var_6875, %973, %var_6896, meta[relay.Constant][84] /* ty=Tensor[(1440), bool] */, meta[relay.Constant][85] /* ty=Tensor[(2940), uint32] */, %var_6899)
  };
  %974(%var_6907, %var_6908, %var_6909) /* ty=(Tensor[(4, 3, 8), bool], Tensor[(4, 3, 8), bool], Tensor[(7, 7, 16), float64], Tensor[(56, 14), float64], Tensor[(5, 2, 16), bool], int64, Tensor[(1440), bool], Tensor[(2940), uint32], Tensor[(234, 1), int8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen422/build/output.py", line 2006, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:16:04] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

