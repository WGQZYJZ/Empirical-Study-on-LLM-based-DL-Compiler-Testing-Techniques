==========mod==========
#[version = "0.0.5"]
def @func_4636() -> Tensor[(14, 12, 2), float32] {
  %0 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %0.0
}

def @func_5751() -> (Tensor[(14, 12, 2), float32],) {
  %1 = @func_5108() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %2 = %1.0;
  (%2,)
}

def @func_2041(%var_2035: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
  %3 = cast(%var_2035, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  sinh(%3) /* ty=Tensor[(9, 6, 5), float64] */
}

def @func_3711(%var_3692: Tensor[(2, 13, 15), int8]) -> Tensor[(2, 13, 15), bool] {
  %4 = cast(%var_3692, dtype="bool") /* ty=Tensor[(2, 13, 15), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 15), int8] */, dtype="bool") /* ty=Tensor[(2, 13, 15), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%6, %7) /* ty=Tensor[(2, 13, 15), bool] */
}

def @func_2753(%var_2729: Tensor[(3, 12, 12), float32], %var_2735: Tensor[(260), float32], %var_2748: Tensor[(330, 3), float64]) -> (Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) {
  %8 = cast(%var_2735, dtype="float32") /* ty=Tensor[(260), float32] */;
  %9 = reshape(%8, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %10 = cast(%var_2729, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  %11 = erf(%10) /* ty=Tensor[(3, 12, 12), float32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 12), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(3, 12, 12), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = cast(%var_2748, dtype="float64") /* ty=Tensor[(330, 3), float64] */;
  %17 = reshape(%16, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float64] */;
  %18 = @func_2345(%17) /* ty=(Tensor[(11, 15, 6), float64],) */;
  %19 = @func_1769(%9) /* ty=Tensor[(4, 13, 5), float32] */;
  %20 = logical_or(%14, %15) /* ty=Tensor[(3, 12, 12), bool] */;
  %21 = %18.0;
  (%19, %var_2735, %20, %21, %var_2748)
}

def @func_1769(%var_1766: Tensor[(4, 13, 5), float32]) -> Tensor[(4, 13, 5), float32] {
  %22 = cast(%var_1766, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  rsqrt(%22) /* ty=Tensor[(4, 13, 5), float32] */
}

def @func_4658() -> Tensor[(9, 3, 8), bool] {
  %23 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  logical_or(%23, %24) /* ty=Tensor[(9, 3, 8), bool] */
}

def @main(%var_5784: Tensor[(9, 3, 8), bool], %var_5798: Tensor[(48), uint8], %var_5805: Tensor[(560), uint64], %var_5806: float64, %var_5812: Tensor[(264, 1), bool], %var_5837: Tensor[(182), float64]) -> (Tensor[(9, 3, 8), int32], Tensor[(5, 198), float64], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(260), float32], Tensor[(30, 70), bool], Tensor[(560), uint64], Tensor[(6, 11, 4), bool], Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(14, 12, 2), uint32], Tensor[(2, 13, 7), float32], Tensor[(182), float64], Tensor[(264, 1), float64]) {
  %25 = @func_4658() /* ty=Tensor[(9, 3, 8), bool] */;
  %26 = cast(%var_5784, dtype="int16") /* ty=Tensor[(9, 3, 8), int16] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="int16") /* ty=Tensor[(9, 3, 8), int16] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %30 = right_shift(%28, %29) /* ty=Tensor[(9, 3, 8), int16] */;
  %31 = cast(%25, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %36 = cast(%var_5798, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %37 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %39 = reshape(%35, newshape=[2100]) /* ty=Tensor[(2100), bool] */;
  %40 = reshape(%36, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %41 = reshape(%37, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %42 = reshape(%38, newshape=[2100]) /* ty=Tensor[(2100), bool] */;
  %43 = @func_4819(%39, %40, %41, %42) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %45 = cast(%var_5805, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %46 = cast(%var_5806, dtype="float64") /* ty=float64 */;
  %47 = reshape(%44, newshape=[30, 70]) /* ty=Tensor[(30, 70), bool] */;
  %48 = reshape(%45, newshape=[40, 14]) /* ty=Tensor[(40, 14), uint64] */;
  %49 = reshape(%46, newshape=[]) /* ty=float64 */;
  %50 = @func_4606(%47, %48, %49) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) */;
  %51 = cast(%var_5812, dtype="bool") /* ty=Tensor[(264, 1), bool] */;
  %52 = cast(%var_5812, dtype="bool") /* ty=Tensor[(264, 1), bool] */;
  %53 = reshape(%51, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %54 = reshape(%52, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %55 = @func_1009(%53, %54) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %56 = cast(%25, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %57 = cast(%var_5806, dtype="bool") /* ty=bool */;
  %58 = @func_5671() /* ty=Tensor[(14, 12, 2), float32] */;
  %59 = cast(%var_5806, dtype="uint32") /* ty=uint32 */;
  %60 = cast(%58, dtype="uint32") /* ty=Tensor[(14, 12, 2), uint32] */;
  %61 = cast(%var_5837, dtype="float64") /* ty=Tensor[(182), float64] */;
  %62 = reshape(%61, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float64] */;
  %63 = cast(%var_5812, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
  %64 = asin(%63) /* ty=Tensor[(264, 1), float32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(264, 1), float64] */;
  %66 = multiply(%33, %34) /* ty=Tensor[(9, 3, 8), int32] */;
  %67 = %43.6;
  %68 = %50.2;
  %69 = %55.0;
  %70 = @func_5230() /* ty=Tensor[(14, 12, 2), float32] */;
  %71 = less_equal(%56, %57) /* ty=Tensor[(9, 3, 8), bool] */;
  %72 = subtract(%59, %60) /* ty=Tensor[(14, 12, 2), uint32] */;
  %73 = @func_1617(%62) /* ty=Tensor[(2, 13, 7), float32] */;
  %74 = log10(%65) /* ty=Tensor[(264, 1), float64] */;
  (%66, %67, meta[relay.Constant][3] /* ty=Tensor[(2100), bool] */, %var_5798, meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, %68, %var_5805, %69, %70, %71, %72, %73, %var_5837, %74)
}

def @func_4606(%var_4557: Tensor[(30, 70), bool], %var_4581: Tensor[(40, 14), uint64], %var_4587: float64) -> (Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) {
  %75 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %76 = cast(%var_4557, dtype="bool") /* ty=Tensor[(30, 70), bool] */;
  %77 = cast(%var_4557, dtype="bool") /* ty=Tensor[(30, 70), bool] */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), uint8] */, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %81 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
  %82 = cast(meta[relay.Constant][9] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
  %85 = cast(meta[relay.Constant][10] /* ty=Tensor[(286, 6), float32] */, dtype="float32") /* ty=Tensor[(286, 6), float32] */;
  %86 = reshape(%76, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %87 = reshape(%77, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %88 = reshape(%78, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %89 = reshape(%79, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %90 = reshape(%80, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %91 = reshape(%81, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %92 = reshape(%82, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %93 = reshape(%83, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %94 = reshape(%84, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %95 = reshape(%85, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %96 = @func_2899(%86, %87, %88, %89, %90, %91, %92, %93, %94, %95) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %97 = cast(%var_4581, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
  %98 = cast(%var_4581, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
  %99 = reshape(%97, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint64] */;
  %100 = reshape(%98, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint64] */;
  %101 = @func_4001(%99, %100) /* ty=(Tensor[(14, 4, 10), bool],) */;
  %102 = cast(%var_4587, dtype="float64") /* ty=float64 */;
  %103 = reshape(%102, newshape=[]) /* ty=float64 */;
  %104 = %75.0;
  %105 = %96.11;
  %106 = %101.0;
  %107 = @func_3142(%103) /* ty=Tensor[(13, 15, 2), float64] */;
  (%104, %105, %var_4557, meta[relay.Constant][5] /* ty=Tensor[(48), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(288), uint8] */, meta[relay.Constant][7] /* ty=Tensor[(260), float32] */, meta[relay.Constant][8] /* ty=Tensor[(1, 990), float64] */, meta[relay.Constant][9] /* ty=Tensor[(264), bool] */, meta[relay.Constant][10] /* ty=Tensor[(286, 6), float32] */, %106, %var_4581, %107, %var_4587)
}

def @func_5024(%var_4948: Tensor[(14, 160), uint8], %var_4971: Tensor[(432), float64], %var_4973: Tensor[(288), uint8], %var_5018: Tensor[(1716), float32]) -> (Tensor[(15, 7, 16), int32], Tensor[(1680, 1), float64], Tensor[(14, 160), uint8], Tensor[(14, 12, 2), float32], Tensor[(14, 10, 16), float64], Tensor[(150), float64], Tensor[(432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(150, 1), float64], Tensor[(1800), uint32], Tensor[(360), float32], Tensor[(14, 12, 2), float64], Tensor[(13, 12, 11), int16], Tensor[(1716), float32]) {
  %108 = cast(meta[relay.Constant][11] /* ty=Tensor[(1680, 1), float64] */, dtype="float64") /* ty=Tensor[(1680, 1), float64] */;
  %109 = reshape(%108, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %110 = @func_4691() /* ty=Tensor[(14, 12, 2), float32] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %112 = cast(%var_4948, dtype="uint8") /* ty=Tensor[(14, 160), uint8] */;
  %113 = cast(%var_4948, dtype="uint8") /* ty=Tensor[(14, 160), uint8] */;
  %114 = reshape(%112, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %115 = reshape(%113, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %116 = @func_1299(%114, %115) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
  %117 = %116.3;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %119 = cast(%var_4971, dtype="float64") /* ty=Tensor[(432), float64] */;
  %120 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %121 = cast(%var_4973, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %122 = cast(meta[relay.Constant][13] /* ty=Tensor[(150, 1), float64] */, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
  %123 = reshape(%119, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %124 = reshape(%120, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
  %125 = reshape(%121, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %126 = reshape(%122, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %127 = @func_2210(%123, %124, %125, %126) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
  %128 = cast(meta[relay.Constant][14] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %129 = cast(%var_4973, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %130 = reshape(%128, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %131 = reshape(%129, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %132 = @func_4422(%130, %131) /* ty=(Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) */;
  %133 = cast(%110, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %134 = rsqrt(%133) /* ty=Tensor[(14, 12, 2), float64] */;
  %135 = cast(%110, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = logical_or(%137, %138) /* ty=Tensor[(14, 12, 2), bool] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %141 = cast(%var_5018, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %142 = reshape(%141, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %143 = @func_2305(%142) /* ty=(Tensor[(13, 12, 11), int16],) */;
  %144 = @func_1096(%109) /* ty=Tensor[(15, 7, 16), int32] */;
  %145 = erf(%111) /* ty=Tensor[(14, 12, 2), float32] */;
  %146 = log10(%118) /* ty=Tensor[(14, 10, 16), float64] */;
  %147 = %127.5;
  %148 = %132.3;
  %149 = asin(%140) /* ty=Tensor[(14, 12, 2), float64] */;
  %150 = %143.0;
  (%144, meta[relay.Constant][11] /* ty=Tensor[(1680, 1), float64] */, %var_4948, %145, %146, %147, %var_4971, meta[relay.Constant][12] /* ty=Tensor[(48), uint8] */, %var_4973, meta[relay.Constant][13] /* ty=Tensor[(150, 1), float64] */, %148, meta[relay.Constant][14] /* ty=Tensor[(360), float32] */, %149, %150, %var_5018)
}

def @func_5671() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_4497(%var_4474: Tensor[(14), uint8], %var_4475: Tensor[(390), int8], %var_4477: Tensor[(288), uint8], %var_4478: Tensor[(1716), float32], %var_4492: Tensor[(55), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(1716), float32], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1716), float32], Tensor[(1, 5, 11), float32], Tensor[(55), float32]) {
  %151 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %152 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %155 = cast(%var_4474, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %156 = cast(%var_4475, dtype="int8") /* ty=Tensor[(390), int8] */;
  %157 = cast(meta[relay.Constant][17] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %158 = cast(%var_4477, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %159 = cast(%var_4478, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %160 = reshape(%155, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %161 = reshape(%156, newshape=[390]) /* ty=Tensor[(390), int8] */;
  %162 = reshape(%157, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %163 = reshape(%158, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %164 = reshape(%159, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %165 = @func_4175(%160, %161, %162, %163, %164) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
  %166 = cast(%var_4492, dtype="float32") /* ty=Tensor[(55), float32] */;
  %167 = reshape(%166, newshape=[1, 5, 11]) /* ty=Tensor[(1, 5, 11), float32] */;
  %168 = @func_3574(%167) /* ty=(Tensor[(1, 5, 11), float32],) */;
  %169 = add(%153, %154) /* ty=Tensor[(6, 5, 10), int64] */;
  %170 = %165.12;
  %171 = %168.0;
  (%169, %170, %var_4474, %var_4475, meta[relay.Constant][17] /* ty=Tensor[(48), uint8] */, %var_4477, %var_4478, %171, %var_4492)
}

def @func_4819(%var_4760: Tensor[(2100), bool], %var_4761: Tensor[(48), uint8], %var_4763: Tensor[(260), float32], %var_4789: Tensor[(2100), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) {
  %172 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %173 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %174 = cast(%var_4761, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %175 = cast(meta[relay.Constant][18] /* ty=Tensor[(288), uint8] */, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %176 = cast(%var_4763, dtype="float32") /* ty=Tensor[(260), float32] */;
  %177 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
  %178 = cast(meta[relay.Constant][20] /* ty=Tensor[(132, 2), bool] */, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %179 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
  %180 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
  %181 = cast(meta[relay.Constant][21] /* ty=Tensor[(1716), float32] */, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %182 = reshape(%172, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %183 = reshape(%173, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %184 = reshape(%174, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %185 = reshape(%175, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %186 = reshape(%176, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %187 = reshape(%177, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %188 = reshape(%178, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %189 = reshape(%179, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %190 = reshape(%180, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %191 = reshape(%181, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %192 = @func_2899(%182, %183, %184, %185, %186, %187, %188, %189, %190, %191) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %193 = cast(%var_4789, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %194 = shape_of(%var_4760, dtype="int32") /* ty=Tensor[(1), int32] */;
  %195 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?), bool] */;
  %197 = @func_4691() /* ty=Tensor[(14, 12, 2), float32] */;
  %198 = @func_4658() /* ty=Tensor[(9, 3, 8), bool] */;
  %199 = %192.11;
  %200 = less(%195, %196) /* ty=Tensor[(2100), bool] */;
  (%197, %198, %199, %var_4761, meta[relay.Constant][18] /* ty=Tensor[(288), uint8] */, %var_4763, meta[relay.Constant][19] /* ty=Tensor[(5, 198), float64] */, meta[relay.Constant][20] /* ty=Tensor[(132, 2), bool] */, meta[relay.Constant][21] /* ty=Tensor[(1716), float32] */, %200)
}

def @func_1617(%var_1592: Tensor[(2, 13, 7), float64]) -> Tensor[(2, 13, 7), float32] {
  %201 = cast(%var_1592, dtype="float64") /* ty=Tensor[(2, 13, 7), float64] */;
  %202 = sqrt(%201) /* ty=Tensor[(2, 13, 7), float64] */;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(2, 13, 7), float64] */;
  %204 = log10(%203) /* ty=Tensor[(2, 13, 7), float64] */;
  %205 = cast(%204, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  log2(%205) /* ty=Tensor[(2, 13, 7), float32] */
}

def @func_3142(%var_3129: float64) -> Tensor[(13, 15, 2), float64] {
  %206 = cast(%var_3129, dtype="float64") /* ty=float64 */;
  %207 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  floor_mod(%206, %207) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_4001(%var_3984: Tensor[(14, 4, 10), uint64], %var_3985: Tensor[(14, 4, 10), uint64]) -> (Tensor[(14, 4, 10), bool],) {
  %208 = cast(%var_3985, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %209 = shape_of(%var_3984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_3984, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = greater_equal(%210, %211) /* ty=Tensor[(14, 4, 10), bool] */;
  (%212,)
}

def @func_4175(%var_4084: Tensor[(1, 14), uint8], %var_4105: Tensor[(390), int8], %var_4131: Tensor[(48), uint8], %var_4132: Tensor[(288), uint8], %var_4136: Tensor[(1716), float32]) -> (Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) {
  %213 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %214 = cast(%var_4084, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %215 = cast(meta[relay.Constant][24] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %216 = cast(meta[relay.Constant][24] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %217 = reshape(%215, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %218 = reshape(%216, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %219 = @func_1926(%217, %218) /* ty=(Tensor[(16, 11, 16), uint32],) */;
  %220 = cast(%var_4105, dtype="int8") /* ty=Tensor[(390), int8] */;
  %221 = reshape(%220, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), int8] */;
  %222 = cast(meta[relay.Constant][25] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %223 = cast(meta[relay.Constant][25] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %224 = cast(%var_4131, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %225 = cast(%var_4132, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %226 = cast(meta[relay.Constant][26] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %227 = cast(meta[relay.Constant][27] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %228 = cast(meta[relay.Constant][28] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %229 = cast(meta[relay.Constant][27] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %230 = cast(meta[relay.Constant][27] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %231 = cast(%var_4136, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %232 = reshape(%222, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %233 = reshape(%223, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %234 = reshape(%224, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %235 = reshape(%225, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %236 = reshape(%226, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %237 = reshape(%227, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %238 = reshape(%228, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %239 = reshape(%229, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %240 = reshape(%230, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %241 = reshape(%231, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %242 = @func_2899(%232, %233, %234, %235, %236, %237, %238, %239, %240, %241) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %243 = cast(%var_4136, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %244 = reshape(%243, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %245 = @func_2305(%244) /* ty=(Tensor[(13, 12, 11), int16],) */;
  %246 = cast(meta[relay.Constant][26] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %247 = reshape(%246, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %248 = cast(meta[relay.Constant][27] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %249 = reshape(%248, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float64] */;
  %250 = @func_2345(%249) /* ty=(Tensor[(11, 15, 6), float64],) */;
  %251 = multiply(%213, %214) /* ty=Tensor[(1, 14), uint8] */;
  %252 = %219.0;
  %253 = @func_3711(%221) /* ty=Tensor[(2, 13, 15), bool] */;
  %254 = %242.18;
  %255 = %245.0;
  %256 = @func_1769(%247) /* ty=Tensor[(4, 13, 5), float32] */;
  %257 = %250.0;
  (%251, %252, meta[relay.Constant][24] /* ty=Tensor[(2816), int32] */, %253, %var_4105, %254, meta[relay.Constant][25] /* ty=Tensor[(2100), bool] */, %var_4131, %var_4132, meta[relay.Constant][26] /* ty=Tensor[(260, 1), float32] */, meta[relay.Constant][27] /* ty=Tensor[(990), float64] */, meta[relay.Constant][28] /* ty=Tensor[(264), bool] */, %var_4136, %255, %256, %257)
}

def @func_2305(%var_2284: Tensor[(13, 12, 11), float32]) -> (Tensor[(13, 12, 11), int16],) {
  %258 = cast(%var_2284, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %259 = cos(%258) /* ty=Tensor[(13, 12, 11), float32] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(13, 12, 11), float64] */;
  %261 = sin(%260) /* ty=Tensor[(13, 12, 11), float64] */;
  %262 = cast(%261, dtype="int16") /* ty=Tensor[(13, 12, 11), int16] */;
  %263 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%259, dtype="int16") /* ty=Tensor[(13, 12, 11), int16] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %266 = minimum(%264, %265) /* ty=Tensor[(13, 12, 11), int16] */;
  (%266,)
}

def @func_2345(%var_2342: Tensor[(11, 15, 6), float64]) -> (Tensor[(11, 15, 6), float64],) {
  %267 = cast(%var_2342, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
  %268 = log(%267) /* ty=Tensor[(11, 15, 6), float64] */;
  (%268,)
}

def @func_4247(%var_4213: Tensor[(14, 12, 2), float32], %var_4226: Tensor[(5, 84), float64], %var_4240: Tensor[(270), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 13, 15), bool], Tensor[(390, 1), int8], Tensor[(260), float32], Tensor[(5, 84), float64], Tensor[(420, 4), float64], Tensor[(7, 16, 4), int8], Tensor[(1, 448), int8], Tensor[(270), float64]) {
  %269 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %270 = %269.0;
  %271 = cast(%var_4213, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %275 = cast(meta[relay.Constant][29] /* ty=Tensor[(390, 1), int8] */, dtype="int8") /* ty=Tensor[(390, 1), int8] */;
  %276 = reshape(%275, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), int8] */;
  %277 = cast(%var_4226, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
  %278 = cast(meta[relay.Constant][30] /* ty=Tensor[(420, 4), float64] */, dtype="float64") /* ty=Tensor[(420, 4), float64] */;
  %279 = reshape(%277, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %280 = reshape(%278, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %281 = @func_3913(%279, %280) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) */;
  %282 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 448), int8] */, dtype="int8") /* ty=Tensor[(1, 448), int8] */;
  %283 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 448), int8] */, dtype="int8") /* ty=Tensor[(1, 448), int8] */;
  %284 = cast(%var_4240, dtype="float64") /* ty=Tensor[(270), float64] */;
  %285 = reshape(%282, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int8] */;
  %286 = reshape(%283, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int8] */;
  %287 = reshape(%284, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %288 = @func_3765(%285, %286, %287) /* ty=(Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) */;
  %289 = mod(%273, %274) /* ty=Tensor[(14, 12, 2), float32] */;
  %290 = @func_3711(%276) /* ty=Tensor[(2, 13, 15), bool] */;
  %291 = %281.4;
  %292 = %288.0;
  (%289, %290, meta[relay.Constant][29] /* ty=Tensor[(390, 1), int8] */, %291, %var_4226, meta[relay.Constant][30] /* ty=Tensor[(420, 4), float64] */, %292, meta[relay.Constant][31] /* ty=Tensor[(1, 448), int8] */, %var_4240)
}

def @func_2278(%var_2243: Tensor[(3, 13, 12), float64], %var_2273: Tensor[(1680), float64]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) {
  %293 = cast(%var_2243, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %294 = cast(%var_2243, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %295 = cast(%var_2273, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %296 = reshape(%295, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %297 = asinh(%293) /* ty=Tensor[(3, 13, 12), float64] */;
  %298 = exp(%294) /* ty=Tensor[(3, 13, 12), float32] */;
  %299 = @func_1096(%296) /* ty=Tensor[(15, 7, 16), int32] */;
  (%297, %298, %299, %var_2273)
}

def @func_3574(%var_3566: Tensor[(1, 5, 11), float32]) -> (Tensor[(1, 5, 11), float32],) {
  %300 = cast(%var_3566, dtype="float32") /* ty=Tensor[(1, 5, 11), float32] */;
  %301 = sinh(%300) /* ty=Tensor[(1, 5, 11), float32] */;
  (%301,)
}

def @func_3913(%var_3899: Tensor[(4, 15, 7), float64], %var_3908: Tensor[(1680), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) {
  %302 = cast(%var_3899, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %303 = cast(%var_3908, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %304 = reshape(%303, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %305 = cast(meta[relay.Constant][32] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %306 = reshape(%305, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %307 = log10(%302) /* ty=Tensor[(4, 15, 7), float64] */;
  %308 = @func_1096(%304) /* ty=Tensor[(15, 7, 16), int32] */;
  %309 = @func_1769(%306) /* ty=Tensor[(4, 13, 5), float32] */;
  (%307, %308, %var_3908, %309, meta[relay.Constant][32] /* ty=Tensor[(260), float32] */)
}

def @func_3261(%var_3239: Tensor[(6, 7, 16), float64]) -> (Tensor[(6, 7, 16), float64], Tensor[(3, 5, 10), float64], Tensor[(150), float64]) {
  %310 = cast(%var_3239, dtype="float64") /* ty=Tensor[(6, 7, 16), float64] */;
  %311 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 16), float64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %314 = cast(meta[relay.Constant][34] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %315 = cast(meta[relay.Constant][34] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %316 = reshape(%314, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %317 = reshape(%315, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %318 = floor_mod(%312, %313) /* ty=Tensor[(6, 7, 16), float64] */;
  %319 = @func_49(%316, %317) /* ty=Tensor[(3, 5, 10), float64] */;
  (%318, %319, meta[relay.Constant][34] /* ty=Tensor[(150), float64] */)
}

def @func_5205(%var_5190: Tensor[(12, 30), float32], %var_5192: Tensor[(48), uint8], %var_5195: Tensor[(1716), float32]) -> (Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) {
  %320 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %323 = cast(%var_5190, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %324 = cast(meta[relay.Constant][35] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %325 = cast(%var_5192, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %326 = cast(meta[relay.Constant][36] /* ty=Tensor[(288, 1), uint8] */, dtype="uint8") /* ty=Tensor[(288, 1), uint8] */;
  %327 = cast(meta[relay.Constant][37] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %328 = cast(%var_5195, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %329 = reshape(%323, newshape=[6, 5, 12]) /* ty=Tensor[(6, 5, 12), float32] */;
  %330 = reshape(%324, newshape=[3, 700]) /* ty=Tensor[(3, 700), bool] */;
  %331 = reshape(%325, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %332 = reshape(%326, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %333 = reshape(%327, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %334 = reshape(%328, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %335 = @func_3456(%329, %330, %331, %332, %333, %334) /* ty=(Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) */;
  %336 = log10(%322) /* ty=Tensor[(14, 12, 2), float64] */;
  %337 = %335.8;
  (%336, %337, %var_5190, meta[relay.Constant][35] /* ty=Tensor[(2100), bool] */, %var_5192, meta[relay.Constant][36] /* ty=Tensor[(288, 1), uint8] */, meta[relay.Constant][37] /* ty=Tensor[(260), float32] */, %var_5195)
}

def @func_5309(%var_5294: Tensor[(3, 15, 14), float32], %var_5295: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(14, 12, 2), float32]) {
  %338 = cast(%var_5295, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %339 = shape_of(%var_5294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_5294, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %342 = floor_divide(%340, %341) /* ty=Tensor[(3, 15, 14), float32] */;
  %343 = cast(%var_5294, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %348 = less(%345, %346) /* ty=Tensor[(3, 15, 14), bool] */;
  %349 = %347.0;
  (%348, %349)
}

def @func_5532(%var_5526: Tensor[(2, 6, 1), float32]) -> Tensor[(2, 6, 1), float32] {
  %350 = cast(%var_5526, dtype="float32") /* ty=Tensor[(2, 6, 1), float32] */;
  sqrt(%350) /* ty=Tensor[(2, 6, 1), float32] */
}

def @func_5515(%var_5482: Tensor[(11, 10, 5), float64], %var_5498: Tensor[(11, 10, 5), float64], %var_5510: Tensor[(1680), float64]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), bool], Tensor[(3, 13, 12), float64], Tensor[(468), float64], Tensor[(1680), float64]) {
  %351 = cast(%var_5482, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %352 = cast(%var_5482, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  %353 = sigmoid(%352) /* ty=Tensor[(11, 10, 5), float64] */;
  %354 = cast(%var_5498, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = cast(meta[relay.Constant][38] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %359 = cast(%var_5510, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %360 = reshape(%358, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
  %361 = reshape(%359, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %362 = @func_2278(%360, %361) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) */;
  %363 = cos(%351) /* ty=Tensor[(11, 10, 5), float32] */;
  %364 = less(%356, %357) /* ty=Tensor[(11, 10, 5), bool] */;
  %365 = %362.0;
  (%363, %364, %365, meta[relay.Constant][38] /* ty=Tensor[(468), float64] */, %var_5510)
}

def @func_4422(%var_4394: Tensor[(8, 15, 3), float32], %var_4410: Tensor[(288), uint8]) -> (Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) {
  %366 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12), uint8] */;
  %367 = cast(%var_4410, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %368 = cast(%var_4410, dtype="bool") /* ty=Tensor[(288), bool] */;
  %369 = cast(meta[relay.Constant][40] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %370 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %371 = reshape(%366, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
  %372 = reshape(%367, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
  %373 = reshape(%368, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
  %374 = reshape(%369, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %375 = reshape(%370, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %376 = @func_703(%371, %372, %373, %374, %375) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
  %377 = cast(%var_4394, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
  %378 = asin(%377) /* ty=Tensor[(8, 15, 3), float32] */;
  %379 = cast(%var_4394, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %383 = floor_mod(%381, %382) /* ty=Tensor[(8, 15, 3), float32] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %385 = cast(meta[relay.Constant][42] /* ty=Tensor[(36, 12), float64] */, dtype="float64") /* ty=Tensor[(36, 12), float64] */;
  %386 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12), uint8] */;
  %387 = cast(%var_4410, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %388 = %376.1;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %390 = reshape(%385, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %391 = reshape(%386, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
  %392 = reshape(%387, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %393 = reshape(%389, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %394 = @func_2210(%390, %391, %392, %393) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
  %395 = cosh(%384) /* ty=Tensor[(8, 15, 3), float64] */;
  %396 = %394.1;
  (%388, meta[relay.Constant][39] /* ty=Tensor[(4, 12), uint8] */, %var_4410, meta[relay.Constant][40] /* ty=Tensor[(1800), uint32] */, meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, %395, %396, meta[relay.Constant][42] /* ty=Tensor[(36, 12), float64] */)
}

def @func_2210(%var_2200: Tensor[(12, 4, 9), float64], %var_2205: Tensor[(48, 1), uint8], %var_2206: Tensor[(288), uint8], %var_2208: Tensor[(150), float64]) -> (Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) {
  %397 = cast(%var_2200, dtype="float64") /* ty=Tensor[(12, 4, 9), float64] */;
  %398 = cast(%var_2205, dtype="uint8") /* ty=Tensor[(48, 1), uint8] */;
  %399 = cast(%var_2206, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %400 = cast(%var_2206, dtype="bool") /* ty=Tensor[(288), bool] */;
  %401 = cast(meta[relay.Constant][43] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %402 = cast(%var_2208, dtype="float64") /* ty=Tensor[(150), float64] */;
  %403 = reshape(%398, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
  %404 = reshape(%399, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
  %405 = reshape(%400, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
  %406 = reshape(%401, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %407 = reshape(%402, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %408 = @func_703(%403, %404, %405, %406, %407) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
  %409 = sin(%397) /* ty=Tensor[(12, 4, 9), float64] */;
  %410 = %408.2;
  (%409, %410, %var_2205, %var_2206, meta[relay.Constant][43] /* ty=Tensor[(1800), uint32] */, %var_2208)
}

def @func_2899(%var_2793: Tensor[(14, 10, 15), bool], %var_2794: Tensor[(14, 10, 15), bool], %var_2799: Tensor[(48), uint8], %var_2800: Tensor[(288), uint8], %var_2809: Tensor[(260), float32], %var_2810: Tensor[(990), float64], %var_2820: Tensor[(264), bool], %var_2833: Tensor[(990), float64], %var_2844: Tensor[(990), float64], %var_2858: Tensor[(1, 1716), float32]) -> (Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) {
  %411 = cast(%var_2794, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %412 = shape_of(%var_2793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_2793, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = cast(%var_2799, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %416 = cast(%var_2800, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %417 = cast(%var_2800, dtype="bool") /* ty=Tensor[(288), bool] */;
  %418 = cast(meta[relay.Constant][44] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %419 = cast(meta[relay.Constant][45] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %420 = reshape(%415, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
  %421 = reshape(%416, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
  %422 = reshape(%417, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
  %423 = reshape(%418, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %424 = reshape(%419, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %425 = @func_703(%420, %421, %422, %423, %424) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
  %426 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %427 = cast(%var_2809, dtype="float32") /* ty=Tensor[(260), float32] */;
  %428 = cast(%var_2810, dtype="float64") /* ty=Tensor[(990), float64] */;
  %429 = reshape(%426, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %430 = reshape(%427, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %431 = reshape(%428, newshape=[330, 3]) /* ty=Tensor[(330, 3), float64] */;
  %432 = @func_2753(%429, %430, %431) /* ty=(Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) */;
  %433 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %434 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %435 = reshape(%433, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %436 = reshape(%434, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %437 = @func_1009(%435, %436) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %438 = cast(%var_2809, dtype="float32") /* ty=Tensor[(260), float32] */;
  %439 = reshape(%438, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %440 = cast(%var_2833, dtype="bool") /* ty=Tensor[(990), bool] */;
  %441 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %442 = cast(%var_2810, dtype="bool") /* ty=Tensor[(990), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?), bool] */;
  %444 = cast(%var_2844, dtype="float64") /* ty=Tensor[(990), float64] */;
  %445 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %446 = cast(%var_2810, dtype="float64") /* ty=Tensor[(990), float64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?), float64] */;
  %448 = cast(meta[relay.Constant][47] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %449 = cast(meta[relay.Constant][48] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %450 = reshape(%448, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
  %451 = reshape(%449, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %452 = @func_2278(%450, %451) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) */;
  %453 = %437.0;
  %454 = cast(%453, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %455 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %456 = reshape(%454, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %457 = reshape(%455, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %458 = @func_1009(%456, %457) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %459 = cast(%var_2858, dtype="float32") /* ty=Tensor[(1, 1716), float32] */;
  %460 = reshape(%459, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %461 = @func_2305(%460) /* ty=(Tensor[(13, 12, 11), int16],) */;
  %462 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %463 = sin(%462) /* ty=Tensor[(2, 216), float32] */;
  %464 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 216), float32] */, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(2), int32] */;
  %466 = cast(%463, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %468 = cast(%463, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %469 = @func_1769(%439) /* ty=Tensor[(4, 13, 5), float32] */;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %471 = cast(%var_2844, dtype="float64") /* ty=Tensor[(990), float64] */;
  %472 = reshape(%468, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %473 = reshape(%470, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %474 = reshape(%471, newshape=[330, 3]) /* ty=Tensor[(330, 3), float64] */;
  %475 = @func_2753(%472, %473, %474) /* ty=(Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) */;
  %476 = logical_and(%413, %414) /* ty=Tensor[(14, 10, 15), bool] */;
  %477 = %425.1;
  %478 = %432.0;
  %479 = equal(%442, %443) /* ty=Tensor[(990), bool] */;
  %480 = floor_divide(%446, %447) /* ty=Tensor[(990), float64] */;
  %481 = %452.3;
  %482 = %458.0;
  %483 = %461.0;
  %484 = less_equal(%466, %467) /* ty=Tensor[(2, 216), bool] */;
  %485 = %475.1;
  (%476, %477, %var_2799, %var_2800, meta[relay.Constant][44] /* ty=Tensor[(1800), uint32] */, meta[relay.Constant][45] /* ty=Tensor[(25, 6), float64] */, %478, %var_2809, %453, %var_2820, %469, %479, %480, %481, meta[relay.Constant][47] /* ty=Tensor[(468), float64] */, meta[relay.Constant][48] /* ty=Tensor[(1680), float64] */, %482, %483, %var_2858, %484, %485)
}

def @func_4691() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_1096(%var_1079: Tensor[(15, 7, 16), float64]) -> Tensor[(15, 7, 16), int32] {
  %486 = cast(%var_1079, dtype="float64") /* ty=Tensor[(15, 7, 16), float64] */;
  %487 = rsqrt(%486) /* ty=Tensor[(15, 7, 16), float64] */;
  %488 = cast(%var_1079, dtype="int32") /* ty=Tensor[(15, 7, 16), int32] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="int32") /* ty=Tensor[(15, 7, 16), int32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%490, %491) /* ty=Tensor[(15, 7, 16), int32] */
}

def @func_4924() -> (Tensor[(14, 12, 2), float32], Tensor[(14, 12, 2), float32]) {
  %492 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %493 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %494 = %492.0;
  %495 = %493.0;
  (%494, %495)
}

def @func_49(%var_44: Tensor[(3, 5, 10), float64], %var_45: Tensor[(3, 5, 10), float64]) -> Tensor[(3, 5, 10), float64] {
  %496 = cast(%var_45, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %497 = shape_of(%var_44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_44, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%498, %499) /* ty=Tensor[(3, 5, 10), float64] */
}

def @func_3456(%var_3422: Tensor[(6, 5, 12), float32], %var_3427: Tensor[(3, 700), bool], %var_3428: Tensor[(48), uint8], %var_3429: Tensor[(288), uint8], %var_3430: Tensor[(260), float32], %var_3433: Tensor[(1716), float32]) -> (Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) {
  %500 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %501 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %502 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %503 = cast(%var_3429, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %504 = cast(%var_3430, dtype="float32") /* ty=Tensor[(260), float32] */;
  %505 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %506 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %507 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %508 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %509 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %510 = reshape(%500, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %511 = reshape(%501, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %512 = reshape(%502, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %513 = reshape(%503, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %514 = reshape(%504, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %515 = reshape(%505, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %516 = reshape(%506, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %517 = reshape(%507, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %518 = reshape(%508, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %519 = reshape(%509, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %520 = @func_2899(%510, %511, %512, %513, %514, %515, %516, %517, %518, %519) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %521 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %522 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %523 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %524 = cast(%var_3429, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %525 = cast(%var_3430, dtype="float32") /* ty=Tensor[(260), float32] */;
  %526 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %527 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %528 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %529 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %530 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %531 = reshape(%521, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %532 = reshape(%522, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %533 = reshape(%523, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %534 = reshape(%524, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %535 = reshape(%525, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %536 = reshape(%526, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %537 = reshape(%527, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %538 = reshape(%528, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %539 = reshape(%529, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %540 = reshape(%530, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %541 = @func_2899(%531, %532, %533, %534, %535, %536, %537, %538, %539, %540) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %542 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %543 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %544 = reshape(%542, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %545 = reshape(%543, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %546 = @func_1009(%544, %545) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %547 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %548 = cos(%547) /* ty=Tensor[(6, 5, 12), float32] */;
  %549 = cast(%var_3422, dtype="uint32") /* ty=Tensor[(6, 5, 12), uint32] */;
  %550 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(6, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 5, 12), float32] */, dtype="uint32") /* ty=Tensor[(6, 5, 12), uint32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %553 = left_shift(%551, %552) /* ty=Tensor[(6, 5, 12), uint32] */;
  %554 = cast(%548, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = not_equal(%556, %557) /* ty=Tensor[(6, 5, 12), bool] */;
  %559 = cast(%558, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %560 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%548, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = %520.4;
  %564 = %541.15;
  %565 = %546.0;
  %566 = logical_and(%561, %562) /* ty=Tensor[(6, 5, 12), bool] */;
  (%563, %var_3427, %var_3428, %var_3429, %var_3430, meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, meta[relay.Constant][50] /* ty=Tensor[(6, 44), bool] */, %var_3433, %564, %565, %566)
}

def @func_3204(%var_3189: Tensor[(3, 2), float64], %var_3190: Tensor[(3, 2), float64]) -> (Tensor[(3, 2), bool],) {
  %567 = cast(%var_3190, dtype="bool") /* ty=Tensor[(3, 2), bool] */;
  %568 = shape_of(%var_3189, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%var_3189, dtype="bool") /* ty=Tensor[(3, 2), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %571 = greater_equal(%569, %570) /* ty=Tensor[(3, 2), bool] */;
  (%571,)
}

def @func_3765(%var_3747: Tensor[(7, 16, 4), int8], %var_3748: Tensor[(7, 16, 4), int8], %var_3758: Tensor[(270), float64]) -> (Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) {
  %572 = cast(%var_3748, dtype="int8") /* ty=Tensor[(7, 16, 4), int8] */;
  %573 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_3747, dtype="int8") /* ty=Tensor[(7, 16, 4), int8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %576 = cast(%var_3758, dtype="float64") /* ty=Tensor[(270), float64] */;
  %577 = reshape(%576, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), float64] */;
  %578 = bitwise_or(%574, %575) /* ty=Tensor[(7, 16, 4), int8] */;
  %579 = @func_2041(%577) /* ty=Tensor[(9, 6, 5), float64] */;
  (%578, %579, %var_3758)
}

def @func_4054(%var_4020: Tensor[(7, 10, 13), uint64], %var_4021: Tensor[(7, 10, 13), uint64], %var_4034: Tensor[(2240), uint8]) -> (Tensor[(14, 10, 16), uint64], Tensor[(2240), uint8], Tensor[(7, 10, 13), float32], Tensor[(7, 2, 11), bool], Tensor[(1200), float64], Tensor[(1, 154), uint16]) {
  %580 = cast(%var_4034, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %581 = cast(%var_4034, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %582 = reshape(%580, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %583 = reshape(%581, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %584 = @func_1299(%582, %583) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
  %585 = cast(%var_4021, dtype="uint64") /* ty=Tensor[(7, 10, 13), uint64] */;
  %586 = shape_of(%var_4020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_4020, dtype="uint64") /* ty=Tensor[(7, 10, 13), uint64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %589 = logical_xor(%587, %588) /* ty=Tensor[(7, 10, 13), uint64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %591 = cast(meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %592 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 154), uint16] */, dtype="uint16") /* ty=Tensor[(1, 154), uint16] */;
  %593 = reshape(%591, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), float64] */;
  %594 = reshape(%592, newshape=[154]) /* ty=Tensor[(154), uint16] */;
  %595 = @func_2421(%593, %594) /* ty=(Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) */;
  %596 = %584.3;
  %597 = exp(%590) /* ty=Tensor[(7, 10, 13), float32] */;
  %598 = %595.0;
  (%596, %var_4034, %597, %598, meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1, 154), uint16] */)
}

def @func_3981() -> (Tensor[(14, 12, 2), float32],) {
  %599 = cast(meta[relay.Constant][54] /* ty=Tensor[(14, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %600 = asinh(%599) /* ty=Tensor[(14, 12, 2), float32] */;
  (%600,)
}

def @func_960(%var_952: Tensor[(7, 2, 11), uint16], %var_953: Tensor[(7, 2, 11), uint16]) -> Tensor[(7, 2, 11), bool] {
  %601 = cast(%var_953, dtype="bool") /* ty=Tensor[(7, 2, 11), bool] */;
  %602 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_952, dtype="bool") /* ty=Tensor[(7, 2, 11), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%603, %604) /* ty=Tensor[(7, 2, 11), bool] */
}

def @func_2421(%var_2374: Tensor[(16, 15, 5), float64], %var_2381: Tensor[(154), uint16]) -> (Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) {
  %605 = cast(%var_2381, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %606 = cast(%var_2381, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %607 = reshape(%605, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %608 = reshape(%606, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %609 = cast(%var_2374, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %610 = cos(%609) /* ty=Tensor[(16, 15, 5), float64] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %612 = sigmoid(%611) /* ty=Tensor[(16, 15, 5), float64] */;
  %613 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 15, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 15, 5), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(16, 15, 5), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %618 = shape_of(%var_2374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_2374, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %621 = cast(meta[relay.Constant][57] /* ty=Tensor[(840), int64] */, dtype="int64") /* ty=Tensor[(840), int64] */;
  %622 = cast(meta[relay.Constant][57] /* ty=Tensor[(840), int64] */, dtype="int64") /* ty=Tensor[(840), int64] */;
  %623 = reshape(%621, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int64] */;
  %624 = reshape(%622, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int64] */;
  %625 = @func_506(%623, %624) /* ty=(Tensor[(10, 7, 12), float64],) */;
  %626 = @func_960(%607, %608) /* ty=Tensor[(7, 2, 11), bool] */;
  %627 = logical_or(%615, %616) /* ty=Tensor[(16, 15, 5), bool] */;
  %628 = floor_mod(%619, %620) /* ty=Tensor[(16, 15, 5), float64] */;
  %629 = %625.0;
  (%626, %var_2381, %627, %628, %629, meta[relay.Constant][57] /* ty=Tensor[(840), int64] */)
}

def @func_5129() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_5338(%var_5317: Tensor[(7, 8, 5), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(7, 8, 5), bool]) {
  %630 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %631 = cast(%var_5317, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %632 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(7, 8, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 8, 5), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = logical_or(%633, %634) /* ty=Tensor[(7, 8, 5), bool] */;
  %636 = cast(%var_5317, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = %630.0;
  %641 = equal(%638, %639) /* ty=Tensor[(7, 8, 5), bool] */;
  (%640, %641)
}

def @func_4903(%var_4860: Tensor[(7, 9), float32], %var_4870: Tensor[(1, 432), float64], %var_4871: Tensor[(48), uint8], %var_4872: Tensor[(288), uint8], %var_4887: Tensor[(1716), float32]) -> (Tensor[(7, 9), float32], Tensor[(12, 4, 9), float64], Tensor[(1, 432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(5, 30), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(1716), float32], Tensor[(?, 14), bool]) {
  %642 = cast(%var_4860, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %643 = cast(%var_4870, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %644 = cast(%var_4871, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %645 = cast(%var_4872, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %646 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %647 = reshape(%643, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %648 = reshape(%644, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
  %649 = reshape(%645, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %650 = reshape(%646, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %651 = @func_2210(%647, %648, %649, %650) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
  %652 = cast(meta[relay.Constant][60] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %653 = cast(meta[relay.Constant][61] /* ty=Tensor[(390), int8] */, dtype="int8") /* ty=Tensor[(390), int8] */;
  %654 = cast(%var_4871, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %655 = cast(%var_4872, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %656 = cast(%var_4887, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %657 = reshape(%652, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %658 = reshape(%653, newshape=[390]) /* ty=Tensor[(390), int8] */;
  %659 = reshape(%654, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %660 = reshape(%655, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %661 = reshape(%656, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %662 = @func_4175(%657, %658, %659, %660, %661) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
  %663 = %662.0;
  %664 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 14), uint8] */, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(2), int32] */;
  %666 = cast(%663, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %668 = rsqrt(%642) /* ty=Tensor[(7, 9), float32] */;
  %669 = %651.0;
  %670 = greater_equal(%666, %667) /* ty=Tensor[(?, 14), bool] */;
  (%668, %669, %var_4870, %var_4871, %var_4872, meta[relay.Constant][59] /* ty=Tensor[(5, 30), float64] */, meta[relay.Constant][60] /* ty=Tensor[(14), uint8] */, meta[relay.Constant][61] /* ty=Tensor[(390), int8] */, %var_4887, %670)
}

def @func_417(%var_402: Tensor[(15, 12, 10), uint32], %var_414: Tensor[(1, 150), float64]) -> (Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) {
  %671 = cast(meta[relay.Constant][63] /* ty=Tensor[(15, 12, 10), uint32] */, dtype="uint32") /* ty=Tensor[(15, 12, 10), uint32] */;
  %672 = shape_of(%var_402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%var_402, dtype="uint32") /* ty=Tensor[(15, 12, 10), uint32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %675 = cast(%var_414, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %676 = cast(%var_414, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %677 = reshape(%675, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %678 = reshape(%676, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %679 = logical_xor(%673, %674) /* ty=Tensor[(15, 12, 10), uint32] */;
  %680 = @func_49(%677, %678) /* ty=Tensor[(3, 5, 10), float64] */;
  (%679, %680, %var_414)
}

def @func_1409(%var_1346: Tensor[(15, 1, 13), float64], %var_1350: Tensor[(15, 7, 13), float64], %var_1377: Tensor[(15, 3, 13), float64], %var_1398: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 7, 13), bool], Tensor[(7, 2, 11), bool], Tensor[(2, 1120), uint8], Tensor[(7, 2, 11), bool], Tensor[(15, 3, 13), bool]) {
  %681 = cast(%var_1346, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
  %682 = atan(%681) /* ty=Tensor[(15, 1, 13), float64] */;
  %683 = cast(%682, dtype="bool") /* ty=Tensor[(15, 1, 13), bool] */;
  %684 = cast(%var_1350, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
  %685 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 1120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1120), uint8] */;
  %686 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 1120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1120), uint8] */;
  %687 = reshape(%685, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %688 = reshape(%686, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %689 = @func_1299(%687, %688) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
  %690 = %689.1;
  %691 = cast(%690, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
  %692 = cast(%690, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
  %693 = reshape(%691, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %694 = reshape(%692, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %695 = cast(%682, dtype="float32") /* ty=Tensor[(15, 1, 13), float32] */;
  %696 = cast(%var_1377, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %697 = divide(%695, %696) /* ty=Tensor[(15, 3, 13), float32] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %699 = asin(%698) /* ty=Tensor[(15, 3, 13), float64] */;
  %700 = cast(%var_1398, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %704 = logical_or(%683, %684) /* ty=Tensor[(15, 7, 13), bool] */;
  %705 = @func_960(%693, %694) /* ty=Tensor[(7, 2, 11), bool] */;
  %706 = greater(%702, %703) /* ty=Tensor[(15, 3, 13), bool] */;
  (%704, %690, meta[relay.Constant][64] /* ty=Tensor[(2, 1120), uint8] */, %705, %706)
}

def @func_5108() -> (Tensor[(14, 12, 2), float32],) {
  %707 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
  %708 = cast(meta[relay.Constant][65] /* ty=Tensor[(14, 12, 2), float32] */, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %712 = maximum(%710, %711) /* ty=Tensor[(14, 12, 2), uint8] */;
  %713 = cast(meta[relay.Constant][65] /* ty=Tensor[(14, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = divide(%715, %716) /* ty=Tensor[(14, 12, 2), float32] */;
  (%717,)
}

def @func_1926(%var_1918: Tensor[(16, 11, 16), int32], %var_1919: Tensor[(16, 11, 16), int32]) -> (Tensor[(16, 11, 16), uint32],) {
  %718 = cast(%var_1919, dtype="int32") /* ty=Tensor[(16, 11, 16), int32] */;
  %719 = shape_of(%var_1918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%var_1918, dtype="int32") /* ty=Tensor[(16, 11, 16), int32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %722 = subtract(%720, %721) /* ty=Tensor[(16, 11, 16), int32] */;
  %723 = cast(%var_1918, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %727 = left_shift(%725, %726) /* ty=Tensor[(16, 11, 16), uint32] */;
  (%727,)
}

def @func_5390(%var_5377: Tensor[(10, 9, 14), uint64], %var_5383: Tensor[(420), float64], %var_5384: Tensor[(1680), float64]) -> (Tensor[(10, 9, 14), uint64], Tensor[(1680), float64], Tensor[(420), float64], Tensor[(1680), float64]) {
  %728 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 9, 14), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 14), uint64] */;
  %729 = cast(%var_5377, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
  %730 = cast(%var_5383, dtype="float64") /* ty=Tensor[(420), float64] */;
  %731 = cast(%var_5384, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %732 = reshape(%730, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %733 = reshape(%731, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %734 = @func_3913(%732, %733) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) */;
  %735 = multiply(%728, %729) /* ty=Tensor[(10, 9, 14), uint64] */;
  %736 = %734.2;
  (%735, %736, %var_5383, %var_5384)
}

def @func_4671() -> Tensor[(14, 12, 2), float64] {
  %737 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %738 = %737.0;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  cos(%739) /* ty=Tensor[(14, 12, 2), float64] */
}

def @func_5469(%var_5396: Tensor[(10, 15, 14), float64], %var_5449: Tensor[(48), uint8], %var_5450: Tensor[(1716), float32], %var_5462: Tensor[(14), uint8], %var_5463: Tensor[(390), int8]) -> (Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(10, 15, 14), float32], Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(360), float32], Tensor[(48), uint8], Tensor[(1716), float32], Tensor[(10, 15, 14), float32], Tensor[(11, 15, 6), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(2, 144), uint8]) {
  %740 = cast(meta[relay.Constant][67] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %741 = cast(meta[relay.Constant][67] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %742 = reshape(%740, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %743 = reshape(%741, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %744 = @func_1926(%742, %743) /* ty=(Tensor[(16, 11, 16), uint32],) */;
  %745 = cast(%var_5396, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %746 = tan(%745) /* ty=Tensor[(10, 15, 14), float64] */;
  %747 = cast(%var_5396, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = less_equal(%749, %750) /* ty=Tensor[(10, 15, 14), bool] */;
  %752 = cast(%var_5396, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %756 = cast(meta[relay.Constant][68] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %757 = cast(%var_5449, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %758 = cast(%var_5450, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %759 = reshape(%756, newshape=[12, 30]) /* ty=Tensor[(12, 30), float32] */;
  %760 = reshape(%757, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %761 = reshape(%758, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %762 = @func_5205(%759, %760, %761) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) */;
  %763 = cast(%751, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
  %764 = cast(%var_5462, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %765 = cast(%var_5463, dtype="int8") /* ty=Tensor[(390), int8] */;
  %766 = cast(%var_5449, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %767 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 144), uint8] */, dtype="uint8") /* ty=Tensor[(2, 144), uint8] */;
  %768 = cast(%var_5450, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %769 = reshape(%764, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %770 = reshape(%765, newshape=[390]) /* ty=Tensor[(390), int8] */;
  %771 = reshape(%766, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %772 = reshape(%767, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %773 = reshape(%768, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %774 = @func_4175(%769, %770, %771, %772, %773) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
  %775 = %744.0;
  %776 = floor_mod(%754, %755) /* ty=Tensor[(10, 15, 14), float32] */;
  %777 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
  %778 = %762.1;
  %779 = sqrt(%763) /* ty=Tensor[(10, 15, 14), float32] */;
  %780 = %774.15;
  (%775, meta[relay.Constant][67] /* ty=Tensor[(2816), int32] */, %776, %777, %778, meta[relay.Constant][68] /* ty=Tensor[(360), float32] */, %var_5449, %var_5450, %779, %780, %var_5462, %var_5463, meta[relay.Constant][69] /* ty=Tensor[(2, 144), uint8] */)
}

def @func_5230() -> Tensor[(14, 12, 2), float32] {
  @func_4691() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_5637(%var_5595: Tensor[(1680), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(15, 7, 16), float32], Tensor[(14, 12, 2), float32]) {
  %781 = @func_5108() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %782 = cast(%var_5595, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %783 = reshape(%782, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %784 = @func_1096(%783) /* ty=Tensor[(15, 7, 16), int32] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(15, 7, 16), float32] */;
  %786 = %781.0;
  %787 = sin(%785) /* ty=Tensor[(15, 7, 16), float32] */;
  %788 = @func_5129() /* ty=Tensor[(14, 12, 2), float32] */;
  (%786, %var_5595, %787, %788)
}

def @func_703(%var_664: Tensor[(1, 16, 3), uint8], %var_665: Tensor[(6, 16, 3), uint8], %var_683: Tensor[(6, 16, 3), bool], %var_698: Tensor[(1800), uint32], %var_699: Tensor[(1, 150), float64]) -> (Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) {
  %789 = cast(%var_664, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %790 = cast(%var_665, dtype="bool") /* ty=Tensor[(6, 16, 3), bool] */;
  %791 = equal(%789, %790) /* ty=Tensor[(6, 16, 3), bool] */;
  %792 = cast(%var_683, dtype="float64") /* ty=Tensor[(6, 16, 3), float64] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="float64") /* ty=Tensor[(6, 16, 3), float64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %796 = cast(%var_698, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %797 = cast(%var_699, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %798 = reshape(%796, newshape=[15, 12, 10]) /* ty=Tensor[(15, 12, 10), uint32] */;
  %799 = reshape(%797, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %800 = @func_417(%798, %799) /* ty=(Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) */;
  %801 = minimum(%794, %795) /* ty=Tensor[(6, 16, 3), float64] */;
  %802 = %800.2;
  (%801, %802, %var_698, %var_699)
}

def @func_4335(%var_4273: Tensor[(3, 11, 9), float64], %var_4274: Tensor[(3, 11, 9), float64], %var_4296: Tensor[(65, 4), float32], %var_4310: Tensor[(3, 11, 9), float64]) -> (Tensor[(3, 11, 9), float64], Tensor[(4, 13, 5), uint32], Tensor[(3, 11, 9), bool]) {
  %803 = cast(%var_4274, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %804 = shape_of(%var_4273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_4273, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %807 = cast(%var_4296, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %808 = reshape(%807, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %809 = @func_1769(%808) /* ty=Tensor[(4, 13, 5), float32] */;
  %810 = cast(%var_4296, dtype="uint32") /* ty=Tensor[(65, 4), uint32] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%809, dtype="uint32") /* ty=Tensor[(4, 13, 5), uint32] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %814 = cast(%var_4273, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %815 = exp(%814) /* ty=Tensor[(3, 11, 9), float64] */;
  %816 = cast(%var_4310, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%815, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = mod(%805, %806) /* ty=Tensor[(3, 11, 9), float64] */;
  %821 = left_shift(%812, %813) /* ty=Tensor[(4, 13, 5), uint32] */;
  %822 = less(%818, %819) /* ty=Tensor[(3, 11, 9), bool] */;
  (%820, %821, %822)
}

def @func_4628() -> (Tensor[(14, 12, 2), float32],) {
  %823 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
  (%823,)
}

def @func_506(%var_492: Tensor[(10, 7, 12), int64], %var_493: Tensor[(10, 7, 12), int64]) -> (Tensor[(10, 7, 12), float64],) {
  %824 = cast(%var_493, dtype="int64") /* ty=Tensor[(10, 7, 12), int64] */;
  %825 = shape_of(%var_492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%var_492, dtype="int64") /* ty=Tensor[(10, 7, 12), int64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %828 = add(%826, %827) /* ty=Tensor[(10, 7, 12), int64] */;
  %829 = cast(%828, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %830 = log2(%829) /* ty=Tensor[(10, 7, 12), float64] */;
  (%830,)
}

def @func_4618() -> Tensor[(14, 12, 2), float32] {
  %831 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %831.0
}

def @func_1299(%var_1283: Tensor[(14, 10, 16), uint8], %var_1284: Tensor[(14, 10, 16), uint8]) -> (Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) {
  %832 = cast(%var_1284, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %833 = shape_of(%var_1283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_1283, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %836 = cast(meta[relay.Constant][70] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %837 = cast(meta[relay.Constant][70] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %838 = reshape(%836, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %839 = reshape(%837, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %840 = cast(%var_1283, dtype="uint64") /* ty=Tensor[(14, 10, 16), uint64] */;
  %841 = shape_of(%var_1284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_1284, dtype="uint64") /* ty=Tensor[(14, 10, 16), uint64] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %844 = bitwise_and(%834, %835) /* ty=Tensor[(14, 10, 16), uint8] */;
  %845 = @func_960(%838, %839) /* ty=Tensor[(7, 2, 11), bool] */;
  %846 = minimum(%842, %843) /* ty=Tensor[(14, 10, 16), uint64] */;
  (%844, %845, meta[relay.Constant][70] /* ty=Tensor[(154), uint16] */, %846)
}

def @func_1009(%var_997: Tensor[(6, 11, 4), bool], %var_998: Tensor[(6, 11, 4), bool]) -> (Tensor[(6, 11, 4), bool],) {
  %847 = cast(%var_998, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %848 = shape_of(%var_997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_997, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %851 = logical_and(%849, %850) /* ty=Tensor[(6, 11, 4), bool] */;
  (%851,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5131() -> Tensor[(14, 12, 2), float32] {
  @func_5129() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_4659() -> Tensor[(9, 3, 8), bool] {
  %2 = fn () -> Tensor[(9, 3, 8), bool] {
    %0 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
    logical_or(%0, %1) /* ty=Tensor[(9, 3, 8), bool] */
  };
  %2() /* ty=Tensor[(9, 3, 8), bool] */
}

def @func_2911(%var_2901: Tensor[(14, 10, 15), bool], %var_2902: Tensor[(14, 10, 15), bool], %var_2903: Tensor[(48), uint8], %var_2904: Tensor[(288), uint8], %var_2905: Tensor[(260), float32], %var_2906: Tensor[(990), float64], %var_2907: Tensor[(264), bool], %var_2908: Tensor[(990), float64], %var_2909: Tensor[(990), float64], %var_2910: Tensor[(1, 1716), float32]) -> (Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) {
  @func_2899(%var_2901, %var_2902, %var_2903, %var_2904, %var_2905, %var_2906, %var_2907, %var_2908, %var_2909, %var_2910) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */
}

def @func_2899(%var_2793: Tensor[(14, 10, 15), bool], %var_2794: Tensor[(14, 10, 15), bool], %var_2799: Tensor[(48), uint8], %var_2800: Tensor[(288), uint8], %var_2809: Tensor[(260), float32], %var_2810: Tensor[(990), float64], %var_2820: Tensor[(264), bool], %var_2833: Tensor[(990), float64], %var_2844: Tensor[(990), float64], %var_2858: Tensor[(1, 1716), float32]) -> (Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) {
  %3 = cast(%var_2794, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %4 = shape_of(%var_2793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_2793, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = cast(%var_2799, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %8 = cast(%var_2800, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %9 = cast(%var_2800, dtype="bool") /* ty=Tensor[(288), bool] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %12 = reshape(%7, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
  %13 = reshape(%8, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
  %14 = reshape(%9, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
  %15 = reshape(%10, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %16 = reshape(%11, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %17 = @func_703(%12, %13, %14, %15, %16) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
  %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %19 = cast(%var_2809, dtype="float32") /* ty=Tensor[(260), float32] */;
  %20 = cast(%var_2810, dtype="float64") /* ty=Tensor[(990), float64] */;
  %21 = reshape(%18, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %22 = reshape(%19, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %23 = reshape(%20, newshape=[330, 3]) /* ty=Tensor[(330, 3), float64] */;
  %24 = @func_2753(%21, %22, %23) /* ty=(Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) */;
  %25 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %26 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %27 = reshape(%25, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %28 = reshape(%26, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %29 = @func_1009(%27, %28) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %30 = cast(%var_2809, dtype="float32") /* ty=Tensor[(260), float32] */;
  %31 = reshape(%30, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %32 = cast(%var_2833, dtype="bool") /* ty=Tensor[(990), bool] */;
  %33 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %34 = cast(%var_2810, dtype="bool") /* ty=Tensor[(990), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?), bool] */;
  %36 = cast(%var_2844, dtype="float64") /* ty=Tensor[(990), float64] */;
  %37 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %38 = cast(%var_2810, dtype="float64") /* ty=Tensor[(990), float64] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?), float64] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %41 = cast(meta[relay.Constant][5] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %42 = reshape(%40, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
  %43 = reshape(%41, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %44 = @func_2278(%42, %43) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) */;
  %45 = %29.0;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %47 = cast(%var_2820, dtype="bool") /* ty=Tensor[(264), bool] */;
  %48 = reshape(%46, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %49 = reshape(%47, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %50 = @func_1009(%48, %49) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %51 = cast(%var_2858, dtype="float32") /* ty=Tensor[(1, 1716), float32] */;
  %52 = reshape(%51, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %53 = @func_2305(%52) /* ty=(Tensor[(13, 12, 11), int16],) */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %55 = sin(%54) /* ty=Tensor[(2, 216), float32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 216), float32] */, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(2), int32] */;
  %58 = cast(%55, dtype="bool") /* ty=Tensor[(2, 216), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %60 = cast(%55, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %61 = @func_1769(%31) /* ty=Tensor[(4, 13, 5), float32] */;
  %62 = cast(%61, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %63 = cast(%var_2844, dtype="float64") /* ty=Tensor[(990), float64] */;
  %64 = reshape(%60, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %65 = reshape(%62, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %66 = reshape(%63, newshape=[330, 3]) /* ty=Tensor[(330, 3), float64] */;
  %67 = @func_2753(%64, %65, %66) /* ty=(Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) */;
  %68 = logical_and(%5, %6) /* ty=Tensor[(14, 10, 15), bool] */;
  %69 = %17.1;
  %70 = %24.0;
  %71 = equal(%34, %35) /* ty=Tensor[(990), bool] */;
  %72 = floor_divide(%38, %39) /* ty=Tensor[(990), float64] */;
  %73 = %44.3;
  %74 = %50.0;
  %75 = %53.0;
  %76 = less_equal(%58, %59) /* ty=Tensor[(2, 216), bool] */;
  %77 = %67.1;
  (%68, %69, %var_2799, %var_2800, meta[relay.Constant][1] /* ty=Tensor[(1800), uint32] */, meta[relay.Constant][2] /* ty=Tensor[(25, 6), float64] */, %70, %var_2809, %45, %var_2820, %61, %71, %72, %73, meta[relay.Constant][4] /* ty=Tensor[(468), float64] */, meta[relay.Constant][5] /* ty=Tensor[(1680), float64] */, %74, %75, %var_2858, %76, %77)
}

def @func_3456(%var_3422: Tensor[(6, 5, 12), float32], %var_3427: Tensor[(3, 700), bool], %var_3428: Tensor[(48), uint8], %var_3429: Tensor[(288), uint8], %var_3430: Tensor[(260), float32], %var_3433: Tensor[(1716), float32]) -> (Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) {
  %78 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %79 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %80 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %81 = cast(%var_3429, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %82 = cast(%var_3430, dtype="float32") /* ty=Tensor[(260), float32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %87 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %88 = reshape(%78, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %89 = reshape(%79, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %90 = reshape(%80, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %91 = reshape(%81, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %92 = reshape(%82, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %93 = reshape(%83, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %94 = reshape(%84, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %95 = reshape(%85, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %96 = reshape(%86, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %97 = reshape(%87, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %98 = @func_2899(%88, %89, %90, %91, %92, %93, %94, %95, %96, %97) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %99 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %100 = cast(%var_3427, dtype="bool") /* ty=Tensor[(3, 700), bool] */;
  %101 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %102 = cast(%var_3429, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %103 = cast(%var_3430, dtype="float32") /* ty=Tensor[(260), float32] */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %107 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %108 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %109 = reshape(%99, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %110 = reshape(%100, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %111 = reshape(%101, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %112 = reshape(%102, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %113 = reshape(%103, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %114 = reshape(%104, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %115 = reshape(%105, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %116 = reshape(%106, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %117 = reshape(%107, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %118 = reshape(%108, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %119 = @func_2899(%109, %110, %111, %112, %113, %114, %115, %116, %117, %118) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 44), bool] */, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %122 = reshape(%120, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %123 = reshape(%121, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %124 = @func_1009(%122, %123) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %126 = cos(%125) /* ty=Tensor[(6, 5, 12), float32] */;
  %127 = cast(%var_3422, dtype="uint32") /* ty=Tensor[(6, 5, 12), uint32] */;
  %128 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 5, 12), float32] */, dtype="uint32") /* ty=Tensor[(6, 5, 12), uint32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %131 = left_shift(%129, %130) /* ty=Tensor[(6, 5, 12), uint32] */;
  %132 = cast(%126, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = not_equal(%134, %135) /* ty=Tensor[(6, 5, 12), bool] */;
  %137 = cast(%136, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %138 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%126, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = %98.4;
  %142 = %119.15;
  %143 = %124.0;
  %144 = logical_and(%139, %140) /* ty=Tensor[(6, 5, 12), bool] */;
  (%141, %var_3427, %var_3428, %var_3429, %var_3430, meta[relay.Constant][6] /* ty=Tensor[(990), float64] */, meta[relay.Constant][7] /* ty=Tensor[(6, 44), bool] */, %var_3433, %142, %143, %144)
}

def @func_5338(%var_5317: Tensor[(7, 8, 5), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(7, 8, 5), bool]) {
  %145 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %146 = cast(%var_5317, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %147 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 8, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 8, 5), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = logical_or(%148, %149) /* ty=Tensor[(7, 8, 5), bool] */;
  %151 = cast(%var_5317, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = %145.0;
  %156 = equal(%153, %154) /* ty=Tensor[(7, 8, 5), bool] */;
  (%155, %156)
}

def @func_4925() -> (Tensor[(14, 12, 2), float32], Tensor[(14, 12, 2), float32]) {
  %161 = fn () -> (Tensor[(14, 12, 2), float32], Tensor[(14, 12, 2), float32]) {
    %157 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %158 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %159 = %157.0;
    %160 = %158.0;
    (%159, %160)
  };
  %161() /* ty=(Tensor[(14, 12, 2), float32], Tensor[(14, 12, 2), float32]) */
}

def @func_960(%var_952: Tensor[(7, 2, 11), uint16], %var_953: Tensor[(7, 2, 11), uint16]) -> Tensor[(7, 2, 11), bool] {
  %162 = cast(%var_953, dtype="bool") /* ty=Tensor[(7, 2, 11), bool] */;
  %163 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_952, dtype="bool") /* ty=Tensor[(7, 2, 11), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%164, %165) /* ty=Tensor[(7, 2, 11), bool] */
}

def @func_4692() -> Tensor[(14, 12, 2), float32] {
  %166 = fn () -> Tensor[(14, 12, 2), float32] {
    @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
  };
  %166() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_703(%var_664: Tensor[(1, 16, 3), uint8], %var_665: Tensor[(6, 16, 3), uint8], %var_683: Tensor[(6, 16, 3), bool], %var_698: Tensor[(1800), uint32], %var_699: Tensor[(1, 150), float64]) -> (Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) {
  %167 = cast(%var_664, dtype="bool") /* ty=Tensor[(1, 16, 3), bool] */;
  %168 = cast(%var_665, dtype="bool") /* ty=Tensor[(6, 16, 3), bool] */;
  %169 = equal(%167, %168) /* ty=Tensor[(6, 16, 3), bool] */;
  %170 = cast(%var_683, dtype="float64") /* ty=Tensor[(6, 16, 3), float64] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float64") /* ty=Tensor[(6, 16, 3), float64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %174 = cast(%var_698, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %175 = cast(%var_699, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %176 = reshape(%174, newshape=[15, 12, 10]) /* ty=Tensor[(15, 12, 10), uint32] */;
  %177 = reshape(%175, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %178 = @func_417(%176, %177) /* ty=(Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) */;
  %179 = minimum(%172, %173) /* ty=Tensor[(6, 16, 3), float64] */;
  %180 = %178.2;
  (%179, %180, %var_698, %var_699)
}

def @func_4005(%var_4003: Tensor[(14, 4, 10), uint64], %var_4004: Tensor[(14, 4, 10), uint64]) -> (Tensor[(14, 4, 10), bool],) {
  @func_4001(%var_4003, %var_4004) /* ty=(Tensor[(14, 4, 10), bool],) */
}

def @func_4425(%var_4423: Tensor[(8, 15, 3), float32], %var_4424: Tensor[(288), uint8]) -> (Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) {
  %212 = fn (%var_4394: Tensor[(8, 15, 3), float32], %var_4410: Tensor[(288), uint8]) -> (Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) {
    %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12), uint8] */;
    %182 = cast(%var_4410, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %183 = cast(%var_4410, dtype="bool") /* ty=Tensor[(288), bool] */;
    %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %185 = cast(meta[relay.Constant][12] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %186 = reshape(%181, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
    %187 = reshape(%182, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
    %188 = reshape(%183, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
    %189 = reshape(%184, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %190 = reshape(%185, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
    %191 = @func_703(%186, %187, %188, %189, %190) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
    %192 = cast(%var_4394, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
    %193 = asin(%192) /* ty=Tensor[(8, 15, 3), float32] */;
    %194 = cast(%var_4394, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
    %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%193, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %198 = floor_mod(%196, %197) /* ty=Tensor[(8, 15, 3), float32] */;
    %199 = cast(%198, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
    %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(36, 12), float64] */, dtype="float64") /* ty=Tensor[(36, 12), float64] */;
    %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12), uint8] */;
    %202 = cast(%var_4410, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %203 = %191.1;
    %204 = cast(%203, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
    %205 = reshape(%200, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
    %206 = reshape(%201, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
    %207 = reshape(%202, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %208 = reshape(%204, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %209 = @func_2210(%205, %206, %207, %208) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
    %210 = cosh(%199) /* ty=Tensor[(8, 15, 3), float64] */;
    %211 = %209.1;
    (%203, meta[relay.Constant][10] /* ty=Tensor[(4, 12), uint8] */, %var_4410, meta[relay.Constant][11] /* ty=Tensor[(1800), uint32] */, meta[relay.Constant][12] /* ty=Tensor[(150), float64] */, %210, %211, meta[relay.Constant][13] /* ty=Tensor[(36, 12), float64] */)
  };
  %212(%var_4423, %var_4424) /* ty=(Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) */
}

def @func_4497(%var_4474: Tensor[(14), uint8], %var_4475: Tensor[(390), int8], %var_4477: Tensor[(288), uint8], %var_4478: Tensor[(1716), float32], %var_4492: Tensor[(55), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(1716), float32], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1716), float32], Tensor[(1, 5, 11), float32], Tensor[(55), float32]) {
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %214 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %217 = cast(%var_4474, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %218 = cast(%var_4475, dtype="int8") /* ty=Tensor[(390), int8] */;
  %219 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %220 = cast(%var_4477, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %221 = cast(%var_4478, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %222 = reshape(%217, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %223 = reshape(%218, newshape=[390]) /* ty=Tensor[(390), int8] */;
  %224 = reshape(%219, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %225 = reshape(%220, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %226 = reshape(%221, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %227 = @func_4175(%222, %223, %224, %225, %226) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
  %228 = cast(%var_4492, dtype="float32") /* ty=Tensor[(55), float32] */;
  %229 = reshape(%228, newshape=[1, 5, 11]) /* ty=Tensor[(1, 5, 11), float32] */;
  %230 = @func_3574(%229) /* ty=(Tensor[(1, 5, 11), float32],) */;
  %231 = add(%215, %216) /* ty=Tensor[(6, 5, 10), int64] */;
  %232 = %227.12;
  %233 = %230.0;
  (%231, %232, %var_4474, %var_4475, meta[relay.Constant][16] /* ty=Tensor[(48), uint8] */, %var_4477, %var_4478, %233, %var_4492)
}

def @func_2278(%var_2243: Tensor[(3, 13, 12), float64], %var_2273: Tensor[(1680), float64]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) {
  %234 = cast(%var_2243, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %235 = cast(%var_2243, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %236 = cast(%var_2273, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %237 = reshape(%236, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %238 = asinh(%234) /* ty=Tensor[(3, 13, 12), float64] */;
  %239 = exp(%235) /* ty=Tensor[(3, 13, 12), float32] */;
  %240 = @func_1096(%237) /* ty=Tensor[(15, 7, 16), int32] */;
  (%238, %239, %240, %var_2273)
}

def @func_1414(%var_1410: Tensor[(15, 1, 13), float64], %var_1411: Tensor[(15, 7, 13), float64], %var_1412: Tensor[(15, 3, 13), float64], %var_1413: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 7, 13), bool], Tensor[(7, 2, 11), bool], Tensor[(2, 1120), uint8], Tensor[(7, 2, 11), bool], Tensor[(15, 3, 13), bool]) {
  %267 = fn (%var_1346: Tensor[(15, 1, 13), float64], %var_1350: Tensor[(15, 7, 13), float64], %var_1377: Tensor[(15, 3, 13), float64], %var_1398: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 7, 13), bool], Tensor[(7, 2, 11), bool], Tensor[(2, 1120), uint8], Tensor[(7, 2, 11), bool], Tensor[(15, 3, 13), bool]) {
    %241 = cast(%var_1346, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
    %242 = atan(%241) /* ty=Tensor[(15, 1, 13), float64] */;
    %243 = cast(%242, dtype="bool") /* ty=Tensor[(15, 1, 13), bool] */;
    %244 = cast(%var_1350, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
    %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 1120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1120), uint8] */;
    %246 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 1120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 1120), uint8] */;
    %247 = reshape(%245, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
    %248 = reshape(%246, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
    %249 = @func_1299(%247, %248) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
    %250 = %249.1;
    %251 = cast(%250, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
    %252 = cast(%250, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
    %253 = reshape(%251, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
    %254 = reshape(%252, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
    %255 = cast(%242, dtype="float32") /* ty=Tensor[(15, 1, 13), float32] */;
    %256 = cast(%var_1377, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
    %257 = divide(%255, %256) /* ty=Tensor[(15, 3, 13), float32] */;
    %258 = cast(%257, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %259 = asin(%258) /* ty=Tensor[(15, 3, 13), float64] */;
    %260 = cast(%var_1398, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %264 = logical_or(%243, %244) /* ty=Tensor[(15, 7, 13), bool] */;
    %265 = @func_960(%253, %254) /* ty=Tensor[(7, 2, 11), bool] */;
    %266 = greater(%262, %263) /* ty=Tensor[(15, 3, 13), bool] */;
    (%264, %250, meta[relay.Constant][17] /* ty=Tensor[(2, 1120), uint8] */, %265, %266)
  };
  %267(%var_1410, %var_1411, %var_1412, %var_1413) /* ty=(Tensor[(15, 7, 13), bool], Tensor[(7, 2, 11), bool], Tensor[(2, 1120), uint8], Tensor[(7, 2, 11), bool], Tensor[(15, 3, 13), bool]) */
}

def @func_4910(%var_4905: Tensor[(7, 9), float32], %var_4906: Tensor[(1, 432), float64], %var_4907: Tensor[(48), uint8], %var_4908: Tensor[(288), uint8], %var_4909: Tensor[(1716), float32]) -> (Tensor[(7, 9), float32], Tensor[(12, 4, 9), float64], Tensor[(1, 432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(5, 30), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(1716), float32], Tensor[(?, 14), bool]) {
  @func_4903(%var_4905, %var_4906, %var_4907, %var_4908, %var_4909) /* ty=(Tensor[(7, 9), float32], Tensor[(12, 4, 9), float64], Tensor[(1, 432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(5, 30), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(1716), float32], Tensor[(?, 14), bool]) */
}

def @func_5394(%var_5391: Tensor[(10, 9, 14), uint64], %var_5392: Tensor[(420), float64], %var_5393: Tensor[(1680), float64]) -> (Tensor[(10, 9, 14), uint64], Tensor[(1680), float64], Tensor[(420), float64], Tensor[(1680), float64]) {
  %277 = fn (%var_5377: Tensor[(10, 9, 14), uint64], %var_5383: Tensor[(420), float64], %var_5384: Tensor[(1680), float64]) -> (Tensor[(10, 9, 14), uint64], Tensor[(1680), float64], Tensor[(420), float64], Tensor[(1680), float64]) {
    %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 9, 14), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 14), uint64] */;
    %269 = cast(%var_5377, dtype="uint64") /* ty=Tensor[(10, 9, 14), uint64] */;
    %270 = cast(%var_5383, dtype="float64") /* ty=Tensor[(420), float64] */;
    %271 = cast(%var_5384, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %272 = reshape(%270, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %273 = reshape(%271, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %274 = @func_3913(%272, %273) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) */;
    %275 = multiply(%268, %269) /* ty=Tensor[(10, 9, 14), uint64] */;
    %276 = %274.2;
    (%275, %276, %var_5383, %var_5384)
  };
  %277(%var_5391, %var_5392, %var_5393) /* ty=(Tensor[(10, 9, 14), uint64], Tensor[(1680), float64], Tensor[(420), float64], Tensor[(1680), float64]) */
}

def @func_4628() -> (Tensor[(14, 12, 2), float32],) {
  %278 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
  (%278,)
}

def @func_5109() -> (Tensor[(14, 12, 2), float32],) {
  %290 = fn () -> (Tensor[(14, 12, 2), float32],) {
    %279 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
    %280 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 12, 2), float32] */, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %284 = maximum(%282, %283) /* ty=Tensor[(14, 12, 2), uint8] */;
    %285 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%284, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %289 = divide(%287, %288) /* ty=Tensor[(14, 12, 2), float32] */;
    (%289,)
  };
  %290() /* ty=(Tensor[(14, 12, 2), float32],) */
}

def @func_5341(%var_5339: Tensor[(7, 8, 5), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(7, 8, 5), bool]) {
  @func_5338(%var_5339) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(7, 8, 5), bool]) */
}

def @func_2215(%var_2211: Tensor[(12, 4, 9), float64], %var_2212: Tensor[(48, 1), uint8], %var_2213: Tensor[(288), uint8], %var_2214: Tensor[(150), float64]) -> (Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) {
  %305 = fn (%var_2200: Tensor[(12, 4, 9), float64], %var_2205: Tensor[(48, 1), uint8], %var_2206: Tensor[(288), uint8], %var_2208: Tensor[(150), float64]) -> (Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) {
    %291 = cast(%var_2200, dtype="float64") /* ty=Tensor[(12, 4, 9), float64] */;
    %292 = cast(%var_2205, dtype="uint8") /* ty=Tensor[(48, 1), uint8] */;
    %293 = cast(%var_2206, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %294 = cast(%var_2206, dtype="bool") /* ty=Tensor[(288), bool] */;
    %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %296 = cast(%var_2208, dtype="float64") /* ty=Tensor[(150), float64] */;
    %297 = reshape(%292, newshape=[1, 16, 3]) /* ty=Tensor[(1, 16, 3), uint8] */;
    %298 = reshape(%293, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), uint8] */;
    %299 = reshape(%294, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), bool] */;
    %300 = reshape(%295, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %301 = reshape(%296, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
    %302 = @func_703(%297, %298, %299, %300, %301) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */;
    %303 = sin(%291) /* ty=Tensor[(12, 4, 9), float64] */;
    %304 = %302.2;
    (%303, %304, %var_2205, %var_2206, meta[relay.Constant][20] /* ty=Tensor[(1800), uint32] */, %var_2208)
  };
  %305(%var_2211, %var_2212, %var_2213, %var_2214) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */
}

def @func_2347(%var_2346: Tensor[(11, 15, 6), float64]) -> (Tensor[(11, 15, 6), float64],) {
  %308 = fn (%var_2342: Tensor[(11, 15, 6), float64]) -> (Tensor[(11, 15, 6), float64],) {
    %306 = cast(%var_2342, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
    %307 = log(%306) /* ty=Tensor[(11, 15, 6), float64] */;
    (%307,)
  };
  %308(%var_2346) /* ty=(Tensor[(11, 15, 6), float64],) */
}

def @func_53(%var_51: Tensor[(3, 5, 10), float64], %var_52: Tensor[(3, 5, 10), float64]) -> Tensor[(3, 5, 10), float64] {
  @func_49(%var_51, %var_52) /* ty=Tensor[(3, 5, 10), float64] */
}

def @func_3983() -> (Tensor[(14, 12, 2), float32],) {
  @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */
}

def @func_4903(%var_4860: Tensor[(7, 9), float32], %var_4870: Tensor[(1, 432), float64], %var_4871: Tensor[(48), uint8], %var_4872: Tensor[(288), uint8], %var_4887: Tensor[(1716), float32]) -> (Tensor[(7, 9), float32], Tensor[(12, 4, 9), float64], Tensor[(1, 432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(5, 30), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(1716), float32], Tensor[(?, 14), bool]) {
  %309 = cast(%var_4860, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %310 = cast(%var_4870, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %311 = cast(%var_4871, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %312 = cast(%var_4872, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %313 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %314 = reshape(%310, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %315 = reshape(%311, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
  %316 = reshape(%312, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %317 = reshape(%313, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %318 = @func_2210(%314, %315, %316, %317) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %320 = cast(meta[relay.Constant][23] /* ty=Tensor[(390), int8] */, dtype="int8") /* ty=Tensor[(390), int8] */;
  %321 = cast(%var_4871, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %322 = cast(%var_4872, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %323 = cast(%var_4887, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %324 = reshape(%319, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %325 = reshape(%320, newshape=[390]) /* ty=Tensor[(390), int8] */;
  %326 = reshape(%321, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %327 = reshape(%322, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %328 = reshape(%323, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %329 = @func_4175(%324, %325, %326, %327, %328) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
  %330 = %329.0;
  %331 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 14), uint8] */, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(2), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %335 = rsqrt(%309) /* ty=Tensor[(7, 9), float32] */;
  %336 = %318.0;
  %337 = greater_equal(%333, %334) /* ty=Tensor[(?, 14), bool] */;
  (%335, %336, %var_4870, %var_4871, %var_4872, meta[relay.Constant][21] /* ty=Tensor[(5, 30), float64] */, meta[relay.Constant][22] /* ty=Tensor[(14), uint8] */, meta[relay.Constant][23] /* ty=Tensor[(390), int8] */, %var_4887, %337)
}

def @func_5475(%var_5470: Tensor[(10, 15, 14), float64], %var_5471: Tensor[(48), uint8], %var_5472: Tensor[(1716), float32], %var_5473: Tensor[(14), uint8], %var_5474: Tensor[(390), int8]) -> (Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(10, 15, 14), float32], Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(360), float32], Tensor[(48), uint8], Tensor[(1716), float32], Tensor[(10, 15, 14), float32], Tensor[(11, 15, 6), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(2, 144), uint8]) {
  %379 = fn (%var_5396: Tensor[(10, 15, 14), float64], %var_5449: Tensor[(48), uint8], %var_5450: Tensor[(1716), float32], %var_5462: Tensor[(14), uint8], %var_5463: Tensor[(390), int8]) -> (Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(10, 15, 14), float32], Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(360), float32], Tensor[(48), uint8], Tensor[(1716), float32], Tensor[(10, 15, 14), float32], Tensor[(11, 15, 6), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(2, 144), uint8]) {
    %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
    %339 = cast(meta[relay.Constant][25] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
    %340 = reshape(%338, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
    %341 = reshape(%339, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
    %342 = @func_1926(%340, %341) /* ty=(Tensor[(16, 11, 16), uint32],) */;
    %343 = cast(%var_5396, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
    %344 = tan(%343) /* ty=Tensor[(10, 15, 14), float64] */;
    %345 = cast(%var_5396, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
    %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%344, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = less_equal(%347, %348) /* ty=Tensor[(10, 15, 14), bool] */;
    %350 = cast(%var_5396, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %354 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %355 = cast(%var_5449, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %356 = cast(%var_5450, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %357 = reshape(%354, newshape=[12, 30]) /* ty=Tensor[(12, 30), float32] */;
    %358 = reshape(%355, newshape=[48]) /* ty=Tensor[(48), uint8] */;
    %359 = reshape(%356, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
    %360 = @func_5205(%357, %358, %359) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) */;
    %361 = cast(%349, dtype="float32") /* ty=Tensor[(10, 15, 14), float32] */;
    %362 = cast(%var_5462, dtype="uint8") /* ty=Tensor[(14), uint8] */;
    %363 = cast(%var_5463, dtype="int8") /* ty=Tensor[(390), int8] */;
    %364 = cast(%var_5449, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %365 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 144), uint8] */, dtype="uint8") /* ty=Tensor[(2, 144), uint8] */;
    %366 = cast(%var_5450, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %367 = reshape(%362, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
    %368 = reshape(%363, newshape=[390]) /* ty=Tensor[(390), int8] */;
    %369 = reshape(%364, newshape=[48]) /* ty=Tensor[(48), uint8] */;
    %370 = reshape(%365, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %371 = reshape(%366, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
    %372 = @func_4175(%367, %368, %369, %370, %371) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */;
    %373 = %342.0;
    %374 = floor_mod(%352, %353) /* ty=Tensor[(10, 15, 14), float32] */;
    %375 = @func_4618() /* ty=Tensor[(14, 12, 2), float32] */;
    %376 = %360.1;
    %377 = sqrt(%361) /* ty=Tensor[(10, 15, 14), float32] */;
    %378 = %372.15;
    (%373, meta[relay.Constant][25] /* ty=Tensor[(2816), int32] */, %374, %375, %376, meta[relay.Constant][26] /* ty=Tensor[(360), float32] */, %var_5449, %var_5450, %377, %378, %var_5462, %var_5463, meta[relay.Constant][27] /* ty=Tensor[(2, 144), uint8] */)
  };
  %379(%var_5470, %var_5471, %var_5472, %var_5473, %var_5474) /* ty=(Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(10, 15, 14), float32], Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(360), float32], Tensor[(48), uint8], Tensor[(1716), float32], Tensor[(10, 15, 14), float32], Tensor[(11, 15, 6), float64], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(2, 144), uint8]) */
}

def @func_1929(%var_1927: Tensor[(16, 11, 16), int32], %var_1928: Tensor[(16, 11, 16), int32]) -> (Tensor[(16, 11, 16), uint32],) {
  %390 = fn (%var_1918: Tensor[(16, 11, 16), int32], %var_1919: Tensor[(16, 11, 16), int32]) -> (Tensor[(16, 11, 16), uint32],) {
    %380 = cast(%var_1919, dtype="int32") /* ty=Tensor[(16, 11, 16), int32] */;
    %381 = shape_of(%var_1918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_1918, dtype="int32") /* ty=Tensor[(16, 11, 16), int32] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %384 = subtract(%382, %383) /* ty=Tensor[(16, 11, 16), int32] */;
    %385 = cast(%var_1918, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %389 = left_shift(%387, %388) /* ty=Tensor[(16, 11, 16), uint32] */;
    (%389,)
  };
  %390(%var_1927, %var_1928) /* ty=(Tensor[(16, 11, 16), uint32],) */
}

def @func_4824(%var_4820: Tensor[(2100), bool], %var_4821: Tensor[(48), uint8], %var_4822: Tensor[(260), float32], %var_4823: Tensor[(2100), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) {
  %420 = fn (%var_4760: Tensor[(2100), bool], %var_4761: Tensor[(48), uint8], %var_4763: Tensor[(260), float32], %var_4789: Tensor[(2100), bool]) -> (Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) {
    %391 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
    %392 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
    %393 = cast(%var_4761, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %394 = cast(meta[relay.Constant][28] /* ty=Tensor[(288), uint8] */, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %395 = cast(%var_4763, dtype="float32") /* ty=Tensor[(260), float32] */;
    %396 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
    %397 = cast(meta[relay.Constant][30] /* ty=Tensor[(132, 2), bool] */, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
    %398 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
    %399 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
    %400 = cast(meta[relay.Constant][31] /* ty=Tensor[(1716), float32] */, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %401 = reshape(%391, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
    %402 = reshape(%392, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
    %403 = reshape(%393, newshape=[48]) /* ty=Tensor[(48), uint8] */;
    %404 = reshape(%394, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %405 = reshape(%395, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %406 = reshape(%396, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %407 = reshape(%397, newshape=[264]) /* ty=Tensor[(264), bool] */;
    %408 = reshape(%398, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %409 = reshape(%399, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %410 = reshape(%400, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
    %411 = @func_2899(%401, %402, %403, %404, %405, %406, %407, %408, %409, %410) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
    %412 = cast(%var_4789, dtype="bool") /* ty=Tensor[(2100), bool] */;
    %413 = shape_of(%var_4760, dtype="int32") /* ty=Tensor[(1), int32] */;
    %414 = cast(%var_4760, dtype="bool") /* ty=Tensor[(2100), bool] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?), bool] */;
    %416 = @func_4691() /* ty=Tensor[(14, 12, 2), float32] */;
    %417 = @func_4658() /* ty=Tensor[(9, 3, 8), bool] */;
    %418 = %411.11;
    %419 = less(%414, %415) /* ty=Tensor[(2100), bool] */;
    (%416, %417, %418, %var_4761, meta[relay.Constant][28] /* ty=Tensor[(288), uint8] */, %var_4763, meta[relay.Constant][29] /* ty=Tensor[(5, 198), float64] */, meta[relay.Constant][30] /* ty=Tensor[(132, 2), bool] */, meta[relay.Constant][31] /* ty=Tensor[(1716), float32] */, %419)
  };
  %420(%var_4820, %var_4821, %var_4822, %var_4823) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) */
}

def @func_3713(%var_3712: Tensor[(2, 13, 15), int8]) -> Tensor[(2, 13, 15), bool] {
  %425 = fn (%var_3692: Tensor[(2, 13, 15), int8]) -> Tensor[(2, 13, 15), bool] {
    %421 = cast(%var_3692, dtype="bool") /* ty=Tensor[(2, 13, 15), bool] */;
    %422 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 13, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 13, 15), int8] */, dtype="bool") /* ty=Tensor[(2, 13, 15), bool] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%423, %424) /* ty=Tensor[(2, 13, 15), bool] */
  };
  %425(%var_3712) /* ty=Tensor[(2, 13, 15), bool] */
}

def @func_4504(%var_4499: Tensor[(14), uint8], %var_4500: Tensor[(390), int8], %var_4501: Tensor[(288), uint8], %var_4502: Tensor[(1716), float32], %var_4503: Tensor[(55), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(1716), float32], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1716), float32], Tensor[(1, 5, 11), float32], Tensor[(55), float32]) {
  @func_4497(%var_4499, %var_4500, %var_4501, %var_4502, %var_4503) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1716), float32], Tensor[(14), uint8], Tensor[(390), int8], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1716), float32], Tensor[(1, 5, 11), float32], Tensor[(55), float32]) */
}

def @func_3916(%var_3914: Tensor[(4, 15, 7), float64], %var_3915: Tensor[(1680), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) {
  %434 = fn (%var_3899: Tensor[(4, 15, 7), float64], %var_3908: Tensor[(1680), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) {
    %426 = cast(%var_3899, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %427 = cast(%var_3908, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %428 = reshape(%427, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
    %429 = cast(meta[relay.Constant][33] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %430 = reshape(%429, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
    %431 = log10(%426) /* ty=Tensor[(4, 15, 7), float64] */;
    %432 = @func_1096(%428) /* ty=Tensor[(15, 7, 16), int32] */;
    %433 = @func_1769(%430) /* ty=Tensor[(4, 13, 5), float32] */;
    (%431, %432, %var_3908, %433, meta[relay.Constant][33] /* ty=Tensor[(260), float32] */)
  };
  %434(%var_3914, %var_3915) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) */
}

def @func_4054(%var_4020: Tensor[(7, 10, 13), uint64], %var_4021: Tensor[(7, 10, 13), uint64], %var_4034: Tensor[(2240), uint8]) -> (Tensor[(14, 10, 16), uint64], Tensor[(2240), uint8], Tensor[(7, 10, 13), float32], Tensor[(7, 2, 11), bool], Tensor[(1200), float64], Tensor[(1, 154), uint16]) {
  %435 = cast(%var_4034, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %436 = cast(%var_4034, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %437 = reshape(%435, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %438 = reshape(%436, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %439 = @func_1299(%437, %438) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
  %440 = cast(%var_4021, dtype="uint64") /* ty=Tensor[(7, 10, 13), uint64] */;
  %441 = shape_of(%var_4020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_4020, dtype="uint64") /* ty=Tensor[(7, 10, 13), uint64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %444 = logical_xor(%442, %443) /* ty=Tensor[(7, 10, 13), uint64] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %446 = cast(meta[relay.Constant][34] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %447 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 154), uint16] */, dtype="uint16") /* ty=Tensor[(1, 154), uint16] */;
  %448 = reshape(%446, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), float64] */;
  %449 = reshape(%447, newshape=[154]) /* ty=Tensor[(154), uint16] */;
  %450 = @func_2421(%448, %449) /* ty=(Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) */;
  %451 = %439.3;
  %452 = exp(%445) /* ty=Tensor[(7, 10, 13), float32] */;
  %453 = %450.0;
  (%451, %var_4034, %452, %453, meta[relay.Constant][34] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1, 154), uint16] */)
}

def @func_3770(%var_3767: Tensor[(7, 16, 4), int8], %var_3768: Tensor[(7, 16, 4), int8], %var_3769: Tensor[(270), float64]) -> (Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) {
  @func_3765(%var_3767, %var_3768, %var_3769) /* ty=(Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) */
}

def @func_1012(%var_1010: Tensor[(6, 11, 4), bool], %var_1011: Tensor[(6, 11, 4), bool]) -> (Tensor[(6, 11, 4), bool],) {
  %459 = fn (%var_997: Tensor[(6, 11, 4), bool], %var_998: Tensor[(6, 11, 4), bool]) -> (Tensor[(6, 11, 4), bool],) {
    %454 = cast(%var_998, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
    %455 = shape_of(%var_997, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%var_997, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %458 = logical_and(%456, %457) /* ty=Tensor[(6, 11, 4), bool] */;
    (%458,)
  };
  %459(%var_1010, %var_1011) /* ty=(Tensor[(6, 11, 4), bool],) */
}

def @func_5640(%var_5638: Tensor[(1680), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(15, 7, 16), float32], Tensor[(14, 12, 2), float32]) {
  @func_5637(%var_5638) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(15, 7, 16), float32], Tensor[(14, 12, 2), float32]) */
}

def @func_5312(%var_5310: Tensor[(3, 15, 14), float32], %var_5311: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(14, 12, 2), float32]) {
  %472 = fn (%var_5294: Tensor[(3, 15, 14), float32], %var_5295: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(14, 12, 2), float32]) {
    %460 = cast(%var_5295, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %461 = shape_of(%var_5294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%var_5294, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %464 = floor_divide(%462, %463) /* ty=Tensor[(3, 15, 14), float32] */;
    %465 = cast(%var_5294, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
    %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%464, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %469 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %470 = less(%467, %468) /* ty=Tensor[(3, 15, 14), bool] */;
    %471 = %469.0;
    (%470, %471)
  };
  %472(%var_5310, %var_5311) /* ty=(Tensor[(3, 15, 14), bool], Tensor[(14, 12, 2), float32]) */
}

def @func_5673() -> Tensor[(14, 12, 2), float32] {
  @func_5671() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_3207(%var_3205: Tensor[(3, 2), float64], %var_3206: Tensor[(3, 2), float64]) -> (Tensor[(3, 2), bool],) {
  %478 = fn (%var_3189: Tensor[(3, 2), float64], %var_3190: Tensor[(3, 2), float64]) -> (Tensor[(3, 2), bool],) {
    %473 = cast(%var_3190, dtype="bool") /* ty=Tensor[(3, 2), bool] */;
    %474 = shape_of(%var_3189, dtype="int32") /* ty=Tensor[(2), int32] */;
    %475 = cast(%var_3189, dtype="bool") /* ty=Tensor[(3, 2), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %477 = greater_equal(%475, %476) /* ty=Tensor[(3, 2), bool] */;
    (%477,)
  };
  %478(%var_3205, %var_3206) /* ty=(Tensor[(3, 2), bool],) */
}

def @func_3261(%var_3239: Tensor[(6, 7, 16), float64]) -> (Tensor[(6, 7, 16), float64], Tensor[(3, 5, 10), float64], Tensor[(150), float64]) {
  %479 = cast(%var_3239, dtype="float64") /* ty=Tensor[(6, 7, 16), float64] */;
  %480 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 7, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 16), float64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %483 = cast(meta[relay.Constant][37] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %484 = cast(meta[relay.Constant][37] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %485 = reshape(%483, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %486 = reshape(%484, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
  %487 = floor_mod(%481, %482) /* ty=Tensor[(6, 7, 16), float64] */;
  %488 = @func_49(%485, %486) /* ty=Tensor[(3, 5, 10), float64] */;
  (%487, %488, meta[relay.Constant][37] /* ty=Tensor[(150), float64] */)
}

def @func_4182(%var_4177: Tensor[(1, 14), uint8], %var_4178: Tensor[(390), int8], %var_4179: Tensor[(48), uint8], %var_4180: Tensor[(288), uint8], %var_4181: Tensor[(1716), float32]) -> (Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) {
  @func_4175(%var_4177, %var_4178, %var_4179, %var_4180, %var_4181) /* ty=(Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) */
}

def @func_2308(%var_2306: Tensor[(13, 12, 11), float32]) -> (Tensor[(13, 12, 11), int16],) {
  @func_2305(%var_2306) /* ty=(Tensor[(13, 12, 11), int16],) */
}

def @func_49(%var_44: Tensor[(3, 5, 10), float64], %var_45: Tensor[(3, 5, 10), float64]) -> Tensor[(3, 5, 10), float64] {
  %489 = cast(%var_45, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %490 = shape_of(%var_44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_44, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%491, %492) /* ty=Tensor[(3, 5, 10), float64] */
}

def @func_5751() -> (Tensor[(14, 12, 2), float32],) {
  %493 = @func_5108() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %494 = %493.0;
  (%494,)
}

def @func_4630() -> (Tensor[(14, 12, 2), float32],) {
  @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */
}

def @func_710(%var_705: Tensor[(1, 16, 3), uint8], %var_706: Tensor[(6, 16, 3), uint8], %var_707: Tensor[(6, 16, 3), bool], %var_708: Tensor[(1800), uint32], %var_709: Tensor[(1, 150), float64]) -> (Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) {
  @func_703(%var_705, %var_706, %var_707, %var_708, %var_709) /* ty=(Tensor[(6, 16, 3), float64], Tensor[(1, 150), float64], Tensor[(1800), uint32], Tensor[(1, 150), float64]) */
}

def @func_5210(%var_5207: Tensor[(12, 30), float32], %var_5208: Tensor[(48), uint8], %var_5209: Tensor[(1716), float32]) -> (Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) {
  @func_5205(%var_5207, %var_5208, %var_5209) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) */
}

def @func_4001(%var_3984: Tensor[(14, 4, 10), uint64], %var_3985: Tensor[(14, 4, 10), uint64]) -> (Tensor[(14, 4, 10), bool],) {
  %495 = cast(%var_3985, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %496 = shape_of(%var_3984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_3984, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = greater_equal(%497, %498) /* ty=Tensor[(14, 4, 10), bool] */;
  (%499,)
}

def @func_4619() -> Tensor[(14, 12, 2), float32] {
  %501 = fn () -> Tensor[(14, 12, 2), float32] {
    %500 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %500.0
  };
  %501() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_5232() -> Tensor[(14, 12, 2), float32] {
  @func_5230() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_2305(%var_2284: Tensor[(13, 12, 11), float32]) -> (Tensor[(13, 12, 11), int16],) {
  %502 = cast(%var_2284, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %503 = cos(%502) /* ty=Tensor[(13, 12, 11), float32] */;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(13, 12, 11), float64] */;
  %505 = sin(%504) /* ty=Tensor[(13, 12, 11), float64] */;
  %506 = cast(%505, dtype="int16") /* ty=Tensor[(13, 12, 11), int16] */;
  %507 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%503, dtype="int16") /* ty=Tensor[(13, 12, 11), int16] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %510 = minimum(%508, %509) /* ty=Tensor[(13, 12, 11), int16] */;
  (%510,)
}

def @func_509(%var_507: Tensor[(10, 7, 12), int64], %var_508: Tensor[(10, 7, 12), int64]) -> (Tensor[(10, 7, 12), float64],) {
  %518 = fn (%var_492: Tensor[(10, 7, 12), int64], %var_493: Tensor[(10, 7, 12), int64]) -> (Tensor[(10, 7, 12), float64],) {
    %511 = cast(%var_493, dtype="int64") /* ty=Tensor[(10, 7, 12), int64] */;
    %512 = shape_of(%var_492, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%var_492, dtype="int64") /* ty=Tensor[(10, 7, 12), int64] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %515 = add(%513, %514) /* ty=Tensor[(10, 7, 12), int64] */;
    %516 = cast(%515, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %517 = log2(%516) /* ty=Tensor[(10, 7, 12), float64] */;
    (%517,)
  };
  %518(%var_507, %var_508) /* ty=(Tensor[(10, 7, 12), float64],) */
}

def @func_2282(%var_2280: Tensor[(3, 13, 12), float64], %var_2281: Tensor[(1680), float64]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) {
  @func_2278(%var_2280, %var_2281) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) */
}

def @func_4175(%var_4084: Tensor[(1, 14), uint8], %var_4105: Tensor[(390), int8], %var_4131: Tensor[(48), uint8], %var_4132: Tensor[(288), uint8], %var_4136: Tensor[(1716), float32]) -> (Tensor[(1, 14), uint8], Tensor[(16, 11, 16), uint32], Tensor[(2816), int32], Tensor[(2, 13, 15), bool], Tensor[(390), int8], Tensor[(1, 1716), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260, 1), float32], Tensor[(990), float64], Tensor[(264), bool], Tensor[(1716), float32], Tensor[(13, 12, 11), int16], Tensor[(4, 13, 5), float32], Tensor[(11, 15, 6), float64]) {
  %519 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %520 = cast(%var_4084, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %521 = cast(meta[relay.Constant][39] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %522 = cast(meta[relay.Constant][39] /* ty=Tensor[(2816), int32] */, dtype="int32") /* ty=Tensor[(2816), int32] */;
  %523 = reshape(%521, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %524 = reshape(%522, newshape=[16, 11, 16]) /* ty=Tensor[(16, 11, 16), int32] */;
  %525 = @func_1926(%523, %524) /* ty=(Tensor[(16, 11, 16), uint32],) */;
  %526 = cast(%var_4105, dtype="int8") /* ty=Tensor[(390), int8] */;
  %527 = reshape(%526, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), int8] */;
  %528 = cast(meta[relay.Constant][40] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %529 = cast(meta[relay.Constant][40] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %530 = cast(%var_4131, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %531 = cast(%var_4132, dtype="uint8") /* ty=Tensor[(288), uint8] */;
  %532 = cast(meta[relay.Constant][41] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %533 = cast(meta[relay.Constant][42] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %534 = cast(meta[relay.Constant][43] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %535 = cast(meta[relay.Constant][42] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %536 = cast(meta[relay.Constant][42] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %537 = cast(%var_4136, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %538 = reshape(%528, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %539 = reshape(%529, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
  %540 = reshape(%530, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %541 = reshape(%531, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %542 = reshape(%532, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %543 = reshape(%533, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %544 = reshape(%534, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %545 = reshape(%535, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %546 = reshape(%536, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %547 = reshape(%537, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
  %548 = @func_2899(%538, %539, %540, %541, %542, %543, %544, %545, %546, %547) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
  %549 = cast(%var_4136, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %550 = reshape(%549, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %551 = @func_2305(%550) /* ty=(Tensor[(13, 12, 11), int16],) */;
  %552 = cast(meta[relay.Constant][41] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %553 = reshape(%552, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %554 = cast(meta[relay.Constant][42] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %555 = reshape(%554, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float64] */;
  %556 = @func_2345(%555) /* ty=(Tensor[(11, 15, 6), float64],) */;
  %557 = multiply(%519, %520) /* ty=Tensor[(1, 14), uint8] */;
  %558 = %525.0;
  %559 = @func_3711(%527) /* ty=Tensor[(2, 13, 15), bool] */;
  %560 = %548.18;
  %561 = %551.0;
  %562 = @func_1769(%553) /* ty=Tensor[(4, 13, 5), float32] */;
  %563 = %556.0;
  (%557, %558, meta[relay.Constant][39] /* ty=Tensor[(2816), int32] */, %559, %var_4105, %560, meta[relay.Constant][40] /* ty=Tensor[(2100), bool] */, %var_4131, %var_4132, meta[relay.Constant][41] /* ty=Tensor[(260, 1), float32] */, meta[relay.Constant][42] /* ty=Tensor[(990), float64] */, meta[relay.Constant][43] /* ty=Tensor[(264), bool] */, %var_4136, %561, %562, %563)
}

def @main(%var_5784: Tensor[(9, 3, 8), bool], %var_5798: Tensor[(48), uint8], %var_5805: Tensor[(560), uint64], %var_5806: float64, %var_5812: Tensor[(264, 1), bool], %var_5837: Tensor[(182), float64]) -> (Tensor[(9, 3, 8), int32], Tensor[(5, 198), float64], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(260), float32], Tensor[(30, 70), bool], Tensor[(560), uint64], Tensor[(6, 11, 4), bool], Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(14, 12, 2), uint32], Tensor[(2, 13, 7), float32], Tensor[(182), float64], Tensor[(264, 1), float64]) {
  %564 = @func_4658() /* ty=Tensor[(9, 3, 8), bool] */;
  %565 = cast(%var_5784, dtype="int16") /* ty=Tensor[(9, 3, 8), int16] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="int16") /* ty=Tensor[(9, 3, 8), int16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %569 = right_shift(%567, %568) /* ty=Tensor[(9, 3, 8), int16] */;
  %570 = cast(%564, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %574 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %575 = cast(%var_5798, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %576 = cast(meta[relay.Constant][45] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %577 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %578 = reshape(%574, newshape=[2100]) /* ty=Tensor[(2100), bool] */;
  %579 = reshape(%575, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %580 = reshape(%576, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %581 = reshape(%577, newshape=[2100]) /* ty=Tensor[(2100), bool] */;
  %582 = @func_4824(%578, %579, %580, %581) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(9, 3, 8), bool], Tensor[(990), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(5, 198), float64], Tensor[(132, 2), bool], Tensor[(1716), float32], Tensor[(2100), bool]) */;
  %583 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %584 = cast(%var_5805, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %585 = cast(%var_5806, dtype="float64") /* ty=float64 */;
  %586 = reshape(%583, newshape=[30, 70]) /* ty=Tensor[(30, 70), bool] */;
  %587 = reshape(%584, newshape=[40, 14]) /* ty=Tensor[(40, 14), uint64] */;
  %588 = reshape(%585, newshape=[]) /* ty=float64 */;
  %589 = @func_4610(%586, %587, %588) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) */;
  %590 = cast(%var_5812, dtype="bool") /* ty=Tensor[(264, 1), bool] */;
  %591 = cast(%var_5812, dtype="bool") /* ty=Tensor[(264, 1), bool] */;
  %592 = reshape(%590, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %593 = reshape(%591, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), bool] */;
  %594 = @func_1012(%592, %593) /* ty=(Tensor[(6, 11, 4), bool],) */;
  %595 = cast(%564, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %596 = cast(%var_5806, dtype="bool") /* ty=bool */;
  %597 = @func_5671() /* ty=Tensor[(14, 12, 2), float32] */;
  %598 = cast(%var_5806, dtype="uint32") /* ty=uint32 */;
  %599 = cast(%597, dtype="uint32") /* ty=Tensor[(14, 12, 2), uint32] */;
  %600 = cast(%var_5837, dtype="float64") /* ty=Tensor[(182), float64] */;
  %601 = reshape(%600, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float64] */;
  %602 = cast(%var_5812, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
  %603 = asin(%602) /* ty=Tensor[(264, 1), float32] */;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(264, 1), float64] */;
  %605 = multiply(%572, %573) /* ty=Tensor[(9, 3, 8), int32] */;
  %606 = %582.6;
  %607 = %589.2;
  %608 = %594.0;
  %609 = @func_5230() /* ty=Tensor[(14, 12, 2), float32] */;
  %610 = less_equal(%595, %596) /* ty=Tensor[(9, 3, 8), bool] */;
  %611 = subtract(%598, %599) /* ty=Tensor[(14, 12, 2), uint32] */;
  %612 = @func_1617(%601) /* ty=Tensor[(2, 13, 7), float32] */;
  %613 = log10(%604) /* ty=Tensor[(264, 1), float64] */;
  (%605, %606, meta[relay.Constant][44] /* ty=Tensor[(2100), bool] */, %var_5798, meta[relay.Constant][45] /* ty=Tensor[(260), float32] */, %607, %var_5805, %608, %609, %610, %611, %612, %var_5837, %613)
}

def @func_5129() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_1299(%var_1283: Tensor[(14, 10, 16), uint8], %var_1284: Tensor[(14, 10, 16), uint8]) -> (Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) {
  %614 = cast(%var_1284, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %615 = shape_of(%var_1283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%var_1283, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %618 = cast(meta[relay.Constant][46] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %619 = cast(meta[relay.Constant][46] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %620 = reshape(%618, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %621 = reshape(%619, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
  %622 = cast(%var_1283, dtype="uint64") /* ty=Tensor[(14, 10, 16), uint64] */;
  %623 = shape_of(%var_1284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_1284, dtype="uint64") /* ty=Tensor[(14, 10, 16), uint64] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %626 = bitwise_and(%616, %617) /* ty=Tensor[(14, 10, 16), uint8] */;
  %627 = @func_960(%620, %621) /* ty=Tensor[(7, 2, 11), bool] */;
  %628 = minimum(%624, %625) /* ty=Tensor[(14, 10, 16), uint64] */;
  (%626, %627, meta[relay.Constant][46] /* ty=Tensor[(154), uint16] */, %628)
}

def @func_5205(%var_5190: Tensor[(12, 30), float32], %var_5192: Tensor[(48), uint8], %var_5195: Tensor[(1716), float32]) -> (Tensor[(14, 12, 2), float64], Tensor[(1680), float64], Tensor[(12, 30), float32], Tensor[(2100), bool], Tensor[(48), uint8], Tensor[(288, 1), uint8], Tensor[(260), float32], Tensor[(1716), float32]) {
  %629 = @func_4628() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %630 = %629.0;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %632 = cast(%var_5190, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %633 = cast(meta[relay.Constant][47] /* ty=Tensor[(2100), bool] */, dtype="bool") /* ty=Tensor[(2100), bool] */;
  %634 = cast(%var_5192, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %635 = cast(meta[relay.Constant][48] /* ty=Tensor[(288, 1), uint8] */, dtype="uint8") /* ty=Tensor[(288, 1), uint8] */;
  %636 = cast(meta[relay.Constant][49] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %637 = cast(%var_5195, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %638 = reshape(%632, newshape=[6, 5, 12]) /* ty=Tensor[(6, 5, 12), float32] */;
  %639 = reshape(%633, newshape=[3, 700]) /* ty=Tensor[(3, 700), bool] */;
  %640 = reshape(%634, newshape=[48]) /* ty=Tensor[(48), uint8] */;
  %641 = reshape(%635, newshape=[288]) /* ty=Tensor[(288), uint8] */;
  %642 = reshape(%636, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %643 = reshape(%637, newshape=[1716]) /* ty=Tensor[(1716), float32] */;
  %644 = @func_3456(%638, %639, %640, %641, %642, %643) /* ty=(Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) */;
  %645 = log10(%631) /* ty=Tensor[(14, 12, 2), float64] */;
  %646 = %644.8;
  (%645, %646, %var_5190, meta[relay.Constant][47] /* ty=Tensor[(2100), bool] */, %var_5192, meta[relay.Constant][48] /* ty=Tensor[(288, 1), uint8] */, meta[relay.Constant][49] /* ty=Tensor[(260), float32] */, %var_5195)
}

def @func_4251(%var_4248: Tensor[(14, 12, 2), float32], %var_4249: Tensor[(5, 84), float64], %var_4250: Tensor[(270), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 13, 15), bool], Tensor[(390, 1), int8], Tensor[(260), float32], Tensor[(5, 84), float64], Tensor[(420, 4), float64], Tensor[(7, 16, 4), int8], Tensor[(1, 448), int8], Tensor[(270), float64]) {
  %671 = fn (%var_4213: Tensor[(14, 12, 2), float32], %var_4226: Tensor[(5, 84), float64], %var_4240: Tensor[(270), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(2, 13, 15), bool], Tensor[(390, 1), int8], Tensor[(260), float32], Tensor[(5, 84), float64], Tensor[(420, 4), float64], Tensor[(7, 16, 4), int8], Tensor[(1, 448), int8], Tensor[(270), float64]) {
    %647 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %648 = %647.0;
    %649 = cast(%var_4213, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
    %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %651 = cast(%648, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %653 = cast(meta[relay.Constant][50] /* ty=Tensor[(390, 1), int8] */, dtype="int8") /* ty=Tensor[(390, 1), int8] */;
    %654 = reshape(%653, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), int8] */;
    %655 = cast(%var_4226, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
    %656 = cast(meta[relay.Constant][51] /* ty=Tensor[(420, 4), float64] */, dtype="float64") /* ty=Tensor[(420, 4), float64] */;
    %657 = reshape(%655, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %658 = reshape(%656, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %659 = @func_3913(%657, %658) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(15, 7, 16), int32], Tensor[(1680), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32]) */;
    %660 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 448), int8] */, dtype="int8") /* ty=Tensor[(1, 448), int8] */;
    %661 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 448), int8] */, dtype="int8") /* ty=Tensor[(1, 448), int8] */;
    %662 = cast(%var_4240, dtype="float64") /* ty=Tensor[(270), float64] */;
    %663 = reshape(%660, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int8] */;
    %664 = reshape(%661, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int8] */;
    %665 = reshape(%662, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %666 = @func_3765(%663, %664, %665) /* ty=(Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) */;
    %667 = mod(%651, %652) /* ty=Tensor[(14, 12, 2), float32] */;
    %668 = @func_3711(%654) /* ty=Tensor[(2, 13, 15), bool] */;
    %669 = %659.4;
    %670 = %666.0;
    (%667, %668, meta[relay.Constant][50] /* ty=Tensor[(390, 1), int8] */, %669, %var_4226, meta[relay.Constant][51] /* ty=Tensor[(420, 4), float64] */, %670, meta[relay.Constant][52] /* ty=Tensor[(1, 448), int8] */, %var_4240)
  };
  %671(%var_4248, %var_4249, %var_4250) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(2, 13, 15), bool], Tensor[(390, 1), int8], Tensor[(260), float32], Tensor[(5, 84), float64], Tensor[(420, 4), float64], Tensor[(7, 16, 4), int8], Tensor[(1, 448), int8], Tensor[(270), float64]) */
}

def @func_3145(%var_3143: float64) -> Tensor[(13, 15, 2), float64] {
  @func_3142(%var_3143) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_1096(%var_1079: Tensor[(15, 7, 16), float64]) -> Tensor[(15, 7, 16), int32] {
  %672 = cast(%var_1079, dtype="float64") /* ty=Tensor[(15, 7, 16), float64] */;
  %673 = rsqrt(%672) /* ty=Tensor[(15, 7, 16), float64] */;
  %674 = cast(%var_1079, dtype="int32") /* ty=Tensor[(15, 7, 16), int32] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="int32") /* ty=Tensor[(15, 7, 16), int32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%676, %677) /* ty=Tensor[(15, 7, 16), int32] */
}

def @func_964(%var_962: Tensor[(7, 2, 11), uint16], %var_963: Tensor[(7, 2, 11), uint16]) -> Tensor[(7, 2, 11), bool] {
  @func_960(%var_962, %var_963) /* ty=Tensor[(7, 2, 11), bool] */
}

def @func_3576(%var_3575: Tensor[(1, 5, 11), float32]) -> (Tensor[(1, 5, 11), float32],) {
  %680 = fn (%var_3566: Tensor[(1, 5, 11), float32]) -> (Tensor[(1, 5, 11), float32],) {
    %678 = cast(%var_3566, dtype="float32") /* ty=Tensor[(1, 5, 11), float32] */;
    %679 = sinh(%678) /* ty=Tensor[(1, 5, 11), float32] */;
    (%679,)
  };
  %680(%var_3575) /* ty=(Tensor[(1, 5, 11), float32],) */
}

def @func_4335(%var_4273: Tensor[(3, 11, 9), float64], %var_4274: Tensor[(3, 11, 9), float64], %var_4296: Tensor[(65, 4), float32], %var_4310: Tensor[(3, 11, 9), float64]) -> (Tensor[(3, 11, 9), float64], Tensor[(4, 13, 5), uint32], Tensor[(3, 11, 9), bool]) {
  %681 = cast(%var_4274, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %682 = shape_of(%var_4273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_4273, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = cast(%var_4296, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %686 = reshape(%685, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
  %687 = @func_1769(%686) /* ty=Tensor[(4, 13, 5), float32] */;
  %688 = cast(%var_4296, dtype="uint32") /* ty=Tensor[(65, 4), uint32] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="uint32") /* ty=Tensor[(4, 13, 5), uint32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %692 = cast(%var_4273, dtype="float64") /* ty=Tensor[(3, 11, 9), float64] */;
  %693 = exp(%692) /* ty=Tensor[(3, 11, 9), float64] */;
  %694 = cast(%var_4310, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %698 = mod(%683, %684) /* ty=Tensor[(3, 11, 9), float64] */;
  %699 = left_shift(%690, %691) /* ty=Tensor[(4, 13, 5), uint32] */;
  %700 = less(%696, %697) /* ty=Tensor[(3, 11, 9), bool] */;
  (%698, %699, %700)
}

def @func_1617(%var_1592: Tensor[(2, 13, 7), float64]) -> Tensor[(2, 13, 7), float32] {
  %701 = cast(%var_1592, dtype="float64") /* ty=Tensor[(2, 13, 7), float64] */;
  %702 = sqrt(%701) /* ty=Tensor[(2, 13, 7), float64] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(2, 13, 7), float64] */;
  %704 = log10(%703) /* ty=Tensor[(2, 13, 7), float64] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  log2(%705) /* ty=Tensor[(2, 13, 7), float32] */
}

def @func_5753() -> (Tensor[(14, 12, 2), float32],) {
  @func_5751() /* ty=(Tensor[(14, 12, 2), float32],) */
}

def @func_4672() -> Tensor[(14, 12, 2), float64] {
  %709 = fn () -> Tensor[(14, 12, 2), float64] {
    %706 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %707 = %706.0;
    %708 = cast(%707, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    cos(%708) /* ty=Tensor[(14, 12, 2), float64] */
  };
  %709() /* ty=Tensor[(14, 12, 2), float64] */
}

def @func_1620(%var_1618: Tensor[(2, 13, 7), float64]) -> Tensor[(2, 13, 7), float32] {
  @func_1617(%var_1618) /* ty=Tensor[(2, 13, 7), float32] */
}

def @func_3142(%var_3129: float64) -> Tensor[(13, 15, 2), float64] {
  %710 = cast(%var_3129, dtype="float64") /* ty=float64 */;
  %711 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  floor_mod(%710, %711) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_1769(%var_1766: Tensor[(4, 13, 5), float32]) -> Tensor[(4, 13, 5), float32] {
  %712 = cast(%var_1766, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  rsqrt(%712) /* ty=Tensor[(4, 13, 5), float32] */
}

def @func_3264(%var_3262: Tensor[(6, 7, 16), float64]) -> (Tensor[(6, 7, 16), float64], Tensor[(3, 5, 10), float64], Tensor[(150), float64]) {
  @func_3261(%var_3262) /* ty=(Tensor[(6, 7, 16), float64], Tensor[(3, 5, 10), float64], Tensor[(150), float64]) */
}

def @func_4636() -> Tensor[(14, 12, 2), float32] {
  %713 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %713.0
}

def @func_5029(%var_5025: Tensor[(14, 160), uint8], %var_5026: Tensor[(432), float64], %var_5027: Tensor[(288), uint8], %var_5028: Tensor[(1716), float32]) -> (Tensor[(15, 7, 16), int32], Tensor[(1680, 1), float64], Tensor[(14, 160), uint8], Tensor[(14, 12, 2), float32], Tensor[(14, 10, 16), float64], Tensor[(150), float64], Tensor[(432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(150, 1), float64], Tensor[(1800), uint32], Tensor[(360), float32], Tensor[(14, 12, 2), float64], Tensor[(13, 12, 11), int16], Tensor[(1716), float32]) {
  %757 = fn (%var_4948: Tensor[(14, 160), uint8], %var_4971: Tensor[(432), float64], %var_4973: Tensor[(288), uint8], %var_5018: Tensor[(1716), float32]) -> (Tensor[(15, 7, 16), int32], Tensor[(1680, 1), float64], Tensor[(14, 160), uint8], Tensor[(14, 12, 2), float32], Tensor[(14, 10, 16), float64], Tensor[(150), float64], Tensor[(432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(150, 1), float64], Tensor[(1800), uint32], Tensor[(360), float32], Tensor[(14, 12, 2), float64], Tensor[(13, 12, 11), int16], Tensor[(1716), float32]) {
    %714 = cast(meta[relay.Constant][54] /* ty=Tensor[(1680, 1), float64] */, dtype="float64") /* ty=Tensor[(1680, 1), float64] */;
    %715 = reshape(%714, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
    %716 = @func_4691() /* ty=Tensor[(14, 12, 2), float32] */;
    %717 = cast(%716, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
    %718 = cast(%var_4948, dtype="uint8") /* ty=Tensor[(14, 160), uint8] */;
    %719 = cast(%var_4948, dtype="uint8") /* ty=Tensor[(14, 160), uint8] */;
    %720 = reshape(%718, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
    %721 = reshape(%719, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
    %722 = @func_1299(%720, %721) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */;
    %723 = %722.3;
    %724 = cast(%723, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
    %725 = cast(%var_4971, dtype="float64") /* ty=Tensor[(432), float64] */;
    %726 = cast(meta[relay.Constant][55] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %727 = cast(%var_4973, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %728 = cast(meta[relay.Constant][56] /* ty=Tensor[(150, 1), float64] */, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
    %729 = reshape(%725, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
    %730 = reshape(%726, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint8] */;
    %731 = reshape(%727, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %732 = reshape(%728, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %733 = @func_2210(%729, %730, %731, %732) /* ty=(Tensor[(12, 4, 9), float64], Tensor[(1800), uint32], Tensor[(48, 1), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64]) */;
    %734 = cast(meta[relay.Constant][57] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %735 = cast(%var_4973, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %736 = reshape(%734, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
    %737 = reshape(%735, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %738 = @func_4422(%736, %737) /* ty=(Tensor[(1, 150), float64], Tensor[(4, 12), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(150), float64], Tensor[(8, 15, 3), float64], Tensor[(1800), uint32], Tensor[(36, 12), float64]) */;
    %739 = cast(%716, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    %740 = rsqrt(%739) /* ty=Tensor[(14, 12, 2), float64] */;
    %741 = cast(%716, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
    %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%740, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %745 = logical_or(%743, %744) /* ty=Tensor[(14, 12, 2), bool] */;
    %746 = cast(%745, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    %747 = cast(%var_5018, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %748 = reshape(%747, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
    %749 = @func_2305(%748) /* ty=(Tensor[(13, 12, 11), int16],) */;
    %750 = @func_1096(%715) /* ty=Tensor[(15, 7, 16), int32] */;
    %751 = erf(%717) /* ty=Tensor[(14, 12, 2), float32] */;
    %752 = log10(%724) /* ty=Tensor[(14, 10, 16), float64] */;
    %753 = %733.5;
    %754 = %738.3;
    %755 = asin(%746) /* ty=Tensor[(14, 12, 2), float64] */;
    %756 = %749.0;
    (%750, meta[relay.Constant][54] /* ty=Tensor[(1680, 1), float64] */, %var_4948, %751, %752, %753, %var_4971, meta[relay.Constant][55] /* ty=Tensor[(48), uint8] */, %var_4973, meta[relay.Constant][56] /* ty=Tensor[(150, 1), float64] */, %754, meta[relay.Constant][57] /* ty=Tensor[(360), float32] */, %755, %756, %var_5018)
  };
  %757(%var_5025, %var_5026, %var_5027, %var_5028) /* ty=(Tensor[(15, 7, 16), int32], Tensor[(1680, 1), float64], Tensor[(14, 160), uint8], Tensor[(14, 12, 2), float32], Tensor[(14, 10, 16), float64], Tensor[(150), float64], Tensor[(432), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(150, 1), float64], Tensor[(1800), uint32], Tensor[(360), float32], Tensor[(14, 12, 2), float64], Tensor[(13, 12, 11), int16], Tensor[(1716), float32]) */
}

def @func_2424(%var_2422: Tensor[(16, 15, 5), float64], %var_2423: Tensor[(154), uint16]) -> (Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) {
  %783 = fn (%var_2374: Tensor[(16, 15, 5), float64], %var_2381: Tensor[(154), uint16]) -> (Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) {
    %758 = cast(%var_2381, dtype="uint16") /* ty=Tensor[(154), uint16] */;
    %759 = cast(%var_2381, dtype="uint16") /* ty=Tensor[(154), uint16] */;
    %760 = reshape(%758, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
    %761 = reshape(%759, newshape=[7, 2, 11]) /* ty=Tensor[(7, 2, 11), uint16] */;
    %762 = cast(%var_2374, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
    %763 = cos(%762) /* ty=Tensor[(16, 15, 5), float64] */;
    %764 = cast(%763, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
    %765 = sigmoid(%764) /* ty=Tensor[(16, 15, 5), float64] */;
    %766 = cast(meta[relay.Constant][58] /* ty=Tensor[(16, 15, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 15, 5), bool] */;
    %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%765, dtype="bool") /* ty=Tensor[(16, 15, 5), bool] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %770 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
    %771 = shape_of(%var_2374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%var_2374, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %774 = cast(meta[relay.Constant][60] /* ty=Tensor[(840), int64] */, dtype="int64") /* ty=Tensor[(840), int64] */;
    %775 = cast(meta[relay.Constant][60] /* ty=Tensor[(840), int64] */, dtype="int64") /* ty=Tensor[(840), int64] */;
    %776 = reshape(%774, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int64] */;
    %777 = reshape(%775, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int64] */;
    %778 = @func_506(%776, %777) /* ty=(Tensor[(10, 7, 12), float64],) */;
    %779 = @func_960(%760, %761) /* ty=Tensor[(7, 2, 11), bool] */;
    %780 = logical_or(%768, %769) /* ty=Tensor[(16, 15, 5), bool] */;
    %781 = floor_mod(%772, %773) /* ty=Tensor[(16, 15, 5), float64] */;
    %782 = %778.0;
    (%779, %var_2381, %780, %781, %782, meta[relay.Constant][60] /* ty=Tensor[(840), int64] */)
  };
  %783(%var_2422, %var_2423) /* ty=(Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(16, 15, 5), bool], Tensor[(16, 15, 5), float64], Tensor[(10, 7, 12), float64], Tensor[(840), int64]) */
}

def @func_5637(%var_5595: Tensor[(1680), float64]) -> (Tensor[(14, 12, 2), float32], Tensor[(1680), float64], Tensor[(15, 7, 16), float32], Tensor[(14, 12, 2), float32]) {
  %784 = @func_5108() /* ty=(Tensor[(14, 12, 2), float32],) */;
  %785 = cast(%var_5595, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %786 = reshape(%785, newshape=[15, 7, 16]) /* ty=Tensor[(15, 7, 16), float64] */;
  %787 = @func_1096(%786) /* ty=Tensor[(15, 7, 16), int32] */;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(15, 7, 16), float32] */;
  %789 = %784.0;
  %790 = sin(%788) /* ty=Tensor[(15, 7, 16), float32] */;
  %791 = @func_5129() /* ty=Tensor[(14, 12, 2), float32] */;
  (%789, %var_5595, %790, %791)
}

def @func_5519(%var_5516: Tensor[(11, 10, 5), float64], %var_5517: Tensor[(11, 10, 5), float64], %var_5518: Tensor[(1680), float64]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), bool], Tensor[(3, 13, 12), float64], Tensor[(468), float64], Tensor[(1680), float64]) {
  %807 = fn (%var_5482: Tensor[(11, 10, 5), float64], %var_5498: Tensor[(11, 10, 5), float64], %var_5510: Tensor[(1680), float64]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), bool], Tensor[(3, 13, 12), float64], Tensor[(468), float64], Tensor[(1680), float64]) {
    %792 = cast(%var_5482, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %793 = cast(%var_5482, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
    %794 = sigmoid(%793) /* ty=Tensor[(11, 10, 5), float64] */;
    %795 = cast(%var_5498, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
    %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%794, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %799 = cast(meta[relay.Constant][61] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %800 = cast(%var_5510, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %801 = reshape(%799, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
    %802 = reshape(%800, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %803 = @func_2278(%801, %802) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(15, 7, 16), int32], Tensor[(1680), float64]) */;
    %804 = cos(%792) /* ty=Tensor[(11, 10, 5), float32] */;
    %805 = less(%797, %798) /* ty=Tensor[(11, 10, 5), bool] */;
    %806 = %803.0;
    (%804, %805, %806, meta[relay.Constant][61] /* ty=Tensor[(468), float64] */, %var_5510)
  };
  %807(%var_5516, %var_5517, %var_5518) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), bool], Tensor[(3, 13, 12), float64], Tensor[(468), float64], Tensor[(1680), float64]) */
}

def @func_5671() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_4059(%var_4056: Tensor[(7, 10, 13), uint64], %var_4057: Tensor[(7, 10, 13), uint64], %var_4058: Tensor[(2240), uint8]) -> (Tensor[(14, 10, 16), uint64], Tensor[(2240), uint8], Tensor[(7, 10, 13), float32], Tensor[(7, 2, 11), bool], Tensor[(1200), float64], Tensor[(1, 154), uint16]) {
  @func_4054(%var_4056, %var_4057, %var_4058) /* ty=(Tensor[(14, 10, 16), uint64], Tensor[(2240), uint8], Tensor[(7, 10, 13), float32], Tensor[(7, 2, 11), bool], Tensor[(1200), float64], Tensor[(1, 154), uint16]) */
}

def @func_2757(%var_2754: Tensor[(3, 12, 12), float32], %var_2755: Tensor[(260), float32], %var_2756: Tensor[(330, 3), float64]) -> (Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) {
  %822 = fn (%var_2729: Tensor[(3, 12, 12), float32], %var_2735: Tensor[(260), float32], %var_2748: Tensor[(330, 3), float64]) -> (Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) {
    %808 = cast(%var_2735, dtype="float32") /* ty=Tensor[(260), float32] */;
    %809 = reshape(%808, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float32] */;
    %810 = cast(%var_2729, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
    %811 = erf(%810) /* ty=Tensor[(3, 12, 12), float32] */;
    %812 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 12, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 12), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(3, 12, 12), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %816 = cast(%var_2748, dtype="float64") /* ty=Tensor[(330, 3), float64] */;
    %817 = reshape(%816, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float64] */;
    %818 = @func_2345(%817) /* ty=(Tensor[(11, 15, 6), float64],) */;
    %819 = @func_1769(%809) /* ty=Tensor[(4, 13, 5), float32] */;
    %820 = logical_or(%814, %815) /* ty=Tensor[(3, 12, 12), bool] */;
    %821 = %818.0;
    (%819, %var_2735, %820, %821, %var_2748)
  };
  %822(%var_2754, %var_2755, %var_2756) /* ty=(Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(3, 12, 12), bool], Tensor[(11, 15, 6), float64], Tensor[(330, 3), float64]) */
}

def @func_3464(%var_3458: Tensor[(6, 5, 12), float32], %var_3459: Tensor[(3, 700), bool], %var_3460: Tensor[(48), uint8], %var_3461: Tensor[(288), uint8], %var_3462: Tensor[(260), float32], %var_3463: Tensor[(1716), float32]) -> (Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) {
  @func_3456(%var_3458, %var_3459, %var_3460, %var_3461, %var_3462, %var_3463) /* ty=(Tensor[(1800), uint32], Tensor[(3, 700), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(990), float64], Tensor[(6, 44), bool], Tensor[(1716), float32], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(6, 5, 12), bool]) */
}

def @func_2043(%var_2042: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
  %824 = fn (%var_2035: Tensor[(9, 6, 5), float64]) -> Tensor[(9, 6, 5), float64] {
    %823 = cast(%var_2035, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
    sinh(%823) /* ty=Tensor[(9, 6, 5), float64] */
  };
  %824(%var_2042) /* ty=Tensor[(9, 6, 5), float64] */
}

def @func_1099(%var_1097: Tensor[(15, 7, 16), float64]) -> Tensor[(15, 7, 16), int32] {
  @func_1096(%var_1097) /* ty=Tensor[(15, 7, 16), int32] */
}

def @func_4638() -> Tensor[(14, 12, 2), float32] {
  @func_4636() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_1772(%var_1770: Tensor[(4, 13, 5), float32]) -> Tensor[(4, 13, 5), float32] {
  @func_1769(%var_1770) /* ty=Tensor[(4, 13, 5), float32] */
}

def @func_4341(%var_4337: Tensor[(3, 11, 9), float64], %var_4338: Tensor[(3, 11, 9), float64], %var_4339: Tensor[(65, 4), float32], %var_4340: Tensor[(3, 11, 9), float64]) -> (Tensor[(3, 11, 9), float64], Tensor[(4, 13, 5), uint32], Tensor[(3, 11, 9), bool]) {
  @func_4335(%var_4337, %var_4338, %var_4339, %var_4340) /* ty=(Tensor[(3, 11, 9), float64], Tensor[(4, 13, 5), uint32], Tensor[(3, 11, 9), bool]) */
}

def @func_420(%var_418: Tensor[(15, 12, 10), uint32], %var_419: Tensor[(1, 150), float64]) -> (Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) {
  %835 = fn (%var_402: Tensor[(15, 12, 10), uint32], %var_414: Tensor[(1, 150), float64]) -> (Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) {
    %825 = cast(meta[relay.Constant][63] /* ty=Tensor[(15, 12, 10), uint32] */, dtype="uint32") /* ty=Tensor[(15, 12, 10), uint32] */;
    %826 = shape_of(%var_402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(%var_402, dtype="uint32") /* ty=Tensor[(15, 12, 10), uint32] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %829 = cast(%var_414, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
    %830 = cast(%var_414, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
    %831 = reshape(%829, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
    %832 = reshape(%830, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), float64] */;
    %833 = logical_xor(%827, %828) /* ty=Tensor[(15, 12, 10), uint32] */;
    %834 = @func_49(%831, %832) /* ty=Tensor[(3, 5, 10), float64] */;
    (%833, %834, %var_414)
  };
  %835(%var_418, %var_419) /* ty=(Tensor[(15, 12, 10), uint32], Tensor[(3, 5, 10), float64], Tensor[(1, 150), float64]) */
}

def @func_5534(%var_5533: Tensor[(2, 6, 1), float32]) -> Tensor[(2, 6, 1), float32] {
  %837 = fn (%var_5526: Tensor[(2, 6, 1), float32]) -> Tensor[(2, 6, 1), float32] {
    %836 = cast(%var_5526, dtype="float32") /* ty=Tensor[(2, 6, 1), float32] */;
    sqrt(%836) /* ty=Tensor[(2, 6, 1), float32] */
  };
  %837(%var_5533) /* ty=Tensor[(2, 6, 1), float32] */
}

def @func_4610(%var_4607: Tensor[(30, 70), bool], %var_4608: Tensor[(40, 14), uint64], %var_4609: float64) -> (Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) {
  %871 = fn (%var_4557: Tensor[(30, 70), bool], %var_4581: Tensor[(40, 14), uint64], %var_4587: float64) -> (Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) {
    %838 = @func_3981() /* ty=(Tensor[(14, 12, 2), float32],) */;
    %839 = cast(%var_4557, dtype="bool") /* ty=Tensor[(30, 70), bool] */;
    %840 = cast(%var_4557, dtype="bool") /* ty=Tensor[(30, 70), bool] */;
    %841 = cast(meta[relay.Constant][64] /* ty=Tensor[(48), uint8] */, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %842 = cast(meta[relay.Constant][65] /* ty=Tensor[(288), uint8] */, dtype="uint8") /* ty=Tensor[(288), uint8] */;
    %843 = cast(meta[relay.Constant][66] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %844 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
    %845 = cast(meta[relay.Constant][68] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %846 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
    %847 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 990), float64] */, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
    %848 = cast(meta[relay.Constant][69] /* ty=Tensor[(286, 6), float32] */, dtype="float32") /* ty=Tensor[(286, 6), float32] */;
    %849 = reshape(%839, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
    %850 = reshape(%840, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), bool] */;
    %851 = reshape(%841, newshape=[48]) /* ty=Tensor[(48), uint8] */;
    %852 = reshape(%842, newshape=[288]) /* ty=Tensor[(288), uint8] */;
    %853 = reshape(%843, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %854 = reshape(%844, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %855 = reshape(%845, newshape=[264]) /* ty=Tensor[(264), bool] */;
    %856 = reshape(%846, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %857 = reshape(%847, newshape=[990]) /* ty=Tensor[(990), float64] */;
    %858 = reshape(%848, newshape=[1, 1716]) /* ty=Tensor[(1, 1716), float32] */;
    %859 = @func_2899(%849, %850, %851, %852, %853, %854, %855, %856, %857, %858) /* ty=(Tensor[(14, 10, 15), bool], Tensor[(1, 150), float64], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(1800), uint32], Tensor[(25, 6), float64], Tensor[(4, 13, 5), float32], Tensor[(260), float32], Tensor[(6, 11, 4), bool], Tensor[(264), bool], Tensor[(4, 13, 5), float32], Tensor[(990), bool], Tensor[(990), float64], Tensor[(1680), float64], Tensor[(468), float64], Tensor[(1680), float64], Tensor[(6, 11, 4), bool], Tensor[(13, 12, 11), int16], Tensor[(1, 1716), float32], Tensor[(2, 216), bool], Tensor[(260), float32]) */;
    %860 = cast(%var_4581, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
    %861 = cast(%var_4581, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
    %862 = reshape(%860, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint64] */;
    %863 = reshape(%861, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint64] */;
    %864 = @func_4001(%862, %863) /* ty=(Tensor[(14, 4, 10), bool],) */;
    %865 = cast(%var_4587, dtype="float64") /* ty=float64 */;
    %866 = reshape(%865, newshape=[]) /* ty=float64 */;
    %867 = %838.0;
    %868 = %859.11;
    %869 = %864.0;
    %870 = @func_3142(%866) /* ty=Tensor[(13, 15, 2), float64] */;
    (%867, %868, %var_4557, meta[relay.Constant][64] /* ty=Tensor[(48), uint8] */, meta[relay.Constant][65] /* ty=Tensor[(288), uint8] */, meta[relay.Constant][66] /* ty=Tensor[(260), float32] */, meta[relay.Constant][67] /* ty=Tensor[(1, 990), float64] */, meta[relay.Constant][68] /* ty=Tensor[(264), bool] */, meta[relay.Constant][69] /* ty=Tensor[(286, 6), float32] */, %869, %var_4581, %870, %var_4587)
  };
  %871(%var_4607, %var_4608, %var_4609) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(990), bool], Tensor[(30, 70), bool], Tensor[(48), uint8], Tensor[(288), uint8], Tensor[(260), float32], Tensor[(1, 990), float64], Tensor[(264), bool], Tensor[(286, 6), float32], Tensor[(14, 4, 10), bool], Tensor[(40, 14), uint64], Tensor[(13, 15, 2), float64], float64) */
}

def @func_3765(%var_3747: Tensor[(7, 16, 4), int8], %var_3748: Tensor[(7, 16, 4), int8], %var_3758: Tensor[(270), float64]) -> (Tensor[(7, 16, 4), int8], Tensor[(9, 6, 5), float64], Tensor[(270), float64]) {
  %872 = cast(%var_3748, dtype="int8") /* ty=Tensor[(7, 16, 4), int8] */;
  %873 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%var_3747, dtype="int8") /* ty=Tensor[(7, 16, 4), int8] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %876 = cast(%var_3758, dtype="float64") /* ty=Tensor[(270), float64] */;
  %877 = reshape(%876, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), float64] */;
  %878 = bitwise_or(%874, %875) /* ty=Tensor[(7, 16, 4), int8] */;
  %879 = @func_2041(%877) /* ty=Tensor[(9, 6, 5), float64] */;
  (%878, %879, %var_3758)
}

def @func_1303(%var_1301: Tensor[(14, 10, 16), uint8], %var_1302: Tensor[(14, 10, 16), uint8]) -> (Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) {
  @func_1299(%var_1301, %var_1302) /* ty=(Tensor[(14, 10, 16), uint8], Tensor[(7, 2, 11), bool], Tensor[(154), uint16], Tensor[(14, 10, 16), uint64]) */
}

def @func_5230() -> Tensor[(14, 12, 2), float32] {
  @func_4691() /* ty=Tensor[(14, 12, 2), float32] */
}

def @func_3981() -> (Tensor[(14, 12, 2), float32],) {
  %880 = cast(meta[relay.Constant][70] /* ty=Tensor[(14, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %881 = asinh(%880) /* ty=Tensor[(14, 12, 2), float32] */;
  (%881,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen46/build/output.py", line 1489, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:46:11] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

