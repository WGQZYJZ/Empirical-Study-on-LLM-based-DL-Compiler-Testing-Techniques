==========mod==========
#[version = "0.0.5"]
def @func_1979() -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
  %0 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %1 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %2 = %0.3;
  (%1, %2)
}

def @func_5452(%var_5440: Tensor[(3, 8, 2), float64], %var_5449: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), int8], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %3 = @func_4246() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %4 = %3.4;
  %5 = cast(%var_5440, dtype="int8") /* ty=Tensor[(3, 8, 2), int8] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int8") /* ty=Tensor[(3, 8, 2), int8] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %9 = multiply(%7, %8) /* ty=Tensor[(3, 8, 2), int8] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %11 = cast(%var_5449, dtype="float32") /* ty=Tensor[(352), float32] */;
  %12 = reshape(%10, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %13 = reshape(%11, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %14 = @func_2011(%12, %13) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %15 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
  %16 = %14.1;
  (%9, %15, %16, %var_5449)
}

def @func_5763(%var_5717: Tensor[(16, 7, 4), float64], %var_5729: Tensor[(297), float64]) -> (Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(3, 8, 2), float32], Tensor[(2535), int64], Tensor[(297), float64], Tensor[(16, 7, 4), float32], Tensor[(13, 4, 5), bool], Tensor[(260), int8]) {
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %18 = reshape(%17, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %19 = @func_1119(%18) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %23 = cast(%var_5729, dtype="float64") /* ty=Tensor[(297), float64] */;
  %24 = reshape(%21, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %25 = reshape(%22, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
  %26 = reshape(%23, newshape=[297]) /* ty=Tensor[(297), float64] */;
  %27 = @func_3316(%24, %25, %26) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) */;
  %28 = cast(%var_5717, dtype="float64") /* ty=Tensor[(16, 7, 4), float64] */;
  %29 = log10(%28) /* ty=Tensor[(16, 7, 4), float64] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(16, 7, 4), float32] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(260), int8] */, dtype="int8") /* ty=Tensor[(260), int8] */;
  %32 = reshape(%31, newshape=[13, 4, 5]) /* ty=Tensor[(13, 4, 5), int8] */;
  %33 = %27.0;
  %34 = atanh(%30) /* ty=Tensor[(16, 7, 4), float32] */;
  %35 = @func_5120(%32) /* ty=Tensor[(13, 4, 5), bool] */;
  (%20, meta[relay.Constant][0] /* ty=Tensor[(352, 1), float32] */, %33, meta[relay.Constant][1] /* ty=Tensor[(2535), int64] */, %var_5729, %34, %35, meta[relay.Constant][2] /* ty=Tensor[(260), int8] */)
}

def @func_1480() -> Tensor[(3, 8, 2), float64] {
  %36 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %36.0
}

def @func_1199(%var_1159: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) {
  %37 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %38 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %39 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %40 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %43 = atan(%42) /* ty=Tensor[(4, 88), float64] */;
  %44 = cast(%var_1159, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(2), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %48 = less_equal(%46, %47) /* ty=Tensor[(4, 88), bool] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %50 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %51 = %37.0;
  %52 = %38.0;
  %53 = %39.4;
  %54 = log10(%49) /* ty=Tensor[(4, 88), float64] */;
  %55 = %50.4;
  (%51, %52, %53, %54, %55)
}

def @func_848() -> Tensor[(3, 8, 2), float64] {
  @func_761() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_4493() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  %56 = @func_1233() /* ty=(Tensor[(4, 88), float64],) */;
  %57 = %56.0;
  %58 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%57, %58)
}

def @func_4860() -> Tensor[(3, 8, 2), float64] {
  %59 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %59.0
}

def @func_4989() -> Tensor[(4, 88), float64] {
  %60 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
  %60.0
}

def @func_5216(%var_5212: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
  %61 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %62 = cast(%var_5212, dtype="float64") /* ty=Tensor[(352), float64] */;
  %63 = reshape(%62, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %64 = @func_2070(%63) /* ty=(Tensor[(4, 88), int32],) */;
  %65 = %61.4;
  %66 = %64.0;
  (%65, %66, %var_5212)
}

def @func_4903() -> Tensor[(3, 8, 2), float32] {
  @func_2551() /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_6039(%var_6026: uint16) -> (Tensor[(3, 8, 2), float64], uint16, Tensor[(312), uint16], Tensor[(352, 1), float64], Tensor[(11, 4, 8), float32]) {
  %67 = cast(%var_6026, dtype="uint16") /* ty=uint16 */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), uint16] */, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %69 = reshape(%67, newshape=[]) /* ty=uint16 */;
  %70 = reshape(%68, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), uint16] */;
  %71 = @func_5562(%69, %70) /* ty=(Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) */;
  %72 = %71.2;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %74 = @func_1979() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %75 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
  %76 = sinh(%73) /* ty=Tensor[(352, 1), float64] */;
  %77 = %74.1;
  (%75, %var_6026, meta[relay.Constant][3] /* ty=Tensor[(312), uint16] */, %76, %77)
}

def @func_2521() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) {
  %78 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %79 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %81 = reshape(%80, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %82 = @func_1119(%81) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %83 = %78.0;
  %84 = %79.0;
  %85 = %82.2;
  (%83, %84, %85, meta[relay.Constant][4] /* ty=Tensor[(352), float32] */)
}

def @func_4665(%var_4602: float32, %var_4603: Tensor[(9, 6, 9), float32], %var_4620: Tensor[(9, 6, 9), float32], %var_4629: Tensor[(352), float32]) -> (Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) {
  %86 = cast(%var_4602, dtype="float32") /* ty=float32 */;
  %87 = cast(%var_4603, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
  %88 = @func_3664() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) */;
  %89 = %88.1;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %91 = cast(%var_4629, dtype="float32") /* ty=Tensor[(352), float32] */;
  %92 = reshape(%90, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %93 = reshape(%91, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %94 = @func_2011(%92, %93) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %95 = cast(%var_4620, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %96 = shape_of(%var_4603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_4603, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = logical_and(%97, %98) /* ty=Tensor[(9, 6, 9), bool] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %101 = divide(%86, %87) /* ty=Tensor[(9, 6, 9), float32] */;
  %102 = %94.2;
  %103 = tan(%100) /* ty=Tensor[(9, 6, 9), float64] */;
  %104 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
  (%101, %89, %102, %var_4629, %103, %104)
}

def @func_5304() -> (Tensor[(12, 2, 1), float64], Tensor[(2, 144), float64], Tensor[(176, 2), float64]) {
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 1), float64] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(176, 2), float64] */, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
  %107 = reshape(%106, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %108 = @func_1199(%107) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) */;
  %109 = sinh(%105) /* ty=Tensor[(12, 2, 1), float64] */;
  %110 = %108.4;
  (%109, %110, meta[relay.Constant][6] /* ty=Tensor[(176, 2), float64] */)
}

def @func_5653() -> (Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) {
  %111 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %112 = %111.1;
  %113 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
  (%112, %113)
}

def @func_2070(%var_2044: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), int32],) {
  %114 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %115 = %114.1;
  %116 = cast(%var_2044, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(2), int32] */;
  %118 = cast(%115, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %120 = bitwise_xor(%118, %119) /* ty=Tensor[(4, 88), int32] */;
  (%120,)
}

def @func_4335() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %121 = @func_4246() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %122 = @func_4286() /* ty=(Tensor[(4, 88), float32],) */;
  %123 = %121.0;
  %124 = %122.0;
  (%123, %124)
}

def @func_6171() -> (Tensor[(3, 8, 2), float32],) {
  %125 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %127 = sqrt(%126) /* ty=Tensor[(3, 8, 2), float32] */;
  (%127,)
}

def @func_6296() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) {
  %128 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %129 = @func_5653() /* ty=(Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) */;
  %130 = %128.0;
  %131 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
  %132 = %129.0;
  (%130, %131, %132)
}

def @func_5562(%var_5512: uint16, %var_5513: Tensor[(13, 8, 3), uint16]) -> (Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) {
  %133 = cast(%var_5512, dtype="uint16") /* ty=uint16 */;
  %134 = cast(%var_5513, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %136 = reshape(%135, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %137 = @func_1119(%136) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %138 = cast(%var_5512, dtype="bool") /* ty=bool */;
  %139 = cast(%var_5513, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %140 = not_equal(%138, %139) /* ty=Tensor[(13, 8, 3), bool] */;
  %141 = cast(%140, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
  %142 = shape_of(%var_5513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_5513, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %145 = right_shift(%133, %134) /* ty=Tensor[(13, 8, 3), uint16] */;
  %146 = %137.2;
  %147 = left_shift(%143, %144) /* ty=Tensor[(13, 8, 3), uint16] */;
  (%145, %146, meta[relay.Constant][7] /* ty=Tensor[(352, 1), float32] */, %147)
}

def @func_5865(%var_5847: Tensor[(10, 11, 11), float64]) -> (Tensor[(10, 11, 11), float64],) {
  %148 = cast(%var_5847, dtype="float64") /* ty=Tensor[(10, 11, 11), float64] */;
  %149 = acosh(%148) /* ty=Tensor[(10, 11, 11), float64] */;
  (%149,)
}

def @func_2670() -> Tensor[(3, 8, 2), float64] {
  %150 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %150.1
}

def @func_3228() -> Tensor[(3, 8, 2), float64] {
  @func_2670() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_4588(%var_4576: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), uint32],) {
  %151 = @func_4335() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %152 = %151.1;
  %153 = cast(%var_4576, dtype="uint32") /* ty=Tensor[(4, 88), uint32] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
  %155 = cast(%152, dtype="uint32") /* ty=Tensor[(4, 88), uint32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %157 = right_shift(%155, %156) /* ty=Tensor[(4, 88), uint32] */;
  (%157,)
}

def @func_3795() -> Tensor[(3, 8, 2), float64] {
  %158 = @func_2521() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) */;
  %158.0
}

def @func_4074(%var_4060: Tensor[(4, 88), float32], %var_4065: Tensor[(4, 88), bool]) -> (Tensor[(4, 88), bool],) {
  %159 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %160 = cast(%var_4060, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %164 = logical_or(%162, %163) /* ty=Tensor[(4, 88), bool] */;
  %165 = cast(%var_4065, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(2), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %169 = less(%167, %168) /* ty=Tensor[(4, 88), bool] */;
  (%169,)
}

def @func_6257(%var_6213: Tensor[(9, 1, 13), float32], %var_6231: Tensor[(48), float64], %var_6250: Tensor[(312), uint16]) -> (Tensor[(352), float32], float32, Tensor[(486), float32], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(48), float64], Tensor[(9, ?, 13), uint64], Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(312), uint16], Tensor[(9, ?, 13), float32]) {
  %170 = cast(-6.36086f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %174 = reshape(%170, newshape=[]) /* ty=float32 */;
  %175 = reshape(%171, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %176 = reshape(%172, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %177 = reshape(%173, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %178 = @func_4665(%174, %175, %176, %177) /* ty=(Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) */;
  %179 = cast(%var_6231, dtype="float64") /* ty=Tensor[(48), float64] */;
  %180 = %178.3;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(352), float32] */;
  %182 = reshape(%179, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %183 = reshape(%181, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %184 = @func_2011(%182, %183) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %185 = cast(%var_6213, dtype="float32") /* ty=Tensor[(9, 1, 13), float32] */;
  %186 = exp(%185) /* ty=Tensor[(9, 1, 13), float32] */;
  %187 = cast(%186, dtype="int32") /* ty=Tensor[(9, 1, 13), int32] */;
  %188 = shape_of(%var_6213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_6213, dtype="int32") /* ty=Tensor[(9, 1, 13), int32] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %191 = add(%189, %190) /* ty=Tensor[(9, ?, 13), int32] */;
  %192 = cast(%191, dtype="uint64") /* ty=Tensor[(9, ?, 13), uint64] */;
  %193 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%186, dtype="uint64") /* ty=Tensor[(9, 1, 13), uint64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %196 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
  %197 = cast(-6.36086f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %198 = cast(%var_6250, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %199 = reshape(%197, newshape=[]) /* ty=uint16 */;
  %200 = reshape(%198, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), uint16] */;
  %201 = @func_5562(%199, %200) /* ty=(Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) */;
  %202 = cast(%191, dtype="float32") /* ty=Tensor[(9, ?, 13), float32] */;
  %203 = %184.1;
  %204 = bitwise_xor(%194, %195) /* ty=Tensor[(9, ?, 13), uint64] */;
  %205 = %196.1;
  %206 = %201.2;
  %207 = sin(%202) /* ty=Tensor[(9, ?, 13), float32] */;
  (%180, -6.36086f /* ty=float32 */, meta[relay.Constant][8] /* ty=Tensor[(486), float32] */, meta[relay.Constant][9] /* ty=Tensor[(352), float32] */, %203, %var_6231, %204, %205, %206, %var_6250, %207)
}

def @func_2851(%var_2844: Tensor[(11, 3, 9), float64]) -> (Tensor[(11, 3, 9), float64],) {
  %208 = cast(%var_2844, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %209 = erf(%208) /* ty=Tensor[(11, 3, 9), float64] */;
  (%209,)
}

def @func_2836(%var_2782: Tensor[(5, 5, 8), uint32], %var_2783: Tensor[(5, 5, 8), uint32]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  %210 = cast(%var_2783, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %211 = shape_of(%var_2782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_2782, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = less_equal(%212, %213) /* ty=Tensor[(5, 5, 8), bool] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %216 = log(%215) /* ty=Tensor[(5, 5, 8), float64] */;
  %217 = cast(%var_2783, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = less(%219, %220) /* ty=Tensor[(5, 5, 8), bool] */;
  %222 = cast(%214, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %226 = cast(%214, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %227 = power(%224, %225) /* ty=Tensor[(5, 5, 8), float64] */;
  %228 = sin(%226) /* ty=Tensor[(5, 5, 8), float32] */;
  (%227, %228)
}

def @func_5966() -> (Tensor[(3, 8, 2), float64],) {
  %229 = @func_5051() /* ty=Tensor[(3, 8, 2), float64] */;
  (%229,)
}

def @func_6725(%var_6688: Tensor[(16, 16, 15), float64], %var_6689: Tensor[(16, 16, 15), float64], %var_6703: Tensor[(16, 16, 15), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(16, 16, 15), float32], Tensor[(96), uint64], Tensor[(96), float32]) {
  %230 = cast(%var_6689, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %231 = shape_of(%var_6688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_6688, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %234 = power(%232, %233) /* ty=Tensor[(16, 16, 15), float64] */;
  %235 = cast(%var_6703, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %239 = right_shift(%237, %238) /* ty=Tensor[(16, 16, 15), int16] */;
  %240 = cast(%239, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %241 = shape_of(%var_6689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_6689, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %244 = cast(%var_6703, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
  %245 = cast(meta[relay.Constant][10] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %246 = reshape(%245, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %247 = @func_3468(%246) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
  %248 = add(%242, %243) /* ty=Tensor[(16, 16, 15), int8] */;
  %249 = tan(%244) /* ty=Tensor[(16, 16, 15), float32] */;
  %250 = %247.2;
  (%248, %249, %250, meta[relay.Constant][10] /* ty=Tensor[(96), float32] */)
}

def @func_5077() -> (Tensor[(4, 6, 10), float32],) {
  %251 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %252 = exp(%251) /* ty=Tensor[(4, 6, 10), float32] */;
  (%252,)
}

def @func_6677() -> (Tensor[(3, 8, 2), float32],) {
  %253 = @func_3899() /* ty=Tensor[(3, 8, 2), float32] */;
  (%253,)
}

def @func_6599() -> (Tensor[(4, 88), float64], Tensor[(10, 11, 11), float64], Tensor[(11, 110), float64]) {
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 110), float64] */, dtype="float64") /* ty=Tensor[(11, 110), float64] */;
  %255 = reshape(%254, newshape=[10, 11, 11]) /* ty=Tensor[(10, 11, 11), float64] */;
  %256 = @func_5865(%255) /* ty=(Tensor[(10, 11, 11), float64],) */;
  %257 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %258 = %256.0;
  (%257, %258, meta[relay.Constant][12] /* ty=Tensor[(11, 110), float64] */)
}

def @func_3865() -> (Tensor[(3, 8, 2), float64],) {
  %259 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %260 = %259.0;
  (%260,)
}

def @func_1083() -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) {
  %261 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %264 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %265 = erf(%263) /* ty=Tensor[(3, 8, 2), float32] */;
  %266 = %264.0;
  (%265, %266)
}

def @func_1007() -> Tensor[(4, 88), float32] {
  %267 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %267.1
}

def @func_2409(%var_2383: Tensor[(280), bool]) -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(7, 8, 5), bool], Tensor[(280), bool]) {
  %268 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %269 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %270 = cast(%var_2383, dtype="bool") /* ty=Tensor[(280), bool] */;
  %271 = cast(%var_2383, dtype="bool") /* ty=Tensor[(280), bool] */;
  %272 = reshape(%270, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %273 = reshape(%271, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %274 = %268.0;
  %275 = %269.0;
  %276 = @func_583(%272, %273) /* ty=Tensor[(7, 8, 5), bool] */;
  (%274, %275, %276, %var_2383)
}

def @func_3541(%var_3483: Tensor[(3, 4, 16), uint16], %var_3484: Tensor[(3, 4, 16), uint16], %var_3539: Tensor[(16, 6), float32]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), int16], Tensor[(3, 8, 2), float32], Tensor[(16, 6), float32]) {
  %277 = cast(%var_3484, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %278 = shape_of(%var_3483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_3483, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = cast(%var_3484, dtype="int16") /* ty=Tensor[(3, 4, 16), int16] */;
  %282 = shape_of(%var_3483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_3483, dtype="int16") /* ty=Tensor[(3, 4, 16), int16] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %285 = cast(%var_3539, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %286 = reshape(%285, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %287 = @func_3468(%286) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
  %288 = less_equal(%279, %280) /* ty=Tensor[(3, 4, 16), bool] */;
  %289 = multiply(%283, %284) /* ty=Tensor[(3, 4, 16), int16] */;
  %290 = %287.0;
  (%288, %289, %290, %var_3539)
}

def @func_1802(%var_1797: Tensor[(96), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(96), float32], Tensor[(288), float64]) {
  %291 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %292 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %293 = cast(%var_1797, dtype="float32") /* ty=Tensor[(96), float32] */;
  %294 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %295 = reshape(%293, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %296 = reshape(%294, newshape=[2, 144]) /* ty=Tensor[(2, 144), float64] */;
  %297 = @func_1663(%295, %296) /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) */;
  %298 = %291.1;
  %299 = %292.0;
  %300 = %297.1;
  (%298, %299, %300, %var_1797, meta[relay.Constant][13] /* ty=Tensor[(288), float64] */)
}

def @func_4168(%var_4133: Tensor[(13, 2, 4), float32], %var_4134: Tensor[(13, 2, 4), float32], %var_4158: Tensor[(13, 2, 4), float32]) -> (Tensor[(13, 2, 4), int16],) {
  %301 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %302 = shape_of(%var_4133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_4133, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %305 = floor_mod(%303, %304) /* ty=Tensor[(13, 2, 4), float32] */;
  %306 = cast(%var_4158, dtype="int16") /* ty=Tensor[(13, 2, 4), int16] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="int16") /* ty=Tensor[(13, 2, 4), int16] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %310 = right_shift(%308, %309) /* ty=Tensor[(13, 2, 4), int16] */;
  (%310,)
}

def @func_5506(%var_5498: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float32],) {
  %311 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
  %312 = cast(%var_5498, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %316 = power(%314, %315) /* ty=Tensor[(3, 8, 2), float32] */;
  (%316,)
}

def @func_583(%var_531: Tensor[(7, 8, 5), bool], %var_532: Tensor[(7, 8, 5), bool]) -> Tensor[(7, 8, 5), bool] {
  %317 = cast(%var_532, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %318 = shape_of(%var_531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_531, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%319, %320) /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_1233() -> (Tensor[(4, 88), float64],) {
  %321 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %322 = %321.0;
  (%322,)
}

def @func_761() -> Tensor[(3, 8, 2), float64] {
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  sigmoid(%323) /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_953() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %324 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %325 = reshape(%324, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %326 = @func_116(%325) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %327 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %328 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %329 = %326.0;
  %330 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %331 = %327.2;
  (%328, %329, meta[relay.Constant][15] /* ty=Tensor[(288), float64] */, %330, %331)
}

def @func_5711() -> (Tensor[(11, 4, 8), float32],) {
  %332 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %333 = %332.3;
  (%333,)
}

def @func_906(%var_850: Tensor[(13, 15, 13), int64], %var_851: Tensor[(13, 15, 13), int64], %var_859: Tensor[(13, 15, 13), bool]) -> (Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) {
  %334 = cast(%var_851, dtype="bool") /* ty=Tensor[(13, 15, 13), bool] */;
  %335 = shape_of(%var_850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_850, dtype="bool") /* ty=Tensor[(13, 15, 13), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = equal(%336, %337) /* ty=Tensor[(13, 15, 13), bool] */;
  %339 = cast(%var_859, dtype="int32") /* ty=Tensor[(13, 15, 13), int32] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="int32") /* ty=Tensor[(13, 15, 13), int32] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %343 = cast(meta[relay.Constant][16] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %344 = reshape(%343, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
  %345 = left_shift(%341, %342) /* ty=Tensor[(13, 15, 13), int32] */;
  %346 = @func_46(%344) /* ty=Tensor[(11, 4, 8), float32] */;
  (%345, %346, meta[relay.Constant][16] /* ty=Tensor[(352), float32] */)
}

def @func_2591() -> Tensor[(2, 144), float64] {
  %347 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %347.4
}

def @func_1782(%var_1765: Tensor[(8, 2, 3), uint32], %var_1766: Tensor[(8, 2, 3), uint32]) -> Tensor[(8, 2, 3), float64] {
  %348 = cast(%var_1766, dtype="uint32") /* ty=Tensor[(8, 2, 3), uint32] */;
  %349 = shape_of(%var_1765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_1765, dtype="uint32") /* ty=Tensor[(8, 2, 3), uint32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %352 = bitwise_and(%350, %351) /* ty=Tensor[(8, 2, 3), uint32] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(8, 2, 3), float64] */;
  tan(%353) /* ty=Tensor[(8, 2, 3), float64] */
}

def @func_4286() -> (Tensor[(4, 88), float32],) {
  %354 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  (%354,)
}

def @func_5051() -> Tensor[(3, 8, 2), float64] {
  @func_2739() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_2011(%var_1992: Tensor[(3, 8, 2), float64], %var_1999: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %355 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %356 = cast(%var_1992, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %360 = cast(%var_1999, dtype="float32") /* ty=Tensor[(352), float32] */;
  %361 = reshape(%360, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %362 = @func_1119(%361) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %363 = mod(%358, %359) /* ty=Tensor[(3, 8, 2), float32] */;
  %364 = %362.3;
  (%363, %364, %var_1999)
}

def @func_2643() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %365 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %368 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %369 = atanh(%367) /* ty=Tensor[(3, 8, 2), float64] */;
  %370 = %368.0;
  (%369, %370)
}

def @func_1469() -> Tensor[(3, 8, 2), float64] {
  @func_761() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_2201(%var_2145: Tensor[(352), float64], %var_2193: Tensor[(4, 88), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(4, 88), float64], Tensor[(352), float64], Tensor[(4, 88), uint16]) {
  %371 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %372 = cast(%var_2145, dtype="float64") /* ty=Tensor[(352), float64] */;
  %373 = reshape(%372, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %374 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %375 = cast(%var_2193, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(2), int32] */;
  %377 = cast(%374, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %379 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %380 = %371.1;
  %381 = @func_1338(%373) /* ty=Tensor[(4, 88), float64] */;
  %382 = minimum(%377, %378) /* ty=Tensor[(4, 88), uint16] */;
  (%379, %380, %381, %var_2145, %382)
}

def @func_3741(%var_3737: Tensor[(288), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
  %383 = @func_1233() /* ty=(Tensor[(4, 88), float64],) */;
  %384 = @func_2622() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) */;
  %385 = cast(%var_3737, dtype="float64") /* ty=Tensor[(288), float64] */;
  %386 = reshape(%385, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %387 = @func_116(%386) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %388 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %389 = %383.0;
  %390 = %384.4;
  %391 = %387.0;
  (%388, %389, %390, %391, %var_3737)
}

def @func_2477(%var_2465: Tensor[(4, 24), float32]) -> (Tensor[(3, 16, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 88), int32]) {
  %392 = cast(%var_2465, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %393 = cast(%var_2465, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %394 = reshape(%392, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %395 = reshape(%393, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %396 = @func_307(%394, %395) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %397 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
  %398 = %397.0;
  %399 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%398, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %405 = %396.0;
  %406 = maximum(%403, %404) /* ty=Tensor[(4, 88), int32] */;
  (%405, %var_2465, %406)
}

def @func_4559(%var_4556: Tensor[(6, 2, 12), float32]) -> Tensor[(6, 2, 12), float32] {
  %407 = cast(%var_4556, dtype="float32") /* ty=Tensor[(6, 2, 12), float32] */;
  sinh(%407) /* ty=Tensor[(6, 2, 12), float32] */
}

def @func_4405(%var_4400: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), bool],) {
  %408 = @func_3865() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %409 = %408.0;
  %410 = cast(%var_4400, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = not_equal(%412, %413) /* ty=Tensor[(3, 8, 2), bool] */;
  (%414,)
}

def @func_46(%var_34: Tensor[(11, 4, 8), float32]) -> Tensor[(11, 4, 8), float32] {
  %415 = cast(%var_34, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  log10(%415) /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_2437() -> (Tensor[(3, 8, 2), float64],) {
  %416 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  (%416,)
}

def @func_3194() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(288), float64]) {
  %417 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
  %418 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %419 = %417.0;
  %420 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
  %421 = %418.2;
  (%419, %420, %421)
}

def @func_3664() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) {
  %422 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %425 = cast(meta[relay.Constant][17] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %426 = reshape(%424, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %427 = reshape(%425, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %428 = @func_2011(%426, %427) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %429 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %430 = reshape(%429, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %431 = @func_3468(%430) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
  %432 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %433 = reshape(%432, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %434 = @func_1882(%433) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %435 = cast(meta[relay.Constant][17] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %436 = sin(%435) /* ty=Tensor[(352), float32] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(352), float32] */;
  %438 = %431.3;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %440 = reshape(%439, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %441 = @func_2070(%440) /* ty=(Tensor[(4, 88), int32],) */;
  %442 = %441.0;
  %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(352), float32] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(2), int32] */;
  %445 = cast(%442, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %447 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %448 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %449 = reshape(%447, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %450 = reshape(%448, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %451 = @func_307(%449, %450) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %452 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %453 = %428.0;
  %454 = %434.2;
  %455 = tan(%437) /* ty=Tensor[(352), float32] */;
  %456 = power(%445, %446) /* ty=Tensor[(4, 88), float64] */;
  %457 = %451.0;
  %458 = %452.0;
  (%423, %453, %438, meta[relay.Constant][18] /* ty=Tensor[(96), float32] */, %454, meta[relay.Constant][19] /* ty=Tensor[(280), bool] */, %455, %456, %457, %458)
}

def @func_2332(%var_2301: Tensor[(2535), int64]) -> (Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) {
  %459 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %460 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
  %461 = %460.1;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %463 = reshape(%459, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %464 = reshape(%462, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %465 = @func_2011(%463, %464) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %466 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 88), float64] */, dtype="int8") /* ty=Tensor[(4, 88), int8] */;
  %467 = shape_of(%461, dtype="int32") /* ty=Tensor[(2), int32] */;
  %468 = cast(%461, dtype="int8") /* ty=Tensor[(4, 88), int8] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %470 = cast(%var_2301, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %471 = cast(%var_2301, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %472 = cast(%var_2301, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %473 = reshape(%470, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), int64] */;
  %474 = reshape(%471, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), int64] */;
  %475 = reshape(%472, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), bool] */;
  %476 = @func_906(%473, %474, %475) /* ty=(Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) */;
  %477 = %476.2;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(352), float64] */;
  %479 = %465.0;
  %480 = bitwise_or(%468, %469) /* ty=Tensor[(4, 88), int8] */;
  %481 = log10(%478) /* ty=Tensor[(352), float64] */;
  (%479, meta[relay.Constant][20] /* ty=Tensor[(1, 48), float64] */, %480, %var_2301, %481)
}

def @func_5623() -> Tensor[(3, 8, 2), float64] {
  @func_3795() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_2925() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
  %482 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %483 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
  %484 = %482.0;
  (%483, %484)
}

def @func_5635(%var_5626: Tensor[(13, 4, 16), int16]) -> (Tensor[(13, 4, 16), bool],) {
  %485 = cast(%var_5626, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %486 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(13, 4, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 4, 16), int16] */, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = not_equal(%487, %488) /* ty=Tensor[(13, 4, 16), bool] */;
  (%489,)
}

def @func_1762() -> (Tensor[(3, 8, 2), float64],) {
  %490 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  (%490,)
}

def @func_4834(%var_4825: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
  %491 = @func_1979() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %492 = cast(%var_4825, dtype="float64") /* ty=Tensor[(352), float64] */;
  %493 = reshape(%492, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %494 = @func_2070(%493) /* ty=(Tensor[(4, 88), int32],) */;
  %495 = %491.0;
  %496 = %494.0;
  (%495, %496, %var_4825)
}

def @func_791() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
  %497 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 88), float32] */, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %498 = reshape(%497, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
  %499 = @func_46(%498) /* ty=Tensor[(11, 4, 8), float32] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %501 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %502 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %503 = sin(%500) /* ty=Tensor[(11, 4, 8), float32] */;
  (%501, meta[relay.Constant][23] /* ty=Tensor[(4, 88), float32] */, %502, %503)
}

def @func_1338(%var_1333: Tensor[(4, 88), float64]) -> Tensor[(4, 88), float64] {
  %504 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %505 = %504.1;
  %506 = cast(%var_1333, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(2), int32] */;
  %508 = cast(%505, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  divide(%508, %509) /* ty=Tensor[(4, 88), float64] */
}

def @func_307(%var_297: Tensor[(3, 16, 2), float32], %var_298: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), bool],) {
  %510 = cast(%var_298, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %511 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_297, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = greater_equal(%512, %513) /* ty=Tensor[(3, 16, 2), bool] */;
  (%514,)
}

def @func_5688() -> (Tensor[(4, 88), float64], Tensor[(4, 88), bool]) {
  %515 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %517 = cast(%515, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %518 = reshape(%516, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %519 = reshape(%517, newshape=[4, 88]) /* ty=Tensor[(4, 88), bool] */;
  %520 = @func_4074(%518, %519) /* ty=(Tensor[(4, 88), bool],) */;
  %521 = %520.0;
  (%515, %521)
}

def @func_6006() -> Tensor[(3, 8, 2), float64] {
  %522 = @func_5966() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %522.0
}

def @func_6106(%var_6071: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), bool], Tensor[(3, 8, 2), float64]) {
  %523 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %524 = cast(%var_6071, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %528 = equal(%526, %527) /* ty=Tensor[(4, 88), bool] */;
  %529 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%528, %529)
}

def @func_6511() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  %530 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %531 = @func_6296() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) */;
  %532 = %530.0;
  %533 = %531.0;
  (%532, %533)
}

def @func_2097() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %534 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %535 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %537 = cast(meta[relay.Constant][24] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %538 = reshape(%536, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %539 = reshape(%537, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %540 = @func_2011(%538, %539) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %541 = %534.0;
  %542 = %540.1;
  (%541, %535, %542, meta[relay.Constant][24] /* ty=Tensor[(352), float32] */)
}

def @func_3097(%var_2989: Tensor[(16, 22), float64], %var_3047: Tensor[(3, 8, 2), float64], %var_3068: Tensor[(16, 22), float32], %var_3082: Tensor[(16, 22), float64]) -> (Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) {
  %543 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %544 = %543.0;
  %545 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 8, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %549 = less(%547, %548) /* ty=Tensor[(3, 8, 2), bool] */;
  %550 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 8, 2), float64] */, dtype="int16") /* ty=Tensor[(3, 8, 2), int16] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="int16") /* ty=Tensor[(3, 8, 2), int16] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %554 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %555 = %554.4;
  %556 = cast(%var_3047, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = cast(%var_2989, dtype="float32") /* ty=Tensor[(16, 22), float32] */;
  %561 = cos(%560) /* ty=Tensor[(16, 22), float32] */;
  %562 = cast(%var_3068, dtype="bool") /* ty=Tensor[(16, 22), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(16, 22), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %566 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %567 = cast(%var_2989, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %568 = reshape(%567, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %569 = @func_1199(%568) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) */;
  %570 = %569.1;
  %571 = cast(%570, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %572 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %573 = cast(%561, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %575 = subtract(%573, %574) /* ty=Tensor[(16, 22), uint16] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %577 = log2(%576) /* ty=Tensor[(16, 22), float64] */;
  %578 = cast(%var_3082, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(2), int32] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %582 = cast(%575, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %583 = sqrt(%582) /* ty=Tensor[(16, 22), float64] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %585 = bitwise_xor(%552, %553) /* ty=Tensor[(3, 8, 2), int16] */;
  %586 = @func_1480() /* ty=Tensor[(3, 8, 2), float64] */;
  %587 = divide(%558, %559) /* ty=Tensor[(3, 8, 2), float32] */;
  %588 = logical_and(%564, %565) /* ty=Tensor[(16, 22), bool] */;
  %589 = %566.1;
  %590 = minimum(%580, %581) /* ty=Tensor[(16, 22), uint16] */;
  %591 = log10(%584) /* ty=Tensor[(16, 22), float64] */;
  (%585, %586, %587, %588, %589, %590, %591)
}

def @func_3764() -> Tensor[(3, 8, 2), float64] {
  %592 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %592.0
}

def @func_1286() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) {
  %593 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
  %594 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %595 = %593.0;
  (%594, %595)
}

def @func_3899() -> Tensor[(3, 8, 2), float32] {
  %596 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  asin(%598) /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_1561() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) {
  %599 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %602 = cast(%600, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %603 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %604 = log(%601) /* ty=Tensor[(4, 88), float64] */;
  %605 = asinh(%602) /* ty=Tensor[(4, 88), float64] */;
  (%603, %604, %605)
}

def @func_1057() -> (Tensor[(4, 88), float64],) {
  %606 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %607 = %606.1;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %609 = sinh(%608) /* ty=Tensor[(4, 88), float64] */;
  (%609,)
}

def @func_1021() -> (Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) {
  %610 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %611 = reshape(%610, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %612 = @func_116(%611) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %613 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %614 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %615 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %616 = %612.0;
  (%613, %614, %615, %616, meta[relay.Constant][26] /* ty=Tensor[(2, 144), float64] */)
}

def @func_1962() -> (Tensor[(3, 8, 2), float32],) {
  %617 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %618 = %617.0;
  (%618,)
}

def @func_3316(%var_3276: Tensor[(4, 88), float32], %var_3302: Tensor[(2535), int64], %var_3314: Tensor[(297), float64]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) {
  %619 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %620 = cast(%var_3276, dtype="int16") /* ty=Tensor[(4, 88), int16] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(2), int32] */;
  %622 = cast(%619, dtype="int16") /* ty=Tensor[(4, 88), int16] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %624 = cast(%619, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %625 = shape_of(%var_3276, dtype="int32") /* ty=Tensor[(2), int32] */;
  %626 = cast(%var_3276, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %628 = cast(%var_3302, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %629 = reshape(%628, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
  %630 = @func_2332(%629) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) */;
  %631 = cast(%var_3314, dtype="float64") /* ty=Tensor[(297), float64] */;
  %632 = reshape(%631, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float64] */;
  %633 = @func_2851(%632) /* ty=(Tensor[(11, 3, 9), float64],) */;
  %634 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
  %635 = subtract(%622, %623) /* ty=Tensor[(4, 88), int16] */;
  %636 = mod(%626, %627) /* ty=Tensor[(4, 88), float32] */;
  %637 = %630.3;
  %638 = %633.0;
  (%634, %635, %636, %637, %var_3302, %638, %var_3314)
}

def @func_5811() -> Tensor[(3, 8, 2), float64] {
  %639 = @func_4335() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %639.0
}

def @func_1091() -> (Tensor[(4, 88), float64],) {
  %640 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %641 = %640.1;
  (%641,)
}

def @func_4533() -> Tensor[(3, 8, 2), float64] {
  %642 = @func_4088() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %642.0
}

def @func_5466() -> (Tensor[(3, 8, 2), float64],) {
  %643 = @func_5051() /* ty=Tensor[(3, 8, 2), float64] */;
  (%643,)
}

def @func_4694(%var_4681: Tensor[(1, 3, 7), float32], %var_4682: Tensor[(14, 3, 7), float32], %var_4687: Tensor[(288), float64]) -> (Tensor[(14, 3, 7), float32], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
  %644 = cast(%var_4681, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %645 = cast(%var_4682, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %646 = cast(%var_4687, dtype="float64") /* ty=Tensor[(288), float64] */;
  %647 = reshape(%646, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %648 = @func_3741(%647) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) */;
  %649 = mod(%644, %645) /* ty=Tensor[(14, 3, 7), float32] */;
  %650 = %648.3;
  (%649, %650, %var_4687)
}

def @func_3380() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %651 = @func_2622() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) */;
  %652 = %651.4;
  %653 = @func_2670() /* ty=Tensor[(3, 8, 2), float64] */;
  %654 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  (%652, %653, %654)
}

def @func_1663(%var_1602: Tensor[(96), float32], %var_1644: Tensor[(2, 144), float64]) -> (Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) {
  %655 = cast(%var_1602, dtype="float32") /* ty=Tensor[(96), float32] */;
  %656 = cast(%var_1602, dtype="float32") /* ty=Tensor[(96), float32] */;
  %657 = reshape(%655, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %658 = reshape(%656, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %659 = @func_307(%657, %658) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %662 = cast(%var_1602, dtype="bool") /* ty=Tensor[(96), bool] */;
  %663 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%660, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %667 = %666.4;
  %668 = cast(%var_1644, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(2), int32] */;
  %670 = cast(%667, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %672 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %674 = reshape(%673, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %675 = sinh(%661) /* ty=Tensor[(3, 16, 2), float32] */;
  %676 = @func_1480() /* ty=Tensor[(3, 8, 2), float64] */;
  %677 = less_equal(%664, %665) /* ty=Tensor[(3, 16, 2), bool] */;
  %678 = divide(%670, %671) /* ty=Tensor[(2, 144), float64] */;
  %679 = @func_1338(%674) /* ty=Tensor[(4, 88), float64] */;
  (%675, %676, %677, %678, %672, %679)
}

def @func_4028(%var_3980: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %680 = @func_1469() /* ty=Tensor[(3, 8, 2), float64] */;
  %681 = cast(%var_3980, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = @func_2437() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %686 = @func_2437() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %687 = maximum(%683, %684) /* ty=Tensor[(3, 8, 2), float64] */;
  %688 = %685.0;
  %689 = %686.0;
  (%687, %688, %689)
}

def @func_1370() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) {
  %690 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %691 = cast(meta[relay.Constant][27] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %692 = reshape(%691, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %693 = @func_1119(%692) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %694 = %690.2;
  %695 = %693.0;
  (%694, %695, meta[relay.Constant][27] /* ty=Tensor[(352, 1), float32] */)
}

def @func_5120(%var_5106: Tensor[(13, 4, 5), int8]) -> Tensor[(13, 4, 5), bool] {
  %696 = cast(%var_5106, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %697 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 4, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 4, 5), int8] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%698, %699) /* ty=Tensor[(13, 4, 5), bool] */
}

def @func_4246() -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %700 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
  %701 = cast(meta[relay.Constant][29] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %702 = reshape(%701, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
  %703 = @func_46(%702) /* ty=Tensor[(11, 4, 8), float32] */;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %705 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %707 = cast(meta[relay.Constant][29] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %708 = cast(%703, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %709 = reshape(%704, newshape=[16, 22]) /* ty=Tensor[(16, 22), float64] */;
  %710 = reshape(%706, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %711 = reshape(%707, newshape=[16, 22]) /* ty=Tensor[(16, 22), float32] */;
  %712 = reshape(%708, newshape=[16, 22]) /* ty=Tensor[(16, 22), float64] */;
  %713 = @func_3097(%709, %710, %711, %712) /* ty=(Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) */;
  %714 = %700.0;
  %715 = %713.4;
  %716 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  (%714, %703, meta[relay.Constant][29] /* ty=Tensor[(352), float32] */, %705, %715, %716)
}

def @func_2579() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
  %717 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %718 = @func_1286() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) */;
  %719 = %717.0;
  %720 = %718.0;
  (%719, %720)
}

def @func_5919(%var_5908: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), uint32], Tensor[(352), float32]) {
  %721 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %722 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %723 = cast(%var_5908, dtype="float32") /* ty=Tensor[(352), float32] */;
  %724 = reshape(%723, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %725 = @func_4588(%724) /* ty=(Tensor[(4, 88), uint32],) */;
  %726 = %721.0;
  %727 = %722.0;
  %728 = %725.0;
  (%726, %727, %728, %var_5908)
}

def @func_6534() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352, 1), float32]) {
  %729 = @func_2925() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %730 = cast(meta[relay.Constant][30] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %731 = cast(meta[relay.Constant][30] /* ty=Tensor[(352, 1), float32] */, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %732 = reshape(%730, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %733 = reshape(%731, newshape=[4, 88]) /* ty=Tensor[(4, 88), bool] */;
  %734 = @func_4074(%732, %733) /* ty=(Tensor[(4, 88), bool],) */;
  %735 = %729.1;
  %736 = %734.0;
  (%735, %736, meta[relay.Constant][30] /* ty=Tensor[(352, 1), float32] */)
}

def @func_6382(%var_6376: Tensor[(4, 88), float64]) -> Tensor[(4, 88), int64] {
  %737 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %738 = cast(%var_6376, dtype="int64") /* ty=Tensor[(4, 88), int64] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(2), int32] */;
  %740 = cast(%737, dtype="int64") /* ty=Tensor[(4, 88), int64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  bitwise_and(%740, %741) /* ty=Tensor[(4, 88), int64] */
}

def @func_2551() -> Tensor[(3, 8, 2), float32] {
  %742 = @func_2097() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %742.0
}

def @func_6557(%var_6548: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64],) {
  %743 = cast(%var_6548, dtype="float64") /* ty=Tensor[(13, 13, 2), float64] */;
  %744 = log(%743) /* ty=Tensor[(13, 13, 2), float64] */;
  (%744,)
}

def @func_6644(%var_6621: Tensor[(4, 6, 10), float32]) -> (Tensor[(4, 6, 10), float64],) {
  %745 = @func_5077() /* ty=(Tensor[(4, 6, 10), float32],) */;
  %746 = %745.0;
  %747 = cast(%var_6621, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = power(%749, %750) /* ty=Tensor[(4, 6, 10), float64] */;
  (%751,)
}

def @func_2622() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) {
  %752 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %753 = @func_1286() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) */;
  %754 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %755 = @func_2521() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) */;
  %756 = %752.2;
  %757 = %753.0;
  %758 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %759 = %754.1;
  %760 = %755.0;
  (%756, %757, %758, %759, %760)
}

def @func_6344() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float32]) {
  %761 = @func_3865() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %764 = @func_3899() /* ty=Tensor[(3, 8, 2), float32] */;
  %765 = tan(%763) /* ty=Tensor[(3, 8, 2), float32] */;
  (%764, %765)
}

def @main(%var_6749: Tensor[(2, 8, 12), int64]) -> (Tensor[(2, 8, 12), int64], Tensor[(4, 88), float64]) {
  %766 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(2, 8, 12), int64] */;
  %767 = shape_of(%var_6749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_6749, dtype="int64") /* ty=Tensor[(2, 8, 12), int64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %770 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %772 = minimum(%768, %769) /* ty=Tensor[(2, 8, 12), int64] */;
  %773 = sqrt(%771) /* ty=Tensor[(4, 88), float64] */;
  (%772, %773)
}

def @func_4088() -> (Tensor[(3, 8, 2), float64],) {
  %774 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%774,)
}

def @func_1882(%var_1816: Tensor[(280), bool]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %775 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %776 = cast(%var_1816, dtype="bool") /* ty=Tensor[(280), bool] */;
  %777 = cast(%var_1816, dtype="bool") /* ty=Tensor[(280), bool] */;
  %778 = reshape(%776, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %779 = reshape(%777, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %780 = %775.1;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %782 = reshape(%781, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %783 = @func_1119(%782) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %784 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %785 = @func_583(%778, %779) /* ty=Tensor[(7, 8, 5), bool] */;
  %786 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %787 = %783.1;
  (%784, %780, %785, %var_1816, %786, %787)
}

def @func_3468(%var_3446: Tensor[(96), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) {
  %788 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %789 = cast(%var_3446, dtype="float32") /* ty=Tensor[(96), float32] */;
  %790 = cast(meta[relay.Constant][32] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
  %791 = reshape(%789, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %792 = reshape(%790, newshape=[2, 144]) /* ty=Tensor[(2, 144), float64] */;
  %793 = @func_1663(%791, %792) /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) */;
  %794 = %793.0;
  %795 = cast(%var_3446, dtype="bool") /* ty=Tensor[(96), bool] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = logical_or(%797, %798) /* ty=Tensor[(3, 16, 2), bool] */;
  %800 = cast(%799, dtype="uint64") /* ty=Tensor[(3, 16, 2), uint64] */;
  %801 = shape_of(%var_3446, dtype="int32") /* ty=Tensor[(1), int32] */;
  %802 = cast(%var_3446, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %804 = %788.0;
  %805 = subtract(%802, %803) /* ty=Tensor[(96), uint64] */;
  %806 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  (%804, meta[relay.Constant][32] /* ty=Tensor[(72, 4), float64] */, %805, %806)
}

def @func_2739() -> Tensor[(3, 8, 2), float64] {
  @func_848() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_1119(%var_1104: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) {
  %807 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %809 = cast(%var_1104, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %810 = shape_of(%807, dtype="int32") /* ty=Tensor[(2), int32] */;
  %811 = cast(%807, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %813 = cast(%807, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %814 = rsqrt(%808) /* ty=Tensor[(4, 88), float64] */;
  %815 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %816 = greater_equal(%811, %812) /* ty=Tensor[(4, 88), bool] */;
  %817 = tan(%813) /* ty=Tensor[(4, 88), float64] */;
  (%814, %815, %816, %817)
}

def @func_4950(%var_4939: Tensor[(4, 88), float32]) -> Tensor[(4, 88), uint64] {
  %818 = @func_4286() /* ty=(Tensor[(4, 88), float32],) */;
  %819 = %818.0;
  %820 = cast(%var_4939, dtype="uint64") /* ty=Tensor[(4, 88), uint64] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(2), int32] */;
  %822 = cast(%819, dtype="uint64") /* ty=Tensor[(4, 88), uint64] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  multiply(%822, %823) /* ty=Tensor[(4, 88), uint64] */
}

def @func_1521() -> (Tensor[(3, 8, 2), float64],) {
  %824 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  (%824,)
}

def @func_2253(%var_2235: Tensor[(13, 11), float64]) -> (Tensor[(13, 11), float64],) {
  %825 = cast(%var_2235, dtype="float64") /* ty=Tensor[(13, 11), float64] */;
  %826 = acosh(%825) /* ty=Tensor[(13, 11), float64] */;
  (%826,)
}

def @func_3952() -> (Tensor[(3, 8, 2), float32],) {
  %827 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %828 = %827.0;
  (%828,)
}

def @func_116(%var_105: Tensor[(4, 12, 6), float64]) -> (Tensor[(4, 12, 6), float64],) {
  %829 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 6), float64] */;
  %830 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_105, dtype="float64") /* ty=Tensor[(4, 12, 6), float64] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %833 = floor_mod(%831, %832) /* ty=Tensor[(4, 12, 6), float64] */;
  (%833,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_46(%var_34: Tensor[(11, 4, 8), float32]) -> Tensor[(11, 4, 8), float32] {
  %0 = cast(%var_34, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  log10(%0) /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_5811() -> Tensor[(3, 8, 2), float64] {
  %1 = @func_4335() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %1.0
}

def @func_4088() -> (Tensor[(3, 8, 2), float64],) {
  %2 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%2,)
}

def @func_6171() -> (Tensor[(3, 8, 2), float32],) {
  %3 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %5 = sqrt(%4) /* ty=Tensor[(3, 8, 2), float32] */;
  (%5,)
}

def @func_3195() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(288), float64]) {
  %11 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(288), float64]) {
    %6 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
    %7 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
    %8 = %6.0;
    %9 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
    %10 = %7.2;
    (%8, %9, %10)
  };
  %11() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(288), float64]) */
}

def @func_4588(%var_4576: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), uint32],) {
  %12 = @func_4335() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %13 = %12.1;
  %14 = cast(%var_4576, dtype="uint32") /* ty=Tensor[(4, 88), uint32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(2), int32] */;
  %16 = cast(%13, dtype="uint32") /* ty=Tensor[(4, 88), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %18 = right_shift(%16, %17) /* ty=Tensor[(4, 88), uint32] */;
  (%18,)
}

def @func_3867() -> (Tensor[(3, 8, 2), float64],) {
  @func_3865() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_1561() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) {
  %19 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %22 = cast(%20, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %23 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %24 = log(%21) /* ty=Tensor[(4, 88), float64] */;
  %25 = asinh(%22) /* ty=Tensor[(4, 88), float64] */;
  (%23, %24, %25)
}

def @func_762() -> Tensor[(3, 8, 2), float64] {
  %27 = fn () -> Tensor[(3, 8, 2), float64] {
    %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    sigmoid(%26) /* ty=Tensor[(3, 8, 2), float64] */
  };
  %27() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_3899() -> Tensor[(3, 8, 2), float32] {
  %28 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  asin(%30) /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_5305() -> (Tensor[(12, 2, 1), float64], Tensor[(2, 144), float64], Tensor[(176, 2), float64]) {
  %37 = fn () -> (Tensor[(12, 2, 1), float64], Tensor[(2, 144), float64], Tensor[(176, 2), float64]) {
    %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 1), float64] */;
    %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(176, 2), float64] */, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
    %33 = reshape(%32, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
    %34 = @func_1199(%33) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) */;
    %35 = sinh(%31) /* ty=Tensor[(12, 2, 1), float64] */;
    %36 = %34.4;
    (%35, %36, meta[relay.Constant][2] /* ty=Tensor[(176, 2), float64] */)
  };
  %37() /* ty=(Tensor[(12, 2, 1), float64], Tensor[(2, 144), float64], Tensor[(176, 2), float64]) */
}

def @func_5565(%var_5563: uint16, %var_5564: Tensor[(13, 8, 3), uint16]) -> (Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) {
  %53 = fn (%var_5512: uint16, %var_5513: Tensor[(13, 8, 3), uint16]) -> (Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) {
    %38 = cast(%var_5512, dtype="uint16") /* ty=uint16 */;
    %39 = cast(%var_5513, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
    %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
    %41 = reshape(%40, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %42 = @func_1119(%41) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
    %43 = cast(%var_5512, dtype="bool") /* ty=bool */;
    %44 = cast(%var_5513, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
    %45 = not_equal(%43, %44) /* ty=Tensor[(13, 8, 3), bool] */;
    %46 = cast(%45, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
    %47 = shape_of(%var_5513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%var_5513, dtype="uint16") /* ty=Tensor[(13, 8, 3), uint16] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %50 = right_shift(%38, %39) /* ty=Tensor[(13, 8, 3), uint16] */;
    %51 = %42.2;
    %52 = left_shift(%48, %49) /* ty=Tensor[(13, 8, 3), uint16] */;
    (%50, %51, meta[relay.Constant][3] /* ty=Tensor[(352, 1), float32] */, %52)
  };
  %53(%var_5563, %var_5564) /* ty=(Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) */
}

def @func_2854(%var_2852: Tensor[(11, 3, 9), float64]) -> (Tensor[(11, 3, 9), float64],) {
  @func_2851(%var_2852) /* ty=(Tensor[(11, 3, 9), float64],) */
}

def @func_1007() -> Tensor[(4, 88), float32] {
  %54 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %54.1
}

def @func_2836(%var_2782: Tensor[(5, 5, 8), uint32], %var_2783: Tensor[(5, 5, 8), uint32]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  %55 = cast(%var_2783, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %56 = shape_of(%var_2782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_2782, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = less_equal(%57, %58) /* ty=Tensor[(5, 5, 8), bool] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %61 = log(%60) /* ty=Tensor[(5, 5, 8), float64] */;
  %62 = cast(%var_2783, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = less(%64, %65) /* ty=Tensor[(5, 5, 8), bool] */;
  %67 = cast(%59, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %71 = cast(%59, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %72 = power(%69, %70) /* ty=Tensor[(5, 5, 8), float64] */;
  %73 = sin(%71) /* ty=Tensor[(5, 5, 8), float32] */;
  (%72, %73)
}

def @func_1667(%var_1665: Tensor[(96), float32], %var_1666: Tensor[(2, 144), float64]) -> (Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) {
  @func_1663(%var_1665, %var_1666) /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) */
}

def @func_5713() -> (Tensor[(11, 4, 8), float32],) {
  @func_5711() /* ty=(Tensor[(11, 4, 8), float32],) */
}

def @func_5867(%var_5866: Tensor[(10, 11, 11), float64]) -> (Tensor[(10, 11, 11), float64],) {
  %76 = fn (%var_5847: Tensor[(10, 11, 11), float64]) -> (Tensor[(10, 11, 11), float64],) {
    %74 = cast(%var_5847, dtype="float64") /* ty=Tensor[(10, 11, 11), float64] */;
    %75 = acosh(%74) /* ty=Tensor[(10, 11, 11), float64] */;
    (%75,)
  };
  %76(%var_5866) /* ty=(Tensor[(10, 11, 11), float64],) */
}

def @func_2645() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  @func_2643() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */
}

def @func_6106(%var_6071: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), bool], Tensor[(3, 8, 2), float64]) {
  %77 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %78 = cast(%var_6071, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(2), int32] */;
  %80 = cast(%77, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %82 = equal(%80, %81) /* ty=Tensor[(4, 88), bool] */;
  %83 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%82, %83)
}

def @func_1980() -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
  %87 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
    %84 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
    %85 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
    %86 = %84.3;
    (%85, %86)
  };
  %87() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */
}

def @func_4535() -> Tensor[(3, 8, 2), float64] {
  @func_4533() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_6599() -> (Tensor[(4, 88), float64], Tensor[(10, 11, 11), float64], Tensor[(11, 110), float64]) {
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 110), float64] */, dtype="float64") /* ty=Tensor[(11, 110), float64] */;
  %89 = reshape(%88, newshape=[10, 11, 11]) /* ty=Tensor[(10, 11, 11), float64] */;
  %90 = @func_5865(%89) /* ty=(Tensor[(10, 11, 11), float64],) */;
  %91 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %92 = %90.0;
  (%91, %92, meta[relay.Constant][4] /* ty=Tensor[(11, 110), float64] */)
}

def @func_3103(%var_3099: Tensor[(16, 22), float64], %var_3100: Tensor[(3, 8, 2), float64], %var_3101: Tensor[(16, 22), float32], %var_3102: Tensor[(16, 22), float64]) -> (Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) {
  @func_3097(%var_3099, %var_3100, %var_3101, %var_3102) /* ty=(Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) */
}

def @func_1121(%var_1120: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) {
  %104 = fn (%var_1104: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) {
    %93 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
    %94 = cast(%93, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %95 = cast(%var_1104, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %96 = shape_of(%93, dtype="int32") /* ty=Tensor[(2), int32] */;
    %97 = cast(%93, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %99 = cast(%93, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %100 = rsqrt(%94) /* ty=Tensor[(4, 88), float64] */;
    %101 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
    %102 = greater_equal(%97, %98) /* ty=Tensor[(4, 88), bool] */;
    %103 = tan(%99) /* ty=Tensor[(4, 88), float64] */;
    (%100, %101, %102, %103)
  };
  %104(%var_1120) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */
}

def @func_1563() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) {
  @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */
}

def @func_3953() -> (Tensor[(3, 8, 2), float32],) {
  %107 = fn () -> (Tensor[(3, 8, 2), float32],) {
    %105 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
    %106 = %105.0;
    (%106,)
  };
  %107() /* ty=(Tensor[(3, 8, 2), float32],) */
}

def @func_3744(%var_3742: Tensor[(288), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
  @func_3741(%var_3742) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) */
}

def @func_3797() -> Tensor[(3, 8, 2), float64] {
  @func_3795() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_5655() -> (Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) {
  @func_5653() /* ty=(Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) */
}

def @func_6557(%var_6548: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64],) {
  %108 = cast(%var_6548, dtype="float64") /* ty=Tensor[(13, 13, 2), float64] */;
  %109 = log(%108) /* ty=Tensor[(13, 13, 2), float64] */;
  (%109,)
}

def @func_4665(%var_4602: float32, %var_4603: Tensor[(9, 6, 9), float32], %var_4620: Tensor[(9, 6, 9), float32], %var_4629: Tensor[(352), float32]) -> (Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) {
  %110 = cast(%var_4602, dtype="float32") /* ty=float32 */;
  %111 = cast(%var_4603, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
  %112 = @func_3664() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) */;
  %113 = %112.1;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %115 = cast(%var_4629, dtype="float32") /* ty=Tensor[(352), float32] */;
  %116 = reshape(%114, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %117 = reshape(%115, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %118 = @func_2011(%116, %117) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %119 = cast(%var_4620, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %120 = shape_of(%var_4603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_4603, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = logical_and(%121, %122) /* ty=Tensor[(9, 6, 9), bool] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %125 = divide(%110, %111) /* ty=Tensor[(9, 6, 9), float32] */;
  %126 = %118.2;
  %127 = tan(%124) /* ty=Tensor[(9, 6, 9), float64] */;
  %128 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
  (%125, %113, %126, %var_4629, %127, %128)
}

def @func_6534() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352, 1), float32]) {
  %129 = @func_2925() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %130 = cast(meta[relay.Constant][5] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(352, 1), float32] */, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %132 = reshape(%130, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %133 = reshape(%131, newshape=[4, 88]) /* ty=Tensor[(4, 88), bool] */;
  %134 = @func_4074(%132, %133) /* ty=(Tensor[(4, 88), bool],) */;
  %135 = %129.1;
  %136 = %134.0;
  (%135, %136, meta[relay.Constant][5] /* ty=Tensor[(352, 1), float32] */)
}

def @func_3865() -> (Tensor[(3, 8, 2), float64],) {
  %137 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %138 = %137.0;
  (%138,)
}

def @func_4090() -> (Tensor[(3, 8, 2), float64],) {
  @func_4088() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_1085() -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) {
  @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */
}

def @func_2098() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %148 = fn () -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
    %139 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
    %140 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
    %141 = cast(%140, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %143 = reshape(%141, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
    %144 = reshape(%142, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %145 = @func_2011(%143, %144) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
    %146 = %139.0;
    %147 = %145.1;
    (%146, %140, %147, meta[relay.Constant][6] /* ty=Tensor[(352), float32] */)
  };
  %148() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) */
}

def @func_2334(%var_2333: Tensor[(2535), int64]) -> (Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) {
  %172 = fn (%var_2301: Tensor[(2535), int64]) -> (Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) {
    %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %150 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
    %151 = %150.1;
    %152 = cast(%151, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %153 = reshape(%149, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
    %154 = reshape(%152, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %155 = @func_2011(%153, %154) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
    %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 88), float64] */, dtype="int8") /* ty=Tensor[(4, 88), int8] */;
    %157 = shape_of(%151, dtype="int32") /* ty=Tensor[(2), int32] */;
    %158 = cast(%151, dtype="int8") /* ty=Tensor[(4, 88), int8] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %160 = cast(%var_2301, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %161 = cast(%var_2301, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %162 = cast(%var_2301, dtype="bool") /* ty=Tensor[(2535), bool] */;
    %163 = reshape(%160, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), int64] */;
    %164 = reshape(%161, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), int64] */;
    %165 = reshape(%162, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), bool] */;
    %166 = @func_906(%163, %164, %165) /* ty=(Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) */;
    %167 = %166.2;
    %168 = cast(%167, dtype="float64") /* ty=Tensor[(352), float64] */;
    %169 = %155.0;
    %170 = bitwise_or(%158, %159) /* ty=Tensor[(4, 88), int8] */;
    %171 = log10(%168) /* ty=Tensor[(352), float64] */;
    (%169, meta[relay.Constant][7] /* ty=Tensor[(1, 48), float64] */, %170, %var_2301, %171)
  };
  %172(%var_2333) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) */
}

def @func_2477(%var_2465: Tensor[(4, 24), float32]) -> (Tensor[(3, 16, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 88), int32]) {
  %173 = cast(%var_2465, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %174 = cast(%var_2465, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %175 = reshape(%173, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %176 = reshape(%174, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %177 = @func_307(%175, %176) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %178 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
  %179 = %178.0;
  %180 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(%179, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %186 = %177.0;
  %187 = maximum(%184, %185) /* ty=Tensor[(4, 88), int32] */;
  (%186, %var_2465, %187)
}

def @func_6601() -> (Tensor[(4, 88), float64], Tensor[(10, 11, 11), float64], Tensor[(11, 110), float64]) {
  @func_6599() /* ty=(Tensor[(4, 88), float64], Tensor[(10, 11, 11), float64], Tensor[(11, 110), float64]) */
}

def @func_2552() -> Tensor[(3, 8, 2), float32] {
  %189 = fn () -> Tensor[(3, 8, 2), float32] {
    %188 = @func_2097() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
    %188.0
  };
  %189() /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_2671() -> Tensor[(3, 8, 2), float64] {
  %191 = fn () -> Tensor[(3, 8, 2), float64] {
    %190 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
    %190.1
  };
  %191() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_3741(%var_3737: Tensor[(288), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
  %192 = @func_1233() /* ty=(Tensor[(4, 88), float64],) */;
  %193 = @func_2622() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) */;
  %194 = cast(%var_3737, dtype="float64") /* ty=Tensor[(288), float64] */;
  %195 = reshape(%194, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %196 = @func_116(%195) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %197 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %198 = %192.0;
  %199 = %193.4;
  %200 = %196.0;
  (%197, %198, %199, %200, %var_3737)
}

def @func_4591(%var_4589: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), uint32],) {
  @func_4588(%var_4589) /* ty=(Tensor[(4, 88), uint32],) */
}

def @func_1782(%var_1765: Tensor[(8, 2, 3), uint32], %var_1766: Tensor[(8, 2, 3), uint32]) -> Tensor[(8, 2, 3), float64] {
  %201 = cast(%var_1766, dtype="uint32") /* ty=Tensor[(8, 2, 3), uint32] */;
  %202 = shape_of(%var_1765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_1765, dtype="uint32") /* ty=Tensor[(8, 2, 3), uint32] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %205 = bitwise_and(%203, %204) /* ty=Tensor[(8, 2, 3), uint32] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(8, 2, 3), float64] */;
  tan(%206) /* ty=Tensor[(8, 2, 3), float64] */
}

def @func_4288() -> (Tensor[(4, 88), float32],) {
  @func_4286() /* ty=(Tensor[(4, 88), float32],) */
}

def @func_1521() -> (Tensor[(3, 8, 2), float64],) {
  %207 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  (%207,)
}

def @func_2015(%var_2013: Tensor[(3, 8, 2), float64], %var_2014: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  @func_2011(%var_2013, %var_2014) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */
}

def @func_2925() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
  %208 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %209 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
  %210 = %208.0;
  (%209, %210)
}

def @func_6262(%var_6259: Tensor[(9, 1, 13), float32], %var_6260: Tensor[(48), float64], %var_6261: Tensor[(312), uint16]) -> (Tensor[(352), float32], float32, Tensor[(486), float32], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(48), float64], Tensor[(9, ?, 13), uint64], Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(312), uint16], Tensor[(9, ?, 13), float32]) {
  @func_6257(%var_6259, %var_6260, %var_6261) /* ty=(Tensor[(352), float32], float32, Tensor[(486), float32], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(48), float64], Tensor[(9, ?, 13), uint64], Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(312), uint16], Tensor[(9, ?, 13), float32]) */
}

def @func_2011(%var_1992: Tensor[(3, 8, 2), float64], %var_1999: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %211 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %212 = cast(%var_1992, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %216 = cast(%var_1999, dtype="float32") /* ty=Tensor[(352), float32] */;
  %217 = reshape(%216, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %218 = @func_1119(%217) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %219 = mod(%214, %215) /* ty=Tensor[(3, 8, 2), float32] */;
  %220 = %218.3;
  (%219, %220, %var_1999)
}

def @func_6039(%var_6026: uint16) -> (Tensor[(3, 8, 2), float64], uint16, Tensor[(312), uint16], Tensor[(352, 1), float64], Tensor[(11, 4, 8), float32]) {
  %221 = cast(%var_6026, dtype="uint16") /* ty=uint16 */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), uint16] */, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %223 = reshape(%221, newshape=[]) /* ty=uint16 */;
  %224 = reshape(%222, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), uint16] */;
  %225 = @func_5562(%223, %224) /* ty=(Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) */;
  %226 = %225.2;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %228 = @func_1979() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %229 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
  %230 = sinh(%227) /* ty=Tensor[(352, 1), float64] */;
  %231 = %228.1;
  (%229, %var_6026, meta[relay.Constant][9] /* ty=Tensor[(312), uint16] */, %230, %231)
}

def @func_906(%var_850: Tensor[(13, 15, 13), int64], %var_851: Tensor[(13, 15, 13), int64], %var_859: Tensor[(13, 15, 13), bool]) -> (Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) {
  %232 = cast(%var_851, dtype="bool") /* ty=Tensor[(13, 15, 13), bool] */;
  %233 = shape_of(%var_850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_850, dtype="bool") /* ty=Tensor[(13, 15, 13), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = equal(%234, %235) /* ty=Tensor[(13, 15, 13), bool] */;
  %237 = cast(%var_859, dtype="int32") /* ty=Tensor[(13, 15, 13), int32] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="int32") /* ty=Tensor[(13, 15, 13), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %242 = reshape(%241, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
  %243 = left_shift(%239, %240) /* ty=Tensor[(13, 15, 13), int32] */;
  %244 = @func_46(%242) /* ty=Tensor[(11, 4, 8), float32] */;
  (%243, %244, meta[relay.Constant][10] /* ty=Tensor[(352), float32] */)
}

def @func_2201(%var_2145: Tensor[(352), float64], %var_2193: Tensor[(4, 88), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(4, 88), float64], Tensor[(352), float64], Tensor[(4, 88), uint16]) {
  %245 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %246 = cast(%var_2145, dtype="float64") /* ty=Tensor[(352), float64] */;
  %247 = reshape(%246, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %248 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %249 = cast(%var_2193, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %251 = cast(%248, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %253 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %254 = %245.1;
  %255 = @func_1338(%247) /* ty=Tensor[(4, 88), float64] */;
  %256 = minimum(%251, %252) /* ty=Tensor[(4, 88), uint16] */;
  (%253, %254, %255, %var_2145, %256)
}

def @func_5467() -> (Tensor[(3, 8, 2), float64],) {
  %258 = fn () -> (Tensor[(3, 8, 2), float64],) {
    %257 = @func_5051() /* ty=Tensor[(3, 8, 2), float64] */;
    (%257,)
  };
  %258() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_4533() -> Tensor[(3, 8, 2), float64] {
  %259 = @func_4088() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %259.0
}

def @func_6729(%var_6726: Tensor[(16, 16, 15), float64], %var_6727: Tensor[(16, 16, 15), float64], %var_6728: Tensor[(16, 16, 15), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(16, 16, 15), float32], Tensor[(96), uint64], Tensor[(96), float32]) {
  %281 = fn (%var_6688: Tensor[(16, 16, 15), float64], %var_6689: Tensor[(16, 16, 15), float64], %var_6703: Tensor[(16, 16, 15), float64]) -> (Tensor[(16, 16, 15), int8], Tensor[(16, 16, 15), float32], Tensor[(96), uint64], Tensor[(96), float32]) {
    %260 = cast(%var_6689, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    %261 = shape_of(%var_6688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%var_6688, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %264 = power(%262, %263) /* ty=Tensor[(16, 16, 15), float64] */;
    %265 = cast(%var_6703, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%264, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %269 = right_shift(%267, %268) /* ty=Tensor[(16, 16, 15), int16] */;
    %270 = cast(%269, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
    %271 = shape_of(%var_6689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %272 = cast(%var_6689, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %274 = cast(%var_6703, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
    %275 = cast(meta[relay.Constant][11] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %276 = reshape(%275, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %277 = @func_3468(%276) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
    %278 = add(%272, %273) /* ty=Tensor[(16, 16, 15), int8] */;
    %279 = tan(%274) /* ty=Tensor[(16, 16, 15), float32] */;
    %280 = %277.2;
    (%278, %279, %280, meta[relay.Constant][11] /* ty=Tensor[(96), float32] */)
  };
  %281(%var_6726, %var_6727, %var_6728) /* ty=(Tensor[(16, 16, 15), int8], Tensor[(16, 16, 15), float32], Tensor[(96), uint64], Tensor[(96), float32]) */
}

def @func_5766(%var_5764: Tensor[(16, 7, 4), float64], %var_5765: Tensor[(297), float64]) -> (Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(3, 8, 2), float32], Tensor[(2535), int64], Tensor[(297), float64], Tensor[(16, 7, 4), float32], Tensor[(13, 4, 5), bool], Tensor[(260), int8]) {
  %301 = fn (%var_5717: Tensor[(16, 7, 4), float64], %var_5729: Tensor[(297), float64]) -> (Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(3, 8, 2), float32], Tensor[(2535), int64], Tensor[(297), float64], Tensor[(16, 7, 4), float32], Tensor[(13, 4, 5), bool], Tensor[(260), int8]) {
    %282 = cast(meta[relay.Constant][12] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
    %283 = reshape(%282, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %284 = @func_1119(%283) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
    %285 = %284.0;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %287 = cast(meta[relay.Constant][13] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %288 = cast(%var_5729, dtype="float64") /* ty=Tensor[(297), float64] */;
    %289 = reshape(%286, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %290 = reshape(%287, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
    %291 = reshape(%288, newshape=[297]) /* ty=Tensor[(297), float64] */;
    %292 = @func_3316(%289, %290, %291) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) */;
    %293 = cast(%var_5717, dtype="float64") /* ty=Tensor[(16, 7, 4), float64] */;
    %294 = log10(%293) /* ty=Tensor[(16, 7, 4), float64] */;
    %295 = cast(%294, dtype="float32") /* ty=Tensor[(16, 7, 4), float32] */;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(260), int8] */, dtype="int8") /* ty=Tensor[(260), int8] */;
    %297 = reshape(%296, newshape=[13, 4, 5]) /* ty=Tensor[(13, 4, 5), int8] */;
    %298 = %292.0;
    %299 = atanh(%295) /* ty=Tensor[(16, 7, 4), float32] */;
    %300 = @func_5120(%297) /* ty=Tensor[(13, 4, 5), bool] */;
    (%285, meta[relay.Constant][12] /* ty=Tensor[(352, 1), float32] */, %298, meta[relay.Constant][13] /* ty=Tensor[(2535), int64] */, %var_5729, %299, %300, meta[relay.Constant][14] /* ty=Tensor[(260), int8] */)
  };
  %301(%var_5764, %var_5765) /* ty=(Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(3, 8, 2), float32], Tensor[(2535), int64], Tensor[(297), float64], Tensor[(16, 7, 4), float32], Tensor[(13, 4, 5), bool], Tensor[(260), int8]) */
}

def @func_5052() -> Tensor[(3, 8, 2), float64] {
  %302 = fn () -> Tensor[(3, 8, 2), float64] {
    @func_2739() /* ty=Tensor[(3, 8, 2), float64] */
  };
  %302() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_1009() -> Tensor[(4, 88), float32] {
  @func_1007() /* ty=Tensor[(4, 88), float32] */
}

def @func_1287() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) {
  %306 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) {
    %303 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
    %304 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
    %305 = %303.0;
    (%304, %305)
  };
  %306() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) */
}

def @func_2072(%var_2071: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), int32],) {
  %314 = fn (%var_2044: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), int32],) {
    %307 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
    %308 = %307.1;
    %309 = cast(%var_2044, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
    %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(2), int32] */;
    %311 = cast(%308, dtype="int32") /* ty=Tensor[(4, 88), int32] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %313 = bitwise_xor(%311, %312) /* ty=Tensor[(4, 88), int32] */;
    (%313,)
  };
  %314(%var_2071) /* ty=(Tensor[(4, 88), int32],) */
}

def @func_3470(%var_3469: Tensor[(96), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) {
  %334 = fn (%var_3446: Tensor[(96), float32]) -> (Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) {
    %315 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
    %316 = cast(%var_3446, dtype="float32") /* ty=Tensor[(96), float32] */;
    %317 = cast(meta[relay.Constant][15] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
    %318 = reshape(%316, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %319 = reshape(%317, newshape=[2, 144]) /* ty=Tensor[(2, 144), float64] */;
    %320 = @func_1663(%318, %319) /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) */;
    %321 = %320.0;
    %322 = cast(%var_3446, dtype="bool") /* ty=Tensor[(96), bool] */;
    %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%321, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %326 = logical_or(%324, %325) /* ty=Tensor[(3, 16, 2), bool] */;
    %327 = cast(%326, dtype="uint64") /* ty=Tensor[(3, 16, 2), uint64] */;
    %328 = shape_of(%var_3446, dtype="int32") /* ty=Tensor[(1), int32] */;
    %329 = cast(%var_3446, dtype="uint64") /* ty=Tensor[(96), uint64] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %331 = %315.0;
    %332 = subtract(%329, %330) /* ty=Tensor[(96), uint64] */;
    %333 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
    (%331, meta[relay.Constant][15] /* ty=Tensor[(72, 4), float64] */, %332, %333)
  };
  %334(%var_3469) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */
}

def @func_5967() -> (Tensor[(3, 8, 2), float64],) {
  %336 = fn () -> (Tensor[(3, 8, 2), float64],) {
    %335 = @func_5051() /* ty=Tensor[(3, 8, 2), float64] */;
    (%335,)
  };
  %336() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_2622() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) {
  %337 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %338 = @func_1286() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) */;
  %339 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %340 = @func_2521() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) */;
  %341 = %337.2;
  %342 = %338.0;
  %343 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %344 = %339.1;
  %345 = %340.0;
  (%341, %342, %343, %344, %345)
}

def @func_311(%var_309: Tensor[(3, 16, 2), float32], %var_310: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), bool],) {
  @func_307(%var_309, %var_310) /* ty=(Tensor[(3, 16, 2), bool],) */
}

def @func_1083() -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) {
  %346 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %347 = %346.0;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %349 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %350 = erf(%348) /* ty=Tensor[(3, 8, 2), float32] */;
  %351 = %349.0;
  (%350, %351)
}

def @func_1471() -> Tensor[(3, 8, 2), float64] {
  @func_1469() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_2624() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) {
  @func_2622() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) */
}

def @func_6511() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  %352 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %353 = @func_6296() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) */;
  %354 = %352.0;
  %355 = %353.0;
  (%354, %355)
}

def @func_5624() -> Tensor[(3, 8, 2), float64] {
  %356 = fn () -> Tensor[(3, 8, 2), float64] {
    @func_3795() /* ty=Tensor[(3, 8, 2), float64] */
  };
  %356() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_6560(%var_6558: Tensor[(13, 13, 2), float64]) -> (Tensor[(13, 13, 2), float64],) {
  @func_6557(%var_6558) /* ty=(Tensor[(13, 13, 2), float64],) */
}

def @func_5690() -> (Tensor[(4, 88), float64], Tensor[(4, 88), bool]) {
  @func_5688() /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), bool]) */
}

def @func_4905() -> Tensor[(3, 8, 2), float32] {
  @func_4903() /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_3766() -> Tensor[(3, 8, 2), float64] {
  @func_3764() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_4836(%var_4835: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
  %363 = fn (%var_4825: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
    %357 = @func_1979() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
    %358 = cast(%var_4825, dtype="float64") /* ty=Tensor[(352), float64] */;
    %359 = reshape(%358, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
    %360 = @func_2070(%359) /* ty=(Tensor[(4, 88), int32],) */;
    %361 = %357.0;
    %362 = %360.0;
    (%361, %362, %var_4825)
  };
  %363(%var_4835) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) */
}

def @func_5637(%var_5636: Tensor[(13, 4, 16), int16]) -> (Tensor[(13, 4, 16), bool],) {
  %369 = fn (%var_5626: Tensor[(13, 4, 16), int16]) -> (Tensor[(13, 4, 16), bool],) {
    %364 = cast(%var_5626, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
    %365 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 16), int16] */, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %368 = not_equal(%366, %367) /* ty=Tensor[(13, 4, 16), bool] */;
    (%368,)
  };
  %369(%var_5636) /* ty=(Tensor[(13, 4, 16), bool],) */
}

def @func_6536() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352, 1), float32]) {
  @func_6534() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352, 1), float32]) */
}

def @func_307(%var_297: Tensor[(3, 16, 2), float32], %var_298: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), bool],) {
  %370 = cast(%var_298, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %371 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_297, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = greater_equal(%372, %373) /* ty=Tensor[(3, 16, 2), bool] */;
  (%374,)
}

def @func_2593() -> Tensor[(2, 144), float64] {
  @func_2591() /* ty=Tensor[(2, 144), float64] */
}

def @func_2643() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %375 = @func_1962() /* ty=(Tensor[(3, 8, 2), float32],) */;
  %376 = %375.0;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %378 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %379 = atanh(%377) /* ty=Tensor[(3, 8, 2), float64] */;
  %380 = %378.0;
  (%379, %380)
}

def @func_4336() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %385 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
    %381 = @func_4246() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
    %382 = @func_4286() /* ty=(Tensor[(4, 88), float32],) */;
    %383 = %381.0;
    %384 = %382.0;
    (%383, %384)
  };
  %385() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */
}

def @func_4990() -> Tensor[(4, 88), float64] {
  %387 = fn () -> Tensor[(4, 88), float64] {
    %386 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
    %386.0
  };
  %387() /* ty=Tensor[(4, 88), float64] */
}

def @func_4408(%var_4406: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), bool],) {
  @func_4405(%var_4406) /* ty=(Tensor[(3, 8, 2), bool],) */
}

def @func_5922(%var_5920: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), uint32], Tensor[(352), float32]) {
  @func_5919(%var_5920) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), uint32], Tensor[(352), float32]) */
}

def @func_1092() -> (Tensor[(4, 88), float64],) {
  %390 = fn () -> (Tensor[(4, 88), float64],) {
    %388 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
    %389 = %388.1;
    (%389,)
  };
  %390() /* ty=(Tensor[(4, 88), float64],) */
}

def @func_955() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_6297() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) {
  %396 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) {
    %391 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %392 = @func_5653() /* ty=(Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) */;
    %393 = %391.0;
    %394 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
    %395 = %392.0;
    (%393, %394, %395)
  };
  %396() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64]) */
}

def @func_2591() -> Tensor[(2, 144), float64] {
  %397 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %397.4
}

def @func_4030(%var_4029: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %408 = fn (%var_3980: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
    %398 = @func_1469() /* ty=Tensor[(3, 8, 2), float64] */;
    %399 = cast(%var_3980, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(%398, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %403 = @func_2437() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %404 = @func_2437() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %405 = maximum(%401, %402) /* ty=Tensor[(3, 8, 2), float64] */;
    %406 = %403.0;
    %407 = %404.0;
    (%405, %406, %407)
  };
  %408(%var_4029) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_3097(%var_2989: Tensor[(16, 22), float64], %var_3047: Tensor[(3, 8, 2), float64], %var_3068: Tensor[(16, 22), float32], %var_3082: Tensor[(16, 22), float64]) -> (Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) {
  %409 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %410 = %409.0;
  %411 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 8, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = less(%413, %414) /* ty=Tensor[(3, 8, 2), bool] */;
  %416 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 8, 2), float64] */, dtype="int16") /* ty=Tensor[(3, 8, 2), int16] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int16") /* ty=Tensor[(3, 8, 2), int16] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %420 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %421 = %420.4;
  %422 = cast(%var_3047, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %426 = cast(%var_2989, dtype="float32") /* ty=Tensor[(16, 22), float32] */;
  %427 = cos(%426) /* ty=Tensor[(16, 22), float32] */;
  %428 = cast(%var_3068, dtype="bool") /* ty=Tensor[(16, 22), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(16, 22), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %432 = @func_2579() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */;
  %433 = cast(%var_2989, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %434 = reshape(%433, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %435 = @func_1199(%434) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) */;
  %436 = %435.1;
  %437 = cast(%436, dtype="uint16") /* ty=Tensor[(4, 88), uint16] */;
  %438 = shape_of(%427, dtype="int32") /* ty=Tensor[(2), int32] */;
  %439 = cast(%427, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %441 = subtract(%439, %440) /* ty=Tensor[(16, 22), uint16] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %443 = log2(%442) /* ty=Tensor[(16, 22), float64] */;
  %444 = cast(%var_3082, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(2), int32] */;
  %446 = cast(%443, dtype="uint16") /* ty=Tensor[(16, 22), uint16] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %448 = cast(%441, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %449 = sqrt(%448) /* ty=Tensor[(16, 22), float64] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(16, 22), float64] */;
  %451 = bitwise_xor(%418, %419) /* ty=Tensor[(3, 8, 2), int16] */;
  %452 = @func_1480() /* ty=Tensor[(3, 8, 2), float64] */;
  %453 = divide(%424, %425) /* ty=Tensor[(3, 8, 2), float32] */;
  %454 = logical_and(%430, %431) /* ty=Tensor[(16, 22), bool] */;
  %455 = %432.1;
  %456 = minimum(%446, %447) /* ty=Tensor[(16, 22), uint16] */;
  %457 = log10(%450) /* ty=Tensor[(16, 22), float64] */;
  (%451, %452, %453, %454, %455, %456, %457)
}

def @func_1023() -> (Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) {
  @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */
}

def @func_4698(%var_4695: Tensor[(1, 3, 7), float32], %var_4696: Tensor[(14, 3, 7), float32], %var_4697: Tensor[(288), float64]) -> (Tensor[(14, 3, 7), float32], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
  %465 = fn (%var_4681: Tensor[(1, 3, 7), float32], %var_4682: Tensor[(14, 3, 7), float32], %var_4687: Tensor[(288), float64]) -> (Tensor[(14, 3, 7), float32], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) {
    %458 = cast(%var_4681, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
    %459 = cast(%var_4682, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
    %460 = cast(%var_4687, dtype="float64") /* ty=Tensor[(288), float64] */;
    %461 = reshape(%460, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %462 = @func_3741(%461) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) */;
    %463 = mod(%458, %459) /* ty=Tensor[(14, 3, 7), float32] */;
    %464 = %462.3;
    (%463, %464, %var_4687)
  };
  %465(%var_4695, %var_4696, %var_4697) /* ty=(Tensor[(14, 3, 7), float32], Tensor[(4, 12, 6), float64], Tensor[(288), float64]) */
}

def @func_6677() -> (Tensor[(3, 8, 2), float32],) {
  %466 = @func_3899() /* ty=Tensor[(3, 8, 2), float32] */;
  (%466,)
}

def @func_2741() -> Tensor[(3, 8, 2), float64] {
  @func_2739() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_6345() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float32]) {
  %472 = fn () -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float32]) {
    %467 = @func_3865() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %468 = %467.0;
    %469 = cast(%468, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
    %470 = @func_3899() /* ty=Tensor[(3, 8, 2), float32] */;
    %471 = tan(%469) /* ty=Tensor[(3, 8, 2), float32] */;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float32]) */
}

def @func_4247() -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %490 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
    %473 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
    %474 = cast(meta[relay.Constant][18] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %475 = reshape(%474, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
    %476 = @func_46(%475) /* ty=Tensor[(11, 4, 8), float32] */;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
    %478 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
    %479 = cast(%478, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %480 = cast(meta[relay.Constant][18] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %481 = cast(%476, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
    %482 = reshape(%477, newshape=[16, 22]) /* ty=Tensor[(16, 22), float64] */;
    %483 = reshape(%479, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
    %484 = reshape(%480, newshape=[16, 22]) /* ty=Tensor[(16, 22), float32] */;
    %485 = reshape(%481, newshape=[16, 22]) /* ty=Tensor[(16, 22), float64] */;
    %486 = @func_3097(%482, %483, %484, %485) /* ty=(Tensor[(3, 8, 2), int16], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(16, 22), bool], Tensor[(3, 8, 2), float64], Tensor[(16, 22), uint16], Tensor[(16, 22), float64]) */;
    %487 = %473.0;
    %488 = %486.4;
    %489 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
    (%487, %476, meta[relay.Constant][18] /* ty=Tensor[(352), float32] */, %478, %488, %489)
  };
  %490() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_2840(%var_2838: Tensor[(5, 5, 8), uint32], %var_2839: Tensor[(5, 5, 8), uint32]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  @func_2836(%var_2838, %var_2839) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */
}

def @func_792() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
  %498 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) {
    %491 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 88), float32] */, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %492 = reshape(%491, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float32] */;
    %493 = @func_46(%492) /* ty=Tensor[(11, 4, 8), float32] */;
    %494 = cast(%493, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
    %495 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
    %496 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
    %497 = sin(%494) /* ty=Tensor[(11, 4, 8), float32] */;
    (%495, meta[relay.Constant][19] /* ty=Tensor[(4, 88), float32] */, %496, %497)
  };
  %498() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */
}

def @main(%var_6749: Tensor[(2, 8, 12), int64]) -> (Tensor[(2, 8, 12), int64], Tensor[(4, 88), float64]) {
  %499 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(2, 8, 12), int64] */;
  %500 = shape_of(%var_6749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%var_6749, dtype="int64") /* ty=Tensor[(2, 8, 12), int64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %503 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %505 = minimum(%501, %502) /* ty=Tensor[(2, 8, 12), int64] */;
  %506 = sqrt(%504) /* ty=Tensor[(4, 88), float64] */;
  (%505, %506)
}

def @func_2580() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
  %511 = fn () -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
    %507 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
    %508 = @func_1286() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64]) */;
    %509 = %507.0;
    %510 = %508.0;
    (%509, %510)
  };
  %511() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */
}

def @func_1201(%var_1200: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) {
  %531 = fn (%var_1159: Tensor[(4, 88), float64]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) {
    %512 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
    %513 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
    %514 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
    %515 = @func_1091() /* ty=(Tensor[(4, 88), float64],) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %518 = atan(%517) /* ty=Tensor[(4, 88), float64] */;
    %519 = cast(%var_1159, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(2), int32] */;
    %521 = cast(%518, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %523 = less_equal(%521, %522) /* ty=Tensor[(4, 88), bool] */;
    %524 = cast(%523, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %525 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
    %526 = %512.0;
    %527 = %513.0;
    %528 = %514.4;
    %529 = log10(%524) /* ty=Tensor[(4, 88), float64] */;
    %530 = %525.4;
    (%526, %527, %528, %529, %530)
  };
  %531(%var_1200) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64], Tensor[(4, 88), float64], Tensor[(2, 144), float64]) */
}

def @func_4861() -> Tensor[(3, 8, 2), float64] {
  %533 = fn () -> Tensor[(3, 8, 2), float64] {
    %532 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %532.0
  };
  %533() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_3382() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  @func_3380() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_3546(%var_3543: Tensor[(3, 4, 16), uint16], %var_3544: Tensor[(3, 4, 16), uint16], %var_3545: Tensor[(16, 6), float32]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), int16], Tensor[(3, 8, 2), float32], Tensor[(16, 6), float32]) {
  @func_3541(%var_3543, %var_3544, %var_3545) /* ty=(Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), int16], Tensor[(3, 8, 2), float32], Tensor[(16, 6), float32]) */
}

def @func_1882(%var_1816: Tensor[(280), bool]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  %534 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %535 = cast(%var_1816, dtype="bool") /* ty=Tensor[(280), bool] */;
  %536 = cast(%var_1816, dtype="bool") /* ty=Tensor[(280), bool] */;
  %537 = reshape(%535, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %538 = reshape(%536, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %539 = %534.1;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %541 = reshape(%540, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %542 = @func_1119(%541) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
  %543 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %544 = @func_583(%537, %538) /* ty=Tensor[(7, 8, 5), bool] */;
  %545 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %546 = %542.1;
  (%543, %539, %544, %var_1816, %545, %546)
}

def @func_2439() -> (Tensor[(3, 8, 2), float64],) {
  @func_2437() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_2409(%var_2383: Tensor[(280), bool]) -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(7, 8, 5), bool], Tensor[(280), bool]) {
  %547 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %548 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %549 = cast(%var_2383, dtype="bool") /* ty=Tensor[(280), bool] */;
  %550 = cast(%var_2383, dtype="bool") /* ty=Tensor[(280), bool] */;
  %551 = reshape(%549, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %552 = reshape(%550, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), bool] */;
  %553 = %547.0;
  %554 = %548.0;
  %555 = @func_583(%551, %552) /* ty=Tensor[(7, 8, 5), bool] */;
  (%553, %554, %555, %var_2383)
}

def @func_5508(%var_5507: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float32],) {
  %562 = fn (%var_5498: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), float32],) {
    %556 = @func_2739() /* ty=Tensor[(3, 8, 2), float64] */;
    %557 = cast(%var_5498, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%556, dtype="float32") /* ty=Tensor[(3, 8, 2), float32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %561 = power(%559, %560) /* ty=Tensor[(3, 8, 2), float32] */;
    (%561,)
  };
  %562(%var_5507) /* ty=(Tensor[(3, 8, 2), float32],) */
}

def @func_1663(%var_1602: Tensor[(96), float32], %var_1644: Tensor[(2, 144), float64]) -> (Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) {
  %563 = cast(%var_1602, dtype="float32") /* ty=Tensor[(96), float32] */;
  %564 = cast(%var_1602, dtype="float32") /* ty=Tensor[(96), float32] */;
  %565 = reshape(%563, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %566 = reshape(%564, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %567 = @func_307(%565, %566) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %570 = cast(%var_1602, dtype="bool") /* ty=Tensor[(96), bool] */;
  %571 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%568, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = @func_1021() /* ty=(Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) */;
  %575 = %574.4;
  %576 = cast(%var_1644, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%575, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %580 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %582 = reshape(%581, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %583 = sinh(%569) /* ty=Tensor[(3, 16, 2), float32] */;
  %584 = @func_1480() /* ty=Tensor[(3, 8, 2), float64] */;
  %585 = less_equal(%572, %573) /* ty=Tensor[(3, 16, 2), bool] */;
  %586 = divide(%578, %579) /* ty=Tensor[(2, 144), float64] */;
  %587 = @func_1338(%582) /* ty=Tensor[(4, 88), float64] */;
  (%583, %584, %585, %586, %580, %587)
}

def @func_6006() -> Tensor[(3, 8, 2), float64] {
  %588 = @func_5966() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %588.0
}

def @func_2851(%var_2844: Tensor[(11, 3, 9), float64]) -> (Tensor[(11, 3, 9), float64],) {
  %589 = cast(%var_2844, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %590 = erf(%589) /* ty=Tensor[(11, 3, 9), float64] */;
  (%590,)
}

def @func_1762() -> (Tensor[(3, 8, 2), float64],) {
  %591 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  (%591,)
}

def @func_3764() -> Tensor[(3, 8, 2), float64] {
  %592 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %592.0
}

def @func_4952(%var_4951: Tensor[(4, 88), float32]) -> Tensor[(4, 88), uint64] {
  %599 = fn (%var_4939: Tensor[(4, 88), float32]) -> Tensor[(4, 88), uint64] {
    %593 = @func_4286() /* ty=(Tensor[(4, 88), float32],) */;
    %594 = %593.0;
    %595 = cast(%var_4939, dtype="uint64") /* ty=Tensor[(4, 88), uint64] */;
    %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(2), int32] */;
    %597 = cast(%594, dtype="uint64") /* ty=Tensor[(4, 88), uint64] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    multiply(%597, %598) /* ty=Tensor[(4, 88), uint64] */
  };
  %599(%var_4951) /* ty=Tensor[(4, 88), uint64] */
}

def @func_49(%var_47: Tensor[(11, 4, 8), float32]) -> Tensor[(11, 4, 8), float32] {
  @func_46(%var_47) /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_2480(%var_2478: Tensor[(4, 24), float32]) -> (Tensor[(3, 16, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 88), int32]) {
  @func_2477(%var_2478) /* ty=(Tensor[(3, 16, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 88), int32]) */
}

def @func_6109(%var_6107: Tensor[(4, 88), float32]) -> (Tensor[(4, 88), bool], Tensor[(3, 8, 2), float64]) {
  @func_6106(%var_6107) /* ty=(Tensor[(4, 88), bool], Tensor[(3, 8, 2), float64]) */
}

def @func_1885(%var_1883: Tensor[(280), bool]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) {
  @func_1882(%var_1883) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */
}

def @func_5688() -> (Tensor[(4, 88), float64], Tensor[(4, 88), bool]) {
  %600 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %602 = cast(%600, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %603 = reshape(%601, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %604 = reshape(%602, newshape=[4, 88]) /* ty=Tensor[(4, 88), bool] */;
  %605 = @func_4074(%603, %604) /* ty=(Tensor[(4, 88), bool],) */;
  %606 = %605.0;
  (%600, %606)
}

def @func_6173() -> (Tensor[(3, 8, 2), float32],) {
  @func_6171() /* ty=(Tensor[(3, 8, 2), float32],) */
}

def @func_1481() -> Tensor[(3, 8, 2), float64] {
  %608 = fn () -> Tensor[(3, 8, 2), float64] {
    %607 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
    %607.0
  };
  %608() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_5120(%var_5106: Tensor[(13, 4, 5), int8]) -> Tensor[(13, 4, 5), bool] {
  %609 = cast(%var_5106, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %610 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int8] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%611, %612) /* ty=Tensor[(13, 4, 5), bool] */
}

def @func_5813() -> Tensor[(3, 8, 2), float64] {
  @func_5811() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_4168(%var_4133: Tensor[(13, 2, 4), float32], %var_4134: Tensor[(13, 2, 4), float32], %var_4158: Tensor[(13, 2, 4), float32]) -> (Tensor[(13, 2, 4), int16],) {
  %613 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %614 = shape_of(%var_4133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_4133, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %617 = floor_mod(%615, %616) /* ty=Tensor[(13, 2, 4), float32] */;
  %618 = cast(%var_4158, dtype="int16") /* ty=Tensor[(13, 2, 4), int16] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="int16") /* ty=Tensor[(13, 2, 4), int16] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %622 = right_shift(%620, %621) /* ty=Tensor[(13, 2, 4), int16] */;
  (%622,)
}

def @func_6679() -> (Tensor[(3, 8, 2), float32],) {
  @func_6677() /* ty=(Tensor[(3, 8, 2), float32],) */
}

def @func_2522() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) {
  %631 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) {
    %623 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %624 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
    %625 = cast(meta[relay.Constant][22] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %626 = reshape(%625, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %627 = @func_1119(%626) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
    %628 = %623.0;
    %629 = %624.0;
    %630 = %627.2;
    (%628, %629, %630, meta[relay.Constant][22] /* ty=Tensor[(352), float32] */)
  };
  %631() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) */
}

def @func_4561(%var_4560: Tensor[(6, 2, 12), float32]) -> Tensor[(6, 2, 12), float32] {
  %633 = fn (%var_4556: Tensor[(6, 2, 12), float32]) -> Tensor[(6, 2, 12), float32] {
    %632 = cast(%var_4556, dtype="float32") /* ty=Tensor[(6, 2, 12), float32] */;
    sinh(%632) /* ty=Tensor[(6, 2, 12), float32] */
  };
  %633(%var_4560) /* ty=Tensor[(6, 2, 12), float32] */
}

def @func_5077() -> (Tensor[(4, 6, 10), float32],) {
  %634 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %635 = exp(%634) /* ty=Tensor[(4, 6, 10), float32] */;
  (%635,)
}

def @func_3320(%var_3317: Tensor[(4, 88), float32], %var_3318: Tensor[(2535), int64], %var_3319: Tensor[(297), float64]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) {
  %656 = fn (%var_3276: Tensor[(4, 88), float32], %var_3302: Tensor[(2535), int64], %var_3314: Tensor[(297), float64]) -> (Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) {
    %636 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
    %637 = cast(%var_3276, dtype="int16") /* ty=Tensor[(4, 88), int16] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
    %639 = cast(%636, dtype="int16") /* ty=Tensor[(4, 88), int16] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %641 = cast(%636, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %642 = shape_of(%var_3276, dtype="int32") /* ty=Tensor[(2), int32] */;
    %643 = cast(%var_3276, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %645 = cast(%var_3302, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %646 = reshape(%645, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
    %647 = @func_2332(%646) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(1, 48), float64], Tensor[(4, 88), int8], Tensor[(2535), int64], Tensor[(352), float64]) */;
    %648 = cast(%var_3314, dtype="float64") /* ty=Tensor[(297), float64] */;
    %649 = reshape(%648, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float64] */;
    %650 = @func_2851(%649) /* ty=(Tensor[(11, 3, 9), float64],) */;
    %651 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
    %652 = subtract(%639, %640) /* ty=Tensor[(4, 88), int16] */;
    %653 = mod(%643, %644) /* ty=Tensor[(4, 88), float32] */;
    %654 = %647.3;
    %655 = %650.0;
    (%651, %652, %653, %654, %var_3302, %655, %var_3314)
  };
  %656(%var_3317, %var_3318, %var_3319) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), int16], Tensor[(4, 88), float32], Tensor[(2535), int64], Tensor[(2535), int64], Tensor[(11, 3, 9), float64], Tensor[(297), float64]) */
}

def @func_1371() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) {
  %663 = fn () -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) {
    %657 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
    %658 = cast(meta[relay.Constant][24] /* ty=Tensor[(352, 1), float32] */, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
    %659 = reshape(%658, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
    %660 = @func_1119(%659) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float32], Tensor[(4, 88), bool], Tensor[(4, 88), float64]) */;
    %661 = %657.2;
    %662 = %660.0;
    (%661, %662, meta[relay.Constant][24] /* ty=Tensor[(352, 1), float32] */)
  };
  %663() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */
}

def @func_3541(%var_3483: Tensor[(3, 4, 16), uint16], %var_3484: Tensor[(3, 4, 16), uint16], %var_3539: Tensor[(16, 6), float32]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), int16], Tensor[(3, 8, 2), float32], Tensor[(16, 6), float32]) {
  %664 = cast(%var_3484, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %665 = shape_of(%var_3483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_3483, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = cast(%var_3484, dtype="int16") /* ty=Tensor[(3, 4, 16), int16] */;
  %669 = shape_of(%var_3483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%var_3483, dtype="int16") /* ty=Tensor[(3, 4, 16), int16] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %672 = cast(%var_3539, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %673 = reshape(%672, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %674 = @func_3468(%673) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
  %675 = less_equal(%666, %667) /* ty=Tensor[(3, 4, 16), bool] */;
  %676 = multiply(%670, %671) /* ty=Tensor[(3, 4, 16), int16] */;
  %677 = %674.0;
  (%675, %676, %677, %var_3539)
}

def @func_4173(%var_4170: Tensor[(13, 2, 4), float32], %var_4171: Tensor[(13, 2, 4), float32], %var_4172: Tensor[(13, 2, 4), float32]) -> (Tensor[(13, 2, 4), int16],) {
  @func_4168(%var_4170, %var_4171, %var_4172) /* ty=(Tensor[(13, 2, 4), int16],) */
}

def @func_4493() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  %678 = @func_1233() /* ty=(Tensor[(4, 88), float64],) */;
  %679 = %678.0;
  %680 = @func_3228() /* ty=Tensor[(3, 8, 2), float64] */;
  (%679, %680)
}

def @func_2412(%var_2410: Tensor[(280), bool]) -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(7, 8, 5), bool], Tensor[(280), bool]) {
  @func_2409(%var_2410) /* ty=(Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(7, 8, 5), bool], Tensor[(280), bool]) */
}

def @func_5653() -> (Tensor[(4, 12, 6), float64], Tensor[(3, 8, 2), float32]) {
  %681 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
  %682 = %681.1;
  %683 = @func_2551() /* ty=Tensor[(3, 8, 2), float32] */;
  (%682, %683)
}

def @func_2437() -> (Tensor[(3, 8, 2), float64],) {
  %684 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  (%684,)
}

def @func_2255(%var_2254: Tensor[(13, 11), float64]) -> (Tensor[(13, 11), float64],) {
  %687 = fn (%var_2235: Tensor[(13, 11), float64]) -> (Tensor[(13, 11), float64],) {
    %685 = cast(%var_2235, dtype="float64") /* ty=Tensor[(13, 11), float64] */;
    %686 = acosh(%685) /* ty=Tensor[(13, 11), float64] */;
    (%686,)
  };
  %687(%var_2254) /* ty=(Tensor[(13, 11), float64],) */
}

def @func_3666() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) {
  @func_3664() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) */
}

def @func_4286() -> (Tensor[(4, 88), float32],) {
  %688 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  (%688,)
}

def @func_911(%var_908: Tensor[(13, 15, 13), int64], %var_909: Tensor[(13, 15, 13), int64], %var_910: Tensor[(13, 15, 13), bool]) -> (Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) {
  @func_906(%var_908, %var_909, %var_910) /* ty=(Tensor[(13, 15, 13), int32], Tensor[(11, 4, 8), float32], Tensor[(352), float32]) */
}

def @func_3229() -> Tensor[(3, 8, 2), float64] {
  %689 = fn () -> Tensor[(3, 8, 2), float64] {
    @func_2670() /* ty=Tensor[(3, 8, 2), float64] */
  };
  %689() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_3664() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), float32], Tensor[(96), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(3, 16, 2), bool], Tensor[(3, 8, 2), float64]) {
  %690 = @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %693 = cast(meta[relay.Constant][25] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %694 = reshape(%692, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %695 = reshape(%693, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %696 = @func_2011(%694, %695) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %697 = cast(meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %698 = reshape(%697, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %699 = @func_3468(%698) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(72, 4), float64], Tensor[(96), uint64], Tensor[(4, 88), float32]) */;
  %700 = cast(meta[relay.Constant][27] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %701 = reshape(%700, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %702 = @func_1882(%701) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(7, 8, 5), bool], Tensor[(280), bool], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32]) */;
  %703 = cast(meta[relay.Constant][25] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %704 = sin(%703) /* ty=Tensor[(352), float32] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(352), float32] */;
  %706 = %699.3;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %708 = reshape(%707, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
  %709 = @func_2070(%708) /* ty=(Tensor[(4, 88), int32],) */;
  %710 = %709.0;
  %711 = cast(meta[relay.Constant][25] /* ty=Tensor[(352), float32] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(2), int32] */;
  %713 = cast(%710, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %715 = cast(meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %716 = cast(meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %717 = reshape(%715, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %718 = reshape(%716, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %719 = @func_307(%717, %718) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %720 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %721 = %696.0;
  %722 = %702.2;
  %723 = tan(%705) /* ty=Tensor[(352), float32] */;
  %724 = power(%713, %714) /* ty=Tensor[(4, 88), float64] */;
  %725 = %719.0;
  %726 = %720.0;
  (%691, %721, %706, meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, %722, meta[relay.Constant][27] /* ty=Tensor[(280), bool] */, %723, %724, %725, %726)
}

def @func_5455(%var_5453: Tensor[(3, 8, 2), float64], %var_5454: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), int8], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
  %741 = fn (%var_5440: Tensor[(3, 8, 2), float64], %var_5449: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), int8], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) {
    %727 = @func_4246() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32], Tensor[(352), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
    %728 = %727.4;
    %729 = cast(%var_5440, dtype="int8") /* ty=Tensor[(3, 8, 2), int8] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="int8") /* ty=Tensor[(3, 8, 2), int8] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %733 = multiply(%731, %732) /* ty=Tensor[(3, 8, 2), int8] */;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %735 = cast(%var_5449, dtype="float32") /* ty=Tensor[(352), float32] */;
    %736 = reshape(%734, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
    %737 = reshape(%735, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %738 = @func_2011(%736, %737) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
    %739 = @func_3795() /* ty=Tensor[(3, 8, 2), float64] */;
    %740 = %738.1;
    (%733, %739, %740, %var_5449)
  };
  %741(%var_5453, %var_5454) /* ty=(Tensor[(3, 8, 2), int8], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352), float32]) */
}

def @func_6257(%var_6213: Tensor[(9, 1, 13), float32], %var_6231: Tensor[(48), float64], %var_6250: Tensor[(312), uint16]) -> (Tensor[(352), float32], float32, Tensor[(486), float32], Tensor[(352), float32], Tensor[(4, 88), float64], Tensor[(48), float64], Tensor[(9, ?, 13), uint64], Tensor[(4, 88), float64], Tensor[(352, 1), float32], Tensor[(312), uint16], Tensor[(9, ?, 13), float32]) {
  %742 = cast(-6.36086f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %743 = cast(meta[relay.Constant][28] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %744 = cast(meta[relay.Constant][28] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %745 = cast(meta[relay.Constant][29] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %746 = reshape(%742, newshape=[]) /* ty=float32 */;
  %747 = reshape(%743, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %748 = reshape(%744, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %749 = reshape(%745, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %750 = @func_4665(%746, %747, %748, %749) /* ty=(Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) */;
  %751 = cast(%var_6231, dtype="float64") /* ty=Tensor[(48), float64] */;
  %752 = %750.3;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(352), float32] */;
  %754 = reshape(%751, newshape=[3, 8, 2]) /* ty=Tensor[(3, 8, 2), float64] */;
  %755 = reshape(%753, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %756 = @func_2011(%754, %755) /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64], Tensor[(352), float32]) */;
  %757 = cast(%var_6213, dtype="float32") /* ty=Tensor[(9, 1, 13), float32] */;
  %758 = exp(%757) /* ty=Tensor[(9, 1, 13), float32] */;
  %759 = cast(%758, dtype="int32") /* ty=Tensor[(9, 1, 13), int32] */;
  %760 = shape_of(%var_6213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%var_6213, dtype="int32") /* ty=Tensor[(9, 1, 13), int32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %763 = add(%761, %762) /* ty=Tensor[(9, ?, 13), int32] */;
  %764 = cast(%763, dtype="uint64") /* ty=Tensor[(9, ?, 13), uint64] */;
  %765 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%758, dtype="uint64") /* ty=Tensor[(9, 1, 13), uint64] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %768 = @func_1561() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(4, 88), float64]) */;
  %769 = cast(-6.36086f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %770 = cast(%var_6250, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %771 = reshape(%769, newshape=[]) /* ty=uint16 */;
  %772 = reshape(%770, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), uint16] */;
  %773 = @func_5562(%771, %772) /* ty=(Tensor[(13, 8, 3), uint16], Tensor[(4, 88), bool], Tensor[(352, 1), float32], Tensor[(13, 8, 3), uint16]) */;
  %774 = cast(%763, dtype="float32") /* ty=Tensor[(9, ?, 13), float32] */;
  %775 = %756.1;
  %776 = bitwise_xor(%766, %767) /* ty=Tensor[(9, ?, 13), uint64] */;
  %777 = %768.1;
  %778 = %773.2;
  %779 = sin(%774) /* ty=Tensor[(9, ?, 13), float32] */;
  (%752, -6.36086f /* ty=float32 */, meta[relay.Constant][28] /* ty=Tensor[(486), float32] */, meta[relay.Constant][29] /* ty=Tensor[(352), float32] */, %775, %var_6231, %776, %777, %778, %var_6250, %779)
}

def @func_5218(%var_5217: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
  %786 = fn (%var_5212: Tensor[(352), float64]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) {
    %780 = @func_953() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) */;
    %781 = cast(%var_5212, dtype="float64") /* ty=Tensor[(352), float64] */;
    %782 = reshape(%781, newshape=[4, 88]) /* ty=Tensor[(4, 88), float64] */;
    %783 = @func_2070(%782) /* ty=(Tensor[(4, 88), int32],) */;
    %784 = %780.4;
    %785 = %783.0;
    (%784, %785, %var_5212)
  };
  %786(%var_5217) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), int32], Tensor[(352), float64]) */
}

def @func_6384(%var_6383: Tensor[(4, 88), float64]) -> Tensor[(4, 88), int64] {
  %792 = fn (%var_6376: Tensor[(4, 88), float64]) -> Tensor[(4, 88), int64] {
    %787 = @func_4989() /* ty=Tensor[(4, 88), float64] */;
    %788 = cast(%var_6376, dtype="int64") /* ty=Tensor[(4, 88), int64] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(2), int32] */;
    %790 = cast(%787, dtype="int64") /* ty=Tensor[(4, 88), int64] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    bitwise_and(%790, %791) /* ty=Tensor[(4, 88), int64] */
  };
  %792(%var_6383) /* ty=Tensor[(4, 88), int64] */
}

def @func_2739() -> Tensor[(3, 8, 2), float64] {
  @func_848() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_3795() -> Tensor[(3, 8, 2), float64] {
  %793 = @func_2521() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), bool], Tensor[(352), float32]) */;
  %793.0
}

def @func_5711() -> (Tensor[(11, 4, 8), float32],) {
  %794 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %795 = %794.3;
  (%795,)
}

def @func_586(%var_584: Tensor[(7, 8, 5), bool], %var_585: Tensor[(7, 8, 5), bool]) -> Tensor[(7, 8, 5), bool] {
  %800 = fn (%var_531: Tensor[(7, 8, 5), bool], %var_532: Tensor[(7, 8, 5), bool]) -> Tensor[(7, 8, 5), bool] {
    %796 = cast(%var_532, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
    %797 = shape_of(%var_531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_531, dtype="bool") /* ty=Tensor[(7, 8, 5), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%798, %799) /* ty=Tensor[(7, 8, 5), bool] */
  };
  %800(%var_584, %var_585) /* ty=Tensor[(7, 8, 5), bool] */
}

def @func_1786(%var_1784: Tensor[(8, 2, 3), uint32], %var_1785: Tensor[(8, 2, 3), uint32]) -> Tensor[(8, 2, 3), float64] {
  @func_1782(%var_1784, %var_1785) /* ty=Tensor[(8, 2, 3), float64] */
}

def @func_2927() -> (Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) {
  @func_2925() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(3, 8, 2), float64]) */
}

def @func_6008() -> Tensor[(3, 8, 2), float64] {
  @func_6006() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_6513() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  @func_6511() /* ty=(Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_1234() -> (Tensor[(4, 88), float64],) {
  %803 = fn () -> (Tensor[(4, 88), float64],) {
    %801 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
    %802 = %801.0;
    (%802,)
  };
  %803() /* ty=(Tensor[(4, 88), float64],) */
}

def @func_849() -> Tensor[(3, 8, 2), float64] {
  %804 = fn () -> Tensor[(3, 8, 2), float64] {
    @func_761() /* ty=Tensor[(3, 8, 2), float64] */
  };
  %804() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_4077(%var_4075: Tensor[(4, 88), float32], %var_4076: Tensor[(4, 88), bool]) -> (Tensor[(4, 88), bool],) {
  %816 = fn (%var_4060: Tensor[(4, 88), float32], %var_4065: Tensor[(4, 88), bool]) -> (Tensor[(4, 88), bool],) {
    %805 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
    %806 = cast(%var_4060, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(2), int32] */;
    %808 = cast(%805, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %810 = logical_or(%808, %809) /* ty=Tensor[(4, 88), bool] */;
    %811 = cast(%var_4065, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(2), int32] */;
    %813 = cast(%810, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
    %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %815 = less(%813, %814) /* ty=Tensor[(4, 88), bool] */;
    (%815,)
  };
  %816(%var_4075, %var_4076) /* ty=(Tensor[(4, 88), bool],) */
}

def @func_5919(%var_5908: Tensor[(352), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float32], Tensor[(4, 88), uint32], Tensor[(352), float32]) {
  %817 = @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %818 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
  %819 = cast(%var_5908, dtype="float32") /* ty=Tensor[(352), float32] */;
  %820 = reshape(%819, newshape=[4, 88]) /* ty=Tensor[(4, 88), float32] */;
  %821 = @func_4588(%820) /* ty=(Tensor[(4, 88), uint32],) */;
  %822 = %817.0;
  %823 = %818.0;
  %824 = %821.0;
  (%822, %823, %824, %var_5908)
}

def @func_1764() -> (Tensor[(3, 8, 2), float64],) {
  @func_1762() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_4671(%var_4667: float32, %var_4668: Tensor[(9, 6, 9), float32], %var_4669: Tensor[(9, 6, 9), float32], %var_4670: Tensor[(352), float32]) -> (Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) {
  @func_4665(%var_4667, %var_4668, %var_4669, %var_4670) /* ty=(Tensor[(9, 6, 9), float32], Tensor[(3, 8, 2), float32], Tensor[(352), float32], Tensor[(352), float32], Tensor[(9, 6, 9), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_6042(%var_6040: uint16) -> (Tensor[(3, 8, 2), float64], uint16, Tensor[(312), uint16], Tensor[(352, 1), float64], Tensor[(11, 4, 8), float32]) {
  @func_6039(%var_6040) /* ty=(Tensor[(3, 8, 2), float64], uint16, Tensor[(312), uint16], Tensor[(352, 1), float64], Tensor[(11, 4, 8), float32]) */
}

def @func_5123(%var_5121: Tensor[(13, 4, 5), int8]) -> Tensor[(13, 4, 5), bool] {
  @func_5120(%var_5121) /* ty=Tensor[(13, 4, 5), bool] */
}

def @func_1963() -> (Tensor[(3, 8, 2), float32],) {
  %827 = fn () -> (Tensor[(3, 8, 2), float32],) {
    %825 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
    %826 = %825.0;
    (%826,)
  };
  %827() /* ty=(Tensor[(3, 8, 2), float32],) */
}

def @func_1523() -> (Tensor[(3, 8, 2), float64],) {
  @func_1521() /* ty=(Tensor[(3, 8, 2), float64],) */
}

def @func_118(%var_117: Tensor[(4, 12, 6), float64]) -> (Tensor[(4, 12, 6), float64],) {
  %833 = fn (%var_105: Tensor[(4, 12, 6), float64]) -> (Tensor[(4, 12, 6), float64],) {
    %828 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 6), float64] */;
    %829 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %830 = cast(%var_105, dtype="float64") /* ty=Tensor[(4, 12, 6), float64] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %832 = floor_mod(%830, %831) /* ty=Tensor[(4, 12, 6), float64] */;
    (%832,)
  };
  %833(%var_117) /* ty=(Tensor[(4, 12, 6), float64],) */
}

def @func_4495() -> (Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) {
  @func_4493() /* ty=(Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64]) */
}

def @func_6646(%var_6645: Tensor[(4, 6, 10), float32]) -> (Tensor[(4, 6, 10), float64],) {
  %841 = fn (%var_6621: Tensor[(4, 6, 10), float32]) -> (Tensor[(4, 6, 10), float64],) {
    %834 = @func_5077() /* ty=(Tensor[(4, 6, 10), float32],) */;
    %835 = %834.0;
    %836 = cast(%var_6621, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
    %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%835, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %840 = power(%838, %839) /* ty=Tensor[(4, 6, 10), float64] */;
    (%840,)
  };
  %841(%var_6645) /* ty=(Tensor[(4, 6, 10), float64],) */
}

def @func_953() -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(288), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %842 = cast(meta[relay.Constant][31] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %843 = reshape(%842, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %844 = @func_116(%843) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %845 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
  %846 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  %847 = %844.0;
  %848 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %849 = %845.2;
  (%846, %847, meta[relay.Constant][31] /* ty=Tensor[(288), float64] */, %848, %849)
}

def @func_3901() -> Tensor[(3, 8, 2), float32] {
  @func_3899() /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_2205(%var_2203: Tensor[(352), float64], %var_2204: Tensor[(4, 88), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(4, 88), float64], Tensor[(352), float64], Tensor[(4, 88), uint16]) {
  @func_2201(%var_2203, %var_2204) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(4, 88), float64], Tensor[(352), float64], Tensor[(4, 88), uint16]) */
}

def @func_5079() -> (Tensor[(4, 6, 10), float32],) {
  @func_5077() /* ty=(Tensor[(4, 6, 10), float32],) */
}

def @func_1802(%var_1797: Tensor[(96), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(96), float32], Tensor[(288), float64]) {
  %850 = @func_1370() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float64], Tensor[(352, 1), float32]) */;
  %851 = @func_1057() /* ty=(Tensor[(4, 88), float64],) */;
  %852 = cast(%var_1797, dtype="float32") /* ty=Tensor[(96), float32] */;
  %853 = cast(meta[relay.Constant][32] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %854 = reshape(%852, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %855 = reshape(%853, newshape=[2, 144]) /* ty=Tensor[(2, 144), float64] */;
  %856 = @func_1663(%854, %855) /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 8, 2), float64], Tensor[(3, 16, 2), bool], Tensor[(2, 144), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float64]) */;
  %857 = %850.1;
  %858 = %851.0;
  %859 = %856.1;
  (%857, %858, %859, %var_1797, meta[relay.Constant][32] /* ty=Tensor[(288), float64] */)
}

def @func_4903() -> Tensor[(3, 8, 2), float32] {
  @func_2551() /* ty=Tensor[(3, 8, 2), float32] */
}

def @func_4405(%var_4400: Tensor[(3, 8, 2), float64]) -> (Tensor[(3, 8, 2), bool],) {
  %860 = @func_3865() /* ty=(Tensor[(3, 8, 2), float64],) */;
  %861 = %860.0;
  %862 = cast(%var_4400, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %866 = not_equal(%864, %865) /* ty=Tensor[(3, 8, 2), bool] */;
  (%866,)
}

def @func_3380() -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64]) {
  %867 = @func_2622() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64]) */;
  %868 = %867.4;
  %869 = @func_2670() /* ty=Tensor[(3, 8, 2), float64] */;
  %870 = @func_761() /* ty=Tensor[(3, 8, 2), float64] */;
  (%868, %869, %870)
}

def @func_1340(%var_1339: Tensor[(4, 88), float64]) -> Tensor[(4, 88), float64] {
  %877 = fn (%var_1333: Tensor[(4, 88), float64]) -> Tensor[(4, 88), float64] {
    %871 = @func_1083() /* ty=(Tensor[(3, 8, 2), float32], Tensor[(4, 88), float64]) */;
    %872 = %871.1;
    %873 = cast(%var_1333, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(2), int32] */;
    %875 = cast(%872, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    divide(%875, %876) /* ty=Tensor[(4, 88), float64] */
  };
  %877(%var_1339) /* ty=Tensor[(4, 88), float64] */
}

def @func_1021() -> (Tensor[(4, 88), float32], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(4, 12, 6), float64], Tensor[(2, 144), float64]) {
  %878 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %879 = reshape(%878, newshape=[4, 12, 6]) /* ty=Tensor[(4, 12, 6), float64] */;
  %880 = @func_116(%879) /* ty=(Tensor[(4, 12, 6), float64],) */;
  %881 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %882 = @func_1007() /* ty=Tensor[(4, 88), float32] */;
  %883 = @func_848() /* ty=Tensor[(3, 8, 2), float64] */;
  %884 = %880.0;
  (%881, %882, %883, %884, meta[relay.Constant][33] /* ty=Tensor[(2, 144), float64] */)
}

def @func_1058() -> (Tensor[(4, 88), float64],) {
  %889 = fn () -> (Tensor[(4, 88), float64],) {
    %885 = @func_791() /* ty=(Tensor[(3, 8, 2), float64], Tensor[(4, 88), float32], Tensor[(3, 8, 2), float64], Tensor[(11, 4, 8), float32]) */;
    %886 = %885.1;
    %887 = cast(%886, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
    %888 = sinh(%887) /* ty=Tensor[(4, 88), float64] */;
    (%888,)
  };
  %889() /* ty=(Tensor[(4, 88), float64],) */
}

def @func_1469() -> Tensor[(3, 8, 2), float64] {
  @func_761() /* ty=Tensor[(3, 8, 2), float64] */
}

def @func_1805(%var_1803: Tensor[(96), float32]) -> (Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(96), float32], Tensor[(288), float64]) {
  @func_1802(%var_1803) /* ty=(Tensor[(4, 88), float64], Tensor[(4, 88), float64], Tensor[(3, 8, 2), float64], Tensor[(96), float32], Tensor[(288), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen432/build/output.py", line 2509, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:16:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

