==========mod==========
#[version = "0.0.5"]
def @func_9084() -> (Tensor[(14, 12, 11), uint16], Tensor[(104), float32], Tensor[(26, 4), int8]) {
  %0 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(26, 4), uint64] */, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %2 = reshape(%1, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %3 = @func_5389(%2) /* ty=(Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) */;
  %4 = %3.2;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(104), float32] */;
  %6 = cast(%4, dtype="int8") /* ty=Tensor[(104), int8] */;
  %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(26, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(26, 4), uint64] */, dtype="int8") /* ty=Tensor[(26, 4), int8] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %10 = %0.3;
  %11 = erf(%5) /* ty=Tensor[(104), float32] */;
  %12 = bitwise_and(%8, %9) /* ty=Tensor[(26, 4), int8] */;
  (%10, %11, %12)
}

def @func_1832(%var_1814: Tensor[(14, 12, 11), bool]) -> Tensor[(14, 12, 11), float64] {
  %13 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %14 = %13.0;
  %15 = cast(%var_1814, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%17, %18) /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_8704() -> (Tensor[(14, 12, 11), uint16], Tensor[(1848), float32]) {
  %19 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %20 = @func_6219() /* ty=(Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) */;
  %21 = %19.2;
  %22 = %20.1;
  (%21, %22)
}

def @func_5520(%var_5489: Tensor[(7, 15, 5), uint16]) -> (Tensor[(7, 15, 5), uint16],) {
  %23 = cast(%var_5489, dtype="uint16") /* ty=Tensor[(7, 15, 5), uint16] */;
  %24 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 15, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 15, 5), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 5), uint16] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %27 = right_shift(%25, %26) /* ty=Tensor[(7, 15, 5), uint16] */;
  (%27,)
}

def @func_9797(%var_9793: Tensor[(13, 10, 16), float32]) -> (Tensor[(13, 10, 16), float32], Tensor[(14, 12, 11), bool], Tensor[(13, 10, 16), int32]) {
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 16), float32] */;
  %29 = cast(%var_9793, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %30 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %33 = sin(%28) /* ty=Tensor[(13, 10, 16), float32] */;
  %34 = @func_6953() /* ty=Tensor[(14, 12, 11), bool] */;
  %35 = bitwise_xor(%31, %32) /* ty=Tensor[(13, 10, 16), int32] */;
  (%33, %34, %35)
}

def @func_4113() -> Tensor[(14, 12, 11), int32] {
  %36 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %36.0
}

def @func_6531(%var_6466: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int8], Tensor[(5, 5, 5), int32], int32, Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), float32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64]) {
  %37 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
  %38 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %39 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %40 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %41 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
  %42 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %43 = cast(%var_6466, dtype="int32") /* ty=Tensor[(125), int32] */;
  %44 = reshape(%42, newshape=[]) /* ty=int32 */;
  %45 = reshape(%43, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
  %46 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
  %47 = cast(%var_6466, dtype="float32") /* ty=Tensor[(125), float32] */;
  %48 = asin(%47) /* ty=Tensor[(125), float32] */;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(125), float32] */;
  %50 = cos(%49) /* ty=Tensor[(125), float32] */;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(125), float32] */;
  %52 = @func_4995() /* ty=(Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %53 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
  %54 = %37.1;
  %55 = %38.1;
  %56 = %39.0;
  %57 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %58 = %40.0;
  %59 = %41.1;
  %60 = @func_1240(%44, %45) /* ty=Tensor[(5, 5, 5), int32] */;
  %61 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  %62 = %46.1;
  %63 = atanh(%51) /* ty=Tensor[(125), float32] */;
  %64 = %52.2;
  %65 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %66 = %53.2;
  (%54, %55, %56, %57, %58, %59, %60, 1 /* ty=int32 */, %61, %62, %63, %64, %65, %66)
}

def @func_4421() -> Tensor[(14, 12, 11), uint16] {
  %67 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %67.2
}

def @func_6937(%var_6923: Tensor[(26, 4), float32]) -> (Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) {
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %70 = reshape(%68, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %71 = reshape(%69, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %72 = @func_1025(%70, %71) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %74 = cast(meta[relay.Constant][3] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %75 = reshape(%73, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %76 = reshape(%74, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %77 = @func_1025(%75, %76) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %78 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %79 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %82 = sqrt(%81) /* ty=Tensor[(26, 4), float32] */;
  %83 = cast(%var_6923, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %87 = %72.0;
  %88 = %77.3;
  %89 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %90 = %78.2;
  %91 = equal(%85, %86) /* ty=Tensor[(26, 4), bool] */;
  %92 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
  (%87, meta[relay.Constant][3] /* ty=Tensor[(168), float64] */, %88, %89, %90, %91, %92)
}

def @func_4502(%var_4493: Tensor[(26, 4), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(26, 4), float32]) {
  %93 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %94 = cast(%var_4493, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %95 = reshape(%94, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %96 = @func_1536(%95) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %97 = cast(%var_4493, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %98 = %93.0;
  %99 = %96.0;
  %100 = cosh(%97) /* ty=Tensor[(26, 4), float32] */;
  (%98, %99, %100)
}

def @func_942() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) {
  %101 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %102 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %104 = reshape(%103, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %105 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %106 = %101.0;
  %107 = %102.0;
  %108 = @func_412(%104) /* ty=Tensor[(4, 13, 2), bool] */;
  %109 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  %110 = %105.0;
  (%106, %107, %108, meta[relay.Constant][4] /* ty=Tensor[(104), uint64] */, %109, %110)
}

def @func_2363() -> (Tensor[(14, 12, 11), int32],) {
  %111 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%111,)
}

def @func_4933(%var_4924: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(168), float64]) {
  %112 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %113 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
  %114 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %115 = @func_4797() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %116 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %117 = cast(%var_4924, dtype="float64") /* ty=Tensor[(168), float64] */;
  %118 = reshape(%117, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %119 = @func_4749(%118) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %120 = %112.1;
  %121 = %113.4;
  %122 = %114.0;
  %123 = %115.0;
  %124 = %116.0;
  %125 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %126 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %127 = %119.2;
  (%120, %121, %122, %123, %124, %125, %126, %127, %var_4924)
}

def @func_5556() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  %128 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %129 = %128.0;
  %130 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%129, %130)
}

def @func_9837(%var_9819: Tensor[(14, 104), float32]) -> (Tensor[(14, 104), bool], Tensor[(14, 104), int64]) {
  %131 = @func_8384() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) */;
  %132 = %131.2;
  %133 = cast(%132, dtype="bool") /* ty=Tensor[(1, 104), bool] */;
  %134 = cast(%var_9819, dtype="bool") /* ty=Tensor[(14, 104), bool] */;
  %135 = cast(%132, dtype="int64") /* ty=Tensor[(1, 104), int64] */;
  %136 = cast(%var_9819, dtype="int64") /* ty=Tensor[(14, 104), int64] */;
  %137 = not_equal(%133, %134) /* ty=Tensor[(14, 104), bool] */;
  %138 = minimum(%135, %136) /* ty=Tensor[(14, 104), int64] */;
  (%137, %138)
}

def @func_1284(%var_1266: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, ?, 5), bool],) {
  %139 = cast(%var_1266, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %140 = log(%139) /* ty=Tensor[(7, 1, 5), float32] */;
  %141 = cast(%var_1266, dtype="uint16") /* ty=Tensor[(7, 1, 5), uint16] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="uint16") /* ty=Tensor[(7, 1, 5), uint16] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %145 = minimum(%143, %144) /* ty=Tensor[(7, ?, 5), uint16] */;
  %146 = cast(%145, dtype="bool") /* ty=Tensor[(7, ?, 5), bool] */;
  %147 = shape_of(%var_1266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_1266, dtype="bool") /* ty=Tensor[(7, 1, 5), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = greater(%148, %149) /* ty=Tensor[(7, ?, 5), bool] */;
  (%150,)
}

def @func_5912() -> (Tensor[(26, 4), int64], Tensor[(26, 4), bool]) {
  %151 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %152 = %151.0;
  %153 = cast(meta[relay.Constant][5] /* ty=Tensor[(26, 4), uint64] */, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
  %155 = cast(%152, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(26, 4), uint64] */, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %158 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
  %159 = cast(%152, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %161 = maximum(%159, %160) /* ty=Tensor[(26, 4), int64] */;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %163 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
  %164 = cast(%152, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %166 = subtract(%155, %156) /* ty=Tensor[(26, 4), int64] */;
  %167 = logical_or(%164, %165) /* ty=Tensor[(26, 4), bool] */;
  (%166, %167)
}

def @func_8091() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), int64], Tensor[(14, 12, 11), uint16]) {
  %168 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %169 = @func_7774() /* ty=(Tensor[(26, 4), int64],) */;
  %170 = %168.0;
  %171 = %169.0;
  %172 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%170, %171, %172)
}

def @func_8653() -> Tensor[(14, 12, 11), bool] {
  @func_6953() /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_5295() -> (Tensor[(14, 12, 11), int32],) {
  %173 = @func_4634() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %174 = %173.0;
  (%174,)
}

def @func_6827() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %175 = @func_6078() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %176 = @func_5379() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) */;
  %177 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  %178 = %175.0;
  %179 = %176.0;
  (%177, %178, %179)
}

def @func_9499() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
  %180 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
  %181 = @func_5573() /* ty=Tensor[(14, 12, 11), int32] */;
  %182 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
  (%180, %181, %182)
}

def @func_9647() -> (Tensor[(14, 12, 11), int32],) {
  %183 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %184 = %183.0;
  (%184,)
}

def @func_6045() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
  %185 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %187 = reshape(%186, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %188 = @func_4749(%187) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %189 = @func_5141() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) */;
  %190 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %191 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %192 = @func_4271() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %193 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  %194 = %185.1;
  %195 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  %196 = %188.2;
  %197 = %189.1;
  %198 = %190.0;
  %199 = %191.0;
  %200 = %192.0;
  (%193, %194, %195, %196, meta[relay.Constant][6] /* ty=Tensor[(168), float64] */, %197, %198, %199, %200)
}

def @func_2894() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %201 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %202 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %205 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %206 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %207 = %201.0;
  %208 = cosh(%204) /* ty=Tensor[(14, 12, 11), float64] */;
  %209 = %205.0;
  %210 = %206.0;
  (%207, %208, %209, %210)
}

def @func_7215() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
  %211 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
  %212 = @func_4271() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %213 = @func_5295() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %214 = %211.0;
  %215 = %212.0;
  %216 = %213.0;
  (%214, %215, %216)
}

def @func_7533() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %217 = @func_4613() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) */;
  %218 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %219 = %217.0;
  %220 = %218.0;
  (%219, %220)
}

def @func_2392() -> (Tensor[(14, 12, 11), int32],) {
  %221 = @func_2363() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %222 = %221.0;
  (%222,)
}

def @func_7809() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %223 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %224 = @func_7026() /* ty=Tensor[(14, 12, 11), int32] */;
  %225 = %223.0;
  (%224, %225)
}

def @main(%var_10045: Tensor[(1, 12, 14), float64], %var_10046: Tensor[(5, 12, 14), float64]) -> Tensor[(5, 12, 14), float64] {
  %226 = cast(%var_10045, dtype="float64") /* ty=Tensor[(1, 12, 14), float64] */;
  %227 = cast(%var_10046, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  power(%226, %227) /* ty=Tensor[(5, 12, 14), float64] */
}

def @func_6863() -> Tensor[(14, 12, 11), int32] {
  %228 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %228.0
}

def @func_1536(%var_1531: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %229 = cast(%var_1531, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %230 = reshape(%229, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %231 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %232 = @func_412(%230) /* ty=Tensor[(4, 13, 2), bool] */;
  (%231, %232, %var_1531)
}

def @func_6219() -> (Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) {
  %233 = cast(meta[relay.Constant][7] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %234 = reshape(%233, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %235 = @func_3102(%234) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %236 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %237 = %236.2;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(4, 13, 2), float64] */;
  %239 = exp(%238) /* ty=Tensor[(4, 13, 2), float64] */;
  %240 = cast(%239, dtype="int8") /* ty=Tensor[(4, 13, 2), int8] */;
  %241 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%237, dtype="int8") /* ty=Tensor[(4, 13, 2), int8] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %244 = %235.0;
  %245 = multiply(%242, %243) /* ty=Tensor[(4, 13, 2), int8] */;
  (%244, meta[relay.Constant][7] /* ty=Tensor[(1848), float32] */, %245)
}

def @func_8770() -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), int32]) {
  %246 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %247 = cast(meta[relay.Constant][8] /* ty=Tensor[(125), int32] */, dtype="int32") /* ty=Tensor[(125), int32] */;
  %248 = reshape(%247, newshape=[125]) /* ty=Tensor[(125), int32] */;
  %249 = @func_8011(%248) /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) */;
  %250 = %246.0;
  %251 = %249.1;
  (%250, %251, meta[relay.Constant][8] /* ty=Tensor[(125), int32] */)
}

def @func_6784() -> Tensor[(14, 12, 11), int32] {
  %252 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %252.0
}

def @func_3988() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
  %253 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %254 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %255 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %256 = %253.0;
  %257 = %254.0;
  %258 = %255.0;
  %259 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
  %260 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  (%256, %257, %258, %259, %260)
}

def @func_3325() -> (Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) {
  %261 = cast(meta[relay.Constant][9] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %262 = reshape(%261, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %263 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %264 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
  %265 = @func_412(%262) /* ty=Tensor[(4, 13, 2), bool] */;
  %266 = %263.0;
  (%264, %265, meta[relay.Constant][9] /* ty=Tensor[(104), uint64] */, %266)
}

def @func_1048(%var_1040: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %267 = cast(%var_1040, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %268 = reshape(%267, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %269 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %270 = @func_412(%268) /* ty=Tensor[(4, 13, 2), bool] */;
  (%269, %270, %var_1040)
}

def @func_5747(%var_5738: Tensor[(11, 15, 11), float32]) -> (Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) {
  %271 = cast(%var_5738, dtype="float32") /* ty=Tensor[(11, 15, 11), float32] */;
  %272 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %273 = acos(%271) /* ty=Tensor[(11, 15, 11), float32] */;
  %274 = %272.1;
  (%273, %274)
}

def @func_6559() -> Tensor[(14, 12, 11), int32] {
  @func_437() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4075() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) {
  %275 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %276 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %277 = cast(meta[relay.Constant][10] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %278 = reshape(%277, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %279 = @func_1536(%278) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %280 = %275.0;
  %281 = %276.0;
  %282 = %279.2;
  (%280, %281, %282, meta[relay.Constant][10] /* ty=Tensor[(104), uint64] */)
}

def @func_760() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %283 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %284 = %283.0;
  %285 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  (%284, %285)
}

def @func_6333() -> (Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) {
  %286 = @func_5912() /* ty=(Tensor[(26, 4), int64], Tensor[(26, 4), bool]) */;
  %287 = %286.1;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %289 = cos(%288) /* ty=Tensor[(26, 4), float32] */;
  %290 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
  (%289, %290)
}

def @func_1708(%var_1690: Tensor[(14, 12, 11), float64]) -> Tensor[(14, 12, 11), bool] {
  %291 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %294 = erf(%293) /* ty=Tensor[(14, 12, 11), float64] */;
  %295 = cast(%var_1690, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%297, %298) /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_2193() -> (Tensor[(14, 12, 11), float64],) {
  %299 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %301 = log10(%300) /* ty=Tensor[(14, 12, 11), float64] */;
  (%301,)
}

def @func_7625() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %302 = @func_5769() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %303 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %304 = %302.0;
  %305 = %303.0;
  (%304, %305)
}

def @func_2097() -> (Tensor[(14, 12, 11), int32],) {
  %306 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%306,)
}

def @func_2347(%var_2255: Tensor[(12, 11, 13), uint16], %var_2256: Tensor[(12, 11, 13), uint16], %var_2261: Tensor[(104), uint64]) -> (Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) {
  %307 = cast(%var_2261, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %308 = reshape(%307, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %309 = @func_1536(%308) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %310 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %311 = cast(%var_2261, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %312 = reshape(%311, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %313 = @func_1048(%312) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %314 = cast(%var_2256, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %315 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_2255, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = greater_equal(%316, %317) /* ty=Tensor[(12, 11, 13), bool] */;
  %319 = cast(%318, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %320 = shape_of(%var_2256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_2256, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = logical_or(%321, %322) /* ty=Tensor[(12, 11, 13), bool] */;
  %324 = cast(%318, dtype="uint8") /* ty=Tensor[(12, 11, 13), uint8] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="uint8") /* ty=Tensor[(12, 11, 13), uint8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %328 = bitwise_xor(%326, %327) /* ty=Tensor[(12, 11, 13), uint8] */;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  %330 = atan(%329) /* ty=Tensor[(12, 11, 13), float32] */;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
  %332 = asin(%331) /* ty=Tensor[(12, 11, 13), float64] */;
  %333 = cast(%323, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = %309.1;
  %338 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %339 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %340 = %310.0;
  %341 = %313.0;
  %342 = equal(%335, %336) /* ty=Tensor[(12, 11, 13), bool] */;
  (%337, %var_2261, %338, %339, %340, %341, %342)
}

def @func_8986() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64]) {
  %343 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  %344 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  (%343, %344)
}

def @func_7271() -> Tensor[(15, 5, 16), float32] {
  %345 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 5, 16), uint32] */, dtype="uint32") /* ty=Tensor[(1, 5, 16), uint32] */;
  %346 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 5, 16), uint32] */, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
  %347 = bitwise_or(%345, %346) /* ty=Tensor[(15, 5, 16), uint32] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(15, 5, 16), float32] */;
  cos(%348) /* ty=Tensor[(15, 5, 16), float32] */
}

def @func_8599(%var_8596: Tensor[(2, 9, 5), float64]) -> (Tensor[(2, 9, 5), float64],) {
  %349 = cast(%var_8596, dtype="float64") /* ty=Tensor[(2, 9, 5), float64] */;
  %350 = sinh(%349) /* ty=Tensor[(2, 9, 5), float64] */;
  (%350,)
}

def @func_828() -> (Tensor[(14, 12, 11), bool],) {
  %351 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %352 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = equal(%354, %355) /* ty=Tensor[(14, 12, 11), bool] */;
  (%356,)
}

def @func_4995() -> (Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %357 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %359 = reshape(%358, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %360 = @func_4749(%359) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %361 = @func_3157() /* ty=Tensor[(14, 16, 14), float32] */;
  %362 = %357.3;
  %363 = %360.1;
  (%361, %362, %363, meta[relay.Constant][14] /* ty=Tensor[(168), float64] */)
}

def @func_8011(%var_8006: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) {
  %364 = @func_4075() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) */;
  %365 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %366 = cast(%var_8006, dtype="int32") /* ty=Tensor[(125), int32] */;
  %367 = reshape(%365, newshape=[]) /* ty=int32 */;
  %368 = reshape(%366, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
  %369 = %364.0;
  %370 = @func_1240(%367, %368) /* ty=Tensor[(5, 5, 5), int32] */;
  (%369, %370, -10 /* ty=int32 */, %var_8006)
}

def @func_9231(%var_9187: Tensor[(1, 12, 15), float32]) -> (Tensor[(104), float64], Tensor[(14, 12, 11), int32], Tensor[(?, 12, 15), float32], Tensor[(1, 12, 15), float64]) {
  %371 = @func_7874() /* ty=(Tensor[(104), float64],) */;
  %372 = cast(%var_9187, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
  %373 = erf(%372) /* ty=Tensor[(1, 12, 15), float32] */;
  %374 = cast(%var_9187, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %378 = cast(%373, dtype="float64") /* ty=Tensor[(1, 12, 15), float64] */;
  %379 = %371.0;
  %380 = @func_4113() /* ty=Tensor[(14, 12, 11), int32] */;
  %381 = divide(%376, %377) /* ty=Tensor[(?, 12, 15), float32] */;
  %382 = cosh(%378) /* ty=Tensor[(1, 12, 15), float64] */;
  (%379, %380, %381, %382)
}

def @func_8954(%var_8937: Tensor[(125), int32], %var_8948: Tensor[(104, 1), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), int32], Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(104, 1), uint64]) {
  %383 = cast(%var_8937, dtype="int32") /* ty=Tensor[(125), int32] */;
  %384 = reshape(%383, newshape=[125]) /* ty=Tensor[(125), int32] */;
  %385 = @func_8011(%384) /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) */;
  %386 = cast(%var_8948, dtype="uint64") /* ty=Tensor[(104, 1), uint64] */;
  %387 = @func_1583() /* ty=Tensor[(14, 12, 11), float32] */;
  %388 = cast(%387, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %389 = reshape(%386, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %390 = reshape(%388, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), int32] */;
  %391 = @func_2742(%389, %390) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %392 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  %393 = %385.3;
  %394 = %391.0;
  (%392, %387, %393, %var_8937, %394, %var_8948)
}

def @func_2966(%var_2930: Tensor[(14, 12, 11), uint16]) -> (Tensor[(14, 12, 11), bool],) {
  %395 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %396 = %395.5;
  %397 = cast(%var_2930, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = less(%399, %400) /* ty=Tensor[(14, 12, 11), bool] */;
  (%401,)
}

def @func_3041() -> Tensor[(14, 12, 11), float64] {
  %402 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %402.0
}

def @func_1445() -> Tensor[(14, 12, 11), int32] {
  %403 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %403.0
}

def @func_2482() -> Tensor[(14, 12, 11), int32] {
  %404 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %404.0
}

def @func_5049() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) {
  %405 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %408 = reshape(%407, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %409 = @func_3102(%408) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %410 = %409.0;
  (%406, %410)
}

def @func_10000() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
  %411 = @func_7625() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %412 = %411.1;
  %413 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %414 = @func_7057() /* ty=Tensor[(14, 12, 11), bool] */;
  (%412, %413, %414)
}

def @func_5853() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %415 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %416 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %417 = %415.1;
  %418 = %416.1;
  %419 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  (%417, %418, %419)
}

def @func_2536() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %420 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %421 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %422 = %420.0;
  %423 = %421.0;
  (%422, %423)
}

def @func_4271() -> (Tensor[(14, 12, 11), float64],) {
  %424 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  (%424,)
}

def @func_8384() -> (Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) {
  %425 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %426 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %427 = reshape(%426, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %428 = @func_6937(%427) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) */;
  %429 = %428.1;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(168), float64] */;
  %431 = reshape(%430, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %432 = @func_7733(%431) /* ty=(Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) */;
  %433 = %425.0;
  %434 = %432.0;
  (%433, %429, meta[relay.Constant][15] /* ty=Tensor[(1, 104), float32] */, %434)
}

def @func_7944() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(640), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %435 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %436 = %435.0;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %438 = reshape(%437, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %439 = @func_3102(%438) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %440 = @func_6333() /* ty=(Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) */;
  %441 = @func_5049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) */;
  %442 = cast(meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %443 = cast(meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %444 = reshape(%442, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float32] */;
  %445 = reshape(%443, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float32] */;
  %446 = @func_5257(%444, %445) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) */;
  %447 = @func_2049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %448 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %449 = %439.2;
  %450 = %440.1;
  %451 = %441.1;
  %452 = %446.1;
  %453 = %447.0;
  %454 = %448.0;
  (%436, %449, %450, %451, %452, meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, %453, %454)
}

def @func_3778() -> Tensor[(14, 12, 11), float32] {
  %455 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %455.0
}

def @func_4832(%var_4815: Tensor[(9, 11, 15), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(9, 11, 15), float64]) {
  %456 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %457 = cast(%var_4815, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %458 = atanh(%457) /* ty=Tensor[(9, 11, 15), float64] */;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %460 = %456.1;
  %461 = asin(%459) /* ty=Tensor[(9, 11, 15), float64] */;
  (%460, %461)
}

def @func_8189() -> Tensor[(14, 12, 11), int32] {
  %462 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %462.0
}

def @func_1544() -> (Tensor[(14, 12, 11), int32],) {
  %463 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  (%463,)
}

def @func_156() -> (Tensor[(14, 12, 11), int32],) {
  %464 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %465 = tan(%464) /* ty=Tensor[(14, 12, 11), float64] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %467 = sinh(%466) /* ty=Tensor[(14, 12, 11), float32] */;
  %468 = cast(%465, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %472 = logical_xor(%470, %471) /* ty=Tensor[(14, 12, 11), int32] */;
  (%472,)
}

def @func_5389(%var_5387: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) {
  %473 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %474 = cast(%var_5387, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %475 = reshape(%474, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %476 = @func_1048(%475) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %477 = %473.0;
  %478 = %476.2;
  (%477, %478, %var_5387)
}

def @func_7509(%var_7416: Tensor[(8, 20), float32], %var_7443: Tensor[(8, 20), float64], %var_7453: Tensor[(8, 20), float64]) -> (Tensor[(14, 16, 14), float32], Tensor[(8, 20), float32], Tensor[(154), bool], Tensor[(1, 2464), bool], Tensor[(8, 20), bool], Tensor[(14, 12, 11), int32], Tensor[(8, 20), int16], Tensor[(14, 12, 11), int32], Tensor[(8, 20), uint32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(8, 20), bool], Tensor[(8, 20), uint16]) {
  %479 = cast(meta[relay.Constant][18] /* ty=Tensor[(154), bool] */, dtype="bool") /* ty=Tensor[(154), bool] */;
  %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 2464), bool] */, dtype="bool") /* ty=Tensor[(1, 2464), bool] */;
  %481 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 20), float32] */, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
  %482 = reshape(%479, newshape=[14, 1, 11]) /* ty=Tensor[(14, 1, 11), bool] */;
  %483 = reshape(%480, newshape=[14, 16, 11]) /* ty=Tensor[(14, 16, 11), bool] */;
  %484 = reshape(%481, newshape=[8, 20]) /* ty=Tensor[(8, 20), float32] */;
  %485 = @func_2155(%482, %483, %484) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) */;
  %486 = cast(%var_7416, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %487 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 20), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %488 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 20), float32] */, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %490 = cast(%var_7416, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %491 = acosh(%490) /* ty=Tensor[(8, 20), float64] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %493 = cos(%492) /* ty=Tensor[(8, 20), float64] */;
  %494 = cast(%var_7443, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(2), int32] */;
  %496 = cast(%493, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %498 = cast(%var_7453, dtype="uint32") /* ty=Tensor[(8, 20), uint32] */;
  %499 = shape_of(%491, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = cast(%491, dtype="uint32") /* ty=Tensor[(8, 20), uint32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %502 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %503 = cast(%491, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %504 = shape_of(%493, dtype="int32") /* ty=Tensor[(2), int32] */;
  %505 = cast(%493, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %507 = cast(%var_7416, dtype="uint16") /* ty=Tensor[(8, 20), uint16] */;
  %508 = shape_of(%491, dtype="int32") /* ty=Tensor[(2), int32] */;
  %509 = cast(%491, dtype="uint16") /* ty=Tensor[(8, 20), uint16] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %511 = @func_3157() /* ty=Tensor[(14, 16, 14), float32] */;
  %512 = %485.1;
  %513 = greater(%488, %489) /* ty=Tensor[(8, 20), bool] */;
  %514 = @func_2482() /* ty=Tensor[(14, 12, 11), int32] */;
  %515 = bitwise_xor(%496, %497) /* ty=Tensor[(8, 20), int16] */;
  %516 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
  %517 = maximum(%500, %501) /* ty=Tensor[(8, 20), uint32] */;
  %518 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %519 = %502.1;
  %520 = less(%505, %506) /* ty=Tensor[(8, 20), bool] */;
  %521 = left_shift(%509, %510) /* ty=Tensor[(8, 20), uint16] */;
  (%511, %512, meta[relay.Constant][18] /* ty=Tensor[(154), bool] */, meta[relay.Constant][19] /* ty=Tensor[(1, 2464), bool] */, %513, %514, %515, %516, %517, %518, %519, %520, %521)
}

def @func_599() -> Tensor[(14, 12, 11), int32] {
  %522 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %522.0
}

def @func_5379() -> (Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) {
  %523 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 168), float64] */, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %524 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 168), float64] */, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %525 = reshape(%523, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %526 = reshape(%524, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %527 = @func_1025(%525, %526) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  %530 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %531 = erf(%529) /* ty=Tensor[(7, 12, 2), float32] */;
  (%530, meta[relay.Constant][21] /* ty=Tensor[(1, 168), float64] */, %531)
}

def @func_8847() -> (Tensor[(14, 12, 11), int32],) {
  %532 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  (%532,)
}

def @func_2690() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %533 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %534 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %535 = %533.0;
  %536 = %534.0;
  (%535, %536)
}

def @func_2155(%var_2121: Tensor[(14, 1, 11), bool], %var_2122: Tensor[(14, 16, 11), bool], %var_2130: Tensor[(8, 20), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) {
  %537 = cast(%var_2130, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
  %538 = reshape(%537, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float32] */;
  %539 = @func_1488(%538) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) */;
  %540 = cast(%var_2121, dtype="bool") /* ty=Tensor[(14, 1, 11), bool] */;
  %541 = cast(%var_2122, dtype="bool") /* ty=Tensor[(14, 16, 11), bool] */;
  %542 = logical_and(%540, %541) /* ty=Tensor[(14, 16, 11), bool] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(14, 16, 11), float64] */;
  %544 = exp(%543) /* ty=Tensor[(14, 16, 11), float64] */;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(14, 16, 11), float64] */;
  %546 = %539.0;
  %547 = cos(%545) /* ty=Tensor[(14, 16, 11), float64] */;
  (%546, %var_2130, %547)
}

def @func_180() -> Tensor[(14, 12, 11), uint16] {
  %548 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %549 = %548.0;
  %550 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="uint16") /* ty=Tensor[(14, 12, 11), uint16] */;
  %553 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%549, dtype="uint16") /* ty=Tensor[(14, 12, 11), uint16] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%554, %555) /* ty=Tensor[(14, 12, 11), uint16] */
}

def @func_3157() -> Tensor[(14, 16, 14), float32] {
  %556 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  asin(%556) /* ty=Tensor[(14, 16, 14), float32] */
}

def @func_7578() -> (Tensor[(14, 12, 11), float64],) {
  %557 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %558 = %557.0;
  (%558,)
}

def @func_5573() -> Tensor[(14, 12, 11), int32] {
  %559 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %559.0
}

def @func_4613() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) {
  %560 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %563 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  %564 = sinh(%562) /* ty=Tensor[(26, 4), float64] */;
  (%563, %564)
}

def @func_8237(%var_8229: uint32, %var_8230: Tensor[(16, 3, 15), uint32]) -> Tensor[(16, 3, 15), bool] {
  %565 = cast(%var_8229, dtype="bool") /* ty=bool */;
  %566 = cast(%var_8230, dtype="bool") /* ty=Tensor[(16, 3, 15), bool] */;
  not_equal(%565, %566) /* ty=Tensor[(16, 3, 15), bool] */
}

def @func_7355() -> (Tensor[(14, 12, 11), int32], Tensor[(15, 5, 16), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
  %567 = @func_5295() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %568 = @func_6863() /* ty=Tensor[(14, 12, 11), int32] */;
  %569 = @func_7271() /* ty=Tensor[(15, 5, 16), float32] */;
  %570 = %567.0;
  %571 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
  (%568, %569, %570, %571)
}

def @func_207() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  %572 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %573 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %574 = %572.0;
  %575 = %573.0;
  %576 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%574, %575, %576)
}

def @func_7126(%var_7121: Tensor[(4, 5, 12), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) {
  %577 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %578 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %579 = @func_3882() /* ty=(Tensor[(1, 5, 12), float32],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(1, 5, 12), float64] */;
  %582 = cast(%var_7121, dtype="float64") /* ty=Tensor[(4, 5, 12), float64] */;
  %583 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
  %584 = %577.0;
  %585 = %578.0;
  %586 = mod(%581, %582) /* ty=Tensor[(4, 5, 12), float64] */;
  (%583, %584, %585, %586)
}

def @func_412(%var_406: Tensor[(4, 13, 2), uint64]) -> Tensor[(4, 13, 2), bool] {
  %587 = cast(%var_406, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %588 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 13, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 13, 2), uint64] */, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%589, %590) /* ty=Tensor[(4, 13, 2), bool] */
}

def @func_9246() -> Tensor[(14, 12, 11), float32] {
  %591 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %591.0
}

def @func_2742(%var_2725: Tensor[(104), uint64], %var_2727: Tensor[(14, 12, 11), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %592 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %593 = cast(%var_2725, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %594 = reshape(%593, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %595 = @func_1048(%594) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %596 = %595.0;
  %597 = cast(%var_2727, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %601 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %602 = %592.1;
  %603 = left_shift(%599, %600) /* ty=Tensor[(14, 12, 11), int32] */;
  %604 = %601.0;
  (%602, %var_2725, %603, %604)
}

def @func_5257(%var_5226: Tensor[(16, 5, 8), float32], %var_5245: Tensor[(16, 5, 8), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) {
  %605 = @func_3631() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %606 = cast(%var_5226, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %607 = atan(%606) /* ty=Tensor[(16, 5, 8), float32] */;
  %608 = cast(%var_5245, dtype="uint32") /* ty=Tensor[(16, 5, 8), uint32] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="uint32") /* ty=Tensor[(16, 5, 8), uint32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %612 = cast(%607, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %613 = %605.3;
  %614 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %615 = maximum(%610, %611) /* ty=Tensor[(16, 5, 8), uint32] */;
  %616 = cosh(%612) /* ty=Tensor[(16, 5, 8), float64] */;
  (%613, %614, %615, %616)
}

def @func_3102(%var_3055: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  %617 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %618 = %617.0;
  %619 = cast(%var_3055, dtype="int8") /* ty=Tensor[(14, 12, 11), int8] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="int8") /* ty=Tensor[(14, 12, 11), int8] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %623 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %624 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %625 = minimum(%621, %622) /* ty=Tensor[(14, 12, 11), int8] */;
  %626 = %623.0;
  %627 = %624.0;
  (%625, %626, %627)
}

def @func_4749(%var_4741: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %628 = @func_4634() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %629 = %628.0;
  %630 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = cast(%var_4741, dtype="float64") /* ty=Tensor[(168), float64] */;
  %635 = cast(%var_4741, dtype="float64") /* ty=Tensor[(168), float64] */;
  %636 = reshape(%634, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %637 = reshape(%635, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %638 = @func_1025(%636, %637) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %639 = greater_equal(%632, %633) /* ty=Tensor[(14, 12, 11), bool] */;
  %640 = %638.1;
  (%639, %640, %var_4741)
}

def @func_2639() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) {
  %641 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %642 = cast(meta[relay.Constant][25] /* ty=Tensor[(858, 2), uint16] */, dtype="uint16") /* ty=Tensor[(858, 2), uint16] */;
  %643 = cast(meta[relay.Constant][25] /* ty=Tensor[(858, 2), uint16] */, dtype="uint16") /* ty=Tensor[(858, 2), uint16] */;
  %644 = cast(meta[relay.Constant][26] /* ty=Tensor[(26, 4), uint64] */, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %645 = reshape(%642, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %646 = reshape(%643, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %647 = reshape(%644, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %648 = @func_2347(%645, %646, %647) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
  %649 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %650 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %651 = cast(meta[relay.Constant][27] /* ty=Tensor[(858, 2), uint16] */, dtype="bool") /* ty=Tensor[(858, 2), bool] */;
  %652 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(858, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %653 = cast(meta[relay.Constant][25] /* ty=Tensor[(858, 2), uint16] */, dtype="bool") /* ty=Tensor[(858, 2), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %655 = %641.3;
  %656 = %648.5;
  %657 = %649.0;
  %658 = %650.0;
  %659 = logical_or(%653, %654) /* ty=Tensor[(858, 2), bool] */;
  (%655, %656, meta[relay.Constant][26] /* ty=Tensor[(26, 4), uint64] */, %657, %658, %659)
}

def @func_1930() -> (Tensor[(14, 12, 11), int32],) {
  %660 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %661 = %660.0;
  %662 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 12, 11), float64] */, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %666 = bitwise_xor(%664, %665) /* ty=Tensor[(14, 12, 11), int32] */;
  (%666,)
}

def @func_7874() -> (Tensor[(104), float64],) {
  %667 = @func_4075() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) */;
  %668 = %667.3;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(104), float64] */;
  %670 = sqrt(%669) /* ty=Tensor[(104), float64] */;
  (%670,)
}

def @func_9551() -> Tensor[(14, 12, 11), uint16] {
  %671 = @func_6045() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) */;
  %671.1
}

def @func_7026() -> Tensor[(14, 12, 11), int32] {
  @func_6784() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_1148() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  %672 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %673 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %674 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %675 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  %676 = %672.4;
  %677 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %678 = %673.2;
  %679 = %674.5;
  (%675, %676, %677, %678, %679)
}

def @func_1488(%var_1450: Tensor[(4, 5, 8), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) {
  %680 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %681 = cast(%var_1450, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
  %682 = sigmoid(%681) /* ty=Tensor[(4, 5, 8), float32] */;
  %683 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(4, 5, 8), uint16] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="uint16") /* ty=Tensor[(4, 5, 8), uint16] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %687 = %680.0;
  %688 = bitwise_and(%685, %686) /* ty=Tensor[(4, 5, 8), uint16] */;
  (%687, %688)
}

def @func_5794() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) {
  %689 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %690 = @func_5049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) */;
  %691 = %689.0;
  %692 = %690.1;
  (%691, %692)
}

def @func_240() -> (Tensor[(14, 12, 11), uint16],) {
  %693 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %694 = %693.2;
  (%694,)
}

def @func_3493() -> (Tensor[(26, 4), uint64],) {
  %695 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
  %696 = %695.2;
  (%696,)
}

def @func_718() -> Tensor[(14, 12, 11), float64] {
  %697 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  sqrt(%698) /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_2466() -> (Tensor[(14, 12, 11), float32],) {
  %699 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %700 = %699.0;
  (%700,)
}

def @func_4889() -> (Tensor[(14, 12, 11), int32],) {
  %701 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %702 = %701.0;
  (%702,)
}

def @func_579() -> (Tensor[(14, 12, 11), float32],) {
  %703 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %705 = acosh(%704) /* ty=Tensor[(14, 12, 11), float32] */;
  (%705,)
}

def @func_9409() -> Tensor[(14, 12, 11), int32] {
  @func_8189() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_3882() -> (Tensor[(1, 5, 12), float32],) {
  %706 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 12), float32] */;
  %707 = cos(%706) /* ty=Tensor[(1, 5, 12), float32] */;
  (%707,)
}

def @func_7733(%var_7686: Tensor[(168), float64]) -> (Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
  %708 = @func_4487() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) */;
  %709 = cast(%var_7686, dtype="float64") /* ty=Tensor[(168), float64] */;
  %710 = cast(%var_7686, dtype="float64") /* ty=Tensor[(168), float64] */;
  %711 = reshape(%709, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %712 = reshape(%710, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %713 = @func_1025(%711, %712) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %714 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %715 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %716 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %717 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %718 = %708.2;
  %719 = %713.0;
  %720 = %714.0;
  %721 = %715.0;
  %722 = %716.0;
  %723 = %717.0;
  (%718, %719, %var_7686, %720, %721, %722, %723)
}

def @func_9607() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %724 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %725 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %726 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %727 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %728 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %729 = reshape(%727, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %730 = reshape(%728, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %731 = @func_1025(%729, %730) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %732 = %724.0;
  %733 = %725.0;
  %734 = %726.0;
  %735 = %731.1;
  (%732, %733, %734, %735, meta[relay.Constant][30] /* ty=Tensor[(168), float64] */)
}

def @func_1742() -> Tensor[(14, 12, 11), int32] {
  @func_437() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_7982() -> Tensor[(14, 12, 11), float32] {
  @func_3778() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_1212() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) {
  %736 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %737 = %736.0;
  %738 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%737, %738)
}

def @func_1194() -> (Tensor[(14, 12, 11), float32],) {
  %739 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %740 = %739.0;
  (%740,)
}

def @func_6078() -> (Tensor[(14, 12, 11), uint16],) {
  %741 = @func_4613() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) */;
  %742 = %741.0;
  (%742,)
}

def @func_1240(%var_1232: int32, %var_1233: Tensor[(5, 5, 5), int32]) -> Tensor[(5, 5, 5), int32] {
  %743 = cast(%var_1232, dtype="int32") /* ty=int32 */;
  %744 = cast(%var_1233, dtype="int32") /* ty=Tensor[(5, 5, 5), int32] */;
  multiply(%743, %744) /* ty=Tensor[(5, 5, 5), int32] */
}

def @func_6715(%var_6708: Tensor[(4, 13, 2), bool]) -> Tensor[(4, 13, 2), bool] {
  %745 = @func_3325() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) */;
  %746 = %745.1;
  %747 = cast(%var_6708, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%749, %750) /* ty=Tensor[(4, 13, 2), bool] */
}

def @func_999() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  %751 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %752 = %751.1;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %754 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %755 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %756 = sin(%753) /* ty=Tensor[(14, 12, 11), float32] */;
  %757 = %754.0;
  (%755, %756, %757)
}

def @func_5141() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) {
  %758 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %759 = %758.0;
  %760 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%759, %760)
}

def @func_4303() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %761 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
  %762 = %761.1;
  %763 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  (%762, %763)
}

def @func_8225(%var_8219: Tensor[(35, 1), float32]) -> (Tensor[(15, 16, 6), float32], Tensor[(7, ?, 5), bool], Tensor[(35, 1), float32]) {
  %764 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 16, 6), float32] */;
  %765 = cast(%var_8219, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %766 = reshape(%765, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %767 = @func_1284(%766) /* ty=(Tensor[(7, ?, 5), bool],) */;
  %768 = erf(%764) /* ty=Tensor[(15, 16, 6), float32] */;
  %769 = %767.0;
  (%768, %769, %var_8219)
}

def @func_498(%var_496: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %770 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %771 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %774 = log2(%773) /* ty=Tensor[(14, 12, 11), float32] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %776 = cast(%var_496, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %777 = reshape(%776, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %778 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %779 = %770.0;
  %780 = rsqrt(%775) /* ty=Tensor[(14, 12, 11), float32] */;
  %781 = @func_412(%777) /* ty=Tensor[(4, 13, 2), bool] */;
  (%778, %779, %780, %781, %var_496)
}

def @func_437() -> Tensor[(14, 12, 11), int32] {
  %782 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %782.1
}

def @func_8881(%var_8850: Tensor[(4, 15, 2), uint32]) -> (Tensor[(4, 15, 2), float64], Tensor[(14, 12, 11), float32]) {
  %783 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %784 = cast(%var_8850, dtype="uint32") /* ty=Tensor[(4, 15, 2), uint32] */;
  %785 = bitwise_xor(%783, %784) /* ty=Tensor[(4, 15, 2), uint32] */;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %787 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %788 = log10(%786) /* ty=Tensor[(4, 15, 2), float64] */;
  %789 = %787.0;
  (%788, %789)
}

def @func_6877() -> Tensor[(14, 12, 11), float64] {
  @func_3041() /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_9968(%var_9927: Tensor[(4, 4, 3), float32], %var_9955: Tensor[(104), uint64]) -> (Tensor[(4, 4, 3), int16], Tensor[(16, 3, 15), bool], uint32, Tensor[(1, 720), uint32], Tensor[(11, 15, 11), float32], Tensor[(1815), float32], Tensor[(14, 12, 11), float64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), float32]) {
  %790 = cast(%var_9927, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %791 = acosh(%790) /* ty=Tensor[(4, 4, 3), float32] */;
  %792 = cast(%791, dtype="int16") /* ty=Tensor[(4, 4, 3), int16] */;
  %793 = shape_of(%var_9927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_9927, dtype="int16") /* ty=Tensor[(4, 4, 3), int16] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %796 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %797 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 720), uint32] */, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
  %798 = reshape(%796, newshape=[]) /* ty=uint32 */;
  %799 = reshape(%797, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), uint32] */;
  %800 = cast(meta[relay.Constant][35] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %801 = reshape(%800, newshape=[11, 15, 11]) /* ty=Tensor[(11, 15, 11), float32] */;
  %802 = @func_5747(%801) /* ty=(Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %803 = cast(meta[relay.Constant][36] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %804 = cast(meta[relay.Constant][36] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %805 = cast(%var_9955, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %806 = reshape(%803, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %807 = reshape(%804, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %808 = reshape(%805, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %809 = @func_2347(%806, %807, %808) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
  %810 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %811 = add(%794, %795) /* ty=Tensor[(4, 4, 3), int16] */;
  %812 = @func_8237(%798, %799) /* ty=Tensor[(16, 3, 15), bool] */;
  %813 = %802.0;
  %814 = %809.4;
  %815 = %810.0;
  (%811, %812, meta[relay.Constant][33] /* ty=uint32 */, meta[relay.Constant][34] /* ty=Tensor[(1, 720), uint32] */, %813, meta[relay.Constant][35] /* ty=Tensor[(1815), float32] */, %814, meta[relay.Constant][36] /* ty=Tensor[(1716), uint16] */, %var_9955, %815)
}

def @func_5769() -> (Tensor[(14, 12, 11), bool],) {
  %816 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %817 = %816.0;
  (%817,)
}

def @func_2049() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %818 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %819 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %820 = %818.0;
  %821 = %819.0;
  %822 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  (%820, %821, %822)
}

def @func_9371() -> Tensor[(14, 12, 11), int32] {
  @func_1742() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4634() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %823 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %824 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %825 = %823.0;
  %826 = %824.0;
  (%825, %826)
}

def @func_4213() -> (Tensor[(26, 4), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %827 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %830 = reshape(%829, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %831 = @func_1536(%830) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %832 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %833 = @func_2363() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %834 = %831.0;
  %835 = %832.0;
  %836 = %833.0;
  (%828, %834, %835, %836)
}

def @func_9725(%var_9705: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), float64]) {
  %837 = @func_4248() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %838 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %839 = cast(%var_9705, dtype="int32") /* ty=Tensor[(125), int32] */;
  %840 = reshape(%838, newshape=[]) /* ty=int32 */;
  %841 = reshape(%839, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
  %842 = cast(-9 /* ty=int32 */, dtype="int8") /* ty=int8 */;
  %843 = cast(%var_9705, dtype="int8") /* ty=Tensor[(125), int8] */;
  %844 = maximum(%842, %843) /* ty=Tensor[(125), int8] */;
  %845 = cast(meta[relay.Constant][37] /* ty=Tensor[(125), int8] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(1), int32] */;
  %847 = cast(%844, dtype="float64") /* ty=Tensor[(125), float64] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?), float64] */;
  %849 = %837.1;
  %850 = @func_1240(%840, %841) /* ty=Tensor[(5, 5, 5), int32] */;
  %851 = divide(%847, %848) /* ty=Tensor[(125), float64] */;
  (%849, %850, %851)
}

def @func_4487() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) {
  %852 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
  %853 = cast(meta[relay.Constant][38] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %854 = cast(meta[relay.Constant][39] /* ty=Tensor[(125), int32] */, dtype="int32") /* ty=Tensor[(125), int32] */;
  %855 = reshape(%853, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
  %856 = reshape(%854, newshape=[125]) /* ty=Tensor[(125), int32] */;
  %857 = @func_3770(%855, %856) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %858 = %852.3;
  %859 = %857.5;
  (%858, %859, meta[relay.Constant][38] /* ty=Tensor[(1716), uint16] */, meta[relay.Constant][39] /* ty=Tensor[(125), int32] */)
}

def @func_5718(%var_5700: Tensor[(154), bool], %var_5702: Tensor[(160), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(14, 16, 11), float64], Tensor[(154), bool], Tensor[(2464), bool], Tensor[(160), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
  %860 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %861 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %862 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %863 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %864 = cast(%var_5700, dtype="bool") /* ty=Tensor[(154), bool] */;
  %865 = cast(meta[relay.Constant][40] /* ty=Tensor[(2464), bool] */, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %866 = cast(%var_5702, dtype="float32") /* ty=Tensor[(160), float32] */;
  %867 = reshape(%864, newshape=[14, 1, 11]) /* ty=Tensor[(14, 1, 11), bool] */;
  %868 = reshape(%865, newshape=[14, 16, 11]) /* ty=Tensor[(14, 16, 11), bool] */;
  %869 = reshape(%866, newshape=[8, 20]) /* ty=Tensor[(8, 20), float32] */;
  %870 = @func_2155(%867, %868, %869) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) */;
  %871 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
  %872 = cast(%871, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %873 = reshape(%872, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %874 = @func_3102(%873) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %875 = %860.1;
  %876 = %861.0;
  %877 = %862.1;
  %878 = %863.0;
  %879 = %870.2;
  %880 = %874.1;
  %881 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  (%875, %876, %871, %877, %878, %879, %var_5700, meta[relay.Constant][40] /* ty=Tensor[(2464), bool] */, %var_5702, %880, %881)
}

def @func_3770(%var_3721: Tensor[(1716), uint16], %var_3736: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  %882 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %883 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %884 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %885 = cast(meta[relay.Constant][41] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %886 = reshape(%883, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %887 = reshape(%884, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %888 = reshape(%885, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %889 = @func_2347(%886, %887, %888) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
  %890 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %891 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %892 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %893 = cast(%var_3736, dtype="int32") /* ty=Tensor[(125), int32] */;
  %894 = reshape(%892, newshape=[]) /* ty=int32 */;
  %895 = reshape(%893, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
  %896 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %897 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %898 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
  %899 = %882.0;
  %900 = %889.1;
  %901 = %890.0;
  %902 = %891.0;
  %903 = @func_1240(%894, %895) /* ty=Tensor[(5, 5, 5), int32] */;
  %904 = %896.0;
  %905 = %897.1;
  %906 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %907 = %898.0;
  (%899, %900, %var_3721, meta[relay.Constant][41] /* ty=Tensor[(104), uint64] */, %901, %902, %903, -8 /* ty=int32 */, %var_3736, %904, %905, %906, %907)
}

def @func_9033(%var_9010: Tensor[(360, 2), uint32]) -> (Tensor[(4, 7, 14), uint8], Tensor[(16, 3, 15), bool], uint32, Tensor[(360, 2), uint32]) {
  %908 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %909 = log(%908) /* ty=Tensor[(4, 7, 14), float32] */;
  %910 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 14), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 14), uint8] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%909, dtype="uint8") /* ty=Tensor[(4, 7, 14), uint8] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %914 = cast(meta[relay.Constant][43] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %915 = cast(%var_9010, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
  %916 = reshape(%914, newshape=[]) /* ty=uint32 */;
  %917 = reshape(%915, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), uint32] */;
  %918 = bitwise_and(%912, %913) /* ty=Tensor[(4, 7, 14), uint8] */;
  %919 = @func_8237(%916, %917) /* ty=Tensor[(16, 3, 15), bool] */;
  (%918, %919, meta[relay.Constant][43] /* ty=uint32 */, %var_9010)
}

def @func_1583() -> Tensor[(14, 12, 11), float32] {
  %920 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %921 = cast(%920, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  asinh(%921) /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_6369(%var_6355: Tensor[(2, 6, 1), float64]) -> (Tensor[(2, 6, ?), bool], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %922 = cast(%var_6355, dtype="float64") /* ty=Tensor[(2, 6, 1), float64] */;
  %923 = sigmoid(%922) /* ty=Tensor[(2, 6, 1), float64] */;
  %924 = cast(%923, dtype="bool") /* ty=Tensor[(2, 6, 1), bool] */;
  %925 = shape_of(%var_6355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_6355, dtype="bool") /* ty=Tensor[(2, 6, 1), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %929 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %930 = not_equal(%926, %927) /* ty=Tensor[(2, 6, ?), bool] */;
  %931 = %928.1;
  %932 = %929.0;
  (%930, %931, %932)
}

def @func_1025(%var_1008: Tensor[(7, 12, 2), float64], %var_1009: Tensor[(7, 12, 2), float64]) -> (Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %933 = cast(%var_1009, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %934 = shape_of(%var_1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%var_1008, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %937 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %938 = cast(meta[relay.Constant][44] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %939 = reshape(%938, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %940 = floor_divide(%935, %936) /* ty=Tensor[(7, 12, 2), float64] */;
  %941 = %937.0;
  %942 = @func_412(%939) /* ty=Tensor[(4, 13, 2), bool] */;
  (%940, %941, %942, meta[relay.Constant][44] /* ty=Tensor[(104), uint64] */)
}

def @func_8049() -> Tensor[(14, 12, 11), int32] {
  @func_4113() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4797() -> (Tensor[(14, 12, 11), int32],) {
  %943 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %944 = %943.0;
  (%944,)
}

def @func_6953() -> Tensor[(14, 12, 11), bool] {
  %945 = @func_4995() /* ty=(Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %945.2
}

def @func_7057() -> Tensor[(14, 12, 11), bool] {
  %946 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %946.2
}

def @func_5317() -> (Tensor[(14, 12, 11), int32],) {
  %947 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %948 = %947.0;
  (%948,)
}

def @func_2599() -> Tensor[(14, 12, 11), float64] {
  %949 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %950 = %949.0;
  %951 = cast(%950, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  exp(%951) /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_8830() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 60), float32]) {
  %952 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %953 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 60), float32] */, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
  %954 = reshape(%953, newshape=[4, 5, 12]) /* ty=Tensor[(4, 5, 12), float32] */;
  %955 = @func_7126(%954) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) */;
  %956 = %952.0;
  %957 = %955.0;
  (%956, %957, meta[relay.Constant][45] /* ty=Tensor[(4, 60), float32] */)
}

def @func_1979() -> (Tensor[(14, 12, 11), int32],) {
  %958 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %959 = %958.1;
  (%959,)
}

def @func_8502() -> (Tensor[(14, 12, 11), int32],) {
  %960 = @func_4797() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %961 = %960.0;
  (%961,)
}

def @func_3631() -> (Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %962 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %963 = cast(meta[relay.Constant][46] /* ty=Tensor[(104, 1), uint64] */, dtype="uint64") /* ty=Tensor[(104, 1), uint64] */;
  %964 = reshape(%963, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %965 = @func_1048(%964) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %966 = cast(meta[relay.Constant][46] /* ty=Tensor[(104, 1), uint64] */, dtype="float64") /* ty=Tensor[(104, 1), float64] */;
  %967 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %968 = %962.0;
  %969 = %965.1;
  %970 = atan(%966) /* ty=Tensor[(104, 1), float64] */;
  %971 = %967.1;
  %972 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%968, %969, %970, %971, %972)
}

def @func_1310() -> (Tensor[(14, 12, 11), int32],) {
  %973 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  (%973,)
}

def @func_8479() -> (Tensor[(14, 12, 11), float64],) {
  %974 = @func_6877() /* ty=Tensor[(14, 12, 11), float64] */;
  (%974,)
}

def @func_3197() -> (Tensor[(14, 12, 11), float32],) {
  %975 = @func_1583() /* ty=Tensor[(14, 12, 11), float32] */;
  (%975,)
}

def @func_3852(%var_3798: float64, %var_3799: Tensor[(11, 2, 16), float64]) -> (Tensor[(11, 2, 16), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32]) {
  %976 = cast(%var_3798, dtype="float64") /* ty=float64 */;
  %977 = cast(%var_3799, dtype="float64") /* ty=Tensor[(11, 2, 16), float64] */;
  %978 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %979 = %978.0;
  %980 = cast(%979, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %981 = reshape(%980, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %982 = @func_3102(%981) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %983 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %984 = mod(%976, %977) /* ty=Tensor[(11, 2, 16), float64] */;
  %985 = %982.1;
  %986 = @func_2482() /* ty=Tensor[(14, 12, 11), int32] */;
  %987 = %983.1;
  (%984, %979, %985, %986, %987)
}

def @func_7774() -> (Tensor[(26, 4), int64],) {
  %988 = @func_5912() /* ty=(Tensor[(26, 4), int64], Tensor[(26, 4), bool]) */;
  %989 = %988.0;
  (%989,)
}

def @func_8159() -> Tensor[(14, 12, 11), int32] {
  %990 = @func_7809() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %990.1
}

def @func_4248() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %991 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %992 = %991.0;
  %993 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  (%992, %993)
}

def @func_3691() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) {
  %994 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %995 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %996 = %994.0;
  %997 = %995.0;
  (%996, %997)
}

def @func_4765() -> (Tensor[(14, 12, 11), int32],) {
  %998 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%998,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6533(%var_6532: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int8], Tensor[(5, 5, 5), int32], int32, Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), float32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64]) {
  %30 = fn (%var_6466: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int8], Tensor[(5, 5, 5), int32], int32, Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), float32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64]) {
    %0 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
    %1 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %2 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %3 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
    %4 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
    %5 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %6 = cast(%var_6466, dtype="int32") /* ty=Tensor[(125), int32] */;
    %7 = reshape(%5, newshape=[]) /* ty=int32 */;
    %8 = reshape(%6, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
    %9 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
    %10 = cast(%var_6466, dtype="float32") /* ty=Tensor[(125), float32] */;
    %11 = asin(%10) /* ty=Tensor[(125), float32] */;
    %12 = cast(%11, dtype="float32") /* ty=Tensor[(125), float32] */;
    %13 = cos(%12) /* ty=Tensor[(125), float32] */;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(125), float32] */;
    %15 = @func_4995() /* ty=(Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
    %16 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
    %17 = %0.1;
    %18 = %1.1;
    %19 = %2.0;
    %20 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
    %21 = %3.0;
    %22 = %4.1;
    %23 = @func_1240(%7, %8) /* ty=Tensor[(5, 5, 5), int32] */;
    %24 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
    %25 = %9.1;
    %26 = atanh(%14) /* ty=Tensor[(125), float32] */;
    %27 = %15.2;
    %28 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    %29 = %16.2;
    (%17, %18, %19, %20, %21, %22, %23, 1 /* ty=int32 */, %24, %25, %26, %27, %28, %29)
  };
  %30(%var_6532) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int8], Tensor[(5, 5, 5), int32], int32, Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), float32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64]) */
}

def @func_7810() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %34 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
    %31 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %32 = @func_7026() /* ty=Tensor[(14, 12, 11), int32] */;
    %33 = %31.0;
    (%32, %33)
  };
  %34() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_7733(%var_7686: Tensor[(168), float64]) -> (Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
  %35 = @func_4487() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) */;
  %36 = cast(%var_7686, dtype="float64") /* ty=Tensor[(168), float64] */;
  %37 = cast(%var_7686, dtype="float64") /* ty=Tensor[(168), float64] */;
  %38 = reshape(%36, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %39 = reshape(%37, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %40 = @func_1025(%38, %39) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %41 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %42 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %43 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %44 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %45 = %35.2;
  %46 = %40.0;
  %47 = %41.0;
  %48 = %42.0;
  %49 = %43.0;
  %50 = %44.0;
  (%45, %46, %var_7686, %47, %48, %49, %50)
}

def @func_8655() -> Tensor[(14, 12, 11), bool] {
  @func_8653() /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_9372() -> Tensor[(14, 12, 11), int32] {
  %51 = fn () -> Tensor[(14, 12, 11), int32] {
    @func_1742() /* ty=Tensor[(14, 12, 11), int32] */
  };
  %51() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_3159() -> Tensor[(14, 16, 14), float32] {
  @func_3157() /* ty=Tensor[(14, 16, 14), float32] */
}

def @func_6937(%var_6923: Tensor[(26, 4), float32]) -> (Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) {
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %54 = reshape(%52, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %55 = reshape(%53, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %56 = @func_1025(%54, %55) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %57 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %58 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %59 = reshape(%57, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %60 = reshape(%58, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %61 = @func_1025(%59, %60) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %62 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %63 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(26, 4), float32] */;
  %67 = cast(%var_6923, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(2), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %71 = %56.0;
  %72 = %61.3;
  %73 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %74 = %62.2;
  %75 = equal(%69, %70) /* ty=Tensor[(26, 4), bool] */;
  %76 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
  (%71, meta[relay.Constant][0] /* ty=Tensor[(168), float64] */, %72, %73, %74, %75, %76)
}

def @func_9647() -> (Tensor[(14, 12, 11), int32],) {
  %77 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %78 = %77.0;
  (%78,)
}

def @func_1931() -> (Tensor[(14, 12, 11), int32],) {
  %86 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %79 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
    %80 = %79.0;
    %81 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 12, 11), float64] */, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%80, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %85 = bitwise_xor(%83, %84) /* ty=Tensor[(14, 12, 11), int32] */;
    (%85,)
  };
  %86() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_1243(%var_1241: int32, %var_1242: Tensor[(5, 5, 5), int32]) -> Tensor[(5, 5, 5), int32] {
  %89 = fn (%var_1232: int32, %var_1233: Tensor[(5, 5, 5), int32]) -> Tensor[(5, 5, 5), int32] {
    %87 = cast(%var_1232, dtype="int32") /* ty=int32 */;
    %88 = cast(%var_1233, dtype="int32") /* ty=Tensor[(5, 5, 5), int32] */;
    multiply(%87, %88) /* ty=Tensor[(5, 5, 5), int32] */
  };
  %89(%var_1241, %var_1242) /* ty=Tensor[(5, 5, 5), int32] */
}

def @func_3770(%var_3721: Tensor[(1716), uint16], %var_3736: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  %90 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %91 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %92 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %94 = reshape(%91, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %95 = reshape(%92, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
  %96 = reshape(%93, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %97 = @func_2347(%94, %95, %96) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
  %98 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %99 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %100 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %101 = cast(%var_3736, dtype="int32") /* ty=Tensor[(125), int32] */;
  %102 = reshape(%100, newshape=[]) /* ty=int32 */;
  %103 = reshape(%101, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
  %104 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %105 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %106 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
  %107 = %90.0;
  %108 = %97.1;
  %109 = %98.0;
  %110 = %99.0;
  %111 = @func_1240(%102, %103) /* ty=Tensor[(5, 5, 5), int32] */;
  %112 = %104.0;
  %113 = %105.1;
  %114 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %115 = %106.0;
  (%107, %108, %var_3721, meta[relay.Constant][2] /* ty=Tensor[(104), uint64] */, %109, %110, %111, -8 /* ty=int32 */, %var_3736, %112, %113, %114, %115)
}

def @func_8091() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), int64], Tensor[(14, 12, 11), uint16]) {
  %116 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %117 = @func_7774() /* ty=(Tensor[(26, 4), int64],) */;
  %118 = %116.0;
  %119 = %117.0;
  %120 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%118, %119, %120)
}

def @func_8988() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64]) {
  @func_8986() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64]) */
}

def @func_8601(%var_8600: Tensor[(2, 9, 5), float64]) -> (Tensor[(2, 9, 5), float64],) {
  %123 = fn (%var_8596: Tensor[(2, 9, 5), float64]) -> (Tensor[(2, 9, 5), float64],) {
    %121 = cast(%var_8596, dtype="float64") /* ty=Tensor[(2, 9, 5), float64] */;
    %122 = sinh(%121) /* ty=Tensor[(2, 9, 5), float64] */;
    (%122,)
  };
  %123(%var_8600) /* ty=(Tensor[(2, 9, 5), float64],) */
}

def @func_5796() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) {
  @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */
}

def @func_9248() -> Tensor[(14, 12, 11), float32] {
  @func_9246() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_5319() -> (Tensor[(14, 12, 11), int32],) {
  @func_5317() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @main(%var_10045: Tensor[(1, 12, 14), float64], %var_10046: Tensor[(5, 12, 14), float64]) -> Tensor[(5, 12, 14), float64] {
  %124 = cast(%var_10045, dtype="float64") /* ty=Tensor[(1, 12, 14), float64] */;
  %125 = cast(%var_10046, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  power(%124, %125) /* ty=Tensor[(5, 12, 14), float64] */
}

def @func_4766() -> (Tensor[(14, 12, 11), int32],) {
  %127 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %126 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
    (%126,)
  };
  %127() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_6865() -> Tensor[(14, 12, 11), int32] {
  @func_6863() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_8093() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), int64], Tensor[(14, 12, 11), uint16]) {
  @func_8091() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), int64], Tensor[(14, 12, 11), uint16]) */
}

def @func_9840(%var_9838: Tensor[(14, 104), float32]) -> (Tensor[(14, 104), bool], Tensor[(14, 104), int64]) {
  @func_9837(%var_9838) /* ty=(Tensor[(14, 104), bool], Tensor[(14, 104), int64]) */
}

def @func_9800(%var_9798: Tensor[(13, 10, 16), float32]) -> (Tensor[(13, 10, 16), float32], Tensor[(14, 12, 11), bool], Tensor[(13, 10, 16), int32]) {
  @func_9797(%var_9798) /* ty=(Tensor[(13, 10, 16), float32], Tensor[(14, 12, 11), bool], Tensor[(13, 10, 16), int32]) */
}

def @func_8771() -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), int32]) {
  %134 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), int32]) {
    %128 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %129 = cast(meta[relay.Constant][3] /* ty=Tensor[(125), int32] */, dtype="int32") /* ty=Tensor[(125), int32] */;
    %130 = reshape(%129, newshape=[125]) /* ty=Tensor[(125), int32] */;
    %131 = @func_8011(%130) /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) */;
    %132 = %128.0;
    %133 = %131.1;
    (%132, %133, meta[relay.Constant][3] /* ty=Tensor[(125), int32] */)
  };
  %134() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), int32]) */
}

def @func_8704() -> (Tensor[(14, 12, 11), uint16], Tensor[(1848), float32]) {
  %135 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %136 = @func_6219() /* ty=(Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) */;
  %137 = %135.2;
  %138 = %136.1;
  (%137, %138)
}

def @func_1212() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) {
  %139 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %140 = %139.0;
  %141 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%140, %141)
}

def @func_4996() -> (Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %149 = fn () -> (Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
    %142 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
    %143 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %144 = reshape(%143, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %145 = @func_4749(%144) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
    %146 = @func_3157() /* ty=Tensor[(14, 16, 14), float32] */;
    %147 = %142.3;
    %148 = %145.1;
    (%146, %147, %148, meta[relay.Constant][4] /* ty=Tensor[(168), float64] */)
  };
  %149() /* ty=(Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */
}

def @func_2484() -> Tensor[(14, 12, 11), int32] {
  @func_2482() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_9971(%var_9969: Tensor[(4, 4, 3), float32], %var_9970: Tensor[(104), uint64]) -> (Tensor[(4, 4, 3), int16], Tensor[(16, 3, 15), bool], uint32, Tensor[(1, 720), uint32], Tensor[(11, 15, 11), float32], Tensor[(1815), float32], Tensor[(14, 12, 11), float64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), float32]) {
  %176 = fn (%var_9927: Tensor[(4, 4, 3), float32], %var_9955: Tensor[(104), uint64]) -> (Tensor[(4, 4, 3), int16], Tensor[(16, 3, 15), bool], uint32, Tensor[(1, 720), uint32], Tensor[(11, 15, 11), float32], Tensor[(1815), float32], Tensor[(14, 12, 11), float64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), float32]) {
    %150 = cast(%var_9927, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
    %151 = acosh(%150) /* ty=Tensor[(4, 4, 3), float32] */;
    %152 = cast(%151, dtype="int16") /* ty=Tensor[(4, 4, 3), int16] */;
    %153 = shape_of(%var_9927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(%var_9927, dtype="int16") /* ty=Tensor[(4, 4, 3), int16] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %156 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 720), uint32] */, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
    %158 = reshape(%156, newshape=[]) /* ty=uint32 */;
    %159 = reshape(%157, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), uint32] */;
    %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(1815), float32] */, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %161 = reshape(%160, newshape=[11, 15, 11]) /* ty=Tensor[(11, 15, 11), float32] */;
    %162 = @func_5747(%161) /* ty=(Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) */;
    %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %165 = cast(%var_9955, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %166 = reshape(%163, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
    %167 = reshape(%164, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
    %168 = reshape(%165, newshape=[104]) /* ty=Tensor[(104), uint64] */;
    %169 = @func_2347(%166, %167, %168) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
    %170 = @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %171 = add(%154, %155) /* ty=Tensor[(4, 4, 3), int16] */;
    %172 = @func_8237(%158, %159) /* ty=Tensor[(16, 3, 15), bool] */;
    %173 = %162.0;
    %174 = %169.4;
    %175 = %170.0;
    (%171, %172, meta[relay.Constant][5] /* ty=uint32 */, meta[relay.Constant][6] /* ty=Tensor[(1, 720), uint32] */, %173, meta[relay.Constant][7] /* ty=Tensor[(1815), float32] */, %174, meta[relay.Constant][8] /* ty=Tensor[(1716), uint16] */, %var_9955, %175)
  };
  %176(%var_9969, %var_9970) /* ty=(Tensor[(4, 4, 3), int16], Tensor[(16, 3, 15), bool], uint32, Tensor[(1, 720), uint32], Tensor[(11, 15, 11), float32], Tensor[(1815), float32], Tensor[(14, 12, 11), float64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), float32]) */
}

def @func_9608() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %189 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
    %177 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %178 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
    %179 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
    %180 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %182 = reshape(%180, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
    %183 = reshape(%181, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
    %184 = @func_1025(%182, %183) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
    %185 = %177.0;
    %186 = %178.0;
    %187 = %179.0;
    %188 = %184.1;
    (%185, %186, %187, %188, meta[relay.Constant][9] /* ty=Tensor[(168), float64] */)
  };
  %189() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */
}

def @func_8653() -> Tensor[(14, 12, 11), bool] {
  @func_6953() /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_2600() -> Tensor[(14, 12, 11), float64] {
  %193 = fn () -> Tensor[(14, 12, 11), float64] {
    %190 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %191 = %190.0;
    %192 = cast(%191, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    exp(%192) /* ty=Tensor[(14, 12, 11), float64] */
  };
  %193() /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_3882() -> (Tensor[(1, 5, 12), float32],) {
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 12), float32] */;
  %195 = cos(%194) /* ty=Tensor[(1, 5, 12), float32] */;
  (%195,)
}

def @func_10001() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
  %200 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
    %196 = @func_7625() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
    %197 = %196.1;
    %198 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    %199 = @func_7057() /* ty=Tensor[(14, 12, 11), bool] */;
    (%197, %198, %199)
  };
  %200() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) */
}

def @func_3494() -> (Tensor[(26, 4), uint64],) {
  %203 = fn () -> (Tensor[(26, 4), uint64],) {
    %201 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
    %202 = %201.2;
    (%202,)
  };
  %203() /* ty=(Tensor[(26, 4), uint64],) */
}

def @func_1447() -> Tensor[(14, 12, 11), int32] {
  @func_1445() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_5770() -> (Tensor[(14, 12, 11), bool],) {
  %206 = fn () -> (Tensor[(14, 12, 11), bool],) {
    %204 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
    %205 = %204.0;
    (%205,)
  };
  %206() /* ty=(Tensor[(14, 12, 11), bool],) */
}

def @func_6559() -> Tensor[(14, 12, 11), int32] {
  @func_437() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_719() -> Tensor[(14, 12, 11), float64] {
  %209 = fn () -> Tensor[(14, 12, 11), float64] {
    %207 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
    %208 = cast(%207, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    sqrt(%208) /* ty=Tensor[(14, 12, 11), float64] */
  };
  %209() /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_4075() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) {
  %210 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %211 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %213 = reshape(%212, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %214 = @func_1536(%213) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %215 = %210.0;
  %216 = %211.0;
  %217 = %214.2;
  (%215, %216, %217, meta[relay.Constant][11] /* ty=Tensor[(104), uint64] */)
}

def @func_2640() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) {
  %237 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) {
    %218 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
    %219 = cast(meta[relay.Constant][12] /* ty=Tensor[(858, 2), uint16] */, dtype="uint16") /* ty=Tensor[(858, 2), uint16] */;
    %220 = cast(meta[relay.Constant][12] /* ty=Tensor[(858, 2), uint16] */, dtype="uint16") /* ty=Tensor[(858, 2), uint16] */;
    %221 = cast(meta[relay.Constant][13] /* ty=Tensor[(26, 4), uint64] */, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
    %222 = reshape(%219, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
    %223 = reshape(%220, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint16] */;
    %224 = reshape(%221, newshape=[104]) /* ty=Tensor[(104), uint64] */;
    %225 = @func_2347(%222, %223, %224) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */;
    %226 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %227 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(858, 2), uint16] */, dtype="bool") /* ty=Tensor[(858, 2), bool] */;
    %229 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(858, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(858, 2), uint16] */, dtype="bool") /* ty=Tensor[(858, 2), bool] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %232 = %218.3;
    %233 = %225.5;
    %234 = %226.0;
    %235 = %227.0;
    %236 = logical_or(%230, %231) /* ty=Tensor[(858, 2), bool] */;
    (%232, %233, meta[relay.Constant][13] /* ty=Tensor[(26, 4), uint64] */, %234, %235, %236)
  };
  %237() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */
}

def @func_3633() -> (Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  @func_3631() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_4615() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) {
  @func_4613() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) */
}

def @func_7272() -> Tensor[(15, 5, 16), float32] {
  %242 = fn () -> Tensor[(15, 5, 16), float32] {
    %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 5, 16), uint32] */, dtype="uint32") /* ty=Tensor[(1, 5, 16), uint32] */;
    %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 5, 16), uint32] */, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
    %240 = bitwise_or(%238, %239) /* ty=Tensor[(15, 5, 16), uint32] */;
    %241 = cast(%240, dtype="float32") /* ty=Tensor[(15, 5, 16), float32] */;
    cos(%241) /* ty=Tensor[(15, 5, 16), float32] */
  };
  %242() /* ty=Tensor[(15, 5, 16), float32] */
}

def @func_8881(%var_8850: Tensor[(4, 15, 2), uint32]) -> (Tensor[(4, 15, 2), float64], Tensor[(14, 12, 11), float32]) {
  %243 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %244 = cast(%var_8850, dtype="uint32") /* ty=Tensor[(4, 15, 2), uint32] */;
  %245 = bitwise_xor(%243, %244) /* ty=Tensor[(4, 15, 2), uint32] */;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %247 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %248 = log10(%246) /* ty=Tensor[(4, 15, 2), float64] */;
  %249 = %247.0;
  (%248, %249)
}

def @func_9033(%var_9010: Tensor[(360, 2), uint32]) -> (Tensor[(4, 7, 14), uint8], Tensor[(16, 3, 15), bool], uint32, Tensor[(360, 2), uint32]) {
  %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %251 = log(%250) /* ty=Tensor[(4, 7, 14), float32] */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 7, 14), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 14), uint8] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint8") /* ty=Tensor[(4, 7, 14), uint8] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %256 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %257 = cast(%var_9010, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
  %258 = reshape(%256, newshape=[]) /* ty=uint32 */;
  %259 = reshape(%257, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), uint32] */;
  %260 = bitwise_and(%254, %255) /* ty=Tensor[(4, 7, 14), uint8] */;
  %261 = @func_8237(%258, %259) /* ty=Tensor[(16, 3, 15), bool] */;
  (%260, %261, meta[relay.Constant][19] /* ty=uint32 */, %var_9010)
}

def @func_828() -> (Tensor[(14, 12, 11), bool],) {
  %262 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %263 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %267 = equal(%265, %266) /* ty=Tensor[(14, 12, 11), bool] */;
  (%267,)
}

def @func_8832() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 60), float32]) {
  @func_8830() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 60), float32]) */
}

def @func_1025(%var_1008: Tensor[(7, 12, 2), float64], %var_1009: Tensor[(7, 12, 2), float64]) -> (Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %268 = cast(%var_1009, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %269 = shape_of(%var_1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_1008, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %272 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %273 = cast(meta[relay.Constant][21] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %274 = reshape(%273, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %275 = floor_divide(%270, %271) /* ty=Tensor[(7, 12, 2), float64] */;
  %276 = %272.0;
  %277 = @func_412(%274) /* ty=Tensor[(4, 13, 2), bool] */;
  (%275, %276, %277, meta[relay.Constant][21] /* ty=Tensor[(104), uint64] */)
}

def @func_1711(%var_1709: Tensor[(14, 12, 11), float64]) -> Tensor[(14, 12, 11), bool] {
  @func_1708(%var_1709) /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_9837(%var_9819: Tensor[(14, 104), float32]) -> (Tensor[(14, 104), bool], Tensor[(14, 104), int64]) {
  %278 = @func_8384() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) */;
  %279 = %278.2;
  %280 = cast(%279, dtype="bool") /* ty=Tensor[(1, 104), bool] */;
  %281 = cast(%var_9819, dtype="bool") /* ty=Tensor[(14, 104), bool] */;
  %282 = cast(%279, dtype="int64") /* ty=Tensor[(1, 104), int64] */;
  %283 = cast(%var_9819, dtype="int64") /* ty=Tensor[(14, 104), int64] */;
  %284 = not_equal(%280, %281) /* ty=Tensor[(14, 104), bool] */;
  %285 = minimum(%282, %283) /* ty=Tensor[(14, 104), int64] */;
  (%284, %285)
}

def @func_3692() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) {
  %290 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) {
    %286 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %287 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
    %288 = %286.0;
    %289 = %287.0;
    (%288, %289)
  };
  %290() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */
}

def @func_4634() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %291 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %292 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %293 = %291.0;
  %294 = %292.0;
  (%293, %294)
}

def @func_830() -> (Tensor[(14, 12, 11), bool],) {
  @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */
}

def @func_1310() -> (Tensor[(14, 12, 11), int32],) {
  %295 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  (%295,)
}

def @func_6079() -> (Tensor[(14, 12, 11), uint16],) {
  %298 = fn () -> (Tensor[(14, 12, 11), uint16],) {
    %296 = @func_4613() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) */;
    %297 = %296.0;
    (%297,)
  };
  %298() /* ty=(Tensor[(14, 12, 11), uint16],) */
}

def @func_4936(%var_4934: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(168), float64]) {
  @func_4933(%var_4934) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(168), float64]) */
}

def @func_601() -> Tensor[(14, 12, 11), int32] {
  @func_599() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4488() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) {
  %307 = fn () -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) {
    %299 = @func_2639() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(26, 4), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(858, 2), bool]) */;
    %300 = cast(meta[relay.Constant][22] /* ty=Tensor[(1716), uint16] */, dtype="uint16") /* ty=Tensor[(1716), uint16] */;
    %301 = cast(meta[relay.Constant][23] /* ty=Tensor[(125), int32] */, dtype="int32") /* ty=Tensor[(125), int32] */;
    %302 = reshape(%300, newshape=[1716]) /* ty=Tensor[(1716), uint16] */;
    %303 = reshape(%301, newshape=[125]) /* ty=Tensor[(125), int32] */;
    %304 = @func_3770(%302, %303) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
    %305 = %299.3;
    %306 = %304.5;
    (%305, %306, meta[relay.Constant][22] /* ty=Tensor[(1716), uint16] */, meta[relay.Constant][23] /* ty=Tensor[(125), int32] */)
  };
  %307() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(1716), uint16], Tensor[(125), int32]) */
}

def @func_8884(%var_8882: Tensor[(4, 15, 2), uint32]) -> (Tensor[(4, 15, 2), float64], Tensor[(14, 12, 11), float32]) {
  @func_8881(%var_8882) /* ty=(Tensor[(4, 15, 2), float64], Tensor[(14, 12, 11), float32]) */
}

def @func_9233(%var_9232: Tensor[(1, 12, 15), float32]) -> (Tensor[(104), float64], Tensor[(14, 12, 11), int32], Tensor[(?, 12, 15), float32], Tensor[(1, 12, 15), float64]) {
  %320 = fn (%var_9187: Tensor[(1, 12, 15), float32]) -> (Tensor[(104), float64], Tensor[(14, 12, 11), int32], Tensor[(?, 12, 15), float32], Tensor[(1, 12, 15), float64]) {
    %308 = @func_7874() /* ty=(Tensor[(104), float64],) */;
    %309 = cast(%var_9187, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
    %310 = erf(%309) /* ty=Tensor[(1, 12, 15), float32] */;
    %311 = cast(%var_9187, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
    %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%310, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %315 = cast(%310, dtype="float64") /* ty=Tensor[(1, 12, 15), float64] */;
    %316 = %308.0;
    %317 = @func_4113() /* ty=Tensor[(14, 12, 11), int32] */;
    %318 = divide(%313, %314) /* ty=Tensor[(?, 12, 15), float32] */;
    %319 = cosh(%315) /* ty=Tensor[(1, 12, 15), float64] */;
    (%316, %317, %318, %319)
  };
  %320(%var_9232) /* ty=(Tensor[(104), float64], Tensor[(14, 12, 11), int32], Tensor[(?, 12, 15), float32], Tensor[(1, 12, 15), float64]) */
}

def @func_5051() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) {
  @func_5049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) */
}

def @func_8957(%var_8955: Tensor[(125), int32], %var_8956: Tensor[(104, 1), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), int32], Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(104, 1), uint64]) {
  %333 = fn (%var_8937: Tensor[(125), int32], %var_8948: Tensor[(104, 1), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), int32], Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(104, 1), uint64]) {
    %321 = cast(%var_8937, dtype="int32") /* ty=Tensor[(125), int32] */;
    %322 = reshape(%321, newshape=[125]) /* ty=Tensor[(125), int32] */;
    %323 = @func_8011(%322) /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) */;
    %324 = cast(%var_8948, dtype="uint64") /* ty=Tensor[(104, 1), uint64] */;
    %325 = @func_1583() /* ty=Tensor[(14, 12, 11), float32] */;
    %326 = cast(%325, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
    %327 = reshape(%324, newshape=[104]) /* ty=Tensor[(104), uint64] */;
    %328 = reshape(%326, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), int32] */;
    %329 = @func_2742(%327, %328) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
    %330 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
    %331 = %323.3;
    %332 = %329.0;
    (%330, %325, %331, %var_8937, %332, %var_8948)
  };
  %333(%var_8955, %var_8956) /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(125), int32], Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(104, 1), uint64]) */
}

def @func_1001() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */
}

def @func_207() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  %334 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %335 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %336 = %334.0;
  %337 = %335.0;
  %338 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%336, %337, %338)
}

def @func_2895() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %349 = fn () -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
    %339 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
    %340 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %343 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
    %344 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %345 = %339.0;
    %346 = cosh(%342) /* ty=Tensor[(14, 12, 11), float64] */;
    %347 = %343.0;
    %348 = %344.0;
    (%345, %346, %347, %348)
  };
  %349() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */
}

def @func_9727(%var_9726: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), float64]) {
  %365 = fn (%var_9705: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), float64]) {
    %350 = @func_4248() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %351 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %352 = cast(%var_9705, dtype="int32") /* ty=Tensor[(125), int32] */;
    %353 = reshape(%351, newshape=[]) /* ty=int32 */;
    %354 = reshape(%352, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
    %355 = cast(-9 /* ty=int32 */, dtype="int8") /* ty=int8 */;
    %356 = cast(%var_9705, dtype="int8") /* ty=Tensor[(125), int8] */;
    %357 = maximum(%355, %356) /* ty=Tensor[(125), int8] */;
    %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(125), int8] */, dtype="float64") /* ty=Tensor[(125), float64] */;
    %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(1), int32] */;
    %360 = cast(%357, dtype="float64") /* ty=Tensor[(125), float64] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?), float64] */;
    %362 = %350.1;
    %363 = @func_1240(%353, %354) /* ty=Tensor[(5, 5, 5), int32] */;
    %364 = divide(%360, %361) /* ty=Tensor[(125), float64] */;
    (%362, %363, %364)
  };
  %365(%var_9726) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(5, 5, 5), int32], Tensor[(125), float64]) */
}

def @func_9084() -> (Tensor[(14, 12, 11), uint16], Tensor[(104), float32], Tensor[(26, 4), int8]) {
  %366 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
  %367 = cast(meta[relay.Constant][25] /* ty=Tensor[(26, 4), uint64] */, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %368 = reshape(%367, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %369 = @func_5389(%368) /* ty=(Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) */;
  %370 = %369.2;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(104), float32] */;
  %372 = cast(%370, dtype="int8") /* ty=Tensor[(104), int8] */;
  %373 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(26, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %374 = cast(meta[relay.Constant][25] /* ty=Tensor[(26, 4), uint64] */, dtype="int8") /* ty=Tensor[(26, 4), int8] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %376 = %366.3;
  %377 = erf(%371) /* ty=Tensor[(104), float32] */;
  %378 = bitwise_and(%374, %375) /* ty=Tensor[(26, 4), int8] */;
  (%376, %377, %378)
}

def @func_9649() -> (Tensor[(14, 12, 11), int32],) {
  @func_9647() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_2099() -> (Tensor[(14, 12, 11), int32],) {
  @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_4215() -> (Tensor[(26, 4), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  @func_4213() /* ty=(Tensor[(26, 4), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */
}

def @func_1051(%var_1049: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  @func_1048(%var_1049) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */
}

def @func_1284(%var_1266: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, ?, 5), bool],) {
  %379 = cast(%var_1266, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %380 = log(%379) /* ty=Tensor[(7, 1, 5), float32] */;
  %381 = cast(%var_1266, dtype="uint16") /* ty=Tensor[(7, 1, 5), uint16] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="uint16") /* ty=Tensor[(7, 1, 5), uint16] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %385 = minimum(%383, %384) /* ty=Tensor[(7, ?, 5), uint16] */;
  %386 = cast(%385, dtype="bool") /* ty=Tensor[(7, ?, 5), bool] */;
  %387 = shape_of(%var_1266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_1266, dtype="bool") /* ty=Tensor[(7, 1, 5), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = greater(%388, %389) /* ty=Tensor[(7, ?, 5), bool] */;
  (%390,)
}

def @func_3042() -> Tensor[(14, 12, 11), float64] {
  %392 = fn () -> Tensor[(14, 12, 11), float64] {
    %391 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %391.0
  };
  %392() /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_4505(%var_4503: Tensor[(26, 4), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(26, 4), float32]) {
  @func_4502(%var_4503) /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(26, 4), float32]) */
}

def @func_4422() -> Tensor[(14, 12, 11), uint16] {
  %394 = fn () -> Tensor[(14, 12, 11), uint16] {
    %393 = @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */;
    %393.2
  };
  %394() /* ty=Tensor[(14, 12, 11), uint16] */
}

def @func_1148() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  %395 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %396 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %397 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %398 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  %399 = %395.4;
  %400 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %401 = %396.2;
  %402 = %397.5;
  (%398, %399, %400, %401, %402)
}

def @func_6561() -> Tensor[(14, 12, 11), int32] {
  @func_6559() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_7982() -> Tensor[(14, 12, 11), float32] {
  @func_3778() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_5381() -> (Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) {
  @func_5379() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) */
}

def @func_8013(%var_8012: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) {
  %410 = fn (%var_8006: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) {
    %403 = @func_4075() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) */;
    %404 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %405 = cast(%var_8006, dtype="int32") /* ty=Tensor[(125), int32] */;
    %406 = reshape(%404, newshape=[]) /* ty=int32 */;
    %407 = reshape(%405, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int32] */;
    %408 = %403.0;
    %409 = @func_1240(%406, %407) /* ty=Tensor[(5, 5, 5), int32] */;
    (%408, %409, -10 /* ty=int32 */, %var_8006)
  };
  %410(%var_8012) /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32]) */
}

def @func_5522(%var_5521: Tensor[(7, 15, 5), uint16]) -> (Tensor[(7, 15, 5), uint16],) {
  %416 = fn (%var_5489: Tensor[(7, 15, 5), uint16]) -> (Tensor[(7, 15, 5), uint16],) {
    %411 = cast(%var_5489, dtype="uint16") /* ty=Tensor[(7, 15, 5), uint16] */;
    %412 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 5), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 5), uint16] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %415 = right_shift(%413, %414) /* ty=Tensor[(7, 15, 5), uint16] */;
    (%415,)
  };
  %416(%var_5521) /* ty=(Tensor[(7, 15, 5), uint16],) */
}

def @func_6046() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
  %433 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
    %417 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
    %418 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %419 = reshape(%418, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %420 = @func_4749(%419) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
    %421 = @func_5141() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) */;
    %422 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %423 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
    %424 = @func_4271() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %425 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
    %426 = %417.1;
    %427 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
    %428 = %420.2;
    %429 = %421.1;
    %430 = %422.0;
    %431 = %423.0;
    %432 = %424.0;
    (%425, %426, %427, %428, meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, %429, %430, %431, %432)
  };
  %433() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) */
}

def @func_8706() -> (Tensor[(14, 12, 11), uint16], Tensor[(1848), float32]) {
  @func_8704() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(1848), float32]) */
}

def @func_8503() -> (Tensor[(14, 12, 11), int32],) {
  %436 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %434 = @func_4797() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %435 = %434.0;
    (%435,)
  };
  %436() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_580() -> (Tensor[(14, 12, 11), float32],) {
  %440 = fn () -> (Tensor[(14, 12, 11), float32],) {
    %437 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    %438 = cast(%437, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %439 = acosh(%438) /* ty=Tensor[(14, 12, 11), float32] */;
    (%439,)
  };
  %440() /* ty=(Tensor[(14, 12, 11), float32],) */
}

def @func_7774() -> (Tensor[(26, 4), int64],) {
  %441 = @func_5912() /* ty=(Tensor[(26, 4), int64], Tensor[(26, 4), bool]) */;
  %442 = %441.0;
  (%442,)
}

def @func_3102(%var_3055: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  %443 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %444 = %443.0;
  %445 = cast(%var_3055, dtype="int8") /* ty=Tensor[(14, 12, 11), int8] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="int8") /* ty=Tensor[(14, 12, 11), int8] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %449 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %450 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %451 = minimum(%447, %448) /* ty=Tensor[(14, 12, 11), int8] */;
  %452 = %449.0;
  %453 = %450.0;
  (%451, %452, %453)
}

def @func_7509(%var_7416: Tensor[(8, 20), float32], %var_7443: Tensor[(8, 20), float64], %var_7453: Tensor[(8, 20), float64]) -> (Tensor[(14, 16, 14), float32], Tensor[(8, 20), float32], Tensor[(154), bool], Tensor[(1, 2464), bool], Tensor[(8, 20), bool], Tensor[(14, 12, 11), int32], Tensor[(8, 20), int16], Tensor[(14, 12, 11), int32], Tensor[(8, 20), uint32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(8, 20), bool], Tensor[(8, 20), uint16]) {
  %454 = cast(meta[relay.Constant][28] /* ty=Tensor[(154), bool] */, dtype="bool") /* ty=Tensor[(154), bool] */;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 2464), bool] */, dtype="bool") /* ty=Tensor[(1, 2464), bool] */;
  %456 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 20), float32] */, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
  %457 = reshape(%454, newshape=[14, 1, 11]) /* ty=Tensor[(14, 1, 11), bool] */;
  %458 = reshape(%455, newshape=[14, 16, 11]) /* ty=Tensor[(14, 16, 11), bool] */;
  %459 = reshape(%456, newshape=[8, 20]) /* ty=Tensor[(8, 20), float32] */;
  %460 = @func_2155(%457, %458, %459) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) */;
  %461 = cast(%var_7416, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %462 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(8, 20), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %463 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 20), float32] */, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %465 = cast(%var_7416, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %466 = acosh(%465) /* ty=Tensor[(8, 20), float64] */;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %468 = cos(%467) /* ty=Tensor[(8, 20), float64] */;
  %469 = cast(%var_7443, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %471 = cast(%468, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %473 = cast(%var_7453, dtype="uint32") /* ty=Tensor[(8, 20), uint32] */;
  %474 = shape_of(%466, dtype="int32") /* ty=Tensor[(2), int32] */;
  %475 = cast(%466, dtype="uint32") /* ty=Tensor[(8, 20), uint32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %477 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %478 = cast(%466, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %479 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(%468, dtype="bool") /* ty=Tensor[(8, 20), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %482 = cast(%var_7416, dtype="uint16") /* ty=Tensor[(8, 20), uint16] */;
  %483 = shape_of(%466, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(%466, dtype="uint16") /* ty=Tensor[(8, 20), uint16] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %486 = @func_3157() /* ty=Tensor[(14, 16, 14), float32] */;
  %487 = %460.1;
  %488 = greater(%463, %464) /* ty=Tensor[(8, 20), bool] */;
  %489 = @func_2482() /* ty=Tensor[(14, 12, 11), int32] */;
  %490 = bitwise_xor(%471, %472) /* ty=Tensor[(8, 20), int16] */;
  %491 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
  %492 = maximum(%475, %476) /* ty=Tensor[(8, 20), uint32] */;
  %493 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %494 = %477.1;
  %495 = less(%480, %481) /* ty=Tensor[(8, 20), bool] */;
  %496 = left_shift(%484, %485) /* ty=Tensor[(8, 20), uint16] */;
  (%486, %487, meta[relay.Constant][28] /* ty=Tensor[(154), bool] */, meta[relay.Constant][29] /* ty=Tensor[(1, 2464), bool] */, %488, %489, %490, %491, %492, %493, %494, %495, %496)
}

def @func_6718(%var_6716: Tensor[(4, 13, 2), bool]) -> Tensor[(4, 13, 2), bool] {
  @func_6715(%var_6716) /* ty=Tensor[(4, 13, 2), bool] */
}

def @func_7627() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  @func_7625() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */
}

def @func_4502(%var_4493: Tensor[(26, 4), uint64]) -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(26, 4), float32]) {
  %497 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %498 = cast(%var_4493, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %499 = reshape(%498, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %500 = @func_1536(%499) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %501 = cast(%var_4493, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %502 = %497.0;
  %503 = %500.0;
  %504 = cosh(%501) /* ty=Tensor[(26, 4), float32] */;
  (%502, %503, %504)
}

def @func_8160() -> Tensor[(14, 12, 11), int32] {
  %506 = fn () -> Tensor[(14, 12, 11), int32] {
    %505 = @func_7809() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
    %505.1
  };
  %506() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_1150() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  @func_1148() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */
}

def @func_241() -> (Tensor[(14, 12, 11), uint16],) {
  %509 = fn () -> (Tensor[(14, 12, 11), uint16],) {
    %507 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
    %508 = %507.2;
    (%508,)
  };
  %509() /* ty=(Tensor[(14, 12, 11), uint16],) */
}

def @func_5261(%var_5259: Tensor[(16, 5, 8), float32], %var_5260: Tensor[(16, 5, 8), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) {
  @func_5257(%var_5259, %var_5260) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) */
}

def @func_6784() -> Tensor[(14, 12, 11), int32] {
  %510 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %510.0
}

def @func_5257(%var_5226: Tensor[(16, 5, 8), float32], %var_5245: Tensor[(16, 5, 8), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) {
  %511 = @func_3631() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
  %512 = cast(%var_5226, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %513 = atan(%512) /* ty=Tensor[(16, 5, 8), float32] */;
  %514 = cast(%var_5245, dtype="uint32") /* ty=Tensor[(16, 5, 8), uint32] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="uint32") /* ty=Tensor[(16, 5, 8), uint32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %518 = cast(%513, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %519 = %511.3;
  %520 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %521 = maximum(%516, %517) /* ty=Tensor[(16, 5, 8), uint32] */;
  %522 = cosh(%518) /* ty=Tensor[(16, 5, 8), float64] */;
  (%519, %520, %521, %522)
}

def @func_3197() -> (Tensor[(14, 12, 11), float32],) {
  %523 = @func_1583() /* ty=Tensor[(14, 12, 11), float32] */;
  (%523,)
}

def @func_3856(%var_3854: float64, %var_3855: Tensor[(11, 2, 16), float64]) -> (Tensor[(11, 2, 16), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32]) {
  @func_3852(%var_3854, %var_3855) /* ty=(Tensor[(11, 2, 16), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32]) */
}

def @func_3884() -> (Tensor[(1, 5, 12), float32],) {
  @func_3882() /* ty=(Tensor[(1, 5, 12), float32],) */
}

def @func_180() -> Tensor[(14, 12, 11), uint16] {
  %524 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %525 = %524.0;
  %526 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="uint16") /* ty=Tensor[(14, 12, 11), uint16] */;
  %529 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%525, dtype="uint16") /* ty=Tensor[(14, 12, 11), uint16] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%530, %531) /* ty=Tensor[(14, 12, 11), uint16] */
}

def @func_3778() -> Tensor[(14, 12, 11), float32] {
  %532 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %532.0
}

def @func_3326() -> (Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) {
  %539 = fn () -> (Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) {
    %533 = cast(meta[relay.Constant][31] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %534 = reshape(%533, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
    %535 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %536 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
    %537 = @func_412(%534) /* ty=Tensor[(4, 13, 2), bool] */;
    %538 = %535.0;
    (%536, %537, meta[relay.Constant][31] /* ty=Tensor[(104), uint64] */, %538)
  };
  %539() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) */
}

def @func_2050() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %545 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
    %540 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %541 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %542 = %540.0;
    %543 = %541.0;
    %544 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
    (%542, %543, %544)
  };
  %545() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */
}

def @func_9036(%var_9034: Tensor[(360, 2), uint32]) -> (Tensor[(4, 7, 14), uint8], Tensor[(16, 3, 15), bool], uint32, Tensor[(360, 2), uint32]) {
  @func_9033(%var_9034) /* ty=(Tensor[(4, 7, 14), uint8], Tensor[(16, 3, 15), bool], uint32, Tensor[(360, 2), uint32]) */
}

def @func_2351(%var_2348: Tensor[(12, 11, 13), uint16], %var_2349: Tensor[(12, 11, 13), uint16], %var_2350: Tensor[(104), uint64]) -> (Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) {
  %582 = fn (%var_2255: Tensor[(12, 11, 13), uint16], %var_2256: Tensor[(12, 11, 13), uint16], %var_2261: Tensor[(104), uint64]) -> (Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) {
    %546 = cast(%var_2261, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %547 = reshape(%546, newshape=[104]) /* ty=Tensor[(104), uint64] */;
    %548 = @func_1536(%547) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
    %549 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %550 = cast(%var_2261, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %551 = reshape(%550, newshape=[104]) /* ty=Tensor[(104), uint64] */;
    %552 = @func_1048(%551) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
    %553 = cast(%var_2256, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %554 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
    %555 = cast(%var_2255, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %557 = greater_equal(%555, %556) /* ty=Tensor[(12, 11, 13), bool] */;
    %558 = cast(%557, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %559 = shape_of(%var_2256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%var_2256, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %562 = logical_or(%560, %561) /* ty=Tensor[(12, 11, 13), bool] */;
    %563 = cast(%557, dtype="uint8") /* ty=Tensor[(12, 11, 13), uint8] */;
    %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%562, dtype="uint8") /* ty=Tensor[(12, 11, 13), uint8] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %567 = bitwise_xor(%565, %566) /* ty=Tensor[(12, 11, 13), uint8] */;
    %568 = cast(%567, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
    %569 = atan(%568) /* ty=Tensor[(12, 11, 13), float32] */;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(12, 11, 13), float64] */;
    %571 = asin(%570) /* ty=Tensor[(12, 11, 13), float64] */;
    %572 = cast(%562, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %576 = %548.1;
    %577 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
    %578 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
    %579 = %549.0;
    %580 = %552.0;
    %581 = equal(%574, %575) /* ty=Tensor[(12, 11, 13), bool] */;
    (%576, %var_2261, %577, %578, %579, %580, %581)
  };
  %582(%var_2348, %var_2349, %var_2350) /* ty=(Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32], Tensor[(12, 11, 13), bool]) */
}

def @func_6827() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %583 = @func_6078() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %584 = @func_5379() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) */;
  %585 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  %586 = %583.0;
  %587 = %584.0;
  (%585, %586, %587)
}

def @func_1980() -> (Tensor[(14, 12, 11), int32],) {
  %590 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %588 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %589 = %588.1;
    (%589,)
  };
  %590() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_9410() -> Tensor[(14, 12, 11), int32] {
  %591 = fn () -> Tensor[(14, 12, 11), int32] {
    @func_8189() /* ty=Tensor[(14, 12, 11), int32] */
  };
  %591() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_943() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) {
  %602 = fn () -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) {
    %592 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
    %593 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %594 = cast(meta[relay.Constant][32] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %595 = reshape(%594, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
    %596 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %597 = %592.0;
    %598 = %593.0;
    %599 = @func_412(%595) /* ty=Tensor[(4, 13, 2), bool] */;
    %600 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
    %601 = %596.0;
    (%597, %598, %599, meta[relay.Constant][32] /* ty=Tensor[(104), uint64] */, %600, %601)
  };
  %602() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */
}

def @func_3631() -> (Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104, 1), float64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %603 = @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %604 = cast(meta[relay.Constant][33] /* ty=Tensor[(104, 1), uint64] */, dtype="uint64") /* ty=Tensor[(104, 1), uint64] */;
  %605 = reshape(%604, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %606 = @func_1048(%605) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %607 = cast(meta[relay.Constant][33] /* ty=Tensor[(104, 1), uint64] */, dtype="float64") /* ty=Tensor[(104, 1), float64] */;
  %608 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %609 = %603.0;
  %610 = %606.1;
  %611 = atan(%607) /* ty=Tensor[(104, 1), float64] */;
  %612 = %608.1;
  %613 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%609, %610, %611, %612, %613)
}

def @func_5854() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %619 = fn () -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
    %614 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
    %615 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
    %616 = %614.1;
    %617 = %615.1;
    %618 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
    (%616, %617, %618)
  };
  %619() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_6715(%var_6708: Tensor[(4, 13, 2), bool]) -> Tensor[(4, 13, 2), bool] {
  %620 = @func_3325() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), int32]) */;
  %621 = %620.1;
  %622 = cast(%var_6708, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%624, %625) /* ty=Tensor[(4, 13, 2), bool] */
}

def @func_3199() -> (Tensor[(14, 12, 11), float32],) {
  @func_3197() /* ty=(Tensor[(14, 12, 11), float32],) */
}

def @func_6369(%var_6355: Tensor[(2, 6, 1), float64]) -> (Tensor[(2, 6, ?), bool], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %626 = cast(%var_6355, dtype="float64") /* ty=Tensor[(2, 6, 1), float64] */;
  %627 = sigmoid(%626) /* ty=Tensor[(2, 6, 1), float64] */;
  %628 = cast(%627, dtype="bool") /* ty=Tensor[(2, 6, 1), bool] */;
  %629 = shape_of(%var_6355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_6355, dtype="bool") /* ty=Tensor[(2, 6, 1), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %633 = @func_1930() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %634 = not_equal(%630, %631) /* ty=Tensor[(2, 6, ?), bool] */;
  %635 = %632.1;
  %636 = %633.0;
  (%634, %635, %636)
}

def @func_6863() -> Tensor[(14, 12, 11), int32] {
  %637 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
  %637.0
}

def @func_3157() -> Tensor[(14, 16, 14), float32] {
  %638 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  asin(%638) /* ty=Tensor[(14, 16, 14), float32] */
}

def @func_1287(%var_1285: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, ?, 5), bool],) {
  @func_1284(%var_1285) /* ty=(Tensor[(7, ?, 5), bool],) */
}

def @func_156() -> (Tensor[(14, 12, 11), int32],) {
  %639 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %640 = tan(%639) /* ty=Tensor[(14, 12, 11), float64] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %642 = sinh(%641) /* ty=Tensor[(14, 12, 11), float32] */;
  %643 = cast(%640, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %647 = logical_xor(%645, %646) /* ty=Tensor[(14, 12, 11), int32] */;
  (%647,)
}

def @func_1048(%var_1040: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %648 = cast(%var_1040, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %649 = reshape(%648, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
  %650 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %651 = @func_412(%649) /* ty=Tensor[(4, 13, 2), bool] */;
  (%650, %651, %var_1040)
}

def @func_7875() -> (Tensor[(104), float64],) {
  %656 = fn () -> (Tensor[(104), float64],) {
    %652 = @func_4075() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) */;
    %653 = %652.3;
    %654 = cast(%653, dtype="float64") /* ty=Tensor[(104), float64] */;
    %655 = sqrt(%654) /* ty=Tensor[(104), float64] */;
    (%655,)
  };
  %656() /* ty=(Tensor[(104), float64],) */
}

def @func_4933(%var_4924: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(168), float64]) {
  %657 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %658 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
  %659 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %660 = @func_4797() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %661 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %662 = cast(%var_4924, dtype="float64") /* ty=Tensor[(168), float64] */;
  %663 = reshape(%662, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %664 = @func_4749(%663) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
  %665 = %657.1;
  %666 = %658.4;
  %667 = %659.0;
  %668 = %660.0;
  %669 = %661.0;
  %670 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
  %671 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %672 = %664.2;
  (%665, %666, %667, %668, %669, %670, %671, %672, %var_4924)
}

def @func_438() -> Tensor[(14, 12, 11), int32] {
  %674 = fn () -> Tensor[(14, 12, 11), int32] {
    %673 = @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */;
    %673.1
  };
  %674() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_5392(%var_5390: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) {
  @func_5389(%var_5390) /* ty=(Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) */
}

def @func_7625() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %675 = @func_5769() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %676 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %677 = %675.0;
  %678 = %676.0;
  (%677, %678)
}

def @func_414(%var_413: Tensor[(4, 13, 2), uint64]) -> Tensor[(4, 13, 2), bool] {
  %683 = fn (%var_406: Tensor[(4, 13, 2), uint64]) -> Tensor[(4, 13, 2), bool] {
    %679 = cast(%var_406, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
    %680 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 2), uint64] */, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%681, %682) /* ty=Tensor[(4, 13, 2), bool] */
  };
  %683(%var_413) /* ty=Tensor[(4, 13, 2), bool] */
}

def @func_6940(%var_6938: Tensor[(26, 4), float32]) -> (Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) {
  @func_6937(%var_6938) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) */
}

def @func_599() -> Tensor[(14, 12, 11), int32] {
  %684 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %684.0
}

def @func_9086() -> (Tensor[(14, 12, 11), uint16], Tensor[(104), float32], Tensor[(26, 4), int8]) {
  @func_9084() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(104), float32], Tensor[(26, 4), int8]) */
}

def @func_3774(%var_3772: Tensor[(1716), uint16], %var_3773: Tensor[(125), int32]) -> (Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) {
  @func_3770(%var_3772, %var_3773) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(1716), uint16], Tensor[(104), uint64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(5, 5, 5), int32], int32, Tensor[(125), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16]) */
}

def @func_5573() -> Tensor[(14, 12, 11), int32] {
  %685 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %685.0
}

def @func_3780() -> Tensor[(14, 12, 11), float32] {
  @func_3778() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_5722(%var_5720: Tensor[(154), bool], %var_5721: Tensor[(160), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(14, 16, 11), float64], Tensor[(154), bool], Tensor[(2464), bool], Tensor[(160), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
  @func_5718(%var_5720, %var_5721) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(14, 16, 11), float64], Tensor[(154), bool], Tensor[(2464), bool], Tensor[(160), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) */
}

def @func_1196() -> (Tensor[(14, 12, 11), float32],) {
  @func_1194() /* ty=(Tensor[(14, 12, 11), float32],) */
}

def @func_2194() -> (Tensor[(14, 12, 11), float64],) {
  %689 = fn () -> (Tensor[(14, 12, 11), float64],) {
    %686 = @func_1445() /* ty=Tensor[(14, 12, 11), int32] */;
    %687 = cast(%686, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %688 = log10(%687) /* ty=Tensor[(14, 12, 11), float64] */;
    (%688,)
  };
  %689() /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_7945() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(640), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %710 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(640), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
    %690 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
    %691 = %690.0;
    %692 = cast(%691, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %693 = reshape(%692, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
    %694 = @func_3102(%693) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
    %695 = @func_6333() /* ty=(Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) */;
    %696 = @func_5049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) */;
    %697 = cast(meta[relay.Constant][37] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %698 = cast(meta[relay.Constant][37] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %699 = reshape(%697, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float32] */;
    %700 = reshape(%698, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), float32] */;
    %701 = @func_5257(%699, %700) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(16, 5, 8), uint32], Tensor[(16, 5, 8), float64]) */;
    %702 = @func_2049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
    %703 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %704 = %694.2;
    %705 = %695.1;
    %706 = %696.1;
    %707 = %701.1;
    %708 = %702.0;
    %709 = %703.0;
    (%691, %704, %705, %706, %707, meta[relay.Constant][37] /* ty=Tensor[(640), float32] */, %708, %709)
  };
  %710() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), int32], Tensor[(640), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_5317() -> (Tensor[(14, 12, 11), int32],) {
  %711 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %712 = %711.0;
  (%712,)
}

def @func_9553() -> Tensor[(14, 12, 11), uint16] {
  @func_9551() /* ty=Tensor[(14, 12, 11), uint16] */
}

def @func_8830() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 60), float32]) {
  %713 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %714 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 60), float32] */, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
  %715 = reshape(%714, newshape=[4, 5, 12]) /* ty=Tensor[(4, 5, 12), float32] */;
  %716 = @func_7126(%715) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) */;
  %717 = %713.0;
  %718 = %716.0;
  (%717, %718, meta[relay.Constant][38] /* ty=Tensor[(4, 60), float32] */)
}

def @func_1583() -> Tensor[(14, 12, 11), float32] {
  %719 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  asinh(%720) /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_1214() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) {
  @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */
}

def @func_761() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %724 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
    %721 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
    %722 = %721.0;
    %723 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
    (%722, %723)
  };
  %724() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */
}

def @func_2392() -> (Tensor[(14, 12, 11), int32],) {
  %725 = @func_2363() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %726 = %725.0;
  (%726,)
}

def @func_1743() -> Tensor[(14, 12, 11), int32] {
  %727 = fn () -> Tensor[(14, 12, 11), int32] {
    @func_437() /* ty=Tensor[(14, 12, 11), int32] */
  };
  %727() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4077() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) {
  @func_4075() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), bool], Tensor[(104), uint64], Tensor[(104), uint64]) */
}

def @func_6372(%var_6370: Tensor[(2, 6, 1), float64]) -> (Tensor[(2, 6, ?), bool], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  @func_6369(%var_6370) /* ty=(Tensor[(2, 6, ?), bool], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_2159(%var_2156: Tensor[(14, 1, 11), bool], %var_2157: Tensor[(14, 16, 11), bool], %var_2158: Tensor[(8, 20), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) {
  %739 = fn (%var_2121: Tensor[(14, 1, 11), bool], %var_2122: Tensor[(14, 16, 11), bool], %var_2130: Tensor[(8, 20), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) {
    %728 = cast(%var_2130, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
    %729 = reshape(%728, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float32] */;
    %730 = @func_1488(%729) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) */;
    %731 = cast(%var_2121, dtype="bool") /* ty=Tensor[(14, 1, 11), bool] */;
    %732 = cast(%var_2122, dtype="bool") /* ty=Tensor[(14, 16, 11), bool] */;
    %733 = logical_and(%731, %732) /* ty=Tensor[(14, 16, 11), bool] */;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(14, 16, 11), float64] */;
    %735 = exp(%734) /* ty=Tensor[(14, 16, 11), float64] */;
    %736 = cast(%735, dtype="float64") /* ty=Tensor[(14, 16, 11), float64] */;
    %737 = %730.0;
    %738 = cos(%736) /* ty=Tensor[(14, 16, 11), float64] */;
    (%737, %var_2130, %738)
  };
  %739(%var_2156, %var_2157, %var_2158) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) */
}

def @func_4834(%var_4833: Tensor[(9, 11, 15), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(9, 11, 15), float64]) {
  %746 = fn (%var_4815: Tensor[(9, 11, 15), float64]) -> (Tensor[(14, 12, 11), int32], Tensor[(9, 11, 15), float64]) {
    %740 = @func_2536() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
    %741 = cast(%var_4815, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
    %742 = atanh(%741) /* ty=Tensor[(9, 11, 15), float64] */;
    %743 = cast(%742, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
    %744 = %740.1;
    %745 = asin(%743) /* ty=Tensor[(9, 11, 15), float64] */;
    (%744, %745)
  };
  %746(%var_4833) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(9, 11, 15), float64]) */
}

def @func_1538(%var_1537: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %751 = fn (%var_1531: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
    %747 = cast(%var_1531, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %748 = reshape(%747, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
    %749 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
    %750 = @func_412(%748) /* ty=Tensor[(4, 13, 2), bool] */;
    (%749, %750, %var_1531)
  };
  %751(%var_1537) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */
}

def @func_3989() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
  %760 = fn () -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
    %752 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %753 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
    %754 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %755 = %752.0;
    %756 = %753.0;
    %757 = %754.0;
    %758 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
    %759 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    (%755, %756, %757, %758, %759)
  };
  %760() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */
}

def @func_4799() -> (Tensor[(14, 12, 11), int32],) {
  @func_4797() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_2537() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %765 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
    %761 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
    %762 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %763 = %761.0;
    %764 = %762.0;
    (%763, %764)
  };
  %765() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */
}

def @func_5747(%var_5738: Tensor[(11, 15, 11), float32]) -> (Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) {
  %766 = cast(%var_5738, dtype="float32") /* ty=Tensor[(11, 15, 11), float32] */;
  %767 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %768 = acos(%766) /* ty=Tensor[(11, 15, 11), float32] */;
  %769 = %767.1;
  (%768, %769)
}

def @func_5141() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) {
  %770 = @func_2466() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %771 = %770.0;
  %772 = @func_180() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%771, %772)
}

def @func_6334() -> (Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) {
  %778 = fn () -> (Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) {
    %773 = @func_5912() /* ty=(Tensor[(26, 4), int64], Tensor[(26, 4), bool]) */;
    %774 = %773.1;
    %775 = cast(%774, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
    %776 = cos(%775) /* ty=Tensor[(26, 4), float32] */;
    %777 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
    (%776, %777)
  };
  %778() /* ty=(Tensor[(26, 4), float32], Tensor[(14, 12, 11), float32]) */
}

def @func_5718(%var_5700: Tensor[(154), bool], %var_5702: Tensor[(160), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32], Tensor[(14, 16, 11), float64], Tensor[(154), bool], Tensor[(2464), bool], Tensor[(160), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) {
  %779 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %780 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %781 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
  %782 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %783 = cast(%var_5700, dtype="bool") /* ty=Tensor[(154), bool] */;
  %784 = cast(meta[relay.Constant][39] /* ty=Tensor[(2464), bool] */, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %785 = cast(%var_5702, dtype="float32") /* ty=Tensor[(160), float32] */;
  %786 = reshape(%783, newshape=[14, 1, 11]) /* ty=Tensor[(14, 1, 11), bool] */;
  %787 = reshape(%784, newshape=[14, 16, 11]) /* ty=Tensor[(14, 16, 11), bool] */;
  %788 = reshape(%785, newshape=[8, 20]) /* ty=Tensor[(8, 20), float32] */;
  %789 = @func_2155(%786, %787, %788) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(8, 20), float32], Tensor[(14, 16, 11), float64]) */;
  %790 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %792 = reshape(%791, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %793 = @func_3102(%792) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %794 = %779.1;
  %795 = %780.0;
  %796 = %781.1;
  %797 = %782.0;
  %798 = %789.2;
  %799 = %793.1;
  %800 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  (%794, %795, %790, %796, %797, %798, %var_5700, meta[relay.Constant][39] /* ty=Tensor[(2464), bool] */, %var_5702, %799, %800)
}

def @func_2482() -> Tensor[(14, 12, 11), int32] {
  %801 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %801.0
}

def @func_4115() -> Tensor[(14, 12, 11), int32] {
  @func_4113() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_4250() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  @func_4248() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */
}

def @func_5143() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) {
  @func_5141() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), uint16]) */
}

def @func_2742(%var_2725: Tensor[(104), uint64], %var_2727: Tensor[(14, 12, 11), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  %802 = @func_2690() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %803 = cast(%var_2725, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %804 = reshape(%803, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %805 = @func_1048(%804) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %806 = %805.0;
  %807 = cast(%var_2727, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="int32") /* ty=Tensor[(14, 12, 11), int32] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %811 = @func_1979() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %812 = %802.1;
  %813 = left_shift(%809, %810) /* ty=Tensor[(14, 12, 11), int32] */;
  %814 = %811.0;
  (%812, %var_2725, %813, %814)
}

def @func_6786() -> Tensor[(14, 12, 11), int32] {
  @func_6784() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_5912() -> (Tensor[(26, 4), int64], Tensor[(26, 4), bool]) {
  %815 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %816 = %815.0;
  %817 = cast(meta[relay.Constant][40] /* ty=Tensor[(26, 4), uint64] */, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(2), int32] */;
  %819 = cast(%816, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %821 = cast(meta[relay.Constant][40] /* ty=Tensor[(26, 4), uint64] */, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %822 = shape_of(%816, dtype="int32") /* ty=Tensor[(2), int32] */;
  %823 = cast(%816, dtype="int64") /* ty=Tensor[(26, 4), int64] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %825 = maximum(%823, %824) /* ty=Tensor[(26, 4), int64] */;
  %826 = cast(%825, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %827 = shape_of(%816, dtype="int32") /* ty=Tensor[(2), int32] */;
  %828 = cast(%816, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %830 = subtract(%819, %820) /* ty=Tensor[(26, 4), int64] */;
  %831 = logical_or(%828, %829) /* ty=Tensor[(26, 4), bool] */;
  (%830, %831)
}

def @func_6954() -> Tensor[(14, 12, 11), bool] {
  %833 = fn () -> Tensor[(14, 12, 11), bool] {
    %832 = @func_4995() /* ty=(Tensor[(14, 16, 14), float32], Tensor[(104), uint64], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */;
    %832.2
  };
  %833() /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_7027() -> Tensor[(14, 12, 11), int32] {
  %834 = fn () -> Tensor[(14, 12, 11), int32] {
    @func_6784() /* ty=Tensor[(14, 12, 11), int32] */
  };
  %834() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_5379() -> (Tensor[(14, 12, 11), int32], Tensor[(1, 168), float64], Tensor[(7, 12, 2), float32]) {
  %835 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 168), float64] */, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %836 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 168), float64] */, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %837 = reshape(%835, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %838 = reshape(%836, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %839 = @func_1025(%837, %838) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  %842 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
  %843 = erf(%841) /* ty=Tensor[(7, 12, 2), float32] */;
  (%842, meta[relay.Constant][41] /* ty=Tensor[(1, 168), float64] */, %843)
}

def @func_4636() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  @func_4634() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_4751(%var_4750: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
  %857 = fn (%var_4741: Tensor[(168), float64]) -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) {
    %844 = @func_4634() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
    %845 = %844.0;
    %846 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
    %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%845, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %850 = cast(%var_4741, dtype="float64") /* ty=Tensor[(168), float64] */;
    %851 = cast(%var_4741, dtype="float64") /* ty=Tensor[(168), float64] */;
    %852 = reshape(%850, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
    %853 = reshape(%851, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
    %854 = @func_1025(%852, %853) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
    %855 = greater_equal(%848, %849) /* ty=Tensor[(14, 12, 11), bool] */;
    %856 = %854.1;
    (%855, %856, %var_4741)
  };
  %857(%var_4750) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), bool], Tensor[(168), float64]) */
}

def @func_1708(%var_1690: Tensor[(14, 12, 11), float64]) -> Tensor[(14, 12, 11), bool] {
  %858 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %859 = %858.0;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %861 = erf(%860) /* ty=Tensor[(14, 12, 11), float64] */;
  %862 = cast(%var_1690, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%864, %865) /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_4889() -> (Tensor[(14, 12, 11), int32],) {
  %866 = @func_999() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %867 = %866.0;
  (%867,)
}

def @func_8240(%var_8238: uint32, %var_8239: Tensor[(16, 3, 15), uint32]) -> Tensor[(16, 3, 15), bool] {
  %870 = fn (%var_8229: uint32, %var_8230: Tensor[(16, 3, 15), uint32]) -> Tensor[(16, 3, 15), bool] {
    %868 = cast(%var_8229, dtype="bool") /* ty=bool */;
    %869 = cast(%var_8230, dtype="bool") /* ty=Tensor[(16, 3, 15), bool] */;
    not_equal(%868, %869) /* ty=Tensor[(16, 3, 15), bool] */
  };
  %870(%var_8238, %var_8239) /* ty=Tensor[(16, 3, 15), bool] */
}

def @func_2691() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %875 = fn () -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
    %871 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %872 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %873 = %871.0;
    %874 = %872.0;
    (%873, %874)
  };
  %875() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */
}

def @func_5296() -> (Tensor[(14, 12, 11), int32],) {
  %878 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %876 = @func_4634() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */;
    %877 = %876.0;
    (%877,)
  };
  %878() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_7057() -> Tensor[(14, 12, 11), bool] {
  %879 = @func_2894() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) */;
  %879.2
}

def @func_5049() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) {
  %880 = @func_1544() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %881 = %880.0;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %883 = reshape(%882, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %884 = @func_3102(%883) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %885 = %884.0;
  (%881, %885)
}

def @func_2746(%var_2744: Tensor[(104), uint64], %var_2745: Tensor[(14, 12, 11), int32]) -> (Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) {
  @func_2742(%var_2744, %var_2745) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32]) */
}

def @func_158() -> (Tensor[(14, 12, 11), int32],) {
  @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_4113() -> Tensor[(14, 12, 11), int32] {
  %886 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %886.0
}

def @func_9797(%var_9793: Tensor[(13, 10, 16), float32]) -> (Tensor[(13, 10, 16), float32], Tensor[(14, 12, 11), bool], Tensor[(13, 10, 16), int32]) {
  %887 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 16), float32] */;
  %888 = cast(%var_9793, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %889 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(13, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %892 = sin(%887) /* ty=Tensor[(13, 10, 16), float32] */;
  %893 = @func_6953() /* ty=Tensor[(14, 12, 11), bool] */;
  %894 = bitwise_xor(%890, %891) /* ty=Tensor[(13, 10, 16), int32] */;
  (%892, %893, %894)
}

def @func_1029(%var_1027: Tensor[(7, 12, 2), float64], %var_1028: Tensor[(7, 12, 2), float64]) -> (Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  @func_1025(%var_1027, %var_1028) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(14, 12, 11), bool], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */
}

def @func_5750(%var_5748: Tensor[(11, 15, 11), float32]) -> (Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) {
  @func_5747(%var_5748) /* ty=(Tensor[(11, 15, 11), float32], Tensor[(14, 12, 11), float32]) */
}

def @func_6829() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  @func_6827() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */
}

def @func_9551() -> Tensor[(14, 12, 11), uint16] {
  %895 = @func_6045() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), uint16], Tensor[(168), float64], Tensor[(168), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64]) */;
  %895.1
}

def @func_2364() -> (Tensor[(14, 12, 11), int32],) {
  %897 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %896 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
    (%896,)
  };
  %897() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_1490(%var_1489: Tensor[(4, 5, 8), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) {
  %907 = fn (%var_1450: Tensor[(4, 5, 8), float32]) -> (Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) {
    %898 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
    %899 = cast(%var_1450, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
    %900 = sigmoid(%899) /* ty=Tensor[(4, 5, 8), float32] */;
    %901 = cast(%var_1450, dtype="uint16") /* ty=Tensor[(4, 5, 8), uint16] */;
    %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(%900, dtype="uint16") /* ty=Tensor[(4, 5, 8), uint16] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %905 = %898.0;
    %906 = bitwise_and(%903, %904) /* ty=Tensor[(4, 5, 8), uint16] */;
    (%905, %906)
  };
  %907(%var_1489) /* ty=(Tensor[(14, 12, 11), bool], Tensor[(4, 5, 8), uint16]) */
}

def @func_1194() -> (Tensor[(14, 12, 11), float32],) {
  %908 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %909 = %908.0;
  (%909,)
}

def @func_3105(%var_3103: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  @func_3102(%var_3103) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */
}

def @func_2394() -> (Tensor[(14, 12, 11), int32],) {
  @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_2097() -> (Tensor[(14, 12, 11), int32],) {
  %910 = @func_1742() /* ty=Tensor[(14, 12, 11), int32] */;
  (%910,)
}

def @func_6878() -> Tensor[(14, 12, 11), float64] {
  %911 = fn () -> Tensor[(14, 12, 11), float64] {
    @func_3041() /* ty=Tensor[(14, 12, 11), float64] */
  };
  %911() /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_7059() -> Tensor[(14, 12, 11), bool] {
  @func_7057() /* ty=Tensor[(14, 12, 11), bool] */
}

def @func_7217() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
  @func_7215() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */
}

def @func_7514(%var_7511: Tensor[(8, 20), float32], %var_7512: Tensor[(8, 20), float64], %var_7513: Tensor[(8, 20), float64]) -> (Tensor[(14, 16, 14), float32], Tensor[(8, 20), float32], Tensor[(154), bool], Tensor[(1, 2464), bool], Tensor[(8, 20), bool], Tensor[(14, 12, 11), int32], Tensor[(8, 20), int16], Tensor[(14, 12, 11), int32], Tensor[(8, 20), uint32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(8, 20), bool], Tensor[(8, 20), uint16]) {
  @func_7509(%var_7511, %var_7512, %var_7513) /* ty=(Tensor[(14, 16, 14), float32], Tensor[(8, 20), float32], Tensor[(154), bool], Tensor[(1, 2464), bool], Tensor[(8, 20), bool], Tensor[(14, 12, 11), int32], Tensor[(8, 20), int16], Tensor[(14, 12, 11), int32], Tensor[(8, 20), uint32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(8, 20), bool], Tensor[(8, 20), uint16]) */
}

def @func_7984() -> Tensor[(14, 12, 11), float32] {
  @func_7982() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_7215() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) {
  %912 = @func_5794() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) */;
  %913 = @func_4271() /* ty=(Tensor[(14, 12, 11), float64],) */;
  %914 = @func_5295() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %915 = %912.0;
  %916 = %913.0;
  %917 = %914.0;
  (%915, %916, %917)
}

def @func_7736(%var_7734: Tensor[(168), float64]) -> (Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) {
  @func_7733(%var_7734) /* ty=(Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) */
}

def @func_8227(%var_8226: Tensor[(35, 1), float32]) -> (Tensor[(15, 16, 6), float32], Tensor[(7, ?, 5), bool], Tensor[(35, 1), float32]) {
  %924 = fn (%var_8219: Tensor[(35, 1), float32]) -> (Tensor[(15, 16, 6), float32], Tensor[(7, ?, 5), bool], Tensor[(35, 1), float32]) {
    %918 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 16, 6), float32] */;
    %919 = cast(%var_8219, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
    %920 = reshape(%919, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
    %921 = @func_1284(%920) /* ty=(Tensor[(7, ?, 5), bool],) */;
    %922 = erf(%918) /* ty=Tensor[(15, 16, 6), float32] */;
    %923 = %921.0;
    (%922, %923, %var_8219)
  };
  %924(%var_8226) /* ty=(Tensor[(15, 16, 6), float32], Tensor[(7, ?, 5), bool], Tensor[(35, 1), float32]) */
}

def @func_8480() -> (Tensor[(14, 12, 11), float64],) {
  %926 = fn () -> (Tensor[(14, 12, 11), float64],) {
    %925 = @func_6877() /* ty=Tensor[(14, 12, 11), float64] */;
    (%925,)
  };
  %926() /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_9246() -> Tensor[(14, 12, 11), float32] {
  %927 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %927.0
}

def @func_7534() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %932 = fn () -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
    %928 = @func_4613() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) */;
    %929 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %930 = %928.0;
    %931 = %929.0;
    (%930, %931)
  };
  %932() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */
}

def @func_1585() -> Tensor[(14, 12, 11), float32] {
  @func_1583() /* ty=Tensor[(14, 12, 11), float32] */
}

def @func_9500() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
  %936 = fn () -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
    %933 = @func_3778() /* ty=Tensor[(14, 12, 11), float32] */;
    %934 = @func_5573() /* ty=Tensor[(14, 12, 11), int32] */;
    %935 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
    (%933, %934, %935)
  };
  %936() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) */
}

def @func_5556() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  %937 = @func_2097() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %938 = %937.0;
  %939 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  (%938, %939)
}

def @func_8190() -> Tensor[(14, 12, 11), int32] {
  %941 = fn () -> Tensor[(14, 12, 11), int32] {
    %940 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %940.0
  };
  %941() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_182() -> Tensor[(14, 12, 11), uint16] {
  @func_180() /* ty=Tensor[(14, 12, 11), uint16] */
}

def @func_8050() -> Tensor[(14, 12, 11), int32] {
  %942 = fn () -> Tensor[(14, 12, 11), int32] {
    @func_4113() /* ty=Tensor[(14, 12, 11), int32] */
  };
  %942() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_999() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) {
  %943 = @func_760() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) */;
  %944 = %943.1;
  %945 = cast(%944, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %946 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
  %947 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  %948 = sin(%945) /* ty=Tensor[(14, 12, 11), float32] */;
  %949 = %946.0;
  (%947, %948, %949)
}

def @func_209() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  @func_207() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */
}

def @func_6219() -> (Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) {
  %950 = cast(meta[relay.Constant][45] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %951 = reshape(%950, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %952 = @func_3102(%951) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %953 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
  %954 = %953.2;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(4, 13, 2), float64] */;
  %956 = exp(%955) /* ty=Tensor[(4, 13, 2), float64] */;
  %957 = cast(%956, dtype="int8") /* ty=Tensor[(4, 13, 2), int8] */;
  %958 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(%954, dtype="int8") /* ty=Tensor[(4, 13, 2), int8] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %961 = %952.0;
  %962 = multiply(%959, %960) /* ty=Tensor[(4, 13, 2), int8] */;
  (%961, meta[relay.Constant][45] /* ty=Tensor[(1848), float32] */, %962)
}

def @func_7776() -> (Tensor[(26, 4), int64],) {
  @func_7774() /* ty=(Tensor[(26, 4), int64],) */
}

def @func_8848() -> (Tensor[(14, 12, 11), int32],) {
  %964 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %963 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    (%963,)
  };
  %964() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_8986() -> (Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float64]) {
  %965 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
  %966 = @func_718() /* ty=Tensor[(14, 12, 11), float64] */;
  (%965, %966)
}

def @func_4304() -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
  %970 = fn () -> (Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) {
    %967 = @func_3988() /* ty=(Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), int32]) */;
    %968 = %967.1;
    %969 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    (%968, %969)
  };
  %970() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */
}

def @func_6221() -> (Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) {
  @func_6219() /* ty=(Tensor[(14, 12, 11), int8], Tensor[(1848), float32], Tensor[(4, 13, 2), int8]) */
}

def @func_8385() -> (Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) {
  %981 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) {
    %971 = @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %972 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
    %973 = reshape(%972, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
    %974 = @func_6937(%973) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(104), uint64], Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(26, 4), bool], Tensor[(14, 12, 11), int32]) */;
    %975 = %974.1;
    %976 = cast(%975, dtype="float64") /* ty=Tensor[(168), float64] */;
    %977 = reshape(%976, newshape=[168]) /* ty=Tensor[(168), float64] */;
    %978 = @func_7733(%977) /* ty=(Tensor[(1716), uint16], Tensor[(7, 12, 2), float64], Tensor[(168), float64], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool]) */;
    %979 = %971.0;
    %980 = %978.0;
    (%979, %975, meta[relay.Constant][46] /* ty=Tensor[(1, 104), float32] */, %980)
  };
  %981() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(168), float64], Tensor[(1, 104), float32], Tensor[(1716), uint16]) */
}

def @func_4613() -> (Tensor[(14, 12, 11), uint16], Tensor[(26, 4), float64]) {
  %982 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %983 = %982.0;
  %984 = cast(%983, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %985 = @func_4421() /* ty=Tensor[(14, 12, 11), uint16] */;
  %986 = sinh(%984) /* ty=Tensor[(26, 4), float64] */;
  (%985, %986)
}

def @func_500(%var_499: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
  %999 = fn (%var_496: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) {
    %987 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %988 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %989 = %988.0;
    %990 = cast(%989, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %991 = log2(%990) /* ty=Tensor[(14, 12, 11), float32] */;
    %992 = cast(%991, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %993 = cast(%var_496, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %994 = reshape(%993, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), uint64] */;
    %995 = @func_437() /* ty=Tensor[(14, 12, 11), int32] */;
    %996 = %987.0;
    %997 = rsqrt(%992) /* ty=Tensor[(14, 12, 11), float32] */;
    %998 = @func_412(%994) /* ty=Tensor[(4, 13, 2), bool] */;
    (%995, %996, %997, %998, %var_496)
  };
  %999(%var_499) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */
}

def @func_5794() -> (Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int8]) {
  %1000 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %1001 = @func_5049() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int8]) */;
  %1002 = %1000.0;
  %1003 = %1001.1;
  (%1002, %1003)
}

def @func_4213() -> (Tensor[(26, 4), uint64], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), int32]) {
  %1004 = @func_3493() /* ty=(Tensor[(26, 4), uint64],) */;
  %1005 = %1004.0;
  %1006 = cast(%1005, dtype="uint64") /* ty=Tensor[(26, 4), uint64] */;
  %1007 = reshape(%1006, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %1008 = @func_1536(%1007) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %1009 = @func_828() /* ty=(Tensor[(14, 12, 11), bool],) */;
  %1010 = @func_2363() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %1011 = %1008.0;
  %1012 = %1009.0;
  %1013 = %1010.0;
  (%1005, %1011, %1012, %1013)
}

def @func_2968(%var_2967: Tensor[(14, 12, 11), uint16]) -> (Tensor[(14, 12, 11), bool],) {
  %1021 = fn (%var_2930: Tensor[(14, 12, 11), uint16]) -> (Tensor[(14, 12, 11), bool],) {
    %1014 = @func_942() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), float32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64], Tensor[(14, 12, 11), float64], Tensor[(14, 12, 11), uint16]) */;
    %1015 = %1014.5;
    %1016 = cast(%var_2930, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
    %1017 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1018 = cast(%1015, dtype="bool") /* ty=Tensor[(14, 12, 11), bool] */;
    %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1020 = less(%1018, %1019) /* ty=Tensor[(14, 12, 11), bool] */;
    (%1020,)
  };
  %1021(%var_2967) /* ty=(Tensor[(14, 12, 11), bool],) */
}

def @func_5575() -> Tensor[(14, 12, 11), int32] {
  @func_5573() /* ty=Tensor[(14, 12, 11), int32] */
}

def @func_7579() -> (Tensor[(14, 12, 11), float64],) {
  %1024 = fn () -> (Tensor[(14, 12, 11), float64],) {
    %1022 = @func_2193() /* ty=(Tensor[(14, 12, 11), float64],) */;
    %1023 = %1022.0;
    (%1023,)
  };
  %1024() /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_4891() -> (Tensor[(14, 12, 11), int32],) {
  @func_4889() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_3852(%var_3798: float64, %var_3799: Tensor[(11, 2, 16), float64]) -> (Tensor[(11, 2, 16), float64], Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float32]) {
  %1025 = cast(%var_3798, dtype="float64") /* ty=float64 */;
  %1026 = cast(%var_3799, dtype="float64") /* ty=Tensor[(11, 2, 16), float64] */;
  %1027 = @func_240() /* ty=(Tensor[(14, 12, 11), uint16],) */;
  %1028 = %1027.0;
  %1029 = cast(%1028, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %1030 = reshape(%1029, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float32] */;
  %1031 = @func_3102(%1030) /* ty=(Tensor[(14, 12, 11), int8], Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), float32]) */;
  %1032 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %1033 = mod(%1025, %1026) /* ty=Tensor[(11, 2, 16), float64] */;
  %1034 = %1031.1;
  %1035 = @func_2482() /* ty=Tensor[(14, 12, 11), int32] */;
  %1036 = %1032.1;
  (%1033, %1028, %1034, %1035, %1036)
}

def @func_4797() -> (Tensor[(14, 12, 11), int32],) {
  %1037 = @func_2392() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %1038 = %1037.0;
  (%1038,)
}

def @func_2467() -> (Tensor[(14, 12, 11), float32],) {
  %1041 = fn () -> (Tensor[(14, 12, 11), float32],) {
    %1039 = @func_579() /* ty=(Tensor[(14, 12, 11), float32],) */;
    %1040 = %1039.0;
    (%1040,)
  };
  %1041() /* ty=(Tensor[(14, 12, 11), float32],) */
}

def @func_1445() -> Tensor[(14, 12, 11), int32] {
  %1042 = @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */;
  %1042.0
}

def @func_1312() -> (Tensor[(14, 12, 11), int32],) {
  @func_1310() /* ty=(Tensor[(14, 12, 11), int32],) */
}

def @func_5558() -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) {
  @func_5556() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), uint16]) */
}

def @func_5914() -> (Tensor[(26, 4), int64], Tensor[(26, 4), bool]) {
  @func_5912() /* ty=(Tensor[(26, 4), int64], Tensor[(26, 4), bool]) */
}

def @func_1834(%var_1833: Tensor[(14, 12, 11), bool]) -> Tensor[(14, 12, 11), float64] {
  %1049 = fn (%var_1814: Tensor[(14, 12, 11), bool]) -> Tensor[(14, 12, 11), float64] {
    %1043 = @func_1212() /* ty=(Tensor[(14, 12, 11), bool], Tensor[(14, 12, 11), uint16]) */;
    %1044 = %1043.0;
    %1045 = cast(%var_1814, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %1046 = shape_of(%1044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%1044, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%1047, %1048) /* ty=Tensor[(14, 12, 11), float64] */
  };
  %1049(%var_1833) /* ty=Tensor[(14, 12, 11), float64] */
}

def @func_7356() -> (Tensor[(14, 12, 11), int32], Tensor[(15, 5, 16), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
  %1055 = fn () -> (Tensor[(14, 12, 11), int32], Tensor[(15, 5, 16), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) {
    %1050 = @func_5295() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %1051 = @func_6863() /* ty=Tensor[(14, 12, 11), int32] */;
    %1052 = @func_7271() /* ty=Tensor[(15, 5, 16), float32] */;
    %1053 = %1050.0;
    %1054 = @func_3041() /* ty=Tensor[(14, 12, 11), float64] */;
    (%1051, %1052, %1053, %1054)
  };
  %1055() /* ty=(Tensor[(14, 12, 11), int32], Tensor[(15, 5, 16), float32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), float64]) */
}

def @func_4272() -> (Tensor[(14, 12, 11), float64],) {
  %1057 = fn () -> (Tensor[(14, 12, 11), float64],) {
    %1056 = @func_2599() /* ty=Tensor[(14, 12, 11), float64] */;
    (%1056,)
  };
  %1057() /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_5389(%var_5387: Tensor[(104), uint64]) -> (Tensor[(14, 12, 11), float32], Tensor[(104), uint64], Tensor[(104), uint64]) {
  %1058 = @func_4303() /* ty=(Tensor[(14, 12, 11), float32], Tensor[(14, 12, 11), int32]) */;
  %1059 = cast(%var_5387, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %1060 = reshape(%1059, newshape=[104]) /* ty=Tensor[(104), uint64] */;
  %1061 = @func_1048(%1060) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(4, 13, 2), bool], Tensor[(104), uint64]) */;
  %1062 = %1058.0;
  %1063 = %1061.2;
  (%1062, %1063, %var_5387)
}

def @func_4248() -> (Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), int32]) {
  %1064 = @func_3691() /* ty=(Tensor[(14, 12, 11), uint16], Tensor[(14, 12, 11), float32]) */;
  %1065 = %1064.0;
  %1066 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
  (%1065, %1066)
}

def @func_7128(%var_7127: Tensor[(4, 5, 12), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) {
  %1077 = fn (%var_7121: Tensor[(4, 5, 12), float32]) -> (Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) {
    %1067 = @func_4765() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %1068 = @func_156() /* ty=(Tensor[(14, 12, 11), int32],) */;
    %1069 = @func_3882() /* ty=(Tensor[(1, 5, 12), float32],) */;
    %1070 = %1069.0;
    %1071 = cast(%1070, dtype="float64") /* ty=Tensor[(1, 5, 12), float64] */;
    %1072 = cast(%var_7121, dtype="float64") /* ty=Tensor[(4, 5, 12), float64] */;
    %1073 = @func_6559() /* ty=Tensor[(14, 12, 11), int32] */;
    %1074 = %1067.0;
    %1075 = %1068.0;
    %1076 = mod(%1071, %1072) /* ty=Tensor[(4, 5, 12), float64] */;
    (%1073, %1074, %1075, %1076)
  };
  %1077(%var_7127) /* ty=(Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(14, 12, 11), int32], Tensor[(4, 5, 12), float64]) */
}

def @func_1545() -> (Tensor[(14, 12, 11), int32],) {
  %1079 = fn () -> (Tensor[(14, 12, 11), int32],) {
    %1078 = @func_599() /* ty=Tensor[(14, 12, 11), int32] */;
    (%1078,)
  };
  %1079() /* ty=(Tensor[(14, 12, 11), int32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen641/build/output.py:3380: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen641/build/output.py", line 3385, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(840) tvmgen_default_fused_power_kernel0(double* __restrict__ T_power, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = pow(placeholder[((((int)threadIdx.x) % 168))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

