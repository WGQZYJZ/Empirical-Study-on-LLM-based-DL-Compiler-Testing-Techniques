==========mod==========
#[version = "0.0.5"]
def @func_4695() -> (Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) {
  %0 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
  %1 = @func_3680() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %2 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(11, 1155), float64] */;
  %4 = tan(%3) /* ty=Tensor[(11, 1155), float64] */;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %6 = %0.0;
  %7 = %1.0;
  %8 = sin(%5) /* ty=Tensor[(11, 1155), float32] */;
  (%6, %7, %8)
}

def @func_4452() -> (Tensor[(1, 847), uint16],) {
  %9 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
  (%9,)
}

def @func_1714(%var_1697: Tensor[(560), float32]) -> (Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) {
  %10 = cast(%var_1697, dtype="float32") /* ty=Tensor[(560), float32] */;
  %11 = reshape(%10, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %12 = @func_1404(%11) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
  %13 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %14 = %13.0;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 13, 5), uint16] */, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = %12.6;
  %20 = greater(%17, %18) /* ty=Tensor[(13, 13, 5), bool] */;
  (%19, %var_1697, %20)
}

def @func_526(%var_490: Tensor[(11, 77), uint16], %var_505: Tensor[(11, 77), uint16]) -> (Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) {
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
  %22 = tan(%21) /* ty=Tensor[(1, 16, 11), float32] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 16, 11), float32] */, dtype="uint16") /* ty=Tensor[(1, 16, 11), uint16] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="uint16") /* ty=Tensor[(1, 16, 11), uint16] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %27 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %28 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %29 = reshape(%27, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %30 = reshape(%28, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %31 = @func_159(%29, %30) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %32 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %33 = %31.0;
  %34 = cast(%33, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %35 = reshape(%32, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %36 = reshape(%34, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %37 = @func_159(%35, %36) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %38 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %39 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %40 = reshape(%38, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %41 = reshape(%39, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %42 = @func_159(%40, %41) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %43 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %44 = %42.0;
  %45 = cast(%44, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %46 = reshape(%43, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %47 = reshape(%45, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %48 = @func_159(%46, %47) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %49 = cast(%var_505, dtype="float32") /* ty=Tensor[(11, 77), float32] */;
  %50 = shape_of(%var_490, dtype="int32") /* ty=Tensor[(2), int32] */;
  %51 = cast(%var_490, dtype="float32") /* ty=Tensor[(11, 77), float32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %53 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %54 = %48.0;
  %55 = cast(%54, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %56 = reshape(%53, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %57 = reshape(%55, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %58 = @func_159(%56, %57) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %59 = left_shift(%25, %26) /* ty=Tensor[(?, 16, 11), uint16] */;
  %60 = %37.0;
  %61 = floor_mod(%51, %52) /* ty=Tensor[(11, 77), float32] */;
  %62 = %58.0;
  (%59, %33, %60, %44, %54, %61, %62)
}

def @func_6306() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
  %63 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %64 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_3052() -> (Tensor[(13, 13, 5), uint16],) {
  %67 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %68 = %67.1;
  (%68,)
}

def @func_1752() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) {
  %69 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %72 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 847), uint16] */, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 847), uint16] */, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %74 = reshape(%72, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %75 = reshape(%73, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %76 = @func_526(%74, %75) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %77 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %78 = cos(%71) /* ty=Tensor[(13, 13, 5), float64] */;
  %79 = %76.2;
  %80 = %77.0;
  (%78, %79, meta[relay.Constant][2] /* ty=Tensor[(1, 847), uint16] */, %80)
}

def @func_7046(%var_7026: Tensor[(847), uint16]) -> Tensor[(847), bool] {
  %81 = @func_5901() /* ty=(Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) */;
  %82 = %81.1;
  %83 = cast(%var_7026, dtype="bool") /* ty=Tensor[(847), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(1), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(847), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%85, %86) /* ty=Tensor[(847), bool] */
}

def @func_159(%var_154: Tensor[(11, 7, 11), uint16], %var_155: Tensor[(11, 7, 11), uint16]) -> (Tensor[(11, 7, 11), uint16],) {
  %87 = cast(%var_155, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %88 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_154, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %91 = minimum(%89, %90) /* ty=Tensor[(11, 7, 11), uint16] */;
  (%91,)
}

def @func_5078() -> (Tensor[(13, 13, 5), uint16],) {
  %92 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %93 = %92.0;
  (%93,)
}

def @func_5074() -> Tensor[(13, 13, 5), uint16] {
  %94 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %94.0
}

def @func_2116(%var_2053: Tensor[(6, 847), uint16], %var_2071: Tensor[(15, 847), float32]) -> (Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) {
  %95 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %96 = %95.2;
  %97 = cast(%96, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %98 = cast(%var_2053, dtype="bool") /* ty=Tensor[(6, 847), bool] */;
  %99 = cast(%96, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %100 = cast(%96, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %101 = reshape(%99, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %102 = reshape(%100, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %103 = @func_159(%101, %102) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %104 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %105 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %106 = cast(%96, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %107 = cosh(%106) /* ty=Tensor[(1, 847), float64] */;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %109 = asin(%108) /* ty=Tensor[(1, 847), float32] */;
  %110 = cast(%109, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %111 = cast(%var_2071, dtype="bool") /* ty=Tensor[(15, 847), bool] */;
  %112 = logical_and(%110, %111) /* ty=Tensor[(15, 847), bool] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(15, 847), float32] */;
  %114 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %115 = less_equal(%97, %98) /* ty=Tensor[(6, 847), bool] */;
  %116 = %103.0;
  %117 = %104.0;
  %118 = %105.1;
  %119 = sin(%113) /* ty=Tensor[(15, 847), float32] */;
  %120 = %114.0;
  (%115, %116, %117, %118, %119, %120)
}

def @func_1785() -> Tensor[(13, 13, 5), uint16] {
  %121 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %121.0
}

def @func_5271(%var_5246: Tensor[(1, 192), int16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), bool], Tensor[(?, 192), float64]) {
  %122 = @func_5190() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) */;
  %123 = %122.3;
  %124 = cast(%var_5246, dtype="bool") /* ty=Tensor[(1, 192), bool] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(2), int32] */;
  %126 = cast(%123, dtype="bool") /* ty=Tensor[(?, 192), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %128 = cast(%123, dtype="float32") /* ty=Tensor[(?, 192), float32] */;
  %129 = log10(%128) /* ty=Tensor[(?, 192), float32] */;
  %130 = cast(%var_5246, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="float64") /* ty=Tensor[(?, 192), float64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %134 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %135 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %136 = logical_and(%126, %127) /* ty=Tensor[(?, 192), bool] */;
  %137 = power(%132, %133) /* ty=Tensor[(?, 192), float64] */;
  (%134, %135, %136, %137)
}

def @func_4344() -> (Tensor[(13, 13, 5), uint16],) {
  %138 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %139 = %138.0;
  (%139,)
}

def @func_4942() -> (Tensor[(1, 847), uint16],) {
  %140 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
  %141 = %140.0;
  (%141,)
}

def @func_7856() -> (Tensor[(13, 13, 5), uint16],) {
  %142 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %143 = %142.0;
  (%143,)
}

def @func_5436(%var_5409: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
  %144 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %145 = cast(%var_5409, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %150 = power(%147, %148) /* ty=Tensor[(13, 13, 5), float64] */;
  %151 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %152 = %149.0;
  (%150, %151, %152)
}

def @func_3949(%var_3910: Tensor[(16, 847), uint16], %var_3929: Tensor[(560), float32], %var_3945: Tensor[(10164), uint16]) -> (Tensor[(16, 847), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(10164), uint16]) {
  %153 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %154 = %153.0;
  %155 = cast(%154, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %156 = cast(%var_3910, dtype="bool") /* ty=Tensor[(16, 847), bool] */;
  %157 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %158 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %159 = cast(%var_3929, dtype="float32") /* ty=Tensor[(560), float32] */;
  %160 = reshape(%159, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %161 = @func_1648(%160) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
  %162 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %163 = cast(%var_3945, dtype="uint16") /* ty=Tensor[(10164), uint16] */;
  %164 = reshape(%163, newshape=[2, 5082]) /* ty=Tensor[(2, 5082), uint16] */;
  %165 = @func_3533(%164) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) */;
  %166 = greater_equal(%155, %156) /* ty=Tensor[(16, 847), bool] */;
  %167 = %157.0;
  %168 = %158.0;
  %169 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
  %170 = %161.2;
  %171 = %162.0;
  %172 = %165.4;
  (%166, %167, %168, %169, %170, %var_3929, %171, %172, %var_3945)
}

def @func_5704(%var_5688: Tensor[(5082), uint16], %var_5689: Tensor[(12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  %173 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %174 = cast(%var_5688, dtype="uint16") /* ty=Tensor[(5082), uint16] */;
  %175 = cast(%var_5689, dtype="float32") /* ty=Tensor[(12705), float32] */;
  %176 = reshape(%174, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %177 = reshape(%175, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %178 = @func_2116(%176, %177) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %179 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %180 = %173.0;
  %181 = %178.0;
  (%179, %180, %181, %var_5688, %var_5689)
}

def @func_4992() -> (Tensor[(2, 847), int32],) {
  %182 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
  %185 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 847), uint16] */, dtype="int32") /* ty=Tensor[(2, 847), int32] */;
  %186 = maximum(%184, %185) /* ty=Tensor[(2, 847), int32] */;
  (%186,)
}

def @func_7177(%var_7153: Tensor[(12, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) {
  %187 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %188 = %187.0;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %190 = cast(%var_7153, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %191 = minimum(%189, %190) /* ty=Tensor[(12, 5082), float64] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %193 = exp(%192) /* ty=Tensor[(12, 5082), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %195 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  %196 = asin(%194) /* ty=Tensor[(12, 5082), float64] */;
  (%195, %196)
}

def @func_5664(%var_5634: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64], Tensor[(13, 13, 5), uint16]) {
  %197 = cast(%var_5634, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
  %198 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(8, 7, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = @func_5190() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) */;
  %202 = floor_mod(%199, %200) /* ty=Tensor[(8, 7, 12), float64] */;
  %203 = %201.2;
  (%202, %203)
}

def @func_1948() -> Tensor[(13, 13, 5), uint16] {
  %204 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %204.0
}

def @func_2519(%var_2511: Tensor[(13, 847), uint16]) -> Tensor[(13, 847), int32] {
  %205 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
  %208 = cast(%var_2511, dtype="int32") /* ty=Tensor[(13, 847), int32] */;
  right_shift(%207, %208) /* ty=Tensor[(13, 847), int32] */
}

def @func_7000() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %209 = @func_5118() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %210 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %211 = %209.0;
  %212 = %210.1;
  (%211, %212)
}

def @func_7575() -> (Tensor[(11, 1155), int64], Tensor[(11, 1155), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %213 = @func_6592() /* ty=(Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) */;
  %214 = %213.1;
  %215 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 1155), int8] */, dtype="int64") /* ty=Tensor[(11, 1155), int64] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(2), int32] */;
  %217 = cast(%214, dtype="int64") /* ty=Tensor[(11, 1155), int64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %219 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 1155), int8] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %220 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %221 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %223 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %224 = bitwise_or(%217, %218) /* ty=Tensor[(11, 1155), int64] */;
  %225 = sqrt(%219) /* ty=Tensor[(11, 1155), float32] */;
  %226 = %220.0;
  %227 = acos(%222) /* ty=Tensor[(1, 847), float64] */;
  %228 = @func_6521() /* ty=Tensor[(13, 13, 5), uint16] */;
  %229 = @func_6746() /* ty=Tensor[(13, 13, 5), uint16] */;
  %230 = %223.0;
  (%224, %225, %226, %227, %228, %229, %230)
}

def @func_7831() -> (Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int32], Tensor[(13, 13, 5), uint16], Tensor[(64, 20), float32], Tensor[(5082), uint16], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  %231 = @func_4965() /* ty=(Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) */;
  %232 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %233 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %236 = reshape(%235, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %237 = @func_2008(%236) /* ty=(Tensor[(13, 13, 5), int32],) */;
  %238 = cast(meta[relay.Constant][6] /* ty=Tensor[(64, 20), float32] */, dtype="float32") /* ty=Tensor[(64, 20), float32] */;
  %239 = reshape(%238, newshape=[10, 16, 8]) /* ty=Tensor[(10, 16, 8), float32] */;
  %240 = @func_7447(%239) /* ty=(Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) */;
  %241 = cast(meta[relay.Constant][7] /* ty=Tensor[(5082), uint16] */, dtype="uint16") /* ty=Tensor[(5082), uint16] */;
  %242 = cast(meta[relay.Constant][8] /* ty=Tensor[(12705), float32] */, dtype="float32") /* ty=Tensor[(12705), float32] */;
  %243 = reshape(%241, newshape=[5082]) /* ty=Tensor[(5082), uint16] */;
  %244 = reshape(%242, newshape=[12705]) /* ty=Tensor[(12705), float32] */;
  %245 = @func_5704(%243, %244) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) */;
  %246 = %231.0;
  %247 = %232.0;
  %248 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %249 = %237.0;
  %250 = %240.1;
  %251 = %245.3;
  (%246, %247, %248, %234, %249, %250, meta[relay.Constant][6] /* ty=Tensor[(64, 20), float32] */, %251, meta[relay.Constant][7] /* ty=Tensor[(5082), uint16] */, meta[relay.Constant][8] /* ty=Tensor[(12705), float32] */)
}

def @func_7884() -> Tensor[(13, 13, 5), uint16] {
  %252 = @func_4900() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %252.0
}

def @main(%var_8118: Tensor[(5, 847), uint16], %var_8126: Tensor[(5, 847), uint16]) -> (Tensor[(1, 847), float64], Tensor[(5, 847), float64], Tensor[(5, 847), bool]) {
  %253 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %255 = cast(%253, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %256 = cast(%var_8118, dtype="float64") /* ty=Tensor[(5, 847), float64] */;
  %257 = cast(%var_8126, dtype="bool") /* ty=Tensor[(5, 847), bool] */;
  %258 = shape_of(%var_8118, dtype="int32") /* ty=Tensor[(2), int32] */;
  %259 = cast(%var_8118, dtype="bool") /* ty=Tensor[(5, 847), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %261 = log2(%254) /* ty=Tensor[(1, 847), float64] */;
  %262 = floor_mod(%255, %256) /* ty=Tensor[(5, 847), float64] */;
  %263 = less_equal(%259, %260) /* ty=Tensor[(5, 847), bool] */;
  (%261, %262, %263)
}

def @func_2830(%var_2827: Tensor[(11, 77), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(847), uint16], Tensor[(840), uint64], Tensor[(11, 77), uint16]) {
  %264 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %265 = %264.1;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %267 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %268 = cast(%var_2827, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
  %269 = reshape(%267, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %270 = reshape(%268, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %271 = @func_1298(%269, %270) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %272 = acos(%266) /* ty=Tensor[(13, 13, 5), float64] */;
  %273 = %271.2;
  (%272, %273, meta[relay.Constant][9] /* ty=Tensor[(840), uint64] */, %var_2827)
}

def @func_5016() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %274 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %275 = %274.0;
  %276 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
  (%275, %276)
}

def @func_4084() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) {
  %277 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %279 = atanh(%278) /* ty=Tensor[(13, 13, 5), float32] */;
  %280 = cast(%277, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %284 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %285 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %286 = maximum(%282, %283) /* ty=Tensor[(13, 13, 5), int8] */;
  %287 = %284.0;
  (%285, %286, %287)
}

def @func_6592() -> (Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) {
  %288 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %289 = %288.1;
  %290 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
  (%289, %290)
}

def @func_6016() -> Tensor[(1, 847), uint16] {
  @func_3145() /* ty=Tensor[(1, 847), uint16] */
}

def @func_3680() -> (Tensor[(13, 13, 5), uint16],) {
  %291 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %292 = %291.1;
  (%292,)
}

def @func_4373() -> Tensor[(13, 13, 5), uint16] {
  %293 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %293.0
}

def @func_4525() -> Tensor[(13, 13, 5), uint16] {
  %294 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %294.0
}

def @func_2625(%var_2611: Tensor[(2, 16, 6), float64]) -> (Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
  %295 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
  %296 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_2611, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %299 = cast(meta[relay.Constant][11] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %300 = reshape(%299, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %301 = @func_1648(%300) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
  %302 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %303 = divide(%297, %298) /* ty=Tensor[(2, 16, 6), float64] */;
  %304 = %301.0;
  %305 = %302.1;
  (%303, %304, meta[relay.Constant][11] /* ty=Tensor[(560), float32] */, %305)
}

def @func_1338() -> (Tensor[(13, 13, 5), uint16],) {
  %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %307 = rsqrt(%306) /* ty=Tensor[(13, 13, 5), float64] */;
  %308 = cast(%307, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %309 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 5), float64] */, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %312 = minimum(%310, %311) /* ty=Tensor[(13, 13, 5), uint16] */;
  (%312,)
}

def @func_4323() -> (Tensor[(15, 5082), float32],) {
  %313 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(1, 5082), float32] */;
  %316 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 5082), uint16] */, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
  %317 = divide(%315, %316) /* ty=Tensor[(15, 5082), float32] */;
  (%317,)
}

def @func_7978() -> (Tensor[(13, 13, 5), uint16],) {
  %318 = @func_5118() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %319 = %318.0;
  (%319,)
}

def @func_5576(%var_5527: Tensor[(847), uint16], %var_5554: Tensor[(12705), float32]) -> (Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(12705), float32], Tensor[(13, 13, 5), uint16], Tensor[(15, 5082), bool]) {
  %320 = cast(%var_5527, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %321 = cast(%var_5527, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %322 = reshape(%320, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %323 = reshape(%321, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %324 = @func_159(%322, %323) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %325 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %326 = cast(%var_5554, dtype="float32") /* ty=Tensor[(12705), float32] */;
  %327 = reshape(%325, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %328 = reshape(%326, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %329 = @func_2116(%327, %328) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %330 = @func_5078() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %331 = @func_4323() /* ty=(Tensor[(15, 5082), float32],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
  %334 = sin(%333) /* ty=Tensor[(15, 5082), float32] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
  %336 = tan(%335) /* ty=Tensor[(15, 5082), float32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(2), int32] */;
  %339 = cast(%336, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %341 = less_equal(%339, %340) /* ty=Tensor[(15, 5082), bool] */;
  %342 = cast(%334, dtype="int32") /* ty=Tensor[(15, 5082), int32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(2), int32] */;
  %344 = cast(%341, dtype="int32") /* ty=Tensor[(15, 5082), int32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %346 = logical_xor(%344, %345) /* ty=Tensor[(15, 5082), int32] */;
  %347 = cast(%334, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(2), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %351 = %324.0;
  %352 = %329.2;
  %353 = %330.0;
  %354 = not_equal(%349, %350) /* ty=Tensor[(15, 5082), bool] */;
  (%351, %var_5527, %352, meta[relay.Constant][14] /* ty=Tensor[(1, 5082), uint16] */, %var_5554, %353, %354)
}

def @func_4518() -> (Tensor[(13, 13, 5), uint16],) {
  %355 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %356 = %355.1;
  (%356,)
}

def @func_2769() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) {
  %357 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %358 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %359 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %360 = reshape(%358, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %361 = reshape(%359, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %362 = @func_2116(%360, %361) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %363 = %362.4;
  %364 = cast(%363, dtype="int8") /* ty=Tensor[(15, 847), int8] */;
  %365 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(11, 1155), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %366 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 1155), float32] */, dtype="int8") /* ty=Tensor[(11, 1155), int8] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %368 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %369 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %370 = reshape(%368, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %371 = reshape(%369, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %372 = @func_2116(%370, %371) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %373 = %372.3;
  %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %376 = reshape(%374, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %377 = reshape(%375, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %378 = @func_2116(%376, %377) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %379 = %378.2;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %381 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%373, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = %357.0;
  %385 = left_shift(%366, %367) /* ty=Tensor[(11, 1155), int8] */;
  %386 = divide(%382, %383) /* ty=Tensor[(13, 13, 5), float64] */;
  (%384, meta[relay.Constant][15] /* ty=Tensor[(1, 5082), uint16] */, %385, %386)
}

def @func_6665(%var_6642: Tensor[(16, 6, 3), uint16], %var_6643: Tensor[(16, 6, 3), uint16]) -> (Tensor[(16, 6, 3), bool], Tensor[(847), uint16]) {
  %387 = cast(%var_6643, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
  %388 = shape_of(%var_6642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_6642, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = @func_4965() /* ty=(Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) */;
  %392 = less(%389, %390) /* ty=Tensor[(16, 6, 3), bool] */;
  %393 = %391.3;
  (%392, %393)
}

def @func_3359() -> Tensor[(13, 13, 5), uint16] {
  %394 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %394.0
}

def @func_6740(%var_6735: Tensor[(13, 5082), uint16]) -> Tensor[(13, 5082), bool] {
  %395 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="bool") /* ty=Tensor[(1, 5082), bool] */;
  %398 = cast(%var_6735, dtype="bool") /* ty=Tensor[(13, 5082), bool] */;
  not_equal(%397, %398) /* ty=Tensor[(13, 5082), bool] */
}

def @func_3145() -> Tensor[(1, 847), uint16] {
  %399 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %399.0
}

def @func_6746() -> Tensor[(13, 13, 5), uint16] {
  %400 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %400.1
}

def @func_5118() -> (Tensor[(13, 13, 5), uint16],) {
  %401 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%401,)
}

def @func_1811() -> Tensor[(1, 847), uint16] {
  %402 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %402.2
}

def @func_4761() -> (Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) {
  %403 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
  %404 = @func_2917() /* ty=Tensor[(1, 847), float64] */;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %406 = cast(meta[relay.Constant][17] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %407 = reshape(%406, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %408 = @func_1714(%407) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %409 = %403.1;
  %410 = cos(%405) /* ty=Tensor[(1, 847), float32] */;
  %411 = %408.2;
  (%409, %410, %411, meta[relay.Constant][17] /* ty=Tensor[(560), float32] */)
}

def @func_6876() -> Tensor[(13, 13, 5), uint16] {
  @func_6521() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_6728() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %412 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
  %413 = @func_4259() /* ty=Tensor[(13, 13, 5), uint16] */;
  %414 = %412.2;
  (%413, %414)
}

def @func_2485() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %415 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %416 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %417 = %415.3;
  %418 = %416.0;
  (%417, %418)
}

def @func_4792() -> (Tensor[(1, 847), uint16],) {
  %419 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
  %420 = %419.0;
  (%420,)
}

def @func_2632() -> Tensor[(13, 13, 5), uint16] {
  @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_3533(%var_3520: Tensor[(2, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) {
  %421 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(1, 5082), bool] */;
  %424 = cast(%var_3520, dtype="bool") /* ty=Tensor[(2, 5082), bool] */;
  %425 = cast(%422, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %426 = tan(%425) /* ty=Tensor[(1, 5082), float64] */;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %429 = reshape(%428, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %430 = @func_1714(%429) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %431 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %432 = logical_or(%423, %424) /* ty=Tensor[(2, 5082), bool] */;
  %433 = sigmoid(%427) /* ty=Tensor[(1, 5082), float64] */;
  %434 = %430.1;
  (%431, %432, %433, %434, meta[relay.Constant][18] /* ty=Tensor[(560), float32] */)
}

def @func_3883() -> (Tensor[(1, 847), uint16],) {
  %435 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %436 = %435.0;
  (%436,)
}

def @func_6368() -> (Tensor[(13, 13, 5), uint16],) {
  %437 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %438 = %437.0;
  (%438,)
}

def @func_2970() -> (Tensor[(13, 13, 5), uint16],) {
  %439 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%439,)
}

def @func_4241() -> (Tensor[(1, 847), uint16],) {
  %440 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %441 = %440.0;
  (%441,)
}

def @func_5190() -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) {
  %442 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %443 = reshape(%442, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float64] */;
  %444 = @func_2625(%443) /* ty=(Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */;
  %445 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 192), float64] */, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %446 = rsqrt(%445) /* ty=Tensor[(1, 192), float32] */;
  %447 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 192), float64] */, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(2), int32] */;
  %449 = cast(%446, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %451 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  %452 = %444.2;
  %453 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %454 = left_shift(%449, %450) /* ty=Tensor[(?, 192), int16] */;
  (%451, %452, %453, %454)
}

def @func_6478() -> (Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %455 = @func_6368() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %458 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %459 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %460 = @func_6016() /* ty=Tensor[(1, 847), uint16] */;
  %461 = cast(%460, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %462 = cast(%460, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %463 = reshape(%461, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %464 = reshape(%462, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %465 = @func_526(%463, %464) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %466 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %467 = cosh(%457) /* ty=Tensor[(13, 13, 5), float64] */;
  %468 = %458.1;
  %469 = %459.0;
  %470 = %465.4;
  %471 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %472 = %466.1;
  (%467, %460, %468, %469, %470, %471, %472)
}

def @func_7603() -> (Tensor[(1, 847), uint16], Tensor[(11, 7, 11), float64]) {
  %473 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %474 = @func_6478() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %475 = %474.2;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(11, 7, 11), float64] */;
  %477 = %473.0;
  %478 = tan(%476) /* ty=Tensor[(11, 7, 11), float64] */;
  (%477, %478)
}

def @func_5901() -> (Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) {
  %479 = cast(meta[relay.Constant][20] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
  %480 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
  %481 = cast(%480, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %482 = reshape(%479, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %483 = reshape(%481, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %484 = @func_1298(%482, %483) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %485 = %484.2;
  (%480, %485, meta[relay.Constant][20] /* ty=Tensor[(60, 14), uint64] */)
}

def @func_4163() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32]) {
  %486 = @func_2970() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %487 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %489 = %486.0;
  %490 = sin(%488) /* ty=Tensor[(13, 13, 5), float32] */;
  (%489, %490)
}

def @func_7241(%var_7211: Tensor[(1, 12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 462), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 12705), bool]) {
  %491 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %492 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 462), uint16] */, dtype="uint16") /* ty=Tensor[(11, 462), uint16] */;
  %493 = cast(%var_7211, dtype="float32") /* ty=Tensor[(1, 12705), float32] */;
  %494 = reshape(%492, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %495 = reshape(%493, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %496 = @func_2116(%494, %495) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %497 = cast(%var_7211, dtype="float64") /* ty=Tensor[(1, 12705), float64] */;
  %498 = sinh(%497) /* ty=Tensor[(1, 12705), float64] */;
  %499 = cast(%var_7211, dtype="uint64") /* ty=Tensor[(1, 12705), uint64] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(2), int32] */;
  %501 = cast(%498, dtype="uint64") /* ty=Tensor[(1, 12705), uint64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %503 = left_shift(%501, %502) /* ty=Tensor[(?, 12705), uint64] */;
  %504 = cast(%503, dtype="bool") /* ty=Tensor[(?, 12705), bool] */;
  %505 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%var_7211, dtype="bool") /* ty=Tensor[(1, 12705), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %508 = %491.0;
  %509 = %496.5;
  %510 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %511 = logical_and(%506, %507) /* ty=Tensor[(?, 12705), bool] */;
  (%508, %509, meta[relay.Constant][21] /* ty=Tensor[(11, 462), uint16] */, %510, %511)
}

def @func_6521() -> Tensor[(13, 13, 5), uint16] {
  %512 = @func_4695() /* ty=(Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) */;
  %512.1
}

def @func_1849() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %513 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %514 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %515 = %513.0;
  %516 = %514.0;
  (%515, %516)
}

def @func_4900() -> (Tensor[(13, 13, 5), uint16],) {
  %517 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%517,)
}

def @func_1648(%var_1636: Tensor[(2, 280), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) {
  %518 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %519 = cast(%var_1636, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
  %520 = reshape(%519, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %521 = @func_1171(%520) /* ty=(Tensor[(14, 4, 10), float32],) */;
  %522 = %518.0;
  %523 = %521.0;
  (%522, %523, %var_1636)
}

def @func_7384() -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64], Tensor[(60984), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %524 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %525 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %528 = cast(meta[relay.Constant][22] /* ty=Tensor[(60984), uint16] */, dtype="uint16") /* ty=Tensor[(60984), uint16] */;
  %529 = reshape(%528, newshape=[12, 5082]) /* ty=Tensor[(12, 5082), uint16] */;
  %530 = @func_7177(%529) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) */;
  %531 = %524.0;
  %532 = sinh(%527) /* ty=Tensor[(13, 13, 5), float64] */;
  %533 = @func_6746() /* ty=Tensor[(13, 13, 5), uint16] */;
  %534 = %530.1;
  %535 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  %536 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%531, %532, %533, %534, meta[relay.Constant][22] /* ty=Tensor[(60984), uint16] */, %535, %536)
}

def @func_1298(%var_1278: Tensor[(4, 14, 15), uint64], %var_1284: Tensor[(847), uint16]) -> (Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) {
  %537 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 14, 15), uint64] */, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %538 = shape_of(%var_1278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%var_1278, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = cast(%var_1284, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %542 = cast(%var_1284, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %543 = reshape(%541, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %544 = reshape(%542, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %545 = @func_526(%543, %544) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %546 = greater_equal(%539, %540) /* ty=Tensor[(4, 14, 15), bool] */;
  %547 = %545.6;
  (%546, %547, %var_1284)
}

def @func_2917() -> Tensor[(1, 847), float64] {
  %548 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  erf(%549) /* ty=Tensor[(1, 847), float64] */
}

def @func_3023(%var_2983: Tensor[(4, 847), uint16], %var_2994: Tensor[(4, 847), uint16], %var_2998: Tensor[(4, 847), uint16]) -> (Tensor[(4, 847), bool], Tensor[(4, 847), bool], Tensor[(4, 847), float64], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(840), uint64]) {
  %550 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %553 = cast(%var_2983, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
  %554 = cast(%var_2994, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
  %555 = shape_of(%var_2983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %556 = cast(%var_2983, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %558 = cast(%var_2998, dtype="float64") /* ty=Tensor[(4, 847), float64] */;
  %559 = shape_of(%var_2994, dtype="int32") /* ty=Tensor[(2), int32] */;
  %560 = cast(%var_2994, dtype="float64") /* ty=Tensor[(4, 847), float64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %562 = cast(%551, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %563 = cast(%551, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %564 = reshape(%562, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %565 = reshape(%563, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %566 = @func_159(%564, %565) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %567 = cast(meta[relay.Constant][24] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %568 = %566.0;
  %569 = cast(%568, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %570 = reshape(%567, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %571 = reshape(%569, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %572 = @func_1298(%570, %571) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %573 = less_equal(%552, %553) /* ty=Tensor[(4, 847), bool] */;
  %574 = logical_or(%556, %557) /* ty=Tensor[(4, 847), bool] */;
  %575 = floor_divide(%560, %561) /* ty=Tensor[(4, 847), float64] */;
  %576 = %572.1;
  (%573, %574, %575, %568, %576, meta[relay.Constant][24] /* ty=Tensor[(840), uint64] */)
}

def @func_4541() -> Tensor[(1, 847), float64] {
  @func_2917() /* ty=Tensor[(1, 847), float64] */
}

def @func_7080() -> Tensor[(1, 847), uint16] {
  @func_1811() /* ty=Tensor[(1, 847), uint16] */
}

def @func_4259() -> Tensor[(13, 13, 5), uint16] {
  %577 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %577.0
}

def @func_3654(%var_3582: Tensor[(560), float32], %var_3593: Tensor[(7, 847), uint16], %var_3609: Tensor[(11011), uint16], %var_3624: Tensor[(11011), uint16], %var_3636: Tensor[(7, 847), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(7, 847), uint8], Tensor[(13, 847), int32], Tensor[(13, 13, 5), uint16], Tensor[(11011), int16], Tensor[(7, 847), uint32], Tensor[(28, 4), float64]) {
  %578 = cast(meta[relay.Constant][25] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %579 = cast(%var_3582, dtype="float32") /* ty=Tensor[(560), float32] */;
  %580 = reshape(%578, newshape=[7, 16, 1]) /* ty=Tensor[(7, 16, 1), float32] */;
  %581 = reshape(%579, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %582 = @func_2415(%580, %581) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) */;
  %583 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
  %584 = cast(%583, dtype="uint8") /* ty=Tensor[(1, 847), uint8] */;
  %585 = cast(%var_3593, dtype="uint8") /* ty=Tensor[(7, 847), uint8] */;
  %586 = cast(%var_3609, dtype="uint16") /* ty=Tensor[(11011), uint16] */;
  %587 = reshape(%586, newshape=[13, 847]) /* ty=Tensor[(13, 847), uint16] */;
  %588 = @func_3052() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %589 = cast(%var_3624, dtype="int16") /* ty=Tensor[(11011), int16] */;
  %590 = shape_of(%var_3609, dtype="int32") /* ty=Tensor[(1), int32] */;
  %591 = cast(%var_3609, dtype="int16") /* ty=Tensor[(11011), int16] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), int16] */;
  %593 = cast(%var_3636, dtype="uint32") /* ty=Tensor[(7, 847), uint32] */;
  %594 = shape_of(%var_3593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %595 = cast(%var_3593, dtype="uint32") /* ty=Tensor[(7, 847), uint32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %597 = cast(meta[relay.Constant][25] /* ty=Tensor[(28, 4), float32] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %598 = %582.1;
  %599 = bitwise_xor(%584, %585) /* ty=Tensor[(7, 847), uint8] */;
  %600 = @func_2519(%587) /* ty=Tensor[(13, 847), int32] */;
  %601 = %588.0;
  %602 = subtract(%591, %592) /* ty=Tensor[(11011), int16] */;
  %603 = add(%595, %596) /* ty=Tensor[(7, 847), uint32] */;
  %604 = cosh(%597) /* ty=Tensor[(28, 4), float64] */;
  (%598, %var_3582, %599, %600, %601, %602, %603, %604)
}

def @func_5366(%var_5362: Tensor[(280, 2), float32]) -> (Tensor[(1, 847), uint16], Tensor[(14, 4, 10), float32], Tensor[(280, 2), float32]) {
  %605 = @func_4942() /* ty=(Tensor[(1, 847), uint16],) */;
  %606 = cast(%var_5362, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %607 = reshape(%606, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %608 = @func_1171(%607) /* ty=(Tensor[(14, 4, 10), float32],) */;
  %609 = %605.0;
  %610 = %608.0;
  (%609, %610, %var_5362)
}

def @func_4419(%var_4407: Tensor[(3, 1, 1), uint64], %var_4408: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 1), uint32],) {
  %611 = cast(%var_4407, dtype="bool") /* ty=Tensor[(3, 1, 1), bool] */;
  %612 = cast(%var_4408, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %613 = equal(%611, %612) /* ty=Tensor[(3, 3, 1), bool] */;
  %614 = cast(%var_4407, dtype="uint32") /* ty=Tensor[(3, 1, 1), uint32] */;
  %615 = cast(%613, dtype="uint32") /* ty=Tensor[(3, 3, 1), uint32] */;
  %616 = left_shift(%614, %615) /* ty=Tensor[(3, 3, 1), uint32] */;
  (%616,)
}

def @func_4965() -> (Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) {
  %617 = @func_4761() /* ty=(Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) */;
  %618 = cast(meta[relay.Constant][26] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %619 = cast(meta[relay.Constant][27] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %620 = reshape(%618, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %621 = reshape(%619, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %622 = @func_1298(%620, %621) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %623 = %617.3;
  %624 = %622.0;
  (%623, %624, meta[relay.Constant][26] /* ty=Tensor[(840), uint64] */, meta[relay.Constant][27] /* ty=Tensor[(847), uint16] */)
}

def @func_7116(%var_7088: bool, %var_7089: Tensor[(16, 12, 1), bool]) -> (Tensor[(16, 12, 1), bool], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
  %625 = cast(%var_7088, dtype="bool") /* ty=bool */;
  %626 = cast(%var_7089, dtype="bool") /* ty=Tensor[(16, 12, 1), bool] */;
  %627 = cast(meta[relay.Constant][28] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %628 = reshape(%627, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %629 = @func_1648(%628) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
  %630 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %631 = logical_or(%625, %626) /* ty=Tensor[(16, 12, 1), bool] */;
  %632 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %633 = %629.2;
  %634 = %630.3;
  (%631, %632, %633, meta[relay.Constant][28] /* ty=Tensor[(560), float32] */, %634)
}

def @func_6229(%var_6128: Tensor[(7, 847), float32], %var_6163: Tensor[(2541, 5), float32]) -> (Tensor[(2, 847), int32], Tensor[(2, 16, 6), float64], Tensor[(192), float64], Tensor[(7, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(7, 847), bool], Tensor[(242, 21), uint16], Tensor[(2541, 5), float32], Tensor[(1, 847), uint16], Tensor[(560), float32], Tensor[(280, 2), float32], Tensor[(14, 4, 10), float32], Tensor[(?, 847), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(6, 847), uint8], Tensor[(13, 13, 5), uint16]) {
  %635 = @func_4992() /* ty=(Tensor[(2, 847), int32],) */;
  %636 = cast(meta[relay.Constant][29] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %637 = reshape(%636, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float64] */;
  %638 = @func_2625(%637) /* ty=(Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */;
  %639 = @func_4541() /* ty=Tensor[(1, 847), float64] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %641 = sqrt(%640) /* ty=Tensor[(1, 847), float32] */;
  %642 = cast(%641, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %643 = cast(%var_6128, dtype="bool") /* ty=Tensor[(7, 847), bool] */;
  %644 = logical_and(%642, %643) /* ty=Tensor[(7, 847), bool] */;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(7, 847), float64] */;
  %646 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(7, 847), bool] */;
  %648 = cast(%639, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %649 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
  %650 = cast(meta[relay.Constant][31] /* ty=Tensor[(280, 2), float32] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %651 = reshape(%650, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %652 = @func_1714(%651) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %653 = cast(meta[relay.Constant][31] /* ty=Tensor[(280, 2), float32] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %654 = reshape(%653, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %655 = @func_1404(%654) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
  %656 = cast(%641, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %657 = sin(%656) /* ty=Tensor[(1, 847), float32] */;
  %658 = cast(%657, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %659 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%641, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %662 = logical_or(%660, %661) /* ty=Tensor[(?, 847), bool] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(?, 847), float32] */;
  %664 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %665 = @func_4792() /* ty=(Tensor[(1, 847), uint16],) */;
  %666 = cast(meta[relay.Constant][30] /* ty=Tensor[(242, 21), uint16] */, dtype="uint16") /* ty=Tensor[(242, 21), uint16] */;
  %667 = cast(%var_6163, dtype="float32") /* ty=Tensor[(2541, 5), float32] */;
  %668 = reshape(%666, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %669 = reshape(%667, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %670 = @func_2116(%668, %669) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %671 = %670.0;
  %672 = cast(%662, dtype="uint8") /* ty=Tensor[(?, 847), uint8] */;
  %673 = cast(%671, dtype="uint8") /* ty=Tensor[(6, 847), uint8] */;
  %674 = %635.0;
  %675 = %638.0;
  %676 = erf(%645) /* ty=Tensor[(7, 847), float64] */;
  %677 = %646.0;
  %678 = greater_equal(%647, %648) /* ty=Tensor[(7, 847), bool] */;
  %679 = %649.0;
  %680 = %652.1;
  %681 = %655.0;
  %682 = rsqrt(%663) /* ty=Tensor[(?, 847), float32] */;
  %683 = %664.0;
  %684 = %665.0;
  %685 = logical_xor(%672, %673) /* ty=Tensor[(6, 847), uint8] */;
  %686 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%674, %675, meta[relay.Constant][29] /* ty=Tensor[(192), float64] */, %676, %677, %678, meta[relay.Constant][30] /* ty=Tensor[(242, 21), uint16] */, %var_6163, %679, %680, meta[relay.Constant][31] /* ty=Tensor[(280, 2), float32] */, %681, %682, %683, %684, %685, %686)
}

def @func_6787(%var_6767: Tensor[(6, 140), uint64]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(6, 140), uint64], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16]) {
  %687 = @func_3052() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %688 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %689 = cast(%var_6767, dtype="uint64") /* ty=Tensor[(6, 140), uint64] */;
  %690 = cast(meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %691 = reshape(%689, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %692 = reshape(%690, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %693 = @func_1298(%691, %692) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %694 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %695 = %687.0;
  %696 = %688.0;
  %697 = %693.1;
  %698 = %694.0;
  (%695, %696, %697, %var_6767, meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, %698)
}

def @func_2548() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %699 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %700 = %699.0;
  %701 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%700, %701)
}

def @func_7447(%var_7411: Tensor[(10, 16, 8), float32]) -> (Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) {
  %702 = cast(%var_7411, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
  %703 = exp(%702) /* ty=Tensor[(10, 16, 8), float32] */;
  %704 = cast(%var_7411, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %708 = @func_4084() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) */;
  %709 = floor_mod(%706, %707) /* ty=Tensor[(10, 16, 8), float64] */;
  %710 = %708.0;
  (%709, %710)
}

def @func_5126() -> (Tensor[(13, 13, 5), uint16],) {
  %711 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %712 = %711.1;
  (%712,)
}

def @func_1591() -> (Tensor[(13, 13, 5), uint16],) {
  %713 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %714 = %713.0;
  (%714,)
}

def @func_2008(%var_1980: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), int32],) {
  %715 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
  %716 = cast(%var_1980, dtype="int32") /* ty=Tensor[(13, 13, 5), int32] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="int32") /* ty=Tensor[(13, 13, 5), int32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %720 = add(%718, %719) /* ty=Tensor[(13, 13, 5), int32] */;
  (%720,)
}

def @func_3441() -> (Tensor[(13, 13, 5), uint16],) {
  %721 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%721,)
}

def @func_6838() -> Tensor[(13, 13, 5), uint16] {
  @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_2334() -> (Tensor[(13, 13, 5), uint16],) {
  %722 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %723 = %722.0;
  (%723,)
}

def @func_3804() -> (Tensor[(13, 13, 5), uint16],) {
  %724 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %725 = %724.1;
  (%725,)
}

def @func_1404(%var_1374: Tensor[(560), float32]) -> (Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) {
  %726 = cast(%var_1374, dtype="float32") /* ty=Tensor[(560), float32] */;
  %727 = reshape(%726, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %728 = @func_1171(%727) /* ty=(Tensor[(14, 4, 10), float32],) */;
  %729 = cast(meta[relay.Constant][33] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %730 = cast(meta[relay.Constant][33] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %731 = reshape(%729, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %732 = reshape(%730, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %733 = @func_526(%731, %732) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %734 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %735 = %734.0;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %737 = cast(meta[relay.Constant][34] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
  %738 = %733.6;
  %739 = cast(%738, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %740 = reshape(%737, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %741 = reshape(%739, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %742 = @func_1298(%740, %741) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %743 = cast(meta[relay.Constant][34] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
  %744 = cast(%738, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
  %745 = reshape(%743, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
  %746 = reshape(%744, newshape=[847]) /* ty=Tensor[(847), uint16] */;
  %747 = @func_1298(%745, %746) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
  %748 = %728.0;
  %749 = asinh(%736) /* ty=Tensor[(13, 13, 5), float64] */;
  %750 = %742.1;
  %751 = %747.2;
  (%748, %var_1374, %738, meta[relay.Constant][33] /* ty=Tensor[(847), uint16] */, %749, %750, meta[relay.Constant][34] /* ty=Tensor[(60, 14), uint64] */, %751)
}

def @func_4173() -> Tensor[(11, 1155), int8] {
  %752 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
  %752.2
}

def @func_4825(%var_4810: Tensor[(8, 847), float64]) -> (Tensor[(8, 847), int64],) {
  %753 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %756 = log10(%755) /* ty=Tensor[(1, 847), float64] */;
  %757 = cast(%756, dtype="int64") /* ty=Tensor[(1, 847), int64] */;
  %758 = cast(%var_4810, dtype="int64") /* ty=Tensor[(8, 847), int64] */;
  %759 = multiply(%757, %758) /* ty=Tensor[(8, 847), int64] */;
  (%759,)
}

def @func_2415(%var_2394: Tensor[(7, 16, 1), float32], %var_2409: Tensor[(2, 280), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) {
  %760 = cast(%var_2394, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %761 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %762 = cast(%var_2409, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
  %763 = reshape(%762, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %764 = @func_1714(%763) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %765 = acos(%760) /* ty=Tensor[(7, 16, 1), float32] */;
  %766 = %761.0;
  %767 = %764.1;
  (%765, %766, %767, %var_2409)
}

def @func_5981(%var_5928: Tensor[(15, 847), uint16]) -> (Tensor[(15, 847), bool], Tensor[(560), float32], Tensor[(847), uint8]) {
  %768 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %771 = cast(%var_5928, dtype="bool") /* ty=Tensor[(15, 847), bool] */;
  %772 = cast(meta[relay.Constant][35] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %773 = reshape(%772, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %774 = @func_1404(%773) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
  %775 = %774.3;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(847), float32] */;
  %777 = cos(%776) /* ty=Tensor[(847), float32] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(847), float64] */;
  %779 = tan(%778) /* ty=Tensor[(847), float64] */;
  %780 = cast(%777, dtype="uint8") /* ty=Tensor[(847), uint8] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(%779, dtype="uint8") /* ty=Tensor[(847), uint8] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %784 = less_equal(%770, %771) /* ty=Tensor[(15, 847), bool] */;
  %785 = subtract(%782, %783) /* ty=Tensor[(847), uint8] */;
  (%784, meta[relay.Constant][35] /* ty=Tensor[(560), float32] */, %785)
}

def @func_1171(%var_1164: Tensor[(14, 4, 10), float32]) -> (Tensor[(14, 4, 10), float32],) {
  %786 = cast(%var_1164, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %787 = log2(%786) /* ty=Tensor[(14, 4, 10), float32] */;
  (%787,)
}

def @func_6548() -> (Tensor[(13, 13, 5), uint16],) {
  %788 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %789 = %788.0;
  (%789,)
}

def @func_2205() -> (Tensor[(1, 847), uint16],) {
  %790 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
  (%790,)
}

def @func_4633(%var_4614: Tensor[(14, 8, 1), float32], %var_4615: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), uint64], Tensor[(13, 13, 5), uint16]) {
  %791 = cast(%var_4614, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %792 = cast(%var_4615, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %793 = mod(%791, %792) /* ty=Tensor[(14, 8, 5), float32] */;
  %794 = cast(%793, dtype="uint64") /* ty=Tensor[(14, 8, 5), uint64] */;
  %795 = cast(%var_4614, dtype="uint64") /* ty=Tensor[(14, 8, 1), uint64] */;
  %796 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %797 = bitwise_xor(%794, %795) /* ty=Tensor[(14, 8, 5), uint64] */;
  %798 = %796.0;
  (%797, %798)
}

def @func_3352() -> (Tensor[(1, 5082), uint16],) {
  %799 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
  %800 = %799.1;
  (%800,)
}

def @func_5762(%var_5759: Tensor[(9), uint64]) -> (Tensor[(1, 847), uint16], Tensor[(3, 3, 1), uint32], Tensor[(3), uint64], Tensor[(9), uint64]) {
  %801 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %802 = cast(meta[relay.Constant][36] /* ty=Tensor[(3), uint64] */, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %803 = cast(%var_5759, dtype="uint64") /* ty=Tensor[(9), uint64] */;
  %804 = reshape(%802, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %805 = reshape(%803, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %806 = @func_4419(%804, %805) /* ty=(Tensor[(3, 3, 1), uint32],) */;
  %807 = %801.0;
  %808 = %806.0;
  (%807, %808, meta[relay.Constant][36] /* ty=Tensor[(3), uint64] */, %var_5759)
}

def @func_7965() -> (Tensor[(13, 14, 2), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 14, 2), bool]) {
  %809 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 14, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %810 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(13, 14, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 14, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(13, 14, 2), float64] */;
  %814 = atan(%813) /* ty=Tensor[(13, 14, 2), float64] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
  %816 = acosh(%815) /* ty=Tensor[(13, 14, 2), float32] */;
  %817 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 14, 2), bool] */, dtype="uint64") /* ty=Tensor[(13, 14, 2), uint64] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%816, dtype="uint64") /* ty=Tensor[(13, 14, 2), uint64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %821 = left_shift(%819, %820) /* ty=Tensor[(13, 14, 2), uint64] */;
  %822 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 14, 2), uint64] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = logical_and(%811, %812) /* ty=Tensor[(13, 14, 2), bool] */;
  %827 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %828 = logical_or(%824, %825) /* ty=Tensor[(13, 14, 2), bool] */;
  (%826, %827, %828)
}

def @func_8095() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(1, 847), float32]) {
  %829 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %830 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
  %831 = cast(%830, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %832 = %829.1;
  %833 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %834 = sigmoid(%831) /* ty=Tensor[(1, 847), float32] */;
  (%832, %833, %834)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2011(%var_2009: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), int32],) {
  @func_2008(%var_2009) /* ty=(Tensor[(13, 13, 5), int32],) */
}

def @func_2487() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_2519(%var_2511: Tensor[(13, 847), uint16]) -> Tensor[(13, 847), int32] {
  %0 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
  %3 = cast(%var_2511, dtype="int32") /* ty=Tensor[(13, 847), int32] */;
  right_shift(%2, %3) /* ty=Tensor[(13, 847), int32] */
}

def @func_5436(%var_5409: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
  %4 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %5 = cast(%var_5409, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %9 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %10 = power(%7, %8) /* ty=Tensor[(13, 13, 5), float64] */;
  %11 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %12 = %9.0;
  (%10, %11, %12)
}

def @func_6233(%var_6231: Tensor[(7, 847), float32], %var_6232: Tensor[(2541, 5), float32]) -> (Tensor[(2, 847), int32], Tensor[(2, 16, 6), float64], Tensor[(192), float64], Tensor[(7, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(7, 847), bool], Tensor[(242, 21), uint16], Tensor[(2541, 5), float32], Tensor[(1, 847), uint16], Tensor[(560), float32], Tensor[(280, 2), float32], Tensor[(14, 4, 10), float32], Tensor[(?, 847), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(6, 847), uint8], Tensor[(13, 13, 5), uint16]) {
  @func_6229(%var_6231, %var_6232) /* ty=(Tensor[(2, 847), int32], Tensor[(2, 16, 6), float64], Tensor[(192), float64], Tensor[(7, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(7, 847), bool], Tensor[(242, 21), uint16], Tensor[(2541, 5), float32], Tensor[(1, 847), uint16], Tensor[(560), float32], Tensor[(280, 2), float32], Tensor[(14, 4, 10), float32], Tensor[(?, 847), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(6, 847), uint8], Tensor[(13, 13, 5), uint16]) */
}

def @func_4793() -> (Tensor[(1, 847), uint16],) {
  %15 = fn () -> (Tensor[(1, 847), uint16],) {
    %13 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
    %14 = %13.0;
    (%14,)
  };
  %15() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_5126() -> (Tensor[(13, 13, 5), uint16],) {
  %16 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %17 = %16.1;
  (%17,)
}

def @func_1173(%var_1172: Tensor[(14, 4, 10), float32]) -> (Tensor[(14, 4, 10), float32],) {
  %20 = fn (%var_1164: Tensor[(14, 4, 10), float32]) -> (Tensor[(14, 4, 10), float32],) {
    %18 = cast(%var_1164, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
    %19 = log2(%18) /* ty=Tensor[(14, 4, 10), float32] */;
    (%19,)
  };
  %20(%var_1172) /* ty=(Tensor[(14, 4, 10), float32],) */
}

def @func_3883() -> (Tensor[(1, 847), uint16],) {
  %21 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %22 = %21.0;
  (%22,)
}

def @func_5018() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */
}

def @func_6521() -> Tensor[(13, 13, 5), uint16] {
  %23 = @func_4695() /* ty=(Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) */;
  %23.1
}

def @func_4900() -> (Tensor[(13, 13, 5), uint16],) {
  %24 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%24,)
}

def @func_6016() -> Tensor[(1, 847), uint16] {
  @func_3145() /* ty=Tensor[(1, 847), uint16] */
}

def @func_5274(%var_5272: Tensor[(1, 192), int16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), bool], Tensor[(?, 192), float64]) {
  @func_5271(%var_5272) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), bool], Tensor[(?, 192), float64]) */
}

def @func_2918() -> Tensor[(1, 847), float64] {
  %27 = fn () -> Tensor[(1, 847), float64] {
    %25 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
    %26 = cast(%25, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
    erf(%26) /* ty=Tensor[(1, 847), float64] */
  };
  %27() /* ty=Tensor[(1, 847), float64] */
}

def @func_6368() -> (Tensor[(13, 13, 5), uint16],) {
  %28 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %29 = %28.0;
  (%29,)
}

def @func_1849() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %30 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %31 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %32 = %30.0;
  %33 = %31.0;
  (%32, %33)
}

def @func_7180(%var_7178: Tensor[(12, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) {
  @func_7177(%var_7178) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) */
}

def @func_7965() -> (Tensor[(13, 14, 2), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 14, 2), bool]) {
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %35 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(13, 14, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 14, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(13, 14, 2), float64] */;
  %39 = atan(%38) /* ty=Tensor[(13, 14, 2), float64] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
  %41 = acosh(%40) /* ty=Tensor[(13, 14, 2), float32] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 2), bool] */, dtype="uint64") /* ty=Tensor[(13, 14, 2), uint64] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="uint64") /* ty=Tensor[(13, 14, 2), uint64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %46 = left_shift(%44, %45) /* ty=Tensor[(13, 14, 2), uint64] */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 14, 2), uint64] */, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = logical_and(%36, %37) /* ty=Tensor[(13, 14, 2), bool] */;
  %52 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %53 = logical_or(%49, %50) /* ty=Tensor[(13, 14, 2), bool] */;
  (%51, %52, %53)
}

def @func_4164() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32]) {
  %59 = fn () -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32]) {
    %54 = @func_2970() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %55 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
    %56 = cast(%55, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
    %57 = %54.0;
    %58 = sin(%56) /* ty=Tensor[(13, 13, 5), float32] */;
    (%57, %58)
  };
  %59() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32]) */
}

def @func_4259() -> Tensor[(13, 13, 5), uint16] {
  %60 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %60.0
}

def @func_2832(%var_2831: Tensor[(11, 77), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(847), uint16], Tensor[(840), uint64], Tensor[(11, 77), uint16]) {
  %71 = fn (%var_2827: Tensor[(11, 77), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(847), uint16], Tensor[(840), uint64], Tensor[(11, 77), uint16]) {
    %61 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %62 = %61.1;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %65 = cast(%var_2827, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %66 = reshape(%64, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %67 = reshape(%65, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %68 = @func_1298(%66, %67) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %69 = acos(%63) /* ty=Tensor[(13, 13, 5), float64] */;
    %70 = %68.2;
    (%69, %70, meta[relay.Constant][3] /* ty=Tensor[(840), uint64] */, %var_2827)
  };
  %71(%var_2831) /* ty=(Tensor[(13, 13, 5), float64], Tensor[(847), uint16], Tensor[(840), uint64], Tensor[(11, 77), uint16]) */
}

def @func_5983(%var_5982: Tensor[(15, 847), uint16]) -> (Tensor[(15, 847), bool], Tensor[(560), float32], Tensor[(847), uint8]) {
  %90 = fn (%var_5928: Tensor[(15, 847), uint16]) -> (Tensor[(15, 847), bool], Tensor[(560), float32], Tensor[(847), uint8]) {
    %72 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
    %73 = %72.0;
    %74 = cast(%73, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
    %75 = cast(%var_5928, dtype="bool") /* ty=Tensor[(15, 847), bool] */;
    %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %77 = reshape(%76, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %78 = @func_1404(%77) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
    %79 = %78.3;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(847), float32] */;
    %81 = cos(%80) /* ty=Tensor[(847), float32] */;
    %82 = cast(%81, dtype="float64") /* ty=Tensor[(847), float64] */;
    %83 = tan(%82) /* ty=Tensor[(847), float64] */;
    %84 = cast(%81, dtype="uint8") /* ty=Tensor[(847), uint8] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(1), int32] */;
    %86 = cast(%83, dtype="uint8") /* ty=Tensor[(847), uint8] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %88 = less_equal(%74, %75) /* ty=Tensor[(15, 847), bool] */;
    %89 = subtract(%86, %87) /* ty=Tensor[(847), uint8] */;
    (%88, meta[relay.Constant][4] /* ty=Tensor[(560), float32] */, %89)
  };
  %90(%var_5982) /* ty=(Tensor[(15, 847), bool], Tensor[(560), float32], Tensor[(847), uint8]) */
}

def @func_3654(%var_3582: Tensor[(560), float32], %var_3593: Tensor[(7, 847), uint16], %var_3609: Tensor[(11011), uint16], %var_3624: Tensor[(11011), uint16], %var_3636: Tensor[(7, 847), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(7, 847), uint8], Tensor[(13, 847), int32], Tensor[(13, 13, 5), uint16], Tensor[(11011), int16], Tensor[(7, 847), uint32], Tensor[(28, 4), float64]) {
  %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %92 = cast(%var_3582, dtype="float32") /* ty=Tensor[(560), float32] */;
  %93 = reshape(%91, newshape=[7, 16, 1]) /* ty=Tensor[(7, 16, 1), float32] */;
  %94 = reshape(%92, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %95 = @func_2415(%93, %94) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) */;
  %96 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
  %97 = cast(%96, dtype="uint8") /* ty=Tensor[(1, 847), uint8] */;
  %98 = cast(%var_3593, dtype="uint8") /* ty=Tensor[(7, 847), uint8] */;
  %99 = cast(%var_3609, dtype="uint16") /* ty=Tensor[(11011), uint16] */;
  %100 = reshape(%99, newshape=[13, 847]) /* ty=Tensor[(13, 847), uint16] */;
  %101 = @func_3052() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %102 = cast(%var_3624, dtype="int16") /* ty=Tensor[(11011), int16] */;
  %103 = shape_of(%var_3609, dtype="int32") /* ty=Tensor[(1), int32] */;
  %104 = cast(%var_3609, dtype="int16") /* ty=Tensor[(11011), int16] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?), int16] */;
  %106 = cast(%var_3636, dtype="uint32") /* ty=Tensor[(7, 847), uint32] */;
  %107 = shape_of(%var_3593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%var_3593, dtype="uint32") /* ty=Tensor[(7, 847), uint32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(28, 4), float32] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %111 = %95.1;
  %112 = bitwise_xor(%97, %98) /* ty=Tensor[(7, 847), uint8] */;
  %113 = @func_2519(%100) /* ty=Tensor[(13, 847), int32] */;
  %114 = %101.0;
  %115 = subtract(%104, %105) /* ty=Tensor[(11011), int16] */;
  %116 = add(%108, %109) /* ty=Tensor[(7, 847), uint32] */;
  %117 = cosh(%110) /* ty=Tensor[(28, 4), float64] */;
  (%111, %var_3582, %112, %113, %114, %115, %116, %117)
}

def @func_3805() -> (Tensor[(13, 13, 5), uint16],) {
  %120 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %118 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %119 = %118.1;
    (%119,)
  };
  %120() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_1593() -> (Tensor[(13, 13, 5), uint16],) {
  @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_5704(%var_5688: Tensor[(5082), uint16], %var_5689: Tensor[(12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  %121 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %122 = cast(%var_5688, dtype="uint16") /* ty=Tensor[(5082), uint16] */;
  %123 = cast(%var_5689, dtype="float32") /* ty=Tensor[(12705), float32] */;
  %124 = reshape(%122, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %125 = reshape(%123, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %126 = @func_2116(%124, %125) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %127 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %128 = %121.0;
  %129 = %126.0;
  (%127, %128, %129, %var_5688, %var_5689)
}

def @func_7080() -> Tensor[(1, 847), uint16] {
  @func_1811() /* ty=Tensor[(1, 847), uint16] */
}

def @func_5368(%var_5367: Tensor[(280, 2), float32]) -> (Tensor[(1, 847), uint16], Tensor[(14, 4, 10), float32], Tensor[(280, 2), float32]) {
  %136 = fn (%var_5362: Tensor[(280, 2), float32]) -> (Tensor[(1, 847), uint16], Tensor[(14, 4, 10), float32], Tensor[(280, 2), float32]) {
    %130 = @func_4942() /* ty=(Tensor[(1, 847), uint16],) */;
    %131 = cast(%var_5362, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
    %132 = reshape(%131, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %133 = @func_1171(%132) /* ty=(Tensor[(14, 4, 10), float32],) */;
    %134 = %130.0;
    %135 = %133.0;
    (%134, %135, %var_5362)
  };
  %136(%var_5367) /* ty=(Tensor[(1, 847), uint16], Tensor[(14, 4, 10), float32], Tensor[(280, 2), float32]) */
}

def @func_2550() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_6480() -> (Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  @func_6478() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */
}

def @func_3680() -> (Tensor[(13, 13, 5), uint16],) {
  %137 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %138 = %137.1;
  (%138,)
}

def @func_4345() -> (Tensor[(13, 13, 5), uint16],) {
  %141 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %139 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %140 = %139.0;
    (%140,)
  };
  %141() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_6549() -> (Tensor[(13, 13, 5), uint16],) {
  %144 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %142 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %143 = %142.0;
    (%143,)
  };
  %144() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_4541() -> Tensor[(1, 847), float64] {
  @func_2917() /* ty=Tensor[(1, 847), float64] */
}

def @func_6839() -> Tensor[(13, 13, 5), uint16] {
  %145 = fn () -> Tensor[(13, 13, 5), uint16] {
    @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */
  };
  %145() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_4526() -> Tensor[(13, 13, 5), uint16] {
  %147 = fn () -> Tensor[(13, 13, 5), uint16] {
    %146 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %146.0
  };
  %147() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_7449(%var_7448: Tensor[(10, 16, 8), float32]) -> (Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) {
  %157 = fn (%var_7411: Tensor[(10, 16, 8), float32]) -> (Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) {
    %148 = cast(%var_7411, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
    %149 = exp(%148) /* ty=Tensor[(10, 16, 8), float32] */;
    %150 = cast(%var_7411, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
    %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%149, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %154 = @func_4084() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) */;
    %155 = floor_mod(%152, %153) /* ty=Tensor[(10, 16, 8), float64] */;
    %156 = %154.0;
    (%155, %156)
  };
  %157(%var_7448) /* ty=(Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) */
}

def @func_1948() -> Tensor[(13, 13, 5), uint16] {
  %158 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %158.0
}

def @func_5191() -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) {
  %172 = fn () -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) {
    %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
    %160 = reshape(%159, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float64] */;
    %161 = @func_2625(%160) /* ty=(Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */;
    %162 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
    %163 = rsqrt(%162) /* ty=Tensor[(1, 192), float32] */;
    %164 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
    %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(2), int32] */;
    %166 = cast(%163, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %168 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
    %169 = %161.2;
    %170 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
    %171 = left_shift(%166, %167) /* ty=Tensor[(?, 192), int16] */;
    (%168, %169, %170, %171)
  };
  %172() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) */
}

def @func_5762(%var_5759: Tensor[(9), uint64]) -> (Tensor[(1, 847), uint16], Tensor[(3, 3, 1), uint32], Tensor[(3), uint64], Tensor[(9), uint64]) {
  %173 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(3), uint64] */, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %175 = cast(%var_5759, dtype="uint64") /* ty=Tensor[(9), uint64] */;
  %176 = reshape(%174, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %177 = reshape(%175, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %178 = @func_4419(%176, %177) /* ty=(Tensor[(3, 3, 1), uint32],) */;
  %179 = %173.0;
  %180 = %178.0;
  (%179, %180, meta[relay.Constant][7] /* ty=Tensor[(3), uint64] */, %var_5759)
}

def @func_7831() -> (Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int32], Tensor[(13, 13, 5), uint16], Tensor[(64, 20), float32], Tensor[(5082), uint16], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  %181 = @func_4965() /* ty=(Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) */;
  %182 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %183 = @func_4518() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %186 = reshape(%185, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %187 = @func_2008(%186) /* ty=(Tensor[(13, 13, 5), int32],) */;
  %188 = cast(meta[relay.Constant][8] /* ty=Tensor[(64, 20), float32] */, dtype="float32") /* ty=Tensor[(64, 20), float32] */;
  %189 = reshape(%188, newshape=[10, 16, 8]) /* ty=Tensor[(10, 16, 8), float32] */;
  %190 = @func_7447(%189) /* ty=(Tensor[(10, 16, 8), float64], Tensor[(13, 13, 5), uint16]) */;
  %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(5082), uint16] */, dtype="uint16") /* ty=Tensor[(5082), uint16] */;
  %192 = cast(meta[relay.Constant][10] /* ty=Tensor[(12705), float32] */, dtype="float32") /* ty=Tensor[(12705), float32] */;
  %193 = reshape(%191, newshape=[5082]) /* ty=Tensor[(5082), uint16] */;
  %194 = reshape(%192, newshape=[12705]) /* ty=Tensor[(12705), float32] */;
  %195 = @func_5704(%193, %194) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) */;
  %196 = %181.0;
  %197 = %182.0;
  %198 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %199 = %187.0;
  %200 = %190.1;
  %201 = %195.3;
  (%196, %197, %198, %184, %199, %200, meta[relay.Constant][8] /* ty=Tensor[(64, 20), float32] */, %201, meta[relay.Constant][9] /* ty=Tensor[(5082), uint16] */, meta[relay.Constant][10] /* ty=Tensor[(12705), float32] */)
}

def @func_6307() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
  %206 = fn () -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
    %202 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %203 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
    %204 = %202.0;
    %205 = %203.0;
    (%204, %205)
  };
  %206() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) */
}

def @func_3352() -> (Tensor[(1, 5082), uint16],) {
  %207 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
  %208 = %207.1;
  (%208,)
}

def @func_5271(%var_5246: Tensor[(1, 192), int16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), bool], Tensor[(?, 192), float64]) {
  %209 = @func_5190() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) */;
  %210 = %209.3;
  %211 = cast(%var_5246, dtype="bool") /* ty=Tensor[(1, 192), bool] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(2), int32] */;
  %213 = cast(%210, dtype="bool") /* ty=Tensor[(?, 192), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %215 = cast(%210, dtype="float32") /* ty=Tensor[(?, 192), float32] */;
  %216 = log10(%215) /* ty=Tensor[(?, 192), float32] */;
  %217 = cast(%var_5246, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
  %219 = cast(%216, dtype="float64") /* ty=Tensor[(?, 192), float64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %221 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %222 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %223 = logical_and(%213, %214) /* ty=Tensor[(?, 192), bool] */;
  %224 = power(%219, %220) /* ty=Tensor[(?, 192), float64] */;
  (%221, %222, %223, %224)
}

def @func_6877() -> Tensor[(13, 13, 5), uint16] {
  %225 = fn () -> Tensor[(13, 13, 5), uint16] {
    @func_6521() /* ty=Tensor[(13, 13, 5), uint16] */
  };
  %225() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_7046(%var_7026: Tensor[(847), uint16]) -> Tensor[(847), bool] {
  %226 = @func_5901() /* ty=(Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) */;
  %227 = %226.1;
  %228 = cast(%var_7026, dtype="bool") /* ty=Tensor[(847), bool] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(1), int32] */;
  %230 = cast(%227, dtype="bool") /* ty=Tensor[(847), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%230, %231) /* ty=Tensor[(847), bool] */
}

def @func_7241(%var_7211: Tensor[(1, 12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 462), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 12705), bool]) {
  %232 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 462), uint16] */, dtype="uint16") /* ty=Tensor[(11, 462), uint16] */;
  %234 = cast(%var_7211, dtype="float32") /* ty=Tensor[(1, 12705), float32] */;
  %235 = reshape(%233, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %236 = reshape(%234, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %237 = @func_2116(%235, %236) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %238 = cast(%var_7211, dtype="float64") /* ty=Tensor[(1, 12705), float64] */;
  %239 = sinh(%238) /* ty=Tensor[(1, 12705), float64] */;
  %240 = cast(%var_7211, dtype="uint64") /* ty=Tensor[(1, 12705), uint64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(2), int32] */;
  %242 = cast(%239, dtype="uint64") /* ty=Tensor[(1, 12705), uint64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %244 = left_shift(%242, %243) /* ty=Tensor[(?, 12705), uint64] */;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(?, 12705), bool] */;
  %246 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(2), int32] */;
  %247 = cast(%var_7211, dtype="bool") /* ty=Tensor[(1, 12705), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %249 = %232.0;
  %250 = %237.5;
  %251 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %252 = logical_and(%247, %248) /* ty=Tensor[(?, 12705), bool] */;
  (%249, %250, meta[relay.Constant][11] /* ty=Tensor[(11, 462), uint16] */, %251, %252)
}

def @func_3661(%var_3656: Tensor[(560), float32], %var_3657: Tensor[(7, 847), uint16], %var_3658: Tensor[(11011), uint16], %var_3659: Tensor[(11011), uint16], %var_3660: Tensor[(7, 847), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(7, 847), uint8], Tensor[(13, 847), int32], Tensor[(13, 13, 5), uint16], Tensor[(11011), int16], Tensor[(7, 847), uint32], Tensor[(28, 4), float64]) {
  @func_3654(%var_3656, %var_3657, %var_3658, %var_3659, %var_3660) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(7, 847), uint8], Tensor[(13, 847), int32], Tensor[(13, 13, 5), uint16], Tensor[(11011), int16], Tensor[(7, 847), uint32], Tensor[(28, 4), float64]) */
}

def @func_5765(%var_5763: Tensor[(9), uint64]) -> (Tensor[(1, 847), uint16], Tensor[(3, 3, 1), uint32], Tensor[(3), uint64], Tensor[(9), uint64]) {
  @func_5762(%var_5763) /* ty=(Tensor[(1, 847), uint16], Tensor[(3, 3, 1), uint32], Tensor[(3), uint64], Tensor[(9), uint64]) */
}

def @func_7116(%var_7088: bool, %var_7089: Tensor[(16, 12, 1), bool]) -> (Tensor[(16, 12, 1), bool], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
  %253 = cast(%var_7088, dtype="bool") /* ty=bool */;
  %254 = cast(%var_7089, dtype="bool") /* ty=Tensor[(16, 12, 1), bool] */;
  %255 = cast(meta[relay.Constant][12] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %256 = reshape(%255, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
  %257 = @func_1648(%256) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
  %258 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %259 = logical_or(%253, %254) /* ty=Tensor[(16, 12, 1), bool] */;
  %260 = @func_5074() /* ty=Tensor[(13, 13, 5), uint16] */;
  %261 = %257.2;
  %262 = %258.3;
  (%259, %260, %261, meta[relay.Constant][12] /* ty=Tensor[(560), float32] */, %262)
}

def @func_3533(%var_3520: Tensor[(2, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) {
  %263 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="bool") /* ty=Tensor[(1, 5082), bool] */;
  %266 = cast(%var_3520, dtype="bool") /* ty=Tensor[(2, 5082), bool] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %268 = tan(%267) /* ty=Tensor[(1, 5082), float64] */;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %271 = reshape(%270, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %272 = @func_1714(%271) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %273 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %274 = logical_or(%265, %266) /* ty=Tensor[(2, 5082), bool] */;
  %275 = sigmoid(%269) /* ty=Tensor[(1, 5082), float64] */;
  %276 = %272.1;
  (%273, %274, %275, %276, meta[relay.Constant][13] /* ty=Tensor[(560), float32] */)
}

def @func_2008(%var_1980: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), int32],) {
  %277 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
  %278 = cast(%var_1980, dtype="int32") /* ty=Tensor[(13, 13, 5), int32] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="int32") /* ty=Tensor[(13, 13, 5), int32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %282 = add(%280, %281) /* ty=Tensor[(13, 13, 5), int32] */;
  (%282,)
}

def @func_3441() -> (Tensor[(13, 13, 5), uint16],) {
  %283 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%283,)
}

def @func_4543() -> Tensor[(1, 847), float64] {
  @func_4541() /* ty=Tensor[(1, 847), float64] */
}

def @func_3354() -> (Tensor[(1, 5082), uint16],) {
  @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */
}

def @func_1851() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_2970() -> (Tensor[(13, 13, 5), uint16],) {
  %284 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%284,)
}

def @func_6742(%var_6741: Tensor[(13, 5082), uint16]) -> Tensor[(13, 5082), bool] {
  %289 = fn (%var_6735: Tensor[(13, 5082), uint16]) -> Tensor[(13, 5082), bool] {
    %285 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
    %286 = %285.0;
    %287 = cast(%286, dtype="bool") /* ty=Tensor[(1, 5082), bool] */;
    %288 = cast(%var_6735, dtype="bool") /* ty=Tensor[(13, 5082), bool] */;
    not_equal(%287, %288) /* ty=Tensor[(13, 5082), bool] */
  };
  %289(%var_6741) /* ty=Tensor[(13, 5082), bool] */
}

def @func_6592() -> (Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) {
  %290 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %291 = %290.1;
  %292 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
  (%291, %292)
}

def @func_6789(%var_6788: Tensor[(6, 140), uint64]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(6, 140), uint64], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16]) {
  %305 = fn (%var_6767: Tensor[(6, 140), uint64]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(6, 140), uint64], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16]) {
    %293 = @func_3052() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %294 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %295 = cast(%var_6767, dtype="uint64") /* ty=Tensor[(6, 140), uint64] */;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %297 = reshape(%295, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %298 = reshape(%296, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %299 = @func_1298(%297, %298) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %300 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %301 = %293.0;
    %302 = %294.0;
    %303 = %299.1;
    %304 = %300.0;
    (%301, %302, %303, %var_6767, meta[relay.Constant][14] /* ty=Tensor[(847), uint16] */, %304)
  };
  %305(%var_6788) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(6, 140), uint64], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_5078() -> (Tensor[(13, 13, 5), uint16],) {
  %306 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %307 = %306.0;
  (%307,)
}

def @func_8095() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(1, 847), float32]) {
  %308 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %309 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %311 = %308.1;
  %312 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %313 = sigmoid(%310) /* ty=Tensor[(1, 847), float32] */;
  (%311, %312, %313)
}

def @func_2206() -> (Tensor[(1, 847), uint16],) {
  %315 = fn () -> (Tensor[(1, 847), uint16],) {
    %314 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_4696() -> (Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) {
  %325 = fn () -> (Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) {
    %316 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
    %317 = @func_3680() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %318 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
    %319 = cast(%318, dtype="float64") /* ty=Tensor[(11, 1155), float64] */;
    %320 = tan(%319) /* ty=Tensor[(11, 1155), float64] */;
    %321 = cast(%320, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
    %322 = %316.0;
    %323 = %317.0;
    %324 = sin(%321) /* ty=Tensor[(11, 1155), float32] */;
    (%322, %323, %324)
  };
  %325() /* ty=(Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), float32]) */
}

def @func_6729() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %329 = fn () -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
    %326 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
    %327 = @func_4259() /* ty=Tensor[(13, 13, 5), uint16] */;
    %328 = %326.2;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */
}

def @func_5080() -> (Tensor[(13, 13, 5), uint16],) {
  @func_5078() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_7576() -> (Tensor[(11, 1155), int64], Tensor[(11, 1155), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %348 = fn () -> (Tensor[(11, 1155), int64], Tensor[(11, 1155), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
    %330 = @func_6592() /* ty=(Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) */;
    %331 = %330.1;
    %332 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1155), int8] */, dtype="int64") /* ty=Tensor[(11, 1155), int64] */;
    %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(2), int32] */;
    %334 = cast(%331, dtype="int64") /* ty=Tensor[(11, 1155), int64] */;
    %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1155), int8] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
    %337 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %338 = @func_3145() /* ty=Tensor[(1, 847), uint16] */;
    %339 = cast(%338, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
    %340 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %341 = bitwise_or(%334, %335) /* ty=Tensor[(11, 1155), int64] */;
    %342 = sqrt(%336) /* ty=Tensor[(11, 1155), float32] */;
    %343 = %337.0;
    %344 = acos(%339) /* ty=Tensor[(1, 847), float64] */;
    %345 = @func_6521() /* ty=Tensor[(13, 13, 5), uint16] */;
    %346 = @func_6746() /* ty=Tensor[(13, 13, 5), uint16] */;
    %347 = %340.0;
    (%341, %342, %343, %344, %345, %346, %347)
  };
  %348() /* ty=(Tensor[(11, 1155), int64], Tensor[(11, 1155), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_3361() -> Tensor[(13, 13, 5), uint16] {
  @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_2485() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %349 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %350 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %351 = %349.3;
  %352 = %350.0;
  (%351, %352)
}

def @func_2769() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) {
  %353 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %354 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %355 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %356 = reshape(%354, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %357 = reshape(%355, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %358 = @func_2116(%356, %357) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %359 = %358.4;
  %360 = cast(%359, dtype="int8") /* ty=Tensor[(15, 847), int8] */;
  %361 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 1155), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %362 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 1155), float32] */, dtype="int8") /* ty=Tensor[(11, 1155), int8] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %364 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %365 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %366 = reshape(%364, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %367 = reshape(%365, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %368 = @func_2116(%366, %367) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %369 = %368.3;
  %370 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 1155), float32] */, dtype="float32") /* ty=Tensor[(11, 1155), float32] */;
  %372 = reshape(%370, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %373 = reshape(%371, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %374 = @func_2116(%372, %373) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %375 = %374.2;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %377 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%369, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %380 = %353.0;
  %381 = left_shift(%362, %363) /* ty=Tensor[(11, 1155), int8] */;
  %382 = divide(%378, %379) /* ty=Tensor[(13, 13, 5), float64] */;
  (%380, meta[relay.Constant][16] /* ty=Tensor[(1, 5082), uint16] */, %381, %382)
}

def @func_1754() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) {
  @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_3359() -> Tensor[(13, 13, 5), uint16] {
  %383 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %383.0
}

def @func_1786() -> Tensor[(13, 13, 5), uint16] {
  %385 = fn () -> Tensor[(13, 13, 5), uint16] {
    %384 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %384.0
  };
  %385() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_162(%var_160: Tensor[(11, 7, 11), uint16], %var_161: Tensor[(11, 7, 11), uint16]) -> (Tensor[(11, 7, 11), uint16],) {
  %391 = fn (%var_154: Tensor[(11, 7, 11), uint16], %var_155: Tensor[(11, 7, 11), uint16]) -> (Tensor[(11, 7, 11), uint16],) {
    %386 = cast(%var_155, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %387 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(%var_154, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %390 = minimum(%388, %389) /* ty=Tensor[(11, 7, 11), uint16] */;
    (%390,)
  };
  %391(%var_160, %var_161) /* ty=(Tensor[(11, 7, 11), uint16],) */
}

def @func_3443() -> (Tensor[(13, 13, 5), uint16],) {
  @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_1302(%var_1300: Tensor[(4, 14, 15), uint64], %var_1301: Tensor[(847), uint16]) -> (Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) {
  @func_1298(%var_1300, %var_1301) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */
}

def @func_2522(%var_2520: Tensor[(13, 847), uint16]) -> Tensor[(13, 847), int32] {
  @func_2519(%var_2520) /* ty=Tensor[(13, 847), int32] */
}

def @func_5118() -> (Tensor[(13, 13, 5), uint16],) {
  %392 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%392,)
}

def @func_2116(%var_2053: Tensor[(6, 847), uint16], %var_2071: Tensor[(15, 847), float32]) -> (Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) {
  %393 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %394 = %393.2;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %396 = cast(%var_2053, dtype="bool") /* ty=Tensor[(6, 847), bool] */;
  %397 = cast(%394, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %398 = cast(%394, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %399 = reshape(%397, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %400 = reshape(%398, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
  %401 = @func_159(%399, %400) /* ty=(Tensor[(11, 7, 11), uint16],) */;
  %402 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %403 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %404 = cast(%394, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %405 = cosh(%404) /* ty=Tensor[(1, 847), float64] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %407 = asin(%406) /* ty=Tensor[(1, 847), float32] */;
  %408 = cast(%407, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %409 = cast(%var_2071, dtype="bool") /* ty=Tensor[(15, 847), bool] */;
  %410 = logical_and(%408, %409) /* ty=Tensor[(15, 847), bool] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(15, 847), float32] */;
  %412 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %413 = less_equal(%395, %396) /* ty=Tensor[(6, 847), bool] */;
  %414 = %401.0;
  %415 = %402.0;
  %416 = %403.1;
  %417 = sin(%411) /* ty=Tensor[(15, 847), float32] */;
  %418 = %412.0;
  (%413, %414, %415, %416, %417, %418)
}

def @func_7120(%var_7118: bool, %var_7119: Tensor[(16, 12, 1), bool]) -> (Tensor[(16, 12, 1), bool], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
  @func_7116(%var_7118, %var_7119) /* ty=(Tensor[(16, 12, 1), bool], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */
}

def @func_7967() -> (Tensor[(13, 14, 2), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 14, 2), bool]) {
  @func_7965() /* ty=(Tensor[(13, 14, 2), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 14, 2), bool]) */
}

def @func_7980() -> (Tensor[(13, 13, 5), uint16],) {
  @func_7978() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_8097() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(1, 847), float32]) {
  @func_8095() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(1, 847), float32]) */
}

def @func_4323() -> (Tensor[(15, 5082), float32],) {
  %419 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(1, 5082), float32] */;
  %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 5082), uint16] */, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
  %423 = divide(%421, %422) /* ty=Tensor[(15, 5082), float32] */;
  (%423,)
}

def @main(%var_8118: Tensor[(5, 847), uint16], %var_8126: Tensor[(5, 847), uint16]) -> (Tensor[(1, 847), float64], Tensor[(5, 847), float64], Tensor[(5, 847), bool]) {
  %424 = @func_7080() /* ty=Tensor[(1, 847), uint16] */;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %426 = cast(%424, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %427 = cast(%var_8118, dtype="float64") /* ty=Tensor[(5, 847), float64] */;
  %428 = cast(%var_8126, dtype="bool") /* ty=Tensor[(5, 847), bool] */;
  %429 = shape_of(%var_8118, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(%var_8118, dtype="bool") /* ty=Tensor[(5, 847), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %432 = log2(%425) /* ty=Tensor[(1, 847), float64] */;
  %433 = floor_mod(%426, %427) /* ty=Tensor[(5, 847), float64] */;
  %434 = less_equal(%430, %431) /* ty=Tensor[(5, 847), bool] */;
  (%432, %433, %434)
}

def @func_2771() -> (Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) {
  @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */
}

def @func_5579(%var_5577: Tensor[(847), uint16], %var_5578: Tensor[(12705), float32]) -> (Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(12705), float32], Tensor[(13, 13, 5), uint16], Tensor[(15, 5082), bool]) {
  %470 = fn (%var_5527: Tensor[(847), uint16], %var_5554: Tensor[(12705), float32]) -> (Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(12705), float32], Tensor[(13, 13, 5), uint16], Tensor[(15, 5082), bool]) {
    %435 = cast(%var_5527, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %436 = cast(%var_5527, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %437 = reshape(%435, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %438 = reshape(%436, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %439 = @func_159(%437, %438) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %440 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 5082), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5082), uint16] */;
    %441 = cast(%var_5554, dtype="float32") /* ty=Tensor[(12705), float32] */;
    %442 = reshape(%440, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
    %443 = reshape(%441, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
    %444 = @func_2116(%442, %443) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
    %445 = @func_5078() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %446 = @func_4323() /* ty=(Tensor[(15, 5082), float32],) */;
    %447 = %446.0;
    %448 = cast(%447, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
    %449 = sin(%448) /* ty=Tensor[(15, 5082), float32] */;
    %450 = cast(%449, dtype="float32") /* ty=Tensor[(15, 5082), float32] */;
    %451 = tan(%450) /* ty=Tensor[(15, 5082), float32] */;
    %452 = cast(%449, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
    %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(2), int32] */;
    %454 = cast(%451, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %456 = less_equal(%454, %455) /* ty=Tensor[(15, 5082), bool] */;
    %457 = cast(%449, dtype="int32") /* ty=Tensor[(15, 5082), int32] */;
    %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(2), int32] */;
    %459 = cast(%456, dtype="int32") /* ty=Tensor[(15, 5082), int32] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %461 = logical_xor(%459, %460) /* ty=Tensor[(15, 5082), int32] */;
    %462 = cast(%449, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(2), int32] */;
    %464 = cast(%461, dtype="bool") /* ty=Tensor[(15, 5082), bool] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %466 = %439.0;
    %467 = %444.2;
    %468 = %445.0;
    %469 = not_equal(%464, %465) /* ty=Tensor[(15, 5082), bool] */;
    (%466, %var_5527, %467, meta[relay.Constant][19] /* ty=Tensor[(1, 5082), uint16] */, %var_5554, %468, %469)
  };
  %470(%var_5577, %var_5578) /* ty=(Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(12705), float32], Tensor[(13, 13, 5), uint16], Tensor[(15, 5082), bool]) */
}

def @func_1650(%var_1649: Tensor[(2, 280), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) {
  %477 = fn (%var_1636: Tensor[(2, 280), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) {
    %471 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %472 = cast(%var_1636, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
    %473 = reshape(%472, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %474 = @func_1171(%473) /* ty=(Tensor[(14, 4, 10), float32],) */;
    %475 = %471.0;
    %476 = %474.0;
    (%475, %476, %var_1636)
  };
  %477(%var_1649) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */
}

def @func_4086() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) {
  @func_4084() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) */
}

def @func_7049(%var_7047: Tensor[(847), uint16]) -> Tensor[(847), bool] {
  @func_7046(%var_7047) /* ty=Tensor[(847), bool] */
}

def @func_4944() -> (Tensor[(1, 847), uint16],) {
  @func_4942() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_1812() -> Tensor[(1, 847), uint16] {
  %479 = fn () -> Tensor[(1, 847), uint16] {
    %478 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
    %478.2
  };
  %479() /* ty=Tensor[(1, 847), uint16] */
}

def @func_6594() -> (Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) {
  @func_6592() /* ty=(Tensor[(11, 1155), int8], Tensor[(11, 1155), int8]) */
}

def @func_1716(%var_1715: Tensor[(560), float32]) -> (Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) {
  %491 = fn (%var_1697: Tensor[(560), float32]) -> (Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) {
    %480 = cast(%var_1697, dtype="float32") /* ty=Tensor[(560), float32] */;
    %481 = reshape(%480, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %482 = @func_1404(%481) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
    %483 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %484 = %483.0;
    %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 13, 5), uint16] */, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
    %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %487 = cast(%484, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %489 = %482.6;
    %490 = greater(%487, %488) /* ty=Tensor[(13, 13, 5), bool] */;
    (%489, %var_1697, %490)
  };
  %491(%var_1715) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */
}

def @func_4084() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int8], Tensor[(1, 5082), uint16]) {
  %492 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %494 = atanh(%493) /* ty=Tensor[(13, 13, 5), float32] */;
  %495 = cast(%492, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %499 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %500 = @func_2632() /* ty=Tensor[(13, 13, 5), uint16] */;
  %501 = maximum(%497, %498) /* ty=Tensor[(13, 13, 5), int8] */;
  %502 = %499.0;
  (%500, %501, %502)
}

def @func_7833() -> (Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int32], Tensor[(13, 13, 5), uint16], Tensor[(64, 20), float32], Tensor[(5082), uint16], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  @func_7831() /* ty=(Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), int32], Tensor[(13, 13, 5), uint16], Tensor[(64, 20), float32], Tensor[(5082), uint16], Tensor[(5082), uint16], Tensor[(12705), float32]) */
}

def @func_3885() -> (Tensor[(1, 847), uint16],) {
  @func_3883() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_2972() -> (Tensor[(13, 13, 5), uint16],) {
  @func_2970() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_4762() -> (Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) {
  %512 = fn () -> (Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) {
    %503 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
    %504 = @func_2917() /* ty=Tensor[(1, 847), float64] */;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
    %506 = cast(meta[relay.Constant][21] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %507 = reshape(%506, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %508 = @func_1714(%507) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
    %509 = %503.1;
    %510 = cos(%505) /* ty=Tensor[(1, 847), float32] */;
    %511 = %508.2;
    (%509, %510, %511, meta[relay.Constant][21] /* ty=Tensor[(560), float32] */)
  };
  %512() /* ty=(Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) */
}

def @func_6523() -> Tensor[(13, 13, 5), uint16] {
  @func_6521() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_7000() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %513 = @func_5118() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %514 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %515 = %513.0;
  %516 = %514.1;
  (%515, %516)
}

def @func_5016() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %517 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %518 = %517.0;
  %519 = @func_4173() /* ty=Tensor[(11, 1155), int8] */;
  (%518, %519)
}

def @func_7385() -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64], Tensor[(60984), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %533 = fn () -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64], Tensor[(60984), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
    %520 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
    %521 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %524 = cast(meta[relay.Constant][22] /* ty=Tensor[(60984), uint16] */, dtype="uint16") /* ty=Tensor[(60984), uint16] */;
    %525 = reshape(%524, newshape=[12, 5082]) /* ty=Tensor[(12, 5082), uint16] */;
    %526 = @func_7177(%525) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) */;
    %527 = %520.0;
    %528 = sinh(%523) /* ty=Tensor[(13, 13, 5), float64] */;
    %529 = @func_6746() /* ty=Tensor[(13, 13, 5), uint16] */;
    %530 = %526.1;
    %531 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
    %532 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
    (%527, %528, %529, %530, meta[relay.Constant][22] /* ty=Tensor[(60984), uint16] */, %531, %532)
  };
  %533() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64], Tensor[(60984), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */
}

def @func_1950() -> Tensor[(13, 13, 5), uint16] {
  @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_4243() -> (Tensor[(1, 847), uint16],) {
  @func_4241() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_2548() -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) {
  %534 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %535 = %534.0;
  %536 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%535, %536)
}

def @func_1406(%var_1405: Tensor[(560), float32]) -> (Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) {
  %563 = fn (%var_1374: Tensor[(560), float32]) -> (Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) {
    %537 = cast(%var_1374, dtype="float32") /* ty=Tensor[(560), float32] */;
    %538 = reshape(%537, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %539 = @func_1171(%538) /* ty=(Tensor[(14, 4, 10), float32],) */;
    %540 = cast(meta[relay.Constant][23] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %541 = cast(meta[relay.Constant][23] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %542 = reshape(%540, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
    %543 = reshape(%541, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
    %544 = @func_526(%542, %543) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
    %545 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %546 = %545.0;
    %547 = cast(%546, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %548 = cast(meta[relay.Constant][24] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
    %549 = %544.6;
    %550 = cast(%549, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %551 = reshape(%548, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %552 = reshape(%550, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %553 = @func_1298(%551, %552) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %554 = cast(meta[relay.Constant][24] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
    %555 = cast(%549, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %556 = reshape(%554, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %557 = reshape(%555, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %558 = @func_1298(%556, %557) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %559 = %539.0;
    %560 = asinh(%547) /* ty=Tensor[(13, 13, 5), float64] */;
    %561 = %553.1;
    %562 = %558.2;
    (%559, %var_1374, %549, meta[relay.Constant][23] /* ty=Tensor[(847), uint16] */, %560, %561, meta[relay.Constant][24] /* ty=Tensor[(60, 14), uint64] */, %562)
  };
  %563(%var_1405) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */
}

def @func_4902() -> (Tensor[(13, 13, 5), uint16],) {
  @func_4900() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_5666(%var_5665: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64], Tensor[(13, 13, 5), uint16]) {
  %571 = fn (%var_5634: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64], Tensor[(13, 13, 5), uint16]) {
    %564 = cast(%var_5634, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
    %565 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(8, 7, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %568 = @func_5190() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(?, 192), int16]) */;
    %569 = floor_mod(%566, %567) /* ty=Tensor[(8, 7, 12), float64] */;
    %570 = %568.2;
    (%569, %570)
  };
  %571(%var_5665) /* ty=(Tensor[(8, 7, 12), float64], Tensor[(13, 13, 5), uint16]) */
}

def @func_4993() -> (Tensor[(2, 847), int32],) {
  %577 = fn () -> (Tensor[(2, 847), int32],) {
    %572 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
    %573 = %572.0;
    %574 = cast(%573, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
    %575 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 847), uint16] */, dtype="int32") /* ty=Tensor[(2, 847), int32] */;
    %576 = maximum(%574, %575) /* ty=Tensor[(2, 847), int32] */;
    (%576,)
  };
  %577() /* ty=(Tensor[(2, 847), int32],) */
}

def @func_4519() -> (Tensor[(13, 13, 5), uint16],) {
  %580 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %578 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %579 = %578.1;
    (%579,)
  };
  %580() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_7082() -> Tensor[(1, 847), uint16] {
  @func_7080() /* ty=Tensor[(1, 847), uint16] */
}

def @func_4422(%var_4420: Tensor[(3, 1, 1), uint64], %var_4421: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 1), uint32],) {
  %587 = fn (%var_4407: Tensor[(3, 1, 1), uint64], %var_4408: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 1), uint32],) {
    %581 = cast(%var_4407, dtype="bool") /* ty=Tensor[(3, 1, 1), bool] */;
    %582 = cast(%var_4408, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
    %583 = equal(%581, %582) /* ty=Tensor[(3, 3, 1), bool] */;
    %584 = cast(%var_4407, dtype="uint32") /* ty=Tensor[(3, 1, 1), uint32] */;
    %585 = cast(%583, dtype="uint32") /* ty=Tensor[(3, 3, 1), uint32] */;
    %586 = left_shift(%584, %585) /* ty=Tensor[(3, 3, 1), uint32] */;
    (%586,)
  };
  %587(%var_4420, %var_4421) /* ty=(Tensor[(3, 3, 1), uint32],) */
}

def @func_4261() -> Tensor[(13, 13, 5), uint16] {
  @func_4259() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_3682() -> (Tensor[(13, 13, 5), uint16],) {
  @func_3680() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_4325() -> (Tensor[(15, 5082), float32],) {
  @func_4323() /* ty=(Tensor[(15, 5082), float32],) */
}

def @func_5708(%var_5706: Tensor[(5082), uint16], %var_5707: Tensor[(12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) {
  @func_5704(%var_5706, %var_5707) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(6, 847), bool], Tensor[(5082), uint16], Tensor[(12705), float32]) */
}

def @func_1298(%var_1278: Tensor[(4, 14, 15), uint64], %var_1284: Tensor[(847), uint16]) -> (Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) {
  %588 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 14, 15), uint64] */, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %589 = shape_of(%var_1278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_1278, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = cast(%var_1284, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %593 = cast(%var_1284, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %594 = reshape(%592, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %595 = reshape(%593, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %596 = @func_526(%594, %595) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %597 = greater_equal(%590, %591) /* ty=Tensor[(4, 14, 15), bool] */;
  %598 = %596.6;
  (%597, %598, %var_1284)
}

def @func_4374() -> Tensor[(13, 13, 5), uint16] {
  %600 = fn () -> Tensor[(13, 13, 5), uint16] {
    %599 = @func_3441() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %599.0
  };
  %600() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_2334() -> (Tensor[(13, 13, 5), uint16],) {
  %601 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %602 = %601.0;
  (%602,)
}

def @func_5075() -> Tensor[(13, 13, 5), uint16] {
  %604 = fn () -> Tensor[(13, 13, 5), uint16] {
    %603 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %603.0
  };
  %604() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_3027(%var_3024: Tensor[(4, 847), uint16], %var_3025: Tensor[(4, 847), uint16], %var_3026: Tensor[(4, 847), uint16]) -> (Tensor[(4, 847), bool], Tensor[(4, 847), bool], Tensor[(4, 847), float64], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(840), uint64]) {
  %632 = fn (%var_2983: Tensor[(4, 847), uint16], %var_2994: Tensor[(4, 847), uint16], %var_2998: Tensor[(4, 847), uint16]) -> (Tensor[(4, 847), bool], Tensor[(4, 847), bool], Tensor[(4, 847), float64], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(840), uint64]) {
    %605 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
    %606 = %605.0;
    %607 = cast(%606, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
    %608 = cast(%var_2983, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
    %609 = cast(%var_2994, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
    %610 = shape_of(%var_2983, dtype="int32") /* ty=Tensor[(2), int32] */;
    %611 = cast(%var_2983, dtype="bool") /* ty=Tensor[(4, 847), bool] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %613 = cast(%var_2998, dtype="float64") /* ty=Tensor[(4, 847), float64] */;
    %614 = shape_of(%var_2994, dtype="int32") /* ty=Tensor[(2), int32] */;
    %615 = cast(%var_2994, dtype="float64") /* ty=Tensor[(4, 847), float64] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %617 = cast(%606, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
    %618 = cast(%606, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
    %619 = reshape(%617, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %620 = reshape(%618, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %621 = @func_159(%619, %620) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %622 = cast(meta[relay.Constant][28] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %623 = %621.0;
    %624 = cast(%623, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %625 = reshape(%622, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %626 = reshape(%624, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %627 = @func_1298(%625, %626) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %628 = less_equal(%607, %608) /* ty=Tensor[(4, 847), bool] */;
    %629 = logical_or(%611, %612) /* ty=Tensor[(4, 847), bool] */;
    %630 = floor_divide(%615, %616) /* ty=Tensor[(4, 847), float64] */;
    %631 = %627.1;
    (%628, %629, %630, %623, %631, meta[relay.Constant][28] /* ty=Tensor[(840), uint64] */)
  };
  %632(%var_3024, %var_3025, %var_3026) /* ty=(Tensor[(4, 847), bool], Tensor[(4, 847), bool], Tensor[(4, 847), float64], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(840), uint64]) */
}

def @func_6748() -> Tensor[(13, 13, 5), uint16] {
  @func_6746() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_7978() -> (Tensor[(13, 13, 5), uint16],) {
  %633 = @func_5118() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %634 = %633.0;
  (%634,)
}

def @func_2419(%var_2417: Tensor[(7, 16, 1), float32], %var_2418: Tensor[(2, 280), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) {
  @func_2415(%var_2417, %var_2418) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) */
}

def @func_4452() -> (Tensor[(1, 847), uint16],) {
  %635 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
  (%635,)
}

def @func_2633() -> Tensor[(13, 13, 5), uint16] {
  %636 = fn () -> Tensor[(13, 13, 5), uint16] {
    @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */
  };
  %636() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_1591() -> (Tensor[(13, 13, 5), uint16],) {
  %637 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %638 = %637.0;
  (%638,)
}

def @func_1339() -> (Tensor[(13, 13, 5), uint16],) {
  %646 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %639 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %640 = rsqrt(%639) /* ty=Tensor[(13, 13, 5), float64] */;
    %641 = cast(%640, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
    %642 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 5), float64] */, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %645 = minimum(%643, %644) /* ty=Tensor[(13, 13, 5), uint16] */;
    (%645,)
  };
  %646() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_5902() -> (Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) {
  %654 = fn () -> (Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) {
    %647 = cast(meta[relay.Constant][30] /* ty=Tensor[(60, 14), uint64] */, dtype="uint64") /* ty=Tensor[(60, 14), uint64] */;
    %648 = @func_1811() /* ty=Tensor[(1, 847), uint16] */;
    %649 = cast(%648, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
    %650 = reshape(%647, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %651 = reshape(%649, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %652 = @func_1298(%650, %651) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %653 = %652.2;
    (%648, %653, meta[relay.Constant][30] /* ty=Tensor[(60, 14), uint64] */)
  };
  %654() /* ty=(Tensor[(1, 847), uint16], Tensor[(847), uint16], Tensor[(60, 14), uint64]) */
}

def @func_4241() -> (Tensor[(1, 847), uint16],) {
  %655 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
  %656 = %655.0;
  (%656,)
}

def @func_4633(%var_4614: Tensor[(14, 8, 1), float32], %var_4615: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), uint64], Tensor[(13, 13, 5), uint16]) {
  %657 = cast(%var_4614, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %658 = cast(%var_4615, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %659 = mod(%657, %658) /* ty=Tensor[(14, 8, 5), float32] */;
  %660 = cast(%659, dtype="uint64") /* ty=Tensor[(14, 8, 5), uint64] */;
  %661 = cast(%var_4614, dtype="uint64") /* ty=Tensor[(14, 8, 1), uint64] */;
  %662 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %663 = bitwise_xor(%660, %661) /* ty=Tensor[(14, 8, 5), uint64] */;
  %664 = %662.0;
  (%663, %664)
}

def @func_4825(%var_4810: Tensor[(8, 847), float64]) -> (Tensor[(8, 847), int64],) {
  %665 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(1, 847), float64] */;
  %668 = log10(%667) /* ty=Tensor[(1, 847), float64] */;
  %669 = cast(%668, dtype="int64") /* ty=Tensor[(1, 847), int64] */;
  %670 = cast(%var_4810, dtype="int64") /* ty=Tensor[(8, 847), int64] */;
  %671 = multiply(%669, %670) /* ty=Tensor[(8, 847), int64] */;
  (%671,)
}

def @func_7002() -> (Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  @func_7000() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */
}

def @func_6370() -> (Tensor[(13, 13, 5), uint16],) {
  @func_6368() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_7857() -> (Tensor[(13, 13, 5), uint16],) {
  %674 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %672 = @func_4344() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %673 = %672.0;
    (%673,)
  };
  %674() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_4942() -> (Tensor[(1, 847), uint16],) {
  %675 = @func_4452() /* ty=(Tensor[(1, 847), uint16],) */;
  %676 = %675.0;
  (%676,)
}

def @func_3146() -> Tensor[(1, 847), uint16] {
  %678 = fn () -> Tensor[(1, 847), uint16] {
    %677 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
    %677.0
  };
  %678() /* ty=Tensor[(1, 847), uint16] */
}

def @func_2415(%var_2394: Tensor[(7, 16, 1), float32], %var_2409: Tensor[(2, 280), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(2, 280), float32]) {
  %679 = cast(%var_2394, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %680 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %681 = cast(%var_2409, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
  %682 = reshape(%681, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %683 = @func_1714(%682) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %684 = acos(%679) /* ty=Tensor[(7, 16, 1), float32] */;
  %685 = %680.0;
  %686 = %683.1;
  (%684, %685, %686, %var_2409)
}

def @func_6746() -> Tensor[(13, 13, 5), uint16] {
  %687 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %687.1
}

def @func_2120(%var_2118: Tensor[(6, 847), uint16], %var_2119: Tensor[(15, 847), float32]) -> (Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) {
  @func_2116(%var_2118, %var_2119) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */
}

def @func_7884() -> Tensor[(13, 13, 5), uint16] {
  %688 = @func_4900() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %688.0
}

def @func_4828(%var_4826: Tensor[(8, 847), float64]) -> (Tensor[(8, 847), int64],) {
  @func_4825(%var_4826) /* ty=(Tensor[(8, 847), int64],) */
}

def @func_4966() -> (Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) {
  %697 = fn () -> (Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) {
    %689 = @func_4761() /* ty=(Tensor[(1, 5082), uint16], Tensor[(1, 847), float32], Tensor[(13, 13, 5), bool], Tensor[(560), float32]) */;
    %690 = cast(meta[relay.Constant][31] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %691 = cast(meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %692 = reshape(%690, newshape=[4, 14, 15]) /* ty=Tensor[(4, 14, 15), uint64] */;
    %693 = reshape(%691, newshape=[847]) /* ty=Tensor[(847), uint16] */;
    %694 = @func_1298(%692, %693) /* ty=(Tensor[(4, 14, 15), bool], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16]) */;
    %695 = %689.3;
    %696 = %694.0;
    (%695, %696, meta[relay.Constant][31] /* ty=Tensor[(840), uint64] */, meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */)
  };
  %697() /* ty=(Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) */
}

def @func_7603() -> (Tensor[(1, 847), uint16], Tensor[(11, 7, 11), float64]) {
  %698 = @func_4241() /* ty=(Tensor[(1, 847), uint16],) */;
  %699 = @func_6478() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %700 = %699.2;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(11, 7, 11), float64] */;
  %702 = %698.0;
  %703 = tan(%701) /* ty=Tensor[(11, 7, 11), float64] */;
  (%702, %703)
}

def @func_3053() -> (Tensor[(13, 13, 5), uint16],) {
  %706 = fn () -> (Tensor[(13, 13, 5), uint16],) {
    %704 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %705 = %704.1;
    (%705,)
  };
  %706() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_7886() -> Tensor[(13, 13, 5), uint16] {
  @func_7884() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_2627(%var_2626: Tensor[(2, 16, 6), float64]) -> (Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
  %718 = fn (%var_2611: Tensor[(2, 16, 6), float64]) -> (Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) {
    %707 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
    %708 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%var_2611, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %711 = cast(meta[relay.Constant][34] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %712 = reshape(%711, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
    %713 = @func_1648(%712) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
    %714 = @func_1849() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
    %715 = divide(%709, %710) /* ty=Tensor[(2, 16, 6), float64] */;
    %716 = %713.0;
    %717 = %714.1;
    (%715, %716, meta[relay.Constant][34] /* ty=Tensor[(560), float32] */, %717)
  };
  %718(%var_2626) /* ty=(Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */
}

def @func_6229(%var_6128: Tensor[(7, 847), float32], %var_6163: Tensor[(2541, 5), float32]) -> (Tensor[(2, 847), int32], Tensor[(2, 16, 6), float64], Tensor[(192), float64], Tensor[(7, 847), float64], Tensor[(13, 13, 5), uint16], Tensor[(7, 847), bool], Tensor[(242, 21), uint16], Tensor[(2541, 5), float32], Tensor[(1, 847), uint16], Tensor[(560), float32], Tensor[(280, 2), float32], Tensor[(14, 4, 10), float32], Tensor[(?, 847), float32], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16], Tensor[(6, 847), uint8], Tensor[(13, 13, 5), uint16]) {
  %719 = @func_4992() /* ty=(Tensor[(2, 847), int32],) */;
  %720 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %721 = reshape(%720, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float64] */;
  %722 = @func_2625(%721) /* ty=(Tensor[(2, 16, 6), float64], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(13, 13, 5), uint16]) */;
  %723 = @func_4541() /* ty=Tensor[(1, 847), float64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %725 = sqrt(%724) /* ty=Tensor[(1, 847), float32] */;
  %726 = cast(%725, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %727 = cast(%var_6128, dtype="bool") /* ty=Tensor[(7, 847), bool] */;
  %728 = logical_and(%726, %727) /* ty=Tensor[(7, 847), bool] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(7, 847), float64] */;
  %730 = @func_3804() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %731 = cast(%728, dtype="bool") /* ty=Tensor[(7, 847), bool] */;
  %732 = cast(%723, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %733 = @func_3883() /* ty=(Tensor[(1, 847), uint16],) */;
  %734 = cast(meta[relay.Constant][37] /* ty=Tensor[(280, 2), float32] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %735 = reshape(%734, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %736 = @func_1714(%735) /* ty=(Tensor[(60, 14), uint64], Tensor[(560), float32], Tensor[(13, 13, 5), bool]) */;
  %737 = cast(meta[relay.Constant][37] /* ty=Tensor[(280, 2), float32] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %738 = reshape(%737, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %739 = @func_1404(%738) /* ty=(Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(11, 7, 11), uint16], Tensor[(847), uint16], Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(60, 14), uint64], Tensor[(847), uint16]) */;
  %740 = cast(%725, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %741 = sin(%740) /* ty=Tensor[(1, 847), float32] */;
  %742 = cast(%741, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %743 = shape_of(%725, dtype="int32") /* ty=Tensor[(2), int32] */;
  %744 = cast(%725, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %746 = logical_or(%744, %745) /* ty=Tensor[(?, 847), bool] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(?, 847), float32] */;
  %748 = @func_2485() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %749 = @func_4792() /* ty=(Tensor[(1, 847), uint16],) */;
  %750 = cast(meta[relay.Constant][36] /* ty=Tensor[(242, 21), uint16] */, dtype="uint16") /* ty=Tensor[(242, 21), uint16] */;
  %751 = cast(%var_6163, dtype="float32") /* ty=Tensor[(2541, 5), float32] */;
  %752 = reshape(%750, newshape=[6, 847]) /* ty=Tensor[(6, 847), uint16] */;
  %753 = reshape(%751, newshape=[15, 847]) /* ty=Tensor[(15, 847), float32] */;
  %754 = @func_2116(%752, %753) /* ty=(Tensor[(6, 847), bool], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(15, 847), float32], Tensor[(13, 13, 5), uint16]) */;
  %755 = %754.0;
  %756 = cast(%746, dtype="uint8") /* ty=Tensor[(?, 847), uint8] */;
  %757 = cast(%755, dtype="uint8") /* ty=Tensor[(6, 847), uint8] */;
  %758 = %719.0;
  %759 = %722.0;
  %760 = erf(%729) /* ty=Tensor[(7, 847), float64] */;
  %761 = %730.0;
  %762 = greater_equal(%731, %732) /* ty=Tensor[(7, 847), bool] */;
  %763 = %733.0;
  %764 = %736.1;
  %765 = %739.0;
  %766 = rsqrt(%747) /* ty=Tensor[(?, 847), float32] */;
  %767 = %748.0;
  %768 = %749.0;
  %769 = logical_xor(%756, %757) /* ty=Tensor[(6, 847), uint8] */;
  %770 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  (%758, %759, meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, %760, %761, %762, meta[relay.Constant][36] /* ty=Tensor[(242, 21), uint16] */, %var_6163, %763, %764, meta[relay.Constant][37] /* ty=Tensor[(280, 2), float32] */, %765, %766, %767, %768, %769, %770)
}

def @func_2336() -> (Tensor[(13, 13, 5), uint16],) {
  @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_4454() -> (Tensor[(1, 847), uint16],) {
  @func_4452() /* ty=(Tensor[(1, 847), uint16],) */
}

def @func_5439(%var_5437: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) {
  @func_5436(%var_5437) /* ty=(Tensor[(13, 13, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 847), uint16]) */
}

def @func_4174() -> Tensor[(11, 1155), int8] {
  %772 = fn () -> Tensor[(11, 1155), int8] {
    %771 = @func_2769() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(1, 5082), uint16], Tensor[(11, 1155), int8], Tensor[(13, 13, 5), float64]) */;
    %771.2
  };
  %772() /* ty=Tensor[(11, 1155), int8] */
}

def @func_3536(%var_3534: Tensor[(2, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) {
  @func_3533(%var_3534) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) */
}

def @func_5120() -> (Tensor[(13, 13, 5), uint16],) {
  @func_5118() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_529(%var_527: Tensor[(11, 77), uint16], %var_528: Tensor[(11, 77), uint16]) -> (Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) {
  %815 = fn (%var_490: Tensor[(11, 77), uint16], %var_505: Tensor[(11, 77), uint16]) -> (Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) {
    %773 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
    %774 = tan(%773) /* ty=Tensor[(1, 16, 11), float32] */;
    %775 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 16, 11), float32] */, dtype="uint16") /* ty=Tensor[(1, 16, 11), uint16] */;
    %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
    %777 = cast(%774, dtype="uint16") /* ty=Tensor[(1, 16, 11), uint16] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %779 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %780 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %781 = reshape(%779, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %782 = reshape(%780, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %783 = @func_159(%781, %782) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %784 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %785 = %783.0;
    %786 = cast(%785, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %787 = reshape(%784, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %788 = reshape(%786, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %789 = @func_159(%787, %788) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %790 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %791 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %792 = reshape(%790, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %793 = reshape(%791, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %794 = @func_159(%792, %793) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %795 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %796 = %794.0;
    %797 = cast(%796, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %798 = reshape(%795, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %799 = reshape(%797, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %800 = @func_159(%798, %799) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %801 = cast(%var_505, dtype="float32") /* ty=Tensor[(11, 77), float32] */;
    %802 = shape_of(%var_490, dtype="int32") /* ty=Tensor[(2), int32] */;
    %803 = cast(%var_490, dtype="float32") /* ty=Tensor[(11, 77), float32] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %805 = cast(%var_490, dtype="uint16") /* ty=Tensor[(11, 77), uint16] */;
    %806 = %800.0;
    %807 = cast(%806, dtype="uint16") /* ty=Tensor[(11, 7, 11), uint16] */;
    %808 = reshape(%805, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %809 = reshape(%807, newshape=[11, 7, 11]) /* ty=Tensor[(11, 7, 11), uint16] */;
    %810 = @func_159(%808, %809) /* ty=(Tensor[(11, 7, 11), uint16],) */;
    %811 = left_shift(%777, %778) /* ty=Tensor[(?, 16, 11), uint16] */;
    %812 = %789.0;
    %813 = floor_mod(%803, %804) /* ty=Tensor[(11, 77), float32] */;
    %814 = %810.0;
    (%811, %785, %812, %796, %806, %813, %814)
  };
  %815(%var_527, %var_528) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */
}

def @func_1752() -> (Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) {
  %816 = @func_1591() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %819 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 847), uint16] */, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %820 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 847), uint16] */, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %821 = reshape(%819, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %822 = reshape(%820, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %823 = @func_526(%821, %822) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %824 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %825 = cos(%818) /* ty=Tensor[(13, 13, 5), float64] */;
  %826 = %823.2;
  %827 = %824.0;
  (%825, %826, meta[relay.Constant][39] /* ty=Tensor[(1, 847), uint16] */, %827)
}

def @func_7605() -> (Tensor[(1, 847), uint16], Tensor[(11, 7, 11), float64]) {
  @func_7603() /* ty=(Tensor[(1, 847), uint16], Tensor[(11, 7, 11), float64]) */
}

def @func_7244(%var_7242: Tensor[(1, 12705), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 462), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 12705), bool]) {
  @func_7241(%var_7242) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 462), uint16], Tensor[(13, 13, 5), uint16], Tensor[(?, 12705), bool]) */
}

def @func_4637(%var_4635: Tensor[(14, 8, 1), float32], %var_4636: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), uint64], Tensor[(13, 13, 5), uint16]) {
  @func_4633(%var_4635, %var_4636) /* ty=(Tensor[(14, 8, 5), uint64], Tensor[(13, 13, 5), uint16]) */
}

def @func_5128() -> (Tensor[(13, 13, 5), uint16],) {
  @func_5126() /* ty=(Tensor[(13, 13, 5), uint16],) */
}

def @func_6668(%var_6666: Tensor[(16, 6, 3), uint16], %var_6667: Tensor[(16, 6, 3), uint16]) -> (Tensor[(16, 6, 3), bool], Tensor[(847), uint16]) {
  %835 = fn (%var_6642: Tensor[(16, 6, 3), uint16], %var_6643: Tensor[(16, 6, 3), uint16]) -> (Tensor[(16, 6, 3), bool], Tensor[(847), uint16]) {
    %828 = cast(%var_6643, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
    %829 = shape_of(%var_6642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %830 = cast(%var_6642, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %832 = @func_4965() /* ty=(Tensor[(560), float32], Tensor[(4, 14, 15), bool], Tensor[(840), uint64], Tensor[(847), uint16]) */;
    %833 = less(%830, %831) /* ty=Tensor[(16, 6, 3), bool] */;
    %834 = %832.3;
    (%833, %834)
  };
  %835(%var_6666, %var_6667) /* ty=(Tensor[(16, 6, 3), bool], Tensor[(847), uint16]) */
}

def @func_6478() -> (Tensor[(13, 13, 5), float64], Tensor[(1, 847), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 7, 11), uint16], Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) {
  %836 = @func_6368() /* ty=(Tensor[(13, 13, 5), uint16],) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %839 = @func_1752() /* ty=(Tensor[(13, 13, 5), float64], Tensor[(11, 7, 11), uint16], Tensor[(1, 847), uint16], Tensor[(13, 13, 5), uint16]) */;
  %840 = @func_2548() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16]) */;
  %841 = @func_6016() /* ty=Tensor[(1, 847), uint16] */;
  %842 = cast(%841, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %843 = cast(%841, dtype="uint16") /* ty=Tensor[(1, 847), uint16] */;
  %844 = reshape(%842, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %845 = reshape(%843, newshape=[11, 77]) /* ty=Tensor[(11, 77), uint16] */;
  %846 = @func_526(%844, %845) /* ty=(Tensor[(?, 16, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 7, 11), uint16], Tensor[(11, 77), float32], Tensor[(11, 7, 11), uint16]) */;
  %847 = @func_5016() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(11, 1155), int8]) */;
  %848 = cosh(%838) /* ty=Tensor[(13, 13, 5), float64] */;
  %849 = %839.1;
  %850 = %840.0;
  %851 = %846.4;
  %852 = @func_3359() /* ty=Tensor[(13, 13, 5), uint16] */;
  %853 = %847.1;
  (%848, %841, %849, %850, %851, %852, %853)
}

def @func_3953(%var_3950: Tensor[(16, 847), uint16], %var_3951: Tensor[(560), float32], %var_3952: Tensor[(10164), uint16]) -> (Tensor[(16, 847), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(10164), uint16]) {
  %874 = fn (%var_3910: Tensor[(16, 847), uint16], %var_3929: Tensor[(560), float32], %var_3945: Tensor[(10164), uint16]) -> (Tensor[(16, 847), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(10164), uint16]) {
    %854 = @func_2205() /* ty=(Tensor[(1, 847), uint16],) */;
    %855 = %854.0;
    %856 = cast(%855, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
    %857 = cast(%var_3910, dtype="bool") /* ty=Tensor[(16, 847), bool] */;
    %858 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %859 = @func_2334() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %860 = cast(%var_3929, dtype="float32") /* ty=Tensor[(560), float32] */;
    %861 = reshape(%860, newshape=[2, 280]) /* ty=Tensor[(2, 280), float32] */;
    %862 = @func_1648(%861) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(14, 4, 10), float32], Tensor[(2, 280), float32]) */;
    %863 = @func_1338() /* ty=(Tensor[(13, 13, 5), uint16],) */;
    %864 = cast(%var_3945, dtype="uint16") /* ty=Tensor[(10164), uint16] */;
    %865 = reshape(%864, newshape=[2, 5082]) /* ty=Tensor[(2, 5082), uint16] */;
    %866 = @func_3533(%865) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(2, 5082), bool], Tensor[(1, 5082), float64], Tensor[(560), float32], Tensor[(560), float32]) */;
    %867 = greater_equal(%856, %857) /* ty=Tensor[(16, 847), bool] */;
    %868 = %858.0;
    %869 = %859.0;
    %870 = @func_1785() /* ty=Tensor[(13, 13, 5), uint16] */;
    %871 = %862.2;
    %872 = %863.0;
    %873 = %866.4;
    (%867, %868, %869, %870, %871, %var_3929, %872, %873, %var_3945)
  };
  %874(%var_3950, %var_3951, %var_3952) /* ty=(Tensor[(16, 847), bool], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2, 280), float32], Tensor[(560), float32], Tensor[(13, 13, 5), uint16], Tensor[(560), float32], Tensor[(10164), uint16]) */
}

def @func_7177(%var_7153: Tensor[(12, 5082), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 5082), float64]) {
  %875 = @func_3352() /* ty=(Tensor[(1, 5082), uint16],) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(1, 5082), float64] */;
  %878 = cast(%var_7153, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %879 = minimum(%877, %878) /* ty=Tensor[(12, 5082), float64] */;
  %880 = cast(%879, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %881 = exp(%880) /* ty=Tensor[(12, 5082), float64] */;
  %882 = cast(%881, dtype="float64") /* ty=Tensor[(12, 5082), float64] */;
  %883 = @func_1948() /* ty=Tensor[(13, 13, 5), uint16] */;
  %884 = asin(%882) /* ty=Tensor[(12, 5082), float64] */;
  (%883, %884)
}

def @func_6018() -> Tensor[(1, 847), uint16] {
  @func_6016() /* ty=Tensor[(1, 847), uint16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen700/build/output.py", line 2402, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:55:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

