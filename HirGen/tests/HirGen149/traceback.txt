==========mod==========
#[version = "0.0.5"]
def @func_6930() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6394(%var_6391: Tensor[(10, 9, 16), float64]) -> (Tensor[(10, 9, 16), float64],) {
  %0 = cast(%var_6391, dtype="float64") /* ty=Tensor[(10, 9, 16), float64] */;
  %1 = asinh(%0) /* ty=Tensor[(10, 9, 16), float64] */;
  (%1,)
}

def @func_5143(%var_5118: Tensor[(112), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 7, 8), float64], Tensor[(112), float64], Tensor[(1188), int32], Tensor[(1560), bool], Tensor[(2, 15, 8), float32], Tensor[(2, 120), int16], Tensor[(5), uint16]) {
  %2 = cast(%var_5118, dtype="float64") /* ty=Tensor[(112), float64] */;
  %3 = cast(%var_5118, dtype="int64") /* ty=Tensor[(112), int64] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %6 = reshape(%2, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float64] */;
  %7 = reshape(%3, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), int64] */;
  %8 = reshape(%4, newshape=[1188]) /* ty=Tensor[(1188), int32] */;
  %9 = reshape(%5, newshape=[780, 2]) /* ty=Tensor[(780, 2), bool] */;
  %10 = @func_4285(%6, %7, %8, %9) /* ty=(Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, dtype="int16") /* ty=Tensor[(2, 120), int16] */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, dtype="int16") /* ty=Tensor[(2, 120), int16] */;
  %13 = cast(meta[relay.Constant][3] /* ty=Tensor[(5), uint16] */, dtype="uint16") /* ty=Tensor[(5), uint16] */;
  %14 = reshape(%11, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %15 = reshape(%12, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %16 = reshape(%13, newshape=[5]) /* ty=Tensor[(5), uint16] */;
  %17 = @func_4583(%14, %15, %16) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
  %18 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %19 = %10.2;
  %20 = %17.3;
  (%18, %19, %var_5118, meta[relay.Constant][0] /* ty=Tensor[(1188), int32] */, meta[relay.Constant][1] /* ty=Tensor[(1560), bool] */, %20, meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, meta[relay.Constant][3] /* ty=Tensor[(5), uint16] */)
}

def @func_3552(%var_3543: Tensor[(10, 13, 12), bool], %var_3544: Tensor[(10, 13, 12), bool]) -> (Tensor[(10, 13, 12), bool],) {
  %21 = cast(%var_3544, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %22 = shape_of(%var_3543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_3543, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = logical_and(%23, %24) /* ty=Tensor[(10, 13, 12), bool] */;
  (%25,)
}

def @func_5749() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_1639(%var_1576: Tensor[(384), int8], %var_1577: Tensor[(6, 140), float32], %var_1608: Tensor[(216), int16], %var_1636: Tensor[(936), bool]) -> (Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) {
  %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %27 = log10(%26) /* ty=Tensor[(14, 11, 1), float32] */;
  %28 = cast(%27, dtype="int64") /* ty=Tensor[(14, 11, 1), int64] */;
  %29 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int64") /* ty=Tensor[(14, 11, 1), int64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %32 = left_shift(%30, %31) /* ty=Tensor[(14, 11, ?), int64] */;
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int16") /* ty=Tensor[(14, 11, 1), int16] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="int16") /* ty=Tensor[(14, 11, ?), int16] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %37 = multiply(%35, %36) /* ty=Tensor[(14, 11, ?), int16] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(14, 11, ?), float32] */;
  %39 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %42 = cast(%var_1576, dtype="int8") /* ty=Tensor[(384), int8] */;
  %43 = cast(%var_1576, dtype="int8") /* ty=Tensor[(384), int8] */;
  %44 = cast(%var_1577, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %45 = reshape(%42, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %46 = reshape(%43, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %47 = reshape(%44, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %48 = @func_1052(%45, %46, %47) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %51 = reshape(%49, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %52 = reshape(%50, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %53 = @func_1312(%51, %52) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %54 = cast(%32, dtype="float64") /* ty=Tensor[(14, 11, ?), float64] */;
  %55 = asinh(%54) /* ty=Tensor[(14, 11, ?), float64] */;
  %56 = cast(%55, dtype="bool") /* ty=Tensor[(14, 11, ?), bool] */;
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(1188), int32] */, dtype="bool") /* ty=Tensor[(1188), bool] */;
  %58 = cast(%var_1608, dtype="int16") /* ty=Tensor[(216), int16] */;
  %59 = cast(%var_1608, dtype="int16") /* ty=Tensor[(216), int16] */;
  %60 = reshape(%58, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %61 = reshape(%59, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %62 = @func_1286(%60, %61) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %65 = cast(%var_1636, dtype="bool") /* ty=Tensor[(936), bool] */;
  %66 = cast(%var_1636, dtype="bool") /* ty=Tensor[(936), bool] */;
  %67 = reshape(%65, newshape=[12, 6, 13]) /* ty=Tensor[(12, 6, 13), bool] */;
  %68 = reshape(%66, newshape=[12, 6, 13]) /* ty=Tensor[(12, 6, 13), bool] */;
  %69 = add(%40, %41) /* ty=Tensor[(14, 11, ?), float32] */;
  %70 = %48.0;
  %71 = %53.0;
  %72 = logical_or(%56, %57) /* ty=Tensor[(14, 11, 1188), bool] */;
  %73 = log(%64) /* ty=Tensor[(6, 4, 9), float32] */;
  %74 = @func_1386(%67, %68) /* ty=Tensor[(12, 6, 13), bool] */;
  (%69, %70, %var_1576, %var_1577, %71, %72, %var_1608, %73, %74, %var_1636)
}

def @func_4665(%var_4628: Tensor[(1, 2, 15), float64], %var_4658: Tensor[(1188), int32]) -> (Tensor[(1, 2, 15), float64], Tensor[(1, 2, 15), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32]) {
  %75 = cast(%var_4628, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
  %76 = tan(%75) /* ty=Tensor[(1, 2, 15), float64] */;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
  %78 = cast(%76, dtype="float32") /* ty=Tensor[(1, 2, 15), float32] */;
  %79 = cast(%var_4658, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %80 = cast(%var_4658, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %81 = reshape(%79, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %82 = reshape(%80, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %83 = sin(%77) /* ty=Tensor[(1, 2, 15), float64] */;
  %84 = atanh(%78) /* ty=Tensor[(1, 2, 15), float32] */;
  %85 = @func_2423(%81, %82) /* ty=Tensor[(12, 11, 9), int32] */;
  (%83, %84, %85, %var_4658)
}

def @func_5666() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6376(%var_6370: Tensor[(2, 3, 10), float32], %var_6374: Tensor[(1560), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) {
  %86 = cast(%var_6370, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %87 = cast(%var_6374, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %88 = reshape(%87, newshape=[15, 13, 8]) /* ty=Tensor[(15, 13, 8), float64] */;
  %89 = @func_5705(%88) /* ty=(Tensor[(15, 13, 8), float64],) */;
  %90 = cos(%86) /* ty=Tensor[(2, 3, 10), float32] */;
  %91 = %89.0;
  (%90, %91, %var_6374)
}

def @func_5896(%var_5884: Tensor[(15, 13, 4), uint64], %var_5885: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64], Tensor[(6, 4, 9), bool], Tensor[(12, 18), int16]) {
  %92 = cast(%var_5885, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
  %93 = shape_of(%var_5884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%var_5884, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 18), int16] */, dtype="int16") /* ty=Tensor[(12, 18), int16] */;
  %97 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 18), int16] */, dtype="int16") /* ty=Tensor[(12, 18), int16] */;
  %98 = reshape(%96, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %99 = reshape(%97, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %100 = @func_1286(%98, %99) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %101 = logical_xor(%94, %95) /* ty=Tensor[(15, 13, 4), uint64] */;
  %102 = %100.0;
  (%101, %102, meta[relay.Constant][6] /* ty=Tensor[(12, 18), int16] */)
}

def @func_5921() -> (Tensor[(12, 16, 13), float32],) {
  %103 = @func_5666() /* ty=Tensor[(12, 16, 13), float32] */;
  (%103,)
}

def @main(%var_7012: Tensor[(14, 5, 10), int16], %var_7017: Tensor[(6, 140), float32]) -> (Tensor[(14, 5, 10), int16], Tensor[(840), float32], Tensor[(6, 140), float32], Tensor[(14, 5, 10), float32]) {
  %104 = cast(%var_7012, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %105 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %108 = cast(%var_7017, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %109 = reshape(%108, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %110 = @func_6116(%109) /* ty=(Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) */;
  %111 = cast(%var_7012, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %112 = bitwise_and(%106, %107) /* ty=Tensor[(14, 5, 10), int16] */;
  %113 = %110.0;
  %114 = cos(%111) /* ty=Tensor[(14, 5, 10), float32] */;
  (%112, %113, %var_7017, %114)
}

def @func_2971(%var_2939: Tensor[(4, 9, 9), int8], %var_2940: Tensor[(4, 9, 9), int8]) -> (Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) {
  %115 = cast(%var_2940, dtype="int8") /* ty=Tensor[(4, 9, 9), int8] */;
  %116 = shape_of(%var_2939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_2939, dtype="int8") /* ty=Tensor[(4, 9, 9), int8] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %121 = reshape(%119, newshape=[4, 6, 1]) /* ty=Tensor[(4, 6, 1), float64] */;
  %122 = reshape(%120, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
  %123 = cast(%var_2940, dtype="float64") /* ty=Tensor[(4, 9, 9), float64] */;
  %124 = log(%123) /* ty=Tensor[(4, 9, 9), float64] */;
  %125 = cast(%var_2940, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %129 = cast(%124, dtype="float64") /* ty=Tensor[(4, 9, 9), float64] */;
  %130 = add(%117, %118) /* ty=Tensor[(4, 9, 9), int8] */;
  %131 = @func_765(%121, %122) /* ty=Tensor[(4, 6, 3), bool] */;
  %132 = floor_divide(%127, %128) /* ty=Tensor[(4, 9, 9), float32] */;
  %133 = asinh(%129) /* ty=Tensor[(4, 9, 9), float64] */;
  (%130, %131, meta[relay.Constant][8] /* ty=Tensor[(24), float64] */, meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, %132, %133)
}

def @func_2577(%var_2557: Tensor[(9, 4, 3), float32], %var_2558: Tensor[(9, 4, 3), float32], %var_2571: Tensor[(216), int32]) -> (Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) {
  %134 = cast(%var_2558, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
  %135 = shape_of(%var_2557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_2557, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %138 = divide(%136, %137) /* ty=Tensor[(9, 4, 3), float32] */;
  %139 = cast(%var_2557, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %143 = cast(%var_2571, dtype="int32") /* ty=Tensor[(216), int32] */;
  %144 = cast(%var_2571, dtype="int32") /* ty=Tensor[(216), int32] */;
  %145 = reshape(%143, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %146 = reshape(%144, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %148 = reshape(%147, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
  %149 = mod(%141, %142) /* ty=Tensor[(9, 4, 3), float32] */;
  %150 = @func_1230(%145, %146) /* ty=Tensor[(3, 9, 8), bool] */;
  %151 = @func_1682(%148) /* ty=Tensor[(13, 5, 8), bool] */;
  (%149, %150, %var_2571, %151, meta[relay.Constant][10] /* ty=Tensor[(520), bool] */)
}

def @func_4537(%var_4506: Tensor[(2, 12, 9), int64]) -> (Tensor[(2, 12, 9), float32], Tensor[(2, 12, 9), float32]) {
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 12, 9), int64] */;
  %153 = shape_of(%var_4506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%var_4506, dtype="int64") /* ty=Tensor[(2, 12, 9), int64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %156 = add(%154, %155) /* ty=Tensor[(2, 12, 9), int64] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
  %158 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %161 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
  %162 = divide(%159, %160) /* ty=Tensor[(2, 12, 9), float32] */;
  %163 = asinh(%161) /* ty=Tensor[(2, 12, 9), float32] */;
  (%162, %163)
}

def @func_5313(%var_5287: Tensor[(8, 30), int16], %var_5288: Tensor[(5, 1), uint16], %var_5296: Tensor[(840), float32], %var_5304: Tensor[(125), float32]) -> (Tensor[(5, 5, 5), float64], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32], Tensor[(12, 16, 13), float32], Tensor[(5, 5, 5), float64], Tensor[(8, 30), int16], Tensor[(5, 1), uint16], Tensor[(12, 14, 5), bool], Tensor[(840), float32], Tensor[(728), float32], Tensor[(125), bool], Tensor[(125), float64]) {
  %164 = cast(meta[relay.Constant][12] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %165 = reshape(%164, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %166 = cast(meta[relay.Constant][13] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %168 = reshape(%166, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
  %169 = reshape(%167, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
  %170 = @func_2485(%168, %169) /* ty=(Tensor[(4, 5, 2), float32],) */;
  %171 = cast(meta[relay.Constant][14] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %172 = cast(meta[relay.Constant][14] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %173 = reshape(%171, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %174 = reshape(%172, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %175 = @func_1312(%173, %174) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %176 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %178 = cast(%var_5287, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
  %179 = cast(%var_5287, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
  %180 = cast(%var_5288, dtype="uint16") /* ty=Tensor[(5, 1), uint16] */;
  %181 = reshape(%178, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %182 = reshape(%179, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %183 = reshape(%180, newshape=[5]) /* ty=Tensor[(5), uint16] */;
  %184 = @func_4583(%181, %182, %183) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
  %185 = cast(%var_5296, dtype="float32") /* ty=Tensor[(840), float32] */;
  %186 = reshape(%185, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %188 = reshape(%187, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %189 = @func_5071(%188) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) */;
  %190 = cast(meta[relay.Constant][12] /* ty=Tensor[(125), float64] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %191 = rsqrt(%190) /* ty=Tensor[(125), float32] */;
  %192 = cast(%var_5304, dtype="bool") /* ty=Tensor[(125), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(1), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(125), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?), bool] */;
  %196 = cast(%191, dtype="float64") /* ty=Tensor[(125), float64] */;
  %197 = tan(%196) /* ty=Tensor[(125), float64] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(125), float64] */;
  %199 = sqrt(%198) /* ty=Tensor[(125), float64] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(125), float64] */;
  %201 = @func_289(%165) /* ty=Tensor[(5, 5, 5), float64] */;
  %202 = %170.0;
  %203 = %175.0;
  %204 = cos(%177) /* ty=Tensor[(12, 16, 13), float32] */;
  %205 = %184.6;
  %206 = @func_147(%186) /* ty=Tensor[(12, 14, 5), bool] */;
  %207 = %189.4;
  %208 = equal(%194, %195) /* ty=Tensor[(125), bool] */;
  %209 = log10(%200) /* ty=Tensor[(125), float64] */;
  (%201, %202, meta[relay.Constant][13] /* ty=Tensor[(40), float32] */, %203, meta[relay.Constant][14] /* ty=Tensor[(1188), int32] */, %204, %205, %var_5287, %var_5288, %206, %var_5296, %207, %208, %209)
}

def @func_4926() -> Tensor[(12, 16, 13), float32] {
  %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  acosh(%210) /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_147(%var_109: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
  %211 = cast(%var_109, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %212 = exp(%211) /* ty=Tensor[(12, 14, 5), float32] */;
  %213 = cast(%var_109, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%215, %216) /* ty=Tensor[(12, 14, 5), bool] */
}

def @func_4784(%var_4780: Tensor[(13, 9, 16), float32]) -> (Tensor[(13, 9, 16), bool],) {
  %217 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1, 16), float32] */, dtype="bool") /* ty=Tensor[(1, 1, 16), bool] */;
  %218 = cast(%var_4780, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %219 = less(%217, %218) /* ty=Tensor[(13, 9, 16), bool] */;
  (%219,)
}

def @func_5344() -> (Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) {
  %220 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %221 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 780), bool] */, dtype="bool") /* ty=Tensor[(2, 780), bool] */;
  %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 780), bool] */, dtype="bool") /* ty=Tensor[(2, 780), bool] */;
  %223 = reshape(%221, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %224 = reshape(%222, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %225 = @func_3552(%223, %224) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %226 = %220.0;
  %227 = %225.0;
  (%226, %227, meta[relay.Constant][17] /* ty=Tensor[(2, 780), bool] */)
}

def @func_6792(%var_6789: Tensor[(10, 10, 4), float64]) -> Tensor[(10, 10, 4), float64] {
  %228 = cast(%var_6789, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  asinh(%228) /* ty=Tensor[(10, 10, 4), float64] */
}

def @func_3915(%var_3817: Tensor[(16, 7, 7), float64], %var_3844: Tensor[(1, 216), int32], %var_3874: Tensor[(48, 8), int8], %var_3900: Tensor[(936), bool]) -> (Tensor[(3, 9, 8), bool], Tensor[(1, 216), int32], Tensor[(840), float32], Tensor[(48, 8), int8], Tensor[(840), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32], Tensor[(11, 9, 12), bool], Tensor[(936), bool], Tensor[(16, 7, 7), int64]) {
  %229 = cast(%var_3844, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %230 = cast(%var_3844, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %231 = reshape(%229, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %232 = reshape(%230, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %233 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %234 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %236 = reshape(%233, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %237 = reshape(%234, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %238 = reshape(%235, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %239 = @func_1052(%236, %237, %238) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %240 = cast(meta[relay.Constant][19] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %242 = reshape(%240, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %243 = reshape(%241, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %244 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %245 = %239.2;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(840), float32] */;
  %247 = @func_1230(%231, %232) /* ty=Tensor[(3, 9, 8), bool] */;
  %248 = cast(%247, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %249 = cast(%var_3900, dtype="bool") /* ty=Tensor[(936), bool] */;
  %250 = reshape(%244, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %251 = reshape(%246, newshape=[6, 140]) /* ty=Tensor[(6, 140), float32] */;
  %252 = reshape(%248, newshape=[216]) /* ty=Tensor[(216), int16] */;
  %253 = reshape(%249, newshape=[936]) /* ty=Tensor[(936), bool] */;
  %254 = @func_1639(%250, %251, %252, %253) /* ty=(Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) */;
  %255 = cast(%var_3817, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %256 = log2(%255) /* ty=Tensor[(16, 7, 7), float64] */;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %258 = acos(%257) /* ty=Tensor[(16, 7, 7), float32] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %260 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%256, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %263 = power(%261, %262) /* ty=Tensor[(16, 7, 7), float64] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %265 = sigmoid(%264) /* ty=Tensor[(16, 7, 7), float64] */;
  %266 = cast(%256, dtype="int64") /* ty=Tensor[(16, 7, 7), int64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="int64") /* ty=Tensor[(16, 7, 7), int64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %270 = @func_2423(%242, %243) /* ty=Tensor[(12, 11, 9), int32] */;
  %271 = %254.4;
  %272 = bitwise_xor(%268, %269) /* ty=Tensor[(16, 7, 7), int64] */;
  (%247, %var_3844, %245, %var_3874, meta[relay.Constant][18] /* ty=Tensor[(840), float32] */, %270, meta[relay.Constant][19] /* ty=Tensor[(1188), int32] */, %271, %var_3900, %272)
}

def @func_6116(%var_6061: Tensor[(840), float32]) -> (Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) {
  %273 = cast(meta[relay.Constant][20] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %274 = cast(%var_6061, dtype="float32") /* ty=Tensor[(840), float32] */;
  %275 = reshape(%273, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %276 = reshape(%274, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %277 = @func_5380(%275, %276) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) */;
  %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %279 = cast(meta[relay.Constant][21] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %280 = reshape(%278, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %281 = reshape(%279, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %282 = @func_2971(%280, %281) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
  %283 = @func_6016() /* ty=Tensor[(12, 16, 13), float32] */;
  %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 13), float32] */, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %288 = subtract(%286, %287) /* ty=Tensor[(12, 16, 13), int16] */;
  %289 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = %277.3;
  %294 = %282.3;
  %295 = floor_mod(%291, %292) /* ty=Tensor[(12, 16, 13), float32] */;
  (%293, meta[relay.Constant][20] /* ty=Tensor[(384), int8] */, %var_6061, %294, meta[relay.Constant][21] /* ty=Tensor[(324), int8] */, %295)
}

def @func_5212(%var_5207: Tensor[(13, 5, 15), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(975), float64], Tensor[(13, 5, 15), bool]) {
  %296 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %297 = cast(meta[relay.Constant][23] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %298 = reshape(%297, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
  %299 = @func_4957(%298) /* ty=(Tensor[(13, 5, 15), float64],) */;
  %300 = %299.0;
  %301 = cast(%var_5207, dtype="bool") /* ty=Tensor[(13, 5, 15), bool] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(13, 5, 15), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %305 = %296.0;
  %306 = logical_or(%303, %304) /* ty=Tensor[(13, 5, 15), bool] */;
  (%305, meta[relay.Constant][23] /* ty=Tensor[(975), float64] */, %306)
}

def @func_6208(%var_6183: Tensor[(2, 108), int32]) -> (Tensor[(12, 16, 13), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(2, 108), int32], Tensor[(?, 1188), float32]) {
  %307 = @func_5419() /* ty=Tensor[(12, 16, 13), float32] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %309 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %310 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %311 = cast(%var_6183, dtype="int32") /* ty=Tensor[(2, 108), int32] */;
  %312 = reshape(%309, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %313 = reshape(%310, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %314 = reshape(%311, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %315 = @func_2577(%312, %313, %314) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %316 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(1, 1188), int32] */;
  %317 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(1, 1188), int32] */;
  %318 = reshape(%316, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %319 = reshape(%317, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %320 = @func_1312(%318, %319) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %323 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1188), int32] */, dtype="float32") /* ty=Tensor[(1, 1188), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %326 = rsqrt(%308) /* ty=Tensor[(12, 16, 13), float32] */;
  %327 = %315.4;
  %328 = power(%324, %325) /* ty=Tensor[(?, 1188), float32] */;
  (%326, %327, meta[relay.Constant][24] /* ty=Tensor[(1, 108), float32] */, %var_6183, %328)
}

def @func_289(%var_270: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float64] {
  %329 = cast(%var_270, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
  asinh(%329) /* ty=Tensor[(5, 5, 5), float64] */
}

def @func_6768(%var_6747: Tensor[(12, 16, 13), float32]) -> (Tensor[(12, 16, 13), bool],) {
  %330 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %331 = %330.0;
  %332 = cast(%var_6747, dtype="int64") /* ty=Tensor[(12, 16, 13), int64] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="int64") /* ty=Tensor[(12, 16, 13), int64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %336 = maximum(%334, %335) /* ty=Tensor[(12, 16, 13), int64] */;
  %337 = cast(%336, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %338 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%331, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = equal(%339, %340) /* ty=Tensor[(12, 16, 13), bool] */;
  (%341,)
}

def @func_6955(%var_6944: Tensor[(60), float32], %var_6945: Tensor[(1560), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 3, 10), float32], Tensor[(60), float32], Tensor[(1560), float64], Tensor[(12, 16, 13), float32]) {
  %342 = cast(%var_6944, dtype="float32") /* ty=Tensor[(60), float32] */;
  %343 = cast(%var_6945, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %344 = reshape(%342, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), float32] */;
  %345 = reshape(%343, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %346 = @func_6376(%344, %345) /* ty=(Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) */;
  %347 = @func_5749() /* ty=Tensor[(12, 16, 13), float32] */;
  %348 = %346.0;
  %349 = @func_6518() /* ty=Tensor[(12, 16, 13), float32] */;
  (%347, %348, %var_6944, %var_6945, %349)
}

def @func_6299() -> Tensor[(12, 16, 13), float32] {
  @func_5419() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6447() -> Tensor[(12, 16, 13), float32] {
  @func_6016() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_2840(%var_2802: Tensor[(5, 2, 12), int8], %var_2808: Tensor[(520), bool], %var_2837: Tensor[(840), float32]) -> (Tensor[(5, 2, 12), int8], Tensor[(13, 5, 8), bool], Tensor[(520), bool], Tensor[(90), float64], Tensor[(384), float64], Tensor[(4, 12, 8), bool], Tensor[(840), float32]) {
  %350 = cast(%var_2802, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %351 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 2, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 2, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %354 = cast(%var_2808, dtype="bool") /* ty=Tensor[(520), bool] */;
  %355 = reshape(%354, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
  %356 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %357 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %358 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %359 = reshape(%356, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %360 = reshape(%357, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %361 = reshape(%358, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %362 = @func_1884(%359, %360, %361) /* ty=(Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) */;
  %363 = %362.2;
  %364 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), int8] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(1), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(384), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?), float64] */;
  %368 = divide(%366, %367) /* ty=Tensor[(384), float64] */;
  %369 = cast(%368, dtype="int8") /* ty=Tensor[(384), int8] */;
  %370 = cast(%363, dtype="int8") /* ty=Tensor[(384), int8] */;
  %371 = cast(%var_2837, dtype="float32") /* ty=Tensor[(840), float32] */;
  %372 = reshape(%369, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %373 = reshape(%370, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %374 = reshape(%371, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %375 = @func_1052(%372, %373, %374) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %376 = bitwise_and(%352, %353) /* ty=Tensor[(5, 2, 12), int8] */;
  %377 = @func_1682(%355) /* ty=Tensor[(13, 5, 8), bool] */;
  %378 = %375.0;
  (%376, %377, %var_2808, meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, %368, %378, %var_2837)
}

def @func_571(%var_555: Tensor[(1, 5), uint16]) -> Tensor[(2, 5), uint16] {
  %379 = cast(%var_555, dtype="uint16") /* ty=Tensor[(1, 5), uint16] */;
  %380 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 5), uint16] */;
  left_shift(%379, %380) /* ty=Tensor[(2, 5), uint16] */
}

def @func_1230(%var_1222: Tensor[(3, 9, 8), int32], %var_1223: Tensor[(3, 9, 8), int32]) -> Tensor[(3, 9, 8), bool] {
  %381 = cast(%var_1223, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %382 = shape_of(%var_1222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_1222, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%383, %384) /* ty=Tensor[(3, 9, 8), bool] */
}

def @func_1682(%var_1677: Tensor[(13, 5, 8), bool]) -> Tensor[(13, 5, 8), bool] {
  %385 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %386 = cast(%var_1677, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  logical_or(%385, %386) /* ty=Tensor[(13, 5, 8), bool] */
}

def @func_1386(%var_1376: Tensor[(12, 6, 13), bool], %var_1377: Tensor[(12, 6, 13), bool]) -> Tensor[(12, 6, 13), bool] {
  %387 = cast(%var_1377, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %388 = shape_of(%var_1376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_1376, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%389, %390) /* ty=Tensor[(12, 6, 13), bool] */
}

def @func_1312(%var_1297: Tensor[(11, 9, 12), int32], %var_1298: Tensor[(11, 9, 12), int32]) -> (Tensor[(11, 9, 12), bool],) {
  %391 = cast(%var_1298, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %392 = shape_of(%var_1297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_1297, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = less(%393, %394) /* ty=Tensor[(11, 9, 12), bool] */;
  (%395,)
}

def @func_1052(%var_1040: Tensor[(4, 12, 8), int8], %var_1041: Tensor[(4, 12, 8), int8], %var_1046: Tensor[(840), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) {
  %396 = cast(%var_1041, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %397 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_1040, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = cast(%var_1046, dtype="float32") /* ty=Tensor[(840), float32] */;
  %401 = reshape(%400, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
  %402 = greater_equal(%398, %399) /* ty=Tensor[(4, 12, 8), bool] */;
  %403 = @func_147(%401) /* ty=Tensor[(12, 14, 5), bool] */;
  (%402, %403, %var_1046)
}

def @func_5071(%var_5024: Tensor[(40), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) {
  %404 = cast(%var_5024, dtype="float32") /* ty=Tensor[(40), float32] */;
  %405 = cast(%var_5024, dtype="float32") /* ty=Tensor[(40), float32] */;
  %406 = reshape(%404, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
  %407 = reshape(%405, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
  %408 = @func_2485(%406, %407) /* ty=(Tensor[(4, 5, 2), float32],) */;
  %409 = cast(meta[relay.Constant][30] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %410 = reshape(%409, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %411 = @func_3134(%410) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) */;
  %412 = cast(meta[relay.Constant][31] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %413 = reshape(%412, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %414 = @func_289(%413) /* ty=Tensor[(5, 5, 5), float64] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
  %416 = tan(%415) /* ty=Tensor[(5, 5, 5), float64] */;
  %417 = cast(meta[relay.Constant][31] /* ty=Tensor[(125), float64] */, dtype="uint32") /* ty=Tensor[(125), uint32] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="uint32") /* ty=Tensor[(5, 5, 5), uint32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %421 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %422 = %408.0;
  %423 = %411.0;
  %424 = logical_xor(%419, %420) /* ty=Tensor[(5, 5, 5), uint32] */;
  (%421, %422, %var_5024, %423, meta[relay.Constant][30] /* ty=Tensor[(728), float32] */, %424)
}

def @func_4583(%var_4546: Tensor[(2, 15, 8), int16], %var_4547: Tensor[(2, 15, 8), int16], %var_4572: Tensor[(5), uint16]) -> (Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) {
  %425 = cast(%var_4547, dtype="int16") /* ty=Tensor[(2, 15, 8), int16] */;
  %426 = shape_of(%var_4546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_4546, dtype="int16") /* ty=Tensor[(2, 15, 8), int16] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %429 = bitwise_and(%427, %428) /* ty=Tensor[(2, 15, 8), int16] */;
  %430 = cast(%429, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
  %431 = shape_of(%var_4547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_4547, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %435 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %436 = reshape(%434, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %437 = reshape(%435, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %438 = @func_1286(%436, %437) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %439 = cast(%429, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %440 = cast(%var_4572, dtype="uint16") /* ty=Tensor[(5), uint16] */;
  %441 = reshape(%440, newshape=[1, 5]) /* ty=Tensor[(1, 5), uint16] */;
  %442 = cast(meta[relay.Constant][33] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %443 = reshape(%442, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %444 = logical_or(%432, %433) /* ty=Tensor[(2, 15, 8), bool] */;
  %445 = %438.0;
  %446 = asin(%439) /* ty=Tensor[(2, 15, 8), float32] */;
  %447 = @func_571(%441) /* ty=Tensor[(2, 5), uint16] */;
  %448 = @func_289(%443) /* ty=Tensor[(5, 5, 5), float64] */;
  (%444, %445, meta[relay.Constant][32] /* ty=Tensor[(216), int16] */, %446, %447, %var_4572, %448, meta[relay.Constant][33] /* ty=Tensor[(125), float64] */)
}

def @func_5997(%var_5954: Tensor[(1144, 1), float32], %var_5955: Tensor[(108), float32], %var_5960: Tensor[(14, 216), float64], %var_5993: Tensor[(14, 216), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 11, 9), int32], Tensor[(54, 22), int32], Tensor[(1144, 1), float32], Tensor[(108), float32], Tensor[(14, 216), float64], Tensor[(12, 16, 13), float32], Tensor[(14, 216), int64]) {
  %449 = cast(meta[relay.Constant][34] /* ty=Tensor[(54, 22), int32] */, dtype="int32") /* ty=Tensor[(54, 22), int32] */;
  %450 = cast(meta[relay.Constant][34] /* ty=Tensor[(54, 22), int32] */, dtype="int32") /* ty=Tensor[(54, 22), int32] */;
  %451 = reshape(%449, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %452 = reshape(%450, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %453 = cast(%var_5954, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %454 = cast(%var_5955, dtype="float32") /* ty=Tensor[(108), float32] */;
  %455 = reshape(%453, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %456 = reshape(%454, newshape=[1, 108]) /* ty=Tensor[(1, 108), float32] */;
  %457 = @func_3506(%455, %456) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) */;
  %458 = %457.3;
  %459 = cast(%var_5960, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(2), int32] */;
  %461 = cast(%458, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %463 = @func_5821() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) */;
  %464 = cast(%var_5960, dtype="float32") /* ty=Tensor[(14, 216), float32] */;
  %465 = sin(%464) /* ty=Tensor[(14, 216), float32] */;
  %466 = cast(%var_5993, dtype="int64") /* ty=Tensor[(14, 216), int64] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(2), int32] */;
  %468 = cast(%465, dtype="int64") /* ty=Tensor[(14, 216), int64] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %470 = @func_5419() /* ty=Tensor[(12, 16, 13), float32] */;
  %471 = @func_2423(%451, %452) /* ty=Tensor[(12, 11, 9), int32] */;
  %472 = mod(%461, %462) /* ty=Tensor[(14, 216), float64] */;
  %473 = %463.0;
  %474 = bitwise_and(%468, %469) /* ty=Tensor[(14, 216), int64] */;
  (%470, %471, meta[relay.Constant][34] /* ty=Tensor[(54, 22), int32] */, %var_5954, %var_5955, %472, %473, %474)
}

def @func_5513() -> (Tensor[(12, 16, 13), float32],) {
  %475 = @func_5344() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) */;
  %476 = %475.0;
  (%476,)
}

def @func_5705(%var_5674: Tensor[(15, 13, 8), float64]) -> (Tensor[(15, 13, 8), float64],) {
  %477 = cast(%var_5674, dtype="float64") /* ty=Tensor[(15, 13, 8), float64] */;
  %478 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(15, 13, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 8), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = mod(%479, %480) /* ty=Tensor[(15, 13, 8), float64] */;
  (%481,)
}

def @func_5419() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_2485(%var_2478: Tensor[(4, 5, 2), float32], %var_2479: Tensor[(4, 5, 2), float32]) -> (Tensor[(4, 5, 2), float32],) {
  %482 = cast(%var_2479, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  %483 = shape_of(%var_2478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_2478, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %486 = mod(%484, %485) /* ty=Tensor[(4, 5, 2), float32] */;
  (%486,)
}

def @func_5380(%var_5361: Tensor[(384), int8], %var_5362: Tensor[(840), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) {
  %487 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %488 = cast(%var_5361, dtype="int8") /* ty=Tensor[(384), int8] */;
  %489 = cast(%var_5361, dtype="int8") /* ty=Tensor[(384), int8] */;
  %490 = cast(%var_5362, dtype="float32") /* ty=Tensor[(840), float32] */;
  %491 = reshape(%488, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %492 = reshape(%489, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %493 = reshape(%490, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %494 = @func_1052(%491, %492, %493) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %495 = cast(meta[relay.Constant][36] /* ty=Tensor[(5), uint16] */, dtype="uint16") /* ty=Tensor[(5), uint16] */;
  %496 = reshape(%495, newshape=[1, 5]) /* ty=Tensor[(1, 5), uint16] */;
  %497 = %487.0;
  %498 = %494.1;
  %499 = @func_571(%496) /* ty=Tensor[(2, 5), uint16] */;
  (%497, %498, %var_5361, %var_5362, %499, meta[relay.Constant][36] /* ty=Tensor[(5), uint16] */)
}

def @func_6016() -> Tensor[(12, 16, 13), float32] {
  %500 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %500.0
}

def @func_3217(%var_3169: Tensor[(12, 6, 15), float64], %var_3170: Tensor[(12, 6, 15), float64], %var_3175: Tensor[(12, 6, 15), float64], %var_3195: Tensor[(324), int8], %var_3198: Tensor[(384), int8]) -> (Tensor[(12, 6, 15), float64], Tensor[(12, 6, 15), float64], Tensor[(72), float64], Tensor[(324), int8], Tensor[(384), int8], Tensor[(384), int8], Tensor[(840), float32], Tensor[(216), int16], Tensor[(936, 1), bool]) {
  %501 = cast(%var_3170, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %502 = shape_of(%var_3169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_3169, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %505 = cast(%var_3175, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %506 = shape_of(%var_3169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_3169, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %509 = cast(%var_3195, dtype="int8") /* ty=Tensor[(324), int8] */;
  %510 = cast(%var_3195, dtype="int8") /* ty=Tensor[(324), int8] */;
  %511 = reshape(%509, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %512 = reshape(%510, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %513 = @func_2971(%511, %512) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
  %514 = cast(%var_3198, dtype="int8") /* ty=Tensor[(384), int8] */;
  %515 = cast(meta[relay.Constant][37] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %516 = cast(meta[relay.Constant][38] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %517 = cast(meta[relay.Constant][39] /* ty=Tensor[(936, 1), bool] */, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %518 = reshape(%514, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %519 = reshape(%515, newshape=[6, 140]) /* ty=Tensor[(6, 140), float32] */;
  %520 = reshape(%516, newshape=[216]) /* ty=Tensor[(216), int16] */;
  %521 = reshape(%517, newshape=[936]) /* ty=Tensor[(936), bool] */;
  %522 = @func_1639(%518, %519, %520, %521) /* ty=(Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) */;
  %523 = floor_mod(%503, %504) /* ty=Tensor[(12, 6, 15), float64] */;
  %524 = floor_divide(%507, %508) /* ty=Tensor[(12, 6, 15), float64] */;
  %525 = %513.3;
  %526 = %522.2;
  (%523, %524, %525, %var_3195, %526, %var_3198, meta[relay.Constant][37] /* ty=Tensor[(840), float32] */, meta[relay.Constant][38] /* ty=Tensor[(216), int16] */, meta[relay.Constant][39] /* ty=Tensor[(936, 1), bool] */)
}

def @func_6995(%var_6993: Tensor[(468, 4), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 9, 16), bool], Tensor[(468, 4), float32]) {
  %527 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %530 = cast(%var_6993, dtype="float32") /* ty=Tensor[(468, 4), float32] */;
  %531 = reshape(%530, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), float32] */;
  %532 = @func_4784(%531) /* ty=(Tensor[(13, 9, 16), bool],) */;
  %533 = cosh(%529) /* ty=Tensor[(12, 16, 13), float32] */;
  %534 = %532.0;
  (%533, %534, %var_6993)
}

def @func_3134(%var_3127: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) {
  %535 = cast(%var_3127, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %536 = cast(%var_3127, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %537 = rsqrt(%535) /* ty=Tensor[(7, 8, 13), float32] */;
  %538 = erf(%536) /* ty=Tensor[(7, 8, 13), float32] */;
  (%537, %538)
}

def @func_5176() -> (Tensor[(12, 16, 13), float32],) {
  %539 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  (%539,)
}

def @func_765(%var_754: Tensor[(4, 6, 1), float64], %var_755: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), bool] {
  %540 = cast(%var_754, dtype="float64") /* ty=Tensor[(4, 6, 1), float64] */;
  %541 = cast(%var_755, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
  %542 = floor_mod(%540, %541) /* ty=Tensor[(4, 6, 3), float64] */;
  %543 = cast(%var_754, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %544 = cast(%542, dtype="bool") /* ty=Tensor[(4, 6, 3), bool] */;
  greater_equal(%543, %544) /* ty=Tensor[(4, 6, 3), bool] */
}

def @func_3506(%var_3480: Tensor[(13, 8, 11), float32], %var_3492: Tensor[(1, 108), float32]) -> (Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) {
  %545 = cast(%var_3480, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
  %546 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(13, 8, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %549 = cast(%var_3492, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %550 = cast(%var_3492, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %551 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 216), int32] */, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %552 = reshape(%549, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %553 = reshape(%550, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %554 = reshape(%551, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %555 = @func_2577(%552, %553, %554) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %556 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 216), int32] */, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %557 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 216), int32] */, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %558 = mod(%547, %548) /* ty=Tensor[(13, 8, 11), float32] */;
  %559 = %555.4;
  %560 = divide(%556, %557) /* ty=Tensor[(14, 216), float64] */;
  (%558, %559, %var_3492, %560)
}

def @func_4285(%var_4142: Tensor[(2, 7, 8), float64], %var_4208: Tensor[(2, 7, 8), int64], %var_4223: Tensor[(1188), int32], %var_4228: Tensor[(780, 2), bool]) -> (Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) {
  %561 = cast(%var_4142, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %562 = cast(%var_4142, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %563 = cast(meta[relay.Constant][44] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %565 = reshape(%563, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %566 = reshape(%564, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %567 = @func_1286(%565, %566) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %568 = cast(meta[relay.Constant][45] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %569 = cast(meta[relay.Constant][45] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %570 = cast(meta[relay.Constant][46] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %571 = reshape(%568, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %572 = reshape(%569, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %573 = reshape(%570, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %574 = @func_1052(%571, %572, %573) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %575 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int64") /* ty=Tensor[(2, 7, 8), int64] */;
  %576 = shape_of(%var_4142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_4142, dtype="int64") /* ty=Tensor[(2, 7, 8), int64] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %579 = right_shift(%577, %578) /* ty=Tensor[(2, 7, 8), int64] */;
  %580 = cast(%var_4208, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = cast(%var_4228, dtype="bool") /* ty=Tensor[(780, 2), bool] */;
  %585 = cast(%var_4228, dtype="bool") /* ty=Tensor[(780, 2), bool] */;
  %586 = reshape(%584, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %587 = reshape(%585, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %588 = @func_3552(%586, %587) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %589 = cast(meta[relay.Constant][48] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %590 = cast(meta[relay.Constant][48] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %591 = %567.0;
  %592 = cast(%591, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %593 = reshape(%589, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %594 = reshape(%590, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %595 = reshape(%592, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %596 = @func_2577(%593, %594, %595) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %597 = cast(%var_4223, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %598 = cast(%var_4223, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %599 = reshape(%597, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %600 = reshape(%598, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %601 = @func_2423(%599, %600) /* ty=Tensor[(12, 11, 9), int32] */;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %603 = %588.0;
  %604 = cast(%603, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %605 = cast(%603, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %606 = reshape(%604, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %607 = reshape(%605, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %608 = @func_3552(%606, %607) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %609 = cast(meta[relay.Constant][43] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %610 = cast(meta[relay.Constant][43] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %611 = reshape(%609, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %612 = reshape(%610, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %613 = @func_2971(%611, %612) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %616 = cosh(%561) /* ty=Tensor[(2, 7, 8), float64] */;
  %617 = rsqrt(%562) /* ty=Tensor[(2, 7, 8), float64] */;
  %618 = %574.2;
  %619 = less_equal(%582, %583) /* ty=Tensor[(2, 7, 8), bool] */;
  %620 = %596.2;
  %621 = erf(%602) /* ty=Tensor[(12, 11, 9), float32] */;
  %622 = %608.0;
  %623 = sigmoid(%615) /* ty=Tensor[(4, 9, 9), float32] */;
  (%616, meta[relay.Constant][43] /* ty=Tensor[(324), int8] */, %617, %591, meta[relay.Constant][44] /* ty=Tensor[(216), int16] */, %618, meta[relay.Constant][45] /* ty=Tensor[(384), int8] */, meta[relay.Constant][46] /* ty=Tensor[(420, 2), float32] */, %619, %var_4223, %603, %var_4228, %620, meta[relay.Constant][48] /* ty=Tensor[(108), float32] */, %621, %622, %623)
}

def @func_4957(%var_4952: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 5, 15), float64],) {
  %624 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
  %625 = shape_of(%var_4952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_4952, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %628 = multiply(%626, %627) /* ty=Tensor[(13, 5, 15), float64] */;
  (%628,)
}

def @func_2423(%var_2408: Tensor[(12, 11, 9), int32], %var_2409: Tensor[(12, 11, 9), int32]) -> Tensor[(12, 11, 9), int32] {
  %629 = cast(%var_2409, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %630 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_2408, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%631, %632) /* ty=Tensor[(12, 11, 9), int32] */
}

def @func_1286(%var_1260: Tensor[(6, 4, 9), int16], %var_1261: Tensor[(6, 4, 9), int16]) -> (Tensor[(6, 4, 9), bool],) {
  %633 = cast(%var_1261, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %634 = shape_of(%var_1260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_1260, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = not_equal(%635, %636) /* ty=Tensor[(6, 4, 9), bool] */;
  (%637,)
}

def @func_6672(%var_6591: Tensor[(11, 9, 12), float32], %var_6607: Tensor[(11, 9, 12), float32], %var_6616: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), int16], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), uint8], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), float32], Tensor[(12, 16, 13), float32]) {
  %638 = @func_5821() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) */;
  %639 = %638.1;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %641 = cos(%640) /* ty=Tensor[(11, 9, 12), float32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %643 = exp(%642) /* ty=Tensor[(11, 9, 12), float32] */;
  %644 = cast(%var_6591, dtype="int16") /* ty=Tensor[(11, 9, 12), int16] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="int16") /* ty=Tensor[(11, 9, 12), int16] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %648 = cast(%var_6616, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %649 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%641, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %652 = cast(%var_6607, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %653 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%641, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %656 = divide(%654, %655) /* ty=Tensor[(11, 9, 12), float64] */;
  %657 = cast(%641, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %658 = atanh(%657) /* ty=Tensor[(11, 9, 12), float32] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %660 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%639, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %663 = floor_divide(%661, %662) /* ty=Tensor[(11, 9, 12), float32] */;
  %664 = cast(%663, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %665 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%656, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = greater_equal(%666, %667) /* ty=Tensor[(11, 9, 12), bool] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %670 = sqrt(%669) /* ty=Tensor[(11, 9, 12), float32] */;
  %671 = cast(%643, dtype="uint8") /* ty=Tensor[(11, 9, 12), uint8] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="uint8") /* ty=Tensor[(11, 9, 12), uint8] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %675 = cast(%643, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %676 = cast(%670, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %677 = maximum(%646, %647) /* ty=Tensor[(11, 9, 12), int16] */;
  %678 = mod(%650, %651) /* ty=Tensor[(11, 9, 12), float64] */;
  %679 = bitwise_or(%673, %674) /* ty=Tensor[(11, 9, 12), uint8] */;
  %680 = rsqrt(%675) /* ty=Tensor[(11, 9, 12), float64] */;
  %681 = acos(%676) /* ty=Tensor[(11, 9, 12), float32] */;
  %682 = @func_5666() /* ty=Tensor[(12, 16, 13), float32] */;
  (%677, %678, %679, %680, %681, %682)
}

def @func_5482(%var_5468: Tensor[(240), int16]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 5, 8), bool], Tensor[(5, 104), bool], Tensor[(5), uint16], Tensor[(240), int16], Tensor[(1, 5), uint16], Tensor[(6, 4, 9), bool], Tensor[(36, 6), int16]) {
  %683 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %685 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 104), bool] */, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %686 = reshape(%685, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
  %687 = cast(%var_5468, dtype="int16") /* ty=Tensor[(240), int16] */;
  %688 = cast(%var_5468, dtype="int16") /* ty=Tensor[(240), int16] */;
  %689 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 5), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5), uint16] */;
  %690 = reshape(%687, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %691 = reshape(%688, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %692 = reshape(%689, newshape=[5]) /* ty=Tensor[(5), uint16] */;
  %693 = @func_4583(%690, %691, %692) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
  %694 = cast(meta[relay.Constant][52] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %695 = cast(meta[relay.Constant][52] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %696 = reshape(%694, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %697 = reshape(%695, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %698 = @func_1286(%696, %697) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %699 = sin(%684) /* ty=Tensor[(12, 16, 13), float32] */;
  %700 = @func_1682(%686) /* ty=Tensor[(13, 5, 8), bool] */;
  %701 = %693.5;
  %702 = %698.0;
  (%699, %700, meta[relay.Constant][50] /* ty=Tensor[(5, 104), bool] */, %701, %var_5468, meta[relay.Constant][51] /* ty=Tensor[(1, 5), uint16] */, %702, meta[relay.Constant][52] /* ty=Tensor[(36, 6), int16] */)
}

def @func_5821() -> (Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) {
  %703 = @func_5344() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) */;
  %704 = cast(meta[relay.Constant][53] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %705 = cast(meta[relay.Constant][53] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %706 = reshape(%704, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %707 = reshape(%705, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %708 = @func_1312(%706, %707) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %709 = %703.0;
  %710 = %708.0;
  (%709, %710, meta[relay.Constant][53] /* ty=Tensor[(1188), int32] */)
}

def @func_6518() -> Tensor[(12, 16, 13), float32] {
  %711 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %711.0
}

def @func_1884(%var_1854: Tensor[(10, 9), float64], %var_1855: Tensor[(10, 9), float64], %var_1873: Tensor[(384), int8]) -> (Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) {
  %712 = cast(%var_1855, dtype="float64") /* ty=Tensor[(10, 9), float64] */;
  %713 = shape_of(%var_1854, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%var_1854, dtype="float64") /* ty=Tensor[(10, 9), float64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %716 = cast(%var_1873, dtype="int8") /* ty=Tensor[(384), int8] */;
  %717 = cast(%var_1873, dtype="int8") /* ty=Tensor[(384), int8] */;
  %718 = cast(meta[relay.Constant][54] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %719 = reshape(%716, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %720 = reshape(%717, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %721 = reshape(%718, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %722 = @func_1052(%719, %720, %721) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %723 = divide(%714, %715) /* ty=Tensor[(10, 9), float64] */;
  %724 = %722.1;
  (%723, %724, %var_1873, meta[relay.Constant][54] /* ty=Tensor[(420, 2), float32] */)
}

def @func_6273(%var_6240: Tensor[(4, 12, 15), float32], %var_6268: Tensor[(90), float64], %var_6269: Tensor[(96, 4), int8]) -> (Tensor[(4, 12, 15), float32], Tensor[(384), int8], Tensor[(90), float64], Tensor[(96, 4), int8]) {
  %725 = cast(%var_6240, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  %726 = cast(%var_6268, dtype="float64") /* ty=Tensor[(90), float64] */;
  %727 = cast(%var_6268, dtype="float64") /* ty=Tensor[(90), float64] */;
  %728 = cast(%var_6269, dtype="int8") /* ty=Tensor[(96, 4), int8] */;
  %729 = reshape(%726, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %730 = reshape(%727, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %731 = reshape(%728, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %732 = @func_1884(%729, %730, %731) /* ty=(Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) */;
  %733 = log(%725) /* ty=Tensor[(4, 12, 15), float32] */;
  %734 = %732.2;
  (%733, %734, %var_6268, %var_6269)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5143(%var_5118: Tensor[(112), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 7, 8), float64], Tensor[(112), float64], Tensor[(1188), int32], Tensor[(1560), bool], Tensor[(2, 15, 8), float32], Tensor[(2, 120), int16], Tensor[(5), uint16]) {
  %0 = cast(%var_5118, dtype="float64") /* ty=Tensor[(112), float64] */;
  %1 = cast(%var_5118, dtype="int64") /* ty=Tensor[(112), int64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %4 = reshape(%0, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float64] */;
  %5 = reshape(%1, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), int64] */;
  %6 = reshape(%2, newshape=[1188]) /* ty=Tensor[(1188), int32] */;
  %7 = reshape(%3, newshape=[780, 2]) /* ty=Tensor[(780, 2), bool] */;
  %8 = @func_4285(%4, %5, %6, %7) /* ty=(Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, dtype="int16") /* ty=Tensor[(2, 120), int16] */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, dtype="int16") /* ty=Tensor[(2, 120), int16] */;
  %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(5), uint16] */, dtype="uint16") /* ty=Tensor[(5), uint16] */;
  %12 = reshape(%9, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %13 = reshape(%10, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %14 = reshape(%11, newshape=[5]) /* ty=Tensor[(5), uint16] */;
  %15 = @func_4583(%12, %13, %14) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
  %16 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %17 = %8.2;
  %18 = %15.3;
  (%16, %17, %var_5118, meta[relay.Constant][0] /* ty=Tensor[(1188), int32] */, meta[relay.Constant][1] /* ty=Tensor[(1560), bool] */, %18, meta[relay.Constant][2] /* ty=Tensor[(2, 120), int16] */, meta[relay.Constant][3] /* ty=Tensor[(5), uint16] */)
}

def @func_6959(%var_6957: Tensor[(60), float32], %var_6958: Tensor[(1560), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 3, 10), float32], Tensor[(60), float32], Tensor[(1560), float64], Tensor[(12, 16, 13), float32]) {
  @func_6955(%var_6957, %var_6958) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(2, 3, 10), float32], Tensor[(60), float32], Tensor[(1560), float64], Tensor[(12, 16, 13), float32]) */
}

def @func_2971(%var_2939: Tensor[(4, 9, 9), int8], %var_2940: Tensor[(4, 9, 9), int8]) -> (Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) {
  %19 = cast(%var_2940, dtype="int8") /* ty=Tensor[(4, 9, 9), int8] */;
  %20 = shape_of(%var_2939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_2939, dtype="int8") /* ty=Tensor[(4, 9, 9), int8] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %23 = cast(meta[relay.Constant][4] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %24 = cast(meta[relay.Constant][5] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %25 = reshape(%23, newshape=[4, 6, 1]) /* ty=Tensor[(4, 6, 1), float64] */;
  %26 = reshape(%24, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
  %27 = cast(%var_2940, dtype="float64") /* ty=Tensor[(4, 9, 9), float64] */;
  %28 = log(%27) /* ty=Tensor[(4, 9, 9), float64] */;
  %29 = cast(%var_2940, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %33 = cast(%28, dtype="float64") /* ty=Tensor[(4, 9, 9), float64] */;
  %34 = add(%21, %22) /* ty=Tensor[(4, 9, 9), int8] */;
  %35 = @func_765(%25, %26) /* ty=Tensor[(4, 6, 3), bool] */;
  %36 = floor_divide(%31, %32) /* ty=Tensor[(4, 9, 9), float32] */;
  %37 = asinh(%33) /* ty=Tensor[(4, 9, 9), float64] */;
  (%34, %35, meta[relay.Constant][4] /* ty=Tensor[(24), float64] */, meta[relay.Constant][5] /* ty=Tensor[(72), float64] */, %36, %37)
}

def @func_5215(%var_5213: Tensor[(13, 5, 15), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(975), float64], Tensor[(13, 5, 15), bool]) {
  @func_5212(%var_5213) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(975), float64], Tensor[(13, 5, 15), bool]) */
}

def @func_6930() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_2975(%var_2973: Tensor[(4, 9, 9), int8], %var_2974: Tensor[(4, 9, 9), int8]) -> (Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) {
  @func_2971(%var_2973, %var_2974) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */
}

def @func_4668(%var_4666: Tensor[(1, 2, 15), float64], %var_4667: Tensor[(1188), int32]) -> (Tensor[(1, 2, 15), float64], Tensor[(1, 2, 15), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32]) {
  %49 = fn (%var_4628: Tensor[(1, 2, 15), float64], %var_4658: Tensor[(1188), int32]) -> (Tensor[(1, 2, 15), float64], Tensor[(1, 2, 15), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32]) {
    %38 = cast(%var_4628, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
    %39 = tan(%38) /* ty=Tensor[(1, 2, 15), float64] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
    %41 = cast(%39, dtype="float32") /* ty=Tensor[(1, 2, 15), float32] */;
    %42 = cast(%var_4658, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %43 = cast(%var_4658, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %44 = reshape(%42, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
    %45 = reshape(%43, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
    %46 = sin(%40) /* ty=Tensor[(1, 2, 15), float64] */;
    %47 = atanh(%41) /* ty=Tensor[(1, 2, 15), float32] */;
    %48 = @func_2423(%44, %45) /* ty=Tensor[(12, 11, 9), int32] */;
    (%46, %47, %48, %var_4658)
  };
  %49(%var_4666, %var_4667) /* ty=(Tensor[(1, 2, 15), float64], Tensor[(1, 2, 15), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32]) */
}

def @func_5318(%var_5314: Tensor[(8, 30), int16], %var_5315: Tensor[(5, 1), uint16], %var_5316: Tensor[(840), float32], %var_5317: Tensor[(125), float32]) -> (Tensor[(5, 5, 5), float64], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32], Tensor[(12, 16, 13), float32], Tensor[(5, 5, 5), float64], Tensor[(8, 30), int16], Tensor[(5, 1), uint16], Tensor[(12, 14, 5), bool], Tensor[(840), float32], Tensor[(728), float32], Tensor[(125), bool], Tensor[(125), float64]) {
  %96 = fn (%var_5287: Tensor[(8, 30), int16], %var_5288: Tensor[(5, 1), uint16], %var_5296: Tensor[(840), float32], %var_5304: Tensor[(125), float32]) -> (Tensor[(5, 5, 5), float64], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32], Tensor[(12, 16, 13), float32], Tensor[(5, 5, 5), float64], Tensor[(8, 30), int16], Tensor[(5, 1), uint16], Tensor[(12, 14, 5), bool], Tensor[(840), float32], Tensor[(728), float32], Tensor[(125), bool], Tensor[(125), float64]) {
    %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
    %51 = reshape(%50, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %52 = cast(meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %53 = cast(meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %54 = reshape(%52, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
    %55 = reshape(%53, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
    %56 = @func_2485(%54, %55) /* ty=(Tensor[(4, 5, 2), float32],) */;
    %57 = cast(meta[relay.Constant][8] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %58 = cast(meta[relay.Constant][8] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %59 = reshape(%57, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
    %60 = reshape(%58, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
    %61 = @func_1312(%59, %60) /* ty=(Tensor[(11, 9, 12), bool],) */;
    %62 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
    %63 = cast(%62, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %64 = cast(%var_5287, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
    %65 = cast(%var_5287, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
    %66 = cast(%var_5288, dtype="uint16") /* ty=Tensor[(5, 1), uint16] */;
    %67 = reshape(%64, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
    %68 = reshape(%65, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
    %69 = reshape(%66, newshape=[5]) /* ty=Tensor[(5), uint16] */;
    %70 = @func_4583(%67, %68, %69) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
    %71 = cast(%var_5296, dtype="float32") /* ty=Tensor[(840), float32] */;
    %72 = reshape(%71, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
    %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %74 = reshape(%73, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %75 = @func_5071(%74) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) */;
    %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(125), float64] */, dtype="float32") /* ty=Tensor[(125), float32] */;
    %77 = rsqrt(%76) /* ty=Tensor[(125), float32] */;
    %78 = cast(%var_5304, dtype="bool") /* ty=Tensor[(125), bool] */;
    %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(1), int32] */;
    %80 = cast(%77, dtype="bool") /* ty=Tensor[(125), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?), bool] */;
    %82 = cast(%77, dtype="float64") /* ty=Tensor[(125), float64] */;
    %83 = tan(%82) /* ty=Tensor[(125), float64] */;
    %84 = cast(%83, dtype="float64") /* ty=Tensor[(125), float64] */;
    %85 = sqrt(%84) /* ty=Tensor[(125), float64] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(125), float64] */;
    %87 = @func_289(%51) /* ty=Tensor[(5, 5, 5), float64] */;
    %88 = %56.0;
    %89 = %61.0;
    %90 = cos(%63) /* ty=Tensor[(12, 16, 13), float32] */;
    %91 = %70.6;
    %92 = @func_147(%72) /* ty=Tensor[(12, 14, 5), bool] */;
    %93 = %75.4;
    %94 = equal(%80, %81) /* ty=Tensor[(125), bool] */;
    %95 = log10(%86) /* ty=Tensor[(125), float64] */;
    (%87, %88, meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, %89, meta[relay.Constant][8] /* ty=Tensor[(1188), int32] */, %90, %91, %var_5287, %var_5288, %92, %var_5296, %93, %94, %95)
  };
  %96(%var_5314, %var_5315, %var_5316, %var_5317) /* ty=(Tensor[(5, 5, 5), float64], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32], Tensor[(12, 16, 13), float32], Tensor[(5, 5, 5), float64], Tensor[(8, 30), int16], Tensor[(5, 1), uint16], Tensor[(12, 14, 5), bool], Tensor[(840), float32], Tensor[(728), float32], Tensor[(125), bool], Tensor[(125), float64]) */
}

def @func_5922() -> (Tensor[(12, 16, 13), float32],) {
  %98 = fn () -> (Tensor[(12, 16, 13), float32],) {
    %97 = @func_5666() /* ty=Tensor[(12, 16, 13), float32] */;
    (%97,)
  };
  %98() /* ty=(Tensor[(12, 16, 13), float32],) */
}

def @func_571(%var_555: Tensor[(1, 5), uint16]) -> Tensor[(2, 5), uint16] {
  %99 = cast(%var_555, dtype="uint16") /* ty=Tensor[(1, 5), uint16] */;
  %100 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 5), uint16] */;
  left_shift(%99, %100) /* ty=Tensor[(2, 5), uint16] */
}

def @func_5384(%var_5382: Tensor[(384), int8], %var_5383: Tensor[(840), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) {
  @func_5380(%var_5382, %var_5383) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) */
}

def @func_6003(%var_5999: Tensor[(1144, 1), float32], %var_6000: Tensor[(108), float32], %var_6001: Tensor[(14, 216), float64], %var_6002: Tensor[(14, 216), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 11, 9), int32], Tensor[(54, 22), int32], Tensor[(1144, 1), float32], Tensor[(108), float32], Tensor[(14, 216), float64], Tensor[(12, 16, 13), float32], Tensor[(14, 216), int64]) {
  @func_5997(%var_5999, %var_6000, %var_6001, %var_6002) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(12, 11, 9), int32], Tensor[(54, 22), int32], Tensor[(1144, 1), float32], Tensor[(108), float32], Tensor[(14, 216), float64], Tensor[(12, 16, 13), float32], Tensor[(14, 216), int64]) */
}

def @func_6955(%var_6944: Tensor[(60), float32], %var_6945: Tensor[(1560), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 3, 10), float32], Tensor[(60), float32], Tensor[(1560), float64], Tensor[(12, 16, 13), float32]) {
  %101 = cast(%var_6944, dtype="float32") /* ty=Tensor[(60), float32] */;
  %102 = cast(%var_6945, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %103 = reshape(%101, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), float32] */;
  %104 = reshape(%102, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %105 = @func_6376(%103, %104) /* ty=(Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) */;
  %106 = @func_5749() /* ty=Tensor[(12, 16, 13), float32] */;
  %107 = %105.0;
  %108 = @func_6518() /* ty=Tensor[(12, 16, 13), float32] */;
  (%106, %107, %var_6944, %var_6945, %108)
}

def @func_5345() -> (Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) {
  %117 = fn () -> (Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) {
    %109 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
    %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 780), bool] */, dtype="bool") /* ty=Tensor[(2, 780), bool] */;
    %111 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 780), bool] */, dtype="bool") /* ty=Tensor[(2, 780), bool] */;
    %112 = reshape(%110, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
    %113 = reshape(%111, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
    %114 = @func_3552(%112, %113) /* ty=(Tensor[(10, 13, 12), bool],) */;
    %115 = %109.0;
    %116 = %114.0;
    (%115, %116, meta[relay.Constant][10] /* ty=Tensor[(2, 780), bool] */)
  };
  %117() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) */
}

def @func_6118(%var_6117: Tensor[(840), float32]) -> (Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) {
  %141 = fn (%var_6061: Tensor[(840), float32]) -> (Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) {
    %118 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
    %119 = cast(%var_6061, dtype="float32") /* ty=Tensor[(840), float32] */;
    %120 = reshape(%118, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %121 = reshape(%119, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %122 = @func_5380(%120, %121) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) */;
    %123 = cast(meta[relay.Constant][12] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
    %124 = cast(meta[relay.Constant][12] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
    %125 = reshape(%123, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
    %126 = reshape(%124, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
    %127 = @func_2971(%125, %126) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
    %128 = @func_6016() /* ty=Tensor[(12, 16, 13), float32] */;
    %129 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 16, 13), float32] */, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="int16") /* ty=Tensor[(12, 16, 13), int16] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %133 = subtract(%131, %132) /* ty=Tensor[(12, 16, 13), int16] */;
    %134 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %138 = %122.3;
    %139 = %127.3;
    %140 = floor_mod(%136, %137) /* ty=Tensor[(12, 16, 13), float32] */;
    (%138, meta[relay.Constant][11] /* ty=Tensor[(384), int8] */, %var_6061, %139, meta[relay.Constant][12] /* ty=Tensor[(324), int8] */, %140)
  };
  %141(%var_6117) /* ty=(Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) */
}

def @func_6211(%var_6209: Tensor[(2, 108), int32]) -> (Tensor[(12, 16, 13), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(2, 108), int32], Tensor[(?, 1188), float32]) {
  @func_6208(%var_6209) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(2, 108), int32], Tensor[(?, 1188), float32]) */
}

def @func_574(%var_572: Tensor[(1, 5), uint16]) -> Tensor[(2, 5), uint16] {
  @func_571(%var_572) /* ty=Tensor[(2, 5), uint16] */
}

def @func_1316(%var_1314: Tensor[(11, 9, 12), int32], %var_1315: Tensor[(11, 9, 12), int32]) -> (Tensor[(11, 9, 12), bool],) {
  @func_1312(%var_1314, %var_1315) /* ty=(Tensor[(11, 9, 12), bool],) */
}

def @func_3552(%var_3543: Tensor[(10, 13, 12), bool], %var_3544: Tensor[(10, 13, 12), bool]) -> (Tensor[(10, 13, 12), bool],) {
  %142 = cast(%var_3544, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %143 = shape_of(%var_3543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_3543, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %146 = logical_and(%144, %145) /* ty=Tensor[(10, 13, 12), bool] */;
  (%146,)
}

def @func_6379(%var_6377: Tensor[(2, 3, 10), float32], %var_6378: Tensor[(1560), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) {
  %153 = fn (%var_6370: Tensor[(2, 3, 10), float32], %var_6374: Tensor[(1560), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) {
    %147 = cast(%var_6370, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %148 = cast(%var_6374, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %149 = reshape(%148, newshape=[15, 13, 8]) /* ty=Tensor[(15, 13, 8), float64] */;
    %150 = @func_5705(%149) /* ty=(Tensor[(15, 13, 8), float64],) */;
    %151 = cos(%147) /* ty=Tensor[(2, 3, 10), float32] */;
    %152 = %150.0;
    (%151, %152, %var_6374)
  };
  %153(%var_6377, %var_6378) /* ty=(Tensor[(2, 3, 10), float32], Tensor[(15, 13, 8), float64], Tensor[(1560), float64]) */
}

def @func_3224(%var_3219: Tensor[(12, 6, 15), float64], %var_3220: Tensor[(12, 6, 15), float64], %var_3221: Tensor[(12, 6, 15), float64], %var_3222: Tensor[(324), int8], %var_3223: Tensor[(384), int8]) -> (Tensor[(12, 6, 15), float64], Tensor[(12, 6, 15), float64], Tensor[(72), float64], Tensor[(324), int8], Tensor[(384), int8], Tensor[(384), int8], Tensor[(840), float32], Tensor[(216), int16], Tensor[(936, 1), bool]) {
  @func_3217(%var_3219, %var_3220, %var_3221, %var_3222, %var_3223) /* ty=(Tensor[(12, 6, 15), float64], Tensor[(12, 6, 15), float64], Tensor[(72), float64], Tensor[(324), int8], Tensor[(384), int8], Tensor[(384), int8], Tensor[(840), float32], Tensor[(216), int16], Tensor[(936, 1), bool]) */
}

def @func_6208(%var_6183: Tensor[(2, 108), int32]) -> (Tensor[(12, 16, 13), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(2, 108), int32], Tensor[(?, 1188), float32]) {
  %154 = @func_5419() /* ty=Tensor[(12, 16, 13), float32] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %156 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %157 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 108), float32] */, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %158 = cast(%var_6183, dtype="int32") /* ty=Tensor[(2, 108), int32] */;
  %159 = reshape(%156, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %160 = reshape(%157, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %161 = reshape(%158, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %162 = @func_2577(%159, %160, %161) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %163 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(1, 1188), int32] */;
  %164 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(1, 1188), int32] */;
  %165 = reshape(%163, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %166 = reshape(%164, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %167 = @func_1312(%165, %166) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %170 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 1188), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %171 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1188), int32] */, dtype="float32") /* ty=Tensor[(1, 1188), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %173 = rsqrt(%155) /* ty=Tensor[(12, 16, 13), float32] */;
  %174 = %162.4;
  %175 = power(%171, %172) /* ty=Tensor[(?, 1188), float32] */;
  (%173, %174, meta[relay.Constant][14] /* ty=Tensor[(1, 108), float32] */, %var_6183, %175)
}

def @func_1639(%var_1576: Tensor[(384), int8], %var_1577: Tensor[(6, 140), float32], %var_1608: Tensor[(216), int16], %var_1636: Tensor[(936), bool]) -> (Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) {
  %176 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %177 = log10(%176) /* ty=Tensor[(14, 11, 1), float32] */;
  %178 = cast(%177, dtype="int64") /* ty=Tensor[(14, 11, 1), int64] */;
  %179 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int64") /* ty=Tensor[(14, 11, 1), int64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %182 = left_shift(%180, %181) /* ty=Tensor[(14, 11, ?), int64] */;
  %183 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int16") /* ty=Tensor[(14, 11, 1), int16] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="int16") /* ty=Tensor[(14, 11, ?), int16] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %187 = multiply(%185, %186) /* ty=Tensor[(14, 11, ?), int16] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(14, 11, ?), float32] */;
  %189 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %192 = cast(%var_1576, dtype="int8") /* ty=Tensor[(384), int8] */;
  %193 = cast(%var_1576, dtype="int8") /* ty=Tensor[(384), int8] */;
  %194 = cast(%var_1577, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %195 = reshape(%192, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %196 = reshape(%193, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %197 = reshape(%194, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %198 = @func_1052(%195, %196, %197) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %199 = cast(meta[relay.Constant][17] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %201 = reshape(%199, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %202 = reshape(%200, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
  %203 = @func_1312(%201, %202) /* ty=(Tensor[(11, 9, 12), bool],) */;
  %204 = cast(%182, dtype="float64") /* ty=Tensor[(14, 11, ?), float64] */;
  %205 = asinh(%204) /* ty=Tensor[(14, 11, ?), float64] */;
  %206 = cast(%205, dtype="bool") /* ty=Tensor[(14, 11, ?), bool] */;
  %207 = cast(meta[relay.Constant][17] /* ty=Tensor[(1188), int32] */, dtype="bool") /* ty=Tensor[(1188), bool] */;
  %208 = cast(%var_1608, dtype="int16") /* ty=Tensor[(216), int16] */;
  %209 = cast(%var_1608, dtype="int16") /* ty=Tensor[(216), int16] */;
  %210 = reshape(%208, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %211 = reshape(%209, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %212 = @func_1286(%210, %211) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %215 = cast(%var_1636, dtype="bool") /* ty=Tensor[(936), bool] */;
  %216 = cast(%var_1636, dtype="bool") /* ty=Tensor[(936), bool] */;
  %217 = reshape(%215, newshape=[12, 6, 13]) /* ty=Tensor[(12, 6, 13), bool] */;
  %218 = reshape(%216, newshape=[12, 6, 13]) /* ty=Tensor[(12, 6, 13), bool] */;
  %219 = add(%190, %191) /* ty=Tensor[(14, 11, ?), float32] */;
  %220 = %198.0;
  %221 = %203.0;
  %222 = logical_or(%206, %207) /* ty=Tensor[(14, 11, 1188), bool] */;
  %223 = log(%214) /* ty=Tensor[(6, 4, 9), float32] */;
  %224 = @func_1386(%217, %218) /* ty=Tensor[(12, 6, 13), bool] */;
  (%219, %220, %var_1576, %var_1577, %221, %222, %var_1608, %223, %224, %var_1636)
}

def @func_5822() -> (Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) {
  %233 = fn () -> (Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) {
    %225 = @func_5344() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) */;
    %226 = cast(meta[relay.Constant][18] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %227 = cast(meta[relay.Constant][18] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %228 = reshape(%226, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
    %229 = reshape(%227, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), int32] */;
    %230 = @func_1312(%228, %229) /* ty=(Tensor[(11, 9, 12), bool],) */;
    %231 = %225.0;
    %232 = %230.0;
    (%231, %232, meta[relay.Constant][18] /* ty=Tensor[(1188), int32] */)
  };
  %233() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) */
}

def @func_2423(%var_2408: Tensor[(12, 11, 9), int32], %var_2409: Tensor[(12, 11, 9), int32]) -> Tensor[(12, 11, 9), int32] {
  %234 = cast(%var_2409, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %235 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_2408, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%236, %237) /* ty=Tensor[(12, 11, 9), int32] */
}

def @func_2485(%var_2478: Tensor[(4, 5, 2), float32], %var_2479: Tensor[(4, 5, 2), float32]) -> (Tensor[(4, 5, 2), float32],) {
  %238 = cast(%var_2479, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  %239 = shape_of(%var_2478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_2478, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %242 = mod(%240, %241) /* ty=Tensor[(4, 5, 2), float32] */;
  (%242,)
}

def @func_3506(%var_3480: Tensor[(13, 8, 11), float32], %var_3492: Tensor[(1, 108), float32]) -> (Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) {
  %243 = cast(%var_3480, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
  %244 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 8, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %247 = cast(%var_3492, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %248 = cast(%var_3492, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %249 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 216), int32] */, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %250 = reshape(%247, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %251 = reshape(%248, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %252 = reshape(%249, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %253 = @func_2577(%250, %251, %252) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %254 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 216), int32] */, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %255 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 216), int32] */, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %256 = mod(%245, %246) /* ty=Tensor[(13, 8, 11), float32] */;
  %257 = %253.4;
  %258 = divide(%254, %255) /* ty=Tensor[(14, 216), float64] */;
  (%256, %257, %var_3492, %258)
}

def @func_3217(%var_3169: Tensor[(12, 6, 15), float64], %var_3170: Tensor[(12, 6, 15), float64], %var_3175: Tensor[(12, 6, 15), float64], %var_3195: Tensor[(324), int8], %var_3198: Tensor[(384), int8]) -> (Tensor[(12, 6, 15), float64], Tensor[(12, 6, 15), float64], Tensor[(72), float64], Tensor[(324), int8], Tensor[(384), int8], Tensor[(384), int8], Tensor[(840), float32], Tensor[(216), int16], Tensor[(936, 1), bool]) {
  %259 = cast(%var_3170, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %260 = shape_of(%var_3169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_3169, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %263 = cast(%var_3175, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %264 = shape_of(%var_3169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_3169, dtype="float64") /* ty=Tensor[(12, 6, 15), float64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %267 = cast(%var_3195, dtype="int8") /* ty=Tensor[(324), int8] */;
  %268 = cast(%var_3195, dtype="int8") /* ty=Tensor[(324), int8] */;
  %269 = reshape(%267, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %270 = reshape(%268, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %271 = @func_2971(%269, %270) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
  %272 = cast(%var_3198, dtype="int8") /* ty=Tensor[(384), int8] */;
  %273 = cast(meta[relay.Constant][22] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %274 = cast(meta[relay.Constant][23] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %275 = cast(meta[relay.Constant][24] /* ty=Tensor[(936, 1), bool] */, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %276 = reshape(%272, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %277 = reshape(%273, newshape=[6, 140]) /* ty=Tensor[(6, 140), float32] */;
  %278 = reshape(%274, newshape=[216]) /* ty=Tensor[(216), int16] */;
  %279 = reshape(%275, newshape=[936]) /* ty=Tensor[(936), bool] */;
  %280 = @func_1639(%276, %277, %278, %279) /* ty=(Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) */;
  %281 = floor_mod(%261, %262) /* ty=Tensor[(12, 6, 15), float64] */;
  %282 = floor_divide(%265, %266) /* ty=Tensor[(12, 6, 15), float64] */;
  %283 = %271.3;
  %284 = %280.2;
  (%281, %282, %283, %var_3195, %284, %var_3198, meta[relay.Constant][22] /* ty=Tensor[(840), float32] */, meta[relay.Constant][23] /* ty=Tensor[(216), int16] */, meta[relay.Constant][24] /* ty=Tensor[(936, 1), bool] */)
}

def @func_3556(%var_3554: Tensor[(10, 13, 12), bool], %var_3555: Tensor[(10, 13, 12), bool]) -> (Tensor[(10, 13, 12), bool],) {
  @func_3552(%var_3554, %var_3555) /* ty=(Tensor[(10, 13, 12), bool],) */
}

def @func_2489(%var_2487: Tensor[(4, 5, 2), float32], %var_2488: Tensor[(4, 5, 2), float32]) -> (Tensor[(4, 5, 2), float32],) {
  @func_2485(%var_2487, %var_2488) /* ty=(Tensor[(4, 5, 2), float32],) */
}

def @func_1233(%var_1231: Tensor[(3, 9, 8), int32], %var_1232: Tensor[(3, 9, 8), int32]) -> Tensor[(3, 9, 8), bool] {
  %289 = fn (%var_1222: Tensor[(3, 9, 8), int32], %var_1223: Tensor[(3, 9, 8), int32]) -> Tensor[(3, 9, 8), bool] {
    %285 = cast(%var_1223, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
    %286 = shape_of(%var_1222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%var_1222, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%287, %288) /* ty=Tensor[(3, 9, 8), bool] */
  };
  %289(%var_1231, %var_1232) /* ty=Tensor[(3, 9, 8), bool] */
}

def @func_5380(%var_5361: Tensor[(384), int8], %var_5362: Tensor[(840), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(840), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16]) {
  %290 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %291 = cast(%var_5361, dtype="int8") /* ty=Tensor[(384), int8] */;
  %292 = cast(%var_5361, dtype="int8") /* ty=Tensor[(384), int8] */;
  %293 = cast(%var_5362, dtype="float32") /* ty=Tensor[(840), float32] */;
  %294 = reshape(%291, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %295 = reshape(%292, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %296 = reshape(%293, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %297 = @func_1052(%294, %295, %296) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %298 = cast(meta[relay.Constant][25] /* ty=Tensor[(5), uint16] */, dtype="uint16") /* ty=Tensor[(5), uint16] */;
  %299 = reshape(%298, newshape=[1, 5]) /* ty=Tensor[(1, 5), uint16] */;
  %300 = %290.0;
  %301 = %297.1;
  %302 = @func_571(%299) /* ty=Tensor[(2, 5), uint16] */;
  (%300, %301, %var_5361, %var_5362, %302, meta[relay.Constant][25] /* ty=Tensor[(5), uint16] */)
}

def @func_4784(%var_4780: Tensor[(13, 9, 16), float32]) -> (Tensor[(13, 9, 16), bool],) {
  %303 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1, 16), float32] */, dtype="bool") /* ty=Tensor[(1, 1, 16), bool] */;
  %304 = cast(%var_4780, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %305 = less(%303, %304) /* ty=Tensor[(13, 9, 16), bool] */;
  (%305,)
}

def @func_769(%var_767: Tensor[(4, 6, 1), float64], %var_768: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), bool] {
  @func_765(%var_767, %var_768) /* ty=Tensor[(4, 6, 3), bool] */
}

def @func_2845(%var_2842: Tensor[(5, 2, 12), int8], %var_2843: Tensor[(520), bool], %var_2844: Tensor[(840), float32]) -> (Tensor[(5, 2, 12), int8], Tensor[(13, 5, 8), bool], Tensor[(520), bool], Tensor[(90), float64], Tensor[(384), float64], Tensor[(4, 12, 8), bool], Tensor[(840), float32]) {
  @func_2840(%var_2842, %var_2843, %var_2844) /* ty=(Tensor[(5, 2, 12), int8], Tensor[(13, 5, 8), bool], Tensor[(520), bool], Tensor[(90), float64], Tensor[(384), float64], Tensor[(4, 12, 8), bool], Tensor[(840), float32]) */
}

def @func_5421() -> Tensor[(12, 16, 13), float32] {
  @func_5419() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_4787(%var_4785: Tensor[(13, 9, 16), float32]) -> (Tensor[(13, 9, 16), bool],) {
  @func_4784(%var_4785) /* ty=(Tensor[(13, 9, 16), bool],) */
}

def @func_5749() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6449() -> Tensor[(12, 16, 13), float32] {
  @func_6447() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6676(%var_6673: Tensor[(11, 9, 12), float32], %var_6674: Tensor[(11, 9, 12), float32], %var_6675: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), int16], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), uint8], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), float32], Tensor[(12, 16, 13), float32]) {
  %351 = fn (%var_6591: Tensor[(11, 9, 12), float32], %var_6607: Tensor[(11, 9, 12), float32], %var_6616: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), int16], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), uint8], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), float32], Tensor[(12, 16, 13), float32]) {
    %306 = @func_5821() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) */;
    %307 = %306.1;
    %308 = cast(%307, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %309 = cos(%308) /* ty=Tensor[(11, 9, 12), float32] */;
    %310 = cast(%309, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %311 = exp(%310) /* ty=Tensor[(11, 9, 12), float32] */;
    %312 = cast(%var_6591, dtype="int16") /* ty=Tensor[(11, 9, 12), int16] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%311, dtype="int16") /* ty=Tensor[(11, 9, 12), int16] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %316 = cast(%var_6616, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
    %317 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%309, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %320 = cast(%var_6607, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
    %321 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%309, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %324 = divide(%322, %323) /* ty=Tensor[(11, 9, 12), float64] */;
    %325 = cast(%309, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %326 = atanh(%325) /* ty=Tensor[(11, 9, 12), float32] */;
    %327 = cast(%326, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %328 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%307, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %331 = floor_divide(%329, %330) /* ty=Tensor[(11, 9, 12), float32] */;
    %332 = cast(%331, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
    %333 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %334 = cast(%324, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
    %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %336 = greater_equal(%334, %335) /* ty=Tensor[(11, 9, 12), bool] */;
    %337 = cast(%336, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %338 = sqrt(%337) /* ty=Tensor[(11, 9, 12), float32] */;
    %339 = cast(%311, dtype="uint8") /* ty=Tensor[(11, 9, 12), uint8] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="uint8") /* ty=Tensor[(11, 9, 12), uint8] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %343 = cast(%311, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
    %344 = cast(%338, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %345 = maximum(%314, %315) /* ty=Tensor[(11, 9, 12), int16] */;
    %346 = mod(%318, %319) /* ty=Tensor[(11, 9, 12), float64] */;
    %347 = bitwise_or(%341, %342) /* ty=Tensor[(11, 9, 12), uint8] */;
    %348 = rsqrt(%343) /* ty=Tensor[(11, 9, 12), float64] */;
    %349 = acos(%344) /* ty=Tensor[(11, 9, 12), float32] */;
    %350 = @func_5666() /* ty=Tensor[(12, 16, 13), float32] */;
    (%345, %346, %347, %348, %349, %350)
  };
  %351(%var_6673, %var_6674, %var_6675) /* ty=(Tensor[(11, 9, 12), int16], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), uint8], Tensor[(11, 9, 12), float64], Tensor[(11, 9, 12), float32], Tensor[(12, 16, 13), float32]) */
}

def @func_3921(%var_3917: Tensor[(16, 7, 7), float64], %var_3918: Tensor[(1, 216), int32], %var_3919: Tensor[(48, 8), int8], %var_3920: Tensor[(936), bool]) -> (Tensor[(3, 9, 8), bool], Tensor[(1, 216), int32], Tensor[(840), float32], Tensor[(48, 8), int8], Tensor[(840), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32], Tensor[(11, 9, 12), bool], Tensor[(936), bool], Tensor[(16, 7, 7), int64]) {
  @func_3915(%var_3917, %var_3918, %var_3919, %var_3920) /* ty=(Tensor[(3, 9, 8), bool], Tensor[(1, 216), int32], Tensor[(840), float32], Tensor[(48, 8), int8], Tensor[(840), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32], Tensor[(11, 9, 12), bool], Tensor[(936), bool], Tensor[(16, 7, 7), int64]) */
}

def @func_4291(%var_4287: Tensor[(2, 7, 8), float64], %var_4288: Tensor[(2, 7, 8), int64], %var_4289: Tensor[(1188), int32], %var_4290: Tensor[(780, 2), bool]) -> (Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) {
  @func_4285(%var_4287, %var_4288, %var_4289, %var_4290) /* ty=(Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) */
}

def @func_5514() -> (Tensor[(12, 16, 13), float32],) {
  %354 = fn () -> (Tensor[(12, 16, 13), float32],) {
    %352 = @func_5344() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(10, 13, 12), bool], Tensor[(2, 780), bool]) */;
    %353 = %352.0;
    (%353,)
  };
  %354() /* ty=(Tensor[(12, 16, 13), float32],) */
}

def @func_4927() -> Tensor[(12, 16, 13), float32] {
  %356 = fn () -> Tensor[(12, 16, 13), float32] {
    %355 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    acosh(%355) /* ty=Tensor[(12, 16, 13), float32] */
  };
  %356() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6519() -> Tensor[(12, 16, 13), float32] {
  %358 = fn () -> Tensor[(12, 16, 13), float32] {
    %357 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
    %357.0
  };
  %358() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_5668() -> Tensor[(12, 16, 13), float32] {
  @func_5666() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_6795(%var_6793: Tensor[(10, 10, 4), float64]) -> Tensor[(10, 10, 4), float64] {
  @func_6792(%var_6793) /* ty=Tensor[(10, 10, 4), float64] */
}

def @func_5705(%var_5674: Tensor[(15, 13, 8), float64]) -> (Tensor[(15, 13, 8), float64],) {
  %359 = cast(%var_5674, dtype="float64") /* ty=Tensor[(15, 13, 8), float64] */;
  %360 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(15, 13, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 8), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %363 = mod(%361, %362) /* ty=Tensor[(15, 13, 8), float64] */;
  (%363,)
}

def @func_6768(%var_6747: Tensor[(12, 16, 13), float32]) -> (Tensor[(12, 16, 13), bool],) {
  %364 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %365 = %364.0;
  %366 = cast(%var_6747, dtype="int64") /* ty=Tensor[(12, 16, 13), int64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="int64") /* ty=Tensor[(12, 16, 13), int64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %370 = maximum(%368, %369) /* ty=Tensor[(12, 16, 13), int64] */;
  %371 = cast(%370, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %372 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%365, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = equal(%373, %374) /* ty=Tensor[(12, 16, 13), bool] */;
  (%375,)
}

def @func_5485(%var_5483: Tensor[(240), int16]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 5, 8), bool], Tensor[(5, 104), bool], Tensor[(5), uint16], Tensor[(240), int16], Tensor[(1, 5), uint16], Tensor[(6, 4, 9), bool], Tensor[(36, 6), int16]) {
  @func_5482(%var_5483) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(13, 5, 8), bool], Tensor[(5, 104), bool], Tensor[(5), uint16], Tensor[(240), int16], Tensor[(1, 5), uint16], Tensor[(6, 4, 9), bool], Tensor[(36, 6), int16]) */
}

def @func_6932() -> Tensor[(12, 16, 13), float32] {
  @func_6930() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_1685(%var_1683: Tensor[(13, 5, 8), bool]) -> Tensor[(13, 5, 8), bool] {
  @func_1682(%var_1683) /* ty=Tensor[(13, 5, 8), bool] */
}

def @func_4959(%var_4958: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 5, 15), float64],) {
  %381 = fn (%var_4952: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 5, 15), float64],) {
    %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
    %377 = shape_of(%var_4952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%var_4952, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %380 = multiply(%378, %379) /* ty=Tensor[(13, 5, 15), float64] */;
    (%380,)
  };
  %381(%var_4958) /* ty=(Tensor[(13, 5, 15), float64],) */
}

def @func_5751() -> Tensor[(12, 16, 13), float32] {
  @func_5749() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_5708(%var_5706: Tensor[(15, 13, 8), float64]) -> (Tensor[(15, 13, 8), float64],) {
  @func_5705(%var_5706) /* ty=(Tensor[(15, 13, 8), float64],) */
}

def @func_3915(%var_3817: Tensor[(16, 7, 7), float64], %var_3844: Tensor[(1, 216), int32], %var_3874: Tensor[(48, 8), int8], %var_3900: Tensor[(936), bool]) -> (Tensor[(3, 9, 8), bool], Tensor[(1, 216), int32], Tensor[(840), float32], Tensor[(48, 8), int8], Tensor[(840), float32], Tensor[(12, 11, 9), int32], Tensor[(1188), int32], Tensor[(11, 9, 12), bool], Tensor[(936), bool], Tensor[(16, 7, 7), int64]) {
  %382 = cast(%var_3844, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %383 = cast(%var_3844, dtype="int32") /* ty=Tensor[(1, 216), int32] */;
  %384 = reshape(%382, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %385 = reshape(%383, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
  %386 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %387 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %388 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %389 = reshape(%386, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %390 = reshape(%387, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %391 = reshape(%388, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %392 = @func_1052(%389, %390, %391) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %393 = cast(meta[relay.Constant][31] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %394 = cast(meta[relay.Constant][31] /* ty=Tensor[(1188), int32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %395 = reshape(%393, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %396 = reshape(%394, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %397 = cast(%var_3874, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %398 = %392.2;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(840), float32] */;
  %400 = @func_1230(%384, %385) /* ty=Tensor[(3, 9, 8), bool] */;
  %401 = cast(%400, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %402 = cast(%var_3900, dtype="bool") /* ty=Tensor[(936), bool] */;
  %403 = reshape(%397, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %404 = reshape(%399, newshape=[6, 140]) /* ty=Tensor[(6, 140), float32] */;
  %405 = reshape(%401, newshape=[216]) /* ty=Tensor[(216), int16] */;
  %406 = reshape(%402, newshape=[936]) /* ty=Tensor[(936), bool] */;
  %407 = @func_1639(%403, %404, %405, %406) /* ty=(Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) */;
  %408 = cast(%var_3817, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %409 = log2(%408) /* ty=Tensor[(16, 7, 7), float64] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %411 = acos(%410) /* ty=Tensor[(16, 7, 7), float32] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %413 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%409, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %416 = power(%414, %415) /* ty=Tensor[(16, 7, 7), float64] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %418 = sigmoid(%417) /* ty=Tensor[(16, 7, 7), float64] */;
  %419 = cast(%409, dtype="int64") /* ty=Tensor[(16, 7, 7), int64] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="int64") /* ty=Tensor[(16, 7, 7), int64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %423 = @func_2423(%395, %396) /* ty=Tensor[(12, 11, 9), int32] */;
  %424 = %407.4;
  %425 = bitwise_xor(%421, %422) /* ty=Tensor[(16, 7, 7), int64] */;
  (%400, %var_3844, %398, %var_3874, meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, %423, meta[relay.Constant][31] /* ty=Tensor[(1188), int32] */, %424, %var_3900, %425)
}

def @func_6447() -> Tensor[(12, 16, 13), float32] {
  @func_6016() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_289(%var_270: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float64] {
  %426 = cast(%var_270, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
  asinh(%426) /* ty=Tensor[(5, 5, 5), float64] */
}

def @func_6771(%var_6769: Tensor[(12, 16, 13), float32]) -> (Tensor[(12, 16, 13), bool],) {
  @func_6768(%var_6769) /* ty=(Tensor[(12, 16, 13), bool],) */
}

def @func_1056(%var_1053: Tensor[(4, 12, 8), int8], %var_1054: Tensor[(4, 12, 8), int8], %var_1055: Tensor[(840), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) {
  %435 = fn (%var_1040: Tensor[(4, 12, 8), int8], %var_1041: Tensor[(4, 12, 8), int8], %var_1046: Tensor[(840), float32]) -> (Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) {
    %427 = cast(%var_1041, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
    %428 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%var_1040, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %431 = cast(%var_1046, dtype="float32") /* ty=Tensor[(840), float32] */;
    %432 = reshape(%431, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
    %433 = greater_equal(%429, %430) /* ty=Tensor[(4, 12, 8), bool] */;
    %434 = @func_147(%432) /* ty=Tensor[(12, 14, 5), bool] */;
    (%433, %434, %var_1046)
  };
  %435(%var_1053, %var_1054, %var_1055) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */
}

def @func_5899(%var_5897: Tensor[(15, 13, 4), uint64], %var_5898: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64], Tensor[(6, 4, 9), bool], Tensor[(12, 18), int16]) {
  %447 = fn (%var_5884: Tensor[(15, 13, 4), uint64], %var_5885: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64], Tensor[(6, 4, 9), bool], Tensor[(12, 18), int16]) {
    %436 = cast(%var_5885, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
    %437 = shape_of(%var_5884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%var_5884, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %440 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 18), int16] */, dtype="int16") /* ty=Tensor[(12, 18), int16] */;
    %441 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 18), int16] */, dtype="int16") /* ty=Tensor[(12, 18), int16] */;
    %442 = reshape(%440, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
    %443 = reshape(%441, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
    %444 = @func_1286(%442, %443) /* ty=(Tensor[(6, 4, 9), bool],) */;
    %445 = logical_xor(%438, %439) /* ty=Tensor[(15, 13, 4), uint64] */;
    %446 = %444.0;
    (%445, %446, meta[relay.Constant][32] /* ty=Tensor[(12, 18), int16] */)
  };
  %447(%var_5897, %var_5898) /* ty=(Tensor[(15, 13, 4), uint64], Tensor[(6, 4, 9), bool], Tensor[(12, 18), int16]) */
}

def @func_5212(%var_5207: Tensor[(13, 5, 15), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(975), float64], Tensor[(13, 5, 15), bool]) {
  %448 = @func_5176() /* ty=(Tensor[(12, 16, 13), float32],) */;
  %449 = cast(meta[relay.Constant][33] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %450 = reshape(%449, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
  %451 = @func_4957(%450) /* ty=(Tensor[(13, 5, 15), float64],) */;
  %452 = %451.0;
  %453 = cast(%var_5207, dtype="bool") /* ty=Tensor[(13, 5, 15), bool] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="bool") /* ty=Tensor[(13, 5, 15), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = %448.0;
  %458 = logical_or(%455, %456) /* ty=Tensor[(13, 5, 15), bool] */;
  (%457, meta[relay.Constant][33] /* ty=Tensor[(975), float64] */, %458)
}

def @func_6997(%var_6996: Tensor[(468, 4), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 9, 16), bool], Tensor[(468, 4), float32]) {
  %467 = fn (%var_6993: Tensor[(468, 4), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 9, 16), bool], Tensor[(468, 4), float32]) {
    %459 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %462 = cast(%var_6993, dtype="float32") /* ty=Tensor[(468, 4), float32] */;
    %463 = reshape(%462, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), float32] */;
    %464 = @func_4784(%463) /* ty=(Tensor[(13, 9, 16), bool],) */;
    %465 = cosh(%461) /* ty=Tensor[(12, 16, 13), float32] */;
    %466 = %464.0;
    (%465, %466, %var_6993)
  };
  %467(%var_6996) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(13, 9, 16), bool], Tensor[(468, 4), float32]) */
}

def @func_5419() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_2581(%var_2578: Tensor[(9, 4, 3), float32], %var_2579: Tensor[(9, 4, 3), float32], %var_2580: Tensor[(216), int32]) -> (Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) {
  %486 = fn (%var_2557: Tensor[(9, 4, 3), float32], %var_2558: Tensor[(9, 4, 3), float32], %var_2571: Tensor[(216), int32]) -> (Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) {
    %468 = cast(%var_2558, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
    %469 = shape_of(%var_2557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_2557, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %472 = divide(%470, %471) /* ty=Tensor[(9, 4, 3), float32] */;
    %473 = cast(%var_2557, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="float32") /* ty=Tensor[(9, 4, 3), float32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %477 = cast(%var_2571, dtype="int32") /* ty=Tensor[(216), int32] */;
    %478 = cast(%var_2571, dtype="int32") /* ty=Tensor[(216), int32] */;
    %479 = reshape(%477, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
    %480 = reshape(%478, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), int32] */;
    %481 = cast(meta[relay.Constant][34] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %482 = reshape(%481, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
    %483 = mod(%475, %476) /* ty=Tensor[(9, 4, 3), float32] */;
    %484 = @func_1230(%479, %480) /* ty=Tensor[(3, 9, 8), bool] */;
    %485 = @func_1682(%482) /* ty=Tensor[(13, 5, 8), bool] */;
    (%483, %484, %var_2571, %485, meta[relay.Constant][34] /* ty=Tensor[(520), bool] */)
  };
  %486(%var_2578, %var_2579, %var_2580) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */
}

def @func_1312(%var_1297: Tensor[(11, 9, 12), int32], %var_1298: Tensor[(11, 9, 12), int32]) -> (Tensor[(11, 9, 12), bool],) {
  %487 = cast(%var_1298, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %488 = shape_of(%var_1297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_1297, dtype="bool") /* ty=Tensor[(11, 9, 12), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = less(%489, %490) /* ty=Tensor[(11, 9, 12), bool] */;
  (%491,)
}

def @func_6017() -> Tensor[(12, 16, 13), float32] {
  %493 = fn () -> Tensor[(12, 16, 13), float32] {
    %492 = @func_5921() /* ty=(Tensor[(12, 16, 13), float32],) */;
    %492.0
  };
  %493() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_1389(%var_1387: Tensor[(12, 6, 13), bool], %var_1388: Tensor[(12, 6, 13), bool]) -> Tensor[(12, 6, 13), bool] {
  %498 = fn (%var_1376: Tensor[(12, 6, 13), bool], %var_1377: Tensor[(12, 6, 13), bool]) -> Tensor[(12, 6, 13), bool] {
    %494 = cast(%var_1377, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
    %495 = shape_of(%var_1376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%var_1376, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%496, %497) /* ty=Tensor[(12, 6, 13), bool] */
  };
  %498(%var_1387, %var_1388) /* ty=Tensor[(12, 6, 13), bool] */
}

def @func_1888(%var_1885: Tensor[(10, 9), float64], %var_1886: Tensor[(10, 9), float64], %var_1887: Tensor[(384), int8]) -> (Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) {
  %512 = fn (%var_1854: Tensor[(10, 9), float64], %var_1855: Tensor[(10, 9), float64], %var_1873: Tensor[(384), int8]) -> (Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) {
    %499 = cast(%var_1855, dtype="float64") /* ty=Tensor[(10, 9), float64] */;
    %500 = shape_of(%var_1854, dtype="int32") /* ty=Tensor[(2), int32] */;
    %501 = cast(%var_1854, dtype="float64") /* ty=Tensor[(10, 9), float64] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %503 = cast(%var_1873, dtype="int8") /* ty=Tensor[(384), int8] */;
    %504 = cast(%var_1873, dtype="int8") /* ty=Tensor[(384), int8] */;
    %505 = cast(meta[relay.Constant][35] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %506 = reshape(%503, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
    %507 = reshape(%504, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
    %508 = reshape(%505, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %509 = @func_1052(%506, %507, %508) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
    %510 = divide(%501, %502) /* ty=Tensor[(10, 9), float64] */;
    %511 = %509.1;
    (%510, %511, %var_1873, meta[relay.Constant][35] /* ty=Tensor[(420, 2), float32] */)
  };
  %512(%var_1885, %var_1886, %var_1887) /* ty=(Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) */
}

def @func_6273(%var_6240: Tensor[(4, 12, 15), float32], %var_6268: Tensor[(90), float64], %var_6269: Tensor[(96, 4), int8]) -> (Tensor[(4, 12, 15), float32], Tensor[(384), int8], Tensor[(90), float64], Tensor[(96, 4), int8]) {
  %513 = cast(%var_6240, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  %514 = cast(%var_6268, dtype="float64") /* ty=Tensor[(90), float64] */;
  %515 = cast(%var_6268, dtype="float64") /* ty=Tensor[(90), float64] */;
  %516 = cast(%var_6269, dtype="int8") /* ty=Tensor[(96, 4), int8] */;
  %517 = reshape(%514, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %518 = reshape(%515, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %519 = reshape(%516, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %520 = @func_1884(%517, %518, %519) /* ty=(Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) */;
  %521 = log(%513) /* ty=Tensor[(4, 12, 15), float32] */;
  %522 = %520.2;
  (%521, %522, %var_6268, %var_6269)
}

def @func_5997(%var_5954: Tensor[(1144, 1), float32], %var_5955: Tensor[(108), float32], %var_5960: Tensor[(14, 216), float64], %var_5993: Tensor[(14, 216), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(12, 11, 9), int32], Tensor[(54, 22), int32], Tensor[(1144, 1), float32], Tensor[(108), float32], Tensor[(14, 216), float64], Tensor[(12, 16, 13), float32], Tensor[(14, 216), int64]) {
  %523 = cast(meta[relay.Constant][36] /* ty=Tensor[(54, 22), int32] */, dtype="int32") /* ty=Tensor[(54, 22), int32] */;
  %524 = cast(meta[relay.Constant][36] /* ty=Tensor[(54, 22), int32] */, dtype="int32") /* ty=Tensor[(54, 22), int32] */;
  %525 = reshape(%523, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %526 = reshape(%524, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %527 = cast(%var_5954, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %528 = cast(%var_5955, dtype="float32") /* ty=Tensor[(108), float32] */;
  %529 = reshape(%527, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %530 = reshape(%528, newshape=[1, 108]) /* ty=Tensor[(1, 108), float32] */;
  %531 = @func_3506(%529, %530) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) */;
  %532 = %531.3;
  %533 = cast(%var_5960, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
  %535 = cast(%532, dtype="float64") /* ty=Tensor[(14, 216), float64] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %537 = @func_5821() /* ty=(Tensor[(12, 16, 13), float32], Tensor[(11, 9, 12), bool], Tensor[(1188), int32]) */;
  %538 = cast(%var_5960, dtype="float32") /* ty=Tensor[(14, 216), float32] */;
  %539 = sin(%538) /* ty=Tensor[(14, 216), float32] */;
  %540 = cast(%var_5993, dtype="int64") /* ty=Tensor[(14, 216), int64] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(2), int32] */;
  %542 = cast(%539, dtype="int64") /* ty=Tensor[(14, 216), int64] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %544 = @func_5419() /* ty=Tensor[(12, 16, 13), float32] */;
  %545 = @func_2423(%525, %526) /* ty=Tensor[(12, 11, 9), int32] */;
  %546 = mod(%535, %536) /* ty=Tensor[(14, 216), float64] */;
  %547 = %537.0;
  %548 = bitwise_and(%542, %543) /* ty=Tensor[(14, 216), int64] */;
  (%544, %545, meta[relay.Constant][36] /* ty=Tensor[(54, 22), int32] */, %var_5954, %var_5955, %546, %547, %548)
}

def @func_6300() -> Tensor[(12, 16, 13), float32] {
  %549 = fn () -> Tensor[(12, 16, 13), float32] {
    @func_5419() /* ty=Tensor[(12, 16, 13), float32] */
  };
  %549() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_3136(%var_3135: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) {
  %554 = fn (%var_3127: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) {
    %550 = cast(%var_3127, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
    %551 = cast(%var_3127, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
    %552 = rsqrt(%550) /* ty=Tensor[(7, 8, 13), float32] */;
    %553 = erf(%551) /* ty=Tensor[(7, 8, 13), float32] */;
    (%552, %553)
  };
  %554(%var_3135) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) */
}

def @func_6397(%var_6395: Tensor[(10, 9, 16), float64]) -> (Tensor[(10, 9, 16), float64],) {
  @func_6394(%var_6395) /* ty=(Tensor[(10, 9, 16), float64],) */
}

def @func_6394(%var_6391: Tensor[(10, 9, 16), float64]) -> (Tensor[(10, 9, 16), float64],) {
  %555 = cast(%var_6391, dtype="float64") /* ty=Tensor[(10, 9, 16), float64] */;
  %556 = asinh(%555) /* ty=Tensor[(10, 9, 16), float64] */;
  (%556,)
}

def @func_765(%var_754: Tensor[(4, 6, 1), float64], %var_755: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), bool] {
  %557 = cast(%var_754, dtype="float64") /* ty=Tensor[(4, 6, 1), float64] */;
  %558 = cast(%var_755, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
  %559 = floor_mod(%557, %558) /* ty=Tensor[(4, 6, 3), float64] */;
  %560 = cast(%var_754, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %561 = cast(%559, dtype="bool") /* ty=Tensor[(4, 6, 3), bool] */;
  greater_equal(%560, %561) /* ty=Tensor[(4, 6, 3), bool] */
}

def @func_2427(%var_2425: Tensor[(12, 11, 9), int32], %var_2426: Tensor[(12, 11, 9), int32]) -> Tensor[(12, 11, 9), int32] {
  @func_2423(%var_2425, %var_2426) /* ty=Tensor[(12, 11, 9), int32] */
}

def @func_2840(%var_2802: Tensor[(5, 2, 12), int8], %var_2808: Tensor[(520), bool], %var_2837: Tensor[(840), float32]) -> (Tensor[(5, 2, 12), int8], Tensor[(13, 5, 8), bool], Tensor[(520), bool], Tensor[(90), float64], Tensor[(384), float64], Tensor[(4, 12, 8), bool], Tensor[(840), float32]) {
  %562 = cast(%var_2802, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %563 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 2, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 2, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 2, 12), int8] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %566 = cast(%var_2808, dtype="bool") /* ty=Tensor[(520), bool] */;
  %567 = reshape(%566, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
  %568 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %569 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %570 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %571 = reshape(%568, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %572 = reshape(%569, newshape=[10, 9]) /* ty=Tensor[(10, 9), float64] */;
  %573 = reshape(%570, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %574 = @func_1884(%571, %572, %573) /* ty=(Tensor[(10, 9), float64], Tensor[(12, 14, 5), bool], Tensor[(384), int8], Tensor[(420, 2), float32]) */;
  %575 = %574.2;
  %576 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), int8] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %578 = cast(%575, dtype="float64") /* ty=Tensor[(384), float64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?), float64] */;
  %580 = divide(%578, %579) /* ty=Tensor[(384), float64] */;
  %581 = cast(%580, dtype="int8") /* ty=Tensor[(384), int8] */;
  %582 = cast(%575, dtype="int8") /* ty=Tensor[(384), int8] */;
  %583 = cast(%var_2837, dtype="float32") /* ty=Tensor[(840), float32] */;
  %584 = reshape(%581, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %585 = reshape(%582, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %586 = reshape(%583, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %587 = @func_1052(%584, %585, %586) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %588 = bitwise_and(%564, %565) /* ty=Tensor[(5, 2, 12), int8] */;
  %589 = @func_1682(%567) /* ty=Tensor[(13, 5, 8), bool] */;
  %590 = %587.0;
  (%588, %589, %var_2808, meta[relay.Constant][38] /* ty=Tensor[(90), float64] */, %580, %590, %var_2837)
}

def @func_149(%var_148: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
  %597 = fn (%var_109: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
    %591 = cast(%var_109, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
    %592 = exp(%591) /* ty=Tensor[(12, 14, 5), float32] */;
    %593 = cast(%var_109, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%595, %596) /* ty=Tensor[(12, 14, 5), bool] */
  };
  %597(%var_148) /* ty=Tensor[(12, 14, 5), bool] */
}

def @func_3510(%var_3508: Tensor[(13, 8, 11), float32], %var_3509: Tensor[(1, 108), float32]) -> (Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) {
  @func_3506(%var_3508, %var_3509) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(520), bool], Tensor[(1, 108), float32], Tensor[(14, 216), float64]) */
}

def @func_4285(%var_4142: Tensor[(2, 7, 8), float64], %var_4208: Tensor[(2, 7, 8), int64], %var_4223: Tensor[(1188), int32], %var_4228: Tensor[(780, 2), bool]) -> (Tensor[(2, 7, 8), float64], Tensor[(324), int8], Tensor[(2, 7, 8), float64], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(840), float32], Tensor[(384), int8], Tensor[(420, 2), float32], Tensor[(2, 7, 8), bool], Tensor[(1188), int32], Tensor[(10, 13, 12), bool], Tensor[(780, 2), bool], Tensor[(216), int32], Tensor[(108), float32], Tensor[(12, 11, 9), float32], Tensor[(10, 13, 12), bool], Tensor[(4, 9, 9), float32]) {
  %598 = cast(%var_4142, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %599 = cast(%var_4142, dtype="float64") /* ty=Tensor[(2, 7, 8), float64] */;
  %600 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %601 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %602 = reshape(%600, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %603 = reshape(%601, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %604 = @func_1286(%602, %603) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %606 = cast(meta[relay.Constant][42] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %608 = reshape(%605, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %609 = reshape(%606, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), int8] */;
  %610 = reshape(%607, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %611 = @func_1052(%608, %609, %610) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(12, 14, 5), bool], Tensor[(840), float32]) */;
  %612 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int64") /* ty=Tensor[(2, 7, 8), int64] */;
  %613 = shape_of(%var_4142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_4142, dtype="int64") /* ty=Tensor[(2, 7, 8), int64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %616 = right_shift(%614, %615) /* ty=Tensor[(2, 7, 8), int64] */;
  %617 = cast(%var_4208, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(%var_4228, dtype="bool") /* ty=Tensor[(780, 2), bool] */;
  %622 = cast(%var_4228, dtype="bool") /* ty=Tensor[(780, 2), bool] */;
  %623 = reshape(%621, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %624 = reshape(%622, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %625 = @func_3552(%623, %624) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %626 = cast(meta[relay.Constant][45] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %627 = cast(meta[relay.Constant][45] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %628 = %604.0;
  %629 = cast(%628, dtype="int32") /* ty=Tensor[(6, 4, 9), int32] */;
  %630 = reshape(%626, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %631 = reshape(%627, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), float32] */;
  %632 = reshape(%629, newshape=[216]) /* ty=Tensor[(216), int32] */;
  %633 = @func_2577(%630, %631, %632) /* ty=(Tensor[(9, 4, 3), float32], Tensor[(3, 9, 8), bool], Tensor[(216), int32], Tensor[(13, 5, 8), bool], Tensor[(520), bool]) */;
  %634 = cast(%var_4223, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %635 = cast(%var_4223, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %636 = reshape(%634, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %637 = reshape(%635, newshape=[12, 11, 9]) /* ty=Tensor[(12, 11, 9), int32] */;
  %638 = @func_2423(%636, %637) /* ty=Tensor[(12, 11, 9), int32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %640 = %625.0;
  %641 = cast(%640, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %642 = cast(%640, dtype="bool") /* ty=Tensor[(10, 13, 12), bool] */;
  %643 = reshape(%641, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %644 = reshape(%642, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), bool] */;
  %645 = @func_3552(%643, %644) /* ty=(Tensor[(10, 13, 12), bool],) */;
  %646 = cast(meta[relay.Constant][40] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %647 = cast(meta[relay.Constant][40] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %648 = reshape(%646, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %649 = reshape(%647, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), int8] */;
  %650 = @func_2971(%648, %649) /* ty=(Tensor[(4, 9, 9), int8], Tensor[(4, 6, 3), bool], Tensor[(24), float64], Tensor[(72), float64], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float64]) */;
  %651 = %650.0;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %653 = cosh(%598) /* ty=Tensor[(2, 7, 8), float64] */;
  %654 = rsqrt(%599) /* ty=Tensor[(2, 7, 8), float64] */;
  %655 = %611.2;
  %656 = less_equal(%619, %620) /* ty=Tensor[(2, 7, 8), bool] */;
  %657 = %633.2;
  %658 = erf(%639) /* ty=Tensor[(12, 11, 9), float32] */;
  %659 = %645.0;
  %660 = sigmoid(%652) /* ty=Tensor[(4, 9, 9), float32] */;
  (%653, meta[relay.Constant][40] /* ty=Tensor[(324), int8] */, %654, %628, meta[relay.Constant][41] /* ty=Tensor[(216), int16] */, %655, meta[relay.Constant][42] /* ty=Tensor[(384), int8] */, meta[relay.Constant][43] /* ty=Tensor[(420, 2), float32] */, %656, %var_4223, %640, %var_4228, %657, meta[relay.Constant][45] /* ty=Tensor[(108), float32] */, %658, %659, %660)
}

def @func_1286(%var_1260: Tensor[(6, 4, 9), int16], %var_1261: Tensor[(6, 4, 9), int16]) -> (Tensor[(6, 4, 9), bool],) {
  %661 = cast(%var_1261, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %662 = shape_of(%var_1260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_1260, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = not_equal(%663, %664) /* ty=Tensor[(6, 4, 9), bool] */;
  (%665,)
}

def @func_5177() -> (Tensor[(12, 16, 13), float32],) {
  %667 = fn () -> (Tensor[(12, 16, 13), float32],) {
    %666 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(12, 16, 13), float32],) */
}

def @func_5146(%var_5144: Tensor[(112), float64]) -> (Tensor[(12, 16, 13), float32], Tensor[(2, 7, 8), float64], Tensor[(112), float64], Tensor[(1188), int32], Tensor[(1560), bool], Tensor[(2, 15, 8), float32], Tensor[(2, 120), int16], Tensor[(5), uint16]) {
  @func_5143(%var_5144) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(2, 7, 8), float64], Tensor[(112), float64], Tensor[(1188), int32], Tensor[(1560), bool], Tensor[(2, 15, 8), float32], Tensor[(2, 120), int16], Tensor[(5), uint16]) */
}

def @func_4587(%var_4584: Tensor[(2, 15, 8), int16], %var_4585: Tensor[(2, 15, 8), int16], %var_4586: Tensor[(5), uint16]) -> (Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) {
  %692 = fn (%var_4546: Tensor[(2, 15, 8), int16], %var_4547: Tensor[(2, 15, 8), int16], %var_4572: Tensor[(5), uint16]) -> (Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) {
    %668 = cast(%var_4547, dtype="int16") /* ty=Tensor[(2, 15, 8), int16] */;
    %669 = shape_of(%var_4546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%var_4546, dtype="int16") /* ty=Tensor[(2, 15, 8), int16] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %672 = bitwise_and(%670, %671) /* ty=Tensor[(2, 15, 8), int16] */;
    %673 = cast(%672, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
    %674 = shape_of(%var_4547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%var_4547, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %677 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
    %678 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
    %679 = reshape(%677, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
    %680 = reshape(%678, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
    %681 = @func_1286(%679, %680) /* ty=(Tensor[(6, 4, 9), bool],) */;
    %682 = cast(%672, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
    %683 = cast(%var_4572, dtype="uint16") /* ty=Tensor[(5), uint16] */;
    %684 = reshape(%683, newshape=[1, 5]) /* ty=Tensor[(1, 5), uint16] */;
    %685 = cast(meta[relay.Constant][47] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
    %686 = reshape(%685, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %687 = logical_or(%675, %676) /* ty=Tensor[(2, 15, 8), bool] */;
    %688 = %681.0;
    %689 = asin(%682) /* ty=Tensor[(2, 15, 8), float32] */;
    %690 = @func_571(%684) /* ty=Tensor[(2, 5), uint16] */;
    %691 = @func_289(%686) /* ty=Tensor[(5, 5, 5), float64] */;
    (%687, %688, meta[relay.Constant][46] /* ty=Tensor[(216), int16] */, %689, %690, %var_4572, %691, meta[relay.Constant][47] /* ty=Tensor[(125), float64] */)
  };
  %692(%var_4584, %var_4585, %var_4586) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */
}

def @func_292(%var_290: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float64] {
  @func_289(%var_290) /* ty=Tensor[(5, 5, 5), float64] */
}

def @func_6792(%var_6789: Tensor[(10, 10, 4), float64]) -> Tensor[(10, 10, 4), float64] {
  %693 = cast(%var_6789, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  asinh(%693) /* ty=Tensor[(10, 10, 4), float64] */
}

def @main(%var_7012: Tensor[(14, 5, 10), int16], %var_7017: Tensor[(6, 140), float32]) -> (Tensor[(14, 5, 10), int16], Tensor[(840), float32], Tensor[(6, 140), float32], Tensor[(14, 5, 10), float32]) {
  %694 = cast(%var_7012, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %695 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(14, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(14, 5, 10), int16] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %698 = cast(%var_7017, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %699 = reshape(%698, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %700 = @func_6118(%699) /* ty=(Tensor[(840), float32], Tensor[(384), int8], Tensor[(840), float32], Tensor[(72), float64], Tensor[(324), int8], Tensor[(12, 16, 13), float32]) */;
  %701 = cast(%var_7012, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %702 = bitwise_and(%696, %697) /* ty=Tensor[(14, 5, 10), int16] */;
  %703 = %700.0;
  %704 = cos(%701) /* ty=Tensor[(14, 5, 10), float32] */;
  (%702, %703, %var_7017, %704)
}

def @func_4539(%var_4538: Tensor[(2, 12, 9), int64]) -> (Tensor[(2, 12, 9), float32], Tensor[(2, 12, 9), float32]) {
  %717 = fn (%var_4506: Tensor[(2, 12, 9), int64]) -> (Tensor[(2, 12, 9), float32], Tensor[(2, 12, 9), float32]) {
    %705 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 12, 9), int64] */;
    %706 = shape_of(%var_4506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%var_4506, dtype="int64") /* ty=Tensor[(2, 12, 9), int64] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %709 = add(%707, %708) /* ty=Tensor[(2, 12, 9), int64] */;
    %710 = cast(%709, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
    %711 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %714 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
    %715 = divide(%712, %713) /* ty=Tensor[(2, 12, 9), float32] */;
    %716 = asinh(%714) /* ty=Tensor[(2, 12, 9), float32] */;
    (%715, %716)
  };
  %717(%var_4538) /* ty=(Tensor[(2, 12, 9), float32], Tensor[(2, 12, 9), float32]) */
}

def @func_5073(%var_5072: Tensor[(40), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) {
  %739 = fn (%var_5024: Tensor[(40), float32]) -> (Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) {
    %718 = cast(%var_5024, dtype="float32") /* ty=Tensor[(40), float32] */;
    %719 = cast(%var_5024, dtype="float32") /* ty=Tensor[(40), float32] */;
    %720 = reshape(%718, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
    %721 = reshape(%719, newshape=[4, 5, 2]) /* ty=Tensor[(4, 5, 2), float32] */;
    %722 = @func_2485(%720, %721) /* ty=(Tensor[(4, 5, 2), float32],) */;
    %723 = cast(meta[relay.Constant][50] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %724 = reshape(%723, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
    %725 = @func_3134(%724) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(7, 8, 13), float32]) */;
    %726 = cast(meta[relay.Constant][51] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
    %727 = reshape(%726, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %728 = @func_289(%727) /* ty=Tensor[(5, 5, 5), float64] */;
    %729 = cast(%728, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
    %730 = tan(%729) /* ty=Tensor[(5, 5, 5), float64] */;
    %731 = cast(meta[relay.Constant][51] /* ty=Tensor[(125), float64] */, dtype="uint32") /* ty=Tensor[(125), uint32] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%730, dtype="uint32") /* ty=Tensor[(5, 5, 5), uint32] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %735 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
    %736 = %722.0;
    %737 = %725.0;
    %738 = logical_xor(%733, %734) /* ty=Tensor[(5, 5, 5), uint32] */;
    (%735, %736, %var_5024, %737, meta[relay.Constant][50] /* ty=Tensor[(728), float32] */, %738)
  };
  %739(%var_5072) /* ty=(Tensor[(12, 16, 13), float32], Tensor[(4, 5, 2), float32], Tensor[(40), float32], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(5, 5, 5), uint32]) */
}

def @func_1290(%var_1288: Tensor[(6, 4, 9), int16], %var_1289: Tensor[(6, 4, 9), int16]) -> (Tensor[(6, 4, 9), bool],) {
  @func_1286(%var_1288, %var_1289) /* ty=(Tensor[(6, 4, 9), bool],) */
}

def @func_6278(%var_6275: Tensor[(4, 12, 15), float32], %var_6276: Tensor[(90), float64], %var_6277: Tensor[(96, 4), int8]) -> (Tensor[(4, 12, 15), float32], Tensor[(384), int8], Tensor[(90), float64], Tensor[(96, 4), int8]) {
  @func_6273(%var_6275, %var_6276, %var_6277) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(384), int8], Tensor[(90), float64], Tensor[(96, 4), int8]) */
}

def @func_1682(%var_1677: Tensor[(13, 5, 8), bool]) -> Tensor[(13, 5, 8), bool] {
  %740 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %741 = cast(%var_1677, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  logical_or(%740, %741) /* ty=Tensor[(13, 5, 8), bool] */
}

def @func_1645(%var_1641: Tensor[(384), int8], %var_1642: Tensor[(6, 140), float32], %var_1643: Tensor[(216), int16], %var_1644: Tensor[(936), bool]) -> (Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) {
  @func_1639(%var_1641, %var_1642, %var_1643, %var_1644) /* ty=(Tensor[(14, 11, ?), float32], Tensor[(4, 12, 8), bool], Tensor[(384), int8], Tensor[(6, 140), float32], Tensor[(11, 9, 12), bool], Tensor[(14, 11, 1188), bool], Tensor[(216), int16], Tensor[(6, 4, 9), float32], Tensor[(12, 6, 13), bool], Tensor[(936), bool]) */
}

def @func_5666() -> Tensor[(12, 16, 13), float32] {
  @func_4926() /* ty=Tensor[(12, 16, 13), float32] */
}

def @func_5482(%var_5468: Tensor[(240), int16]) -> (Tensor[(12, 16, 13), float32], Tensor[(13, 5, 8), bool], Tensor[(5, 104), bool], Tensor[(5), uint16], Tensor[(240), int16], Tensor[(1, 5), uint16], Tensor[(6, 4, 9), bool], Tensor[(36, 6), int16]) {
  %742 = @func_4926() /* ty=Tensor[(12, 16, 13), float32] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %744 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 104), bool] */, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %745 = reshape(%744, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), bool] */;
  %746 = cast(%var_5468, dtype="int16") /* ty=Tensor[(240), int16] */;
  %747 = cast(%var_5468, dtype="int16") /* ty=Tensor[(240), int16] */;
  %748 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 5), uint16] */, dtype="uint16") /* ty=Tensor[(1, 5), uint16] */;
  %749 = reshape(%746, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %750 = reshape(%747, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), int16] */;
  %751 = reshape(%748, newshape=[5]) /* ty=Tensor[(5), uint16] */;
  %752 = @func_4583(%749, %750, %751) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(6, 4, 9), bool], Tensor[(216), int16], Tensor[(2, 15, 8), float32], Tensor[(2, 5), uint16], Tensor[(5), uint16], Tensor[(5, 5, 5), float64], Tensor[(125), float64]) */;
  %753 = cast(meta[relay.Constant][54] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %754 = cast(meta[relay.Constant][54] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %755 = reshape(%753, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %756 = reshape(%754, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), int16] */;
  %757 = @func_1286(%755, %756) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %758 = sin(%743) /* ty=Tensor[(12, 16, 13), float32] */;
  %759 = @func_1682(%745) /* ty=Tensor[(13, 5, 8), bool] */;
  %760 = %752.5;
  %761 = %757.0;
  (%758, %759, meta[relay.Constant][52] /* ty=Tensor[(5, 104), bool] */, %760, %var_5468, meta[relay.Constant][53] /* ty=Tensor[(1, 5), uint16] */, %761, meta[relay.Constant][54] /* ty=Tensor[(36, 6), int16] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen149/build/output.py", line 1444, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:53:14] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

