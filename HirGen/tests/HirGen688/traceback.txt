==========mod==========
#[version = "0.0.5"]
def @func_15788() -> (Tensor[(13, 15, 15), float32],) {
  %0 = @func_15748() /* ty=Tensor[(13, 15, 15), float32] */;
  (%0,)
}

def @func_3684(%var_3664: Tensor[(14, 1, 16), float32], %var_3672: Tensor[(105), float32], %var_3681: Tensor[(96), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
  %1 = cast(%var_3664, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %2 = cast(%var_3672, dtype="float32") /* ty=Tensor[(105), float32] */;
  %3 = reshape(%2, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %4 = @func_3604(%3) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %5 = cast(%var_3681, dtype="float32") /* ty=Tensor[(96), float32] */;
  %6 = reshape(%5, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %7 = @func_402(%6) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %8 = sigmoid(%1) /* ty=Tensor[(14, 1, 16), float32] */;
  %9 = %4.0;
  %10 = %7.0;
  (%8, %9, %var_3672, %10, %var_3681)
}

def @func_8208(%var_8196: Tensor[(1, 15, 10), float32]) -> (Tensor[(?, 15, 10), uint8],) {
  %11 = cast(%var_8196, dtype="float32") /* ty=Tensor[(1, 15, 10), float32] */;
  %12 = sin(%11) /* ty=Tensor[(1, 15, 10), float32] */;
  %13 = cast(%var_8196, dtype="uint8") /* ty=Tensor[(1, 15, 10), uint8] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="uint8") /* ty=Tensor[(1, 15, 10), uint8] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %17 = subtract(%15, %16) /* ty=Tensor[(?, 15, 10), uint8] */;
  (%17,)
}

def @func_12548(%var_12534: Tensor[(7, 11, 13), int64], %var_12544: Tensor[(54), uint64], %var_12545: Tensor[(96), float32], %var_12546: Tensor[(990), float64]) -> (Tensor[(7, 11, 13), int64], Tensor[(96), float32], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(990), float64]) {
  %18 = cast(%var_12534, dtype="int64") /* ty=Tensor[(7, 11, 13), int64] */;
  %19 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 11, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 11, 13), int64] */, dtype="int64") /* ty=Tensor[(7, 11, 13), int64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %22 = cast(%var_12544, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %23 = cast(%var_12545, dtype="float32") /* ty=Tensor[(96), float32] */;
  %24 = cast(%var_12546, dtype="float64") /* ty=Tensor[(990), float64] */;
  %25 = reshape(%22, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %26 = reshape(%23, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %27 = reshape(%24, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %28 = @func_958(%25, %26, %27) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %29 = bitwise_xor(%20, %21) /* ty=Tensor[(7, 11, 13), int64] */;
  %30 = %28.1;
  (%29, %30, %var_12544, %var_12545, %var_12546)
}

def @func_2926(%var_2916: Tensor[(15, 7, 1), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) {
  %31 = cast(6.33801f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %32 = cast(%var_2916, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %33 = cast(%var_2916, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %34 = floor_divide(%31, %32) /* ty=Tensor[(15, 7, 1), float32] */;
  %35 = rsqrt(%33) /* ty=Tensor[(15, 7, 1), float32] */;
  (%34, %35)
}

def @func_16074() -> Tensor[(13, 15, 15), float32] {
  @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_16127() -> Tensor[(8, 7, 11), bool] {
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 7, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %37 = exp(%36) /* ty=Tensor[(8, 7, 11), float32] */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 7, 11), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%40, %41) /* ty=Tensor[(8, 7, 11), bool] */
}

def @func_11354(%var_11317: Tensor[(2, 12, 15), uint64], %var_11318: Tensor[(2, 12, 15), uint64], %var_11343: Tensor[(70, 2), float32]) -> (Tensor[(2, 12, 15), bool], float64, float64, Tensor[(?, 15, 10), uint8], Tensor[(150), float32], Tensor[(70, 2), float64]) {
  %42 = cast(%var_11318, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %43 = shape_of(%var_11317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%var_11317, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = cast(-7.41207f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %48 = reshape(%46, newshape=[]) /* ty=float64 */;
  %49 = reshape(%47, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %50 = @func_5002(%48, %49) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %52 = reshape(%51, newshape=[1, 15, 10]) /* ty=Tensor[(1, 15, 10), float32] */;
  %53 = @func_8208(%52) /* ty=(Tensor[(?, 15, 10), uint8],) */;
  %54 = cast(%var_11343, dtype="uint32") /* ty=Tensor[(70, 2), uint32] */;
  %55 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(70, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 2), float32] */, dtype="uint32") /* ty=Tensor[(70, 2), uint32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %58 = bitwise_or(%56, %57) /* ty=Tensor[(70, 2), uint32] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(70, 2), float64] */;
  %60 = equal(%44, %45) /* ty=Tensor[(2, 12, 15), bool] */;
  %61 = %50.2;
  %62 = %53.0;
  %63 = erf(%59) /* ty=Tensor[(70, 2), float64] */;
  (%60, %61, -7.41207f64 /* ty=float64 */, %62, meta[relay.Constant][3] /* ty=Tensor[(150), float32] */, %63)
}

def @func_12590(%var_12563: Tensor[(11, 7, 3), float64]) -> (Tensor[(11, 7, 3), float64], Tensor[(?, 16, 6), float64], Tensor[(96), float32], Tensor[(15, 7, ?), int32]) {
  %64 = cast(%var_12563, dtype="float64") /* ty=Tensor[(11, 7, 3), float64] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %66 = reshape(%65, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %67 = @func_402(%66) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 105), float32] */, dtype="float32") /* ty=Tensor[(1, 105), float32] */;
  %69 = reshape(%68, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %70 = @func_2926(%69) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %71 = %70.1;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 105), float32] */, dtype="int32") /* ty=Tensor[(1, 105), int32] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="int32") /* ty=Tensor[(15, 7, 1), int32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %76 = log10(%64) /* ty=Tensor[(11, 7, 3), float64] */;
  %77 = %67.1;
  %78 = maximum(%74, %75) /* ty=Tensor[(15, 7, ?), int32] */;
  (%76, %77, meta[relay.Constant][4] /* ty=Tensor[(96), float32] */, %78)
}

def @main(%var_16161: Tensor[(224), float32]) -> (Tensor[(105), float32], Tensor[(224), float32], Tensor[(105), float32], Tensor[(96), float32], Tensor[(?, 3, 2), float32]) {
  %79 = cast(%var_16161, dtype="float32") /* ty=Tensor[(224), float32] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %81 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %82 = reshape(%79, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %83 = reshape(%80, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %84 = reshape(%81, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %85 = @func_3684(%82, %83, %84) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %87 = exp(%86) /* ty=Tensor[(1, 3, 2), float64] */;
  %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %92 = floor_divide(%90, %91) /* ty=Tensor[(?, 3, 2), float64] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(?, 3, 2), float32] */;
  %94 = %85.2;
  %95 = acosh(%93) /* ty=Tensor[(?, 3, 2), float32] */;
  (%94, %var_16161, meta[relay.Constant][6] /* ty=Tensor[(105), float32] */, meta[relay.Constant][7] /* ty=Tensor[(96), float32] */, %95)
}

def @func_5031(%var_5020: Tensor[(2, 6, 16), float64], %var_5021: Tensor[(2, 6, 16), float64]) -> Tensor[(2, 6, 16), float64] {
  %96 = cast(%var_5021, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %97 = shape_of(%var_5020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_5020, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%98, %99) /* ty=Tensor[(2, 6, 16), float64] */
}

def @func_7900(%var_7881: Tensor[(9, 13, 14), uint32], %var_7882: Tensor[(9, 13, 14), uint32], %var_7897: float64) -> (Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) {
  %100 = cast(%var_7882, dtype="uint32") /* ty=Tensor[(9, 13, 14), uint32] */;
  %101 = shape_of(%var_7881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_7881, dtype="uint32") /* ty=Tensor[(9, 13, 14), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %104 = cast(%var_7897, dtype="float64") /* ty=float64 */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %106 = reshape(%104, newshape=[]) /* ty=float64 */;
  %107 = reshape(%105, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %108 = @func_5002(%106, %107) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %109 = subtract(%102, %103) /* ty=Tensor[(9, 13, 14), uint32] */;
  %110 = %108.1;
  (%109, %110, %var_7897, meta[relay.Constant][9] /* ty=Tensor[(140), float32] */)
}

def @func_14708(%var_14693: int8, %var_14694: Tensor[(8, 16, 11), int8]) -> (Tensor[(8, 16, 11), bool],) {
  %111 = cast(%var_14693, dtype="bool") /* ty=bool */;
  %112 = cast(%var_14694, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %113 = equal(%111, %112) /* ty=Tensor[(8, 16, 11), bool] */;
  (%113,)
}

def @func_13754(%var_13697: Tensor[(5, 1, 7), uint32], %var_13698: Tensor[(5, 16, 7), uint32], %var_13705: Tensor[(1, 96), float32], %var_13706: Tensor[(12), uint16], %var_13707: Tensor[(676), float64], %var_13722: Tensor[(676), float64]) -> (Tensor[(5, 16, 7), bool], Tensor[(528), float64], Tensor[(2016), int32], Tensor[(1, 96), float32], Tensor[(12), uint16], Tensor[(676), bool], Tensor[(84, 24), float32]) {
  %114 = cast(%var_13697, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %115 = cast(%var_13698, dtype="bool") /* ty=Tensor[(5, 16, 7), bool] */;
  %116 = cast(%var_13722, dtype="uint8") /* ty=Tensor[(676), uint8] */;
  %117 = shape_of(%var_13707, dtype="int32") /* ty=Tensor[(1), int32] */;
  %118 = cast(%var_13707, dtype="uint8") /* ty=Tensor[(676), uint8] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %120 = logical_xor(%118, %119) /* ty=Tensor[(676), uint8] */;
  %121 = cast(%var_13722, dtype="bool") /* ty=Tensor[(676), bool] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(1), int32] */;
  %123 = cast(%120, dtype="bool") /* ty=Tensor[(676), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?), bool] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %127 = cast(%var_13705, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %128 = cast(%var_13706, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %129 = cast(%var_13707, dtype="float64") /* ty=Tensor[(676), float64] */;
  %130 = reshape(%125, newshape=[4, 12, 11]) /* ty=Tensor[(4, 12, 11), float64] */;
  %131 = reshape(%126, newshape=[84, 24]) /* ty=Tensor[(84, 24), int32] */;
  %132 = reshape(%127, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %133 = reshape(%128, newshape=[3, 4]) /* ty=Tensor[(3, 4), uint16] */;
  %134 = reshape(%129, newshape=[676]) /* ty=Tensor[(676), float64] */;
  %135 = @func_13200(%130, %131, %132, %133, %134) /* ty=(Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) */;
  %136 = %135.1;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(84, 24), float32] */;
  %138 = equal(%114, %115) /* ty=Tensor[(5, 16, 7), bool] */;
  %139 = greater(%123, %124) /* ty=Tensor[(676), bool] */;
  %140 = log(%137) /* ty=Tensor[(84, 24), float32] */;
  (%138, meta[relay.Constant][10] /* ty=Tensor[(528), float64] */, meta[relay.Constant][11] /* ty=Tensor[(2016), int32] */, %var_13705, %var_13706, %139, %140)
}

def @func_14796(%var_14762: Tensor[(9, 10, 13), int32], %var_14763: Tensor[(9, 10, 13), int32], %var_14789: Tensor[(650), float64]) -> (Tensor[(9, 10, 13), bool], Tensor[(448), float64], Tensor[(650), float64], Tensor[(448), float64]) {
  %141 = cast(%var_14763, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %142 = shape_of(%var_14762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_14762, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = cast(%var_14789, dtype="float64") /* ty=Tensor[(650), float64] */;
  %146 = cast(meta[relay.Constant][12] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %147 = reshape(%145, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float64] */;
  %148 = reshape(%146, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %149 = @func_2587(%147, %148) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) */;
  %150 = less(%143, %144) /* ty=Tensor[(9, 10, 13), bool] */;
  %151 = %149.2;
  (%150, %151, %var_14789, meta[relay.Constant][12] /* ty=Tensor[(448), float64] */)
}

def @func_15821(%var_15807: Tensor[(96), float32], %var_15819: Tensor[(5, 44), uint16]) -> (Tensor[(13, 15, 15), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(4, 5, 11), uint16], Tensor[(5, 44), uint16]) {
  %152 = cast(%var_15807, dtype="float32") /* ty=Tensor[(96), float32] */;
  %153 = reshape(%152, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %154 = @func_402(%153) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %156 = cast(meta[relay.Constant][13] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %157 = reshape(%155, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %158 = reshape(%156, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %159 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %160 = reshape(%159, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %161 = @func_3604(%160) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %162 = cast(%var_15819, dtype="uint16") /* ty=Tensor[(5, 44), uint16] */;
  %163 = cast(%var_15819, dtype="uint16") /* ty=Tensor[(5, 44), uint16] */;
  %164 = reshape(%162, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), uint16] */;
  %165 = reshape(%163, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), uint16] */;
  %166 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
  %167 = %154.0;
  %168 = @func_5031(%157, %158) /* ty=Tensor[(2, 6, 16), float64] */;
  %169 = %161.0;
  %170 = @func_9388(%164, %165) /* ty=Tensor[(4, 5, 11), uint16] */;
  (%166, %167, %var_15807, %168, meta[relay.Constant][13] /* ty=Tensor[(192), float64] */, %169, meta[relay.Constant][14] /* ty=Tensor[(105), float32] */, %170, %var_15819)
}

def @func_6270(%var_6239: Tensor[(16, 14, 6), float64], %var_6256: Tensor[(1728), uint16]) -> (Tensor[(16, 14, 6), float64], Tensor[(5, 198), float64], Tensor[(12), uint16], Tensor[(1728), uint16], Tensor[(112), uint8]) {
  %171 = cast(%var_6239, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %172 = cast(meta[relay.Constant][15] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %173 = cast(%var_6256, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %174 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %175 = reshape(%172, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
  %176 = reshape(%173, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
  %177 = reshape(%174, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %178 = @func_5325(%175, %176, %177) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
  %179 = log(%171) /* ty=Tensor[(16, 14, 6), float64] */;
  %180 = %178.5;
  (%179, %180, meta[relay.Constant][15] /* ty=Tensor[(12), uint16] */, %var_6256, meta[relay.Constant][16] /* ty=Tensor[(112), uint8] */)
}

def @func_203(%var_196: Tensor[(10, 9, 11), float64], %var_197: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), bool] {
  %181 = cast(%var_197, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %182 = shape_of(%var_196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%var_196, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%183, %184) /* ty=Tensor[(10, 9, 11), bool] */
}

def @func_15684(%var_15672: Tensor[(12, 2, 9), bool], %var_15673: Tensor[(12, 2, 9), bool]) -> (Tensor[(12, 2, 9), bool],) {
  %185 = cast(%var_15673, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %186 = shape_of(%var_15672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%var_15672, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = logical_or(%187, %188) /* ty=Tensor[(12, 2, 9), bool] */;
  (%189,)
}

def @func_5002(%var_4994: float64, %var_4996: Tensor[(140), float32]) -> (Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) {
  %190 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %191 = cast(%var_4994, dtype="float64") /* ty=float64 */;
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
  %193 = cast(%var_4996, dtype="float32") /* ty=Tensor[(140), float32] */;
  %194 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %195 = reshape(%191, newshape=[]) /* ty=float64 */;
  %196 = reshape(%192, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %197 = reshape(%193, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %198 = reshape(%194, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %199 = @func_4163(%195, %196, %197, %198) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %200 = sin(%190) /* ty=Tensor[(15, 3, 11), float32] */;
  %201 = %199.1;
  (%200, %201, %var_4994, meta[relay.Constant][18] /* ty=Tensor[(676), float64] */, %var_4996, meta[relay.Constant][19] /* ty=Tensor[(96), float32] */)
}

def @func_9527(%var_9504: Tensor[(13, 14, 4), uint8]) -> (Tensor[(13, 14, 4), uint8], Tensor[(13, 14, 4), float32]) {
  %202 = cast(%var_9504, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %203 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(13, 14, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 14, 4), uint8] */, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %206 = cast(%var_9504, dtype="float32") /* ty=Tensor[(13, 14, 4), float32] */;
  %207 = bitwise_and(%204, %205) /* ty=Tensor[(13, 14, 4), uint8] */;
  %208 = cosh(%206) /* ty=Tensor[(13, 14, 4), float32] */;
  (%207, %208)
}

def @func_16014() -> (Tensor[(13, 15, 15), float32],) {
  %209 = @func_15748() /* ty=Tensor[(13, 15, 15), float32] */;
  (%209,)
}

def @func_15748() -> Tensor[(13, 15, 15), float32] {
  @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15269(%var_15264: Tensor[(819), int32]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %210 = cast(%var_15264, dtype="int32") /* ty=Tensor[(819), int32] */;
  %211 = cast(%var_15264, dtype="int32") /* ty=Tensor[(819), int32] */;
  %212 = reshape(%210, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %213 = reshape(%211, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %214 = @func_12282(%212, %213) /* ty=(Tensor[(13, 9, 7), bool],) */;
  %215 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %216 = %214.0;
  (%215, %216, %var_15264)
}

def @func_13200(%var_13127: Tensor[(4, 12, 11), float64], %var_13145: Tensor[(84, 24), int32], %var_13146: Tensor[(96), float32], %var_13149: Tensor[(3, 4), uint16], %var_13159: Tensor[(676), float64]) -> (Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) {
  %217 = cast(%var_13145, dtype="int32") /* ty=Tensor[(84, 24), int32] */;
  %218 = cast(%var_13145, dtype="int32") /* ty=Tensor[(84, 24), int32] */;
  %219 = cast(%var_13146, dtype="float32") /* ty=Tensor[(96), float32] */;
  %220 = reshape(%217, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), int32] */;
  %221 = reshape(%218, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), int32] */;
  %222 = reshape(%219, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %223 = @func_8525(%220, %221, %222) /* ty=(Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) */;
  %224 = cast(%var_13149, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
  %225 = cast(meta[relay.Constant][21] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %226 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %227 = reshape(%224, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
  %228 = reshape(%225, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
  %229 = reshape(%226, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %230 = @func_5325(%227, %228, %229) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
  %231 = cast(meta[relay.Constant][23] /* ty=Tensor[(704), float64] */, dtype="float64") /* ty=Tensor[(704), float64] */;
  %232 = reshape(%231, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float64] */;
  %233 = @func_8039(%232) /* ty=(Tensor[(4, 11, 16), float64],) */;
  %234 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), uint8] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %235 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %236 = reshape(%234, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), float64] */;
  %237 = reshape(%235, newshape=[676]) /* ty=Tensor[(676), float64] */;
  %238 = @func_7089(%236, %237) /* ty=(Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) */;
  %239 = cast(3.1321f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %240 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %241 = %238.4;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %243 = %230.3;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %245 = reshape(%239, newshape=[]) /* ty=float64 */;
  %246 = reshape(%240, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %247 = reshape(%242, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %248 = reshape(%244, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %249 = @func_4163(%245, %246, %247, %248) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %250 = cast(3.1321f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %251 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %252 = %249.4;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %254 = %223.2;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(96), float32] */;
  %256 = reshape(%250, newshape=[]) /* ty=float64 */;
  %257 = reshape(%251, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %258 = reshape(%253, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %259 = reshape(%255, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %260 = @func_4163(%256, %257, %258, %259) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %261 = cast(%var_13127, dtype="float64") /* ty=Tensor[(4, 12, 11), float64] */;
  %262 = atanh(%261) /* ty=Tensor[(4, 12, 11), float64] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(4, 12, 11), float64] */;
  %264 = %233.0;
  %265 = %260.1;
  %266 = sqrt(%263) /* ty=Tensor[(4, 12, 11), float64] */;
  (%254, %var_13145, %var_13146, %243, %var_13149, meta[relay.Constant][21] /* ty=Tensor[(1728), uint16] */, meta[relay.Constant][22] /* ty=Tensor[(112), uint8] */, %264, meta[relay.Constant][23] /* ty=Tensor[(704), float64] */, %241, %var_13159, %252, 3.1321f64 /* ty=float64 */, %265, %266)
}

def @func_1475(%var_1445: Tensor[(10, 14, 1), float32], %var_1446: Tensor[(10, 14, 11), float32], %var_1467: Tensor[(96), float32]) -> (Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
  %267 = cast(%var_1445, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
  %268 = cast(%var_1446, dtype="float32") /* ty=Tensor[(10, 14, 11), float32] */;
  %269 = cast(%var_1467, dtype="float32") /* ty=Tensor[(96), float32] */;
  %270 = reshape(%269, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %271 = @func_402(%270) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %272 = floor_divide(%267, %268) /* ty=Tensor[(10, 14, 11), float32] */;
  %273 = %271.0;
  (%272, %273, %var_1467)
}

def @func_11238(%var_11234: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32],) {
  %274 = cast(%var_11234, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
  %275 = cosh(%274) /* ty=Tensor[(2, 2, 12), float32] */;
  (%275,)
}

def @func_958(%var_839: Tensor[(9, 3, 2), uint64], %var_859: Tensor[(96), float32], %var_902: Tensor[(990), float64]) -> (Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) {
  %276 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %277 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_839, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %280 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %281 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %282 = reshape(%280, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %283 = reshape(%281, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %284 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %285 = @func_203(%282, %283) /* ty=Tensor[(10, 9, 11), bool] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %287 = reshape(%284, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %288 = reshape(%286, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %289 = cast(meta[relay.Constant][25] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %290 = reshape(%289, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %291 = @func_572(%290) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %292 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %293 = cast(%285, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %294 = reshape(%292, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %295 = reshape(%293, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %296 = cast(%var_859, dtype="float32") /* ty=Tensor[(96), float32] */;
  %297 = reshape(%296, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %298 = @func_402(%297) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %299 = %298.1;
  %300 = cast(%var_859, dtype="float32") /* ty=Tensor[(96), float32] */;
  %301 = reshape(%300, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %302 = @func_402(%301) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %303 = %302.0;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %305 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%299, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %308 = multiply(%278, %279) /* ty=Tensor[(9, 3, 2), uint64] */;
  %309 = @func_203(%287, %288) /* ty=Tensor[(10, 9, 11), bool] */;
  %310 = %291.2;
  %311 = @func_203(%294, %295) /* ty=Tensor[(10, 9, 11), bool] */;
  %312 = add(%306, %307) /* ty=Tensor[(?, 16, 6), float32] */;
  (%308, %var_859, %285, %var_902, %309, %310, meta[relay.Constant][25] /* ty=Tensor[(448), float64] */, %311, %312)
}

def @func_13313(%var_13280: uint64, %var_13281: Tensor[(6, 12, 5), uint64], %var_13291: Tensor[(48), float32], %var_13310: Tensor[(240), uint8], %var_13311: Tensor[(1200), uint8]) -> (Tensor[(6, 12, 5), uint64], Tensor[(48), float32], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(154, 10), float32], Tensor[(96), float32], Tensor[(2, 2, 12), bool], Tensor[(15, 16, 5), uint16], Tensor[(240), uint8], Tensor[(1200), uint8]) {
  %313 = cast(%var_13280, dtype="uint64") /* ty=uint64 */;
  %314 = cast(%var_13281, dtype="uint64") /* ty=Tensor[(6, 12, 5), uint64] */;
  %315 = cast(meta[relay.Constant][26] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %316 = cast(meta[relay.Constant][27] /* ty=Tensor[(154, 10), float32] */, dtype="float32") /* ty=Tensor[(154, 10), float32] */;
  %317 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %318 = reshape(%315, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %319 = reshape(%316, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %320 = reshape(%317, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %321 = @func_1475(%318, %319, %320) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %322 = cast(%var_13291, dtype="float32") /* ty=Tensor[(48), float32] */;
  %323 = reshape(%322, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %324 = @func_11238(%323) /* ty=(Tensor[(2, 2, 12), float32],) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %327 = tan(%326) /* ty=Tensor[(2, 2, 12), float64] */;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %329 = cast(%var_13280, dtype="bool") /* ty=bool */;
  %330 = cast(%var_13310, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %331 = cast(%var_13311, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %332 = cast(%var_13311, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %333 = reshape(%330, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), uint8] */;
  %334 = reshape(%331, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), uint8] */;
  %335 = reshape(%332, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), uint8] */;
  %336 = @func_9219(%333, %334, %335) /* ty=(Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) */;
  %337 = maximum(%313, %314) /* ty=Tensor[(6, 12, 5), uint64] */;
  %338 = %321.0;
  %339 = logical_or(%328, %329) /* ty=Tensor[(2, 2, 12), bool] */;
  %340 = %336.0;
  (%337, %var_13291, %338, meta[relay.Constant][26] /* ty=Tensor[(140), float32] */, meta[relay.Constant][27] /* ty=Tensor[(154, 10), float32] */, meta[relay.Constant][28] /* ty=Tensor[(96), float32] */, %339, %340, %var_13310, %var_13311)
}

def @func_15592(%var_15584: Tensor[(105), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
  %341 = cast(%var_15584, dtype="float32") /* ty=Tensor[(105), float32] */;
  %342 = reshape(%341, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %343 = @func_3604(%342) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %344 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
  %345 = %343.2;
  (%344, %345, %var_15584)
}

def @func_402(%var_362: Tensor[(1, 16, 6), float32]) -> (Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) {
  %346 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 16, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %347 = shape_of(%var_362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_362, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = cast(%var_362, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
  %351 = asin(%350) /* ty=Tensor[(1, 16, 6), float32] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
  %353 = cos(%352) /* ty=Tensor[(1, 16, 6), float32] */;
  %354 = cast(%353, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %355 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%351, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = equal(%356, %357) /* ty=Tensor[(?, 16, 6), bool] */;
  %359 = cast(%351, dtype="float64") /* ty=Tensor[(1, 16, 6), float64] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="float64") /* ty=Tensor[(?, 16, 6), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %363 = greater(%348, %349) /* ty=Tensor[(?, 16, 6), bool] */;
  %364 = divide(%361, %362) /* ty=Tensor[(?, 16, 6), float64] */;
  (%363, %364)
}

def @func_4763(%var_4666: Tensor[(16, 11, 10), float64], %var_4688: Tensor[(1, 1540), float32], %var_4689: Tensor[(96), float32], %var_4694: Tensor[(676), float64], %var_4697: Tensor[(650), float64], %var_4698: Tensor[(8, 56), float64]) -> (Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) {
  %365 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %366 = cast(%var_4688, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
  %367 = cast(%var_4689, dtype="float32") /* ty=Tensor[(96), float32] */;
  %368 = reshape(%365, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %369 = reshape(%366, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %370 = reshape(%367, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %371 = @func_1475(%368, %369, %370) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %372 = cast(-7.39741f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %373 = cast(%var_4694, dtype="float64") /* ty=Tensor[(676), float64] */;
  %374 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %375 = cast(%var_4689, dtype="float32") /* ty=Tensor[(96), float32] */;
  %376 = reshape(%372, newshape=[]) /* ty=float64 */;
  %377 = reshape(%373, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %378 = reshape(%374, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %379 = reshape(%375, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %380 = @func_4163(%376, %377, %378, %379) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %381 = cast(%var_4697, dtype="float64") /* ty=Tensor[(650), float64] */;
  %382 = cast(%var_4698, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %383 = reshape(%381, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float64] */;
  %384 = reshape(%382, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %385 = @func_2587(%383, %384) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) */;
  %386 = cast(%var_4666, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %387 = sigmoid(%386) /* ty=Tensor[(16, 11, 10), float64] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %389 = log(%388) /* ty=Tensor[(16, 11, 10), float32] */;
  %390 = cast(%389, dtype="int16") /* ty=Tensor[(16, 11, 10), int16] */;
  %391 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%387, dtype="int16") /* ty=Tensor[(16, 11, 10), int16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %394 = %371.0;
  %395 = %380.6;
  %396 = %385.2;
  %397 = add(%392, %393) /* ty=Tensor[(16, 11, 10), int16] */;
  (%394, meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, %var_4688, %var_4689, %395, -7.39741f64 /* ty=float64 */, %var_4694, %396, %var_4697, %var_4698, %397)
}

def @func_5325(%var_5277: Tensor[(12, 1, 1), uint16], %var_5278: Tensor[(12, 16, 9), uint16], %var_5304: Tensor[(112), uint8]) -> (Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) {
  %398 = cast(%var_5277, dtype="uint16") /* ty=Tensor[(12, 1, 1), uint16] */;
  %399 = cast(%var_5278, dtype="uint16") /* ty=Tensor[(12, 16, 9), uint16] */;
  %400 = cast(%var_5304, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %401 = cast(%var_5304, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %402 = reshape(%400, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %403 = reshape(%401, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
  %405 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
  %406 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 198), float64] */, dtype="bool") /* ty=Tensor[(5, 198), bool] */;
  %407 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
  %408 = reshape(%404, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %409 = reshape(%405, newshape=[990, 1]) /* ty=Tensor[(990, 1), float64] */;
  %410 = reshape(%406, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), bool] */;
  %411 = reshape(%407, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %412 = @func_1437(%408, %409, %410, %411) /* ty=(Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) */;
  %413 = left_shift(%398, %399) /* ty=Tensor[(12, 16, 9), uint16] */;
  %414 = @func_1580(%402, %403) /* ty=Tensor[(2, 4, 14), uint8] */;
  %415 = %412.5;
  (%413, %414, %var_5304, %415, meta[relay.Constant][31] /* ty=Tensor[(1, 462), float64] */, meta[relay.Constant][32] /* ty=Tensor[(5, 198), float64] */)
}

def @func_15567(%var_15496: Tensor[(48, 2), float32], %var_15555: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), bool], Tensor[(48, 2), uint8], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8]) {
  %416 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %418 = acos(%417) /* ty=Tensor[(13, 15, 15), float32] */;
  %419 = cast(%416, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %423 = mod(%421, %422) /* ty=Tensor[(13, 15, 15), float64] */;
  %424 = cast(%416, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %428 = cast(%416, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %429 = tan(%428) /* ty=Tensor[(13, 15, 15), float64] */;
  %430 = cast(%429, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %431 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%418, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = cast(%var_15496, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %435 = reshape(%434, newshape=[48, 2]) /* ty=Tensor[(48, 2), float32] */;
  %436 = @func_15391(%435) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) */;
  %437 = %436.3;
  %438 = cast(%437, dtype="uint8") /* ty=Tensor[(48, 2), uint8] */;
  %439 = shape_of(%var_15496, dtype="int32") /* ty=Tensor[(2), int32] */;
  %440 = cast(%var_15496, dtype="uint8") /* ty=Tensor[(48, 2), uint8] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %442 = cast(%429, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %443 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%423, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %446 = cast(%418, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %447 = cast(%var_15555, dtype="float64") /* ty=Tensor[(192), float64] */;
  %448 = cast(%var_15555, dtype="float64") /* ty=Tensor[(192), float64] */;
  %449 = reshape(%447, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %450 = reshape(%448, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %451 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %452 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %453 = reshape(%451, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %454 = reshape(%452, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %455 = divide(%426, %427) /* ty=Tensor[(13, 15, 15), float32] */;
  %456 = equal(%432, %433) /* ty=Tensor[(13, 15, 15), bool] */;
  %457 = subtract(%440, %441) /* ty=Tensor[(48, 2), uint8] */;
  %458 = subtract(%444, %445) /* ty=Tensor[(13, 15, 15), int64] */;
  %459 = acosh(%446) /* ty=Tensor[(13, 15, 15), float64] */;
  %460 = @func_5031(%449, %450) /* ty=Tensor[(2, 6, 16), float64] */;
  %461 = @func_1580(%453, %454) /* ty=Tensor[(2, 4, 14), uint8] */;
  (%455, %456, %457, %458, %459, %460, %var_15555, %461, meta[relay.Constant][33] /* ty=Tensor[(112), uint8] */)
}

def @func_15948(%var_15909: Tensor[(13, 15, 15), float32]) -> (Tensor[(13, 15, 15), bool], Tensor[(676), float64], float64, Tensor[(140), float32]) {
  %462 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %463 = cast(%var_15909, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = cast(8.70004f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %468 = cast(meta[relay.Constant][34] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %469 = reshape(%467, newshape=[]) /* ty=float64 */;
  %470 = reshape(%468, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %471 = @func_5002(%469, %470) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %472 = less(%465, %466) /* ty=Tensor[(13, 15, 15), bool] */;
  %473 = %471.3;
  (%472, %473, 8.70004f64 /* ty=float64 */, meta[relay.Constant][34] /* ty=Tensor[(140), float32] */)
}

def @func_9219(%var_9181: Tensor[(15, 16, 1), uint8], %var_9182: Tensor[(15, 16, 5), uint8], %var_9186: Tensor[(15, 16, 5), uint8]) -> (Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) {
  %474 = cast(%var_9181, dtype="uint8") /* ty=Tensor[(15, 16, 1), uint8] */;
  %475 = cast(%var_9182, dtype="uint8") /* ty=Tensor[(15, 16, 5), uint8] */;
  %476 = maximum(%474, %475) /* ty=Tensor[(15, 16, 5), uint8] */;
  %477 = cast(%var_9186, dtype="uint16") /* ty=Tensor[(15, 16, 5), uint16] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="uint16") /* ty=Tensor[(15, 16, 5), uint16] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %481 = cast(%var_9182, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %482 = bitwise_or(%479, %480) /* ty=Tensor[(15, 16, 5), uint16] */;
  %483 = asinh(%481) /* ty=Tensor[(15, 16, 5), float64] */;
  (%482, %483)
}

def @func_15391(%var_15379: Tensor[(48, 2), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) {
  %484 = cast(meta[relay.Constant][35] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %485 = cast(%var_15379, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %487 = reshape(%484, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %488 = reshape(%485, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %489 = reshape(%486, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %490 = @func_958(%487, %488, %489) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %491 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %492 = %490.7;
  (%491, %492, meta[relay.Constant][35] /* ty=Tensor[(54), uint64] */, %var_15379, meta[relay.Constant][36] /* ty=Tensor[(990), float64] */)
}

def @func_8039(%var_8035: Tensor[(4, 11, 16), float64]) -> (Tensor[(4, 11, 16), float64],) {
  %493 = cast(%var_8035, dtype="float64") /* ty=Tensor[(4, 11, 16), float64] */;
  %494 = erf(%493) /* ty=Tensor[(4, 11, 16), float64] */;
  (%494,)
}

def @func_15426() -> Tensor[(13, 15, 15), float32] {
  @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15980(%var_15975: Tensor[(140), float32], %var_15976: Tensor[(8, 220), float64], %var_15978: Tensor[(2, 224), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(676), float64], Tensor[(112), uint8], float64, Tensor[(140), float32], Tensor[(8, 220), float64], Tensor[(650), float64], Tensor[(2, 224), float64]) {
  %495 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %496 = cast(0.028292f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %497 = cast(%var_15975, dtype="float32") /* ty=Tensor[(140), float32] */;
  %498 = cast(%var_15976, dtype="float64") /* ty=Tensor[(8, 220), float64] */;
  %499 = cast(meta[relay.Constant][38] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %500 = cast(%var_15978, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %501 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %503 = reshape(%495, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %504 = reshape(%496, newshape=[]) /* ty=float64 */;
  %505 = reshape(%497, newshape=[5, 28]) /* ty=Tensor[(5, 28), float32] */;
  %506 = reshape(%498, newshape=[1760]) /* ty=Tensor[(1760), float64] */;
  %507 = reshape(%499, newshape=[650]) /* ty=Tensor[(650), float64] */;
  %508 = reshape(%500, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %509 = reshape(%502, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), float32] */;
  %510 = @func_15662(%503, %504, %505, %506, %507, %508, %509) /* ty=(Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) */;
  %511 = %510.12;
  (%501, %511, meta[relay.Constant][37] /* ty=Tensor[(112), uint8] */, 0.028292f64 /* ty=float64 */, %var_15975, %var_15976, meta[relay.Constant][38] /* ty=Tensor[(650), float64] */, %var_15978)
}

def @func_4163(%var_4113: float64, %var_4114: Tensor[(4, 13, 13), float64], %var_4141: Tensor[(35, 4), float32], %var_4143: Tensor[(96), float32]) -> (Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
  %512 = cast(%var_4113, dtype="bool") /* ty=bool */;
  %513 = cast(%var_4114, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %514 = cast(%var_4141, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %515 = cast(meta[relay.Constant][39] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %516 = cast(%var_4143, dtype="float32") /* ty=Tensor[(96), float32] */;
  %517 = reshape(%514, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %518 = reshape(%515, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %519 = reshape(%516, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %520 = @func_1475(%517, %518, %519) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %521 = cast(%var_4141, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
  %522 = cast(%var_4113, dtype="bool") /* ty=bool */;
  %523 = cast(meta[relay.Constant][40] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %524 = reshape(%523, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %525 = @func_2926(%524) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %526 = not_equal(%512, %513) /* ty=Tensor[(4, 13, 13), bool] */;
  %527 = %520.1;
  %528 = less_equal(%521, %522) /* ty=Tensor[(35, 4), bool] */;
  %529 = %525.1;
  (%526, %527, meta[relay.Constant][39] /* ty=Tensor[(1540), float32] */, %var_4143, %528, %529, meta[relay.Constant][40] /* ty=Tensor[(105), float32] */)
}

def @func_8417(%var_8368: Tensor[(10, 15, 6), float64], %var_8381: float64, %var_8404: Tensor[(231, 2), float64]) -> (Tensor[(10, 15, 6), float64], Tensor[(14, 11, 13), float32], Tensor[(1, 105), float32], Tensor[(9, 13, 14), uint32], Tensor[(1638), uint32], float64, Tensor[(?, 16, 6), int32], Tensor[(990, 1), float64], Tensor[(231, 2), bool]) {
  %530 = cast(%var_8368, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %531 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 105), float32] */, dtype="float32") /* ty=Tensor[(1, 105), float32] */;
  %532 = reshape(%531, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %533 = @func_3604(%532) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %534 = cast(meta[relay.Constant][42] /* ty=Tensor[(1638), uint32] */, dtype="uint32") /* ty=Tensor[(1638), uint32] */;
  %535 = cast(meta[relay.Constant][42] /* ty=Tensor[(1638), uint32] */, dtype="uint32") /* ty=Tensor[(1638), uint32] */;
  %536 = cast(%var_8381, dtype="float64") /* ty=float64 */;
  %537 = reshape(%534, newshape=[9, 13, 14]) /* ty=Tensor[(9, 13, 14), uint32] */;
  %538 = reshape(%535, newshape=[9, 13, 14]) /* ty=Tensor[(9, 13, 14), uint32] */;
  %539 = reshape(%536, newshape=[]) /* ty=float64 */;
  %540 = @func_7900(%537, %538, %539) /* ty=(Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) */;
  %541 = cast(meta[relay.Constant][43] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %542 = cast(meta[relay.Constant][44] /* ty=Tensor[(990, 1), float64] */, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %543 = cast(meta[relay.Constant][44] /* ty=Tensor[(990, 1), float64] */, dtype="bool") /* ty=Tensor[(990, 1), bool] */;
  %544 = cast(meta[relay.Constant][43] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %545 = reshape(%541, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %546 = reshape(%542, newshape=[990, 1]) /* ty=Tensor[(990, 1), float64] */;
  %547 = reshape(%543, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), bool] */;
  %548 = reshape(%544, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %549 = @func_1437(%545, %546, %547, %548) /* ty=(Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) */;
  %550 = cast(%var_8404, dtype="bool") /* ty=Tensor[(231, 2), bool] */;
  %551 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(231, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %552 = cast(meta[relay.Constant][43] /* ty=Tensor[(231, 2), float64] */, dtype="bool") /* ty=Tensor[(231, 2), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %554 = acos(%530) /* ty=Tensor[(10, 15, 6), float64] */;
  %555 = %533.3;
  %556 = %540.0;
  %557 = %549.5;
  %558 = less(%552, %553) /* ty=Tensor[(231, 2), bool] */;
  (%554, %555, meta[relay.Constant][41] /* ty=Tensor[(1, 105), float32] */, %556, meta[relay.Constant][42] /* ty=Tensor[(1638), uint32] */, %var_8381, %557, meta[relay.Constant][44] /* ty=Tensor[(990, 1), float64] */, %558)
}

def @func_7595(%var_7566: Tensor[(1, 12, 10), float32], %var_7572: Tensor[(96), float32]) -> (Tensor[(1, 12, 10), float32], Tensor[(9, 3, 2), uint64], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(330, 3), float64], Tensor[(13, 15, 6), float64], Tensor[(10, 117), float64], Tensor[(14, 6, 6), float32], Tensor[(504), float32], Tensor[(?, 16, 6), bool]) {
  %559 = cast(%var_7566, dtype="float32") /* ty=Tensor[(1, 12, 10), float32] */;
  %560 = cast(meta[relay.Constant][45] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %561 = cast(%var_7572, dtype="float32") /* ty=Tensor[(96), float32] */;
  %562 = cast(meta[relay.Constant][46] /* ty=Tensor[(330, 3), float64] */, dtype="float64") /* ty=Tensor[(330, 3), float64] */;
  %563 = reshape(%560, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %564 = reshape(%561, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %565 = reshape(%562, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %566 = @func_958(%563, %564, %565) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %567 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 117), float64] */, dtype="float64") /* ty=Tensor[(10, 117), float64] */;
  %568 = reshape(%567, newshape=[13, 15, 6]) /* ty=Tensor[(13, 15, 6), float64] */;
  %569 = @func_6373(%568) /* ty=(Tensor[(13, 15, 6), float64],) */;
  %570 = cast(meta[relay.Constant][48] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %571 = reshape(%570, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), float32] */;
  %572 = cast(%var_7572, dtype="float32") /* ty=Tensor[(96), float32] */;
  %573 = reshape(%572, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %574 = @func_402(%573) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %575 = sqrt(%559) /* ty=Tensor[(1, 12, 10), float32] */;
  %576 = %566.0;
  %577 = %569.0;
  %578 = @func_4234(%571) /* ty=Tensor[(14, 6, 6), float32] */;
  %579 = %574.0;
  (%575, %576, meta[relay.Constant][45] /* ty=Tensor[(54), uint64] */, %var_7572, meta[relay.Constant][46] /* ty=Tensor[(330, 3), float64] */, %577, meta[relay.Constant][47] /* ty=Tensor[(10, 117), float64] */, %578, meta[relay.Constant][48] /* ty=Tensor[(504), float32] */, %579)
}

def @func_1580(%var_1557: Tensor[(2, 4, 14), uint8], %var_1558: Tensor[(2, 4, 14), uint8]) -> Tensor[(2, 4, 14), uint8] {
  %580 = cast(%var_1558, dtype="uint8") /* ty=Tensor[(2, 4, 14), uint8] */;
  %581 = shape_of(%var_1557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_1557, dtype="uint8") /* ty=Tensor[(2, 4, 14), uint8] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%582, %583) /* ty=Tensor[(2, 4, 14), uint8] */
}

def @func_12282(%var_12262: Tensor[(13, 9, 7), int32], %var_12263: Tensor[(13, 9, 7), int32]) -> (Tensor[(13, 9, 7), bool],) {
  %584 = cast(%var_12263, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %585 = shape_of(%var_12262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_12262, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = not_equal(%586, %587) /* ty=Tensor[(13, 9, 7), bool] */;
  (%588,)
}

def @func_572(%var_523: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) {
  %589 = cast(%var_523, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
  %590 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %591 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %592 = reshape(%590, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %593 = reshape(%591, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %594 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %595 = @func_203(%592, %593) /* ty=Tensor[(10, 9, 11), bool] */;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %597 = reshape(%594, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %598 = reshape(%596, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %599 = cosh(%589) /* ty=Tensor[(8, 4, 14), float64] */;
  %600 = @func_203(%597, %598) /* ty=Tensor[(10, 9, 11), bool] */;
  (%599, %595, meta[relay.Constant][49] /* ty=Tensor[(990), float64] */, %600)
}

def @func_8525(%var_8497: Tensor[(14, 16, 9), int32], %var_8498: Tensor[(14, 16, 9), int32], %var_8505: Tensor[(96), float32]) -> (Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) {
  %601 = cast(%var_8498, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
  %602 = shape_of(%var_8497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_8497, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_8505, dtype="float32") /* ty=Tensor[(96), float32] */;
  %606 = reshape(%605, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %607 = @func_402(%606) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %608 = greater_equal(%603, %604) /* ty=Tensor[(14, 16, 9), bool] */;
  %609 = %607.1;
  (%608, %609, %var_8505)
}

def @func_3604(%var_3589: Tensor[(105), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) {
  %610 = cast(%var_3589, dtype="float32") /* ty=Tensor[(105), float32] */;
  %611 = reshape(%610, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %612 = @func_2926(%611) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %613 = %612.1;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %615 = reshape(%614, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %616 = @func_2926(%615) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %617 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %618 = cos(%617) /* ty=Tensor[(14, 11, 13), float32] */;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %620 = %616.0;
  %621 = atanh(%619) /* ty=Tensor[(14, 11, 13), float32] */;
  (%613, %var_3589, %620, %621)
}

def @func_4234(%var_4224: Tensor[(14, 6, 6), float32]) -> Tensor[(14, 6, 6), float32] {
  %622 = cast(%var_4224, dtype="float32") /* ty=Tensor[(14, 6, 6), float32] */;
  exp(%622) /* ty=Tensor[(14, 6, 6), float32] */
}

def @func_2587(%var_2576: Tensor[(10, 5, 13), float64], %var_2581: Tensor[(448), float64]) -> (Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) {
  %623 = cast(%var_2576, dtype="float64") /* ty=Tensor[(10, 5, 13), float64] */;
  %624 = cast(%var_2581, dtype="float64") /* ty=Tensor[(448), float64] */;
  %625 = reshape(%624, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %626 = @func_572(%625) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %627 = asin(%623) /* ty=Tensor[(10, 5, 13), float64] */;
  %628 = %626.1;
  (%627, %628, %var_2581)
}

def @func_6373(%var_6364: Tensor[(13, 15, 6), float64]) -> (Tensor[(13, 15, 6), float64],) {
  %629 = cast(%var_6364, dtype="float64") /* ty=Tensor[(13, 15, 6), float64] */;
  %630 = log(%629) /* ty=Tensor[(13, 15, 6), float64] */;
  (%630,)
}

def @func_9388(%var_9383: Tensor[(4, 5, 11), uint16], %var_9384: Tensor[(4, 5, 11), uint16]) -> Tensor[(4, 5, 11), uint16] {
  %631 = cast(%var_9384, dtype="uint16") /* ty=Tensor[(4, 5, 11), uint16] */;
  %632 = shape_of(%var_9383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_9383, dtype="uint16") /* ty=Tensor[(4, 5, 11), uint16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%633, %634) /* ty=Tensor[(4, 5, 11), uint16] */
}

def @func_12680(%var_12630: Tensor[(16, 12, 13), float64], %var_12645: Tensor[(448), float64], %var_12650: Tensor[(192), float64]) -> (Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) {
  %635 = cast(%var_12645, dtype="float64") /* ty=Tensor[(448), float64] */;
  %636 = reshape(%635, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %637 = @func_572(%636) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %638 = cast(%var_12650, dtype="float64") /* ty=Tensor[(192), float64] */;
  %639 = cast(%var_12650, dtype="float64") /* ty=Tensor[(192), float64] */;
  %640 = reshape(%638, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %641 = reshape(%639, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %642 = cast(%var_12630, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %643 = cos(%642) /* ty=Tensor[(16, 12, 13), float64] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %645 = log10(%644) /* ty=Tensor[(16, 12, 13), float64] */;
  %646 = cast(%645, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %647 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%643, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %651 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %652 = cast(meta[relay.Constant][53] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %653 = reshape(%650, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %654 = reshape(%651, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %655 = reshape(%652, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %656 = @func_1475(%653, %654, %655) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %657 = %637.2;
  %658 = @func_5031(%640, %641) /* ty=Tensor[(2, 6, 16), float64] */;
  %659 = equal(%648, %649) /* ty=Tensor[(16, 12, 13), bool] */;
  %660 = %656.0;
  (%657, %var_12645, %658, %var_12650, %659, %660, meta[relay.Constant][51] /* ty=Tensor[(140), float32] */, meta[relay.Constant][52] /* ty=Tensor[(1540), float32] */, meta[relay.Constant][53] /* ty=Tensor[(96), float32] */)
}

def @func_5731(%var_5725: Tensor[(2, 16, 14), int8], %var_5726: Tensor[(2, 16, 14), int8]) -> Tensor[(2, 16, 14), bool] {
  %661 = cast(%var_5726, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %662 = shape_of(%var_5725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_5725, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%663, %664) /* ty=Tensor[(2, 16, 14), bool] */
}

def @func_7089(%var_7076: Tensor[(8, 2, 7), float64], %var_7085: Tensor[(676), float64]) -> (Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) {
  %665 = cast(%var_7076, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
  %666 = cast(-4.76929f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %667 = cast(%var_7085, dtype="float64") /* ty=Tensor[(676), float64] */;
  %668 = cast(meta[relay.Constant][54] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %669 = cast(meta[relay.Constant][55] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %670 = reshape(%666, newshape=[]) /* ty=float64 */;
  %671 = reshape(%667, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %672 = reshape(%668, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %673 = reshape(%669, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %674 = @func_4163(%670, %671, %672, %673) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %675 = acos(%665) /* ty=Tensor[(8, 2, 7), float64] */;
  %676 = %674.1;
  (%675, %676, -4.76929f64 /* ty=float64 */, %var_7085, meta[relay.Constant][54] /* ty=Tensor[(35, 4), float32] */, meta[relay.Constant][55] /* ty=Tensor[(96), float32] */)
}

def @func_9498(%var_9489: int16, %var_9490: Tensor[(15, 5, 11), int16]) -> Tensor[(15, 5, 11), int16] {
  %677 = cast(%var_9489, dtype="int16") /* ty=int16 */;
  %678 = cast(%var_9490, dtype="int16") /* ty=Tensor[(15, 5, 11), int16] */;
  bitwise_xor(%677, %678) /* ty=Tensor[(15, 5, 11), int16] */
}

def @func_14675(%var_14640: Tensor[(12, 13, 12), float64]) -> (Tensor[(12, 13, 12), float32], Tensor[(12, 13, 12), float64]) {
  %679 = cast(%var_14640, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
  %680 = sigmoid(%679) /* ty=Tensor[(12, 13, 12), float64] */;
  %681 = cast(%var_14640, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %685 = cast(%680, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
  %686 = shape_of(%var_14640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_14640, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %689 = mod(%683, %684) /* ty=Tensor[(12, 13, 12), float32] */;
  %690 = floor_mod(%687, %688) /* ty=Tensor[(12, 13, 12), float64] */;
  (%689, %690)
}

def @func_15234() -> Tensor[(13, 15, 15), float32] {
  %691 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %692 = sin(%691) /* ty=Tensor[(13, 15, 15), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  sinh(%693) /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15355(%var_15324: Tensor[(448), float64], %var_15325: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(192), float64], Tensor[(448), float64], Tensor[(192), float64], Tensor[(2496), uint32]) {
  %694 = cast(meta[relay.Constant][57] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %695 = cast(%var_15324, dtype="float64") /* ty=Tensor[(448), float64] */;
  %696 = cast(%var_15325, dtype="float64") /* ty=Tensor[(192), float64] */;
  %697 = reshape(%694, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %698 = reshape(%695, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %699 = reshape(%696, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %700 = @func_12680(%697, %698, %699) /* ty=(Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) */;
  %701 = cast(meta[relay.Constant][58] /* ty=Tensor[(2496), float64] */, dtype="uint32") /* ty=Tensor[(2496), uint32] */;
  %702 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(2496), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %703 = cast(meta[relay.Constant][57] /* ty=Tensor[(2496), float64] */, dtype="uint32") /* ty=Tensor[(2496), uint32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %705 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %706 = %700.3;
  %707 = bitwise_or(%703, %704) /* ty=Tensor[(2496), uint32] */;
  (%705, %706, %var_15324, %var_15325, %707)
}

def @func_15204(%var_15158: Tensor[(10, 3, 4), int8], %var_15193: Tensor[(504), float32]) -> (Tensor[(10, 3, 4), int8], Tensor[(10, 3, 4), uint64], Tensor[(14, 6, 6), float32], Tensor[(504), float32]) {
  %708 = cast(%var_15158, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %709 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(10, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(meta[relay.Constant][59] /* ty=Tensor[(10, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %712 = cast(meta[relay.Constant][59] /* ty=Tensor[(10, 3, 4), int8] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %713 = erf(%712) /* ty=Tensor[(10, 3, 4), float32] */;
  %714 = cast(meta[relay.Constant][59] /* ty=Tensor[(10, 3, 4), int8] */, dtype="uint64") /* ty=Tensor[(10, 3, 4), uint64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint64") /* ty=Tensor[(10, 3, 4), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %718 = cast(%var_15193, dtype="float32") /* ty=Tensor[(504), float32] */;
  %719 = reshape(%718, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), float32] */;
  %720 = bitwise_xor(%710, %711) /* ty=Tensor[(10, 3, 4), int8] */;
  %721 = bitwise_and(%716, %717) /* ty=Tensor[(10, 3, 4), uint64] */;
  %722 = @func_4234(%719) /* ty=Tensor[(14, 6, 6), float32] */;
  (%720, %721, %722, %var_15193)
}

def @func_1437(%var_1328: Tensor[(14, 3, 11), float64], %var_1351: Tensor[(990, 1), float64], %var_1389: Tensor[(10, 9, 11), bool], %var_1428: Tensor[(14, 3, 11), float64]) -> (Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) {
  %723 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %724 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %725 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %726 = reshape(%724, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %727 = reshape(%725, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %728 = @func_203(%726, %727) /* ty=Tensor[(10, 9, 11), bool] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %730 = reshape(%723, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %731 = reshape(%729, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %732 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %733 = cast(%728, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %734 = reshape(%732, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %735 = reshape(%733, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %736 = cast(%var_1328, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %737 = sigmoid(%736) /* ty=Tensor[(14, 3, 11), float64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %739 = shape_of(%var_1328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_1328, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = less_equal(%740, %741) /* ty=Tensor[(14, 3, 11), bool] */;
  %743 = cast(%var_1328, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %747 = cast(%var_1389, dtype="int16") /* ty=Tensor[(10, 9, 11), int16] */;
  %748 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%728, dtype="int16") /* ty=Tensor[(10, 9, 11), int16] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %751 = cast(meta[relay.Constant][60] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %752 = reshape(%751, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %753 = @func_402(%752) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %754 = %753.0;
  %755 = cast(meta[relay.Constant][60] /* ty=Tensor[(96), float32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="int32") /* ty=Tensor[(?, 16, 6), int32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %759 = cast(%var_1428, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %760 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%737, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %763 = @func_203(%730, %731) /* ty=Tensor[(10, 9, 11), bool] */;
  %764 = @func_203(%734, %735) /* ty=Tensor[(10, 9, 11), bool] */;
  %765 = maximum(%745, %746) /* ty=Tensor[(14, 3, 11), float32] */;
  %766 = right_shift(%749, %750) /* ty=Tensor[(10, 9, 11), int16] */;
  %767 = maximum(%757, %758) /* ty=Tensor[(?, 16, 6), int32] */;
  %768 = floor_mod(%761, %762) /* ty=Tensor[(14, 3, 11), float64] */;
  (%var_1351, %763, %764, %765, %766, %767, %768)
}

def @func_15662(%var_15614: Tensor[(112), uint8], %var_15632: float64, %var_15633: Tensor[(5, 28), float32], %var_15637: Tensor[(1760), float64], %var_15640: Tensor[(650), float64], %var_15641: Tensor[(448), float64], %var_15657: Tensor[(13, 15, 15), float32]) -> (Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) {
  %769 = cast(meta[relay.Constant][61] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %770 = cast(meta[relay.Constant][62] /* ty=Tensor[(288, 6), uint16] */, dtype="uint16") /* ty=Tensor[(288, 6), uint16] */;
  %771 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %772 = reshape(%769, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
  %773 = reshape(%770, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
  %774 = reshape(%771, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %775 = @func_5325(%772, %773, %774) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
  %776 = cast(meta[relay.Constant][63] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %777 = reshape(%776, newshape=[48, 2]) /* ty=Tensor[(48, 2), float32] */;
  %778 = @func_15391(%777) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) */;
  %779 = cast(meta[relay.Constant][64] /* ty=Tensor[(288, 6), uint16] */, dtype="int16") /* ty=Tensor[(288, 6), int16] */;
  %780 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(288, 6), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %781 = cast(meta[relay.Constant][62] /* ty=Tensor[(288, 6), uint16] */, dtype="int16") /* ty=Tensor[(288, 6), int16] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %783 = cast(%var_15632, dtype="float64") /* ty=float64 */;
  %784 = cast(%var_15633, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %785 = reshape(%783, newshape=[]) /* ty=float64 */;
  %786 = reshape(%784, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %787 = @func_5002(%785, %786) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %788 = cast(%var_15637, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %789 = cast(meta[relay.Constant][65] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %790 = cast(meta[relay.Constant][63] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %791 = cast(meta[relay.Constant][66] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
  %792 = cast(%var_15640, dtype="float64") /* ty=Tensor[(650), float64] */;
  %793 = cast(%var_15641, dtype="float64") /* ty=Tensor[(448), float64] */;
  %794 = reshape(%788, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), float64] */;
  %795 = reshape(%789, newshape=[1, 1540]) /* ty=Tensor[(1, 1540), float32] */;
  %796 = reshape(%790, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %797 = reshape(%791, newshape=[676]) /* ty=Tensor[(676), float64] */;
  %798 = reshape(%792, newshape=[650]) /* ty=Tensor[(650), float64] */;
  %799 = reshape(%793, newshape=[8, 56]) /* ty=Tensor[(8, 56), float64] */;
  %800 = @func_4763(%794, %795, %796, %797, %798, %799) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) */;
  %801 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %803 = log10(%802) /* ty=Tensor[(13, 15, 15), float32] */;
  %804 = cast(%var_15657, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %808 = %775.1;
  %809 = %778.0;
  %810 = left_shift(%781, %782) /* ty=Tensor[(288, 6), int16] */;
  %811 = %787.2;
  %812 = %800.1;
  %813 = multiply(%806, %807) /* ty=Tensor[(13, 15, 15), float64] */;
  (%808, meta[relay.Constant][61] /* ty=Tensor[(12), uint16] */, %var_15614, %809, meta[relay.Constant][63] /* ty=Tensor[(96), float32] */, %810, %811, %var_15632, %var_15633, %812, %var_15637, meta[relay.Constant][65] /* ty=Tensor[(1540), float32] */, meta[relay.Constant][66] /* ty=Tensor[(676), float64] */, %var_15640, %var_15641, %813)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_15825(%var_15823: Tensor[(96), float32], %var_15824: Tensor[(5, 44), uint16]) -> (Tensor[(13, 15, 15), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(4, 5, 11), uint16], Tensor[(5, 44), uint16]) {
  @func_15821(%var_15823, %var_15824) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(4, 5, 11), uint16], Tensor[(5, 44), uint16]) */
}

def @func_9501(%var_9499: int16, %var_9500: Tensor[(15, 5, 11), int16]) -> Tensor[(15, 5, 11), int16] {
  %2 = fn (%var_9489: int16, %var_9490: Tensor[(15, 5, 11), int16]) -> Tensor[(15, 5, 11), int16] {
    %0 = cast(%var_9489, dtype="int16") /* ty=int16 */;
    %1 = cast(%var_9490, dtype="int16") /* ty=Tensor[(15, 5, 11), int16] */;
    bitwise_xor(%0, %1) /* ty=Tensor[(15, 5, 11), int16] */
  };
  %2(%var_9499, %var_9500) /* ty=Tensor[(15, 5, 11), int16] */
}

def @func_13313(%var_13280: uint64, %var_13281: Tensor[(6, 12, 5), uint64], %var_13291: Tensor[(48), float32], %var_13310: Tensor[(240), uint8], %var_13311: Tensor[(1200), uint8]) -> (Tensor[(6, 12, 5), uint64], Tensor[(48), float32], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(154, 10), float32], Tensor[(96), float32], Tensor[(2, 2, 12), bool], Tensor[(15, 16, 5), uint16], Tensor[(240), uint8], Tensor[(1200), uint8]) {
  %3 = cast(%var_13280, dtype="uint64") /* ty=uint64 */;
  %4 = cast(%var_13281, dtype="uint64") /* ty=Tensor[(6, 12, 5), uint64] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(154, 10), float32] */, dtype="float32") /* ty=Tensor[(154, 10), float32] */;
  %7 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %8 = reshape(%5, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %9 = reshape(%6, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %10 = reshape(%7, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %11 = @func_1475(%8, %9, %10) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %12 = cast(%var_13291, dtype="float32") /* ty=Tensor[(48), float32] */;
  %13 = reshape(%12, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %14 = @func_11238(%13) /* ty=(Tensor[(2, 2, 12), float32],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %17 = tan(%16) /* ty=Tensor[(2, 2, 12), float64] */;
  %18 = cast(%17, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %19 = cast(%var_13280, dtype="bool") /* ty=bool */;
  %20 = cast(%var_13310, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %21 = cast(%var_13311, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %22 = cast(%var_13311, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %23 = reshape(%20, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), uint8] */;
  %24 = reshape(%21, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), uint8] */;
  %25 = reshape(%22, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), uint8] */;
  %26 = @func_9219(%23, %24, %25) /* ty=(Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) */;
  %27 = maximum(%3, %4) /* ty=Tensor[(6, 12, 5), uint64] */;
  %28 = %11.0;
  %29 = logical_or(%18, %19) /* ty=Tensor[(2, 2, 12), bool] */;
  %30 = %26.0;
  (%27, %var_13291, %28, meta[relay.Constant][0] /* ty=Tensor[(140), float32] */, meta[relay.Constant][1] /* ty=Tensor[(154, 10), float32] */, meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, %29, %30, %var_13310, %var_13311)
}

def @func_575(%var_573: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) {
  @func_572(%var_573) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */
}

def @func_14800(%var_14797: Tensor[(9, 10, 13), int32], %var_14798: Tensor[(9, 10, 13), int32], %var_14799: Tensor[(650), float64]) -> (Tensor[(9, 10, 13), bool], Tensor[(448), float64], Tensor[(650), float64], Tensor[(448), float64]) {
  %42 = fn (%var_14762: Tensor[(9, 10, 13), int32], %var_14763: Tensor[(9, 10, 13), int32], %var_14789: Tensor[(650), float64]) -> (Tensor[(9, 10, 13), bool], Tensor[(448), float64], Tensor[(650), float64], Tensor[(448), float64]) {
    %31 = cast(%var_14763, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
    %32 = shape_of(%var_14762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%var_14762, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %35 = cast(%var_14789, dtype="float64") /* ty=Tensor[(650), float64] */;
    %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %37 = reshape(%35, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float64] */;
    %38 = reshape(%36, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %39 = @func_2587(%37, %38) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) */;
    %40 = less(%33, %34) /* ty=Tensor[(9, 10, 13), bool] */;
    %41 = %39.2;
    (%40, %41, %var_14789, meta[relay.Constant][3] /* ty=Tensor[(448), float64] */)
  };
  %42(%var_14797, %var_14798, %var_14799) /* ty=(Tensor[(9, 10, 13), bool], Tensor[(448), float64], Tensor[(650), float64], Tensor[(448), float64]) */
}

def @func_14708(%var_14693: int8, %var_14694: Tensor[(8, 16, 11), int8]) -> (Tensor[(8, 16, 11), bool],) {
  %43 = cast(%var_14693, dtype="bool") /* ty=bool */;
  %44 = cast(%var_14694, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %45 = equal(%43, %44) /* ty=Tensor[(8, 16, 11), bool] */;
  (%45,)
}

def @func_15984(%var_15981: Tensor[(140), float32], %var_15982: Tensor[(8, 220), float64], %var_15983: Tensor[(2, 224), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(676), float64], Tensor[(112), uint8], float64, Tensor[(140), float32], Tensor[(8, 220), float64], Tensor[(650), float64], Tensor[(2, 224), float64]) {
  %63 = fn (%var_15975: Tensor[(140), float32], %var_15976: Tensor[(8, 220), float64], %var_15978: Tensor[(2, 224), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(676), float64], Tensor[(112), uint8], float64, Tensor[(140), float32], Tensor[(8, 220), float64], Tensor[(650), float64], Tensor[(2, 224), float64]) {
    %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %47 = cast(0.028292f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %48 = cast(%var_15975, dtype="float32") /* ty=Tensor[(140), float32] */;
    %49 = cast(%var_15976, dtype="float64") /* ty=Tensor[(8, 220), float64] */;
    %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
    %51 = cast(%var_15978, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
    %52 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %54 = reshape(%46, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %55 = reshape(%47, newshape=[]) /* ty=float64 */;
    %56 = reshape(%48, newshape=[5, 28]) /* ty=Tensor[(5, 28), float32] */;
    %57 = reshape(%49, newshape=[1760]) /* ty=Tensor[(1760), float64] */;
    %58 = reshape(%50, newshape=[650]) /* ty=Tensor[(650), float64] */;
    %59 = reshape(%51, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %60 = reshape(%53, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), float32] */;
    %61 = @func_15662(%54, %55, %56, %57, %58, %59, %60) /* ty=(Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) */;
    %62 = %61.12;
    (%52, %62, meta[relay.Constant][4] /* ty=Tensor[(112), uint8] */, 0.028292f64 /* ty=float64 */, %var_15975, %var_15976, meta[relay.Constant][5] /* ty=Tensor[(650), float64] */, %var_15978)
  };
  %63(%var_15981, %var_15982, %var_15983) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(676), float64], Tensor[(112), uint8], float64, Tensor[(140), float32], Tensor[(8, 220), float64], Tensor[(650), float64], Tensor[(2, 224), float64]) */
}

def @func_5031(%var_5020: Tensor[(2, 6, 16), float64], %var_5021: Tensor[(2, 6, 16), float64]) -> Tensor[(2, 6, 16), float64] {
  %64 = cast(%var_5021, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %65 = shape_of(%var_5020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_5020, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%66, %67) /* ty=Tensor[(2, 6, 16), float64] */
}

def @func_13320(%var_13315: uint64, %var_13316: Tensor[(6, 12, 5), uint64], %var_13317: Tensor[(48), float32], %var_13318: Tensor[(240), uint8], %var_13319: Tensor[(1200), uint8]) -> (Tensor[(6, 12, 5), uint64], Tensor[(48), float32], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(154, 10), float32], Tensor[(96), float32], Tensor[(2, 2, 12), bool], Tensor[(15, 16, 5), uint16], Tensor[(240), uint8], Tensor[(1200), uint8]) {
  @func_13313(%var_13315, %var_13316, %var_13317, %var_13318, %var_13319) /* ty=(Tensor[(6, 12, 5), uint64], Tensor[(48), float32], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(154, 10), float32], Tensor[(96), float32], Tensor[(2, 2, 12), bool], Tensor[(15, 16, 5), uint16], Tensor[(240), uint8], Tensor[(1200), uint8]) */
}

def @func_402(%var_362: Tensor[(1, 16, 6), float32]) -> (Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) {
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 16, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %69 = shape_of(%var_362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_362, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %72 = cast(%var_362, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
  %73 = asin(%72) /* ty=Tensor[(1, 16, 6), float32] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
  %75 = cos(%74) /* ty=Tensor[(1, 16, 6), float32] */;
  %76 = cast(%75, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %77 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%73, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = equal(%78, %79) /* ty=Tensor[(?, 16, 6), bool] */;
  %81 = cast(%73, dtype="float64") /* ty=Tensor[(1, 16, 6), float64] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="float64") /* ty=Tensor[(?, 16, 6), float64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %85 = greater(%70, %71) /* ty=Tensor[(?, 16, 6), bool] */;
  %86 = divide(%83, %84) /* ty=Tensor[(?, 16, 6), float64] */;
  (%85, %86)
}

def @func_15594(%var_15593: Tensor[(105), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
  %92 = fn (%var_15584: Tensor[(105), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
    %87 = cast(%var_15584, dtype="float32") /* ty=Tensor[(105), float32] */;
    %88 = reshape(%87, newshape=[105]) /* ty=Tensor[(105), float32] */;
    %89 = @func_3604(%88) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
    %90 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
    %91 = %89.2;
    (%90, %91, %var_15584)
  };
  %92(%var_15593) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */
}

def @func_16016() -> (Tensor[(13, 15, 15), float32],) {
  @func_16014() /* ty=(Tensor[(13, 15, 15), float32],) */
}

def @func_9530(%var_9528: Tensor[(13, 14, 4), uint8]) -> (Tensor[(13, 14, 4), uint8], Tensor[(13, 14, 4), float32]) {
  @func_9527(%var_9528) /* ty=(Tensor[(13, 14, 4), uint8], Tensor[(13, 14, 4), float32]) */
}

def @func_11241(%var_11239: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32],) {
  @func_11238(%var_11239) /* ty=(Tensor[(2, 2, 12), float32],) */
}

def @func_12685(%var_12682: Tensor[(16, 12, 13), float64], %var_12683: Tensor[(448), float64], %var_12684: Tensor[(192), float64]) -> (Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) {
  @func_12680(%var_12682, %var_12683, %var_12684) /* ty=(Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) */
}

def @func_5005(%var_5003: float64, %var_5004: Tensor[(140), float32]) -> (Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) {
  %105 = fn (%var_4994: float64, %var_4996: Tensor[(140), float32]) -> (Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) {
    %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
    %94 = cast(%var_4994, dtype="float64") /* ty=float64 */;
    %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
    %96 = cast(%var_4996, dtype="float32") /* ty=Tensor[(140), float32] */;
    %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %98 = reshape(%94, newshape=[]) /* ty=float64 */;
    %99 = reshape(%95, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
    %100 = reshape(%96, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
    %101 = reshape(%97, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %102 = @func_4163(%98, %99, %100, %101) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
    %103 = sin(%93) /* ty=Tensor[(15, 3, 11), float32] */;
    %104 = %102.1;
    (%103, %104, %var_4994, meta[relay.Constant][8] /* ty=Tensor[(676), float64] */, %var_4996, meta[relay.Constant][9] /* ty=Tensor[(96), float32] */)
  };
  %105(%var_5003, %var_5004) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */
}

def @func_12286(%var_12284: Tensor[(13, 9, 7), int32], %var_12285: Tensor[(13, 9, 7), int32]) -> (Tensor[(13, 9, 7), bool],) {
  @func_12282(%var_12284, %var_12285) /* ty=(Tensor[(13, 9, 7), bool],) */
}

def @func_4236(%var_4235: Tensor[(14, 6, 6), float32]) -> Tensor[(14, 6, 6), float32] {
  %107 = fn (%var_4224: Tensor[(14, 6, 6), float32]) -> Tensor[(14, 6, 6), float32] {
    %106 = cast(%var_4224, dtype="float32") /* ty=Tensor[(14, 6, 6), float32] */;
    exp(%106) /* ty=Tensor[(14, 6, 6), float32] */
  };
  %107(%var_4235) /* ty=Tensor[(14, 6, 6), float32] */
}

def @func_1437(%var_1328: Tensor[(14, 3, 11), float64], %var_1351: Tensor[(990, 1), float64], %var_1389: Tensor[(10, 9, 11), bool], %var_1428: Tensor[(14, 3, 11), float64]) -> (Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) {
  %108 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %109 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %110 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %111 = reshape(%109, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %112 = reshape(%110, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %113 = @func_203(%111, %112) /* ty=Tensor[(10, 9, 11), bool] */;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %115 = reshape(%108, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %116 = reshape(%114, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %117 = cast(%var_1351, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
  %118 = cast(%113, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %119 = reshape(%117, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %120 = reshape(%118, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %121 = cast(%var_1328, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %122 = sigmoid(%121) /* ty=Tensor[(14, 3, 11), float64] */;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %124 = shape_of(%var_1328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_1328, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = less_equal(%125, %126) /* ty=Tensor[(14, 3, 11), bool] */;
  %128 = cast(%var_1328, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="float32") /* ty=Tensor[(14, 3, 11), float32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %132 = cast(%var_1389, dtype="int16") /* ty=Tensor[(10, 9, 11), int16] */;
  %133 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%113, dtype="int16") /* ty=Tensor[(10, 9, 11), int16] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %136 = cast(meta[relay.Constant][10] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %137 = reshape(%136, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %138 = @func_402(%137) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %139 = %138.0;
  %140 = cast(meta[relay.Constant][10] /* ty=Tensor[(96), float32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="int32") /* ty=Tensor[(?, 16, 6), int32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %144 = cast(%var_1428, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %145 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%122, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %148 = @func_203(%115, %116) /* ty=Tensor[(10, 9, 11), bool] */;
  %149 = @func_203(%119, %120) /* ty=Tensor[(10, 9, 11), bool] */;
  %150 = maximum(%130, %131) /* ty=Tensor[(14, 3, 11), float32] */;
  %151 = right_shift(%134, %135) /* ty=Tensor[(10, 9, 11), int16] */;
  %152 = maximum(%142, %143) /* ty=Tensor[(?, 16, 6), int32] */;
  %153 = floor_mod(%146, %147) /* ty=Tensor[(14, 3, 11), float64] */;
  (%var_1351, %148, %149, %150, %151, %152, %153)
}

def @func_4169(%var_4165: float64, %var_4166: Tensor[(4, 13, 13), float64], %var_4167: Tensor[(35, 4), float32], %var_4168: Tensor[(96), float32]) -> (Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
  @func_4163(%var_4165, %var_4166, %var_4167, %var_4168) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */
}

def @func_9388(%var_9383: Tensor[(4, 5, 11), uint16], %var_9384: Tensor[(4, 5, 11), uint16]) -> Tensor[(4, 5, 11), uint16] {
  %154 = cast(%var_9384, dtype="uint16") /* ty=Tensor[(4, 5, 11), uint16] */;
  %155 = shape_of(%var_9383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_9383, dtype="uint16") /* ty=Tensor[(4, 5, 11), uint16] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%156, %157) /* ty=Tensor[(4, 5, 11), uint16] */
}

def @func_4163(%var_4113: float64, %var_4114: Tensor[(4, 13, 13), float64], %var_4141: Tensor[(35, 4), float32], %var_4143: Tensor[(96), float32]) -> (Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) {
  %158 = cast(%var_4113, dtype="bool") /* ty=bool */;
  %159 = cast(%var_4114, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %160 = cast(%var_4141, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %161 = cast(meta[relay.Constant][11] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %162 = cast(%var_4143, dtype="float32") /* ty=Tensor[(96), float32] */;
  %163 = reshape(%160, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %164 = reshape(%161, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %165 = reshape(%162, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %166 = @func_1475(%163, %164, %165) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %167 = cast(%var_4141, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
  %168 = cast(%var_4113, dtype="bool") /* ty=bool */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %170 = reshape(%169, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %171 = @func_2926(%170) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %172 = not_equal(%158, %159) /* ty=Tensor[(4, 13, 13), bool] */;
  %173 = %166.1;
  %174 = less_equal(%167, %168) /* ty=Tensor[(35, 4), bool] */;
  %175 = %171.1;
  (%172, %173, meta[relay.Constant][11] /* ty=Tensor[(1540), float32] */, %var_4143, %174, %175, meta[relay.Constant][12] /* ty=Tensor[(105), float32] */)
}

def @func_1479(%var_1476: Tensor[(10, 14, 1), float32], %var_1477: Tensor[(10, 14, 11), float32], %var_1478: Tensor[(96), float32]) -> (Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
  %183 = fn (%var_1445: Tensor[(10, 14, 1), float32], %var_1446: Tensor[(10, 14, 11), float32], %var_1467: Tensor[(96), float32]) -> (Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
    %176 = cast(%var_1445, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
    %177 = cast(%var_1446, dtype="float32") /* ty=Tensor[(10, 14, 11), float32] */;
    %178 = cast(%var_1467, dtype="float32") /* ty=Tensor[(96), float32] */;
    %179 = reshape(%178, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
    %180 = @func_402(%179) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
    %181 = floor_divide(%176, %177) /* ty=Tensor[(10, 14, 11), float32] */;
    %182 = %180.0;
    (%181, %182, %var_1467)
  };
  %183(%var_1476, %var_1477, %var_1478) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */
}

def @func_3607(%var_3605: Tensor[(105), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) {
  @func_3604(%var_3605) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */
}

def @func_12554(%var_12550: Tensor[(7, 11, 13), int64], %var_12551: Tensor[(54), uint64], %var_12552: Tensor[(96), float32], %var_12553: Tensor[(990), float64]) -> (Tensor[(7, 11, 13), int64], Tensor[(96), float32], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(990), float64]) {
  @func_12548(%var_12550, %var_12551, %var_12552, %var_12553) /* ty=(Tensor[(7, 11, 13), int64], Tensor[(96), float32], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(990), float64]) */
}

def @func_12680(%var_12630: Tensor[(16, 12, 13), float64], %var_12645: Tensor[(448), float64], %var_12650: Tensor[(192), float64]) -> (Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) {
  %184 = cast(%var_12645, dtype="float64") /* ty=Tensor[(448), float64] */;
  %185 = reshape(%184, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %186 = @func_572(%185) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %187 = cast(%var_12650, dtype="float64") /* ty=Tensor[(192), float64] */;
  %188 = cast(%var_12650, dtype="float64") /* ty=Tensor[(192), float64] */;
  %189 = reshape(%187, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %190 = reshape(%188, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %191 = cast(%var_12630, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %192 = cos(%191) /* ty=Tensor[(16, 12, 13), float64] */;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %194 = log10(%193) /* ty=Tensor[(16, 12, 13), float64] */;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %196 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%192, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %200 = cast(meta[relay.Constant][14] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %201 = cast(meta[relay.Constant][15] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %202 = reshape(%199, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %203 = reshape(%200, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %204 = reshape(%201, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %205 = @func_1475(%202, %203, %204) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %206 = %186.2;
  %207 = @func_5031(%189, %190) /* ty=Tensor[(2, 6, 16), float64] */;
  %208 = equal(%197, %198) /* ty=Tensor[(16, 12, 13), bool] */;
  %209 = %205.0;
  (%206, %var_12645, %207, %var_12650, %208, %209, meta[relay.Constant][13] /* ty=Tensor[(140), float32] */, meta[relay.Constant][14] /* ty=Tensor[(1540), float32] */, meta[relay.Constant][15] /* ty=Tensor[(96), float32] */)
}

def @main(%var_16161: Tensor[(224), float32]) -> (Tensor[(105), float32], Tensor[(224), float32], Tensor[(105), float32], Tensor[(96), float32], Tensor[(?, 3, 2), float32]) {
  %210 = cast(%var_16161, dtype="float32") /* ty=Tensor[(224), float32] */;
  %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %212 = cast(meta[relay.Constant][17] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %213 = reshape(%210, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %214 = reshape(%211, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %215 = reshape(%212, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %216 = @func_3689(%213, %214, %215) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %218 = exp(%217) /* ty=Tensor[(1, 3, 2), float64] */;
  %219 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %223 = floor_divide(%221, %222) /* ty=Tensor[(?, 3, 2), float64] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(?, 3, 2), float32] */;
  %225 = %216.2;
  %226 = acosh(%224) /* ty=Tensor[(?, 3, 2), float32] */;
  (%225, %var_16161, meta[relay.Constant][16] /* ty=Tensor[(105), float32] */, meta[relay.Constant][17] /* ty=Tensor[(96), float32] */, %226)
}

def @func_2587(%var_2576: Tensor[(10, 5, 13), float64], %var_2581: Tensor[(448), float64]) -> (Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) {
  %227 = cast(%var_2576, dtype="float64") /* ty=Tensor[(10, 5, 13), float64] */;
  %228 = cast(%var_2581, dtype="float64") /* ty=Tensor[(448), float64] */;
  %229 = reshape(%228, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %230 = @func_572(%229) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %231 = asin(%227) /* ty=Tensor[(10, 5, 13), float64] */;
  %232 = %230.1;
  (%231, %232, %var_2581)
}

def @func_5735(%var_5733: Tensor[(2, 16, 14), int8], %var_5734: Tensor[(2, 16, 14), int8]) -> Tensor[(2, 16, 14), bool] {
  @func_5731(%var_5733, %var_5734) /* ty=Tensor[(2, 16, 14), bool] */
}

def @func_7092(%var_7090: Tensor[(8, 2, 7), float64], %var_7091: Tensor[(676), float64]) -> (Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) {
  %245 = fn (%var_7076: Tensor[(8, 2, 7), float64], %var_7085: Tensor[(676), float64]) -> (Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) {
    %233 = cast(%var_7076, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
    %234 = cast(-4.76929f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %235 = cast(%var_7085, dtype="float64") /* ty=Tensor[(676), float64] */;
    %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %237 = cast(meta[relay.Constant][20] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %238 = reshape(%234, newshape=[]) /* ty=float64 */;
    %239 = reshape(%235, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
    %240 = reshape(%236, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
    %241 = reshape(%237, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %242 = @func_4163(%238, %239, %240, %241) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
    %243 = acos(%233) /* ty=Tensor[(8, 2, 7), float64] */;
    %244 = %242.1;
    (%243, %244, -4.76929f64 /* ty=float64 */, %var_7085, meta[relay.Constant][19] /* ty=Tensor[(35, 4), float32] */, meta[relay.Constant][20] /* ty=Tensor[(96), float32] */)
  };
  %245(%var_7090, %var_7091) /* ty=(Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) */
}

def @func_12592(%var_12591: Tensor[(11, 7, 3), float64]) -> (Tensor[(11, 7, 3), float64], Tensor[(?, 16, 6), float64], Tensor[(96), float32], Tensor[(15, 7, ?), int32]) {
  %261 = fn (%var_12563: Tensor[(11, 7, 3), float64]) -> (Tensor[(11, 7, 3), float64], Tensor[(?, 16, 6), float64], Tensor[(96), float32], Tensor[(15, 7, ?), int32]) {
    %246 = cast(%var_12563, dtype="float64") /* ty=Tensor[(11, 7, 3), float64] */;
    %247 = cast(meta[relay.Constant][21] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %248 = reshape(%247, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
    %249 = @func_402(%248) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
    %250 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 105), float32] */, dtype="float32") /* ty=Tensor[(1, 105), float32] */;
    %251 = reshape(%250, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
    %252 = @func_2926(%251) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
    %253 = %252.1;
    %254 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 105), float32] */, dtype="int32") /* ty=Tensor[(1, 105), int32] */;
    %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %256 = cast(%253, dtype="int32") /* ty=Tensor[(15, 7, 1), int32] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %258 = log10(%246) /* ty=Tensor[(11, 7, 3), float64] */;
    %259 = %249.1;
    %260 = maximum(%256, %257) /* ty=Tensor[(15, 7, ?), int32] */;
    (%258, %259, meta[relay.Constant][21] /* ty=Tensor[(96), float32] */, %260)
  };
  %261(%var_12591) /* ty=(Tensor[(11, 7, 3), float64], Tensor[(?, 16, 6), float64], Tensor[(96), float32], Tensor[(15, 7, ?), int32]) */
}

def @func_15394(%var_15392: Tensor[(48, 2), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) {
  @func_15391(%var_15392) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) */
}

def @func_15235() -> Tensor[(13, 15, 15), float32] {
  %265 = fn () -> Tensor[(13, 15, 15), float32] {
    %262 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %263 = sin(%262) /* ty=Tensor[(13, 15, 15), float32] */;
    %264 = cast(%263, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    sinh(%264) /* ty=Tensor[(13, 15, 15), float32] */
  };
  %265() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_9224(%var_9221: Tensor[(15, 16, 1), uint8], %var_9222: Tensor[(15, 16, 5), uint8], %var_9223: Tensor[(15, 16, 5), uint8]) -> (Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) {
  @func_9219(%var_9221, %var_9222, %var_9223) /* ty=(Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) */
}

def @func_15670(%var_15663: Tensor[(112), uint8], %var_15664: float64, %var_15665: Tensor[(5, 28), float32], %var_15666: Tensor[(1760), float64], %var_15667: Tensor[(650), float64], %var_15668: Tensor[(448), float64], %var_15669: Tensor[(13, 15, 15), float32]) -> (Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) {
  %311 = fn (%var_15614: Tensor[(112), uint8], %var_15632: float64, %var_15633: Tensor[(5, 28), float32], %var_15637: Tensor[(1760), float64], %var_15640: Tensor[(650), float64], %var_15641: Tensor[(448), float64], %var_15657: Tensor[(13, 15, 15), float32]) -> (Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) {
    %266 = cast(meta[relay.Constant][24] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %267 = cast(meta[relay.Constant][25] /* ty=Tensor[(288, 6), uint16] */, dtype="uint16") /* ty=Tensor[(288, 6), uint16] */;
    %268 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %269 = reshape(%266, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
    %270 = reshape(%267, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
    %271 = reshape(%268, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %272 = @func_5325(%269, %270, %271) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
    %273 = cast(meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %274 = reshape(%273, newshape=[48, 2]) /* ty=Tensor[(48, 2), float32] */;
    %275 = @func_15391(%274) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) */;
    %276 = cast(meta[relay.Constant][27] /* ty=Tensor[(288, 6), uint16] */, dtype="int16") /* ty=Tensor[(288, 6), int16] */;
    %277 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(288, 6), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %278 = cast(meta[relay.Constant][25] /* ty=Tensor[(288, 6), uint16] */, dtype="int16") /* ty=Tensor[(288, 6), int16] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %280 = cast(%var_15632, dtype="float64") /* ty=float64 */;
    %281 = cast(%var_15633, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
    %282 = reshape(%280, newshape=[]) /* ty=float64 */;
    %283 = reshape(%281, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %284 = @func_5002(%282, %283) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
    %285 = cast(%var_15637, dtype="float64") /* ty=Tensor[(1760), float64] */;
    %286 = cast(meta[relay.Constant][28] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %287 = cast(meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %288 = cast(meta[relay.Constant][29] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
    %289 = cast(%var_15640, dtype="float64") /* ty=Tensor[(650), float64] */;
    %290 = cast(%var_15641, dtype="float64") /* ty=Tensor[(448), float64] */;
    %291 = reshape(%285, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), float64] */;
    %292 = reshape(%286, newshape=[1, 1540]) /* ty=Tensor[(1, 1540), float32] */;
    %293 = reshape(%287, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %294 = reshape(%288, newshape=[676]) /* ty=Tensor[(676), float64] */;
    %295 = reshape(%289, newshape=[650]) /* ty=Tensor[(650), float64] */;
    %296 = reshape(%290, newshape=[8, 56]) /* ty=Tensor[(8, 56), float64] */;
    %297 = @func_4763(%291, %292, %293, %294, %295, %296) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) */;
    %298 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
    %299 = cast(%298, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %300 = log10(%299) /* ty=Tensor[(13, 15, 15), float32] */;
    %301 = cast(%var_15657, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
    %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%300, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %305 = %272.1;
    %306 = %275.0;
    %307 = left_shift(%278, %279) /* ty=Tensor[(288, 6), int16] */;
    %308 = %284.2;
    %309 = %297.1;
    %310 = multiply(%303, %304) /* ty=Tensor[(13, 15, 15), float64] */;
    (%305, meta[relay.Constant][24] /* ty=Tensor[(12), uint16] */, %var_15614, %306, meta[relay.Constant][26] /* ty=Tensor[(96), float32] */, %307, %308, %var_15632, %var_15633, %309, %var_15637, meta[relay.Constant][28] /* ty=Tensor[(1540), float32] */, meta[relay.Constant][29] /* ty=Tensor[(676), float64] */, %var_15640, %var_15641, %310)
  };
  %311(%var_15663, %var_15664, %var_15665, %var_15666, %var_15667, %var_15668, %var_15669) /* ty=(Tensor[(2, 4, 14), uint8], Tensor[(12), uint16], Tensor[(112), uint8], Tensor[(13, 15, 15), float32], Tensor[(96), float32], Tensor[(288, 6), int16], float64, float64, Tensor[(5, 28), float32], Tensor[(140), float32], Tensor[(1760), float64], Tensor[(1540), float32], Tensor[(676), float64], Tensor[(650), float64], Tensor[(448), float64], Tensor[(13, 15, 15), float64]) */
}

def @func_15359(%var_15357: Tensor[(448), float64], %var_15358: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(192), float64], Tensor[(448), float64], Tensor[(192), float64], Tensor[(2496), uint32]) {
  @func_15355(%var_15357, %var_15358) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(192), float64], Tensor[(448), float64], Tensor[(192), float64], Tensor[(2496), uint32]) */
}

def @func_7595(%var_7566: Tensor[(1, 12, 10), float32], %var_7572: Tensor[(96), float32]) -> (Tensor[(1, 12, 10), float32], Tensor[(9, 3, 2), uint64], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(330, 3), float64], Tensor[(13, 15, 6), float64], Tensor[(10, 117), float64], Tensor[(14, 6, 6), float32], Tensor[(504), float32], Tensor[(?, 16, 6), bool]) {
  %312 = cast(%var_7566, dtype="float32") /* ty=Tensor[(1, 12, 10), float32] */;
  %313 = cast(meta[relay.Constant][30] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %314 = cast(%var_7572, dtype="float32") /* ty=Tensor[(96), float32] */;
  %315 = cast(meta[relay.Constant][31] /* ty=Tensor[(330, 3), float64] */, dtype="float64") /* ty=Tensor[(330, 3), float64] */;
  %316 = reshape(%313, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %317 = reshape(%314, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %318 = reshape(%315, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %319 = @func_958(%316, %317, %318) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %320 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 117), float64] */, dtype="float64") /* ty=Tensor[(10, 117), float64] */;
  %321 = reshape(%320, newshape=[13, 15, 6]) /* ty=Tensor[(13, 15, 6), float64] */;
  %322 = @func_6373(%321) /* ty=(Tensor[(13, 15, 6), float64],) */;
  %323 = cast(meta[relay.Constant][33] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %324 = reshape(%323, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), float32] */;
  %325 = cast(%var_7572, dtype="float32") /* ty=Tensor[(96), float32] */;
  %326 = reshape(%325, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %327 = @func_402(%326) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %328 = sqrt(%312) /* ty=Tensor[(1, 12, 10), float32] */;
  %329 = %319.0;
  %330 = %322.0;
  %331 = @func_4234(%324) /* ty=Tensor[(14, 6, 6), float32] */;
  %332 = %327.0;
  (%328, %329, meta[relay.Constant][30] /* ty=Tensor[(54), uint64] */, %var_7572, meta[relay.Constant][31] /* ty=Tensor[(330, 3), float64] */, %330, meta[relay.Constant][32] /* ty=Tensor[(10, 117), float64] */, %331, meta[relay.Constant][33] /* ty=Tensor[(504), float32] */, %332)
}

def @func_15948(%var_15909: Tensor[(13, 15, 15), float32]) -> (Tensor[(13, 15, 15), bool], Tensor[(676), float64], float64, Tensor[(140), float32]) {
  %333 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %334 = cast(%var_15909, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = cast(8.70004f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %339 = cast(meta[relay.Constant][34] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %340 = reshape(%338, newshape=[]) /* ty=float64 */;
  %341 = reshape(%339, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %342 = @func_5002(%340, %341) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %343 = less(%336, %337) /* ty=Tensor[(13, 15, 15), bool] */;
  %344 = %342.3;
  (%343, %344, 8.70004f64 /* ty=float64 */, meta[relay.Constant][34] /* ty=Tensor[(140), float32] */)
}

def @func_7599(%var_7597: Tensor[(1, 12, 10), float32], %var_7598: Tensor[(96), float32]) -> (Tensor[(1, 12, 10), float32], Tensor[(9, 3, 2), uint64], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(330, 3), float64], Tensor[(13, 15, 6), float64], Tensor[(10, 117), float64], Tensor[(14, 6, 6), float32], Tensor[(504), float32], Tensor[(?, 16, 6), bool]) {
  @func_7595(%var_7597, %var_7598) /* ty=(Tensor[(1, 12, 10), float32], Tensor[(9, 3, 2), uint64], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(330, 3), float64], Tensor[(13, 15, 6), float64], Tensor[(10, 117), float64], Tensor[(14, 6, 6), float32], Tensor[(504), float32], Tensor[(?, 16, 6), bool]) */
}

def @func_12548(%var_12534: Tensor[(7, 11, 13), int64], %var_12544: Tensor[(54), uint64], %var_12545: Tensor[(96), float32], %var_12546: Tensor[(990), float64]) -> (Tensor[(7, 11, 13), int64], Tensor[(96), float32], Tensor[(54), uint64], Tensor[(96), float32], Tensor[(990), float64]) {
  %345 = cast(%var_12534, dtype="int64") /* ty=Tensor[(7, 11, 13), int64] */;
  %346 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 11, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 11, 13), int64] */, dtype="int64") /* ty=Tensor[(7, 11, 13), int64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %349 = cast(%var_12544, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %350 = cast(%var_12545, dtype="float32") /* ty=Tensor[(96), float32] */;
  %351 = cast(%var_12546, dtype="float64") /* ty=Tensor[(990), float64] */;
  %352 = reshape(%349, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %353 = reshape(%350, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %354 = reshape(%351, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %355 = @func_958(%352, %353, %354) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %356 = bitwise_xor(%347, %348) /* ty=Tensor[(7, 11, 13), int64] */;
  %357 = %355.1;
  (%356, %357, %var_12544, %var_12545, %var_12546)
}

def @func_3684(%var_3664: Tensor[(14, 1, 16), float32], %var_3672: Tensor[(105), float32], %var_3681: Tensor[(96), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
  %358 = cast(%var_3664, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %359 = cast(%var_3672, dtype="float32") /* ty=Tensor[(105), float32] */;
  %360 = reshape(%359, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %361 = @func_3604(%360) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %362 = cast(%var_3681, dtype="float32") /* ty=Tensor[(96), float32] */;
  %363 = reshape(%362, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %364 = @func_402(%363) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %365 = sigmoid(%358) /* ty=Tensor[(14, 1, 16), float32] */;
  %366 = %361.0;
  %367 = %364.0;
  (%365, %366, %var_3672, %367, %var_3681)
}

def @func_15571(%var_15569: Tensor[(48, 2), float32], %var_15570: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), bool], Tensor[(48, 2), uint8], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8]) {
  @func_15567(%var_15569, %var_15570) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), bool], Tensor[(48, 2), uint8], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8]) */
}

def @func_203(%var_196: Tensor[(10, 9, 11), float64], %var_197: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), bool] {
  %368 = cast(%var_197, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %369 = shape_of(%var_196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_196, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%370, %371) /* ty=Tensor[(10, 9, 11), bool] */
}

def @func_5731(%var_5725: Tensor[(2, 16, 14), int8], %var_5726: Tensor[(2, 16, 14), int8]) -> Tensor[(2, 16, 14), bool] {
  %372 = cast(%var_5726, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %373 = shape_of(%var_5725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_5725, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%374, %375) /* ty=Tensor[(2, 16, 14), bool] */
}

def @func_15355(%var_15324: Tensor[(448), float64], %var_15325: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(192), float64], Tensor[(448), float64], Tensor[(192), float64], Tensor[(2496), uint32]) {
  %376 = cast(meta[relay.Constant][36] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %377 = cast(%var_15324, dtype="float64") /* ty=Tensor[(448), float64] */;
  %378 = cast(%var_15325, dtype="float64") /* ty=Tensor[(192), float64] */;
  %379 = reshape(%376, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %380 = reshape(%377, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %381 = reshape(%378, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %382 = @func_12680(%379, %380, %381) /* ty=(Tensor[(990), float64], Tensor[(448), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(16, 12, 13), bool], Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1540), float32], Tensor[(96), float32]) */;
  %383 = cast(meta[relay.Constant][37] /* ty=Tensor[(2496), float64] */, dtype="uint32") /* ty=Tensor[(2496), uint32] */;
  %384 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(2496), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(meta[relay.Constant][36] /* ty=Tensor[(2496), float64] */, dtype="uint32") /* ty=Tensor[(2496), uint32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %387 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %388 = %382.3;
  %389 = bitwise_or(%385, %386) /* ty=Tensor[(2496), uint32] */;
  (%387, %388, %var_15324, %var_15325, %389)
}

def @func_12282(%var_12262: Tensor[(13, 9, 7), int32], %var_12263: Tensor[(13, 9, 7), int32]) -> (Tensor[(13, 9, 7), bool],) {
  %390 = cast(%var_12263, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %391 = shape_of(%var_12262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_12262, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = not_equal(%392, %393) /* ty=Tensor[(13, 9, 7), bool] */;
  (%394,)
}

def @func_13761(%var_13755: Tensor[(5, 1, 7), uint32], %var_13756: Tensor[(5, 16, 7), uint32], %var_13757: Tensor[(1, 96), float32], %var_13758: Tensor[(12), uint16], %var_13759: Tensor[(676), float64], %var_13760: Tensor[(676), float64]) -> (Tensor[(5, 16, 7), bool], Tensor[(528), float64], Tensor[(2016), int32], Tensor[(1, 96), float32], Tensor[(12), uint16], Tensor[(676), bool], Tensor[(84, 24), float32]) {
  %422 = fn (%var_13697: Tensor[(5, 1, 7), uint32], %var_13698: Tensor[(5, 16, 7), uint32], %var_13705: Tensor[(1, 96), float32], %var_13706: Tensor[(12), uint16], %var_13707: Tensor[(676), float64], %var_13722: Tensor[(676), float64]) -> (Tensor[(5, 16, 7), bool], Tensor[(528), float64], Tensor[(2016), int32], Tensor[(1, 96), float32], Tensor[(12), uint16], Tensor[(676), bool], Tensor[(84, 24), float32]) {
    %395 = cast(%var_13697, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %396 = cast(%var_13698, dtype="bool") /* ty=Tensor[(5, 16, 7), bool] */;
    %397 = cast(%var_13722, dtype="uint8") /* ty=Tensor[(676), uint8] */;
    %398 = shape_of(%var_13707, dtype="int32") /* ty=Tensor[(1), int32] */;
    %399 = cast(%var_13707, dtype="uint8") /* ty=Tensor[(676), uint8] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %401 = logical_xor(%399, %400) /* ty=Tensor[(676), uint8] */;
    %402 = cast(%var_13722, dtype="bool") /* ty=Tensor[(676), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(1), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(676), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?), bool] */;
    %406 = cast(meta[relay.Constant][38] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
    %407 = cast(meta[relay.Constant][39] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %408 = cast(%var_13705, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
    %409 = cast(%var_13706, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %410 = cast(%var_13707, dtype="float64") /* ty=Tensor[(676), float64] */;
    %411 = reshape(%406, newshape=[4, 12, 11]) /* ty=Tensor[(4, 12, 11), float64] */;
    %412 = reshape(%407, newshape=[84, 24]) /* ty=Tensor[(84, 24), int32] */;
    %413 = reshape(%408, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %414 = reshape(%409, newshape=[3, 4]) /* ty=Tensor[(3, 4), uint16] */;
    %415 = reshape(%410, newshape=[676]) /* ty=Tensor[(676), float64] */;
    %416 = @func_13200(%411, %412, %413, %414, %415) /* ty=(Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) */;
    %417 = %416.1;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(84, 24), float32] */;
    %419 = equal(%395, %396) /* ty=Tensor[(5, 16, 7), bool] */;
    %420 = greater(%404, %405) /* ty=Tensor[(676), bool] */;
    %421 = log(%418) /* ty=Tensor[(84, 24), float32] */;
    (%419, meta[relay.Constant][38] /* ty=Tensor[(528), float64] */, meta[relay.Constant][39] /* ty=Tensor[(2016), int32] */, %var_13705, %var_13706, %420, %421)
  };
  %422(%var_13755, %var_13756, %var_13757, %var_13758, %var_13759, %var_13760) /* ty=(Tensor[(5, 16, 7), bool], Tensor[(528), float64], Tensor[(2016), int32], Tensor[(1, 96), float32], Tensor[(12), uint16], Tensor[(676), bool], Tensor[(84, 24), float32]) */
}

def @func_11354(%var_11317: Tensor[(2, 12, 15), uint64], %var_11318: Tensor[(2, 12, 15), uint64], %var_11343: Tensor[(70, 2), float32]) -> (Tensor[(2, 12, 15), bool], float64, float64, Tensor[(?, 15, 10), uint8], Tensor[(150), float32], Tensor[(70, 2), float64]) {
  %423 = cast(%var_11318, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %424 = shape_of(%var_11317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%var_11317, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(-7.41207f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %428 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %429 = reshape(%427, newshape=[]) /* ty=float64 */;
  %430 = reshape(%428, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %431 = @func_5002(%429, %430) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %432 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %433 = reshape(%432, newshape=[1, 15, 10]) /* ty=Tensor[(1, 15, 10), float32] */;
  %434 = @func_8208(%433) /* ty=(Tensor[(?, 15, 10), uint8],) */;
  %435 = cast(%var_11343, dtype="uint32") /* ty=Tensor[(70, 2), uint32] */;
  %436 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(70, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %437 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 2), float32] */, dtype="uint32") /* ty=Tensor[(70, 2), uint32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %439 = bitwise_or(%437, %438) /* ty=Tensor[(70, 2), uint32] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(70, 2), float64] */;
  %441 = equal(%425, %426) /* ty=Tensor[(2, 12, 15), bool] */;
  %442 = %431.2;
  %443 = %434.0;
  %444 = erf(%440) /* ty=Tensor[(70, 2), float64] */;
  (%441, %442, -7.41207f64 /* ty=float64 */, %443, meta[relay.Constant][41] /* ty=Tensor[(150), float32] */, %444)
}

def @func_6273(%var_6271: Tensor[(16, 14, 6), float64], %var_6272: Tensor[(1728), uint16]) -> (Tensor[(16, 14, 6), float64], Tensor[(5, 198), float64], Tensor[(12), uint16], Tensor[(1728), uint16], Tensor[(112), uint8]) {
  %455 = fn (%var_6239: Tensor[(16, 14, 6), float64], %var_6256: Tensor[(1728), uint16]) -> (Tensor[(16, 14, 6), float64], Tensor[(5, 198), float64], Tensor[(12), uint16], Tensor[(1728), uint16], Tensor[(112), uint8]) {
    %445 = cast(%var_6239, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
    %446 = cast(meta[relay.Constant][42] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %447 = cast(%var_6256, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
    %448 = cast(meta[relay.Constant][43] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %449 = reshape(%446, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
    %450 = reshape(%447, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
    %451 = reshape(%448, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %452 = @func_5325(%449, %450, %451) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
    %453 = log(%445) /* ty=Tensor[(16, 14, 6), float64] */;
    %454 = %452.5;
    (%453, %454, meta[relay.Constant][42] /* ty=Tensor[(12), uint16] */, %var_6256, meta[relay.Constant][43] /* ty=Tensor[(112), uint8] */)
  };
  %455(%var_6271, %var_6272) /* ty=(Tensor[(16, 14, 6), float64], Tensor[(5, 198), float64], Tensor[(12), uint16], Tensor[(1728), uint16], Tensor[(112), uint8]) */
}

def @func_2926(%var_2916: Tensor[(15, 7, 1), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) {
  %456 = cast(6.33801f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %457 = cast(%var_2916, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %458 = cast(%var_2916, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %459 = floor_divide(%456, %457) /* ty=Tensor[(15, 7, 1), float32] */;
  %460 = rsqrt(%458) /* ty=Tensor[(15, 7, 1), float32] */;
  (%459, %460)
}

def @func_15748() -> Tensor[(13, 15, 15), float32] {
  @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15789() -> (Tensor[(13, 15, 15), float32],) {
  %462 = fn () -> (Tensor[(13, 15, 15), float32],) {
    %461 = @func_15748() /* ty=Tensor[(13, 15, 15), float32] */;
    (%461,)
  };
  %462() /* ty=(Tensor[(13, 15, 15), float32],) */
}

def @func_207(%var_205: Tensor[(10, 9, 11), float64], %var_206: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), bool] {
  @func_203(%var_205, %var_206) /* ty=Tensor[(10, 9, 11), bool] */
}

def @func_15427() -> Tensor[(13, 15, 15), float32] {
  %463 = fn () -> Tensor[(13, 15, 15), float32] {
    @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
  };
  %463() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15821(%var_15807: Tensor[(96), float32], %var_15819: Tensor[(5, 44), uint16]) -> (Tensor[(13, 15, 15), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(4, 5, 11), uint16], Tensor[(5, 44), uint16]) {
  %464 = cast(%var_15807, dtype="float32") /* ty=Tensor[(96), float32] */;
  %465 = reshape(%464, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %466 = @func_402(%465) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %467 = cast(meta[relay.Constant][44] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %468 = cast(meta[relay.Constant][44] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %469 = reshape(%467, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %470 = reshape(%468, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %471 = cast(meta[relay.Constant][45] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %472 = reshape(%471, newshape=[105]) /* ty=Tensor[(105), float32] */;
  %473 = @func_3604(%472) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
  %474 = cast(%var_15819, dtype="uint16") /* ty=Tensor[(5, 44), uint16] */;
  %475 = cast(%var_15819, dtype="uint16") /* ty=Tensor[(5, 44), uint16] */;
  %476 = reshape(%474, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), uint16] */;
  %477 = reshape(%475, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), uint16] */;
  %478 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
  %479 = %466.0;
  %480 = @func_5031(%469, %470) /* ty=Tensor[(2, 6, 16), float64] */;
  %481 = %473.0;
  %482 = @func_9388(%476, %477) /* ty=Tensor[(4, 5, 11), uint16] */;
  (%478, %479, %var_15807, %480, meta[relay.Constant][44] /* ty=Tensor[(192), float64] */, %481, meta[relay.Constant][45] /* ty=Tensor[(105), float32] */, %482, %var_15819)
}

def @func_15269(%var_15264: Tensor[(819), int32]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %483 = cast(%var_15264, dtype="int32") /* ty=Tensor[(819), int32] */;
  %484 = cast(%var_15264, dtype="int32") /* ty=Tensor[(819), int32] */;
  %485 = reshape(%483, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %486 = reshape(%484, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %487 = @func_12282(%485, %486) /* ty=(Tensor[(13, 9, 7), bool],) */;
  %488 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %489 = %487.0;
  (%488, %489, %var_15264)
}

def @func_4771(%var_4765: Tensor[(16, 11, 10), float64], %var_4766: Tensor[(1, 1540), float32], %var_4767: Tensor[(96), float32], %var_4768: Tensor[(676), float64], %var_4769: Tensor[(650), float64], %var_4770: Tensor[(8, 56), float64]) -> (Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) {
  @func_4763(%var_4765, %var_4766, %var_4767, %var_4768, %var_4769, %var_4770) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) */
}

def @func_11238(%var_11234: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), float32],) {
  %490 = cast(%var_11234, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
  %491 = cosh(%490) /* ty=Tensor[(2, 2, 12), float32] */;
  (%491,)
}

def @func_15750() -> Tensor[(13, 15, 15), float32] {
  @func_15748() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_15684(%var_15672: Tensor[(12, 2, 9), bool], %var_15673: Tensor[(12, 2, 9), bool]) -> (Tensor[(12, 2, 9), bool],) {
  %492 = cast(%var_15673, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %493 = shape_of(%var_15672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_15672, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = logical_or(%494, %495) /* ty=Tensor[(12, 2, 9), bool] */;
  (%496,)
}

def @func_2929(%var_2927: Tensor[(15, 7, 1), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) {
  @func_2926(%var_2927) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */
}

def @func_13207(%var_13202: Tensor[(4, 12, 11), float64], %var_13203: Tensor[(84, 24), int32], %var_13204: Tensor[(96), float32], %var_13205: Tensor[(3, 4), uint16], %var_13206: Tensor[(676), float64]) -> (Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) {
  @func_13200(%var_13202, %var_13203, %var_13204, %var_13205, %var_13206) /* ty=(Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) */
}

def @func_2591(%var_2589: Tensor[(10, 5, 13), float64], %var_2590: Tensor[(448), float64]) -> (Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) {
  @func_2587(%var_2589, %var_2590) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) */
}

def @func_15204(%var_15158: Tensor[(10, 3, 4), int8], %var_15193: Tensor[(504), float32]) -> (Tensor[(10, 3, 4), int8], Tensor[(10, 3, 4), uint64], Tensor[(14, 6, 6), float32], Tensor[(504), float32]) {
  %497 = cast(%var_15158, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %498 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 3, 4), int8] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %501 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 4), int8] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %502 = erf(%501) /* ty=Tensor[(10, 3, 4), float32] */;
  %503 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 4), int8] */, dtype="uint64") /* ty=Tensor[(10, 3, 4), uint64] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="uint64") /* ty=Tensor[(10, 3, 4), uint64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %507 = cast(%var_15193, dtype="float32") /* ty=Tensor[(504), float32] */;
  %508 = reshape(%507, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), float32] */;
  %509 = bitwise_xor(%499, %500) /* ty=Tensor[(10, 3, 4), int8] */;
  %510 = bitwise_and(%505, %506) /* ty=Tensor[(10, 3, 4), uint64] */;
  %511 = @func_4234(%508) /* ty=Tensor[(14, 6, 6), float32] */;
  (%509, %510, %511, %var_15193)
}

def @func_8421(%var_8418: Tensor[(10, 15, 6), float64], %var_8419: float64, %var_8420: Tensor[(231, 2), float64]) -> (Tensor[(10, 15, 6), float64], Tensor[(14, 11, 13), float32], Tensor[(1, 105), float32], Tensor[(9, 13, 14), uint32], Tensor[(1638), uint32], float64, Tensor[(?, 16, 6), int32], Tensor[(990, 1), float64], Tensor[(231, 2), bool]) {
  %541 = fn (%var_8368: Tensor[(10, 15, 6), float64], %var_8381: float64, %var_8404: Tensor[(231, 2), float64]) -> (Tensor[(10, 15, 6), float64], Tensor[(14, 11, 13), float32], Tensor[(1, 105), float32], Tensor[(9, 13, 14), uint32], Tensor[(1638), uint32], float64, Tensor[(?, 16, 6), int32], Tensor[(990, 1), float64], Tensor[(231, 2), bool]) {
    %512 = cast(%var_8368, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
    %513 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 105), float32] */, dtype="float32") /* ty=Tensor[(1, 105), float32] */;
    %514 = reshape(%513, newshape=[105]) /* ty=Tensor[(105), float32] */;
    %515 = @func_3604(%514) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) */;
    %516 = cast(meta[relay.Constant][48] /* ty=Tensor[(1638), uint32] */, dtype="uint32") /* ty=Tensor[(1638), uint32] */;
    %517 = cast(meta[relay.Constant][48] /* ty=Tensor[(1638), uint32] */, dtype="uint32") /* ty=Tensor[(1638), uint32] */;
    %518 = cast(%var_8381, dtype="float64") /* ty=float64 */;
    %519 = reshape(%516, newshape=[9, 13, 14]) /* ty=Tensor[(9, 13, 14), uint32] */;
    %520 = reshape(%517, newshape=[9, 13, 14]) /* ty=Tensor[(9, 13, 14), uint32] */;
    %521 = reshape(%518, newshape=[]) /* ty=float64 */;
    %522 = @func_7900(%519, %520, %521) /* ty=(Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) */;
    %523 = cast(meta[relay.Constant][49] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
    %524 = cast(meta[relay.Constant][50] /* ty=Tensor[(990, 1), float64] */, dtype="float64") /* ty=Tensor[(990, 1), float64] */;
    %525 = cast(meta[relay.Constant][50] /* ty=Tensor[(990, 1), float64] */, dtype="bool") /* ty=Tensor[(990, 1), bool] */;
    %526 = cast(meta[relay.Constant][49] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
    %527 = reshape(%523, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %528 = reshape(%524, newshape=[990, 1]) /* ty=Tensor[(990, 1), float64] */;
    %529 = reshape(%525, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), bool] */;
    %530 = reshape(%526, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %531 = @func_1437(%527, %528, %529, %530) /* ty=(Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) */;
    %532 = cast(%var_8404, dtype="bool") /* ty=Tensor[(231, 2), bool] */;
    %533 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(231, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %534 = cast(meta[relay.Constant][49] /* ty=Tensor[(231, 2), float64] */, dtype="bool") /* ty=Tensor[(231, 2), bool] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %536 = acos(%512) /* ty=Tensor[(10, 15, 6), float64] */;
    %537 = %515.3;
    %538 = %522.0;
    %539 = %531.5;
    %540 = less(%534, %535) /* ty=Tensor[(231, 2), bool] */;
    (%536, %537, meta[relay.Constant][47] /* ty=Tensor[(1, 105), float32] */, %538, meta[relay.Constant][48] /* ty=Tensor[(1638), uint32] */, %var_8381, %539, meta[relay.Constant][50] /* ty=Tensor[(990, 1), float64] */, %540)
  };
  %541(%var_8418, %var_8419, %var_8420) /* ty=(Tensor[(10, 15, 6), float64], Tensor[(14, 11, 13), float32], Tensor[(1, 105), float32], Tensor[(9, 13, 14), uint32], Tensor[(1638), uint32], float64, Tensor[(?, 16, 6), int32], Tensor[(990, 1), float64], Tensor[(231, 2), bool]) */
}

def @func_8211(%var_8209: Tensor[(1, 15, 10), float32]) -> (Tensor[(?, 15, 10), uint8],) {
  @func_8208(%var_8209) /* ty=(Tensor[(?, 15, 10), uint8],) */
}

def @func_3604(%var_3589: Tensor[(105), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(15, 7, 1), float32], Tensor[(14, 11, 13), float32]) {
  %542 = cast(%var_3589, dtype="float32") /* ty=Tensor[(105), float32] */;
  %543 = reshape(%542, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %544 = @func_2926(%543) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %545 = %544.1;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %547 = reshape(%546, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %548 = @func_2926(%547) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(15, 7, 1), float32]) */;
  %549 = cast(meta[relay.Constant][51] /* ty=Tensor[(14, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %550 = cos(%549) /* ty=Tensor[(14, 11, 13), float32] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %552 = %548.0;
  %553 = atanh(%551) /* ty=Tensor[(14, 11, 13), float32] */;
  (%545, %var_3589, %552, %553)
}

def @func_14677(%var_14676: Tensor[(12, 13, 12), float64]) -> (Tensor[(12, 13, 12), float32], Tensor[(12, 13, 12), float64]) {
  %566 = fn (%var_14640: Tensor[(12, 13, 12), float64]) -> (Tensor[(12, 13, 12), float32], Tensor[(12, 13, 12), float64]) {
    %554 = cast(%var_14640, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
    %555 = sigmoid(%554) /* ty=Tensor[(12, 13, 12), float64] */;
    %556 = cast(%var_14640, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
    %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%555, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %560 = cast(%555, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
    %561 = shape_of(%var_14640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%var_14640, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %564 = mod(%558, %559) /* ty=Tensor[(12, 13, 12), float32] */;
    %565 = floor_mod(%562, %563) /* ty=Tensor[(12, 13, 12), float64] */;
    (%564, %565)
  };
  %566(%var_14676) /* ty=(Tensor[(12, 13, 12), float32], Tensor[(12, 13, 12), float64]) */
}

def @func_5329(%var_5326: Tensor[(12, 1, 1), uint16], %var_5327: Tensor[(12, 16, 9), uint16], %var_5328: Tensor[(112), uint8]) -> (Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) {
  %585 = fn (%var_5277: Tensor[(12, 1, 1), uint16], %var_5278: Tensor[(12, 16, 9), uint16], %var_5304: Tensor[(112), uint8]) -> (Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) {
    %567 = cast(%var_5277, dtype="uint16") /* ty=Tensor[(12, 1, 1), uint16] */;
    %568 = cast(%var_5278, dtype="uint16") /* ty=Tensor[(12, 16, 9), uint16] */;
    %569 = cast(%var_5304, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %570 = cast(%var_5304, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %571 = reshape(%569, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
    %572 = reshape(%570, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
    %573 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
    %574 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 198), float64] */, dtype="float64") /* ty=Tensor[(5, 198), float64] */;
    %575 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 198), float64] */, dtype="bool") /* ty=Tensor[(5, 198), bool] */;
    %576 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
    %577 = reshape(%573, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %578 = reshape(%574, newshape=[990, 1]) /* ty=Tensor[(990, 1), float64] */;
    %579 = reshape(%575, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), bool] */;
    %580 = reshape(%576, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %581 = @func_1437(%577, %578, %579, %580) /* ty=(Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) */;
    %582 = left_shift(%567, %568) /* ty=Tensor[(12, 16, 9), uint16] */;
    %583 = @func_1580(%571, %572) /* ty=Tensor[(2, 4, 14), uint8] */;
    %584 = %581.5;
    (%582, %583, %var_5304, %584, meta[relay.Constant][52] /* ty=Tensor[(1, 462), float64] */, meta[relay.Constant][53] /* ty=Tensor[(5, 198), float64] */)
  };
  %585(%var_5326, %var_5327, %var_5328) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */
}

def @func_6375(%var_6374: Tensor[(13, 15, 6), float64]) -> (Tensor[(13, 15, 6), float64],) {
  %588 = fn (%var_6364: Tensor[(13, 15, 6), float64]) -> (Tensor[(13, 15, 6), float64],) {
    %586 = cast(%var_6364, dtype="float64") /* ty=Tensor[(13, 15, 6), float64] */;
    %587 = log(%586) /* ty=Tensor[(13, 15, 6), float64] */;
    (%587,)
  };
  %588(%var_6374) /* ty=(Tensor[(13, 15, 6), float64],) */
}

def @func_1443(%var_1439: Tensor[(14, 3, 11), float64], %var_1440: Tensor[(990, 1), float64], %var_1441: Tensor[(10, 9, 11), bool], %var_1442: Tensor[(14, 3, 11), float64]) -> (Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) {
  @func_1437(%var_1439, %var_1440, %var_1441, %var_1442) /* ty=(Tensor[(990, 1), float64], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), bool], Tensor[(14, 3, 11), float32], Tensor[(10, 9, 11), int16], Tensor[(?, 16, 6), int32], Tensor[(14, 3, 11), float64]) */
}

def @func_16075() -> Tensor[(13, 15, 15), float32] {
  %589 = fn () -> Tensor[(13, 15, 15), float32] {
    @func_15234() /* ty=Tensor[(13, 15, 15), float32] */
  };
  %589() /* ty=Tensor[(13, 15, 15), float32] */
}

def @func_13200(%var_13127: Tensor[(4, 12, 11), float64], %var_13145: Tensor[(84, 24), int32], %var_13146: Tensor[(96), float32], %var_13149: Tensor[(3, 4), uint16], %var_13159: Tensor[(676), float64]) -> (Tensor[(96), float32], Tensor[(84, 24), int32], Tensor[(96), float32], Tensor[(?, 16, 6), int32], Tensor[(3, 4), uint16], Tensor[(1728), uint16], Tensor[(112), uint8], Tensor[(4, 11, 16), float64], Tensor[(704), float64], Tensor[(35, 4), float32], Tensor[(676), float64], Tensor[(35, 4), bool], float64, Tensor[(?, 16, 6), bool], Tensor[(4, 12, 11), float64]) {
  %590 = cast(%var_13145, dtype="int32") /* ty=Tensor[(84, 24), int32] */;
  %591 = cast(%var_13145, dtype="int32") /* ty=Tensor[(84, 24), int32] */;
  %592 = cast(%var_13146, dtype="float32") /* ty=Tensor[(96), float32] */;
  %593 = reshape(%590, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), int32] */;
  %594 = reshape(%591, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), int32] */;
  %595 = reshape(%592, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %596 = @func_8525(%593, %594, %595) /* ty=(Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) */;
  %597 = cast(%var_13149, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
  %598 = cast(meta[relay.Constant][54] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %599 = cast(meta[relay.Constant][55] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %600 = reshape(%597, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), uint16] */;
  %601 = reshape(%598, newshape=[12, 16, 9]) /* ty=Tensor[(12, 16, 9), uint16] */;
  %602 = reshape(%599, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %603 = @func_5325(%600, %601, %602) /* ty=(Tensor[(12, 16, 9), uint16], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8], Tensor[(?, 16, 6), int32], Tensor[(1, 462), float64], Tensor[(5, 198), float64]) */;
  %604 = cast(meta[relay.Constant][56] /* ty=Tensor[(704), float64] */, dtype="float64") /* ty=Tensor[(704), float64] */;
  %605 = reshape(%604, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), float64] */;
  %606 = @func_8039(%605) /* ty=(Tensor[(4, 11, 16), float64],) */;
  %607 = cast(meta[relay.Constant][55] /* ty=Tensor[(112), uint8] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %608 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %609 = reshape(%607, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), float64] */;
  %610 = reshape(%608, newshape=[676]) /* ty=Tensor[(676), float64] */;
  %611 = @func_7089(%609, %610) /* ty=(Tensor[(8, 2, 7), float64], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(35, 4), float32], Tensor[(96), float32]) */;
  %612 = cast(3.1321f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %613 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %614 = %611.4;
  %615 = cast(%614, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %616 = %603.3;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %618 = reshape(%612, newshape=[]) /* ty=float64 */;
  %619 = reshape(%613, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %620 = reshape(%615, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %621 = reshape(%617, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %622 = @func_4163(%618, %619, %620, %621) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %623 = cast(3.1321f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %624 = cast(%var_13159, dtype="float64") /* ty=Tensor[(676), float64] */;
  %625 = %622.4;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %627 = %596.2;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(96), float32] */;
  %629 = reshape(%623, newshape=[]) /* ty=float64 */;
  %630 = reshape(%624, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %631 = reshape(%626, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %632 = reshape(%628, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %633 = @func_4163(%629, %630, %631, %632) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %634 = cast(%var_13127, dtype="float64") /* ty=Tensor[(4, 12, 11), float64] */;
  %635 = atanh(%634) /* ty=Tensor[(4, 12, 11), float64] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(4, 12, 11), float64] */;
  %637 = %606.0;
  %638 = %633.1;
  %639 = sqrt(%636) /* ty=Tensor[(4, 12, 11), float64] */;
  (%627, %var_13145, %var_13146, %616, %var_13149, meta[relay.Constant][54] /* ty=Tensor[(1728), uint16] */, meta[relay.Constant][55] /* ty=Tensor[(112), uint8] */, %637, meta[relay.Constant][56] /* ty=Tensor[(704), float64] */, %614, %var_13159, %625, 3.1321f64 /* ty=float64 */, %638, %639)
}

def @func_15208(%var_15206: Tensor[(10, 3, 4), int8], %var_15207: Tensor[(504), float32]) -> (Tensor[(10, 3, 4), int8], Tensor[(10, 3, 4), uint64], Tensor[(14, 6, 6), float32], Tensor[(504), float32]) {
  @func_15204(%var_15206, %var_15207) /* ty=(Tensor[(10, 3, 4), int8], Tensor[(10, 3, 4), uint64], Tensor[(14, 6, 6), float32], Tensor[(504), float32]) */
}

def @func_3689(%var_3686: Tensor[(14, 1, 16), float32], %var_3687: Tensor[(105), float32], %var_3688: Tensor[(96), float32]) -> (Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) {
  @func_3684(%var_3686, %var_3687, %var_3688) /* ty=(Tensor[(14, 1, 16), float32], Tensor[(15, 7, 1), float32], Tensor[(105), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */
}

def @func_1583(%var_1581: Tensor[(2, 4, 14), uint8], %var_1582: Tensor[(2, 4, 14), uint8]) -> Tensor[(2, 4, 14), uint8] {
  %644 = fn (%var_1557: Tensor[(2, 4, 14), uint8], %var_1558: Tensor[(2, 4, 14), uint8]) -> Tensor[(2, 4, 14), uint8] {
    %640 = cast(%var_1558, dtype="uint8") /* ty=Tensor[(2, 4, 14), uint8] */;
    %641 = shape_of(%var_1557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%var_1557, dtype="uint8") /* ty=Tensor[(2, 4, 14), uint8] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%642, %643) /* ty=Tensor[(2, 4, 14), uint8] */
  };
  %644(%var_1581, %var_1582) /* ty=Tensor[(2, 4, 14), uint8] */
}

def @func_15567(%var_15496: Tensor[(48, 2), float32], %var_15555: Tensor[(192), float64]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), bool], Tensor[(48, 2), uint8], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64], Tensor[(2, 6, 16), float64], Tensor[(192), float64], Tensor[(2, 4, 14), uint8], Tensor[(112), uint8]) {
  %645 = @func_15426() /* ty=Tensor[(13, 15, 15), float32] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %647 = acos(%646) /* ty=Tensor[(13, 15, 15), float32] */;
  %648 = cast(%645, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %652 = mod(%650, %651) /* ty=Tensor[(13, 15, 15), float64] */;
  %653 = cast(%645, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = cast(%645, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %658 = tan(%657) /* ty=Tensor[(13, 15, 15), float64] */;
  %659 = cast(%658, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %660 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%647, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = cast(%var_15496, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %664 = reshape(%663, newshape=[48, 2]) /* ty=Tensor[(48, 2), float32] */;
  %665 = @func_15391(%664) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) */;
  %666 = %665.3;
  %667 = cast(%666, dtype="uint8") /* ty=Tensor[(48, 2), uint8] */;
  %668 = shape_of(%var_15496, dtype="int32") /* ty=Tensor[(2), int32] */;
  %669 = cast(%var_15496, dtype="uint8") /* ty=Tensor[(48, 2), uint8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %671 = cast(%658, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %672 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%652, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %675 = cast(%647, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %676 = cast(%var_15555, dtype="float64") /* ty=Tensor[(192), float64] */;
  %677 = cast(%var_15555, dtype="float64") /* ty=Tensor[(192), float64] */;
  %678 = reshape(%676, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %679 = reshape(%677, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %680 = cast(meta[relay.Constant][57] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %681 = cast(meta[relay.Constant][57] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %682 = reshape(%680, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %683 = reshape(%681, newshape=[2, 4, 14]) /* ty=Tensor[(2, 4, 14), uint8] */;
  %684 = divide(%655, %656) /* ty=Tensor[(13, 15, 15), float32] */;
  %685 = equal(%661, %662) /* ty=Tensor[(13, 15, 15), bool] */;
  %686 = subtract(%669, %670) /* ty=Tensor[(48, 2), uint8] */;
  %687 = subtract(%673, %674) /* ty=Tensor[(13, 15, 15), int64] */;
  %688 = acosh(%675) /* ty=Tensor[(13, 15, 15), float64] */;
  %689 = @func_5031(%678, %679) /* ty=Tensor[(2, 6, 16), float64] */;
  %690 = @func_1580(%682, %683) /* ty=Tensor[(2, 4, 14), uint8] */;
  (%684, %685, %686, %687, %688, %689, %var_15555, %690, meta[relay.Constant][57] /* ty=Tensor[(112), uint8] */)
}

def @func_9219(%var_9181: Tensor[(15, 16, 1), uint8], %var_9182: Tensor[(15, 16, 5), uint8], %var_9186: Tensor[(15, 16, 5), uint8]) -> (Tensor[(15, 16, 5), uint16], Tensor[(15, 16, 5), float64]) {
  %691 = cast(%var_9181, dtype="uint8") /* ty=Tensor[(15, 16, 1), uint8] */;
  %692 = cast(%var_9182, dtype="uint8") /* ty=Tensor[(15, 16, 5), uint8] */;
  %693 = maximum(%691, %692) /* ty=Tensor[(15, 16, 5), uint8] */;
  %694 = cast(%var_9186, dtype="uint16") /* ty=Tensor[(15, 16, 5), uint16] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="uint16") /* ty=Tensor[(15, 16, 5), uint16] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %698 = cast(%var_9182, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %699 = bitwise_or(%696, %697) /* ty=Tensor[(15, 16, 5), uint16] */;
  %700 = asinh(%698) /* ty=Tensor[(15, 16, 5), float64] */;
  (%699, %700)
}

def @func_405(%var_403: Tensor[(1, 16, 6), float32]) -> (Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) {
  @func_402(%var_403) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */
}

def @func_9392(%var_9390: Tensor[(4, 5, 11), uint16], %var_9391: Tensor[(4, 5, 11), uint16]) -> Tensor[(4, 5, 11), uint16] {
  @func_9388(%var_9390, %var_9391) /* ty=Tensor[(4, 5, 11), uint16] */
}

def @func_4763(%var_4666: Tensor[(16, 11, 10), float64], %var_4688: Tensor[(1, 1540), float32], %var_4689: Tensor[(96), float32], %var_4694: Tensor[(676), float64], %var_4697: Tensor[(650), float64], %var_4698: Tensor[(8, 56), float64]) -> (Tensor[(10, 14, 11), float32], Tensor[(140), float32], Tensor[(1, 1540), float32], Tensor[(96), float32], Tensor[(105), float32], float64, Tensor[(676), float64], Tensor[(448), float64], Tensor[(650), float64], Tensor[(8, 56), float64], Tensor[(16, 11, 10), int16]) {
  %701 = cast(meta[relay.Constant][58] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %702 = cast(%var_4688, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
  %703 = cast(%var_4689, dtype="float32") /* ty=Tensor[(96), float32] */;
  %704 = reshape(%701, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), float32] */;
  %705 = reshape(%702, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %706 = reshape(%703, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %707 = @func_1475(%704, %705, %706) /* ty=(Tensor[(10, 14, 11), float32], Tensor[(?, 16, 6), bool], Tensor[(96), float32]) */;
  %708 = cast(-7.39741f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %709 = cast(%var_4694, dtype="float64") /* ty=Tensor[(676), float64] */;
  %710 = cast(meta[relay.Constant][58] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %711 = cast(%var_4689, dtype="float32") /* ty=Tensor[(96), float32] */;
  %712 = reshape(%708, newshape=[]) /* ty=float64 */;
  %713 = reshape(%709, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float64] */;
  %714 = reshape(%710, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %715 = reshape(%711, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %716 = @func_4163(%712, %713, %714, %715) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(?, 16, 6), bool], Tensor[(1540), float32], Tensor[(96), float32], Tensor[(35, 4), bool], Tensor[(15, 7, 1), float32], Tensor[(105), float32]) */;
  %717 = cast(%var_4697, dtype="float64") /* ty=Tensor[(650), float64] */;
  %718 = cast(%var_4698, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %719 = reshape(%717, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float64] */;
  %720 = reshape(%718, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %721 = @func_2587(%719, %720) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(10, 9, 11), bool], Tensor[(448), float64]) */;
  %722 = cast(%var_4666, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %723 = sigmoid(%722) /* ty=Tensor[(16, 11, 10), float64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %725 = log(%724) /* ty=Tensor[(16, 11, 10), float32] */;
  %726 = cast(%725, dtype="int16") /* ty=Tensor[(16, 11, 10), int16] */;
  %727 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%723, dtype="int16") /* ty=Tensor[(16, 11, 10), int16] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %730 = %707.0;
  %731 = %716.6;
  %732 = %721.2;
  %733 = add(%728, %729) /* ty=Tensor[(16, 11, 10), int16] */;
  (%730, meta[relay.Constant][58] /* ty=Tensor[(140), float32] */, %var_4688, %var_4689, %731, -7.39741f64 /* ty=float64 */, %var_4694, %732, %var_4697, %var_4698, %733)
}

def @func_5035(%var_5033: Tensor[(2, 6, 16), float64], %var_5034: Tensor[(2, 6, 16), float64]) -> Tensor[(2, 6, 16), float64] {
  @func_5031(%var_5033, %var_5034) /* ty=Tensor[(2, 6, 16), float64] */
}

def @func_8041(%var_8040: Tensor[(4, 11, 16), float64]) -> (Tensor[(4, 11, 16), float64],) {
  %736 = fn (%var_8035: Tensor[(4, 11, 16), float64]) -> (Tensor[(4, 11, 16), float64],) {
    %734 = cast(%var_8035, dtype="float64") /* ty=Tensor[(4, 11, 16), float64] */;
    %735 = erf(%734) /* ty=Tensor[(4, 11, 16), float64] */;
    (%735,)
  };
  %736(%var_8040) /* ty=(Tensor[(4, 11, 16), float64],) */
}

def @func_15272(%var_15270: Tensor[(819), int32]) -> (Tensor[(13, 15, 15), float32], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  @func_15269(%var_15270) /* ty=(Tensor[(13, 15, 15), float32], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */
}

def @func_15391(%var_15379: Tensor[(48, 2), float32]) -> (Tensor[(13, 15, 15), float32], Tensor[(10, 9, 11), bool], Tensor[(54), uint64], Tensor[(48, 2), float32], Tensor[(990), float64]) {
  %737 = cast(meta[relay.Constant][59] /* ty=Tensor[(54), uint64] */, dtype="uint64") /* ty=Tensor[(54), uint64] */;
  %738 = cast(%var_15379, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %739 = cast(meta[relay.Constant][60] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %740 = reshape(%737, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), uint64] */;
  %741 = reshape(%738, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %742 = reshape(%739, newshape=[990]) /* ty=Tensor[(990), float64] */;
  %743 = @func_958(%740, %741, %742) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */;
  %744 = @func_15234() /* ty=Tensor[(13, 15, 15), float32] */;
  %745 = %743.7;
  (%744, %745, meta[relay.Constant][59] /* ty=Tensor[(54), uint64] */, %var_15379, meta[relay.Constant][60] /* ty=Tensor[(990), float64] */)
}

def @func_15688(%var_15686: Tensor[(12, 2, 9), bool], %var_15687: Tensor[(12, 2, 9), bool]) -> (Tensor[(12, 2, 9), bool],) {
  @func_15684(%var_15686, %var_15687) /* ty=(Tensor[(12, 2, 9), bool],) */
}

def @func_7905(%var_7902: Tensor[(9, 13, 14), uint32], %var_7903: Tensor[(9, 13, 14), uint32], %var_7904: float64) -> (Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) {
  @func_7900(%var_7902, %var_7903, %var_7904) /* ty=(Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) */
}

def @func_8208(%var_8196: Tensor[(1, 15, 10), float32]) -> (Tensor[(?, 15, 10), uint8],) {
  %746 = cast(%var_8196, dtype="float32") /* ty=Tensor[(1, 15, 10), float32] */;
  %747 = sin(%746) /* ty=Tensor[(1, 15, 10), float32] */;
  %748 = cast(%var_8196, dtype="uint8") /* ty=Tensor[(1, 15, 10), uint8] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="uint8") /* ty=Tensor[(1, 15, 10), uint8] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %752 = subtract(%750, %751) /* ty=Tensor[(?, 15, 10), uint8] */;
  (%752,)
}

def @func_8529(%var_8526: Tensor[(14, 16, 9), int32], %var_8527: Tensor[(14, 16, 9), int32], %var_8528: Tensor[(96), float32]) -> (Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) {
  %762 = fn (%var_8497: Tensor[(14, 16, 9), int32], %var_8498: Tensor[(14, 16, 9), int32], %var_8505: Tensor[(96), float32]) -> (Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) {
    %753 = cast(%var_8498, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
    %754 = shape_of(%var_8497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(%var_8497, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %757 = cast(%var_8505, dtype="float32") /* ty=Tensor[(96), float32] */;
    %758 = reshape(%757, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
    %759 = @func_402(%758) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
    %760 = greater_equal(%755, %756) /* ty=Tensor[(14, 16, 9), bool] */;
    %761 = %759.1;
    (%760, %761, %var_8505)
  };
  %762(%var_8526, %var_8527, %var_8528) /* ty=(Tensor[(14, 16, 9), bool], Tensor[(?, 16, 6), float64], Tensor[(96), float32]) */
}

def @func_963(%var_960: Tensor[(9, 3, 2), uint64], %var_961: Tensor[(96), float32], %var_962: Tensor[(990), float64]) -> (Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) {
  @func_958(%var_960, %var_961, %var_962) /* ty=(Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) */
}

def @func_572(%var_523: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) {
  %763 = cast(%var_523, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
  %764 = cast(meta[relay.Constant][61] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %765 = cast(meta[relay.Constant][61] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %766 = reshape(%764, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %767 = reshape(%765, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %768 = cast(meta[relay.Constant][61] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %769 = @func_203(%766, %767) /* ty=Tensor[(10, 9, 11), bool] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %771 = reshape(%768, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %772 = reshape(%770, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %773 = cosh(%763) /* ty=Tensor[(8, 4, 14), float64] */;
  %774 = @func_203(%771, %772) /* ty=Tensor[(10, 9, 11), bool] */;
  (%773, %769, meta[relay.Constant][61] /* ty=Tensor[(990), float64] */, %774)
}

def @func_16014() -> (Tensor[(13, 15, 15), float32],) {
  %775 = @func_15748() /* ty=Tensor[(13, 15, 15), float32] */;
  (%775,)
}

def @func_16128() -> Tensor[(8, 7, 11), bool] {
  %782 = fn () -> Tensor[(8, 7, 11), bool] {
    %776 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 7, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
    %777 = exp(%776) /* ty=Tensor[(8, 7, 11), float32] */;
    %778 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 7, 11), float32] */, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
    %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
    %780 = cast(%777, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
    %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%780, %781) /* ty=Tensor[(8, 7, 11), bool] */
  };
  %782() /* ty=Tensor[(8, 7, 11), bool] */
}

def @func_9527(%var_9504: Tensor[(13, 14, 4), uint8]) -> (Tensor[(13, 14, 4), uint8], Tensor[(13, 14, 4), float32]) {
  %783 = cast(%var_9504, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %784 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(13, 14, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(meta[relay.Constant][63] /* ty=Tensor[(13, 14, 4), uint8] */, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %787 = cast(%var_9504, dtype="float32") /* ty=Tensor[(13, 14, 4), float32] */;
  %788 = bitwise_and(%785, %786) /* ty=Tensor[(13, 14, 4), uint8] */;
  %789 = cosh(%787) /* ty=Tensor[(13, 14, 4), float32] */;
  (%788, %789)
}

def @func_11359(%var_11356: Tensor[(2, 12, 15), uint64], %var_11357: Tensor[(2, 12, 15), uint64], %var_11358: Tensor[(70, 2), float32]) -> (Tensor[(2, 12, 15), bool], float64, float64, Tensor[(?, 15, 10), uint8], Tensor[(150), float32], Tensor[(70, 2), float64]) {
  @func_11354(%var_11356, %var_11357, %var_11358) /* ty=(Tensor[(2, 12, 15), bool], float64, float64, Tensor[(?, 15, 10), uint8], Tensor[(150), float32], Tensor[(70, 2), float64]) */
}

def @func_7900(%var_7881: Tensor[(9, 13, 14), uint32], %var_7882: Tensor[(9, 13, 14), uint32], %var_7897: float64) -> (Tensor[(9, 13, 14), uint32], Tensor[(?, 16, 6), bool], float64, Tensor[(140), float32]) {
  %790 = cast(%var_7882, dtype="uint32") /* ty=Tensor[(9, 13, 14), uint32] */;
  %791 = shape_of(%var_7881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_7881, dtype="uint32") /* ty=Tensor[(9, 13, 14), uint32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %794 = cast(%var_7897, dtype="float64") /* ty=float64 */;
  %795 = cast(meta[relay.Constant][64] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %796 = reshape(%794, newshape=[]) /* ty=float64 */;
  %797 = reshape(%795, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %798 = @func_5002(%796, %797) /* ty=(Tensor[(15, 3, 11), float32], Tensor[(?, 16, 6), bool], float64, Tensor[(676), float64], Tensor[(140), float32], Tensor[(96), float32]) */;
  %799 = subtract(%792, %793) /* ty=Tensor[(9, 13, 14), uint32] */;
  %800 = %798.1;
  (%799, %800, %var_7897, meta[relay.Constant][64] /* ty=Tensor[(140), float32] */)
}

def @func_14712(%var_14710: int8, %var_14711: Tensor[(8, 16, 11), int8]) -> (Tensor[(8, 16, 11), bool],) {
  @func_14708(%var_14710, %var_14711) /* ty=(Tensor[(8, 16, 11), bool],) */
}

def @func_958(%var_839: Tensor[(9, 3, 2), uint64], %var_859: Tensor[(96), float32], %var_902: Tensor[(990), float64]) -> (Tensor[(9, 3, 2), uint64], Tensor[(96), float32], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(448), float64], Tensor[(10, 9, 11), bool], Tensor[(?, 16, 6), float32]) {
  %801 = cast(meta[relay.Constant][65] /* ty=Tensor[(9, 3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %802 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%var_839, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %805 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %806 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %807 = reshape(%805, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %808 = reshape(%806, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %809 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %810 = @func_203(%807, %808) /* ty=Tensor[(10, 9, 11), bool] */;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %812 = reshape(%809, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %813 = reshape(%811, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %814 = cast(meta[relay.Constant][66] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %815 = reshape(%814, newshape=[8, 4, 14]) /* ty=Tensor[(8, 4, 14), float64] */;
  %816 = @func_572(%815) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(10, 9, 11), bool], Tensor[(990), float64], Tensor[(10, 9, 11), bool]) */;
  %817 = cast(%var_902, dtype="float64") /* ty=Tensor[(990), float64] */;
  %818 = cast(%810, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %819 = reshape(%817, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %820 = reshape(%818, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float64] */;
  %821 = cast(%var_859, dtype="float32") /* ty=Tensor[(96), float32] */;
  %822 = reshape(%821, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %823 = @func_402(%822) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %824 = %823.1;
  %825 = cast(%var_859, dtype="float32") /* ty=Tensor[(96), float32] */;
  %826 = reshape(%825, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float32] */;
  %827 = @func_402(%826) /* ty=(Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), float64]) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %830 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%824, dtype="float32") /* ty=Tensor[(?, 16, 6), float32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %833 = multiply(%803, %804) /* ty=Tensor[(9, 3, 2), uint64] */;
  %834 = @func_203(%812, %813) /* ty=Tensor[(10, 9, 11), bool] */;
  %835 = %816.2;
  %836 = @func_203(%819, %820) /* ty=Tensor[(10, 9, 11), bool] */;
  %837 = add(%831, %832) /* ty=Tensor[(?, 16, 6), float32] */;
  (%833, %var_859, %810, %var_902, %834, %835, meta[relay.Constant][66] /* ty=Tensor[(448), float64] */, %836, %837)
}

def @func_15951(%var_15949: Tensor[(13, 15, 15), float32]) -> (Tensor[(13, 15, 15), bool], Tensor[(676), float64], float64, Tensor[(140), float32]) {
  @func_15948(%var_15949) /* ty=(Tensor[(13, 15, 15), bool], Tensor[(676), float64], float64, Tensor[(140), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen688/build/output.py", line 1526, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:52:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

