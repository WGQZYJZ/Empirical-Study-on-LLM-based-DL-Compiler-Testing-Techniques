==========mod==========
#[version = "0.0.5"]
def @func_4882() -> Tensor[(10, 7, 2), float64] {
  %0 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %0.0
}

def @func_1938() -> Tensor[(10, 7, 2), float64] {
  @func_935() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_5413() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) {
  %1 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %3 = reshape(%2, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %4 = @func_3118(%3) /* ty=(Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %5 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %6 = %1.1;
  %7 = %4.1;
  (%5, %6, %7, meta[relay.Constant][0] /* ty=Tensor[(160), float64] */)
}

def @func_1717() -> Tensor[(10, 7, 2), float64] {
  %8 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %8.1
}

def @func_1468() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %11 = reshape(%9, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %12 = reshape(%10, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %13 = @func_896(%11, %12) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %14 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %15 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %16 = %13.3;
  %17 = %14.0;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(56), int32] */, %17)
}

def @func_9438() -> Tensor[(10, 7, 2), float64] {
  @func_4286() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_3250(%var_3222: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
  %18 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %19 = cast(%var_3222, dtype="int64") /* ty=int64 */;
  %20 = %18.0;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %22 = reshape(%19, newshape=[]) /* ty=int64 */;
  %23 = reshape(%21, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %24 = @func_1110(%22, %23) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %25 = cast(%20, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %26 = reshape(%25, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %27 = @func_1027(%26) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %28 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %30 = reshape(%29, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %31 = @func_2508(%30) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
  %32 = %24.4;
  %33 = %27.1;
  %34 = %28.0;
  %35 = %31.1;
  (%20, %32, %var_3222, %33, %34, %35, meta[relay.Constant][2] /* ty=Tensor[(490), float64] */)
}

def @func_10209(%var_10207: Tensor[(18, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(2, 3, 6), float64], Tensor[(18, 2), float64]) {
  %36 = @func_9580() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) */;
  %37 = cast(%var_10207, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %38 = reshape(%37, newshape=[2, 3, 6]) /* ty=Tensor[(2, 3, 6), float64] */;
  %39 = %36.0;
  %40 = @func_9632(%38) /* ty=Tensor[(2, 3, 6), float64] */;
  (%39, %40, %var_10207)
}

def @func_5237(%var_5220: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) {
  %41 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %42 = cast(%var_5220, dtype="int64") /* ty=int64 */;
  %43 = %41.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %45 = reshape(%42, newshape=[]) /* ty=int64 */;
  %46 = reshape(%44, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %47 = @func_1110(%45, %46) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %48 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %49 = %47.3;
  %50 = %48.0;
  (%43, %49, %var_5220, %50)
}

def @func_1569() -> (Tensor[(10, 7, 2), float64],) {
  %51 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%51,)
}

def @func_6793() -> (Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) {
  %52 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %53 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %54 = %52.0;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %56 = reshape(%53, newshape=[]) /* ty=int64 */;
  %57 = reshape(%55, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %58 = @func_1110(%56, %57) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %61 = log10(%60) /* ty=Tensor[(14, 9, 7), float32] */;
  (%54, 8 /* ty=int64 */, %61)
}

def @func_3827() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %62 = @func_3562() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %63 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %64 = %62.2;
  %65 = %63.0;
  (%64, %65)
}

def @func_8710() -> Tensor[(10, 7, 2), float64] {
  %66 = @func_8604() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %66.1
}

def @func_2523() -> Tensor[(10, 7, 2), float64] {
  %67 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %67.2
}

def @func_7261() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) {
  %68 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %69 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %70 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %71 = %68.1;
  %72 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %73 = %69.2;
  %74 = %70.1;
  (%71, %72, %73, %74)
}

def @func_4804() -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) {
  %75 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %76 = %75.3;
  %77 = cast(%76, dtype="bool") /* ty=bool */;
  %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 9), int64] */, dtype="bool") /* ty=Tensor[(1, 9), bool] */;
  %79 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 9), int64] */, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  %81 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %82 = not_equal(%77, %78) /* ty=Tensor[(1, 9), bool] */;
  %83 = %79.2;
  %84 = sigmoid(%80) /* ty=Tensor[(1, 9), float32] */;
  %85 = %81.1;
  (%82, %83, %84, %85)
}

def @func_8167() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %86 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %87 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %88 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %89 = @func_7261() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) */;
  %90 = %86.0;
  %91 = %87.0;
  %92 = %88.2;
  %93 = %89.0;
  %94 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  (%90, %91, %92, %93, %94)
}

def @func_6964() -> (Tensor[(10, 7, 2), float64], int64) {
  %95 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %96 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
  %97 = %95.2;
  %98 = %96.3;
  (%97, %98)
}

def @func_7203() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %99 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %100 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %101 = %99.1;
  (%100, %101)
}

def @func_7589() -> Tensor[(10, 7, 2), float32] {
  %102 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
  %102.5
}

def @func_9696(%var_9688: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], int64, Tensor[(315), uint32], Tensor[(12), float32], Tensor[(56), bool]) {
  %103 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(315), uint32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %107 = reshape(%104, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), uint32] */;
  %108 = reshape(%105, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %109 = reshape(%106, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %110 = @func_1653(%107, %108, %109) /* ty=(Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) */;
  %111 = cast(%var_9688, dtype="bool") /* ty=Tensor[(56), bool] */;
  %112 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(56), int32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?), bool] */;
  %115 = %103.0;
  %116 = %110.5;
  %117 = greater_equal(%113, %114) /* ty=Tensor[(56), bool] */;
  (%115, %116, meta[relay.Constant][4] /* ty=Tensor[(315), uint32] */, meta[relay.Constant][5] /* ty=Tensor[(12), float32] */, %117)
}

def @func_668() -> Tensor[(10, 7, 2), float64] {
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  atanh(%118) /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_827() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %119 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %121 = erf(%120) /* ty=Tensor[(10, 7, 2), float32] */;
  %122 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%121, %122)
}

def @func_3562() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %123 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %124 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %125 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %126 = %123.1;
  %127 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %128 = %124.0;
  %129 = %125.0;
  (%126, %127, %128, %129)
}

def @func_9788() -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float32]) {
  %130 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %131 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
  %132 = %130.0;
  (%131, %132)
}

def @func_1255() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) {
  %133 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %134 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %135 = %133.0;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %137 = reshape(%136, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %138 = @func_1070(%137) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %139 = %138.1;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 2, 4), int32] */, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %144 = cast(%135, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %145 = reshape(%144, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %146 = @func_1070(%145) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %147 = %146.0;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 7, 2), bool] */, dtype="int16") /* ty=Tensor[(10, 7, 2), int16] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="int16") /* ty=Tensor[(10, 7, 2), int16] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %152 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %153 = %134.1;
  %154 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %155 = minimum(%142, %143) /* ty=Tensor[(7, 2, 4), float64] */;
  %156 = bitwise_and(%150, %151) /* ty=Tensor[(10, 7, 2), int16] */;
  (%135, %152, %153, %154, %155, %156)
}

def @func_1360(%var_1328: Tensor[(1, 4, 3), float32], %var_1340: int64, %var_1354: Tensor[(56), int32]) -> (Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
  %157 = cast(%var_1328, dtype="float32") /* ty=Tensor[(1, 4, 3), float32] */;
  %158 = sinh(%157) /* ty=Tensor[(1, 4, 3), float32] */;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %160 = shape_of(%var_1328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_1328, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %163 = cast(%var_1340, dtype="int64") /* ty=int64 */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %165 = reshape(%163, newshape=[]) /* ty=int64 */;
  %166 = reshape(%164, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %167 = @func_1110(%165, %166) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %168 = cast(%var_1340, dtype="int64") /* ty=int64 */;
  %169 = cast(meta[relay.Constant][10] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %170 = reshape(%168, newshape=[]) /* ty=int64 */;
  %171 = reshape(%169, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %172 = @func_1110(%170, %171) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %173 = cast(%var_1354, dtype="int32") /* ty=Tensor[(56), int32] */;
  %174 = cast(%var_1354, dtype="int32") /* ty=Tensor[(56), int32] */;
  %175 = reshape(%173, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %176 = reshape(%174, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %177 = @func_896(%175, %176) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %178 = power(%161, %162) /* ty=Tensor[(?, 4, 3), float64] */;
  %179 = %167.1;
  %180 = %172.1;
  %181 = %177.2;
  (%178, %179, %var_1340, meta[relay.Constant][10] /* ty=Tensor[(140), float64] */, %180, %181, %var_1354)
}

def @func_5032() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %182 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %183 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %184 = %182.0;
  %185 = %183.0;
  (%184, %185)
}

def @func_4992() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %186 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %187 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %188 = %186.1;
  (%187, %188)
}

def @func_3097() -> Tensor[(10, 7, 2), uint32] {
  %189 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %190 = %189.0;
  %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 7, 2), float64] */, dtype="uint32") /* ty=Tensor[(10, 7, 2), uint32] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="uint32") /* ty=Tensor[(10, 7, 2), uint32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%193, %194) /* ty=Tensor[(10, 7, 2), uint32] */
}

def @func_2508(%var_2489: Tensor[(5, 14, 7), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) {
  %195 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %196 = cast(%var_2489, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
  %197 = atan(%196) /* ty=Tensor[(5, 14, 7), float64] */;
  %198 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 14, 7), float64] */, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %202 = %195.0;
  %203 = bitwise_or(%200, %201) /* ty=Tensor[(5, 14, 7), int16] */;
  (%202, %203)
}

def @func_4093() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %204 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %205 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %206 = %204.0;
  %207 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  (%205, %206, %207)
}

def @func_5205() -> (Tensor[(10, 7, 2), float64],) {
  %208 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
  (%208,)
}

def @func_5173(%var_5145: float32, %var_5146: Tensor[(15, 9, 6), float32]) -> (Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) {
  %209 = cast(%var_5145, dtype="float32") /* ty=float32 */;
  %210 = cast(%var_5146, dtype="float32") /* ty=Tensor[(15, 9, 6), float32] */;
  %211 = cast(%var_5145, dtype="int64") /* ty=int64 */;
  %212 = reshape(%211, newshape=[]) /* ty=int64 */;
  %213 = @func_3250(%212) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
  %214 = power(%209, %210) /* ty=Tensor[(15, 9, 6), float32] */;
  %215 = %213.6;
  %216 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
  (%214, %215, %216)
}

def @func_5655() -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) {
  %217 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
  %218 = %217.2;
  %219 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  (%218, %219)
}

def @func_7962() -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %221 = reshape(%220, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float64] */;
  %222 = @func_5132(%221) /* ty=(Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) */;
  %223 = @func_4294() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %224 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %225 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %226 = %222.1;
  %227 = %223.0;
  %228 = %224.0;
  (%225, %226, meta[relay.Constant][13] /* ty=Tensor[(784), float64] */, %227, %228)
}

def @func_6931() -> (Tensor[(10, 7, 2), float64],) {
  %229 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
  %230 = %229.0;
  (%230,)
}

def @func_8218() -> (Tensor[(10, 7, 2), float64],) {
  %231 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %232 = %231.2;
  (%232,)
}

def @func_8927() -> Tensor[(10, 7, 2), float64] {
  %233 = @func_8315() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %233.0
}

def @func_4294() -> (Tensor[(10, 7, 2), float64],) {
  %234 = @func_3562() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %235 = %234.1;
  (%235,)
}

def @func_7845() -> (Tensor[(10, 7, 2), float64],) {
  %236 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  (%236,)
}

def @func_935() -> Tensor[(10, 7, 2), float64] {
  %237 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %237.0
}

def @func_10085(%var_10034: Tensor[(3, 10, 7), int16], %var_10035: Tensor[(3, 10, 7), int16]) -> (Tensor[(3, 10, 7), int16], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), bool]) {
  %238 = cast(%var_10035, dtype="int16") /* ty=Tensor[(3, 10, 7), int16] */;
  %239 = shape_of(%var_10034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_10034, dtype="int16") /* ty=Tensor[(3, 10, 7), int16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %242 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %243 = @func_7962() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %244 = %243.4;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %246 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%242, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = subtract(%240, %241) /* ty=Tensor[(3, 10, 7), int16] */;
  %250 = @func_7589() /* ty=Tensor[(10, 7, 2), float32] */;
  %251 = not_equal(%247, %248) /* ty=Tensor[(10, 7, 2), bool] */;
  (%249, %250, %251)
}

def @func_9118() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %252 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %253 = %252.1;
  %254 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  (%253, %254)
}

def @func_9632(%var_9628: Tensor[(2, 3, 6), float64]) -> Tensor[(2, 3, 6), float64] {
  %255 = cast(%var_9628, dtype="float64") /* ty=Tensor[(2, 3, 6), float64] */;
  %256 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 3, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 6), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%257, %258) /* ty=Tensor[(2, 3, 6), float64] */
}

def @func_5783() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64]) {
  %259 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %261 = reshape(%260, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %262 = @func_1027(%261) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %263 = %262.0;
  (%259, %263)
}

def @func_4526(%var_4481: Tensor[(672), uint16], %var_4513: Tensor[(49, 10), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) {
  %264 = cast(%var_4481, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %265 = cast(%var_4481, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %266 = cast(%var_4481, dtype="float64") /* ty=Tensor[(672), float64] */;
  %267 = reshape(%264, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %268 = reshape(%265, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %269 = reshape(%266, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %270 = @func_4417(%267, %268, %269) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %271 = %270.2;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %273 = asin(%272) /* ty=Tensor[(49, 10), float32] */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(49, 10), float32] */, dtype="int64") /* ty=Tensor[(49, 10), int64] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(2), int32] */;
  %276 = cast(%273, dtype="int64") /* ty=Tensor[(49, 10), int64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %278 = cast(%var_4513, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %279 = shape_of(%271, dtype="int32") /* ty=Tensor[(2), int32] */;
  %280 = cast(%271, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %282 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %283 = bitwise_and(%276, %277) /* ty=Tensor[(49, 10), int64] */;
  %284 = floor_mod(%280, %281) /* ty=Tensor[(49, 10), float64] */;
  (%282, %var_4481, %283, %284)
}

def @func_3386() -> (Tensor[(10, 7, 2), float32],) {
  %285 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  (%285,)
}

def @func_6746() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
  %286 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %287 = cast(meta[relay.Constant][16] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %288 = cast(meta[relay.Constant][16] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %289 = reshape(%287, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %290 = reshape(%288, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %291 = @func_896(%289, %290) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %292 = %286.2;
  %293 = %291.3;
  (%292, %293, meta[relay.Constant][16] /* ty=Tensor[(56), int32] */)
}

def @func_4706() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %294 = @func_4294() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %295 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %296 = %294.0;
  %297 = %295.1;
  (%296, %297)
}

def @func_1110(%var_1084: int64, %var_1100: Tensor[(1, 140), float64]) -> (Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %298 = cast(%var_1084, dtype="bool") /* ty=bool */;
  %299 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 9, 7), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %300 = greater_equal(%298, %299) /* ty=Tensor[(14, 9, 7), bool] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
  %302 = cast(%var_1100, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %303 = reshape(%302, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %304 = @func_1027(%303) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %305 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %306 = cos(%301) /* ty=Tensor[(14, 9, 7), float64] */;
  %307 = %304.0;
  %308 = %305.1;
  %309 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  (%306, %307, %var_1100, %308, %309)
}

def @func_6433() -> (Tensor[(10, 7, 2), float64],) {
  %310 = @func_3827() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %311 = %310.0;
  (%311,)
}

def @func_8438(%var_8430: Tensor[(6, 16, 11), uint16], %var_8431: Tensor[(6, 16, 11), uint16]) -> Tensor[(6, 16, 11), uint16] {
  %312 = cast(%var_8431, dtype="uint16") /* ty=Tensor[(6, 16, 11), uint16] */;
  %313 = shape_of(%var_8430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_8430, dtype="uint16") /* ty=Tensor[(6, 16, 11), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%314, %315) /* ty=Tensor[(6, 16, 11), uint16] */
}

def @func_9062() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %316 = @func_6433() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %317 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  %318 = %316.0;
  (%317, %318)
}

def @func_2428() -> Tensor[(10, 7, 2), float32] {
  %319 = @func_2237() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
  %319.0
}

def @func_9167() -> (Tensor[(1, 9), bool],) {
  %320 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
  (%320,)
}

def @func_1754() -> (Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %321 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %322 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %323 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %324 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %325 = %321.2;
  %326 = %322.0;
  %327 = %323.0;
  (%324, %325, %326, %327)
}

def @func_7885() -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) {
  %328 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %329 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %330 = %328.2;
  (%329, %330)
}

def @func_8485() -> Tensor[(7, 2, 4), float32] {
  %331 = @func_5688() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) */;
  %332 = %331.3;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  log2(%333) /* ty=Tensor[(7, 2, 4), float32] */
}

def @func_9103() -> Tensor[(10, 7, 2), float64] {
  %334 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
  %334.0
}

def @func_1027(%var_990: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) {
  %335 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %336 = cast(%var_990, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %340 = cast(%335, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %341 = shape_of(%var_990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_990, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %344 = cast(%var_990, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %345 = maximum(%338, %339) /* ty=Tensor[(10, 7, 2), int64] */;
  %346 = add(%342, %343) /* ty=Tensor[(10, 7, 2), uint8] */;
  %347 = cos(%344) /* ty=Tensor[(10, 7, 2), float64] */;
  (%345, %346, %347)
}

def @func_7361(%var_7339: Tensor[(8, 11, 3), uint16], %var_7340: Tensor[(8, 11, 3), uint16]) -> (Tensor[(8, 11, 3), uint16], int64, int64) {
  %348 = cast(%var_7340, dtype="uint16") /* ty=Tensor[(8, 11, 3), uint16] */;
  %349 = shape_of(%var_7339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_7339, dtype="uint16") /* ty=Tensor[(8, 11, 3), uint16] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %352 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %353 = reshape(%352, newshape=[]) /* ty=int64 */;
  %354 = @func_5237(%353) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) */;
  %355 = subtract(%350, %351) /* ty=Tensor[(8, 11, 3), uint16] */;
  %356 = %354.2;
  (%355, %356, -4 /* ty=int64 */)
}

def @func_9905() -> Tensor[(12, 9, 14), float64] {
  %357 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 14), float64] */;
  sinh(%357) /* ty=Tensor[(12, 9, 14), float64] */
}

def @func_3177(%var_3164: uint64, %var_3165: Tensor[(4, 4, 5), uint64]) -> Tensor[(4, 4, 5), uint64] {
  %358 = cast(%var_3164, dtype="uint64") /* ty=uint64 */;
  %359 = cast(%var_3165, dtype="uint64") /* ty=Tensor[(4, 4, 5), uint64] */;
  multiply(%358, %359) /* ty=Tensor[(4, 4, 5), uint64] */
}

def @func_9500() -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(49, 10), float64]) {
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %361 = cast(meta[relay.Constant][19] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %362 = cast(meta[relay.Constant][19] /* ty=Tensor[(672), uint16] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %363 = reshape(%360, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %364 = reshape(%361, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %365 = reshape(%362, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %366 = @func_4417(%363, %364, %365) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %367 = %366.2;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %369 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %370 = acos(%368) /* ty=Tensor[(49, 10), float64] */;
  (%369, meta[relay.Constant][19] /* ty=Tensor[(672), uint16] */, %370)
}

def @func_8761() -> (Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) {
  %371 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %372 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %373 = %371.2;
  %374 = %372.1;
  (%373, %374)
}

def @func_6876() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  %375 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %376 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %377 = %375.0;
  (%376, %377)
}

def @func_7008() -> Tensor[(10, 7, 2), float64] {
  @func_1488() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_5461(%var_5441: Tensor[(8, 4, 2), float64], %var_5454: Tensor[(8, 4, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) {
  %378 = cast(%var_5441, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %379 = cos(%378) /* ty=Tensor[(8, 4, 2), float64] */;
  %380 = cast(%var_5454, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %385 = greater_equal(%382, %383) /* ty=Tensor[(8, 4, 2), bool] */;
  (%384, %385)
}

def @func_4417(%var_4330: Tensor[(16, 14, 3), uint16], %var_4331: Tensor[(16, 14, 3), uint16], %var_4375: Tensor[(16, 14, 3), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) {
  %386 = cast(%var_4331, dtype="uint16") /* ty=Tensor[(16, 14, 3), uint16] */;
  %387 = shape_of(%var_4330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_4330, dtype="uint16") /* ty=Tensor[(16, 14, 3), uint16] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %390 = subtract(%388, %389) /* ty=Tensor[(16, 14, 3), uint16] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %392 = atan(%391) /* ty=Tensor[(16, 14, 3), float64] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %394 = acos(%393) /* ty=Tensor[(16, 14, 3), float32] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %396 = sqrt(%395) /* ty=Tensor[(16, 14, 3), float64] */;
  %397 = cast(%var_4375, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %401 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %402 = %401.1;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %404 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
  %405 = multiply(%399, %400) /* ty=Tensor[(16, 14, 3), float64] */;
  %406 = erf(%403) /* ty=Tensor[(49, 10), float32] */;
  (%404, %405, %406)
}

def @func_5051(%var_5034: float64, %var_5035: Tensor[(11, 11, 11), float64], %var_5044: Tensor[(490), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(5, 2, 5), uint32], Tensor[(50), uint32], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
  %407 = cast(%var_5034, dtype="float64") /* ty=float64 */;
  %408 = cast(%var_5035, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
  %409 = cast(%var_5034, dtype="uint32") /* ty=uint32 */;
  %410 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %411 = reshape(%409, newshape=[]) /* ty=uint32 */;
  %412 = reshape(%410, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
  %413 = cast(%var_5044, dtype="float64") /* ty=Tensor[(490), float64] */;
  %414 = reshape(%413, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %415 = @func_2508(%414) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
  %416 = mod(%407, %408) /* ty=Tensor[(11, 11, 11), float64] */;
  %417 = @func_4218(%411, %412) /* ty=Tensor[(5, 2, 5), uint32] */;
  %418 = %415.1;
  (%416, %417, meta[relay.Constant][20] /* ty=Tensor[(50), uint32] */, %418, %var_5044)
}

def @func_4314() -> Tensor[(10, 7, 2), float32] {
  %419 = @func_2237() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
  %419.0
}

def @func_2556(%var_2548: Tensor[(5, 14, 13), int64], %var_2549: Tensor[(5, 14, 13), int64]) -> Tensor[(5, 14, 13), int64] {
  %420 = cast(%var_2549, dtype="int64") /* ty=Tensor[(5, 14, 13), int64] */;
  %421 = shape_of(%var_2548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_2548, dtype="int64") /* ty=Tensor[(5, 14, 13), int64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%422, %423) /* ty=Tensor[(5, 14, 13), int64] */
}

def @func_5132(%var_5089: Tensor[(8, 14, 7), float64]) -> (Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) {
  %424 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 7), float64] */;
  %425 = erf(%424) /* ty=Tensor[(8, 14, 7), float64] */;
  %426 = cast(%var_5089, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %430 = divide(%428, %429) /* ty=Tensor[(8, 14, 7), float32] */;
  %431 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 14, 7), float64] */, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %435 = cast(%425, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
  %436 = shape_of(%var_5089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_5089, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = cast(%var_5089, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
  %440 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%430, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %443 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 351), bool] */, dtype="bool") /* ty=Tensor[(5, 351), bool] */;
  %446 = reshape(%444, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), bool] */;
  %447 = reshape(%445, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), bool] */;
  %448 = @func_2807(%446, %447) /* ty=(Tensor[(9, 13, 15), bool],) */;
  %449 = bitwise_or(%433, %434) /* ty=Tensor[(8, 14, 7), uint64] */;
  %450 = greater_equal(%437, %438) /* ty=Tensor[(8, 14, 7), bool] */;
  %451 = bitwise_and(%441, %442) /* ty=Tensor[(8, 14, 7), uint64] */;
  %452 = %443.1;
  %453 = %448.0;
  (%449, %450, %451, %452, %453, meta[relay.Constant][22] /* ty=Tensor[(135), bool] */, meta[relay.Constant][23] /* ty=Tensor[(5, 351), bool] */)
}

def @func_6450() -> (Tensor[(10, 7, 2), uint32],) {
  %454 = @func_5655() /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) */;
  %455 = %454.0;
  (%455,)
}

def @func_6247() -> (Tensor[(10, 7, 2), float64],) {
  %456 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  (%456,)
}

def @func_9869() -> (Tensor[(10, 7, 2), float64],) {
  %457 = @func_6164() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %458 = %457.0;
  (%458,)
}

def @func_2191(%var_2162: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) {
  %459 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %461 = reshape(%460, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %462 = @func_1027(%461) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %463 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %464 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %465 = cast(%var_2162, dtype="int32") /* ty=Tensor[(56), int32] */;
  %466 = cast(%var_2162, dtype="int32") /* ty=Tensor[(56), int32] */;
  %467 = reshape(%465, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %468 = reshape(%466, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %469 = @func_896(%467, %468) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  %472 = %462.1;
  %473 = %463.1;
  %474 = %464.3;
  %475 = sin(%471) /* ty=Tensor[(7, 2, 4), float32] */;
  (%459, %472, %var_2162, %473, %474, %475)
}

def @func_7696(%var_7626: Tensor[(1, 15, 11), float32], %var_7650: Tensor[(7, 15, 11), float32], %var_7660: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) {
  %476 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %477 = cast(%var_7626, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
  %478 = sigmoid(%477) /* ty=Tensor[(1, 15, 11), float32] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
  %480 = cosh(%479) /* ty=Tensor[(1, 15, 11), float32] */;
  %481 = cast(%480, dtype="uint64") /* ty=Tensor[(1, 15, 11), uint64] */;
  %482 = cast(%var_7650, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
  %483 = cast(%var_7660, dtype="int64") /* ty=Tensor[(231), int64] */;
  %484 = reshape(%483, newshape=[231]) /* ty=Tensor[(231), int64] */;
  %485 = @func_6838(%484) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) */;
  %486 = cast(%var_7650, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
  %487 = cast(%var_7626, dtype="uint64") /* ty=Tensor[(1, 15, 11), uint64] */;
  %488 = cast(%478, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
  %489 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %490 = %476.0;
  %491 = subtract(%481, %482) /* ty=Tensor[(7, 15, 11), uint64] */;
  %492 = %485.2;
  %493 = maximum(%486, %487) /* ty=Tensor[(7, 15, 11), uint64] */;
  %494 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
  %495 = acos(%488) /* ty=Tensor[(1, 15, 11), float32] */;
  %496 = %489.0;
  (%490, %491, %492, %var_7660, %493, %494, %495, %496)
}

def @func_1308() -> Tensor[(10, 7, 2), float64] {
  %497 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %497.1
}

def @func_5599() -> (Tensor[(10, 7, 2), float64],) {
  %498 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %499 = %498.0;
  (%499,)
}

def @func_9002(%var_8983: Tensor[(165), float32], %var_8984: Tensor[(7, 165), float32], %var_8985: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(231), int64], Tensor[(165), float32], Tensor[(7, 165), float32], Tensor[(231), int64]) {
  %500 = cast(%var_8983, dtype="float32") /* ty=Tensor[(165), float32] */;
  %501 = cast(%var_8984, dtype="float32") /* ty=Tensor[(7, 165), float32] */;
  %502 = cast(%var_8985, dtype="int64") /* ty=Tensor[(231), int64] */;
  %503 = reshape(%500, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
  %504 = reshape(%501, newshape=[7, 15, 11]) /* ty=Tensor[(7, 15, 11), float32] */;
  %505 = reshape(%502, newshape=[231]) /* ty=Tensor[(231), int64] */;
  %506 = @func_7696(%503, %504, %505) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) */;
  %507 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
  %508 = %506.2;
  (%507, %508, %var_8983, %var_8984, %var_8985)
}

def @func_1862() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) {
  %509 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %510 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %511 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %512 = %509.0;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %514 = reshape(%511, newshape=[]) /* ty=int64 */;
  %515 = reshape(%513, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %516 = @func_1110(%514, %515) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %517 = %510.1;
  %518 = %516.3;
  %519 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
  (%512, %517, %518, -7 /* ty=int64 */, %519)
}

def @func_7526() -> (Tensor[(160), float64], Tensor[(10, 7, 2), float64]) {
  %520 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
  %521 = %520.3;
  %522 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  (%521, %522)
}

def @func_2059() -> (Tensor[(10, 7, 2), float64],) {
  %523 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  (%523,)
}

def @func_1488() -> Tensor[(10, 7, 2), float64] {
  @func_1136() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4472() -> (Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) {
  %524 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %525 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %526 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %527 = reshape(%526, newshape=[]) /* ty=int64 */;
  %528 = @func_3250(%527) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
  %529 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %530 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %531 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %533 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %534 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), uint16] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %535 = reshape(%532, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %536 = reshape(%533, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %537 = reshape(%534, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %538 = @func_4417(%535, %536, %537) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %539 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %540 = %524.1;
  %541 = %525.0;
  %542 = %528.1;
  %543 = %529.0;
  %544 = %530.1;
  %545 = %531.0;
  %546 = %538.0;
  %547 = %539.2;
  (%540, %541, %542, -10 /* ty=int64 */, %543, %544, %545, %546, meta[relay.Constant][24] /* ty=Tensor[(672), uint16] */, %547)
}

def @func_2763() -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) {
  %548 = cast(meta[relay.Constant][25] /* ty=Tensor[(49, 10), float64] */, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %549 = reshape(%548, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %550 = @func_2508(%549) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
  %551 = %550.1;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
  %553 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
  %554 = sinh(%552) /* ty=Tensor[(5, 14, 7), float64] */;
  (%553, meta[relay.Constant][25] /* ty=Tensor[(49, 10), float64] */, %554)
}

def @func_3065() -> Tensor[(10, 7, 2), float64] {
  %555 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %555.1
}

def @func_3153() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %556 = @func_1401() /* ty=Tensor[(10, 7, 2), float64] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %558 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %559 = asinh(%557) /* ty=Tensor[(10, 7, 2), float32] */;
  %560 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
  %561 = %558.0;
  (%559, %560, %561)
}

def @func_7092() -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float32], Tensor[(10, 7, 2), uint32]) {
  %562 = @func_7013() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %563 = cast(meta[relay.Constant][26] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %564 = reshape(%563, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %565 = @func_2508(%564) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
  %566 = cast(meta[relay.Constant][26] /* ty=Tensor[(490), float64] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %567 = @func_6450() /* ty=(Tensor[(10, 7, 2), uint32],) */;
  %568 = %562.0;
  %569 = %565.1;
  %570 = cosh(%566) /* ty=Tensor[(490), float32] */;
  %571 = %567.0;
  (%568, %569, %570, %571)
}

def @func_10312() -> Tensor[(10, 7, 2), float64] {
  %572 = @func_8315() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %572.0
}

def @func_7437() -> Tensor[(1, 9), bool] {
  %573 = @func_6232() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) */;
  %573.1
}

def @func_9817(%var_9808: float64, %var_9809: Tensor[(12, 5, 16), float64]) -> (Tensor[(12, 5, 16), bool],) {
  %574 = cast(%var_9808, dtype="bool") /* ty=bool */;
  %575 = cast(%var_9809, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %576 = not_equal(%574, %575) /* ty=Tensor[(12, 5, 16), bool] */;
  (%576,)
}

def @func_6232() -> (Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) {
  %577 = @func_3153() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %578 = @func_4804() /* ty=(Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) */;
  %579 = %577.0;
  %580 = %578.0;
  (%579, %580)
}

def @func_751() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %581 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %582 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%581, %582)
}

def @func_2807(%var_2796: Tensor[(9, 1, 15), bool], %var_2797: Tensor[(9, 13, 15), bool]) -> (Tensor[(9, 13, 15), bool],) {
  %583 = cast(%var_2796, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %584 = cast(%var_2797, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %585 = logical_and(%583, %584) /* ty=Tensor[(9, 13, 15), bool] */;
  (%585,)
}

def @func_10240() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %586 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %587 = %586.0;
  %588 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  %589 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  (%587, %588, %589)
}

def @func_4141() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %590 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %591 = %590.2;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %593 = @func_3153() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %594 = exp(%592) /* ty=Tensor[(10, 7, 2), float64] */;
  %595 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %596 = %593.2;
  (%594, %595, %596)
}

def @func_7179(%var_7174: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], int64, int64) {
  %597 = cast(%var_7174, dtype="int64") /* ty=int64 */;
  %598 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %600 = reshape(%597, newshape=[]) /* ty=int64 */;
  %601 = reshape(%599, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %602 = @func_1110(%600, %601) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %603 = cast(%var_7174, dtype="int64") /* ty=int64 */;
  %604 = reshape(%603, newshape=[]) /* ty=int64 */;
  %605 = @func_5237(%604) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) */;
  %606 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  %607 = %602.1;
  %608 = %605.2;
  (%598, %606, %607, %var_7174, %608)
}

def @func_4266() -> Tensor[(10, 7, 2), float64] {
  %609 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %609.1
}

def @func_8604() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %610 = @func_6931() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %611 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %612 = %610.0;
  %613 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
  %614 = %611.1;
  (%612, %613, %614)
}

def @func_1136() -> Tensor[(10, 7, 2), float64] {
  @func_668() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_5571(%var_5506: Tensor[(490), float32], %var_5510: Tensor[(810), float32], %var_5550: Tensor[(10, 7, 2), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) {
  %615 = cast(meta[relay.Constant][27] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %616 = cast(%var_5506, dtype="float32") /* ty=Tensor[(490), float32] */;
  %617 = reshape(%615, newshape=[672]) /* ty=Tensor[(672), uint16] */;
  %618 = reshape(%616, newshape=[49, 10]) /* ty=Tensor[(49, 10), float32] */;
  %619 = @func_4526(%617, %618) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) */;
  %620 = cast(-0.054611f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %621 = cast(%var_5510, dtype="float32") /* ty=Tensor[(810), float32] */;
  %622 = reshape(%620, newshape=[]) /* ty=float32 */;
  %623 = reshape(%621, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float32] */;
  %624 = @func_5173(%622, %623) /* ty=(Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) */;
  %625 = cast(-0.054611f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %626 = %619.0;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %628 = reshape(%625, newshape=[]) /* ty=int64 */;
  %629 = reshape(%627, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %630 = @func_1110(%628, %629) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %631 = cast(meta[relay.Constant][28] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %632 = cast(meta[relay.Constant][29] /* ty=Tensor[(1755), bool] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %633 = reshape(%631, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), bool] */;
  %634 = reshape(%632, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), bool] */;
  %635 = @func_2807(%633, %634) /* ty=(Tensor[(9, 13, 15), bool],) */;
  %636 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %637 = %636.2;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %639 = acosh(%638) /* ty=Tensor[(10, 7, 2), float32] */;
  %640 = cast(%var_5550, dtype="int8") /* ty=Tensor[(10, 7, 2), int8] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="int8") /* ty=Tensor[(10, 7, 2), int8] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %644 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %645 = %624.1;
  %646 = %630.0;
  %647 = %635.0;
  %648 = bitwise_or(%642, %643) /* ty=Tensor[(10, 7, 2), int8] */;
  %649 = %644.0;
  (%626, meta[relay.Constant][27] /* ty=Tensor[(672), uint16] */, %var_5506, %645, -0.054611f /* ty=float32 */, %var_5510, %646, %647, meta[relay.Constant][28] /* ty=Tensor[(135), bool] */, meta[relay.Constant][29] /* ty=Tensor[(1755), bool] */, %648, %649)
}

def @func_9588() -> (Tensor[(56), int32],) {
  %650 = @func_5688() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) */;
  %651 = %650.4;
  (%651,)
}

def @func_2237() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  %652 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %655 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %656 = asin(%654) /* ty=Tensor[(10, 7, 2), float32] */;
  %657 = %655.0;
  (%656, %657)
}

def @func_9186() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %658 = @func_3827() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %659 = %658.1;
  %660 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
  (%659, %660)
}

def @func_6164() -> (Tensor[(10, 7, 2), float64],) {
  %661 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %662 = %661.3;
  (%662,)
}

def @func_10345(%var_10337: uint16, %var_10338: Tensor[(10, 8, 9), uint16]) -> Tensor[(10, 8, 9), bool] {
  %663 = cast(%var_10337, dtype="bool") /* ty=bool */;
  %664 = cast(%var_10338, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  less_equal(%663, %664) /* ty=Tensor[(10, 8, 9), bool] */
}

def @main(%var_10355: Tensor[(7, 3, 14), float64], %var_10375: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(231), float32], Tensor[(10, 7, 2), float64], Tensor[(7, 3, 14), float32]) {
  %665 = cast(meta[relay.Constant][30] /* ty=Tensor[(231), int64] */, dtype="int64") /* ty=Tensor[(231), int64] */;
  %666 = reshape(%665, newshape=[231]) /* ty=Tensor[(231), int64] */;
  %667 = @func_7150(%666) /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) */;
  %668 = cast(%var_10375, dtype="float32") /* ty=Tensor[(231), float32] */;
  %669 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(231), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(meta[relay.Constant][30] /* ty=Tensor[(231), int64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), float32] */;
  %672 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %673 = cast(%var_10355, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %674 = sqrt(%673) /* ty=Tensor[(7, 3, 14), float64] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %676 = log2(%675) /* ty=Tensor[(7, 3, 14), float32] */;
  %677 = cast(%var_10355, dtype="int16") /* ty=Tensor[(7, 3, 14), int16] */;
  %678 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%674, dtype="int16") /* ty=Tensor[(7, 3, 14), int16] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %681 = bitwise_and(%679, %680) /* ty=Tensor[(7, 3, 14), int16] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %683 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%676, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %686 = %667.0;
  %687 = floor_divide(%670, %671) /* ty=Tensor[(231), float32] */;
  %688 = %672.2;
  %689 = multiply(%684, %685) /* ty=Tensor[(7, 3, 14), float32] */;
  (%686, %687, %688, %689)
}

def @func_4617(%var_4532: Tensor[(3, 7, 11), int64], %var_4533: Tensor[(3, 7, 11), int64], %var_4542: Tensor[(3, 7, 11), int64]) -> (Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) {
  %690 = cast(%var_4533, dtype="int64") /* ty=Tensor[(3, 7, 11), int64] */;
  %691 = shape_of(%var_4532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_4532, dtype="int64") /* ty=Tensor[(3, 7, 11), int64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %694 = right_shift(%692, %693) /* ty=Tensor[(3, 7, 11), int64] */;
  %695 = cast(%var_4533, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %699 = cast(%694, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
  %700 = shape_of(%var_4542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_4542, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %703 = cast(%var_4542, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %704 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %705 = cast(%var_4542, dtype="bool") /* ty=Tensor[(3, 7, 11), bool] */;
  %706 = shape_of(%var_4532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_4532, dtype="bool") /* ty=Tensor[(3, 7, 11), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = greater_equal(%707, %708) /* ty=Tensor[(3, 7, 11), bool] */;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %711 = rsqrt(%710) /* ty=Tensor[(3, 7, 11), float32] */;
  %712 = cast(%var_4542, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %716 = logical_xor(%697, %698) /* ty=Tensor[(3, 7, 11), int8] */;
  %717 = maximum(%701, %702) /* ty=Tensor[(3, 7, 11), int8] */;
  %718 = atan(%703) /* ty=Tensor[(3, 7, 11), float32] */;
  %719 = %704.0;
  %720 = mod(%714, %715) /* ty=Tensor[(3, 7, 11), float64] */;
  %721 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  (%716, %717, %718, %719, %720, %721)
}

def @func_5956(%var_5951: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) {
  %722 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %723 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
  %724 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %725 = %724.0;
  %726 = cast(%var_5951, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %730 = %722.0;
  %731 = %723.8;
  %732 = left_shift(%728, %729) /* ty=Tensor[(10, 7, 2), uint8] */;
  (%730, %731, %732)
}

def @func_9548(%var_9538: Tensor[(1, 12), float32], %var_9539: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 7, 9), float32], Tensor[(315), uint32], Tensor[(1, 12), float32], Tensor[(56), int32]) {
  %733 = @func_7845() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %734 = cast(meta[relay.Constant][31] /* ty=Tensor[(315), uint32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %735 = cast(%var_9538, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %736 = cast(%var_9539, dtype="int32") /* ty=Tensor[(56), int32] */;
  %737 = reshape(%734, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), uint32] */;
  %738 = reshape(%735, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %739 = reshape(%736, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %740 = @func_1653(%737, %738, %739) /* ty=(Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) */;
  %741 = %733.0;
  %742 = %740.7;
  (%741, %742, meta[relay.Constant][31] /* ty=Tensor[(315), uint32] */, %var_9538, %var_9539)
}

def @func_6698(%var_6690: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float32],) {
  %743 = cast(%var_6690, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %744 = log2(%743) /* ty=Tensor[(5, 15, 6), float64] */;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %746 = log10(%745) /* ty=Tensor[(5, 15, 6), float32] */;
  (%746,)
}

def @func_1401() -> Tensor[(10, 7, 2), float64] {
  %747 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %747.1
}

def @func_7013() -> (Tensor[(10, 7, 2), float64],) {
  %748 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %749 = %748.0;
  (%749,)
}

def @func_8376() -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float32]) {
  %750 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %751 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
  %752 = %750.0;
  (%751, %752)
}

def @func_8854(%var_8835: Tensor[(14, 9, 7), float32]) -> Tensor[(14, 9, 7), float32] {
  %753 = @func_8761() /* ty=(Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) */;
  %754 = %753.0;
  %755 = cast(%var_8835, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%757, %758) /* ty=Tensor[(14, 9, 7), float32] */
}

def @func_6860() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(64), float64]) {
  %759 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %760 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %761 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %762 = reshape(%760, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %763 = reshape(%761, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
  %764 = @func_5461(%762, %763) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) */;
  %765 = %759.0;
  %766 = %764.0;
  (%765, %766, meta[relay.Constant][32] /* ty=Tensor[(64), float64] */)
}

def @func_9318() -> Tensor[(10, 7, 2), float64] {
  %767 = @func_6746() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %767.1
}

def @func_7744() -> Tensor[(10, 7, 2), float64] {
  %768 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %768.1
}

def @func_7150(%var_7131: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) {
  %769 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
  %770 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %771 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %772 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %773 = reshape(%770, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %774 = reshape(%771, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %775 = reshape(%772, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %776 = @func_4617(%773, %774, %775) /* ty=(Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) */;
  %777 = %769.2;
  %778 = %776.0;
  (%777, %778, %var_7131)
}

def @func_5688() -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) {
  %779 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %780 = cast(meta[relay.Constant][33] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %781 = reshape(%780, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float64] */;
  %782 = @func_5132(%781) /* ty=(Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) */;
  %783 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %784 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %785 = reshape(%783, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %786 = reshape(%784, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %787 = @func_896(%785, %786) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %788 = %779.0;
  %789 = %782.2;
  %790 = %787.1;
  (%788, %789, meta[relay.Constant][33] /* ty=Tensor[(784), float64] */, %790, meta[relay.Constant][34] /* ty=Tensor[(56), int32] */)
}

def @func_8315() -> (Tensor[(10, 7, 2), float64],) {
  %791 = @func_5913() /* ty=(Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) */;
  %792 = %791.0;
  (%792,)
}

def @func_8817() -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) {
  %793 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 168), uint16] */, dtype="uint16") /* ty=Tensor[(4, 168), uint16] */;
  %794 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 168), uint16] */, dtype="uint16") /* ty=Tensor[(4, 168), uint16] */;
  %795 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 168), uint16] */, dtype="float64") /* ty=Tensor[(4, 168), float64] */;
  %796 = reshape(%793, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %797 = reshape(%794, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %798 = reshape(%795, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %799 = @func_4417(%796, %797, %798) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %800 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %801 = %799.2;
  (%800, %801, meta[relay.Constant][35] /* ty=Tensor[(4, 168), uint16] */)
}

def @func_2376() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %802 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %803 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %804 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
  %805 = %802.0;
  %806 = %803.0;
  (%804, %805, %806)
}

def @func_2817() -> (Tensor[(10, 7, 2), float64],) {
  %807 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
  (%807,)
}

def @func_5325(%var_5250: Tensor[(4, 2, 15), float32], %var_5254: Tensor[(12), float32], %var_5310: Tensor[(4, 2, 15), bool]) -> (Tensor[(10, 7, 2), float64], Tensor[(12), float32], int64, Tensor[(7, 2, 4), int32], Tensor[(4, 2, 15), float32], Tensor[(10, 7, 2), float32], Tensor[(4, 2, 15), uint8]) {
  %808 = cast(%var_5254, dtype="float32") /* ty=Tensor[(12), float32] */;
  %809 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %810 = reshape(%808, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %811 = reshape(%809, newshape=[]) /* ty=int64 */;
  %812 = @func_2680(%810, %811) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %815 = reshape(%814, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %816 = @func_1070(%815) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %817 = cast(%var_5250, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %818 = asinh(%817) /* ty=Tensor[(4, 2, 15), float32] */;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(4, 2, 15), float64] */;
  %820 = acos(%819) /* ty=Tensor[(4, 2, 15), float64] */;
  %821 = cast(%818, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %825 = cast(%820, dtype="float64") /* ty=Tensor[(4, 2, 15), float64] */;
  %826 = cos(%825) /* ty=Tensor[(4, 2, 15), float64] */;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %828 = sinh(%827) /* ty=Tensor[(4, 2, 15), float32] */;
  %829 = cast(%826, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %833 = logical_or(%831, %832) /* ty=Tensor[(4, 2, 15), bool] */;
  %834 = cast(%var_5310, dtype="uint8") /* ty=Tensor[(4, 2, 15), uint8] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="uint8") /* ty=Tensor[(4, 2, 15), uint8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %838 = %816.1;
  %839 = divide(%823, %824) /* ty=Tensor[(4, 2, 15), float32] */;
  %840 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %841 = bitwise_xor(%836, %837) /* ty=Tensor[(4, 2, 15), uint8] */;
  (%813, %var_5254, 6 /* ty=int64 */, %838, %839, %840, %841)
}

def @func_6838(%var_6831: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) {
  %842 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %843 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %844 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %845 = reshape(%842, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %846 = reshape(%843, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %847 = reshape(%844, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %848 = @func_4617(%845, %846, %847) /* ty=(Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) */;
  %849 = @func_4266() /* ty=Tensor[(10, 7, 2), float64] */;
  %850 = %848.3;
  (%849, %850, %var_6831)
}

def @func_896(%var_839: Tensor[(7, 2, 4), int32], %var_840: Tensor[(7, 2, 4), int32]) -> (Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %851 = cast(%var_840, dtype="int32") /* ty=Tensor[(7, 2, 4), int32] */;
  %852 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_839, dtype="int32") /* ty=Tensor[(7, 2, 4), int32] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %855 = cast(%var_840, dtype="uint32") /* ty=Tensor[(7, 2, 4), uint32] */;
  %856 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_839, dtype="uint32") /* ty=Tensor[(7, 2, 4), uint32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %859 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %860 = bitwise_xor(%853, %854) /* ty=Tensor[(7, 2, 4), int32] */;
  %861 = bitwise_or(%857, %858) /* ty=Tensor[(7, 2, 4), uint32] */;
  %862 = %859.0;
  %863 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%860, %861, %862, %863)
}

def @func_1653(%var_1611: Tensor[(5, 7, 9), uint32], %var_1637: Tensor[(12), float32], %var_1639: Tensor[(56), int32]) -> (Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) {
  %864 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 7, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 7, 9), uint32] */;
  %865 = shape_of(%var_1611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%var_1611, dtype="uint32") /* ty=Tensor[(5, 7, 9), uint32] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %868 = cast(%var_1611, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %869 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %870 = cast(%var_1637, dtype="float32") /* ty=Tensor[(12), float32] */;
  %871 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %872 = cast(%var_1639, dtype="int32") /* ty=Tensor[(56), int32] */;
  %873 = reshape(%870, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
  %874 = reshape(%871, newshape=[]) /* ty=int64 */;
  %875 = reshape(%872, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %876 = @func_1360(%873, %874, %875) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %877 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 7, 9), uint32] */, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %878 = logical_xor(%866, %867) /* ty=Tensor[(5, 7, 9), uint32] */;
  %879 = acosh(%868) /* ty=Tensor[(5, 7, 9), float32] */;
  %880 = %869.0;
  %881 = %876.1;
  %882 = acos(%877) /* ty=Tensor[(5, 7, 9), float32] */;
  (%878, %879, %880, %881, %var_1637, 3 /* ty=int64 */, %var_1639, %882)
}

def @func_10117(%var_10112: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], Tensor[(7, 126), float32], Tensor[(10, 7, 2), float64], int64) {
  %883 = @func_6513() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %884 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 126), float32] */, dtype="float32") /* ty=Tensor[(7, 126), float32] */;
  %885 = reshape(%884, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), float32] */;
  %886 = cast(%var_10112, dtype="int64") /* ty=int64 */;
  %887 = reshape(%886, newshape=[]) /* ty=int64 */;
  %888 = @func_3250(%887) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
  %889 = %883.0;
  %890 = @func_8854(%885) /* ty=Tensor[(14, 9, 7), float32] */;
  %891 = %888.0;
  (%889, %890, meta[relay.Constant][37] /* ty=Tensor[(7, 126), float32] */, %891, %var_10112)
}

def @func_1070(%var_1045: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %892 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %893 = cast(%var_1045, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%892, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %897 = cast(meta[relay.Constant][38] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %898 = cast(meta[relay.Constant][38] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %899 = reshape(%897, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %900 = reshape(%898, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %901 = @func_896(%899, %900) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %902 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %903 = logical_and(%895, %896) /* ty=Tensor[(10, 7, 2), bool] */;
  %904 = %901.0;
  %905 = %902.1;
  (%903, %904, meta[relay.Constant][38] /* ty=Tensor[(56), int32] */, %905)
}

def @func_5913() -> (Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) {
  %906 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %907 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %908 = cast(meta[relay.Constant][40] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %909 = reshape(%907, newshape=[]) /* ty=uint32 */;
  %910 = reshape(%908, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
  %911 = @func_4218(%909, %910) /* ty=Tensor[(5, 2, 5), uint32] */;
  %912 = cast(%911, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
  %913 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(50), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %914 = cast(meta[relay.Constant][40] /* ty=Tensor[(50), uint32] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?), float64] */;
  %916 = %906.1;
  %917 = mod(%914, %915) /* ty=Tensor[(50), float64] */;
  (%916, meta[relay.Constant][39] /* ty=uint32 */, %917)
}

def @func_9580() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) {
  %918 = @func_5205() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %919 = %918.0;
  %920 = cast(%919, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %921 = reshape(%920, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %922 = @func_1070(%921) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %923 = %922.0;
  (%919, %923)
}

def @func_3023(%var_3020: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(1, 140), float64], int64) {
  %924 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %925 = cast(%var_3020, dtype="int64") /* ty=int64 */;
  %926 = %924.0;
  %927 = cast(%926, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %928 = reshape(%925, newshape=[]) /* ty=int64 */;
  %929 = reshape(%927, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %930 = @func_1110(%928, %929) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %931 = %930.2;
  (%926, %931, %var_3020)
}

def @func_3933() -> (Tensor[(10, 7, 2), float64],) {
  %932 = @func_1401() /* ty=Tensor[(10, 7, 2), float64] */;
  (%932,)
}

def @func_9918() -> Tensor[(5, 14, 7), float64] {
  %933 = @func_7885() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) */;
  %933.1
}

def @func_6484() -> Tensor[(10, 7, 2), float64] {
  %934 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %934.2
}

def @func_3471() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %935 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %936 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %937 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
  %938 = %935.0;
  %939 = %936.1;
  (%937, %938, %939)
}

def @func_4218(%var_4187: uint32, %var_4188: Tensor[(5, 2, 5), uint32]) -> Tensor[(5, 2, 5), uint32] {
  %940 = cast(%var_4187, dtype="uint32") /* ty=uint32 */;
  %941 = cast(%var_4188, dtype="uint32") /* ty=Tensor[(5, 2, 5), uint32] */;
  left_shift(%940, %941) /* ty=Tensor[(5, 2, 5), uint32] */
}

def @func_9413() -> Tensor[(5, 14, 7), float64] {
  %942 = @func_7885() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) */;
  %942.1
}

def @func_3353(%var_3315: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %943 = cast(%var_3315, dtype="int64") /* ty=int64 */;
  %944 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  %945 = cast(%944, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %946 = reshape(%943, newshape=[]) /* ty=int64 */;
  %947 = reshape(%945, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %948 = @func_1110(%946, %947) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %949 = %948.4;
  %950 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %951 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  (%944, %949, %var_3315, %950, %951)
}

def @func_971() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %952 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %953 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %954 = %952.1;
  (%953, %954)
}

def @func_2869(%var_2857: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %955 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %956 = cast(%var_2857, dtype="int32") /* ty=Tensor[(56), int32] */;
  %957 = reshape(%956, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %958 = @func_2191(%957) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) */;
  %959 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %960 = %955.0;
  %961 = %958.1;
  %962 = %959.0;
  (%960, %961, %var_2857, %962)
}

def @func_9957(%var_9952: Tensor[(49, 10), float32]) -> (Tensor[(49, 10), float32], Tensor[(49, 10), float32]) {
  %963 = @func_8817() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) */;
  %964 = %963.1;
  %965 = cast(%964, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %966 = cast(%var_9952, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %967 = shape_of(%964, dtype="int32") /* ty=Tensor[(2), int32] */;
  %968 = cast(%964, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %970 = cos(%965) /* ty=Tensor[(49, 10), float32] */;
  %971 = mod(%968, %969) /* ty=Tensor[(49, 10), float32] */;
  (%970, %971)
}

def @func_9227() -> (Tensor[(10, 7, 2), float64],) {
  %972 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %973 = %972.1;
  (%973,)
}

def @func_3118(%var_3100: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) {
  %974 = cast(%var_3100, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
  %975 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %976 = asinh(%974) /* ty=Tensor[(16, 5, 2), float64] */;
  %977 = %975.0;
  (%976, %977)
}

def @func_8281() -> (Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %978 = @func_5032() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %979 = %978.1;
  %980 = cast(%979, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %981 = reshape(%980, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %982 = @func_1070(%981) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %983 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %984 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %985 = %982.1;
  %986 = %983.0;
  %987 = %984.0;
  (%979, %985, %986, %987)
}

def @func_4286() -> Tensor[(10, 7, 2), float64] {
  %988 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %988.0
}

def @func_7460(%var_7448: Tensor[(6, 8, 9), float32]) -> Tensor[(6, 8, 9), float32] {
  %989 = cast(%var_7448, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  tan(%989) /* ty=Tensor[(6, 8, 9), float32] */
}

def @func_6641(%var_6577: Tensor[(6, 2), float32], %var_6578: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(6, 2), float32], int64, Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(672), uint16], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %990 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %991 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
  %992 = %991.1;
  %993 = cast(%var_6577, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %994 = cast(%var_6578, dtype="int64") /* ty=int64 */;
  %995 = cast(meta[relay.Constant][41] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %996 = reshape(%993, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
  %997 = reshape(%994, newshape=[]) /* ty=int64 */;
  %998 = reshape(%995, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %999 = @func_1360(%996, %997, %998) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %1000 = %999.1;
  %1001 = cast(%1000, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %1002 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%992, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1005 = cast(%992, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %1006 = reshape(%1005, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %1007 = @func_5956(%1006) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) */;
  %1008 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1009 = @func_5599() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %1010 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1011 = %990.0;
  %1012 = multiply(%1003, %1004) /* ty=Tensor[(10, 7, 2), int64] */;
  %1013 = %1007.1;
  %1014 = %1008.1;
  %1015 = %1009.0;
  %1016 = %1010.0;
  (%1011, %var_6577, %var_6578, meta[relay.Constant][41] /* ty=Tensor[(56), int32] */, %1012, %1013, %1014, %1015, %1016)
}

def @func_6072(%var_6061: int64, %var_6067: Tensor[(1, 490), float32], %var_6068: Tensor[(810), float32]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(672), uint16], Tensor[(1, 490), float32], Tensor[(810), float32], Tensor[(10, 7, 2), float64]) {
  %1017 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %1018 = cast(meta[relay.Constant][42] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %1019 = reshape(%1018, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %1020 = @func_3118(%1019) /* ty=(Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1021 = cast(%var_6061, dtype="int64") /* ty=int64 */;
  %1022 = reshape(%1021, newshape=[]) /* ty=int64 */;
  %1023 = @func_3353(%1022) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1024 = cast(%var_6067, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %1025 = cast(%var_6068, dtype="float32") /* ty=Tensor[(810), float32] */;
  %1026 = %1017.0;
  %1027 = cast(%1026, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %1028 = reshape(%1024, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %1029 = reshape(%1025, newshape=[810]) /* ty=Tensor[(810), float32] */;
  %1030 = reshape(%1027, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float32] */;
  %1031 = @func_5571(%1028, %1029, %1030) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) */;
  %1032 = %1020.0;
  %1033 = %1023.4;
  %1034 = %1031.1;
  %1035 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
  (%1026, %1032, meta[relay.Constant][42] /* ty=Tensor[(160), float64] */, %1033, %var_6061, %1034, %var_6067, %var_6068, %1035)
}

def @func_1896() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %1036 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %1037 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%1036, %1037)
}

def @func_3976() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) {
  %1038 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %1039 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %1040 = %1038.0;
  %1041 = %1039.0;
  %1042 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
  (%1040, %1041, %1042)
}

def @func_8416() -> (Tensor[(10, 7, 2), float32],) {
  %1043 = @func_6876() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
  %1044 = %1043.0;
  (%1044,)
}

def @func_9719(%var_9700: int8) -> Tensor[(11, 6, 15), float32] {
  %1045 = cast(%var_9700, dtype="bool") /* ty=bool */;
  %1046 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 6, 15), int8] */, dtype="bool") /* ty=Tensor[(11, 6, 15), bool] */;
  %1047 = less_equal(%1045, %1046) /* ty=Tensor[(11, 6, 15), bool] */;
  %1048 = cast(%1047, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
  sinh(%1048) /* ty=Tensor[(11, 6, 15), float32] */
}

def @func_6513() -> (Tensor[(10, 7, 2), float64],) {
  %1049 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1050 = %1049.1;
  (%1050,)
}

def @func_2680(%var_2636: Tensor[(12), float32], %var_2637: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) {
  %1051 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %1052 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %1053 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %1054 = cast(%var_2636, dtype="float32") /* ty=Tensor[(12), float32] */;
  %1055 = cast(%var_2637, dtype="int64") /* ty=int64 */;
  %1056 = %1053.2;
  %1057 = cast(%1056, dtype="int32") /* ty=Tensor[(56), int32] */;
  %1058 = reshape(%1054, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
  %1059 = reshape(%1055, newshape=[]) /* ty=int64 */;
  %1060 = reshape(%1057, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %1061 = @func_1360(%1058, %1059, %1060) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %1062 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %1063 = %1051.0;
  %1064 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
  %1065 = %1052.0;
  %1066 = %1061.4;
  %1067 = %1062.3;
  (%1063, %1064, %1065, %1056, %1066, %var_2636, %var_2637, %1067)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3253(%var_3251: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
  @func_3250(%var_3251) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */
}

def @func_9167() -> (Tensor[(1, 9), bool],) {
  %0 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
  (%0,)
}

def @func_5329(%var_5326: Tensor[(4, 2, 15), float32], %var_5327: Tensor[(12), float32], %var_5328: Tensor[(4, 2, 15), bool]) -> (Tensor[(10, 7, 2), float64], Tensor[(12), float32], int64, Tensor[(7, 2, 4), int32], Tensor[(4, 2, 15), float32], Tensor[(10, 7, 2), float32], Tensor[(4, 2, 15), uint8]) {
  %35 = fn (%var_5250: Tensor[(4, 2, 15), float32], %var_5254: Tensor[(12), float32], %var_5310: Tensor[(4, 2, 15), bool]) -> (Tensor[(10, 7, 2), float64], Tensor[(12), float32], int64, Tensor[(7, 2, 4), int32], Tensor[(4, 2, 15), float32], Tensor[(10, 7, 2), float32], Tensor[(4, 2, 15), uint8]) {
    %1 = cast(%var_5254, dtype="float32") /* ty=Tensor[(12), float32] */;
    %2 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %3 = reshape(%1, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %4 = reshape(%2, newshape=[]) /* ty=int64 */;
    %5 = @func_2680(%3, %4) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) */;
    %6 = %5.0;
    %7 = cast(%6, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %8 = reshape(%7, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %9 = @func_1070(%8) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %10 = cast(%var_5250, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
    %11 = asinh(%10) /* ty=Tensor[(4, 2, 15), float32] */;
    %12 = cast(%11, dtype="float64") /* ty=Tensor[(4, 2, 15), float64] */;
    %13 = acos(%12) /* ty=Tensor[(4, 2, 15), float64] */;
    %14 = cast(%11, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %18 = cast(%13, dtype="float64") /* ty=Tensor[(4, 2, 15), float64] */;
    %19 = cos(%18) /* ty=Tensor[(4, 2, 15), float64] */;
    %20 = cast(%19, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
    %21 = sinh(%20) /* ty=Tensor[(4, 2, 15), float32] */;
    %22 = cast(%19, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%21, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %26 = logical_or(%24, %25) /* ty=Tensor[(4, 2, 15), bool] */;
    %27 = cast(%var_5310, dtype="uint8") /* ty=Tensor[(4, 2, 15), uint8] */;
    %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%26, dtype="uint8") /* ty=Tensor[(4, 2, 15), uint8] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %31 = %9.1;
    %32 = divide(%16, %17) /* ty=Tensor[(4, 2, 15), float32] */;
    %33 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
    %34 = bitwise_xor(%29, %30) /* ty=Tensor[(4, 2, 15), uint8] */;
    (%6, %var_5254, 6 /* ty=int64 */, %31, %32, %33, %34)
  };
  %35(%var_5326, %var_5327, %var_5328) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(12), float32], int64, Tensor[(7, 2, 4), int32], Tensor[(4, 2, 15), float32], Tensor[(10, 7, 2), float32], Tensor[(4, 2, 15), uint8]) */
}

def @func_6861() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(64), float64]) {
  %44 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(64), float64]) {
    %36 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %39 = reshape(%37, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %40 = reshape(%38, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float64] */;
    %41 = @func_5461(%39, %40) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) */;
    %42 = %36.0;
    %43 = %41.0;
    (%42, %43, meta[relay.Constant][0] /* ty=Tensor[(64), float64] */)
  };
  %44() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(64), float64]) */
}

def @func_1657(%var_1654: Tensor[(5, 7, 9), uint32], %var_1655: Tensor[(12), float32], %var_1656: Tensor[(56), int32]) -> (Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) {
  %64 = fn (%var_1611: Tensor[(5, 7, 9), uint32], %var_1637: Tensor[(12), float32], %var_1639: Tensor[(56), int32]) -> (Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) {
    %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 7, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 7, 9), uint32] */;
    %46 = shape_of(%var_1611, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%var_1611, dtype="uint32") /* ty=Tensor[(5, 7, 9), uint32] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %49 = cast(%var_1611, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    %50 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %51 = cast(%var_1637, dtype="float32") /* ty=Tensor[(12), float32] */;
    %52 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %53 = cast(%var_1639, dtype="int32") /* ty=Tensor[(56), int32] */;
    %54 = reshape(%51, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
    %55 = reshape(%52, newshape=[]) /* ty=int64 */;
    %56 = reshape(%53, newshape=[56]) /* ty=Tensor[(56), int32] */;
    %57 = @func_1360(%54, %55, %56) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
    %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 7, 9), uint32] */, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    %59 = logical_xor(%47, %48) /* ty=Tensor[(5, 7, 9), uint32] */;
    %60 = acosh(%49) /* ty=Tensor[(5, 7, 9), float32] */;
    %61 = %50.0;
    %62 = %57.1;
    %63 = acos(%58) /* ty=Tensor[(5, 7, 9), float32] */;
    (%59, %60, %61, %62, %var_1637, 3 /* ty=int64 */, %var_1639, %63)
  };
  %64(%var_1654, %var_1655, %var_1656) /* ty=(Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) */
}

def @func_2523() -> Tensor[(10, 7, 2), float64] {
  %65 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %65.2
}

def @func_4222(%var_4220: uint32, %var_4221: Tensor[(5, 2, 5), uint32]) -> Tensor[(5, 2, 5), uint32] {
  @func_4218(%var_4220, %var_4221) /* ty=Tensor[(5, 2, 5), uint32] */
}

def @func_10313() -> Tensor[(10, 7, 2), float64] {
  %67 = fn () -> Tensor[(10, 7, 2), float64] {
    %66 = @func_8315() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %66.0
  };
  %67() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_9722(%var_9720: int8) -> Tensor[(11, 6, 15), float32] {
  @func_9719(%var_9720) /* ty=Tensor[(11, 6, 15), float32] */
}

def @func_7261() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) {
  %68 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %69 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %70 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %71 = %68.1;
  %72 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %73 = %69.2;
  %74 = %70.1;
  (%71, %72, %73, %74)
}

def @func_10120(%var_10118: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], Tensor[(7, 126), float32], Tensor[(10, 7, 2), float64], int64) {
  @func_10117(%var_10118) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], Tensor[(7, 126), float32], Tensor[(10, 7, 2), float64], int64) */
}

def @func_8220() -> (Tensor[(10, 7, 2), float64],) {
  @func_8218() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_4095() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_2237() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  %75 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %76 = %75.0;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %78 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %79 = asin(%77) /* ty=Tensor[(10, 7, 2), float32] */;
  %80 = %78.0;
  (%79, %80)
}

def @func_8927() -> Tensor[(10, 7, 2), float64] {
  %81 = @func_8315() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %81.0
}

def @func_1938() -> Tensor[(10, 7, 2), float64] {
  @func_935() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_3933() -> (Tensor[(10, 7, 2), float64],) {
  %82 = @func_1401() /* ty=Tensor[(10, 7, 2), float64] */;
  (%82,)
}

def @func_5055(%var_5052: float64, %var_5053: Tensor[(11, 11, 11), float64], %var_5054: Tensor[(490), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(5, 2, 5), uint32], Tensor[(50), uint32], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
  %95 = fn (%var_5034: float64, %var_5035: Tensor[(11, 11, 11), float64], %var_5044: Tensor[(490), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(5, 2, 5), uint32], Tensor[(50), uint32], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
    %83 = cast(%var_5034, dtype="float64") /* ty=float64 */;
    %84 = cast(%var_5035, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
    %85 = cast(%var_5034, dtype="uint32") /* ty=uint32 */;
    %86 = cast(meta[relay.Constant][2] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %87 = reshape(%85, newshape=[]) /* ty=uint32 */;
    %88 = reshape(%86, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
    %89 = cast(%var_5044, dtype="float64") /* ty=Tensor[(490), float64] */;
    %90 = reshape(%89, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
    %91 = @func_2508(%90) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
    %92 = mod(%83, %84) /* ty=Tensor[(11, 11, 11), float64] */;
    %93 = @func_4218(%87, %88) /* ty=Tensor[(5, 2, 5), uint32] */;
    %94 = %91.1;
    (%92, %93, meta[relay.Constant][2] /* ty=Tensor[(50), uint32] */, %94, %var_5044)
  };
  %95(%var_5052, %var_5053, %var_5054) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(5, 2, 5), uint32], Tensor[(50), uint32], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */
}

def @func_9870() -> (Tensor[(10, 7, 2), float64],) {
  %98 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %96 = @func_6164() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %97 = %96.0;
    (%97,)
  };
  %98() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_7153(%var_7151: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) {
  @func_7150(%var_7151) /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) */
}

def @func_1030(%var_1028: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) {
  @func_1027(%var_1028) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */
}

def @func_2810(%var_2808: Tensor[(9, 1, 15), bool], %var_2809: Tensor[(9, 13, 15), bool]) -> (Tensor[(9, 13, 15), bool],) {
  %102 = fn (%var_2796: Tensor[(9, 1, 15), bool], %var_2797: Tensor[(9, 13, 15), bool]) -> (Tensor[(9, 13, 15), bool],) {
    %99 = cast(%var_2796, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
    %100 = cast(%var_2797, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
    %101 = logical_and(%99, %100) /* ty=Tensor[(9, 13, 15), bool] */;
    (%101,)
  };
  %102(%var_2808, %var_2809) /* ty=(Tensor[(9, 13, 15), bool],) */
}

def @func_5785() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64]) {
  @func_5783() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64]) */
}

def @func_3386() -> (Tensor[(10, 7, 2), float32],) {
  %103 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  (%103,)
}

def @func_7439() -> Tensor[(1, 9), bool] {
  @func_7437() /* ty=Tensor[(1, 9), bool] */
}

def @func_8282() -> (Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %114 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %104 = @func_5032() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %105 = %104.1;
    %106 = cast(%105, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %107 = reshape(%106, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %108 = @func_1070(%107) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %109 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
    %110 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
    %111 = %108.1;
    %112 = %109.0;
    %113 = %110.0;
    (%105, %111, %112, %113)
  };
  %114() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_7527() -> (Tensor[(160), float64], Tensor[(10, 7, 2), float64]) {
  %118 = fn () -> (Tensor[(160), float64], Tensor[(10, 7, 2), float64]) {
    %115 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
    %116 = %115.3;
    %117 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
    (%116, %117)
  };
  %118() /* ty=(Tensor[(160), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9918() -> Tensor[(5, 14, 7), float64] {
  %119 = @func_7885() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) */;
  %119.1
}

def @func_1571() -> (Tensor[(10, 7, 2), float64],) {
  @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_9581() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) {
  %126 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) {
    %120 = @func_5205() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %121 = %120.0;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %123 = reshape(%122, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %124 = @func_1070(%123) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %125 = %124.0;
    (%121, %125)
  };
  %126() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) */
}

def @func_7150(%var_7131: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) {
  %127 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
  %128 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %129 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %130 = cast(%var_7131, dtype="int64") /* ty=Tensor[(231), int64] */;
  %131 = reshape(%128, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %132 = reshape(%129, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %133 = reshape(%130, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %134 = @func_4617(%131, %132, %133) /* ty=(Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) */;
  %135 = %127.2;
  %136 = %134.0;
  (%135, %136, %var_7131)
}

def @func_2525() -> Tensor[(10, 7, 2), float64] {
  @func_2523() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_2428() -> Tensor[(10, 7, 2), float32] {
  %137 = @func_2237() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
  %137.0
}

def @func_6486() -> Tensor[(10, 7, 2), float64] {
  @func_6484() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_9188() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_9186() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_1137() -> Tensor[(10, 7, 2), float64] {
  %138 = fn () -> Tensor[(10, 7, 2), float64] {
    @func_668() /* ty=Tensor[(10, 7, 2), float64] */
  };
  %138() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_6965() -> (Tensor[(10, 7, 2), float64], int64) {
  %143 = fn () -> (Tensor[(10, 7, 2), float64], int64) {
    %139 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %140 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
    %141 = %139.2;
    %142 = %140.3;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(10, 7, 2), float64], int64) */
}

def @func_8377() -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float32]) {
  %147 = fn () -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float32]) {
    %144 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
    %145 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
    %146 = %144.0;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float32]) */
}

def @func_1940() -> Tensor[(10, 7, 2), float64] {
  @func_1938() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_6838(%var_6831: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) {
  %148 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %149 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %150 = cast(%var_6831, dtype="int64") /* ty=Tensor[(231), int64] */;
  %151 = reshape(%148, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %152 = reshape(%149, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %153 = reshape(%150, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), int64] */;
  %154 = @func_4617(%151, %152, %153) /* ty=(Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) */;
  %155 = @func_4266() /* ty=Tensor[(10, 7, 2), float64] */;
  %156 = %154.3;
  (%155, %156, %var_6831)
}

def @func_2819() -> (Tensor[(10, 7, 2), float64],) {
  @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_8418() -> (Tensor[(10, 7, 2), float32],) {
  @func_8416() /* ty=(Tensor[(10, 7, 2), float32],) */
}

def @func_9634(%var_9633: Tensor[(2, 3, 6), float64]) -> Tensor[(2, 3, 6), float64] {
  %161 = fn (%var_9628: Tensor[(2, 3, 6), float64]) -> Tensor[(2, 3, 6), float64] {
    %157 = cast(%var_9628, dtype="float64") /* ty=Tensor[(2, 3, 6), float64] */;
    %158 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 3, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 6), float64] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%159, %160) /* ty=Tensor[(2, 3, 6), float64] */
  };
  %161(%var_9633) /* ty=Tensor[(2, 3, 6), float64] */
}

def @func_9907() -> Tensor[(12, 9, 14), float64] {
  @func_9905() /* ty=Tensor[(12, 9, 14), float64] */
}

def @func_10117(%var_10112: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], Tensor[(7, 126), float32], Tensor[(10, 7, 2), float64], int64) {
  %162 = @func_6513() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 126), float32] */, dtype="float32") /* ty=Tensor[(7, 126), float32] */;
  %164 = reshape(%163, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), float32] */;
  %165 = cast(%var_10112, dtype="int64") /* ty=int64 */;
  %166 = reshape(%165, newshape=[]) /* ty=int64 */;
  %167 = @func_3250(%166) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
  %168 = %162.0;
  %169 = @func_8854(%164) /* ty=Tensor[(14, 9, 7), float32] */;
  %170 = %167.0;
  (%168, %169, meta[relay.Constant][4] /* ty=Tensor[(7, 126), float32] */, %170, %var_10112)
}

def @func_4417(%var_4330: Tensor[(16, 14, 3), uint16], %var_4331: Tensor[(16, 14, 3), uint16], %var_4375: Tensor[(16, 14, 3), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) {
  %171 = cast(%var_4331, dtype="uint16") /* ty=Tensor[(16, 14, 3), uint16] */;
  %172 = shape_of(%var_4330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_4330, dtype="uint16") /* ty=Tensor[(16, 14, 3), uint16] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %175 = subtract(%173, %174) /* ty=Tensor[(16, 14, 3), uint16] */;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %177 = atan(%176) /* ty=Tensor[(16, 14, 3), float64] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %179 = acos(%178) /* ty=Tensor[(16, 14, 3), float32] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %181 = sqrt(%180) /* ty=Tensor[(16, 14, 3), float64] */;
  %182 = cast(%var_4375, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%181, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %186 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %187 = %186.1;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %189 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
  %190 = multiply(%184, %185) /* ty=Tensor[(16, 14, 3), float64] */;
  %191 = erf(%188) /* ty=Tensor[(49, 10), float32] */;
  (%189, %190, %191)
}

def @func_2764() -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) {
  %199 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) {
    %192 = cast(meta[relay.Constant][5] /* ty=Tensor[(49, 10), float64] */, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
    %193 = reshape(%192, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
    %194 = @func_2508(%193) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
    %195 = %194.1;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
    %197 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
    %198 = sinh(%196) /* ty=Tensor[(5, 14, 7), float64] */;
    (%197, meta[relay.Constant][5] /* ty=Tensor[(49, 10), float64] */, %198)
  };
  %199() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */
}

def @func_2059() -> (Tensor[(10, 7, 2), float64],) {
  %200 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  (%200,)
}

def @func_2510(%var_2509: Tensor[(5, 14, 7), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) {
  %210 = fn (%var_2489: Tensor[(5, 14, 7), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) {
    %201 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %202 = cast(%var_2489, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
    %203 = atan(%202) /* ty=Tensor[(5, 14, 7), float64] */;
    %204 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 14, 7), float64] */, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
    %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%203, dtype="int16") /* ty=Tensor[(5, 14, 7), int16] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %208 = %201.0;
    %209 = bitwise_or(%206, %207) /* ty=Tensor[(5, 14, 7), int16] */;
    (%208, %209)
  };
  %210(%var_2509) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */
}

def @func_1756() -> (Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_6248() -> (Tensor[(10, 7, 2), float64],) {
  %212 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %211 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
    (%211,)
  };
  %212() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_1489() -> Tensor[(10, 7, 2), float64] {
  %213 = fn () -> Tensor[(10, 7, 2), float64] {
    @func_1136() /* ty=Tensor[(10, 7, 2), float64] */
  };
  %213() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_1898() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_8763() -> (Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) {
  @func_8761() /* ty=(Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_5414() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) {
  %221 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) {
    %214 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %215 = cast(meta[relay.Constant][7] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %216 = reshape(%215, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %217 = @func_3118(%216) /* ty=(Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %218 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
    %219 = %214.1;
    %220 = %217.1;
    (%218, %219, %220, meta[relay.Constant][7] /* ty=Tensor[(160), float64] */)
  };
  %221() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */
}

def @func_2683(%var_2681: Tensor[(12), float32], %var_2682: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) {
  %239 = fn (%var_2636: Tensor[(12), float32], %var_2637: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) {
    %222 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %223 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %224 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %225 = cast(%var_2636, dtype="float32") /* ty=Tensor[(12), float32] */;
    %226 = cast(%var_2637, dtype="int64") /* ty=int64 */;
    %227 = %224.2;
    %228 = cast(%227, dtype="int32") /* ty=Tensor[(56), int32] */;
    %229 = reshape(%225, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
    %230 = reshape(%226, newshape=[]) /* ty=int64 */;
    %231 = reshape(%228, newshape=[56]) /* ty=Tensor[(56), int32] */;
    %232 = @func_1360(%229, %230, %231) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
    %233 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
    %234 = %222.0;
    %235 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
    %236 = %223.0;
    %237 = %232.4;
    %238 = %233.3;
    (%234, %235, %236, %227, %237, %var_2636, %var_2637, %238)
  };
  %239(%var_2681, %var_2682) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, int64) */
}

def @func_2430() -> Tensor[(10, 7, 2), float32] {
  @func_2428() /* ty=Tensor[(10, 7, 2), float32] */
}

def @func_7460(%var_7448: Tensor[(6, 8, 9), float32]) -> Tensor[(6, 8, 9), float32] {
  %240 = cast(%var_7448, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  tan(%240) /* ty=Tensor[(6, 8, 9), float32] */
}

def @func_9320() -> Tensor[(10, 7, 2), float64] {
  @func_9318() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_3066() -> Tensor[(10, 7, 2), float64] {
  %242 = fn () -> Tensor[(10, 7, 2), float64] {
    %241 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %241.1
  };
  %242() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_971() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %243 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %244 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %245 = %243.1;
  (%244, %245)
}

def @func_1310() -> Tensor[(10, 7, 2), float64] {
  @func_1308() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_5176(%var_5174: float32, %var_5175: Tensor[(15, 9, 6), float32]) -> (Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) {
  %254 = fn (%var_5145: float32, %var_5146: Tensor[(15, 9, 6), float32]) -> (Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) {
    %246 = cast(%var_5145, dtype="float32") /* ty=float32 */;
    %247 = cast(%var_5146, dtype="float32") /* ty=Tensor[(15, 9, 6), float32] */;
    %248 = cast(%var_5145, dtype="int64") /* ty=int64 */;
    %249 = reshape(%248, newshape=[]) /* ty=int64 */;
    %250 = @func_3250(%249) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
    %251 = power(%246, %247) /* ty=Tensor[(15, 9, 6), float32] */;
    %252 = %250.6;
    %253 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
    (%251, %252, %253)
  };
  %254(%var_5174, %var_5175) /* ty=(Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_7963() -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %264 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %255 = cast(meta[relay.Constant][8] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %256 = reshape(%255, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float64] */;
    %257 = @func_5132(%256) /* ty=(Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) */;
    %258 = @func_4294() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %259 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %260 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
    %261 = %257.1;
    %262 = %258.0;
    %263 = %259.0;
    (%260, %261, meta[relay.Constant][8] /* ty=Tensor[(784), float64] */, %262, %263)
  };
  %264() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9590() -> (Tensor[(56), int32],) {
  @func_9588() /* ty=(Tensor[(56), int32],) */
}

def @func_3250(%var_3222: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) {
  %265 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %266 = cast(%var_3222, dtype="int64") /* ty=int64 */;
  %267 = %265.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %269 = reshape(%266, newshape=[]) /* ty=int64 */;
  %270 = reshape(%268, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %271 = @func_1110(%269, %270) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %272 = cast(%267, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %273 = reshape(%272, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %274 = @func_1027(%273) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %275 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %277 = reshape(%276, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %278 = @func_2508(%277) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
  %279 = %271.4;
  %280 = %274.1;
  %281 = %275.0;
  %282 = %278.1;
  (%267, %279, %var_3222, %280, %281, %282, meta[relay.Constant][9] /* ty=Tensor[(490), float64] */)
}

def @func_9228() -> (Tensor[(10, 7, 2), float64],) {
  %285 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %283 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %284 = %283.1;
    (%284,)
  };
  %285() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_1027(%var_990: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) {
  %286 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %287 = cast(%var_990, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %291 = cast(%286, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %292 = shape_of(%var_990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_990, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %295 = cast(%var_990, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %296 = maximum(%289, %290) /* ty=Tensor[(10, 7, 2), int64] */;
  %297 = add(%293, %294) /* ty=Tensor[(10, 7, 2), uint8] */;
  %298 = cos(%295) /* ty=Tensor[(10, 7, 2), float64] */;
  (%296, %297, %298)
}

def @func_3562() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %299 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %300 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %301 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %302 = %299.1;
  %303 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %304 = %300.0;
  %305 = %301.0;
  (%302, %303, %304, %305)
}

def @func_3978() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) {
  @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */
}

def @func_5656() -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) {
  %309 = fn () -> (Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) {
    %306 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
    %307 = %306.2;
    %308 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
    (%307, %308)
  };
  %309() /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) */
}

def @func_9719(%var_9700: int8) -> Tensor[(11, 6, 15), float32] {
  %310 = cast(%var_9700, dtype="bool") /* ty=bool */;
  %311 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 6, 15), int8] */, dtype="bool") /* ty=Tensor[(11, 6, 15), bool] */;
  %312 = less_equal(%310, %311) /* ty=Tensor[(11, 6, 15), bool] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
  sinh(%313) /* ty=Tensor[(11, 6, 15), float32] */
}

def @func_10348(%var_10346: uint16, %var_10347: Tensor[(10, 8, 9), uint16]) -> Tensor[(10, 8, 9), bool] {
  %316 = fn (%var_10337: uint16, %var_10338: Tensor[(10, 8, 9), uint16]) -> Tensor[(10, 8, 9), bool] {
    %314 = cast(%var_10337, dtype="bool") /* ty=bool */;
    %315 = cast(%var_10338, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
    less_equal(%314, %315) /* ty=Tensor[(10, 8, 9), bool] */
  };
  %316(%var_10346, %var_10347) /* ty=Tensor[(10, 8, 9), bool] */
}

def @func_8606() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_8604() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_3120(%var_3119: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) {
  %321 = fn (%var_3100: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) {
    %317 = cast(%var_3100, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
    %318 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %319 = asinh(%317) /* ty=Tensor[(16, 5, 2), float64] */;
    %320 = %318.0;
    (%319, %320)
  };
  %321(%var_3119) /* ty=(Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9502() -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(49, 10), float64]) {
  @func_9500() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(49, 10), float64]) */
}

def @func_1896() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %322 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %323 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%322, %323)
}

def @func_4882() -> Tensor[(10, 7, 2), float64] {
  %324 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %324.0
}

def @func_7179(%var_7174: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], int64, int64) {
  %325 = cast(%var_7174, dtype="int64") /* ty=int64 */;
  %326 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %328 = reshape(%325, newshape=[]) /* ty=int64 */;
  %329 = reshape(%327, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %330 = @func_1110(%328, %329) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %331 = cast(%var_7174, dtype="int64") /* ty=int64 */;
  %332 = reshape(%331, newshape=[]) /* ty=int64 */;
  %333 = @func_5237(%332) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) */;
  %334 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  %335 = %330.1;
  %336 = %333.2;
  (%326, %334, %335, %var_7174, %336)
}

def @func_6794() -> (Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) {
  %347 = fn () -> (Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) {
    %337 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
    %338 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %339 = %337.0;
    %340 = cast(%339, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %341 = reshape(%338, newshape=[]) /* ty=int64 */;
    %342 = reshape(%340, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
    %343 = @func_1110(%341, %342) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %344 = %343.0;
    %345 = cast(%344, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
    %346 = log10(%345) /* ty=Tensor[(14, 9, 7), float32] */;
    (%339, 8 /* ty=int64 */, %346)
  };
  %347() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */
}

def @func_7010() -> Tensor[(10, 7, 2), float64] {
  @func_7008() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_9588() -> (Tensor[(56), int32],) {
  %348 = @func_5688() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) */;
  %349 = %348.4;
  (%349,)
}

def @func_4526(%var_4481: Tensor[(672), uint16], %var_4513: Tensor[(49, 10), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) {
  %350 = cast(%var_4481, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %351 = cast(%var_4481, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %352 = cast(%var_4481, dtype="float64") /* ty=Tensor[(672), float64] */;
  %353 = reshape(%350, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %354 = reshape(%351, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %355 = reshape(%352, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %356 = @func_4417(%353, %354, %355) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %357 = %356.2;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %359 = asin(%358) /* ty=Tensor[(49, 10), float32] */;
  %360 = cast(meta[relay.Constant][11] /* ty=Tensor[(49, 10), float32] */, dtype="int64") /* ty=Tensor[(49, 10), int64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(2), int32] */;
  %362 = cast(%359, dtype="int64") /* ty=Tensor[(49, 10), int64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %364 = cast(%var_4513, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %365 = shape_of(%357, dtype="int32") /* ty=Tensor[(2), int32] */;
  %366 = cast(%357, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %368 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %369 = bitwise_and(%362, %363) /* ty=Tensor[(49, 10), int64] */;
  %370 = floor_mod(%366, %367) /* ty=Tensor[(49, 10), float64] */;
  (%368, %var_4481, %369, %370)
}

def @func_3026(%var_3024: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(1, 140), float64], int64) {
  @func_3023(%var_3024) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(1, 140), float64], int64) */
}

def @func_10211(%var_10210: Tensor[(18, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(2, 3, 6), float64], Tensor[(18, 2), float64]) {
  %376 = fn (%var_10207: Tensor[(18, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(2, 3, 6), float64], Tensor[(18, 2), float64]) {
    %371 = @func_9580() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), bool]) */;
    %372 = cast(%var_10207, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
    %373 = reshape(%372, newshape=[2, 3, 6]) /* ty=Tensor[(2, 3, 6), float64] */;
    %374 = %371.0;
    %375 = @func_9632(%373) /* ty=Tensor[(2, 3, 6), float64] */;
    (%374, %375, %var_10207)
  };
  %376(%var_10210) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(2, 3, 6), float64], Tensor[(18, 2), float64]) */
}

def @func_5914() -> (Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) {
  %389 = fn () -> (Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) {
    %377 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %378 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %379 = cast(meta[relay.Constant][13] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %380 = reshape(%378, newshape=[]) /* ty=uint32 */;
    %381 = reshape(%379, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
    %382 = @func_4218(%380, %381) /* ty=Tensor[(5, 2, 5), uint32] */;
    %383 = cast(%382, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
    %384 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(50), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %385 = cast(meta[relay.Constant][13] /* ty=Tensor[(50), uint32] */, dtype="float64") /* ty=Tensor[(50), float64] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), float64] */;
    %387 = %377.1;
    %388 = mod(%385, %386) /* ty=Tensor[(50), float64] */;
    (%387, meta[relay.Constant][12] /* ty=uint32 */, %388)
  };
  %389() /* ty=(Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) */
}

def @func_4141() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %390 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %391 = %390.2;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %393 = @func_3153() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %394 = exp(%392) /* ty=Tensor[(10, 7, 2), float64] */;
  %395 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
  %396 = %393.2;
  (%394, %395, %396)
}

def @func_2817() -> (Tensor[(10, 7, 2), float64],) {
  %397 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
  (%397,)
}

def @func_827() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %398 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
  %400 = erf(%399) /* ty=Tensor[(10, 7, 2), float32] */;
  %401 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%400, %401)
}

def @func_7887() -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) {
  @func_7885() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) */
}

def @func_6645(%var_6643: Tensor[(6, 2), float32], %var_6644: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(6, 2), float32], int64, Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(672), uint16], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_6641(%var_6643, %var_6644) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(6, 2), float32], int64, Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(672), uint16], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_1569() -> (Tensor[(10, 7, 2), float64],) {
  %402 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  (%402,)
}

def @func_4093() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %403 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
  %404 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %405 = %403.0;
  %406 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  (%404, %405, %406)
}

def @func_6434() -> (Tensor[(10, 7, 2), float64],) {
  %409 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %407 = @func_3827() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %408 = %407.0;
    (%408,)
  };
  %409() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_6932() -> (Tensor[(10, 7, 2), float64],) {
  %412 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %410 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
    %411 = %410.0;
    (%411,)
  };
  %412() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_7463(%var_7461: Tensor[(6, 8, 9), float32]) -> Tensor[(6, 8, 9), float32] {
  @func_7460(%var_7461) /* ty=Tensor[(6, 8, 9), float32] */
}

def @func_6484() -> Tensor[(10, 7, 2), float64] {
  %413 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %413.2
}

def @func_9169() -> (Tensor[(1, 9), bool],) {
  @func_9167() /* ty=(Tensor[(1, 9), bool],) */
}

def @func_5461(%var_5441: Tensor[(8, 4, 2), float64], %var_5454: Tensor[(8, 4, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) {
  %414 = cast(%var_5441, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %415 = cos(%414) /* ty=Tensor[(8, 4, 2), float64] */;
  %416 = cast(%var_5454, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %421 = greater_equal(%418, %419) /* ty=Tensor[(8, 4, 2), bool] */;
  (%420, %421)
}

def @func_2239() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  @func_2237() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */
}

def @func_752() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %424 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %422 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
    %423 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
    (%422, %423)
  };
  %424() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_4530(%var_4528: Tensor[(672), uint16], %var_4529: Tensor[(49, 10), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) {
  @func_4526(%var_4528, %var_4529) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) */
}

def @func_1308() -> Tensor[(10, 7, 2), float64] {
  %425 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
  %425.1
}

def @func_4707() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %430 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %426 = @func_4294() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %427 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %428 = %426.0;
    %429 = %427.1;
    (%428, %429)
  };
  %430() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_8317() -> (Tensor[(10, 7, 2), float64],) {
  @func_8315() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_8487() -> Tensor[(7, 2, 4), float32] {
  @func_8485() /* ty=Tensor[(7, 2, 4), float32] */
}

def @func_669() -> Tensor[(10, 7, 2), float64] {
  %432 = fn () -> Tensor[(10, 7, 2), float64] {
    %431 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    atanh(%431) /* ty=Tensor[(10, 7, 2), float64] */
  };
  %432() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_8854(%var_8835: Tensor[(14, 9, 7), float32]) -> Tensor[(14, 9, 7), float32] {
  %433 = @func_8761() /* ty=(Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) */;
  %434 = %433.0;
  %435 = cast(%var_8835, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%437, %438) /* ty=Tensor[(14, 9, 7), float32] */
}

def @func_9548(%var_9538: Tensor[(1, 12), float32], %var_9539: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 7, 9), float32], Tensor[(315), uint32], Tensor[(1, 12), float32], Tensor[(56), int32]) {
  %439 = @func_7845() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %440 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), uint32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %441 = cast(%var_9538, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %442 = cast(%var_9539, dtype="int32") /* ty=Tensor[(56), int32] */;
  %443 = reshape(%440, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), uint32] */;
  %444 = reshape(%441, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %445 = reshape(%442, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %446 = @func_1653(%443, %444, %445) /* ty=(Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) */;
  %447 = %439.0;
  %448 = %446.7;
  (%447, %448, meta[relay.Constant][15] /* ty=Tensor[(315), uint32] */, %var_9538, %var_9539)
}

def @func_6701(%var_6699: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float32],) {
  @func_6698(%var_6699) /* ty=(Tensor[(5, 15, 6), float32],) */
}

def @func_9414() -> Tensor[(5, 14, 7), float64] {
  %450 = fn () -> Tensor[(5, 14, 7), float64] {
    %449 = @func_7885() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) */;
    %449.1
  };
  %450() /* ty=Tensor[(5, 14, 7), float64] */
}

def @func_5206() -> (Tensor[(10, 7, 2), float64],) {
  %452 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %451 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
    (%451,)
  };
  %452() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_1364(%var_1361: Tensor[(1, 4, 3), float32], %var_1362: int64, %var_1363: Tensor[(56), int32]) -> (Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
  %478 = fn (%var_1328: Tensor[(1, 4, 3), float32], %var_1340: int64, %var_1354: Tensor[(56), int32]) -> (Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
    %453 = cast(%var_1328, dtype="float32") /* ty=Tensor[(1, 4, 3), float32] */;
    %454 = sinh(%453) /* ty=Tensor[(1, 4, 3), float32] */;
    %455 = cast(%454, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
    %456 = shape_of(%var_1328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%var_1328, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %459 = cast(%var_1340, dtype="int64") /* ty=int64 */;
    %460 = cast(meta[relay.Constant][16] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %461 = reshape(%459, newshape=[]) /* ty=int64 */;
    %462 = reshape(%460, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
    %463 = @func_1110(%461, %462) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %464 = cast(%var_1340, dtype="int64") /* ty=int64 */;
    %465 = cast(meta[relay.Constant][16] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %466 = reshape(%464, newshape=[]) /* ty=int64 */;
    %467 = reshape(%465, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
    %468 = @func_1110(%466, %467) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %469 = cast(%var_1354, dtype="int32") /* ty=Tensor[(56), int32] */;
    %470 = cast(%var_1354, dtype="int32") /* ty=Tensor[(56), int32] */;
    %471 = reshape(%469, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %472 = reshape(%470, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %473 = @func_896(%471, %472) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %474 = power(%457, %458) /* ty=Tensor[(?, 4, 3), float64] */;
    %475 = %463.1;
    %476 = %468.1;
    %477 = %473.2;
    (%474, %475, %var_1340, meta[relay.Constant][16] /* ty=Tensor[(140), float64] */, %476, %477, %var_1354)
  };
  %478(%var_1361, %var_1362, %var_1363) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */
}

def @func_8857(%var_8855: Tensor[(14, 9, 7), float32]) -> Tensor[(14, 9, 7), float32] {
  @func_8854(%var_8855) /* ty=Tensor[(14, 9, 7), float32] */
}

def @func_9063() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %482 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %479 = @func_6433() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %480 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
    %481 = %479.0;
    (%480, %481)
  };
  %482() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_3828() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %487 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %483 = @func_3562() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
    %484 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %485 = %483.2;
    %486 = %484.0;
    (%485, %486)
  };
  %487() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_6841(%var_6839: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) {
  @func_6838(%var_6839) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) */
}

def @func_5575(%var_5572: Tensor[(490), float32], %var_5573: Tensor[(810), float32], %var_5574: Tensor[(10, 7, 2), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) {
  %523 = fn (%var_5506: Tensor[(490), float32], %var_5510: Tensor[(810), float32], %var_5550: Tensor[(10, 7, 2), float32]) -> (Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) {
    %488 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
    %489 = cast(%var_5506, dtype="float32") /* ty=Tensor[(490), float32] */;
    %490 = reshape(%488, newshape=[672]) /* ty=Tensor[(672), uint16] */;
    %491 = reshape(%489, newshape=[49, 10]) /* ty=Tensor[(49, 10), float32] */;
    %492 = @func_4526(%490, %491) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(49, 10), int64], Tensor[(49, 10), float64]) */;
    %493 = cast(-0.054611f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %494 = cast(%var_5510, dtype="float32") /* ty=Tensor[(810), float32] */;
    %495 = reshape(%493, newshape=[]) /* ty=float32 */;
    %496 = reshape(%494, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float32] */;
    %497 = @func_5173(%495, %496) /* ty=(Tensor[(15, 9, 6), float32], Tensor[(490), float64], Tensor[(10, 7, 2), float64]) */;
    %498 = cast(-0.054611f /* ty=float32 */, dtype="int64") /* ty=int64 */;
    %499 = %492.0;
    %500 = cast(%499, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %501 = reshape(%498, newshape=[]) /* ty=int64 */;
    %502 = reshape(%500, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
    %503 = @func_1110(%501, %502) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %504 = cast(meta[relay.Constant][18] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
    %505 = cast(meta[relay.Constant][19] /* ty=Tensor[(1755), bool] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %506 = reshape(%504, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), bool] */;
    %507 = reshape(%505, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), bool] */;
    %508 = @func_2807(%506, %507) /* ty=(Tensor[(9, 13, 15), bool],) */;
    %509 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %510 = %509.2;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
    %512 = acosh(%511) /* ty=Tensor[(10, 7, 2), float32] */;
    %513 = cast(%var_5550, dtype="int8") /* ty=Tensor[(10, 7, 2), int8] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%512, dtype="int8") /* ty=Tensor[(10, 7, 2), int8] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %517 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %518 = %497.1;
    %519 = %503.0;
    %520 = %508.0;
    %521 = bitwise_or(%515, %516) /* ty=Tensor[(10, 7, 2), int8] */;
    %522 = %517.0;
    (%499, meta[relay.Constant][17] /* ty=Tensor[(672), uint16] */, %var_5506, %518, -0.054611f /* ty=float32 */, %var_5510, %519, %520, meta[relay.Constant][18] /* ty=Tensor[(135), bool] */, meta[relay.Constant][19] /* ty=Tensor[(1755), bool] */, %521, %522)
  };
  %523(%var_5572, %var_5573, %var_5574) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) */
}

def @func_3471() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %524 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %525 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %526 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
  %527 = %524.0;
  %528 = %525.1;
  (%526, %527, %528)
}

def @func_8819() -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) {
  @func_8817() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) */
}

def @func_9905() -> Tensor[(12, 9, 14), float64] {
  %529 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 14), float64] */;
  sinh(%529) /* ty=Tensor[(12, 9, 14), float64] */
}

def @func_9957(%var_9952: Tensor[(49, 10), float32]) -> (Tensor[(49, 10), float32], Tensor[(49, 10), float32]) {
  %530 = @func_8817() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) */;
  %531 = %530.1;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %533 = cast(%var_9952, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %534 = shape_of(%531, dtype="int32") /* ty=Tensor[(2), int32] */;
  %535 = cast(%531, dtype="float32") /* ty=Tensor[(49, 10), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %537 = cos(%532) /* ty=Tensor[(49, 10), float32] */;
  %538 = mod(%535, %536) /* ty=Tensor[(49, 10), float32] */;
  (%537, %538)
}

def @func_2193(%var_2192: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) {
  %556 = fn (%var_2162: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) {
    %539 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
    %540 = cast(%539, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %541 = reshape(%540, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %542 = @func_1027(%541) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
    %543 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %544 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %545 = cast(%var_2162, dtype="int32") /* ty=Tensor[(56), int32] */;
    %546 = cast(%var_2162, dtype="int32") /* ty=Tensor[(56), int32] */;
    %547 = reshape(%545, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %548 = reshape(%546, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %549 = @func_896(%547, %548) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %550 = %549.0;
    %551 = cast(%550, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
    %552 = %542.1;
    %553 = %543.1;
    %554 = %544.3;
    %555 = sin(%551) /* ty=Tensor[(7, 2, 4), float32] */;
    (%539, %552, %var_2162, %553, %554, %555)
  };
  %556(%var_2192) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) */
}

def @func_6641(%var_6577: Tensor[(6, 2), float32], %var_6578: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(6, 2), float32], int64, Tensor[(56), int32], Tensor[(10, 7, 2), int64], Tensor[(672), uint16], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %557 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %558 = @func_5413() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(160), float64]) */;
  %559 = %558.1;
  %560 = cast(%var_6577, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %561 = cast(%var_6578, dtype="int64") /* ty=int64 */;
  %562 = cast(meta[relay.Constant][21] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %563 = reshape(%560, newshape=[1, 4, 3]) /* ty=Tensor[(1, 4, 3), float32] */;
  %564 = reshape(%561, newshape=[]) /* ty=int64 */;
  %565 = reshape(%562, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %566 = @func_1360(%563, %564, %565) /* ty=(Tensor[(?, 4, 3), float64], Tensor[(10, 7, 2), int64], int64, Tensor[(140), float64], Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %567 = %566.1;
  %568 = cast(%567, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %569 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%559, dtype="int64") /* ty=Tensor[(10, 7, 2), int64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %572 = cast(%559, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %573 = reshape(%572, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %574 = @func_5956(%573) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) */;
  %575 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %576 = @func_5599() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %577 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %578 = %557.0;
  %579 = multiply(%570, %571) /* ty=Tensor[(10, 7, 2), int64] */;
  %580 = %574.1;
  %581 = %575.1;
  %582 = %576.0;
  %583 = %577.0;
  (%578, %var_6577, %var_6578, meta[relay.Constant][21] /* ty=Tensor[(56), int32] */, %579, %580, %581, %582, %583)
}

def @func_1862() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) {
  %584 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %585 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %586 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %587 = %584.0;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %589 = reshape(%586, newshape=[]) /* ty=int64 */;
  %590 = reshape(%588, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %591 = @func_1110(%589, %590) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %592 = %585.1;
  %593 = %591.3;
  %594 = @func_1488() /* ty=Tensor[(10, 7, 2), float64] */;
  (%587, %592, %593, -7 /* ty=int64 */, %594)
}

def @func_7263() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) {
  @func_7261() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) */
}

def @func_8929() -> Tensor[(10, 7, 2), float64] {
  @func_8927() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_1470() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */
}

def @func_4621(%var_4618: Tensor[(3, 7, 11), int64], %var_4619: Tensor[(3, 7, 11), int64], %var_4620: Tensor[(3, 7, 11), int64]) -> (Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) {
  %627 = fn (%var_4532: Tensor[(3, 7, 11), int64], %var_4533: Tensor[(3, 7, 11), int64], %var_4542: Tensor[(3, 7, 11), int64]) -> (Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) {
    %595 = cast(%var_4533, dtype="int64") /* ty=Tensor[(3, 7, 11), int64] */;
    %596 = shape_of(%var_4532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(%var_4532, dtype="int64") /* ty=Tensor[(3, 7, 11), int64] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %599 = right_shift(%597, %598) /* ty=Tensor[(3, 7, 11), int64] */;
    %600 = cast(%var_4533, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %604 = cast(%599, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
    %605 = shape_of(%var_4542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%var_4542, dtype="int8") /* ty=Tensor[(3, 7, 11), int8] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %608 = cast(%var_4542, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
    %609 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %610 = cast(%var_4542, dtype="bool") /* ty=Tensor[(3, 7, 11), bool] */;
    %611 = shape_of(%var_4532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%var_4532, dtype="bool") /* ty=Tensor[(3, 7, 11), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = greater_equal(%612, %613) /* ty=Tensor[(3, 7, 11), bool] */;
    %615 = cast(%614, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
    %616 = rsqrt(%615) /* ty=Tensor[(3, 7, 11), float32] */;
    %617 = cast(%var_4542, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%616, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %621 = logical_xor(%602, %603) /* ty=Tensor[(3, 7, 11), int8] */;
    %622 = maximum(%606, %607) /* ty=Tensor[(3, 7, 11), int8] */;
    %623 = atan(%608) /* ty=Tensor[(3, 7, 11), float32] */;
    %624 = %609.0;
    %625 = mod(%619, %620) /* ty=Tensor[(3, 7, 11), float64] */;
    %626 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
    (%621, %622, %623, %624, %625, %626)
  };
  %627(%var_4618, %var_4619, %var_4620) /* ty=(Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), int8], Tensor[(3, 7, 11), float32], Tensor[(10, 7, 2), float32], Tensor[(3, 7, 11), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_4994() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_7364(%var_7362: Tensor[(8, 11, 3), uint16], %var_7363: Tensor[(8, 11, 3), uint16]) -> (Tensor[(8, 11, 3), uint16], int64, int64) {
  %637 = fn (%var_7339: Tensor[(8, 11, 3), uint16], %var_7340: Tensor[(8, 11, 3), uint16]) -> (Tensor[(8, 11, 3), uint16], int64, int64) {
    %628 = cast(%var_7340, dtype="uint16") /* ty=Tensor[(8, 11, 3), uint16] */;
    %629 = shape_of(%var_7339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%var_7339, dtype="uint16") /* ty=Tensor[(8, 11, 3), uint16] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %632 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %633 = reshape(%632, newshape=[]) /* ty=int64 */;
    %634 = @func_5237(%633) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) */;
    %635 = subtract(%630, %631) /* ty=Tensor[(8, 11, 3), uint16] */;
    %636 = %634.2;
    (%635, %636, -4 /* ty=int64 */)
  };
  %637(%var_7362, %var_7363) /* ty=(Tensor[(8, 11, 3), uint16], int64, int64) */
}

def @func_3355(%var_3354: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %647 = fn (%var_3315: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %638 = cast(%var_3315, dtype="int64") /* ty=int64 */;
    %639 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %641 = reshape(%638, newshape=[]) /* ty=int64 */;
    %642 = reshape(%640, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
    %643 = @func_1110(%641, %642) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %644 = %643.4;
    %645 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
    %646 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
    (%639, %644, %var_3315, %645, %646)
  };
  %647(%var_3354) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_4296() -> (Tensor[(10, 7, 2), float64],) {
  @func_4294() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_7700(%var_7697: Tensor[(1, 15, 11), float32], %var_7698: Tensor[(7, 15, 11), float32], %var_7699: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) {
  %669 = fn (%var_7626: Tensor[(1, 15, 11), float32], %var_7650: Tensor[(7, 15, 11), float32], %var_7660: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) {
    %648 = @func_4992() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %649 = cast(%var_7626, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
    %650 = sigmoid(%649) /* ty=Tensor[(1, 15, 11), float32] */;
    %651 = cast(%650, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
    %652 = cosh(%651) /* ty=Tensor[(1, 15, 11), float32] */;
    %653 = cast(%652, dtype="uint64") /* ty=Tensor[(1, 15, 11), uint64] */;
    %654 = cast(%var_7650, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
    %655 = cast(%var_7660, dtype="int64") /* ty=Tensor[(231), int64] */;
    %656 = reshape(%655, newshape=[231]) /* ty=Tensor[(231), int64] */;
    %657 = @func_6838(%656) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(231), int64]) */;
    %658 = cast(%var_7650, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
    %659 = cast(%var_7626, dtype="uint64") /* ty=Tensor[(1, 15, 11), uint64] */;
    %660 = cast(%650, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
    %661 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %662 = %648.0;
    %663 = subtract(%653, %654) /* ty=Tensor[(7, 15, 11), uint64] */;
    %664 = %657.2;
    %665 = maximum(%658, %659) /* ty=Tensor[(7, 15, 11), uint64] */;
    %666 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
    %667 = acos(%660) /* ty=Tensor[(1, 15, 11), float32] */;
    %668 = %661.0;
    (%662, %663, %664, %var_7660, %665, %666, %667, %668)
  };
  %669(%var_7697, %var_7698, %var_7699) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) */
}

def @main(%var_10355: Tensor[(7, 3, 14), float64], %var_10375: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(231), float32], Tensor[(10, 7, 2), float64], Tensor[(7, 3, 14), float32]) {
  %670 = cast(meta[relay.Constant][22] /* ty=Tensor[(231), int64] */, dtype="int64") /* ty=Tensor[(231), int64] */;
  %671 = reshape(%670, newshape=[231]) /* ty=Tensor[(231), int64] */;
  %672 = @func_7153(%671) /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(3, 7, 11), int8], Tensor[(231), int64]) */;
  %673 = cast(%var_10375, dtype="float32") /* ty=Tensor[(231), float32] */;
  %674 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(231), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %675 = cast(meta[relay.Constant][22] /* ty=Tensor[(231), int64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?), float32] */;
  %677 = @func_3473() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %678 = cast(%var_10355, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %679 = sqrt(%678) /* ty=Tensor[(7, 3, 14), float64] */;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %681 = log2(%680) /* ty=Tensor[(7, 3, 14), float32] */;
  %682 = cast(%var_10355, dtype="int16") /* ty=Tensor[(7, 3, 14), int16] */;
  %683 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%679, dtype="int16") /* ty=Tensor[(7, 3, 14), int16] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %686 = bitwise_and(%684, %685) /* ty=Tensor[(7, 3, 14), int16] */;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %688 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%681, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %691 = %672.0;
  %692 = floor_divide(%675, %676) /* ty=Tensor[(231), float32] */;
  %693 = %677.2;
  %694 = multiply(%689, %690) /* ty=Tensor[(7, 3, 14), float32] */;
  (%691, %692, %693, %694)
}

def @func_8817() -> (Tensor[(10, 7, 2), float64], Tensor[(49, 10), float32], Tensor[(4, 168), uint16]) {
  %695 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 168), uint16] */, dtype="uint16") /* ty=Tensor[(4, 168), uint16] */;
  %696 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 168), uint16] */, dtype="uint16") /* ty=Tensor[(4, 168), uint16] */;
  %697 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 168), uint16] */, dtype="float64") /* ty=Tensor[(4, 168), float64] */;
  %698 = reshape(%695, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %699 = reshape(%696, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %700 = reshape(%697, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %701 = @func_4417(%698, %699, %700) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %702 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %703 = %701.2;
  (%702, %703, meta[relay.Constant][23] /* ty=Tensor[(4, 168), uint16] */)
}

def @func_3976() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) {
  %704 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %705 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %706 = %704.0;
  %707 = %705.0;
  %708 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
  (%706, %707, %708)
}

def @func_9119() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %712 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %709 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %710 = %709.1;
    %711 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
    (%710, %711)
  };
  %712() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_8604() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %713 = @func_6931() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %714 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
  %715 = %713.0;
  %716 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
  %717 = %714.1;
  (%715, %716, %717)
}

def @func_4143() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */
}

def @func_5465(%var_5463: Tensor[(8, 4, 2), float64], %var_5464: Tensor[(8, 4, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) {
  @func_5461(%var_5463, %var_5464) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 4, 2), bool]) */
}

def @func_5134(%var_5133: Tensor[(8, 14, 7), float64]) -> (Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) {
  %748 = fn (%var_5089: Tensor[(8, 14, 7), float64]) -> (Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) {
    %718 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 7), float64] */;
    %719 = erf(%718) /* ty=Tensor[(8, 14, 7), float64] */;
    %720 = cast(%var_5089, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
    %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%719, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %724 = divide(%722, %723) /* ty=Tensor[(8, 14, 7), float32] */;
    %725 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 14, 7), float64] */, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(%724, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %729 = cast(%719, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
    %730 = shape_of(%var_5089, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%var_5089, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %733 = cast(%var_5089, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
    %734 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%724, dtype="uint64") /* ty=Tensor[(8, 14, 7), uint64] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %737 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
    %738 = cast(meta[relay.Constant][25] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
    %739 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 351), bool] */, dtype="bool") /* ty=Tensor[(5, 351), bool] */;
    %740 = reshape(%738, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), bool] */;
    %741 = reshape(%739, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), bool] */;
    %742 = @func_2807(%740, %741) /* ty=(Tensor[(9, 13, 15), bool],) */;
    %743 = bitwise_or(%727, %728) /* ty=Tensor[(8, 14, 7), uint64] */;
    %744 = greater_equal(%731, %732) /* ty=Tensor[(8, 14, 7), bool] */;
    %745 = bitwise_and(%735, %736) /* ty=Tensor[(8, 14, 7), uint64] */;
    %746 = %737.1;
    %747 = %742.0;
    (%743, %744, %745, %746, %747, meta[relay.Constant][25] /* ty=Tensor[(135), bool] */, meta[relay.Constant][26] /* ty=Tensor[(5, 351), bool] */)
  };
  %748(%var_5133) /* ty=(Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) */
}

def @func_6452() -> (Tensor[(10, 7, 2), uint32],) {
  @func_6450() /* ty=(Tensor[(10, 7, 2), uint32],) */
}

def @func_6698(%var_6690: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float32],) {
  %749 = cast(%var_6690, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %750 = log2(%749) /* ty=Tensor[(5, 15, 6), float64] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %752 = log10(%751) /* ty=Tensor[(5, 15, 6), float32] */;
  (%752,)
}

def @func_8712() -> Tensor[(10, 7, 2), float64] {
  @func_8710() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_7204() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %756 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %753 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
    %754 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
    %755 = %753.1;
    (%754, %755)
  };
  %756() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_8485() -> Tensor[(7, 2, 4), float32] {
  %757 = @func_5688() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) */;
  %758 = %757.3;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  log2(%759) /* ty=Tensor[(7, 2, 4), float32] */
}

def @func_3473() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_3564() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  @func_3562() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */
}

def @func_8168() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %769 = fn () -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %760 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
    %761 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %762 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %763 = @func_7261() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(14, 9, 7), float32], int64) */;
    %764 = %760.0;
    %765 = %761.0;
    %766 = %762.2;
    %767 = %763.0;
    %768 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
    (%764, %765, %766, %767, %768)
  };
  %769() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_3180(%var_3178: uint64, %var_3179: Tensor[(4, 4, 5), uint64]) -> Tensor[(4, 4, 5), uint64] {
  %772 = fn (%var_3164: uint64, %var_3165: Tensor[(4, 4, 5), uint64]) -> Tensor[(4, 4, 5), uint64] {
    %770 = cast(%var_3164, dtype="uint64") /* ty=uint64 */;
    %771 = cast(%var_3165, dtype="uint64") /* ty=Tensor[(4, 4, 5), uint64] */;
    multiply(%770, %771) /* ty=Tensor[(4, 4, 5), uint64] */
  };
  %772(%var_3178, %var_3179) /* ty=Tensor[(4, 4, 5), uint64] */
}

def @func_6747() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
  %781 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) {
    %773 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %774 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %775 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %776 = reshape(%774, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %777 = reshape(%775, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %778 = @func_896(%776, %777) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %779 = %773.2;
    %780 = %778.3;
    (%779, %780, meta[relay.Constant][27] /* ty=Tensor[(56), int32] */)
  };
  %781() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */
}

def @func_1754() -> (Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %782 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
  %783 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %784 = @func_1569() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %785 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %786 = %782.2;
  %787 = %783.0;
  %788 = %784.0;
  (%785, %786, %787, %788)
}

def @func_9790() -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float32]) {
  @func_9788() /* ty=(Tensor[(1, 9), bool], Tensor[(10, 7, 2), float32]) */
}

def @func_9500() -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(49, 10), float64]) {
  %789 = cast(meta[relay.Constant][28] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %790 = cast(meta[relay.Constant][28] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %791 = cast(meta[relay.Constant][28] /* ty=Tensor[(672), uint16] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %792 = reshape(%789, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %793 = reshape(%790, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
  %794 = reshape(%791, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %795 = @func_4417(%792, %793, %794) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
  %796 = %795.2;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(49, 10), float64] */;
  %798 = @func_1717() /* ty=Tensor[(10, 7, 2), float64] */;
  %799 = acos(%797) /* ty=Tensor[(49, 10), float64] */;
  (%798, meta[relay.Constant][28] /* ty=Tensor[(672), uint16] */, %799)
}

def @func_7846() -> (Tensor[(10, 7, 2), float64],) {
  %801 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %800 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
    (%800,)
  };
  %801() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_6165() -> (Tensor[(10, 7, 2), float64],) {
  %804 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %802 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %803 = %802.3;
    (%803,)
  };
  %804() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_899(%var_897: Tensor[(7, 2, 4), int32], %var_898: Tensor[(7, 2, 4), int32]) -> (Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %818 = fn (%var_839: Tensor[(7, 2, 4), int32], %var_840: Tensor[(7, 2, 4), int32]) -> (Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %805 = cast(%var_840, dtype="int32") /* ty=Tensor[(7, 2, 4), int32] */;
    %806 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%var_839, dtype="int32") /* ty=Tensor[(7, 2, 4), int32] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %809 = cast(%var_840, dtype="uint32") /* ty=Tensor[(7, 2, 4), uint32] */;
    %810 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_839, dtype="uint32") /* ty=Tensor[(7, 2, 4), uint32] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %813 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %814 = bitwise_xor(%807, %808) /* ty=Tensor[(7, 2, 4), int32] */;
    %815 = bitwise_or(%811, %812) /* ty=Tensor[(7, 2, 4), uint32] */;
    %816 = %813.0;
    %817 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
    (%814, %815, %816, %817)
  };
  %818(%var_897, %var_898) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_8761() -> (Tensor[(14, 9, 7), float32], Tensor[(10, 7, 2), float64]) {
  %819 = @func_6793() /* ty=(Tensor[(10, 7, 2), float32], int64, Tensor[(14, 9, 7), float32]) */;
  %820 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %821 = %819.2;
  %822 = %820.1;
  (%821, %822)
}

def @func_5237(%var_5220: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) {
  %823 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
  %824 = cast(%var_5220, dtype="int64") /* ty=int64 */;
  %825 = %823.0;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %827 = reshape(%824, newshape=[]) /* ty=int64 */;
  %828 = reshape(%826, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %829 = @func_1110(%827, %828) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %830 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %831 = %829.3;
  %832 = %830.0;
  (%825, %831, %var_5220, %832)
}

def @func_7014() -> (Tensor[(10, 7, 2), float64],) {
  %835 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %833 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %834 = %833.0;
    (%834,)
  };
  %835() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_10085(%var_10034: Tensor[(3, 10, 7), int16], %var_10035: Tensor[(3, 10, 7), int16]) -> (Tensor[(3, 10, 7), int16], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), bool]) {
  %836 = cast(%var_10035, dtype="int16") /* ty=Tensor[(3, 10, 7), int16] */;
  %837 = shape_of(%var_10034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%var_10034, dtype="int16") /* ty=Tensor[(3, 10, 7), int16] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %840 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %841 = @func_7962() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), bool], Tensor[(784), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %842 = %841.4;
  %843 = cast(%842, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %844 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%840, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %847 = subtract(%838, %839) /* ty=Tensor[(3, 10, 7), int16] */;
  %848 = @func_7589() /* ty=Tensor[(10, 7, 2), float32] */;
  %849 = not_equal(%845, %846) /* ty=Tensor[(10, 7, 2), bool] */;
  (%847, %848, %849)
}

def @func_4805() -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) {
  %861 = fn () -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) {
    %850 = @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */;
    %851 = %850.3;
    %852 = cast(%851, dtype="bool") /* ty=bool */;
    %853 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 9), int64] */, dtype="bool") /* ty=Tensor[(1, 9), bool] */;
    %854 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %855 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 9), int64] */, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
    %856 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
    %857 = not_equal(%852, %853) /* ty=Tensor[(1, 9), bool] */;
    %858 = %854.2;
    %859 = sigmoid(%855) /* ty=Tensor[(1, 9), float32] */;
    %860 = %856.1;
    (%857, %858, %859, %860)
  };
  %861() /* ty=(Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_7590() -> Tensor[(10, 7, 2), float32] {
  %863 = fn () -> Tensor[(10, 7, 2), float32] {
    %862 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
    %862.5
  };
  %863() /* ty=Tensor[(10, 7, 2), float32] */
}

def @func_10089(%var_10087: Tensor[(3, 10, 7), int16], %var_10088: Tensor[(3, 10, 7), int16]) -> (Tensor[(3, 10, 7), int16], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), bool]) {
  @func_10085(%var_10087, %var_10088) /* ty=(Tensor[(3, 10, 7), int16], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), bool]) */
}

def @func_4473() -> (Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) {
  %888 = fn () -> (Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) {
    %864 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
    %865 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %866 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %867 = reshape(%866, newshape=[]) /* ty=int64 */;
    %868 = @func_3250(%867) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float64]) */;
    %869 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %870 = @func_4093() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %871 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %872 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
    %873 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), uint16] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
    %874 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), uint16] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %875 = reshape(%872, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
    %876 = reshape(%873, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), uint16] */;
    %877 = reshape(%874, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
    %878 = @func_4417(%875, %876, %877) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */;
    %879 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %880 = %864.1;
    %881 = %865.0;
    %882 = %868.1;
    %883 = %869.0;
    %884 = %870.1;
    %885 = %871.0;
    %886 = %878.0;
    %887 = %879.2;
    (%880, %881, %882, -10 /* ty=int64 */, %883, %884, %885, %886, meta[relay.Constant][30] /* ty=Tensor[(672), uint16] */, %887)
  };
  %888() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */
}

def @func_4294() -> (Tensor[(10, 7, 2), float64],) {
  %889 = @func_3562() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
  %890 = %889.1;
  (%890,)
}

def @func_3099() -> Tensor[(10, 7, 2), uint32] {
  @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */
}

def @func_1256() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) {
  %915 = fn () -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) {
    %891 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %892 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %893 = %891.0;
    %894 = cast(%893, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %895 = reshape(%894, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %896 = @func_1070(%895) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %897 = %896.1;
    %898 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 2, 4), int32] */, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %900 = cast(%897, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %902 = cast(%893, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
    %903 = reshape(%902, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %904 = @func_1070(%903) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %905 = %904.0;
    %906 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 7, 2), bool] */, dtype="int16") /* ty=Tensor[(10, 7, 2), int16] */;
    %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
    %908 = cast(%905, dtype="int16") /* ty=Tensor[(10, 7, 2), int16] */;
    %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %910 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
    %911 = %892.1;
    %912 = @func_1136() /* ty=Tensor[(10, 7, 2), float64] */;
    %913 = minimum(%900, %901) /* ty=Tensor[(7, 2, 4), float64] */;
    %914 = bitwise_and(%908, %909) /* ty=Tensor[(10, 7, 2), int16] */;
    (%893, %910, %911, %912, %913, %914)
  };
  %915() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */
}

def @func_973() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_5033() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  %920 = fn () -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
    %916 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
    %917 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %918 = %916.0;
    %919 = %917.0;
    (%918, %919)
  };
  %920() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_2377() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %926 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %921 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %922 = @func_1754() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %923 = @func_1938() /* ty=Tensor[(10, 7, 2), float64] */;
    %924 = %921.0;
    %925 = %922.0;
    (%923, %924, %925)
  };
  %926() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9960(%var_9958: Tensor[(49, 10), float32]) -> (Tensor[(49, 10), float32], Tensor[(49, 10), float32]) {
  @func_9957(%var_9958) /* ty=(Tensor[(49, 10), float32], Tensor[(49, 10), float32]) */
}

def @func_6076(%var_6073: int64, %var_6074: Tensor[(1, 490), float32], %var_6075: Tensor[(810), float32]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(672), uint16], Tensor[(1, 490), float32], Tensor[(810), float32], Tensor[(10, 7, 2), float64]) {
  %946 = fn (%var_6061: int64, %var_6067: Tensor[(1, 490), float32], %var_6068: Tensor[(810), float32]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(672), uint16], Tensor[(1, 490), float32], Tensor[(810), float32], Tensor[(10, 7, 2), float64]) {
    %927 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %928 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %929 = reshape(%928, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %930 = @func_3118(%929) /* ty=(Tensor[(16, 5, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %931 = cast(%var_6061, dtype="int64") /* ty=int64 */;
    %932 = reshape(%931, newshape=[]) /* ty=int64 */;
    %933 = @func_3353(%932) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %934 = cast(%var_6067, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
    %935 = cast(%var_6068, dtype="float32") /* ty=Tensor[(810), float32] */;
    %936 = %927.0;
    %937 = cast(%936, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
    %938 = reshape(%934, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %939 = reshape(%935, newshape=[810]) /* ty=Tensor[(810), float32] */;
    %940 = reshape(%937, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float32] */;
    %941 = @func_5571(%938, %939, %940) /* ty=(Tensor[(10, 7, 2), float32], Tensor[(672), uint16], Tensor[(490), float32], Tensor[(490), float64], float32, Tensor[(810), float32], Tensor[(14, 9, 7), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(1755), bool], Tensor[(10, 7, 2), int8], Tensor[(10, 7, 2), float64]) */;
    %942 = %930.0;
    %943 = %933.4;
    %944 = %941.1;
    %945 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
    (%936, %942, meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, %943, %var_6061, %944, %var_6067, %var_6068, %945)
  };
  %946(%var_6073, %var_6074, %var_6075) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(672), uint16], Tensor[(1, 490), float32], Tensor[(810), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_8710() -> Tensor[(10, 7, 2), float64] {
  %947 = @func_8604() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %947.1
}

def @func_8441(%var_8439: Tensor[(6, 16, 11), uint16], %var_8440: Tensor[(6, 16, 11), uint16]) -> Tensor[(6, 16, 11), uint16] {
  %952 = fn (%var_8430: Tensor[(6, 16, 11), uint16], %var_8431: Tensor[(6, 16, 11), uint16]) -> Tensor[(6, 16, 11), uint16] {
    %948 = cast(%var_8431, dtype="uint16") /* ty=Tensor[(6, 16, 11), uint16] */;
    %949 = shape_of(%var_8430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %950 = cast(%var_8430, dtype="uint16") /* ty=Tensor[(6, 16, 11), uint16] */;
    %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    multiply(%950, %951) /* ty=Tensor[(6, 16, 11), uint16] */
  };
  %952(%var_8439, %var_8440) /* ty=Tensor[(6, 16, 11), uint16] */
}

def @func_9788() -> (Tensor[(1, 9), bool], Tensor[(10, 7, 2), float32]) {
  %953 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %954 = @func_7437() /* ty=Tensor[(1, 9), bool] */;
  %955 = %953.0;
  (%954, %955)
}

def @func_936() -> Tensor[(10, 7, 2), float64] {
  %957 = fn () -> Tensor[(10, 7, 2), float64] {
    %956 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %956.0
  };
  %957() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4992() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %958 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %959 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %960 = %958.1;
  (%959, %960)
}

def @func_2871(%var_2870: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %969 = fn (%var_2857: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
    %961 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
    %962 = cast(%var_2857, dtype="int32") /* ty=Tensor[(56), int32] */;
    %963 = reshape(%962, newshape=[56]) /* ty=Tensor[(56), int32] */;
    %964 = @func_2191(%963) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float32]) */;
    %965 = @func_2817() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %966 = %961.0;
    %967 = %964.1;
    %968 = %965.0;
    (%966, %967, %var_2857, %968)
  };
  %969(%var_2870) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint8], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */
}

def @func_9820(%var_9818: float64, %var_9819: Tensor[(12, 5, 16), float64]) -> (Tensor[(12, 5, 16), bool],) {
  %973 = fn (%var_9808: float64, %var_9809: Tensor[(12, 5, 16), float64]) -> (Tensor[(12, 5, 16), bool],) {
    %970 = cast(%var_9808, dtype="bool") /* ty=bool */;
    %971 = cast(%var_9809, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
    %972 = not_equal(%970, %971) /* ty=Tensor[(12, 5, 16), bool] */;
    (%972,)
  };
  %973(%var_9818, %var_9819) /* ty=(Tensor[(12, 5, 16), bool],) */
}

def @func_4287() -> Tensor[(10, 7, 2), float64] {
  %975 = fn () -> Tensor[(10, 7, 2), float64] {
    %974 = @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %974.0
  };
  %975() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_9920() -> Tensor[(5, 14, 7), float64] {
  @func_9918() /* ty=Tensor[(5, 14, 7), float64] */
}

def @func_4267() -> Tensor[(10, 7, 2), float64] {
  %977 = fn () -> Tensor[(10, 7, 2), float64] {
    %976 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
    %976.1
  };
  %977() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_8218() -> (Tensor[(10, 7, 2), float64],) {
  %978 = @func_3471() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %979 = %978.2;
  (%979,)
}

def @func_9186() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %980 = @func_3827() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %981 = %980.1;
  %982 = @func_4286() /* ty=Tensor[(10, 7, 2), float64] */;
  (%981, %982)
}

def @func_6514() -> (Tensor[(10, 7, 2), float64],) {
  %985 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %983 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %984 = %983.1;
    (%984,)
  };
  %985() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_3154() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
  %992 = fn () -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) {
    %986 = @func_1401() /* ty=Tensor[(10, 7, 2), float64] */;
    %987 = cast(%986, dtype="float32") /* ty=Tensor[(10, 7, 2), float32] */;
    %988 = @func_1255() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(7, 2, 4), float64], Tensor[(10, 7, 2), int16]) */;
    %989 = asinh(%987) /* ty=Tensor[(10, 7, 2), float32] */;
    %990 = @func_2523() /* ty=Tensor[(10, 7, 2), float64] */;
    %991 = %988.0;
    (%989, %990, %991)
  };
  %992() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */
}

def @func_1468() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %993 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %994 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %995 = reshape(%993, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %996 = reshape(%994, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
  %997 = @func_896(%995, %996) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %998 = @func_971() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %999 = @func_1308() /* ty=Tensor[(10, 7, 2), float64] */;
  %1000 = %997.3;
  %1001 = %998.0;
  (%999, %1000, meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, %1001)
}

def @func_8315() -> (Tensor[(10, 7, 2), float64],) {
  %1002 = @func_5913() /* ty=(Tensor[(10, 7, 2), float64], uint32, Tensor[(50), float64]) */;
  %1003 = %1002.0;
  (%1003,)
}

def @func_2061() -> (Tensor[(10, 7, 2), float64],) {
  @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_3388() -> (Tensor[(10, 7, 2), float32],) {
  @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */
}

def @func_9006(%var_9003: Tensor[(165), float32], %var_9004: Tensor[(7, 165), float32], %var_9005: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(231), int64], Tensor[(165), float32], Tensor[(7, 165), float32], Tensor[(231), int64]) {
  %1013 = fn (%var_8983: Tensor[(165), float32], %var_8984: Tensor[(7, 165), float32], %var_8985: Tensor[(231), int64]) -> (Tensor[(10, 7, 2), uint32], Tensor[(231), int64], Tensor[(165), float32], Tensor[(7, 165), float32], Tensor[(231), int64]) {
    %1004 = cast(%var_8983, dtype="float32") /* ty=Tensor[(165), float32] */;
    %1005 = cast(%var_8984, dtype="float32") /* ty=Tensor[(7, 165), float32] */;
    %1006 = cast(%var_8985, dtype="int64") /* ty=Tensor[(231), int64] */;
    %1007 = reshape(%1004, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
    %1008 = reshape(%1005, newshape=[7, 15, 11]) /* ty=Tensor[(7, 15, 11), float32] */;
    %1009 = reshape(%1006, newshape=[231]) /* ty=Tensor[(231), int64] */;
    %1010 = @func_7696(%1007, %1008, %1009) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(7, 15, 11), uint64], Tensor[(231), int64], Tensor[(231), int64], Tensor[(7, 15, 11), uint64], Tensor[(1, 9), bool], Tensor[(1, 15, 11), float32], Tensor[(10, 7, 2), float64]) */;
    %1011 = @func_3097() /* ty=Tensor[(10, 7, 2), uint32] */;
    %1012 = %1010.2;
    (%1011, %1012, %var_8983, %var_8984, %var_8985)
  };
  %1013(%var_9003, %var_9004, %var_9005) /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(231), int64], Tensor[(165), float32], Tensor[(7, 165), float32], Tensor[(231), int64]) */
}

def @func_9318() -> Tensor[(10, 7, 2), float64] {
  %1014 = @func_6746() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32]) */;
  %1014.1
}

def @func_10240() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %1015 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %1016 = %1015.0;
  %1017 = @func_3065() /* ty=Tensor[(10, 7, 2), float64] */;
  %1018 = @func_4882() /* ty=Tensor[(10, 7, 2), float64] */;
  (%1016, %1017, %1018)
}

def @func_10242() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  @func_10240() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9103() -> Tensor[(10, 7, 2), float64] {
  %1019 = @func_3976() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), uint32]) */;
  %1019.0
}

def @func_2559(%var_2557: Tensor[(5, 14, 13), int64], %var_2558: Tensor[(5, 14, 13), int64]) -> Tensor[(5, 14, 13), int64] {
  %1024 = fn (%var_2548: Tensor[(5, 14, 13), int64], %var_2549: Tensor[(5, 14, 13), int64]) -> Tensor[(5, 14, 13), int64] {
    %1020 = cast(%var_2549, dtype="int64") /* ty=Tensor[(5, 14, 13), int64] */;
    %1021 = shape_of(%var_2548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1022 = cast(%var_2548, dtype="int64") /* ty=Tensor[(5, 14, 13), int64] */;
    %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    logical_xor(%1022, %1023) /* ty=Tensor[(5, 14, 13), int64] */
  };
  %1024(%var_2557, %var_2558) /* ty=Tensor[(5, 14, 13), int64] */
}

def @func_7885() -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), float64]) {
  %1025 = @func_2763() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(49, 10), float64], Tensor[(5, 14, 7), float64]) */;
  %1026 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
  %1027 = %1025.2;
  (%1026, %1027)
}

def @func_5783() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64]) {
  %1028 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
  %1029 = cast(%1028, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %1030 = reshape(%1029, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
  %1031 = @func_1027(%1030) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
  %1032 = %1031.0;
  (%1028, %1032)
}

def @func_3023(%var_3020: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(1, 140), float64], int64) {
  %1033 = @func_1896() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1034 = cast(%var_3020, dtype="int64") /* ty=int64 */;
  %1035 = %1033.0;
  %1036 = cast(%1035, dtype="float64") /* ty=Tensor[(10, 7, 2), float64] */;
  %1037 = reshape(%1034, newshape=[]) /* ty=int64 */;
  %1038 = reshape(%1036, newshape=[1, 140]) /* ty=Tensor[(1, 140), float64] */;
  %1039 = @func_1110(%1037, %1038) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1040 = %1039.2;
  (%1035, %1040, %var_3020)
}

def @func_9105() -> Tensor[(10, 7, 2), float64] {
  @func_9103() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4315() -> Tensor[(10, 7, 2), float32] {
  %1042 = fn () -> Tensor[(10, 7, 2), float32] {
    %1041 = @func_2237() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
    %1041.0
  };
  %1042() /* ty=Tensor[(10, 7, 2), float32] */
}

def @func_7182(%var_7180: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], int64, int64) {
  @func_7179(%var_7180) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], int64, int64) */
}

def @func_1402() -> Tensor[(10, 7, 2), float64] {
  %1044 = fn () -> Tensor[(10, 7, 2), float64] {
    %1043 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %1043.1
  };
  %1044() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4422(%var_4419: Tensor[(16, 14, 3), uint16], %var_4420: Tensor[(16, 14, 3), uint16], %var_4421: Tensor[(16, 14, 3), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) {
  @func_4417(%var_4419, %var_4420, %var_4421) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(16, 14, 3), float64], Tensor[(49, 10), float32]) */
}

def @func_7437() -> Tensor[(1, 9), bool] {
  %1045 = @func_6232() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) */;
  %1045.1
}

def @func_1113(%var_1111: int64, %var_1112: Tensor[(1, 140), float64]) -> (Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
  %1058 = fn (%var_1084: int64, %var_1100: Tensor[(1, 140), float64]) -> (Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) {
    %1046 = cast(%var_1084, dtype="bool") /* ty=bool */;
    %1047 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 9, 7), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
    %1048 = greater_equal(%1046, %1047) /* ty=Tensor[(14, 9, 7), bool] */;
    %1049 = cast(%1048, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
    %1050 = cast(%var_1100, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
    %1051 = reshape(%1050, newshape=[10, 7, 2]) /* ty=Tensor[(10, 7, 2), float64] */;
    %1052 = @func_1027(%1051) /* ty=(Tensor[(10, 7, 2), int64], Tensor[(10, 7, 2), uint8], Tensor[(10, 7, 2), float64]) */;
    %1053 = @func_751() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %1054 = cos(%1049) /* ty=Tensor[(14, 9, 7), float64] */;
    %1055 = %1052.0;
    %1056 = %1053.1;
    %1057 = @func_935() /* ty=Tensor[(10, 7, 2), float64] */;
    (%1054, %1055, %var_1100, %1056, %1057)
  };
  %1058(%var_1111, %var_1112) /* ty=(Tensor[(14, 9, 7), float64], Tensor[(10, 7, 2), int64], Tensor[(1, 140), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */
}

def @func_9552(%var_9550: Tensor[(1, 12), float32], %var_9551: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], Tensor[(5, 7, 9), float32], Tensor[(315), uint32], Tensor[(1, 12), float32], Tensor[(56), int32]) {
  @func_9548(%var_9550, %var_9551) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 7, 9), float32], Tensor[(315), uint32], Tensor[(1, 12), float32], Tensor[(56), int32]) */
}

def @func_5689() -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) {
  %1071 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) {
    %1059 = @func_4706() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %1060 = cast(meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %1061 = reshape(%1060, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float64] */;
    %1062 = @func_5132(%1061) /* ty=(Tensor[(8, 14, 7), uint64], Tensor[(8, 14, 7), bool], Tensor[(8, 14, 7), uint64], Tensor[(10, 7, 2), float64], Tensor[(9, 13, 15), bool], Tensor[(135), bool], Tensor[(5, 351), bool]) */;
    %1063 = cast(meta[relay.Constant][37] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %1064 = cast(meta[relay.Constant][37] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %1065 = reshape(%1063, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %1066 = reshape(%1064, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %1067 = @func_896(%1065, %1066) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %1068 = %1059.0;
    %1069 = %1062.2;
    %1070 = %1067.1;
    (%1068, %1069, meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, %1070, meta[relay.Constant][37] /* ty=Tensor[(56), int32] */)
  };
  %1071() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(8, 14, 7), uint64], Tensor[(784), float64], Tensor[(7, 2, 4), uint32], Tensor[(56), int32]) */
}

def @func_5958(%var_5957: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) {
  %1083 = fn (%var_5951: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) {
    %1072 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
    %1073 = @func_4472() /* ty=(Tensor[(49, 10), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(56), int32]) */;
    %1074 = @func_4141() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
    %1075 = %1074.0;
    %1076 = cast(%var_5951, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
    %1077 = shape_of(%1075, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1078 = cast(%1075, dtype="uint8") /* ty=Tensor[(10, 7, 2), uint8] */;
    %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1080 = %1072.0;
    %1081 = %1073.8;
    %1082 = left_shift(%1078, %1079) /* ty=Tensor[(10, 7, 2), uint8] */;
    (%1080, %1081, %1082)
  };
  %1083(%var_5957) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(672), uint16], Tensor[(10, 7, 2), uint8]) */
}

def @func_6233() -> (Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) {
  %1088 = fn () -> (Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) {
    %1084 = @func_3153() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float32]) */;
    %1085 = @func_4804() /* ty=(Tensor[(1, 9), bool], Tensor[(10, 7, 2), float64], Tensor[(1, 9), float32], Tensor[(10, 7, 2), float64]) */;
    %1086 = %1084.0;
    %1087 = %1085.0;
    (%1086, %1087)
  };
  %1088() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(1, 9), bool]) */
}

def @func_1718() -> Tensor[(10, 7, 2), float64] {
  %1090 = fn () -> Tensor[(10, 7, 2), float64] {
    %1089 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %1089.1
  };
  %1090() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_6878() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  @func_6876() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */
}

def @func_9698(%var_9697: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], int64, Tensor[(315), uint32], Tensor[(12), float32], Tensor[(56), bool]) {
  %1106 = fn (%var_9688: Tensor[(56), int32]) -> (Tensor[(10, 7, 2), float64], int64, Tensor[(315), uint32], Tensor[(12), float32], Tensor[(56), bool]) {
    %1091 = @func_1468() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */;
    %1092 = cast(meta[relay.Constant][38] /* ty=Tensor[(315), uint32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
    %1093 = cast(meta[relay.Constant][39] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %1094 = cast(meta[relay.Constant][40] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %1095 = reshape(%1092, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), uint32] */;
    %1096 = reshape(%1093, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %1097 = reshape(%1094, newshape=[56]) /* ty=Tensor[(56), int32] */;
    %1098 = @func_1653(%1095, %1096, %1097) /* ty=(Tensor[(5, 7, 9), uint32], Tensor[(5, 7, 9), float32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), int64], Tensor[(12), float32], int64, Tensor[(56), int32], Tensor[(5, 7, 9), float32]) */;
    %1099 = cast(%var_9688, dtype="bool") /* ty=Tensor[(56), bool] */;
    %1100 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1101 = cast(meta[relay.Constant][40] /* ty=Tensor[(56), int32] */, dtype="bool") /* ty=Tensor[(56), bool] */;
    %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1103 = %1091.0;
    %1104 = %1098.5;
    %1105 = greater_equal(%1101, %1102) /* ty=Tensor[(56), bool] */;
    (%1103, %1104, meta[relay.Constant][38] /* ty=Tensor[(315), uint32] */, meta[relay.Constant][39] /* ty=Tensor[(12), float32] */, %1105)
  };
  %1106(%var_9697) /* ty=(Tensor[(10, 7, 2), float64], int64, Tensor[(315), uint32], Tensor[(12), float32], Tensor[(56), bool]) */
}

def @func_8416() -> (Tensor[(10, 7, 2), float32],) {
  %1107 = @func_6876() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) */;
  %1108 = %1107.0;
  (%1108,)
}

def @func_829() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) {
  @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */
}

def @func_9439() -> Tensor[(10, 7, 2), float64] {
  %1109 = fn () -> Tensor[(10, 7, 2), float64] {
    @func_4286() /* ty=Tensor[(10, 7, 2), float64] */
  };
  %1109() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4218(%var_4187: uint32, %var_4188: Tensor[(5, 2, 5), uint32]) -> Tensor[(5, 2, 5), uint32] {
  %1110 = cast(%var_4187, dtype="uint32") /* ty=uint32 */;
  %1111 = cast(%var_4188, dtype="uint32") /* ty=Tensor[(5, 2, 5), uint32] */;
  left_shift(%1110, %1111) /* ty=Tensor[(5, 2, 5), uint32] */
}

def @func_6876() -> (Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float32]) {
  %1112 = @func_3386() /* ty=(Tensor[(10, 7, 2), float32],) */;
  %1113 = @func_2428() /* ty=Tensor[(10, 7, 2), float32] */;
  %1114 = %1112.0;
  (%1113, %1114)
}

def @func_7008() -> Tensor[(10, 7, 2), float64] {
  @func_1488() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_5240(%var_5238: int64) -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) {
  @func_5237(%var_5238) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float32]) */
}

def @func_6450() -> (Tensor[(10, 7, 2), uint32],) {
  %1115 = @func_5655() /* ty=(Tensor[(10, 7, 2), uint32], Tensor[(10, 7, 2), float64]) */;
  %1116 = %1115.0;
  (%1116,)
}

def @func_5600() -> (Tensor[(10, 7, 2), float64],) {
  %1119 = fn () -> (Tensor[(10, 7, 2), float64],) {
    %1117 = @func_2059() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %1118 = %1117.0;
    (%1118,)
  };
  %1119() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_3935() -> (Tensor[(10, 7, 2), float64],) {
  @func_3933() /* ty=(Tensor[(10, 7, 2), float64],) */
}

def @func_7093() -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float32], Tensor[(10, 7, 2), uint32]) {
  %1130 = fn () -> (Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float32], Tensor[(10, 7, 2), uint32]) {
    %1120 = @func_7013() /* ty=(Tensor[(10, 7, 2), float64],) */;
    %1121 = cast(meta[relay.Constant][41] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
    %1122 = reshape(%1121, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
    %1123 = @func_2508(%1122) /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16]) */;
    %1124 = cast(meta[relay.Constant][41] /* ty=Tensor[(490), float64] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %1125 = @func_6450() /* ty=(Tensor[(10, 7, 2), uint32],) */;
    %1126 = %1120.0;
    %1127 = %1123.1;
    %1128 = cosh(%1124) /* ty=Tensor[(490), float32] */;
    %1129 = %1125.0;
    (%1126, %1127, %1128, %1129)
  };
  %1130() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(5, 14, 7), int16], Tensor[(490), float32], Tensor[(10, 7, 2), uint32]) */
}

def @func_1864() -> (Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) {
  @func_1862() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], int64, Tensor[(10, 7, 2), float64]) */
}

def @func_3097() -> Tensor[(10, 7, 2), uint32] {
  %1131 = @func_2376() /* ty=(Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
  %1132 = %1131.0;
  %1133 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 7, 2), float64] */, dtype="uint32") /* ty=Tensor[(10, 7, 2), uint32] */;
  %1134 = shape_of(%1132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1135 = cast(%1132, dtype="uint32") /* ty=Tensor[(10, 7, 2), uint32] */;
  %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%1135, %1136) /* ty=Tensor[(10, 7, 2), uint32] */
}

def @func_7745() -> Tensor[(10, 7, 2), float64] {
  %1138 = fn () -> Tensor[(10, 7, 2), float64] {
    %1137 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %1137.1
  };
  %1138() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_4884() -> Tensor[(10, 7, 2), float64] {
  @func_4882() /* ty=Tensor[(10, 7, 2), float64] */
}

def @func_1072(%var_1071: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
  %1153 = fn (%var_1045: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) {
    %1139 = @func_668() /* ty=Tensor[(10, 7, 2), float64] */;
    %1140 = cast(%var_1045, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
    %1141 = shape_of(%1139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1142 = cast(%1139, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
    %1143 = dyn.reshape(%1140, %1141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1144 = cast(meta[relay.Constant][43] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %1145 = cast(meta[relay.Constant][43] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %1146 = reshape(%1144, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %1147 = reshape(%1145, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), int32] */;
    %1148 = @func_896(%1146, %1147) /* ty=(Tensor[(7, 2, 4), int32], Tensor[(7, 2, 4), uint32], Tensor[(10, 7, 2), float64], Tensor[(10, 7, 2), float64]) */;
    %1149 = @func_827() /* ty=(Tensor[(10, 7, 2), float32], Tensor[(10, 7, 2), float64]) */;
    %1150 = logical_and(%1142, %1143) /* ty=Tensor[(10, 7, 2), bool] */;
    %1151 = %1148.0;
    %1152 = %1149.1;
    (%1150, %1151, meta[relay.Constant][43] /* ty=Tensor[(56), int32] */, %1152)
  };
  %1153(%var_1071) /* ty=(Tensor[(10, 7, 2), bool], Tensor[(7, 2, 4), int32], Tensor[(56), int32], Tensor[(10, 7, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen183/build/output.py", line 3322, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:55:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

