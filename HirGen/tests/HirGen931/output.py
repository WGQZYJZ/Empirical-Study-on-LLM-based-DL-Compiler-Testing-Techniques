import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_99 = relay.var("var_99", dtype = "float64", shape = (9, 15, 1))#candidate|99|(9, 15, 1)|var|float64
uop_100 = relay.cosh(var_99.astype('float64')) # shape=(9, 15, 1)
const_104 = relay.const([[[-4.590773],[-1.516805],[3.191147],[2.328798],[-5.733460],[-3.598565],[-8.026653],[-8.939853],[7.836177],[9.449975],[-5.902435],[-0.225417],[9.399173],[-5.974344],[-8.511174]],[[-6.598160],[-0.201116],[-3.315836],[2.887038],[-8.706751],[-0.791686],[4.472290],[8.001189],[6.636371],[6.529306],[6.332773],[1.135936],[3.797840],[-7.903544],[7.388940]],[[-2.101381],[-9.839765],[8.685247],[-7.975940],[-5.096439],[-0.333756],[4.673554],[-0.058839],[-9.101855],[7.342313],[-9.574541],[2.938647],[-2.743428],[-8.621909],[5.454564]],[[6.431867],[-4.015800],[-1.734431],[3.960808],[-7.293327],[4.366391],[-4.511343],[-0.927286],[5.696095],[-7.919841],[-9.920981],[-0.136513],[9.310373],[-8.320043],[9.703650]],[[0.360292],[8.174820],[-4.344130],[5.080913],[-7.631706],[-9.553740],[1.715335],[-6.335191],[9.353203],[-0.121727],[-8.914705],[-7.238259],[-2.445115],[7.346172],[7.396694]],[[-4.129067],[-9.532128],[-3.644759],[-4.334321],[-7.889569],[2.543153],[-1.534056],[5.522724],[-3.886488],[9.024903],[-8.261168],[1.015660],[-0.271185],[-5.980333],[6.154663]],[[-8.810090],[1.031469],[6.874912],[-9.965787],[6.062895],[1.577795],[9.048992],[7.933102],[-0.157329],[6.238634],[-5.379639],[-1.927842],[-6.274421],[-1.306181],[-3.697717]],[[-7.897581],[5.353414],[9.097147],[-6.193337],[-6.626013],[-2.520623],[-6.512623],[-8.748878],[-6.643804],[-1.218148],[-1.134140],[-6.608269],[-9.497443],[9.051656],[7.291974]],[[-1.558045],[-6.752405],[3.829013],[1.812982],[4.796386],[-1.975030],[2.127948],[7.154212],[-4.930491],[-1.026050],[5.172927],[-5.639814],[0.439720],[-8.615108],[4.738397]]], dtype = "float64")#candidate|104|(9, 15, 1)|const|float64
bop_105 = relay.bitwise_and(uop_100.astype('int64'), relay.reshape(const_104.astype('int64'), relay.shape_of(uop_100))) # shape=(9, 15, 1)
bop_138 = relay.equal(uop_100.astype('bool'), relay.reshape(bop_105.astype('bool'), relay.shape_of(uop_100))) # shape=(9, 15, 1)
output = bop_138
output2 = bop_138
func_144 = relay.Function([var_99,], output)
mod['func_144'] = func_144
mod = relay.transform.InferType()(mod)
mutated_mod['func_144'] = func_144
mutated_mod = relay.transform.InferType()(mutated_mod)
var_145 = relay.var("var_145", dtype = "float64", shape = (9, 15, 1))#candidate|145|(9, 15, 1)|var|float64
func_144_call = mutated_mod.get_global_var('func_144')
call_146 = func_144_call(var_145)
output = call_146
func_147 = relay.Function([var_145], output)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
var_175 = relay.var("var_175", dtype = "float64", shape = (6, 7, 12))#candidate|175|(6, 7, 12)|var|float64
uop_176 = relay.sigmoid(var_175.astype('float64')) # shape=(6, 7, 12)
output = uop_176
output2 = uop_176
func_180 = relay.Function([var_175,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "float64", shape = (6, 7, 12))#candidate|181|(6, 7, 12)|var|float64
output = func_180(var_181)
func_182 = relay.Function([var_181], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_336 = relay.var("var_336", dtype = "int32", shape = (8, 14, 16))#candidate|336|(8, 14, 16)|var|int32
var_337 = relay.var("var_337", dtype = "int32", shape = (8, 14, 16))#candidate|337|(8, 14, 16)|var|int32
bop_338 = relay.left_shift(var_336.astype('int32'), relay.reshape(var_337.astype('int32'), relay.shape_of(var_336))) # shape=(8, 14, 16)
output = bop_338
output2 = bop_338
func_347 = relay.Function([var_336,var_337,], output)
mod['func_347'] = func_347
mod = relay.transform.InferType()(mod)
mutated_mod['func_347'] = func_347
mutated_mod = relay.transform.InferType()(mutated_mod)
func_347_call = mutated_mod.get_global_var('func_347')
var_349 = relay.var("var_349", dtype = "int32", shape = (8, 14, 16))#candidate|349|(8, 14, 16)|var|int32
var_350 = relay.var("var_350", dtype = "int32", shape = (8, 14, 16))#candidate|350|(8, 14, 16)|var|int32
call_348 = func_347_call(var_349,var_350,)
output = call_348
func_351 = relay.Function([var_349,var_350,], output)
mutated_mod['func_351'] = func_351
mutated_mod = relay.transform.InferType()(mutated_mod)
var_363 = relay.var("var_363", dtype = "float32", shape = (10, 15, 13))#candidate|363|(10, 15, 13)|var|float32
uop_364 = relay.cosh(var_363.astype('float32')) # shape=(10, 15, 13)
output = relay.Tuple([uop_364,])
output2 = relay.Tuple([uop_364,])
func_372 = relay.Function([var_363,], output)
mod['func_372'] = func_372
mod = relay.transform.InferType()(mod)
var_373 = relay.var("var_373", dtype = "float32", shape = (10, 15, 13))#candidate|373|(10, 15, 13)|var|float32
output = func_372(var_373)
func_374 = relay.Function([var_373], output)
mutated_mod['func_374'] = func_374
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1180 = relay.var("var_1180", dtype = "int16", shape = (10, 7, 5))#candidate|1180|(10, 7, 5)|var|int16
const_1181 = relay.const([[[6,2,-9,1,3],[-9,8,7,9,-2],[3,-6,4,-1,5],[-10,-5,9,1,6],[-2,9,6,-5,-7],[3,-9,-6,-6,5],[-2,-2,-1,-10,1]],[[-10,-1,-10,6,-2],[-4,-2,6,9,2],[3,3,10,-8,-8],[-8,-1,7,6,9],[-6,-2,8,-4,-10],[-3,10,-10,-9,5],[-9,-6,-4,4,-6]],[[-7,-9,-9,-7,-4],[-1,1,2,-6,-2],[-8,3,-3,-7,-6],[-1,-5,2,-7,-9],[5,9,-3,-7,-2],[7,-2,-6,-9,2],[-5,-10,5,-4,-8]],[[-5,-5,1,7,-7],[7,-1,-6,3,-7],[3,-10,-2,-5,-7],[-1,8,-7,6,-6],[-3,6,-1,-10,-2],[-9,-8,-9,4,-9],[9,-3,8,5,-4]],[[-6,4,-10,8,9],[-6,6,7,-6,-9],[2,-5,-4,-3,-6],[10,3,-5,10,2],[3,8,-3,7,6],[6,-4,10,-5,-9],[-1,4,4,6,5]],[[3,-7,-9,6,2],[2,9,-1,5,6],[-9,-4,1,-4,-2],[-9,1,4,6,8],[1,8,-7,10,4],[-8,3,6,10,4],[-1,4,9,-3,-7]],[[5,-2,-9,1,-3],[-5,6,4,3,1],[5,10,-5,-7,-4],[-9,4,3,10,-1],[8,5,4,-5,-3],[-4,-10,8,-3,-4],[-9,7,4,-7,5]],[[9,-5,-7,-6,-8],[1,-7,-8,6,2],[-2,3,-6,-1,-1],[-10,10,-7,-6,1],[1,-10,5,-5,-1],[3,8,3,4,7],[-2,6,-4,-1,5]],[[6,6,-4,4,-3],[6,8,-3,8,-7],[-3,-3,1,3,10],[3,-3,2,9,-9],[-10,-10,1,-1,1],[5,9,4,-5,-3],[4,-1,-7,6,-6]],[[10,-2,-6,6,-1],[7,10,3,-7,10],[5,8,-10,-8,10],[-3,-2,3,-7,7],[-5,-5,-2,10,1],[1,-3,-2,1,1],[-6,4,-9,-7,-5]]], dtype = "int16")#candidate|1181|(10, 7, 5)|const|int16
bop_1182 = relay.left_shift(var_1180.astype('int16'), relay.reshape(const_1181.astype('int16'), relay.shape_of(var_1180))) # shape=(10, 7, 5)
func_372_call = mod.get_global_var('func_372')
func_374_call = mutated_mod.get_global_var('func_374')
var_1187 = relay.var("var_1187", dtype = "float32", shape = (1950,))#candidate|1187|(1950,)|var|float32
call_1186 = relay.TupleGetItem(func_372_call(relay.reshape(var_1187.astype('float32'), [10, 15, 13])), 0)
call_1188 = relay.TupleGetItem(func_374_call(relay.reshape(var_1187.astype('float32'), [10, 15, 13])), 0)
func_347_call = mod.get_global_var('func_347')
func_351_call = mutated_mod.get_global_var('func_351')
var_1191 = relay.var("var_1191", dtype = "int32", shape = (1792,))#candidate|1191|(1792,)|var|int32
call_1190 = func_347_call(relay.reshape(var_1191.astype('int32'), [8, 14, 16]), relay.reshape(var_1191.astype('int32'), [8, 14, 16]), )
call_1192 = func_347_call(relay.reshape(var_1191.astype('int32'), [8, 14, 16]), relay.reshape(var_1191.astype('int32'), [8, 14, 16]), )
output = relay.Tuple([bop_1182,call_1186,var_1187,call_1190,var_1191,])
output2 = relay.Tuple([bop_1182,call_1188,var_1187,call_1192,var_1191,])
func_1194 = relay.Function([var_1180,var_1187,var_1191,], output)
mod['func_1194'] = func_1194
mod = relay.transform.InferType()(mod)
mutated_mod['func_1194'] = func_1194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1194_call = mutated_mod.get_global_var('func_1194')
var_1196 = relay.var("var_1196", dtype = "int16", shape = (10, 7, 5))#candidate|1196|(10, 7, 5)|var|int16
var_1197 = relay.var("var_1197", dtype = "float32", shape = (1950,))#candidate|1197|(1950,)|var|float32
var_1198 = relay.var("var_1198", dtype = "int32", shape = (1792,))#candidate|1198|(1792,)|var|int32
call_1195 = func_1194_call(var_1196,var_1197,var_1198,)
output = call_1195
func_1199 = relay.Function([var_1196,var_1197,var_1198,], output)
mutated_mod['func_1199'] = func_1199
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1865 = relay.var("var_1865", dtype = "float64", shape = (14, 2, 13))#candidate|1865|(14, 2, 13)|var|float64
var_1866 = relay.var("var_1866", dtype = "float64", shape = (14, 2, 13))#candidate|1866|(14, 2, 13)|var|float64
bop_1867 = relay.floor_divide(var_1865.astype('float64'), relay.reshape(var_1866.astype('float64'), relay.shape_of(var_1865))) # shape=(14, 2, 13)
bop_1870 = relay.divide(var_1865.astype('float64'), relay.reshape(bop_1867.astype('float64'), relay.shape_of(var_1865))) # shape=(14, 2, 13)
func_1194_call = mod.get_global_var('func_1194')
func_1199_call = mutated_mod.get_global_var('func_1199')
var_1879 = relay.var("var_1879", dtype = "int16", shape = (350,))#candidate|1879|(350,)|var|int16
const_1880 = relay.const([[4.669726,4.784638,-9.814528,6.377955,-5.347824,-1.540403,5.556077,-0.378476,-1.648092,8.968472,-9.223765,-3.112244,1.952657,-9.394757,-8.430115,8.564421,8.063913,6.430831,-5.997234,8.121436,7.795786,4.828857,2.182465,7.613001,-8.208812,-7.513807,-4.072269,-9.063808,-8.135054,2.526792,4.058744,-1.330136,-7.633654,-6.077685,3.293641,5.625901,3.083822,6.792954,-0.850250,-2.309996,4.961956,6.184760,-8.769486,4.657990,-3.692618,6.744673,8.783241,-8.087463,3.898805,-3.195193,4.258098,7.895112,-5.988302,7.638138,9.298022,6.405130,0.543880,-3.608565,9.693285,-6.589541,6.463432,3.989658,-9.698714,-4.231197,-3.063619,-5.892509,-5.489648,-8.117511,-4.246992,1.589022,-8.710031,-7.292112,2.733535,6.035629,-6.799037,-4.061275,9.919507,-6.620566,0.697977,5.427202,2.486560,5.229183,1.297973,-7.946737,-6.527716,-9.246045,-0.194616,-7.263821,6.986007,-9.769164,2.624294,1.453228,-5.418093,-5.267605,-8.816308,0.223036,5.178803,2.348389,5.935518,-3.339540,4.878727,-2.222434,2.164661,0.833758,-2.869025,-5.777563,-4.663797,-8.710269,7.808118,1.289833,-7.593256,2.099969,8.334749,-8.486170,-7.337224,-1.808888,5.670478,-2.786911,6.556971,-2.559883,3.022526,-0.848351,-5.460615,7.377707,5.990317,-8.497106,6.981186,-5.907584,-9.667261,4.603488,4.410693,1.657916,-3.190465,-8.961640,6.296436,4.973959,8.038407,3.865603,-7.122794,-4.972504,1.397572,8.056317,-0.246245,7.369108,7.754783,-2.642665,1.788017,0.375189,6.929628,6.620773,-8.032087,8.633980,-0.136249,-9.591703,9.752172,8.893735,5.153600,-4.993324,-3.799486,-8.905346,-3.809195,-4.321857,-4.234037,-2.317596,1.349677,4.170665,-4.768845,-4.360769,9.796280,-0.352572,7.142334,4.949643,-8.366008,-4.436010,9.528226,-2.078202,0.937093,9.590317,0.314802,0.023529,-5.132407,-1.450628,-3.444061,2.508221,2.566945,-8.293258,0.876492,9.289094,9.991942,-9.832642,6.618161,6.914166,-9.649343,-7.138575,-2.442131,-8.406808,-4.057923,1.329021,3.475742,-0.153292,-7.491497,1.823912,-8.751342,-1.737298,1.746654,0.440520,7.306454,4.191340,4.331381,1.403628,-9.187941,-9.067159,2.540094,4.818648,7.980202,2.046567,-5.409186,7.442973,-0.598737,2.399388,8.538776,-1.533667,4.168752,-3.538663,7.863430,-6.601325,5.854787,5.269892,-7.708225,-5.006666,-4.926286,-8.822000,-3.074269,-7.489938,2.481336,-8.413991,-3.812934,3.612677,9.094904,-7.388725,-6.603064,-0.640908,-4.268630,-7.062470,-9.551388,-6.613000,-3.477182,0.455063,-0.037733,8.527539,8.912283,-9.887007,-5.089253,4.421321,2.090365,4.119085,-1.450353,-3.568591,9.721159,-6.248139,4.430658,-5.793960,1.543265,-3.261463,7.139019,6.317919,-4.843775,-2.514215,9.904349,-4.835644,-8.338084,-0.604629,4.033050,7.939235,2.042884,-8.881627,-8.622170,5.942587,-2.491513,7.743650,6.975362,4.726383,3.030985,9.513393,3.399165,6.582232,0.562277,6.040115,-7.116921,5.710151,-7.548959,-0.996294,-7.581336,-1.949543,-8.226625,7.342487,-7.836626,6.423222,-7.743781,-5.808176,-4.831690,3.354086,-5.533705,-1.663210,4.924065,-4.374583,5.538108,-9.711371,-0.232469,-6.510962,3.812577,2.208532,-7.783784,5.836256,8.473303,3.388074,0.918045,7.418291,4.340254,6.292772,3.116181,-9.521443,-3.338433,-6.097735,7.168550,8.313330,-3.194943,-5.721399,4.272171,-5.421341,6.110164,-2.777645,-0.627699,-8.462684,0.129801,4.268276,-7.447508,0.349647,-8.013480,4.450397,1.478340,-3.537461,9.473486,-3.022081,-5.902467,0.671014,-2.181544,9.981459,4.788836,-2.550116,0.534622,9.634792,2.955925,-9.255157,1.947916,4.188165,8.942643,-4.405377,-3.523177,5.505425,9.672130,1.561575,1.923319,3.152169,-4.860513,5.556406,4.388197,3.474627,-8.660289,-3.423355,-9.011626,-9.354512,-1.952997,-9.375182,6.006592,1.777216,3.267436,4.014999,9.258114,0.598618,-4.528706,9.871980,-5.290207,7.138959,9.221611,-8.821797,3.005465,2.873721,4.406037,6.408283,6.122617,-5.594917,8.667517,1.821660,-1.448719,-2.868518,-4.512801,-1.476462,8.742743,9.121501,2.635713,-3.070983,-3.067426,-0.170837,5.310691,-9.598780,9.862533,5.683699,-8.210621,8.975555,-6.938103,-7.357002,-5.962190,0.970360,-8.693937,-5.864418,-2.374950,-8.527980,-7.412192,-8.132793,-4.085187,-8.771400,6.676923,-4.538381,4.713349,-0.168716,-6.571733,-5.314923,1.570735,-8.795659,-8.519852,-8.150839,2.510403,3.602894,3.412540,5.353242,-2.110126,1.648184,-2.133285,-5.005833,-6.476204,0.480300,6.297106,3.688046,6.795197,-4.852167,-0.951017,-9.626505,3.635240,0.685891,6.000674,9.025304,-5.785366,-9.973482,-3.714671,-4.987990,0.533689,7.951582,3.358886,-8.200266,-5.725802,-5.265120,5.433982,-0.929916,-0.990224,2.618574,9.092639,-4.146408,-8.878030,-0.169413,8.131625,7.513693,-8.936348,0.715797,6.195175,-7.654623,-1.375496,-0.981506,4.742895,-5.439813,-2.315566,8.458213,-8.186150,7.335098,-2.532813,-6.420737,3.979481,5.917886,-3.596942,1.952698,-8.078963,-4.451959,4.363264,-8.412071,7.219502,-7.923556,-9.564599,5.109302,1.894173,6.141396,-8.833589,0.554917,9.710191,1.368483,3.809322,7.111134,-1.393013,-4.539146,-5.713938,-8.982906,-7.332478,7.194757,3.133503,7.939407,-9.994256,-8.518468,-5.290814,-1.722222,-0.673106,-4.180531,-8.144228,5.334552,9.277158,-0.999738,-3.688285,6.366524,-7.779196,-4.916681,-1.116803,-5.220532,-0.963901,0.533433,9.992014,0.380349,-0.803416,5.182771,5.461369,0.681795,0.988927,0.500896,8.605344,-9.373926,9.784950,6.544971,-3.772575,-8.975025,-6.184375,-1.239347,9.491435,-5.362371,3.405083,6.174366,-2.284468,8.908586,-5.194718,-2.094888,3.257405,1.725073,8.969057,-8.660656,9.430191,-1.186071,9.541893,1.887411,-6.857766,-6.618612,6.902702,1.475778,-9.515248,8.572511,4.937926,-3.935431,-4.265682,0.055773,-8.632395,-9.686212,6.109030,-6.989375,3.084592,4.322711,7.163004,9.855606,5.847874,-9.062413,0.674390,1.990997,9.733499,8.672377,1.999851,1.753858,7.885977,9.055254,4.339427,3.230483,3.698891,-8.993931,-1.957787,-4.705789,-0.346630,5.189668,-3.419590,-5.326310,4.057845,-3.553237,6.980635,-0.859606,0.115131,5.666141,7.924290,3.006626,2.499546,6.200238,2.498870,-9.497716,1.536275,2.643754,-6.842456,8.714217,7.979299,-0.699050,-8.378421,3.713159,7.244299,-7.552947,1.960556,3.485159,6.150380,-5.646054,-9.714385,6.379217,9.095057,-7.534605,-9.246378,4.180524,0.256627,-7.599520,-2.168793,4.126060,-8.915912,2.348182,3.357381,3.485566,8.191739,3.693779,-9.320174,2.887753,6.430555,5.424726,-2.801454,9.606975,-2.019068,0.158656,-6.751508,-3.198447,-8.801213,-6.856433,7.682903,-3.338744,-8.373176,-4.180474,-4.040669,-6.352008,4.159245,-1.179828,-6.099146,9.340305,1.655234,8.991858,7.330369,0.586074,3.095421,9.481225,5.756131,-0.879696,6.544189,-1.368098,-1.177557,5.128958,-9.627569,6.523101,-1.004996,7.476779,5.389483,8.968456,6.703706,-1.059650,-9.989611,8.705374,-1.004282,5.415699,-2.013155,8.102748,-6.884792,2.362848,-2.758110,4.985706,9.900542,1.646703,-8.995999,-3.150654,8.011186,-4.623460,-9.918783,5.141440,2.235405,3.346629,-4.110059,3.183451,7.175778,0.695306,1.125175,-0.476446,2.475796,-3.207159,-4.464872,0.290397,0.459090,-9.496938,0.714048,-3.845805,-4.980469,7.229521,5.800013,-9.949506,0.001913,-1.636536,-4.810523,9.551307,-7.330659,8.302787,-7.405354,-0.305387,0.355740,-3.295130,-5.886734,4.558168,-0.750821,6.260539,6.163875,-1.110208,9.213004,-7.128924,-9.485374,-0.391131,1.346967,4.859512,-5.476357,4.991987,-8.943288,8.239013,1.370274,-6.094044,2.791985,2.005126,8.202995,0.866426,-3.395865,-0.764909,7.493074,-1.228199,5.640882,4.887464,5.873261,3.000652,-7.513443,9.987186,0.795392,6.482019,3.027654,-4.057382,-4.504773,-4.378561,1.609316,5.602335,8.963042,1.045304,-3.864581,-9.271367,3.694017,0.668129,-1.512066,9.221669,-8.204152,-6.422748,2.802409,-8.719188,-3.160893,8.436075,-9.652007,1.481326,-0.603990,-1.530454,1.490847,-4.322987,-5.933146,-5.509357,-6.309714,-0.377425,-2.064141,0.164759,0.240215,5.590178,-3.410073,5.676223,-4.504854,-9.392432,2.899372,3.732903,9.048004,-5.567037,7.463405,4.476073,-6.413105,8.224412,-3.344759,5.647445,-7.276323,-7.171922,5.891599,0.578009,-5.206817,-3.642573,-3.597331,-7.583433,7.766865,8.202089,5.125692,7.637474,0.869185,-4.400242,1.126439,4.004225,-2.251380,-0.692951,-0.616551,2.909092,1.571797,-1.532753,9.160697,2.806668,0.972104,-0.880954,3.388308,0.152579,-6.554151,6.845520,2.453465,3.901494,-4.764162,2.326265,-0.906975,3.055510,-4.581469,7.732116,-5.841861,-9.084383,-9.916603,-4.037705,-0.405870,-3.993242,1.286302,-0.546980,-8.156167,-3.034076,7.877286,7.422369,8.808724,4.394747,7.693115,0.840097,-4.931489,3.688416,-3.188473,-3.133228,0.456153,3.779014,-8.384960,5.519544,-7.556324,4.690761,1.233086,8.905518,7.117707,-4.587388,4.841313,-2.891756,-4.195451,-6.269317,2.055921,4.062689,7.282830,7.526819,1.633898,2.568210,7.976619,6.510888,5.213861,6.945858,-8.365912,4.644892,9.898535,2.537672,-2.227505,3.474302,-9.100701,-7.333451,6.887852,-3.790748,7.012680,-4.377726,-6.804420,6.931131,-8.223400,3.901428,5.909863,7.055419,-4.688849,-6.518565,-6.004560,1.383024,-2.753417,2.457705,3.043533,-1.732943,6.222768,3.090289,1.715653,5.831213,2.732729,-6.969320,-9.308090,-6.751576,-3.035226,2.525927,-3.911873,0.130778,-4.795605,-3.139986,-3.165990,-3.484474,-0.940879,-1.477595,1.172955,4.995209,-0.885525,2.222965,8.069590,7.958765,-5.071436,5.872625,5.452905,5.340012,7.985455,-2.510472,2.413328,5.162177,-6.412046,6.465525,5.555851,1.345840,-6.774402,-4.335831,-6.257667,0.387896,-5.128251,0.750249,0.077496,-4.686454,-2.636744,3.977478,2.432349,9.769647,-2.600529,8.741100,-7.695337,8.586128,7.653950,-0.586849,4.365431,-1.569716,-0.549276,-1.302351,5.517114,-5.253915,9.477772,0.756139,-9.024627,-5.586206,7.647799,8.824135,-5.850198,-9.482780,-1.708132,5.900997,-8.226441,-7.391355,6.341235,-5.180018,2.484406,1.577924,-4.107445,2.256878,1.304270,6.682688,-5.182017,-5.012842,5.209187,-7.625764,-5.605912,-7.892624,-5.628167,2.930445,1.886052,-1.045774,6.997779,5.117446,-5.805634,-4.283404,-0.088852,-3.747335,-2.957630,-0.937796,5.392780,-7.625809,-0.820348,-2.233327,1.309028,1.079918,5.483992,5.392394,7.218783,2.059189,8.616648,5.690667,8.843036,-8.458839,1.100148,-7.466691,-0.299989,-1.769657,3.645587,8.200955,-5.610424,0.821211,-5.991392,-5.084565,0.722352,3.410943,-2.936108,-5.094685,-3.690260,4.369060,5.975831,-3.463308,-1.518876,4.346544,7.790270,-8.177979,7.369309,6.365612,-2.737285,2.963471,0.397610,3.540715,0.607113,-3.773803,-6.961810,0.505982,2.227318,0.583366,-7.458149,3.862591,6.243862,-2.256089,2.534330,-9.912638,4.375459,2.819722,-1.180764,-6.528185,-8.960946,1.317440,6.600491,3.738170,-2.101314,-6.962321,2.066338,-3.828882,-7.245425,7.631871,4.324292,2.184450,4.465442,1.882040,8.859877,6.247707,-5.823332,4.372781,-7.057826,-7.766412,8.538778,9.561307,-5.123337,-2.593497,-1.001894,-4.922260,9.017698,8.406427,-5.869670,7.833339,-8.932713,-4.279413,4.334667,-5.183214,-5.241234,6.719102,-6.530625,-7.416612,-9.993347,9.011282,-2.625618,-2.514161,5.378389,-0.391036,2.253381,-4.387267,-8.279125,-2.774991,-9.288841,8.808097,-7.363763,-6.110153,-5.281727,9.709710,8.247494,9.106477,7.541060,-6.983650,5.795204,-2.467471,-2.937363,2.283695,4.769274,-1.672700,-0.738964,-1.784052,-9.268678,1.957879,5.537788,-5.908914,0.083804,-7.053667,9.292186,-0.564190,1.333576,9.715284,9.431154,1.822900,1.639508,-7.728555,6.489102,-2.880646,2.421318,-7.649331,-8.469282,-6.019249,1.696421,-7.545365,1.600046,6.042447,-1.565908,-9.041651,5.704619,-0.991365,6.288368,4.598827,-6.035529,5.583855,0.774104,-7.266765,-6.175741,-4.807621,-3.569108,-0.874401,7.765630,-2.073598,3.881982,0.010251,-3.252848,4.075070,-8.225365,0.513835,-2.609614,-1.365243,-8.884936,2.936503,9.737119,-4.395460,0.745978,8.648207,5.015354,-5.559778,-7.259930,0.792159,0.367517,6.503212,6.817896,-1.893175,9.811598,-5.672674,-4.693145,-2.010179,3.277381,9.158298,2.898622,3.992679,-3.208045,5.490440,5.002938,-0.192442,3.776706,-8.488900,-2.909611,-9.799974,7.695992,6.217053,2.198533,-4.446218,7.229218,1.643322,-9.635897,5.605302,-4.013875,-9.251560,6.966491,-6.861757,-3.150682,-9.709623,-5.520043,-9.460180,1.430357,2.712728,0.914669,0.864082,8.908734,1.185245,6.184680,-8.902878,-2.324677,7.235510,3.522225,-1.480277,-4.136769,-1.048687,-4.972436,-0.810266,9.694653,-6.820409,3.135749,6.610110,-6.687824,1.646795,3.049706,8.590653,-4.047542,4.164740,-0.228382,0.066886,-2.891800,7.538018,-6.398759,-8.429007,6.495174,-2.178460,-1.751524,3.403470,-6.535559,-3.955219,0.887128,1.084271,-0.345044,0.673828,6.740261,0.692078,7.378220,-3.266565,6.527961,3.914522,5.921351,9.385956,5.205851,-9.843486,0.527782,0.938538,-1.450465,-1.541300,5.029672,4.861930,-7.386451,4.931236,-9.680670,9.238135,-5.511740,-0.846469,-9.064347,-7.089906,7.403112,-7.366809,7.642548,4.070971,-7.871849,8.463387,7.827264,-0.017069,2.522852,6.198312,7.345660,4.374652,5.186866,4.915903,-5.673658,2.733043,-7.573158,-0.887741,5.982370,4.827410,-2.481120,-0.025278,-6.425403,5.521206,-1.348070,9.158763,-6.935605,5.862144,-7.512384,9.139590,-8.633694,-6.217548,-1.192238,7.711006,-5.977993,-3.630979,6.443188,9.391939,4.424234,6.556214,1.015404,-0.191546,-8.823336,-7.315948,-4.457852,8.614949,-9.995879,-6.095843,-6.503584,0.079258,-1.685982,7.972184,-6.316152,5.113422,-8.735901,4.705324,5.282110,7.041133,5.318346,9.111792,3.008144,4.787907,-6.845431,5.962385,5.759555,-7.607571,-8.054501,1.969730,-0.197386,-7.830250,5.009349,-9.115885,5.709393,-0.985702,5.058469,3.060631,-4.854198,7.608560,-1.186775,-2.203524,4.111584,1.860405,-0.892823,-9.514276,-3.543274,7.593278,-1.053680,-3.361892,6.347289,-7.586324,-7.977173,-8.401258,-9.496603,-9.458614,-4.637103,-3.051619,7.661724,5.886805,-8.499732,-6.339522,-7.949651,0.460788,8.082500,6.463297,-2.558803,-3.395886,4.590163,-3.757053,-2.663653,-2.665636,0.960426,-7.496152,-8.914099,-9.977408,9.123144,8.962742,5.332994,-2.934580,9.156564,0.128684,1.411612,-2.843556,-2.063727,5.117595,1.692499,4.908914,-4.309637,6.017730,6.800576,-9.182010,-1.560935,0.329098,-4.830151,7.940873,1.124813,2.201337,-2.504352,8.615979,-4.718779,9.117145,-2.997995,-6.018761,-5.519011,6.494512,-9.299407,-4.332130,-0.703932,-3.510641,7.288627,-5.855076,-7.866351,8.190788,0.421119,-9.962105,4.509224,-8.604831,-2.817013,7.901563,-0.710246,6.299930,-3.134208,-9.532453,7.368145,9.408615,-4.360879,7.287509,0.039210,9.878879,9.138328,4.415085,0.608532,-1.673528,-8.766904,-7.220792,-0.843879,5.294604,8.860788,6.315805,-6.810076,4.481647,-0.304719,-0.744504,9.015523,6.838738,2.411007,-6.228044,-2.682517,-0.308707,-0.774241,6.391681,-6.119825,6.843087,-0.450645,-6.627105,6.034738,4.002745,-9.025977,9.386964,9.528604,-4.240319,5.419998,8.812253,3.398573,9.515744,-3.763755,8.361093,3.086505,-9.631880,7.519570,9.852098,-4.828418,2.966541,-3.674398,6.085426,6.223810,-0.051676,-1.395058,-8.650378,1.378999,5.392065,-0.939043,3.341505,0.843250,-6.174556,-4.058874,5.261061,-9.617081,-9.851475,3.080482,0.797905,9.175647,-7.669963,9.540995,-3.984755,-4.169444,8.054839,-0.587103,-0.358673,-2.810875,-8.669873,-2.267001,-3.798866,-2.091715,0.952130,-3.972756,-6.011756,-7.445660,1.275632,2.748711,2.378755,0.974425,2.863714,5.490816,0.579381,-6.299422,-5.185409,0.146673,0.986864,0.861474,5.354043,4.388162,-4.406224,-8.996231,-3.302797,7.903733,3.972591,-0.148578,-9.226349,4.388169,4.629754,4.226542,-5.848075,-7.774935,5.616616,5.509452,1.717903,-7.974987,-7.739990,4.957300,7.559679,-0.059357,0.697653,5.469582,-4.095553,4.041544,-3.979657,-5.145481,7.109849,-5.411427,-2.748635,-6.475292,3.068209,9.090337,3.247509,-7.004681,9.826268,-2.880905,1.612018,-2.400152,-3.582710,2.582312,8.144041,2.907015,6.241882,9.183234,1.460894,4.533181,-2.206936,8.586907,-7.993083,-0.180021,-5.085582,-7.233808,-8.020884,-0.767108,1.411166,7.193855,9.875302,3.876676,6.379115,-6.029373,-0.437000,4.645162,8.285874,3.476546,-7.155825,1.260422,-4.814387,-8.073515,1.156247,1.158157,-0.137731,2.627526,3.036848,-6.386556,7.870360,-4.162202,4.651071,-3.105356,-7.124476,-8.006328,-0.401063,9.700649,8.939895,3.176464,-9.890106,1.112797,-4.132793,-2.269194,-6.280446,-6.817882,-2.095458,3.397992,-1.738873,-8.222641,1.085881,2.327806,-0.938838,-8.353064,-2.194022,-7.799692,-3.846356,5.120655,-3.098575,1.273104,3.136223,-2.662931,-0.637000,8.920292,-5.239055,6.418982,-1.723314,1.684410,0.804836,-1.153577,0.816325,0.482125,8.786050,-4.139467,-3.150590,-5.598222,1.539044,5.094608,-1.006117,-8.300731,-2.933720,3.553883,-1.960861,-2.169007,-5.974446,1.457345,7.535738,-5.462479,-6.531413,5.501935,-7.765104,-0.570865,-3.582104,5.401733,-7.756892,2.542955,7.508087,2.621863,4.065152,9.421096,-9.001395,-3.902166,9.899061,-8.807912,6.053002,9.343685,7.832771,-1.980930,9.407172,8.118778,6.122365,8.559181,8.505395,6.179228,-8.604178,-3.130883,5.994109,-3.056002,6.349858,-5.265304,-8.044074,-0.783472,3.784606,-8.466920,-5.511848,-0.597056,-1.542108,-0.823886,-7.432179,5.452888,3.057768,-6.005524,-8.752584,2.336554,2.385651,-1.031317,7.407038,-1.941700,3.154171,-6.162601,-7.224984,-2.337718,-4.531156,-4.776237,-0.790834,9.959370,6.140600,-8.076373,-8.910070,-3.153396,-5.869951,-4.711780,1.895390,-0.177006,7.047116,9.047855,-7.246348,-8.565113,-0.496540,4.506563,-7.762418,-0.761211,-6.514537,1.209470,6.943542,0.725316,0.185349,4.983507,-4.534867,3.770059,-6.680002,0.120176,-5.542404,5.018594,-9.262105,0.992959,8.339602,-4.542577,3.376844,1.149928,2.102923,-4.575235,-3.053626,-1.160835,4.263533,-0.289934,-9.479457,-5.017810,2.475242,0.153018,1.729808,1.333960,8.992236,-4.128771,9.161672,1.219103,-1.078290,3.363812,5.053123,9.366633,-5.653105,2.753467,7.908114,8.459327,9.718171,-6.388634,-8.327039,-1.750649,-7.785710,-5.998871,-8.233199,-1.416235,9.356691,8.094910,7.548841,9.342310,-6.718733,-6.210503,6.026107,-0.407713,7.336497,1.540735,-4.127913,3.777828,-9.056822,7.472554,0.339436,-7.888889,0.452092,2.235592,-2.542549,-8.140577,1.696336,1.881166,2.922752,-6.272272,-2.638602,-6.223795,0.192996,3.395714,4.729249,-4.740203,4.823736,0.837912,-0.180001,1.858760,5.251293,8.512681,6.304397,2.979459,-3.810989,7.049865,8.547151,-3.634356,5.994248,5.588505,-9.840523,4.312452,-0.082559,-5.195394,8.340688,8.453132,-9.826778,-0.639072,4.898708,-6.906544,4.477272,1.235146,0.881787,9.845745,8.143868,7.140975,-5.764747,1.279772,7.268602,6.220725,-5.201769,6.950680,7.266453,-1.918640,-4.955764,-4.890579,-2.801425,-7.880158,5.189485,-9.445723,-3.094090,-9.032117,-2.461959,1.034056,-8.263612,-7.801542,-1.371737,9.864107,5.847681,-6.985286,-8.271180,7.397743,-6.387494,-9.785462,4.918321,9.034946,-7.813286,-9.754352,3.210951,-1.411306,-5.156966,-8.718036,-3.349381,-8.754027,0.299978,6.649871,-7.522653,-4.001034,4.589708,-6.304234,2.642066,-7.412009,-6.873590,-5.725197,7.916473,7.573017,-8.001241,-6.978220,4.525084,-4.001222,4.031030,-5.009333,5.885703,7.335614,6.628071,9.963186,2.853156,-7.650444,3.641055,3.821423,7.651399,-2.503584,7.681834]], dtype = "float32")#candidate|1880|(1, 1950)|const|float32
var_1881 = relay.var("var_1881", dtype = "int32", shape = (1792,))#candidate|1881|(1792,)|var|int32
call_1878 = relay.TupleGetItem(func_1194_call(relay.reshape(var_1879.astype('int16'), [10, 7, 5]), relay.reshape(const_1880.astype('float32'), [1950,]), relay.reshape(var_1881.astype('int32'), [1792,]), ), 2)
call_1882 = relay.TupleGetItem(func_1199_call(relay.reshape(var_1879.astype('int16'), [10, 7, 5]), relay.reshape(const_1880.astype('float32'), [1950,]), relay.reshape(var_1881.astype('int32'), [1792,]), ), 2)
func_347_call = mod.get_global_var('func_347')
func_351_call = mutated_mod.get_global_var('func_351')
call_1883 = func_347_call(relay.reshape(var_1881.astype('int32'), [8, 14, 16]), relay.reshape(var_1881.astype('int32'), [8, 14, 16]), )
call_1884 = func_347_call(relay.reshape(var_1881.astype('int32'), [8, 14, 16]), relay.reshape(var_1881.astype('int32'), [8, 14, 16]), )
var_1887 = relay.var("var_1887", dtype = "float32", shape = (1, 1950))#candidate|1887|(1, 1950)|var|float32
bop_1888 = relay.not_equal(const_1880.astype('bool'), relay.reshape(var_1887.astype('bool'), relay.shape_of(const_1880))) # shape=(1, 1950)
output = relay.Tuple([bop_1870,call_1878,var_1879,var_1881,call_1883,bop_1888,])
output2 = relay.Tuple([bop_1870,call_1882,var_1879,var_1881,call_1884,bop_1888,])
func_1925 = relay.Function([var_1865,var_1866,var_1879,var_1881,var_1887,], output)
mod['func_1925'] = func_1925
mod = relay.transform.InferType()(mod)
mutated_mod['func_1925'] = func_1925
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1925_call = mutated_mod.get_global_var('func_1925')
var_1927 = relay.var("var_1927", dtype = "float64", shape = (14, 2, 13))#candidate|1927|(14, 2, 13)|var|float64
var_1928 = relay.var("var_1928", dtype = "float64", shape = (14, 2, 13))#candidate|1928|(14, 2, 13)|var|float64
var_1929 = relay.var("var_1929", dtype = "int16", shape = (350,))#candidate|1929|(350,)|var|int16
var_1930 = relay.var("var_1930", dtype = "int32", shape = (1792,))#candidate|1930|(1792,)|var|int32
var_1931 = relay.var("var_1931", dtype = "float32", shape = (1, 1950))#candidate|1931|(1, 1950)|var|float32
call_1926 = func_1925_call(var_1927,var_1928,var_1929,var_1930,var_1931,)
output = call_1926
func_1932 = relay.Function([var_1927,var_1928,var_1929,var_1930,var_1931,], output)
mutated_mod['func_1932'] = func_1932
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2115 = relay.var("var_2115", dtype = "uint64", shape = (5, 9, 11))#candidate|2115|(5, 9, 11)|var|uint64
var_2116 = relay.var("var_2116", dtype = "uint64", shape = (5, 9, 11))#candidate|2116|(5, 9, 11)|var|uint64
bop_2117 = relay.multiply(var_2115.astype('uint64'), relay.reshape(var_2116.astype('uint64'), relay.shape_of(var_2115))) # shape=(5, 9, 11)
output = relay.Tuple([bop_2117,])
output2 = relay.Tuple([bop_2117,])
func_2124 = relay.Function([var_2115,var_2116,], output)
mod['func_2124'] = func_2124
mod = relay.transform.InferType()(mod)
var_2125 = relay.var("var_2125", dtype = "uint64", shape = (5, 9, 11))#candidate|2125|(5, 9, 11)|var|uint64
var_2126 = relay.var("var_2126", dtype = "uint64", shape = (5, 9, 11))#candidate|2126|(5, 9, 11)|var|uint64
output = func_2124(var_2125,var_2126,)
func_2127 = relay.Function([var_2125,var_2126,], output)
mutated_mod['func_2127'] = func_2127
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2261 = relay.var("var_2261", dtype = "float64", shape = ())#candidate|2261|()|var|float64
var_2262 = relay.var("var_2262", dtype = "float64", shape = (1, 16, 6))#candidate|2262|(1, 16, 6)|var|float64
bop_2263 = relay.mod(var_2261.astype('float64'), var_2262.astype('float64')) # shape=(1, 16, 6)
output = relay.Tuple([bop_2263,])
output2 = relay.Tuple([bop_2263,])
func_2286 = relay.Function([var_2261,var_2262,], output)
mod['func_2286'] = func_2286
mod = relay.transform.InferType()(mod)
mutated_mod['func_2286'] = func_2286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mutated_mod.get_global_var('func_2286')
var_2288 = relay.var("var_2288", dtype = "float64", shape = ())#candidate|2288|()|var|float64
var_2289 = relay.var("var_2289", dtype = "float64", shape = (1, 16, 6))#candidate|2289|(1, 16, 6)|var|float64
call_2287 = func_2286_call(var_2288,var_2289,)
output = call_2287
func_2290 = relay.Function([var_2288,var_2289,], output)
mutated_mod['func_2290'] = func_2290
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2888 = relay.var("var_2888", dtype = "bool", shape = (11, 12, 9))#candidate|2888|(11, 12, 9)|var|bool
var_2889 = relay.var("var_2889", dtype = "bool", shape = (11, 12, 9))#candidate|2889|(11, 12, 9)|var|bool
bop_2890 = relay.logical_and(var_2888.astype('bool'), relay.reshape(var_2889.astype('bool'), relay.shape_of(var_2888))) # shape=(11, 12, 9)
func_144_call = mod.get_global_var('func_144')
func_147_call = mutated_mod.get_global_var('func_147')
var_2894 = relay.var("var_2894", dtype = "float64", shape = (135,))#candidate|2894|(135,)|var|float64
call_2893 = func_144_call(relay.reshape(var_2894.astype('float64'), [9, 15, 1]))
call_2895 = func_144_call(relay.reshape(var_2894.astype('float64'), [9, 15, 1]))
uop_2902 = relay.rsqrt(bop_2890.astype('float32')) # shape=(11, 12, 9)
var_2913 = relay.var("var_2913", dtype = "float32", shape = (11, 12, 9))#candidate|2913|(11, 12, 9)|var|float32
bop_2914 = relay.floor_divide(uop_2902.astype('float32'), relay.reshape(var_2913.astype('float32'), relay.shape_of(uop_2902))) # shape=(11, 12, 9)
output = relay.Tuple([call_2893,var_2894,bop_2914,])
output2 = relay.Tuple([call_2895,var_2894,bop_2914,])
func_2918 = relay.Function([var_2888,var_2889,var_2894,var_2913,], output)
mod['func_2918'] = func_2918
mod = relay.transform.InferType()(mod)
mutated_mod['func_2918'] = func_2918
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2918_call = mutated_mod.get_global_var('func_2918')
var_2920 = relay.var("var_2920", dtype = "bool", shape = (11, 12, 9))#candidate|2920|(11, 12, 9)|var|bool
var_2921 = relay.var("var_2921", dtype = "bool", shape = (11, 12, 9))#candidate|2921|(11, 12, 9)|var|bool
var_2922 = relay.var("var_2922", dtype = "float64", shape = (135,))#candidate|2922|(135,)|var|float64
var_2923 = relay.var("var_2923", dtype = "float32", shape = (11, 12, 9))#candidate|2923|(11, 12, 9)|var|float32
call_2919 = func_2918_call(var_2920,var_2921,var_2922,var_2923,)
output = call_2919
func_2924 = relay.Function([var_2920,var_2921,var_2922,var_2923,], output)
mutated_mod['func_2924'] = func_2924
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3232 = relay.const(4.580215, dtype = "float32")#candidate|3232|()|const|float32
const_3233 = relay.const([[[-6.299812,9.360046,-4.770025,-8.911205,6.554173],[-0.911420,-0.514820,-5.992763,-6.150846,-6.283764],[-3.119755,-4.343325,-3.138725,2.810274,-9.076715],[7.619853,6.532551,5.073184,-7.212527,5.696669],[-9.812026,-2.118811,-7.373570,2.340669,9.057639],[-9.228243,-5.516297,-0.518879,-8.268773,1.402165],[-9.281974,3.286915,9.761678,5.757727,-7.599504],[4.048078,-8.893820,-7.946970,3.980442,-8.966006],[7.354258,-8.353431,6.500714,-5.181667,-6.541463],[3.850941,-9.856608,5.090968,6.661195,7.552586],[0.694837,5.551970,6.121790,9.651866,8.901069],[6.246832,-4.174337,-4.045070,-0.377500,-8.176299],[-7.065613,9.030311,-2.427351,-0.570825,4.963403],[-3.409062,1.968328,6.387118,5.806243,7.370396],[-2.622624,8.205976,-9.236520,-3.344977,-0.910081]],[[-0.576552,-6.474987,4.381068,-0.386629,7.728782],[-1.389724,-6.491828,2.709219,-1.165395,-1.219817],[4.131920,-7.358613,-9.063944,-6.246210,9.825001],[9.552980,-7.882272,1.088423,-4.405125,5.304031],[2.496219,5.140565,7.386217,1.840253,4.329974],[5.508749,-1.953113,6.285000,5.123377,-8.428521],[-9.344716,-1.959259,7.014721,8.647963,9.048673],[7.834751,-1.347390,-9.745743,6.950199,6.800748],[-7.256322,9.098603,-7.042123,9.315926,8.983777],[-0.557134,4.747044,-7.147618,-8.297764,-4.283415],[-6.029467,-1.326292,3.970245,5.436881,1.872740],[8.369196,8.712716,-5.779367,-8.861445,5.443995],[0.227836,9.597158,-0.027795,-1.717991,5.113628],[-7.642138,-0.738461,-2.934956,-1.972586,4.356885],[-2.986423,0.234544,6.198621,1.121677,4.716402]],[[9.836142,-7.241983,5.512834,-9.088962,5.405781],[-3.193897,-0.799511,1.326411,-0.505239,-0.962804],[7.474819,8.055015,-2.125856,-8.492586,-1.699259],[9.806736,9.521014,-9.515339,-4.111064,-4.970343],[5.847639,-8.313090,9.019574,-4.406968,8.920742],[3.128661,-9.382523,2.500864,-7.118206,-8.725641],[4.440129,-3.062655,-1.094237,0.351658,-2.890146],[-5.196096,-2.975738,9.181413,-8.630404,-6.029271],[-0.287505,-6.132995,-2.528488,1.967953,-2.303789],[7.774685,8.290087,-5.101254,-3.411023,7.039553],[8.795417,-4.421980,-1.022110,1.508820,-9.160495],[-3.997626,-5.611341,7.801116,-3.114474,7.627824],[-8.383159,-4.780135,-1.210943,1.333975,-6.751964],[6.313441,1.129860,2.056421,9.618048,-5.037797],[-9.797296,-1.073211,-7.508386,8.006618,3.109044]],[[2.935088,2.446948,6.247242,-3.075277,4.667570],[9.837468,-7.543234,-9.080811,-7.175766,-9.853937],[0.579028,5.187939,3.500650,9.111323,-4.602220],[2.475266,6.108572,3.164031,6.521188,6.688233],[-2.630455,5.970429,1.552685,8.993567,-6.932509],[6.335426,-4.966215,8.015695,-5.488794,8.549617],[2.501239,-5.347286,1.119243,-6.004695,7.485472],[5.932308,-8.035650,-7.258974,0.762851,-3.961303],[1.538977,5.817343,-1.035824,-4.465841,-3.525712],[-6.269155,-6.168901,-5.957611,-0.119007,-9.390920],[-9.010293,-7.754104,2.302694,6.654960,-4.965802],[-2.585620,7.449019,0.915422,-1.282681,-6.026129],[2.365985,8.028764,7.926981,-6.449132,-7.355201],[9.593579,-1.556947,8.318897,-6.573089,-0.957614],[-4.695821,-5.891279,5.776160,-5.199925,1.764830]],[[-5.096193,2.290691,5.385857,7.500651,-9.575338],[-3.171773,-7.266877,7.900203,-5.485665,-5.518609],[-3.329578,6.560978,-1.468337,9.733372,8.765793],[5.331819,5.191020,5.252621,6.475961,-9.068326],[-2.342804,2.526123,-0.584809,-0.809140,-9.325174],[5.870842,-7.552806,-5.176448,4.759532,3.106880],[-2.322850,-2.035145,5.836365,-0.823458,-9.469980],[-3.225191,-8.177947,-1.442466,4.118669,5.358682],[0.284057,-0.685875,-5.171471,5.650134,-4.346706],[-4.844967,1.891954,1.261587,-5.711786,-9.504212],[-4.249289,0.751729,-4.478058,6.274734,-5.990979],[-3.842496,-7.603204,5.119375,2.692305,-6.009031],[3.214986,-3.866520,-0.278273,0.123488,-8.002963],[7.201940,4.920264,1.132173,-3.356984,9.575525],[5.233586,8.082533,-2.975281,-7.398205,5.160824]],[[-5.479622,4.940397,4.432833,-5.764042,-9.020946],[-2.605347,6.051456,-7.570293,-8.650456,-9.745656],[-0.974957,1.647866,0.980745,-6.912793,9.997990],[-1.712880,4.935980,-3.029774,2.993232,6.612894],[2.594767,-3.383332,0.605140,6.125124,5.658248],[9.531979,-9.026673,1.246560,6.750026,7.476382],[8.527470,-4.180331,-5.423577,-0.128157,8.965576],[4.070376,5.757760,0.195612,2.501325,-1.917665],[-2.493060,-0.345899,-1.570809,-5.976883,5.111917],[-4.688021,-3.470970,7.873407,-9.927397,-6.571416],[-4.667634,-0.349130,3.668074,-3.825173,9.773774],[-0.509144,8.045864,-5.276006,-3.219747,7.141943],[-4.870656,0.607295,-3.719124,3.882444,-0.870269],[-4.916846,-7.337779,-1.837530,-4.496197,-7.497149],[-5.303361,-9.696637,4.355584,3.066564,4.999476]],[[1.074683,7.038333,-1.142457,-0.277567,-3.840399],[-8.709243,6.723243,8.608303,-3.535235,-9.216328],[1.422064,0.104069,-3.263432,-9.997395,9.570052],[-6.221734,-6.935267,8.996706,5.097592,-6.113015],[-3.091550,-8.462904,5.467260,3.824964,-3.054383],[-6.616587,-5.059324,3.830874,-4.250366,6.877550],[4.283480,3.556108,2.086566,6.508282,-5.300079],[-5.819017,-1.935179,-6.668013,-9.462913,6.560908],[8.676099,1.156480,-9.874996,9.317918,-7.150099],[-8.677094,-3.657357,6.148786,-4.803602,5.656370],[5.099570,8.217303,-6.504208,6.462146,6.145322],[4.284975,3.099512,2.067338,8.964838,-6.857413],[2.020607,-1.047607,-4.703254,2.011423,-4.729935],[7.130189,-9.220199,0.748419,-4.222882,9.796887],[0.098803,4.560148,6.918826,-7.661394,0.503326]],[[4.132286,4.930443,-0.121757,5.829281,-3.504740],[-7.789575,8.943156,-6.288038,-0.486764,-0.974606],[7.433851,-0.900417,-2.624266,7.169034,0.383140],[5.356507,3.690078,-1.335960,9.761904,7.582770],[6.266442,0.435848,-1.187710,4.911162,3.630958],[-8.448769,4.847017,4.157237,9.385492,8.789870],[2.157171,5.286316,3.495958,-6.111887,0.751560],[0.814091,-6.069677,-8.466416,-3.866345,5.776654],[9.613641,-7.765069,-7.007034,-6.450721,-9.030111],[-6.238330,-0.105063,-1.409632,6.805953,-1.384657],[-8.479905,1.374249,8.390330,5.230828,7.077602],[5.717820,5.351672,-2.365609,8.037528,3.732459],[-5.825050,4.096619,1.386608,-8.354318,-8.245617],[4.492918,-0.780298,9.005824,-6.713356,-1.376725],[0.049892,-6.487337,7.448524,7.792309,4.542240]]], dtype = "float32")#candidate|3233|(8, 15, 5)|const|float32
bop_3234 = relay.subtract(const_3232.astype('float32'), const_3233.astype('float32')) # shape=(8, 15, 5)
func_2918_call = mod.get_global_var('func_2918')
func_2924_call = mutated_mod.get_global_var('func_2924')
var_3255 = relay.var("var_3255", dtype = "bool", shape = (1188,))#candidate|3255|(1188,)|var|bool
const_3256 = relay.const([[3.814091,-7.222582,8.256355,3.574450,8.861306,9.607966,-7.319337,-3.569560,-2.076518,9.180898,0.002170,3.169516,8.742738,6.527788,-9.964392,-6.481265,-0.010194,0.388717,-0.728228,9.706336,-6.852986,-1.709469,6.288707,5.100543,6.435903,-0.924354,5.109500,-1.462130,8.727129,8.604804,7.119762,4.935538,-3.910564,-1.232491,8.884058,-1.148547,-1.711479,-6.329376,8.256133,-8.160951,-3.625538,0.703192,-3.084592,-4.782714,3.157925,-8.070371,7.818321,-0.544342,-0.009225,6.177795,-4.693255,1.406195,-6.948217,-3.884638,1.598068,-7.107823,-6.942252,-2.107026,3.077156,-2.567201,-4.329023,-0.985013,-2.426193,8.227183,8.117028,-6.750724,-9.800154,-1.136046,-9.888285,-0.745502,6.875822,2.078944,-1.320473,7.488674,8.578758,1.532257,-4.089509,7.034728,-0.277045,7.650683,0.539597,-5.576304,-8.497837,6.965811,9.552264,-0.745709,-3.392849,-0.454451,1.039285,7.193309,5.983783,-2.033733,-2.265075,-6.429212,-5.370921,-2.558789,-7.300120,0.804675,6.146176,0.626857,-9.066254,-7.156169,5.143517,-6.867074,-9.196735,8.930159,-7.556280,6.253557,-1.803151,1.683155,6.773076,-8.043326,-0.641536,-1.559041,-1.798263,8.344947,-5.947108,-7.940686,-1.941110,-6.157555,-6.921500,9.488910,-1.782795,9.866996,-4.221262,7.240518,-2.513613,4.090010,-1.746469,-6.910101,9.333187,6.175102,2.433227,-6.246118,-6.820959]], dtype = "float64")#candidate|3256|(1, 135)|const|float64
call_3254 = relay.TupleGetItem(func_2918_call(relay.reshape(var_3255.astype('bool'), [11, 12, 9]), relay.reshape(var_3255.astype('bool'), [11, 12, 9]), relay.reshape(const_3256.astype('float64'), [135,]), relay.reshape(var_3255.astype('float32'), [11, 12, 9]), ), 1)
call_3257 = relay.TupleGetItem(func_2924_call(relay.reshape(var_3255.astype('bool'), [11, 12, 9]), relay.reshape(var_3255.astype('bool'), [11, 12, 9]), relay.reshape(const_3256.astype('float64'), [135,]), relay.reshape(var_3255.astype('float32'), [11, 12, 9]), ), 1)
output = relay.Tuple([bop_3234,call_3254,var_3255,const_3256,])
output2 = relay.Tuple([bop_3234,call_3257,var_3255,const_3256,])
func_3267 = relay.Function([var_3255,], output)
mod['func_3267'] = func_3267
mod = relay.transform.InferType()(mod)
var_3268 = relay.var("var_3268", dtype = "bool", shape = (1188,))#candidate|3268|(1188,)|var|bool
output = func_3267(var_3268)
func_3269 = relay.Function([var_3268], output)
mutated_mod['func_3269'] = func_3269
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3391 = relay.const([[[-4,-2,2,7,5,6,-4,8,5,7,-6],[1,1,-6,-7,-6,5,-2,-8,-10,-6,5],[-5,-1,3,-6,-8,-10,4,-4,4,-10,2],[8,2,2,-6,7,8,-4,6,1,-9,-5],[-6,4,10,10,7,-1,8,6,-8,7,-2],[8,-5,2,-9,-6,7,-4,-3,1,2,8],[3,6,-6,-9,8,-6,6,6,4,-10,-2],[-8,-9,-5,-10,3,-7,-7,1,-1,5,1],[-5,7,-9,-2,1,7,10,-1,7,6,-10],[-6,10,2,-5,9,2,-1,2,5,5,3],[6,-8,7,-6,6,2,9,1,8,4,-5],[4,-10,5,1,-3,-4,-7,-4,10,4,5],[-7,-7,-8,7,-8,5,10,-7,7,-5,10]],[[2,6,3,-3,3,-7,-4,-3,-10,-4,3],[4,4,-10,10,2,6,-1,9,-1,3,5],[5,-2,1,10,1,-3,-3,5,-7,-5,-6],[3,-2,8,-2,-7,-2,-4,9,6,7,-7],[2,-6,-9,-1,-1,10,1,-3,2,-2,2],[-7,7,1,3,-8,1,6,-7,5,-3,3],[3,-9,-7,9,-4,-10,-2,-6,-10,1,-10],[-9,6,-7,9,5,8,-6,2,6,-4,8],[7,10,-8,-7,8,5,4,-2,-4,6,10],[8,-9,-9,-9,8,1,-3,1,-7,-10,2],[6,6,3,-3,3,-7,4,-5,3,8,3],[2,3,-2,4,6,10,-2,-3,-5,4,9],[10,-2,-9,-6,4,-8,-9,-2,4,5,-2]],[[-6,3,1,5,-7,6,-7,-10,9,1,2],[10,5,4,10,8,-2,9,-10,3,-1,-9],[-4,-1,4,2,4,-2,6,10,5,-1,-10],[-10,5,10,-2,4,7,-3,-1,-8,7,-5],[-7,8,-2,-9,-1,3,-4,-2,1,4,-5],[-8,2,-3,-6,-1,-1,7,9,-6,-6,-6],[3,7,-6,-1,-8,9,-2,8,-9,3,5],[5,-5,-4,-3,1,8,9,9,-7,8,-6],[10,-10,-10,-1,4,-10,-9,2,-3,-8,-9],[7,9,-6,1,1,5,-10,-6,-3,-7,1],[-7,7,-4,-1,6,-2,1,3,-9,3,6],[10,-4,-2,5,-10,6,2,-4,4,2,-4],[7,7,2,1,-5,1,5,-2,-9,-3,-10]],[[5,-10,6,9,5,7,-2,-3,-8,6,-8],[3,1,2,6,-9,-10,4,-2,-5,-8,10],[3,5,-2,3,1,-9,9,-8,-7,-8,7],[2,6,6,-2,-6,-2,10,-1,3,8,-8],[-5,-2,3,-7,3,-10,9,-2,6,7,8],[-9,8,-5,-4,-3,-9,-1,-4,-3,-10,-5],[2,-9,5,6,3,4,-9,-8,-2,-2,-6],[3,3,-9,2,-1,3,-5,-8,-2,6,2],[7,-8,1,-9,-5,8,-10,-1,3,9,2],[2,2,-10,-4,-6,2,-1,4,-9,4,-4],[-6,-9,7,-3,-9,-8,1,-1,-10,-5,9],[-5,-5,3,-4,6,-2,-7,10,-9,-6,-9],[-6,-1,7,9,3,-2,-8,8,2,2,-8]],[[4,-10,6,-9,-1,7,-1,10,-2,-4,1],[-9,-4,4,4,6,7,-10,-9,8,-6,-4],[9,9,-6,8,-2,8,-8,1,-4,10,2],[6,3,-1,-9,7,8,-3,-6,-6,8,6],[8,-7,-6,-6,1,8,-6,-2,-4,6,7],[-10,8,3,10,3,-7,-2,9,1,-10,5],[-10,4,8,-9,7,7,-5,-3,-10,-5,-9],[1,-5,-10,-5,-2,2,10,5,-4,-1,8],[-1,-3,1,7,-6,-8,1,7,-10,3,-4],[3,-4,-2,8,-3,4,8,-5,-3,-3,2],[-8,-2,-8,4,7,3,-2,8,-6,-9,-8],[-6,-1,-6,2,2,6,2,-8,8,-2,9],[-6,6,-10,2,1,3,-7,-8,-6,10,-4]],[[-8,7,-10,-6,4,7,-6,4,-5,6,-9],[-6,3,-9,3,-3,8,6,-10,-8,-6,4],[-4,-2,3,8,2,-9,5,9,-1,-9,-4],[-8,9,1,-3,-9,-3,-7,-10,8,-6,-8],[5,10,-10,7,-6,-10,-3,2,6,-4,-4],[-7,5,-6,-2,-3,-4,5,2,9,6,-4],[-10,4,10,5,8,-8,-7,3,3,-6,-9],[-8,-10,-10,6,-5,10,2,-7,6,9,6],[2,-5,5,9,-2,-4,6,9,8,10,-5],[-10,1,6,1,6,-3,-8,2,-2,-6,7],[10,8,1,-6,10,9,-3,3,-8,9,10],[10,7,-6,-8,-7,-10,6,2,-10,-7,6],[-3,-4,-8,2,2,-1,6,2,-2,-4,-3]],[[-8,4,7,-6,-3,-2,1,2,7,7,-1],[-5,7,-1,2,1,8,7,-7,10,3,7],[-1,9,-10,-4,-9,3,8,5,7,1,1],[3,-2,-8,-7,9,3,-4,4,6,-10,-9],[3,10,2,-7,9,1,-7,4,-5,1,-3],[-4,4,-10,9,3,-5,-3,-2,10,-4,-1],[-3,4,2,-7,-10,-1,1,1,3,3,4],[-5,-10,-10,-7,7,7,-7,7,-3,-6,-3],[8,-8,-7,10,-1,-10,1,7,-10,-7,8],[-6,-9,3,-3,-2,-2,3,5,3,-2,9],[2,1,-2,10,2,6,5,7,-10,1,1],[-3,1,4,-10,7,3,-5,8,-7,-3,2],[-4,8,-9,-6,-6,9,-5,-3,10,-7,9]],[[9,9,-8,1,-10,8,-1,-8,-9,7,6],[-3,-7,8,-7,7,-4,4,-9,-1,-3,9],[-8,-10,5,-5,9,7,-2,-1,-2,8,7],[8,-8,6,-8,5,4,-2,-5,10,-6,2],[-2,10,-3,1,-10,-7,8,2,-10,1,-4],[-5,-10,5,-1,-6,9,-10,4,-2,10,3],[-5,-3,1,1,7,-6,-10,-4,5,-6,8],[7,-5,6,-10,-3,-1,-2,-10,-2,8,5],[9,10,1,-10,-2,-3,-6,4,8,-3,-6],[3,-7,-3,3,4,7,-9,2,1,6,2],[-3,-8,-6,9,-5,7,9,6,8,-5,-5],[-5,-4,2,-10,-2,1,-1,-2,-8,-7,8],[5,-10,-5,7,-1,-1,-9,-5,-5,2,-6]],[[2,7,4,5,8,5,10,-4,3,1,8],[-5,1,-9,-6,7,-2,10,-8,7,2,3],[3,-10,3,-10,-5,4,-5,-10,8,10,4],[8,-2,8,-9,7,10,-8,-3,4,3,6],[2,8,-5,-2,8,-1,-4,-4,1,5,-1],[4,1,-3,-9,2,-5,3,-9,-9,4,-7],[8,-1,5,10,-9,1,4,6,-3,5,7],[7,5,-2,7,-7,-3,4,4,-5,10,-5],[-9,8,-7,9,-4,-1,6,8,-5,8,5],[5,10,6,-7,4,2,-10,-8,-7,7,9],[-3,7,-4,-5,9,-2,-1,8,-1,-4,6],[-4,-2,5,10,5,3,-1,-8,-9,8,7],[2,-5,-8,6,2,-6,-2,8,-7,5,-6]],[[8,-5,-3,10,10,3,-3,-4,-5,-10,3],[-2,-5,-3,-10,9,4,-6,-6,-7,8,-4],[3,1,-6,-8,4,9,10,10,-2,-9,2],[1,4,6,10,-7,10,8,1,-7,6,4],[8,8,-2,6,4,4,7,-4,-2,9,-8],[-9,3,-4,10,4,2,9,9,-8,5,3],[-1,-9,5,-4,5,4,9,-6,7,-8,4],[-3,-5,7,4,-3,4,-8,10,-4,7,-2],[9,5,9,-7,5,7,-2,9,2,-10,4],[5,-2,-8,8,-7,-9,3,8,-1,9,-2],[-10,-6,4,1,4,3,-7,-8,2,-4,-10],[7,8,-10,7,9,-6,2,-10,8,-8,-1],[2,4,5,-5,6,2,1,10,-7,-5,-3]],[[-10,9,7,1,-4,7,6,-5,-6,2,-4],[1,9,2,-10,-1,6,-10,-9,10,3,3],[-1,2,-9,5,-7,9,4,-2,-6,5,-4],[6,-6,-9,6,-10,-10,2,7,3,6,10],[3,4,-6,3,4,5,6,10,-4,8,-3],[3,10,3,-10,-5,6,2,8,6,-5,-3],[5,-4,4,-2,2,8,-3,-7,-6,6,2],[8,5,2,-4,-10,8,5,6,10,5,2],[-1,-1,-3,-10,6,3,-1,1,9,4,7],[-9,9,3,-9,9,5,-8,-6,-3,8,4],[-2,7,-8,9,10,-10,-7,-2,7,-8,-3],[3,7,-4,4,4,-6,-5,4,2,2,-5],[-5,7,2,6,-4,-7,-7,-3,10,4,2]],[[10,5,-10,-4,-8,-3,2,-2,1,9,6],[10,4,-9,-7,2,-5,-1,-6,1,3,10],[-9,4,-8,-9,-9,-4,-2,3,-3,9,2],[4,-5,1,-1,5,-3,2,-2,-8,4,3],[-6,-5,3,-7,-4,-2,-8,-10,6,-8,4],[4,3,-8,3,-10,10,-8,-9,-8,7,-5],[5,-1,1,-1,9,5,-7,-8,-6,1,-4],[-1,-3,-10,-10,-5,-10,-7,-8,-8,-4,-9],[-5,1,-5,-9,1,-6,8,-7,10,-5,-8],[3,-1,-3,3,-5,-10,10,-9,8,9,-4],[-9,5,-3,-2,-3,7,8,-8,-5,-9,-9],[2,-8,-8,6,5,-3,7,-1,6,-7,-5],[-4,-4,-5,-6,4,10,10,-10,-10,-4,-5]],[[8,1,9,9,-3,-8,4,1,-8,9,6],[8,6,1,10,2,-2,-5,2,-5,-7,-1],[-6,10,-7,2,8,9,7,-5,-6,8,-9],[8,-7,6,8,6,10,-8,6,-10,1,8],[1,-6,10,4,-8,-1,-5,-8,2,7,-1],[3,-6,-2,4,6,5,2,-9,-5,9,2],[10,-7,4,-8,-10,2,4,6,4,-3,5],[4,-2,-10,4,-4,-2,1,-6,2,-10,5],[-10,3,-2,-5,-4,2,-10,6,4,10,-3],[-3,10,7,4,5,3,-8,-6,4,1,-7],[-10,-7,-5,2,8,8,-5,-7,9,2,9],[8,2,7,-10,6,-9,4,-10,1,4,-5],[6,-7,-3,8,-7,-9,-8,4,-3,8,3]],[[-4,-10,2,-6,-2,-10,-7,6,-9,2,3],[6,-10,10,-9,-1,10,9,5,9,-6,-6],[4,-6,4,10,-8,7,-3,7,1,-6,9],[-3,9,-2,2,7,10,8,-3,-3,5,10],[-8,2,5,2,-1,6,8,-6,6,6,-1],[9,-5,9,-4,-7,-6,-4,5,4,-3,-10],[10,1,1,3,-4,-8,-5,-8,-5,-1,-4],[-1,1,8,8,4,4,-6,-5,-7,-1,9],[-1,7,1,-7,5,7,3,-1,-1,-9,-10],[-10,-3,-3,1,2,-8,7,9,8,2,-9],[1,8,-4,-9,-3,1,-5,2,-8,-9,3],[8,10,3,1,8,3,4,-4,-4,-1,7],[-9,1,3,-4,5,-8,7,-6,-5,-8,10]]], dtype = "int64")#candidate|3391|(14, 13, 11)|const|int64
var_3392 = relay.var("var_3392", dtype = "int64", shape = (14, 13, 11))#candidate|3392|(14, 13, 11)|var|int64
bop_3393 = relay.left_shift(const_3391.astype('int64'), relay.reshape(var_3392.astype('int64'), relay.shape_of(const_3391))) # shape=(14, 13, 11)
func_1925_call = mod.get_global_var('func_1925')
func_1932_call = mutated_mod.get_global_var('func_1932')
const_3417 = relay.const([8.698803,-5.718907,8.788401,2.037028,-8.366982,8.188280,-3.770526,-2.987506,-8.765256,-7.321172,8.256177,6.253332,2.940003,-6.654911,5.632516,-4.828752,-0.124691,2.257310,-6.996068,-7.474699,1.666654,8.930182,-5.207802,-0.373763,2.770293,6.276745,-0.584454,-2.074669,6.613305,4.623505,6.731073,2.804126,-2.107925,7.479455,2.258508,4.174853,-1.361673,2.518712,-3.798388,4.700339,-2.005166,4.758824,3.740868,-2.798009,-4.339268,-4.782535,8.303545,3.229007,-8.099343,8.454038,-5.112877,-7.119656,2.306483,-5.238785,-7.951921,9.789020,-3.395930,6.767422,-8.777189,-6.626852,9.234817,-7.326229,-0.614538,-7.714243,1.636596,-5.477229,3.259760,-2.390839,-8.250860,-0.431478,-6.584290,-6.288736,-3.711216,-7.185154,9.863106,4.946238,3.165307,-1.183318,-6.463663,-2.871733,-3.582109,8.545031,-4.121930,-8.429972,-9.591460,2.479494,-2.917762,1.728992,2.130299,9.232240,-0.037686,-0.407431,-9.630965,2.027109,0.637503,-4.150108,2.461815,1.454627,3.570332,-1.981679,4.946199,-4.910193,4.524217,-9.365684,-8.998653,-8.692136,8.119776,-5.744722,5.448277,-0.982637,-1.948682,-4.812685,-4.443752,5.792749,2.201020,-2.998315,0.476180,-2.619752,-4.193457,1.283406,-1.782828,-9.923347,-8.322984,2.701651,-8.646246,8.734385,7.377348,-6.606885,6.205124,4.819591,-3.360697,7.294974,6.840217,-5.566786,3.834553,-9.073656,4.559676,7.110942,7.389509,2.736911,-5.486994,-7.234361,-6.101262,1.632572,-2.115805,-7.466998,-0.489020,-6.517463,6.961119,-0.599639,4.101512,-1.546384,4.755080,-1.763138,8.656671,-5.832028,-2.053979,7.345270,-5.965226,3.986296,7.935381,3.722808,3.208727,0.368613,-2.620194,5.089108,-0.912570,6.098725,5.615346,6.403697,7.215941,-2.283716,-4.504251,3.027957,7.972601,-7.448911,-9.351722,-1.170171,9.005058,6.020552,8.199502,6.226306,-3.074287,2.161958,8.629351,-1.797717,1.143283,-6.289588,-5.874838,-7.937224,-3.712334,5.534705,-8.676439,7.156052,6.932810,3.825456,8.904834,2.905186,1.635474,-2.539668,2.255872,-4.766658,8.649593,-5.205358,-5.507294,0.342059,7.404770,1.038414,1.380541,-9.869668,1.601380,5.081570,-5.082853,8.129502,-9.269804,-6.933990,-7.372585,-2.721822,-9.296094,-4.344671,6.752652,7.066739,-0.491805,-7.468631,0.876586,-9.053352,-1.918194,-3.133738,-0.734164,7.426589,4.251404,-2.020175,-4.948129,6.150211,-2.865147,9.244784,-4.488577,-4.497491,3.359090,-6.623296,0.158848,-0.257767,-1.409533,2.964387,-1.562202,5.432606,-4.063447,7.181733,-6.243104,1.702252,-5.768826,-4.377238,-2.446834,6.145141,6.774060,-7.318685,2.320416,4.621861,4.874124,-1.991043,9.148434,9.324652,-0.118438,-2.018187,-9.904807,2.970779,-5.952486,2.275648,-7.891764,-4.966844,-3.541439,9.680343,6.439965,9.406968,9.166532,-8.079283,-7.805075,-0.612248,3.192867,9.494919,4.905025,-6.450388,3.238852,-8.501741,0.731740,6.149475,2.992133,7.336971,7.088952,-9.424480,-6.826927,4.712463,-7.889351,9.669626,-2.522629,5.201542,8.910480,1.498857,8.369467,3.642685,7.473543,-6.424920,9.705685,0.197800,1.879294,5.494224,2.317824,-8.295164,-3.398871,3.610388,-0.202709,-6.803042,-8.845908,-1.227421,6.814794,-1.159448,8.784500,-4.941988,-5.715004,8.098521,1.839272,-0.599949,-5.701687,-7.385542,-8.030606,4.436630,0.303495,0.402144,-7.380717,1.983234,4.146271,-0.555642,6.231349,6.839416,-7.751314,0.996152,2.212576,-2.264493,-0.704962,-0.290499,-4.321682,7.878143,-4.388542,-4.466493,8.279999,-7.656562,1.208844,8.056289,8.369290,4.356489,9.335564,1.401015,-0.314984,-2.001657,8.278905,8.849407,4.803211,1.184435,3.216984,-9.504764,3.339199,6.709588,7.710470,5.487635], dtype = "float64")#candidate|3417|(364,)|const|float64
var_3418 = relay.var("var_3418", dtype = "int16", shape = (350,))#candidate|3418|(350,)|var|int16
const_3419 = relay.const([[9,-1,6,1,-1,3,-4,-5,10,6,8,-9,-7,-7,-8,-1,9,-5,-3,10,-7,-6,-5,4,10,9,1,-10,-2,-7,6,-7,-4,-1,9,1,-4,8,7,-7,4,-6,3,3,2,4,-2,2,5,2,-5,-1,9,10,-5,-4,4,6,-7,1,-1,-9,7,-8,5,8,3,10,-3,10,9,7,-8,-1,3,8,8,-8,7,9,6,-3,-1,2,3,-1,10,6,-10,4,-8,9,8,-10,3,-10,-1,9,5,-3,7,-1,-2,4,-3,-7,-3,-4,4,-7,-5,4,-9,7,6,2,-4,10,-9,1,-5,10,7,-8,-10,-5,-3,3,4,5,10,5,2,3,10,-3,2,-2,9,-9,-6,-4,-5,-2,-6,1,6,-1,1,-10,-8,5,-6,1,8,2,6,6,4,-2,-7,-8,1,1,-5,-3,4,7,7,-5,9,1,-5,7,-3,2,2,-4,1,-4,-6,9,5,2,-3,-6,-4,10,-2,-1,-5,-6,4,1,5,2,-2,-3,-9,8,-10,6,1,-5,2,9,-10,-6,7,2,3,-5,-6,-2,3,-9,-4,9,3,-8,10,4,-4,-6,8,-5,3,5,-8,6,-5,-6,-4,-4,-1,-3,10,2,-8,5,6,6,-1,9,-8,-3,-2,3,6,-2,-8,7,-2,1,7,5,-7,-3,4,8,-8,6,-1,-3,-4,3,10,9,-9,2,-8,9,10,4,3,5,-2,-1,-9,2,-1,-5,-5,3,-5,-9,-1,-8,8,4,-3,-5,1,-10,2,2,-6,-2,-1,4,9,-9,-10,1,9,3,6,9,-6,8,2,9,6,1,-6,3,8,6,-9,8,-2,-9,1,-6,8,2,3,-10,-3,-6,5,4,1,1,-7,-5,-2,-7,-4,-7,-4,-2,10,-6,2,4,1,-1,10,-2,3,-5,-2,5,3,8,-2,-6,4,-5,-4,-8,-9,-9,2,-7,9,-9,2,8,-7,7,-9,-10,-5,-3,-8,-7,-9,7,8,-4,3,9,-7,-3,3,2,2,-7,10,7,-1,4,-3,-9,2,7,7,3,2,8,7,-7,5,6,-6,-1,1,6,6,-2,-1,6,-4,-3,6,-2,-3,-9,-5,-4,-2,-7,-10,-5,-8,-5,-6,6,9,-6,3,7,9,6,3,-4,-3,-7,3,9,1,-8,-6,-8,-4,-1,2,-4,-4,-4,8,-3,8,6,-6,-3,-1,-3,-7,-2,-5,9,9,-10,-4,3,4,-5,-7,-6,-7,9,3,-5,-3,3,-9,9,8,2,-4,5,2,2,10,4,6,7,5,10,-8,10,-9,-5,8,10,4,-2,5,8,10,5,3,-7,-4,10,2,-9,-9,-2,4,1,-7,-4,4,2,-4,-2,-10,7,8,6,-7,2,9,-3,6,-1,-6,9,-9,-6,9,1,-6,3,-8,-5,2,-3,3,-4,-9,-6,-1,4,8,-2,7,6,4,9,-6,8,-4,-1,-6,-8,9,1,10,10,5,-3,-7,-6,-6,-2,-1,-4,-3,4,9,6,5,-8,3,1,1,-10,4,-9,3,5,-4,-9,-4,-6,-4,-1,-10,-5,10,-8,-1,7,-4,-8,-8,1,1,-8,-4,8,-7,-8,-1,-7,-1,9,-5,9,-5,-8,-9,-4,10,7,-6,-3,-7,9,6,-8,3,8,8,-7,4,5,-4,-6,-2,-8,10,-3,-4,5,-8,-6,-2,7,2,2,-1,9,-7,10,8,10,-1,4,-3,5,4,2,-6,6,7,3,-5,3,-9,-3,-5,6,-6,-1,-1,-2,-6,3,-5,9,6,-8,-6,7,8,-4,-5,-6,3,1,4,9,10,-3,10,7,-5,1,7,-9,-5,7,3,10,1,-2,-9,-6,-2,5,8,-1,6,6,-7,-10,8,-4,-1,1,-8,-6,3,-7,10,8,-4,2,-9,5,3,-10,-3,6,-9,-5,-7,7,4,6,5,-1,-4,-1,1,-1,-3,9,-3,1,1,10,-8,9,-10,7,10,-6,-3,7,3,2,9,2,-6,6,9,-9,-3,-1,5,10,-8,-10,-1,6,-5,10,10,5,-2,-3,-7,10,-3,4,-10,1,-1,10,-8,-8,5,-6,-9,-10,2,-4,8,-10,6,6,10,-6,10,7,-2,-2,2,-3,1,-3,-9,-3,-10,7,-8,-2,2,-1,5,4,-2,6,6,-4,3,1,4,-8,-8,-10,9,5,3,-6,4,6,8,-10,1,5,-3,9,-2,-2,3,-5,8,-6,7,-7,-3,7,-5,8,-10,4,-9,1,-10,-2,-6,5,-8,-3,2,6,-3,9,-7,-5,-9,-2,-2,2,7,6,2,7,4,-4,2,-4,-10,-4,-9,8,10,8,7,5,-5,-7,-4,-6,-6,5,-2,-2],[1,1,-7,-9,3,10,-9,-3,-7,1,7,-10,-10,3,-5,4,3,5,6,-8,1,-8,2,-5,4,-2,3,-5,8,-3,-3,6,-2,-7,-5,9,10,6,-1,-2,-7,9,8,-3,2,-7,4,-2,-6,-7,3,-9,-7,4,8,-4,-2,-6,-7,-7,6,-7,-9,7,7,10,-1,-2,6,6,-5,10,5,8,-5,-2,-8,9,7,7,-1,-3,-4,3,-2,3,-1,-5,-8,-8,-7,-4,-7,-4,-1,8,6,6,-8,-1,8,-8,-8,5,7,9,-2,-8,-5,3,5,-8,5,-4,-3,-3,-10,1,-5,4,-10,5,5,2,8,-6,9,6,9,6,5,-4,2,3,-4,9,-9,5,-8,3,-4,-10,6,8,-8,-9,6,9,1,-5,-8,-6,-7,-2,9,10,6,-8,-6,8,-1,-8,-10,-4,9,-5,-2,-6,3,-3,-3,6,2,4,10,-3,-8,-9,8,-1,-3,-5,-7,-5,9,3,-10,3,-4,-2,-8,-9,-8,9,2,-2,-6,1,8,-6,-5,-10,1,-8,10,-3,-7,-9,1,-10,7,9,10,9,-9,6,-7,8,2,2,8,-2,-8,-1,-8,3,4,1,5,6,6,-5,-10,10,2,4,9,-6,-7,-7,9,-4,-5,1,-6,3,8,-4,4,-10,6,-6,-10,-4,-1,-3,3,5,2,-8,-10,-2,-1,-9,-10,9,3,-5,-10,-7,9,1,-9,10,10,-2,10,-3,10,-6,-10,-10,-2,3,1,-3,4,-2,8,-6,9,3,2,10,7,-6,-3,-10,-9,-7,5,-1,-3,3,7,4,-7,-5,10,-3,-1,5,-5,-9,10,-5,7,5,2,-3,-5,-3,3,-3,5,-9,-7,2,-9,-6,-8,-3,10,-5,6,-9,7,5,-4,-1,8,-7,6,7,-2,-4,8,5,7,-10,10,-4,-5,-4,-7,8,-7,-10,-6,-10,-4,9,4,-9,4,2,1,10,4,5,-9,9,-9,10,-8,6,-7,-3,8,3,-3,5,-2,-10,-9,8,-9,5,-7,-5,-9,8,-3,8,5,3,-6,-4,7,5,-10,-5,1,6,7,5,-10,4,4,-7,3,8,2,10,-7,-5,-7,5,10,-7,3,-5,-3,-8,-10,7,-7,-5,-9,8,9,1,4,5,7,3,2,-5,-6,3,10,-1,8,-7,10,-3,9,-4,-1,-8,-1,-8,-8,9,8,2,-3,-4,-1,-10,-6,-10,6,-9,3,5,10,-6,-8,4,6,-3,-3,1,-10,4,3,-3,8,-10,-3,6,10,-2,6,6,6,-2,-10,10,4,-6,-8,10,4,8,4,-9,-5,-5,-10,2,2,-4,6,2,8,9,-10,-3,-10,10,-4,-10,-1,-1,-8,7,-4,6,-7,-2,-8,-2,-1,-1,-5,-6,-1,1,3,-4,-2,5,-4,-7,-9,5,-9,4,-1,2,-7,8,-7,1,-8,3,8,7,8,10,-1,5,-3,10,3,1,-2,-7,7,-9,2,6,-1,-9,-6,-6,-5,9,-9,1,10,-3,2,-1,7,5,-1,7,-5,1,-7,-10,-10,-10,7,5,3,10,-8,-6,1,4,4,4,-10,-1,-3,-9,10,-2,-1,4,4,1,7,9,-1,-9,-6,4,-9,-3,6,3,-1,2,-3,6,-10,-1,4,-4,7,-2,8,1,1,-8,-5,-4,8,-8,2,-10,1,-7,3,2,7,-3,9,2,7,8,3,-10,-8,5,2,-2,7,8,3,10,-5,4,-8,-4,8,-8,-4,5,-5,-3,4,-10,7,2,9,9,-6,7,-1,8,-1,-2,5,10,-6,6,10,-4,5,8,-10,9,-2,-2,7,4,-6,-4,4,10,-1,-1,-6,8,2,7,-3,-10,5,7,1,10,8,10,-10,-1,1,-1,-8,8,7,4,6,-4,-5,2,2,7,6,1,10,-8,-5,-7,8,-5,-5,-4,2,-3,-10,-6,5,-4,3,-10,9,-3,4,9,9,8,2,8,-1,4,-4,-6,4,-3,-5,-9,8,1,5,-8,4,10,-10,-2,9,-2,8,3,8,-8,-8,9,10,10,10,2,5,-9,-2,6,9,-4,6,1,-3,6,8,7,-7,-5,-8,8,9,-10,10,-2,-4,8,-6,-3,-7,-10,8,5,6,-10,-5,10,8,6,-6,1,-9,-9,7,1,4,-1,1,-8,3,3,-8,5,3,-8,-4,-8,-5,5,10,7,9,8,3,-9,4,8,5,10,7,-6,6,-1,10,4,-3,-5,1,2,-7,-4,-3,5,-8,-7,-4,3,4,2,1,5,8,-6,-1,-5,-9,3,3,-1,4,3,10,9,-3,9,8,-6,2,-7,10,5,-3,1,-6,-7,2,-2,8,-6,4,-5,-9,-9]], dtype = "int32")#candidate|3419|(2, 896)|const|int32
var_3420 = relay.var("var_3420", dtype = "float32", shape = (1950,))#candidate|3420|(1950,)|var|float32
call_3416 = relay.TupleGetItem(func_1925_call(relay.reshape(const_3417.astype('float64'), [14, 2, 13]), relay.reshape(const_3417.astype('float64'), [14, 2, 13]), relay.reshape(var_3418.astype('int16'), [350,]), relay.reshape(const_3419.astype('int32'), [1792,]), relay.reshape(var_3420.astype('float32'), [1, 1950]), ), 2)
call_3421 = relay.TupleGetItem(func_1932_call(relay.reshape(const_3417.astype('float64'), [14, 2, 13]), relay.reshape(const_3417.astype('float64'), [14, 2, 13]), relay.reshape(var_3418.astype('int16'), [350,]), relay.reshape(const_3419.astype('int32'), [1792,]), relay.reshape(var_3420.astype('float32'), [1, 1950]), ), 2)
output = relay.Tuple([bop_3393,call_3416,const_3417,var_3418,const_3419,var_3420,])
output2 = relay.Tuple([bop_3393,call_3421,const_3417,var_3418,const_3419,var_3420,])
func_3440 = relay.Function([var_3392,var_3418,var_3420,], output)
mod['func_3440'] = func_3440
mod = relay.transform.InferType()(mod)
mutated_mod['func_3440'] = func_3440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3440_call = mutated_mod.get_global_var('func_3440')
var_3442 = relay.var("var_3442", dtype = "int64", shape = (14, 13, 11))#candidate|3442|(14, 13, 11)|var|int64
var_3443 = relay.var("var_3443", dtype = "int16", shape = (350,))#candidate|3443|(350,)|var|int16
var_3444 = relay.var("var_3444", dtype = "float32", shape = (1950,))#candidate|3444|(1950,)|var|float32
call_3441 = func_3440_call(var_3442,var_3443,var_3444,)
output = call_3441
func_3445 = relay.Function([var_3442,var_3443,var_3444,], output)
mutated_mod['func_3445'] = func_3445
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3723 = relay.var("var_3723", dtype = "float32", shape = ())#candidate|3723|()|var|float32
const_3724 = relay.const([[[3.691297],[0.699280],[-2.224927],[-0.879268],[0.002781],[-9.300885],[7.552640],[6.917346],[-0.426574],[-0.528338],[-1.093116],[0.673579],[8.850106]],[[-0.410529],[-2.369190],[6.448627],[-0.084408],[3.189579],[0.488655],[-3.708749],[4.536403],[-0.392683],[7.399248],[-2.758697],[-9.571731],[-3.546419]],[[9.569272],[-3.880615],[2.266662],[1.239042],[-4.114944],[3.335055],[-4.085919],[3.033356],[3.459568],[-9.246986],[-8.639481],[9.911773],[1.301545]]], dtype = "float32")#candidate|3724|(3, 13, 1)|const|float32
bop_3725 = relay.equal(var_3723.astype('bool'), const_3724.astype('bool')) # shape=(3, 13, 1)
output = bop_3725
output2 = bop_3725
func_3740 = relay.Function([var_3723,], output)
mod['func_3740'] = func_3740
mod = relay.transform.InferType()(mod)
var_3741 = relay.var("var_3741", dtype = "float32", shape = ())#candidate|3741|()|var|float32
output = func_3740(var_3741)
func_3742 = relay.Function([var_3741], output)
mutated_mod['func_3742'] = func_3742
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4244 = relay.const([[[True,False,True,False,True,False,False,False,False,True,False,True,False],[False,True,False,True,True,True,False,False,True,False,True,False,False],[False,False,False,False,True,False,False,False,False,False,True,False,False]],[[True,False,False,False,False,True,False,True,False,True,False,False,False],[True,False,True,True,True,False,False,True,False,True,True,True,True],[False,True,False,False,True,True,False,True,False,True,False,False,False]],[[False,True,False,True,True,False,True,True,True,False,True,True,False],[True,False,True,False,False,True,True,False,False,False,False,False,False],[False,True,False,False,True,True,True,False,False,True,False,True,False]]], dtype = "bool")#candidate|4244|(3, 3, 13)|const|bool
var_4245 = relay.var("var_4245", dtype = "bool", shape = (3, 3, 13))#candidate|4245|(3, 3, 13)|var|bool
bop_4246 = relay.logical_and(const_4244.astype('bool'), relay.reshape(var_4245.astype('bool'), relay.shape_of(const_4244))) # shape=(3, 3, 13)
output = bop_4246
output2 = bop_4246
func_4255 = relay.Function([var_4245,], output)
mod['func_4255'] = func_4255
mod = relay.transform.InferType()(mod)
mutated_mod['func_4255'] = func_4255
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4256 = relay.var("var_4256", dtype = "bool", shape = (3, 3, 13))#candidate|4256|(3, 3, 13)|var|bool
func_4255_call = mutated_mod.get_global_var('func_4255')
call_4257 = func_4255_call(var_4256)
output = call_4257
func_4258 = relay.Function([var_4256], output)
mutated_mod['func_4258'] = func_4258
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4614 = relay.var("var_4614", dtype = "int16", shape = ())#candidate|4614|()|var|int16
var_4615 = relay.var("var_4615", dtype = "int16", shape = (14, 9, 1))#candidate|4615|(14, 9, 1)|var|int16
bop_4616 = relay.maximum(var_4614.astype('int16'), var_4615.astype('int16')) # shape=(14, 9, 1)
func_3440_call = mod.get_global_var('func_3440')
func_3445_call = mutated_mod.get_global_var('func_3445')
var_4620 = relay.var("var_4620", dtype = "int64", shape = (2002,))#candidate|4620|(2002,)|var|int64
const_4621 = relay.const([-3,-7,2,1,2,-5,-6,-6,10,4,-7,-6,-9,-7,-4,-6,-5,-3,10,-8,-8,9,-3,-8,10,8,10,-10,-6,3,-7,8,2,2,-5,-4,1,-6,-6,-9,8,-6,1,7,-4,9,9,-7,9,5,-10,-9,-2,-7,-1,7,-4,-8,-2,4,5,-1,-1,7,10,5,3,-10,1,3,4,1,-6,4,-2,-6,-2,-3,-7,-4,-4,-4,-5,2,-4,9,-7,-7,-9,-3,-9,-10,-7,-3,-3,9,8,-6,2,2,-3,5,1,-4,-2,3,-5,-2,6,-5,4,8,-1,-8,2,-8,-9,4,-4,-10,5,-10,6,3,9,3,-5,-7,5,9,3,2,-10,-4,7,3,-9,4,-6,9,4,9,5,8,-9,-7,4,-8,8,-9,10,-6,-4,6,7,3,9,3,-8,-4,-5,1,10,4,-3,-2,-4,2,9,7,-7,-7,4,2,10,9,9,-7,-1,-9,-5,-7,-9,8,-9,4,-5,2,-3,-1,2,-10,-2,-10,-1,5,-9,-6,1,8,9,6,5,5,-4,-2,-8,7,-1,-1,5,-8,-10,3,-10,-1,-5,5,9,-9,-8,-1,-3,-6,-5,-9,-5,-7,3,6,2,-10,-6,-6,-9,-10,-4,-3,7,-5,8,-7,3,8,5,-7,1,4,4,-4,3,-10,-3,7,-6,-6,-8,-7,-6,-5,1,6,1,3,9,10,1,10,7,-8,2,7,-7,-9,1,2,7,-6,-9,6,6,2,6,-3,-1,-5,-3,3,7,2,9,2,3,4,6,-2,6,10,-5,-4,-2,-1,1,6,9,8,4,-4,7,-1,-8,7,-4,-7,-10,7,-1,-10,4,10,5,-9,-7,6,-1,-9,9,-4,-3,-3,-3,6,1,-6,-3,6,6,9,-8,-7,3,9,-2,-4,-7,7,-9,4,10,-3], dtype = "int16")#candidate|4621|(350,)|const|int16
var_4622 = relay.var("var_4622", dtype = "float32", shape = (1950,))#candidate|4622|(1950,)|var|float32
call_4619 = relay.TupleGetItem(func_3440_call(relay.reshape(var_4620.astype('int64'), [14, 13, 11]), relay.reshape(const_4621.astype('int16'), [350,]), relay.reshape(var_4622.astype('float32'), [1950,]), ), 5)
call_4623 = relay.TupleGetItem(func_3445_call(relay.reshape(var_4620.astype('int64'), [14, 13, 11]), relay.reshape(const_4621.astype('int16'), [350,]), relay.reshape(var_4622.astype('float32'), [1950,]), ), 5)
output = relay.Tuple([bop_4616,call_4619,var_4620,const_4621,var_4622,])
output2 = relay.Tuple([bop_4616,call_4623,var_4620,const_4621,var_4622,])
func_4627 = relay.Function([var_4614,var_4615,var_4620,var_4622,], output)
mod['func_4627'] = func_4627
mod = relay.transform.InferType()(mod)
var_4628 = relay.var("var_4628", dtype = "int16", shape = ())#candidate|4628|()|var|int16
var_4629 = relay.var("var_4629", dtype = "int16", shape = (14, 9, 1))#candidate|4629|(14, 9, 1)|var|int16
var_4630 = relay.var("var_4630", dtype = "int64", shape = (2002,))#candidate|4630|(2002,)|var|int64
var_4631 = relay.var("var_4631", dtype = "float32", shape = (1950,))#candidate|4631|(1950,)|var|float32
output = func_4627(var_4628,var_4629,var_4630,var_4631,)
func_4632 = relay.Function([var_4628,var_4629,var_4630,var_4631,], output)
mutated_mod['func_4632'] = func_4632
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4652 = relay.var("var_4652", dtype = "float32", shape = (7, 2, 7))#candidate|4652|(7, 2, 7)|var|float32
uop_4653 = relay.sigmoid(var_4652.astype('float32')) # shape=(7, 2, 7)
bop_4657 = relay.bitwise_or(uop_4653.astype('uint16'), relay.reshape(var_4652.astype('uint16'), relay.shape_of(uop_4653))) # shape=(7, 2, 7)
output = bop_4657
output2 = bop_4657
func_4660 = relay.Function([var_4652,], output)
mod['func_4660'] = func_4660
mod = relay.transform.InferType()(mod)
mutated_mod['func_4660'] = func_4660
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4661 = relay.var("var_4661", dtype = "float32", shape = (7, 2, 7))#candidate|4661|(7, 2, 7)|var|float32
func_4660_call = mutated_mod.get_global_var('func_4660')
call_4662 = func_4660_call(var_4661)
output = call_4662
func_4663 = relay.Function([var_4661], output)
mutated_mod['func_4663'] = func_4663
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5213 = relay.var("var_5213", dtype = "int32", shape = (6, 6, 1))#candidate|5213|(6, 6, 1)|var|int32
var_5214 = relay.var("var_5214", dtype = "int32", shape = (6, 6, 9))#candidate|5214|(6, 6, 9)|var|int32
bop_5215 = relay.subtract(var_5213.astype('int32'), var_5214.astype('int32')) # shape=(6, 6, 9)
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
const_5225 = relay.const([True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True], dtype = "bool")#candidate|5225|(117,)|const|bool
call_5224 = func_4255_call(relay.reshape(const_5225.astype('bool'), [3, 3, 13]))
call_5226 = func_4255_call(relay.reshape(const_5225.astype('bool'), [3, 3, 13]))
func_3267_call = mod.get_global_var('func_3267')
func_3269_call = mutated_mod.get_global_var('func_3269')
const_5247 = relay.const([True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False], dtype = "bool")#candidate|5247|(1188,)|const|bool
call_5246 = relay.TupleGetItem(func_3267_call(relay.reshape(const_5247.astype('bool'), [1188,])), 2)
call_5248 = relay.TupleGetItem(func_3269_call(relay.reshape(const_5247.astype('bool'), [1188,])), 2)
output = relay.Tuple([bop_5215,call_5224,const_5225,call_5246,const_5247,])
output2 = relay.Tuple([bop_5215,call_5226,const_5225,call_5248,const_5247,])
func_5261 = relay.Function([var_5213,var_5214,], output)
mod['func_5261'] = func_5261
mod = relay.transform.InferType()(mod)
mutated_mod['func_5261'] = func_5261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5261_call = mutated_mod.get_global_var('func_5261')
var_5263 = relay.var("var_5263", dtype = "int32", shape = (6, 6, 1))#candidate|5263|(6, 6, 1)|var|int32
var_5264 = relay.var("var_5264", dtype = "int32", shape = (6, 6, 9))#candidate|5264|(6, 6, 9)|var|int32
call_5262 = func_5261_call(var_5263,var_5264,)
output = call_5262
func_5265 = relay.Function([var_5263,var_5264,], output)
mutated_mod['func_5265'] = func_5265
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5347 = relay.const([[[-5.770524,0.822762,-1.381759,5.016559,2.441797,1.256015,-5.761165,6.130249,-5.481292,8.746450,-7.635464,7.385339]],[[4.100895,0.584703,0.324343,4.947706,-3.616414,-3.154718,-1.258162,-4.402664,0.139309,-3.240376,8.872458,8.311160]],[[9.037959,7.954233,-8.637231,-1.215366,2.755972,4.697690,-8.230524,-4.574585,4.966913,2.681573,-8.526158,1.949838]],[[-2.115460,9.752571,9.488560,2.527690,0.569003,-6.907183,3.079230,-7.041069,3.421063,-8.055771,-3.052993,-2.112182]],[[9.342101,-6.231910,7.807420,-1.789816,6.174176,6.428092,-0.019521,-7.811479,4.853643,7.937327,5.277080,7.381594]],[[3.268522,8.077563,0.940777,-0.557968,9.406188,-5.968596,-2.041318,-0.412075,9.946707,8.815183,9.976366,5.858771]],[[-3.725240,9.512156,-6.964557,-0.761766,-6.790215,-3.486525,-4.545520,1.356948,2.278537,-4.061569,-3.941542,7.431754]],[[2.925095,2.439910,-2.298209,6.864812,4.218628,0.108984,-4.225756,8.296556,1.303803,-1.531591,-7.230800,0.945880]]], dtype = "float64")#candidate|5347|(8, 1, 12)|const|float64
uop_5348 = relay.sqrt(const_5347.astype('float64')) # shape=(8, 1, 12)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
const_5353 = relay.const([[-4.431600],[6.510152],[1.117525],[-6.776299],[-4.058688],[-5.424382],[-6.557286],[-4.947951],[3.428251],[-5.576109],[-8.875665],[-9.656850],[-1.945629],[5.447484],[-9.182022],[9.155058],[8.316472],[1.454958],[-2.478484],[4.755129],[-3.662042],[-1.090126],[3.744632],[-5.382068],[-3.899156],[0.163369],[-0.563265],[6.795168],[9.836261],[2.629501],[-4.585588],[-5.961739],[6.471426],[-5.991251],[5.615325],[4.919967],[0.899917],[-9.235205],[-4.987140],[6.797356],[-2.844851],[-6.206855],[-6.269486],[1.569313],[-6.304223],[-5.042256],[5.283013],[-8.043427],[-3.057897],[-3.239593],[-1.856886],[5.956690],[3.620036],[-3.827766],[-3.787329],[0.342279],[8.412539],[7.833723],[6.161688],[2.232133],[-4.198756],[-1.016713],[4.309426],[-9.765351],[-2.588359],[4.236920],[-4.257940],[-9.167362],[6.679463],[-3.447363],[5.071461],[-3.733915],[4.302737],[-6.336973],[-5.585871],[-5.667184],[3.246493],[-1.980412],[4.826742],[-9.654052],[5.658955],[-7.840995],[-3.998413],[2.989836],[0.222758],[-6.627471],[2.266347],[6.558953],[-4.667454],[-1.546785],[-3.461989],[5.711266],[6.869353],[-5.526522],[8.885003],[-8.383894],[-0.311934],[-5.427844],[-7.090862],[-0.435440],[0.870807],[-3.932396],[7.696710],[8.476814],[5.453387],[-3.073028],[-6.175841],[-1.052044],[6.100330],[-9.144941],[9.768026],[9.146979],[6.237136],[9.839379],[-4.051335],[-8.679341],[-2.989069],[-8.615285],[-9.299541],[8.226751],[2.851006],[9.853391],[-8.347095],[-2.647673],[-3.805233],[-0.071465],[3.390876],[-2.826369],[6.085491],[-6.010322],[4.485652],[-9.444675],[8.064889],[-4.862431],[-3.653770],[-4.835769],[3.257253],[-1.970982],[1.578625],[-2.389188],[8.654149],[8.278409],[-4.214310],[-0.913295],[6.850619],[3.897062],[5.765611],[-5.449424],[3.556202],[-4.785019],[7.526138],[0.153775],[9.195535],[-4.729429],[-9.732318],[-2.803013],[4.465336],[1.516712],[6.158916],[0.577833],[-2.575623],[-1.878231],[-7.536020],[4.318056],[2.637430],[-0.836163],[-1.181282],[5.741848],[0.343414],[-6.951621],[-7.559140],[4.237370],[-0.278082],[-3.675235],[-2.740656],[3.625497],[-4.056877],[-0.562429],[-0.809772],[-4.521352],[-5.348847],[-7.018283],[5.966874],[-4.637270],[1.132032],[-4.519073],[5.815506],[8.152988],[-0.118213],[-1.002314],[-6.636523],[-4.091280],[1.954202],[2.271202],[-6.989663],[1.559323],[-5.520534],[5.186337],[5.304740],[-3.821599],[-0.870544],[8.875340],[2.885521],[7.353478],[-0.363686],[-6.220876],[3.058253],[5.736092],[-8.595607],[0.760397],[4.523141],[2.050278],[-6.983695],[4.324222],[-1.117910],[3.521243],[-9.770314],[-8.455522],[0.887806],[-1.396859],[4.582693],[-9.383756],[6.260968],[8.539672],[1.248365],[-8.320637],[0.689437],[-5.592564],[-0.927642],[-0.779808],[-1.540184],[4.480917],[-5.234246],[-3.304430],[4.454492],[0.171163],[0.334987],[-9.090755],[9.156533],[-2.707484],[-6.559134],[8.038492],[-0.554340],[6.387542],[8.564999],[2.028917],[2.487518],[5.750373],[5.375674],[-9.207127],[-2.559121],[7.440076],[6.660852],[-3.783295],[-8.149775],[4.818404],[7.454831],[-6.389511],[2.996606],[-4.872594],[7.455554],[-1.703385],[-2.560909],[-1.285131],[9.506292],[-4.498991],[-2.488032],[8.472668],[7.096560],[7.961110],[5.659242],[-1.520218],[1.199039],[-2.888088],[4.941884],[-0.892818],[1.129316],[4.753455],[-0.382927],[3.666673],[-4.937541],[0.300301],[7.008458],[1.315166],[-1.089673],[-4.096343],[0.554058],[-5.006426],[-9.168171],[0.296472],[0.629165],[-4.596020],[-9.721379],[-0.528804],[-5.303261],[-5.079854],[4.205446],[4.722225],[5.126467],[-0.242307],[7.948924],[4.696084],[9.990200],[-1.516467],[-0.535656],[5.775555],[5.121887],[-6.379887],[-9.525383],[-9.334626],[-3.379809],[8.003452],[-7.553757],[4.986217],[0.054013],[7.747531],[-2.840087],[-8.717909],[-5.226785],[1.033670],[-3.290685],[-2.700893],[4.778958],[-8.027298],[7.187842],[-3.065662],[3.569323],[4.057032],[-1.442707],[8.114459],[-6.565325],[1.445387],[2.591341],[1.359004],[-4.739279],[8.235803],[9.079273],[-6.809205],[-3.469080],[-0.412942],[1.641698],[-6.552380],[7.497521],[-9.222921],[-8.955813],[9.306663],[-2.726033],[5.933259],[-1.358239],[4.605520],[-9.199602],[-3.122684],[-8.190064],[-0.035912],[8.089165],[-3.696672],[6.437639],[3.798470],[-7.114489],[-4.166470],[-2.944072],[-6.938084],[-4.249547],[-7.068739],[-0.868046],[4.716293],[-3.615966],[-5.464431],[-4.129967],[-0.586817],[-7.089162],[-5.303640],[8.952725],[-5.735281],[6.044786],[-5.341754],[-0.663273],[-9.734780],[-6.287429],[-5.124135],[-6.597720],[6.309680],[2.370450],[8.439290],[-1.060976],[4.510213],[-8.433936],[-3.125671],[5.017703],[-4.186807],[-9.973824],[-9.249948],[1.281309],[5.446077],[-7.077041],[-2.722563],[-2.363306],[1.832686],[0.253914],[5.881685],[-4.356969],[-4.690707],[6.651786],[-8.126448],[0.263775],[0.489801],[0.486208],[2.166415],[6.640095],[0.422622],[-6.735087],[-7.821829],[1.071470],[-1.471427],[8.008581],[0.198707],[-1.920299],[-4.206402],[-5.840354],[-7.700319],[4.099373],[8.025573],[-2.737133],[9.363706],[-6.644017],[0.321957],[-5.024932],[7.106829],[2.950253],[1.108977],[4.099086],[3.577373],[-1.194291],[8.569811],[-9.170710],[5.309996],[-3.855248],[8.979372],[0.903871],[-4.701804],[9.138388],[-5.922019],[3.844255],[7.048351],[6.901134],[6.646830],[0.954817],[-5.768039],[2.815057],[6.822592],[5.001832],[2.661206],[6.154467],[-6.907805],[-4.977100],[-0.739619],[-3.050105],[6.581948],[-6.725517],[8.391231],[7.396410],[8.031768],[4.342684],[5.167919],[0.455401],[-2.120324],[6.555680],[-2.420504],[-5.696336],[9.493048],[6.206663],[-3.663603],[-4.780063],[-8.518601],[7.276004],[-3.993861],[-9.208455],[5.728829],[4.098671],[-8.599537],[0.164605],[7.689743],[5.337626],[-8.751049],[1.745858],[-2.724693],[1.317275],[-7.120171],[-1.741608],[7.234274],[-1.457221],[9.654272],[0.368108],[-3.358167],[2.899510],[9.468286],[-4.646530],[3.142786],[7.952212],[7.123179],[2.748870],[9.899152],[3.152351],[-9.614472]], dtype = "float64")#candidate|5353|(504, 1)|const|float64
call_5352 = func_180_call(relay.reshape(const_5353.astype('float64'), [6, 7, 12]))
call_5354 = func_180_call(relay.reshape(const_5353.astype('float64'), [6, 7, 12]))
func_3740_call = mod.get_global_var('func_3740')
func_3742_call = mutated_mod.get_global_var('func_3742')
const_5369 = relay.const(0.563324, dtype = "float32")#candidate|5369|()|const|float32
call_5368 = func_3740_call(relay.reshape(const_5369.astype('float32'), []))
call_5370 = func_3740_call(relay.reshape(const_5369.astype('float32'), []))
bop_5372 = relay.logical_xor(uop_5348.astype('uint64'), const_5353.astype('uint64')) # shape=(8, 504, 12)
bop_5378 = relay.logical_or(uop_5348.astype('bool'), bop_5372.astype('bool')) # shape=(8, 504, 12)
output = relay.Tuple([call_5352,call_5368,const_5369,bop_5378,])
output2 = relay.Tuple([call_5354,call_5370,const_5369,bop_5378,])
func_5400 = relay.Function([], output)
mod['func_5400'] = func_5400
mod = relay.transform.InferType()(mod)
mutated_mod['func_5400'] = func_5400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mutated_mod.get_global_var('func_5400')
call_5401 = func_5400_call()
output = call_5401
func_5402 = relay.Function([], output)
mutated_mod['func_5402'] = func_5402
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5448 = relay.var("var_5448", dtype = "float64", shape = (15, 14, 2))#candidate|5448|(15, 14, 2)|var|float64
uop_5449 = relay.asin(var_5448.astype('float64')) # shape=(15, 14, 2)
func_5261_call = mod.get_global_var('func_5261')
func_5265_call = mutated_mod.get_global_var('func_5265')
var_5458 = relay.var("var_5458", dtype = "int32", shape = (36,))#candidate|5458|(36,)|var|int32
const_5459 = relay.const([[-4,10,6,-6,2,3,6,-9,-10,-7,1,4,-8,-6,10,-10,9,-4,-7,2,-6,7,-8,4,-5,-10,9,-4,-7,-7,-8,-1,9,4,8,5,-8,8,9,5,-5,10,-8,-2,-5,-2,-6,-10,2,10,9,-4,10,-4,-3,4,-5,-3,-9,8,2,6,6,-2,1,6,9,-6,1,-9,10,-4,8,-8,10,8,9,-1,-2,-3,9,1,-9,-9,7,-5,-1,-2,6,-3,-9,10,7,-4,8,-1,7,7,9,8,-3,-4,4,3,-7,8,-7,5],[2,4,7,9,7,1,1,3,4,10,5,-8,8,-10,4,3,-5,8,-2,5,4,-7,-5,10,-10,-9,-2,9,3,-8,-5,5,-8,3,1,-1,-3,-9,-1,-2,-9,-5,-6,-2,-2,-7,1,-10,-6,-1,10,-1,8,-5,-1,9,-6,3,-7,-10,-7,-9,-9,-1,1,-4,-2,3,-7,1,3,-9,4,-10,9,3,9,8,10,-4,9,-1,-3,3,3,9,3,7,-10,-10,9,8,-5,7,-6,-8,9,8,-4,-3,6,-4,-7,-8,-10,-9,4,-8],[-4,6,-7,4,2,1,4,2,3,-1,-9,-1,-9,-7,-8,2,1,1,-10,8,-9,-7,-3,5,7,8,6,4,-10,8,5,9,8,5,-4,-2,-4,-8,-10,-10,-10,4,10,3,6,-7,3,-8,-5,-1,-8,4,3,-8,6,1,-8,3,-10,7,10,-8,1,4,-1,-5,-7,2,10,3,9,1,7,-5,-10,5,-8,5,-9,5,3,10,10,9,3,5,6,-9,-10,1,9,-2,-9,6,5,9,-1,7,2,-1,-8,6,2,8,-2,-4,5,5]], dtype = "int32")#candidate|5459|(3, 108)|const|int32
call_5457 = relay.TupleGetItem(func_5261_call(relay.reshape(var_5458.astype('int32'), [6, 6, 1]), relay.reshape(const_5459.astype('int32'), [6, 6, 9]), ), 3)
call_5460 = relay.TupleGetItem(func_5265_call(relay.reshape(var_5458.astype('int32'), [6, 6, 1]), relay.reshape(const_5459.astype('int32'), [6, 6, 9]), ), 3)
func_1925_call = mod.get_global_var('func_1925')
func_1932_call = mutated_mod.get_global_var('func_1932')
var_5468 = relay.var("var_5468", dtype = "float64", shape = (364,))#candidate|5468|(364,)|var|float64
const_5469 = relay.const([-7,-6,1,-10,8,-8,-3,-4,2,-2,-10,-9,9,2,-1,6,3,8,-8,2,-2,-8,-3,-2,8,7,10,-1,-1,-3,-7,2,-10,6,1,-6,10,8,6,10,5,-4,-5,-4,-1,1,-7,-9,-5,7,-5,-9,-4,-10,-6,-6,8,-5,-6,-9,7,4,3,3,8,-2,-10,8,7,-6,-8,5,4,-9,9,7,8,-2,-5,-8,2,6,4,-7,1,5,6,5,8,-10,4,6,9,6,2,8,6,5,-7,-1,6,8,-6,1,9,-2,9,8,6,5,-7,-2,-7,5,1,-2,3,-8,3,2,3,8,4,3,9,9,-10,-3,8,-1,-5,6,3,7,-5,9,-7,-1,2,-2,-3,8,-2,10,-10,-10,6,-3,2,-4,-10,-7,9,-7,-4,-3,-10,8,-2,3,-1,-7,1,-5,-3,-9,3,10,-4,4,-6,4,-8,9,3,3,6,-3,3,1,-9,9,-6,6,5,-9,9,-8,-8,-8,-10,-6,-5,5,-7,4,-7,-7,-9,5,7,5,-9,-2,10,7,4,-8,2,-7,-2,-6,1,3,8,-5,4,-10,5,-10,-3,6,-10,-6,-10,5,3,2,-5,-5,-3,-6,10,-9,-8,-9,4,10,-2,10,1,-5,-5,8,3,2,2,2,6,7,8,6,-3,-10,7,8,-5,2,-1,-9,4,8,-1,-9,2,10,-4,-6,5,2,5,-9,1,10,10,6,-3,1,5,-9,-6,10,7,6,1,-3,-6,-7,-4,10,-8,-7,1,5,7,-4,4,2,-10,-3,-4,7,1,-8,-1,-8,-3,10,-4,-9,-8,4,8,3,-6,-9,5,10,-10,-10,7,1,-6,5,7,-10,8,9,4,8,-8,-8,-4,10,1,6,9,-7,10,4,-7,-4,-10,4,3,-4,8,-8,4,-6], dtype = "int16")#candidate|5469|(350,)|const|int16
var_5470 = relay.var("var_5470", dtype = "int32", shape = (1792,))#candidate|5470|(1792,)|var|int32
var_5471 = relay.var("var_5471", dtype = "float32", shape = (130, 15))#candidate|5471|(130, 15)|var|float32
call_5467 = relay.TupleGetItem(func_1925_call(relay.reshape(var_5468.astype('float64'), [14, 2, 13]), relay.reshape(var_5468.astype('float64'), [14, 2, 13]), relay.reshape(const_5469.astype('int16'), [350,]), relay.reshape(var_5470.astype('int32'), [1792,]), relay.reshape(var_5471.astype('float32'), [1, 1950]), ), 2)
call_5472 = relay.TupleGetItem(func_1932_call(relay.reshape(var_5468.astype('float64'), [14, 2, 13]), relay.reshape(var_5468.astype('float64'), [14, 2, 13]), relay.reshape(const_5469.astype('int16'), [350,]), relay.reshape(var_5470.astype('int32'), [1792,]), relay.reshape(var_5471.astype('float32'), [1, 1950]), ), 2)
output = relay.Tuple([uop_5449,call_5457,var_5458,const_5459,call_5467,var_5468,const_5469,var_5470,var_5471,])
output2 = relay.Tuple([uop_5449,call_5460,var_5458,const_5459,call_5472,var_5468,const_5469,var_5470,var_5471,])
func_5492 = relay.Function([var_5448,var_5458,var_5468,var_5470,var_5471,], output)
mod['func_5492'] = func_5492
mod = relay.transform.InferType()(mod)
var_5493 = relay.var("var_5493", dtype = "float64", shape = (15, 14, 2))#candidate|5493|(15, 14, 2)|var|float64
var_5494 = relay.var("var_5494", dtype = "int32", shape = (36,))#candidate|5494|(36,)|var|int32
var_5495 = relay.var("var_5495", dtype = "float64", shape = (364,))#candidate|5495|(364,)|var|float64
var_5496 = relay.var("var_5496", dtype = "int32", shape = (1792,))#candidate|5496|(1792,)|var|int32
var_5497 = relay.var("var_5497", dtype = "float32", shape = (130, 15))#candidate|5497|(130, 15)|var|float32
output = func_5492(var_5493,var_5494,var_5495,var_5496,var_5497,)
func_5498 = relay.Function([var_5493,var_5494,var_5495,var_5496,var_5497,], output)
mutated_mod['func_5498'] = func_5498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5500 = relay.TupleGetItem(func_5400_call(), 2)
call_5501 = relay.TupleGetItem(func_5402_call(), 2)
func_3267_call = mod.get_global_var('func_3267')
func_3269_call = mutated_mod.get_global_var('func_3269')
var_5518 = relay.var("var_5518", dtype = "bool", shape = (1188,))#candidate|5518|(1188,)|var|bool
call_5517 = relay.TupleGetItem(func_3267_call(relay.reshape(var_5518.astype('bool'), [1188,])), 2)
call_5519 = relay.TupleGetItem(func_3269_call(relay.reshape(var_5518.astype('bool'), [1188,])), 2)
output = relay.Tuple([call_5500,call_5517,var_5518,])
output2 = relay.Tuple([call_5501,call_5519,var_5518,])
func_5520 = relay.Function([var_5518,], output)
mod['func_5520'] = func_5520
mod = relay.transform.InferType()(mod)
var_5521 = relay.var("var_5521", dtype = "bool", shape = (1188,))#candidate|5521|(1188,)|var|bool
output = func_5520(var_5521)
func_5522 = relay.Function([var_5521], output)
mutated_mod['func_5522'] = func_5522
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5533 = relay.TupleGetItem(func_5400_call(), 2)
call_5534 = relay.TupleGetItem(func_5402_call(), 2)
output = relay.Tuple([call_5533,])
output2 = relay.Tuple([call_5534,])
func_5551 = relay.Function([], output)
mod['func_5551'] = func_5551
mod = relay.transform.InferType()(mod)
mutated_mod['func_5551'] = func_5551
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mutated_mod.get_global_var('func_5551')
call_5552 = func_5551_call()
output = call_5552
func_5553 = relay.Function([], output)
mutated_mod['func_5553'] = func_5553
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_5604 = relay.TupleGetItem(func_5551_call(), 0)
call_5605 = relay.TupleGetItem(func_5553_call(), 0)
output = call_5604
output2 = call_5605
func_5606 = relay.Function([], output)
mod['func_5606'] = func_5606
mod = relay.transform.InferType()(mod)
mutated_mod['func_5606'] = func_5606
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5606_call = mutated_mod.get_global_var('func_5606')
call_5607 = func_5606_call()
output = call_5607
func_5608 = relay.Function([], output)
mutated_mod['func_5608'] = func_5608
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5633 = relay.TupleGetItem(func_5400_call(), 0)
call_5634 = relay.TupleGetItem(func_5402_call(), 0)
func_3740_call = mod.get_global_var('func_3740')
func_3742_call = mutated_mod.get_global_var('func_3742')
var_5643 = relay.var("var_5643", dtype = "float32", shape = ())#candidate|5643|()|var|float32
call_5642 = func_3740_call(relay.reshape(var_5643.astype('float32'), []))
call_5644 = func_3740_call(relay.reshape(var_5643.astype('float32'), []))
output = relay.Tuple([call_5633,call_5642,var_5643,])
output2 = relay.Tuple([call_5634,call_5644,var_5643,])
func_5651 = relay.Function([var_5643,], output)
mod['func_5651'] = func_5651
mod = relay.transform.InferType()(mod)
mutated_mod['func_5651'] = func_5651
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5652 = relay.var("var_5652", dtype = "float32", shape = ())#candidate|5652|()|var|float32
func_5651_call = mutated_mod.get_global_var('func_5651')
call_5653 = func_5651_call(var_5652)
output = call_5653
func_5654 = relay.Function([var_5652], output)
mutated_mod['func_5654'] = func_5654
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5738 = relay.TupleGetItem(func_5400_call(), 2)
call_5739 = relay.TupleGetItem(func_5402_call(), 2)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5774 = relay.TupleGetItem(func_5400_call(), 1)
call_5775 = relay.TupleGetItem(func_5402_call(), 1)
output = relay.Tuple([call_5738,call_5774,])
output2 = relay.Tuple([call_5739,call_5775,])
func_5789 = relay.Function([], output)
mod['func_5789'] = func_5789
mod = relay.transform.InferType()(mod)
mutated_mod['func_5789'] = func_5789
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5789_call = mutated_mod.get_global_var('func_5789')
call_5790 = func_5789_call()
output = call_5790
func_5791 = relay.Function([], output)
mutated_mod['func_5791'] = func_5791
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_5797 = relay.TupleGetItem(func_5400_call(), 1)
call_5798 = relay.TupleGetItem(func_5402_call(), 1)
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
var_5800 = relay.var("var_5800", dtype = "bool", shape = (39, 3))#candidate|5800|(39, 3)|var|bool
call_5799 = func_4255_call(relay.reshape(var_5800.astype('bool'), [3, 3, 13]))
call_5801 = func_4255_call(relay.reshape(var_5800.astype('bool'), [3, 3, 13]))
func_5651_call = mod.get_global_var('func_5651')
func_5654_call = mutated_mod.get_global_var('func_5654')
var_5803 = relay.var("var_5803", dtype = "float32", shape = ())#candidate|5803|()|var|float32
call_5802 = relay.TupleGetItem(func_5651_call(relay.reshape(var_5803.astype('float32'), [])), 2)
call_5804 = relay.TupleGetItem(func_5654_call(relay.reshape(var_5803.astype('float32'), [])), 2)
func_3740_call = mod.get_global_var('func_3740')
func_3742_call = mutated_mod.get_global_var('func_3742')
call_5805 = func_3740_call(relay.reshape(var_5803.astype('float32'), []))
call_5806 = func_3740_call(relay.reshape(var_5803.astype('float32'), []))
bop_5807 = relay.left_shift(var_5803.astype('int32'), call_5797.astype('int32')) # shape=(3, 13, 1)
bop_5810 = relay.left_shift(var_5803.astype('int32'), call_5798.astype('int32')) # shape=(3, 13, 1)
output = relay.Tuple([call_5799,var_5800,call_5802,call_5805,bop_5807,])
output2 = relay.Tuple([call_5801,var_5800,call_5804,call_5806,bop_5810,])
func_5811 = relay.Function([var_5800,var_5803,], output)
mod['func_5811'] = func_5811
mod = relay.transform.InferType()(mod)
mutated_mod['func_5811'] = func_5811
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5811_call = mutated_mod.get_global_var('func_5811')
var_5813 = relay.var("var_5813", dtype = "bool", shape = (39, 3))#candidate|5813|(39, 3)|var|bool
var_5814 = relay.var("var_5814", dtype = "float32", shape = ())#candidate|5814|()|var|float32
call_5812 = func_5811_call(var_5813,var_5814,)
output = call_5812
func_5815 = relay.Function([var_5813,var_5814,], output)
mutated_mod['func_5815'] = func_5815
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5878 = relay.const([[[-10,10,8,7,-2,2,3,-3],[-5,8,-1,-5,4,5,4,3],[-6,5,-8,9,1,9,-7,-2],[7,2,-8,3,4,6,-5,-6],[-2,7,5,2,-7,-9,3,-9],[-9,2,-7,9,-5,3,-4,1],[2,-5,-5,-3,10,-7,3,-7],[6,-2,-4,-4,8,9,6,5],[9,5,9,-6,-1,-3,-10,9],[-8,9,-3,-1,10,-2,-9,6]],[[-7,3,2,4,-4,-8,-5,-10],[-1,5,2,7,-3,10,-4,-3],[1,6,5,5,-6,4,3,4],[-1,-9,2,-6,-5,-10,-5,1],[-7,7,8,1,-8,-7,7,4],[10,-2,9,9,6,-2,-10,-9],[1,-9,2,5,5,1,-1,1],[-2,4,-4,-5,4,-3,4,3],[10,4,-4,-3,9,2,-1,-1],[-7,-4,2,3,-1,-10,10,8]],[[-5,-3,-1,7,-10,-2,-1,4],[2,1,9,9,10,-3,-3,2],[5,-7,2,8,5,3,-3,-8],[-4,8,-2,-1,4,-5,-7,5],[2,10,-9,4,-6,-2,3,-5],[-6,10,10,2,-9,3,6,10],[1,10,8,-4,4,-5,-3,-5],[3,-10,-1,7,1,-6,9,5],[-5,9,-10,10,-10,-2,-7,-3],[2,-5,6,-3,-3,6,-4,-9]],[[-5,-4,3,10,1,6,6,-8],[3,-1,7,-9,-2,10,3,7],[-10,-2,7,8,-1,3,6,-8],[-7,9,5,-2,-3,3,2,4],[2,-6,-8,-6,9,-8,3,5],[5,3,3,6,-10,2,2,-5],[-1,-3,7,6,1,2,-10,-5],[10,6,5,-9,-3,-8,-6,9],[-4,-4,6,-9,-6,10,-6,2],[4,9,-9,6,-9,7,7,-3]],[[-10,4,-7,-2,1,-8,8,-7],[5,4,4,8,-6,1,2,-4],[8,-10,-8,9,-4,-10,-6,-9],[-3,-7,-4,-2,-9,-4,6,-3],[4,1,-6,5,7,6,-4,-4],[-7,6,3,2,3,-1,3,-5],[-7,-1,7,5,-3,5,4,-4],[8,4,10,-3,3,-1,-2,-3],[3,4,-2,-3,-9,-2,-8,6],[8,1,-8,-10,10,7,-10,-1]],[[-4,4,-5,1,-5,-9,-3,3],[4,9,6,-5,5,-10,-10,-9],[-5,10,-9,-4,-6,-9,7,-10],[4,5,3,10,-1,2,-1,-8],[5,8,1,-8,4,-7,9,-4],[-9,5,-10,-7,-3,-4,3,1],[-10,-9,1,-9,7,8,5,9],[2,3,6,4,-2,-6,-8,10],[7,10,-9,5,-5,9,4,4],[-1,7,-9,-1,-9,6,3,7]],[[7,10,-6,-1,-7,-1,-2,8],[-1,3,7,-3,-8,-4,-6,4],[6,-1,-8,-3,7,-7,-8,2],[-9,-1,6,1,-2,-8,-5,4],[-6,-6,-1,9,-3,-7,-9,-2],[4,3,7,6,10,-2,6,-8],[2,7,3,3,2,10,-9,-2],[-6,-2,10,6,4,6,-3,4],[-8,-1,9,-10,-2,-4,3,-3],[-10,3,5,-1,5,-8,-4,6]],[[-5,5,-10,5,-3,4,-5,-4],[2,-7,7,5,-9,-2,7,-5],[4,-6,-4,6,-2,-3,7,-1],[5,7,10,-5,5,2,-3,6],[-6,2,3,-7,-10,1,-10,-8],[4,8,-7,3,-8,6,1,-3],[-2,6,4,-2,6,2,8,8],[3,-6,-8,-2,1,10,-10,8],[7,-9,7,-5,-7,-6,5,6],[1,10,-8,-8,2,2,10,-4]],[[-2,-9,-6,-4,9,7,6,-6],[7,8,10,-6,-3,-4,6,3],[-3,-1,-7,2,-2,2,4,7],[-3,7,-1,8,1,1,2,-7],[6,-1,-10,-9,-2,2,-6,-7],[6,-4,9,4,-4,7,-9,-8],[-10,-6,-2,5,-3,-1,-10,9],[4,-6,5,-3,5,4,2,-8],[1,-5,8,-8,-10,1,-1,7],[-6,-10,-1,2,3,-9,-6,-9]],[[1,-3,-5,2,-1,-5,-7,-10],[3,6,3,3,1,-10,9,7],[5,-10,10,8,-7,6,5,-7],[-5,6,8,-3,1,8,-5,1],[3,-2,5,4,5,4,-3,-2],[-1,-6,10,-7,-3,3,8,-7],[7,-3,1,2,7,-10,4,-1],[-2,5,-6,-3,7,-6,9,-5],[-5,7,-8,-6,5,-5,7,8],[-5,-9,3,-10,5,-5,-1,1]],[[1,-4,8,-1,-5,4,4,-1],[-2,10,2,8,-7,-4,-3,6],[4,2,1,5,-2,8,-2,7],[-1,1,-8,-3,-2,-5,5,-1],[-3,-10,-6,10,7,-6,-9,3],[1,-3,5,-5,-6,-3,2,-9],[9,-9,8,5,-9,4,-5,8],[-1,6,-9,-2,-3,-6,-1,2],[-8,-6,-4,2,3,3,-5,7],[-4,-3,-8,-9,-1,8,4,3]],[[2,-8,2,2,-10,-7,-6,10],[-9,-4,-7,6,10,2,-5,-5],[6,-5,-5,-6,-2,7,-7,-9],[-1,1,-5,-8,4,-8,6,-8],[-7,1,-2,7,9,-1,3,3],[4,-4,5,-4,5,-8,5,3],[10,4,-10,3,4,-8,-7,-3],[-6,-10,2,-10,7,-7,-5,-6],[6,-5,2,-8,6,-7,6,4],[8,3,-9,6,2,-2,-6,1]],[[10,-8,8,1,3,-6,10,1],[5,8,10,10,9,-10,-10,-7],[-9,-5,3,10,5,-5,8,-3],[-3,-7,-6,4,10,-10,-6,-3],[2,-3,-5,10,-1,-7,2,-3],[10,7,-8,-3,6,-9,10,9],[-1,6,-5,7,1,6,3,-8],[9,1,6,-8,-7,5,10,-9],[6,8,-2,-7,9,6,-3,7],[10,1,-3,-8,-5,-8,-9,-7]],[[-2,6,8,-9,-7,10,-9,-1],[-6,5,-1,-8,8,-1,-4,-1],[3,-2,-3,9,8,-7,8,-8],[-10,2,5,-8,-9,-9,-9,-9],[10,-3,-6,10,-6,3,-6,-8],[1,8,3,9,6,3,8,8],[-7,10,5,-7,8,-5,-10,-1],[-5,7,4,8,-3,3,-6,1],[4,-7,1,2,-4,4,-9,5],[3,-2,9,6,2,7,-10,1]],[[10,-3,-2,2,1,1,2,-6],[9,1,9,-2,-7,-10,7,-3],[9,-10,10,-10,10,4,7,-7],[9,4,7,2,-3,3,4,-9],[-1,-8,10,5,-9,-4,-9,5],[-10,8,5,1,2,9,9,1],[-6,-2,-8,8,6,-6,-2,-4],[9,10,-4,3,-7,4,-2,-6],[5,-5,-5,-10,7,-7,-8,3],[-5,-5,-6,-4,3,-8,4,-3]],[[4,-2,3,3,10,10,10,-9],[-8,3,3,8,-7,10,4,10],[3,8,-4,7,10,-5,-3,-5],[-9,5,-8,-7,-3,8,-2,5],[8,3,-4,-7,-10,-7,7,1],[2,7,3,7,-2,-1,-1,10],[-10,5,-5,-10,-5,7,-1,-9],[6,-3,9,-3,6,5,-2,9],[10,-8,6,-2,-7,6,-7,10],[-8,-2,-4,-8,-1,-8,-10,5]]], dtype = "uint64")#candidate|5878|(16, 10, 8)|const|uint64
var_5879 = relay.var("var_5879", dtype = "uint64", shape = (16, 10, 8))#candidate|5879|(16, 10, 8)|var|uint64
bop_5880 = relay.less_equal(const_5878.astype('bool'), relay.reshape(var_5879.astype('bool'), relay.shape_of(const_5878))) # shape=(16, 10, 8)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
var_5884 = relay.var("var_5884", dtype = "float64", shape = (504,))#candidate|5884|(504,)|var|float64
call_5883 = func_180_call(relay.reshape(var_5884.astype('float64'), [6, 7, 12]))
call_5885 = func_180_call(relay.reshape(var_5884.astype('float64'), [6, 7, 12]))
output = relay.Tuple([bop_5880,call_5883,var_5884,])
output2 = relay.Tuple([bop_5880,call_5885,var_5884,])
func_5899 = relay.Function([var_5879,var_5884,], output)
mod['func_5899'] = func_5899
mod = relay.transform.InferType()(mod)
var_5900 = relay.var("var_5900", dtype = "uint64", shape = (16, 10, 8))#candidate|5900|(16, 10, 8)|var|uint64
var_5901 = relay.var("var_5901", dtype = "float64", shape = (504,))#candidate|5901|(504,)|var|float64
output = func_5899(var_5900,var_5901,)
func_5902 = relay.Function([var_5900,var_5901,], output)
mutated_mod['func_5902'] = func_5902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_5932 = func_5606_call()
call_5933 = func_5606_call()
func_2124_call = mod.get_global_var('func_2124')
func_2127_call = mutated_mod.get_global_var('func_2127')
const_5958 = relay.const([5,8,-3,4,8,3,9,-3,-7,2,-3,4,-7,9,5,9,5,5,-2,10,-4,1,5,8,10,-10,6,-9,7,10,8,-2,-7,-1,-8,8,-5,7,-3,-6,3,-6,-9,4,2,8,3,5,8,6,10,-10,-5,7,-10,-10,8,-3,-2,-5,-3,6,-2,6,10,6,8,-5,2,10,6,6,6,10,-8,-2,-7,-7,-1,9,-4,9,2,4,7,-6,4,4,-1,9,1,-2,-10,-9,3,10,4,1,5,-8,9,-3,5,-6,4,-8,7,-5,-1,7,4,-1,-9,2,8,-4,5,-4,7,-7,-3,7,-6,-6,7,-1,3,9,4,3,3,-1,-7,9,2,4,-2,7,5,5,9,5,9,3,5,-5,7,7,10,-7,-3,-2,-2,-2,-4,-1,6,6,-7,-9,9,3,2,8,-7,6,8,4,9,-8,-5,-8,2,6,-5,4,-9,-7,-8,-4,-2,2,2,-9,-1,4,4,9,-5,7,-8,-1,-9,-1,-5,-1,-7,8,-8,10,4,7,3,-5,-1,-8,5,-9,10,-3,-4,4,5,3,-7,-5,7,10,-10,-8,-9,-9,8,3,7,-10,8,2,-6,-9,8,-5,-9,-4,-1,-7,1,-7,5,4,5,3,-10,9,2,8,-3,6,7,1,6,-10,-8,-5,-8,5,5,-7,4,10,5,7,-2,-1,5,-8,-2,8,-7,2,-4,-1,4,-5,-3,4,4,5,4,-6,8,10,4,9,-10,9,8,2,-5,2,-1,-7,8,2,7,-3,-4,4,-10,9,4,2,5,5,1,9,2,1,-7,-3,3,-9,8,2,8,8,9,-3,-3,4,4,6,-1,-7,9,5,6,8,-9,4,2,-9,-9,5,1,-6,7,2,-8,-8,-10,9,-9,2,7,-7,-5,2,-1,5,-8,-8,2,5,-10,7,8,-6,4,6,1,4,10,-1,5,-2,7,-10,-9,-9,9,-8,3,-3,9,10,-1,-7,10,-1,-4,-8,2,-7,4,-1,-3,10,-1,3,-10,-2,-7,3,7,-2,6,9,1,-10,-6,-8,10,-5,10,-2,10,3,-5,7,-10,-2,-3,6,-8,9,-7,-3,4,7,5,-2,5,4,-4,1,-2,-2,-5,8,-5,9,3,-1,9,9,-9,-9,-10,6,6,8,2,4,10,-1,1,7,2,-1,5,-5,4,-1,-8,6,6,-3,-6,6,-1,1,8,7,7,3,9,10,-3,-8,8,7,10,2,9,3,4,-3,5,4,-8,-6,4,-2,7,-10,-4,10,-8,-3,10,-8,-2,-9,-1], dtype = "uint64")#candidate|5958|(495,)|const|uint64
call_5957 = relay.TupleGetItem(func_2124_call(relay.reshape(const_5958.astype('uint64'), [5, 9, 11]), relay.reshape(const_5958.astype('uint64'), [5, 9, 11]), ), 0)
call_5959 = relay.TupleGetItem(func_2127_call(relay.reshape(const_5958.astype('uint64'), [5, 9, 11]), relay.reshape(const_5958.astype('uint64'), [5, 9, 11]), ), 0)
output = relay.Tuple([call_5932,call_5957,const_5958,])
output2 = relay.Tuple([call_5933,call_5959,const_5958,])
func_5961 = relay.Function([], output)
mod['func_5961'] = func_5961
mod = relay.transform.InferType()(mod)
output = func_5961()
func_5962 = relay.Function([], output)
mutated_mod['func_5962'] = func_5962
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_5992 = relay.TupleGetItem(func_5961_call(), 2)
call_5993 = relay.TupleGetItem(func_5962_call(), 2)
output = call_5992
output2 = call_5993
func_6002 = relay.Function([], output)
mod['func_6002'] = func_6002
mod = relay.transform.InferType()(mod)
mutated_mod['func_6002'] = func_6002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mutated_mod.get_global_var('func_6002')
call_6003 = func_6002_call()
output = call_6003
func_6004 = relay.Function([], output)
mutated_mod['func_6004'] = func_6004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_6021 = relay.TupleGetItem(func_5961_call(), 0)
call_6022 = relay.TupleGetItem(func_5962_call(), 0)
func_5261_call = mod.get_global_var('func_5261')
func_5265_call = mutated_mod.get_global_var('func_5265')
var_6031 = relay.var("var_6031", dtype = "int32", shape = (36,))#candidate|6031|(36,)|var|int32
var_6032 = relay.var("var_6032", dtype = "int32", shape = (324,))#candidate|6032|(324,)|var|int32
call_6030 = relay.TupleGetItem(func_5261_call(relay.reshape(var_6031.astype('int32'), [6, 6, 1]), relay.reshape(var_6032.astype('int32'), [6, 6, 9]), ), 4)
call_6033 = relay.TupleGetItem(func_5265_call(relay.reshape(var_6031.astype('int32'), [6, 6, 1]), relay.reshape(var_6032.astype('int32'), [6, 6, 9]), ), 4)
output = relay.Tuple([call_6021,call_6030,var_6031,var_6032,])
output2 = relay.Tuple([call_6022,call_6033,var_6031,var_6032,])
func_6040 = relay.Function([var_6031,var_6032,], output)
mod['func_6040'] = func_6040
mod = relay.transform.InferType()(mod)
var_6041 = relay.var("var_6041", dtype = "int32", shape = (36,))#candidate|6041|(36,)|var|int32
var_6042 = relay.var("var_6042", dtype = "int32", shape = (324,))#candidate|6042|(324,)|var|int32
output = func_6040(var_6041,var_6042,)
func_6043 = relay.Function([var_6041,var_6042,], output)
mutated_mod['func_6043'] = func_6043
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5789_call = mod.get_global_var('func_5789')
func_5791_call = mutated_mod.get_global_var('func_5791')
call_6063 = relay.TupleGetItem(func_5789_call(), 0)
call_6064 = relay.TupleGetItem(func_5791_call(), 0)
func_5651_call = mod.get_global_var('func_5651')
func_5654_call = mutated_mod.get_global_var('func_5654')
call_6067 = relay.TupleGetItem(func_5651_call(relay.reshape(call_6063.astype('float32'), [])), 2)
call_6068 = relay.TupleGetItem(func_5654_call(relay.reshape(call_6063.astype('float32'), [])), 2)
output = relay.Tuple([call_6063,call_6067,])
output2 = relay.Tuple([call_6064,call_6068,])
func_6069 = relay.Function([], output)
mod['func_6069'] = func_6069
mod = relay.transform.InferType()(mod)
output = func_6069()
func_6070 = relay.Function([], output)
mutated_mod['func_6070'] = func_6070
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_6073 = func_5606_call()
call_6074 = func_5606_call()
output = call_6073
output2 = call_6074
func_6080 = relay.Function([], output)
mod['func_6080'] = func_6080
mod = relay.transform.InferType()(mod)
mutated_mod['func_6080'] = func_6080
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mutated_mod.get_global_var('func_6080')
call_6081 = func_6080_call()
output = call_6081
func_6082 = relay.Function([], output)
mutated_mod['func_6082'] = func_6082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_6085 = func_6080_call()
call_6086 = func_6080_call()
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
var_6118 = relay.var("var_6118", dtype = "bool", shape = (13, 9))#candidate|6118|(13, 9)|var|bool
call_6117 = func_4255_call(relay.reshape(var_6118.astype('bool'), [3, 3, 13]))
call_6119 = func_4255_call(relay.reshape(var_6118.astype('bool'), [3, 3, 13]))
func_1925_call = mod.get_global_var('func_1925')
func_1932_call = mutated_mod.get_global_var('func_1932')
const_6126 = relay.const([[-2.522280,6.702068,9.654301,-6.892071],[-9.762551,7.569516,8.692029,9.583825],[8.162619,-0.057452,-8.732580,-1.333500],[-9.161472,8.471637,2.286249,-2.385194],[-0.918495,-6.540870,-2.485183,-1.778625],[6.196356,3.811259,0.775733,-4.854308],[3.368559,5.996580,7.935601,-7.061170],[9.037006,2.809488,4.366379,2.371352],[0.644496,3.415384,-2.084438,-3.852265],[5.673041,-1.793917,-6.045445,-1.300848],[4.933801,8.513277,0.447463,-3.947107],[-0.622650,8.661507,8.771989,5.450884],[-7.234724,2.590158,1.015669,-8.794493],[0.207353,4.055973,3.519519,0.741074],[6.063752,-3.587308,-8.706924,8.654683],[-4.713852,-7.402853,7.037282,-4.574651],[-6.344397,-1.806943,-4.340279,-9.372353],[9.337738,7.767300,6.684420,0.045374],[-0.040137,0.025014,-7.409804,7.250679],[6.543684,9.579705,6.615560,-9.437273],[6.601805,1.441276,1.536894,8.790051],[6.132810,-7.914785,2.356522,0.045235],[0.237712,-6.138301,-5.751409,-8.112489],[9.313377,-6.858524,9.163916,-5.847373],[-0.241390,-1.194604,7.117750,-6.600032],[4.946940,-7.303808,0.626863,-8.483831],[-9.583575,-6.480725,-4.651675,5.903074],[-3.292272,-6.123583,-3.259033,-1.711186],[4.109716,1.697823,-9.200527,4.277108],[-1.789959,-6.279606,-4.291962,-2.997366],[1.591169,3.311428,5.354857,7.173684],[-8.148474,8.477129,-9.034045,0.083281],[0.965531,4.434047,6.298065,8.993373],[-7.674454,7.734396,-3.519516,1.801600],[-4.440557,3.935976,1.253147,-1.655389],[-7.419749,4.587190,3.440820,-0.457950],[6.067321,4.498491,3.099440,-9.699151],[-9.132416,-5.949532,5.213069,1.668964],[-0.498754,3.482125,4.391723,6.618298],[1.866886,9.838161,-3.791741,5.312952],[3.468676,-5.400972,5.726074,-4.609313],[-1.487715,-2.619594,-8.998144,6.825404],[-2.216828,7.601122,-7.149892,-1.562223],[5.941246,9.397262,5.818010,0.871839],[3.938242,0.083539,-9.019844,-2.075510],[-3.244410,-0.793374,-3.350682,2.168054],[-8.144012,9.322814,-9.487327,-5.264027],[8.327821,9.010507,6.056417,9.582061],[-7.148492,4.253312,-8.390571,0.382692],[3.127521,9.306680,6.060394,-0.943109],[4.009515,0.976062,1.965269,6.000082],[9.947785,-0.649669,1.910578,8.020818],[-5.783690,-1.467653,-1.420285,-1.583338],[9.204066,-8.888915,-7.186308,-1.953317],[-0.181584,8.533043,-4.436960,-3.229814],[0.888198,-4.618158,-9.318774,-3.466862],[-4.135516,9.742416,-6.040407,-8.141050],[0.009617,5.074778,-2.187382,-3.181334],[6.435349,-4.024418,-7.648530,9.047140],[0.064700,6.945917,7.286272,9.287771],[-1.060201,-8.752401,-7.721185,7.574109],[7.642145,7.002309,-0.862476,-5.557015],[-4.020078,3.019161,2.461501,-7.049271],[-4.720378,-4.966829,-0.802957,-4.890226],[-4.773221,1.389135,7.285406,2.914671],[0.741132,-0.797349,-6.984664,9.878871],[-2.151363,2.344407,8.238797,-8.582824],[8.018938,5.646627,-6.987679,8.836045],[4.597745,8.892106,1.127554,6.899582],[-1.952831,-1.491266,6.617620,6.467206],[8.098573,7.794023,-5.450154,-9.218975],[3.185099,6.022223,6.558931,-2.290023],[-2.739955,-4.322219,-9.522607,-4.724026],[9.456100,3.344164,7.791821,-5.479331],[-2.423159,8.059002,-5.236024,-5.857125],[-9.900281,7.416356,-6.152110,-7.646385],[-6.720035,-4.721401,-4.690466,5.185602],[-1.750911,-9.745080,1.956154,-6.142383],[5.224424,-0.424827,0.464372,4.355300],[0.300024,-3.676032,-0.079290,-3.074284],[3.985243,-6.742289,7.103783,5.452306],[-0.041010,0.320938,1.212154,1.124223],[-0.027434,-6.930723,3.646261,7.171219],[-6.298824,-5.647163,-7.732124,7.092042],[-7.582689,0.847963,2.820846,8.575302],[1.541662,5.365516,-9.833253,9.140794],[4.296963,-6.429990,1.549079,7.166743],[2.980165,-2.928506,-1.673854,1.641426],[2.359602,-6.099689,-0.932535,0.144547],[5.096239,-3.389249,1.033905,-9.991739],[6.406570,8.166282,-5.497370,-9.982819]], dtype = "float64")#candidate|6126|(91, 4)|const|float64
const_6127 = relay.const([2,-9,-7,7,-10,-7,7,5,-1,10,8,2,-9,4,-8,3,1,2,-2,10,-2,-2,-6,8,-10,1,-8,10,8,5,1,6,1,9,-9,-5,6,1,-8,9,-7,6,7,-3,9,1,-5,1,-8,-9,-1,-9,6,9,1,2,10,1,3,2,-9,10,-3,10,-3,-10,5,-1,1,5,-10,8,-4,-9,3,8,8,8,1,3,-10,10,2,6,-3,-3,-7,-7,10,-9,9,6,7,9,5,6,2,-9,-9,-8,-6,-7,2,6,-2,-6,2,8,-8,-9,-8,-6,-9,7,-4,2,3,-4,5,-6,3,-8,4,4,5,-4,-6,-5,9,-5,-6,2,-6,4,-4,-8,2,4,6,-7,9,5,-2,-4,-4,-4,6,8,10,-3,2,-5,-9,-10,5,5,-9,-1,3,-1,-4,7,-9,-2,-9,-7,-8,7,9,4,3,8,-2,-2,-4,-5,-8,-10,9,9,-9,-9,9,8,-3,2,2,7,-10,-2,-4,5,-9,-2,-9,6,-9,6,-3,6,7,-2,-9,-6,2,7,4,9,-9,2,5,-5,-5,2,7,3,-5,6,6,5,9,3,4,-1,-6,-8,-10,-3,5,-2,3,-6,-10,2,-4,5,9,-1,1,-5,-4,6,-5,1,-4,10,-8,-8,1,-6,7,10,-9,-8,-2,7,-5,10,-2,9,3,7,-10,-2,3,5,9,-7,-8,-9,9,4,9,-3,2,10,3,-7,-10,-3,-6,6,-8,6,-1,4,-2,-3,2,-3,10,-10,-1,-8,-7,-8,1,-10,9,5,-10,-8,-7,3,-9,-6,10,-1,-4,-5,-2,-3,7,4,-9,3,-7,-4,-4,-6,3,-1,9,-7,-5,-3,5,9,-1,-7,-1,-4,3,-5,-4,1,2,-4,8,-3,4,-9,3,-1,1,7,-10,2,-8,2], dtype = "int16")#candidate|6127|(350,)|const|int16
const_6128 = relay.const([-3,9,-9,1,-1,7,-5,8,-5,6,4,-4,9,1,-5,-9,5,-8,-7,6,5,8,4,-10,6,10,1,-6,7,6,-4,-2,2,-3,10,-5,-3,-7,-8,3,-2,-5,8,-5,-9,-6,-5,1,-10,-6,-6,-5,5,-5,6,8,2,3,5,6,1,8,-4,-5,5,-3,4,1,10,2,-3,-6,-4,-8,6,-4,8,3,2,6,-1,10,9,-5,-5,-6,7,-3,10,-1,-5,-1,8,-7,-4,-8,4,-10,-7,-1,-2,-1,9,-10,-7,-3,-8,7,2,4,9,-3,-8,-5,8,7,2,-8,2,-10,-9,-3,-9,10,-6,-7,8,9,3,-1,1,10,6,8,6,-8,1,3,-4,1,-9,7,10,-3,4,-3,-2,2,-3,-9,-6,-7,10,7,2,4,-8,-9,8,9,-8,9,-9,9,9,4,-4,-2,-10,-6,7,-4,-2,-3,-6,2,-9,3,10,-10,9,4,-5,-10,7,5,-8,1,5,10,-8,-7,-5,-3,-4,6,8,-9,-8,6,-4,1,4,-2,6,2,8,1,10,10,6,5,8,7,-2,-3,-5,-10,8,10,8,8,-9,-9,2,1,5,-3,2,1,4,4,-10,-10,8,2,10,-4,-8,8,-2,9,-6,10,-4,-4,7,-10,4,-3,10,10,7,10,7,-7,-8,-6,-1,-4,9,3,-8,3,3,-6,-3,-6,10,-8,-6,6,3,10,-2,1,4,9,9,6,8,-8,8,-1,-9,-5,-4,-3,-7,-5,9,4,1,7,-5,-5,-3,-6,-6,9,-8,2,-9,2,-10,-7,-10,2,4,3,-2,-6,9,6,-1,-1,-1,-4,10,6,-1,-8,-4,4,10,9,6,-9,-7,2,-1,-8,10,5,-6,-9,-6,9,7,-7,-3,-1,10,-7,4,-5,-6,9,3,-5,7,-7,1,10,-9,9,3,-2,9,-10,-1,-9,-9,1,4,-2,-10,-1,-5,2,-2,-8,10,-8,9,5,-6,-5,5,-7,-3,-10,-8,-5,6,6,8,-10,6,-1,-9,-5,3,8,-7,6,3,-3,7,-3,7,8,5,-8,-10,-6,-5,2,10,-5,6,-6,-7,10,-9,8,4,1,-6,10,8,-4,6,3,7,-2,-9,-2,9,2,-6,-4,-6,8,4,7,4,6,-9,-6,7,1,-8,4,-6,-7,-7,-1,-6,5,8,3,-5,-2,8,-3,7,4,-7,-5,7,5,3,-8,-6,-10,-9,6,1,-8,-7,-7,3,2,-2,-4,10,-4,5,3,-7,4,7,-7,10,-1,-8,-3,-10,2,-3,8,4,-8,5,10,8,5,-6,6,-2,4,3,-1,-2,4,9,-1,-5,-4,10,-10,8,4,10,1,-6,1,2,-4,-5,2,-10,1,-1,4,8,10,1,-1,5,-2,7,-10,-5,7,-3,-6,-1,-8,1,-4,8,-7,7,10,2,-2,-5,-9,-9,10,5,-6,-4,-7,-6,4,-4,-3,-8,4,4,8,10,-10,4,-2,-10,5,3,-7,-4,5,1,-2,2,1,-4,7,-8,3,-1,-1,3,2,-10,5,1,4,9,-5,4,8,4,-1,4,-6,-1,3,5,-10,-6,10,4,-3,2,5,-3,1,8,-2,8,-5,-5,2,4,6,6,1,-2,4,-2,9,10,5,-3,-8,4,-9,2,10,1,9,-4,7,5,-9,10,2,-9,10,5,3,3,-2,-3,-2,10,4,-2,-1,4,-3,9,6,4,8,-6,-1,-4,6,7,4,9,-1,-8,-7,-4,9,-8,9,-3,-1,1,7,-5,3,-1,9,-4,3,5,-6,-2,10,2,-2,-8,5,5,5,7,9,-2,9,9,7,6,2,-10,10,4,8,-4,-3,5,6,3,-9,6,-2,4,10,5,-9,-6,9,-10,-4,-10,-3,5,6,-7,-5,-4,7,-10,-7,-6,-2,-5,2,7,-10,-3,1,-4,-5,3,1,9,-5,-2,-6,9,3,-8,-1,-3,4,-6,3,4,-9,10,-4,10,9,-4,-2,-2,8,4,-9,-2,2,-9,-8,-4,10,8,6,3,-2,2,-9,1,-8,-9,-1,-1,-9,-9,-5,-5,-1,-7,3,-4,-9,8,-5,-7,3,2,-5,4,-3,-2,-8,-3,1,5,2,-8,-8,-8,5,-5,-1,2,-10,-1,-1,-1,-7,-7,-4,2,-4,8,-7,4,-2,-2,-6,9,1,8,1,1,6,8,-10,8,3,5,-2,5,10,7,10,-1,-5,2,-8,6,3,-6,8,-9,9,2,5,-5,5,-8,-7,-7,-7,8,4,-1,-2,1,10,3,-6,-1,2,-5,-8,-3,3,7,1,-7,-1,-3,5,3,6,7,10,-2,-3,-1,-9,6,-6,-1,-10,3,7,4,-10,9,2,-7,-3,-7,5,7,-2,-7,8,5,-6,-9,4,5,10,-1,10,-5,8,-9,-9,10,-1,-10,-5,-9,5,2,-1,5,-4,4,-8,-7,10,-3,2,10,10,-4,-9,4,3,5,-6,3,-1,-4,-5,-5,-4,-4,2,2,4,-7,-3,6,6,7,-4,-1,-9,-3,-3,9,-9,-8,7,-2,-9,5,-9,-5,-4,8,5,2,4,8,6,-9,-2,-5,-8,-1,8,-9,1,-4,8,-5,-3,7,-4,7,6,-2,-2,9,-8,6,-8,-4,9,-4,-10,-10,-5,10,-3,9,2,10,-10,5,9,5,8,-8,5,-4,2,10,2,-9,7,-6,9,5,5,9,-1,5,4,-6,7,6,7,-9,5,6,3,-9,10,-4,-3,-10,9,-4,9,2,4,-7,5,10,1,-10,-1,-9,-4,-5,7,-1,-1,9,-7,-7,-10,-1,-10,5,-10,8,-3,-2,9,3,-3,2,9,3,2,-10,6,-9,4,-10,6,-6,6,-7,-5,10,-3,1,4,2,6,2,3,10,5,4,9,-2,7,-9,10,-8,2,6,5,-5,10,-3,-1,2,5,9,5,-7,1,-5,-5,-3,-4,4,7,-10,-9,9,8,-5,-7,-4,-4,-7,9,7,6,-1,-10,-10,6,-5,-5,-4,8,-5,-2,9,4,-4,-7,4,-2,4,2,3,5,5,-6,4,-6,9,2,5,-2,-8,1,-2,9,-9,9,-10,-1,8,-2,1,5,-10,-8,2,6,-8,-4,-2,-4,5,-4,-2,10,2,2,3,-3,-4,-8,10,-10,2,9,-8,-6,8,10,7,-10,1,4,1,7,-8,-4,10,7,8,8,8,-9,-6,-8,8,-5,4,-2,-7,-10,5,-3,8,7,-5,1,10,2,8,10,10,4,-5,8,-7,-6,2,9,1,-5,-2,-10,8,-10,-1,-2,-8,-4,-7,4,9,-8,3,-3,3,1,-6,-8,2,-1,-8,2,3,8,8,-6,4,-10,-3,-9,10,-2,10,1,5,3,-8,1,2,-1,-9,-7,-3,8,-9,2,7,-6,-3,-9,2,4,-8,9,-2,10,1,6,4,10,3,3,-6,-8,-7,-7,-10,8,6,10,10,-1,9,5,-1,7,6,5,10,-1,10,-7,-9,-10,2,2,10,-5,3,4,-6,10,-2,6,-10,-8,-2,-3,-10,5,1,-6,-3,1,2,3,-6,-1,-10,10,-1,10,-3,-4,6,-7,-7,9,5,-9,7,6,-5,-2,4,-6,-10,8,-1,-8,-4,-5,7,4,-6,-8,4,-6,3,-7,10,1,10,-5,4,10,-8,10,1,-9,6,1,3,1,7,-10,9,-9,3,-4,7,6,10,-3,9,-9,-9,-6,-8,-8,-5,4,-2,-5,-4,3,-4,7,6,-5,1,-1,-4,5,-4,-9,-3,-2,-3,-1,7,-8,-2,7,6,2,-5,10,-10,3,7,-2,2,-5,-3,2,8,-5,7,-8,-3,10,5,-7,-2,10,10,-10,-8,-7,-9,2,-9,2,8,-8,-2,9,8,-4,-6,-2,6,9,6,4,-5,7,-5,1,-8,-6,-9,10,1,-10,8,-3,5,-8,-10,-8,-3,10,-3,3,9,-2,6,-6,5,4,-9,10,9,-4,-4,-3,-9,-5,3,4,1,10,7,2,3,9,-3,7,9,-10,-6,-10,-5,7,-6,9,6,-3,-9,-7,3,6,7,7,-7,-10,9,9,-6,-3,5,10,-5,-6,-1,7,-1,7,8,-5,-10,-1,-7,-4,-5,7,-1,5,1,-8,-4,-6,2,4,-9,7,6,-10,-6,-5,-3,5,1,-10,1,7,-7,-2,-8,8,-7,-7,-3,-5,-5,-4,-3,4,8,8,-6,-5,-8,9,-5,-3,2,-5,-9,5,-1,4,-7,9,4,5,2,2,-8,6,-10,4,-1,8,-9,5,2,-7,-10,6,-6,6,2,-10,1,-2,6,-2,6,6,4,9,-3,-7,-3,-8,4,8,2,-6,5,3,-7,8,-8,3,10,-8,-8,-5,-9,-1,5,-1,-7,-1,9,6,2,1,2,9,-6,2,-3,-7,10,-5,7,-3,5,1,-9,-9,-10,-8,-4,2,-6,-4,-3,-3,-6,7,6,-2,-3,6,7,-2,6,9,9,-8,10,-7,-2,4,-1,-5,-3,10,9,10,9,-5,2,-5,-7,-7,6,10,4,-7,-6,-2,9,-7,-7,-4,-8,1,3,4,-10,9,-7,-5,-4,8,7,9,1,2,-4,4,5,4,3,2,-9,3,-1,-6,3,2,-3,5,10,4,6,-6,5,-3,-7,6,-7,1,9,10,3,-1,-7,-4,4,9,-8,-2,-2,-5,-9,5,2,-1,-7,-3,5,9,-10,6,-3,-3], dtype = "int32")#candidate|6128|(1792,)|const|int32
const_6129 = relay.const([6.970000,-3.432945,-7.360007,-1.434267,-7.319104,2.776410,2.354362,-1.796893,4.774692,-8.492451,-7.968588,-3.990872,-4.667838,5.142530,9.471970,-2.915202,-6.865440,7.274877,-6.042872,-9.226550,2.136687,-6.271014,8.060026,3.145644,-6.239961,2.493388,-9.936476,8.434074,-3.286465,5.442268,4.444163,3.082174,-3.195514,-0.266563,-4.498213,6.222372,-6.686574,-3.178574,-0.419070,7.724108,-4.761845,-9.916131,-9.760194,8.202157,-9.504278,-5.826799,-3.992870,9.644101,6.121043,3.377589,-4.004893,1.662374,-4.375001,-3.221262,3.791336,-2.185053,0.637864,9.174403,-0.308643,-4.857386,5.949965,-7.771761,-8.648111,-1.937310,4.014120,8.932060,2.437511,4.467794,2.785926,-3.523649,6.921999,-8.437184,3.727123,-3.763389,-1.869243,-0.432281,4.102688,5.717669,-4.589725,9.706893,0.950463,8.028318,-1.550490,0.701173,9.332721,-6.411647,-7.244639,8.511128,-8.219947,0.466867,-7.454992,-6.941106,-2.184534,-5.625441,-8.182311,-0.585807,-2.323652,-1.930533,-0.797067,-4.721114,0.887429,-7.578738,4.252366,-8.841851,9.593757,-8.393687,3.049429,-6.940209,-8.654956,7.108980,-9.294969,2.858305,2.819630,5.296074,2.425608,4.605315,0.697714,-2.427057,4.146020,-7.249517,-0.463964,5.807691,-8.800831,8.138091,-3.645877,5.566567,-0.732406,2.861573,-9.318037,-5.718494,1.704618,-1.581544,9.142596,6.994944,8.324922,-6.821963,9.434155,-1.626731,0.212839,-2.055253,-3.598488,-1.136087,-7.469128,-0.188437,1.667540,-2.719351,5.934434,2.249612,5.537847,4.505953,-3.569282,-3.159845,5.334494,1.429535,-3.726034,-0.204499,6.314911,-3.630687,2.012709,-5.515888,5.248867,4.276402,-5.936091,5.277562,2.762095,-9.861538,-4.311384,6.719912,1.254778,-2.655774,1.403682,-9.152899,-0.054247,-6.685752,-0.567530,-3.693423,-5.320353,-2.406294,-6.968799,-2.987706,-4.611012,4.641017,-6.781438,5.948424,-2.759190,8.733192,-9.273259,-5.254924,-0.754826,-4.837461,-8.901968,-6.207277,-4.974773,2.306846,1.627903,8.870210,-9.501237,-1.955601,6.971328,2.372937,-5.156571,2.687942,-8.548902,3.753080,4.148039,7.729940,-5.240288,-9.422553,-8.042981,2.262953,6.579615,-8.852146,2.701815,-1.280841,-2.260380,-6.145031,3.364146,3.217144,-9.071136,-7.907810,9.962053,2.174521,-8.651677,-7.340013,4.018760,-8.597342,-4.917293,-7.389156,1.886091,4.601618,-3.605211,-2.599186,3.847965,-3.521482,-0.194673,7.788653,-3.815376,5.753418,-6.190133,-8.272851,0.540506,5.179190,6.010547,-3.802101,-0.052325,-7.730309,7.941042,-9.946227,-0.995309,-1.808168,-9.012240,-9.387825,-9.746357,3.496013,-3.335979,-9.105348,-3.533102,4.990963,-4.703701,-9.697276,0.064759,1.911781,-3.459568,-0.528337,-0.870592,2.028702,-0.417735,-0.794921,-2.039335,-6.975914,0.825624,-1.114522,-9.651414,3.313712,6.617596,1.571368,-3.947264,-0.002700,7.576938,7.627221,5.144252,-2.865262,3.540682,1.443526,-5.753662,-6.695136,-4.607622,9.036522,-2.492926,5.617009,-6.822723,2.178141,-7.125004,8.959249,-3.864791,2.922948,-7.654742,1.084113,-8.839039,8.136680,-3.456667,-2.485671,-8.101613,4.329875,-4.332082,5.543380,-3.416621,7.340584,-7.254995,-4.904087,-9.275399,-5.514526,4.500672,-3.125448,-9.716243,-6.078057,5.885128,-5.490917,-5.636473,-7.323529,-4.983540,5.158191,-2.784335,7.721222,-1.038357,2.491138,-6.996590,4.022090,-5.341434,7.213684,8.907566,1.546797,4.860044,-7.708571,-6.592040,-4.291574,-5.060020,3.381489,7.127263,2.491710,-6.575876,-9.790591,6.444999,-0.865451,2.109758,-0.118830,7.294925,7.696539,1.394757,-5.873975,-7.427216,7.535491,-7.861852,-4.528366,8.561655,1.460652,-3.041409,-4.175961,0.760719,7.720182,9.035475,1.371283,-1.463679,5.687185,0.381461,2.548283,-0.816417,-6.098348,4.841094,-5.254456,4.624584,-2.531777,1.940823,0.435036,7.680110,3.655008,-2.867017,2.684264,8.075661,0.817265,-5.227062,3.229784,4.310893,0.727392,-0.970828,4.196978,-8.648462,3.715191,6.953303,-3.663509,-6.606814,5.339885,2.392246,8.073301,9.569966,5.392109,4.640929,-2.273229,-3.994454,7.827379,-0.861235,-1.506017,-6.445549,-6.945519,-8.385648,-1.223290,5.075070,-2.295838,-3.493531,7.256908,-8.160253,5.556775,7.317935,-5.325821,6.637751,-7.139802,-7.264318,-3.078731,7.412782,-8.153259,-5.992569,-7.416429,-2.105054,-2.218633,-1.002300,-1.465973,-4.757337,-9.780159,-2.512871,7.207052,-4.426256,6.157330,7.936318,0.679900,-9.223584,-6.818568,-5.528782,-5.650191,8.238578,3.312637,3.551525,-6.105979,0.734282,3.924366,0.302641,1.354099,8.090329,0.120440,2.472725,6.717921,-1.750117,-8.132513,-6.162643,-7.023218,4.126229,8.418495,5.529497,-8.309203,-2.336620,-2.960709,-3.814014,3.327390,-0.335168,-7.813846,5.605870,-3.725300,-8.329545,-3.755019,2.294920,-9.679357,-0.560157,2.228460,-0.504929,-9.672919,-2.411113,-9.575883,-3.017132,-2.178273,-0.352730,-0.761385,-9.184225,-2.013674,8.004822,7.263407,3.076592,2.909215,6.874577,2.451873,-8.126121,-7.573200,2.363417,-8.745883,-8.029373,-9.801333,6.723537,-3.549204,2.319824,-6.986054,8.804693,-3.667912,-0.460019,-2.011334,-6.019131,8.138385,7.565820,8.766094,-3.037630,-1.215956,-8.214133,-9.793236,-3.257005,2.278617,5.809991,-2.174241,1.766202,5.022607,3.956822,9.837920,6.508352,-3.511024,-1.327632,7.914550,9.877670,2.782911,1.033903,-2.320409,-5.060376,9.339237,1.880220,-8.394068,-5.314433,-2.945368,9.352792,-1.053736,-1.604733,4.897581,-7.745507,-0.569810,5.143807,-5.710201,5.619588,-7.091820,-1.372629,8.108229,0.218486,9.280680,1.579347,9.532088,2.362491,5.097940,2.132642,5.813716,-4.341393,1.978772,3.999814,-5.870236,-0.986073,0.486199,-7.965573,7.634642,-0.951469,-7.263032,-3.933480,8.761023,0.042140,-9.657032,4.872923,-1.867951,3.188058,1.192481,7.931813,1.063919,-4.675132,7.878474,1.951171,0.511304,2.373073,8.437850,9.867392,7.575041,9.014780,0.263964,1.633582,-7.302712,-6.466342,-2.803780,2.638224,1.597753,-3.763014,5.815536,7.457330,8.548796,-3.187303,1.948174,4.372788,-6.662311,-9.530760,-0.626890,7.117312,-3.656611,-0.380966,-4.492007,-1.372102,-8.166631,-3.910836,-3.485792,-4.529819,-5.695261,-9.039946,-6.842691,-0.300670,-4.281518,2.538330,7.257509,-6.203615,-3.364858,-0.011782,-1.203532,-7.766409,0.149434,-4.386496,1.507226,0.522221,9.508787,3.671919,-5.696880,-1.377938,-1.157691,9.170511,0.763628,5.148628,-3.146007,-0.961669,-6.982741,2.564365,8.055701,3.367723,-6.014798,-0.200552,-5.824919,-8.354688,5.810577,2.256141,-5.636888,0.397047,-4.332479,9.781757,-7.264607,-5.296788,-0.711795,-0.165307,1.765139,-0.503852,4.005691,-6.971149,-3.737498,-0.679653,0.091212,7.013838,-3.324147,2.133032,6.105025,9.389797,-9.477119,-7.631649,-6.298372,-5.920279,-6.708034,8.281770,4.045488,3.205223,-6.441017,-5.508421,-9.007100,9.527728,-9.287723,4.218815,3.506730,-4.914648,-4.431046,6.370822,1.960027,7.221190,-0.848078,8.452962,-3.024400,-5.885415,-2.819905,-5.208228,-7.659256,0.298511,4.370983,8.779105,-4.541297,-6.740319,-9.372631,1.523276,-3.373149,-4.929323,4.188703,-8.483139,-7.696137,1.618032,1.134410,3.656831,1.101546,7.470349,-3.659794,-4.124076,-2.494940,5.929586,-3.462255,-8.705285,3.434683,7.043791,9.061048,-2.842445,-4.429711,-9.243074,-3.643487,-6.577191,6.693389,-2.419606,-5.586226,-5.373046,3.420527,6.307666,-4.869701,-2.890305,-1.747593,-4.011176,-0.249285,-7.063116,-4.516574,-2.518262,-8.514931,4.675424,-8.975761,5.865574,-2.806038,0.097173,-8.703848,4.870980,7.421998,-7.427184,4.380382,0.329905,-5.346495,1.610301,-4.525484,1.880607,-8.447839,-7.761429,-0.031841,4.756589,4.125066,-3.234121,9.388020,-0.982488,-4.662257,6.978196,-8.307392,1.043084,-6.691932,6.673542,-0.673421,2.250440,6.683363,-2.944995,-1.308441,-7.081784,-2.930189,5.882862,-5.214504,-4.699692,-1.099416,6.980634,-2.926766,4.362252,0.911392,-3.133966,0.736949,-3.590550,5.644230,-1.571924,-0.864240,-0.280819,-2.093096,-8.606343,3.216477,4.098761,-5.553596,-1.297427,0.992390,6.126841,9.271402,-6.120534,-7.296205,6.311843,9.364695,8.006746,4.385495,9.342842,8.215086,-0.024717,-7.666570,-9.582182,-3.535429,-8.059365,8.642103,-7.470667,7.192981,4.800712,5.314854,7.855710,3.012179,-9.619576,-6.976002,-0.351016,-0.244420,5.294732,-0.832645,0.932779,-3.622569,-7.273115,-2.945223,-6.551941,3.669149,8.000754,7.820636,-1.512481,5.676975,1.562901,-8.391125,3.881184,-1.417319,1.789478,-2.240958,-3.788130,-9.685447,-5.485843,5.631306,-7.619656,5.226366,-5.438173,7.222369,4.097413,3.383665,-3.793703,-7.311239,-9.160823,-0.663077,1.944323,7.259460,-3.714853,-6.102418,-0.845023,2.186381,-7.744651,-8.550685,0.053435,3.607616,-0.378322,0.233794,-7.618523,-6.559265,0.587401,2.065732,8.656733,-3.196406,-6.013957,4.203625,-0.180099,-0.262987,9.951940,4.074376,-2.647244,1.819755,-0.201250,9.621113,-2.251782,0.899496,3.967618,-8.230241,2.933179,-7.842645,1.614426,-8.127087,-0.438192,-8.736905,6.575309,5.017442,1.836665,-6.944500,7.473283,-6.623714,0.524583,1.361969,-5.573177,-6.731622,-4.132752,-8.223389,-8.109868,-7.140207,4.974329,-0.507601,-8.294977,-6.315987,-9.738281,2.494209,-1.271430,1.755064,-8.930372,-5.585618,-4.393232,-9.572030,9.161903,-9.361997,-4.023653,0.452655,0.097623,-9.336204,4.549010,9.203413,-4.031276,5.101843,6.990017,-6.952240,-9.874851,-3.029293,5.298722,3.146164,5.358897,-5.946217,-1.154649,4.138391,9.011923,-5.713293,-9.336546,-5.743390,-1.855954,-2.649157,-0.258560,0.593865,0.084877,1.054476,9.536606,-0.699155,-0.746281,-7.354389,-6.472253,1.389185,5.763653,-8.618510,6.626442,-7.498923,-5.596366,2.245252,-7.913278,7.037776,4.404653,-9.656046,-5.996265,5.094170,-6.034546,4.789813,-6.580969,-4.909644,-0.615732,7.780429,-2.901233,-6.132409,-7.872668,5.996019,-0.266203,5.851512,-7.639283,-0.479924,-0.328173,8.172112,9.930682,3.390487,8.790289,-4.436813,-2.588013,-8.054989,9.097888,3.327582,-5.136296,-0.045182,-2.731442,-2.067925,-5.851789,5.983991,4.945439,5.262126,2.498287,-8.592648,-6.601631,8.068458,-9.046445,3.428550,-4.522324,-9.836424,-2.900903,2.121821,-1.805310,7.571640,9.743584,5.663783,1.667756,0.017058,8.239155,-6.438024,-0.263403,-2.494767,6.787559,1.691188,-8.756292,-2.167979,-1.368775,8.595277,-3.250658,1.025358,2.558366,-4.494294,5.544771,-9.903060,0.756218,8.673464,-6.633323,-9.288388,3.192960,3.628019,5.040132,-4.365889,9.312855,-2.551720,-1.833946,0.735494,-9.821441,3.072595,-8.871103,-4.681381,-4.564842,8.093620,5.936898,-8.927507,7.515684,8.635331,4.795317,4.117269,9.242405,-9.809571,0.985167,-3.581338,4.393249,-8.351090,1.938691,5.625341,-7.130846,-3.989637,5.981768,-7.949972,-8.258177,8.591528,-0.054520,-9.972557,4.834237,5.114202,0.662407,-0.064130,9.365341,-4.485048,-2.452162,-6.325738,-6.030998,-3.407275,7.365360,1.088604,-2.490346,-7.466901,8.922419,8.104772,5.644349,0.017562,-9.252479,-2.385554,-4.334551,-8.882440,-0.971451,9.777871,1.798480,-7.667871,2.392225,-2.562391,7.514831,-5.992402,3.638323,9.813839,-5.382641,0.093036,-4.768762,3.564163,-7.462029,6.574254,-2.460737,-9.115706,5.664519,6.246925,-2.220533,-7.785305,-0.111393,-2.588158,-4.815304,-3.171077,-6.440945,4.767760,8.681361,-3.717649,-2.591624,8.310308,-9.204822,-2.477475,-1.935547,-4.637056,5.546600,-7.698756,9.502115,-0.361162,-0.204063,9.304202,-3.559637,-3.147196,5.508339,-0.579855,-7.825874,-9.366347,2.787385,-1.684646,-6.028919,-8.128578,-1.660773,0.551166,5.996939,9.438249,3.004089,-2.051957,-2.533296,5.822078,1.142173,2.041161,0.248320,2.400371,3.661648,5.134091,-4.903453,4.425168,-3.312384,3.338918,-7.226633,-7.978993,7.632611,-9.584111,9.523841,3.241260,1.147024,-7.872591,-5.757015,9.714854,-9.130939,-7.561930,-2.638285,7.043258,-6.976307,-7.643807,8.039889,-7.120553,2.929236,-8.426750,0.625381,-0.449010,8.087080,2.812202,-3.083340,8.353419,6.130300,6.026999,1.933026,2.228781,0.292225,1.552396,-7.242157,8.008453,-6.611647,-1.858867,4.409937,-5.063423,5.528021,3.115021,-8.914942,-8.076248,-8.700279,2.137639,-1.064288,1.176089,-7.610827,1.180463,4.621652,-6.010417,-1.625390,9.385659,1.404644,-6.754232,5.922005,-1.880554,-5.548346,-9.440682,0.669651,7.189078,-3.891497,0.615103,5.246139,6.028807,-7.296788,-9.327643,-4.977011,-8.543556,8.281587,-8.953791,-8.082310,-0.477517,-2.015825,1.576964,-8.400744,6.125342,-3.776040,6.402406,6.660861,-9.533352,-9.734712,6.101515,-9.138928,2.497580,-4.441772,-6.111960,-5.479886,-0.027298,9.334179,-5.525206,-9.508770,-8.948759,1.012400,-1.114814,-5.966061,-6.588878,6.719918,2.902745,9.739519,5.213931,1.394070,9.280242,-9.955483,-4.798501,0.115527,7.300101,-3.563676,-5.735236,2.422549,9.492429,5.121087,-8.610405,8.970409,-3.025039,-6.830542,-1.776870,-6.352969,-8.965890,7.448617,-2.764847,0.022643,-1.961796,-6.286820,8.711728,1.313786,4.199692,-5.928053,0.112778,-5.998856,6.567665,3.889596,-6.139571,0.361943,-3.814252,1.652070,0.710840,-5.965471,-5.993903,9.206646,-4.583443,-9.696233,4.619789,-8.131246,-7.468161,9.764796,7.329910,-9.582101,-3.205393,-6.734183,-4.173707,2.144480,6.733059,-0.385944,-4.081954,9.436716,-3.379604,8.714021,9.573482,6.524641,-6.322834,6.427186,0.406058,1.240128,3.444575,7.159731,1.754055,5.980704,-5.844467,-3.479738,7.766894,-9.884803,-1.494006,-5.847896,5.221114,7.279853,-8.847690,3.446142,-9.054676,7.653337,2.859833,-4.903657,2.910934,1.235199,6.048458,6.043974,0.551179,-6.587759,4.503813,3.720636,-4.766210,-9.504151,6.866371,2.039885,-6.308939,4.613652,1.010302,-5.768733,-1.998325,-2.212580,4.138895,-9.119533,2.724825,-9.606469,2.620011,6.552756,4.929161,-4.833299,-5.496566,-5.816726,-8.043746,-0.918592,0.306912,0.991466,-9.519502,5.579779,6.297258,-0.476829,0.417273,2.452670,2.344314,-8.022614,-2.715680,1.272379,-0.048962,6.379965,-1.051702,-1.337958,-1.564527,1.909239,-5.870215,-1.035762,-3.637910,-0.893560,-5.805926,7.540190,1.590879,-1.353038,-2.190061,-4.324696,0.332712,-7.001307,0.827903,-7.078196,-4.419901,-8.287759,-0.364853,-9.763097,9.359554,-8.900462,-2.208237,0.076393,-0.519642,9.930810,-6.468497,8.404054,0.367421,3.929462,6.040039,-2.038683,7.101830,-2.649867,6.200505,-8.958548,4.283157,-5.184350,-2.942683,0.518538,2.233550,-0.969112,-8.632897,-0.239079,5.465535,-5.850735,6.854499,-5.241550,2.356262,-4.966009,8.111053,-2.770486,-7.397894,-3.014589,-3.221883,3.660569,-2.374092,1.103758,8.870352,-3.334764,1.076528,3.294511,8.405240,4.887837,-9.058964,2.002065,1.088948,3.177814,1.412552,-3.046483,9.499972,2.717620,1.979199,0.601161,-7.585877,7.363236,-3.435660,-5.901849,-7.339309,2.747923,-3.945477,-4.401866,-5.628778,2.566141,9.023035,0.480025,8.737829,-6.221884,-1.144745,4.856737,6.205414,-6.059768,-5.831789,6.495225,4.379302,1.442812,-5.590284,6.216788,9.276402,-0.599112,-3.946738,-3.815357,-0.504359,3.466935,-9.663565,-4.656823,6.224064,2.721024,9.707400,1.462305,7.424281,-5.927709,-9.206082,-5.232738,-9.874031,8.385003,4.695098,-6.783047,-4.293815,-3.458797,9.370797,3.184646,5.150248,-6.553444,7.455049,2.883753,-4.400114,-4.534259,6.203585,3.863770,6.249437,3.072803,-6.048131,2.297916,9.776367,3.283896,-2.657573,0.690139,8.484903,-2.121329,6.516593,-1.164607,-7.071689,8.908225,2.762467,9.045393,0.978628,1.631159,9.488877,-0.661247,-9.675478,2.113843,-2.867602,3.449001,-4.791210,4.661747,3.201125,4.183654,-6.628618,-5.954494,0.750286,4.455762,-6.327224,-7.132143,0.845088,-1.122206,-4.039380,-9.011634,-9.212247,1.149295,4.198117,6.590407,-6.317653,-1.173495,3.230124,-4.625071,9.913746,0.620028,1.478557,4.354870,-7.035820,-5.106782,4.833959,-9.636049,-0.351635,-8.542707,-0.271719,9.561427,-6.729942,2.153649,-5.138480,5.735296,0.263747,6.697984,-6.232454,1.528615,-3.328222,-9.320218,-0.772045,9.692358,-3.332240,9.167357,1.070831,4.420651,-3.836100,4.703455,-2.745710,-5.193674,4.100937,-6.517310,-8.347198,3.319776,-0.330432,-0.331361,-9.297725,4.822994,1.529908,0.390705,2.274511,1.988638,0.258111,-1.568964,0.731506,-3.764207,-7.076607,-2.741733,-4.854000,5.298016,2.916198,-6.396007,-0.904820,-5.509578,-6.920127,-6.429914,-4.277168,0.986274,0.717565,-7.202513,8.550644,6.669719,9.159405,-5.248767,2.355572,-5.450107,-8.083706,-6.381628,7.561799,-2.984910,-6.483662,5.484610,-3.227875,1.070394,1.943053,-5.755602,-7.854027,-6.150273,-2.678756,8.341595,9.558666,-5.113932,-6.315206,-1.279099,-1.833266,3.262821,6.221592,0.291834,-5.404555,9.707579,-4.798123,-5.154521,-4.029865,6.357227,1.139603,-6.978729,-9.668698,-1.612953,-1.502041,-0.552618,-0.611994,0.007127,6.216606,7.812587,8.234082,2.084821,3.029346,-4.806821,-8.766856,-7.536421,6.090232,-7.325350,4.468154,-5.863126,7.231137,-9.874023,1.130571,-4.574368,5.202910,-1.413673,-7.165494,-3.637519,7.715438,8.773633,-4.263666,3.478194,2.462773,-1.381533,8.812169,-5.557831,7.176290,-9.855910,-2.838431,6.322886,-5.304680,1.443508,3.077609,-9.894888,-8.012953,9.775185,6.231564,-8.504103,-0.529802,-5.870555,-7.432138,7.529413,0.547850,-9.913445,-5.286530,3.413740,5.189574,0.936531,1.781201,7.037837,-0.128644,-3.717474,3.671011,-4.804175,7.573540,4.140268,5.543205,-3.607226,-3.764279,-7.476524,-2.813720,-9.290760,-8.714773,0.584193,4.038420,-5.020048,3.374313,-2.385086,8.534990,-9.323241,2.727392,-6.904137,-4.815006,0.354535,0.844903,3.613193,-0.884010,1.982905,-6.107737,-3.731160,0.917361,5.233263,2.547495,-9.420967,-5.872498,-8.370530,-2.725519,-4.035912,9.385410,-2.440776,2.126782,-1.402494,1.648851,8.961863,-7.462636,1.626330,-5.512010,-5.961910,-9.818438,-9.355488,-1.976136,-1.416973,-2.749390,0.085541,2.616664,-8.912160,-8.092966,-5.215799,5.802504,9.176290,4.621778,0.898548,2.684272,8.176383,-1.028462,-5.385004,-2.274293,-0.297403,5.355190,-0.853057,6.255261,5.726979,-0.172301,4.014346,8.340054,0.439749,5.223001,-0.918939,4.206200,3.759903,-6.633527,-0.688250,-7.284141,7.745338,-9.774567,-1.020688,-0.434096,0.247116,0.238519,-3.121693,9.479019,0.063416,5.129600,2.155114,-0.139244,-2.214666,-7.976229,6.099763,9.460916,-8.529695,3.181206,7.495953,0.219766,-6.823604,1.837891,8.208332,-1.347963,-4.783685,8.359418,-4.376081,-8.999153,-1.395687,6.674975,4.908605,-3.994790,2.007336,2.421735,3.279088,4.197948,3.094222,3.219001,-0.806063,-3.823158,3.359126,-1.386791,5.905128,-7.444705,-2.535709,9.986574,5.204548,6.681035,8.563133,7.217799,6.107908,-6.787633,-4.944465,-3.608098,-5.296495,0.617042,-7.015551,7.536361,-2.497745,7.594799,-8.658816,-1.748549,-7.806679,-5.172359,-0.665447,-0.748017,-6.420067,2.701548,-7.679859,0.966611,-3.130476,-6.069841,0.106054,-4.501341,-0.677122,-1.363896,-3.278049,-2.339255,-7.145647,0.195562,-4.030016,2.139379,-1.082308,6.800783,-2.263376,0.691829,3.012683,4.532912,-2.542799,-4.221072,2.599036,5.200770,-9.420612,-5.040371,-7.643046,4.699354,8.332251,1.966915,6.123854,9.852294,-0.702224,-8.877823,-3.347890,-8.627807,7.552668,8.192732,4.877932,0.228442,-6.541389,-0.521625,4.064889,-7.844159,-8.842407,-6.228742,-1.837848,8.659453,5.289617,6.990814,7.406903,-3.813396,-8.136012,0.859983,-4.811242,3.385518,-7.172262,3.013529,-8.150931,4.464386,5.057461,-4.861604,4.112575,-9.713013,-2.231135,-2.473956,8.347979,-1.603521,8.640972,7.768535,-0.823002,-6.131746,6.969277,-5.624827,7.767813,-1.995370,-0.127759,3.065168,1.964837,-2.577983], dtype = "float32")#candidate|6129|(1950,)|const|float32
call_6125 = relay.TupleGetItem(func_1925_call(relay.reshape(const_6126.astype('float64'), [14, 2, 13]), relay.reshape(const_6126.astype('float64'), [14, 2, 13]), relay.reshape(const_6127.astype('int16'), [350,]), relay.reshape(const_6128.astype('int32'), [1792,]), relay.reshape(const_6129.astype('float32'), [1, 1950]), ), 3)
call_6130 = relay.TupleGetItem(func_1932_call(relay.reshape(const_6126.astype('float64'), [14, 2, 13]), relay.reshape(const_6126.astype('float64'), [14, 2, 13]), relay.reshape(const_6127.astype('int16'), [350,]), relay.reshape(const_6128.astype('int32'), [1792,]), relay.reshape(const_6129.astype('float32'), [1, 1950]), ), 3)
func_1194_call = mod.get_global_var('func_1194')
func_1199_call = mutated_mod.get_global_var('func_1199')
call_6131 = relay.TupleGetItem(func_1194_call(relay.reshape(const_6127.astype('int16'), [10, 7, 5]), relay.reshape(const_6129.astype('float32'), [1950,]), relay.reshape(call_6125.astype('int32'), [1792,]), ), 0)
call_6132 = relay.TupleGetItem(func_1199_call(relay.reshape(const_6127.astype('int16'), [10, 7, 5]), relay.reshape(const_6129.astype('float32'), [1950,]), relay.reshape(call_6125.astype('int32'), [1792,]), ), 0)
func_372_call = mod.get_global_var('func_372')
func_374_call = mutated_mod.get_global_var('func_374')
call_6144 = relay.TupleGetItem(func_372_call(relay.reshape(const_6129.astype('float32'), [10, 15, 13])), 0)
call_6145 = relay.TupleGetItem(func_374_call(relay.reshape(const_6129.astype('float32'), [10, 15, 13])), 0)
output = relay.Tuple([call_6085,call_6117,var_6118,call_6125,const_6126,const_6127,const_6128,const_6129,call_6131,call_6144,])
output2 = relay.Tuple([call_6086,call_6119,var_6118,call_6130,const_6126,const_6127,const_6128,const_6129,call_6132,call_6145,])
func_6147 = relay.Function([var_6118,], output)
mod['func_6147'] = func_6147
mod = relay.transform.InferType()(mod)
var_6148 = relay.var("var_6148", dtype = "bool", shape = (13, 9))#candidate|6148|(13, 9)|var|bool
output = func_6147(var_6148)
func_6149 = relay.Function([var_6148], output)
mutated_mod['func_6149'] = func_6149
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6154 = relay.var("var_6154", dtype = "float32", shape = (3, 14, 1))#candidate|6154|(3, 14, 1)|var|float32
uop_6155 = relay.erf(var_6154.astype('float32')) # shape=(3, 14, 1)
func_3267_call = mod.get_global_var('func_3267')
func_3269_call = mutated_mod.get_global_var('func_3269')
const_6165 = relay.const([True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True], dtype = "bool")#candidate|6165|(1188,)|const|bool
call_6164 = relay.TupleGetItem(func_3267_call(relay.reshape(const_6165.astype('bool'), [1188,])), 2)
call_6166 = relay.TupleGetItem(func_3269_call(relay.reshape(const_6165.astype('bool'), [1188,])), 2)
bop_6167 = relay.greater_equal(uop_6155.astype('bool'), call_6164.astype('bool')) # shape=(3, 14, 1188)
bop_6170 = relay.greater_equal(uop_6155.astype('bool'), call_6166.astype('bool')) # shape=(3, 14, 1188)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
var_6173 = relay.var("var_6173", dtype = "float64", shape = (504,))#candidate|6173|(504,)|var|float64
call_6172 = func_180_call(relay.reshape(var_6173.astype('float64'), [6, 7, 12]))
call_6174 = func_180_call(relay.reshape(var_6173.astype('float64'), [6, 7, 12]))
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_6181 = relay.TupleGetItem(func_5961_call(), 1)
call_6182 = relay.TupleGetItem(func_5962_call(), 1)
func_5811_call = mod.get_global_var('func_5811')
func_5815_call = mutated_mod.get_global_var('func_5815')
const_6185 = relay.const([[False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False]], dtype = "bool")#candidate|6185|(1, 117)|const|bool
var_6186 = relay.var("var_6186", dtype = "float32", shape = ())#candidate|6186|()|var|float32
call_6184 = relay.TupleGetItem(func_5811_call(relay.reshape(const_6185.astype('bool'), [39, 3]), relay.reshape(var_6186.astype('float32'), []), ), 0)
call_6187 = relay.TupleGetItem(func_5815_call(relay.reshape(const_6185.astype('bool'), [39, 3]), relay.reshape(var_6186.astype('float32'), []), ), 0)
uop_6188 = relay.acos(uop_6155.astype('float64')) # shape=(3, 14, 1)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_6237 = func_6080_call()
call_6238 = func_6080_call()
const_6240 = relay.const([[[-5.722466,-9.819417,-6.505855,6.658390,1.369337,3.080724,-6.527446,-8.669791,-5.443979,9.332893,1.587518,-4.193781,-7.578958],[-2.149731,-1.224530,-1.053251,-6.193701,-5.954908,5.223607,5.865390,7.510541,5.756469,-5.720508,0.188410,4.746052,8.713766],[-2.986476,5.612147,0.019996,4.835238,-7.575493,-3.920490,-0.388270,3.879822,3.688835,-3.081076,7.280626,-8.221550,8.883743],[4.530995,9.660647,3.637653,-1.121327,-6.177201,-6.023932,-8.003515,8.012506,7.080298,8.027431,-0.974220,9.812719,4.225564],[-6.895616,3.722152,2.272524,8.272492,9.628744,-6.625661,2.395395,2.112225,-3.656794,-3.348699,5.563181,4.916064,-1.773516],[5.405450,-1.764717,5.259369,-2.690704,-0.118685,2.439230,-7.903420,-2.688214,-7.139881,-6.284257,0.673670,3.940054,-3.440590],[-7.719672,5.173557,1.463351,-7.759049,9.881159,7.656550,-0.093757,6.162227,0.669682,-6.223899,7.693448,5.968439,5.062760],[-4.316123,2.400455,0.438967,3.059048,-9.190479,7.757988,-6.091922,-1.711025,-0.950449,-7.129221,-4.791545,-5.313547,5.916778],[-6.826855,6.797943,-5.238661,-4.786874,-3.509770,5.019018,3.811933,3.404004,-8.437824,5.382472,4.653476,-1.411769,-0.035962],[3.087997,0.532907,-2.773032,4.386121,6.730195,3.403879,3.208233,4.678004,0.503609,6.259332,0.937953,1.013715,-8.288284],[2.022376,-9.556442,-3.238538,-3.678865,-3.310279,0.814013,-0.162585,4.213503,-3.947172,3.000033,4.847696,-2.654485,3.150629],[1.739867,8.676332,9.196760,-0.258610,-0.992208,8.872653,-3.275234,2.960369,-4.331812,9.144545,8.459113,-8.499824,4.616675],[-2.668326,-7.452213,-9.796974,-0.995848,-1.572242,-8.865713,1.081757,3.841196,8.902777,-0.903596,0.671430,-5.660595,6.137499],[-6.050417,-7.263882,9.021048,-7.380798,2.445146,8.299205,-9.276373,4.555555,-7.037373,7.729018,-0.896636,-8.613495,2.337714]],[[7.340525,-7.210887,5.202608,-3.239086,-3.394148,-2.445916,-6.475220,5.491428,1.908725,9.813145,-6.673110,2.252509,7.286218],[-8.044715,4.507098,7.537209,8.191723,3.058999,-9.275118,9.717781,4.651123,1.858064,5.622183,-8.959044,-7.012750,2.752477],[6.035192,-5.823564,-9.828538,-9.214242,-1.031356,-9.915866,7.857723,6.629885,-5.762929,9.585069,-0.221905,5.774296,1.047695],[4.670370,8.819876,7.110489,0.523467,1.037820,-3.481021,6.439344,9.835920,6.757617,5.694253,-3.156233,3.511772,-3.297073],[8.300633,8.255599,1.052811,-6.270402,7.020633,3.534270,-9.775465,2.286372,3.333014,2.575620,-4.074452,9.557266,0.347513],[8.816981,9.586195,7.687905,9.775143,-7.203236,2.019666,9.471829,-0.449796,3.734531,2.789954,5.452616,-3.632770,9.260894],[4.816757,-6.622229,1.847573,1.123780,5.538389,9.570732,0.322831,6.082589,-2.000890,-1.135122,-7.175436,2.992453,-6.187098],[-2.861687,-9.599877,6.342560,-3.756049,-2.407196,-0.821419,3.347643,-9.515283,-5.457550,-5.971086,-6.405445,4.173885,9.510935],[5.784627,5.090844,2.735149,-0.163786,-7.175667,-1.829875,6.259216,-4.694455,-4.854637,-7.244177,-5.765586,6.184677,-1.461687],[6.616392,-9.245351,0.484290,-2.685810,2.163965,-2.555780,1.391704,3.141215,-7.037965,-4.374016,-6.526575,-7.298969,-8.760565],[-0.491115,4.790399,1.777689,-3.225677,2.377660,9.700246,-2.894525,8.322498,-2.253335,6.830183,-4.093122,0.849444,-8.786498],[-6.449909,-8.218552,5.678471,-4.719527,8.756351,-1.411469,8.406585,-8.515777,8.139526,3.256174,9.464742,1.455186,9.196218],[-1.201241,-9.373822,0.895688,9.147444,2.915188,-4.358313,3.994641,-3.583877,8.335953,6.773018,-4.305728,-6.155765,-2.898228],[-3.132365,7.058473,5.267539,-5.614256,-6.781097,-2.380808,3.841744,0.734829,2.891617,3.927077,-5.598063,4.109570,-7.156083]],[[-7.872142,3.385636,3.002368,-6.223985,-0.282661,-2.718614,8.427754,-7.350418,9.713856,-6.299769,0.552244,3.203080,4.692081],[0.465295,-4.091013,-3.914827,-8.832977,5.067028,5.135669,-8.049974,4.482824,-5.916421,-1.900077,6.696643,-3.370506,-8.389547],[1.175715,3.702374,6.439708,-8.617120,-9.444305,-7.637779,-3.414934,-1.910883,0.424809,1.415003,-9.545188,2.467672,-1.137943],[-5.165941,-0.283871,-0.437157,-9.840897,-4.968331,-5.383298,0.676427,-3.761483,-5.475044,7.094472,-6.652087,8.635722,-9.704360],[-1.627330,-3.766317,-6.578425,5.309112,4.785744,-5.744554,2.496252,0.485941,8.217741,9.089213,-0.603441,9.157429,-9.844490],[-2.756745,4.496184,5.662013,8.431717,3.781799,-6.223071,-8.835601,-0.055862,-7.362574,-0.407281,-3.728357,-3.499232,3.047958],[0.026366,1.623719,-2.937172,3.515555,-4.031485,3.506173,5.204442,6.254460,-1.421834,5.687493,-7.500831,-0.636048,-0.302320],[7.158014,-2.185777,9.213781,5.155608,-0.633311,5.452709,9.461085,-3.131709,7.583678,2.556963,-3.315717,-3.803255,8.265215],[3.064024,0.654822,-7.318366,-8.184403,5.906643,-3.159415,-4.547173,2.684674,-6.457469,7.878064,0.938505,-8.885184,3.026125],[-3.370166,9.658340,3.638015,-1.404754,-2.385386,4.999738,2.584221,-9.258011,3.122828,-7.544731,-8.225459,1.220800,-9.459540],[-2.313711,-2.847233,4.340714,-7.540151,-3.785094,7.689221,-2.710273,8.351204,-1.196422,3.904448,-7.286885,-6.917970,6.665795],[7.239329,-4.351264,5.437303,0.573301,5.085220,7.331447,3.184382,7.385582,-8.549557,-9.985900,1.175750,-9.144704,2.301081],[9.052383,-1.747384,8.249055,0.058830,7.661862,-4.741062,-8.435574,0.226769,1.905893,2.745496,7.092022,6.734767,7.301858],[-8.344217,4.905180,-8.974499,1.003105,0.671231,9.604941,6.406778,0.828112,7.629399,0.796566,4.136662,5.837077,4.623709]]], dtype = "float32")#candidate|6240|(3, 14, 13)|const|float32
bop_6241 = relay.logical_and(uop_6155.astype('bool'), const_6240.astype('bool')) # shape=(3, 14, 13)
func_2918_call = mod.get_global_var('func_2918')
func_2924_call = mutated_mod.get_global_var('func_2924')
const_6246 = relay.const([[1.930849,-7.189327,-2.139457,-1.012746,-6.743058,7.156305,3.754159,-0.734156,2.487791,4.971062,7.002651,3.702101,2.916944,8.003885,0.888217,9.857738,8.159554,-0.654174,9.354825,-0.627489,-9.428636,7.162978,-4.914661,1.877945,6.971965,-4.734886,-5.473669,7.638838,-1.135687,-2.652902,-3.712305,-8.907609,7.931107,9.320903,2.491120,4.178579,2.866601,5.878761,-7.126689,-7.685129,6.311328,-2.631051,-7.901065,1.223125,1.971491,3.117094,1.858603,6.679574,-6.167340,3.185088,-4.579450,1.259800,8.243579,6.277744,-6.019509,-2.484963,-8.348583,1.604394,-4.818233,3.869970,-0.065018,1.324949,-1.758592,2.731284,0.251454,-8.936877,1.433680,-1.439126,5.179584,-6.408080,1.174289,0.960926,-2.116919,-0.333125,-1.265673,-8.924454,-3.819856,-1.723816,-5.069934,-1.461339,0.876188,0.671999,-1.184354,0.414567,5.736643,7.440986,-3.157143,-3.513104,-0.166129,-3.671148,-4.375943,9.815872,-0.337140,6.468807,6.858749,4.626259,-3.228271,9.837070,-7.803335,-2.733250,6.722448,-6.514832,3.850695,-8.912427,7.586417,-4.725146,2.160158,8.891613,7.537742,-2.135039,-0.337555,4.094858,-2.826243,6.958416,-2.820586,-1.053522,-2.311826,9.154743,0.114474,7.640754,-0.369810,-9.718318,7.744607,-7.506082,-2.812765,-6.672698,-4.760786,4.132050,-0.312558,8.724326,1.934486,-2.285377,-3.918442,8.362608,7.697160]], dtype = "float64")#candidate|6246|(1, 135)|const|float64
call_6245 = relay.TupleGetItem(func_2918_call(relay.reshape(call_6164.astype('bool'), [11, 12, 9]), relay.reshape(const_6165.astype('bool'), [11, 12, 9]), relay.reshape(const_6246.astype('float64'), [135,]), relay.reshape(call_6164.astype('float32'), [11, 12, 9]), ), 1)
call_6247 = relay.TupleGetItem(func_2924_call(relay.reshape(call_6164.astype('bool'), [11, 12, 9]), relay.reshape(const_6165.astype('bool'), [11, 12, 9]), relay.reshape(const_6246.astype('float64'), [135,]), relay.reshape(call_6164.astype('float32'), [11, 12, 9]), ), 1)
output = relay.Tuple([const_6165,bop_6167,call_6172,var_6173,call_6181,call_6184,const_6185,var_6186,uop_6188,call_6237,bop_6241,call_6245,const_6246,])
output2 = relay.Tuple([const_6165,bop_6170,call_6174,var_6173,call_6182,call_6187,const_6185,var_6186,uop_6188,call_6238,bop_6241,call_6247,const_6246,])
func_6252 = relay.Function([var_6154,var_6173,var_6186,], output)
mod['func_6252'] = func_6252
mod = relay.transform.InferType()(mod)
var_6253 = relay.var("var_6253", dtype = "float32", shape = (3, 14, 1))#candidate|6253|(3, 14, 1)|var|float32
var_6254 = relay.var("var_6254", dtype = "float64", shape = (504,))#candidate|6254|(504,)|var|float64
var_6255 = relay.var("var_6255", dtype = "float32", shape = ())#candidate|6255|()|var|float32
output = func_6252(var_6253,var_6254,var_6255,)
func_6256 = relay.Function([var_6253,var_6254,var_6255,], output)
mutated_mod['func_6256'] = func_6256
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6283 = relay.var("var_6283", dtype = "float32", shape = (14, 13, 1))#candidate|6283|(14, 13, 1)|var|float32
uop_6284 = relay.acos(var_6283.astype('float32')) # shape=(14, 13, 1)
func_2286_call = mod.get_global_var('func_2286')
func_2290_call = mutated_mod.get_global_var('func_2290')
var_6297 = relay.var("var_6297", dtype = "float64", shape = ())#candidate|6297|()|var|float64
const_6298 = relay.const([[3.396815,-7.749946],[7.418537,3.191072],[1.344485,4.751841],[-7.668936,6.921789],[8.619393,-4.928090],[-3.740879,8.415505],[-3.182279,9.626320],[4.047475,-4.870287],[-7.717881,-5.690003],[-4.033152,-5.813488],[-9.130640,-3.843875],[-8.906323,-0.714186],[4.522273,5.566947],[-6.144094,-1.336671],[-8.999578,1.409159],[1.941517,-2.397600],[-5.493073,5.047800],[-4.870508,-9.887588],[8.567066,-3.955341],[4.681399,4.261815],[6.806554,-4.667314],[-4.701606,-8.164088],[3.908623,-8.392912],[5.034566,-5.742629],[-6.230246,-6.896724],[-4.564539,0.340977],[3.457351,4.190642],[-7.587107,4.637625],[6.482124,1.785590],[-1.568029,-6.248861],[3.019973,-9.384173],[-5.593590,-3.640689],[3.431031,5.358088],[-5.266237,2.789482],[-8.597444,-8.012944],[-1.551743,-1.497726],[0.346569,2.564760],[1.720539,9.287576],[-5.740181,0.786327],[3.878266,2.655024],[-6.842601,-2.594228],[-4.715384,9.077293],[-5.092353,8.004242],[8.410227,-1.808810],[-5.112970,9.256017],[-9.591437,-8.401422],[-1.386820,2.631016],[-7.549306,-7.842505]], dtype = "float64")#candidate|6298|(48, 2)|const|float64
call_6296 = relay.TupleGetItem(func_2286_call(relay.reshape(var_6297.astype('float64'), []), relay.reshape(const_6298.astype('float64'), [1, 16, 6]), ), 0)
call_6299 = relay.TupleGetItem(func_2290_call(relay.reshape(var_6297.astype('float64'), []), relay.reshape(const_6298.astype('float64'), [1, 16, 6]), ), 0)
func_3740_call = mod.get_global_var('func_3740')
func_3742_call = mutated_mod.get_global_var('func_3742')
call_6339 = func_3740_call(relay.reshape(var_6297.astype('float32'), []))
call_6340 = func_3740_call(relay.reshape(var_6297.astype('float32'), []))
uop_6351 = relay.log2(uop_6284.astype('float32')) # shape=(14, 13, 1)
output = relay.Tuple([call_6296,var_6297,const_6298,call_6339,uop_6351,])
output2 = relay.Tuple([call_6299,var_6297,const_6298,call_6340,uop_6351,])
func_6354 = relay.Function([var_6283,var_6297,], output)
mod['func_6354'] = func_6354
mod = relay.transform.InferType()(mod)
mutated_mod['func_6354'] = func_6354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6354_call = mutated_mod.get_global_var('func_6354')
var_6356 = relay.var("var_6356", dtype = "float32", shape = (14, 13, 1))#candidate|6356|(14, 13, 1)|var|float32
var_6357 = relay.var("var_6357", dtype = "float64", shape = ())#candidate|6357|()|var|float64
call_6355 = func_6354_call(var_6356,var_6357,)
output = call_6355
func_6358 = relay.Function([var_6356,var_6357,], output)
mutated_mod['func_6358'] = func_6358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_6363 = relay.TupleGetItem(func_5961_call(), 1)
call_6364 = relay.TupleGetItem(func_5962_call(), 1)
output = relay.Tuple([call_6363,])
output2 = relay.Tuple([call_6364,])
func_6374 = relay.Function([], output)
mod['func_6374'] = func_6374
mod = relay.transform.InferType()(mod)
mutated_mod['func_6374'] = func_6374
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mutated_mod.get_global_var('func_6374')
call_6375 = func_6374_call()
output = call_6375
func_6376 = relay.Function([], output)
mutated_mod['func_6376'] = func_6376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6069_call = mod.get_global_var('func_6069')
func_6070_call = mutated_mod.get_global_var('func_6070')
call_6387 = relay.TupleGetItem(func_6069_call(), 1)
call_6388 = relay.TupleGetItem(func_6070_call(), 1)
output = relay.Tuple([call_6387,])
output2 = relay.Tuple([call_6388,])
func_6405 = relay.Function([], output)
mod['func_6405'] = func_6405
mod = relay.transform.InferType()(mod)
mutated_mod['func_6405'] = func_6405
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6405_call = mutated_mod.get_global_var('func_6405')
call_6406 = func_6405_call()
output = call_6406
func_6407 = relay.Function([], output)
mutated_mod['func_6407'] = func_6407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_6430 = func_6080_call()
call_6431 = func_6080_call()
output = call_6430
output2 = call_6431
func_6434 = relay.Function([], output)
mod['func_6434'] = func_6434
mod = relay.transform.InferType()(mod)
output = func_6434()
func_6435 = relay.Function([], output)
mutated_mod['func_6435'] = func_6435
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6586 = relay.var("var_6586", dtype = "uint64", shape = (15, 12, 12))#candidate|6586|(15, 12, 12)|var|uint64
var_6587 = relay.var("var_6587", dtype = "uint64", shape = (15, 12, 12))#candidate|6587|(15, 12, 12)|var|uint64
bop_6588 = relay.less(var_6586.astype('bool'), relay.reshape(var_6587.astype('bool'), relay.shape_of(var_6586))) # shape=(15, 12, 12)
func_6354_call = mod.get_global_var('func_6354')
func_6358_call = mutated_mod.get_global_var('func_6358')
var_6601 = relay.var("var_6601", dtype = "float32", shape = (182,))#candidate|6601|(182,)|var|float32
const_6602 = relay.const(0.280580, dtype = "float64")#candidate|6602|()|const|float64
call_6600 = relay.TupleGetItem(func_6354_call(relay.reshape(var_6601.astype('float32'), [14, 13, 1]), relay.reshape(const_6602.astype('float64'), []), ), 3)
call_6603 = relay.TupleGetItem(func_6358_call(relay.reshape(var_6601.astype('float32'), [14, 13, 1]), relay.reshape(const_6602.astype('float64'), []), ), 3)
uop_6604 = relay.sin(var_6586.astype('float32')) # shape=(15, 12, 12)
func_3267_call = mod.get_global_var('func_3267')
func_3269_call = mutated_mod.get_global_var('func_3269')
var_6621 = relay.var("var_6621", dtype = "bool", shape = (1, 1188))#candidate|6621|(1, 1188)|var|bool
call_6620 = relay.TupleGetItem(func_3267_call(relay.reshape(var_6621.astype('bool'), [1188,])), 2)
call_6622 = relay.TupleGetItem(func_3269_call(relay.reshape(var_6621.astype('bool'), [1188,])), 2)
output = relay.Tuple([bop_6588,call_6600,var_6601,const_6602,uop_6604,call_6620,var_6621,])
output2 = relay.Tuple([bop_6588,call_6603,var_6601,const_6602,uop_6604,call_6622,var_6621,])
func_6627 = relay.Function([var_6586,var_6587,var_6601,var_6621,], output)
mod['func_6627'] = func_6627
mod = relay.transform.InferType()(mod)
var_6628 = relay.var("var_6628", dtype = "uint64", shape = (15, 12, 12))#candidate|6628|(15, 12, 12)|var|uint64
var_6629 = relay.var("var_6629", dtype = "uint64", shape = (15, 12, 12))#candidate|6629|(15, 12, 12)|var|uint64
var_6630 = relay.var("var_6630", dtype = "float32", shape = (182,))#candidate|6630|(182,)|var|float32
var_6631 = relay.var("var_6631", dtype = "bool", shape = (1, 1188))#candidate|6631|(1, 1188)|var|bool
output = func_6627(var_6628,var_6629,var_6630,var_6631,)
func_6632 = relay.Function([var_6628,var_6629,var_6630,var_6631,], output)
mutated_mod['func_6632'] = func_6632
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_6653 = func_6002_call()
call_6654 = func_6002_call()
output = call_6653
output2 = call_6654
func_6658 = relay.Function([], output)
mod['func_6658'] = func_6658
mod = relay.transform.InferType()(mod)
output = func_6658()
func_6659 = relay.Function([], output)
mutated_mod['func_6659'] = func_6659
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_6681 = relay.TupleGetItem(func_5961_call(), 0)
call_6682 = relay.TupleGetItem(func_5962_call(), 0)
func_4627_call = mod.get_global_var('func_4627')
func_4632_call = mutated_mod.get_global_var('func_4632')
var_6694 = relay.var("var_6694", dtype = "int16", shape = (126,))#candidate|6694|(126,)|var|int16
var_6695 = relay.var("var_6695", dtype = "int64", shape = (2002,))#candidate|6695|(2002,)|var|int64
var_6696 = relay.var("var_6696", dtype = "float32", shape = (1950,))#candidate|6696|(1950,)|var|float32
call_6693 = relay.TupleGetItem(func_4627_call(relay.reshape(call_6681.astype('int16'), []), relay.reshape(var_6694.astype('int16'), [14, 9, 1]), relay.reshape(var_6695.astype('int64'), [2002,]), relay.reshape(var_6696.astype('float32'), [1950,]), ), 4)
call_6697 = relay.TupleGetItem(func_4632_call(relay.reshape(call_6681.astype('int16'), []), relay.reshape(var_6694.astype('int16'), [14, 9, 1]), relay.reshape(var_6695.astype('int64'), [2002,]), relay.reshape(var_6696.astype('float32'), [1950,]), ), 4)
output = relay.Tuple([call_6681,call_6693,var_6694,var_6695,var_6696,])
output2 = relay.Tuple([call_6682,call_6697,var_6694,var_6695,var_6696,])
func_6736 = relay.Function([var_6694,var_6695,var_6696,], output)
mod['func_6736'] = func_6736
mod = relay.transform.InferType()(mod)
mutated_mod['func_6736'] = func_6736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6736_call = mutated_mod.get_global_var('func_6736')
var_6738 = relay.var("var_6738", dtype = "int16", shape = (126,))#candidate|6738|(126,)|var|int16
var_6739 = relay.var("var_6739", dtype = "int64", shape = (2002,))#candidate|6739|(2002,)|var|int64
var_6740 = relay.var("var_6740", dtype = "float32", shape = (1950,))#candidate|6740|(1950,)|var|float32
call_6737 = func_6736_call(var_6738,var_6739,var_6740,)
output = call_6737
func_6741 = relay.Function([var_6738,var_6739,var_6740,], output)
mutated_mod['func_6741'] = func_6741
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_6761 = relay.TupleGetItem(func_5551_call(), 0)
call_6762 = relay.TupleGetItem(func_5553_call(), 0)
func_1194_call = mod.get_global_var('func_1194')
func_1199_call = mutated_mod.get_global_var('func_1199')
const_6770 = relay.const([-2,-10,-9,-5,-7,8,-7,-5,7,1,1,1,-10,4,5,-3,-8,-9,6,-8,9,10,-4,-4,-3,7,4,9,-3,5,10,-5,1,-7,-10,-3,-10,-8,7,7,7,-7,2,-7,9,-2,-10,-9,-3,-9,1,3,-6,-8,-2,-7,7,-10,-10,-3,-10,9,-2,-2,-5,9,4,9,-2,5,2,-3,-3,-9,1,-1,-6,3,-9,6,-6,9,-6,2,-7,-2,-6,-9,9,4,-9,2,-7,7,10,9,-8,-7,-9,2,3,-5,10,-2,2,-2,-2,8,1,-5,-9,-8,3,1,4,9,9,10,10,2,-5,4,-9,7,10,-1,-4,-5,-2,-2,2,-6,7,-2,-8,-8,-7,2,-7,-5,9,-5,3,-4,10,5,-7,-3,-7,-3,9,9,6,-3,-8,-9,6,-4,5,8,-3,-7,4,-9,5,7,3,-2,-7,1,7,4,3,-4,5,-6,-3,-1,3,9,1,-3,-3,-3,-2,-6,4,2,-8,-8,8,-1,6,-9,3,-8,5,-9,8,9,-8,-1,-6,10,1,7,1,-10,4,-8,9,-1,7,5,6,7,10,4,3,10,-1,3,6,1,-5,7,4,8,-2,7,8,9,2,-4,9,-6,2,4,-5,10,-5,1,8,1,4,-7,-1,-2,4,-5,1,-3,3,5,-6,5,3,-9,9,1,7,8,8,1,6,-5,9,4,-7,9,5,3,4,-8,-3,8,1,-9,6,9,8,-2,1,-1,6,-2,-6,6,-10,-4,-5,4,-10,5,5,-1,9,9,9,10,2,6,-8,9,-9,10,9,2,-7,7,-2,-4,-2,-10,-3,-8,-2,-2,-9,8,-7,-3,-4,-6,-1,-2,1,-1,9,6,4,8,8,-8,-4,-4,7,-7,-2,2,8,-6,10,-4,1,-2,5,2,-1,-2], dtype = "int16")#candidate|6770|(350,)|const|int16
const_6771 = relay.const([0.269607,9.551194,-2.068444,-0.651111,-7.711121,6.373221,2.921159,9.491241,1.092318,-8.489759,-1.442048,1.830554,-6.054042,6.953821,7.102028,9.727446,-7.506146,9.450984,8.644057,8.228283,-9.976135,6.929389,2.912482,4.605400,4.898275,7.736624,-5.765118,8.700187,-4.265989,-5.005065,-7.302251,-1.687512,-8.225494,1.190416,7.759749,-8.538404,4.749175,-4.171636,-1.203700,-4.113967,3.367183,0.417380,-9.408733,-1.363957,5.330021,-8.258532,-9.837390,-1.286234,-1.884510,-8.103305,-4.123234,1.411039,1.267967,-1.098920,0.138766,2.727510,-4.750426,8.865821,0.739841,9.181448,-1.702057,-9.242508,4.627002,-9.810835,-6.675477,6.909860,8.935822,9.281529,-3.163753,-6.959992,-6.916498,4.952997,1.324817,4.846560,-0.012243,3.646843,-2.255804,-2.771951,0.831284,8.895577,6.471008,-7.377238,4.722080,9.567510,-3.650778,1.737188,-2.713584,9.496708,2.283920,-5.401544,-5.585919,1.643894,-8.614470,-1.566762,-8.310705,2.966105,-8.012666,-1.445766,8.123373,-7.344236,2.412007,-0.254765,-4.922141,5.245037,-7.643824,5.533193,-6.085059,9.359309,-3.189904,-0.560762,2.000289,3.834715,8.027459,4.907181,2.824078,-5.611050,-6.793159,-5.899337,1.763712,-4.886444,-2.007725,-2.858785,-3.240955,9.812289,0.112096,2.311315,4.310947,-5.358392,-8.287133,-8.803754,2.664329,6.418750,1.581621,-6.726249,2.514374,1.714932,4.258460,-6.424092,3.088915,-7.412538,5.124076,-3.314161,-8.276050,-0.488981,-8.526946,9.829658,3.593364,5.092512,-2.779683,5.988522,1.079796,8.882704,-7.760421,-0.608547,9.122741,-2.785519,7.624399,-3.527095,-3.719954,-0.428702,5.829668,-9.918755,-6.191839,8.880832,-5.729510,6.153915,3.485516,-9.388642,-6.023050,-3.027007,1.169890,3.222711,2.849645,8.122745,-5.000775,-4.679702,6.140549,-0.425499,4.258003,-1.573593,5.062896,2.554705,8.713333,-8.809521,-6.448126,9.769364,-0.859051,-1.667147,-8.132985,6.514992,-5.799800,-4.791010,-1.900118,5.297101,4.380472,5.841948,4.691989,2.665607,-6.072473,6.710945,-1.390011,7.036259,6.725675,-6.748860,0.113824,-9.200496,-3.426859,9.288221,0.095070,-4.464464,-3.795848,5.887080,-6.990024,-1.204239,1.824970,4.064513,4.025571,-8.804074,4.546408,-1.330368,-7.234248,-6.459213,-4.157907,9.231970,-8.014693,-3.945894,-7.862806,9.085066,-5.537929,2.671332,1.412120,-0.272143,1.674342,8.777437,2.790948,9.569938,-4.230188,-1.949759,0.173911,-4.893503,5.138856,6.359720,7.565348,-3.918667,-6.837393,1.736919,0.507061,-0.707290,-3.735112,4.438198,-5.497760,9.409522,-5.173138,9.469815,0.265255,4.669739,-7.752131,-9.298154,9.648554,9.608364,8.167666,5.716052,-3.114118,2.768497,5.145029,9.654313,-4.011863,-9.544359,-9.397420,-9.664769,-1.177044,4.361819,-2.108548,-3.306149,-0.009916,-3.016613,-2.654373,-4.590268,9.847973,1.693187,-2.998594,-3.123437,6.858670,8.963131,-0.599444,0.331742,-7.327365,1.771564,0.792244,-6.914494,-8.380038,0.345195,7.798392,7.438595,5.509264,0.506254,4.353613,-5.336472,7.241648,5.267190,-8.943372,-9.857228,3.757660,6.633184,6.500971,-4.307754,-1.653245,-0.980302,-5.583907,9.694273,-5.984845,3.979836,-5.557852,-1.822681,-0.140401,-3.644051,-9.479939,0.789385,-8.498756,-1.376344,-6.787480,4.588475,-0.816302,-1.039891,-0.145959,3.989018,5.150795,-8.465979,-6.888864,4.099072,-9.767154,7.077208,-5.487457,-9.303488,-2.201109,-6.265660,-1.760384,2.451452,6.037790,6.056470,2.575728,-2.417245,7.958264,3.702402,8.093712,-7.724549,-3.590579,-7.062726,-3.305895,6.292334,-0.360450,-1.178695,-1.353001,4.235014,8.224685,4.963829,3.432446,5.550876,-7.965998,2.656563,1.497581,-1.817863,3.005680,-3.092557,5.045512,-6.448451,3.770767,-6.051643,8.563531,4.906843,-3.696430,5.667641,-9.852998,0.780589,4.002343,-8.101390,-0.634182,-2.307405,-4.229396,-5.819308,7.308240,2.262642,8.670639,-9.487612,4.090986,8.998519,-1.051921,-8.759273,-9.864863,6.314104,-6.696283,-5.961840,-6.800448,-9.220811,-4.179082,3.800837,-2.422121,-2.719595,-2.159748,-7.982334,2.511575,-4.146270,-6.400523,-2.616208,-1.679897,1.110349,-8.909818,2.104005,-2.688500,8.646789,-9.478737,-3.532216,4.262416,-3.360272,0.722314,1.271623,3.959701,-4.641617,-1.954137,-2.233654,1.451531,5.603860,9.807043,-3.919150,1.752297,-6.264703,-7.930803,-0.220002,-9.433492,-8.630239,5.119012,-4.082341,8.095550,-0.353739,0.718334,-7.774381,-5.179338,-1.028412,-4.926517,-8.037999,-0.511668,-7.212385,7.704283,-2.487564,8.402020,-1.823548,8.054537,9.021518,7.276411,-3.241944,-3.755342,9.050704,0.949374,1.507790,5.040294,0.688156,-7.915108,-0.462675,-4.919673,9.453699,7.301971,-4.751389,-0.444733,5.967602,7.416731,9.899968,-5.144902,7.788285,-1.352783,-4.542567,-7.116392,-0.349816,3.101346,-8.717295,5.247524,6.571380,1.198664,1.512652,-5.118679,-1.712562,6.773359,1.893738,-5.226530,6.892792,5.867552,-0.204169,6.992215,6.919317,-3.326470,-7.698606,0.978696,-3.780558,4.291439,6.790510,2.929937,8.199270,0.571480,-5.338360,9.108579,-5.930666,8.687080,-0.524379,2.087858,8.514930,-6.821501,-3.710042,-5.641864,-2.265711,-8.159703,9.587779,0.464361,-5.137406,0.412901,9.504239,-2.356475,-4.643012,-4.645474,-4.918760,-7.496901,9.220581,5.721495,-6.765400,5.988006,2.344703,-0.381514,5.814542,-3.214878,-3.876460,-2.456937,-7.802968,-3.999924,8.121851,-7.776553,-5.822722,6.603552,3.896144,2.855710,-2.413380,-0.903402,8.729782,-8.245369,0.223067,-2.566287,1.539252,1.533995,-3.166032,-1.929841,-2.296296,3.941135,0.341610,1.124016,-7.467511,-6.473676,7.365075,-8.926853,-8.501066,1.346496,3.140650,8.701117,-1.131013,3.724616,-9.596937,-9.364059,-3.319670,-6.735815,4.428148,-0.857924,-2.544956,-4.706786,4.940238,-5.716450,-2.237748,8.807231,-0.809237,-9.100776,4.269412,8.362926,6.271695,1.630221,4.789539,9.568774,5.881891,-3.324665,-8.790840,5.977272,-2.377200,5.186801,7.220896,-6.603712,-4.150429,-8.657651,-5.614206,1.242667,-4.163426,8.915313,-1.108938,-8.145937,-8.263689,-8.236090,7.563720,6.160914,8.950273,-3.326244,9.441563,-8.083779,6.931991,-2.035699,-0.659424,3.139474,-1.539597,4.411416,1.792906,-3.562864,-8.431594,5.570246,-3.020391,5.274934,8.002813,-1.774575,5.682527,-3.894621,7.316853,-4.927777,9.859124,-6.460954,8.679714,-0.606690,4.078862,-3.592920,4.074763,-5.964522,-5.175222,-3.385140,0.295148,2.940758,9.668291,-0.098912,-5.552715,2.269569,-2.222074,9.565055,4.995130,5.426518,-3.540181,-5.082838,6.932916,3.061251,2.355847,5.597220,-0.667546,3.047589,9.753243,-3.980377,-9.930599,8.901830,-4.015190,-8.865259,-3.099998,-2.851129,-4.401974,1.161629,5.891516,3.746951,-9.789837,-1.989692,8.314541,-4.162678,5.282633,-9.898126,-7.302929,-9.361671,-9.009970,-2.336642,-1.483471,3.858294,-7.017600,-6.781583,7.386966,-7.553542,6.201615,-4.519999,-5.081758,0.329592,-6.345799,9.538453,7.275426,0.208547,3.442022,-9.148887,-1.909831,-1.942725,-6.725839,5.604685,-0.829369,9.636098,-8.459604,7.490069,3.617827,-3.451426,-6.311010,-3.584890,5.714257,-0.605804,-7.423590,2.619051,-1.700895,0.488210,-9.356653,4.225639,-2.922832,-1.170681,-0.364867,0.236580,-4.303028,6.794135,0.715400,-0.143553,8.678277,7.479260,-9.577852,4.951976,-6.144754,3.354641,0.939346,-8.581769,-7.255808,-4.695148,-8.471624,-2.352123,0.383757,3.211291,2.886615,0.714536,-7.160874,-7.696286,8.075245,-5.419873,-3.564582,3.662028,-4.343020,0.324097,-6.555692,8.534757,3.329461,-4.504939,-0.829122,-2.318981,6.972274,-0.512004,-4.562582,-6.433618,-0.933024,-9.975313,0.466046,-7.289269,4.858084,-9.776656,0.274005,-2.166521,1.297943,0.306597,-9.329225,1.309212,-7.345189,-7.460662,3.669642,-2.773857,0.788416,-6.598056,-1.631211,-1.622857,6.482308,-7.259258,-2.825202,4.777218,9.502954,5.950378,-2.620169,3.372731,1.790409,-5.358867,0.873378,-4.719111,9.673813,8.460834,-6.879744,4.233699,-0.137020,-7.982284,-1.407131,-9.511678,0.735381,0.883373,-1.998141,-3.674687,-5.546757,-3.026538,6.973116,-1.621870,-6.828851,4.028674,2.790690,-6.185153,-1.839418,7.822902,-8.784298,-3.238658,3.433431,-5.964642,-5.831346,1.789120,5.242403,-8.762013,9.244127,8.668433,-0.580877,-9.434911,0.355951,3.777722,4.877288,-6.817310,-8.718389,2.942588,-0.315937,-5.953086,-6.615708,-6.568731,1.734461,6.690922,3.299157,-3.413803,4.298855,-0.668218,0.289785,-7.515685,-1.805441,3.485735,4.186230,-7.500626,-4.867630,-9.515014,1.695208,-9.553750,-9.547699,9.770342,-1.791281,6.653354,-2.519437,-0.385160,-8.369959,-1.496207,5.327445,7.727255,4.272276,-8.795363,-5.357792,-4.142621,1.053800,3.089138,-2.880264,-4.470976,-9.389253,-9.093973,0.069249,6.267531,8.986476,-9.515163,4.695471,2.416055,6.254259,-1.811557,6.510239,0.590852,9.765666,-4.148414,4.221720,-2.093818,-1.434650,-2.692556,5.779151,1.779689,-3.265352,6.658416,-3.619314,-4.812416,-0.821881,3.101349,6.511898,4.624981,1.345891,3.478871,-5.583467,3.765141,-0.856406,-6.855708,5.340000,7.652037,1.519181,9.765554,5.472788,8.046687,-1.641409,4.573424,-0.456999,-7.946990,-4.530329,-0.405578,8.206841,-4.740852,-2.447166,2.413649,-5.311755,9.044736,3.093715,6.502660,-3.459542,-8.063830,-9.437548,-6.532458,-7.774440,-5.123850,-1.675173,9.995594,-2.358698,-4.853957,-4.687555,-4.926406,-6.217059,-2.264081,-3.705011,-9.110373,1.476286,6.078571,3.717876,-3.941937,-3.847238,-3.444302,7.439218,-2.497293,6.042281,-8.528285,-7.878245,0.375060,-1.295628,-7.879105,6.612567,2.961749,-5.935984,-2.382209,2.692094,6.307534,-5.901969,-1.179253,-1.021416,3.922599,1.021603,0.135389,0.295305,-8.391587,7.247328,-2.940370,-0.949431,7.755304,7.256712,-1.377549,-3.963460,-7.523623,3.923961,-1.192961,-8.551162,-4.131797,-6.336527,6.043393,-6.603638,3.236419,5.515774,-4.217010,-4.622606,-2.814514,-6.162015,-4.257488,-2.080365,0.752802,4.318135,6.204181,9.267993,-2.646322,-1.876964,2.219442,4.023045,-0.559901,0.682687,-7.589492,-9.278492,3.129694,2.885373,5.308768,-3.737061,-3.688745,-3.002223,2.357033,9.043183,1.095625,-1.942646,-8.015931,-2.395027,-2.954286,0.510493,7.595897,5.205254,-6.772760,-2.614273,-1.959246,-0.500521,-6.039388,6.704425,7.021618,1.625228,-4.122426,2.620359,-7.531881,0.316968,3.287517,7.858774,-9.974412,5.339754,-2.053167,-5.720795,6.142157,7.731184,5.533596,0.617504,3.423986,-6.003035,-0.010088,-0.748269,2.722217,8.656758,-0.777242,6.072699,3.760985,-3.262640,-1.980308,5.249470,2.496225,3.515860,2.652968,8.457981,-4.633474,-0.476842,-1.440047,4.643997,-0.265711,-5.998789,8.210952,6.412703,2.963663,-7.415479,-5.120620,6.215869,-9.848972,-2.894589,1.767187,-4.935732,5.645432,6.698015,4.094861,4.373141,3.367909,6.877342,9.513887,-0.158582,-7.941254,-0.911891,-8.987852,-7.571429,5.676052,-6.255273,8.652027,-4.600762,1.843380,-2.353582,-5.676090,-3.027876,6.002438,-1.339174,-9.064652,1.116431,-6.021734,1.136056,6.679520,3.895403,-1.127550,-4.774866,8.570863,5.291269,-9.292365,4.444357,8.792730,-9.816356,4.589049,-0.735617,1.679274,-2.496650,5.347759,-1.319024,-5.962491,7.630348,6.016918,-0.253534,-3.010571,7.802823,3.787131,6.199791,-6.902414,4.394691,7.010405,2.420530,-3.176970,-1.765341,2.561950,-9.503682,-2.026071,3.828110,2.195782,-8.418117,4.325210,-0.286686,9.855828,1.829775,-3.308811,9.052688,-2.352707,-6.006879,3.536116,2.209037,-0.793687,-2.812662,6.399522,-9.415870,4.786748,8.236211,8.282202,3.837616,7.746429,-0.226476,5.508169,7.486983,1.133543,-8.082470,-2.771568,6.390314,-8.787504,-9.140723,3.381344,-6.917800,4.232220,5.956591,-1.954815,1.583372,-6.339005,7.905282,-9.180579,8.372842,-0.078695,-6.309397,3.152332,8.745852,6.886584,-5.055997,1.568470,6.855206,-5.022196,8.962849,4.747227,-9.398013,-3.079247,8.913996,0.535367,-9.806242,8.342224,-1.198873,4.461188,-1.310919,4.845507,7.358280,8.554207,-3.346157,-1.087715,-8.518608,-4.135118,7.400797,-4.938665,7.664967,6.406469,-1.836670,-8.407814,-9.041675,-5.877172,-1.129433,0.219495,-1.100974,-3.764884,-6.077114,-1.106988,-3.811949,1.239030,-5.427184,1.790333,7.151525,7.985288,4.439264,2.306393,0.538328,-6.044944,2.642566,-0.240753,-4.130664,-8.694513,3.644493,-6.834828,-9.710809,0.561779,5.282652,-5.242696,6.647218,-8.406033,-0.037456,-4.713693,-1.191263,1.984948,-1.713757,5.832380,8.672439,3.928719,3.102948,-0.182401,-4.448052,-0.409109,-0.951494,-0.398200,-6.752907,-5.877096,-3.724673,4.269755,2.540155,1.749879,-8.497338,5.256670,-4.027535,-2.466103,-7.472484,4.541384,-5.019466,-8.897684,3.875836,-7.868459,-6.630013,-4.195301,-0.248848,0.086217,-7.340476,0.719557,5.068434,-7.103756,-4.542026,9.312659,-0.176344,7.783518,-2.426179,7.873158,-6.581000,-9.766413,7.250401,-2.551380,-0.792770,2.354575,-9.135217,9.508604,3.952436,2.798217,-0.159854,-9.652344,-5.725921,2.239331,-6.741670,-4.721940,-5.600248,4.921264,8.980326,5.470677,0.243824,-1.072367,-3.117187,7.063711,-9.098028,6.000677,-8.508890,1.221503,4.896044,3.512621,1.594037,-0.199870,-5.194076,9.911859,2.058778,8.944428,-9.873553,-2.956997,7.909248,-8.514812,3.075061,-5.708038,-0.801076,-4.138554,-1.456322,8.158249,1.867931,-5.224219,5.124313,4.211694,-6.858522,5.100475,-5.687424,4.272049,4.695610,2.292288,8.159325,-4.076811,4.983383,6.194345,3.147795,-0.696185,9.120515,-2.559385,-3.530320,6.607854,7.950845,8.015683,3.453746,3.163302,2.943584,5.200972,4.396828,-5.022172,-2.566683,-7.892364,-2.240187,-7.483068,5.406764,-2.847162,-1.734265,8.682060,-9.640837,1.623371,6.024140,-4.432608,-5.335111,-0.219293,-2.104822,-6.667483,-6.058438,-1.063465,2.078672,-0.385681,3.656897,7.364984,6.332772,3.425125,2.240273,0.619428,-8.639558,5.020689,5.428722,-3.618444,-2.328462,-3.203028,4.473464,4.139054,8.804010,-3.254087,-7.809411,-2.262012,-9.121257,6.485653,-2.431204,-3.930818,3.059923,8.564261,4.415179,-6.236115,9.862214,7.823928,9.581323,3.836454,-2.618757,5.483806,8.002664,-9.557515,-3.508623,-9.087727,-1.075910,6.929568,-6.277144,-1.382216,-9.006934,-6.851200,8.595016,-5.207076,-6.053227,9.059542,9.305323,-7.555592,-3.542842,-9.658969,-2.517852,-1.615788,-5.395876,-1.116401,-5.973608,-3.311324,5.127062,-3.174443,-2.109803,2.940587,9.966637,-5.071773,-1.602161,5.320170,9.141506,1.815531,-8.208504,4.617120,7.086505,-1.050149,-9.272790,-5.900154,0.300719,6.850260,9.021376,-0.783379,8.136147,-5.996179,1.942304,2.591098,3.423259,6.092003,-8.968704,-9.410632,-8.920524,7.257750,-7.368229,4.547086,9.779143,5.854881,0.708264,3.661662,-5.756801,-4.920238,1.305350,5.595182,-0.018246,2.872704,1.090949,-6.013814,-9.451896,-2.993857,6.256444,-7.682767,-4.696247,-3.602386,0.976755,5.553286,0.111268,-1.652300,6.750074,3.712971,-3.233583,-3.816059,1.331351,4.137684,-1.928880,-2.732056,1.213638,-2.749653,-8.592530,-2.049737,-7.434234,-8.249631,5.736528,9.463029,-4.432408,8.466960,8.108416,-4.379104,-2.490778,-0.473109,7.036410,7.190328,9.727312,6.187544,-8.435260,0.898286,8.936448,-7.269100,-8.553884,2.802652,-2.722340,8.329563,-2.308030,-7.275197,-7.313072,9.370723,5.900018,-3.845171,5.067138,5.501776,3.091601,-0.424112,-5.216014,-9.007296,-9.114195,0.187793,-4.802801,-1.302624,-7.409095,1.754336,5.360409,-2.268473,9.106314,2.142556,-3.324460,-7.935394,-2.632141,-1.752785,9.306392,8.162089,-4.437089,1.838957,-9.700490,8.306911,-9.195707,1.331179,-9.003549,6.694881,-3.116811,-9.380249,5.982336,1.662384,8.528845,-4.357734,-7.828864,3.274274,-4.592156,2.218370,-0.030814,7.116129,6.706601,9.344335,-0.691498,-2.511738,2.428383,-8.131181,8.298362,-4.709147,8.223153,-3.173076,6.722117,8.032838,-2.717593,-0.033763,6.152979,4.390656,-0.032499,-8.207256,9.606346,0.389744,2.404123,2.229039,3.020904,-5.559405,-3.725156,-9.939707,-8.739363,2.125657,-6.461490,4.109797,9.617651,1.435708,1.189713,5.121585,-2.158473,-5.930932,-6.552755,-3.218648,1.759125,-3.437475,4.605811,4.478365,-1.173631,-6.394604,-3.115390,4.818288,0.878724,3.649556,-5.381762,8.489013,-4.079457,5.458838,-1.044711,-4.085601,-8.054046,2.534278,-7.218837,6.737917,-3.750452,1.523854,7.245118,-6.194722,4.801595,-8.442193,-2.397787,-0.449674,2.329038,1.113607,-4.410390,0.511265,1.920993,-9.466650,-3.691811,-7.642905,-8.064526,3.738524,-0.516335,-8.619008,-3.893322,-7.124721,-1.015073,0.925447,-8.818186,3.485744,-0.583871,8.801692,-0.036948,2.994897,3.770495,5.541722,-0.809332,3.916416,-6.247331,-9.211109,-9.843304,-4.185612,-8.971432,-8.763330,-9.440452,8.102326,8.969922,-1.466692,-1.595634,-5.386117,-5.148453,0.762388,-5.044585,4.323638,-7.461302,7.517378,-0.006435,-0.566127,5.584769,1.752958,-9.703516,4.008104,2.604029,1.266396,2.077244,8.232640,0.449792,-0.063914,-4.985442,7.510664,-2.833884,4.003644,-8.273514,5.138402,5.613044,6.218573,5.367404,7.702437,2.266594,-8.040109,-9.044570,-2.513569,8.443580,7.945812,-8.179264,-3.297338,-0.892404,-9.432928,0.388478,-8.386881,-6.722677,4.387949,-9.959856,6.357945,6.791736,1.807204,1.941136,-7.458949,-1.924888,-3.396314,-3.041816,0.560253,9.524334,9.224112,1.947986,7.171188,3.298020,5.970786,1.761939,4.539963,0.163563,-1.804432,-5.225889,5.559229,-6.576961,-8.932889,-2.440485,3.393161,3.853832,7.988266,1.011312,-2.937501,5.498218,-1.109844,-8.265598,5.909842,-7.509920,8.516108,-4.453950,-9.737631,-0.086932,3.254282,-2.296179,-2.262232,8.050358,9.816137,-3.261414,-0.792856,8.637843,-4.434952,-2.005775,5.319298,8.272071,-1.120176,3.502297,7.762942,9.144568,2.544022,1.457013,3.883980,6.849863,5.060363,-5.618133,6.039326,6.473177,-3.332086,4.062576,-9.471969,-1.671008,7.444510,3.070600,9.418934,7.928550,1.387222,5.575811,-6.141241,4.534608,-3.493591,3.446370,5.822821,-4.977201,-0.715695,-1.880982,-7.123129,2.202473,-8.508528,-0.811182,3.638197,-3.355115,9.105897,6.448050,-5.510758,6.089587,5.233810,-3.716158,4.461674,-6.811485,0.047893,8.957140,3.243565,7.512131,2.714211,4.730817,8.944154,0.761400,0.337039,-2.029324,1.144797,1.490390,-2.848690,-4.821981,-1.565837,-7.329310,6.737181,1.001735,-4.215032,-5.534008,1.409552,3.973130,-1.228066,8.373061,0.406936,5.899131,5.107572,7.253324,0.409687,-1.336435,-7.415634,1.081010,-9.831719,-7.048101,0.742922,-1.304416,3.353548,6.523740,1.476105,3.996455,1.668960,6.141537,3.724065,-8.678559,-7.893162,-6.082359,1.124355,-3.670803,7.504194,0.202307,-0.768719,7.713466,6.742913,4.331940,9.824314,3.028904,1.406276,1.834473,-2.501699,6.569320,-0.550696,2.714720,7.984862,3.453764,4.846014,6.821527,8.904366,5.029421,-0.981888,8.176750,3.030755,-5.459442,5.264172,-6.964975,5.582410,5.592670,1.711925,-7.995056,-4.780830,6.704636,-3.966480,6.112118,9.473342,-2.935456,0.507817,7.099837,-8.226757,-7.722659,-3.365608,9.119609,-2.099282,5.954032,-9.233401,4.371418,-6.906370,-4.716101,8.137148,-1.621771,-6.982414,-0.196972,-8.457495,-2.637215,4.365655,-0.331143,1.419686,-4.980927,-6.928467,-5.897292,8.464451,-1.408201,-7.464362,-4.741087,-3.554947,6.193773,0.655904,2.215367,5.402616,-3.972795,-6.961574,-6.923062,8.675758,8.264040,4.211025,-0.252794,4.056493,-9.779799,2.442061,-1.153172,2.872685,-1.399856,0.738852,-6.847257,0.134324,-6.728627,9.094744,-0.517644,2.279788,9.567106,6.317126,8.659564,-8.644942,-1.251865,-8.501906,3.668586,-9.550177,-7.194627,5.136904,8.966490,6.735708,-1.929608,-9.339974,5.146724], dtype = "float32")#candidate|6771|(1950,)|const|float32
const_6772 = relay.const([[5,-10,3,-7],[-4,3,10,-3],[-4,-1,-4,-7],[-8,5,6,2],[-3,-8,-8,7],[7,-3,7,-3],[5,-6,-6,-3],[1,8,9,-1],[-2,-1,6,-6],[8,-8,-3,6],[5,-6,-4,-5],[-7,4,-5,-10],[-4,1,9,-2],[5,1,-3,6],[10,8,1,3],[-10,-3,2,4],[-4,-7,-2,-7],[-1,5,-9,1],[-4,-5,4,-2],[5,-9,-1,-2],[-10,6,-7,9],[3,-1,4,2],[-1,-3,-5,9],[-4,-6,3,-8],[8,-5,8,3],[7,-6,6,-10],[-4,-1,-10,10],[1,7,-5,-9],[10,8,-9,1],[-2,8,4,-4],[1,-9,8,-6],[-7,-4,-9,-5],[-10,-9,1,6],[9,-3,2,-3],[-7,-7,-4,-3],[-4,-3,-4,4],[-1,-5,-4,-8],[-7,-8,-2,-3],[3,-1,2,8],[-5,-1,-1,-2],[-9,-5,-8,-10],[5,3,6,6],[7,-8,3,5],[1,6,-2,-4],[-5,-7,-3,-7],[2,-8,9,10],[1,-5,6,-4],[-7,-6,-9,1],[1,-7,3,-5],[-6,-5,-6,1],[5,-4,9,5],[-6,-6,-5,-9],[4,-1,9,-6],[-6,10,-6,-1],[-10,-1,1,-4],[10,4,-6,10],[-10,-1,-6,6],[7,-5,-10,5],[9,8,3,9],[-1,-7,-9,-8],[-1,-7,-7,-8],[-2,9,-9,-1],[-10,10,-8,-7],[3,7,4,-10],[6,9,-2,-6],[-1,-6,9,9],[-4,-3,10,-3],[-3,-7,-6,1],[4,-3,-8,-3],[-6,-9,4,-6],[-9,-3,8,-1],[6,9,3,-4],[-9,-7,10,6],[-9,-2,-3,3],[9,10,-4,2],[9,2,1,-2],[2,7,-9,7],[8,-3,10,-4],[4,6,-6,-5],[-10,-8,-2,-3],[-8,-6,5,-7],[3,-7,-5,-1],[4,-4,8,5],[8,-10,2,5],[-8,-10,-4,-8],[-4,9,-6,6],[-10,2,2,5],[-1,-10,-10,6],[6,1,-1,-9],[5,-4,-10,3],[-1,-9,2,-4],[-1,-7,-1,-1],[9,9,2,-6],[-7,8,-1,7],[-5,6,2,-2],[6,4,-4,-8],[-6,4,-6,4],[9,9,10,1],[-4,-3,-8,-9],[-6,-4,7,-3],[9,-2,-8,-8],[-6,-6,-7,-4],[-3,-7,-3,5],[-1,-10,-3,3],[2,8,-2,6],[3,6,8,-1],[6,4,-6,9],[-10,-8,-1,4],[6,3,8,6],[9,9,2,10],[10,7,3,-3],[-4,5,-2,1],[2,-6,1,-2],[-3,-10,3,-5],[2,-8,8,7],[4,9,2,6],[4,-2,5,7],[-5,5,5,-10],[1,-3,3,3],[1,-5,-4,6],[-6,-2,2,-1],[6,-6,7,9],[8,-9,1,8],[7,-4,-8,-10],[-9,-5,2,2],[5,9,8,10],[-10,-6,-4,-3],[-10,2,7,2],[4,9,-5,-4],[-10,2,2,3],[4,5,4,7],[-6,3,2,-3],[3,4,4,-2],[-2,-4,8,-10],[-7,-10,-4,-4],[-7,8,-2,-8],[3,-7,-10,3],[3,10,-5,6],[5,2,5,10],[2,-3,-6,-1],[3,-8,-7,8],[-6,-3,-9,2],[5,1,-9,3],[-8,-8,-9,5],[-7,8,-4,5],[-5,3,-7,5],[-9,3,-7,1],[-5,4,-8,-8],[4,2,-2,-9],[5,-8,9,6],[10,-7,-6,-4],[7,-6,7,-3],[-2,8,-2,-1],[-1,9,2,9],[5,-1,-4,3],[-5,10,7,-2],[8,2,-8,-7],[2,10,-9,6],[-3,-6,-3,2],[-10,-9,-8,5],[-4,-4,-10,3],[6,3,-10,-1],[9,-4,6,10],[10,4,-2,-2],[6,1,8,5],[7,9,-1,2],[8,2,-2,2],[4,8,3,-4],[-7,-4,-9,8],[8,-1,10,9],[-9,-3,-5,-3],[-9,7,-10,-4],[6,-3,-8,8],[8,7,5,7],[-8,5,3,4],[-8,7,-2,8],[-8,2,9,4],[-1,9,-8,10],[-5,1,2,2],[-8,9,-10,7],[-5,4,7,5],[-10,4,1,5],[-8,3,-4,1],[6,2,-6,-3],[-6,-8,6,10],[10,-5,-9,-4],[-7,-6,-4,4],[8,3,5,-6],[-7,-3,-10,1],[1,8,4,-7],[-10,5,10,3],[5,2,4,-10],[-4,3,10,-1],[-10,8,-4,-7],[8,8,9,-7],[-9,-6,-9,-5],[-9,-5,4,9],[9,-8,-2,7],[4,9,-7,2],[7,1,4,9],[6,-2,1,4],[1,-3,6,-3],[5,8,10,2],[-7,5,8,-3],[-7,-7,-8,-2],[-3,-2,-5,9],[-10,-6,6,10],[-10,3,7,4],[-4,-6,-2,-3],[-3,1,-1,2],[1,2,5,-1],[6,-4,-3,-9],[-1,-1,-5,-7],[-1,-8,1,4],[7,9,9,-6],[-5,10,-1,5],[5,-5,8,9],[-10,-4,9,5],[5,8,6,-10],[4,-9,8,7],[7,6,-3,7],[-3,4,-8,-8],[5,-8,9,9],[8,10,-9,-1],[-10,4,-1,-5],[-1,-6,10,-1],[-9,-5,10,2],[2,-6,-1,-1],[-4,-4,-5,1],[2,4,-1,-6],[-7,9,-4,5],[-4,-1,10,8],[7,10,3,-8],[9,6,9,10],[-2,1,-9,6],[-9,-8,8,-2],[-10,-7,-4,-5],[-6,-2,-2,9],[1,-3,-10,4],[7,6,-10,10],[-3,-10,-1,1],[-7,-2,-7,-4],[-5,-7,-8,-2],[-2,10,-1,1],[-7,-10,-5,8],[5,-10,3,9],[3,-2,-6,5],[7,2,-4,-9],[-2,-1,-1,1],[-9,8,-7,1],[-2,2,-9,8],[10,1,2,7],[2,-3,7,9],[-6,-9,4,4],[2,6,1,-7],[-5,-9,2,-3],[3,9,9,-7],[7,-8,5,8],[8,-9,9,1],[8,-3,5,-7],[1,10,4,-4],[3,-1,-6,6],[-3,4,-4,-10],[-5,3,10,-10],[-5,-10,10,-9],[10,3,-9,1],[-5,7,-1,2],[-1,-8,6,-1],[-10,10,-9,-3],[9,6,-5,1],[1,1,-5,8],[9,-7,3,8],[1,3,8,-6],[4,-4,-8,-8],[3,10,2,3],[5,-10,10,-4],[-7,8,5,-2],[-7,-7,-1,3],[-4,-3,-3,2],[8,8,10,-8],[1,10,-1,6],[-9,2,-7,6],[-10,-2,9,4],[-3,-7,6,-8],[3,-4,10,-2],[-10,1,-1,-1],[-9,-5,6,-6],[-2,4,8,7],[-1,6,1,-2],[-4,10,-1,-10],[5,-9,-7,-2],[5,8,-9,5],[-6,-3,10,-7],[8,4,10,2],[-9,6,5,4],[-5,5,7,-2],[-2,-9,-10,-9],[-4,2,6,9],[4,-1,7,-10],[8,-4,7,8],[-3,-4,-1,-3],[-7,-1,10,8],[9,-4,-7,-9],[-2,-9,-1,8],[2,-8,4,-2],[-8,-4,6,2],[-3,2,-3,-4],[3,1,8,1],[3,5,-3,-10],[1,-1,8,-2],[2,-1,-6,7],[6,-5,-9,-8],[-6,-2,1,1],[-6,9,-6,4],[-5,-10,-10,10],[6,2,-4,10],[3,-10,-1,-6],[-3,-10,-6,-6],[9,-1,2,-7],[-9,-6,1,-2],[5,1,-10,3],[-2,2,-7,-6],[-6,-5,8,-9],[-1,9,-8,-6],[-10,-8,-2,6],[4,-1,-8,-5],[-3,3,10,-10],[6,3,-10,-6],[4,3,-7,-9],[10,-1,-6,-5],[7,-2,-9,-10],[-4,8,9,-4],[-9,8,-9,4],[6,10,-2,-1],[-2,-7,-7,-5],[-9,-5,-8,-3],[8,-1,-8,-6],[2,6,-10,4],[2,-2,-10,10],[-1,-10,-3,-6],[-4,-10,3,7],[-4,9,10,4],[5,-2,3,4],[8,3,-7,-4],[5,3,10,3],[-3,-7,-6,-4],[7,5,10,5],[3,9,4,-3],[7,-9,6,-2],[4,1,-10,-10],[2,10,5,8],[-1,10,-10,6],[-10,6,-7,-4],[-10,3,-1,9],[-10,-5,-4,5],[-10,3,-9,-9],[6,-5,-6,7],[6,-7,7,-2],[7,-2,-10,6],[-1,10,-10,8],[-6,10,-6,9],[-9,10,-4,-2],[2,2,10,-2],[9,-2,-2,-6],[7,-2,4,-4],[-10,8,-9,-5],[-4,-10,4,-9],[3,1,-4,-6],[4,-4,1,-3],[2,-7,2,1],[8,2,5,-5],[3,-6,5,-1],[-9,-9,-3,-5],[4,8,-1,-1],[10,1,7,4],[3,10,-1,9],[6,-2,10,3],[-9,-7,-10,9],[6,-5,-7,-4],[8,-10,-4,9],[-7,-6,10,9],[2,10,-6,10],[-1,6,6,8],[-3,3,5,7],[4,-9,5,-4],[5,7,-4,-7],[5,-3,-1,-5],[9,-2,-9,-8],[-4,-9,-6,8],[-8,-7,3,9],[7,-9,5,5],[-9,8,-7,2],[5,2,6,-7],[4,-7,9,-7],[10,-5,7,8],[-6,-7,-5,4],[-10,-3,4,-1],[5,-7,5,-1],[9,9,3,-5],[4,-1,1,-8],[2,9,3,-6],[9,-5,9,-9],[-9,4,8,2],[-1,10,10,3],[9,-10,2,-3],[1,-5,-3,7],[-5,-7,-2,4],[1,5,1,-3],[-10,5,9,2],[7,10,-2,-3],[2,9,-6,-7],[-6,-10,2,9],[8,-3,3,9],[-3,-9,10,9],[9,-7,-2,6],[9,-6,1,3],[9,-6,-3,4],[6,8,-5,-9],[6,3,-10,-5],[5,10,-7,5],[10,10,-8,9],[8,-1,6,-7],[-4,10,9,3],[-7,2,-7,-9],[10,-2,4,4],[1,-4,5,-1],[2,-5,7,5],[-2,-9,3,7],[9,-4,3,6],[-3,-10,2,7],[3,4,-9,-7],[5,-1,-5,-4],[10,-9,5,-6],[8,7,9,3],[-4,-3,6,-4],[-5,-3,-3,-7],[6,7,-3,-10],[-1,8,-10,2],[-8,9,-5,8],[9,-10,-8,-7],[-3,8,7,7],[-6,8,8,2],[-4,-1,-7,9],[-10,-8,8,-5],[-10,-6,-4,5],[-10,7,-2,5],[1,5,6,-4],[6,7,9,-4]], dtype = "int32")#candidate|6772|(448, 4)|const|int32
call_6769 = relay.TupleGetItem(func_1194_call(relay.reshape(const_6770.astype('int16'), [10, 7, 5]), relay.reshape(const_6771.astype('float32'), [1950,]), relay.reshape(const_6772.astype('int32'), [1792,]), ), 1)
call_6773 = relay.TupleGetItem(func_1199_call(relay.reshape(const_6770.astype('int16'), [10, 7, 5]), relay.reshape(const_6771.astype('float32'), [1950,]), relay.reshape(const_6772.astype('int32'), [1792,]), ), 1)
output = relay.Tuple([call_6761,call_6769,const_6770,const_6771,const_6772,])
output2 = relay.Tuple([call_6762,call_6773,const_6770,const_6771,const_6772,])
func_6775 = relay.Function([], output)
mod['func_6775'] = func_6775
mod = relay.transform.InferType()(mod)
mutated_mod['func_6775'] = func_6775
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mutated_mod.get_global_var('func_6775')
call_6776 = func_6775_call()
output = call_6776
func_6777 = relay.Function([], output)
mutated_mod['func_6777'] = func_6777
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_6786 = func_6080_call()
call_6787 = func_6080_call()
func_6736_call = mod.get_global_var('func_6736')
func_6741_call = mutated_mod.get_global_var('func_6741')
const_6790 = relay.const([8,-4,4,-7,8,7,-3,-7,-4,-9,-2,-7,-6,-2,-5,-4,8,-5,10,3,-6,-5,5,-4,-3,-10,-5,-3,-9,5,-6,9,1,-6,8,8,-10,-4,5,6,10,4,-2,8,4,5,6,-3,10,7,-1,-3,-8,-7,-5,-2,8,-2,-4,2,-6,7,-5,-9,4,-2,-1,-5,1,1,-7,-1,-10,5,-3,-4,-8,-1,3,-7,-5,1,5,4,-10,-2,-1,-1,-5,-7,-5,-7,1,-7,9,-1,-4,-2,-8,5,-3,-2,9,7,10,-2,2,10,-9,-8,-1,-3,-9,4,-1,-5,5,1,1,-9,2,7,-1,7,-6,-8], dtype = "int16")#candidate|6790|(126,)|const|int16
var_6791 = relay.var("var_6791", dtype = "int64", shape = (2002,))#candidate|6791|(2002,)|var|int64
const_6792 = relay.const([-4.467923,-6.748260,-7.940276,-3.053560,1.589677,5.287408,7.475173,3.774771,2.042048,4.409544,9.527811,6.425807,-1.702089,-6.799924,-3.910946,4.943232,-7.350093,-3.800908,2.987064,-3.956795,-9.854151,-9.755803,-0.264226,1.200488,4.668911,-7.598385,-3.339058,-5.830406,5.572849,-4.165220,-5.802225,-6.041984,-3.092344,9.830622,-1.509749,-7.410272,3.025340,-7.612240,6.503444,8.347301,2.827996,1.378148,4.298354,-4.387014,-7.249733,-0.342010,-9.757636,3.553980,-9.534343,-8.621682,-3.641526,9.588921,2.502737,-1.764125,0.255368,-3.651349,4.015797,-9.418861,6.807432,0.418683,7.960895,-3.689371,4.240077,-7.992791,2.169421,-5.595364,-5.064257,4.182015,5.113693,-6.642482,-5.789814,3.337037,-3.119258,-1.239302,-9.284077,-5.035915,-8.220089,2.987219,-7.321762,6.272184,1.158742,-5.956737,0.991155,8.904005,5.371247,0.600990,-2.834478,3.699202,-3.041519,7.396905,4.465401,-9.671883,-6.376280,2.898571,-5.421037,-2.768576,-3.504768,1.638424,9.291895,2.376342,-7.385986,-9.001130,8.285820,1.964051,2.604837,8.360808,-7.976782,-8.423676,0.105742,-1.917595,-6.493419,0.354388,1.745342,-0.965755,-5.824112,7.990565,-0.226012,0.470531,2.011509,0.133792,3.933267,1.254495,3.617712,6.751659,-5.238543,-1.755825,-3.065683,6.640761,-7.646228,-8.338800,1.841477,9.230736,8.455679,-7.898752,6.559481,-7.208729,-5.353739,2.094953,5.556240,-1.761652,-9.921126,1.819333,2.085965,-6.655559,-2.072155,-1.877729,-7.061074,-2.234064,-8.407484,-1.571578,-9.715901,4.648700,-2.799900,-1.520129,8.754225,6.950393,9.148167,-5.278353,-9.011477,-8.649317,-0.186627,-1.080439,-9.609073,-8.102647,6.347085,7.528597,7.303181,-6.948469,1.484763,-3.570871,-3.198083,-3.558587,-6.304495,-7.601721,1.472933,1.567275,3.515681,-5.243949,-5.388713,-3.367875,5.244603,-3.087097,-8.168911,-6.410286,7.701226,-2.597521,7.360295,-9.487393,-3.443092,-0.042185,5.498011,3.215108,1.333651,7.413778,-8.717693,-9.242814,1.430044,0.535990,8.281825,5.705882,-9.502016,-4.367755,-9.985129,4.242242,4.627063,-1.290757,0.279082,2.501928,7.538177,4.706449,4.589065,2.502272,-1.146574,-4.060604,-7.391560,-0.914716,-7.084001,-2.337017,9.795782,7.334338,6.817798,-2.606238,6.552435,-1.918343,-1.593629,-9.319563,0.378845,-3.892908,-9.610418,5.963583,-0.855938,8.238147,9.471100,0.435475,6.770122,4.055741,-9.493543,-3.735174,-4.880446,-2.749606,-6.052404,-2.970753,-6.880472,6.328408,5.622825,0.600883,-9.273849,-7.540868,7.573831,2.968812,-3.644637,1.430576,-6.955452,-9.928187,-4.228649,7.227583,-2.474932,-8.338992,-2.358065,1.828233,6.038314,2.031237,-3.189085,3.298694,1.767662,-9.150370,7.739344,-8.869310,7.762603,-3.003479,0.902007,-3.798053,3.490128,-8.815578,-3.444144,-3.267745,-5.112671,-9.444674,0.581048,-6.971729,-1.876648,5.466623,0.206461,8.570538,-8.699796,-0.507519,3.274497,3.919384,-9.102703,-4.180567,-8.867459,-5.381031,-4.875487,4.556300,-6.657502,-5.504028,-5.826602,-7.205931,8.493502,3.635829,-4.147428,8.254092,-2.152031,-4.857119,-6.159528,-4.596794,9.657401,9.307207,9.860583,-2.578593,8.308400,-9.491732,-6.218063,3.545332,-7.833021,2.927900,-9.581771,-7.586764,-4.858813,1.910645,4.300199,7.737353,-4.333674,-0.556598,0.306561,6.469521,8.756331,-0.233498,3.467288,8.252295,-4.049734,-6.837548,9.515859,-2.930182,7.701112,-3.777229,7.379121,-6.933405,-5.770079,8.251644,1.681011,-4.430918,-4.953226,-5.000890,-2.098789,9.374571,-9.581305,-1.349355,-9.479597,6.850807,-0.412625,-2.643770,8.690035,-2.069465,6.255264,9.140073,-5.123896,8.980216,4.982203,-3.589838,6.243140,-8.712209,8.867484,7.465144,2.166935,-4.310625,-7.084009,7.194595,7.063733,7.615930,4.584743,4.640824,3.957728,-4.843155,-4.875540,-5.196612,-1.537443,6.087214,3.579617,7.847243,-0.070739,7.308912,-5.703425,-7.111329,-4.323777,-2.602409,8.426355,9.985499,-8.994513,3.981753,8.442797,-6.518864,-0.986862,5.656182,-7.806598,0.455659,-2.185175,6.091319,1.582440,-1.879662,-6.513738,-0.833094,-7.963709,-1.974267,7.156073,0.141778,6.828697,1.616817,-6.982298,-5.034244,1.045399,6.034578,-9.298311,7.374770,-2.353419,7.334461,-9.366136,-0.203593,6.611294,-8.134956,-4.944390,4.735447,3.755588,-4.384454,-9.284312,0.439019,-5.711200,8.225683,7.453207,-9.609430,9.481476,-9.274680,8.615634,-8.938018,7.354341,-9.747895,2.127788,-3.304952,-5.555047,-6.411113,0.940934,-4.192767,-0.098066,-2.125743,-1.714119,2.812792,-2.147474,-7.528707,1.719823,-7.333851,9.611281,-8.704733,3.654647,6.570052,8.907861,-1.621907,5.930188,-4.932782,-6.838036,-0.018982,-4.315794,-7.711673,7.459719,-2.146589,-6.091307,-9.821430,5.983174,-9.307653,5.148436,-0.081315,8.817821,3.281056,-9.221373,-7.969522,-3.158252,4.478870,-6.332316,0.992387,-3.038020,-5.358862,-7.318004,-8.502342,-5.338916,-1.487012,5.040483,-2.910886,3.933158,0.112869,-5.584931,5.291951,-0.191813,8.735032,-9.486961,1.625743,-3.595331,7.173069,-4.367313,7.358001,-9.671691,-6.782719,-9.174989,-8.514631,-1.039572,8.500733,0.859107,5.315360,-8.655247,6.297636,7.107662,7.265308,-1.044853,-0.610213,7.115197,3.388826,-5.932459,7.014313,1.589173,-6.296501,6.841956,-2.546342,-3.129306,0.296773,-6.254702,-2.533328,6.542871,0.409541,-0.859066,-1.642638,9.427070,-6.745148,7.085328,2.622677,9.588608,-4.291314,0.860901,-1.182064,-6.622132,-3.569871,-5.773680,-2.821725,4.063799,6.420973,8.377319,6.272858,-2.502475,-8.205376,6.457897,-6.571297,-2.040686,5.834868,7.223636,4.925764,2.080365,-5.378256,-4.286963,0.491820,-3.582074,-9.120937,-7.308264,7.185272,2.184704,-3.807504,8.510825,5.040046,0.339881,4.071644,-1.507948,-9.775676,7.708931,4.881494,8.593333,6.122077,-6.069645,-6.609620,6.427938,7.043514,7.974992,9.142796,-4.270983,-1.303333,8.744372,-9.418071,0.481810,-1.768757,1.792151,-3.837035,-2.313832,-6.222406,3.028912,-6.432656,-4.550909,0.727784,9.752322,-6.849418,-8.492363,-6.076518,4.090901,8.180335,9.742831,8.646820,-1.455183,-0.448563,8.014794,7.560993,3.672409,7.907214,3.850714,4.673590,9.977120,-6.988005,1.599699,1.405990,5.735218,9.997236,-7.738974,5.361667,-7.292315,-6.969846,-8.921318,7.653258,4.410795,-6.255267,5.882710,9.830577,6.113546,-7.624592,-1.317620,1.676973,9.707458,9.635515,8.743943,-0.804056,-3.054938,2.969721,-5.805819,-5.051208,5.349463,-2.469527,-7.516062,6.249488,4.996328,-6.977775,-9.410517,6.944728,-9.488285,6.033259,0.435545,-2.008340,-3.652440,-5.242459,-7.273316,-3.861457,1.577149,-5.124134,9.993145,-9.623249,-5.809724,-2.601359,-2.217802,-4.881087,-9.924778,0.224477,5.468486,4.096871,7.778083,-7.880270,-1.322275,-1.518229,0.212716,-1.153876,-3.684597,6.559473,7.481224,3.976240,1.740165,0.919620,-2.633062,3.452607,-1.163061,5.987793,-5.975206,4.869045,5.569705,1.398909,-5.596792,3.372181,-8.128748,7.944110,-6.842704,0.860778,-8.053356,-3.046973,3.265230,-7.380915,-5.570917,-0.801861,9.773880,-9.812435,6.087051,1.074269,7.189409,-0.814687,1.746934,1.567910,8.426534,6.978606,0.981475,-3.582776,8.489338,-8.052826,-0.406168,5.888366,-1.335928,-0.205573,0.623566,-3.056935,-1.154305,-7.079597,-4.601967,-1.379782,-7.139646,-5.454921,2.779917,8.223330,8.952874,-4.219000,-0.468909,-2.540326,9.806432,-8.645995,-9.165139,6.688328,0.951950,9.963959,-5.225403,2.133551,0.893913,-3.933641,-3.478189,-1.129893,-3.651549,-9.358666,-7.937085,9.147009,6.309739,-6.874039,-5.839838,4.823217,4.474481,-1.515079,-3.881005,-0.685214,5.265945,-2.768605,-0.331455,2.103432,7.737770,1.534717,-8.089582,-7.667410,-0.121536,-7.026877,-8.670949,6.435526,-0.856226,9.465626,2.849386,-6.783141,3.683297,2.572946,0.063702,-2.030368,-6.791202,-6.946408,-1.321068,-3.339879,3.006224,-8.739225,-9.816891,4.990959,4.986940,4.641968,9.175018,8.697909,-6.944857,-6.740586,3.080787,5.995219,7.212174,6.708787,-4.656955,-3.412931,-2.717940,1.779289,-8.168658,8.188080,-0.918989,4.970392,-2.502904,-9.669900,7.617744,2.063024,1.986811,-9.786673,-3.376978,-6.177098,6.141717,3.329367,2.219426,4.844394,5.040981,6.815889,9.348192,0.708392,2.124956,7.156107,0.324478,-6.436938,0.455572,5.104402,-1.147064,-9.504997,-6.729297,3.400103,-9.371412,-7.035401,9.044855,4.220459,-9.565165,-5.572621,-6.190506,-1.176738,-0.473348,-3.304849,4.648882,-2.181476,-7.230074,7.309289,-3.721170,-1.973634,2.163855,-8.507356,5.926536,-2.570894,1.283143,0.477437,-2.532524,6.043434,-2.644405,-1.360613,2.747184,4.948480,2.638114,-1.819068,9.435078,-6.828256,7.391578,9.538334,9.480815,-2.883520,2.851578,-2.172136,7.174357,-6.622458,-9.239908,3.882291,2.329366,1.316782,-8.899848,-3.694692,-6.547028,-9.340566,-1.314518,-2.773211,7.495301,-5.310332,6.841043,-1.629100,-0.769111,-7.892553,6.947059,-7.700324,7.067921,4.516886,4.285414,8.901961,9.492350,-0.575917,-3.551602,8.251196,4.377200,-4.226430,-4.168914,-9.064258,8.574605,8.923919,-7.269582,-5.858749,7.348757,3.400557,7.416553,6.669766,7.975328,-1.010798,-2.714696,6.348680,9.141978,-2.587423,3.989011,-3.551286,-1.350403,8.080002,4.889146,-4.250245,-5.827625,-6.543448,-0.720430,-4.683486,0.538383,3.784643,-5.997631,3.123972,-3.678421,5.091821,-0.671944,3.164649,-4.307550,-8.653622,-9.574019,-4.097321,-5.917051,-5.627600,-6.815330,-6.150913,-5.930771,-2.590548,2.474817,-6.810192,5.976072,2.353835,-2.634921,-7.159765,7.431082,-0.222042,9.881483,-8.885495,5.675311,0.398112,0.487082,2.411392,3.160822,-6.314092,-2.764806,6.547981,5.918596,1.929887,5.168124,-6.407056,-0.792146,-9.530697,3.791074,-4.920065,0.784573,5.996230,3.234338,-5.645415,-1.445881,0.081713,-0.327469,-4.225836,6.119443,6.841269,-5.012224,-9.149826,-4.077318,-5.284507,8.652405,5.516850,-7.313234,-8.011493,5.701700,9.282862,8.908931,-6.238806,7.827793,3.333281,8.310527,7.406809,-3.138993,-7.413903,-9.172912,9.217988,6.507918,-6.343752,3.219831,-1.805955,-7.117144,-4.490612,-9.805244,8.668293,1.024418,5.256436,4.416128,-3.822464,-7.824980,-7.594410,-4.856051,-7.910855,-3.096467,6.631514,9.828931,1.607992,5.681631,-3.966744,-6.272724,7.191170,-0.375865,-0.166014,6.033994,-9.416001,-2.404650,-3.197094,-3.066431,-5.431539,-9.877402,-3.894857,0.625315,1.640428,4.944382,0.428156,7.966684,6.704709,1.730308,4.829710,5.584415,-0.150890,-6.732159,-5.656390,0.222837,-9.418488,-2.934749,-6.962796,-4.255333,7.554473,8.280110,0.115931,3.027665,-9.992715,6.585663,-2.142592,7.929163,-5.392136,1.339582,-4.599917,5.925570,-3.468988,3.794455,-8.020658,-5.825858,3.456213,-9.626766,-1.958575,-1.203747,-3.891332,-9.947450,-9.123154,8.743019,-0.019851,4.801608,6.331483,3.404237,-8.903840,-8.853959,-3.155461,-7.989085,-8.571109,-6.951452,4.697456,-1.677119,-8.209628,-6.181633,-1.678256,7.670699,-9.106198,-6.426651,-0.025957,-3.956857,-1.940058,9.350483,8.893161,5.486143,-2.656199,1.620148,-9.164584,5.824295,-8.393306,7.822923,8.774707,1.765395,8.546953,7.285367,5.409952,-2.300490,1.848296,-2.787769,-1.990958,-8.689295,-1.098229,-0.392849,4.360208,3.954914,1.679396,4.892091,-0.560057,-5.125020,-0.706246,7.271885,9.729640,0.987030,6.957290,-8.779507,7.835234,-0.716951,-7.200307,-8.117040,-5.836425,7.681200,-5.224097,-1.197707,-1.759586,-1.648397,-1.646554,-8.139094,-4.304794,-1.419020,-9.644463,9.471643,-0.400204,2.961567,-1.846193,-7.131544,7.399835,-7.541110,-7.282472,-5.860553,9.078549,5.462551,-8.536569,-6.307889,-4.611427,-2.119547,1.764001,-8.132925,2.140866,-0.135265,-8.317618,-8.786229,-8.200534,1.129936,1.352500,9.806295,8.770744,6.634233,3.488544,-3.105504,-3.190613,-9.142054,-8.901330,5.650982,-5.575887,1.637069,4.367943,-3.689079,-9.592022,-1.628633,-4.361086,-5.994082,2.757749,8.942439,1.557090,-3.947286,4.904449,4.041653,9.956884,4.303229,-5.592851,-5.350278,4.674356,-5.920821,7.775728,8.849616,-4.281689,0.618866,5.658161,-1.217028,-0.967653,4.202898,9.565575,9.366613,5.642446,-5.946173,4.741619,9.170691,-0.525755,-1.529155,2.308076,8.178439,3.064037,8.057560,3.733439,-8.567972,-7.949380,5.842688,-6.397647,-5.230430,-8.810526,-8.344737,-1.317626,-5.072284,9.001078,-4.767976,-6.988215,-5.223056,-6.884908,6.130394,-7.739145,7.996910,6.915719,-8.562267,5.302642,0.832401,-9.082915,6.702737,-1.984216,1.708963,-6.661022,-6.878550,1.197684,-9.183742,-7.463171,7.628231,6.484674,3.210262,-1.704060,9.188436,-9.758111,7.518872,-9.244313,9.907548,-4.478055,-1.731639,-2.337135,1.231072,7.388807,7.469705,5.847853,-0.112802,6.825662,3.122578,-5.911493,3.616793,-2.500410,3.588717,6.444477,2.482163,3.009186,-9.144251,-2.457951,5.438561,-3.419255,8.932005,4.950057,-5.756216,9.167086,-0.305526,-4.433970,-3.442930,-1.408880,6.089290,3.249221,5.543066,-9.258316,-2.169104,-7.141222,5.542846,2.738174,-5.453249,-4.713365,2.148815,6.129513,7.294458,-8.633335,-4.884004,6.065911,-7.072268,-8.841907,7.993924,-4.540390,0.268427,9.498472,2.366536,5.493138,-4.518707,-6.325196,6.844231,1.863365,-1.745141,-5.165013,4.246874,-3.935071,-8.957417,2.956563,-7.909731,-0.551545,-3.005299,-9.002871,-9.797792,-0.795709,4.324848,-4.737506,-2.659155,-9.834104,9.683793,8.278586,-3.936862,2.618204,-5.998333,0.492251,-6.394297,-6.553911,2.060569,-5.044859,-2.120863,-0.285637,6.757769,-5.751045,9.082724,-5.878875,2.814722,8.390180,-3.698495,7.250151,5.168934,7.653796,-1.410781,9.323495,-8.750341,1.233540,-2.407732,-1.248963,-4.623480,0.150737,5.968432,0.319183,7.403866,0.783650,9.407593,-7.648849,2.444838,-1.306752,4.390216,6.559823,4.957978,-7.119548,7.668673,0.565874,4.341203,3.804406,0.654605,5.619322,3.121206,-2.461364,2.969916,9.024450,-6.047652,-6.745464,7.705292,9.674826,-3.182937,-9.161272,-3.683746,-5.235818,-0.061267,0.390621,-5.823803,-6.946655,8.180371,-8.922331,6.413262,6.793446,3.903881,5.699299,9.802672,2.024014,-7.163042,4.007604,4.862317,-0.314420,9.924601,2.647332,8.064973,4.482571,-2.547368,7.690496,-4.177571,6.141076,8.762208,-6.102141,0.381789,-4.806021,-3.103412,6.747926,6.008211,0.283237,0.672465,-9.868940,4.299388,2.978975,1.685730,4.732057,1.380573,7.628504,-3.195537,3.960214,4.370345,8.993295,-5.338638,-2.261626,4.344552,-0.823716,-2.242170,3.622914,9.492674,-5.857704,5.243013,-8.942723,-7.784125,2.105328,1.865880,6.998931,5.106892,-9.807284,0.524815,4.746623,6.558729,5.915676,1.466181,2.969585,7.524056,3.051564,8.890430,9.278923,-0.465254,-8.177832,3.808653,-2.664141,6.279859,-1.147830,1.029430,7.289444,-5.850894,3.689690,2.899059,-4.322248,-7.316995,4.766732,6.133040,6.892856,-2.423633,0.874907,6.634742,-7.473095,3.498532,8.339839,-7.588943,6.703718,7.874036,-6.025944,0.827318,4.991068,5.486010,3.969229,7.149365,-8.535780,5.438113,-1.309282,2.577445,7.951874,9.512498,-2.626411,5.159455,-1.833864,-1.796792,2.342955,8.701030,1.712672,1.998505,7.767005,1.485167,-0.622946,-1.498060,-6.594656,2.816614,-3.605519,-0.499274,9.326009,-9.531420,4.700270,-7.694378,-8.904242,3.269559,-5.521766,-6.772951,-0.889775,3.196300,-9.940725,2.954092,-1.192016,-8.109899,8.789340,7.500572,-8.818558,3.073851,-4.130558,-8.497908,7.745658,-3.854214,2.938866,-7.896650,-4.064888,-3.372226,5.325401,2.371751,1.205930,-6.870890,4.759158,4.616159,2.841556,9.896353,-6.615752,-7.909211,8.301079,-9.420055,1.724880,-8.883100,-5.527009,7.119854,-7.762862,0.441718,-7.937132,0.874949,1.540482,-9.228932,3.321198,-6.559788,8.192074,5.470071,9.071407,6.282127,-5.355631,3.931222,7.703767,-6.842737,0.025182,7.109093,6.842235,2.065838,3.826818,7.250591,7.009762,-3.498328,-4.518418,-5.228940,5.696778,9.712986,6.158336,5.770958,3.692262,6.113014,9.614419,-9.380494,6.189616,-6.670392,5.923954,9.577569,0.595582,-5.521533,9.019142,-6.903892,-8.580416,4.689414,-2.759312,-0.761432,-4.473725,-2.041779,-6.728622,9.965690,9.154903,-0.207026,5.543204,5.380444,-5.824067,4.274578,-0.783253,-7.625406,2.555609,9.634492,-6.747727,0.345479,4.828308,6.439331,-8.946606,7.030733,-6.785752,5.842123,7.187462,-0.507320,-0.372148,4.649167,7.318863,3.322211,6.664856,-1.921649,1.777904,5.737954,-4.322602,-3.388628,6.484640,-6.919113,-1.296011,1.104035,-2.836571,1.687540,4.793124,-8.444413,-4.530875,8.241889,-8.494798,-7.037666,7.247708,-7.665180,-1.091514,0.337202,-8.941468,5.464603,5.840769,-4.180551,-0.212113,-2.019887,-4.229907,7.085975,-5.842853,6.202073,-1.730911,-0.224393,6.981569,5.988955,-0.302740,4.522791,-4.408972,6.172106,3.120021,-3.235463,1.958465,-6.590803,3.329832,-4.125235,-2.786931,-9.948728,0.748221,1.060869,3.075920,-0.033028,1.743385,-6.485803,-4.900697,0.577640,3.962242,-6.162319,-4.315591,-6.929988,-9.964803,9.349321,-0.399280,9.636192,7.554760,-2.690062,-5.979471,-4.355865,-0.131365,7.921297,-9.449771,7.539744,-5.692055,-4.848951,-3.546260,-1.709738,1.634046,2.068908,4.939349,-9.726229,2.448060,3.149904,3.765316,6.464813,-3.423654,5.591616,9.659846,-2.046004,-0.407815,-2.136832,-5.562771,2.322819,1.277281,7.758569,9.335716,2.724136,7.302424,-7.167201,-9.921771,-2.491437,6.759431,8.156434,-5.914033,-9.488255,-6.821390,9.887855,-7.686957,-0.148224,-9.449092,-9.733077,3.574002,-9.554698,2.960055,-3.262787,5.254363,-3.648346,-2.500256,9.911458,-9.181981,0.298987,0.154400,3.390838,3.963189,9.347728,2.551419,4.093925,7.296874,6.546908,7.559724,-3.166156,8.184645,5.300549,-2.154208,-5.037782,-3.698975,4.999099,6.979956,5.950051,-7.082380,-8.115821,7.873776,4.496540,9.423213,8.953475,-0.033648,1.218029,-8.014474,1.893956,-1.780866,7.180783,0.335917,-5.803511,1.407466,4.600286,-5.202341,-9.651204,4.249115,-3.929700,-9.096860,6.646110,2.420444,-7.847738,6.960251,-4.612414,-3.934783,1.747881,-9.497252,-4.860926,4.206262,2.652009,6.598053,6.645525,0.127463,8.284850,2.044275,-9.395861,-8.016353,0.670431,-5.845034,5.455356,7.477017,-1.135848,-8.730224,-6.020968,-7.510304,4.296984,7.094078,8.322118,-9.970728,-1.902637,8.030521,-2.729879,-0.055049,-2.949029,3.146576,4.692854,-3.240934,-8.892453,-9.233268,-1.814440,-4.786923,-3.957111,4.219344,8.535847,-8.861591,8.393090,-2.705761,1.469034,7.944824,-4.441644,2.562267,-0.893272,8.528166,-6.947714,9.406949,5.503587,-1.434694,1.434049,5.684038,0.283033,-4.348613,3.623336,-9.375685,6.631004,-0.843059,-5.688901,3.310755,8.690064,1.792046,-3.044990,7.168055,3.704196,5.422814,8.545825,1.838107,6.254134,6.127990,-6.571432,9.209863,-2.606896,0.631297,-6.825685,7.113872,-5.263319,9.464476,0.146554,-2.540371,7.778909,3.755331,-6.494517,9.888166,-0.810289,-1.942677,5.170017,1.157021,-3.847868,-2.142493,5.003825,-8.227576,8.185687,5.256595,-7.352032,1.984384,3.502248,-1.981583,8.374852,8.861404,8.291513,-7.873940,-5.485749,-3.837726,4.853053,4.030058,-9.903018,-4.377195,9.292746,-6.976331,4.038022,1.684616,-1.690806,-5.752732,-4.557790,8.215103,9.808649,-8.418266,7.291807,-4.529518,9.027212,-2.260280,-4.591895,4.403742,-8.160416,2.902316,5.461459,-4.541834,0.042739,4.632861,7.849005,7.866302,2.659450,-1.789959,-5.272124,0.523961,-9.065576,9.137597,-1.902044,-4.455393,-2.887539,-1.962353,4.339632,1.574730,2.333800,-0.136179,0.879164,6.804189,5.375549,-2.965764,5.257386,2.336060,7.501103,-5.701402,-8.125597,-5.171784,-6.297539,-4.733717,0.241836,-1.014963,6.116860,5.478348], dtype = "float32")#candidate|6792|(1950,)|const|float32
call_6789 = relay.TupleGetItem(func_6736_call(relay.reshape(const_6790.astype('int16'), [126,]), relay.reshape(var_6791.astype('int64'), [2002,]), relay.reshape(const_6792.astype('float32'), [1950,]), ), 3)
call_6793 = relay.TupleGetItem(func_6741_call(relay.reshape(const_6790.astype('int16'), [126,]), relay.reshape(var_6791.astype('int64'), [2002,]), relay.reshape(const_6792.astype('float32'), [1950,]), ), 3)
output = relay.Tuple([call_6786,call_6789,const_6790,var_6791,const_6792,])
output2 = relay.Tuple([call_6787,call_6793,const_6790,var_6791,const_6792,])
func_6800 = relay.Function([var_6791,], output)
mod['func_6800'] = func_6800
mod = relay.transform.InferType()(mod)
var_6801 = relay.var("var_6801", dtype = "int64", shape = (2002,))#candidate|6801|(2002,)|var|int64
output = func_6800(var_6801)
func_6802 = relay.Function([var_6801], output)
mutated_mod['func_6802'] = func_6802
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_6815 = relay.TupleGetItem(func_6775_call(), 2)
call_6816 = relay.TupleGetItem(func_6777_call(), 2)
func_6069_call = mod.get_global_var('func_6069')
func_6070_call = mutated_mod.get_global_var('func_6070')
call_6836 = relay.TupleGetItem(func_6069_call(), 0)
call_6837 = relay.TupleGetItem(func_6070_call(), 0)
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
const_6859 = relay.const([False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True], dtype = "bool")#candidate|6859|(117,)|const|bool
call_6858 = func_4255_call(relay.reshape(const_6859.astype('bool'), [3, 3, 13]))
call_6860 = func_4255_call(relay.reshape(const_6859.astype('bool'), [3, 3, 13]))
func_6736_call = mod.get_global_var('func_6736')
func_6741_call = mutated_mod.get_global_var('func_6741')
var_6868 = relay.var("var_6868", dtype = "int16", shape = (126,))#candidate|6868|(126,)|var|int16
const_6869 = relay.const([8,5,2,2,5,7,3,-8,-6,2,10,5,8,9,-1,5,-4,5,10,-1,-1,4,6,-8,9,-2,-5,-4,-10,8,7,3,4,9,-7,8,1,-1,6,-9,-9,-3,-7,9,9,-1,3,-10,-1,-8,9,6,9,-7,7,9,7,10,6,3,9,6,7,-6,4,9,-1,3,2,-5,4,-5,-4,6,4,-9,-3,-4,10,-3,5,8,-8,-6,-1,-1,4,7,-3,-10,-2,2,6,10,-6,-10,6,7,-1,6,5,-8,-5,7,-9,7,-9,-9,-2,1,-3,-7,3,4,-8,-7,-10,-9,1,3,6,3,8,10,-2,-6,-6,-5,8,2,-2,6,-3,8,-5,-5,-2,6,-10,-8,9,-9,-10,3,-6,3,-5,9,-7,3,-10,3,-7,-10,7,-7,-5,-3,-3,-4,-3,-6,-7,6,3,-6,-8,-5,-7,-9,-6,-3,5,5,-4,6,5,4,10,-5,-9,-6,-9,-1,-9,-3,1,5,1,5,-10,-1,-4,8,-6,6,6,-4,4,-1,8,-7,9,-4,-1,-8,-9,-5,-5,-6,6,8,-6,6,8,3,3,-2,10,-7,-6,-2,-5,9,-2,2,-8,9,-3,-4,-6,4,6,4,-5,-9,-7,5,9,-3,-8,10,-5,10,6,8,10,1,-9,4,-7,4,-3,5,2,7,-3,8,6,6,1,-5,-6,-8,3,-1,-4,-8,4,1,3,8,4,4,3,3,-3,-8,5,8,-8,2,-3,-9,4,-7,-9,-1,-10,-3,6,-10,4,-10,3,-9,-6,-5,9,-10,-5,8,-9,-8,-7,-5,-9,-1,-2,-2,-10,10,-3,-7,-8,-5,-1,8,5,2,-9,2,1,-10,8,-1,-4,6,-5,-10,-9,9,-10,-3,-5,5,-1,1,-2,-8,3,-1,-2,4,10,-2,9,-3,8,-3,1,6,-5,-6,6,-9,5,7,7,-5,-5,7,8,-4,6,-1,5,6,4,1,8,-10,2,-8,-9,7,2,10,4,8,3,-6,7,-2,-6,1,-3,-6,-8,-3,9,-3,-3,-3,-8,8,10,-2,10,10,-7,9,-3,6,-1,-10,-8,-1,5,10,5,-9,-6,6,6,-1,8,-4,6,4,-6,8,-7,-7,-5,8,-8,6,9,-9,9,-8,1,8,10,7,-6,2,-5,8,7,-7,2,-9,7,-5,-10,-3,-3,-8,-5,-10,9,-6,10,-2,9,-4,-7,3,-2,10,1,3,-4,-6,-6,-2,8,-1,4,-7,-7,4,-3,7,7,-7,9,-2,-1,-4,5,-5,-3,-3,-2,-10,1,-10,-2,10,-4,-8,9,6,8,-10,-3,8,-1,-7,-1,-1,-2,7,-10,5,-5,5,-3,-5,-10,-6,10,-2,-4,4,-5,-10,-10,1,5,1,7,6,-8,2,6,2,-1,6,3,-3,-7,-5,9,4,-10,-5,-5,-8,2,3,-8,-1,-3,-6,-7,5,3,10,4,7,-2,-2,3,-2,-9,-2,-3,-6,10,-3,3,4,7,-6,-9,-8,5,-2,1,-3,10,-7,-8,9,7,8,9,-3,-5,1,4,-7,-9,-9,-2,1,8,6,5,6,7,-1,6,-5,5,-5,5,-9,-2,7,1,-7,-7,4,6,3,6,10,-8,-2,-2,1,10,4,-8,-7,10,-5,7,-9,3,-8,6,10,-4,-6,-7,4,6,-9,-10,1,-10,-8,-10,-10,1,-10,6,2,10,6,4,7,9,-4,4,-10,-6,1,-5,6,9,-2,8,4,-1,-7,2,5,-4,10,-8,2,7,7,4,-8,3,-9,4,-9,6,10,-4,9,7,3,10,-9,-9,-8,2,-10,-8,4,-4,6,10,8,-4,1,-6,7,2,-2,-2,5,-8,7,-4,7,5,-10,3,3,4,-9,8,8,-1,10,3,-7,10,9,8,-4,1,-2,-1,-2,-6,-7,8,-4,-6,-2,2,1,5,8,6,-6,7,3,-10,-4,7,-3,-9,-4,3,-5,5,-7,-8,4,10,-2,10,6,2,6,-5,6,8,-10,-6,-4,-3,-5,-9,-6,1,-7,-5,10,-2,9,-7,-1,5,-6,8,-3,-2,-3,-7,1,7,8,-10,9,7,1,-3,1,-6,8,-6,7,9,-10,-1,6,-8,9,-5,1,-8,-7,5,-8,4,6,-9,7,-7,8,-7,-5,1,2,4,-1,6,-5,8,3,-1,10,-4,-10,2,-8,-4,-4,8,-2,-1,-7,3,-9,5,-2,3,-6,9,-7,-8,1,-7,-7,-3,9,4,-3,6,-7,-4,-7,3,3,3,-4,-4,-1,2,-7,-8,10,-10,10,-5,-9,8,-7,1,-2,3,-5,2,9,5,10,-10,-7,5,8,-4,2,-5,2,2,-2,9,1,7,-7,4,8,-10,-6,-10,-7,-3,4,-10,6,10,7,9,-3,6,9,-7,-7,1,4,-10,-4,1,-3,-6,-5,10,6,-9,-8,-8,8,5,4,9,-5,-10,3,1,-4,-6,-3,-2,8,7,8,-4,-3,-2,-4,5,-1,10,-6,-10,8,-3,6,10,-7,-1,-2,-3,-3,10,-7,7,-1,2,10,10,-9,8,8,-9,-5,-4,-5,-2,4,-6,-8,-1,-9,-8,4,-6,-3,-8,2,-8,8,-4,8,1,-9,-5,9,-7,8,7,3,6,-2,7,-2,1,-4,2,4,-4,-10,1,4,8,-1,-3,-2,2,-3,-8,-3,-4,-7,-1,-10,3,3,-1,-9,-10,-6,9,-1,-2,10,-9,10,-2,-10,7,7,1,-1,8,1,-2,-10,-7,-2,7,-8,6,8,6,-8,-7,10,-6,10,2,-1,-8,-7,-2,-3,-2,-5,-2,4,-2,-8,1,7,-10,-1,-10,-9,3,-3,-7,-6,-1,5,4,9,6,-5,7,2,10,-2,-8,-9,8,-8,2,2,-6,7,10,6,-5,-3,-6,2,10,6,-6,9,-9,-9,-2,4,-1,8,7,7,8,6,5,-9,3,-5,10,-5,2,10,8,-3,-3,10,8,3,7,9,-7,-1,4,1,9,-3,-1,-6,-6,-6,2,8,5,-6,-1,8,-3,-10,2,-3,7,-1,-8,5,-8,3,-9,1,-4,-8,-2,-5,-5,6,-4,8,4,10,-10,7,8,-9,-3,-2,-5,-6,-9,6,3,3,8,1,-5,-5,7,-3,4,-1,10,7,-6,-6,1,-8,1,-6,-5,2,-9,2,-1,-1,7,-3,7,-4,-3,7,2,10,9,2,-4,-3,-3,1,10,-8,-5,-5,1,7,-2,7,4,-7,7,6,-4,-6,-3,-1,-2,1,-10,-2,-8,6,-5,-3,-2,1,-10,3,-5,-2,-8,1,-2,7,-1,-6,10,-6,-6,-4,-9,-8,-4,-2,-9,-7,-7,-7,3,4,5,-2,1,1,-6,6,2,4,-6,-2,1,6,-10,-1,-8,-8,7,7,-7,-5,-3,-8,-8,8,-9,3,-2,9,1,-8,7,2,-3,1,-9,-2,-9,7,3,3,10,3,4,-5,-4,-4,8,-2,-8,10,9,-10,-4,-10,-6,8,-1,-7,3,-10,6,5,-3,-4,1,-6,8,1,-7,-7,-3,9,6,-9,-2,5,4,-10,8,-5,8,1,1,7,2,3,1,-1,9,-7,10,9,-3,-10,4,1,-1,1,-6,-2,-4,-6,-6,-3,7,-8,-5,3,-9,-10,2,-7,6,7,-6,-10,1,-7,-3,1,-2,10,-7,5,6,9,9,-3,5,8,-6,-2,-4,-3,1,10,-5,3,3,-6,-5,9,2,-10,-1,-6,5,-5,9,10,3,5,10,10,6,-4,-2,5,-6,-8,-1,5,6,-9,-9,-5,8,-2,6,4,1,-2,-3,-6,-2,-8,-1,-1,3,2,-8,8,-4,6,4,3,10,-8,-2,1,-9,7,2,-6,1,-8,-4,-6,-9,-10,2,8,-9,-2,9,5,4,9,-3,10,-1,-2,7,3,10,-8,-9,2,-3,8,-2,1,8,-2,4,-4,2,-2,-6,6,-10,-6,-1,6,-7,-9,1,4,1,-10,-8,10,4,9,-6,-4,9,5,10,-5,8,-5,3,8,-3,-9,-7,-9,10,9,-4,4,4,-3,-5,-9,-2,1,4,-1,2,-6,-8,7,4,6,10,-1,-1,7,5,-8,2,6,3,-3,-7,1,5,-5,-6,8,3,10,-4,-2,7,-9,3,7,3,10,-10,-5,-1,-3,-3,4,-10,2,5,4,5,-3,7,2,-1,-9,-3,5,7,2,-8,-8,5,2,-3,4,-10,-4,-8,-8,-1,1,3,10,1,-2,10,-7,9,5,-6,9,7,-4,2,-5,8,8,9,3,-2,8,6,-9,5,-8,4,-6,3,-5,1,-9,-3,2,7,-1,-2,-2,-4,-5,8,9,-1,2,-4,-6,-6,-6,1,10,-5,6,-2,6,-3,7,4,-5,1,-6,6,-2,8,3,5,-7,8,10,6,-8,-6,-2,10,-5,7,-8,3,9,-7,1,8,4,3,-6,9,8,8,8,-9,9,-4,9,6,-1,10,6,-9,-6,6,1,-5,-3,-1,8,-5,6,-3,-7,2,-3,9,2,2,2,9,3,4,-6,-8,7,-3,-3,7,-7,-9,3,10,7,5,-7,-3,-10,-6,-4,-3,10,-3,2,4,-10,8,2,-3,7,6,-4,-4,-6,3,9,-2,-9,1,-6,1,-7,-3,6,-5,6,8,-2,8,-7,9,-4,2,-7,-7,7,1,6,10,-2,4,8,-9,6,-8,6,-6,8,8,-2,-8,-10,10,5,-5,-7,-4,-2,-5,10,-9,3,-9,-5,8,-1,-6,-7,6,-8,-8,1,-2,-5,-1,-2,-3,10,-8,8,-4,-2,9,-7,-1,7,10,3,3,8,-3,6,5,-10,3,-7,-9,5,10,5,7,-3,2,-8,4,-10,-6,6,4,-4,-4,-4,-2,10,-3,7,7,-6,6,3,-1,10,9,1,-10,10,8,6,3,3,-3,5,-10,10,-6,-9,-5,-6,-5,-10,2,10,4,-9,5,2,-4,-9,-7,-2,1,-1,10,-3,-2,1,-2,3,8,2,8,1,-10,-8,-9,-1,-4,5,10,3,10,8,-5,-8,5,-8,4,6,-10,-3,9,-9,8,8,-1,-2,5,3,-10,-4,-2,1,4,10,-4,-4,8,-5,-5,-2,6,-9,3,2,6,-2,10,2,1,-9,6,-7,5,9,-8,10,7,6,3,5,6,8,9,2,-4,4,-4,-6,-4,1,-10,-8,10,6,4,5,-1,7,-4,1,-10,10,7,-3,3,-4,4,-9,-6,2,-8,-1,1,-8,-7,-3,-3,10,-10,-10,-6,-5,6,7,-9,-3,5,6,2,-10], dtype = "int64")#candidate|6869|(2002,)|const|int64
const_6870 = relay.const([[0.062847,1.637345,-8.485120,-2.602940,9.471740,-6.630969,9.993483,-4.119460,6.530088,-0.840055,8.073821,-7.777294,-6.601934,2.482835,-6.091239,-2.772415,7.294204,8.265152,8.894288,8.755836,4.483829,1.738934,-3.061005,0.201388,-5.881181,-5.431018,6.647310,3.187981,-6.995173,-3.821242,6.077294,7.171464,0.520276,8.370885,-0.226939,8.795814,-1.476503,-5.642840,-2.071168,-1.506072,-3.784860,-5.552279,-6.150316,4.926888,0.359668,8.560776,-3.925492,4.505314,-2.939565,-3.838869,3.867357,-3.714312,6.943145,-2.910451,3.478023,-9.350540,-0.683625,7.222386,5.907750,2.715827,-5.634140,6.987546,2.981171,-0.452322,3.047875,-3.691563,-9.503734,-5.895572,-8.643824,-6.789399,-8.174236,2.906690,6.611894,5.911822,8.851399,3.302625,7.433640,-2.697817,-9.931035,-5.201036,-1.216307,-6.985295,-9.726478,-6.347173,-4.153432,-0.594762,8.415531,3.327013,-9.893570,9.704894,4.111247,3.744460,-2.819765,-0.714674,3.978297,-9.263858,6.473420,-6.782926,-0.921435,-2.142030,3.054667,4.236461,-3.980579,-6.859495,8.040484,-5.236393,-9.640879,1.287346,-9.317485,1.540397,5.427136,9.524849,7.753174,-6.529355,-6.201688,-2.539434,8.604464,-1.993898,-8.914963,-4.122984,8.991915,-3.314575,-2.548298,-6.125554,7.652066,-2.422225,3.004621,-6.836730,-4.501841,-3.067012,1.767126,-3.579767,-7.168388,8.513298,6.438031,-0.589010,-5.574452,9.508430,5.980757,5.310344,0.146390,0.794256,6.416773,0.499507,-6.979294,-0.540913,-0.169949,-8.349530,-3.026223,9.187579,9.554639,-3.159545,4.909772,-9.905717,3.337373,6.948638,-8.506869,6.935748,-4.080020,1.067044,0.568453,0.841346,-3.360742,-8.654912,3.807222,5.975883,-2.792721,-6.606334,4.462954,-0.924639,6.019416,6.764328,-6.769295,5.952860,-3.453198,6.053161,3.453283,3.741829,-1.872538,-6.290969,-4.323313,-1.563647,0.198205,-5.958189,9.268613,5.206010,-6.524482,-0.081613,0.872989,-6.326206,-4.651027,1.258332,-8.199813,-9.418741,9.548647],[-7.866210,-6.500772,-3.226554,8.798919,-8.837059,9.894974,8.681296,-2.193785,-3.668063,-2.857250,9.277494,-9.995317,-0.871260,-3.258707,8.555178,6.026820,9.105528,-1.871353,3.169668,-9.943911,-1.081056,5.949083,0.150607,-2.039384,0.712626,-8.651557,8.271574,-6.725723,2.272185,-4.027679,-1.489276,-1.478391,7.350740,9.020168,0.228858,-3.946352,2.084584,7.706620,-3.138769,-2.712632,-0.522035,-1.125459,3.776738,3.836033,8.782937,9.945739,8.599555,4.911923,-3.211130,1.808772,-7.795399,6.392123,1.585172,8.377731,-2.497617,-1.172206,-2.361649,7.537543,5.102818,9.233620,-4.624158,-6.504091,-6.947267,1.054676,-4.038073,-8.417096,-6.455584,-6.438616,9.141136,6.556608,5.911550,-3.384810,1.509227,0.790424,3.713568,6.534341,2.363171,5.036349,-7.363308,-8.292242,-0.771771,2.610684,-0.860296,-6.001828,2.810297,-9.598774,8.205453,1.500899,-4.395913,0.357390,1.516634,6.927620,-8.028109,-9.613229,9.948110,5.420678,-6.890833,8.929159,-2.882003,-1.854188,5.265227,-3.504710,2.873768,9.611504,-2.226753,2.442919,-9.323580,-5.570182,-9.561586,3.305251,4.481856,9.067195,4.589169,0.249472,-7.724894,-2.542309,-2.304262,0.297826,-6.584365,3.037861,4.844108,-2.360271,8.243300,3.984228,8.142905,-1.142926,2.220247,-3.007696,-1.117128,2.961002,9.307751,-4.056552,-4.982253,-8.287482,9.807568,-9.742839,-9.273950,-2.064261,8.449233,2.168324,-0.640144,-4.022794,9.382182,-1.239582,-6.908389,8.081224,3.507654,5.869899,4.451959,-9.621850,8.399196,7.666424,6.854849,5.134426,8.668897,-2.588240,-7.008228,-4.922455,9.027167,6.932383,-9.025920,-6.742290,9.152352,4.698770,0.338576,2.105209,-9.485839,-8.529877,-4.740103,1.494936,8.541655,7.188276,-7.323657,1.418526,-1.759385,1.449666,2.641685,1.924201,3.528003,7.358536,-8.684682,2.228442,-5.752849,8.538982,2.070444,-4.260695,-8.273259,0.991398,3.428415,-3.356661,0.511152,-3.164483,2.950488,2.835881,2.160054],[0.441720,4.904823,-6.880765,0.550101,-6.948537,-2.104258,4.372582,-1.995209,5.493267,6.155783,-0.658229,3.172318,-8.368587,-0.758044,2.041386,-1.027507,8.325076,4.755079,9.915571,8.460633,-7.323466,9.934056,-2.352914,-2.911973,9.465429,-5.007413,-5.920303,9.763688,-2.241242,3.451367,5.981315,7.208621,0.995745,-2.461294,5.145844,2.851014,-0.755097,6.201998,-5.545039,-0.693057,0.117484,6.960333,5.889136,-1.172939,-4.252996,9.941144,-4.952765,0.682057,-5.286164,-0.263811,9.472220,2.282429,-5.173774,0.408933,-1.555922,3.677800,-3.799456,8.257279,5.183463,5.686950,6.639115,7.031635,6.130510,-1.218169,-8.401035,6.424545,-6.149840,1.526474,6.671570,1.550144,2.704258,-9.520149,-2.168273,4.181966,7.290217,2.347837,8.427609,-2.291632,5.466345,-5.967854,-1.310280,-0.953214,-1.578099,4.908138,-2.805210,1.879680,9.210234,7.750988,-0.717660,7.537048,8.845344,-4.943687,7.278419,-9.238414,5.547637,3.629740,-1.870549,-8.809827,1.395155,4.486888,8.540264,9.724258,-9.204268,-2.544228,4.860263,-7.452422,-8.554204,-8.854909,-8.350387,1.708830,4.808311,9.034871,-4.707786,8.603006,2.112323,9.117162,0.619994,-0.273711,0.749354,-4.219501,-8.441471,8.124029,-8.991932,0.798155,-1.870150,-9.573475,3.535339,-5.939229,-7.686359,5.038218,-8.993130,-6.599435,-1.257357,2.921276,0.480267,-5.490087,-1.586095,-5.463035,1.486719,2.802397,-0.301837,-4.534447,6.757902,9.177340,-0.565300,-4.717356,2.208867,-9.175395,9.174207,6.340366,-2.916526,-2.629805,-3.791752,8.336472,-4.855961,9.176671,-9.382011,-3.309760,-3.642317,3.691147,8.844972,0.166880,-4.211688,-8.219270,9.028043,-9.888801,3.239267,4.012228,-4.534400,-8.833239,8.218273,3.766898,2.464230,-2.685582,-6.501903,-9.197201,1.768747,-9.892741,7.959834,5.731789,4.359960,-9.115321,-0.314938,-0.605024,-7.633348,-9.131414,-1.487490,-6.313828,8.515523,-8.549380,-7.524857,2.646132,-0.867294,-8.108073,-3.258749],[0.655138,6.840789,5.433686,7.753288,-4.320783,-3.753134,5.231343,0.881384,-6.121008,-2.137440,-9.686503,6.832965,-8.025432,0.658853,9.879194,-7.000214,2.457622,2.418610,-4.237408,-8.595792,-6.897435,2.614393,-7.991026,7.145770,8.951798,4.185272,3.941600,-5.552364,-7.147248,-0.041895,4.986134,-9.006644,-2.379673,8.735845,-7.318949,-5.285107,-0.750746,9.553919,-9.131817,0.201991,-1.451437,3.027055,3.756270,-3.486264,0.298979,-6.320633,4.555521,-4.196447,-5.678090,-2.931516,9.268811,8.861385,-5.136193,-4.333153,-6.272057,3.356189,-1.009725,-2.603575,-4.881326,-3.938402,7.997612,-0.195962,3.595065,-5.063305,4.141478,6.171792,1.353036,-9.434061,5.473461,-3.997237,6.461151,-7.489823,-5.952777,9.185368,0.021782,3.240564,-1.181480,-0.671820,-3.939014,4.962471,2.210727,-6.708215,-8.422347,9.120955,-1.922364,8.440530,3.604686,5.683840,-4.662603,-8.071630,-8.248761,-5.176599,1.795050,5.721921,5.492343,3.139344,8.697139,-0.753618,5.710600,9.275826,7.043280,3.482226,-4.828301,1.177241,2.916322,8.258257,6.659405,7.631725,-2.231981,-7.183018,1.428675,-1.649524,6.842188,-6.525261,-9.448021,-4.855258,-7.230557,-1.739456,8.169235,9.930586,5.765694,-0.332785,-6.854221,-2.266112,-1.328905,5.573470,-8.699530,-3.975963,-6.910961,-1.077870,-9.885712,-8.701285,-3.994429,-3.144495,-7.299549,1.202474,-3.617536,-2.262958,2.427649,5.721483,2.044188,8.013658,-8.687105,-6.952663,0.796592,-4.922676,5.789503,-9.009186,2.962861,9.235276,1.547710,-6.130130,5.510724,-3.069743,2.743273,-1.281755,-4.839461,-1.611619,-6.742870,7.918210,-0.971094,2.042198,4.297891,6.871394,-3.591738,-8.043888,3.217525,1.395165,-6.219826,8.917350,0.960251,-9.009824,-8.121785,1.765309,5.724518,-9.792124,-8.234034,-3.405315,1.497010,-6.667485,-3.949759,5.336418,9.808488,-0.715199,7.111117,1.745612,-2.664388,-5.463109,3.877646,9.164030,6.272177,-1.379940,0.265904,4.782844,-2.689502],[5.514184,-2.894035,0.105402,3.626174,6.666212,0.321742,-8.083292,1.427172,-4.398296,-0.888748,2.503568,5.247215,9.291555,-6.060799,-7.268414,-8.191878,-9.111478,-3.250447,4.088950,3.883677,-8.176234,5.530086,-1.254002,-6.242074,2.118723,-8.008935,-3.034796,-5.299415,4.622268,-1.337834,-8.529512,4.093675,2.388662,-5.644012,9.222025,-6.316701,-5.870533,-4.916023,-4.650942,-2.821570,6.187456,-0.171252,-8.187563,7.564621,-8.616511,3.386905,6.831951,9.162430,9.316943,2.212225,6.341361,-8.845089,8.555724,4.566035,6.340196,-2.535070,-5.616559,-4.717791,3.864467,-1.420446,4.552590,-4.993345,-0.168512,-5.822558,6.874671,9.653084,7.477068,8.074527,-8.451966,-1.147296,-9.133182,1.011993,2.501604,1.314753,7.548733,-8.041908,-0.509406,2.791270,-7.430814,-9.323820,8.998390,8.441480,9.928633,-8.695850,7.712466,-4.689235,5.252528,-0.886116,7.071219,4.533225,-5.551234,-5.113449,7.521303,4.136846,0.617154,3.252639,4.744273,1.559199,4.839548,5.095356,-2.601014,-5.091633,2.862422,-9.965512,9.020291,9.321318,-5.011948,-5.008127,-3.251594,2.513989,8.804219,-2.538659,8.540930,5.638708,9.142984,5.447963,-3.035562,8.215198,8.535995,3.700103,-6.110584,-8.939537,-8.425991,-8.258449,-1.150252,-5.481191,-4.979166,9.233623,-0.153114,3.738299,1.929200,2.617641,-5.618791,0.386203,-1.241400,-4.768061,6.795532,6.350722,5.519983,-6.770829,-3.097218,9.230949,-5.211255,-5.252869,-2.294714,-9.663149,0.614432,7.282592,5.591624,9.097865,8.583630,-4.729367,-2.634774,-2.810333,6.901321,5.735109,9.322497,-0.911986,6.781981,-3.767666,-6.679234,5.427703,-9.800933,-6.811042,0.305078,-5.568855,8.378230,-7.365275,-4.439247,-3.308469,5.899339,6.426036,-4.919924,-0.392296,7.761254,3.970858,-5.308213,0.723293,-3.720644,-9.323868,8.150536,-9.279231,8.737906,-3.129670,-0.737411,8.398956,-1.395098,-4.678847,-5.520479,7.277143,-8.716837,-8.197410,4.027771,3.291600,5.196610],[-4.731457,-8.587726,2.591826,6.633999,-6.836101,-3.981141,9.285648,-2.451373,-2.635227,2.714633,-8.528096,-7.175380,-0.276494,-6.454576,1.580428,1.578289,-3.629111,7.972742,0.353502,7.488706,-9.598302,7.344293,7.094430,6.506492,-0.375792,0.676496,-4.471338,4.033493,6.198078,5.387493,5.696267,-8.625478,-0.121353,-9.276090,-8.023949,8.214561,7.929999,6.441146,8.181999,-2.177033,6.928645,-5.130247,-9.231138,-7.733744,-6.936578,-3.198759,-5.915001,7.652427,-6.800272,-3.261853,-1.749270,3.870761,-0.004982,-6.308226,-2.891656,2.517421,-6.068075,5.171408,-8.141085,-4.322175,8.791753,-7.567236,-8.502720,9.692289,9.789346,8.168747,6.957017,-5.842862,5.209451,4.253629,3.954913,5.072011,3.797749,-5.103356,-8.865566,-7.575116,-3.842325,0.921833,-3.029421,2.863010,-5.887173,4.757719,-0.317525,7.518194,-0.377397,7.792469,-0.859660,8.370186,6.566237,1.197209,1.016997,-0.699764,-8.426926,-2.224512,-6.614208,6.291323,-4.831452,-2.162776,-0.117881,5.953155,0.069126,-9.221737,3.781836,3.676246,-0.628727,5.023922,-4.460283,4.464573,0.019498,3.463812,2.914675,9.447278,-5.042764,-2.835776,2.244073,5.379276,-5.593801,-5.977919,-1.560680,8.588143,-0.084241,-1.641516,-1.585556,-5.166241,8.006913,9.195868,-4.550900,-6.386697,-2.069761,9.988210,-8.465773,-3.511309,-7.459545,5.943906,-5.669143,4.866084,4.844754,4.849097,2.065623,4.676253,-9.221513,-6.343040,1.990632,6.372361,0.047968,-8.444667,1.125544,2.893892,1.736024,-9.466331,2.869162,5.976228,0.966405,-2.530004,-6.325457,0.696913,-4.036321,6.468571,1.826619,6.067960,7.142037,-0.296358,1.058966,-3.698620,-8.872726,-3.227388,5.370339,-5.784845,9.513681,0.224864,6.293976,-9.574106,-3.900883,7.757927,-8.953559,3.387108,-2.486266,-9.169160,7.297819,6.940057,-1.957183,1.788127,2.984178,-4.632939,-3.264537,-7.575982,4.432558,0.417164,-2.271246,4.665988,8.851913,-9.707908,-2.284770,1.458421,2.516577],[-2.677133,9.314245,5.165557,9.786941,5.776113,-0.483950,8.047533,-3.138395,9.282546,-4.012976,5.060968,3.384898,7.260338,-3.170305,7.829743,3.207129,0.955808,5.610051,1.425053,5.429167,-4.662917,-9.630525,0.876119,-0.328595,0.100239,4.879415,4.895786,-2.785882,-3.928193,4.472298,0.314010,0.118790,0.711064,5.779368,-2.308807,0.921754,-3.310955,-1.308212,-9.208637,1.916776,8.575296,-5.121437,7.610959,-6.310440,-4.018689,-3.349897,-4.004001,-7.106137,-6.831509,5.955583,-7.247847,-6.006977,-6.187470,-9.458653,5.500337,3.888679,-7.260744,5.186490,-0.378711,-6.103229,-9.447710,-9.627202,-2.112332,-0.674664,3.357554,1.227861,5.355384,-9.377052,5.227638,-6.631225,-9.919572,4.923233,-0.742415,5.727558,-9.417155,7.991326,-2.754540,-0.486546,-0.609021,8.217426,-4.405714,-2.953840,-8.576134,6.375286,8.030477,5.598563,2.444137,3.984214,0.505432,0.288345,-2.375866,-7.323889,-8.099743,4.030068,-5.134076,-1.985518,-3.067424,-6.185315,-7.484415,-7.178008,3.798923,7.220932,-2.361455,-9.798158,7.336542,-7.289508,-3.601275,-0.339372,8.909789,-2.945731,0.523636,-7.913046,5.055739,-9.862864,-3.478990,5.025488,-8.923794,9.783477,8.747418,6.396940,4.860803,-2.532901,-8.406016,-1.619225,3.164343,1.313671,-1.225605,-4.748922,-7.253400,8.887496,6.630878,9.953087,8.848713,-5.418988,-2.785605,-5.036051,4.315771,-4.015884,7.717943,5.703541,1.921187,7.783102,-5.516221,0.326634,1.892747,-3.559305,4.461978,-4.498595,-0.062784,-8.100030,-3.171518,-1.481783,0.386106,-1.505291,3.764979,5.020402,-7.239862,-8.854372,-8.579285,-5.545626,-7.715236,-8.275514,-6.341115,1.960670,-8.298062,7.919132,-2.864673,-8.226268,-5.542328,-7.663125,5.583523,-3.734105,2.943357,-9.364447,-6.969713,7.102709,0.431840,2.702386,-2.600466,-0.632906,-0.435267,-8.210015,6.913487,-8.119075,7.674955,-5.882147,7.229370,-9.450566,3.686012,-5.891397,9.095422,1.225290,-3.802070,-9.583292,4.733283],[3.004515,0.392099,-1.752783,-7.376683,-7.316233,0.758253,-9.141429,-1.819928,1.524780,-5.285070,2.035861,1.098252,-7.846125,5.954229,6.153992,-8.929827,-5.096348,-6.717813,-4.600417,-5.981645,-4.631251,8.672043,-8.599493,2.918236,-6.829376,3.341252,-9.692198,-2.186987,-7.493124,8.167737,-9.063907,-5.523851,2.753683,3.460791,-8.236707,5.495974,5.372817,4.764056,-1.774436,-1.527864,-9.556693,-6.703143,-3.472129,-0.089038,2.366270,-3.372902,4.038934,-0.492330,9.029065,-0.045114,7.201479,-8.818170,5.605273,-4.951697,6.284859,-1.325988,6.000912,-2.305591,8.241907,-8.213041,-3.375298,-7.441894,-0.335267,8.156905,-1.692432,6.548434,4.437335,-9.343562,5.550949,-2.701357,8.038560,6.868517,8.128731,6.484093,-3.810088,4.595310,-8.603577,-9.532071,6.770007,0.484546,5.196298,1.821395,-7.429326,3.779149,0.215312,-8.402104,-6.139332,0.945689,0.929159,-2.664410,-7.382479,0.667003,9.430211,9.726734,4.262012,-2.494443,6.344833,7.646327,-3.479829,-2.282230,-8.354559,-0.625783,-2.992420,-7.665075,-2.783618,8.580361,2.626665,-1.760049,-1.847141,8.810066,-5.375162,-8.651515,7.317539,7.464178,4.004658,9.892494,9.640880,-5.671985,1.208405,2.128213,-3.235600,4.380500,3.694309,-9.459241,8.612489,3.742413,-1.682584,-3.528107,3.232009,0.992928,9.339732,-0.339046,-6.191735,-6.284351,-1.995320,-8.280397,-2.497285,-5.707629,5.305795,7.859772,-4.924350,-9.628299,-9.313290,-9.424464,-5.356478,-6.786250,1.053974,-6.277806,-9.511050,4.930632,4.087825,2.735339,5.110813,1.470698,-6.459164,-5.970101,-1.086314,0.927431,3.357945,-4.737063,4.604906,7.472970,-2.527601,0.118345,-2.944914,3.305652,-6.112188,6.164410,-1.502702,-4.895692,4.146406,8.589179,7.554135,-5.716586,-5.837342,-9.741050,-4.290052,-9.300458,-1.390264,5.620868,0.582899,-8.011261,7.380107,1.735586,-5.222370,-5.502697,-7.113943,1.007428,7.990849,-1.487551,6.549430,1.987741,-3.926822,-3.586855,6.474303],[7.660241,-0.826278,-8.303305,5.270623,7.180457,0.007631,4.634174,4.016334,3.255637,2.697747,-1.286831,4.067225,-2.165679,-4.939340,-3.456297,-4.263802,-5.006150,4.446999,-5.205149,-4.239844,-2.620001,9.421602,-3.315020,0.553692,0.244087,0.020678,4.014700,-3.150394,6.953331,-6.874372,-4.572993,5.873901,7.052210,-8.716879,-1.030176,7.841436,-6.724018,-5.648226,7.748486,4.919505,-4.923306,-3.971105,2.987970,2.628686,8.076074,-7.876826,-4.710108,-8.361340,-2.219152,9.297754,-6.544175,4.279825,-4.819119,6.512252,8.108755,-5.823774,0.210980,5.006116,4.688179,9.674429,-8.650267,0.864906,-2.846365,-5.776498,-4.651137,5.735517,-6.432415,6.629385,-7.577794,-6.927187,4.189245,-1.433339,-5.662367,9.825059,-2.763975,-7.412754,-8.742523,-8.056513,-0.395645,0.481739,-9.663545,8.321856,-8.012212,7.462096,8.117156,-4.905183,2.887208,3.424888,8.813574,7.945803,-6.050007,-7.997669,4.218873,3.324767,-9.292368,-0.955716,5.373467,7.334741,6.283434,-2.467966,6.710645,3.752850,9.719124,-2.598928,-8.494698,4.446655,0.342253,1.347486,-1.979073,-9.969308,-7.457919,8.463954,-7.399220,0.782644,-3.454441,-7.574440,-5.339927,-5.882022,1.432725,-2.890520,-8.338129,-5.654169,-6.081164,1.209476,-4.002776,0.915367,-4.550737,-2.257919,5.574432,-8.203979,1.446600,1.221828,2.622426,-8.191194,-0.045650,-2.069124,-5.592404,3.086712,-3.308176,0.249791,-9.176172,0.361305,2.378156,-2.108966,6.767167,-0.666186,3.534364,1.361728,7.384080,1.146850,-8.350102,9.271788,-7.782474,3.249294,0.949735,2.264360,8.976813,-3.298642,-3.184235,-8.621586,-1.016756,7.091138,-7.891556,-8.089855,-3.850166,-1.423791,7.024814,3.786043,-0.554904,-7.842222,8.481350,0.067209,2.309653,7.915544,-1.733066,1.078272,9.012130,3.008047,3.504328,3.127537,8.736919,4.294137,2.938577,4.059496,5.923002,3.812713,7.602115,-6.202878,9.951623,1.204698,7.941104,-6.927457,4.086400,-6.992433,4.198391],[-9.102668,1.429817,9.976185,-8.338968,-9.644464,-6.047435,-1.150406,9.179503,-5.634539,-5.412560,-2.327705,3.780919,-2.178862,-4.594222,8.540105,3.001319,5.760733,7.104636,2.382593,9.122062,-8.894408,-4.197852,8.818679,5.567633,-3.927578,7.168167,0.042574,8.535199,1.225479,-4.548878,8.679000,-0.003780,2.550158,1.625201,7.444421,-4.122844,-3.352242,-5.121815,-6.297941,-7.762959,-7.623579,-2.832585,-6.974971,8.006727,7.653338,-9.975643,4.696481,5.220003,5.750689,-2.598735,0.205832,-4.432552,6.512541,-0.178362,-8.121615,-3.850320,-1.356599,-9.471487,-7.346270,7.403511,4.397906,-1.511770,-9.187356,8.235703,-9.776632,0.381290,9.430127,6.545554,-6.070115,-6.478496,-0.049266,1.884864,8.248539,6.652286,-0.229295,-8.632511,1.691968,-0.742472,-7.827091,4.064583,8.097587,9.911751,-2.094688,1.796676,-0.484416,6.888989,-9.393388,4.589237,-6.501063,6.859187,8.538875,-5.809825,-2.157335,3.918406,4.913651,5.657259,3.807250,7.864821,-1.337122,-1.803155,-8.978280,4.409113,4.995429,4.008202,-1.668675,-6.046611,-1.024203,-6.630863,7.271887,2.272748,-2.674464,-7.569410,9.731847,4.418434,-3.711126,-0.290589,0.054550,-8.782363,6.053970,-8.615506,-5.277910,9.827132,2.882180,-3.273752,9.658073,7.713046,-2.108921,4.589749,6.714016,5.433889,3.955499,9.302728,-4.138827,5.171805,9.515572,8.357472,-3.930787,-5.179488,-1.225878,-1.502435,-0.036894,6.122205,8.849443,8.813607,8.242491,4.837848,-6.953710,0.369824,-2.388189,-3.305723,-2.787529,5.734926,1.547599,-3.144397,-5.691819,4.774653,7.138351,-6.325415,-2.145333,4.595041,-8.877996,-2.470302,2.332150,2.018303,-4.656375,7.008886,7.234634,0.008069,-4.202287,-7.401857,-9.733190,-9.454504,-9.533489,3.510976,-8.551862,-5.858469,2.306841,5.467180,-3.058488,-2.447370,6.024876,5.190974,-2.079945,1.535749,5.419657,-6.123484,5.781366,1.770333,2.941169,-5.729724,5.750432,-4.010135,8.871183,-8.308639,9.479653]], dtype = "float32")#candidate|6870|(10, 195)|const|float32
call_6867 = relay.TupleGetItem(func_6736_call(relay.reshape(var_6868.astype('int16'), [126,]), relay.reshape(const_6869.astype('int64'), [2002,]), relay.reshape(const_6870.astype('float32'), [1950,]), ), 2)
call_6871 = relay.TupleGetItem(func_6741_call(relay.reshape(var_6868.astype('int16'), [126,]), relay.reshape(const_6869.astype('int64'), [2002,]), relay.reshape(const_6870.astype('float32'), [1950,]), ), 2)
output = relay.Tuple([call_6815,call_6836,call_6858,const_6859,call_6867,var_6868,const_6869,const_6870,])
output2 = relay.Tuple([call_6816,call_6837,call_6860,const_6859,call_6871,var_6868,const_6869,const_6870,])
func_6882 = relay.Function([var_6868,], output)
mod['func_6882'] = func_6882
mod = relay.transform.InferType()(mod)
mutated_mod['func_6882'] = func_6882
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6883 = relay.var("var_6883", dtype = "int16", shape = (126,))#candidate|6883|(126,)|var|int16
func_6882_call = mutated_mod.get_global_var('func_6882')
call_6884 = func_6882_call(var_6883)
output = call_6884
func_6885 = relay.Function([var_6883], output)
mutated_mod['func_6885'] = func_6885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_6920 = func_5606_call()
call_6921 = func_5606_call()
func_4627_call = mod.get_global_var('func_4627')
func_4632_call = mutated_mod.get_global_var('func_4632')
var_6929 = relay.var("var_6929", dtype = "int16", shape = (126,))#candidate|6929|(126,)|var|int16
var_6930 = relay.var("var_6930", dtype = "int64", shape = (2002,))#candidate|6930|(2002,)|var|int64
var_6931 = relay.var("var_6931", dtype = "float32", shape = (1950,))#candidate|6931|(1950,)|var|float32
call_6928 = relay.TupleGetItem(func_4627_call(relay.reshape(call_6920.astype('int16'), []), relay.reshape(var_6929.astype('int16'), [14, 9, 1]), relay.reshape(var_6930.astype('int64'), [2002,]), relay.reshape(var_6931.astype('float32'), [1950,]), ), 2)
call_6932 = relay.TupleGetItem(func_4632_call(relay.reshape(call_6920.astype('int16'), []), relay.reshape(var_6929.astype('int16'), [14, 9, 1]), relay.reshape(var_6930.astype('int64'), [2002,]), relay.reshape(var_6931.astype('float32'), [1950,]), ), 2)
func_6354_call = mod.get_global_var('func_6354')
func_6358_call = mutated_mod.get_global_var('func_6358')
var_6940 = relay.var("var_6940", dtype = "float32", shape = (182,))#candidate|6940|(182,)|var|float32
call_6939 = relay.TupleGetItem(func_6354_call(relay.reshape(var_6940.astype('float32'), [14, 13, 1]), relay.reshape(call_6920.astype('float64'), []), ), 3)
call_6941 = relay.TupleGetItem(func_6358_call(relay.reshape(var_6940.astype('float32'), [14, 13, 1]), relay.reshape(call_6920.astype('float64'), []), ), 3)
output = relay.Tuple([call_6920,call_6928,var_6929,var_6930,var_6931,call_6939,var_6940,])
output2 = relay.Tuple([call_6921,call_6932,var_6929,var_6930,var_6931,call_6941,var_6940,])
func_6947 = relay.Function([var_6929,var_6930,var_6931,var_6940,], output)
mod['func_6947'] = func_6947
mod = relay.transform.InferType()(mod)
var_6948 = relay.var("var_6948", dtype = "int16", shape = (126,))#candidate|6948|(126,)|var|int16
var_6949 = relay.var("var_6949", dtype = "int64", shape = (2002,))#candidate|6949|(2002,)|var|int64
var_6950 = relay.var("var_6950", dtype = "float32", shape = (1950,))#candidate|6950|(1950,)|var|float32
var_6951 = relay.var("var_6951", dtype = "float32", shape = (182,))#candidate|6951|(182,)|var|float32
output = func_6947(var_6948,var_6949,var_6950,var_6951,)
func_6952 = relay.Function([var_6948,var_6949,var_6950,var_6951,], output)
mutated_mod['func_6952'] = func_6952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_6960 = relay.TupleGetItem(func_6775_call(), 3)
call_6961 = relay.TupleGetItem(func_6777_call(), 3)
output = call_6960
output2 = call_6961
func_6965 = relay.Function([], output)
mod['func_6965'] = func_6965
mod = relay.transform.InferType()(mod)
output = func_6965()
func_6966 = relay.Function([], output)
mutated_mod['func_6966'] = func_6966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_6973 = relay.TupleGetItem(func_5400_call(), 3)
call_6974 = relay.TupleGetItem(func_5402_call(), 3)
uop_6977 = relay.tan(call_6973.astype('float64')) # shape=(8, 504, 12)
uop_6979 = relay.tan(call_6974.astype('float64')) # shape=(8, 504, 12)
var_6984 = relay.var("var_6984", dtype = "bool", shape = (8, 504, 12))#candidate|6984|(8, 504, 12)|var|bool
bop_6985 = relay.not_equal(call_6973.astype('bool'), relay.reshape(var_6984.astype('bool'), relay.shape_of(call_6973))) # shape=(8, 504, 12)
bop_6988 = relay.not_equal(call_6974.astype('bool'), relay.reshape(var_6984.astype('bool'), relay.shape_of(call_6974))) # shape=(8, 504, 12)
var_6994 = relay.var("var_6994", dtype = "float64", shape = (8, 504, 12))#candidate|6994|(8, 504, 12)|var|float64
bop_6995 = relay.minimum(uop_6977.astype('int8'), relay.reshape(var_6994.astype('int8'), relay.shape_of(uop_6977))) # shape=(8, 504, 12)
bop_6998 = relay.minimum(uop_6979.astype('int8'), relay.reshape(var_6994.astype('int8'), relay.shape_of(uop_6979))) # shape=(8, 504, 12)
func_6800_call = mod.get_global_var('func_6800')
func_6802_call = mutated_mod.get_global_var('func_6802')
var_7003 = relay.var("var_7003", dtype = "int64", shape = (2002,))#candidate|7003|(2002,)|var|int64
call_7002 = relay.TupleGetItem(func_6800_call(relay.reshape(var_7003.astype('int64'), [2002,])), 4)
call_7004 = relay.TupleGetItem(func_6802_call(relay.reshape(var_7003.astype('int64'), [2002,])), 4)
output = relay.Tuple([bop_6985,bop_6995,call_7002,var_7003,])
output2 = relay.Tuple([bop_6988,bop_6998,call_7004,var_7003,])
func_7005 = relay.Function([var_6984,var_6994,var_7003,], output)
mod['func_7005'] = func_7005
mod = relay.transform.InferType()(mod)
var_7006 = relay.var("var_7006", dtype = "bool", shape = (8, 504, 12))#candidate|7006|(8, 504, 12)|var|bool
var_7007 = relay.var("var_7007", dtype = "float64", shape = (8, 504, 12))#candidate|7007|(8, 504, 12)|var|float64
var_7008 = relay.var("var_7008", dtype = "int64", shape = (2002,))#candidate|7008|(2002,)|var|int64
output = func_7005(var_7006,var_7007,var_7008,)
func_7009 = relay.Function([var_7006,var_7007,var_7008,], output)
mutated_mod['func_7009'] = func_7009
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_7024 = relay.TupleGetItem(func_6775_call(), 0)
call_7025 = relay.TupleGetItem(func_6777_call(), 0)
func_5899_call = mod.get_global_var('func_5899')
func_5902_call = mutated_mod.get_global_var('func_5902')
const_7031 = relay.const([-6,-10,-2,2,9,10,4,-7,-9,-8,5,8,7,3,1,-4,9,-10,1,8,7,-9,9,-8,4,-7,-4,-7,5,3,-2,-2,10,-1,-4,-2,-1,6,8,8,9,-1,10,-6,-9,-2,-5,-9,4,8,3,3,-3,-1,2,-5,7,-6,5,4,2,-3,10,-5,-4,-4,-5,10,-5,-10,-2,-8,10,-6,9,-7,5,9,1,-10,7,3,-3,1,-4,3,-4,3,-8,-7,8,-7,3,6,9,1,2,-9,5,-2,-9,-4,-9,-6,-7,-3,6,-8,7,-5,2,4,7,10,3,4,-7,6,-7,-3,7,7,-8,-4,-1,-3,4,8,3,5,9,10,8,-4,-2,9,-2,3,-3,7,6,6,7,1,-1,-8,8,8,7,2,6,-7,8,-10,-8,3,-7,4,-3,6,3,-4,-5,8,-4,-1,10,1,-9,8,-10,-3,-2,-4,4,-10,-7,8,9,-4,-6,3,3,3,9,-9,-4,9,-9,-2,-5,10,9,2,5,10,10,-7,-9,5,2,6,-6,2,8,-8,6,-2,5,-2,-1,2,-6,-2,-7,-3,-1,-7,-4,4,-4,-4,10,7,2,-6,2,4,-4,2,-3,4,-4,3,-1,9,-9,6,-8,7,-4,3,-10,5,3,-9,2,4,-4,5,4,-1,-6,-4,-1,6,-3,-1,-8,-9,4,9,1,4,-10,1,3,-9,-10,-5,4,-6,2,10,-4,1,6,5,-3,5,10,-9,9,-3,-3,-9,2,5,-1,-2,-3,4,-4,1,10,1,1,4,-10,-8,-7,-1,2,-3,-9,9,-9,-5,4,10,-1,5,-3,-3,-7,-7,8,3,1,3,10,-4,-5,-2,7,2,-5,10,-9,10,-4,2,2,-1,3,5,-8,-4,9,3,-8,-4,3,10,6,7,6,3,-5,2,-10,3,5,-2,-3,-2,9,5,-9,3,-4,5,-10,-9,3,-6,8,1,-7,10,6,-3,8,-7,1,-10,2,7,4,-10,-9,9,4,-5,-5,-10,-6,5,1,1,-4,8,-8,10,3,10,4,1,3,10,-10,-8,5,2,-9,-7,6,1,-10,-8,10,-5,1,-4,-2,2,-5,10,-6,-6,-5,-10,-6,-7,-1,-1,4,3,2,10,2,-7,4,8,10,-7,-5,-6,-7,1,-7,-6,6,8,9,-3,-4,9,-6,10,-1,10,3,10,10,-7,-2,10,2,-10,-10,1,1,-1,-9,4,-7,7,-2,-1,8,1,-9,-2,1,-4,-4,4,-7,4,-6,-7,3,-5,2,-7,-4,-4,9,5,-7,2,6,-7,-3,-10,-9,3,2,7,6,6,-2,4,-8,5,10,9,5,8,6,6,4,9,9,-9,2,4,8,7,-1,-3,2,-6,7,5,-1,-1,2,10,-8,4,-6,3,-10,-2,-3,-1,-5,1,10,-5,7,-5,-8,10,-4,3,5,-6,8,-6,-2,-7,-4,1,4,-5,4,2,3,-7,6,-8,7,8,1,6,2,2,-2,8,-1,-9,-2,-8,-2,-3,6,-1,-5,-8,-4,-10,10,2,7,7,4,-2,6,-3,-4,9,6,-2,-1,-7,-7,-3,9,8,-7,3,-3,-8,-4,9,7,-9,-8,-4,-3,5,-8,-6,4,-4,-1,2,1,-2,3,4,-7,-5,-5,-3,-9,-8,-7,-5,-10,-1,7,4,-7,4,6,-10,-2,8,-3,6,9,1,10,-6,9,3,3,4,2,10,8,2,6,-7,-3,2,-7,-10,3,7,-5,5,-8,8,9,-9,-7,-8,3,3,-8,-9,-10,-2,-7,2,-1,-2,8,-8,-7,5,-8,-6,-10,-6,-3,-5,-8,-5,-8,-8,4,8,9,10,-3,-9,-1,1,-3,-2,-5,-9,-6,7,1,-2,7,-8,4,-2,4,7,6,7,-4,-6,-5,-2,-9,-4,-4,7,4,8,3,4,-3,1,8,9,-4,-3,-9,-2,1,9,10,-9,-1,-2,-8,10,-7,1,6,9,2,-10,4,9,8,5,6,-2,-2,9,-5,1,7,-9,-1,-4,-8,-6,-8,10,-7,-2,8,7,-2,-9,-5,-9,4,9,4,-10,10,5,-3,4,9,-10,-1,4,-5,-10,-5,7,7,-5,-9,-5,1,7,-6,-3,-8,-1,-1,-4,-10,-9,5,4,-9,-5,6,-9,4,2,-6,7,7,5,-5,-6,-5,-1,10,4,-6,8,-1,-10,3,-4,-8,-7,1,5,-10,10,-6,6,6,-5,-9,6,-2,-4,10,-7,1,5,5,7,-3,-9,-7,4,2,-8,4,10,2,-2,4,-3,3,-6,-10,-4,-9,1,-7,-9,-4,-10,1,-6,-6,5,10,-2,8,1,-10,-10,-7,2,5,3,-8,-10,6,4,-4,9,-9,-7,8,4,5,4,-4,-6,-10,8,3,-9,-2,1,3,10,-1,-8,8,-7,-5,-3,-9,-8,9,9,2,2,-10,-1,-1,7,-9,10,-9,10,-10,-5,-3,10,-6,3,6,1,-6,-10,-5,-8,-2,-4,7,-6,-7,10,1,10,-8,7,-8,-1,-3,1,8,2,10,-10,10,-8,5,6,9,-7,-9,-10,-5,1,-1,-5,4,8,5,-2,4,-1,9,8,3,4,10,-9,6,2,-2,8,-6,9,6,6,5,-2,-7,2,-6,2,-10,-2,2,-4,10,-10,8,-8,5,6,-3,4,-9,-10,1,-2,6,5,-7,-2,-1,-3,-6,-5,7,10,-10,-2,9,5,-5,-10,2,-8,-6,-5,-5,-10,-1,1,-6,10,5,8,-3,3,1,-10,3,-1,-8,-8,7,5,2,-6,5,8,-7,4,-9,-9,-4,-5,-6,-6,3,9,-3,-7,-8,-5,10,-5,-10,-6,-7,1,-1,8,1,2,-1,5,5,1,7,-10,-1,-2,5,-10,-3,6,5,1,-10,-1,6,-7,10,-6,-3,-1,-1,-5,-3,1,-4,-9,-10,9,5,-3,8,4,7,2,-8,6,8,-8,-6,6,-5,-1,7,-9,9,-5,-3,4,1,-1,9,-10,7,-9,-8,-5,3,-2,-5,5,4,-3,-3,6,-3,4,-4,-10,-6,-6,-5,1,-4,-10,-5,-4,-9,5,-4,-7,-8,8,9,3,-6,-2,-7,-10,-8,-3,-7,2,-4,5,10,4,5,9,9,-9,-2,-9,-4,1,9,-4,3,-10,3,-6,9,10,-3,8,-3,-8,-8,4,-5,-5,-3,1,-3,2,8,8,7,3,-6,-1,-8,4,5,9,6,-6,-10,-2,8,10,9,3,-5,5,7,-2,4,-2,-5,3,-2,-10,-4,7,6,7,-7,-3,-7,8,6,-1,-8,-1,2,6,-1,-10,1,-8,-7,6,5,10,10,10,-8,6,1,-10,-1,1,-5,10,8,-4,-1,3,-2,2,1,-9,10,-6,3,8], dtype = "uint64")#candidate|7031|(1280,)|const|uint64
var_7032 = relay.var("var_7032", dtype = "float64", shape = (1, 504))#candidate|7032|(1, 504)|var|float64
call_7030 = relay.TupleGetItem(func_5899_call(relay.reshape(const_7031.astype('uint64'), [16, 10, 8]), relay.reshape(var_7032.astype('float64'), [504,]), ), 0)
call_7033 = relay.TupleGetItem(func_5902_call(relay.reshape(const_7031.astype('uint64'), [16, 10, 8]), relay.reshape(var_7032.astype('float64'), [504,]), ), 0)
output = relay.Tuple([call_7024,call_7030,const_7031,var_7032,])
output2 = relay.Tuple([call_7025,call_7033,const_7031,var_7032,])
func_7034 = relay.Function([var_7032,], output)
mod['func_7034'] = func_7034
mod = relay.transform.InferType()(mod)
mutated_mod['func_7034'] = func_7034
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7035 = relay.var("var_7035", dtype = "float64", shape = (1, 504))#candidate|7035|(1, 504)|var|float64
func_7034_call = mutated_mod.get_global_var('func_7034')
call_7036 = func_7034_call(var_7035)
output = call_7036
func_7037 = relay.Function([var_7035], output)
mutated_mod['func_7037'] = func_7037
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_7102 = func_6080_call()
call_7103 = func_6080_call()
output = relay.Tuple([call_7102,])
output2 = relay.Tuple([call_7103,])
func_7114 = relay.Function([], output)
mod['func_7114'] = func_7114
mod = relay.transform.InferType()(mod)
output = func_7114()
func_7115 = relay.Function([], output)
mutated_mod['func_7115'] = func_7115
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6965_call = mod.get_global_var('func_6965')
func_6966_call = mutated_mod.get_global_var('func_6966')
call_7221 = func_6965_call()
call_7222 = func_6965_call()
output = relay.Tuple([call_7221,])
output2 = relay.Tuple([call_7222,])
func_7223 = relay.Function([], output)
mod['func_7223'] = func_7223
mod = relay.transform.InferType()(mod)
output = func_7223()
func_7224 = relay.Function([], output)
mutated_mod['func_7224'] = func_7224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_7233 = relay.TupleGetItem(func_6374_call(), 0)
call_7234 = relay.TupleGetItem(func_6376_call(), 0)
output = relay.Tuple([call_7233,])
output2 = relay.Tuple([call_7234,])
func_7242 = relay.Function([], output)
mod['func_7242'] = func_7242
mod = relay.transform.InferType()(mod)
output = func_7242()
func_7243 = relay.Function([], output)
mutated_mod['func_7243'] = func_7243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_7274 = relay.TupleGetItem(func_5961_call(), 1)
call_7275 = relay.TupleGetItem(func_5962_call(), 1)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_7305 = relay.TupleGetItem(func_5551_call(), 0)
call_7306 = relay.TupleGetItem(func_5553_call(), 0)
uop_7309 = relay.log(call_7274.astype('float64')) # shape=(5, 9, 11)
uop_7311 = relay.log(call_7275.astype('float64')) # shape=(5, 9, 11)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_7320 = relay.TupleGetItem(func_6775_call(), 0)
call_7321 = relay.TupleGetItem(func_6777_call(), 0)
uop_7342 = relay.tan(uop_7309.astype('float64')) # shape=(5, 9, 11)
uop_7344 = relay.tan(uop_7311.astype('float64')) # shape=(5, 9, 11)
output = relay.Tuple([call_7305,call_7320,uop_7342,])
output2 = relay.Tuple([call_7306,call_7321,uop_7344,])
func_7370 = relay.Function([], output)
mod['func_7370'] = func_7370
mod = relay.transform.InferType()(mod)
output = func_7370()
func_7371 = relay.Function([], output)
mutated_mod['func_7371'] = func_7371
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6069_call = mod.get_global_var('func_6069')
func_6070_call = mutated_mod.get_global_var('func_6070')
call_7468 = relay.TupleGetItem(func_6069_call(), 1)
call_7469 = relay.TupleGetItem(func_6070_call(), 1)
func_6040_call = mod.get_global_var('func_6040')
func_6043_call = mutated_mod.get_global_var('func_6043')
const_7493 = relay.const([-6,3,-4,5,-8,7,-7,3,-9,-6,9,-10,9,-4,-2,-7,3,2,-3,-5,3,4,-9,5,-10,-4,1,3,3,-6,-2,1,-4,-3,3,7], dtype = "int32")#candidate|7493|(36,)|const|int32
const_7494 = relay.const([5,-10,9,-3,1,8,-5,-3,8,-3,1,4,-6,3,3,7,-6,-8,7,2,5,-3,-3,-1,-2,-9,-4,6,-10,-3,2,10,-7,7,-2,-3,8,-9,-2,1,-7,-4,3,-10,8,-9,3,10,-8,5,5,8,6,6,8,-2,8,-7,-8,8,-10,8,-6,5,-7,-5,8,10,9,-2,3,-3,3,-4,6,-9,-8,-10,-7,-8,5,9,-7,9,-4,4,-6,10,6,10,-7,8,6,-10,5,9,1,5,-8,-5,-5,10,7,-3,-4,-7,-2,6,3,2,4,-9,-9,7,9,10,3,9,1,-5,3,-8,6,-4,10,8,7,-2,-2,-6,1,8,7,7,7,3,-3,6,4,8,-6,-1,4,9,-2,-10,10,-8,5,-3,7,-6,-8,2,4,8,-8,3,2,-9,-7,-7,7,4,-3,6,-6,2,7,-5,-4,1,2,4,-5,8,2,-1,-3,2,-5,-5,3,4,-9,-10,-4,3,-2,9,9,-3,3,9,10,-1,4,-5,-1,-6,6,1,5,-5,10,8,3,10,7,1,3,-2,6,-3,-4,7,-4,-1,4,-10,2,-4,1,-1,3,4,4,4,-3,8,7,1,-4,4,8,2,2,-7,10,-9,-1,-1,-1,8,-4,-3,-2,4,-7,-5,10,7,3,-7,3,8,-1,1,-5,-9,-5,-10,9,4,10,-10,-7,6,-2,-5,-1,1,3,7,8,7,-8,-10,-10,-2,-4,-5,-3,10,-4,-2,-9,8,-2,-10,-10,-6,5,-5,2,5,2,-4,-3,-10,-3,-3,-5,6,7,-10,4,-5,-3,2,-8,9,1,4,-10,-10,-7,5,5,9,-7,8,4,8], dtype = "int32")#candidate|7494|(324,)|const|int32
call_7492 = relay.TupleGetItem(func_6040_call(relay.reshape(const_7493.astype('int32'), [36,]), relay.reshape(const_7494.astype('int32'), [324,]), ), 3)
call_7495 = relay.TupleGetItem(func_6043_call(relay.reshape(const_7493.astype('int32'), [36,]), relay.reshape(const_7494.astype('int32'), [324,]), ), 3)
output = relay.Tuple([call_7468,call_7492,const_7493,const_7494,])
output2 = relay.Tuple([call_7469,call_7495,const_7493,const_7494,])
func_7499 = relay.Function([], output)
mod['func_7499'] = func_7499
mod = relay.transform.InferType()(mod)
output = func_7499()
func_7500 = relay.Function([], output)
mutated_mod['func_7500'] = func_7500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_7514 = relay.TupleGetItem(func_5961_call(), 1)
call_7515 = relay.TupleGetItem(func_5962_call(), 1)
func_7242_call = mod.get_global_var('func_7242')
func_7243_call = mutated_mod.get_global_var('func_7243')
call_7526 = relay.TupleGetItem(func_7242_call(), 0)
call_7527 = relay.TupleGetItem(func_7243_call(), 0)
func_5492_call = mod.get_global_var('func_5492')
func_5498_call = mutated_mod.get_global_var('func_5498')
var_7537 = relay.var("var_7537", dtype = "float64", shape = (420,))#candidate|7537|(420,)|var|float64
var_7538 = relay.var("var_7538", dtype = "int32", shape = (36,))#candidate|7538|(36,)|var|int32
const_7539 = relay.const([[-7.694010,-4.623377],[-6.457245,-2.474236],[-2.893316,5.821804],[-3.135503,3.796546],[-3.373801,6.604215],[8.749433,-0.298686],[-6.247332,-1.309443],[0.746252,-4.026246],[3.335299,0.086180],[5.151297,-8.650494],[3.073439,-3.987432],[8.884252,6.678328],[-5.386192,-2.475864],[1.815457,6.119751],[-5.615229,-7.611345],[4.769776,2.073251],[-2.283425,-4.979144],[-8.445048,4.619493],[-8.273506,-4.189531],[7.294603,5.241882],[-6.111580,4.417657],[-0.467541,4.497446],[-5.116039,-8.520242],[6.475819,0.680965],[6.500866,8.664326],[-4.954276,7.649555],[2.034677,-2.178804],[-4.115183,-5.743984],[8.159756,-5.198631],[-5.211420,7.913723],[9.187441,-8.267623],[1.646055,-0.590841],[-5.209306,8.143298],[-3.476220,5.735610],[-1.282099,-6.451435],[-1.963096,5.576307],[4.118920,7.951743],[-8.498551,-1.598879],[0.210869,-0.404730],[-5.488376,8.236756],[-2.996718,7.635544],[0.146470,-3.080320],[6.336669,-6.202283],[6.635038,9.597989],[0.199549,-9.308294],[3.849785,-1.952349],[-2.098047,-0.518154],[3.636721,0.521353],[-5.303670,0.138339],[8.339877,1.687734],[-3.447477,-2.357867],[3.863283,-5.742962],[8.450147,-8.034518],[-1.366666,4.257145],[3.704789,9.301572],[3.498679,0.060483],[-6.933477,7.746389],[-7.566994,-1.183360],[8.586335,0.834190],[-4.690038,9.123464],[-6.243325,3.199320],[-9.409467,8.685175],[-6.098725,5.431886],[2.704147,7.119484],[1.814554,-8.368432],[1.238564,-1.044548],[7.590829,4.744856],[-6.285928,8.995971],[4.418068,4.141044],[0.548293,5.023180],[3.637315,6.946568],[9.285435,-2.864150],[-4.979320,1.825216],[1.324679,-6.538225],[9.510216,4.157930],[-0.022684,-2.868345],[7.172501,-5.722218],[5.694147,-9.293618],[-1.378895,4.000372],[-2.056568,-7.559907],[-5.937895,-2.114137],[2.160153,1.274046],[-0.258365,-0.737114],[5.505767,-3.456346],[-2.037228,-2.318974],[6.776364,7.835885],[-9.481682,3.181368],[-1.034117,0.462215],[9.115168,7.776423],[-7.166538,2.359967],[1.320762,-2.333930],[0.644917,2.405970],[3.531657,4.607987],[-7.161736,-4.632011],[6.973643,1.695222],[9.952103,0.796634],[-5.181149,5.711482],[3.892516,9.334669],[5.629013,6.169862],[0.793240,-0.185356],[-0.535597,1.189628],[-7.095633,-7.710569],[6.639318,-8.744792],[-5.646370,-8.824530],[-1.481843,-8.592772],[-7.366316,-4.012079],[0.315779,-1.025876],[-8.641823,1.397158],[-9.890601,5.538008],[-6.281416,7.721366],[0.670232,-0.384482],[3.463839,-9.432290],[-6.235008,5.175557],[-2.997338,-8.252812],[2.244605,-7.847521],[-4.330067,9.283634],[-5.230631,2.438458],[-9.494526,6.768619],[-1.810711,1.042529],[-0.941355,7.223406],[-1.156181,8.321055],[-4.256830,-7.904925],[0.626288,4.765789],[-4.485890,-2.378057],[5.995375,6.744179],[-8.494182,5.576623],[-1.930095,-2.653769],[-3.371715,-0.009806],[-6.593296,-1.882385],[1.988677,4.941943],[1.871413,-1.910686],[7.579714,6.641423],[5.370410,-8.910708],[9.168972,-8.445009],[-6.021226,-0.053645],[5.224799,-2.235003],[-0.026527,-3.770930],[8.113278,-9.734385],[6.577125,8.413931],[-6.762684,9.964616],[2.264718,0.648020],[-4.062409,3.411468],[7.360988,8.416580],[-9.585164,-6.139749],[-4.385536,-0.611583],[-0.872299,7.643477],[-3.229029,-9.437273],[0.200731,-3.274315],[3.742441,3.169929],[8.844478,6.851808],[-3.272331,7.980360],[-0.022439,2.399777],[4.548712,-0.320460],[0.287948,4.775347],[-2.141428,-7.418690],[4.423251,3.016399],[-4.263569,-8.386023],[0.028274,-1.784115],[5.721197,-1.684066],[-2.014336,-1.886087],[7.664832,6.324461],[-3.864826,-2.256787],[8.975744,-8.542804],[5.991898,6.197510],[-5.626542,-5.203678],[3.851377,4.355447],[-4.024426,-3.740209],[-9.577278,-9.406738],[-3.458803,-0.733413],[-3.372584,0.968390],[4.440689,0.433950],[5.147265,-4.412442],[-1.272937,3.488301],[-4.131221,-8.173478],[-7.529837,7.511152],[-2.167621,8.211463],[3.092112,6.340016],[-5.733976,2.646744],[7.886758,3.939966],[-7.224737,-6.159113],[-1.405093,-2.335717],[4.958735,3.602128]], dtype = "float64")#candidate|7539|(182, 2)|const|float64
var_7540 = relay.var("var_7540", dtype = "int32", shape = (16, 112))#candidate|7540|(16, 112)|var|int32
const_7541 = relay.const([-2.565481,0.142250,9.873215,-8.197105,-2.959650,-4.568115,-9.975288,-4.410599,6.338144,0.479697,-8.493881,7.669052,-4.478234,-9.732583,-0.125375,0.489252,0.543040,-8.685187,6.632535,7.448987,2.985572,-3.157220,-0.430554,2.022243,-0.568000,1.292052,-9.689063,6.594767,6.804405,-9.275442,9.108486,-3.891665,-5.107300,1.083287,-1.266130,0.765357,1.833207,9.998274,6.413487,8.557622,5.512229,-3.406181,-6.117991,4.377692,3.229785,3.640660,7.046475,3.920695,-7.114045,1.130515,-7.425693,1.137310,-3.859687,4.751861,0.893996,-2.322620,6.030315,-3.000953,-5.352873,6.910181,2.351501,8.982426,7.648507,-9.446461,7.667367,-6.416382,3.100464,2.950992,-4.937595,9.576136,-0.673344,-3.688894,-3.996918,2.557081,-8.341058,-3.160731,6.968032,-9.380663,-6.493478,-1.844273,-7.946297,5.107343,-5.548807,-0.734682,-9.687825,-2.609546,6.182520,-5.134106,3.621698,-2.530035,6.240249,8.642824,-9.473000,6.019190,3.349672,8.740801,-1.230041,1.342459,8.079505,1.516334,7.655331,-8.479545,-4.700294,-8.034720,-6.515019,-0.932787,6.804770,-2.927891,9.440720,-6.364730,-6.880131,0.076120,9.907190,3.920157,-6.183224,-1.313716,0.992062,-6.276265,2.709622,9.421772,6.495603,6.072156,-6.984740,2.422870,5.008559,-8.857058,2.259967,-2.345324,-4.901186,0.386360,-3.103356,-4.736990,9.471602,-5.377837,3.484735,-4.185428,3.518120,2.609941,-2.926290,1.396330,-8.989002,9.497851,4.786026,-5.930364,2.219114,-2.407006,9.971264,9.418165,3.584396,-0.392839,-0.024920,-3.135009,-7.196221,4.737047,-9.328030,0.616206,-1.326106,-7.401292,-3.549884,9.235463,-5.117874,-1.234031,-1.043013,-9.339712,7.940764,-9.129518,-2.104290,9.272826,-4.413863,2.238444,3.250090,7.640098,9.292486,-3.532053,6.278520,9.813108,0.508978,2.364471,-0.176317,-4.334507,-8.423683,8.936543,3.265860,-7.270598,4.513422,-2.844957,-1.777262,-3.758827,4.004973,0.322588,-6.613845,-1.571879,-7.937884,0.669292,-1.288655,-0.560073,-6.722227,1.964271,-2.458345,7.451532,8.411295,9.547888,8.781264,6.690310,-8.142871,0.943544,7.069627,-6.949415,-9.868031,-8.044588,0.848984,2.662222,-1.357976,1.016532,-8.822865,-5.562142,-5.663931,5.818281,4.567048,-8.067184,-3.719216,-0.677952,-7.794866,3.104642,-1.067143,5.088652,8.184462,9.487038,3.437748,-8.313472,9.680397,9.807652,-7.740671,-6.197072,9.287795,5.563485,-1.641373,0.449549,4.328211,0.283767,8.072147,0.633801,-6.058455,-6.157003,-0.123073,9.742506,-8.507389,3.574540,-0.579730,-3.822457,4.252536,1.279060,-3.401146,-6.758962,5.438050,8.367251,-0.950244,7.604921,-3.251423,-5.170209,9.661003,-9.282269,-8.751813,-0.679995,0.097508,-1.620828,4.755648,6.108428,-8.584651,9.754775,5.225425,-6.030718,7.158128,-1.573561,-2.541567,-1.183466,0.965653,9.494683,6.634092,-2.813703,-9.564620,9.286942,-9.253265,7.499584,-8.629833,-3.490807,-8.818484,7.340231,5.881378,7.979637,-2.379284,9.845032,-7.583882,2.724638,-1.511875,8.480484,-6.090940,-9.069575,1.102351,6.631731,-3.726555,3.368728,4.589638,7.572514,9.754912,-2.430385,-2.439406,0.973599,-2.416930,-7.237648,-5.944383,6.594252,-7.882899,1.368066,-2.071352,8.470007,-8.523413,4.933335,1.939735,-7.902156,8.513929,-7.501407,-1.209532,-3.176201,-7.938031,-9.668112,-7.827583,7.633124,6.238080,-9.195648,-0.228339,6.977453,7.582487,-5.132466,6.455157,3.361071,8.989126,-0.737180,0.644588,-4.248695,-8.500452,-4.341547,-9.736070,6.252800,-2.296110,5.308402,-4.213925,2.376153,2.743815,-4.532300,4.338498,9.855938,-1.296494,-3.678472,9.669068,0.908296,7.668714,-8.812626,-3.783428,-7.489791,-4.682145,4.949499,-6.898680,-3.293125,-7.766060,-6.419497,-3.671082,-6.939756,5.229755,-5.018340,3.962734,-1.506243,3.871033,-2.253797,3.089799,-9.070881,2.655991,-6.540829,-9.868103,3.717532,7.793566,-5.199320,-3.438423,-0.132458,-5.992820,-3.063458,0.365346,-8.484123,1.883778,-0.599722,4.501655,-0.829259,-2.565256,-9.204313,6.563641,6.278419,4.212143,-7.391752,-2.050235,-5.241113,0.846097,-9.481780,6.230689,2.149373,7.529503,2.680405,-3.753405,7.990747,-2.497160,-9.194144,-9.450681,3.054463,8.487369,6.388583,-0.520128,-5.256414,-4.989961,-4.064319,-0.904466,-9.630952,9.851875,-6.197253,-9.529600,-3.685532,-7.472417,-5.618845,-3.132641,-6.099474,-7.705750,2.002089,0.342632,-6.418169,-4.458365,-0.461335,7.513914,0.690587,-4.927397,-7.320905,3.081588,-6.489886,8.385813,-0.626665,-6.234932,-7.030942,-0.889678,3.017450,8.315987,2.967133,9.275407,-0.597570,1.053684,6.218061,-2.451108,-7.369373,2.134399,2.357216,2.795231,-6.426468,-1.545681,-1.031086,0.206919,0.650544,-9.461365,-6.611974,-8.248055,-1.635919,-8.280479,4.892504,5.095272,6.634372,-6.017970,-6.967700,-2.086664,0.270867,8.639309,-6.043326,-5.371398,7.190289,-7.091116,-4.626951,8.891139,-3.914807,-3.714277,-2.272607,6.853847,-1.554879,-2.478654,-3.481482,-8.534335,2.540877,3.912222,-1.713770,8.924366,-3.733856,6.551818,-2.746410,4.708910,0.357980,2.367483,-7.465204,9.802400,-3.933822,1.736537,-2.076751,5.033047,9.111700,9.837081,-0.490218,6.387242,1.593298,6.500111,8.973211,-5.505605,-5.903518,-1.222376,9.507341,-8.185182,1.309942,-1.062098,9.116764,-7.256940,-0.528775,-8.068274,-1.868577,-3.305992,-3.344189,-5.122384,-6.625452,-5.979775,-3.300184,1.898281,-4.058242,6.419500,8.899087,-0.634079,8.827842,1.128767,-2.547315,-3.525873,-8.428857,-2.008244,-3.302952,-1.254934,-2.752315,-8.455175,-0.341522,-1.967413,0.461998,-8.276793,9.903179,8.796064,9.217880,-7.247669,-5.647253,5.513936,0.668387,2.696402,-4.109180,6.343102,1.295104,7.327658,0.947233,-0.425569,5.828790,-8.391423,4.000414,-4.603797,-7.140881,1.069164,0.366045,9.838716,-7.516678,6.808529,8.980776,2.099608,-3.218915,-6.479869,-5.937130,-3.295015,3.729535,-3.504854,-5.364321,-7.885323,-8.157381,7.745253,-1.423738,-1.960189,1.997138,7.498397,-0.545329,6.853399,6.231635,9.605924,8.512114,4.806574,-7.532035,1.528956,-8.560490,3.553640,0.231772,9.551199,-6.532162,6.119318,3.891221,-1.379030,2.424758,-8.166086,2.244591,5.074837,9.842370,2.377584,-7.882277,-5.790804,-3.072802,2.725917,-6.681568,7.325550,1.189813,-5.619750,0.195116,-9.886463,5.032926,2.073916,-2.371241,3.888601,-7.338210,6.455268,3.472252,6.262326,-1.861728,-8.262565,1.768423,0.597942,-3.214333,5.338758,-7.046156,-6.041505,-5.518320,-5.839253,-7.629973,-0.213699,-1.793817,-7.128919,7.981061,-2.679131,-8.336238,-5.290233,-4.000980,-5.463378,-3.866630,4.131043,-6.440580,-3.399749,0.643587,5.306388,-5.316910,-3.966081,-5.806072,-6.901085,0.565496,2.303345,4.204013,8.800664,7.628336,-1.742173,-5.907975,-4.380754,-2.517380,3.211062,1.668543,9.642668,0.570198,-8.343876,-8.145156,8.999285,9.983672,-9.705441,7.557943,1.218774,6.821496,-7.754169,8.777134,-1.253299,4.300361,5.000086,3.190037,-6.543447,4.764895,-9.118175,2.957264,2.144156,-2.120545,-5.228084,8.075476,-8.359471,2.085093,-6.189326,2.738098,-6.558042,5.414822,6.814983,1.289935,6.219040,-4.505765,-3.702914,0.287957,7.131441,4.043599,3.227209,8.139292,-3.052199,-7.914464,0.338764,1.947614,-4.034764,9.753427,6.767933,2.310933,6.526709,-5.105454,-2.498102,1.473236,3.933061,4.509696,-2.153153,-6.184334,7.539272,3.400050,-1.931741,0.667448,1.779327,-2.849514,0.548157,4.094484,-2.456940,-2.306452,-8.923783,-9.800888,7.335365,-4.507788,-8.978254,-2.034495,-4.891398,-9.415657,-2.910906,2.316921,-9.057303,2.980496,-6.784476,3.341806,-6.222411,6.102900,4.031491,8.967042,8.930892,-8.832504,-7.543603,8.284647,7.216982,-0.898387,2.068421,4.874447,1.091663,6.860854,-4.094371,-8.448211,1.246134,1.115366,8.770429,5.263632,-4.903738,-6.079962,-0.512927,9.988798,1.541961,6.019565,-4.112557,4.154695,7.282919,1.707127,8.325417,3.391836,5.361796,4.249899,9.257787,0.479152,1.689568,-2.284287,8.222528,0.950951,5.858076,-3.479398,0.887175,-8.041665,-5.552046,-5.581174,3.891236,-8.775345,-8.430015,-6.430372,-7.921768,-3.482895,5.490792,7.789545,-4.408265,-8.326690,-0.196357,7.981100,-8.318569,-5.482677,8.280943,-1.763800,-0.537619,2.337251,-2.806129,-8.805827,6.672792,-1.920046,-9.725369,-3.667498,-5.029208,-3.918691,4.907562,2.621649,3.481251,-5.079388,-3.166793,-5.633836,-2.134770,-1.964578,0.156859,0.279520,7.252324,6.498611,-6.244991,-0.596907,-8.375023,0.139025,0.552109,2.038147,-9.446010,1.694924,-3.731057,-5.503215,-5.603180,-5.013535,1.148928,-6.853810,0.259867,-0.248160,1.658546,0.265638,-4.810079,5.344367,8.946007,-0.291008,4.244552,-8.393329,3.265657,-7.464388,9.778657,4.169922,-5.323473,0.989552,-5.466248,4.601879,7.194147,2.846909,1.420480,7.790213,-9.445479,8.891687,2.430528,2.861454,-4.414402,-8.865035,-3.397647,-3.555895,-3.832775,8.383280,-5.518136,-3.727854,8.183034,4.773950,7.337531,8.527100,-6.519284,3.504394,-7.176889,8.439369,-5.027643,7.517843,0.646456,6.666440,7.463128,-3.932292,-7.862779,2.677204,2.953640,-4.734756,6.599091,-0.064683,-6.645264,-3.347074,-9.370497,2.302006,0.098632,-0.633533,3.734301,-1.244955,-9.608437,-2.035585,-4.569882,-4.247001,-1.098256,-1.809941,-4.985207,9.225698,-9.016393,4.574404,6.986178,0.241121,9.851827,-0.258821,6.972457,-8.816645,4.044479,-6.704392,-5.850029,5.907334,-0.145248,0.696508,-8.812906,4.043961,-8.607070,-9.030649,-3.956669,-4.649596,1.538309,-3.778278,-9.253906,-6.390721,7.232512,2.902022,1.558310,-2.550879,-6.423633,-9.004288,-0.564416,9.588721,-8.674191,9.741163,7.138523,9.273541,-2.485240,7.671067,-9.750327,-2.625477,1.634844,8.663872,0.368262,-2.994528,8.084750,-9.211244,-8.249004,-8.844845,2.063207,6.528198,-2.137745,2.707664,-7.288768,2.674696,-4.030634,-6.238391,9.298629,-5.715727,4.285259,-9.035671,0.218240,2.461989,-3.422320,5.966372,7.510678,-8.119355,5.049515,-4.005118,-4.130545,-4.187821,9.190904,-4.235641,-4.402582,5.883224,9.293316,7.702165,4.678274,2.936014,-1.786913,0.873586,4.790064,4.881749,-6.628546,1.418060,0.259553,1.380292,-5.912078,9.703553,7.521231,1.280668,-3.802166,7.075357,0.242686,9.834789,1.040723,1.405923,-1.241061,7.212701,-0.449654,-9.127906,-2.153266,-6.047369,8.914759,-4.284830,2.393431,-6.827545,-1.064048,2.697994,-9.129422,3.356558,1.137941,-7.525787,-5.908109,-8.420608,-5.707019,-2.342883,6.756691,-6.854062,6.710692,3.357177,-4.165033,-3.037390,7.907400,-4.160621,5.635309,-0.723251,-5.869513,-4.637211,-3.693677,4.180367,5.450393,-8.560581,-4.472921,-0.997554,2.204389,-6.140512,5.641230,-5.260941,-9.112116,-5.165262,-5.595831,6.414678,4.242316,7.281961,-0.443886,0.996232,5.511293,-8.825450,-3.098656,2.149242,-1.286917,6.587604,-5.315315,4.575780,-4.375877,-7.533129,-6.262574,9.000790,-6.610044,2.082236,9.674118,-6.965844,-4.093469,-1.766071,3.243871,-4.547751,-1.872661,6.116767,4.218782,4.706425,-9.529169,7.296520,4.846433,7.054859,2.511663,1.337626,9.369036,2.212656,-6.865493,-3.765338,7.627539,-9.695466,-8.915913,1.912788,-7.424987,4.308352,-1.046574,4.534887,4.349763,5.278175,9.275567,2.257541,2.896418,2.145599,-6.024343,6.858282,-1.240283,5.050495,-1.883017,5.948256,-9.486149,9.696431,1.060880,-4.552172,0.394709,5.736980,-5.399455,3.968858,-5.602678,-4.595940,-6.058033,-0.043818,3.023263,0.584732,-1.793152,-3.489690,9.738201,-2.576701,-7.882550,4.641318,-1.079140,-4.383855,7.446560,-2.827675,-0.017836,1.463962,7.764029,-6.408617,7.221181,-6.365829,-9.834080,-1.921217,-3.698399,-0.292309,-1.717867,8.233922,-8.071339,8.277558,2.624067,8.186568,-6.443014,5.357616,2.594904,-2.347794,7.620020,-7.416071,7.595740,-6.364257,9.663381,-2.973225,-8.390747,6.008163,-6.825150,1.405595,-7.649488,5.719658,0.949690,-8.508150,-6.331955,3.523515,4.750419,5.640848,5.667577,1.810316,-4.958117,-9.668127,5.087991,-8.158400,-5.765277,7.401458,-6.682547,-4.137908,1.235254,-4.161583,4.349489,-1.847021,-7.236880,-1.182537,5.432418,-8.503422,9.374880,-7.472240,-7.936721,-7.262843,-0.109967,-7.340470,1.605898,-0.635543,9.404500,-6.111383,8.754370,-9.496968,9.481175,7.756465,-7.786965,-3.013245,-5.725700,-7.663598,1.022150,0.598283,-8.004836,9.462388,-8.813118,2.714570,-3.373704,7.863468,-0.261262,5.640366,-6.501582,-8.639583,0.659548,-4.112428,1.838138,-2.340088,-0.956910,4.318213,4.843495,-7.236686,-2.185510,-7.703231,2.917075,-0.509815,0.704226,6.356240,-2.255001,-4.032555,0.404172,4.821051,9.204222,9.877122,-4.404309,-4.969814,5.952209,3.251239,-1.427263,5.196533,9.919833,1.393031,1.364375,-5.029036,-1.524351,0.663177,-6.596976,1.909004,3.989868,9.298911,8.763453,4.012825,-4.014283,-9.758867,-7.132540,-1.870166,-2.691627,-3.623556,0.887193,5.001406,6.437412,4.274938,-6.226256,5.541935,7.754167,6.458701,8.249592,-4.865720,9.499664,-0.181705,-5.770794,-3.701456,9.810183,-0.418746,3.141382,-0.777582,5.005733,-3.296625,-7.070444,5.583183,-0.711601,-5.281091,0.114323,8.364434,-3.384326,0.017668,9.676577,2.030867,-4.724012,4.648212,4.592805,3.875755,4.748701,-4.580184,8.979342,4.105675,-9.439097,6.677216,-4.094511,1.773541,8.997978,3.746135,-7.654407,2.387862,8.752227,-0.428706,-1.372427,9.168868,-9.011074,-2.787989,0.250115,1.329293,0.740601,1.316598,-1.803548,-8.291147,8.515119,-0.103771,-3.252602,6.349298,-5.069235,3.167242,2.023387,-7.226736,-3.530025,6.461147,-7.926449,-7.925991,-5.065465,-5.269719,-5.373406,-0.133243,-6.329952,7.229093,-3.406014,-9.193243,-0.599659,9.513073,-6.685482,7.376357,-7.105399,-6.860780,-8.662644,3.209455,5.621076,7.096274,-4.288631,5.743729,-2.981040,-3.165188,7.514822,1.208718,-4.578451,0.155735,-2.965826,8.422777,-4.340396,0.413263,-6.509402,6.655914,-9.598028,4.998855,-1.306049,-5.968899,1.566285,8.719044,2.166625,9.829274,9.895910,7.853750,2.685884,2.265877,-6.354291,-1.884036,1.965223,-9.557551,-5.818328,-0.985037,9.963055,2.234281,8.629889,4.744189,4.844609,-4.967200,-4.779146,-6.972749,0.411950,3.103689,8.621388,-6.314435,5.726395,-9.269305,4.480118,-0.578171,1.962589,0.496970,-3.838731,-7.818191,0.417532,-0.922672,-6.369072,-7.128801,-1.948819,8.495177,8.879983,-0.008023,1.060153,0.064696,-6.631510,0.049850,0.001035,-0.909136,4.721757,-7.093201,-7.750008,-0.369992,0.687400,-1.050251,-0.644256,9.682826,0.954876,-2.914404,7.471381,6.950962,6.266858,6.276889,-5.309634,-8.202875,-8.507393,-2.860214,-1.548934,5.172695,2.175674,8.943471,-0.678368,-0.388427,6.374471,-3.626183,-6.496632,-4.920363,-6.806981,-9.530775,1.198157,-6.923656,0.378835,-3.865651,-0.828294,-3.720444,9.433463,5.400465,-2.103595,-1.336977,9.639572,-7.862669,-5.289214,1.914579,7.428819,6.839193,5.693011,-1.259711,2.084172,-9.623412,4.849265,8.769113,-6.213272,-2.699485,-7.380686,-3.675978,9.685245,3.101164,0.868786,-7.448484,4.578493,-9.647447,1.673002,2.639069,7.509654,-4.278637,-0.702064,-0.726114,8.330681,-0.546755,0.021047,2.786495,6.857657,-8.569827,2.608532,0.189053,8.528100,1.962542,9.406514,7.091834,-5.396073,6.323492,1.274706,-2.846614,-9.671859,7.306128,4.068018,-0.848806,5.152059,-5.918786,9.916137,8.395387,6.964764,2.565890,-2.141353,3.514221,2.088093,7.197387,-1.312476,0.716224,-2.673428,-8.207810,7.076107,9.600031,-5.125947,5.900275,7.689847,-6.231751,-5.244271,1.979477,-9.437902,0.386229,5.705995,-1.143450,-9.981016,-7.572588,-0.774051,4.151089,2.225833,4.790602,-1.976854,6.409678,6.904731,-8.731252,-9.790106,-2.551411,-3.023041,-7.711498,6.411836,-9.407594,-9.978347,-0.035185,3.446885,-3.560526,-8.793799,-6.181221,-5.318156,2.428755,3.684280,5.327021,3.845495,-1.225855,-5.700771,-2.813034,-7.380646,6.701387,0.477936,8.881739,5.570472,-3.269076,7.418392,-6.292014,-8.733818,-5.643124,2.214776,8.681507,4.593995,2.415260,-2.089551,0.705823,-0.793315,7.087418,2.449095,-7.410073,-8.272755,-4.920489,-2.910086,-3.041883,-0.446671,-5.121167,-5.629217,9.759126,-9.075541,9.086090,-1.180335,2.152020,-1.268319,-3.737478,2.148369,-5.565919,1.574601,-1.084293,-9.728272,9.699345,7.196794,-8.799207,7.527325,7.680202,-9.397635,7.609006,-7.452841,2.651441,7.654647,-3.198979,6.501238,6.792671,4.193956,-4.550745,-5.142332,3.959193,8.882883,8.181553,9.757633,-0.720616,-3.137547,-3.132149,-9.289964,9.945352,5.904920,4.536171,-7.965050,-5.298623,-7.535258,7.901553,-7.365163,-3.571448,3.978799,-0.266319,-9.468146,-1.114342,-8.572377,6.389278,9.097749,7.948919,-1.012515,9.439050,6.739310,5.389414,-4.901408,-3.569387,7.255225,-9.583366,-8.361577,3.729325,-0.999993,4.508697,-2.458261,8.100985,3.524194,-3.866186,4.448214,9.405434,9.317528,-4.907656,0.864337,-6.183254,9.967294,1.149205,-8.896048,7.807912,3.927700,3.269768,4.814649,4.600123,5.380121,0.739694,6.318254,5.570927,2.536973,-2.592520,-0.650107,5.248946,1.775007,-8.827580,6.254186,-3.598172,-3.317676,-6.311535,5.578500,0.235145,1.263183,8.419923,1.724629,-0.907650,1.995057,9.453142,7.385707,2.312385,-5.416402,-7.648682,7.328239,-9.134139,1.815058,-1.067562,-4.393274,9.896541,-4.013218,-6.473599,-7.973700,-6.466457,1.064137,5.543826,-1.766252,5.469295,-6.922709,-4.813011,3.443246,-6.387549,2.879853,4.419502,-3.096503,0.076275,7.628122,-4.575079,-5.193961,2.564504,-0.790933,1.373833,-3.762552,5.457790,-4.946844,-5.584926,-7.804490,-2.183745,1.401231,6.184326,1.716722,-6.393153,-1.908124,-2.337326,3.573999,-2.515768,-3.685558,-7.095101,6.935849,-0.569928,7.323300,2.375172,9.565936,2.734541,8.750461,-5.003588,-2.738485,7.331053,2.693619,8.780001,-6.040590,-5.584518,8.332593,8.390799,9.570017,6.299950,-9.460960,-5.623361,-6.115640,8.187611,6.774667,-9.618652,-2.414018,-7.088463,5.125779,3.773317,-5.100311,7.972879,-6.618441,-1.365968,-4.065653,7.508609,-1.818606,-3.710651,2.107508,-4.520742,6.464366,-4.528762,-2.946468,0.470256,8.223448,7.800900,-3.555691,4.437863,4.038365,-8.554844,7.774373,4.458501,-7.652091,1.261973,9.413295,-3.606798,-0.816432,-6.753318,9.210766,2.389029,-8.652757,-9.384033,7.826930,-5.432784,2.072233,-0.012622,-7.117319,-5.155756,2.371587,-3.001907,1.308838,2.682202,-5.338426,4.023827,3.727068,-4.575190,8.858751,-0.278902,-4.710403,-0.218811,-6.441752,6.981141,-8.562153,0.852667,5.982122,-9.026947,-4.160809,-5.042371,7.234352,-4.723887,-1.703227,9.383651,-9.739625,-8.287173,-4.177019,-6.258203,9.179572,6.464361,-9.474053,9.049228,-4.974783,-4.342830,9.081684,1.158083,-5.279038,3.236390,-9.422183,1.226689,0.668853,-2.175950,-7.150773,-6.559026,-8.907470,1.124498,-9.326950,-5.051281,-8.835249,5.038935,1.882107,-0.824680,-1.447454,6.214936,-2.130341,4.133970,-5.045865,4.658477,5.394039,5.708685,5.547186,-2.161552,0.771060,5.792041,4.299760,-3.309258,7.679213,3.884148,-3.974780,3.668161,8.908077,-4.342080,-4.100232,-2.247096,1.387679,5.600050,-2.869790,-3.838053,-2.070539,4.215351,-7.071071,-8.244568,-1.986753,-1.903133,-4.690685,-0.002019,-5.207346,-0.540511,-9.000781,-9.043583,-2.607215,0.924137,2.400823,-5.580873,9.080202,-2.987701,7.097119,9.471123,-0.960816,9.666260,6.352201,-7.586958,-6.405679,-4.338979,1.939565,9.450250,-0.913034,-6.119254,-4.351207,1.301634,-5.907611,-5.910399,1.056378,4.191503,5.526748,-2.698139,-7.007629,-7.488336,3.537752,-9.886349,-5.357845,-2.741184,-3.816859,-1.947328,-5.623219,-4.916718,1.118585,-1.642453,-3.102611,-1.394624,-7.338790,7.801420,3.927282,-5.831568], dtype = "float32")#candidate|7541|(1950,)|const|float32
call_7536 = relay.TupleGetItem(func_5492_call(relay.reshape(var_7537.astype('float64'), [15, 14, 2]), relay.reshape(var_7538.astype('int32'), [36,]), relay.reshape(const_7539.astype('float64'), [364,]), relay.reshape(var_7540.astype('int32'), [1792,]), relay.reshape(const_7541.astype('float32'), [130, 15]), ), 1)
call_7542 = relay.TupleGetItem(func_5498_call(relay.reshape(var_7537.astype('float64'), [15, 14, 2]), relay.reshape(var_7538.astype('int32'), [36,]), relay.reshape(const_7539.astype('float64'), [364,]), relay.reshape(var_7540.astype('int32'), [1792,]), relay.reshape(const_7541.astype('float32'), [130, 15]), ), 1)
func_6947_call = mod.get_global_var('func_6947')
func_6952_call = mutated_mod.get_global_var('func_6952')
const_7546 = relay.const([-8,-1,-5,-9,-3,-10,-8,7,5,-4,-1,6,6,10,10,-6,-2,9,6,-8,8,1,2,9,-4,-4,10,6,-2,9,8,2,-6,7,6,-10,5,10,1,-7,-6,7,3,-1,-10,6,-10,7,-9,8,4,-10,9,-8,-1,5,-6,-3,-8,3,-7,-7,9,-2,10,4,8,-5,-5,-9,-8,4,-7,-2,-3,2,-7,-4,-2,-5,-6,8,-4,-1,4,3,-4,-5,-8,-7,-3,1,-7,8,-3,4,3,-3,5,-4,-4,2,-8,9,3,6,-7,7,2,-5,-8,4,5,8,9,-8,9,-1,6,-2,7,8,-3,-10,-10,-1], dtype = "int16")#candidate|7546|(126,)|const|int16
var_7547 = relay.var("var_7547", dtype = "int64", shape = (2002,))#candidate|7547|(2002,)|var|int64
var_7548 = relay.var("var_7548", dtype = "float32", shape = (182,))#candidate|7548|(182,)|var|float32
call_7545 = relay.TupleGetItem(func_6947_call(relay.reshape(const_7546.astype('int16'), [126,]), relay.reshape(var_7547.astype('int64'), [2002,]), relay.reshape(const_7541.astype('float32'), [1950,]), relay.reshape(var_7548.astype('float32'), [182,]), ), 0)
call_7549 = relay.TupleGetItem(func_6952_call(relay.reshape(const_7546.astype('int16'), [126,]), relay.reshape(var_7547.astype('int64'), [2002,]), relay.reshape(const_7541.astype('float32'), [1950,]), relay.reshape(var_7548.astype('float32'), [182,]), ), 0)
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
var_7581 = relay.var("var_7581", dtype = "bool", shape = (117,))#candidate|7581|(117,)|var|bool
call_7580 = func_4255_call(relay.reshape(var_7581.astype('bool'), [3, 3, 13]))
call_7582 = func_4255_call(relay.reshape(var_7581.astype('bool'), [3, 3, 13]))
output = relay.Tuple([call_7514,call_7526,call_7536,var_7537,var_7538,const_7539,var_7540,const_7541,call_7545,const_7546,var_7547,var_7548,call_7580,var_7581,])
output2 = relay.Tuple([call_7515,call_7527,call_7542,var_7537,var_7538,const_7539,var_7540,const_7541,call_7549,const_7546,var_7547,var_7548,call_7582,var_7581,])
func_7585 = relay.Function([var_7537,var_7538,var_7540,var_7547,var_7548,var_7581,], output)
mod['func_7585'] = func_7585
mod = relay.transform.InferType()(mod)
var_7586 = relay.var("var_7586", dtype = "float64", shape = (420,))#candidate|7586|(420,)|var|float64
var_7587 = relay.var("var_7587", dtype = "int32", shape = (36,))#candidate|7587|(36,)|var|int32
var_7588 = relay.var("var_7588", dtype = "int32", shape = (16, 112))#candidate|7588|(16, 112)|var|int32
var_7589 = relay.var("var_7589", dtype = "int64", shape = (2002,))#candidate|7589|(2002,)|var|int64
var_7590 = relay.var("var_7590", dtype = "float32", shape = (182,))#candidate|7590|(182,)|var|float32
var_7591 = relay.var("var_7591", dtype = "bool", shape = (117,))#candidate|7591|(117,)|var|bool
output = func_7585(var_7586,var_7587,var_7588,var_7589,var_7590,var_7591,)
func_7592 = relay.Function([var_7586,var_7587,var_7588,var_7589,var_7590,var_7591,], output)
mutated_mod['func_7592'] = func_7592
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7645 = relay.const([[[-2.892761,5.080749,5.888190,-7.916082,-6.226809,6.358431,7.554459,7.991600,-3.351182,8.557945,-4.232931,-6.006933,-5.249841,-8.504727,-2.477134],[8.428033,-9.987229,-0.532462,3.400633,0.578593,-4.618735,-1.705107,2.991098,1.567207,-7.829575,9.848813,-9.912783,-8.676258,9.322866,-3.417516],[9.413469,-2.070842,0.801987,2.918311,-8.582871,-6.731774,1.372802,-7.727348,7.055792,3.527648,-6.315903,-1.345472,-4.809918,7.654961,7.617585]],[[-4.821285,0.471538,-4.931006,5.295730,9.664067,4.706911,-1.805169,-0.722446,4.114128,2.525760,-2.636204,5.180325,-2.770677,9.087596,-2.461076],[-0.231516,4.781673,9.914752,-8.049154,-0.230493,-7.137019,9.530557,-1.196524,7.039618,0.105465,-2.042586,-7.311053,-6.336525,-3.839121,-6.739056],[-4.329250,0.593377,7.879749,-7.476479,4.510813,1.450481,-2.281701,-8.633103,1.175749,-5.537405,-7.623883,-7.006416,-6.043404,-2.403501,-7.059096]],[[1.125796,9.114594,1.918871,-7.761507,-2.462729,-5.687600,2.108154,-9.474904,4.984048,-4.859536,2.901494,2.213465,3.824075,-9.024703,-2.933860],[3.078193,-9.210429,-4.823119,6.184063,5.869494,-6.946910,7.764971,-1.508687,4.757404,3.220016,2.124770,1.445825,-3.245984,-2.431343,-9.725515],[-4.590079,8.729863,-9.993588,-8.960184,-1.703934,5.739678,5.845287,-1.706279,-1.761524,2.130455,8.960618,-2.633063,7.323326,-1.376236,-6.121024]],[[-8.620641,-1.229576,3.923172,6.404839,-6.756719,8.863073,-0.594125,-3.959362,-3.017475,4.827241,2.843598,-2.809330,9.643058,-1.104912,1.960980],[-1.398702,1.049503,6.516040,8.298264,-6.605322,-9.609534,4.683067,-8.280967,-1.649125,-8.324124,5.375373,-9.154514,-4.348673,8.627145,5.851966],[5.358993,9.851885,-3.031653,4.780960,4.833543,8.866704,1.858855,4.181584,8.395506,-6.197768,8.829705,5.839580,1.029133,9.975580,-0.815593]],[[7.760568,-4.982982,8.668042,-8.421409,-5.992584,-4.941376,7.168446,-3.974744,-8.490370,-4.695510,6.482793,-9.782075,-0.301583,-6.741999,-2.574174],[-5.147000,-7.114190,-8.101538,-8.368756,-2.626335,3.368672,-8.991213,-1.723563,5.526960,-2.189669,8.293294,0.643206,-8.702243,3.313730,4.809713],[-2.974783,-7.802311,-8.453277,-6.681246,3.159020,3.515105,0.112530,7.189302,-2.770680,-3.881680,5.654246,-5.921432,4.522625,-4.307171,-1.849233]],[[5.836785,7.525882,8.640844,-2.496484,-9.774708,2.741609,-3.193140,-9.288131,-0.437545,-4.658102,9.830160,9.262266,-7.261230,4.582590,0.757890],[-0.267631,-9.971673,-0.800757,9.942258,7.058053,-4.832820,6.048214,6.878309,6.916994,-7.944968,5.066492,3.371258,-5.046290,6.153823,-3.295445],[8.127507,7.753667,-2.075795,8.358094,5.951312,-1.590137,4.172068,-3.630094,7.612106,9.349563,-2.664471,1.714341,4.335832,0.972208,5.218840]],[[2.523319,4.765386,-0.580802,3.301481,8.834090,-7.786424,-7.390393,-9.310174,6.134506,-9.619063,5.881506,1.834196,-4.824706,-4.802439,7.586295],[5.535595,-2.693227,-7.989496,2.350938,4.915587,-5.534470,-4.711889,2.858155,5.760723,-4.004307,2.366810,-0.293208,-6.458106,6.199339,3.442607],[0.899535,-1.058192,5.734748,-5.546038,-4.985241,8.380915,-7.697914,7.945667,-6.644186,-9.508047,7.116286,5.657956,-7.196360,-9.649012,-0.697523]]], dtype = "float64")#candidate|7645|(7, 3, 15)|const|float64
uop_7646 = relay.atanh(const_7645.astype('float64')) # shape=(7, 3, 15)
output = relay.Tuple([uop_7646,])
output2 = relay.Tuple([uop_7646,])
func_7671 = relay.Function([], output)
mod['func_7671'] = func_7671
mod = relay.transform.InferType()(mod)
output = func_7671()
func_7672 = relay.Function([], output)
mutated_mod['func_7672'] = func_7672
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_7873 = relay.TupleGetItem(func_6374_call(), 0)
call_7874 = relay.TupleGetItem(func_6376_call(), 0)
func_7585_call = mod.get_global_var('func_7585')
func_7592_call = mutated_mod.get_global_var('func_7592')
var_7923 = relay.var("var_7923", dtype = "float64", shape = (420,))#candidate|7923|(420,)|var|float64
const_7924 = relay.const([[-6,-2],[-9,-8],[9,-8],[7,1],[7,2],[-6,-2],[4,-1],[1,3],[-4,-6],[-10,-2],[10,-3],[-10,-5],[-10,2],[-1,8],[6,4],[5,-3],[-2,3],[-3,10]], dtype = "int32")#candidate|7924|(18, 2)|const|int32
const_7925 = relay.const([-4,-8,3,3,-3,2,2,1,3,3,6,-7,9,4,-5,3,-3,6,10,-3,-6,6,-1,3,-4,4,-4,-9,-2,2,-9,5,-7,-9,-2,2,7,5,-7,-4,5,-1,10,3,2,-7,10,2,-7,-4,3,-9,4,-10,2,-3,3,-7,-5,-5,4,7,-6,-1,2,-1,1,-7,6,9,-3,-5,8,9,2,10,6,10,-8,4,-8,7,7,-6,3,-10,-10,3,9,-1,8,7,-1,-7,-1,9,7,9,-1,-8,-2,1,5,10,-9,-5,6,-10,-2,-6,-7,-10,-2,-10,-6,7,9,2,3,-8,-6,-7,6,9,-4,10,-9,-8,1,-4,-8,-9,-9,1,-4,2,3,-4,9,-8,6,6,10,6,4,10,-3,7,9,-3,8,-5,-9,3,-10,-2,-10,-4,4,2,2,-10,-9,6,-6,3,6,-6,-6,-2,-9,-7,-5,-9,-10,7,-1,8,3,-9,3,-2,9,4,6,-4,-10,-3,-1,-4,-3,5,-7,5,-5,10,6,8,1,-1,-8,3,7,5,-10,8,-1,9,-6,-9,-1,-10,10,-2,-10,9,1,7,1,5,2,-7,8,2,-2,-4,1,-8,2,3,5,7,5,-4,-8,8,-4,-5,-10,-6,-10,-3,-4,2,-5,5,7,5,-10,8,10,7,10,-8,-7,-3,5,-7,-1,7,2,-5,6,2,-1,-1,8,-8,-10,-1,1,3,3,8,-9,-9,7,-1,-8,-8,-7,1,-8,6,-5,4,-4,-3,9,1,4,-10,-8,3,-5,-4,-3,8,3,-9,2,4,2,-10,-9,-10,5,-4,-10,6,2,-10,4,-8,1,-3,3,-6,5,8,1,6,6,8,9,-3,-3,-7,10,-1,-3,3,-2,-10,9,8,6,5,-4,-9,-6,-7,7,3,9,10,8,7,4,-6,5,-2,-10,2,9,-10,-6,-1,2,2,-8,5,-6,10,10,-5,-2,8,4,-9,-3,-10,-5,-4,5,-8,8,2,6,6,-8,4,7,-3,4,-6,10,-8,6,-3,9,5,5,-3,-9,-6,7,-8,-2,7,-4,4,8,-10,7,-7,-5,4,-2,-10,6,-10,7,-9,-1,-6,-1,1,-6,6,-6,-8,5,-10,10,10,7,-1,5,5,8,1,4,9,-4,-1,-7,-3,4,-1,-5,-2,-8,7,7,-1,3,-4,-5,7,9,-2,-9,-1,10,9,5,-8,-6,-8,6,6,3,-8,-5,10,5,10,-8,-6,5,2,7,-4,-4,4,2,-3,1,5,-6,-10,8,-4,-3,5,-6,-9,-8,5,-5,-3,-2,4,-8,1,-6,7,-3,2,-1,-5,3,-1,-6,2,5,10,2,1,3,-5,5,2,-3,5,1,-3,5,-5,10,2,-5,-3,6,-8,-7,7,5,1,6,-3,5,3,-2,1,-8,-7,7,1,-5,-4,1,6,3,-5,-3,-7,-6,10,-1,-8,-6,-3,7,8,-2,-6,-6,-1,2,-9,4,-5,6,-8,6,7,3,7,-3,-3,9,-10,-4,3,6,-2,10,1,-3,-5,7,3,10,-3,6,8,5,-10,8,6,-9,-4,-6,-5,6,-7,1,-6,-9,6,2,1,-3,-8,-8,4,-3,-4,-3,-7,10,5,-4,-6,7,8,-5,9,-2,8,-3,5,1,4,-2,-7,7,-6,1,5,4,-9,2,9,-7,6,-9,6,2,-6,-5,9,-2,-2,-6,3,10,-1,4,-8,6,2,5,-5,-10,-3,3,6,6,-10,-4,-2,-7,-7,-2,-1,-9,2,-3,-2,10,-9,-7,8,-2,6,1,10,-3,-10,-6,-3,-6,-10,4,1,9,-4,-4,2,1,1,7,2,2,5,3,-2,3,-7,6,-8,9,-3,-4,-8,-2,7,-2,-1,10,-2,-6,-1,8,5,-7,1,6,-10,3,-7,9,-6,2,-5,5,-5,-2,7,6,6,-6,-1,2,-3,9,10,4,9,5,-8,1,-9,-2,3,-8,-1,-5,-7,2,-4,9,-9,1,-9,-1,-7,2,7,2,-2,-10,-7,5,-4,3,10,-3,3,6,-2,-10,-9,-5,-8,6,-7,3,1,-9,7,-4,-4,-5,-3,-10,7,-6,-2,-3,-5,-10,-7,-8,3,5,9,-8,-8,-1,-3,10,1,-6,-4,-5,10,-3,10,-7,-1,4,4,5,6,-7,-5,9,-2,10,6,6,3,-4,3,6,6,5,6,3,6,-9,6,8,4,3,5,5,9,1,-3,-9,10,8,-6,8,-3,-2,6,7,9,-10,-9,4,-6,-1,5,7,-6,1,-8,-1,-5,-9,4,-3,-6,-9,9,3,10,6,6,1,2,3,1,10,6,9,5,-4,6,-6,-9,-2,-4,4,-4,3,9,6,9,-7,5,-6,-9,-9,-2,-10,3,9,10,9,-2,-10,8,2,3,-2,-7,-9,7,-1,-5,9,3,-7,-5,7,-9,-8,-4,-2,-10,-5,1,3,-2,-8,-7,4,6,1,8,-9,-4,3,7,-4,10,-2,-3,-2,1,-3,6,6,-1,-3,6,7,9,9,5,-3,-5,9,-1,-5,8,1,-9,6,-8,8,-1,6,-5,7,8,-9,4,3,7,-10,-9,-9,-1,-8,-3,3,-3,7,-1,10,-4,-6,-6,-6,8,8,-8,-6,1,6,-10,2,-7,3,-3,1,3,8,6,-2,1,-2,6,-7,-1,3,-3,7,1,-10,-3,2,6,-5,3,9,-7,2,-8,-2,-4,-10,-9,-7,-7,7,-5,7,-8,-8,-2,-6,5,-4,-6,1,1,-7,10,-3,10,-6,8,10,6,10,2,-8,-5,-1,-9,3,8,10,-5,-3,-2,1,2,9,-9,7,4,-2,10,-10,-10,8,-4,-5,3,3,7,-9,-7,-9,9,2,3,-4,9,-1,8,4,10,-10,-7,2,9,5,2,-6,9,-6,-2,-7,-4,-8,8,4,-3,-2,-7,6,-8,6,4,2,-10,8,-7,-2,1,-3,6,-8,-4,-9,7,-9,-6,-4,4,4,4,-5,4,2,-1,-6,-4,4,-5,9,10,-6,2,5,-7,2,-10,2,6,1,9,-4,4,-1,3,-2,7,-9,1,6,4,1,5,-8,-7,10,-8,1,2,-2,1,8,-1,8,3,-2,-10,-9,-6,9,7,9,2,7,3,9,-3,-1,-5,8,3,-5,3,-9,2,-4,7,-6,5,-5,5,10,2,-2,-2,-7,2,-9,5,-8,8,-9,5,-4,-1,9,-4,1,4,-4,-8,3,-2,-9,-2,7,-8,5,-2,-4,-9,-6,-3,10,2,4,-7,-4,-9,6,-9,-1,9,-10,8,-1,-6,1,-4,7,-7,10,7,-2,4,-8,-3,9,7,-1,5,4,-1,-3,8,-2,10,-8,5,-3,-8,-3,-10,-10,-6,-5,-5,2,-4,10,4,6,8,-3,3,-4,-7,-9,3,-7,2,-8,9,-4,7,-6,10,9,7,10,7,1,3,2,-1,5,-1,2,-4,-4,2,4,-3,7,4,-9,1,7,-10,-10,-8,-4,-9,-10,3,-6,5,7,2,7,9,-8,-6,4,4,6,-8,-2,9,10,5,8,-5,-5,9,4,9,-10,-7,-2,-8,-4,1,5,-5,1,-10,-7,2,-3,-7,8,-1,3,-3,-10,3,9,-7,3,9,1,1,-6,3,5,-10,-7,1,10,5,7,3,4,-8,3,1,9,-5,4,-4,-9,-1,-7,8,-8,-7,-5,-1,-2,5,8,-3,-7,-10,8,1,-10,8,7,-5,1,10,-4,-4,-9,6,-7,2,9,5,8,7,-10,-7,10,-10,4,6,10,-8,1,4,-3,1,8,9,4,6,-2,-9,-5,-5,10,10,-1,6,-10,-9,-7,-7,6,3,-4,4,-1,10,3,-8,-7,2,5,-10,-8,-10,-1,8,-4,9,-9,4,7,10,7,2,4,-2,2,6,4,3,-4,3,3,4,5,3,-1,-2,1,-4,10,4,1,3,7,-1,8,-6,5,4,9,-4,2,-3,-3,-10,5,6,5,3,5,10,7,-4,-8,-4,6,1,5,-3,-3,1,8,-5,-5,4,10,3,1,-10,6,8,-10,-1,3,3,-6,3,10,-6,6,-6,1,-4,7,-1,-5,-4,-10,-2,-9,-10,-9,-9,-2,-5,5,5,-9,8,2,-8,2,6,6,-6,4,10,-10,-2,5,1,7,6,6,1,-5,8,10,1,1,3,-3,9,-3,8,-6,-6,6,8,-5,-3,-1,-10,-3,9,6,1,2,-5,-9,-2,3,-8,7,-2,-9,3,-5,1,3,4,-9,-1,5,7,-8,-8,5,1,-6,-4,-7,4,-1,-10,4,-4,-8,-5,10,6,-1,10,-4,9,3,4,-4,1,-3,8,6,-10,6,7,9,5,-2,9,-3,8,4,5,10,3,-9,-3,-4,9,-10,7,4,3,-6,-3,-3,-6,-3,-6,9,8,-2,-2,6,6,10,7,-7,9,5,6,-1,4,5,8,-9,3,9,-8,9,-1,9,-2,-10,-2,2,-10,2,8,-6,-3,-7,6,4,-1,8,-1,-1,5,-5,-6,-5,-2,2,4,8,-3,-4,1,3,-10,-3,7,-7,5,9,8,10,3,-2,2,-4,5,5,5,-7,6,7,3,-6,-5,2,1,3,-7,-10,-5,7,-10,7,8,-2,3,10,3,-6,2,-2,-3,-6,-2,-1,-1,-6,-1,-8,-6,-3,-10,-6,-8,-9,-4,3,8,10,-6,-6,1,7,6,9,6,2,3,-8,2], dtype = "int32")#candidate|7925|(1792,)|const|int32
const_7926 = relay.const([-8,4,4,5,-4,6,-2,7,10,9,-8,-1,9,-3,-7,-7,-7,-3,4,-10,9,-6,-8,-1,9,-4,1,7,5,10,4,-8,-8,-1,-1,5,-8,-2,-5,7,-3,10,-8,-1,-9,-6,-10,-4,-5,5,8,5,10,-4,-10,-9,-4,4,-6,-7,-10,7,-7,-8,-8,10,2,3,3,-9,10,6,6,6,-9,-8,7,-6,-6,9,-9,9,-2,-7,2,10,3,4,7,3,4,-2,-7,-5,7,7,1,-1,-8,2,4,10,7,9,7,-10,3,1,-2,-3,2,-7,5,10,6,-3,-1,8,-8,-3,-10,7,-5,-3,7,-10,-5,-4,6,-2,-3,3,-8,3,9,-3,9,2,8,-2,1,-6,10,-7,-1,1,5,-9,6,-1,7,3,3,1,3,8,7,2,-1,6,-7,-7,8,7,9,-10,-3,-4,10,-10,9,7,-2,-3,-8,-9,3,-9,-4,-6,4,1,1,-6,9,4,-5,-3,-9,-4,-5,-2,-8,1,5,7,5,9,-3,7,-2,-1,-1,6,9,7,-10,2,9,-4,-1,8,-10,2,-3,-7,-9,1,-1,1,4,5,6,6,3,2,10,9,-6,-3,-1,3,9,9,-1,-1,8,-3,-5,2,6,1,-1,-5,-5,-3,1,4,9,1,6,7,7,-8,8,10,1,9,4,-10,-6,-5,10,8,-3,-1,10,2,-9,-10,10,10,-3,-7,5,-8,-10,-10,2,-10,-7,-3,1,2,8,7,-4,-1,-6,-6,6,3,-6,-4,1,3,-5,2,-6,5,10,1,-7,-3,-3,-5,4,4,-1,10,6,-7,-4,6,5,1,3,9,6,-4,-2,9,7,10,6,9,5,-3,-4,8,-2,5,3,-7,8,2,-10,-6,6,6,-5,-6,-10,-9,1,6,-8,-1,6,2,1,4,4,-10,-5,6,1,2,2,6,1,-9,4,10,9,-4,5,-4,7,1,10,3,1,3,-7,9,2,6,9,7,-9,10,8,-3,8,8,3,-9,7,10,-10,3,-6,-7,-9,2,-5,2,-4,10,-10,10,-2,-10,1,-6,-8,3,9,6,6,6,8,-9,-2,6,9,-9,-7,1,-8,8,-5,-9,-5,-4,5,-4,-9,-7,2,-5,9,2,-3,-3,10,-9,6,-1,5,2,7,-2,1,-7,3,5,-6,-8,-2,1,4,-8,8,-1,-5,2,1,8,3,8,-9,-8,2,5,-6,-7,-6,1,6,-8,5,3,-4,-1,-8,3,-1,-4,6,6,-6,2,-10,10,3,7,8,5,4,-10,-4,-2,3,-6,3,-9,-9,-3,-4,-6,-10,8,-4,-1,10,3,-6,6,8,6,-6,-2,-8,5,-7,2,4,5,-2,10,-2,3,-7,5,3,-9,-10,5,6,-1,-2,10,2,6,6,5,1,3,-9,3,2,2,-3,-2,-8,1,6,6,9,-4,-9,10,-1,6,-3,-3,-1,7,-3,-2,-1,-10,4,-9,-9,-7,-3,10,2,-5,7,10,-4,-3,-7,9,7,7,7,-6,10,-7,-2,7,3,9,-10,9,9,3,4,-3,1,-4,-9,-7,4,2,-2,-2,-10,8,-1,6,-8,5,8,5,-10,-2,-9,-8,6,1,-6,5,-3,8,10,1,2,10,-3,-3,-3,-4,3,-7,9,-7,8,-4,4,2,-7,-2,10,1,4,-8,9,1,-3,1,4,-8,-1,-3,4,1,-2,-10,-4,6,5,6,6,-7,4,1,-7,2,1,5,3,-9,-10,7,-2,-3,-9,-2,-8,3,7,2,5,4,-1,5,8,1,3,-3,3,5,-6,-6,-5,6,5,8,4,-7,-10,9,6,-5,7,5,3,-1,-8,5,6,-7,-1,-2,-6,10,-1,3,8,-6,7,5,5,3,5,-7,9,-3,-7,-7,-5,-1,5,-4,4,-8,-5,-5,10,-2,-5,-7,2,-5,6,2,-9,6,6,5,-1,-5,5,-7,-7,2,-7,-6,-9,-8,5,4,4,7,1,-4,-6,-9,8,-8,6,-8,-6,-3,-5,8,2,5,-4,-10,6,-7,2,3,-3,-8,10,-3,-8,1,-7,5,-3,-7,-3,-9,-10,1,-4,5,-5,6,7,-2,-6,-10,4,-2,6,-3,8,-9,-10,-2,5,2,10,-7,-7,-4,4,6,1,-6,-9,7,-2,-8,5,9,-9,1,-8,8,7,-8,6,-10,2,-4,-6,-8,5,3,10,-1,-2,8,-9,5,8,9,-7,-9,-5,-10,1,-9,6,8,3,-4,-2,-3,1,-8,-1,-1,6,-7,-2,-1,-5,-1,2,8,1,-8,-6,-3,-1,4,-6,10,4,2,-2,-8,5,1,-3,3,-1,-6,-4,-4,9,-6,-2,8,2,1,-7,3,2,-7,3,8,3,-10,4,9,-1,-10,-1,-8,-10,-9,10,9,7,7,-8,-3,9,-7,7,-6,-10,9,5,-6,-6,4,-6,10,-8,3,-1,6,-10,-3,-8,-3,-5,2,10,7,-3,-4,3,-4,10,-5,-4,1,4,8,4,10,6,1,10,-3,-10,-3,2,2,-7,-3,9,-4,9,-3,-5,-4,5,-6,5,9,8,-8,1,4,-8,8,2,-10,-6,-4,8,-10,3,-9,5,6,9,-6,2,10,-7,-7,2,10,10,7,-3,-10,-2,7,-6,1,-6,10,8,-10,-8,-6,4,-8,-1,4,-1,2,-5,9,1,1,-8,7,-10,-3,-4,1,-4,-6,-4,-10,-7,6,-9,-5,8,10,-8,-4,-6,9,5,-9,8,3,-8,-5,-5,-8,8,7,-1,2,7,-8,-10,-2,6,3,7,-4,-10,1,-9,-10,-4,3,-7,5,-10,5,-1,-4,-6,-8,6,1,2,1,-1,-8,-9,10,-5,-10,-1,4,9,8,-6,2,10,-10,-3,4,4,-9,-5,1,-6,-5,-3,9,-7,-1,3,9,-7,6,9,-6,-3,6,-3,-6,-7,8,-9,3,-1,-1,8,-8,6,-4,5,8,4,4,2,-8,10,-10,-2,5,9,-8,5,-1,1,7,-5,1,-2,9,-4,4,5,-5,9,10,7,5,3,6,-1,-7,-2,8,-3,10,5,5,10,-9,-1,6,-7,3,-5,4,-4,2,9,-9,-6,4,-3,-5,1,3,-3,4,-10,-9,-6,2,-4,-5,4,-7,-3,4,-2,-10,-3,6,1,-5,7,-9,5,-2,-6,3,-8,-2,3,-8,7,9,10,5,5,6,1,4,7,-6,10,-2,-2,-1,2,-10,-5,8,-4,1,-10,3,2,-1,3,9,9,-2,-8,5,-2,9,-4,5,10,7,-2,-3,-8,-3,-2,-4,6,3,1,-5,3,-2,-1,-4,4,-10,4,1,8,4,-8,2,-6,-7,-2,-2,6,-9,1,-9,5,-1,3,-2,8,10,2,-10,-8,9,-1,5,7,6,9,2,5,4,9,-8,10,5,-1,-4,1,-2,-6,-10,3,8,-1,10,8,-3,-10,4,-8,-5,3,1,5,-6,10,-2,4,-9,-4,3,2,9,-5,-5,-3,4,-2,-9,6,-7,-3,-1,1,-4,-6,-9,2,-2,2,-10,10,10,-8,-10,-6,3,8,-8,2,5,10,-10,-1,-9,-2,7,-4,-7,-4,9,5,-1,5,-3,-3,9,-2,6,-1,-8,6,6,-10,4,-9,-6,-6,7,-6,2,-1,-5,-2,-8,-5,-8,10,3,-9,6,2,4,8,-3,4,-6,-8,7,1,5,-2,9,8,-3,-8,7,-10,-10,-4,3,-8,-10,9,8,-3,-5,5,6,-5,2,-6,5,-10,4,-8,2,5,4,-7,3,-5,-2,2,4,7,-3,5,-8,-3,-10,9,-6,-4,-6,7,1,-8,4,3,9,6,-2,10,-9,-4,1,-1,-6,1,5,1,-2,1,1,4,5,-4,2,-8,-6,-9,6,7,-6,5,-8,9,7,4,5,10,9,-6,-7,-9,9,-9,8,6,-4,-5,-7,-10,4,4,3,9,7,2,-2,-6,-9,-5,-1,-2,3,-7,2,5,-3,-7,-5,10,-2,6,3,4,-9,10,-1,4,10,4,-1,1,-10,-2,-5,-6,5,10,6,-10,4,-4,2,10,-1,5,-5,-8,5,1,2,-6,1,-5,-1,-9,-6,-3,-1,2,9,-6,4,-1,-3,8,2,-4,-9,10,-5,6,-2,-10,1,-8,1,-7,7,-5,-2,6,6,-9,-1,6,7,-7,-2,3,1,4,-5,-9,10,-3,-7,-6,-8,-2,3,-5,2,9,-1,9,-6,-5,5,3,8,-6,4,-9,-9,3,1,-2,2,-8,8,6,-10,6,5,-9,-7,9,10,-6,-1,5,-7,-4,10,3,-9,3,1,5,1,10,-2,1,-7,5,6,-9,-6,-3,6,6,6,-5,1,3,-7,-1,-10,-10,-9,-4,-4,-9,5,-7,-7,-6,-2,-10,-2,-6,5,-7,10,-3,-4,-4,-9,7,7,5,-8,-9,-4,5,1,5,9,-1,9,7,-1,10,-6,-6,-4,6,-3,-2,3,1,9,10,-7,-4,-6,-8,4,9,-8,2,5,3,3,3,3,10,1,9,-2,2,5,-7,1,-8,10,-10,8,-2,-9,4,2,-5,3,-1,-6,-3,5,10,5,-5,-8,9,-8,-4,6,8,-2,-1,8,10,-4,-7,-2,-7,4,9,6,-7,-8,9,1,-4,-4,-9,-6,6,-3,-3,9,1,1,-5,-7,1,-5,1,-10,2,1,-6,-2,9,5,-2,1,6,-3,-8,7,-8,-10,10,-6,-5,6,4,-6,-5,6,-3,-3,8,4,-8,5,-3,7,-6,6,1,-5,-1,-9,-9,-6,-9,-3,-4,-3,6,-10,-3,-2,1,-10,-3,-7,-3,-3,-1,-7,9,-9,7,-7,10,-3,4,9,7,-10,-4,5,5,-2,-8,-7,10,-1,-8,1,-6,8,-2,-7,-8,-9,6,-10,1,-5,2,7,-10,1,7,-7,-8,6,3,9,2,2,10,-7,5,-2,-6,10,-5,5,7,-6,-6,-5,8,10,1,-6,-7,4,6,10,-4,9,3,3,7,-5,4,4,5,9,-10,-9,-9,9,-8,7,-9,-3,-2,4,-8,4,2,-5,4,3,1,10,-4,3,-8,-5,-7,-3,5,-8,-10,-6,-10,7,4,-9,1,-5,10,8,8,-7,2,-6,1,1,-6,-2,-7,-2,1,8,-3,-7,-10,-1,8,7,-1,-6,-7,-2,5,9,4,-5,-3,7,7,-8,-10,-9,-8,8,-7,2,3,-7,9,-10,-7,10,-9,5,2,5,4,-10,-8,2,3,9,9,4,-4,-10,1,-1,6,8,-1,10], dtype = "int64")#candidate|7926|(2002,)|const|int64
const_7927 = relay.const([-6.123694,-9.238824,-2.860233,3.563717,-0.388499,-5.956681,9.235503,3.372596,0.898832,6.073694,1.955896,-7.535111,9.095163,-9.850004,1.122163,-0.657176,-2.924085,-3.453013,8.906743,-7.377073,1.635204,-1.905387,-7.558309,-2.002394,0.644155,7.709268,-4.231348,-6.811438,8.108426,-5.430389,-9.480748,-3.122810,8.579766,-4.576376,-9.090637,8.794965,2.440088,-6.239359,4.973566,6.518202,-6.195912,0.592140,1.106305,-2.064375,6.380371,6.381832,3.513385,-3.628701,-6.579355,0.155791,6.011831,-4.497278,4.530203,-8.085975,-2.997958,9.433692,-3.891589,2.289323,-4.624009,-1.645573,-7.185529,5.188744,6.760329,-9.685392,-3.713083,-3.914904,-7.510396,7.493561,7.025721,-6.469502,9.628629,-3.521250,6.400974,1.722645,7.316780,8.021424,-9.847909,-5.381821,-4.479234,4.493532,-4.884396,-0.361980,1.485057,-7.210883,0.928339,-0.064893,-6.702512,9.945361,-0.821958,8.446314,-8.180480,8.564597,-6.820050,3.991160,-9.108897,5.165107,-1.346232,-5.930446,7.796343,5.825559,7.373041,-6.727212,-4.066635,2.051394,-2.017980,6.542519,5.700339,7.003364,-4.700073,-5.192582,-7.427505,8.849926,9.154804,-6.431799,6.100493,-1.499409,0.919717,-9.414036,-1.422006,-0.770277,4.655164,9.622476,-7.368088,-8.967561,4.605390,3.941149,-4.096923,2.339002,-1.138115,8.188611,9.007577,5.733245,-0.560673,-7.999700,6.202951,3.008332,-0.039630,-3.958619,-0.136604,3.080659,8.429016,9.199522,-8.342019,-8.923190,-5.225809,-7.139829,7.996397,-3.221193,7.482402,-1.764728,8.278404,5.752845,-5.231233,-5.104997,-1.888437,9.220559,-1.379594,-6.673336,2.660316,-6.049744,-1.452489,5.137271,-7.481145,8.994238,-1.525508,-0.299271,9.620035,-0.201215,6.517915,-4.022555,-5.316120,-8.575841,-1.885136,7.496821,5.686625,2.273049,-8.371611,3.577967,-3.655140,9.753422,-5.997615,-5.744665], dtype = "float32")#candidate|7927|(182,)|const|float32
const_7928 = relay.const([False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,False], dtype = "bool")#candidate|7928|(117,)|const|bool
call_7922 = relay.TupleGetItem(func_7585_call(relay.reshape(var_7923.astype('float64'), [420,]), relay.reshape(const_7924.astype('int32'), [36,]), relay.reshape(const_7925.astype('int32'), [16, 112]), relay.reshape(const_7926.astype('int64'), [2002,]), relay.reshape(const_7927.astype('float32'), [182,]), relay.reshape(const_7928.astype('bool'), [117,]), ), 7)
call_7929 = relay.TupleGetItem(func_7592_call(relay.reshape(var_7923.astype('float64'), [420,]), relay.reshape(const_7924.astype('int32'), [36,]), relay.reshape(const_7925.astype('int32'), [16, 112]), relay.reshape(const_7926.astype('int64'), [2002,]), relay.reshape(const_7927.astype('float32'), [182,]), relay.reshape(const_7928.astype('bool'), [117,]), ), 7)
func_5261_call = mod.get_global_var('func_5261')
func_5265_call = mutated_mod.get_global_var('func_5265')
const_7933 = relay.const([7,1,6,10,5,-6,10,-5,-6,10,10,-7,5,-8,6,-8,-3,-6,-5,2,-6,4,-4,8,2,7,-1,10,8,4,5,-6,-3,5,3,-7,8,4,8,2,-1,3,-3,-10,1,4,-8,-4,7,6,-1,-8,2,-10,5,4,3,1,-10,-9,-7,-7,-5,3,-2,-1,-1,1,10,-8,5,4,9,4,-8,-10,-5,-9,8,2,2,3,2,-9,-3,-9,6,6,1,-5,-2,6,-2,10,9,-9,7,4,-4,-2,-9,5,6,-3,1,8,2,3,-8,-1,-6,8,2,3,-7,3,5,3,1,-10,1,10,-1,7,-7,-6,9,-6,-8,-7,3,-2,1,-2,9,-7,-2,-6,-9,2,-1,8,-4,3,5,-10,-3,7,-6,-4,-2,9,-7,9,-8,-9,1,1,6,-1,5,9,2,1,6,-6,8,4,-10,9,-6,-7,8,4,3,4,7,-7,9,8,5,6,9,7,5,-7,6,7,3,9,7,5,5,2,10,-1,-7,-8,-9,8,-3,-6,-1,5,6,-2,-5,8,9,-6,-3,-7,4,-7,-10,-8,9,2,-8,-6,8,9,6,-5,-9,-5,-8,3,8,4,2,-1,-7,-5,-9,-1,-10,2,10,-1,10,3,8,9,-3,-4,-6,-10,-9,8,-5,-8,-1,-8,-10,10,-5,-6,-9,1,-10,9,-1,1,-3,1,-9,-2,1,-9,-9,1,-4,-6,-3,-4,-1,1,1,5,10,-3,-7,7,-3,9,7,-5,-6,-3,8,-2,-2,5,2,9,-6,-10,5,10,-6,-1,6,6,-7,-1,-8,-7,7,-4,-10,2,5,-10,9,-2,7,-8,1,7,4,-4,2,-3], dtype = "int32")#candidate|7933|(324,)|const|int32
call_7932 = relay.TupleGetItem(func_5261_call(relay.reshape(const_7924.astype('int32'), [6, 6, 1]), relay.reshape(const_7933.astype('int32'), [6, 6, 9]), ), 1)
call_7934 = relay.TupleGetItem(func_5265_call(relay.reshape(const_7924.astype('int32'), [6, 6, 1]), relay.reshape(const_7933.astype('int32'), [6, 6, 9]), ), 1)
func_372_call = mod.get_global_var('func_372')
func_374_call = mutated_mod.get_global_var('func_374')
call_7946 = relay.TupleGetItem(func_372_call(relay.reshape(call_7922.astype('float32'), [10, 15, 13])), 0)
call_7947 = relay.TupleGetItem(func_374_call(relay.reshape(call_7922.astype('float32'), [10, 15, 13])), 0)
func_1925_call = mod.get_global_var('func_1925')
func_1932_call = mutated_mod.get_global_var('func_1932')
var_7955 = relay.var("var_7955", dtype = "float64", shape = (364,))#candidate|7955|(364,)|var|float64
const_7956 = relay.const([-1,1,6,-5,-5,-4,-4,3,-2,-7,1,-2,2,-5,-7,8,-1,9,-10,-2,-3,-7,-7,-9,9,-8,5,-9,8,-1,-8,5,7,9,-10,-2,7,2,-10,-7,-6,9,6,2,2,9,2,3,9,7,-3,4,10,6,-4,-1,9,-6,8,7,1,1,-1,5,6,-1,2,-3,-1,4,-3,8,5,-4,-1,-2,-10,-10,-9,3,8,6,-1,-4,-9,10,5,3,1,10,10,-8,7,1,4,1,10,-4,8,3,-8,9,-10,-1,10,7,-5,10,3,-8,-7,-1,-8,-8,-2,-2,-6,4,-3,-9,10,5,-10,-9,-6,4,-8,10,7,-10,1,-1,-5,4,-10,1,10,-7,-10,-7,-3,-2,3,7,-2,-1,1,3,-7,-3,2,8,1,4,2,-10,2,6,-7,-7,1,3,2,-9,-5,-7,-8,10,-2,3,-8,7,-6,-7,-9,2,-4,2,-3,6,-3,4,2,1,8,6,-8,6,-9,6,9,5,-7,1,10,-7,-4,4,-4,-8,10,8,8,-1,9,2,-7,3,-6,3,4,8,-10,-4,1,7,-7,-7,-1,9,-8,-9,-9,-9,7,-10,-4,10,5,10,-7,7,-2,-8,-5,-4,-7,-7,3,1,10,2,-4,-9,10,4,8,1,6,-4,6,1,1,10,-4,6,4,9,4,-6,-9,2,-10,9,2,-8,-1,4,8,8,6,-7,3,8,-6,-10,5,-4,4,-2,7,7,-10,2,4,10,-3,2,-5,-3,-5,7,4,-4,5,5,7,-1,-2,2,4,-9,1,3,2,-4,-9,-6,4,-3,7,2,1,-2,8,-2,8,-9,1,-2,10,-9,-8,-3,-6,-3,6,8,1,-4,-3,-3,-8,-9,-6,1,8,-6,6,9,10,4,7,5,3,7,6,9,4,-2], dtype = "int16")#candidate|7956|(350,)|const|int16
call_7954 = relay.TupleGetItem(func_1925_call(relay.reshape(var_7955.astype('float64'), [14, 2, 13]), relay.reshape(var_7955.astype('float64'), [14, 2, 13]), relay.reshape(const_7956.astype('int16'), [350,]), relay.reshape(const_7925.astype('int32'), [1792,]), relay.reshape(call_7946.astype('float32'), [1, 1950]), ), 1)
call_7957 = relay.TupleGetItem(func_1932_call(relay.reshape(var_7955.astype('float64'), [14, 2, 13]), relay.reshape(var_7955.astype('float64'), [14, 2, 13]), relay.reshape(const_7956.astype('int16'), [350,]), relay.reshape(const_7925.astype('int32'), [1792,]), relay.reshape(call_7946.astype('float32'), [1, 1950]), ), 1)
output = relay.Tuple([call_7873,call_7922,var_7923,const_7924,const_7925,const_7926,const_7927,const_7928,call_7932,const_7933,call_7946,call_7954,var_7955,const_7956,])
output2 = relay.Tuple([call_7874,call_7929,var_7923,const_7924,const_7925,const_7926,const_7927,const_7928,call_7934,const_7933,call_7947,call_7957,var_7955,const_7956,])
func_7974 = relay.Function([var_7923,var_7955,], output)
mod['func_7974'] = func_7974
mod = relay.transform.InferType()(mod)
var_7975 = relay.var("var_7975", dtype = "float64", shape = (420,))#candidate|7975|(420,)|var|float64
var_7976 = relay.var("var_7976", dtype = "float64", shape = (364,))#candidate|7976|(364,)|var|float64
output = func_7974(var_7975,var_7976,)
func_7977 = relay.Function([var_7975,var_7976,], output)
mutated_mod['func_7977'] = func_7977
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6069_call = mod.get_global_var('func_6069')
func_6070_call = mutated_mod.get_global_var('func_6070')
call_8005 = relay.TupleGetItem(func_6069_call(), 0)
call_8006 = relay.TupleGetItem(func_6070_call(), 0)
output = call_8005
output2 = call_8006
func_8012 = relay.Function([], output)
mod['func_8012'] = func_8012
mod = relay.transform.InferType()(mod)
output = func_8012()
func_8013 = relay.Function([], output)
mutated_mod['func_8013'] = func_8013
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_8039 = func_8012_call()
call_8040 = func_8012_call()
output = relay.Tuple([call_8039,])
output2 = relay.Tuple([call_8040,])
func_8055 = relay.Function([], output)
mod['func_8055'] = func_8055
mod = relay.transform.InferType()(mod)
mutated_mod['func_8055'] = func_8055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mutated_mod.get_global_var('func_8055')
call_8056 = func_8055_call()
output = call_8056
func_8057 = relay.Function([], output)
mutated_mod['func_8057'] = func_8057
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_8239 = func_5606_call()
call_8240 = func_5606_call()
func_5520_call = mod.get_global_var('func_5520')
func_5522_call = mutated_mod.get_global_var('func_5522')
var_8282 = relay.var("var_8282", dtype = "bool", shape = (1188,))#candidate|8282|(1188,)|var|bool
call_8281 = relay.TupleGetItem(func_5520_call(relay.reshape(var_8282.astype('bool'), [1188,])), 2)
call_8283 = relay.TupleGetItem(func_5522_call(relay.reshape(var_8282.astype('bool'), [1188,])), 2)
output = relay.Tuple([call_8239,call_8281,var_8282,])
output2 = relay.Tuple([call_8240,call_8283,var_8282,])
func_8290 = relay.Function([var_8282,], output)
mod['func_8290'] = func_8290
mod = relay.transform.InferType()(mod)
var_8291 = relay.var("var_8291", dtype = "bool", shape = (1188,))#candidate|8291|(1188,)|var|bool
output = func_8290(var_8291)
func_8292 = relay.Function([var_8291], output)
mutated_mod['func_8292'] = func_8292
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_8393 = relay.TupleGetItem(func_5400_call(), 2)
call_8394 = relay.TupleGetItem(func_5402_call(), 2)
func_2124_call = mod.get_global_var('func_2124')
func_2127_call = mutated_mod.get_global_var('func_2127')
var_8404 = relay.var("var_8404", dtype = "uint64", shape = (495,))#candidate|8404|(495,)|var|uint64
call_8403 = relay.TupleGetItem(func_2124_call(relay.reshape(var_8404.astype('uint64'), [5, 9, 11]), relay.reshape(var_8404.astype('uint64'), [5, 9, 11]), ), 0)
call_8405 = relay.TupleGetItem(func_2127_call(relay.reshape(var_8404.astype('uint64'), [5, 9, 11]), relay.reshape(var_8404.astype('uint64'), [5, 9, 11]), ), 0)
func_5899_call = mod.get_global_var('func_5899')
func_5902_call = mutated_mod.get_global_var('func_5902')
const_8411 = relay.const([4,-10,5,9,2,5,-6,1,2,8,9,-8,-6,8,-7,-3,-9,1,1,-1,-9,3,1,-5,-1,5,-3,-8,-5,2,-7,2,-2,-10,-10,5,9,5,3,-5,5,6,-2,-8,5,9,-6,8,2,8,10,3,3,-1,10,-5,-5,-2,9,2,-1,-6,1,-5,-1,-7,8,2,2,2,-1,-6,1,-3,-9,4,7,-8,-3,3,6,7,-2,7,-6,5,-7,-6,-8,-9,-8,-8,5,3,-9,-4,-6,8,3,1,6,9,-6,4,-7,-4,7,10,-8,-10,9,1,-4,-5,-6,-6,-2,-10,3,-6,-6,-5,-2,5,-8,-6,-8,4,6,8,-6,6,1,-10,-9,-7,5,-10,-5,-7,-3,-9,10,2,3,-9,6,8,-1,-4,-3,7,-2,-6,-5,9,-8,6,2,-3,10,3,-7,-5,-7,1,1,1,7,10,10,8,10,5,4,6,-10,-1,-7,-7,9,-6,8,-6,5,-4,7,-5,8,8,8,9,2,8,10,4,5,-2,9,5,5,-3,3,-9,5,-6,-3,4,-5,-5,-8,-4,2,6,-3,-7,2,1,7,-8,-1,-7,7,10,-2,9,-5,-2,1,10,9,-2,-9,-6,-5,1,7,10,9,-8,-6,-2,-1,10,2,-8,1,-2,5,7,2,-7,5,-3,-7,7,1,6,6,6,10,-1,-3,1,10,-9,-5,-1,4,-5,6,-8,-3,-9,-2,7,8,-3,2,3,4,-4,10,9,1,7,-8,-4,-9,8,-9,-5,4,10,-6,7,6,-6,9,10,-9,-5,2,-8,4,4,4,2,1,-3,4,-4,-3,7,-8,-10,-4,6,8,-6,-1,-8,2,-10,-2,10,4,8,-6,9,-2,1,-8,9,-8,-10,7,-3,-6,2,7,-3,5,10,4,3,2,1,10,8,7,8,-6,3,-5,7,6,-5,-1,4,6,-3,-3,10,4,-3,8,3,2,3,10,9,1,-8,-9,-10,-10,-5,7,8,5,-10,-3,-6,-8,4,10,5,7,8,8,5,10,2,-7,-9,-2,-5,2,1,10,-10,-9,4,10,6,-9,-7,10,8,-10,10,-6,6,-4,-9,-2,-5,-8,1,-10,-8,-7,-9,2,6,6,3,-9,-1,-4,9,1,-9,6,7,-6,-6,9,1,5,-3,-1,3,3,-7,6,5,4,8,-5,-6,1,-3,7,2,-9,-3,1,-2,-1,5,7,-7,-5,8,10,-8,-6,-1,-5,5,10,-8,-3,7,-1,1,2,8,-3,-7,2,5,-8,-9,1,-1,-1,2,-9,-7,-9,8,-8,-9,5,-3,-3,5,5,6,-7,7,-4,-1,5,-3,8,-8,-10,-7,-4,1,9,9,-9,1,10,5,6,8,6,6,5,-2,2,9,10,-3,4,-6,-5,-1,5,-10,2,2,3,3,3,-2,-5,-1,1,-5,-4,-9,7,5,-6,5,-6,7,5,7,7,3,2,-8,-7,-1,-5,-9,2,8,-10,-7,10,-6,-8,-4,-4,-9,-10,1,-2,-8,5,-1,3,5,2,2,8,6,-10,-10,-7,3,8,3,-6,-8,10,6,-1,-9,-4,5,-8,7,1,-6,-6,6,-1,-3,1,8,1,5,8,4,-4,4,-10,-3,8,-1,-6,-6,5,-6,1,8,-9,-5,-4,8,8,1,3,-2,1,5,8,6,1,2,5,3,10,10,-4,3,2,-3,7,-6,-7,-8,2,-10,6,-2,-9,-5,-10,-6,-3,10,2,10,7,10,9,-8,-1,-4,10,8,-3,-2,-5,-1,7,4,3,9,-2,-5,-8,-1,-3,8,3,7,-6,-10,5,-3,-3,2,-3,-7,1,-5,4,1,-3,3,4,3,-8,5,6,-6,5,6,-10,-2,-6,-3,4,-10,-3,-2,-2,7,10,3,-9,5,-10,1,-4,2,-3,2,9,4,-6,8,-3,-8,-8,9,4,1,-4,4,7,-10,3,8,6,3,-2,10,6,10,-2,1,-2,-10,5,4,3,2,8,9,4,5,-3,-3,6,-4,2,-6,6,-3,-1,-2,-3,-2,4,2,-3,6,-4,6,-2,-8,-4,3,10,10,2,-8,6,-3,-1,-2,4,2,-7,-7,9,-7,2,4,5,3,-7,2,3,8,10,8,-8,-3,-1,7,-8,4,6,1,-3,9,-9,5,-6,-4,3,-2,4,-7,8,4,8,-7,7,6,-6,2,-5,5,-2,-8,5,-7,5,-4,9,2,-8,-2,7,-7,-2,-8,7,-6,4,-7,4,-6,9,-6,9,-6,5,4,-7,-8,-1,5,10,9,5,-1,-2,-10,10,-1,-3,8,6,-3,4,-1,-6,2,-8,-9,9,-4,10,3,-1,9,-1,4,-10,10,8,8,10,9,-3,2,10,-4,-3,8,-9,-8,5,-8,8,-10,1,-10,10,-10,-10,8,10,8,-8,7,-7,-10,8,-9,7,-5,-9,-9,6,5,-2,4,4,-5,-10,2,7,10,-9,4,-10,4,5,10,3,-5,-8,-6,3,-9,-4,-10,2,-10,1,-6,-4,10,-6,-1,6,5,-5,8,-4,2,-7,-1,-2,-1,7,-4,10,10,-2,6,-7,4,1,1,-9,3,5,5,7,10,5,-2,-6,10,3,8,6,1,3,1,3,8,-10,-5,10,10,9,-10,-6,7,-6,-7,-6,-10,-10,-1,-6,3,3,-2,5,-8,-6,3,1,-9,-6,1,-7,-3,3,4,-6,-7,8,3,1,-10,-2,-9,5,-1,-6,-7,3,-2,5,-6,-6,9,2,7,-7,-2,-2,-1,-9,-9,5,8,5,4,7,-2,-3,-4,5,2,-8,1,5,8,4,-7,-5,-9,-6,-2,-3,3,-5,4,-10,-2,-1,8,-4,-10,-6,-9,3,-1,1,1,8,-3,-2,-3,-5,9,-9,-2,5,-3,-2,-10,-2,-3,6,8,-7,-9,10,-1,8,-1,-9,9,-6,5,-7,-2,-7,4,8,-9,5,-3,-9,-9,6,-5,-4,9,9,7,-10,-8,5,-2,6,-7,-9,-5,5,-9,-8,6,-9,2,-10,5,-10,-8,-5,-8,-4,-1,5,3,-3,-1,-7,1,-1,-5,3,-4,4,-10,4,9,2,3,5,-5,10,-7,2,-4,-2,5,-8,-10,3,-1,-9,5,8,7,5,4,-10,2,-1,-7,5,10,-3,6,-2,10,-5,3,4,1,-5,-5,-5,9,5,-1,-7,4,1,5,6,7,4,-7,1,8,-2,-1,1,-3,3,5,-4,2,-8,1,6,-5,7,7,-3,-3,9,2,-1,6,-10,8,1,-1,10,-3,9,5,4,-3,-10,-2,10,8,-8,7,-7,-3,-8,-7,4,3,10,1,-3,-10,1,-1,-3,-2,3,-10,8,-9,8,5,6,7,-7,9], dtype = "uint64")#candidate|8411|(1280,)|const|uint64
const_8412 = relay.const([-1.605177,9.022708,6.087830,-8.466862,-7.297430,2.346125,7.477769,-8.148937,6.089178,-0.081208,-1.829310,-3.364338,3.490180,8.995278,-2.684315,5.067683,-1.189450,7.974992,9.418890,-2.165505,-6.064567,-8.820005,-9.160351,-5.871135,-0.080097,-0.629003,2.259272,-0.844296,-6.232653,4.929079,-7.278836,7.076304,7.445791,-9.285782,-8.805243,1.212877,-7.395705,8.892364,-0.574878,-4.564859,-0.367720,8.882701,-8.017884,-1.409558,3.900650,1.303577,-1.891958,6.952847,-4.041087,-9.496266,-9.698573,3.269068,-9.404605,-3.579374,-9.272420,2.316467,6.299360,0.791990,7.409449,6.800086,6.176311,-7.404149,0.577409,-2.564236,7.765829,6.686607,-8.004703,-5.995966,9.508842,4.751645,-9.067158,-2.331881,3.572925,9.122115,6.247841,9.003236,5.365255,-2.630071,6.956598,-2.724860,6.206649,1.664948,-5.887247,-3.977950,-9.708828,-4.006159,0.717561,-6.097544,-8.474043,5.637175,-2.827945,-5.210103,-4.464838,9.206259,9.528120,-1.332500,6.193370,-4.650604,3.572166,1.714730,-1.997281,-8.176554,-0.844914,-9.571260,-7.791704,-2.634875,5.751803,0.939267,5.111258,1.807705,-2.527908,3.988154,3.483649,-9.476971,3.503529,-0.724612,8.145998,3.097887,-4.164843,-6.104593,1.003901,4.019063,0.683367,-7.181607,7.341749,-8.683240,5.565796,0.737076,7.230214,5.561779,7.609844,2.415420,9.762175,-7.957156,-4.735576,-6.323242,5.345600,-7.939438,-0.049874,4.952787,0.361339,-1.441989,-8.005339,3.342883,1.501142,-5.083388,3.768431,7.202193,-2.536417,-8.499797,-1.024020,-8.490964,-6.424530,-9.349707,1.471286,7.316984,8.987082,0.296683,8.322062,-0.818068,2.404513,-7.017409,-7.509796,3.025679,4.751265,8.111637,6.163728,-7.171145,6.770323,-2.222255,-5.507452,9.627348,9.577543,2.476444,5.647188,3.774842,-8.198686,8.513512,0.624449,4.059524,-4.862211,-8.680377,-2.700440,-5.597801,-9.670004,-2.657082,-4.539933,-3.457504,-1.805370,-2.183800,3.230484,2.796564,1.599652,-3.447566,5.043853,-8.232356,1.193967,6.988999,6.266886,8.404694,0.893881,-1.082578,1.289661,0.687185,4.528536,4.826047,-2.377034,-8.190129,-3.262648,-9.750303,3.502284,2.665480,-9.045214,-6.733320,-2.325842,9.276635,-1.289235,4.645150,-9.042797,3.948909,1.454372,2.077338,8.680751,2.695201,-4.109150,-0.957348,-4.390816,-8.421475,-6.961829,-9.880960,-3.900719,-1.185634,-6.475797,-7.268766,2.812047,-6.355329,7.698036,-8.089080,3.878425,-7.056065,5.717103,7.780895,-1.897500,-2.034880,7.804771,-0.727927,-6.654813,-6.684372,-0.476575,-9.171660,-6.100372,-2.807157,-2.985115,3.382993,2.095484,0.881812,-9.239998,-8.471330,5.830334,9.596544,-1.557656,-4.923347,1.643325,8.133782,-1.029780,6.155051,-9.132498,-8.194913,-0.412398,-9.582518,6.921800,-3.209254,5.218471,-0.068095,-8.619768,8.968215,6.596134,1.163019,-3.973618,8.632661,-5.671819,3.790385,-3.614447,9.948237,4.973952,-7.789940,-2.086058,-8.088828,-6.900808,-8.758280,3.264617,0.709626,3.345224,4.734174,8.394652,-5.733838,7.651594,-4.944018,5.542285,-9.058172,4.132373,0.771038,7.501095,4.853853,1.467722,-7.749250,0.918255,4.490229,0.091564,-6.731479,2.184901,-0.709447,2.796395,4.585402,7.405162,3.697904,-8.249108,-9.425408,9.013015,1.616716,5.960925,3.835649,4.909562,1.180259,8.297520,0.466132,0.925831,7.192555,-8.724072,8.462216,-5.671635,8.395330,-3.171505,-5.612523,7.573189,-7.164352,-2.379802,-4.809200,-7.276523,-9.368204,4.996368,3.467947,6.254685,0.136293,4.739674,8.889424,-1.374135,-4.064511,-1.876767,-0.553616,7.693126,-5.609727,-2.995517,9.460323,2.251300,-4.358897,-9.840647,8.913479,-5.035843,5.970001,0.101172,5.132032,0.173613,-1.976950,-2.324012,-6.302947,9.582080,8.044927,2.376447,7.811208,-2.740014,7.124457,0.387253,2.569282,-8.771141,6.575963,5.537779,5.992167,-8.477164,7.694119,-1.214490,-8.986256,-9.307464,4.572950,0.541857,-5.273674,-6.161023,-5.907617,-2.904666,1.005357,-8.213731,7.424013,7.029222,4.191958,-6.305989,-1.506980,-5.011471,5.391048,0.726084,-7.077406,7.714245,-6.082711,-9.650836,8.205639,-7.988140,8.240969,3.251534,9.847546,1.115294,-4.805650,0.405636,-2.022485,-4.657736,-9.331607,-6.376550,-1.328384,-9.884138,5.292585,1.567504,1.597976,4.039796,-3.513286,0.768349,3.875396,-1.845131,0.889320,7.295219,5.968101,9.752783,1.468779,-3.509744,8.303795,-6.388885,-6.190981,0.316161,-3.654643,-7.537532,6.313703,-8.468019,3.062893,-4.675983,-9.234136,-1.226446,1.610921,3.240599,-6.448447,-9.897468,-1.041864,-7.214503,-7.535622,8.130694,0.343947,-8.949438,7.633047,1.584468,4.143536,4.204969,4.990041,-3.821618,8.695632,7.525563,6.318624,7.919554,5.471694,-1.400178,9.589006,-4.556512,-1.597809,4.594434,6.757337,-5.518180,4.972347,-6.126012,5.329749,3.552076,-5.768348,-5.328304,0.854302,-2.894769,-6.912316,-3.960280,-4.886038,-6.846623,5.461724,-8.432519,-9.548519,-1.313179,6.326462,6.510749,8.611665,8.266736,8.549693,6.464910,-2.513652,5.043340,1.526415,-5.849561,-2.983395,-7.328315,7.189731,-0.025073,2.349599,2.959446,5.092938], dtype = "float64")#candidate|8412|(504,)|const|float64
call_8410 = relay.TupleGetItem(func_5899_call(relay.reshape(const_8411.astype('uint64'), [16, 10, 8]), relay.reshape(const_8412.astype('float64'), [504,]), ), 2)
call_8413 = relay.TupleGetItem(func_5902_call(relay.reshape(const_8411.astype('uint64'), [16, 10, 8]), relay.reshape(const_8412.astype('float64'), [504,]), ), 2)
output = relay.Tuple([call_8393,call_8403,var_8404,call_8410,const_8411,const_8412,])
output2 = relay.Tuple([call_8394,call_8405,var_8404,call_8413,const_8411,const_8412,])
func_8416 = relay.Function([var_8404,], output)
mod['func_8416'] = func_8416
mod = relay.transform.InferType()(mod)
mutated_mod['func_8416'] = func_8416
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8417 = relay.var("var_8417", dtype = "uint64", shape = (495,))#candidate|8417|(495,)|var|uint64
func_8416_call = mutated_mod.get_global_var('func_8416')
call_8418 = func_8416_call(var_8417)
output = call_8418
func_8419 = relay.Function([var_8417], output)
mutated_mod['func_8419'] = func_8419
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_8429 = relay.TupleGetItem(func_5551_call(), 0)
call_8430 = relay.TupleGetItem(func_5553_call(), 0)
func_2918_call = mod.get_global_var('func_2918')
func_2924_call = mutated_mod.get_global_var('func_2924')
var_8479 = relay.var("var_8479", dtype = "bool", shape = (1188,))#candidate|8479|(1188,)|var|bool
const_8480 = relay.const([[5.041685,2.150595,-8.050119,-6.352074,-8.156913,7.039493,3.159732,-2.480220,-0.368297,-8.843287,9.533283,9.512760,6.260095,5.019955,-1.779512,0.830004,-2.821797,5.855885,-5.853586,-8.557670,9.182321,4.681738,-6.579752,-9.081272,4.551770,0.642848,-9.574647,-3.955490,-3.128453,-3.735256,3.833111,-5.993863,-8.090418,-6.104963,1.357501,9.925485,8.102473,8.779963,-0.897010,-4.808411,-4.110441,-3.334698,-6.614592,-4.917123,-9.815283],[7.387417,9.611957,-8.947955,-1.709704,-5.721876,3.517725,-0.872680,-9.183357,-3.669905,8.379632,2.284589,1.998725,2.843971,-5.150694,-8.078235,-9.849796,-9.177453,8.516595,9.312715,-3.524499,9.045118,8.773182,-9.173083,9.746328,-8.404312,0.919647,-4.926129,1.788275,-9.161052,-8.037813,5.653729,6.642897,-0.912878,-4.291276,-3.437367,3.446809,-4.081019,3.601913,8.240034,8.812664,-7.399829,2.333317,7.164469,-6.191960,-7.414830],[-4.700064,2.187553,3.827324,-6.160734,6.383029,-4.068482,-2.607835,8.100362,0.919345,-5.192521,-0.201475,1.904886,-6.199573,-3.610789,3.526158,0.458134,-7.605657,3.386094,-6.548022,3.126821,-5.065449,-3.161784,-7.797193,-7.253020,-0.112973,5.474646,1.453412,-6.952302,5.929729,-9.212503,2.763938,3.487904,-9.225393,-2.358422,-6.372805,-7.564041,6.414864,-3.575546,-1.782735,-0.553197,6.509363,0.769710,-1.140264,-8.787143,6.701555]], dtype = "float64")#candidate|8480|(3, 45)|const|float64
call_8478 = relay.TupleGetItem(func_2918_call(relay.reshape(var_8479.astype('bool'), [11, 12, 9]), relay.reshape(var_8479.astype('bool'), [11, 12, 9]), relay.reshape(const_8480.astype('float64'), [135,]), relay.reshape(var_8479.astype('float32'), [11, 12, 9]), ), 1)
call_8481 = relay.TupleGetItem(func_2924_call(relay.reshape(var_8479.astype('bool'), [11, 12, 9]), relay.reshape(var_8479.astype('bool'), [11, 12, 9]), relay.reshape(const_8480.astype('float64'), [135,]), relay.reshape(var_8479.astype('float32'), [11, 12, 9]), ), 1)
uop_8482 = relay.log10(const_8480.astype('float32')) # shape=(3, 45)
func_144_call = mod.get_global_var('func_144')
func_147_call = mutated_mod.get_global_var('func_147')
call_8496 = func_144_call(relay.reshape(const_8480.astype('float64'), [9, 15, 1]))
call_8497 = func_144_call(relay.reshape(const_8480.astype('float64'), [9, 15, 1]))
func_1194_call = mod.get_global_var('func_1194')
func_1199_call = mutated_mod.get_global_var('func_1199')
var_8500 = relay.var("var_8500", dtype = "int16", shape = (350,))#candidate|8500|(350,)|var|int16
var_8501 = relay.var("var_8501", dtype = "float32", shape = (1950,))#candidate|8501|(1950,)|var|float32
var_8502 = relay.var("var_8502", dtype = "int32", shape = (4, 448))#candidate|8502|(4, 448)|var|int32
call_8499 = relay.TupleGetItem(func_1194_call(relay.reshape(var_8500.astype('int16'), [10, 7, 5]), relay.reshape(var_8501.astype('float32'), [1950,]), relay.reshape(var_8502.astype('int32'), [1792,]), ), 0)
call_8503 = relay.TupleGetItem(func_1199_call(relay.reshape(var_8500.astype('int16'), [10, 7, 5]), relay.reshape(var_8501.astype('float32'), [1950,]), relay.reshape(var_8502.astype('int32'), [1792,]), ), 0)
var_8506 = relay.var("var_8506", dtype = "float32", shape = (3, 45))#candidate|8506|(3, 45)|var|float32
bop_8507 = relay.multiply(uop_8482.astype('int64'), relay.reshape(var_8506.astype('int64'), relay.shape_of(uop_8482))) # shape=(3, 45)
uop_8518 = relay.log2(uop_8482.astype('float64')) # shape=(3, 45)
bop_8525 = relay.floor_mod(uop_8518.astype('float32'), relay.reshape(uop_8482.astype('float32'), relay.shape_of(uop_8518))) # shape=(3, 45)
var_8528 = relay.var("var_8528", dtype = "float64", shape = (3, 45))#candidate|8528|(3, 45)|var|float64
bop_8529 = relay.greater(uop_8518.astype('bool'), relay.reshape(var_8528.astype('bool'), relay.shape_of(uop_8518))) # shape=(3, 45)
var_8547 = relay.var("var_8547", dtype = "float32", shape = (3, 45))#candidate|8547|(3, 45)|var|float32
bop_8548 = relay.less_equal(bop_8525.astype('bool'), relay.reshape(var_8547.astype('bool'), relay.shape_of(bop_8525))) # shape=(3, 45)
output = relay.Tuple([call_8429,call_8478,var_8479,call_8496,call_8499,var_8500,var_8501,var_8502,bop_8507,bop_8529,bop_8548,])
output2 = relay.Tuple([call_8430,call_8481,var_8479,call_8497,call_8503,var_8500,var_8501,var_8502,bop_8507,bop_8529,bop_8548,])
func_8575 = relay.Function([var_8479,var_8500,var_8501,var_8502,var_8506,var_8528,var_8547,], output)
mod['func_8575'] = func_8575
mod = relay.transform.InferType()(mod)
mutated_mod['func_8575'] = func_8575
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8575_call = mutated_mod.get_global_var('func_8575')
var_8577 = relay.var("var_8577", dtype = "bool", shape = (1188,))#candidate|8577|(1188,)|var|bool
var_8578 = relay.var("var_8578", dtype = "int16", shape = (350,))#candidate|8578|(350,)|var|int16
var_8579 = relay.var("var_8579", dtype = "float32", shape = (1950,))#candidate|8579|(1950,)|var|float32
var_8580 = relay.var("var_8580", dtype = "int32", shape = (4, 448))#candidate|8580|(4, 448)|var|int32
var_8581 = relay.var("var_8581", dtype = "float32", shape = (3, 45))#candidate|8581|(3, 45)|var|float32
var_8582 = relay.var("var_8582", dtype = "float64", shape = (3, 45))#candidate|8582|(3, 45)|var|float64
var_8583 = relay.var("var_8583", dtype = "float32", shape = (3, 45))#candidate|8583|(3, 45)|var|float32
call_8576 = func_8575_call(var_8577,var_8578,var_8579,var_8580,var_8581,var_8582,var_8583,)
output = call_8576
func_8584 = relay.Function([var_8577,var_8578,var_8579,var_8580,var_8581,var_8582,var_8583,], output)
mutated_mod['func_8584'] = func_8584
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6658_call = mod.get_global_var('func_6658')
func_6659_call = mutated_mod.get_global_var('func_6659')
call_8613 = func_6658_call()
call_8614 = func_6658_call()
output = call_8613
output2 = call_8614
func_8621 = relay.Function([], output)
mod['func_8621'] = func_8621
mod = relay.transform.InferType()(mod)
output = func_8621()
func_8622 = relay.Function([], output)
mutated_mod['func_8622'] = func_8622
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_8727 = func_8012_call()
call_8728 = func_8012_call()
output = relay.Tuple([call_8727,])
output2 = relay.Tuple([call_8728,])
func_8733 = relay.Function([], output)
mod['func_8733'] = func_8733
mod = relay.transform.InferType()(mod)
output = func_8733()
func_8734 = relay.Function([], output)
mutated_mod['func_8734'] = func_8734
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_8737 = relay.TupleGetItem(func_5400_call(), 0)
call_8738 = relay.TupleGetItem(func_5402_call(), 0)
func_6882_call = mod.get_global_var('func_6882')
func_6885_call = mutated_mod.get_global_var('func_6885')
var_8756 = relay.var("var_8756", dtype = "int16", shape = (126,))#candidate|8756|(126,)|var|int16
call_8755 = relay.TupleGetItem(func_6882_call(relay.reshape(var_8756.astype('int16'), [126,])), 1)
call_8757 = relay.TupleGetItem(func_6885_call(relay.reshape(var_8756.astype('int16'), [126,])), 1)
output = relay.Tuple([call_8737,call_8755,var_8756,])
output2 = relay.Tuple([call_8738,call_8757,var_8756,])
func_8774 = relay.Function([var_8756,], output)
mod['func_8774'] = func_8774
mod = relay.transform.InferType()(mod)
mutated_mod['func_8774'] = func_8774
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8775 = relay.var("var_8775", dtype = "int16", shape = (126,))#candidate|8775|(126,)|var|int16
func_8774_call = mutated_mod.get_global_var('func_8774')
call_8776 = func_8774_call(var_8775)
output = call_8776
func_8777 = relay.Function([var_8775], output)
mutated_mod['func_8777'] = func_8777
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_8804 = func_6002_call()
call_8805 = func_6002_call()
func_6354_call = mod.get_global_var('func_6354')
func_6358_call = mutated_mod.get_global_var('func_6358')
var_8842 = relay.var("var_8842", dtype = "float32", shape = (182,))#candidate|8842|(182,)|var|float32
const_8843 = relay.const(-0.244562, dtype = "float64")#candidate|8843|()|const|float64
call_8841 = relay.TupleGetItem(func_6354_call(relay.reshape(var_8842.astype('float32'), [14, 13, 1]), relay.reshape(const_8843.astype('float64'), []), ), 4)
call_8844 = relay.TupleGetItem(func_6358_call(relay.reshape(var_8842.astype('float32'), [14, 13, 1]), relay.reshape(const_8843.astype('float64'), []), ), 4)
output = relay.Tuple([call_8804,call_8841,var_8842,const_8843,])
output2 = relay.Tuple([call_8805,call_8844,var_8842,const_8843,])
func_8862 = relay.Function([var_8842,], output)
mod['func_8862'] = func_8862
mod = relay.transform.InferType()(mod)
mutated_mod['func_8862'] = func_8862
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8863 = relay.var("var_8863", dtype = "float32", shape = (182,))#candidate|8863|(182,)|var|float32
func_8862_call = mutated_mod.get_global_var('func_8862')
call_8864 = func_8862_call(var_8863)
output = call_8864
func_8865 = relay.Function([var_8863], output)
mutated_mod['func_8865'] = func_8865
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7114_call = mod.get_global_var('func_7114')
func_7115_call = mutated_mod.get_global_var('func_7115')
call_8872 = relay.TupleGetItem(func_7114_call(), 0)
call_8873 = relay.TupleGetItem(func_7115_call(), 0)
output = call_8872
output2 = call_8873
func_8876 = relay.Function([], output)
mod['func_8876'] = func_8876
mod = relay.transform.InferType()(mod)
mutated_mod['func_8876'] = func_8876
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8876_call = mutated_mod.get_global_var('func_8876')
call_8877 = func_8876_call()
output = call_8877
func_8878 = relay.Function([], output)
mutated_mod['func_8878'] = func_8878
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8919 = relay.const([[[False,False,True,False,True,True,False,True,True,False,False,False,True,False,False],[True,False,False,False,True,True,False,False,False,True,False,False,False,True,False],[True,False,False,False,False,True,True,False,False,False,False,True,False,True,True],[True,False,True,True,False,False,False,False,False,True,False,False,True,False,True],[True,True,True,False,True,True,True,True,True,False,True,True,True,False,False],[False,True,False,True,False,False,True,False,True,True,True,True,True,False,True],[False,False,True,False,False,False,True,True,True,True,True,True,False,False,True],[True,False,False,True,True,False,False,False,False,True,True,False,False,False,False]],[[True,True,False,False,True,False,True,False,False,False,True,True,True,False,False],[False,True,False,False,False,False,False,False,False,True,True,False,True,True,False],[True,True,True,False,True,False,False,False,True,False,True,False,False,False,False],[False,True,True,False,True,False,False,False,False,True,True,False,True,False,True],[True,True,False,True,True,False,True,False,False,False,False,True,True,False,False],[True,False,True,True,True,False,True,True,False,True,False,True,True,True,True],[True,True,True,True,False,False,True,True,False,False,False,True,True,True,True],[True,False,False,False,True,True,True,False,False,True,False,True,True,True,False]],[[False,False,True,True,False,True,False,True,True,False,True,True,True,True,False],[True,False,False,True,True,False,False,False,False,False,True,False,True,False,False],[False,True,False,True,False,False,True,False,False,False,True,True,True,False,False],[True,True,True,True,False,False,True,False,False,False,True,True,False,False,False],[False,False,True,True,False,True,True,True,False,True,True,True,True,False,True],[True,True,True,False,False,True,False,False,False,False,False,True,False,False,True],[False,True,False,True,False,False,False,True,True,False,True,False,True,False,False],[True,True,True,False,False,True,True,False,True,True,True,True,False,True,False]],[[False,True,True,False,False,True,False,False,False,True,True,True,True,False,True],[True,True,True,False,True,True,True,True,True,True,False,False,False,True,True],[False,True,False,True,True,False,False,True,True,True,False,False,False,True,False],[False,False,False,True,False,True,False,True,False,True,False,True,False,True,False],[True,True,True,False,True,False,False,True,True,True,False,True,True,True,False],[False,True,False,False,False,False,True,False,True,False,True,False,True,True,True],[True,True,False,False,True,True,False,True,True,True,True,True,False,False,False],[False,False,True,False,False,True,False,False,True,True,False,True,True,True,False]],[[False,False,True,True,False,False,False,False,False,True,True,True,True,True,True],[True,True,False,True,True,False,False,True,False,False,False,False,True,False,True],[True,False,True,True,True,True,True,False,True,True,True,False,False,False,True],[False,False,False,False,True,True,False,True,False,True,True,True,True,False,True],[True,False,True,False,True,True,False,False,True,True,False,False,False,False,True],[True,False,True,False,False,False,True,True,True,False,False,True,True,True,True],[False,False,True,True,True,False,False,True,True,True,False,True,False,False,True],[True,False,False,False,False,False,False,True,True,True,True,True,False,False,True]],[[False,False,True,True,False,False,False,False,True,True,False,False,False,False,False],[True,True,False,True,True,False,False,True,False,True,False,True,True,True,False],[False,True,False,True,False,False,False,False,True,True,True,True,True,True,True],[False,True,False,False,False,True,True,False,False,True,False,False,False,True,True],[False,True,False,True,False,True,True,False,True,False,False,True,True,True,False],[False,True,True,False,False,False,True,True,False,True,False,False,False,False,True],[True,True,False,False,False,True,True,True,True,False,False,True,True,True,True],[False,False,False,True,False,False,True,False,True,False,True,True,False,True,False]],[[False,True,True,False,True,True,True,False,False,True,False,False,False,False,False],[True,False,False,False,True,False,False,True,False,False,True,False,True,True,True],[True,True,False,False,False,True,True,True,True,False,False,False,False,True,False],[False,False,False,False,False,True,True,True,False,True,True,True,True,False,True],[True,False,False,True,False,False,True,False,False,False,False,False,False,False,True],[False,True,False,False,True,False,False,False,True,False,False,False,False,True,True],[True,False,True,True,False,True,False,True,True,False,True,True,False,False,False],[False,False,True,False,True,False,False,True,True,False,True,True,False,True,False]],[[True,False,True,False,False,True,False,False,False,True,False,True,True,False,True],[True,False,False,False,False,True,False,True,False,True,True,True,False,True,True],[True,True,True,False,True,True,True,True,True,True,True,True,False,False,False],[False,True,False,False,True,True,True,True,False,True,True,True,False,True,False],[True,False,True,True,False,True,False,True,False,False,False,True,True,True,True],[True,True,False,False,True,True,True,False,True,True,True,False,False,True,True],[False,True,False,False,False,False,True,False,False,True,False,False,True,False,True],[False,True,False,True,True,True,False,False,True,True,True,False,True,True,False]],[[True,False,True,True,False,True,True,True,True,True,False,False,False,True,False],[True,False,True,False,True,True,True,True,True,True,True,True,True,False,False],[True,True,False,False,False,False,True,False,True,True,True,False,True,True,True],[True,True,True,False,True,False,True,False,False,True,True,True,False,True,True],[False,False,True,True,True,True,True,False,True,True,True,True,True,False,False],[False,True,True,False,False,False,False,True,True,False,False,False,True,False,True],[True,True,False,False,False,True,True,True,True,True,False,True,False,True,True],[False,False,True,False,False,True,False,False,False,True,True,True,False,False,True]],[[True,True,False,True,True,False,False,True,False,False,False,False,True,False,False],[False,False,False,True,False,False,False,True,False,True,False,True,False,False,False],[True,False,True,False,True,True,False,False,False,False,False,False,True,True,False],[True,True,False,True,True,True,True,True,False,True,False,False,True,False,True],[True,False,True,False,False,False,True,False,False,True,True,False,True,False,True],[True,True,True,False,False,False,True,True,True,True,False,False,True,True,False],[False,False,False,True,True,False,False,False,True,False,False,False,True,True,False],[False,True,True,True,True,True,True,False,False,True,True,False,True,False,False]],[[True,True,False,False,False,True,False,False,False,True,True,False,True,False,True],[True,False,False,False,False,True,True,True,True,True,False,False,False,True,True],[False,True,False,False,True,False,False,True,True,False,True,False,False,False,False],[True,False,False,False,False,False,True,False,False,True,True,False,True,True,False],[False,True,True,False,False,False,True,False,True,False,False,False,False,False,True],[False,True,True,False,True,True,True,True,True,True,False,True,True,True,False],[True,False,False,False,False,False,False,True,False,False,True,False,False,True,False],[True,True,True,False,False,True,False,True,False,True,False,False,False,True,True]],[[True,True,True,True,True,False,True,False,True,True,False,True,True,False,False],[True,False,False,False,False,False,True,False,True,True,False,True,True,False,False],[True,True,True,False,False,True,False,True,True,False,False,True,True,True,True],[True,False,True,True,True,False,True,False,False,False,False,False,True,True,True],[False,False,False,True,True,True,False,True,False,True,True,True,False,False,False],[False,False,True,True,True,False,True,True,False,False,True,False,False,True,False],[True,True,False,False,False,True,True,True,True,True,False,False,False,True,True],[True,True,True,False,False,False,False,False,True,False,False,True,True,False,False]],[[True,False,True,True,False,True,True,True,False,False,False,True,False,True,False],[True,False,True,False,False,True,True,False,True,False,False,True,True,True,False],[True,False,False,False,False,False,False,True,True,False,True,True,True,True,False],[True,True,False,False,True,False,False,False,False,True,True,True,True,False,False],[True,False,True,True,False,True,True,False,False,False,True,True,True,False,False],[False,False,True,False,False,True,True,False,True,True,False,False,False,True,True],[True,False,True,False,True,True,True,False,False,True,False,True,False,True,True],[False,True,True,False,False,False,True,True,False,False,False,False,True,True,True]],[[False,False,True,True,False,False,False,True,False,False,False,False,True,False,False],[True,False,True,False,False,True,False,True,False,True,False,True,True,True,False],[True,True,False,False,False,False,True,False,True,True,True,True,False,False,True],[False,True,True,True,False,False,True,False,True,True,True,True,False,True,False],[False,False,True,False,False,True,False,True,False,True,True,True,False,True,True],[True,True,True,True,False,True,True,True,True,False,True,True,False,True,False],[False,False,False,False,False,False,True,True,False,True,False,True,False,True,False],[False,False,True,True,True,True,False,False,True,True,True,False,False,True,True]]], dtype = "bool")#candidate|8919|(14, 8, 15)|const|bool
const_8920 = relay.const([[[True,True,False,True,False,True,True,True,True,False,True,False,True,False,False],[True,True,True,False,False,False,False,True,True,True,False,True,False,True,True],[False,False,False,True,False,False,False,True,True,True,True,True,True,False,True],[True,True,False,False,True,True,False,True,False,False,True,False,True,True,True],[False,True,True,True,False,True,True,False,False,True,True,False,False,False,False],[True,True,False,False,True,True,True,False,True,True,False,False,True,True,True],[False,False,False,True,True,True,True,False,True,True,True,True,True,True,True],[False,True,True,False,True,False,True,False,False,False,True,False,False,False,False]],[[True,False,False,False,True,True,True,False,True,False,False,True,True,True,False],[True,True,True,False,True,False,False,True,False,True,True,True,True,False,True],[True,True,True,True,True,True,False,False,True,False,True,True,True,False,True],[True,True,False,True,True,False,True,False,True,False,True,False,True,False,False],[True,False,False,False,True,True,True,False,False,True,False,True,False,True,True],[True,False,True,False,True,False,False,True,False,True,True,True,True,False,False],[False,True,False,False,False,True,True,True,True,True,False,True,False,True,False],[False,False,True,True,False,False,True,False,True,False,True,False,True,True,True]],[[True,True,False,True,True,False,True,False,False,False,False,False,False,False,True],[False,False,False,True,True,False,False,True,True,True,True,False,False,False,True],[True,False,False,True,True,True,False,False,False,False,True,False,False,True,False],[False,True,True,False,True,False,False,True,True,True,False,False,False,False,True],[True,True,True,False,True,False,True,True,True,True,True,False,True,True,True],[False,True,False,True,True,True,True,False,False,True,True,True,True,True,True],[False,True,True,True,True,False,False,False,True,True,False,False,True,True,True],[False,True,True,False,False,False,False,False,False,False,True,False,True,False,True]],[[True,True,False,False,False,True,False,False,False,True,True,False,True,False,True],[False,False,True,True,True,True,False,True,True,False,True,False,False,True,True],[False,False,False,False,False,False,False,False,True,False,True,False,False,False,True],[True,False,True,False,False,False,False,False,True,True,False,True,False,True,False],[True,True,False,True,True,False,True,True,False,False,True,True,True,True,True],[False,True,True,True,True,True,False,True,True,True,True,False,False,True,True],[False,False,False,False,True,True,False,False,True,False,True,False,True,False,False],[False,False,True,False,True,False,True,True,False,True,True,True,True,True,False]],[[False,False,False,False,False,True,True,True,True,False,True,False,True,True,False],[True,True,False,False,True,False,False,True,True,False,False,False,True,True,False],[True,True,False,True,True,False,False,False,True,False,True,True,False,False,False],[True,True,True,True,True,True,True,True,False,True,False,False,True,True,True],[True,True,False,True,False,True,False,True,True,True,True,False,False,True,False],[False,False,True,False,False,False,True,True,False,True,False,False,True,False,True],[False,True,False,False,True,True,True,True,False,False,False,True,True,True,False],[True,True,True,True,True,True,True,False,False,True,True,True,True,False,True]],[[True,False,False,True,False,True,False,True,False,False,False,True,True,True,False],[False,False,True,True,True,True,False,True,True,False,False,True,True,False,True],[False,True,False,True,False,False,False,True,False,True,True,False,False,True,True],[False,True,True,True,False,True,False,False,False,False,False,False,True,False,False],[False,False,True,False,True,False,True,False,True,True,True,False,True,True,True],[False,True,False,True,False,False,False,True,False,False,True,True,True,False,True],[True,False,True,True,True,True,True,False,True,False,True,False,False,False,True],[False,False,False,False,True,False,True,False,True,True,False,False,False,True,False]],[[True,True,True,True,False,False,False,True,False,True,True,True,True,True,True],[False,True,True,False,False,False,False,True,False,False,False,True,False,True,False],[True,False,True,False,True,True,False,True,False,False,False,True,True,True,True],[False,True,False,True,True,False,True,False,True,False,False,False,True,False,True],[True,True,True,True,True,True,False,True,False,True,True,True,False,False,False],[True,False,False,False,True,True,False,True,True,False,True,True,False,False,False],[True,True,True,False,False,True,True,True,False,False,False,False,True,False,False],[True,False,True,True,False,False,True,False,True,False,False,False,False,False,False]],[[False,True,False,True,False,False,False,True,True,True,True,True,True,False,False],[True,False,False,False,True,False,True,False,False,False,True,True,True,True,True],[True,True,True,True,False,True,False,True,False,True,False,False,True,True,False],[True,False,False,True,True,False,True,False,False,True,False,True,False,True,False],[False,True,True,True,False,False,False,False,True,False,False,True,False,True,False],[True,False,False,True,True,True,True,False,True,False,True,False,True,False,True],[False,False,False,True,True,True,True,True,True,False,True,True,True,False,False],[True,True,False,False,False,True,True,False,True,True,False,True,True,True,True]],[[False,True,True,True,True,False,False,False,True,True,True,False,True,False,False],[True,False,True,False,False,False,True,True,False,True,False,False,False,True,True],[True,False,True,False,True,False,False,True,False,True,False,True,True,True,False],[False,True,False,True,True,False,True,False,True,True,True,False,True,True,True],[True,False,True,False,False,False,False,False,True,False,True,False,False,True,True],[False,True,False,False,False,True,False,False,False,True,True,True,True,True,True],[True,False,True,False,False,False,True,False,False,False,False,False,False,False,True],[False,False,False,False,False,False,False,False,False,False,False,False,True,True,True]],[[False,False,True,False,True,True,False,False,True,False,False,True,False,True,False],[True,True,False,True,True,True,False,True,True,False,True,True,False,True,True],[True,True,True,False,True,False,True,True,False,False,False,True,False,False,False],[False,False,True,False,True,False,True,True,False,True,False,True,False,False,False],[True,False,False,True,False,True,True,False,True,False,False,True,True,False,True],[True,False,True,False,True,True,False,False,False,False,True,False,False,False,True],[False,True,True,False,False,True,False,False,True,True,False,False,False,True,False],[True,False,True,True,False,False,False,False,False,False,True,False,True,True,False]],[[False,True,True,True,False,False,False,False,False,False,True,False,False,True,True],[False,False,True,True,True,True,True,True,True,False,False,False,False,True,True],[False,True,True,True,False,True,True,False,True,True,False,False,True,False,True],[False,True,True,True,False,True,False,False,False,False,False,False,False,False,True],[False,False,False,True,True,False,False,True,True,True,False,True,True,False,False],[False,False,True,True,False,True,False,False,True,True,False,True,True,True,True],[True,True,True,True,False,True,False,False,False,True,True,False,False,False,False],[False,False,True,True,True,True,True,False,True,False,True,False,False,False,True]],[[True,True,False,True,True,False,False,True,False,False,False,True,False,False,True],[True,True,True,False,False,False,True,True,False,False,False,True,False,False,False],[True,True,True,True,False,False,True,False,True,True,False,True,False,True,False],[True,False,True,False,False,True,True,True,True,True,True,True,True,False,True],[True,True,False,False,True,True,True,False,True,False,False,False,False,False,True],[False,False,True,True,False,True,False,True,False,True,True,True,False,False,True],[True,True,True,False,True,False,True,False,False,False,True,False,False,True,True],[True,True,True,False,False,True,True,False,True,True,False,False,True,False,False]],[[False,False,True,True,False,False,True,True,True,False,True,False,False,False,True],[True,True,False,False,False,False,False,True,False,True,True,False,True,False,True],[True,False,True,False,False,True,False,True,False,True,True,True,True,False,True],[False,True,True,False,False,True,False,False,False,True,True,True,True,False,True],[False,True,False,True,True,False,False,True,True,False,True,True,False,False,True],[True,True,False,False,True,False,True,False,False,False,True,True,True,False,True],[True,True,False,True,False,True,True,True,True,False,True,False,True,True,False],[False,True,True,True,True,True,True,True,True,False,True,False,True,False,False]],[[True,True,True,True,False,False,True,True,True,False,False,False,False,True,False],[False,False,True,False,True,False,True,False,True,False,False,False,False,False,True],[False,True,False,False,False,True,False,True,False,True,True,False,True,True,False],[True,False,False,False,False,True,True,True,True,False,True,False,True,True,False],[False,True,True,False,True,True,True,True,True,False,False,False,False,False,False],[False,True,False,False,False,False,True,True,True,True,True,False,True,False,True],[True,False,False,False,True,False,True,False,True,False,False,False,True,True,False],[True,True,True,True,False,True,True,True,False,False,False,False,False,True,False]]], dtype = "bool")#candidate|8920|(14, 8, 15)|const|bool
bop_8921 = relay.logical_and(const_8919.astype('bool'), relay.reshape(const_8920.astype('bool'), relay.shape_of(const_8919))) # shape=(14, 8, 15)
uop_8926 = relay.acosh(const_8919.astype('float32')) # shape=(14, 8, 15)
uop_8929 = relay.asinh(uop_8926.astype('float64')) # shape=(14, 8, 15)
output = relay.Tuple([bop_8921,uop_8929,])
output2 = relay.Tuple([bop_8921,uop_8929,])
func_8933 = relay.Function([], output)
mod['func_8933'] = func_8933
mod = relay.transform.InferType()(mod)
mutated_mod['func_8933'] = func_8933
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8933_call = mutated_mod.get_global_var('func_8933')
call_8934 = func_8933_call()
output = call_8934
func_8935 = relay.Function([], output)
mutated_mod['func_8935'] = func_8935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_8936 = relay.TupleGetItem(func_5400_call(), 3)
call_8937 = relay.TupleGetItem(func_5402_call(), 3)
output = call_8936
output2 = call_8937
func_8938 = relay.Function([], output)
mod['func_8938'] = func_8938
mod = relay.transform.InferType()(mod)
output = func_8938()
func_8939 = relay.Function([], output)
mutated_mod['func_8939'] = func_8939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6658_call = mod.get_global_var('func_6658')
func_6659_call = mutated_mod.get_global_var('func_6659')
call_8953 = func_6658_call()
call_8954 = func_6658_call()
output = relay.Tuple([call_8953,])
output2 = relay.Tuple([call_8954,])
func_8965 = relay.Function([], output)
mod['func_8965'] = func_8965
mod = relay.transform.InferType()(mod)
mutated_mod['func_8965'] = func_8965
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8965_call = mutated_mod.get_global_var('func_8965')
call_8966 = func_8965_call()
output = call_8966
func_8967 = relay.Function([], output)
mutated_mod['func_8967'] = func_8967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_9004 = relay.TupleGetItem(func_6374_call(), 0)
call_9005 = relay.TupleGetItem(func_6376_call(), 0)
func_5492_call = mod.get_global_var('func_5492')
func_5498_call = mutated_mod.get_global_var('func_5498')
const_9007 = relay.const([-2.685241,7.552434,-8.840989,-3.077487,-2.775385,-6.775215,-2.926064,7.049756,-2.453803,-1.455326,0.558404,-0.115307,6.425132,-8.340163,4.311973,0.991822,4.545836,0.834328,7.103757,-2.728384,-2.023031,7.564482,3.474776,-0.651625,6.681618,4.940253,-5.205618,-3.620042,2.449412,-6.801696,1.702625,-3.248168,3.051367,-2.046955,8.249438,-8.669065,4.399546,4.810312,-1.202628,9.225308,-9.397297,5.078910,-7.932406,-7.316849,-4.995080,-7.320014,-3.558562,6.560320,-8.408399,-4.346342,-2.088611,-7.304299,-9.520475,-2.963188,1.615983,-7.160683,-3.715618,-8.175311,-3.145740,-8.270070,3.076699,-4.272425,8.667812,1.478936,7.932573,-8.174009,-9.126864,3.227610,-8.068026,-7.221343,0.612088,1.544996,-2.956652,-4.217267,-0.823114,0.974808,-1.896276,-6.368750,6.873875,5.598684,1.597450,-4.032569,-2.675814,6.058293,0.610160,-1.695851,-2.150812,3.515351,5.412555,1.596405,-1.295390,-4.040887,-7.594658,5.545530,-7.151569,-0.866463,-6.615048,-3.779690,4.598085,1.175923,0.286118,3.449270,4.120276,-3.228191,6.649357,-3.104492,-2.002104,-5.069497,9.556828,0.894136,-5.863713,-0.152080,-8.917475,-5.391311,-1.472155,2.272623,3.134210,9.177527,7.060634,-1.406236,-1.177866,-8.155042,6.697917,1.926602,-6.558304,-8.529257,8.737480,3.377441,5.556433,6.922033,9.783515,8.276987,6.583120,4.067209,-3.956295,6.428840,9.412089,-5.927607,-3.034767,1.155488,-2.934316,-3.211459,-7.551451,3.097833,2.147600,8.028008,5.156689,4.611203,-6.717018,4.036198,-2.864810,2.093127,3.490421,-7.603264,5.198634,-7.465249,-1.825290,3.266296,6.364027,-1.527644,3.036045,3.411541,6.193799,-4.989663,-6.485907,-9.091159,-6.602176,-8.229347,9.316031,-9.780508,-2.889799,-9.557479,4.179800,-9.199990,1.107896,7.775018,-9.766728,1.964998,6.257802,2.493377,-3.623752,8.748146,6.157625,-9.091765,-2.970568,-2.318584,8.837266,4.211118,-6.928628,3.431946,6.042699,9.985314,-2.081788,9.438908,-3.534833,7.046563,-9.474112,1.554523,-7.988587,9.264664,-2.473809,4.300756,-8.790056,-2.898374,-0.799909,-0.283551,-4.583729,-4.925618,3.472557,1.012869,-8.758981,-3.603627,9.324461,2.401936,9.591915,-6.995189,-9.898319,8.584510,9.062148,3.499996,-8.232829,3.700914,7.177552,1.143360,8.526530,-5.350107,3.354099,-9.089197,0.598335,-6.351756,-1.368768,-0.792979,-7.097962,-3.404827,-1.549885,-5.309397,6.787490,6.114051,2.540935,5.093406,2.669365,-4.482320,-6.737547,6.916999,-5.991737,-1.029995,5.048672,0.902306,5.325058,8.632589,-5.977457,-8.592305,8.768786,-5.441334,-5.452037,0.779652,-4.115426,-5.079925,-7.061916,-5.944891,6.099924,-1.973518,1.690666,-1.503240,1.749683,-8.869819,0.536745,6.856367,3.862768,6.485081,-4.662416,7.714252,2.702084,3.804407,-4.801358,-6.998885,5.426396,-5.575942,1.088980,2.522194,-9.322183,-8.850275,-8.453503,-3.152625,2.445682,4.563065,-2.093769,-2.211661,-4.018385,6.982237,5.051210,-0.906394,-3.527923,-9.574233,0.035937,-0.396219,8.241000,-4.151542,9.640963,5.903899,-8.380154,-4.384753,-9.613091,-7.374216,-1.222765,6.710021,-1.533558,-3.228040,-9.428539,-8.636043,-7.700788,3.259557,6.265600,0.916021,-5.896965,9.751216,5.544739,7.974282,4.466153,-1.417940,8.815238,3.345916,8.565464,7.436526,-0.835822,-6.767346,-9.747495,6.110547,7.783294,-8.934710,3.304582,-9.539753,7.035325,-7.394032,-6.161878,2.499275,-7.638897,2.624965,-9.515166,7.710725,-3.881907,-5.347439,3.735652,-3.669931,-0.471314,-4.721105,-9.830255,2.374233,-2.068291,-4.146265,-0.068874,2.194966,1.176533,4.808504,3.945254,-7.368508,-4.869725,-1.840650,-9.028047,-7.565070,-3.808678,3.076777,9.867005,-4.272054,-0.907239,-5.533609,-7.435075,-6.217908,-1.484034,-2.679437,-9.578103,6.169728,6.487076,8.885920,-1.070325,-5.247562,-1.136350,-5.242781,-8.580517,-7.531337,3.104689,-2.897224,-1.340003,8.765534,-0.203343,-4.511803,9.336379,8.941262,7.595758,-3.160933,-3.016092,-8.919857,-8.240350,-3.533413,-4.499832,-2.125060,-9.872450,5.218959,4.978466,3.169759,-4.228411,-6.811597,-1.648876,-0.027293,-9.655580,9.886696,-5.469968,-0.392527,-7.486496,7.089493,9.238888,3.350466,-8.895510,-3.700999,1.562228,1.058220,1.608034,0.229726,4.489447,2.993034], dtype = "float64")#candidate|9007|(420,)|const|float64
const_9008 = relay.const([-7,-8,7,2,-9,-5,-7,-5,-7,3,-4,8,-1,3,5,3,-9,10,2,-8,-10,6,-9,-2,-7,10,-10,-5,3,8,-10,-9,-3,-6,3,-6], dtype = "int32")#candidate|9008|(36,)|const|int32
var_9009 = relay.var("var_9009", dtype = "float64", shape = (364,))#candidate|9009|(364,)|var|float64
var_9010 = relay.var("var_9010", dtype = "int32", shape = (1792,))#candidate|9010|(1792,)|var|int32
var_9011 = relay.var("var_9011", dtype = "float32", shape = (1950,))#candidate|9011|(1950,)|var|float32
call_9006 = relay.TupleGetItem(func_5492_call(relay.reshape(const_9007.astype('float64'), [15, 14, 2]), relay.reshape(const_9008.astype('int32'), [36,]), relay.reshape(var_9009.astype('float64'), [364,]), relay.reshape(var_9010.astype('int32'), [1792,]), relay.reshape(var_9011.astype('float32'), [130, 15]), ), 5)
call_9012 = relay.TupleGetItem(func_5498_call(relay.reshape(const_9007.astype('float64'), [15, 14, 2]), relay.reshape(const_9008.astype('int32'), [36,]), relay.reshape(var_9009.astype('float64'), [364,]), relay.reshape(var_9010.astype('int32'), [1792,]), relay.reshape(var_9011.astype('float32'), [130, 15]), ), 5)
output = relay.Tuple([call_9004,call_9006,const_9007,const_9008,var_9009,var_9010,var_9011,])
output2 = relay.Tuple([call_9005,call_9012,const_9007,const_9008,var_9009,var_9010,var_9011,])
func_9023 = relay.Function([var_9009,var_9010,var_9011,], output)
mod['func_9023'] = func_9023
mod = relay.transform.InferType()(mod)
var_9024 = relay.var("var_9024", dtype = "float64", shape = (364,))#candidate|9024|(364,)|var|float64
var_9025 = relay.var("var_9025", dtype = "int32", shape = (1792,))#candidate|9025|(1792,)|var|int32
var_9026 = relay.var("var_9026", dtype = "float32", shape = (1950,))#candidate|9026|(1950,)|var|float32
output = func_9023(var_9024,var_9025,var_9026,)
func_9027 = relay.Function([var_9024,var_9025,var_9026,], output)
mutated_mod['func_9027'] = func_9027
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7242_call = mod.get_global_var('func_7242')
func_7243_call = mutated_mod.get_global_var('func_7243')
call_9054 = relay.TupleGetItem(func_7242_call(), 0)
call_9055 = relay.TupleGetItem(func_7243_call(), 0)
output = relay.Tuple([call_9054,])
output2 = relay.Tuple([call_9055,])
func_9073 = relay.Function([], output)
mod['func_9073'] = func_9073
mod = relay.transform.InferType()(mod)
mutated_mod['func_9073'] = func_9073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mutated_mod.get_global_var('func_9073')
call_9074 = func_9073_call()
output = call_9074
func_9075 = relay.Function([], output)
mutated_mod['func_9075'] = func_9075
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7671_call = mod.get_global_var('func_7671')
func_7672_call = mutated_mod.get_global_var('func_7672')
call_9087 = relay.TupleGetItem(func_7671_call(), 0)
call_9088 = relay.TupleGetItem(func_7672_call(), 0)
func_2286_call = mod.get_global_var('func_2286')
func_2290_call = mutated_mod.get_global_var('func_2290')
const_9112 = relay.const(6.887784, dtype = "float64")#candidate|9112|()|const|float64
const_9113 = relay.const([6.567297,3.703300,-2.306275,7.742096,-9.675149,-6.695215,-8.728787,6.211670,1.771931,-6.031016,7.574738,0.868068,-6.911296,0.996441,6.706511,-1.526675,9.848288,-8.700380,-5.242686,0.486928,0.113407,-4.356572,7.845742,-5.481835,-6.337505,-5.579900,-5.425321,-3.500978,-8.371400,-7.622897,5.073542,-8.575135,-8.297728,7.139986,-7.491531,9.003917,-1.928005,6.424367,-4.421917,-9.723377,-1.806092,-2.936242,2.406554,3.480794,-5.718146,9.548016,2.258526,-0.898699,-5.258881,-2.388103,-3.240031,4.308014,5.060628,6.930435,-6.706821,-1.877366,-1.783410,0.645651,8.391267,-0.283816,-8.184689,6.591667,5.031088,2.968166,1.779470,8.958109,-4.648655,1.110977,4.769286,5.080160,-2.875257,2.445252,-4.948413,-9.837744,1.448280,-9.999775,-2.535325,0.995129,6.017280,-7.220695,-1.982165,3.240308,-9.977080,-2.255304,5.825431,3.640549,2.665087,-7.282168,-5.790885,8.382802,3.073949,7.010916,-0.658822,-7.331046,-4.484775,-5.732578], dtype = "float64")#candidate|9113|(96,)|const|float64
call_9111 = relay.TupleGetItem(func_2286_call(relay.reshape(const_9112.astype('float64'), []), relay.reshape(const_9113.astype('float64'), [1, 16, 6]), ), 0)
call_9114 = relay.TupleGetItem(func_2290_call(relay.reshape(const_9112.astype('float64'), []), relay.reshape(const_9113.astype('float64'), [1, 16, 6]), ), 0)
output = relay.Tuple([call_9087,call_9111,const_9112,const_9113,])
output2 = relay.Tuple([call_9088,call_9114,const_9112,const_9113,])
func_9118 = relay.Function([], output)
mod['func_9118'] = func_9118
mod = relay.transform.InferType()(mod)
output = func_9118()
func_9119 = relay.Function([], output)
mutated_mod['func_9119'] = func_9119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_9145 = relay.TupleGetItem(func_9073_call(), 0)
call_9146 = relay.TupleGetItem(func_9075_call(), 0)
output = relay.Tuple([call_9145,])
output2 = relay.Tuple([call_9146,])
func_9148 = relay.Function([], output)
mod['func_9148'] = func_9148
mod = relay.transform.InferType()(mod)
mutated_mod['func_9148'] = func_9148
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9148_call = mutated_mod.get_global_var('func_9148')
call_9149 = func_9148_call()
output = call_9149
func_9150 = relay.Function([], output)
mutated_mod['func_9150'] = func_9150
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_9156 = relay.TupleGetItem(func_6374_call(), 0)
call_9157 = relay.TupleGetItem(func_6376_call(), 0)
output = relay.Tuple([call_9156,])
output2 = relay.Tuple([call_9157,])
func_9164 = relay.Function([], output)
mod['func_9164'] = func_9164
mod = relay.transform.InferType()(mod)
mutated_mod['func_9164'] = func_9164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9164_call = mutated_mod.get_global_var('func_9164')
call_9165 = func_9164_call()
output = call_9165
func_9166 = relay.Function([], output)
mutated_mod['func_9166'] = func_9166
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_9181 = func_8012_call()
call_9182 = func_8012_call()
func_6736_call = mod.get_global_var('func_6736')
func_6741_call = mutated_mod.get_global_var('func_6741')
var_9188 = relay.var("var_9188", dtype = "int16", shape = (126,))#candidate|9188|(126,)|var|int16
const_9189 = relay.const([9,2,5,-7,2,1,-10,-5,9,-7,6,-1,8,-7,-7,5,-4,-4,-2,5,-4,4,-5,8,8,2,-9,5,2,6,-2,7,-7,-6,9,-5,-8,-10,-7,-6,-4,-10,-3,10,7,-5,6,-5,-1,4,-2,5,-7,2,-3,-2,9,8,7,5,4,4,-2,-5,-2,4,-7,4,6,-1,-4,-8,4,-5,3,-8,-2,9,3,-8,2,-9,-5,-4,-6,-1,-7,-3,4,6,10,6,-6,5,-10,4,-6,-10,5,1,-10,-4,-1,2,7,-5,-9,6,-8,5,-5,-10,2,-4,-6,8,9,-7,-1,8,-6,-2,3,-10,-10,-9,-6,7,-10,6,-6,-6,-8,-5,-3,-6,5,-3,7,-1,10,1,-10,-5,7,-8,10,8,-8,-7,-6,-7,-3,1,-4,5,2,-2,-4,5,-10,6,7,-8,-9,-4,-9,7,-1,-10,-9,-1,-2,-5,1,2,3,3,-4,-4,7,-7,1,10,2,-9,6,-2,-4,-9,-7,6,8,9,-2,6,-1,8,9,-5,8,10,3,-4,-10,-10,3,6,-7,5,8,-9,-6,-10,-4,4,9,8,7,-9,-5,6,8,1,-5,-5,10,3,-10,9,-7,6,6,-10,-5,1,-9,-10,-9,10,-9,-8,-8,3,3,10,4,8,9,4,-6,-6,4,-9,8,6,4,-4,-2,-8,10,4,5,3,-9,-10,4,7,-3,-8,8,8,-5,-4,-1,1,-4,5,-9,5,-5,-3,2,-6,8,6,7,8,8,2,-6,-3,10,-2,-4,8,-2,10,-1,-9,-2,3,-10,-3,4,-10,-10,3,-8,-10,-9,-6,7,7,2,-7,10,6,-2,10,6,-8,-10,-6,-5,-3,-5,7,4,-10,-9,-3,-8,1,-7,5,9,-8,4,7,2,-4,-10,-9,-5,1,7,-3,2,-4,-2,-2,2,-10,-6,6,9,-5,2,-3,4,-9,9,-5,-5,-10,7,6,2,8,4,-5,5,-4,-3,-4,-3,7,4,-3,-8,5,-2,9,-8,-1,-2,-7,-8,5,-8,-10,1,-2,-7,5,-7,5,3,3,-10,6,-1,-10,-4,10,-4,-4,8,-2,-3,4,-7,-7,-2,4,5,5,-4,4,-2,1,-7,-2,3,9,1,3,-2,-10,3,8,5,5,-2,7,-3,3,3,4,9,1,-9,-2,7,7,8,-9,3,-10,2,1,6,-7,9,-5,7,10,2,-6,4,10,-3,2,-4,-2,-2,4,-9,8,-4,-6,-1,-6,-8,2,10,-3,3,-10,2,5,-7,1,-2,3,4,-7,-6,5,-5,-8,-1,7,-10,4,9,5,8,3,7,-8,-5,-3,5,-7,-9,5,-9,5,-9,1,-8,-7,2,-8,6,-7,8,2,-2,-6,-5,10,-5,-3,-5,6,9,-10,5,-10,-4,10,9,-7,-10,-9,-6,-8,5,9,4,-3,-1,5,-1,-5,-4,-6,6,3,6,10,4,-7,7,-8,1,5,-6,-8,-7,-1,9,-5,3,-2,3,-3,9,-5,3,-9,-7,-6,7,8,-6,-7,8,-9,-2,-10,-2,2,-2,-10,-10,-1,5,10,3,8,-8,-4,8,7,-6,-7,-1,-2,3,10,-10,2,10,7,-9,3,-1,6,-2,-3,2,-9,-6,8,2,7,-8,-7,-1,2,-1,-7,-1,4,-6,6,-7,-2,7,-4,-7,2,10,-6,4,-10,2,-7,-10,10,10,-5,2,-9,7,-9,4,4,1,-4,-7,-9,-2,5,1,-2,-1,5,-4,4,6,10,5,4,3,2,-4,10,-1,-10,10,1,-8,-7,-1,-6,4,-8,9,6,2,1,-9,2,7,2,3,-1,10,-3,-8,-7,-6,-1,9,-8,-3,6,1,-4,1,6,-9,-5,2,9,1,-2,3,4,1,4,3,8,8,-10,7,-5,2,5,-9,6,2,-7,-1,6,4,-8,10,1,-7,8,-7,-2,2,5,-2,1,10,9,-2,-5,-5,-3,6,-4,7,9,-5,-4,-10,8,9,6,-7,1,1,8,-9,-10,7,10,-6,-7,-1,7,10,-3,-7,8,-5,-5,-9,2,-4,-2,6,2,-4,2,9,-9,7,8,3,7,-9,4,-5,-5,-9,-7,-1,-7,-7,-2,-10,-5,-3,10,1,5,2,-7,6,-4,-6,-9,2,-4,5,-7,-5,10,5,5,1,-5,9,-10,1,9,-8,8,4,-1,6,-2,10,10,-3,-1,-4,7,-10,8,4,-1,-6,10,-1,-9,-9,-9,-2,-4,3,-1,-4,10,-9,5,8,4,7,3,5,4,-2,2,-1,3,2,2,-4,9,-3,-7,-2,-4,-4,-6,1,-4,-2,-7,3,-8,-3,10,-5,3,5,8,10,8,-8,-7,-6,-2,-7,1,10,-4,2,-2,-5,4,6,9,1,-2,-4,8,1,-8,8,8,-1,-10,-6,-9,-9,3,2,-3,-1,-3,-5,-5,-10,5,-4,-7,5,7,4,-4,-8,8,1,4,6,7,10,-8,-6,-2,5,-5,-9,-4,8,-5,9,6,-7,-1,10,6,1,2,-6,10,-2,-4,9,3,7,4,3,5,-4,5,-4,4,5,-5,-8,4,9,-4,-5,-6,7,10,3,10,-2,9,-5,3,1,-1,-10,1,-3,8,2,-10,-5,8,6,3,-4,5,-7,9,4,-7,7,4,2,7,7,4,-10,9,-2,-5,7,6,-8,-2,-7,7,-8,3,6,-6,7,-4,-2,-4,-5,1,-9,-6,3,9,8,3,10,5,-6,-8,9,-2,7,7,5,4,6,10,9,-7,-7,10,-8,3,6,-9,-5,7,-10,-4,2,-8,-9,8,-10,-2,7,6,8,9,5,10,2,-4,2,7,7,4,6,3,-7,6,-8,7,-6,-10,6,-10,7,-1,3,5,-3,-7,9,8,-4,9,-7,-8,5,-3,-7,-1,9,5,2,-6,-9,6,3,-3,8,-3,-8,-9,10,-6,-5,3,-1,-9,-8,-7,-8,-4,-7,-1,9,-2,-4,10,3,3,2,-3,6,-3,-9,-1,3,9,4,-7,-4,8,1,4,-1,-3,4,-6,-10,-7,9,-5,5,4,-5,-10,3,-1,-5,8,3,-1,-7,-9,3,-5,4,-7,-5,-8,-2,-3,8,9,10,-1,9,2,-8,5,9,-6,-2,-1,3,-1,-10,2,-8,-3,-8,-1,-8,-5,6,-10,1,-7,10,-2,-1,-2,7,9,4,-4,-6,-3,10,3,-7,-2,-10,3,-10,6,8,-2,-9,10,5,-10,-1,-7,9,8,2,6,10,5,4,1,9,-9,-6,-4,5,6,-6,-6,3,-3,-3,-1,10,-10,9,-8,-7,-7,-6,-6,6,6,4,-7,5,4,-2,-8,2,9,-1,8,-6,3,-9,-4,10,6,-1,3,-4,-1,-3,-1,10,4,8,9,8,-7,-10,1,10,-4,-10,-8,-3,1,9,10,-1,-1,8,-5,2,5,-5,-2,4,8,4,-8,-5,2,2,-5,8,-2,-6,5,10,-1,-6,10,10,4,3,10,5,-4,-8,10,5,-2,-10,8,-7,-5,-4,5,-2,-8,4,-3,-2,6,5,5,7,-10,6,-8,-9,-10,-5,-4,5,-2,-2,8,1,5,7,4,9,10,2,-10,1,3,-4,-3,-1,-8,9,10,-7,5,-6,7,-5,-3,-6,-9,5,-3,8,-10,2,-5,-1,10,-9,1,6,-1,8,9,8,-1,9,-4,1,-10,-1,5,-8,-1,1,-2,-1,-9,6,-2,-7,9,-8,-7,-8,-3,1,-2,-2,6,6,-2,9,-5,3,-3,-2,-8,-7,9,-1,-6,-10,-1,-1,8,3,4,5,-10,1,-9,-6,-3,-4,-2,-5,-7,-7,9,-5,5,7,1,3,10,-5,-6,8,7,4,-6,8,-5,-4,-4,9,7,3,2,9,9,-3,-8,6,4,7,-10,5,-1,-10,-8,-6,-9,-10,2,-2,-7,8,7,-5,4,3,8,-9,-9,-5,8,-9,-10,-7,-2,7,-4,-9,9,-2,-7,-8,4,-5,6,9,3,2,-1,-10,-8,4,-10,-2,6,-3,-8,-9,8,-7,-6,-10,-6,-4,1,-2,9,-10,-1,-9,4,-2,-2,-9,5,-5,-2,-1,7,-9,-1,7,7,10,-10,4,2,-8,-7,3,3,-2,-2,5,-10,10,-5,1,6,1,2,-8,3,7,3,1,-9,-10,6,4,2,-7,-1,-3,2,1,-1,-8,-8,-4,8,-6,-8,2,6,2,-8,-6,-7,-7,3,5,-10,-8,-2,9,6,7,-4,8,4,7,-8,2,2,-6,-9,10,-6,6,-1,-5,2,2,2,-5,9,8,-7,-5,-10,-5,-4,8,3,5,9,-10,-6,9,2,6,-8,-3,5,-5,10,5,4,1,7,1,10,9,6,3,1,-3,4,-5,3,7,9,7,-5,-3,6,10,-7,-1,-8,3,4,10,10,-8,-5,-6,4,8,-4,4,4,6,-5,-4,-9,-4,-3,-10,2,-7,2,-1,-9,-8,1,10,7,7,-3,7,-10,-7,-7,-3,5,-8,-5,3,-2,-4,-4,8,-2,-5,8,7,5,8,-10,-3,-2,4,-1,-1,10,6,10,5,-1,-7,4,-6,7,-3,8,2,8,-7,-2,4,4,6,-5,7,3,2,7,6,-3,-1,-6,1,10,5,-6,4,10,-5,-2,1,-6,1,-3,7,8,7,10,8,-7,2,5,-5,-7,-1,3,-2,-7,2,4,7,7,5,-3,-7,-7,4,-6,-6,1,10,9,5,-9,-7,-6,2,-8,1,10,-2,7,-9,-8,6,2,5,1,9,-9,-2,1,-8,-3,-2,7,9,3,6,5,-1,9,-10,8,-8,-8,-1,4,-9,8,-9,-7,-6,-8,-2,-6,10,10,4,9,-6,4,-7,-7,-7,-8,-10,7,-7,-10,-8,1,2,9,-1,7,7,-5,2,-9,-10,5,5,-8,9,-9,-4,6,-4,-1,-3,-4,-2,3,2,-2,10,-2,1,7,-8,6,9,-10,-7,1,3,-10,-4,-10,-6,1,-2,-3,3,-1,-8,-4,9,1,-7,5,8,5,-10,-2,-9,-4,-6,-4,-9,-1,-3,4,-1,7,-7,-7,2,1,-9,8,-4,9,-1,2,-7,7,-1,2,-5,-1,-3,-9,2,-7,-1,-9,1,-8,10,-4,-4,-4,9,-7,5,7,8,-5,6,-3,8,5,-1,-4,4,7,7,2,-7,10,-9,-2,-5,-7,-10,1,4,7,-10,6,9,1,-7,3,4,-8,4,-1,-8,1,1,-5,-9,-2,-5,10,-4,-1,-6,4,10,4,-1,-5,3,6,10,-1,-4,-6,1,-5], dtype = "int64")#candidate|9189|(2002,)|const|int64
const_9190 = relay.const([7.214375,-4.624797,-0.726036,0.205695,-2.471291,0.864313,2.476747,2.197332,-3.209403,-6.765158,-7.200498,-4.370035,6.026519,8.522352,-4.517209,7.137119,4.139321,3.929504,1.357985,4.681866,7.246306,-2.761499,4.842810,-3.327802,5.233530,6.919429,-3.589016,5.488691,7.236730,-0.433842,-2.862204,2.885308,2.922598,1.231309,0.238752,-5.437303,-0.029479,-3.026579,-4.005894,2.931397,5.779978,-1.398373,-2.065209,0.911849,-5.068299,7.461747,9.786649,-3.361289,-5.006531,9.266324,0.086719,-4.688437,-8.527313,0.162164,1.693587,8.808211,3.163776,-4.335577,9.779509,8.332227,-3.512442,-0.508261,-4.287523,-9.812874,1.390362,-9.257824,-7.721423,-4.649116,4.249816,9.181503,-4.493575,9.056415,-5.911472,9.070242,-1.218311,0.755249,3.749935,-7.403858,3.090574,-8.847936,2.169389,7.398471,9.797533,-1.631874,3.107067,7.425599,-2.321250,3.590488,6.657242,3.672878,-5.097127,-3.471051,-5.971488,3.899760,5.115624,-9.589026,-0.152327,-9.701965,1.765722,0.822904,9.869605,-1.471507,4.190643,-2.108046,-2.123952,-1.949598,6.643367,9.331671,-5.352134,7.551947,-1.471621,-0.480150,9.870641,2.801086,9.528794,8.179571,6.553014,7.741245,8.320145,1.121769,4.334750,-7.986212,-3.761435,-6.065652,-3.085056,1.575390,-9.033786,-6.847950,-9.587976,-5.052322,-6.841117,-0.973132,-7.805555,-2.045109,-8.848301,2.320860,-1.593174,-8.289056,6.528498,4.675577,-5.202954,2.082437,-3.831777,-3.190454,9.883310,-3.110227,-2.185498,6.885390,-6.974638,-4.544924,-7.649307,-5.047726,-0.277497,4.806700,-5.867827,2.658420,2.632229,7.148080,-7.005794,1.669721,-1.812585,0.456009,-1.546979,8.796937,1.623620,1.392039,-7.155828,-1.694575,-7.043431,-3.813040,-1.687250,8.219945,-9.251008,6.414846,-3.399872,-6.957666,-5.926996,7.144434,4.937717,-0.291312,7.664830,-6.481593,9.853840,-1.512811,-7.567973,-0.636898,-2.979326,5.294106,-2.744231,-1.030539,5.079382,-4.133062,-7.907763,-3.085650,-6.658157,-1.625671,6.035281,8.065051,8.057145,-9.385717,7.934351,-5.387124,1.310254,-4.523390,-2.896198,-5.423722,-9.301756,-0.245924,1.728052,-7.431305,3.295863,4.798810,3.885718,2.936417,-3.161697,-2.113542,7.780853,9.484551,-2.535195,-8.791833,-9.416321,-0.317418,9.202033,-8.852601,-0.112882,5.719999,2.965264,-1.398444,5.470547,-2.119338,5.663172,4.127967,0.392969,4.728061,6.026057,4.250423,2.346999,-4.198139,-0.371393,5.039193,9.260102,-0.356193,2.543957,3.208493,-1.506189,-9.875227,-8.115250,-5.495752,-9.310946,-7.122663,-3.613188,-7.267005,4.195315,-8.111240,3.518159,-9.719178,-4.473139,4.639379,6.461409,4.575733,-5.753699,-5.194952,7.949709,7.609067,-2.429800,2.091692,1.126891,-0.558259,-5.922630,-2.055286,-9.778606,-9.837664,8.921603,-1.456586,-9.464173,-5.419618,2.127004,-8.631097,-4.224991,7.762328,9.516351,8.961196,-4.513087,3.268112,-4.502035,-0.478950,3.520511,-2.326902,-2.957285,9.246869,-6.752309,-0.194789,-9.036049,-3.663460,-8.233179,-0.208021,2.420876,-2.897157,3.127427,-9.953696,0.983781,9.266271,-8.120850,1.626716,-3.299878,6.733161,-5.940060,1.252290,-4.595981,6.133582,0.996028,-1.034042,0.311614,-1.038129,1.928565,5.660871,0.140091,3.444720,-2.504932,-1.344923,5.333030,1.653172,7.814909,0.722006,-0.002369,-8.873028,-3.439976,-2.156753,4.674223,-8.641240,-6.410645,4.605911,-4.908450,6.430399,7.823523,-0.908971,5.513704,1.281705,-8.680633,5.107426,7.018401,-1.590702,-0.138157,-6.466333,6.453270,-5.288443,-5.477643,9.889376,-1.134928,0.510806,-4.688542,1.235627,1.951755,3.873362,5.615100,-4.191536,-5.181601,-5.783935,-2.328764,1.128860,0.246931,9.424850,3.474635,1.397747,2.781955,-7.659934,-7.196401,3.245578,-5.143545,7.009045,5.675557,-1.520752,-0.619444,6.513289,9.541139,-3.293664,-0.721644,-0.212338,-1.563256,-1.135384,-1.858715,7.864682,-7.634125,-7.769271,2.504772,-3.894667,-8.857881,7.172397,5.168735,1.107893,6.845917,5.371277,1.179771,8.657045,1.561260,9.265005,-9.697118,-2.978541,5.932907,5.223433,-4.920023,-8.150993,6.117937,0.017082,-5.822252,8.643517,-5.990818,2.898368,1.816755,1.932428,-4.192561,-8.597753,-3.696555,0.721696,-6.822267,-8.094187,-9.379867,3.440658,-2.080069,-2.617162,2.609795,-7.379366,6.274217,9.882096,0.609899,8.690597,6.298106,-8.041450,5.405683,4.240772,3.906100,-6.139554,-5.927258,9.716297,2.856899,3.670129,2.312012,-8.805741,-5.214471,3.202614,3.768454,5.297591,4.792090,-3.597848,-0.364182,-4.801942,4.325844,0.496053,-4.268454,4.212958,7.104630,-1.925318,-7.658096,0.315715,-4.236722,-8.452995,3.237840,-4.125429,-0.530516,6.004998,-3.923774,-8.001486,2.145083,-9.872059,-5.921796,1.967087,-4.957431,-0.164798,-7.321837,4.975494,5.004155,-0.421883,-6.884626,1.160175,0.775492,7.395982,-7.957597,-5.914609,8.460761,9.877077,-4.163112,3.696741,-7.740233,6.879272,4.794155,0.050948,6.243652,-2.456178,-7.772123,-2.038018,-5.998106,4.199423,7.738939,-0.168590,-5.057290,-2.371739,-8.487626,-1.727675,3.233562,-6.184619,-6.877891,0.579346,0.818710,9.069269,1.611888,-6.246480,7.017981,-3.686990,9.654349,-4.627360,-1.800114,-7.013277,-8.463193,3.023584,-7.509752,6.020948,2.081416,-0.322287,-1.362776,-2.104955,0.215215,0.967507,8.062963,9.634724,9.571949,-8.285857,-9.884555,-4.950198,7.877716,4.330390,7.814584,3.210223,8.397855,-7.339963,9.511021,-9.198352,1.702907,-8.988654,6.003339,0.289347,8.673692,6.000621,-6.571483,-5.211420,4.377057,8.235719,-0.324862,-8.038763,8.571860,5.383310,9.108816,1.290346,-7.977813,5.377649,-6.548754,-0.957114,7.996573,5.155332,6.094332,1.851156,7.801705,-9.265235,9.661956,-9.563973,9.590574,-4.537695,5.193162,5.948632,8.981154,2.416943,5.960015,3.996590,3.132215,-5.616699,-6.247685,-5.850014,-7.112523,-7.428534,5.004719,-4.872637,-0.193482,3.618616,2.900381,9.642201,-7.873683,-5.732770,-8.177388,-9.642903,-9.419753,5.842040,-3.813424,3.822127,-6.599477,9.429459,-6.703963,-2.537576,-5.779332,-0.555834,-0.413397,-4.101086,-4.046988,-2.689314,-4.379326,1.549201,2.190918,5.013420,-2.569095,-6.174837,-1.645413,-8.142192,-0.211891,-3.671811,-5.414707,-3.091082,-3.552573,7.644450,7.192658,-8.333044,-9.441269,-8.311162,-1.986465,-8.854853,-6.029087,5.302686,-7.148713,4.424597,-4.562636,9.508734,-9.314261,8.967751,-7.372554,-4.541939,-9.029434,2.037238,-5.122619,-9.661649,1.000213,3.222004,1.098406,4.273945,-4.354948,-3.887564,-5.377552,5.353226,6.476371,4.205279,-8.501342,2.061005,-7.084744,2.304998,6.458592,6.420284,-9.562901,-0.321569,4.666373,6.180862,3.220771,-8.346403,8.636346,-5.292325,-2.650692,-4.448221,1.276783,3.112918,-7.574135,-4.023424,-6.451964,0.885414,-3.261531,8.296834,1.017902,9.052583,-8.303649,-7.729088,-6.117252,5.756086,-0.809095,5.953487,7.237944,-3.077497,0.096386,0.659048,-3.781159,7.626605,3.896798,4.814661,8.666474,4.417358,-0.276586,-6.550272,-9.899679,-7.599833,7.240741,0.401592,-9.852390,4.042068,-3.403277,-6.050039,9.320149,-2.226017,-1.850946,3.827401,-7.061256,6.884001,-7.459158,1.364462,2.179732,4.246066,4.524349,-8.601186,-7.194845,-4.375959,-6.292154,-7.333263,-4.532594,-7.956973,-5.502021,-1.126464,-9.078280,2.681615,7.386105,-4.042213,-5.977702,-7.523550,-6.186479,-3.476313,-3.605960,4.886966,7.521075,-9.731542,-9.242206,-6.796284,-0.139253,-1.869507,-1.188743,4.659735,-7.376683,3.914061,1.497149,9.677525,-1.864510,3.541081,-1.268376,9.311481,-8.407235,4.755458,0.078150,9.018193,-7.004016,-7.054965,6.019511,8.050686,1.337670,4.096887,-9.340411,-5.714092,-0.266494,9.059248,2.173947,-8.350378,-9.349662,-9.125932,0.107656,0.367092,8.581795,-7.817022,8.109603,6.421078,-0.139197,2.976760,5.758670,1.826138,4.440159,-9.462742,-1.883601,-0.882000,-8.110707,-5.080806,-9.406205,6.098599,9.911293,8.188847,4.279153,-5.518456,0.485999,-8.652855,3.730299,-6.617531,-6.300046,2.658051,7.335545,4.366291,7.631532,7.982707,8.060408,2.462312,-6.614175,1.585433,5.556127,-8.169533,-1.927725,0.597046,-3.475213,-4.546224,-4.898108,1.021290,-3.184441,0.015281,-8.001480,4.279990,-7.568231,5.295347,5.664950,-8.110396,-3.464307,6.644148,-6.229588,-9.396865,-3.354700,5.545588,5.527484,-8.415230,-0.935218,6.181510,-0.915111,-2.664871,8.228798,-6.193354,8.146821,-7.467604,1.647790,-6.489802,-1.050001,-1.759278,0.727191,-2.631656,8.014938,-5.636247,-3.555564,-9.250705,2.168684,4.806151,-0.909676,5.760789,7.724284,7.727071,-3.036946,-9.927142,6.198592,4.702083,-9.994484,0.514862,1.471701,7.743444,4.944066,-1.809862,9.703775,2.890834,2.391986,6.420106,-4.432637,9.195642,-3.066202,-0.443020,3.817502,-1.679721,8.285707,5.550546,-6.463299,-1.693093,-5.579861,-9.564877,3.240920,-0.476767,-9.818884,0.934649,-4.456976,1.007063,-0.603523,-9.081388,-4.816865,9.049947,-6.392654,-8.303644,-6.606391,-7.744699,0.245924,-0.577999,9.258501,-4.581367,-8.541789,-1.113211,-1.112167,3.480086,7.502029,-8.755952,-2.306711,4.213987,-9.941925,7.909508,2.549319,-3.006208,-3.123480,0.357229,0.422075,-1.084054,9.646646,-0.189254,-6.919772,-4.313769,-1.275782,0.723961,-5.702131,5.877189,-0.544498,7.241541,6.169111,0.338010,-8.239196,5.280765,-8.983807,8.871473,-1.163642,5.818070,0.806661,1.452683,1.128936,0.125333,7.924136,-2.205988,5.052521,6.468099,8.795161,2.684143,1.859103,6.153378,-1.328097,8.625182,1.171483,2.652950,-7.657494,-1.933636,-6.274249,-0.465989,-0.494142,3.119203,-4.577699,-8.378438,4.233634,-4.258545,-2.994844,-2.934807,-9.711552,-8.553631,9.138951,2.661884,-1.827610,3.749235,3.622727,-9.419166,-6.608665,7.405494,0.526628,7.703081,9.610006,1.147484,8.808296,-6.429678,-6.057538,5.653632,5.494741,0.522781,-5.778916,-5.126578,-9.711295,-7.051794,-8.282118,-4.176337,4.334281,5.226262,0.754529,1.667473,-9.242603,-3.675452,-4.784406,-5.946617,-8.707242,7.891463,-1.763960,-1.401420,-5.644719,-7.467819,9.185546,-8.982618,-0.073177,0.685621,6.011667,-1.080137,6.777036,-0.559552,8.076380,5.831997,-4.217157,-1.834794,-6.827819,-2.860526,7.240939,6.645543,0.529319,-0.368444,0.296014,8.128328,-4.450182,1.909115,-9.141687,8.135751,-9.360823,-1.070603,5.097161,-7.957532,3.141619,-9.666067,2.689480,6.694225,-5.722911,-1.735487,-8.526050,-3.111519,3.219352,-9.469837,2.203943,0.690350,-8.744167,-3.639568,3.016590,1.710816,6.999339,8.674372,3.972723,3.587649,-1.211359,-3.390865,0.507390,1.235037,-5.805396,3.203467,1.546458,4.474406,-4.243997,3.956610,-4.442135,-1.628671,7.423572,-2.680242,3.516353,-9.465652,5.104840,-7.888851,8.127593,-4.350881,6.312122,0.471319,-8.765764,-0.443974,-4.786057,-4.207277,-4.056874,1.147258,2.743329,-8.223979,9.746941,-4.057235,8.308844,-5.255821,8.565084,-6.524448,-6.881577,9.316605,2.367544,6.691735,-6.315823,-2.422318,-2.893928,-3.627527,-5.714525,-6.815634,3.479560,-0.479975,5.306591,3.422365,3.853084,7.575192,5.098915,4.339419,-0.612691,-6.055443,-9.593638,4.496465,-7.285172,-7.080567,7.731054,2.053963,-9.358565,0.536900,-7.444856,-2.835034,1.738764,4.581723,-1.668735,1.564817,2.429722,9.466444,-2.643699,-9.815225,-0.187686,4.706568,-6.149763,-8.054242,9.731700,-2.564017,-0.209975,2.111995,2.179995,-3.389220,0.960898,-3.747744,-6.729881,1.781930,1.458920,1.956321,-8.357988,7.301036,2.261986,7.589478,1.446395,-1.773759,-1.425916,1.496053,-9.169351,-3.230351,3.293298,-3.562849,-0.955399,6.628207,-8.467905,-6.062159,2.479447,8.806481,5.925045,8.896296,-9.902583,3.815545,-5.354950,-9.185658,-2.285103,-8.211439,-1.509799,3.044585,-3.319056,-8.634795,-9.781090,-9.630645,-9.458587,-5.315366,-5.330583,-5.384611,-6.038121,-1.837114,3.781340,1.153928,0.611171,7.565372,7.996085,-3.113365,3.919796,-5.438489,0.286360,-0.446920,-5.431647,-4.780556,-2.902343,6.759476,-1.764322,5.586184,0.310280,1.082541,3.749364,-6.147796,-3.354549,-9.355551,7.394718,7.092687,3.552403,-4.764874,-5.451404,8.044231,6.578103,5.291116,-8.858440,5.376156,-1.653832,-5.614521,-6.488236,-1.673914,6.032891,-7.442733,4.157801,-2.829787,2.885388,-6.047169,3.321866,3.217813,-6.613316,-0.374593,2.238423,-9.851318,-4.969462,8.842134,6.353222,9.901922,9.259473,0.677058,9.657105,2.753790,-4.070606,3.414815,1.244175,8.770946,8.407071,-4.363646,1.608841,-2.519133,4.034541,-3.584244,5.539093,-1.539124,-2.720810,9.598663,5.911454,-0.360761,-6.010251,7.979908,-6.896701,-9.243547,-8.795718,4.572301,8.473535,3.382062,1.825552,-3.871065,-1.995455,7.849253,-9.884163,-4.470598,-3.048188,-2.305237,-3.558195,-7.530448,-4.387248,6.250332,-5.034057,-9.154695,-4.940319,-2.862610,-2.448403,3.709317,9.043592,4.532987,9.494199,6.189185,-5.551507,7.764410,0.923886,-2.670855,-8.726678,-6.119207,-6.909220,-4.354097,7.776431,-6.375405,9.624835,-3.012687,1.184435,1.538642,0.904434,-6.504596,-2.158957,9.952004,9.082494,1.220968,7.373691,-7.994770,-8.294282,-9.959125,-9.766562,3.676894,-3.005925,-4.294684,3.088670,3.611874,8.437450,7.183286,1.194464,9.614982,-3.792425,-7.518943,4.951639,1.212668,1.204083,0.628263,-0.883200,-4.247080,-3.031356,-9.435970,-8.532648,-2.128175,8.506529,5.080033,-7.745537,-9.612343,9.505823,-4.191859,2.251918,-4.530607,-9.242018,-8.863638,2.455155,9.046416,-6.298574,3.658982,3.991547,-2.940610,2.789854,7.541973,-0.708005,-8.195329,-5.902507,-8.906452,-9.532714,3.423708,-5.177561,-1.643180,-1.625937,3.791076,4.747184,8.653775,2.054291,-3.862050,7.159194,-9.794810,9.189465,5.740910,-2.294298,2.651300,-4.224985,9.965485,6.269028,-7.393237,6.357675,-7.997359,1.270260,-6.771041,1.836464,8.337630,-4.067085,-8.337430,5.441080,-6.764302,-4.015314,-7.142387,-7.662719,6.697930,2.350887,6.636980,-6.610181,-7.147497,2.370348,-2.006366,6.875132,2.435377,3.477404,5.299523,1.806554,-4.825016,4.875845,-6.464026,-6.775904,4.023542,-2.767695,4.553202,-6.633225,-0.077944,-8.187252,-8.452283,-2.078092,6.909499,-4.476264,-4.096195,-1.418084,0.908171,-8.591829,5.920135,5.929614,-6.707866,2.884507,-4.449725,8.127422,3.136268,6.277364,9.858351,2.421043,-1.735429,9.598501,0.370466,9.588672,-9.130248,5.326839,7.807881,-3.758728,-8.933152,0.473036,-5.024398,3.619723,-6.965248,9.041053,-8.393899,-5.833322,-1.360811,-0.477515,-0.629287,-8.371724,7.081633,-7.690302,2.331405,-8.071109,4.237923,-8.142547,2.728421,7.416456,7.062627,7.314699,-0.385207,-7.002499,-7.448256,-7.828771,-7.070203,9.060413,-5.291390,-3.976240,-3.454137,8.274332,-7.122382,8.803902,9.761454,5.878080,-2.907649,9.912046,1.191822,4.882722,-2.124911,-8.684202,0.029621,-3.182891,9.752135,8.875170,3.589808,6.532683,-3.909302,1.346903,-3.191918,-9.391130,-1.392870,5.504023,6.320586,0.336502,-3.325090,5.748947,2.627902,-2.460473,-3.490938,-4.029720,-7.695007,-0.471647,5.879059,9.913738,-0.931356,-9.137224,8.297102,-4.836742,-7.372694,-1.518399,7.212252,-7.004466,4.541901,-3.995135,-0.442854,1.417686,-4.875452,-4.570625,-2.120317,6.637507,9.143818,2.724705,1.516881,-4.851880,9.699066,4.532469,-2.817251,2.082825,-6.436036,8.972034,-6.476823,5.728580,-9.950904,-6.098713,6.328615,-7.543508,8.871889,6.411406,8.256001,1.130920,-3.338062,-5.317917,-9.962702,-4.541080,7.330078,-9.075254,0.510421,-8.989145,1.976318,-1.059077,3.111684,5.653312,-1.033709,7.840491,-6.408288,-5.737780,8.299521,1.516568,-6.392789,-8.172367,-1.267277,7.266998,9.885987,7.496880,0.753483,6.961328,-3.030538,2.863205,-2.896595,6.999750,2.263816,0.087951,-0.026725,7.143902,5.222653,-7.005453,-2.438513,1.745081,0.721313,-5.334633,-2.339938,0.053316,-7.824739,7.227923,-8.145565,-6.300566,-3.115375,-5.740239,-5.426859,8.308699,-0.173533,0.370305,2.708130,-5.592203,-5.401818,5.976162,-8.679691,6.621513,-0.351567,9.606691,6.515598,-1.246129,-0.893133,-6.428480,-5.250347,-2.842403,9.051037,6.265529,-7.982817,-4.542716,-6.162223,1.447568,-7.192626,-2.790350,5.379312,7.707505,5.448236,-9.941214,2.466333,-4.187950,-2.229899,-6.416347,7.748806,-6.627567,7.087999,-4.098452,4.421302,-4.926091,-6.530110,-9.556720,9.274403,7.117996,5.697543,-2.110973,-4.439541,5.624656,5.472685,5.652860,2.902041,-4.556393,-6.399053,5.919583,-0.550324,9.297767,-4.753008,-0.099270,-2.743871,-2.430181,0.042370,-4.471132,0.497952,-3.826923,5.825269,7.662687,3.150073,1.102986,-5.435119,5.853871,-1.757699,-3.986925,-8.719410,-0.118982,-2.420254,8.716449,1.429088,9.558927,7.173894,4.976733,7.767181,6.444221,-7.711141,-5.608850,6.516500,5.218277,4.298997,-9.762176,-8.548050,-8.092749,4.413874,-7.749306,5.967289,-9.291202,1.875467,8.510059,-9.998914,-8.820969,7.327553,-1.349724,-4.963295,-5.225290,3.415794,-7.692419,-8.533182,-7.196122,-0.017932,-4.604752,-2.636237,-9.857269,6.526660,1.125346,-3.842507,-1.057986,-7.890883,6.377897,5.677828,-3.729472,-8.835041,-6.459290,4.672160,1.986018,-9.366974,6.969324,-2.356059,-6.399014,8.157234,4.365921,0.739359,1.095719,-2.892871,2.329120,8.075167,-3.751705,-3.992969,-2.013303,2.439057,4.703044,0.259122,3.334961,-0.061749,2.876172,9.239859,6.975290,4.649297,-8.038191,1.676524,7.999399,-5.765922,6.972415,-2.126909,-7.775790,1.473138,9.223780,9.360480,-8.467278,5.898030,6.313169,-2.148122,5.895720,-8.824361,-9.401728,8.048543,-6.366755,4.517222,-0.944657,0.642542,-8.109222,-2.530067,4.773019,-7.327411,6.680936,-8.543889,-6.907365,-8.722514,-2.835974,7.957956,-7.294990,-6.001499,-5.797096,-1.965596,0.117240,-4.186304,-4.509514,-8.528776,-8.800608,4.237944,-5.047979,-1.947385,6.408194,-7.451229,6.774749,-6.229876,0.079548,-4.502871,-5.938455,-1.029933,-7.877683,0.311060,-4.003174,1.871146,-6.800825,-9.932706,-0.151225,9.221656,5.825770,1.840570,-1.302899,2.666098,-3.680674,1.138703,-5.807652,-5.109773,-0.269477,-7.784706,3.646395,7.498316,-9.892056,-9.400577,9.206742,-4.916471,-4.075474,6.834663,1.009108,-7.016038,5.398437,2.300508,8.005872,-9.174987,3.930934,-3.233961,-3.779664,6.459771,-1.146334,3.170934,1.177431,-4.601472,5.475843,-7.889735,-4.515048,-8.147580,1.660476,-9.050526,-4.881070,-4.627139,9.682132,-0.867101,4.636325,-3.340412,-5.324589,9.521107,-1.069389,2.831230,1.850948,-5.197573,-1.809796,1.894370,-6.171547,-5.882255,0.524134,8.153252,-2.133228,-4.050170,6.406149,0.348979,2.865566,8.995842,-4.381509,6.357765,8.885669,-3.017709,8.119317,2.767250,2.413019,-6.271929,-5.649235,6.981757,0.601618,-4.676792,-1.381365,-3.197135,-0.969972,6.026866,-7.446859,3.539268,5.121590,2.659094,5.884976,-1.048274,6.250935,8.608926,-8.129482,-9.795445,0.077748,-1.694277,-3.624983,7.091901,1.939479,1.402967,7.545178,6.492723,-9.810196,1.569982,0.762199,-5.387805,-6.431897,-1.155807,-6.496338,2.638293,-5.381745,-4.922214,-7.610379,1.738394,-3.734963,-4.733469,0.639741,-2.417301,-4.750687,-6.487184,-8.974972,-9.289284,-9.954183,0.221269,6.245079,-8.821459,2.263941,-1.994827,-8.407687,1.550990,8.709704,5.902228,1.632152,-0.856256,0.368607,7.839121,-5.240302,0.428433,-4.671946,1.773258,3.094751,2.513798,-4.026731,-9.456765,-7.948395,-3.478429,0.348235,-2.244296,8.816845,9.588048,8.356177,-6.638177,-9.284310,5.697611,0.846296,7.470171,-7.879948,0.131701,-9.151076,-3.290558,7.521062,-4.178712,-9.155019,6.730271,-0.568092,-1.449243,3.424744,5.165846,-0.165718,-0.287834,9.187516,-0.367586,7.260014,7.303049,-8.839713,-0.632526,-4.627188,-8.753768,0.392421,-8.081780,-0.831950,-6.775900], dtype = "float32")#candidate|9190|(1950,)|const|float32
call_9187 = relay.TupleGetItem(func_6736_call(relay.reshape(var_9188.astype('int16'), [126,]), relay.reshape(const_9189.astype('int64'), [2002,]), relay.reshape(const_9190.astype('float32'), [1950,]), ), 0)
call_9191 = relay.TupleGetItem(func_6741_call(relay.reshape(var_9188.astype('int16'), [126,]), relay.reshape(const_9189.astype('int64'), [2002,]), relay.reshape(const_9190.astype('float32'), [1950,]), ), 0)
output = relay.Tuple([call_9181,call_9187,var_9188,const_9189,const_9190,])
output2 = relay.Tuple([call_9182,call_9191,var_9188,const_9189,const_9190,])
func_9193 = relay.Function([var_9188,], output)
mod['func_9193'] = func_9193
mod = relay.transform.InferType()(mod)
mutated_mod['func_9193'] = func_9193
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9194 = relay.var("var_9194", dtype = "int16", shape = (126,))#candidate|9194|(126,)|var|int16
func_9193_call = mutated_mod.get_global_var('func_9193')
call_9195 = func_9193_call(var_9194)
output = call_9195
func_9196 = relay.Function([var_9194], output)
mutated_mod['func_9196'] = func_9196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_9207 = relay.TupleGetItem(func_9073_call(), 0)
call_9208 = relay.TupleGetItem(func_9075_call(), 0)
func_6252_call = mod.get_global_var('func_6252')
func_6256_call = mutated_mod.get_global_var('func_6256')
var_9223 = relay.var("var_9223", dtype = "float32", shape = (42,))#candidate|9223|(42,)|var|float32
const_9224 = relay.const([2.479276,-6.103918,7.467523,5.888296,-2.459148,9.885693,-2.014077,5.080090,-8.934439,7.832987,6.155972,5.558440,8.074315,8.409671,-4.865500,-2.047187,-5.953037,0.332780,-8.346403,-5.703722,-8.083763,9.558883,-2.122860,-8.822740,-0.213455,7.206773,0.580455,5.732799,-3.809693,3.980835,5.006332,-5.933737,-0.694807,1.013601,-8.394749,0.699560,1.918001,6.362475,-6.314061,-5.219160,4.410162,-1.838713,-3.574989,5.219494,-6.066297,7.963576,-6.856219,2.382245,-9.783766,-1.479581,-0.064511,7.059073,-1.230715,5.267892,-5.382241,-3.502578,5.081496,-2.200703,-1.678383,-2.526361,-9.560082,-2.481270,-8.168398,1.795507,-1.067759,1.702892,-7.652241,-3.069814,-9.120846,3.475065,6.768316,-6.111755,-4.061736,-0.352208,1.858233,8.032841,6.014471,-9.989488,-5.084620,-4.681336,0.954274,9.333964,-1.474642,5.160959,-8.808364,-2.908901,-2.422564,-0.134999,3.428606,8.081036,-2.459638,4.648138,4.533203,6.613790,7.460334,-4.030170,6.070879,-3.077256,-7.128297,-1.583613,-0.033404,-2.796928,-1.067198,3.277800,-2.691032,-4.622473,-8.411577,-0.609517,4.146364,4.236687,5.395666,-9.744217,7.313832,-6.206952,-6.672530,-3.911307,1.612725,5.061439,-0.656959,-6.061135,1.753362,4.674125,-1.357850,3.599573,1.221340,-5.308314,7.692304,0.380172,-5.330233,-8.034697,2.174725,7.588720,7.188534,-0.879033,-7.647365,-7.096854,2.427505,8.015593,8.698645,5.628218,4.744671,8.012540,-4.320867,4.023416,6.708508,4.163186,4.704226,9.183899,3.870301,-1.777615,-5.926032,-9.312957,-1.030472,4.017808,-4.529994,-0.712238,7.343353,-3.489735,-3.243956,-0.886591,2.108943,-2.306991,-1.472479,-5.145220,4.692658,1.442120,2.862077,6.664116,6.265788,-4.664292,-1.869651,8.018115,-7.754760,8.940690,-5.268293,-8.080424,-4.748842,-6.129209,3.750853,-8.661739,1.510771,-4.485237,9.137042,-7.098672,4.914425,0.824546,6.654858,5.560806,-0.166062,-4.279594,-6.192534,4.168364,-7.657397,7.125332,-6.305544,-6.871810,-2.665061,-3.387940,3.768463,-5.043352,3.892685,-5.464863,1.260906,2.161995,-6.689747,-5.445911,-7.579787,8.868088,1.198229,-9.735762,8.103698,9.600223,-8.201995,9.371221,-1.970435,-7.524792,2.270943,-6.838765,-1.245083,9.083584,3.201715,8.364987,4.243833,-5.224892,8.223344,-9.393511,-4.140691,-8.614207,2.776441,-1.179380,-4.001066,-3.401161,0.684930,-7.230860,-9.403708,-4.180736,2.378405,8.412594,6.414048,8.308583,1.990214,9.821038,8.744554,-0.150272,8.265130,-2.761735,5.295002,-1.307737,0.308453,-1.603022,-7.228795,4.209705,-7.837676,-5.371833,5.609510,-5.296387,7.548295,-5.976169,-3.466066,0.817998,6.149376,1.392708,-0.880625,2.090199,-5.596511,3.796398,-5.594437,-0.130419,-9.943004,-7.818580,-8.116656,-8.464548,-2.874325,-4.939996,2.263302,2.603053,5.990473,6.737974,-3.053443,2.897739,-6.343068,7.595233,1.171746,1.479373,-5.081984,0.220595,-2.642453,-5.299327,-7.900587,7.225398,-2.464167,-0.218898,6.489961,-0.879891,-6.071353,-9.373954,-7.561214,-5.532729,2.565826,3.899572,2.686347,-1.028790,-0.204962,3.350814,1.394848,-5.363155,6.941030,9.050217,-2.991327,-1.285869,7.346820,1.128986,-3.982437,-6.852746,1.383000,3.176237,-3.177523,4.992609,-0.659644,-7.151642,0.321283,9.004472,0.835634,-9.698679,-5.166644,7.600909,4.145843,-1.520963,-6.826571,-5.434385,-5.739666,-3.888079,0.801450,-2.863672,-1.575824,-2.662032,7.939498,-9.769141,-2.435348,5.950028,7.882977,5.912248,0.911317,-0.649025,-3.952677,-6.852480,-9.463102,6.705223,-7.809324,2.150696,-7.015370,-7.230805,-6.579123,7.192239,7.218960,6.188314,7.497549,-5.530876,-5.446145,-3.405332,6.345010,-7.543933,3.372618,3.826806,5.783145,5.918234,-8.776189,9.728135,-6.355977,-2.994140,4.363672,3.269146,-3.441459,-6.923969,-6.303238,0.781291,5.479790,-4.574071,8.592741,-4.177198,-5.297875,3.938655,5.318432,0.425955,1.862626,-8.973422,-0.198277,5.286756,7.986643,5.475815,-3.218992,9.943699,-8.475248,-6.415792,4.302713,-8.888509,-1.473242,3.300711,1.435851,-9.468383,-1.250785,3.093449,-2.267862,8.827322,-9.641474,0.302473,7.113682,-7.355839,-8.379108,8.129375,0.595780,-9.373193,4.784586,-5.297880,-5.842981,8.848954,5.665921,9.428854,8.052687,7.928273,-5.176455,-0.277408,1.773352,1.820338,-9.182897,5.654569,2.416506,7.870687,8.303250,7.772806,-3.689208,-9.053379,0.918802,9.582188,-8.221705,0.147753,-9.814241,-2.551885,-7.258073,8.942042,6.174332,8.743635,-1.637266,9.011290,-1.547136,-1.149445,-7.952270,-8.195842,-3.216007,-7.320658,-2.778850,3.546516,-0.544474,-4.210638,-1.629647,0.872849,-3.929032,-4.981008,2.955241,8.252700,-6.382320,4.067765,-5.246327,-1.551978,8.524997,-5.939265,-9.931587,-6.554669,5.067159,-3.394166,8.167563,7.385354,-3.382974,-3.508120,-6.348409,8.998660,8.395333,5.681103,-8.135202,1.366642,-6.026577,3.552073,0.270600,5.458086,-5.795585,-9.985420,4.217397,1.840444,7.365173,-3.534790,6.353563,-7.692485,-7.258422,8.239377,-1.858229,-6.157306,-7.243054,8.888746,-3.803217,-9.665519,-8.671628,-8.043036,9.507341,6.697994], dtype = "float64")#candidate|9224|(504,)|const|float64
const_9225 = relay.const(-1.655870, dtype = "float32")#candidate|9225|()|const|float32
call_9222 = relay.TupleGetItem(func_6252_call(relay.reshape(var_9223.astype('float32'), [3, 14, 1]), relay.reshape(const_9224.astype('float64'), [504,]), relay.reshape(const_9225.astype('float32'), []), ), 4)
call_9226 = relay.TupleGetItem(func_6256_call(relay.reshape(var_9223.astype('float32'), [3, 14, 1]), relay.reshape(const_9224.astype('float64'), [504,]), relay.reshape(const_9225.astype('float32'), []), ), 4)
uop_9236 = relay.log2(call_9222.astype('float32')) # shape=(5, 9, 11)
uop_9238 = relay.log2(call_9226.astype('float32')) # shape=(5, 9, 11)
output = relay.Tuple([call_9207,var_9223,const_9224,const_9225,uop_9236,])
output2 = relay.Tuple([call_9208,var_9223,const_9224,const_9225,uop_9238,])
func_9240 = relay.Function([var_9223,], output)
mod['func_9240'] = func_9240
mod = relay.transform.InferType()(mod)
mutated_mod['func_9240'] = func_9240
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9241 = relay.var("var_9241", dtype = "float32", shape = (42,))#candidate|9241|(42,)|var|float32
func_9240_call = mutated_mod.get_global_var('func_9240')
call_9242 = func_9240_call(var_9241)
output = call_9242
func_9243 = relay.Function([var_9241], output)
mutated_mod['func_9243'] = func_9243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7242_call = mod.get_global_var('func_7242')
func_7243_call = mutated_mod.get_global_var('func_7243')
call_9260 = relay.TupleGetItem(func_7242_call(), 0)
call_9261 = relay.TupleGetItem(func_7243_call(), 0)
output = relay.Tuple([call_9260,])
output2 = relay.Tuple([call_9261,])
func_9264 = relay.Function([], output)
mod['func_9264'] = func_9264
mod = relay.transform.InferType()(mod)
output = func_9264()
func_9265 = relay.Function([], output)
mutated_mod['func_9265'] = func_9265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7499_call = mod.get_global_var('func_7499')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_9274 = relay.TupleGetItem(func_7499_call(), 3)
call_9275 = relay.TupleGetItem(func_7500_call(), 3)
func_3740_call = mod.get_global_var('func_3740')
func_3742_call = mutated_mod.get_global_var('func_3742')
const_9277 = relay.const(-0.614525, dtype = "float32")#candidate|9277|()|const|float32
call_9276 = func_3740_call(relay.reshape(const_9277.astype('float32'), []))
call_9278 = func_3740_call(relay.reshape(const_9277.astype('float32'), []))
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_9281 = func_6002_call()
call_9282 = func_6002_call()
output = relay.Tuple([call_9274,call_9276,const_9277,call_9281,])
output2 = relay.Tuple([call_9275,call_9278,const_9277,call_9282,])
func_9283 = relay.Function([], output)
mod['func_9283'] = func_9283
mod = relay.transform.InferType()(mod)
mutated_mod['func_9283'] = func_9283
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9283_call = mutated_mod.get_global_var('func_9283')
call_9284 = func_9283_call()
output = call_9284
func_9285 = relay.Function([], output)
mutated_mod['func_9285'] = func_9285
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_9293 = relay.TupleGetItem(func_5961_call(), 2)
call_9294 = relay.TupleGetItem(func_5962_call(), 2)
func_6252_call = mod.get_global_var('func_6252')
func_6256_call = mutated_mod.get_global_var('func_6256')
var_9297 = relay.var("var_9297", dtype = "float32", shape = (7, 6))#candidate|9297|(7, 6)|var|float32
const_9298 = relay.const([2.811280,-8.456141,-6.303886,-7.300430,6.075340,4.693367,-9.210917,2.021079,6.798374,-5.147074,0.735914,-7.220929,-5.027376,-9.347188,-2.202458,9.674362,-1.495959,8.289802,-5.878759,-1.952665,5.769374,-6.978445,5.897604,-8.669527,9.722045,-0.422785,-9.300138,-4.653823,-8.942801,-9.379422,-7.415302,-0.150553,6.665069,9.863939,-7.350846,-6.816051,-3.973767,6.141605,-6.977348,-0.858035,-0.391862,9.322191,7.307351,-0.415924,-0.453535,-5.711223,-3.164461,0.601892,-4.698031,1.020777,-3.147266,8.723937,-4.184310,-7.691080,-9.913941,-6.730002,-6.265724,8.371458,-9.236199,4.903598,-8.742130,9.224456,-5.973575,0.396179,-5.745755,9.530785,-5.463803,6.076848,-7.715457,9.087729,-8.256020,8.977794,9.492832,-9.899977,-5.957448,-2.491329,9.420627,-2.675886,9.603467,6.090256,-3.920252,-7.037603,4.752382,-4.125531,-9.389467,-0.637158,5.665473,6.803389,8.460894,-0.045776,3.107550,-3.095224,3.487520,-0.138494,-7.561176,-6.515484,5.913498,3.013149,-2.047646,-9.910814,-2.715806,1.162646,-3.572962,-2.634896,-8.557153,-6.278860,-4.802710,-9.141481,5.072111,-5.527756,-0.952998,-1.941951,5.763883,-3.934712,9.153460,-3.747936,-4.387185,-8.848786,-1.420255,-0.355432,1.937655,-5.694852,6.736256,0.501827,-8.789626,1.724458,-9.536922,-3.422320,4.473790,1.634979,5.271303,-2.134997,4.506509,-0.427586,-5.382504,-1.674251,8.984857,3.687581,-0.482972,5.024368,-4.260863,1.619917,7.173349,-7.958373,6.976148,0.901751,-5.011871,-8.875624,-3.613645,4.129360,6.370523,9.234261,5.348857,0.521205,0.572729,-2.724018,8.768310,6.896770,3.354766,-6.774483,8.130904,6.257621,3.540412,-7.022350,-1.518590,-0.078173,6.361136,1.099651,-1.061849,-8.459891,6.009154,2.951144,7.096432,0.712498,1.665722,3.682138,-5.292620,-8.647817,-2.747474,6.424716,-4.835859,-1.988869,3.464205,-6.741988,-3.099094,-6.028715,9.603961,2.575445,-0.941159,0.954918,-2.113988,-3.109132,6.915922,-3.933774,6.336677,8.872519,-5.561068,-1.475272,3.276964,2.552135,4.716978,8.870654,-3.450244,3.209330,-0.665130,-8.877637,6.651542,7.428536,4.642753,-8.874851,4.465124,-8.548994,1.754006,-6.053492,-7.376499,4.478964,1.580721,-0.333029,3.430200,-8.853749,5.036814,-6.028130,5.643841,8.208098,2.469833,-5.573559,9.515623,-0.875431,6.378871,6.494192,3.455293,0.782431,-4.741732,-0.737539,-5.141416,8.989971,0.144936,-0.569105,5.945233,1.568233,-3.221913,8.053396,-5.034137,-9.097410,-4.562246,2.030904,-8.158175,-4.566792,8.147270,-3.011207,9.905966,7.351603,1.060204,-9.790206,5.200014,-9.641158,7.752091,-1.805687,5.187623,6.172142,-0.950559,2.702345,2.449415,7.202611,-3.138948,-5.912680,5.218582,-7.604277,-6.295703,6.782849,-1.953960,6.316610,-4.347324,-2.718363,-2.280343,8.360018,-3.456684,-8.076220,9.293082,-9.264260,3.117995,4.140840,-2.595807,-6.741761,-0.333852,3.722693,0.464754,-3.738883,-7.311377,5.345015,-0.607544,9.602459,-2.677320,4.492291,-4.022187,9.574331,-0.060588,-0.475087,6.205350,9.823285,5.053507,-0.942425,7.895149,-3.673837,0.646879,6.281602,-9.477553,1.418492,-7.533982,-3.626644,-9.353604,-5.646193,7.487993,-4.060716,9.209333,-3.858930,-3.714502,0.128226,-0.549465,8.862109,-4.439196,2.055270,3.852613,5.111516,9.493331,-2.430792,0.973237,1.226294,-0.841131,9.687491,2.678649,-0.178324,2.746094,-6.494888,3.613431,1.681560,-5.823328,-8.617674,2.436026,6.059055,-1.238708,3.250815,-6.531652,-3.203140,-8.760778,8.550876,5.020702,0.837350,2.256928,-7.837689,1.278892,-4.903023,5.127166,6.928720,-3.375512,4.666669,4.070700,1.124504,1.288482,-8.830903,6.632198,-1.804951,5.246022,5.203321,0.699364,4.986099,-9.861989,-7.202285,-0.814088,-2.781588,-1.736037,2.546652,-4.014025,2.319794,-5.944027,5.748262,0.530074,9.536074,4.563587,-5.364380,-9.155630,0.122427,9.074488,-8.977973,-0.772186,9.617062,6.355341,-9.846648,2.687847,5.972387,1.671581,4.410375,-7.335069,5.875797,-9.769876,-3.345697,7.557429,6.735485,8.218237,-3.382980,-3.104213,-7.910201,4.271381,-0.051229,0.387246,-0.717078,-4.325941,9.138918,-4.969960,4.026664,-4.131520,-5.715012,3.933719,1.259260,1.798498,-7.981926,7.684727,0.408059,8.913554,1.833001,-0.415672,6.378016,4.582458,8.640887,8.591405,-3.827364,9.295152,2.831942,-3.780194,6.299549,5.025469,-4.670383,9.037016,0.953486,7.995157,7.486343,-2.437069,-6.128979,2.417087,-4.293732,-9.806321,5.952355,7.242633,8.938746,6.240946,7.731209,-4.706633,7.184199,-3.821718,1.562569,6.795871,2.212607,1.139679,9.906156,6.353146,-0.981422,2.357874,2.197407,-5.694919,-0.460087,-0.282096,-7.334896,8.044322,-4.822526,-1.106821,3.587793,-9.991146,-9.838779,4.599323,-4.149097,0.945940,-6.991592,-6.783323,9.718290,-9.126713,-2.882146,1.591669,-1.860827,-6.231940,-7.041749,-7.015241,-2.517457,-5.474741,-4.243738,5.175984,7.915392,4.835784,2.470994,7.794348,4.540864,-6.188986,-9.342185,-1.755964,8.291698,9.676405,-5.405426,9.446311,-6.156165,3.971321,5.382410,-0.444244,7.969708,5.991554,8.257443], dtype = "float64")#candidate|9298|(504,)|const|float64
const_9299 = relay.const(-9.007437, dtype = "float32")#candidate|9299|()|const|float32
call_9296 = relay.TupleGetItem(func_6252_call(relay.reshape(var_9297.astype('float32'), [3, 14, 1]), relay.reshape(const_9298.astype('float64'), [504,]), relay.reshape(const_9299.astype('float32'), []), ), 1)
call_9300 = relay.TupleGetItem(func_6256_call(relay.reshape(var_9297.astype('float32'), [3, 14, 1]), relay.reshape(const_9298.astype('float64'), [504,]), relay.reshape(const_9299.astype('float32'), []), ), 1)
func_6965_call = mod.get_global_var('func_6965')
func_6966_call = mutated_mod.get_global_var('func_6966')
call_9302 = func_6965_call()
call_9303 = func_6965_call()
func_144_call = mod.get_global_var('func_144')
func_147_call = mutated_mod.get_global_var('func_147')
const_9324 = relay.const([-2.292077,0.923721,3.465624,-8.743281,-1.806099,-4.193758,6.149931,2.148880,6.864429,4.714208,0.904101,-5.143042,-7.503520,-5.210069,-1.266105,-5.718547,-1.718945,-6.059494,-7.612824,7.748051,-3.582061,0.347581,8.201345,-9.205693,-9.979379,3.885389,-7.141795,-7.381056,-0.293069,-5.005670,-2.762803,1.861114,-3.766605,1.614145,8.887465,6.797775,-4.337740,9.411653,3.909792,4.671035,0.349648,0.022668,-8.410140,8.232470,7.983203,8.146320,-1.134585,-7.139100,-1.288121,5.076389,-0.109839,9.585975,6.233828,-3.374277,7.441674,-8.385293,2.387979,-9.017320,-6.527431,-9.465560,5.918619,1.450765,-5.274969,-0.132326,5.409840,-7.831173,-3.215287,0.491050,-6.930773,7.330338,3.893009,6.697451,1.653291,-0.141294,9.566429,1.875757,-4.203803,-1.878269,-2.598307,3.332655,-5.980343,-6.747425,2.880589,9.104664,3.078656,0.105828,-3.034143,8.257971,-9.872617,0.210579,-5.215861,-0.540371,-1.534627,-3.546245,9.057257,-4.904521,5.051305,9.112687,-0.940317,7.216842,9.126781,-6.979283,4.236225,9.015709,0.118363,2.991500,-1.836672,-2.679774,-8.695872,3.795122,-7.737779,1.548154,-2.893189,9.489782,4.704977,1.715009,2.287072,4.273533,8.890400,1.530865,6.641053,6.672173,-8.551014,-2.145042,-3.030824,8.879368,-6.076071,-6.264391,8.424425,9.575128,-0.751462,5.465014,0.031679,-6.577215,1.893148], dtype = "float64")#candidate|9324|(135,)|const|float64
call_9323 = func_144_call(relay.reshape(const_9324.astype('float64'), [9, 15, 1]))
call_9325 = func_144_call(relay.reshape(const_9324.astype('float64'), [9, 15, 1]))
output = relay.Tuple([call_9293,call_9296,var_9297,const_9298,const_9299,call_9302,call_9323,const_9324,])
output2 = relay.Tuple([call_9294,call_9300,var_9297,const_9298,const_9299,call_9303,call_9325,const_9324,])
func_9332 = relay.Function([var_9297,], output)
mod['func_9332'] = func_9332
mod = relay.transform.InferType()(mod)
mutated_mod['func_9332'] = func_9332
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9333 = relay.var("var_9333", dtype = "float32", shape = (7, 6))#candidate|9333|(7, 6)|var|float32
func_9332_call = mutated_mod.get_global_var('func_9332')
call_9334 = func_9332_call(var_9333)
output = call_9334
func_9335 = relay.Function([var_9333], output)
mutated_mod['func_9335'] = func_9335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_9390 = relay.TupleGetItem(func_5961_call(), 2)
call_9391 = relay.TupleGetItem(func_5962_call(), 2)
func_9023_call = mod.get_global_var('func_9023')
func_9027_call = mutated_mod.get_global_var('func_9027')
const_9415 = relay.const([3.329826,9.009573,1.961395,-5.278849,-9.064014,-2.773086,1.247447,-0.255590,6.120500,3.803363,-2.972096,8.794456,-3.781479,7.868377,-9.450327,-2.458790,3.724630,5.623023,-4.563032,4.414232,9.057723,-2.450266,3.473530,-7.867025,-4.210670,-7.268941,0.271400,1.204037,-3.310276,1.914669,-3.931587,4.148033,-2.169651,-5.019175,-9.761251,1.401375,-2.360513,7.098584,9.996006,-9.792221,6.084674,-6.727119,-3.114175,3.834258,-9.940163,-7.313485,-0.719924,-7.980092,-3.071004,-9.164246,-8.849018,-1.905291,5.470054,-3.195476,-6.650267,-8.597170,7.565801,-3.741136,3.218014,5.533624,-1.555838,-2.366783,6.258209,8.355363,-5.153664,-5.922836,-2.169598,5.767016,-1.682251,-4.927954,-1.159694,9.098576,0.876695,8.500746,2.112423,-6.492096,-2.424587,-1.645411,5.276436,-9.920066,7.098851,-1.314577,0.174923,-7.037858,3.626272,-9.764235,8.302281,-4.584933,8.092659,0.287877,-4.113736,7.513421,4.304951,-5.687372,6.537149,-1.587551,4.598090,-5.782136,-0.344543,4.452865,2.703561,6.321918,1.938479,5.395156,7.617260,2.128260,-0.417309,6.520447,-3.860372,-8.707712,-3.782773,2.650385,7.007328,-9.919389,-4.484907,-6.477036,-2.005645,-9.401100,1.603059,-7.176172,8.808276,-8.520616,-3.871613,0.129728,4.402895,2.872546,-6.124350,6.363231,-0.651608,2.878622,0.925171,6.475594,7.530208,4.913463,7.729933,8.636492,0.989025,1.154245,2.454895,2.454413,-3.859485,-5.710635,0.893126,2.130481,-7.146603,-1.467822,-8.507745,7.554633,8.819789,-3.096969,-0.935268,1.610334,4.541384,-5.139588,3.459082,3.150860,-8.197254,-0.202410,6.203052,2.525001,-1.963287,-4.324091,5.261293,-8.558676,-7.505905,-5.034361,8.184060,5.247990,-0.388108,5.377473,7.543823,6.445563,7.093288,1.429319,9.046523,-9.239245,-6.789249,-5.728617,-1.967885,-1.799340,2.157542,4.565788,5.905164,5.795383,-2.583206,2.518285,9.484585,1.031294,6.190934,-9.350509,-0.887240,-6.713724,1.083560,-6.243897,-0.868786,-4.861623,7.542726,-5.806726,-2.751070,-8.802731,-3.791563,-1.962121,6.413235,-5.118964,-7.629761,4.991474,1.148626,4.482769,0.027232,-5.080624,1.345927,5.119919,7.887518,3.457618,-6.801531,-9.533665,5.743347,-4.214360,2.885201,3.933625,8.864390,-5.464752,8.249464,0.492822,1.094372,-2.872393,4.025017,-8.827157,5.490779,-9.002495,3.963426,-0.073026,-2.814620,7.391343,-2.799001,5.375532,-7.079375,-3.758480,-4.461032,-0.533592,-0.176747,-0.593803,-4.133595,-2.859310,-7.397721,8.462130,0.111583,-6.307477,8.021380,2.385726,2.678123,2.315280,-4.503242,8.490421,-7.631999,2.783062,-1.580101,-2.352098,-7.443970,-9.345848,5.944564,-3.084411,1.636270,-0.662446,7.107339,-5.513402,4.882890,-2.441799,-7.055480,-1.587998,1.231317,1.798679,4.123573,-0.012651,-1.721728,-2.551843,9.219600,-2.513445,2.498563,2.617368,1.713981,9.873574,1.087111,-1.875277,2.479213,-3.356996,-4.846859,-8.469325,0.615979,9.499621,0.657022,-4.432942,5.373896,-9.105392,8.743957,6.973903,3.622807,4.368701,-8.661956,-4.489829,-6.432303,-1.743959,-9.933106,-7.379423,5.807486,1.684346,5.830780,3.639544,5.144226,-8.356867,6.041667,2.906326,-2.905598,-9.078976,-8.354243,0.095148,0.138825,-3.618879,-8.478017,-4.203710,-0.428489,9.623798,9.155277,-7.910822,-5.384977,6.908113,-7.308350,-0.148083,-7.443701,2.234887,-5.140108,9.098282,-5.596388,2.696669,5.932540,7.896082,-0.154881,5.656562,7.535891,-7.901985,-4.245322,-2.691168,-8.482920,-7.369119,8.355216,1.753314,-1.197961,4.463192,-9.446297,1.260000,-2.395346,-9.653449,4.714401,-7.846551,6.753931,-7.569369,0.796683,7.939917,-8.516442,-0.418242,7.310174,0.082172,-0.183780,9.336819], dtype = "float64")#candidate|9415|(364,)|const|float64
const_9416 = relay.const([[8,1,-4,8,6,8,6,10,-9,4,-4,4,-4,-8,-6,-10,6,10,-4,-8,4,2,3,-8,2,6,2,5,6,3,-10,6,-2,-9,-7,-9,-5,8,10,-10,9,-10,5,-7,7,-3,-2,-4,-9,3,10,-4,-10,4,-2,4,-10,2,-8,-8,-10,-1,-2,-7,7,-7,-1,-3,7,10,-2,1,-9,-9,6,9,10,8,-4,-5,6,-10,-2,7,10,1,2,-6,-6,7,2,-8,5,-4,-1,-1,-10,-4,-6,4,-8,10,8,2,-10,-6,4,-5,-9,9,-10,9],[-5,-4,1,7,-4,1,2,8,2,-4,-9,7,-10,10,-9,1,1,5,5,3,-10,3,-8,5,4,-6,10,1,-2,-1,-1,4,-8,-5,-2,4,5,-5,-8,-4,-4,3,6,6,-4,-8,1,-6,3,-4,4,-7,5,3,-6,6,-1,-6,3,-4,10,2,6,-2,1,-3,6,-5,4,4,7,2,9,7,-9,-8,5,-2,-10,-1,10,8,-4,7,-3,9,-3,9,8,-5,-7,8,5,-4,-6,-7,-10,2,-10,-3,-4,-4,-5,10,-9,2,7,9,-2,6,9,-4],[-2,5,9,-6,2,9,-5,3,-3,-9,7,-2,-2,-6,-6,1,9,2,4,1,10,-5,1,8,-3,6,-6,8,9,-10,-4,-4,7,-3,4,8,5,10,1,2,4,3,-6,-7,-7,-1,7,6,-1,-6,-4,-10,8,-7,-7,-3,8,-10,-1,1,-3,-10,8,-6,-6,2,7,-9,2,-3,6,10,4,-10,7,2,4,10,-10,8,9,6,-4,2,-2,6,3,-3,6,-3,-5,-2,-6,8,1,2,6,5,-2,7,-1,3,9,-2,-1,9,-7,4,7,1,-8,7],[10,5,8,7,4,-5,8,-9,10,7,-3,5,3,-6,-9,-6,-5,-3,2,4,10,9,7,-8,-6,-6,-8,-8,9,3,-5,8,-9,-4,-1,-6,-10,-10,1,-3,5,-7,-2,-3,9,10,-4,-5,-9,5,-7,-2,4,-3,-2,-5,8,9,6,-3,-9,-8,-1,-7,10,-2,-4,6,-8,4,-5,-6,-10,-5,10,-9,10,3,10,6,3,9,-4,-5,3,-2,-10,-1,7,7,3,6,3,7,-9,-5,10,-10,-8,5,-6,-8,-7,-7,5,10,9,-1,5,-6,-8,-7],[-5,-1,5,4,4,8,-3,6,8,-5,-3,-9,-2,-1,8,-9,8,-5,7,-2,5,4,6,7,-7,-3,9,-7,9,-3,9,-7,3,7,5,-3,-1,10,9,3,2,-4,-8,-5,-10,-1,2,5,-1,-5,2,-9,-7,2,6,9,1,-10,8,-5,6,9,-5,-1,-5,-5,4,-9,2,-6,5,8,-1,-7,8,9,-10,-9,-3,3,9,-4,-3,6,2,-6,7,5,6,9,5,-5,-6,-8,-7,6,1,10,1,-1,-8,-2,-3,-3,10,-1,9,8,4,-6,-10,-8],[-2,-5,4,8,3,7,8,2,-3,4,3,-9,1,8,8,2,-4,-3,-3,2,-2,1,-10,-1,-10,-5,9,7,-9,-1,1,-7,10,-7,2,2,-8,-5,8,9,10,-8,-10,-7,2,-8,-1,1,-6,8,-8,3,1,-4,3,-6,9,-10,-3,-8,6,1,10,1,-10,5,7,-4,5,9,1,-8,1,1,-6,-10,-6,10,-1,-3,7,-9,-5,3,10,5,9,-4,-3,4,-6,10,5,8,-8,-9,1,9,10,4,-6,-1,-4,5,2,7,-6,-9,-8,9,10,-2],[5,-6,3,-4,1,-2,-2,4,-6,3,-9,-3,1,-2,-9,3,4,-8,9,6,7,7,-6,-5,-4,-4,-3,10,10,-7,6,2,7,-1,-2,-8,-6,10,10,6,-4,-8,9,10,-2,8,-7,2,-10,2,-9,-1,-7,-8,-6,10,-5,8,-8,5,5,10,4,8,4,-8,-10,7,-1,4,-7,9,5,-6,-6,-5,-4,3,-8,6,10,-2,-4,-8,3,-4,6,-2,1,-6,-9,-7,5,-3,-2,-2,2,3,-4,-10,-2,-5,6,-1,-7,3,7,9,2,4,10,6],[-3,-7,-9,2,-9,-2,-6,3,2,-9,8,1,-1,-5,5,4,-2,5,-8,-5,-5,6,-3,-7,7,-2,-8,-8,-1,4,6,-6,-9,-2,-7,7,-7,5,2,-3,-2,5,-1,10,5,10,2,-2,4,-9,4,-2,9,-8,-3,-9,9,6,-6,-2,10,4,5,-2,-3,-1,-9,5,2,8,-8,2,-10,5,-5,-8,-8,-5,-10,3,10,-8,7,-6,1,-6,-10,4,7,5,-8,-4,-5,1,-6,9,-8,-4,2,-6,3,-10,10,-2,-5,8,-1,-2,-1,-4,-9,4],[1,2,7,4,10,2,10,-9,-4,10,7,-6,7,5,4,-3,7,-6,-5,-6,-6,7,6,-1,-2,8,5,8,-3,-7,-4,1,10,-10,2,2,-6,-4,-6,3,-9,9,-4,-5,-2,5,7,-1,-7,-1,-5,-9,-1,-5,9,7,10,2,-3,-2,-1,2,7,2,2,-5,6,10,-6,-4,-3,-10,7,9,-9,4,10,-8,9,2,-5,10,8,9,-7,8,-6,-4,-2,-2,4,3,-3,-2,4,6,9,-1,10,-3,-4,6,1,4,5,-6,-1,-4,1,7,-7,5],[2,7,7,-6,2,3,-4,-1,-1,9,-6,-8,-6,-4,-9,3,6,-3,1,-4,-3,-10,-1,7,8,6,6,2,-1,9,7,1,-3,4,4,-8,-4,4,-9,-9,-7,-10,-9,9,1,1,-9,1,7,-7,-3,9,-5,-3,6,-3,7,7,8,-7,1,8,10,-3,3,9,-5,3,1,-6,8,-1,-3,-2,-4,1,-8,-7,-8,-7,-10,-9,5,5,-8,5,8,-2,4,-3,4,4,-3,-10,3,2,-4,-8,-4,6,-4,9,-1,-5,6,3,-2,-2,10,-5,-9,-6],[-9,1,5,-5,-2,-3,5,8,-5,-1,-10,1,-5,4,-5,-5,3,8,-7,9,7,-2,1,4,-3,-5,8,-4,4,4,-6,-6,9,9,4,7,1,4,1,9,2,8,4,2,-10,9,-9,7,8,-6,-3,4,4,7,5,-1,2,9,-3,-5,-9,-9,1,6,1,10,7,-9,1,8,1,-4,-1,8,4,-7,10,-3,5,8,3,1,3,1,-3,1,10,-9,-10,5,2,1,1,1,-3,-1,9,6,-1,8,-6,9,6,-7,5,-4,-5,9,7,3,10,-6],[-5,3,-9,-1,9,9,8,-6,9,1,3,1,3,1,9,4,-10,-9,7,-2,-9,-6,10,-1,-1,2,-4,5,-8,-1,-4,10,-4,-2,10,-9,-8,6,-8,6,7,5,-2,9,9,-6,8,8,6,3,8,5,-9,-4,5,-6,8,6,-2,-10,6,5,-4,6,-4,8,-2,-10,1,10,3,-10,7,-1,-10,9,6,10,8,-2,6,6,4,-9,-9,-2,-4,3,8,-10,4,-6,5,4,3,-8,7,-7,10,-5,6,1,-2,1,10,-10,-1,7,-2,1,-9,4],[-5,-9,8,3,-3,-4,-9,-5,-4,-3,1,3,3,1,-3,1,8,2,-6,-2,7,6,-10,-5,5,-1,10,-2,-10,-6,-7,-2,7,-5,-8,1,-10,1,7,-6,6,1,-3,-8,3,5,-10,-9,10,-1,-8,4,-9,-1,3,-1,5,4,4,-1,7,-8,-3,-6,-10,1,-1,-9,-2,-9,6,-5,-3,-8,-2,-3,-5,7,-10,2,2,-10,-10,3,9,-6,-3,7,1,-2,-6,-3,-8,8,-3,-9,-6,8,-8,-8,5,4,-7,6,8,-1,7,-5,4,2,-6,2],[10,7,-3,6,9,9,-1,-1,5,3,-6,6,2,7,8,9,1,5,1,3,-1,5,9,3,10,5,-2,5,-8,-3,4,-6,8,-1,5,10,-8,10,-10,1,-8,-5,-7,6,5,-6,1,-5,3,9,-2,4,3,7,-6,3,-5,6,-9,9,-2,-4,-7,2,-5,-2,2,-4,1,-8,10,-10,-10,-6,9,-4,2,-3,-6,-3,-10,5,2,-6,-3,-9,-6,7,-7,6,2,-8,9,-7,10,6,-6,1,2,-8,-4,9,6,-7,-1,-1,-4,-9,-2,-7,-8,-2],[6,10,-3,-5,5,-6,-10,-6,-7,-5,-7,5,3,-4,7,-5,1,10,-6,-10,7,-6,10,-9,10,-7,2,-8,4,-8,-8,-3,-10,3,-6,-9,-9,-9,8,6,-3,6,-7,-2,6,1,5,-3,6,3,10,-4,-8,10,2,3,-10,-3,-3,7,5,3,3,6,-3,1,2,4,6,-5,1,4,-9,6,1,9,-3,-7,10,6,-2,-9,-10,-4,9,7,-9,1,9,8,-3,10,-1,4,2,-7,9,-9,-2,-9,2,3,8,-9,-3,9,-6,-4,7,10,-10,-2],[-6,-9,-3,1,4,-7,8,-9,3,-7,-8,7,2,5,-6,-2,9,1,10,7,4,6,10,-2,-5,1,3,3,5,9,4,-4,-3,-4,6,6,-7,-1,8,-9,4,10,-10,-3,8,6,3,6,-4,-10,-6,-10,9,-10,-7,-1,1,-10,-2,-5,7,6,-3,8,5,-10,4,-3,-3,1,-6,-3,-2,9,8,-6,-7,-8,7,10,6,4,-9,-5,2,2,-6,4,-10,4,6,6,4,-6,10,2,3,5,3,-4,-6,4,3,-2,2,4,7,3,-4,2,-4,-9]], dtype = "int32")#candidate|9416|(16, 112)|const|int32
var_9417 = relay.var("var_9417", dtype = "float32", shape = (1950,))#candidate|9417|(1950,)|var|float32
call_9414 = relay.TupleGetItem(func_9023_call(relay.reshape(const_9415.astype('float64'), [364,]), relay.reshape(const_9416.astype('int32'), [1792,]), relay.reshape(var_9417.astype('float32'), [1950,]), ), 2)
call_9418 = relay.TupleGetItem(func_9027_call(relay.reshape(const_9415.astype('float64'), [364,]), relay.reshape(const_9416.astype('int32'), [1792,]), relay.reshape(var_9417.astype('float32'), [1950,]), ), 2)
const_9436 = relay.const([-7.892210,-8.192461,9.674844,6.625349,-7.156584,-3.242183,0.288078,0.434735,5.388890,-4.924256,-5.812776,5.197264,-3.022439,-2.997677,2.300604,6.273669,-7.946516,0.830802,7.831833,4.334686,-7.404905,4.449812,-7.190085,-0.889552,-5.309766,3.590113,6.388095,-1.460107,5.401609,7.191994,-7.100904,3.422875,-2.441197,-2.683398,2.742092,6.347498,-7.856259,1.665256,7.526402,-9.047974,-4.037320,-3.744584,-2.012493,-2.905840,3.519941,5.238379,-7.245318,-1.952765,5.243692,-1.542753,2.348592,4.112047,6.391850,-7.807900,-5.817472,-4.130670,-2.121500,-4.413825,9.496538,5.722799,-6.195171,7.671978,3.518044,5.991420,-8.165807,7.035672,4.862973,8.365125,-8.302114,8.328218,6.433869,0.261656,2.554388,-7.433010,-7.721805,7.885649,-8.691988,5.514579,2.481258,1.399362,0.891962,2.609068,6.397090,8.266078,-2.074241,-1.436495,-4.682491,-7.520604,0.081478,-7.892407,-2.514171,2.108913,-9.545578,-9.843907,6.216390,-0.068202,-5.984314,-3.010821,-3.968779,2.658493,-1.135629,-6.769724,-6.130781,-2.726921,-4.574053,8.955455,3.011757,7.112546,-0.602198,7.438929,8.243449,-0.670232,1.881409,9.566857,-1.099194,-2.562463,-1.680417,6.710015,5.843549,9.829218,-7.044719,-1.443802,3.058815,-7.237339,8.429244,6.280478,9.533247,3.644571,-0.322891,-5.368643,2.603745,-6.598651,-2.164221,-0.517011,9.915503,1.297624,1.366981,6.454731,1.013473,-4.092773,2.377936,-8.511444,4.976256,4.025527,-8.004370,-5.743561,5.437365,-9.036302,-2.846991,2.291406,-9.497281,1.649690,7.793242,-1.280766,-6.081626,3.863998,-7.390362,-6.659705,0.545301,-2.384372,-5.433762,-6.745587,0.194270,1.910905,5.581310,8.981815,2.974250,7.205941,-3.582055,5.656562,-1.063121,-8.849915,-7.509628,-0.708661,0.124946,-3.250892,8.247951,9.694284,8.060039,-8.991055,4.314950,-4.519644,5.844820,8.973576,8.072510,-4.853358,-1.646232,-9.126611,-4.879243,-7.888207,5.158215,0.432841,0.910346,0.913752,3.985394,-0.640336,-7.007563,8.548914,-2.968351,1.048573,5.535457,-3.242801,-1.754270,8.106835,7.397409,-0.966274,-5.023062,-8.963404,-3.853307,-9.649533,2.614149,5.377479,0.769811,7.174100,4.429841,7.220917,1.311007,-2.735985,-9.593235,-7.327605,-5.546852,8.337612,-4.475080,-8.353213,0.570899,-7.875865,9.446001,-1.740356,-0.236009,6.495613,-1.170169,-1.847997,-4.481813,-5.923619,-8.076769,-6.549476,9.641568,4.192317,0.332503,3.090585,-5.961703,-1.553467,8.596777,-5.277672,-3.757519,6.648413,-1.537409,-6.433642,5.308200,-7.501311,7.389991,-7.082658,-6.673649,-8.344720,7.031266,-3.069091,2.423334,-9.285215,-4.566742,-8.598998,-3.833052,3.774473,-6.841095,3.582298,-7.483876,6.379488,-6.522989,3.669992,-9.092758,0.711697,2.123043,6.178372,-3.969785,7.204035,2.110361,5.320708,8.320940,-0.525222,3.656354,6.537183,4.615583,6.181682,-8.923064,-1.066825,9.665737,7.584553,-7.903139,5.357321,-3.216448,4.020331,9.321028,6.778093,2.622237,-4.778341,5.094144,9.496386,-0.555227,-4.208078,3.864450,7.588766,-9.523685,5.705814,-9.226786,7.826379,1.897043,-7.683720,-3.773646,7.359331,6.858435,-0.506225,-1.834464,-7.510572,-2.145150,8.438486,8.097024,-5.528303,1.183333,-8.845585,6.389240,-4.818549,-7.753287,2.870965,-3.341578,2.136703,-4.333994,-2.817952,5.481173,1.324193,-4.692922,2.839731,-5.921476,7.554736,0.651214,5.184549,-9.297702,0.274595,-8.569240,0.613155,3.931893,-9.744958,-7.631772,-6.036902,6.499200,0.106158,3.002554,-4.309204,2.380745,8.807196,2.515496,4.267104,8.620238,4.458400,5.799416,-4.451991,7.840216,-3.067515,-6.094960,4.331083,-2.796627,1.332849,0.200811,6.732463,6.541719,2.776531,3.884307,-2.401724,6.009275,-3.444588,-7.613840,1.168816,-5.709720,8.031373,3.576481,-2.975742,-0.439077,2.841585,0.895760,-8.979297,2.893119,-7.554603,-5.995954,9.112945,-8.169990,-5.304361,7.498228,-7.045598,2.200101,-4.425021,-8.620251,-1.307897,-9.308568,-4.179886,5.880489,-4.753168,-6.691354,1.072377,-8.305082,-9.270964,3.077147,8.441542,-9.370922,-4.728696,-7.008335,-7.214778,7.270734,9.993184,-0.948844,-8.820196,-4.695762,0.483801,6.666728,9.694517,3.793372,-7.952133,-0.582141,1.789108,3.676828,-1.760720,-7.017301,-5.564578,2.241737,0.106781,2.895391,2.303796,4.341567,-7.238873,-3.340930,-2.034239,4.905056,-3.000059,-3.054676,-2.761199,1.175831,2.079875,-2.035340,8.804407,3.134842,0.016320,-1.957584,-3.226320,4.390989,-7.975780,-6.595364,-4.435857,6.880209,0.641437,-2.640765,5.829638,-2.140234,-7.371442,-7.323101,4.909602,-7.720830,-9.359323,0.893798,-5.191709,7.689741,-2.156628,3.370496,9.198633,9.687673,9.348066,4.934517,6.193601,1.152628,-2.229970,-9.712618,-7.666047,-9.314462,1.298254,5.968063,2.718709,9.197651,5.192534,-7.585794,6.126035,5.281824,1.241478,-0.909263,6.474816,-5.028217,7.109458,5.938520,-0.120958,5.038714,0.561650,2.378946,1.771381,5.279237,-5.098962,-1.088681,3.254567,-1.716989,-0.984933,-9.000523,-7.042884,2.980627,2.736019,1.538314,-3.201852,3.326903,-1.779170,-4.462458,5.051479,-0.438017,6.425343,-0.085836,-2.608637,-5.290415,8.609448,-6.564732,4.931391,0.750428,-5.201387,-8.569140,2.088281,2.919973,2.671117,-8.696944,9.364268,-6.996512,1.471668,8.606908,1.935067,-0.025579,-3.462523,-2.928066,-5.491601,-7.543014,2.450298,2.568709,1.151509,-8.308123,9.474522,6.624587,5.048228,7.589241,-0.648594,-1.524920,-8.809276,-2.689413,-6.665700,2.930241,8.556197,6.237706,-3.142293,4.524977,2.148492,-0.836868,-8.046884,0.148536,0.122465,-5.149089,-2.447144,2.852775,6.225718,4.540212,0.049688,-7.357423,7.380856,9.632017,7.353566,8.348189,-2.202374,6.640144,4.273059,-5.259633,5.090822,2.541140,5.711715,1.313034,-0.751342,-9.319784,9.818526,-3.928086,9.968731,-7.207713,1.835391,3.183231,-6.760864,-5.032420,-8.191684,-9.626637,-5.278794,0.854043,5.000793,-4.014460,8.908210,4.755130,-8.722484,1.899747,7.845120,-9.315765,8.671951,-6.125496,-8.798024,-6.948235,3.617169,-4.322335,-6.157528,1.397578,-2.223222,1.515759,0.385992,-8.328061,6.623404,2.110412,-9.259853,4.261121,1.949411,2.349285,-8.322083,-8.554472,-1.587108,8.338800,-9.020126,-8.510243,5.049982,3.199145,-0.767342,-6.489169,4.023259,-5.064621,3.313155,-6.157003,5.327971,-7.794049,5.962241,6.285154,4.124142,-7.536190,-1.150095,2.719312,-3.162408,-1.590005,-9.779492,-4.791930,-9.378558,3.500090,-8.148582,-2.503095,0.880285,-4.137007,-8.262808,1.530819,-9.964188,6.136250,-5.108504,-2.451367,3.349677,-5.821376,6.573070,-8.668545,5.981525,2.606413,8.878833,-3.345404,-2.932773,2.582247,-1.403349,5.279546,-1.020480,4.487503,4.607737,8.848526,-5.090996,-2.394924,6.612843,1.814036,4.126916,-2.655311,1.113981,2.144636,2.740597,-8.885398,7.808832,3.201941,-3.012796,8.626555,-3.415020,9.514988,-1.454589,1.777774,-0.529022,-3.223070,4.575103,-9.824948,2.258154,7.595802,-3.163398,6.400694,1.645187,9.979523,4.865746,9.873883,0.990001,2.546095,-7.945765,4.451461,0.645837,-7.001964,6.847964,6.001212,1.757419,0.694712,-9.050150,3.802376,7.519592,-1.044718,9.439933,4.615387,-4.072362,-3.266008,4.019183,2.492838,-7.938157,9.318139,-9.917023,-7.140247,7.615734,4.825619,-9.017025,8.643470,3.628899,9.120687,5.234716,6.536132,5.967711,7.087227,-8.825637,6.778625,-2.533079,-6.077478,-1.353118,-2.796523,-2.607729,3.096734,0.140726,7.431569,-5.683470,2.266038,0.399003,6.778523,9.403077,0.006037,7.693342,-6.170539,8.497907,-5.286452,9.071946,-3.510567,-7.436511,1.905155,-9.008545,-3.534456,6.377329,8.574632,5.222209,3.738845,7.168127,-5.722630,5.043497,-5.808037,1.298402,-0.289675,-8.488659,-9.631005,9.330921,-4.491591,-2.398827,-1.357025,-7.009078,-2.442233,8.014960,-6.151632,-7.175561,0.272355,7.548948,8.614625,7.677906,-1.502092,-6.070006,-5.494719,-7.687639,8.224312,-8.030834,-6.919951,8.808961,-8.548212,-2.272616,6.311123,3.322151,-5.252331,6.826091,8.484815,-0.047548,-1.870981,-1.470017,-0.276538,1.852355,-7.193623,3.625211,-5.560424,4.522059,4.408739,-7.830746,9.469776,-2.548900,-4.815747,4.740663,-4.705763,5.044189,-0.301383,4.058976,-6.109960,-0.939227,-9.027185,5.233349,4.093724,2.458794,-3.986248,9.850098,2.915187,-5.028111,7.022889,9.502651,2.361859,-6.420086,2.944729,-9.144799,-8.309392,-4.811678,-5.428705,-6.138942,-5.156139,5.934560,8.083356,-4.494564,-2.913467,-9.926016,-0.305129,3.566830,9.487963,0.876870,4.471806,-2.684881,2.047761,2.773640,1.333522,4.434174,7.951282,-4.237201,8.726593,-1.061130,1.290315,-4.041795,-6.718435,8.944363,2.191735,-8.530077,-7.678507,9.257579,6.286262,-6.789453,-7.097735,3.767835,-5.892382,-4.247190,-3.341717,0.575017,7.086967,-0.945578,6.338367,4.812666,-6.547837,3.863979,6.432170,-1.954254,2.817758,6.159609,-5.255573,-1.015764,-1.241011,0.391652,4.676063,6.580158,-0.958286,-2.958086,8.674221,-5.247922,-7.493696,7.139352,-6.999875,-0.639082,-6.087951,8.427829,-1.038471,1.298935,-2.536362,-4.873891,9.298417,0.313409,7.388515,8.632825,3.320697,-2.179474,3.176729,6.589283,-6.151726,-0.527922,2.351759,5.112496,5.213096,5.375319,1.254804,6.717667,1.964557,-2.044787,-3.286266,9.325460,-7.715808,9.708728,9.899379,9.163320,8.392509,-4.608488,-6.886711,-8.626765,-7.934512,3.583482,5.074203,-4.491414,9.342068,4.931387,-8.399374,-8.223237,3.646055,6.832377,-9.174906,-4.054741,-1.179434,1.928649,-0.271117,-2.097512,5.515624,8.273776,-4.281540,5.243432,-8.288398,4.436937,5.106308,3.834082,-0.478920,-8.778884,-6.378672,-8.166302,7.083199,3.327177,9.269334,1.439882,9.759080,-6.159671,-9.664064,-5.579040,-3.468939,-1.856375,9.584559,-6.928463,-4.536839,-0.392202,6.292175,0.566143,-9.135928,9.016784,-7.397098,-5.520816,6.927848,5.914095,-8.106801,-5.932012,6.794096,1.415576,3.922882,-7.940848,-5.933441,-9.208908,3.381587,-8.075955,-2.795735,-9.091030,-9.537657,-4.143142,7.431367,-2.029047,1.093565,-6.062804,4.478635,8.106214,-3.410966,-1.471812,0.576271,-3.426921,-9.867336,-2.655251,-7.097888,3.536748,-1.573958,-8.728126,4.632647,7.021926,-6.952423,9.005097,4.944604,-0.942439,9.565373,-5.572726,0.632378,9.698486,-1.886836,-7.949967,-5.135812,9.161573,3.337877,-0.929874,-1.600494,-8.312172,-1.959958,-7.908701,-8.342028,9.475893,7.146319,-0.616614,-2.342970,-9.390914,-4.347846,-3.549029,-6.969223,7.882911,3.435091,-0.700656,6.007169,-4.499939,3.785634,-9.063318,8.460523,2.253138,7.477839,7.507875,7.934632,-2.846623,-7.346710,5.871862,6.721137,2.730016,-9.164911,-6.683631,-2.760713,2.455296,-4.589781,8.882309,2.739752,-9.642728,0.588214,9.983452,-6.732533,-3.396428,-7.757810,0.370740,-3.836275,-1.279516,1.894160,-9.738472,-6.535073,6.162039,5.930389,-9.450158,3.166356,-3.906225,0.365331,7.798073,3.932811,-6.483471,7.666876,5.906942,-0.254526,6.364255,0.670928,7.965142,8.496373,-8.644599,-1.884194,-3.697521,1.626563,-7.561130,-4.192865,-1.131939,1.129012,8.511697,9.145698,-4.164475,-7.104639,1.448560,6.285468,6.012850,7.346100,-7.499297,6.863238,6.352731,2.107288,0.090090,6.459483,5.542923,-2.843559,-1.303657,-6.830077,-0.736626,-7.329784,-3.945799,-6.492286,-4.803503,4.442914,2.312491,8.270616,6.494779,-5.538599,-0.217143,6.731351,-2.661842,-2.416400,0.902486,0.986940,-2.957922,3.898882,-0.509644,-2.162841,7.548953,8.747018,-0.700615,1.100584,7.688008,-9.322575,8.454614,6.489720,-8.667640,-0.057671,-4.403816,2.828209,1.505665,2.077052,-5.592607,7.452621,5.084312,7.801515,9.768281,-4.789659,-4.603862,2.614338,-0.813192,-3.982956,-6.027549,-5.025305,-6.952722,2.372501,-8.052164,6.991612,5.824098,-5.698529,6.373539,-3.524765,-5.106207,7.812476,-3.432411,-2.585726,-2.777171,9.892611,-6.501889,2.393024,5.868690,-8.407570,-8.523613,-8.891658,-3.822199,-2.360828,-9.018352,5.522742,4.131142,-8.662018,5.824257,-9.819732,2.057670,-9.054162,8.382963,-0.294592,8.434195,-1.084698,5.523164,6.092505,6.394776,1.110087,-0.613313,-2.639342,-2.698478,3.230712,-5.250524,4.620539,6.904233,6.177397,0.621666,7.393798,-7.138744,-2.882291,9.215606,-2.634646,-8.690737,-4.674603,-7.080434,-3.114821,4.655426,-9.604428,-4.083305,1.731792,8.766701,-9.097289,6.443590,7.277868,-1.273465,1.431793,6.020135,-0.416636,6.302044,1.682644,-0.896808,-8.149413,3.808029,9.207323,-4.377007,-4.004391,6.149369,0.516534,-5.243597,-1.464110,-8.587840,-9.742056,6.550051,8.796295,-7.891329,-4.888827,2.172717,-1.927935,6.804113,-4.880121,5.913173,-9.025587,8.188552,8.522084,-1.542914,-1.958391,3.807381,1.242729,-4.575767,6.554586,0.224503,7.748764,5.499343,5.885934,7.221655,-8.323731,-7.484486,8.938179,-1.403462,-4.194048,-3.507028,-3.179797,6.516864,1.115269,-4.790850,-3.552274,-8.038119,-4.747262,-2.958434,0.701451,2.978570,-3.429510,-3.569881,-4.452803,-3.554060,8.696713,1.976906,-1.465113,4.158631,-5.425092,-5.715237,3.662646,-6.442990,-1.448825,-1.953891,-7.457977,-8.478337,8.838165,-4.004035,0.625475,-7.609732,-0.246961,-2.595965,3.981858,-7.498812,-2.009797,-7.300526,8.898505,7.744667,3.574316,8.862609,-4.773160,-7.452933,-8.150538,9.754914,6.765331,8.208785,8.429772,-8.950125,2.140918,0.284672,-1.595684,-4.381961,-7.947346,0.054090,9.437788,-6.652267,-2.519907,9.176677,9.107224,1.619031,0.915670,-7.431907,-0.197236,8.183067,6.706437,5.496728,-7.458937,-6.521712,-4.268509,2.228162,-6.150127,2.149709,-0.194090,-3.674040,7.956624,4.602225,-3.312999,0.550436,-6.991149,-8.746703,9.943679,9.850362,6.826542,4.067092,-4.768473,9.017884,-5.205237,3.352876,-9.415427,-4.135223,2.706346,-4.753937,-7.676889,4.571746,-9.676275,-0.187283,8.986068,4.940238,0.178020,-2.780020,6.806373,2.682919,-9.433040,0.232602,-1.604392,-0.692726,4.133681,5.863565,2.752659,-5.856663,-0.010863,5.696545,6.892603,6.342675,9.361213,-0.861618,7.565761,-9.505690,-9.403014,-4.286425,-0.701935,4.040391,5.826079,6.192702,4.276276,-0.994750,-6.673672,3.883404,7.636198,8.701195,6.335375,1.239250,8.258546,-7.917592,9.978200,-8.840693,-1.267890,0.599219,-5.008975,-3.203736,3.857024,4.426121,-7.783915,1.647776,2.655681,3.792484,-2.048930,-0.263567,-4.452202,5.362311,2.112677,8.763520,1.362532,-2.487405,1.566193,5.940962,9.395213,1.001347,-3.271357,3.689752,9.390278,-1.323807,-2.547522,1.906781,6.515315,-3.770014,-6.792496,-9.628346,0.689923,2.375213,6.495404,6.181857,2.992399,4.984400,1.993466,-1.788086,3.992181,-5.790974,6.191095,-0.334569,-3.022656,6.135769,4.218502,4.630873,-6.099433,5.650910,9.024655,8.411040,9.424557,-2.716957,8.120215,9.517767,1.256276,-0.258504,3.421237,-2.367099,-3.142575,-1.209150,3.086789,-0.429514,-2.885484,-0.956665,-2.688904,1.323568,-0.370174,-0.511094,-8.253443,-9.290292,7.623584,-9.244084,1.681654,-2.253945,-6.951834,6.471709,-0.803654,-8.138321,-9.167655,0.198787,-3.546306,-9.601298,-2.318485,-4.862672,7.114435,0.307839,-6.007084,2.910146,-0.016487,2.718248,0.838373,-3.926838,-0.035238,-7.899014,1.297560,7.820278,-3.426870,-7.729868,-2.258031,5.187150,9.716926,-7.806408,-4.968166,-5.947355,4.492100,-6.371341,-5.320983,8.097985,5.528221,6.827562,7.326572,-6.182660,4.370966,-3.727862,1.167291,3.867540,-6.644741,-4.499593,7.912027,0.813154,-9.475557,4.550170,5.594173,7.132930,3.915545,0.653178,4.094377,-4.311167,0.734222,-3.422317,4.987124,7.343072,3.797867,-2.440307,-2.668601,-3.904355,9.769077,-4.929901,-3.081174,6.019441,-8.978660,-7.807924,-9.937190,-2.607322,4.022579,5.742824,-5.404702,4.923685,-6.902596,2.789222,2.455405,-1.991172,8.511934,9.807687,-5.923988,6.901621,-4.031302,4.375674,9.523147,-6.828574,-0.176740,2.130911,-0.455686,2.569568,-4.095578,-6.033215,-3.210193,6.715109,7.765480,3.427637,5.496335,-7.342306,-7.380817,6.321931,-0.430619,-7.902306,8.025190,9.256123,-9.340593,-0.791418,5.191789,1.364138,4.170689,-9.126365,3.867612,6.079116,-4.421159,-2.518889,8.443099,-3.619677,4.787719,-1.433461,-7.388309,4.057990,-1.550452,-8.431951,-3.711867,9.992915,-5.635617,-8.677105,2.879139,-3.297897,4.976996,-4.099480,-2.877087,-4.679596,-4.805026,-7.123604,5.815907,1.534724,-6.313574,0.665890,6.224412,-1.694256,-7.052344,-7.887267,-1.615342,-8.691181,8.790292,-6.517562,5.025770,-7.670411,-9.256184,0.660694,-0.162546,4.814821,-2.662626,7.179689,-7.516999,5.203417,-0.751954,-7.881161,-0.083161,-3.280679,-8.445824,-0.670282,-6.881449,9.488091,2.394731,-3.050804,2.395140,-5.646666,-7.640505,-1.492238,-7.899354,-9.271571,7.919920,7.583264,9.875701,9.426636,8.472476,8.333585,-7.986545,-3.368484,5.541568,5.544934,-5.730610,-9.034528,4.080242,5.671743,-3.263220,-7.949015,0.018299,-0.446556,-7.531995,-5.791474,6.613425,1.108241,-1.183327,2.930464,-9.349081,-9.275772,6.441062,8.735163,9.847762,-4.273226,-9.286184,7.696364,-8.075812,-2.480288,-2.365620,-0.239147,1.512062,5.058312,2.235421,0.692339,-1.381639,6.480544,4.634524,-3.489755,3.501815,-6.446743,-0.779451,1.877168,9.604291,8.351598,-6.104871,2.840538,6.525960,1.596692,-7.836595,-8.225693,9.585874,-3.198719,-6.313786,6.930125,5.816963,-9.685211,-9.206865,-1.461001,6.101120,5.940964,-4.265916,6.092881,3.864407,-1.390565,-2.737336,-8.221325,-1.468844,-1.248871,-8.425936,5.479809,4.821862,4.258466,6.826091,-3.137032,3.473036,2.868708,-5.164869,5.539908,6.678136,2.534573,-1.316365,5.645150,-2.916694,5.528151,-4.771805,-0.595661,-3.060250,5.366229,-7.025335,0.437070,3.362022,1.427515,5.244848,1.509589,-4.506589,-0.231026,6.989329,-7.605765,4.767471,-3.118424,-2.944050,-9.963365,-8.420578,-0.277511,2.277966,-1.090928,-7.934663,-6.863009,-1.542674,4.720457,8.703215,4.769090,1.242602,-5.858964,8.659930,-0.059055,-3.526571,7.296756,-0.931207,9.373765,5.831397,-3.456996,4.082200,3.689142,5.055087,-9.568092,0.119585,1.315778,6.790788,0.731949,-1.361542,-5.020501,-7.715833,1.421647,-8.428328,-0.666331,-5.411338,5.732313,-1.910577,4.363400,3.730883,-8.147294,6.953291,-5.504649,4.745977,2.266066,9.316847,-4.180057,6.236459,2.071454,-3.987631,5.858189,-2.270402,-7.732674,-7.265570,-1.632245,-0.798163,-4.684615,-7.118019,-6.035038,-8.230267,3.166969,-0.540607,-6.686310,1.332178,8.914868,0.260012,-8.894903,2.530059,-6.664721,-6.054707,-0.493116,3.556033,-8.676809,8.818127,-0.116594,9.489955,7.383793,7.953235,5.993110,8.064469,1.342311,-0.746523,4.842873,-5.587215,4.715078,-1.290228,3.620607,-4.112341,-6.787503,5.452871,2.136165,-0.392208,-4.665575,-6.667308,8.509895,-9.094771,0.980848,-2.233261,-7.905480,-7.112946,-0.949228,1.852494,6.806190,8.924807,5.705545,-2.393734,1.534419,-9.374102,-7.440268,-8.416753,-8.262249,-3.127285,7.086507,-7.078379,-0.440437,2.808963,-6.667866,-7.956937,-0.981912,1.727879,-3.869436,-0.841829,-0.107619,8.047855,-8.475977,-2.303034,-9.584448,-7.328757,-3.045630,-6.951815,9.051159,4.176289,-1.230516,3.015459,5.288546,1.188098,-9.271028,-1.962838,-6.243752,-7.228160,0.610658,4.105775,9.316614,0.514711,3.036323,-6.745914,0.329843,-1.334551,-6.590809,-8.859469,-9.533053,4.319619,7.350897,0.403335,-5.276592,-8.109067,7.644725,7.543565,9.045947,-1.007194,-6.694704,-7.944316,-2.486311,-5.735403,-6.173924,-9.307008,-0.624113,-0.973434,7.482153,2.264137,8.406629,0.366139,7.351460,4.242257,8.536608,2.042919,6.959881,6.203246,-7.267379,-4.587428,-2.096951,0.104722,-1.731243,0.196743,-8.788379,2.294892,-1.464695], dtype = "float32")#candidate|9436|(1950,)|const|float32
bop_9437 = relay.less(var_9417.astype('bool'), relay.reshape(const_9436.astype('bool'), relay.shape_of(var_9417))) # shape=(1950,)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_9444 = func_6002_call()
call_9445 = func_6002_call()
output = relay.Tuple([call_9390,call_9414,const_9415,const_9416,bop_9437,call_9444,])
output2 = relay.Tuple([call_9391,call_9418,const_9415,const_9416,bop_9437,call_9445,])
func_9446 = relay.Function([var_9417,], output)
mod['func_9446'] = func_9446
mod = relay.transform.InferType()(mod)
mutated_mod['func_9446'] = func_9446
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9447 = relay.var("var_9447", dtype = "float32", shape = (1950,))#candidate|9447|(1950,)|var|float32
func_9446_call = mutated_mod.get_global_var('func_9446')
call_9448 = func_9446_call(var_9447)
output = call_9448
func_9449 = relay.Function([var_9447], output)
mutated_mod['func_9449'] = func_9449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_9495 = func_8012_call()
call_9496 = func_8012_call()
func_5811_call = mod.get_global_var('func_5811')
func_5815_call = mutated_mod.get_global_var('func_5815')
var_9508 = relay.var("var_9508", dtype = "bool", shape = (117,))#candidate|9508|(117,)|var|bool
call_9507 = relay.TupleGetItem(func_5811_call(relay.reshape(var_9508.astype('bool'), [39, 3]), relay.reshape(call_9495.astype('float32'), []), ), 2)
call_9509 = relay.TupleGetItem(func_5815_call(relay.reshape(var_9508.astype('bool'), [39, 3]), relay.reshape(call_9495.astype('float32'), []), ), 2)
func_8876_call = mod.get_global_var('func_8876')
func_8878_call = mutated_mod.get_global_var('func_8878')
call_9520 = func_8876_call()
call_9521 = func_8876_call()
func_347_call = mod.get_global_var('func_347')
func_351_call = mutated_mod.get_global_var('func_351')
var_9534 = relay.var("var_9534", dtype = "int32", shape = (1792,))#candidate|9534|(1792,)|var|int32
call_9533 = func_347_call(relay.reshape(var_9534.astype('int32'), [8, 14, 16]), relay.reshape(var_9534.astype('int32'), [8, 14, 16]), )
call_9535 = func_347_call(relay.reshape(var_9534.astype('int32'), [8, 14, 16]), relay.reshape(var_9534.astype('int32'), [8, 14, 16]), )
output = relay.Tuple([call_9495,call_9507,var_9508,call_9520,call_9533,var_9534,])
output2 = relay.Tuple([call_9496,call_9509,var_9508,call_9521,call_9535,var_9534,])
func_9544 = relay.Function([var_9508,var_9534,], output)
mod['func_9544'] = func_9544
mod = relay.transform.InferType()(mod)
var_9545 = relay.var("var_9545", dtype = "bool", shape = (117,))#candidate|9545|(117,)|var|bool
var_9546 = relay.var("var_9546", dtype = "int32", shape = (1792,))#candidate|9546|(1792,)|var|int32
output = func_9544(var_9545,var_9546,)
func_9547 = relay.Function([var_9545,var_9546,], output)
mutated_mod['func_9547'] = func_9547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5789_call = mod.get_global_var('func_5789')
func_5791_call = mutated_mod.get_global_var('func_5791')
call_9681 = relay.TupleGetItem(func_5789_call(), 0)
call_9682 = relay.TupleGetItem(func_5791_call(), 0)
func_6040_call = mod.get_global_var('func_6040')
func_6043_call = mutated_mod.get_global_var('func_6043')
var_9697 = relay.var("var_9697", dtype = "int32", shape = (9, 4))#candidate|9697|(9, 4)|var|int32
const_9698 = relay.const([5,5,10,3,6,2,9,4,-7,5,4,-7,-5,-7,4,-7,4,3,6,4,7,-1,-1,10,-1,-6,-10,7,5,4,-4,10,-5,-3,-10,10,-2,-6,5,-3,-2,-1,-3,-8,2,10,5,3,-3,-10,3,10,2,-2,-1,5,-3,-6,7,-7,-7,5,6,-3,-4,10,2,7,-8,-3,2,-10,4,-3,1,-10,-8,-10,10,-3,-4,-6,-5,-10,-1,-1,1,-10,-9,-6,5,-7,-10,9,-8,-6,5,1,-4,2,6,-8,7,1,-3,6,-6,2,10,6,4,-2,-6,9,-4,7,6,-6,-5,9,-8,5,8,8,9,-5,7,-1,10,5,3,-3,-9,-2,-10,2,5,-1,-7,10,4,8,-5,-8,-9,9,7,2,3,-10,-6,10,-2,-6,-2,4,4,-9,10,-3,10,-10,-4,-3,-8,-1,-5,-8,1,-3,-2,9,8,-6,5,7,9,-4,-10,1,8,-2,2,10,-4,6,-2,4,5,8,9,-9,3,-3,-8,2,-4,-3,-6,10,7,-8,5,9,-3,-1,-4,-1,6,3,8,-2,-2,1,-7,10,8,-5,9,2,2,-4,-6,3,-1,-5,-4,3,3,3,-4,-6,-10,-3,4,3,-9,-10,4,-8,-2,3,-2,-1,8,-5,-7,-5,9,-8,-3,6,-9,-8,4,7,-9,-3,7,-3,7,9,8,-3,-2,-7,3,7,-2,5,3,3,2,-2,-9,8,-5,-2,-1,-10,-7,7,2,1,1,1,8,5,-9,1,-3,4,5,3,-2,-8,9,8,-9,5,-5,-3,2,2,-6,1,-3,-9,2,6,-4,2,2,-5,9,1,8,-6,2,4,-5,9,-10,8], dtype = "int32")#candidate|9698|(324,)|const|int32
call_9696 = relay.TupleGetItem(func_6040_call(relay.reshape(var_9697.astype('int32'), [36,]), relay.reshape(const_9698.astype('int32'), [324,]), ), 2)
call_9699 = relay.TupleGetItem(func_6043_call(relay.reshape(var_9697.astype('int32'), [36,]), relay.reshape(const_9698.astype('int32'), [324,]), ), 2)
output = relay.Tuple([call_9681,call_9696,var_9697,const_9698,])
output2 = relay.Tuple([call_9682,call_9699,var_9697,const_9698,])
func_9700 = relay.Function([var_9697,], output)
mod['func_9700'] = func_9700
mod = relay.transform.InferType()(mod)
var_9701 = relay.var("var_9701", dtype = "int32", shape = (9, 4))#candidate|9701|(9, 4)|var|int32
output = func_9700(var_9701)
func_9702 = relay.Function([var_9701], output)
mutated_mod['func_9702'] = func_9702
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5789_call = mod.get_global_var('func_5789')
func_5791_call = mutated_mod.get_global_var('func_5791')
call_9829 = relay.TupleGetItem(func_5789_call(), 0)
call_9830 = relay.TupleGetItem(func_5791_call(), 0)
func_8876_call = mod.get_global_var('func_8876')
func_8878_call = mutated_mod.get_global_var('func_8878')
call_9833 = func_8876_call()
call_9834 = func_8876_call()
func_9264_call = mod.get_global_var('func_9264')
func_9265_call = mutated_mod.get_global_var('func_9265')
call_9839 = relay.TupleGetItem(func_9264_call(), 0)
call_9840 = relay.TupleGetItem(func_9265_call(), 0)
output = relay.Tuple([call_9829,call_9833,call_9839,])
output2 = relay.Tuple([call_9830,call_9834,call_9840,])
func_9849 = relay.Function([], output)
mod['func_9849'] = func_9849
mod = relay.transform.InferType()(mod)
mutated_mod['func_9849'] = func_9849
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9849_call = mutated_mod.get_global_var('func_9849')
call_9850 = func_9849_call()
output = call_9850
func_9851 = relay.Function([], output)
mutated_mod['func_9851'] = func_9851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8621_call = mod.get_global_var('func_8621')
func_8622_call = mutated_mod.get_global_var('func_8622')
call_9882 = func_8621_call()
call_9883 = func_8621_call()
output = call_9882
output2 = call_9883
func_9919 = relay.Function([], output)
mod['func_9919'] = func_9919
mod = relay.transform.InferType()(mod)
output = func_9919()
func_9920 = relay.Function([], output)
mutated_mod['func_9920'] = func_9920
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9994 = relay.var("var_9994", dtype = "float64", shape = (6, 11, 12))#candidate|9994|(6, 11, 12)|var|float64
uop_9995 = relay.cos(var_9994.astype('float64')) # shape=(6, 11, 12)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_10000 = relay.TupleGetItem(func_9073_call(), 0)
call_10001 = relay.TupleGetItem(func_9075_call(), 0)
output = relay.Tuple([uop_9995,call_10000,])
output2 = relay.Tuple([uop_9995,call_10001,])
func_10004 = relay.Function([var_9994,], output)
mod['func_10004'] = func_10004
mod = relay.transform.InferType()(mod)
mutated_mod['func_10004'] = func_10004
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10005 = relay.var("var_10005", dtype = "float64", shape = (6, 11, 12))#candidate|10005|(6, 11, 12)|var|float64
func_10004_call = mutated_mod.get_global_var('func_10004')
call_10006 = func_10004_call(var_10005)
output = call_10006
func_10007 = relay.Function([var_10005], output)
mutated_mod['func_10007'] = func_10007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_10011 = relay.TupleGetItem(func_5400_call(), 3)
call_10012 = relay.TupleGetItem(func_5402_call(), 3)
output = relay.Tuple([call_10011,])
output2 = relay.Tuple([call_10012,])
func_10020 = relay.Function([], output)
mod['func_10020'] = func_10020
mod = relay.transform.InferType()(mod)
mutated_mod['func_10020'] = func_10020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10020_call = mutated_mod.get_global_var('func_10020')
call_10021 = func_10020_call()
output = call_10021
func_10022 = relay.Function([], output)
mutated_mod['func_10022'] = func_10022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_10049 = func_8012_call()
call_10050 = func_8012_call()
output = call_10049
output2 = call_10050
func_10056 = relay.Function([], output)
mod['func_10056'] = func_10056
mod = relay.transform.InferType()(mod)
mutated_mod['func_10056'] = func_10056
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10056_call = mutated_mod.get_global_var('func_10056')
call_10057 = func_10056_call()
output = call_10057
func_10058 = relay.Function([], output)
mutated_mod['func_10058'] = func_10058
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9164_call = mod.get_global_var('func_9164')
func_9166_call = mutated_mod.get_global_var('func_9166')
call_10094 = relay.TupleGetItem(func_9164_call(), 0)
call_10095 = relay.TupleGetItem(func_9166_call(), 0)
uop_10105 = relay.cos(call_10094.astype('float32')) # shape=(5, 9, 11)
uop_10107 = relay.cos(call_10095.astype('float32')) # shape=(5, 9, 11)
func_8938_call = mod.get_global_var('func_8938')
func_8939_call = mutated_mod.get_global_var('func_8939')
call_10112 = func_8938_call()
call_10113 = func_8938_call()
output = relay.Tuple([uop_10105,call_10112,])
output2 = relay.Tuple([uop_10107,call_10113,])
func_10123 = relay.Function([], output)
mod['func_10123'] = func_10123
mod = relay.transform.InferType()(mod)
output = func_10123()
func_10124 = relay.Function([], output)
mutated_mod['func_10124'] = func_10124
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10160 = relay.var("var_10160", dtype = "float32", shape = (4, 11, 8))#candidate|10160|(4, 11, 8)|var|float32
uop_10161 = relay.sqrt(var_10160.astype('float32')) # shape=(4, 11, 8)
func_4255_call = mod.get_global_var('func_4255')
func_4258_call = mutated_mod.get_global_var('func_4258')
const_10165 = relay.const([False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False], dtype = "bool")#candidate|10165|(117,)|const|bool
call_10164 = func_4255_call(relay.reshape(const_10165.astype('bool'), [3, 3, 13]))
call_10166 = func_4255_call(relay.reshape(const_10165.astype('bool'), [3, 3, 13]))
func_7242_call = mod.get_global_var('func_7242')
func_7243_call = mutated_mod.get_global_var('func_7243')
call_10169 = relay.TupleGetItem(func_7242_call(), 0)
call_10170 = relay.TupleGetItem(func_7243_call(), 0)
func_7974_call = mod.get_global_var('func_7974')
func_7977_call = mutated_mod.get_global_var('func_7977')
const_10178 = relay.const([3.028150,0.210590,8.767118,1.062235,3.907541,-8.791536,-1.739312,-3.943536,2.043230,4.118785,5.376921,0.661210,-7.750228,1.723274,-1.349667,0.151811,-0.437623,-4.081587,-8.451190,3.904576,6.891760,9.511002,5.585572,7.961542,-4.157898,-6.337230,4.032249,3.970762,9.626786,1.137312,5.361447,5.762803,2.257043,9.966753,-4.287816,-9.689350,-7.278838,2.715779,8.239668,-5.786964,4.457846,1.183168,-1.253473,-0.780924,7.478970,1.744622,-1.025607,0.903350,2.832044,4.289409,7.887678,7.186325,-8.862705,-4.286162,-5.766482,9.504972,2.609439,-7.527569,6.034592,5.323468,-0.798872,6.070033,-3.680948,-7.957495,4.702136,9.251998,1.806529,-4.487523,4.526610,6.397290,7.104215,3.365067,-7.475031,-9.846386,6.935700,-4.917881,9.588840,-5.693102,-3.639854,8.078907,2.186833,5.128666,0.229763,-5.215216,-8.128617,-1.135151,-6.407952,-3.231562,9.341673,-7.193746,-3.587746,-1.270354,2.347468,5.648891,-8.160186,0.384731,5.200216,-2.830215,6.889517,3.271220,7.635312,0.917113,-1.787640,-0.342807,5.358098,-2.512499,7.647303,8.423511,1.518510,9.223095,0.943400,1.690414,0.975332,0.229527,-7.168533,-7.998137,2.730586,8.974727,3.344926,6.917862,9.132997,-5.264117,5.838065,9.701007,9.842623,-3.382226,7.261023,9.030137,5.872628,2.235987,-0.267600,9.717037,-1.352666,7.018140,-2.724035,-4.267502,-0.830277,1.708683,-9.934028,-8.022648,2.533319,-4.605562,7.296624,7.668135,-9.457853,-7.848113,-7.975709,-7.531686,7.512858,-3.953066,7.151066,6.908641,9.240468,0.940277,4.304556,8.993023,-4.827608,3.950398,-1.698098,-3.928656,-9.732564,6.659038,6.782026,6.343055,5.279526,-0.972571,-3.644602,-6.175414,-7.061304,5.975105,7.339217,-6.786529,-5.839883,5.473806,-9.781356,1.370563,3.734349,5.517554,6.754440,8.148361,-6.506912,2.237134,4.249066,1.593735,1.866350,2.426138,7.045478,-2.477747,6.215220,-0.429651,9.000339,-2.443971,-2.478354,7.156027,-1.024180,-7.279647,8.432119,0.961201,0.371744,-1.195859,4.525073,-5.904441,-9.898830,-6.088124,-8.216687,7.942527,7.268983,-1.300462,-7.732053,8.622100,-9.709734,0.448037,5.935561,-9.806437,5.097085,6.231884,-8.872182,-1.294993,-2.773364,1.310622,3.254506,-3.660123,-2.832830,9.221974,7.467319,-1.228289,-4.868358,3.177722,-9.677384,9.091493,-5.700284,5.637949,-2.401060,0.008044,-1.206005,7.980355,-6.596186,-6.125799,2.693718,3.765635,-6.443993,-7.780861,8.913836,-0.047076,-8.615575,-6.231810,-7.176824,8.202795,9.403118,6.916381,2.584628,5.942323,6.821815,7.234190,5.323009,9.219617,-9.511156,2.306486,8.465025,0.737374,0.797629,-5.919945,0.483456,-1.361652,9.148032,5.590630,-0.149820,-5.277150,-5.347602,-3.532496,-3.020338,-7.072127,-1.967752,-5.788938,2.215570,7.108977,0.902743,3.345081,3.285642,6.834664,7.768480,-9.380294,-6.117423,7.407849,-2.358994,-0.916140,5.890118,3.719388,-6.742867,1.428533,5.859182,-5.605494,0.814398,-4.844218,2.211547,2.860925,-3.698852,6.894769,-6.580319,4.900111,-8.863144,0.222845,-9.135092,1.439173,-6.051280,1.734186,4.346612,3.742214,9.166486,-8.511042,0.701669,9.271542,1.551066,-4.902124,-2.889852,-1.742588,-3.491437,-8.737778,-3.074148,3.382130,8.562215,-0.230948,4.270368,0.741071,8.052214,0.795970,5.656034,-6.938610,0.145696,-4.041065,7.202089,6.745572,-5.433037,-7.681430,1.430042,4.386650,-0.882049,-2.166695,4.163280,-6.679132,9.437250,-9.849657,2.201455,1.577377,1.227618,-0.269769,-2.296484,-2.766975,4.058945,2.731718,1.062312,4.390499,-6.281990,4.348797,7.638372,9.810644,4.018412,4.589441,-3.810431,-6.558470,-7.596382,-0.655509,-8.604941,5.175631,-4.102246,-0.479642,-4.922757,2.735325,5.988711,-9.059176,3.094786,6.537728,6.999873,6.840249,2.811814,-9.987859,-8.369351,-0.760825,4.633289,-7.343714,-9.653036,9.875390,3.145547,-0.711725,9.813653,7.430423,-7.759315,-2.576369,-5.187383,7.493811,8.957748,8.517160,0.370519,-1.482366,-3.154115,-2.326124,8.827438,9.339839,-9.249387,-6.069214,-0.314680,-6.785229,-4.537425,6.661656,-0.966064,8.638026,-8.513453,9.550053,-7.571689,-5.246544,3.525856,-2.257745,4.912739,0.499991,2.944576,3.064931,0.648726,-7.400759,-2.403870,-8.601656], dtype = "float64")#candidate|10178|(420,)|const|float64
var_10179 = relay.var("var_10179", dtype = "float64", shape = (182, 2))#candidate|10179|(182, 2)|var|float64
call_10177 = relay.TupleGetItem(func_7974_call(relay.reshape(const_10178.astype('float64'), [420,]), relay.reshape(var_10179.astype('float64'), [364,]), ), 3)
call_10180 = relay.TupleGetItem(func_7977_call(relay.reshape(const_10178.astype('float64'), [420,]), relay.reshape(var_10179.astype('float64'), [364,]), ), 3)
uop_10186 = relay.atanh(var_10160.astype('float32')) # shape=(4, 11, 8)
func_8621_call = mod.get_global_var('func_8621')
func_8622_call = mutated_mod.get_global_var('func_8622')
call_10190 = func_8621_call()
call_10191 = func_8621_call()
output = relay.Tuple([uop_10161,call_10164,const_10165,call_10169,call_10177,const_10178,var_10179,uop_10186,call_10190,])
output2 = relay.Tuple([uop_10161,call_10166,const_10165,call_10170,call_10180,const_10178,var_10179,uop_10186,call_10191,])
func_10192 = relay.Function([var_10160,var_10179,], output)
mod['func_10192'] = func_10192
mod = relay.transform.InferType()(mod)
mutated_mod['func_10192'] = func_10192
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10192_call = mutated_mod.get_global_var('func_10192')
var_10194 = relay.var("var_10194", dtype = "float32", shape = (4, 11, 8))#candidate|10194|(4, 11, 8)|var|float32
var_10195 = relay.var("var_10195", dtype = "float64", shape = (182, 2))#candidate|10195|(182, 2)|var|float64
call_10193 = func_10192_call(var_10194,var_10195,)
output = call_10193
func_10196 = relay.Function([var_10194,var_10195,], output)
mutated_mod['func_10196'] = func_10196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10123_call = mod.get_global_var('func_10123')
func_10124_call = mutated_mod.get_global_var('func_10124')
call_10198 = relay.TupleGetItem(func_10123_call(), 0)
call_10199 = relay.TupleGetItem(func_10124_call(), 0)
func_9283_call = mod.get_global_var('func_9283')
func_9285_call = mutated_mod.get_global_var('func_9285')
call_10219 = relay.TupleGetItem(func_9283_call(), 2)
call_10220 = relay.TupleGetItem(func_9285_call(), 2)
func_8933_call = mod.get_global_var('func_8933')
func_8935_call = mutated_mod.get_global_var('func_8935')
call_10221 = relay.TupleGetItem(func_8933_call(), 1)
call_10222 = relay.TupleGetItem(func_8935_call(), 1)
output = relay.Tuple([call_10198,call_10219,call_10221,])
output2 = relay.Tuple([call_10199,call_10220,call_10222,])
func_10227 = relay.Function([], output)
mod['func_10227'] = func_10227
mod = relay.transform.InferType()(mod)
mutated_mod['func_10227'] = func_10227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10227_call = mutated_mod.get_global_var('func_10227')
call_10228 = func_10227_call()
output = call_10228
func_10229 = relay.Function([], output)
mutated_mod['func_10229'] = func_10229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6434_call = mod.get_global_var('func_6434')
func_6435_call = mutated_mod.get_global_var('func_6435')
call_10343 = func_6434_call()
call_10344 = func_6434_call()
func_4660_call = mod.get_global_var('func_4660')
func_4663_call = mutated_mod.get_global_var('func_4663')
var_10359 = relay.var("var_10359", dtype = "float32", shape = (98,))#candidate|10359|(98,)|var|float32
call_10358 = func_4660_call(relay.reshape(var_10359.astype('float32'), [7, 2, 7]))
call_10360 = func_4660_call(relay.reshape(var_10359.astype('float32'), [7, 2, 7]))
output = relay.Tuple([call_10343,call_10358,var_10359,])
output2 = relay.Tuple([call_10344,call_10360,var_10359,])
func_10366 = relay.Function([var_10359,], output)
mod['func_10366'] = func_10366
mod = relay.transform.InferType()(mod)
var_10367 = relay.var("var_10367", dtype = "float32", shape = (98,))#candidate|10367|(98,)|var|float32
output = func_10366(var_10367)
func_10368 = relay.Function([var_10367], output)
mutated_mod['func_10368'] = func_10368
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9849_call = mod.get_global_var('func_9849')
func_9851_call = mutated_mod.get_global_var('func_9851')
call_10398 = relay.TupleGetItem(func_9849_call(), 0)
call_10399 = relay.TupleGetItem(func_9851_call(), 0)
const_10402 = relay.const([[[3.599392,6.378536,0.746077,6.204798,1.145774,-5.521003,8.965264],[-2.927862,-5.911857,-0.573537,1.138683,-9.892025,-8.753622,-7.650908],[9.412818,-5.311443,-0.230423,-2.681948,-0.619520,-2.712815,3.008685],[7.697130,6.977602,-3.209865,3.624516,-8.812808,-2.056049,8.087922],[9.197888,-7.134135,0.260216,1.405414,2.903803,4.937266,8.948845],[7.381776,-0.284946,9.661656,-9.142170,5.749782,-9.532711,6.005891],[5.507723,-3.708834,-3.710854,6.509162,2.247270,6.420157,3.647651],[-6.561033,9.266683,8.981958,-5.303586,5.476799,-6.015135,5.618116],[-8.731434,3.563308,7.845621,-7.327749,3.169798,-1.293548,-2.336286],[9.319939,-7.220598,-6.296482,2.478158,-2.715978,-4.665277,9.917307]],[[-0.603281,-1.962346,3.558370,-1.410623,9.221623,-7.168885,6.834214],[9.755502,-2.917548,0.025357,6.469571,-4.121718,7.078917,-7.292691],[8.523298,-2.646098,-1.744524,-9.667564,7.891118,1.389994,-5.207313],[4.975582,-3.629230,3.022408,8.052587,9.225135,2.796494,2.597215],[-2.709820,-8.013152,7.795902,-1.043801,6.183296,4.484065,7.600459],[2.752555,-4.914645,4.309284,-6.166302,-1.084435,5.093902,-4.610767],[9.010234,1.676135,8.882019,8.443245,2.294484,0.428652,9.271633],[6.309283,5.516133,-7.058851,7.677623,-5.345501,-6.910402,2.620814],[-5.162603,-1.906124,5.135144,-3.303215,-7.489402,-6.945763,7.841459],[-6.148570,-8.680631,1.295911,0.272984,-8.849835,-1.765556,-6.258868]],[[6.485895,-7.363458,3.368652,4.439514,4.470733,3.103990,-7.663452],[5.438248,0.439022,-4.948431,5.192906,8.522700,8.713010,1.562721],[-3.374329,-7.779098,9.523687,-1.642209,-5.512568,0.853689,4.294986],[5.022593,-5.237690,3.060044,-3.563597,-5.338269,1.133620,-9.886271],[9.699180,-9.696556,1.275434,9.238525,-4.195104,4.290299,6.944953],[-5.505035,-8.580901,-2.189363,-6.376685,-7.509768,5.326524,-4.823171],[1.333993,7.979597,-9.140977,-7.256223,9.840618,-9.851967,0.301374],[-8.813438,-4.072571,1.701581,-3.869099,-8.491807,5.733846,3.738271],[1.286257,-5.613522,6.200865,8.232426,2.460297,4.262659,1.819638],[-3.600370,-3.229527,0.965891,0.604579,8.035934,9.746441,-2.913059]],[[-5.648507,2.738397,0.705364,-8.241984,-0.040933,-7.027087,-2.282606],[-4.004788,7.438103,-0.833979,1.685292,8.048749,5.422109,-0.511088],[-8.945129,9.519823,-2.765260,-2.473706,-8.907437,-6.219148,-0.340539],[3.277290,9.108366,-0.266743,-6.434496,-3.660676,-2.914914,1.107428],[-0.946313,-9.432438,-5.389351,3.611844,3.058700,2.334792,3.190959],[-2.645710,-3.259523,-2.888962,6.708853,6.988311,7.474978,7.052078],[2.186897,0.232541,-6.219574,-8.104746,-7.332957,0.418051,5.067521],[7.526639,8.079559,-8.716018,8.082622,2.577900,3.564519,1.965837],[-7.729432,-4.904665,5.009314,0.854659,-5.784147,-0.712379,1.735788],[-6.086296,-1.818711,4.397551,3.226431,-8.506715,-9.419257,4.574387]],[[-0.089070,7.950951,7.113543,-7.395243,9.628875,-0.125538,3.593339],[-5.278783,-9.493836,1.789406,2.527716,-7.678685,-6.220466,8.182173],[-2.018071,-3.110356,1.642987,5.008427,6.525038,7.606177,3.967560],[-5.087208,9.994966,-6.418241,7.170695,-2.645283,-3.375208,1.632309],[6.124551,-7.133919,7.546006,-2.719408,-9.277183,9.968827,0.646753],[-8.995816,-0.636669,0.484194,-1.208111,-6.987534,5.621910,-6.019830],[0.777377,-3.662892,-9.560694,6.183035,2.705992,0.153742,9.412424],[-5.267147,3.043034,-0.695957,0.741226,5.248375,1.473729,-7.382246],[0.791230,-1.587974,-9.379469,6.529264,7.551380,6.543834,4.293767],[-2.721086,4.834690,5.986292,-5.132187,7.540940,-6.179016,9.615129]],[[-2.801580,-0.924606,-0.888360,-2.965604,-5.310949,9.404499,-2.151413],[-9.221601,2.339418,8.353601,2.835121,-5.632202,-9.676669,-1.021834],[-3.815340,-2.404154,0.842327,-5.671840,4.671057,-8.180477,7.451263],[-7.924455,-4.854128,1.955306,2.588826,4.874780,1.577242,-2.788586],[0.238696,-8.641445,-5.522393,-2.679257,-6.771467,1.417959,9.360922],[3.992850,-5.692524,5.840815,-0.144040,-1.700527,0.732748,9.775612],[5.928150,-7.662599,-8.830402,4.549239,9.390315,-3.696804,-2.194606],[3.658902,6.397170,-1.770274,-6.821678,9.169622,-7.307450,6.311536],[4.723576,1.641455,-4.097270,9.595424,-5.930463,-4.540300,-9.131749],[3.877498,-5.327890,-8.781469,9.202556,2.355122,-5.876780,8.523686]],[[4.475179,-8.439358,4.058170,2.179204,3.960815,-8.747065,8.678611],[0.998571,5.716410,6.774088,-9.538387,8.977174,-1.554614,4.289979],[5.471166,-9.236159,1.565758,4.148292,-5.321119,4.260216,9.580440],[0.016461,-4.440040,-9.532686,-7.004509,2.199853,-5.351280,-0.037397],[-4.747108,3.811653,-4.276724,-2.966928,3.632436,-8.127940,-0.906222],[4.280077,8.134765,0.877036,-5.305141,9.064626,1.091882,7.042847],[-1.838488,-6.970246,0.992571,-1.270707,2.263408,-5.082699,4.629091],[-2.851054,-6.628601,8.013655,7.319342,0.723368,0.458207,-0.176448],[0.745694,-1.970998,5.235126,-8.252301,-3.812881,0.042717,2.526816],[-1.734598,-3.377722,8.779798,5.400639,0.007439,8.126886,-8.627553]],[[3.144525,9.262386,-5.139108,-3.984547,-4.311404,-3.288093,-2.466973],[9.308763,4.215925,-2.656971,-2.494129,-6.672474,-8.332831,-8.176969],[-0.942644,-2.467423,2.692627,6.345018,0.717498,-1.784259,-8.473937],[4.720777,-1.411891,3.938409,-9.342884,1.725035,6.332274,-4.106881],[1.414356,0.186834,1.394170,-5.446575,5.540966,-2.887961,5.233707],[-7.683255,-4.929345,-5.855611,-2.256634,-0.847989,7.488535,-9.736100],[-6.238993,0.137290,4.613248,1.592578,-1.781808,-5.141373,4.527825],[3.887001,9.920728,0.237291,6.941676,-4.567374,5.491051,-9.948230],[-5.764093,4.411088,-4.447809,0.379147,8.909462,-0.783695,-3.063022],[0.721353,-9.383774,-5.186525,-0.199278,3.606494,-1.108336,-6.201769]],[[-2.627207,-0.772039,3.543725,9.743183,-7.626326,3.907563,-8.549397],[-9.715285,-6.211097,-7.781524,-9.937187,-0.601160,-6.837260,-2.363708],[7.943055,-4.885421,1.047570,1.970031,-9.857666,-9.540870,5.277716],[-9.662527,-5.210528,-6.930527,-9.160020,4.683766,4.054137,-3.954244],[5.659669,-4.686717,0.060641,-1.351206,-1.157632,3.892605,1.425118],[2.827335,4.493405,-3.642860,-0.368385,3.402965,7.091125,7.357287],[-3.111743,5.920141,-8.835388,5.213672,-6.571207,6.333707,4.555607],[-8.464208,-9.386799,6.034136,9.715003,9.952197,-2.361876,7.506474],[5.209182,-8.522793,-2.607866,1.076169,-2.819869,-4.535028,0.668145],[5.855874,-1.628867,0.924714,2.265004,-8.355188,-6.731477,8.146401]],[[-9.570790,-5.777335,3.993875,-8.314572,-1.761563,2.281399,-3.417318],[-3.401114,2.125873,-8.772715,6.934437,-4.629580,-2.338098,1.301871],[6.235764,4.091296,5.218471,6.912319,-4.694775,-3.903776,-0.803761],[3.141225,2.907320,-7.883470,0.641055,-4.714180,-3.294398,-2.038516],[-2.040174,5.737723,-5.570653,8.498190,-3.303963,-8.448033,-6.080006],[-5.340912,-4.283814,4.004174,0.344349,-5.659684,-0.036924,5.445781],[-7.979923,8.310926,8.992765,-4.956428,4.150696,-4.786994,-0.358719],[0.574735,0.046462,3.285407,5.807158,-9.080655,-0.077532,-0.491491],[0.879697,5.666309,9.193602,-6.149142,4.672346,-2.089603,8.611493],[5.601206,4.324049,-8.491157,-5.524724,6.476420,2.171954,-9.212195]],[[-5.035163,-2.734508,-9.668812,6.561056,0.342608,-2.209986,-3.380041],[4.227776,6.253649,-6.833015,6.356083,-5.100397,-9.218929,-3.092743],[6.645059,-9.332616,3.273494,5.083000,-2.482725,7.561319,5.879182],[4.670254,-0.740184,4.383640,5.263369,-3.725753,-2.876138,-2.128507],[-3.105276,-7.167927,7.867852,-4.812632,-5.009381,-3.054949,-2.715814],[-0.434319,3.492289,-8.287809,-5.304878,-6.184376,1.244846,5.946384],[8.441350,-9.547363,-5.852809,9.426064,9.414972,-8.208585,0.797892],[5.341497,-8.431242,0.739614,6.896533,3.041519,4.418368,4.041847],[-6.626009,4.871493,-8.415708,-4.040603,-0.106498,-2.354391,1.723879],[2.776316,9.147812,-1.348435,-2.213355,7.516246,4.076784,-6.019590]],[[-5.337220,8.148007,-4.245162,-6.775246,4.484442,6.990156,-4.597253],[7.716838,-6.243688,2.058266,7.371309,9.972698,0.238063,6.499711],[5.254171,-2.421778,6.896534,-5.970617,-5.971286,-3.126687,2.663927],[7.504289,2.837575,2.905304,-1.130445,5.176524,4.829213,3.086982],[-3.335102,1.293386,-3.754289,3.544858,-7.432355,7.921322,9.471145],[-8.902897,8.546840,-6.130992,-9.285149,-7.265443,-7.645614,1.347650],[-9.179476,7.834628,8.133456,-5.640709,-8.540398,-2.871942,-5.768340],[7.451043,7.625148,-2.375732,0.614431,-8.603887,1.293845,-9.171581],[-7.065494,3.361458,6.968698,3.319732,8.333244,-1.518065,-1.806221],[-2.429460,9.195354,-7.768909,7.942961,3.502976,3.981944,8.025352]],[[9.123512,8.360706,6.568250,-2.583842,4.334401,2.625836,-6.609163],[-0.153984,-6.417230,6.164068,-8.839077,1.730036,-3.258431,-6.745439],[-0.493296,-7.267933,-3.852442,8.584774,-3.061826,-1.404671,-9.749264],[4.056304,7.752851,4.568859,-0.770655,6.957464,-7.371502,5.301416],[-2.958135,-0.436729,4.135907,-6.362723,-6.976191,5.000235,7.809827],[-5.989007,8.972402,-9.602827,3.756137,7.727879,-2.949929,-1.164826],[2.762728,-1.162280,-7.847700,-0.311175,1.777937,1.439345,-9.510588],[0.790056,-8.986050,2.171632,3.627602,-0.500989,4.453312,-3.535332],[4.275903,-7.091308,-1.980649,-5.191385,-7.317341,-2.487543,5.155715],[6.010548,-9.966206,3.188020,4.077991,4.655009,6.204489,4.170214]],[[5.200788,-1.630556,6.268536,0.647615,9.477398,-0.509484,-2.883464],[-3.068034,-0.266985,8.412228,-8.948431,3.567598,-1.106874,-8.036375],[-7.179297,-2.077602,4.766466,-1.146369,-7.119385,5.970456,7.219460],[9.545546,-2.430044,6.470384,7.230670,-1.754087,-7.200785,6.974298],[-3.102452,-3.249637,-6.287490,-5.266201,3.031599,-0.449833,-1.217632],[-1.243470,1.328209,2.878825,0.284185,-3.726780,6.418832,-6.973310],[-7.280520,-1.474618,9.926595,4.862742,-2.553322,7.253110,7.801464],[9.439031,5.364699,4.183900,5.653519,7.924173,-3.345792,2.234314],[-5.751383,2.732808,-1.889687,4.639211,-1.961048,4.088766,-2.021889],[-3.373984,-9.606141,7.157234,6.366238,-8.209268,6.591602,7.652281]],[[8.282323,1.013542,-1.176704,-9.160631,0.280068,-2.421765,-0.455538],[-5.956704,5.418100,-7.908322,-0.639693,4.420835,2.665839,-5.598563],[5.440278,-4.283920,-6.642260,-1.249854,-4.858150,8.414505,-2.028012],[6.972692,5.274006,0.758112,-0.916142,-2.574696,5.089404,3.213065],[8.318966,0.022473,6.970704,2.300336,-3.341577,7.347187,-2.677379],[-1.369834,-6.007586,-8.367905,5.885941,-4.704177,4.779749,-3.737200],[7.649213,4.941280,1.683360,3.454304,-2.141195,-1.685171,5.583867],[7.128834,7.278075,-9.902186,2.319201,7.786518,7.772606,1.264250],[4.033197,6.130582,5.766483,9.912783,-8.731412,1.736646,-7.048077],[8.973564,6.094837,2.374942,-7.383473,4.994209,-1.653506,-0.978498]]], dtype = "float32")#candidate|10402|(15, 10, 7)|const|float32
bop_10403 = relay.subtract(call_10398.astype('uint64'), const_10402.astype('uint64')) # shape=(15, 10, 7)
bop_10406 = relay.subtract(call_10399.astype('uint64'), const_10402.astype('uint64')) # shape=(15, 10, 7)
func_8933_call = mod.get_global_var('func_8933')
func_8935_call = mutated_mod.get_global_var('func_8935')
call_10434 = relay.TupleGetItem(func_8933_call(), 1)
call_10435 = relay.TupleGetItem(func_8935_call(), 1)
uop_10441 = relay.sigmoid(bop_10403.astype('float32')) # shape=(15, 10, 7)
uop_10443 = relay.sigmoid(bop_10406.astype('float32')) # shape=(15, 10, 7)
output = relay.Tuple([call_10434,uop_10441,])
output2 = relay.Tuple([call_10435,uop_10443,])
func_10457 = relay.Function([], output)
mod['func_10457'] = func_10457
mod = relay.transform.InferType()(mod)
mutated_mod['func_10457'] = func_10457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10457_call = mutated_mod.get_global_var('func_10457')
call_10458 = func_10457_call()
output = call_10458
func_10459 = relay.Function([], output)
mutated_mod['func_10459'] = func_10459
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10516 = relay.var("var_10516", dtype = "float64", shape = (10, 4, 10))#candidate|10516|(10, 4, 10)|var|float64
uop_10517 = relay.atan(var_10516.astype('float64')) # shape=(10, 4, 10)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_10527 = relay.TupleGetItem(func_6775_call(), 3)
call_10528 = relay.TupleGetItem(func_6777_call(), 3)
uop_10540 = relay.acosh(uop_10517.astype('float32')) # shape=(10, 4, 10)
output = relay.Tuple([call_10527,uop_10540,])
output2 = relay.Tuple([call_10528,uop_10540,])
func_10542 = relay.Function([var_10516,], output)
mod['func_10542'] = func_10542
mod = relay.transform.InferType()(mod)
mutated_mod['func_10542'] = func_10542
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10543 = relay.var("var_10543", dtype = "float64", shape = (10, 4, 10))#candidate|10543|(10, 4, 10)|var|float64
func_10542_call = mutated_mod.get_global_var('func_10542')
call_10544 = func_10542_call(var_10543)
output = call_10544
func_10545 = relay.Function([var_10543], output)
mutated_mod['func_10545'] = func_10545
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7499_call = mod.get_global_var('func_7499')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_10555 = relay.TupleGetItem(func_7499_call(), 1)
call_10556 = relay.TupleGetItem(func_7500_call(), 1)
output = call_10555
output2 = call_10556
func_10559 = relay.Function([], output)
mod['func_10559'] = func_10559
mod = relay.transform.InferType()(mod)
mutated_mod['func_10559'] = func_10559
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10559_call = mutated_mod.get_global_var('func_10559')
call_10560 = func_10559_call()
output = call_10560
func_10561 = relay.Function([], output)
mutated_mod['func_10561'] = func_10561
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10020_call = mod.get_global_var('func_10020')
func_10022_call = mutated_mod.get_global_var('func_10022')
call_10577 = relay.TupleGetItem(func_10020_call(), 0)
call_10578 = relay.TupleGetItem(func_10022_call(), 0)
var_10579 = relay.var("var_10579", dtype = "bool", shape = (8, 504, 12))#candidate|10579|(8, 504, 12)|var|bool
bop_10580 = relay.logical_and(call_10577.astype('bool'), relay.reshape(var_10579.astype('bool'), relay.shape_of(call_10577))) # shape=(8, 504, 12)
bop_10583 = relay.logical_and(call_10578.astype('bool'), relay.reshape(var_10579.astype('bool'), relay.shape_of(call_10578))) # shape=(8, 504, 12)
output = bop_10580
output2 = bop_10583
func_10591 = relay.Function([var_10579,], output)
mod['func_10591'] = func_10591
mod = relay.transform.InferType()(mod)
var_10592 = relay.var("var_10592", dtype = "bool", shape = (8, 504, 12))#candidate|10592|(8, 504, 12)|var|bool
output = func_10591(var_10592)
func_10593 = relay.Function([var_10592], output)
mutated_mod['func_10593'] = func_10593
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8733_call = mod.get_global_var('func_8733')
func_8734_call = mutated_mod.get_global_var('func_8734')
call_10606 = relay.TupleGetItem(func_8733_call(), 0)
call_10607 = relay.TupleGetItem(func_8734_call(), 0)
output = call_10606
output2 = call_10607
func_10623 = relay.Function([], output)
mod['func_10623'] = func_10623
mod = relay.transform.InferType()(mod)
mutated_mod['func_10623'] = func_10623
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10623_call = mutated_mod.get_global_var('func_10623')
call_10624 = func_10623_call()
output = call_10624
func_10625 = relay.Function([], output)
mutated_mod['func_10625'] = func_10625
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10630 = relay.var("var_10630", dtype = "float32", shape = (1, 6, 10))#candidate|10630|(1, 6, 10)|var|float32
uop_10631 = relay.sqrt(var_10630.astype('float32')) # shape=(1, 6, 10)
output = relay.Tuple([uop_10631,])
output2 = relay.Tuple([uop_10631,])
func_10633 = relay.Function([var_10630,], output)
mod['func_10633'] = func_10633
mod = relay.transform.InferType()(mod)
mutated_mod['func_10633'] = func_10633
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10634 = relay.var("var_10634", dtype = "float32", shape = (1, 6, 10))#candidate|10634|(1, 6, 10)|var|float32
func_10633_call = mutated_mod.get_global_var('func_10633')
call_10635 = func_10633_call(var_10634)
output = call_10635
func_10636 = relay.Function([var_10634], output)
mutated_mod['func_10636'] = func_10636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_10638 = relay.TupleGetItem(func_5551_call(), 0)
call_10639 = relay.TupleGetItem(func_5553_call(), 0)
func_9148_call = mod.get_global_var('func_9148')
func_9150_call = mutated_mod.get_global_var('func_9150')
call_10675 = relay.TupleGetItem(func_9148_call(), 0)
call_10676 = relay.TupleGetItem(func_9150_call(), 0)
output = relay.Tuple([call_10638,call_10675,])
output2 = relay.Tuple([call_10639,call_10676,])
func_10685 = relay.Function([], output)
mod['func_10685'] = func_10685
mod = relay.transform.InferType()(mod)
output = func_10685()
func_10686 = relay.Function([], output)
mutated_mod['func_10686'] = func_10686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_10721 = relay.TupleGetItem(func_5551_call(), 0)
call_10722 = relay.TupleGetItem(func_5553_call(), 0)
func_7585_call = mod.get_global_var('func_7585')
func_7592_call = mutated_mod.get_global_var('func_7592')
const_10759 = relay.const([3.895203,-6.321745,-5.193423,0.274909,-7.683323,-6.592779,-2.217926,0.793179,8.193236,4.601122,-5.819837,-1.816519,5.009371,-2.743763,9.309230,-9.313163,-9.408317,-1.022807,-6.231257,0.652267,-5.466123,-2.449566,0.102783,-9.097796,-2.929646,-2.776365,6.413227,7.625577,-5.621863,-8.071652,-2.911068,9.296423,9.588070,0.877629,5.968390,-2.604593,-9.662108,-7.364649,0.627765,3.204370,-8.508029,-0.219967,-6.480861,6.645217,9.064767,-3.739245,-4.900400,-3.700112,0.183682,9.237636,-6.573351,-6.440347,2.690171,-8.407548,9.461112,-3.333560,5.306324,-8.299376,-7.890481,0.252592,3.254528,1.708983,5.034279,7.720933,4.586929,0.123828,9.258820,5.762700,-7.455319,9.206865,4.041106,9.440888,-9.024928,-2.361421,7.820023,-4.589694,5.695575,1.787645,5.986751,-7.759226,9.083015,5.645486,9.375569,8.650622,-2.717109,-3.315949,-8.778509,3.505669,5.759480,-9.497457,9.692181,2.769446,-2.943676,8.713293,2.287990,6.409873,6.481674,5.539836,8.960440,-5.252977,3.037341,2.099434,-3.101455,-1.549160,-4.589039,0.979146,7.033642,-5.114593,7.608404,-0.922630,1.255192,7.375475,-3.020135,-0.224242,-4.488667,5.227794,6.565278,0.083853,7.367377,6.012639,-1.392998,0.419263,6.210849,-9.465602,1.015192,5.033039,-3.194225,2.736147,-2.845792,-6.241301,-1.229560,-9.140072,-7.109851,-6.827123,-0.018568,9.159543,-2.057262,-0.769420,-3.159702,-5.957341,6.658007,3.161405,-8.242134,-2.721864,-4.132093,7.272219,8.455067,-4.062370,-1.670725,1.904765,-5.779471,5.420949,-5.623460,-6.379913,-9.161250,-4.223782,-8.779261,3.866318,1.847641,9.052715,-6.355957,-1.669394,9.979581,9.741659,1.788266,-3.469508,0.157601,-5.557011,9.767426,3.588272,1.157612,-9.104189,8.327154,3.716494,0.082938,-3.310616,6.526252,4.493689,0.575428,-3.256605,-1.498799,-5.674457,8.063516,8.253713,0.733312,-6.906963,-6.309901,-1.095574,8.005235,-3.395057,3.862554,-9.666628,-5.948390,3.290854,6.651256,-2.940078,-0.268082,1.184974,-0.443679,-8.622758,4.608767,-4.713884,2.476425,4.384311,-6.103552,-5.079094,-9.258129,2.734462,-5.803942,-3.846212,-7.113056,7.776609,2.065601,-8.441126,3.375751,3.269637,-9.674141,8.686217,0.348313,-8.017572,-9.725198,6.115361,5.571982,7.326768,2.069377,1.716779,5.586912,-3.197030,-5.242531,-9.645177,3.116271,-3.187968,0.386674,-7.571675,0.114747,8.534986,3.328192,-9.449650,8.113990,-2.592153,-4.814513,-5.828800,8.733731,-8.149853,-2.255509,2.019460,9.143677,1.166128,2.815385,2.454160,-3.301741,6.941541,6.596797,-5.300451,6.402977,3.831732,3.077815,6.087415,-5.837474,-7.862430,-5.140863,-8.491621,9.301453,3.576690,3.797917,0.745262,2.823964,5.104753,9.049177,5.917623,9.351309,-3.151043,-9.389950,6.426466,4.570735,5.004602,7.595896,0.012188,8.802663,-6.123786,5.098835,-0.624602,-6.775545,2.029205,-6.906596,-8.598178,8.711830,-6.956203,8.937426,-7.762153,1.841517,-8.764893,-8.758095,6.655876,-4.090132,-1.767228,-2.145102,-3.894082,7.287924,-1.995844,-2.780741,7.445110,7.868270,-1.669323,1.080635,5.807391,-7.119856,7.299098,-1.780674,0.712451,-4.461762,-8.878254,-8.537034,4.175818,3.511296,7.501913,6.449607,1.256211,-7.369564,4.965789,5.985918,-8.074116,-8.239676,-1.665119,3.607905,-6.106862,3.833848,-6.961116,6.966627,9.067078,0.326011,6.267922,5.515082,0.781215,-4.701859,5.256730,9.931535,9.373226,-8.154937,-2.908313,0.016376,9.877608,-6.115266,1.355132,-8.898921,-0.517133,8.521113,-5.615932,-6.673894,7.558299,-6.821761,-3.229190,-7.341110,3.555230,6.670744,-8.383435,-6.967930,-2.067006,5.912430,5.870418,-3.940776,4.040745,0.161685,0.218273,3.489365,-4.469533,1.565134,-1.793171,-4.895158,-7.433844,0.310063,1.344250,4.418481,-9.200155,7.967807,-7.411107,6.111036,4.674766,9.109029,7.695007,6.550025,-4.169488,-4.630365,3.510382,-5.760203,6.886180,-3.386598,-4.384709,-3.864328,1.082502,-8.785604,0.848567,3.725669,-8.367669,4.693015,-4.333778,1.306091,-1.917092,3.020695,-7.472020,8.041887,1.533654,-3.546686,5.987595,5.749523,-1.727339,-5.135963,8.436410,2.418037,-4.361737,7.640709,8.895006,1.722479,5.224812,7.917015,1.306188,1.015777,1.701939,-5.652400,-3.818111], dtype = "float64")#candidate|10759|(420,)|const|float64
const_10760 = relay.const([2,10,-4,-8,-7,5,7,-8,-7,-10,-1,6,-10,3,3,-5,-4,4,9,-7,7,4,3,8,5,6,3,-3,-8,-3,2,8,5,4,-4,-4], dtype = "int32")#candidate|10760|(36,)|const|int32
var_10761 = relay.var("var_10761", dtype = "int32", shape = (1792,))#candidate|10761|(1792,)|var|int32
var_10762 = relay.var("var_10762", dtype = "int64", shape = (2002,))#candidate|10762|(2002,)|var|int64
var_10763 = relay.var("var_10763", dtype = "float32", shape = (182,))#candidate|10763|(182,)|var|float32
var_10764 = relay.var("var_10764", dtype = "bool", shape = (117,))#candidate|10764|(117,)|var|bool
call_10758 = relay.TupleGetItem(func_7585_call(relay.reshape(const_10759.astype('float64'), [420,]), relay.reshape(const_10760.astype('int32'), [36,]), relay.reshape(var_10761.astype('int32'), [16, 112]), relay.reshape(var_10762.astype('int64'), [2002,]), relay.reshape(var_10763.astype('float32'), [182,]), relay.reshape(var_10764.astype('bool'), [117,]), ), 0)
call_10765 = relay.TupleGetItem(func_7592_call(relay.reshape(const_10759.astype('float64'), [420,]), relay.reshape(const_10760.astype('int32'), [36,]), relay.reshape(var_10761.astype('int32'), [16, 112]), relay.reshape(var_10762.astype('int64'), [2002,]), relay.reshape(var_10763.astype('float32'), [182,]), relay.reshape(var_10764.astype('bool'), [117,]), ), 0)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_10782 = relay.TupleGetItem(func_5400_call(), 1)
call_10783 = relay.TupleGetItem(func_5402_call(), 1)
output = relay.Tuple([call_10721,call_10758,const_10759,const_10760,var_10761,var_10762,var_10763,var_10764,call_10782,])
output2 = relay.Tuple([call_10722,call_10765,const_10759,const_10760,var_10761,var_10762,var_10763,var_10764,call_10783,])
func_10798 = relay.Function([var_10761,var_10762,var_10763,var_10764,], output)
mod['func_10798'] = func_10798
mod = relay.transform.InferType()(mod)
mutated_mod['func_10798'] = func_10798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10798_call = mutated_mod.get_global_var('func_10798')
var_10800 = relay.var("var_10800", dtype = "int32", shape = (1792,))#candidate|10800|(1792,)|var|int32
var_10801 = relay.var("var_10801", dtype = "int64", shape = (2002,))#candidate|10801|(2002,)|var|int64
var_10802 = relay.var("var_10802", dtype = "float32", shape = (182,))#candidate|10802|(182,)|var|float32
var_10803 = relay.var("var_10803", dtype = "bool", shape = (117,))#candidate|10803|(117,)|var|bool
call_10799 = func_10798_call(var_10800,var_10801,var_10802,var_10803,)
output = call_10799
func_10804 = relay.Function([var_10800,var_10801,var_10802,var_10803,], output)
mutated_mod['func_10804'] = func_10804
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_10897 = relay.TupleGetItem(func_6374_call(), 0)
call_10898 = relay.TupleGetItem(func_6376_call(), 0)
output = relay.Tuple([call_10897,])
output2 = relay.Tuple([call_10898,])
func_10922 = relay.Function([], output)
mod['func_10922'] = func_10922
mod = relay.transform.InferType()(mod)
mutated_mod['func_10922'] = func_10922
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10922_call = mutated_mod.get_global_var('func_10922')
call_10923 = func_10922_call()
output = call_10923
func_10924 = relay.Function([], output)
mutated_mod['func_10924'] = func_10924
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_11001 = func_6080_call()
call_11002 = func_6080_call()
output = call_11001
output2 = call_11002
func_11035 = relay.Function([], output)
mod['func_11035'] = func_11035
mod = relay.transform.InferType()(mod)
output = func_11035()
func_11036 = relay.Function([], output)
mutated_mod['func_11036'] = func_11036
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mod.get_global_var('func_8055')
func_8057_call = mutated_mod.get_global_var('func_8057')
call_11084 = relay.TupleGetItem(func_8055_call(), 0)
call_11085 = relay.TupleGetItem(func_8057_call(), 0)
output = call_11084
output2 = call_11085
func_11090 = relay.Function([], output)
mod['func_11090'] = func_11090
mod = relay.transform.InferType()(mod)
output = func_11090()
func_11091 = relay.Function([], output)
mutated_mod['func_11091'] = func_11091
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11110 = relay.var("var_11110", dtype = "uint16", shape = (10, 9, 5))#candidate|11110|(10, 9, 5)|var|uint16
const_11111 = relay.const([[[-1,-4,7,4,-8],[9,-2,4,-5,6],[-2,8,-1,6,4],[-6,4,-9,-9,2],[-8,3,7,3,-10],[6,2,-9,4,5],[-1,6,-2,-6,-10],[2,3,-9,5,-4],[1,-6,-6,5,4]],[[2,8,1,-3,-3],[-7,-4,-10,-1,-4],[-9,-7,-9,-2,6],[2,-1,6,-4,-1],[1,-2,6,-7,-9],[4,-10,-5,-5,-3],[2,9,-10,9,1],[1,-6,8,-8,-1],[-9,-7,7,8,-8]],[[2,-10,5,-5,4],[-2,1,-1,-4,-5],[-8,-1,3,-8,1],[-6,5,-6,-8,5],[-9,10,-7,-1,1],[-7,10,5,-5,8],[6,10,2,2,-7],[1,-3,7,1,2],[-4,3,6,-9,1]],[[-6,-1,-8,2,-2],[-8,4,5,3,7],[-10,-4,-5,10,-1],[3,-8,6,9,10],[7,-6,9,-2,1],[-2,2,-3,8,3],[6,9,-2,2,4],[-5,-9,-2,4,5],[-7,6,2,-8,-7]],[[-10,-9,-7,-7,-4],[-2,-10,10,3,7],[-9,2,-4,9,5],[-5,6,-7,4,-3],[-2,7,-8,-5,-1],[9,-7,-9,7,2],[-3,8,-8,-4,8],[-3,4,2,7,5],[10,-9,-4,5,-4]],[[3,4,9,-8,-6],[-10,-7,-9,10,-6],[3,8,-4,-8,-6],[-8,2,-2,-3,3],[5,8,-10,2,-2],[-7,-6,-7,-9,-9],[-9,-4,6,9,-6],[-9,-8,4,-6,9],[5,-5,3,1,-6]],[[7,-7,4,8,-3],[8,7,10,5,8],[-6,-10,-3,-2,4],[-7,3,1,7,5],[-4,-3,10,-4,9],[-6,4,7,-8,-6],[-9,3,-4,1,4],[1,-10,2,-8,-4],[-8,-4,-8,-4,2]],[[-9,10,2,6,5],[-1,1,1,-3,8],[7,-8,10,2,4],[-1,-4,5,-7,1],[-3,2,-4,-7,-1],[-4,3,-9,-8,7],[4,5,1,4,-2],[-3,5,-1,8,6],[3,8,-2,8,-10]],[[3,5,2,1,5],[8,10,-3,4,9],[3,-2,9,-9,-7],[4,-1,-10,-4,-8],[4,-8,9,5,5],[7,-7,8,-4,-5],[-6,-1,-7,-1,-3],[1,-4,2,-10,-9],[3,2,5,-6,-7]],[[-8,-9,9,1,6],[-8,1,-5,7,2],[-10,-2,-2,2,-5],[-8,-1,3,2,1],[-8,-6,1,2,7],[-4,8,1,4,-10],[2,6,-7,-3,-3],[-1,-3,9,-8,-4],[6,4,-5,-4,6]]], dtype = "uint16")#candidate|11111|(10, 9, 5)|const|uint16
bop_11112 = relay.bitwise_or(var_11110.astype('uint16'), relay.reshape(const_11111.astype('uint16'), relay.shape_of(var_11110))) # shape=(10, 9, 5)
uop_11118 = relay.cos(const_11111.astype('float32')) # shape=(10, 9, 5)
func_5492_call = mod.get_global_var('func_5492')
func_5498_call = mutated_mod.get_global_var('func_5498')
const_11122 = relay.const([8.964606,-9.901117,-3.374161,-6.928637,1.837370,8.348175,2.732264,8.157245,5.361929,-2.811117,3.116569,6.892513,-5.570565,-5.751517,-4.690171,8.618257,-0.775092,4.114556,0.175668,-0.899567,-3.293503,-1.232232,8.346366,3.079478,-0.817275,8.539742,-3.621310,9.221617,6.868743,3.780414,-2.107484,6.154011,-9.719200,-6.308688,-2.898604,3.206385,-0.861735,8.542021,6.112899,-1.865593,-1.697065,7.201947,-6.957330,-8.925474,5.005579,8.033289,-7.601001,-8.856923,-3.541276,-2.991840,0.686831,0.860314,7.418599,6.294731,9.359534,3.882878,-9.387791,4.168580,8.127394,-6.692051,1.779854,1.920976,-1.918013,-9.676806,-6.735139,8.757161,-8.497991,2.105601,1.953145,-0.748940,-0.733796,5.971333,3.669618,1.304077,-9.228430,9.118764,9.790171,4.274682,-8.987709,-6.459750,-4.915586,-7.005410,-9.511658,-7.140976,5.143420,9.177765,-6.318661,-0.355232,2.805384,0.141843,1.304821,1.538747,3.581574,-1.694196,-1.023031,-0.200720,-4.266396,-3.015049,-5.158504,4.210818,5.253646,6.953483,5.381242,6.466289,1.336894,-9.837982,2.863027,0.357346,-1.901153,-7.913101,5.287220,9.554039,-7.416502,-3.852216,-2.107719,-0.821607,-0.529091,-2.516993,3.965133,-3.508216,-4.737656,5.735472,-2.133565,-4.066503,-0.005550,-1.943819,1.430025,8.808281,3.818680,-6.489409,6.004980,1.960899,-7.448315,7.582921,-2.590389,-4.288184,-3.950618,-6.147631,-2.987630,8.465048,-2.705576,-9.460801,9.242311,5.241216,-0.364323,6.548629,-8.162364,9.193969,-1.995792,-9.860699,8.923614,2.543454,-6.598065,-4.558173,-4.465463,1.115730,6.400034,-8.683646,6.340457,9.096259,7.050351,-4.487309,-6.463702,-2.838481,-9.513903,6.553866,9.388319,-9.938145,-5.678409,-7.278495,-3.057716,7.692389,-6.253159,0.673620,1.763602,0.071309,7.377279,-4.026638,0.471521,-1.586225,4.145476,1.241179,-0.604648,-9.040053,4.006577,5.358957,-9.799098,8.721067,-3.167191,1.646900,-0.950621,-9.180623,-0.408143,7.040324,9.191780,9.116133,5.626407,0.172663,-1.531434,-4.034500,-8.666320,-5.883085,5.584587,3.996037,-5.390234,8.118028,9.052305,-2.394903,4.260353,-0.303207,9.140181,2.201342,-0.362867,-3.518929,1.169217,-4.455362,-6.671236,-8.727111,5.117645,3.322169,-5.816029,-8.270417,-1.448965,5.187479,-5.911569,-5.381965,-9.071019,-5.404295,-9.916034,3.037988,3.357285,7.375798,-9.092607,2.807774,-2.702454,6.525189,-5.214864,-7.039354,-0.195727,-9.407485,0.859102,-2.764860,-9.562174,8.751770,3.826559,-0.700793,-5.041474,-3.917143,-4.208272,-1.098967,-2.127874,0.043325,9.950254,9.826335,-6.923823,-0.454788,-1.947442,4.657312,9.166814,1.406195,8.128359,-2.734203,-9.372252,4.854319,-1.296759,1.444734,6.236130,8.157354,-7.823794,3.226813,-9.157721,2.986135,-8.524720,-4.708536,8.126500,1.250248,9.985765,-1.809551,-9.972044,-8.087198,-7.873336,-0.427823,1.141934,-2.808329,-6.243282,-8.101149,-2.156589,-7.621408,-4.332430,-9.964379,-0.117590,-9.392834,4.275123,3.488260,-2.582374,6.390785,4.840410,6.488537,0.623401,2.709368,6.604666,6.838708,7.581640,-7.372789,-6.630247,6.067051,-0.754567,-5.174548,-0.922020,-4.026823,-7.465165,6.237492,2.259460,-9.734717,0.535598,-4.564278,0.616968,-1.541259,0.563722,-1.329681,0.742091,5.417144,8.455729,-5.011358,9.430307,2.532865,-9.557460,-2.727308,0.738549,-3.870870,-0.233927,1.842987,-1.579638,-7.562736,-2.119626,5.100089,-1.119767,-9.703814,8.817747,8.012260,2.257304,-8.042816,-4.911205,0.141347,7.637542,-1.176130,-9.968698,2.900325,5.073089,5.116262,-9.535301,3.357640,4.588621,-7.114565,-6.765852,6.473123,-7.045185,7.551645,-6.578065,-9.810581,2.399033,7.962044,-6.606891,-9.243568,-9.444704,-2.205574,9.742702,1.516434,4.002361,5.795367,-5.969583,0.993000,-0.760104,7.811737,6.810616,-0.194620,-2.625367,-7.749212,-1.232882,-6.353956,-5.275782,7.145068,-2.232894,-8.742635,-2.456050,-4.319183,4.036043,-9.939396,-5.053168,-4.620863,3.844471,-9.305339,1.339833,8.511906,-1.719751,-2.068466,-1.432696,-5.196933,9.886201,-8.943865,-0.378816,-6.741044,-2.509123,6.064248,-1.391641,-6.546739,-0.108186,7.480656,8.677984,3.276709,-9.836827,1.873792,2.870479,1.883071,-9.905040,-4.410313,-9.474115,-9.006603,8.740886,-3.715231], dtype = "float64")#candidate|11122|(420,)|const|float64
var_11123 = relay.var("var_11123", dtype = "int32", shape = (36,))#candidate|11123|(36,)|var|int32
const_11124 = relay.const([-0.572052,-4.906692,8.882529,3.112973,3.792031,0.597614,-9.176559,-8.379067,-6.734059,3.555423,-9.345400,7.567445,-3.480010,8.430422,1.834737,-6.014020,4.747084,-0.152763,-2.130947,9.161247,7.537055,-6.465884,6.633193,-7.367723,9.432664,1.668557,8.489664,-3.611891,-7.075253,-8.109368,2.683860,9.123169,8.047289,-6.498998,3.368447,-9.611066,-6.354554,-9.167034,7.788033,-5.317521,-9.944729,1.606984,-5.669167,0.886104,4.109493,5.298590,7.649682,-8.842488,-7.883610,-5.042656,-8.467442,-9.026364,6.679581,-2.095386,-3.730901,-0.664742,6.619142,-0.314715,8.150972,-5.027235,1.029298,-9.697187,5.804375,-5.105035,5.273064,7.745889,4.688845,-8.362041,8.419569,5.141891,2.080493,-3.817426,3.010328,8.659617,0.589517,-7.826301,2.812912,6.141972,9.274918,-1.209672,-4.074719,-3.352615,-4.329570,0.425437,-0.078435,0.974350,-7.813516,-5.271391,-1.604155,-7.514245,4.830963,6.119316,2.520206,9.153426,-9.136728,1.234118,-1.118266,-7.197711,7.788909,-9.761550,-9.084748,4.487943,0.447454,6.837137,9.677798,1.431966,-1.449040,1.160187,0.707720,-5.701565,1.377865,8.383253,8.907826,-2.077288,0.367147,-3.512860,-3.613879,-8.649871,5.238427,1.594084,3.976954,-0.025889,3.654413,-6.356231,-6.442060,-4.352986,-4.350357,4.604199,7.196956,-0.654940,-9.357472,1.404002,6.357995,1.166899,1.703544,6.615911,0.004413,-8.608765,-6.860456,-1.105095,9.248107,-3.879505,-9.683807,8.086904,6.173347,-0.237718,0.871118,-1.917531,7.082666,5.086826,-0.052847,9.983880,-6.838498,9.040086,-6.081479,-3.978089,-1.023913,-4.032352,-7.278545,4.831854,7.872577,-2.805652,9.113053,0.559412,-8.732984,5.711107,-3.829707,-3.821578,-0.626471,9.477492,4.278067,-1.969962,-9.742824,-9.027063,-4.382379,-7.780238,6.683732,-8.011740,5.407505,9.223017,0.006325,-5.909679,-6.403766,-8.940523,-2.471385,6.947667,2.841389,-2.904955,-6.857966,0.787839,-5.701206,4.631611,-6.210228,-8.101457,5.942806,4.354550,-2.877174,-4.335749,-2.817113,6.791111,-7.048104,8.657449,-9.661157,2.929771,-1.319195,6.907124,-1.222036,8.186954,9.538601,-7.530949,4.561590,0.733514,-6.430933,-5.762331,-6.030820,4.461278,5.506807,4.509652,-4.487417,-7.190970,1.738150,0.206386,-1.428293,-8.256926,-1.603505,9.013565,-9.840094,9.109712,-6.231578,2.903713,6.156366,-3.998558,2.408940,-7.028935,-2.977134,6.122260,4.653774,-7.574283,8.529196,3.680983,8.307434,8.150685,6.145842,-7.270664,5.059670,-3.343130,4.100901,2.118135,-1.901285,-7.610707,-6.872105,-4.395014,5.833795,-0.436858,3.282938,-6.895733,-9.508988,-3.245492,1.726940,6.661331,5.856901,9.620850,-3.131345,0.201637,8.863825,-2.042622,5.519819,2.656224,8.622005,9.722926,2.385883,8.296294,-9.189783,8.830796,8.811819,-9.131950,-3.066378,3.969188,-1.360849,-4.023885,-0.735770,1.141195,5.887821,-7.933188,-6.036282,-7.689262,-8.429909,9.896749,8.188380,-2.223746,-0.828090,6.833107,-2.684550,0.045708,-2.283258,-0.143669,-7.619839,-9.169517,-4.222348,-5.655727,7.355146,-0.376916,0.981529,-8.450070,-4.766803,8.737207,2.202301,-3.190402,9.711435,-3.323763,3.100725,-0.350991,-8.834783,1.007593,-7.988875,-9.052354,-1.202695,4.820328,-7.386991,6.817110,-6.952957,7.684355,7.840772,1.937312,-3.207466,-7.209058,1.526061,9.374845,-2.110637,-2.593316,0.233368,-2.070655,-9.862018,0.588719,9.733933,9.159835,6.797995,4.744445,-4.238854,6.283307,-1.449435,-8.573961,-0.180055,9.557882,1.505957,4.485141,-9.335708,-5.564874,6.171629,-3.153748,-6.255992,-9.277764,-9.904433,7.600144,9.744663,4.434144,-5.958169,0.091585,-2.549257,3.611442,-5.152115,-2.039554,-0.581834,6.727921], dtype = "float64")#candidate|11124|(364,)|const|float64
var_11125 = relay.var("var_11125", dtype = "int32", shape = (1792,))#candidate|11125|(1792,)|var|int32
var_11126 = relay.var("var_11126", dtype = "float32", shape = (1950, 1))#candidate|11126|(1950, 1)|var|float32
call_11121 = relay.TupleGetItem(func_5492_call(relay.reshape(const_11122.astype('float64'), [15, 14, 2]), relay.reshape(var_11123.astype('int32'), [36,]), relay.reshape(const_11124.astype('float64'), [364,]), relay.reshape(var_11125.astype('int32'), [1792,]), relay.reshape(var_11126.astype('float32'), [130, 15]), ), 4)
call_11127 = relay.TupleGetItem(func_5498_call(relay.reshape(const_11122.astype('float64'), [15, 14, 2]), relay.reshape(var_11123.astype('int32'), [36,]), relay.reshape(const_11124.astype('float64'), [364,]), relay.reshape(var_11125.astype('int32'), [1792,]), relay.reshape(var_11126.astype('float32'), [130, 15]), ), 4)
bop_11130 = relay.bitwise_and(uop_11118.astype('uint8'), relay.reshape(bop_11112.astype('uint8'), relay.shape_of(uop_11118))) # shape=(10, 9, 5)
func_10020_call = mod.get_global_var('func_10020')
func_10022_call = mutated_mod.get_global_var('func_10022')
call_11134 = relay.TupleGetItem(func_10020_call(), 0)
call_11135 = relay.TupleGetItem(func_10022_call(), 0)
output = relay.Tuple([call_11121,const_11122,var_11123,const_11124,var_11125,var_11126,bop_11130,call_11134,])
output2 = relay.Tuple([call_11127,const_11122,var_11123,const_11124,var_11125,var_11126,bop_11130,call_11135,])
func_11145 = relay.Function([var_11110,var_11123,var_11125,var_11126,], output)
mod['func_11145'] = func_11145
mod = relay.transform.InferType()(mod)
mutated_mod['func_11145'] = func_11145
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11145_call = mutated_mod.get_global_var('func_11145')
var_11147 = relay.var("var_11147", dtype = "uint16", shape = (10, 9, 5))#candidate|11147|(10, 9, 5)|var|uint16
var_11148 = relay.var("var_11148", dtype = "int32", shape = (36,))#candidate|11148|(36,)|var|int32
var_11149 = relay.var("var_11149", dtype = "int32", shape = (1792,))#candidate|11149|(1792,)|var|int32
var_11150 = relay.var("var_11150", dtype = "float32", shape = (1950, 1))#candidate|11150|(1950, 1)|var|float32
call_11146 = func_11145_call(var_11147,var_11148,var_11149,var_11150,)
output = call_11146
func_11151 = relay.Function([var_11147,var_11148,var_11149,var_11150,], output)
mutated_mod['func_11151'] = func_11151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9283_call = mod.get_global_var('func_9283')
func_9285_call = mutated_mod.get_global_var('func_9285')
call_11169 = relay.TupleGetItem(func_9283_call(), 2)
call_11170 = relay.TupleGetItem(func_9285_call(), 2)
output = relay.Tuple([call_11169,])
output2 = relay.Tuple([call_11170,])
func_11182 = relay.Function([], output)
mod['func_11182'] = func_11182
mod = relay.transform.InferType()(mod)
output = func_11182()
func_11183 = relay.Function([], output)
mutated_mod['func_11183'] = func_11183
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5789_call = mod.get_global_var('func_5789')
func_5791_call = mutated_mod.get_global_var('func_5791')
call_11192 = relay.TupleGetItem(func_5789_call(), 0)
call_11193 = relay.TupleGetItem(func_5791_call(), 0)
output = call_11192
output2 = call_11193
func_11201 = relay.Function([], output)
mod['func_11201'] = func_11201
mod = relay.transform.InferType()(mod)
output = func_11201()
func_11202 = relay.Function([], output)
mutated_mod['func_11202'] = func_11202
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7499_call = mod.get_global_var('func_7499')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_11276 = relay.TupleGetItem(func_7499_call(), 0)
call_11277 = relay.TupleGetItem(func_7500_call(), 0)
output = call_11276
output2 = call_11277
func_11280 = relay.Function([], output)
mod['func_11280'] = func_11280
mod = relay.transform.InferType()(mod)
mutated_mod['func_11280'] = func_11280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11280_call = mutated_mod.get_global_var('func_11280')
call_11281 = func_11280_call()
output = call_11281
func_11282 = relay.Function([], output)
mutated_mod['func_11282'] = func_11282
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8938_call = mod.get_global_var('func_8938')
func_8939_call = mutated_mod.get_global_var('func_8939')
call_11304 = func_8938_call()
call_11305 = func_8938_call()
func_10559_call = mod.get_global_var('func_10559')
func_10561_call = mutated_mod.get_global_var('func_10561')
call_11315 = func_10559_call()
call_11316 = func_10559_call()
var_11320 = relay.var("var_11320", dtype = "bool", shape = (8, 504, 12))#candidate|11320|(8, 504, 12)|var|bool
bop_11321 = relay.right_shift(call_11304.astype('int64'), relay.reshape(var_11320.astype('int64'), relay.shape_of(call_11304))) # shape=(8, 504, 12)
bop_11324 = relay.right_shift(call_11305.astype('int64'), relay.reshape(var_11320.astype('int64'), relay.shape_of(call_11305))) # shape=(8, 504, 12)
var_11347 = relay.var("var_11347", dtype = "bool", shape = (8, 504, 12))#candidate|11347|(8, 504, 12)|var|bool
bop_11348 = relay.bitwise_and(var_11320.astype('int32'), relay.reshape(var_11347.astype('int32'), relay.shape_of(var_11320))) # shape=(8, 504, 12)
func_7223_call = mod.get_global_var('func_7223')
func_7224_call = mutated_mod.get_global_var('func_7224')
call_11353 = relay.TupleGetItem(func_7223_call(), 0)
call_11354 = relay.TupleGetItem(func_7224_call(), 0)
output = relay.Tuple([call_11315,bop_11321,bop_11348,call_11353,])
output2 = relay.Tuple([call_11316,bop_11324,bop_11348,call_11354,])
func_11358 = relay.Function([var_11320,var_11347,], output)
mod['func_11358'] = func_11358
mod = relay.transform.InferType()(mod)
mutated_mod['func_11358'] = func_11358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11358_call = mutated_mod.get_global_var('func_11358')
var_11360 = relay.var("var_11360", dtype = "bool", shape = (8, 504, 12))#candidate|11360|(8, 504, 12)|var|bool
var_11361 = relay.var("var_11361", dtype = "bool", shape = (8, 504, 12))#candidate|11361|(8, 504, 12)|var|bool
call_11359 = func_11358_call(var_11360,var_11361,)
output = call_11359
func_11362 = relay.Function([var_11360,var_11361,], output)
mutated_mod['func_11362'] = func_11362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10020_call = mod.get_global_var('func_10020')
func_10022_call = mutated_mod.get_global_var('func_10022')
call_11369 = relay.TupleGetItem(func_10020_call(), 0)
call_11370 = relay.TupleGetItem(func_10022_call(), 0)
func_5961_call = mod.get_global_var('func_5961')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_11383 = relay.TupleGetItem(func_5961_call(), 2)
call_11384 = relay.TupleGetItem(func_5962_call(), 2)
func_7223_call = mod.get_global_var('func_7223')
func_7224_call = mutated_mod.get_global_var('func_7224')
call_11400 = relay.TupleGetItem(func_7223_call(), 0)
call_11401 = relay.TupleGetItem(func_7224_call(), 0)
output = relay.Tuple([call_11369,call_11383,call_11400,])
output2 = relay.Tuple([call_11370,call_11384,call_11401,])
func_11456 = relay.Function([], output)
mod['func_11456'] = func_11456
mod = relay.transform.InferType()(mod)
output = func_11456()
func_11457 = relay.Function([], output)
mutated_mod['func_11457'] = func_11457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10123_call = mod.get_global_var('func_10123')
func_10124_call = mutated_mod.get_global_var('func_10124')
call_11469 = relay.TupleGetItem(func_10123_call(), 0)
call_11470 = relay.TupleGetItem(func_10124_call(), 0)
func_10685_call = mod.get_global_var('func_10685')
func_10686_call = mutated_mod.get_global_var('func_10686')
call_11485 = relay.TupleGetItem(func_10685_call(), 1)
call_11486 = relay.TupleGetItem(func_10686_call(), 1)
output = relay.Tuple([call_11469,call_11485,])
output2 = relay.Tuple([call_11470,call_11486,])
func_11494 = relay.Function([], output)
mod['func_11494'] = func_11494
mod = relay.transform.InferType()(mod)
output = func_11494()
func_11495 = relay.Function([], output)
mutated_mod['func_11495'] = func_11495
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mod.get_global_var('func_8055')
func_8057_call = mutated_mod.get_global_var('func_8057')
call_11589 = relay.TupleGetItem(func_8055_call(), 0)
call_11590 = relay.TupleGetItem(func_8057_call(), 0)
func_10366_call = mod.get_global_var('func_10366')
func_10368_call = mutated_mod.get_global_var('func_10368')
var_11612 = relay.var("var_11612", dtype = "float32", shape = (98, 1))#candidate|11612|(98, 1)|var|float32
call_11611 = relay.TupleGetItem(func_10366_call(relay.reshape(var_11612.astype('float32'), [98,])), 0)
call_11613 = relay.TupleGetItem(func_10368_call(relay.reshape(var_11612.astype('float32'), [98,])), 0)
func_9148_call = mod.get_global_var('func_9148')
func_9150_call = mutated_mod.get_global_var('func_9150')
call_11619 = relay.TupleGetItem(func_9148_call(), 0)
call_11620 = relay.TupleGetItem(func_9150_call(), 0)
uop_11622 = relay.log(var_11612.astype('float32')) # shape=(98, 1)
uop_11627 = relay.tan(uop_11622.astype('float32')) # shape=(98, 1)
uop_11632 = relay.log10(uop_11622.astype('float64')) # shape=(98, 1)
output = relay.Tuple([call_11589,call_11611,call_11619,uop_11627,uop_11632,])
output2 = relay.Tuple([call_11590,call_11613,call_11620,uop_11627,uop_11632,])
func_11634 = relay.Function([var_11612,], output)
mod['func_11634'] = func_11634
mod = relay.transform.InferType()(mod)
var_11635 = relay.var("var_11635", dtype = "float32", shape = (98, 1))#candidate|11635|(98, 1)|var|float32
output = func_11634(var_11635)
func_11636 = relay.Function([var_11635], output)
mutated_mod['func_11636'] = func_11636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10623_call = mod.get_global_var('func_10623')
func_10625_call = mutated_mod.get_global_var('func_10625')
call_11680 = func_10623_call()
call_11681 = func_10623_call()
output = call_11680
output2 = call_11681
func_11687 = relay.Function([], output)
mod['func_11687'] = func_11687
mod = relay.transform.InferType()(mod)
output = func_11687()
func_11688 = relay.Function([], output)
mutated_mod['func_11688'] = func_11688
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8733_call = mod.get_global_var('func_8733')
func_8734_call = mutated_mod.get_global_var('func_8734')
call_11707 = relay.TupleGetItem(func_8733_call(), 0)
call_11708 = relay.TupleGetItem(func_8734_call(), 0)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_11711 = func_5606_call()
call_11712 = func_5606_call()
func_9193_call = mod.get_global_var('func_9193')
func_9196_call = mutated_mod.get_global_var('func_9196')
const_11741 = relay.const([1,9,-2,7,10,6,9,-3,9,2,4,-3,-10,-1,9,3,1,-6,-10,5,-3,3,-8,-10,-4,-4,4,7,6,-4,-7,-9,-8,-3,9,10,1,-4,10,6,8,-4,-9,10,-8,2,-9,4,-5,-8,5,8,1,-4,8,7,-2,-10,-10,8,-3,3,-1,-1,-6,-3,-7,8,5,-9,4,8,-6,6,-7,6,-5,3,-10,6,-3,8,2,-8,-7,-7,-2,4,-1,6,7,7,-4,9,5,9,-6,8,2,4,-4,8,-6,-5,-5,7,4,-5,6,-4,1,1,-2,-5,6,4,10,7,6,-5,3,-4,-9,9,5,8], dtype = "int16")#candidate|11741|(126,)|const|int16
call_11740 = relay.TupleGetItem(func_9193_call(relay.reshape(const_11741.astype('int16'), [126,])), 3)
call_11742 = relay.TupleGetItem(func_9196_call(relay.reshape(const_11741.astype('int16'), [126,])), 3)
func_10798_call = mod.get_global_var('func_10798')
func_10804_call = mutated_mod.get_global_var('func_10804')
var_11750 = relay.var("var_11750", dtype = "int32", shape = (1792,))#candidate|11750|(1792,)|var|int32
const_11751 = relay.const([-3.114978,-3.162697,0.435600,-6.681587,-5.496281,-6.660842,4.863813,-6.557927,-7.966565,-0.453497,8.723789,-6.488825,9.713002,6.693328,-6.093861,3.601764,6.684729,-1.503051,-6.750810,8.209883,-3.389979,0.340337,-7.567964,-4.364098,-1.431369,9.396034,9.466276,3.036817,1.215530,3.410077,7.147300,-0.555129,5.111196,3.447283,0.107111,-2.831420,2.224357,-4.785525,9.258637,-6.262166,1.493194,5.865505,-2.258744,-0.461925,-2.429047,9.627817,-6.033060,-3.537153,-0.585999,2.548439,4.081612,7.297209,-0.884418,-1.130274,-8.162150,6.438890,-4.915150,-1.162556,0.227830,-7.462202,9.517098,2.204184,5.330429,9.163547,-4.788287,2.048166,-3.184930,-1.027487,-9.737242,8.089498,1.267330,9.504635,2.633112,-4.758055,-2.913240,-0.925614,-4.563226,5.502522,-6.866493,3.459655,0.882004,-4.029456,9.185929,-0.880234,7.075082,-5.975480,-8.803049,-9.028690,-4.117695,-6.488553,1.180495,-5.055059,3.837873,5.519310,-5.197170,-9.605050,9.625537,2.995657,8.744121,8.042536,9.789826,3.854104,0.415547,-0.797778,0.583538,-7.941838,6.060043,-4.416195,-8.586299,-2.391415,4.282212,-4.554957,2.718477,1.150846,-5.081827,8.586877,1.146586,8.513284,-4.355343,-4.521946,2.219398,-3.193930,6.708661,6.105326,-6.634138,-8.525160,-6.110662,5.339750,-3.916731,-3.141322,2.277251,4.600596,-5.085106,1.527315,-4.034874,-2.612782,-8.201198,-3.086413,-4.171364,6.538426,-5.200004,-5.788682,-7.575917,-2.215235,-2.393085,5.410271,6.020836,-5.634605,-3.572570,-9.423259,1.007663,-0.476849,-8.494654,2.310334,-8.922720,9.019246,-1.853887,8.289494,9.741159,-7.520972,-7.227805,4.722213,-3.990158,3.329358,9.193290,8.843837,3.192667,-4.138910,-2.870971,-0.436471,-8.734181,7.984131,4.403729,-9.419172,6.348005,-1.043252,-3.933726,1.781417,-2.532625,6.266504,-5.901096,-6.369480], dtype = "float32")#candidate|11751|(182,)|const|float32
var_11752 = relay.var("var_11752", dtype = "bool", shape = (117,))#candidate|11752|(117,)|var|bool
call_11749 = relay.TupleGetItem(func_10798_call(relay.reshape(var_11750.astype('int32'), [1792,]), relay.reshape(call_11740.astype('int64'), [2002,]), relay.reshape(const_11751.astype('float32'), [182,]), relay.reshape(var_11752.astype('bool'), [117,]), ), 6)
call_11753 = relay.TupleGetItem(func_10804_call(relay.reshape(var_11750.astype('int32'), [1792,]), relay.reshape(call_11740.astype('int64'), [2002,]), relay.reshape(const_11751.astype('float32'), [182,]), relay.reshape(var_11752.astype('bool'), [117,]), ), 6)
func_11456_call = mod.get_global_var('func_11456')
func_11457_call = mutated_mod.get_global_var('func_11457')
call_11756 = relay.TupleGetItem(func_11456_call(), 2)
call_11757 = relay.TupleGetItem(func_11457_call(), 2)
func_5899_call = mod.get_global_var('func_5899')
func_5902_call = mutated_mod.get_global_var('func_5902')
var_11759 = relay.var("var_11759", dtype = "uint64", shape = (1280,))#candidate|11759|(1280,)|var|uint64
const_11760 = relay.const([5.029764,3.100491,-8.646936,-4.273543,2.509386,-4.151803,-9.062845,1.755820,-7.011793,-0.785813,0.780002,1.704078,0.373880,-6.079527,3.874623,-1.560389,0.933252,1.170782,3.355217,5.351751,6.633814,5.415461,5.237203,6.111849,-0.257743,-0.827152,4.157961,9.179440,5.823020,0.254232,5.847261,-9.446229,8.714392,-5.727202,5.125815,-9.837458,6.937879,-5.369485,-0.539417,7.747188,5.676897,-1.921972,8.945881,-7.211993,5.364597,3.224662,4.857949,-1.338490,9.360620,1.500418,-6.253758,-1.579875,6.087229,5.360365,-3.594011,-9.666444,-2.436772,-1.877122,6.653981,1.315762,0.433725,8.191103,-5.709084,7.487805,-7.060718,-1.181848,-3.543796,5.287833,-3.665364,1.649652,4.760439,-2.743594,5.476591,2.051690,3.065053,6.754480,-5.997004,8.153146,-3.517921,-6.192316,-5.900723,-5.433526,8.509527,-1.269728,-3.728155,2.280040,-0.122341,2.789704,-5.038285,-9.185207,8.865682,-3.752204,-6.620507,-2.120272,9.899016,8.115973,-3.754264,-2.922346,0.836273,6.715392,7.214094,5.133527,-3.182245,6.340263,-3.591342,3.224654,5.327268,0.397192,2.845310,0.764133,-9.983216,-7.352042,-1.641161,9.973115,-5.895477,9.549879,3.469295,7.719659,9.863507,-3.579111,-5.291548,-7.467960,-5.247280,4.940267,1.259708,-3.595605,3.140575,-2.801760,4.936449,-5.234484,-2.632459,1.345636,-2.852191,-0.197481,5.867580,0.369187,-3.581334,-6.730026,2.513468,-9.786876,-1.558438,6.103830,-6.889801,7.174440,9.576897,3.925142,9.252924,0.790546,4.136076,0.543614,-2.083681,-5.576849,-1.481949,0.499171,-1.860659,9.020937,-7.777341,-1.307771,-4.769518,5.531151,8.604898,-4.347162,5.701394,1.916996,0.833766,-5.103643,0.074515,-2.675122,4.300484,-3.895787,5.428907,-1.903676,-3.889948,-0.052893,-2.154754,-8.627214,-9.592384,-7.594519,-8.614442,-1.954964,-7.576053,3.539231,2.787674,-4.455430,-6.836002,-8.383884,-3.590720,6.004817,-7.840004,7.575528,1.573166,-8.110541,-6.016398,-4.922001,-6.993917,-0.371256,6.879792,5.634198,1.531636,4.841064,-3.556012,-9.193821,-5.881262,3.007517,3.027278,7.800604,-4.347125,2.022726,-3.315775,6.519197,-4.388680,1.918845,8.626816,6.080113,-8.014804,-0.044913,-3.333619,1.944908,6.581844,4.751659,-3.124849,2.105081,2.756430,0.919387,-9.203958,-9.985363,3.145800,-5.160631,-4.910072,4.730187,-9.672378,6.764051,-4.170502,5.082206,2.270572,0.516973,9.217939,-9.539676,5.036769,-7.878182,-1.109268,-4.471018,5.590658,8.569014,-3.283606,-0.578203,-6.090210,-8.009365,2.084389,-6.398682,-8.637170,-9.883888,4.141511,-0.061221,-2.888478,-2.944460,-5.004557,-3.549899,-8.461428,5.689753,0.551602,9.142717,-2.801954,-1.806291,-6.126484,-6.529047,-9.946336,-0.091851,-0.664321,-8.007199,-5.808498,0.821742,-0.317569,-3.485040,1.047795,3.206455,1.929988,2.324973,-6.578810,7.479338,-1.130776,-1.829748,-6.057705,-6.479994,5.701798,-3.436984,-1.470775,-2.707855,4.859010,3.110445,2.697741,6.166277,9.155494,-9.045720,2.140070,-5.831481,1.088763,-3.681311,-8.323499,-7.416760,-5.038375,5.683744,3.037995,9.461259,-1.382050,6.671539,7.026887,-4.637567,2.896424,8.664255,4.313048,2.554594,-5.775807,-5.865256,-9.765560,-4.666955,5.484942,3.009816,-2.275657,-3.148099,0.065114,-2.098902,-4.712182,-0.096613,2.027371,-6.181539,0.989553,6.195717,-0.719796,-3.800859,3.471051,4.589278,-2.080389,0.899098,7.546659,9.413960,3.796594,7.172880,0.206637,-2.525800,4.630895,7.595748,-2.654988,-5.373901,-9.816120,5.883611,-1.794246,3.473657,-8.445285,3.160138,-7.095822,-7.876733,-0.331539,9.934546,3.551833,-8.843890,4.524583,-7.476605,-7.859578,-6.124524,2.521226,-0.118166,-2.425196,9.518432,-0.178435,-2.764789,4.995817,4.916559,-7.357375,6.000929,-3.409188,0.102552,8.161106,4.628495,-0.850429,1.343820,3.010006,4.670864,0.199019,-9.361003,7.375549,-9.582202,-1.804570,-3.388825,-8.134596,-7.233055,2.744496,-8.733832,0.320939,5.268217,2.662544,-7.371598,-1.234350,-6.612959,-8.826100,-9.544920,6.780774,-5.630765,-8.786798,5.600868,9.612358,7.525160,1.156176,3.605974,5.863839,-1.496740,8.847382,5.389411,9.408027,2.188664,0.978684,4.398114,-3.285029,-3.403728,8.481372,-3.716414,5.476159,2.186822,7.549966,-7.802735,2.312275,-5.470851,2.050342,7.222662,0.526898,-6.146918,-3.577167,-4.652349,6.897470,4.076952,-4.085296,3.005681,1.604441,-2.721418,-0.731335,1.852710,0.585554,-2.551659,6.291738,3.972327,2.127592,6.682606,-7.190541,-6.360072,-3.056139,-6.899729,0.500164,2.259809,-1.918312,-0.276937,-0.790372,5.267338,7.530144,-9.502475,3.883845,2.545466,6.619902,-3.908409,-4.867975,5.149428,-1.201710,3.478346,-0.114449,-3.668159,-5.304717,9.474606,-9.892441,3.044601,-2.413553,-9.940133,9.583990,-4.518282,7.285034,-5.112312,-0.726494,-5.157741,2.649749,-2.852182,-7.081379,7.342114,6.650730,5.697704,5.539781,7.769936,-8.909585,8.284194,-7.684783,-7.791930,-3.058288,0.015255,7.466787,1.596593,-1.832926,-9.152842,-6.195970,3.713564,-8.817013,1.218525,7.906376,1.702597,-5.504498,-6.090660,7.388744,-9.004909], dtype = "float64")#candidate|11760|(504,)|const|float64
call_11758 = relay.TupleGetItem(func_5899_call(relay.reshape(var_11759.astype('uint64'), [16, 10, 8]), relay.reshape(const_11760.astype('float64'), [504,]), ), 0)
call_11761 = relay.TupleGetItem(func_5902_call(relay.reshape(var_11759.astype('uint64'), [16, 10, 8]), relay.reshape(const_11760.astype('float64'), [504,]), ), 0)
func_6736_call = mod.get_global_var('func_6736')
func_6741_call = mutated_mod.get_global_var('func_6741')
call_11787 = relay.TupleGetItem(func_6736_call(relay.reshape(const_11741.astype('int16'), [126,]), relay.reshape(call_11740.astype('int64'), [2002,]), relay.reshape(call_11756.astype('float32'), [1950,]), ), 4)
call_11788 = relay.TupleGetItem(func_6741_call(relay.reshape(const_11741.astype('int16'), [126,]), relay.reshape(call_11740.astype('int64'), [2002,]), relay.reshape(call_11756.astype('float32'), [1950,]), ), 4)
output = relay.Tuple([call_11707,call_11711,call_11740,const_11741,call_11749,var_11750,const_11751,var_11752,call_11756,call_11758,var_11759,const_11760,call_11787,])
output2 = relay.Tuple([call_11708,call_11712,call_11742,const_11741,call_11753,var_11750,const_11751,var_11752,call_11757,call_11761,var_11759,const_11760,call_11788,])
func_11809 = relay.Function([var_11750,var_11752,var_11759,], output)
mod['func_11809'] = func_11809
mod = relay.transform.InferType()(mod)
mutated_mod['func_11809'] = func_11809
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11809_call = mutated_mod.get_global_var('func_11809')
var_11811 = relay.var("var_11811", dtype = "int32", shape = (1792,))#candidate|11811|(1792,)|var|int32
var_11812 = relay.var("var_11812", dtype = "bool", shape = (117,))#candidate|11812|(117,)|var|bool
var_11813 = relay.var("var_11813", dtype = "uint64", shape = (1280,))#candidate|11813|(1280,)|var|uint64
call_11810 = func_11809_call(var_11811,var_11812,var_11813,)
output = call_11810
func_11814 = relay.Function([var_11811,var_11812,var_11813,], output)
mutated_mod['func_11814'] = func_11814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_11826 = relay.TupleGetItem(func_9073_call(), 0)
call_11827 = relay.TupleGetItem(func_9075_call(), 0)
func_10457_call = mod.get_global_var('func_10457')
func_10459_call = mutated_mod.get_global_var('func_10459')
call_11828 = relay.TupleGetItem(func_10457_call(), 0)
call_11829 = relay.TupleGetItem(func_10459_call(), 0)
output = relay.Tuple([call_11826,call_11828,])
output2 = relay.Tuple([call_11827,call_11829,])
func_11845 = relay.Function([], output)
mod['func_11845'] = func_11845
mod = relay.transform.InferType()(mod)
output = func_11845()
func_11846 = relay.Function([], output)
mutated_mod['func_11846'] = func_11846
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_11895 = relay.TupleGetItem(func_6775_call(), 4)
call_11896 = relay.TupleGetItem(func_6777_call(), 4)
output = relay.Tuple([call_11895,])
output2 = relay.Tuple([call_11896,])
func_11901 = relay.Function([], output)
mod['func_11901'] = func_11901
mod = relay.transform.InferType()(mod)
output = func_11901()
func_11902 = relay.Function([], output)
mutated_mod['func_11902'] = func_11902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10685_call = mod.get_global_var('func_10685')
func_10686_call = mutated_mod.get_global_var('func_10686')
call_11958 = relay.TupleGetItem(func_10685_call(), 1)
call_11959 = relay.TupleGetItem(func_10686_call(), 1)
func_10004_call = mod.get_global_var('func_10004')
func_10007_call = mutated_mod.get_global_var('func_10007')
const_11972 = relay.const([-9.740466,8.578134,0.703797,-6.221382,2.841760,9.411750,7.210585,-6.668913,1.235354,-8.449960,3.188153,9.145468,-9.025230,-8.390562,-0.128839,7.000896,-6.829253,3.991842,2.842294,3.206236,8.081518,1.214484,-7.321734,-8.170928,-6.964296,-0.896773,7.341345,-7.930309,1.236801,9.753164,-8.238293,-0.701560,4.032290,-3.598698,5.621095,-0.355948,-0.834922,4.294530,3.909097,-7.454036,-5.073199,6.392304,8.842738,-8.889009,-7.987746,-9.115192,-0.326603,9.422939,-3.825840,-3.848729,-7.576109,1.676314,-1.924802,1.717199,-1.377811,-6.708232,-1.283384,7.906599,9.442034,-4.818996,9.476962,5.716116,4.141517,-1.167052,-8.047113,-1.714628,6.631204,-5.983837,-7.049692,9.813489,4.788082,-1.917446,3.283407,6.749310,8.532602,-0.247119,-4.562941,-4.714979,-6.785450,-5.213265,6.865451,3.488070,-2.974680,4.200054,0.380695,1.054399,-5.722300,-8.905215,3.378222,-2.855941,8.018888,-5.020206,-1.723258,-6.104660,0.135086,-8.470178,2.844137,4.975194,3.757984,-7.278712,9.453393,1.499039,5.931539,3.859083,-6.509373,9.733197,-7.412859,4.763930,-4.171779,1.072724,-1.934096,3.126836,-0.819237,4.195336,8.097224,-3.206268,-1.794298,-2.603615,-0.596451,-4.777925,0.489835,-3.500443,8.994450,2.841376,4.809656,3.067571,-6.693741,4.696051,5.599097,-4.765078,3.482222,1.187897,-2.552914,5.179200,9.676182,5.736658,-6.436855,-1.358547,-9.868743,7.701777,5.075273,6.664591,4.573245,-8.185752,-7.177008,9.922391,9.374192,0.551913,-8.515679,-1.141327,-5.585178,2.847597,-6.389623,6.898012,9.643636,-4.306288,7.410406,-8.534531,9.865652,-4.713995,3.685488,6.585827,-4.211581,-3.175960,6.931313,0.353927,2.100947,-4.532122,-8.413596,-7.153969,3.768588,-2.406634,-1.918411,0.581299,8.854850,3.737218,-8.683974,-0.023388,0.915676,4.759222,6.982466,4.451737,6.072474,-4.134529,6.279867,0.520844,-1.344373,8.572619,-2.196450,-0.797220,-7.818639,-8.025034,-2.409067,-2.804967,-1.734383,-5.507311,-5.163195,-5.472427,-5.583252,6.604113,5.709801,-9.996342,8.353230,-2.731715,-8.501516,6.857178,6.985066,7.009245,-4.530263,4.888710,-5.682661,7.043045,4.902071,-5.469178,-9.703224,5.241175,1.022901,5.301704,-6.804119,-3.387975,-7.783538,2.870242,-8.622989,8.127130,-8.987426,8.693499,3.745990,1.349868,-8.825375,-8.110476,-2.862709,-6.667735,8.809382,-2.146895,1.334114,-1.634861,-8.959780,8.027631,9.526398,-4.349085,-5.075536,-8.586298,-9.863774,-3.265168,2.658348,6.216902,6.219234,6.046625,-7.918195,-9.650325,7.133668,4.590690,-2.189318,-3.053433,-2.827123,-7.671742,-2.949237,-4.315050,-3.065563,0.157412,3.839068,8.113432,-6.696553,9.909186,-6.517907,-2.837347,-8.744679,-1.790522,7.648447,-5.479164,5.688805,-1.658711,9.630804,-1.996966,7.307824,-7.663726,-7.382119,6.620574,-0.420784,0.047580,-3.091299,-0.152428,-1.175355,-6.428446,7.417332,8.249195,6.974765,-7.085118,-4.591726,-4.706412,-9.260337,-4.789736,3.096051,3.205942,-1.773574,-1.679387,5.636598,8.767915,5.074537,6.967846,4.773016,2.342408,-8.335023,5.007199,-6.175357,-6.953744,-9.876248,-2.159923,7.506316,-3.264814,-7.215120,-6.746250,4.268007,8.931212,8.260039,-2.954815,1.253925,5.582038,0.068967,-2.286638,2.383428,1.922102,1.362763,6.230551,4.201447,-1.301725,-2.603894,2.116614,9.208926,6.516282,9.977916,9.445436,6.441584,-7.258329,9.363160,0.685823,-4.276840,6.495016,-0.277278,-6.631597,-2.244606,4.637080,2.413091,-8.944995,-6.981274,-6.134657,6.966940,-6.402460,-8.953726,-8.866496,-5.432213,-0.582225,-1.778486,-3.960764,-6.682015,-4.135941,-5.820332,-4.464607,9.077855,-0.249041,-2.119460,6.330057,-5.383823,-2.374649,7.219761,-1.467561,-7.053200,-5.237858,-4.476985,3.378931,9.173748,3.910194,-9.444529,0.861979,7.826529,2.820553,-9.854825,9.552074,-4.375135,-9.552934,-7.629489,9.161466,5.318317,6.322211,2.148594,4.074509,3.417542,-2.919976,-5.720571,1.912315,5.622224,9.003101,0.760928,-2.945827,-8.701013,4.928433,8.705542,-0.663131,-5.619625,5.819403,-1.410596,-5.189526,0.424827,9.975348,5.831618,9.799014,3.875587,-3.383754,-7.916652,0.879134,7.244266,4.300817,1.835173,-6.726817,-0.861995,5.019846,-5.288656,-8.494782,-6.753635,7.314635,-3.974603,-7.933516,4.964493,-5.619729,1.670567,-3.728162,1.465290,-6.817246,1.244148,-6.089253,-2.078740,7.053113,-4.722838,-8.541146,9.492557,-4.106547,3.846348,-3.800519,0.274190,-0.626784,-9.464418,-4.131071,-5.876674,-0.144432,4.613150,6.012472,7.230662,-0.341825,-0.914185,-2.772703,-1.528888,3.974796,-3.131202,-1.417255,2.343120,-1.734025,2.922484,8.972048,8.828705,-2.454206,-7.909315,-2.202932,-0.651616,7.521582,-3.899986,-9.820254,-7.052399,-7.521286,2.999695,3.669822,6.977851,-4.462839,-9.910618,-9.849560,-7.311954,-3.552681,3.775765,-1.008849,8.636429,-8.308334,5.781735,-7.955287,4.395836,-3.302726,0.615325,9.539409,-7.070431,4.266528,0.329813,-2.170322,-5.616068,-7.532205,-1.988998,6.865654,0.525314,8.892125,9.408188,-0.987138,-7.198496,4.663959,-8.866732,-0.111766,6.386859,8.939758,4.581513,-4.957691,-7.046773,0.769622,8.905779,-8.239456,2.892702,1.530222,1.999411,4.470106,3.257768,1.486291,4.734616,-3.180511,-3.787760,7.244118,9.510952,8.995656,-2.155382,-9.721100,-6.154134,-4.629505,-1.285110,-1.875370,-4.845319,0.588670,-7.920758,9.573394,-1.632243,-1.935620,-8.057631,9.234747,2.472056,3.100127,3.168184,9.800086,3.890693,6.808924,-9.943507,9.320111,9.217781,-6.022445,-9.766133,5.614116,3.661771,2.132009,5.252127,0.734397,9.963252,5.741631,6.619729,-5.133296,-1.162909,-6.640889,3.236782,1.819234,0.250128,9.200479,-1.689379,-8.296891,-0.655840,4.987600,-3.198664,6.058154,2.752671,4.706659,4.269759,8.440855,6.196899,-6.999997,-4.595139,-4.177475,0.228127,0.587795,-6.276834,0.412204,3.329950,8.020967,-5.463612,1.075380,0.258001,-8.110410,0.639208,-4.765242,8.942265,8.808740,9.976566,5.871983,1.695017,-0.928457,3.243980,3.072895,-4.987220,-0.323947,1.225760,-5.934494,-0.140770,1.645964,6.706599,1.079453,8.482058,-6.290488,-4.195543,1.495565,-5.741804,5.210951,-0.541471,-1.935721,0.036598,2.748171,-8.865825,0.903564,-0.899116,-2.091083,6.509018,-4.645147,6.407127,0.748979,1.180061,3.927604,-4.219467,0.336416,2.674509,7.003508,-2.250071,5.535340,-1.218335,-2.805704,-8.287781,-7.182189,-6.270765,-0.298895,1.980303,5.569115,-4.815794,-8.813335,2.470587,0.402067,3.308078,-8.039482,7.614073,3.170525,-6.495588,-6.670491,-7.552358,-9.674268,-8.942097,-6.679565,-5.723433,-7.098791,8.881516,4.944459,-4.646330,1.834719,1.392465,1.298584,-3.625347,7.597028,-0.935127,1.192942,-9.638592,1.121062,-4.770139,1.560917,2.742691,4.805261,-6.267559,-5.591925,-2.274406,7.807815,5.716788,-2.263679,3.055516,-8.710900,-9.403306,-3.831571,-5.094076,8.440470,-3.786471,7.847873,-9.562671,-9.351937,-5.859330,3.977275,-5.859208,-8.132311,8.614344,2.112501,-4.480952,1.745495,7.755159,-5.410587,2.481905,-7.678572,-2.126484,-1.892848,4.139836,8.862611,1.266143,-8.196608,4.594612,3.014318,9.623437,6.732655,-9.980739,-5.540284,6.330452,3.160628,-6.735083,-2.766880,-2.916920,7.698517,6.263683,5.623136,9.553750,-2.552983,-8.332118,-1.092466,4.035750,-6.045475,-1.580422,2.920255,0.906684,-7.318855,9.882371,-9.166241,0.053069,9.560226,-1.091540,0.590064,-1.872378,3.853702,1.056453,-5.975455,5.487809,2.495295,-0.846853,3.521839,3.414518,1.674313,-6.037499,-5.876908,-6.235353,-2.953744,-8.212386,-4.666500,-7.001295,-1.922992,5.619298,-9.949376,5.907931,-8.765708,-1.146877,2.211061,-0.910929,-9.000657,-0.169377,-8.835653,-4.184615,8.356199,8.936726,0.368221,0.091367,6.748365,0.299708,-2.495216,5.310772,-1.558324,-4.357251,-7.253747,-7.309987,-9.091721,6.650410,5.271941,2.922498,1.537011,2.465299,-6.299900,-5.746685,9.744371,0.773172,-0.149385,4.916849,3.544410,-1.189596,-1.698846,-5.851334,6.716811], dtype = "float64")#candidate|11972|(792,)|const|float64
call_11971 = relay.TupleGetItem(func_10004_call(relay.reshape(const_11972.astype('float64'), [6, 11, 12])), 1)
call_11973 = relay.TupleGetItem(func_10007_call(relay.reshape(const_11972.astype('float64'), [6, 11, 12])), 1)
output = relay.Tuple([call_11958,call_11971,const_11972,])
output2 = relay.Tuple([call_11959,call_11973,const_11972,])
func_11975 = relay.Function([], output)
mod['func_11975'] = func_11975
mod = relay.transform.InferType()(mod)
output = func_11975()
func_11976 = relay.Function([], output)
mutated_mod['func_11976'] = func_11976
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12022 = relay.var("var_12022", dtype = "float32", shape = (1, 12, 10))#candidate|12022|(1, 12, 10)|var|float32
uop_12023 = relay.erf(var_12022.astype('float32')) # shape=(1, 12, 10)
bop_12025 = relay.floor_mod(var_12022.astype('float32'), relay.reshape(uop_12023.astype('float32'), relay.shape_of(var_12022))) # shape=(1, 12, 10)
uop_12053 = relay.sigmoid(bop_12025.astype('float32')) # shape=(1, 12, 10)
output = relay.Tuple([uop_12053,])
output2 = relay.Tuple([uop_12053,])
func_12056 = relay.Function([var_12022,], output)
mod['func_12056'] = func_12056
mod = relay.transform.InferType()(mod)
mutated_mod['func_12056'] = func_12056
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12057 = relay.var("var_12057", dtype = "float32", shape = (1, 12, 10))#candidate|12057|(1, 12, 10)|var|float32
func_12056_call = mutated_mod.get_global_var('func_12056')
call_12058 = func_12056_call(var_12057)
output = call_12058
func_12059 = relay.Function([var_12057], output)
mutated_mod['func_12059'] = func_12059
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10922_call = mod.get_global_var('func_10922')
func_10924_call = mutated_mod.get_global_var('func_10924')
call_12063 = relay.TupleGetItem(func_10922_call(), 0)
call_12064 = relay.TupleGetItem(func_10924_call(), 0)
output = relay.Tuple([call_12063,])
output2 = relay.Tuple([call_12064,])
func_12080 = relay.Function([], output)
mod['func_12080'] = func_12080
mod = relay.transform.InferType()(mod)
mutated_mod['func_12080'] = func_12080
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12080_call = mutated_mod.get_global_var('func_12080')
call_12081 = func_12080_call()
output = call_12081
func_12082 = relay.Function([], output)
mutated_mod['func_12082'] = func_12082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6374_call = mod.get_global_var('func_6374')
func_6376_call = mutated_mod.get_global_var('func_6376')
call_12083 = relay.TupleGetItem(func_6374_call(), 0)
call_12084 = relay.TupleGetItem(func_6376_call(), 0)
output = relay.Tuple([call_12083,])
output2 = relay.Tuple([call_12084,])
func_12124 = relay.Function([], output)
mod['func_12124'] = func_12124
mod = relay.transform.InferType()(mod)
output = func_12124()
func_12125 = relay.Function([], output)
mutated_mod['func_12125'] = func_12125
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12197 = relay.const(-5, dtype = "int8")#candidate|12197|()|const|int8
var_12198 = relay.var("var_12198", dtype = "int8", shape = (2, 1, 12))#candidate|12198|(2, 1, 12)|var|int8
bop_12199 = relay.logical_xor(const_12197.astype('int8'), var_12198.astype('int8')) # shape=(2, 1, 12)
output = bop_12199
output2 = bop_12199
func_12208 = relay.Function([var_12198,], output)
mod['func_12208'] = func_12208
mod = relay.transform.InferType()(mod)
var_12209 = relay.var("var_12209", dtype = "int8", shape = (2, 1, 12))#candidate|12209|(2, 1, 12)|var|int8
output = func_12208(var_12209)
func_12210 = relay.Function([var_12209], output)
mutated_mod['func_12210'] = func_12210
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_12228 = relay.TupleGetItem(func_5551_call(), 0)
call_12229 = relay.TupleGetItem(func_5553_call(), 0)
func_6405_call = mod.get_global_var('func_6405')
func_6407_call = mutated_mod.get_global_var('func_6407')
call_12234 = relay.TupleGetItem(func_6405_call(), 0)
call_12235 = relay.TupleGetItem(func_6407_call(), 0)
func_9240_call = mod.get_global_var('func_9240')
func_9243_call = mutated_mod.get_global_var('func_9243')
const_12244 = relay.const([4.384237,-0.757041,1.660312,0.991691,9.254651,2.781107,0.341165,4.076154,-5.594909,2.656750,-3.504665,-9.851817,0.733151,-1.167860,-3.163633,-1.010570,8.604333,2.166051,5.973744,4.665199,3.356212,7.342293,-8.928734,-7.009041,-6.652664,-5.208481,9.163979,-9.769588,-6.258070,7.407899,-6.635351,-8.020391,0.795995,0.143679,4.736289,7.476830,6.837269,1.691529,-3.294317,-4.434780,3.604639,9.754175], dtype = "float32")#candidate|12244|(42,)|const|float32
call_12243 = relay.TupleGetItem(func_9240_call(relay.reshape(const_12244.astype('float32'), [42,])), 2)
call_12245 = relay.TupleGetItem(func_9243_call(relay.reshape(const_12244.astype('float32'), [42,])), 2)
output = relay.Tuple([call_12228,call_12234,call_12243,const_12244,])
output2 = relay.Tuple([call_12229,call_12235,call_12245,const_12244,])
func_12248 = relay.Function([], output)
mod['func_12248'] = func_12248
mod = relay.transform.InferType()(mod)
mutated_mod['func_12248'] = func_12248
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12248_call = mutated_mod.get_global_var('func_12248')
call_12249 = func_12248_call()
output = call_12249
func_12250 = relay.Function([], output)
mutated_mod['func_12250'] = func_12250
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10922_call = mod.get_global_var('func_10922')
func_10924_call = mutated_mod.get_global_var('func_10924')
call_12256 = relay.TupleGetItem(func_10922_call(), 0)
call_12257 = relay.TupleGetItem(func_10924_call(), 0)
func_5520_call = mod.get_global_var('func_5520')
func_5522_call = mutated_mod.get_global_var('func_5522')
var_12259 = relay.var("var_12259", dtype = "bool", shape = (1188,))#candidate|12259|(1188,)|var|bool
call_12258 = relay.TupleGetItem(func_5520_call(relay.reshape(var_12259.astype('bool'), [1188,])), 0)
call_12260 = relay.TupleGetItem(func_5522_call(relay.reshape(var_12259.astype('bool'), [1188,])), 0)
func_9849_call = mod.get_global_var('func_9849')
func_9851_call = mutated_mod.get_global_var('func_9851')
call_12275 = relay.TupleGetItem(func_9849_call(), 1)
call_12276 = relay.TupleGetItem(func_9851_call(), 1)
func_11845_call = mod.get_global_var('func_11845')
func_11846_call = mutated_mod.get_global_var('func_11846')
call_12277 = relay.TupleGetItem(func_11845_call(), 0)
call_12278 = relay.TupleGetItem(func_11846_call(), 0)
output = relay.Tuple([call_12256,call_12258,var_12259,call_12275,call_12277,])
output2 = relay.Tuple([call_12257,call_12260,var_12259,call_12276,call_12278,])
func_12280 = relay.Function([var_12259,], output)
mod['func_12280'] = func_12280
mod = relay.transform.InferType()(mod)
mutated_mod['func_12280'] = func_12280
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12281 = relay.var("var_12281", dtype = "bool", shape = (1188,))#candidate|12281|(1188,)|var|bool
func_12280_call = mutated_mod.get_global_var('func_12280')
call_12282 = func_12280_call(var_12281)
output = call_12282
func_12283 = relay.Function([var_12281], output)
mutated_mod['func_12283'] = func_12283
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11845_call = mod.get_global_var('func_11845')
func_11846_call = mutated_mod.get_global_var('func_11846')
call_12302 = relay.TupleGetItem(func_11845_call(), 1)
call_12303 = relay.TupleGetItem(func_11846_call(), 1)
func_3440_call = mod.get_global_var('func_3440')
func_3445_call = mutated_mod.get_global_var('func_3445')
const_12305 = relay.const([7,-1,4,1,5,5,10,2,-9,3,8,-6,7,-9,4,-4,-7,1,10,-1,7,-9,-8,-3,1,5,-1,-8,-1,-1,10,5,2,-1,9,-5,8,5,4,10,-4,-5,-8,-5,-2,5,2,9,7,6,2,4,5,3,-7,-5,8,6,-2,4,-9,-6,-10,-7,-5,-4,-6,6,-10,-3,3,-8,7,-6,8,5,-8,10,-5,6,-10,10,1,-7,6,7,-7,10,-10,-5,6,-6,10,-4,-3,-9,-1,8,5,-10,-7,-2,-2,10,-1,-2,4,3,4,-1,8,-1,-8,-10,6,8,8,10,4,-4,5,-10,-6,5,10,8,-5,-6,7,8,5,7,-5,5,-6,-2,7,-2,-7,-2,10,-7,-6,-9,-9,6,-2,9,-9,7,-5,8,5,2,4,10,-5,-10,2,-6,8,-4,5,10,-10,-1,7,7,-7,5,5,7,6,3,-9,-6,-10,-9,-8,1,7,-2,-3,-8,8,-2,-3,-2,-8,-7,-3,6,-7,-8,-4,-2,-5,7,3,-8,1,5,1,-4,-4,6,6,-1,-6,8,10,-3,6,2,-5,2,10,-1,5,-10,6,6,-9,-5,-6,5,4,-10,7,-2,2,-8,9,3,-5,-5,-10,-3,6,4,-2,9,-8,-8,2,-7,2,-7,5,7,7,-8,-2,8,2,1,4,2,10,-8,8,7,1,4,-5,3,-4,-1,-6,6,2,2,7,7,-1,-10,-10,-2,-2,-6,-7,1,4,8,2,7,-1,-1,10,8,4,-4,-6,7,3,4,-4,1,-6,7,-5,3,3,6,3,9,-3,-2,-9,6,-2,-4,-5,2,6,-1,-6,-6,-10,2,-8,1,-4,-2,-9,7,-7,8,7,-3,-1,-3,1,-6,4,4,-9,-5,7,-7,4,-10,6,4,9,-6,4,-9,-1,-7,3,8,8,4,-9,-4,5,-3,-1,4,-4,2,2,-4,6,-7,-7,-10,6,-10,5,7,7,2,-9,-10,7,-3,-3,1,10,-8,-2,-2,2,-5,-6,-8,-6,-1,-7,10,-2,2,-1,5,-8,10,1,2,4,4,-2,4,-3,5,-5,3,-9,3,7,-3,10,6,-5,-9,-6,10,-5,9,9,-9,8,-2,-8,-7,2,9,1,-5,4,7,5,1,4,-10,-4,7,-1,-9,3,-4,-5,-7,8,5,6,-5,1,-2,8,8,-1,3,4,-2,9,-4,-9,-1,2,3,7,-10,-6,1,-6,-5,4,8,-2,-6,6,-5,8,-4,-9,-2,-4,5,7,-1,5,-8,4,8,6,-6,2,7,-7,-4,-7,5,9,9,-7,6,6,2,2,7,4,10,5,7,10,10,-8,-9,6,2,10,-5,4,10,7,-3,1,8,3,-9,9,-2,-6,-3,-1,-6,-4,1,8,3,-9,10,-4,-5,4,-1,3,9,6,-2,10,10,-8,-2,-2,-6,5,-10,-2,5,-9,8,-10,3,-2,3,-4,-6,3,1,-4,6,-10,-8,3,10,-10,6,-9,7,8,3,-2,4,-6,-3,-9,2,7,-4,3,-2,4,4,1,-3,3,8,-7,-1,7,-5,-4,8,9,10,7,7,-10,-3,4,9,-5,3,1,-5,9,-5,-1,2,6,-3,4,4,-3,-6,-4,6,-3,-1,4,-3,8,-6,2,8,-2,10,-1,3,-1,4,-5,5,9,2,-2,6,2,8,2,1,4,-1,6,-10,-2,-2,-5,4,-5,-7,9,6,7,-7,-9,-4,-2,10,10,4,-4,-8,-3,5,9,4,7,-1,-5,5,1,-7,-6,-10,6,-8,-10,1,9,1,8,-7,-7,-9,-9,4,-4,2,7,4,-3,4,-9,7,3,-5,5,-5,-10,-5,-9,-8,10,-10,-1,-10,7,10,-1,5,6,4,-3,4,-5,4,-7,-6,-2,6,3,10,10,-9,6,4,3,5,-8,9,9,-9,8,5,-4,-5,-7,-8,-4,7,-10,-4,-10,8,8,-3,-3,-3,-8,4,1,8,6,-4,-4,2,1,-6,5,-1,1,1,-6,8,-5,5,-4,4,10,2,-7,7,-10,-9,7,7,-5,6,3,5,-6,3,-5,2,5,1,-6,-1,3,9,-1,-10,7,8,-9,9,5,-7,-1,8,-1,-9,9,-3,-4,-2,1,1,-7,-7,6,-2,-7,3,-8,-5,2,-5,-4,3,1,2,9,-1,6,3,-5,3,5,-2,-5,-1,-9,-7,-3,2,8,-5,9,5,3,7,4,9,-4,-4,6,-7,10,-9,-6,6,-6,3,6,-1,8,6,-8,3,8,4,-1,-10,-6,-1,-1,-8,-7,-2,-1,-3,-3,-10,5,-4,9,6,8,10,-6,-6,-9,6,7,10,-1,6,-1,2,2,-9,-3,-2,5,-2,-4,-10,5,10,3,2,2,-5,-6,10,-4,-10,6,-5,3,-3,-8,-9,-8,4,10,5,-4,4,-7,10,5,-8,10,-1,-3,-10,-9,1,-10,9,1,-4,4,8,4,5,-6,10,6,-10,8,-9,1,-4,-7,4,9,-4,6,4,-10,7,2,3,-1,-9,5,5,8,-8,4,-2,8,8,9,-3,-3,-4,-10,-2,-10,-1,9,-10,7,1,-1,-6,10,-4,6,-6,10,3,-7,-2,-6,-3,-10,1,2,-7,-4,4,7,-10,5,-1,8,-6,8,5,2,-10,-2,8,-10,6,9,7,8,-10,-5,-8,4,-1,4,8,-3,-8,7,8,-2,1,-6,9,8,-7,-10,-8,-8,7,-5,8,3,-1,-2,8,-5,7,-9,-5,8,2,4,-2,-8,-4,6,-3,6,1,-4,3,-10,-1,9,-8,6,4,-9,-2,-9,-2,-6,6,-10,1,-6,1,7,6,8,4,3,3,8,9,-2,2,7,-4,-5,-8,1,6,3,-7,-6,-4,1,-1,3,-6,-2,-6,6,-3,-5,1,-2,6,-1,-6,-4,-7,8,-3,7,-9,-8,7,3,7,3,-5,-7,2,-6,6,-1,-4,-1,1,8,1,4,-10,-10,-6,6,-9,6,2,2,-1,-3,1,6,5,3,-8,4,4,8,8,-1,9,-8,9,-3,2,-9,-1,6,-9,-2,4,6,1,-7,-9,5,8,-1,5,1,-1,8,-5,7,-3,-10,6,-8,1,-7,-6,10,-8,-2,4,-8,-4,-6,3,5,-4,-7,-5,9,-10,8,-1,-9,7,9,7,-6,-6,-1,8,6,-3,4,8,3,2,-2,-10,-9,4,-10,-7,-1,-3,-1,10,-2,-2,10,2,6,5,-4,-10,-3,2,5,-4,-4,3,-5,-5,-6,5,-5,-9,8,10,10,6,-4,9,-10,10,-1,1,3,-4,1,5,4,-8,8,4,-7,3,3,-1,-6,-8,3,2,-3,5,6,1,-3,-2,-6,9,1,5,4,6,8,-9,-3,-4,-9,-2,10,5,-4,-2,-7,4,-3,-1,-4,8,-3,2,10,-2,-7,-4,-8,8,-7,-2,3,2,4,4,-2,-1,-1,-9,-9,8,5,-2,-10,-7,-3,1,7,-4,7,-1,10,4,-5,10,3,-1,-1,-3,5,8,-1,6,4,-8,-5,2,3,9,-8,-3,9,1,-8,1,-8,-1,-7,4,-6,2,3,9,9,-5,6,-8,-3,7,7,3,6,-2,-1,-6,-1,8,-4,10,-4,-10,3,9,9,7,3,-1,4,-4,2,-3,10,-8,8,-8,5,7,6,-3,-2,-10,10,4,7,-2,7,1,-7,-2,9,9,9,-1,4,9,6,-10,3,2,-3,-8,-10,-10,9,1,-3,9,8,7,6,7,7,8,-3,-9,-5,-7,-5,-1,8,-2,4,-4,-3,-6,7,1,-3,4,-9,10,-10,-10,-3,-1,5,-5,7,1,10,-9,3,1,-6,1,9,-3,8,6,-6,-4,10,-10,-7,-5,10,-4,-3,-8,1,8,1,-9,-7,-10,-9,6,4,-6,-8,-9,-6,-3,9,10,1,8,-9,10,-1,1,-5,-1,4,1,10,-2,3,7,-7,10,5,1,-6,-10,-1,6,9,-6,-7,-6,-7,5,-4,-1,-1,10,-10,10,1,-10,-4,-10,-4,-7,-5,7,-9,-3,-7,5,-5,4,3,-1,7,-9,-8,3,7,-2,-10,6,3,4,6,-8,4,6,7,4,-9,-2,-1,-10,4,3,-10,7,8,3,-1,-5,-2,-2,2,-10,8,9,-10,8,-10,-10,-9,6,-8,-3,10,6,1,-1,-6,4,-5,-3,-4,9,-1,-6,7,8,-3,-6,1,4,-2,4,6,-9,-5,-5,3,-2,-4,5,-4,-7,-3,1,7,-7,2,4,-3,10,7,-6,-1,5,1,-7,2,-2,-10,-1,10,-3,-9,-10,-2,-10,-8,-9,7,6,-1,-10,10,-10,-7,-5,-8,7,7,-10,10,10,-8,-8,-3,2,-7,7,-6,-8,-7,-10,-3,-2,6,3,-6,5,2,-9,-10,-8,-5,6,3,6,7,5,-5,-2,1,-9,6,8,-1,-2,-10,-8,7,-8,-6,-10,-10,-4,-2,-8,-2,7,-2,8,4,4,10,10,-4,6,5,-4,1,-10,4,3,4,4,6,1,9,5,5,-7,-6,-10,8,-5,-2,1,2,2,5,4,-5,1,-10,5,2,6,-4,-6,-2,3,-6,2,10,6,7,9,4,-7,-8,10,4,-7,-2,-1,6,10,8,-1,-5,6,-8,-5,-6,-9,-5,-6,4,-7,8,3,-2,9,-7,10,9,6,-2,-2,-3,5,-9,-9,4,-3,4,10,1,7,10,-3,-5,8,10,-8,-2,-3,5,8,-7,-4,7,6,1,-9,3,2,1,-7,-4,3,9,-9,-9,-4,7,7,1,-3,9,7,-2,-9,-1,-3,1,-10,-6,-7,-9,-9,-10,-2,10,-5,-7,-8,-1,3,5,-8,-4,9,1,-2,8,7,-10,8,4,8,6,-2,4,3,-3,-6,-1,-6,-2,1,2,7,-8,-3,-8,6,8,3,3,-1,-6,3,5,-10,-10,6,-10,5,8,10,8,10,-4,-7,-10,5,-7,-3,-10,9,3,-1,8,1,-5,-2,7,-10,-6,7,-5,-1,-3,-5,7,-2,-1,5,10,-7,-7,9,-10,4,-5,-1,-5,5,9,2,5,-8,6,8,-9,2,-4,1,-1,-2,-10,-9,7,5,-3,2,9,-4,5,-3,-7,-2,8,-6,10,7,3,5,7,6,6,-10,1,-2,-8,-1,-1,-7,-8,-10,-5,10,-3,9,-6,-10,4,9,-3,-2,-9,-7,7,1,-9,6,10,-1,3,-4,5,-3,-3,-4,7,-9,-8,7,2,-1,-3,-4,-4,-7,-5,10,-5,10,-7,-6], dtype = "int64")#candidate|12305|(2002,)|const|int64
var_12306 = relay.var("var_12306", dtype = "int16", shape = (350,))#candidate|12306|(350,)|var|int16
const_12307 = relay.const([-1.058682,0.985940,-4.811936,6.459341,5.536951,-5.755260,0.361762,3.805391,2.348220,-2.852462,-1.328696,-6.579059,-7.655332,-2.607829,-0.605231,-4.618294,-6.413002,1.856849,-5.200271,-4.286061,-5.064974,3.678489,-8.436914,1.375854,-5.624954,-5.666537,-4.048890,-4.250602,-4.328583,-1.031229,1.509965,1.887921,-5.043582,-6.796146,3.448867,-9.553381,5.417251,4.917160,3.654573,1.857745,8.484899,-8.242673,-4.355910,-7.306408,-1.184966,6.052897,8.787498,1.577065,5.924689,-5.089395,-2.044057,0.752158,-7.025994,7.642158,4.551570,-9.135342,-0.602189,-9.809238,8.677480,6.550259,0.572815,4.295499,9.831890,-2.547218,-0.430874,-4.356397,6.620971,-2.911768,-0.713852,8.557266,-3.436795,-3.210660,4.836529,9.602127,3.366576,-3.739082,-9.740917,0.052677,-5.663285,-9.494031,-5.022579,6.135888,-5.526476,-8.298349,7.470953,-2.006712,1.772207,9.104008,8.463915,2.911848,8.855335,9.986382,3.372325,-3.680611,-2.267163,-0.364417,9.894126,9.177073,4.704068,-6.287092,8.196802,-8.236081,-8.098768,3.443252,-6.987524,-0.805399,-2.261893,2.553257,7.938651,8.892728,0.380975,-4.428811,1.792499,-1.951494,0.865474,-9.625268,-9.554777,2.731144,-6.011587,-0.923924,3.730065,-9.709694,5.881139,3.581867,9.965797,-4.561425,-1.292804,2.811610,-0.790576,-7.944476,4.649061,6.520736,2.076838,-0.645737,1.871202,4.163113,4.779091,7.893994,8.842251,4.001144,3.609379,0.011134,3.769246,-8.749712,0.614843,2.455364,0.112815,-4.225379,-5.107420,-8.275627,1.689679,-0.943614,6.320478,9.076699,3.040740,-5.141251,5.219811,-1.338794,-8.275555,-7.633790,-5.335676,-1.652295,-5.315617,-2.268154,7.556604,7.939133,-1.114296,-1.393223,6.976009,8.423603,-1.622571,1.498376,3.468809,-4.461233,-8.940615,7.334651,9.594484,-3.405108,-2.150930,-3.880175,5.898704,3.876342,2.572941,-4.659727,6.742677,2.940342,3.596398,4.093730,3.848388,-6.626099,2.721316,-0.116048,-3.894880,-3.445185,5.958250,-4.710394,-0.650880,4.249225,9.464655,-6.409237,1.409773,1.997945,9.652706,0.015700,-9.098834,-5.190807,-0.787085,-0.133641,-7.629115,9.397315,9.921618,-9.459160,8.194745,-0.386677,1.184500,-9.189648,-4.467097,7.050052,-3.405811,-9.537571,5.061092,-2.662235,8.089778,-4.217811,-0.519195,-9.816152,7.774938,4.453060,-9.808645,-6.132958,0.474394,-4.041988,-1.331232,7.610305,-8.300803,1.267234,-9.998073,5.280967,9.858219,1.762799,-1.377794,4.703706,2.072532,-6.483060,-5.773024,4.055375,1.823348,-4.742239,-4.780628,1.982768,3.642184,-0.236072,-8.876320,-2.392088,3.786404,5.212544,4.645447,2.472162,-4.588573,-5.038602,-3.709925,-7.534871,9.549234,0.041015,-2.838302,-5.570786,-6.867846,9.462236,4.986620,-0.227348,-2.727599,-5.317390,-5.834425,-4.730055,6.978797,-8.564702,-0.903213,-5.155553,2.368040,5.546389,-5.291527,8.879767,-2.448134,1.838418,-4.346540,-9.098119,-5.577819,-7.102123,0.691144,6.792377,3.939201,-7.347305,-0.281507,4.148546,9.742815,2.148933,8.762146,-7.365021,9.042901,0.327794,0.892919,-4.482811,-4.433323,-1.116050,2.204438,-6.052288,2.710073,0.288704,6.381213,3.469896,5.639327,-5.704605,-4.107310,7.493627,8.850155,5.498013,-7.177326,-5.704718,8.133489,-2.011840,-0.630549,2.661265,-6.429454,0.554300,-6.827034,-5.452008,1.645945,-9.291231,9.450436,3.882674,-2.595540,7.433883,4.982028,9.105350,-8.924659,9.484504,-5.148781,1.458371,4.566891,3.069349,1.985156,-9.579035,-4.101058,-3.779843,-2.614932,-7.395252,3.579473,5.090360,3.564209,9.329981,1.829514,-8.216347,0.910968,-1.635859,-5.389251,-8.494651,8.508020,-0.465133,9.834522,6.680740,4.930749,-3.205884,9.761414,5.506557,-4.801874,-5.344179,9.781350,-1.141918,-5.608492,-9.753394,-6.267601,4.053372,3.496540,0.019804,-4.496301,-3.834599,1.538873,-1.007818,-2.739483,9.533222,-4.152593,-7.839383,3.934526,4.137817,1.740452,-8.930188,-6.858813,9.455236,-0.766353,4.306693,3.889193,-0.557228,-7.550202,8.487926,-7.264855,-3.234489,6.270197,-3.928257,0.157292,-0.886524,4.210082,-8.641469,-4.374859,8.362263,-3.386560,-8.915781,-8.139483,-1.810444,6.742703,-4.935665,5.533192,2.375648,0.970088,9.112479,5.989715,-0.720817,-7.457322,-3.983278,-8.356248,8.695968,-2.146779,7.760605,-4.083281,-1.468287,0.110622,0.027022,3.129026,2.407274,9.885747,1.101149,0.076634,8.353683,-7.184605,-5.289227,-6.888922,9.651335,5.850061,8.518031,7.983444,-9.269931,-6.111368,1.006545,-0.855733,6.989277,1.864268,-3.888542,-5.542253,-2.662348,4.466219,2.950166,8.520391,2.209565,1.181394,-0.899168,-6.425106,-0.705196,2.509962,-1.296562,-0.025296,8.463469,-7.071864,-0.311849,8.996063,7.381889,-6.494376,-4.311786,8.651269,-7.229500,0.397369,3.134371,9.962916,-2.965921,9.482362,-1.777669,-2.220995,1.508028,2.695220,0.799162,5.380968,-9.466972,-0.201781,2.307663,-8.528057,-9.119754,-9.213505,7.145467,5.336368,-4.428253,-5.154697,4.840315,-2.770150,5.177106,-9.069832,0.324005,1.543922,5.538933,-6.865610,3.026593,7.312153,-8.094648,-5.848331,9.823048,-2.758768,-9.075553,6.084706,4.629964,1.684478,8.911153,-7.638582,5.349396,-4.475207,8.743186,8.164469,3.414457,-2.693435,-2.317032,6.689089,7.687444,-3.356492,-5.798751,7.902996,3.947097,-4.702976,-2.467168,0.279277,-5.337048,9.557831,4.891221,5.116543,7.411867,-1.843797,-0.604841,6.113605,3.065021,8.138691,1.027949,-0.256762,8.390019,-2.051758,6.254593,9.931401,4.921581,0.537677,3.718881,-9.326369,-1.509560,0.187311,-4.400729,-5.928499,-5.513346,-0.482389,-9.517215,-1.854709,0.627596,-1.800932,3.944994,7.027650,-6.563756,1.517828,4.068175,-6.352302,-6.830324,-1.118096,-2.818121,7.082947,-6.280542,2.713257,-3.212004,0.522102,-7.710680,-5.682661,4.440696,-6.503724,-7.801301,-7.505134,2.526847,9.195969,-4.547347,1.429736,1.211987,1.573158,-3.318348,-1.157354,-5.088180,-2.941379,3.289838,-8.196228,-6.432414,-8.848835,-5.298738,-6.337325,4.433698,-0.552640,5.956449,8.031170,-8.270615,0.713936,8.760529,0.096824,0.761456,-0.351600,-2.588091,1.544975,6.083762,8.256827,-8.895043,-4.552617,6.290504,0.383200,-6.588936,6.554481,7.330516,7.669774,7.719513,4.593905,-6.101028,1.631705,-6.067377,-0.282336,2.587941,-9.771459,0.620038,4.223810,4.167398,-3.286931,0.390801,-0.691227,-3.058983,5.589905,-7.728343,-3.377072,-4.878581,4.782153,-4.172484,9.837307,8.060577,-8.910882,-2.603450,2.061637,-5.647651,4.636678,-4.067637,7.842271,0.103258,-4.235433,8.750464,-4.536164,-9.113175,-7.386447,5.378575,-1.987823,1.623668,-8.571711,6.380511,7.684356,8.238870,6.607983,-8.452524,-1.828167,-6.659687,7.588293,2.139444,1.185365,2.926257,-1.094173,9.648483,5.428722,6.352261,-2.684540,-6.752005,7.877994,-4.939822,6.884150,0.101200,-5.236175,-1.525948,7.484889,-5.186820,8.856493,-0.604061,-6.198880,8.400857,1.215349,3.475732,6.776576,5.187580,6.646890,8.242502,7.746821,-3.689684,-0.101252,4.345011,-1.127666,5.500861,-4.227784,-3.484497,2.979707,-6.308487,-6.169179,1.680975,3.323061,-6.111254,-7.581005,5.706476,-9.888900,-7.319639,-6.948581,-2.234849,5.421870,7.977828,-4.528794,-8.734581,3.700887,-4.318411,0.632952,4.449660,-9.999042,1.197618,4.533810,-4.016137,3.723301,2.001610,6.620352,-3.678217,5.660511,-9.166068,6.984013,6.231829,1.805614,3.889789,0.520850,-2.554788,-8.438138,8.989891,-4.754066,-1.132880,-7.171636,-4.906124,5.670409,-9.426648,-9.677439,-2.088584,7.693723,-6.373421,1.255697,0.031790,-7.656388,8.784760,-2.340383,-0.870684,-4.149508,-1.231895,-7.577976,-3.351944,0.873122,-6.346227,8.868631,-3.424637,0.606977,-3.133214,-7.604683,6.421694,3.743761,2.926602,6.053325,-0.618624,-4.062392,-6.833676,8.081272,6.209224,5.056806,-5.375810,-9.688552,-4.533874,6.406306,4.275454,-3.427530,-0.398248,1.456008,0.638040,-1.684994,-6.767700,-7.132600,7.862659,-3.598237,2.143079,7.169672,-7.293057,-0.461627,6.976298,4.302116,3.546833,0.607832,7.410998,1.286948,-2.535276,8.898152,6.173388,0.283075,1.651690,4.112502,-3.328670,6.379004,-7.936050,4.903772,5.372928,-0.013227,-1.488410,7.303723,-5.706606,8.597860,-6.582424,-6.040579,-8.424608,-0.185259,7.982237,-8.011682,-7.720844,-5.613081,8.800536,-3.865175,1.823627,4.844451,2.885317,6.719583,-0.142209,-5.376010,3.442223,-7.489915,-2.073369,-5.738424,-3.240582,3.632263,-1.340382,6.405185,5.880017,-7.204262,9.941609,7.333432,-8.902018,-8.837491,7.870156,1.098294,7.003847,-8.265837,1.600556,4.208622,-6.900487,-1.699113,6.671190,-5.613853,-5.031777,6.364093,6.877575,-9.158512,5.604342,-1.567511,2.964335,-1.734036,7.654460,-8.296252,4.320328,-7.757308,8.142360,-1.045720,-2.846381,5.191237,3.311499,-4.233282,3.192836,0.539879,-2.533873,5.422931,5.536708,-2.314544,3.220996,7.881901,7.615394,-7.630908,4.243927,0.134762,6.475518,-9.048352,4.298208,8.470925,9.489673,7.875380,-0.048375,8.377685,-2.092019,-6.067130,-0.989371,-2.839586,6.079574,-7.158485,9.890893,8.869794,8.793306,-5.872579,-3.560107,0.820299,-1.205836,9.333243,-3.875722,-6.147810,7.510245,-6.288853,8.672086,0.582012,6.491956,3.612464,7.836522,0.613053,-6.041015,1.106893,-4.334986,-3.995836,1.172451,0.056672,-8.254759,2.374109,5.095976,1.313680,-6.389865,6.569801,0.184504,3.298003,0.949695,8.857542,-1.632542,9.459558,0.872305,2.659281,0.638104,-2.714142,-5.434586,3.819434,7.424824,-6.187448,3.309746,9.392340,-8.086913,6.501900,-1.198608,8.475968,8.887938,8.195026,-8.490701,-0.257850,7.881522,4.215666,-9.875460,0.026060,-1.537500,0.152797,-2.854038,-4.405853,6.519724,-1.686663,-5.830432,-3.665393,-5.159559,-3.924502,-1.522074,6.982109,-6.869803,-9.060727,8.667124,-6.360455,2.604216,-1.826232,4.333566,1.077894,-0.778314,-0.845626,7.423595,7.210065,-4.298221,3.861201,-1.598032,-8.483431,1.618284,9.815652,3.294878,-9.279905,3.659269,-4.941686,1.031024,-6.367540,0.129612,-7.607671,6.653772,7.057875,-8.618040,4.470772,6.473206,2.809974,-4.962932,0.282802,-5.437298,-5.049070,-9.269399,-6.944893,-4.645326,-5.630348,7.933522,1.205251,-2.156646,-2.071456,8.832176,6.103556,-1.410818,7.745663,9.247868,-9.522440,2.790722,7.785221,7.727553,6.250201,-5.706363,3.591094,5.972390,5.973041,3.773563,-6.508408,5.905462,1.751531,-3.051186,-0.735797,-5.829169,2.968058,7.486078,3.608476,5.014331,8.585719,-8.420919,7.032947,1.029382,8.239360,6.602050,8.901469,0.160632,-4.160560,7.569734,8.328368,8.659369,3.073019,-3.796596,8.048976,-4.781832,6.562549,6.351111,-3.808928,4.336751,-7.001909,8.703138,7.226689,-6.336147,-9.211948,-6.596638,9.161486,-0.937449,1.086534,-5.595320,-5.043680,2.302639,5.433313,1.747570,9.230677,-8.588249,7.886107,3.158727,-3.443658,-3.358785,9.845224,7.037086,-3.559751,-0.613477,-8.917828,-1.416081,8.525443,-9.807840,-8.456642,-5.617694,9.574451,2.959519,-9.241803,7.230907,0.111417,7.623497,9.855038,8.468118,-2.714658,2.616821,-3.637951,-3.967518,9.542819,8.997441,-4.844149,4.897274,-2.886422,-4.084250,2.304957,3.423535,2.114245,0.052489,8.852228,-4.178146,-8.698322,-8.217840,4.287513,-5.661218,-7.120594,-1.708753,8.985210,-4.382640,0.496311,-5.244378,-6.432215,7.876824,-5.793008,-7.348470,3.156143,-8.557390,-8.780472,3.301591,2.087278,-6.241941,6.452109,-5.411677,-6.125779,-6.622440,6.858928,-0.637665,-9.755386,7.037036,9.745219,8.112264,-6.850349,-0.013928,-3.227429,-9.879033,-4.999226,8.796873,2.512439,-9.767190,-7.354892,0.996079,-1.963613,-7.971982,0.355134,4.873763,5.484170,-8.454729,-6.122925,2.486943,-7.313856,-5.192436,-3.357194,-0.542855,9.516759,-5.949598,9.959329,5.430352,0.033506,-0.829717,0.767216,6.012797,-4.033880,-4.011809,8.546185,-4.656234,5.114306,-5.879731,-5.630836,-8.445493,7.344044,-3.190552,-4.289899,-3.854127,2.465436,8.539153,3.962509,6.106855,-6.572400,-2.829591,2.092607,0.720851,-0.778544,5.004317,-9.393670,-6.848494,-8.122896,-5.930340,9.869891,-1.760942,7.867013,9.678514,2.763382,0.073719,7.664774,4.825087,-2.447251,3.661481,-1.720254,7.197538,-7.988542,-1.659650,-8.874078,-1.532004,-3.129010,-5.383274,-2.206364,-5.372052,9.309504,1.662395,8.398280,0.347376,9.978866,-6.168422,7.352556,-3.099410,-0.332358,-2.376437,1.855892,-8.343740,-3.833828,2.412859,-0.974989,-4.206037,1.913034,-9.273021,-6.813524,-9.683408,4.418226,7.672510,8.547213,-1.927709,-0.599790,-4.103528,7.548126,8.309296,-7.915421,-4.298258,-6.006607,-2.150947,-1.705531,1.347498,-9.272152,-5.087237,-9.011089,0.115442,6.054563,4.373643,-9.142546,7.900034,-7.852919,6.723722,-5.114675,-0.640322,-9.691406,-1.520302,4.118188,9.606299,-2.457174,2.709367,7.831061,-6.124627,9.731109,7.403503,9.139517,3.687324,9.673266,-6.319197,5.553779,9.278078,8.224844,-2.576614,2.656960,4.943624,-4.631760,-2.235008,8.328016,-0.214095,5.707813,-8.359583,0.682464,-7.777875,0.873427,-3.267813,6.954773,-7.463784,5.370059,-3.058598,4.304086,-4.659499,-4.066705,7.795099,6.409301,-0.738444,8.441844,-5.580913,5.448755,-9.019324,0.420322,7.231599,-2.829609,-0.324884,-5.381229,-5.184144,-0.760961,0.058655,2.285155,-9.859464,8.331468,4.904741,7.463757,2.156271,2.676836,4.678785,-7.114755,6.748116,5.791849,-8.669872,-2.487392,7.421842,-8.519012,-7.004671,5.327440,-0.703874,2.298237,-2.767268,2.734755,5.428393,8.816782,-6.573595,3.226868,-7.726729,4.947468,6.234888,7.240611,-7.146541,1.890415,9.107435,9.006156,6.429069,-1.488083,1.966144,0.274502,-0.719224,-7.114285,-8.475871,-5.437575,-7.011027,-7.915039,-3.622584,-2.541661,5.948778,6.416028,-5.869721,-2.006675,7.677283,3.280342,9.589430,-0.888964,7.800465,-6.559623,-4.185104,-0.559294,-8.966209,-8.259735,-9.913970,6.604579,0.662518,1.735563,7.321483,5.345618,-1.846344,9.878421,-6.356020,8.428926,-3.599889,9.385613,-5.624203,7.296454,-4.550414,6.988278,-5.195783,-0.946495,2.404209,-5.187864,-6.552405,-6.531307,-2.021676,-6.334551,0.472396,1.758195,3.540842,-7.297776,-1.133372,-5.986998,-7.262617,-3.219201,-8.070971,-4.884065,-7.510223,-7.291097,-1.966509,4.651280,-9.659080,3.941797,4.544555,-2.164008,-5.128823,-0.707464,-1.986654,0.874445,6.253692,-9.800274,8.866171,6.976979,6.735957,-4.604124,-8.782682,-1.425490,4.135369,-6.127821,-0.459166,5.830752,-7.795420,-9.103244,-1.087116,9.343566,4.170403,5.462473,-5.938354,-4.585164,-1.327617,1.732572,-8.854611,5.590625,-3.344506,-8.888297,-4.923332,7.079654,7.165529,-5.085830,8.510780,1.493511,0.521227,5.448111,-1.898591,0.200853,-6.288493,4.219654,-6.151483,-3.015337,3.280008,-7.418765,-5.685386,-7.315311,3.503694,1.004380,-3.221672,5.546864,6.660833,3.966887,-9.593080,-9.394138,0.801838,0.276644,2.157146,-3.123888,-3.784017,-2.201323,-1.257431,-6.772949,1.280786,0.819759,9.802228,2.631004,7.118819,-7.627512,2.968909,4.937424,-4.134725,1.257596,-5.367176,-7.379927,-8.850855,-1.462787,9.114995,-0.221980,-9.169914,-8.125899,-9.436214,4.130703,-8.095538,5.759064,-3.706617,3.925750,9.985830,-7.782453,-4.240207,-6.319610,-3.655690,-8.818620,7.913406,-9.809198,-2.139550,5.188836,9.915093,-7.646350,-0.350834,3.924091,-8.199088,-6.725301,5.222736,-7.330804,0.683679,-5.146466,7.280956,-3.514631,3.891208,-8.922834,6.744461,-2.338681,-2.036060,2.963473,-1.425400,-5.909326,2.040465,-6.743709,8.806419,-4.517832,5.136947,-8.358340,3.510106,-6.321888,-3.782498,-2.351758,-9.685932,-9.145842,-0.868493,-5.244433,-4.912685,0.321089,2.408128,0.741485,-8.125080,1.310599,-4.000161,-2.480230,-0.087486,2.585718,-3.385602,5.890114,-6.815529,8.386857,1.162024,-0.353145,-6.729975,0.314873,0.758508,8.895743,-2.035208,-3.716931,-5.109054,6.667034,8.176538,8.269338,-3.180494,-4.350949,-2.216950,6.298913,7.876574,-6.064886,-3.920082,5.218357,-4.873672,9.126786,-4.752286,7.465206,5.412343,1.059987,4.457612,-7.284034,6.019377,3.456989,-1.630734,3.314245,-2.997682,-2.287008,2.752077,-0.633723,-8.292604,6.651222,5.350444,4.252042,8.902982,7.464774,-2.747488,-0.971715,1.322776,3.169885,7.284943,3.348629,-3.262704,-3.998833,-0.954784,4.911389,-0.227796,5.324783,-4.487849,-5.880603,1.852257,-1.099065,8.445689,-7.623496,-7.734067,1.495812,-6.910001,8.473144,-0.543772,8.700242,5.055001,8.156586,2.781078,3.825366,3.092359,2.409759,-2.081829,-5.053554,-4.420943,-8.943538,5.626140,-2.362124,-6.040011,-6.586331,5.469897,1.970685,4.837782,1.223128,5.908870,-2.614580,-8.344397,-0.315040,1.474898,3.825891,1.229997,1.138509,6.674267,-8.522280,1.090353,-3.721276,-7.554197,6.113333,-5.607075,-6.732201,-6.805842,-3.604017,-7.196038,5.283325,-9.686799,-7.783515,-7.395397,-9.761107,3.094584,6.631222,1.064162,-2.088247,-0.163902,9.410340,-1.796726,-2.649041,-2.054709,1.664949,8.704643,0.169505,3.578635,7.524851,5.603009,7.182365,3.647373,9.897638,-8.719650,-5.187767,-2.845390,2.144655,-5.975895,1.231017,3.677424,3.794034,4.109995,-4.473241,-2.964074,-7.339458,1.059838,8.458849,-2.429420,7.061589,-3.790696,5.650010,-6.866878,3.279252,3.804167,6.243057,8.648585,4.496445,4.178024,-6.402714,-9.932348,8.338985,-9.653701,-1.562014,-7.605137,-1.385927,7.494551,7.532559,-0.834715,-8.404099,4.307811,-0.134026,2.576449,6.836426,5.706424,-6.260747,-3.707444,2.996501,-7.185857,9.837176,-9.834400,6.241638,-0.496872,9.363267,8.870983,-1.082179,2.665517,-4.164590,-1.758960,-4.705647,8.802331,3.497924,-4.680953,-9.846082,-1.541555,2.615350,5.313804,1.118008,4.558268,5.005704,-7.374045,5.609640,-0.861863,-6.840790,0.165217,2.232867,-1.376267,-2.426957,1.589629,7.470437,7.541834,-9.728652,-4.985891,-8.027250,-0.165214,-3.870005,7.781106,5.435463,8.897018,-2.036265,-9.159550,5.266334,5.663779,0.643598,5.177206,-7.715745,-4.091671,0.151691,-8.448400,-9.262237,2.932178,-6.685137,6.276644,6.416882,1.136370,0.910444,9.388805,-3.639621,3.091864,1.019222,4.913977,8.428908,0.079511,-2.261619,-6.137493,-8.232559,6.906255,-4.842226,-3.321332,-0.014098,4.985277,7.350734,-5.685701,3.987592,-6.592455,-6.140139,9.497894,1.822182,4.511041,-1.101348,-5.112185,0.299678,8.855249,-2.504245,9.573373,-4.586935,9.084326,7.519850,1.796280,4.797309,-8.411324,7.600410,3.714725,-8.454764,-3.847594,-8.653010,5.070577,7.102795,4.946751,4.998425,-1.902732,6.666210,7.672144,1.433284,-7.820813,-6.792898,4.578261,-1.551123,-6.881948,5.107328,9.436990,-6.909714,4.132699,-7.394241,6.873210,-9.605334,7.094311,6.468896,-4.609812,5.317946,5.589956,9.519664,-2.271706,0.220802,-7.697287,2.280775,-2.974560,6.626759,2.655452,-2.745050,7.090654,-6.676029,3.133133,3.739407,0.517416,-7.272117,6.059507,2.981920,7.106486,-5.448462,0.465141,5.608168,5.495464,6.283251,-0.355102,-6.629438,-0.415284,-3.478802,-3.976309,-3.146440,9.477304,5.404916,-7.329886,-6.719536,7.077091,-3.756118,-0.571740,0.860564,-6.161356,6.234300,-8.369885,-8.089806,-2.712061,-4.383172,-6.042770,-8.137171,2.805675,-6.994610,-8.308471,2.770018,-0.243993,-5.347012,-2.897985,-9.300074,0.972107,7.451175,8.011702,-0.496447,9.310748,3.626151,4.483512,9.050767,2.140121,8.383948,-5.176233,7.466596,-0.361347,3.783701,7.771717,4.478253,3.982544,7.733539,-2.796613,5.866685,-0.392500,6.295338,-4.919586,9.055740,1.653794,-1.352752,8.420023,-0.987352,6.209556,-3.791050,5.132791,0.969435,5.899536,-1.842701,5.561788,8.144335,-2.594282,9.952132,2.451822,-6.414949,1.817614,-0.854127,-2.020535,-8.939098,-4.979246], dtype = "float32")#candidate|12307|(1950,)|const|float32
call_12304 = relay.TupleGetItem(func_3440_call(relay.reshape(const_12305.astype('int64'), [14, 13, 11]), relay.reshape(var_12306.astype('int16'), [350,]), relay.reshape(const_12307.astype('float32'), [1950,]), ), 2)
call_12308 = relay.TupleGetItem(func_3445_call(relay.reshape(const_12305.astype('int64'), [14, 13, 11]), relay.reshape(var_12306.astype('int16'), [350,]), relay.reshape(const_12307.astype('float32'), [1950,]), ), 2)
output = relay.Tuple([call_12302,call_12304,const_12305,var_12306,const_12307,])
output2 = relay.Tuple([call_12303,call_12308,const_12305,var_12306,const_12307,])
func_12313 = relay.Function([var_12306,], output)
mod['func_12313'] = func_12313
mod = relay.transform.InferType()(mod)
mutated_mod['func_12313'] = func_12313
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12314 = relay.var("var_12314", dtype = "int16", shape = (350,))#candidate|12314|(350,)|var|int16
func_12313_call = mutated_mod.get_global_var('func_12313')
call_12315 = func_12313_call(var_12314)
output = call_12315
func_12316 = relay.Function([var_12314], output)
mutated_mod['func_12316'] = func_12316
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10056_call = mod.get_global_var('func_10056')
func_10058_call = mutated_mod.get_global_var('func_10058')
call_12398 = func_10056_call()
call_12399 = func_10056_call()
func_10685_call = mod.get_global_var('func_10685')
func_10686_call = mutated_mod.get_global_var('func_10686')
call_12400 = relay.TupleGetItem(func_10685_call(), 1)
call_12401 = relay.TupleGetItem(func_10686_call(), 1)
func_9283_call = mod.get_global_var('func_9283')
func_9285_call = mutated_mod.get_global_var('func_9285')
call_12413 = relay.TupleGetItem(func_9283_call(), 0)
call_12414 = relay.TupleGetItem(func_9285_call(), 0)
var_12433 = relay.var("var_12433", dtype = "float32", shape = (6, 1, 9))#candidate|12433|(6, 1, 9)|var|float32
bop_12434 = relay.not_equal(call_12398.astype('bool'), var_12433.astype('bool')) # shape=(6, 1, 9)
bop_12437 = relay.not_equal(call_12399.astype('bool'), var_12433.astype('bool')) # shape=(6, 1, 9)
func_5789_call = mod.get_global_var('func_5789')
func_5791_call = mutated_mod.get_global_var('func_5791')
call_12438 = relay.TupleGetItem(func_5789_call(), 1)
call_12439 = relay.TupleGetItem(func_5791_call(), 1)
func_7585_call = mod.get_global_var('func_7585')
func_7592_call = mutated_mod.get_global_var('func_7592')
const_12441 = relay.const([-9.995751,0.399941,7.183863,-7.554426,3.743094,9.433966,-4.153981,5.690391,4.426288,7.345789,-8.318988,-4.674728,-6.903406,-3.836695,-6.906055,-0.254867,-0.787552,7.266515,7.881145,-3.493751,2.360256,8.177264,8.993686,-4.265113,9.478284,-9.520543,-3.932566,-9.258383,-0.209049,-8.115176,3.353929,8.559428,-1.295633,0.106995,-0.851351,3.244016,3.376768,9.715201,7.315887,0.138647,2.131645,5.359218,1.989185,-8.294336,-3.984852,-4.101170,0.942821,8.201894,-9.877042,-1.989328,-2.929317,1.410290,-4.401175,2.350321,-7.356379,-0.089903,-5.973297,3.123959,-7.736739,2.185225,1.065802,-6.468964,5.286693,-9.587227,-7.675249,-5.341483,-2.430614,0.939237,-9.055534,9.407060,4.508685,1.025384,2.766526,5.127611,-8.279104,-6.691971,-1.848439,8.040305,-3.973906,-3.106051,-4.106812,0.565981,-4.651414,8.131927,1.106338,3.390870,-2.490646,5.515848,9.782614,4.673643,5.505980,4.711050,-9.386154,-6.853525,3.172769,-3.303901,8.578853,-4.723559,-3.573197,1.372071,-1.331205,-9.200674,3.844495,-3.666386,2.485657,-2.019482,4.510461,-6.508451,-9.242746,-3.646541,5.714231,2.337504,0.467676,-9.614017,5.677643,8.577319,-9.640119,2.678083,7.656878,8.639517,0.442823,-5.126675,6.986411,5.339771,5.056346,8.530490,-8.417786,0.748439,1.056619,3.700872,7.592283,-2.999609,-7.878037,3.370837,-8.674355,-0.316073,9.760467,-6.613875,-3.743213,-8.299228,-7.990539,-1.587092,0.197457,-2.991256,-9.494370,7.301756,-9.429387,1.295655,3.285127,8.826578,9.008496,-7.291727,-6.232998,-8.519081,-2.845517,-7.775261,-0.572140,4.167156,-0.698542,-6.556602,0.994711,6.737376,-6.853839,-3.327923,5.173131,8.930131,-2.382947,7.110694,-2.130656,6.517109,5.422421,4.465069,-2.092189,6.013490,-6.750387,5.802500,1.904363,-0.072032,-2.198199,-9.415697,-6.861108,-7.629178,3.466370,2.804785,7.447838,-9.714553,-7.312137,0.675772,-3.426280,2.974428,-7.074716,-8.547664,9.104576,4.257014,2.445482,-6.445446,1.585090,-8.393917,-0.134359,2.877885,-2.361693,-0.051045,9.104579,-6.283355,-8.712847,4.606498,-7.487170,5.701061,-0.115864,1.414781,-3.380497,2.355771,5.720709,-5.097209,9.383890,8.486049,4.573592,-7.181565,0.142473,-5.241222,-5.096063,4.188317,6.342341,2.380314,1.621207,7.300128,-4.049466,-1.816108,3.137205,8.654710,-9.473521,-9.377590,0.190827,-8.064225,6.573658,-2.823539,-4.409207,3.528294,-1.366605,0.339243,5.780935,6.424342,5.370151,6.788351,-9.401489,9.384178,-1.349776,-7.738084,-3.009986,-5.775707,8.205499,-5.062778,-0.325146,5.228207,-6.866649,6.513275,-1.214185,0.143418,-0.051825,-7.542680,6.938953,9.973037,8.252795,2.176089,-3.850274,-0.154366,3.902259,-0.522639,-9.737703,-9.080831,-9.534663,-3.803197,4.567968,2.759428,9.271868,-4.353908,2.575283,-3.329821,-4.213664,7.361524,2.753357,-9.881506,-8.973581,0.990363,5.783080,7.594346,1.384753,-2.758187,0.109870,-5.604345,9.733976,2.958572,-4.461482,4.693407,-2.390242,3.857080,-1.893277,-2.740805,-1.517273,5.414332,9.153640,-7.615759,0.094541,6.796549,-0.532872,7.193890,0.551202,-1.527849,-0.270720,-5.973442,-4.627953,-1.701398,4.942696,5.294731,-0.343927,1.913475,6.960881,-3.497178,-8.247819,3.275753,7.983527,-3.292895,-6.007437,-0.317240,3.331253,3.889967,5.742967,-2.713233,-9.353671,-8.473616,2.533769,-6.552777,9.463649,9.072880,7.810604,-9.016046,2.984188,2.330782,-7.777616,-3.039325,-8.407707,9.396541,3.766702,-2.309311,-3.002219,2.126009,1.326350,-6.074014,-2.367609,-6.431611,5.371993,7.338155,-2.018587,-2.121977,-2.192106,-1.231494,-3.208162,-8.921496,1.553529,5.636714,-3.321390,2.763358,-0.831641,-7.867954,9.327874,-0.446994,-5.269438,1.897772,-6.333758,8.807511,-7.162509,7.793957,3.474389,1.239086,5.059587,-7.589630,5.230436,5.941769,-6.758333,-6.464434,-0.751665,-8.063297,-1.695819,3.970910,0.535648,-6.223705,-9.816866,-6.263458,2.588727,7.801263,-3.551669,-4.375726,0.696122,2.950197,-6.324574,-3.566171,4.591895,2.928758,-3.321677,-9.559481,8.711492,-0.327811,8.809727,3.597891,-0.158954,1.022000,1.963830,-5.813354,6.554147,-0.196483,7.026797,-1.100409,8.351399,2.203043,6.757224,2.156829,-8.880010,-1.738493,-7.372084,-0.057787], dtype = "float64")#candidate|12441|(420,)|const|float64
var_12442 = relay.var("var_12442", dtype = "int32", shape = (36,))#candidate|12442|(36,)|var|int32
var_12443 = relay.var("var_12443", dtype = "int32", shape = (1792,))#candidate|12443|(1792,)|var|int32
const_12444 = relay.const([4,7,3,2,7,7,2,2,-8,-9,-8,2,3,-1,-9,-8,-8,-5,-6,6,-7,-7,4,-10,-4,-9,-1,-2,7,9,4,9,4,-3,-2,-4,-2,10,10,-10,1,9,-2,-6,6,3,3,-2,-9,-7,-3,-10,2,3,-1,8,-2,-6,10,3,7,8,9,7,6,-9,-5,-6,-10,-8,-1,5,-3,-10,-2,1,-1,1,8,8,-4,-2,7,-5,-6,5,9,-3,-10,-7,5,6,-6,6,7,-7,2,-1,7,3,10,1,10,4,-6,-4,1,-7,-7,1,8,6,-7,-8,-6,8,-2,7,-6,4,2,-4,-8,-9,5,-10,10,-4,6,1,-4,-7,-1,-10,5,-8,-2,9,-3,-4,10,1,1,-7,9,8,-7,2,9,-3,-6,1,-3,-7,-3,-3,6,-3,1,-5,-7,4,7,-2,-7,-1,5,-10,-6,-5,7,-2,-3,-1,6,-7,-8,7,-8,-10,-3,10,4,-8,-5,9,-2,7,7,-4,-2,4,-1,-5,-9,5,-7,3,3,2,-6,-1,2,-6,6,2,10,-9,-8,-1,9,-2,-1,6,8,-3,8,7,-4,1,-4,7,2,6,-8,10,2,-4,8,-8,-7,-3,7,-7,2,10,-2,9,-4,-7,-1,-2,8,8,3,2,-9,6,-4,8,2,3,6,1,8,-2,2,2,7,6,5,3,3,-9,-2,-5,4,10,4,8,9,1,-4,-1,-2,-3,3,9,5,4,-5,-4,9,-9,-7,-4,-8,8,-7,-5,6,-6,-3,-6,4,-8,9,8,-9,-4,7,-3,-3,9,1,-9,-3,7,-1,-6,3,4,5,-3,-10,-1,4,-3,8,-9,7,8,-4,-6,8,-7,-4,-4,-4,5,3,-2,1,-4,-7,-8,10,2,10,8,-10,10,8,4,2,-6,5,-10,1,-3,-4,3,-6,-7,-3,-4,-9,-8,8,-9,-9,-5,-10,1,8,2,-5,-5,9,5,8,6,4,4,-6,-4,7,1,4,-1,-6,-2,9,1,-1,2,6,7,-4,3,6,-6,7,-2,-7,-1,7,5,-3,4,3,-5,5,-2,-3,-8,-2,-1,2,-10,-6,4,-6,-9,-5,5,10,10,10,-6,-7,-5,1,-10,9,3,-10,-1,6,-5,7,-1,-10,4,-5,6,-7,2,6,10,-1,3,10,10,-7,8,-5,-9,-2,-6,5,8,2,9,-2,-3,2,6,1,-9,-1,10,-8,2,6,-8,9,-1,5,-8,9,-2,7,-4,-2,-7,-9,-10,10,8,9,4,-1,-10,7,3,-7,-6,3,-5,2,-9,-2,8,10,-7,2,-6,8,-7,-1,-10,7,7,7,-6,-5,-10,5,-7,5,-1,-7,8,-2,2,-7,-4,-10,6,-2,-6,1,-1,5,-9,-4,-5,-9,8,-8,-5,-3,-1,1,-10,-4,-9,2,1,-2,6,-1,6,-4,1,7,8,8,-4,-9,-3,1,-9,-4,10,1,1,-9,-3,-5,6,2,-3,5,9,-4,-8,4,9,6,-5,7,10,-3,2,5,10,-4,-8,-2,7,-9,10,2,5,-1,6,4,-8,7,7,-10,3,-1,4,-10,-9,6,4,1,8,8,9,-2,-3,7,-2,8,-10,6,4,7,-5,-3,2,10,5,8,2,-3,8,4,8,7,2,-5,9,8,-6,-7,-6,-10,7,-8,-7,-5,-2,7,10,7,-7,-8,4,-4,-10,9,-10,-8,-9,5,7,3,8,7,-5,-1,9,-1,-7,3,8,3,5,4,-6,-1,8,10,5,-5,6,-3,7,-7,-10,10,-4,-7,-4,2,9,-3,-7,-4,-2,1,7,10,9,-8,10,7,3,-1,-5,9,6,1,-4,-6,-6,-4,-10,-10,-6,7,10,-7,8,-2,-3,-6,-2,4,4,2,-6,6,5,-4,4,-6,-7,-9,-3,9,1,-6,-2,7,-8,-9,-9,10,-1,-4,8,-1,-3,2,-1,-3,-4,-3,9,6,3,4,10,-6,2,10,-2,-5,-3,-10,-5,7,3,-10,2,-2,9,6,1,4,6,3,5,2,6,2,-6,-3,-1,-1,-6,9,-8,9,-9,-3,7,2,6,1,5,-5,4,-9,-10,-7,3,6,-1,3,7,6,3,-9,-1,1,6,8,-4,5,9,-2,8,-6,-2,10,6,-7,-3,8,-7,-9,-8,2,-5,-6,9,-1,-6,7,-7,-9,-4,-3,-3,10,-3,4,7,1,-3,8,-9,-2,-5,4,7,-6,2,-5,-10,6,3,3,5,1,5,3,-8,8,3,9,9,-10,-5,-5,-9,8,-10,3,-9,3,-6,7,-1,-1,-10,4,-6,-10,9,-5,6,-2,8,-2,-2,10,-1,-1,-5,7,-3,-5,-3,-7,10,-3,-7,5,-10,2,-3,-9,-3,-9,3,6,-6,4,-7,4,-4,6,-3,9,-9,5,-5,-6,-7,7,-2,-7,-3,10,1,-7,-2,-8,-5,8,6,-4,8,-9,7,-4,-8,-7,-1,1,2,6,-3,7,-9,-2,8,8,-9,2,3,-7,6,-4,-1,-8,-4,-5,1,7,-8,-7,-8,-4,-3,3,2,-9,-3,5,9,-7,10,-4,-5,-2,-1,-1,5,-5,10,8,-9,-2,1,6,-3,-3,-6,-5,-9,6,-6,-8,-10,3,5,4,8,6,-5,9,7,10,-10,-4,2,8,7,-2,3,1,-7,-9,2,6,8,-5,9,8,-4,10,-4,-5,6,-2,-5,4,1,-10,-1,-2,2,-3,5,-2,-6,5,1,-5,-1,4,1,9,1,4,-6,10,4,-10,-9,-7,7,6,-6,-2,7,5,6,-7,5,-1,-8,10,-6,-10,-5,9,9,-9,-8,3,1,-3,-2,-3,4,8,5,-1,-10,-6,-7,8,-4,-2,10,-6,-1,-5,9,-10,2,-4,-7,9,-7,-2,-2,10,-7,-6,8,-7,3,6,2,7,-5,2,-8,-9,6,7,2,-5,2,6,-5,2,7,-2,-3,6,1,-10,-8,2,-8,5,-8,9,-4,-1,9,9,-9,-8,1,10,1,1,-9,-5,-3,7,1,-5,-2,-5,10,-9,-6,-3,1,9,5,1,-4,-1,9,2,5,-6,-4,9,5,-2,7,8,-1,1,-6,10,-1,10,-10,-9,-8,5,5,5,-4,-9,-4,-10,-3,-3,-3,10,5,-3,2,3,6,1,1,-1,5,-5,-6,-4,-6,-9,-1,1,1,-2,-8,5,10,-7,-4,-6,-10,-7,-8,7,-9,2,-9,5,-9,-5,9,-10,7,-2,8,9,-2,4,9,-3,10,-6,8,-9,8,3,5,6,1,-3,7,6,-8,9,-2,6,8,10,-3,3,4,-9,-9,1,5,10,-3,1,-5,-9,-5,-8,6,10,-7,-3,1,10,-6,-2,2,-5,8,-8,-8,-1,-1,7,7,9,4,-6,3,-7,-6,2,-2,-3,-2,-7,-10,-3,-9,8,-10,1,8,-1,3,2,8,7,2,4,3,-4,10,-3,2,7,8,-5,7,-9,-3,-2,-6,3,-1,4,8,6,-7,-9,8,-10,7,-3,3,-9,-5,-9,9,1,-9,-3,-2,7,6,8,-5,2,-6,-8,-1,7,-5,-6,-8,-4,1,6,-6,5,-10,-8,3,-6,-9,10,-1,-5,-1,3,-10,-8,4,-6,-8,2,8,-2,-2,-2,5,10,-6,4,-5,-9,-2,8,3,-6,-7,-9,-10,5,-1,4,8,-4,10,2,-3,-2,9,2,-4,-1,7,-7,10,9,-1,-9,-9,-3,-1,4,-7,-2,4,6,-2,-2,-6,-8,-3,2,-1,2,6,-7,-10,2,7,4,5,3,7,-8,4,-1,-2,10,-4,3,8,6,3,7,-9,3,-9,3,2,10,9,5,-4,5,9,-7,-10,-7,10,-2,3,5,4,9,-1,-3,2,-2,-5,4,4,3,4,-6,-1,3,6,5,6,-5,5,-7,-8,-3,5,8,-9,-3,8,1,-8,3,-4,3,6,-7,9,-8,-3,1,8,-7,-8,-4,-2,8,-9,5,1,3,9,8,4,-5,5,-4,5,2,4,2,10,7,10,3,1,1,-6,7,3,8,8,-4,5,-6,1,6,-7,9,4,-1,7,-6,10,-4,3,-4,-6,-4,2,2,8,-5,1,-4,-7,2,8,-7,-9,-3,3,-5,-4,1,-9,-1,1,1,1,8,10,-2,-8,-7,9,3,-7,-2,9,9,6,-6,6,-8,-3,-5,-6,3,5,3,2,-8,6,2,-5,5,10,8,-1,5,5,-8,4,-9,5,-2,9,8,2,-3,10,8,-3,8,-7,7,2,4,-9,6,6,1,-10,3,8,8,-7,-7,-5,2,5,-5,-5,2,4,7,8,5,8,9,-3,-3,-3,1,-3,-1,4,-7,7,-2,9,-10,9,4,-3,-3,-8,-9,5,3,2,-10,2,-5,9,1,-9,7,-8,5,-4,10,-5,6,-6,9,3,-4,7,7,7,7,8,-5,-5,-8,1,2,4,5,5,9,3,6,-3,9,-10,7,10,-6,4,-5,-1,-10,-5,6,1,1,-9,6,-1,-1,1,8,-9,8,8,8,-2,-4,-3,10,-8,-8,9,8,-8,10,-6,-1,-3,-6,-4,-10,-3,5,7,-2,8,1,-5,-7,9,-2,-6,-7,2,9,8,-2,4,-10,5,-5,3,10,6,-1,-3,-9,6,7,1,-5,3,-1,7,9,3,-4,-3,-6,-10,-5,2,3,10,-7,5,-10,-1,7,-4,9,2,6,6,4,9,-2,-3,-10,-6,-4,10,9,-6,-9,-5,-8,10,10,-7,5,-4,-8,3,-10,6,-9,-7,-8,-7,5,-3,-8,-8,2,-5,-3,3,5,-9,6,10,-2,6,-2,-4,6,2,2,-2,-5,-1,-5,-10,-2,-9,4,6,8,3,4,9,-9,-3,10,5,-4,4,3,-4,-4,-5,-2,-2,2,2,-7,7,-1,6,8,9,-10,-3,-8,9,-2,8,-5,6,-10,-3,-1,-2,1,-6,-1,-2,7,-5,-4,6,-1,8,7,-3,-4,5,-9,8,6,10,6,-10,9,7,-10,-7,-9,8,1,-6,-2,-8,7,2,9,-3,-3,-7,8,6,-9,10,-8,-6,10,5,3,2,1,-5,5,3,-1,-2,6,-7,-1,-5,-3,-9,2,-6,9,-5,1,9,10,-6,4,-7,4,-7,1,5,2,-9,-7,-9,3,7,4,10,9,4,-3,-6,-7,3,7,-1,9,-5,-5,5,6,3,-5,5,-10,9,-10,-2,10,-2,-1,-7,-5,9,5,-1,5,5,9,-5,-9,-4,-9,-3,-2,-7,-9,5,9,5,9,6], dtype = "int64")#candidate|12444|(2002,)|const|int64
var_12445 = relay.var("var_12445", dtype = "float32", shape = (182,))#candidate|12445|(182,)|var|float32
const_12446 = relay.const([False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True], dtype = "bool")#candidate|12446|(117,)|const|bool
call_12440 = relay.TupleGetItem(func_7585_call(relay.reshape(const_12441.astype('float64'), [420,]), relay.reshape(var_12442.astype('int32'), [36,]), relay.reshape(var_12443.astype('int32'), [16, 112]), relay.reshape(const_12444.astype('int64'), [2002,]), relay.reshape(var_12445.astype('float32'), [182,]), relay.reshape(const_12446.astype('bool'), [117,]), ), 3)
call_12447 = relay.TupleGetItem(func_7592_call(relay.reshape(const_12441.astype('float64'), [420,]), relay.reshape(var_12442.astype('int32'), [36,]), relay.reshape(var_12443.astype('int32'), [16, 112]), relay.reshape(const_12444.astype('int64'), [2002,]), relay.reshape(var_12445.astype('float32'), [182,]), relay.reshape(const_12446.astype('bool'), [117,]), ), 3)
output = relay.Tuple([call_12400,call_12413,bop_12434,call_12438,call_12440,const_12441,var_12442,var_12443,const_12444,var_12445,const_12446,])
output2 = relay.Tuple([call_12401,call_12414,bop_12437,call_12439,call_12447,const_12441,var_12442,var_12443,const_12444,var_12445,const_12446,])
func_12456 = relay.Function([var_12433,var_12442,var_12443,var_12445,], output)
mod['func_12456'] = func_12456
mod = relay.transform.InferType()(mod)
var_12457 = relay.var("var_12457", dtype = "float32", shape = (6, 1, 9))#candidate|12457|(6, 1, 9)|var|float32
var_12458 = relay.var("var_12458", dtype = "int32", shape = (36,))#candidate|12458|(36,)|var|int32
var_12459 = relay.var("var_12459", dtype = "int32", shape = (1792,))#candidate|12459|(1792,)|var|int32
var_12460 = relay.var("var_12460", dtype = "float32", shape = (182,))#candidate|12460|(182,)|var|float32
output = func_12456(var_12457,var_12458,var_12459,var_12460,)
func_12461 = relay.Function([var_12457,var_12458,var_12459,var_12460,], output)
mutated_mod['func_12461'] = func_12461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11456_call = mod.get_global_var('func_11456')
func_11457_call = mutated_mod.get_global_var('func_11457')
call_12477 = relay.TupleGetItem(func_11456_call(), 0)
call_12478 = relay.TupleGetItem(func_11457_call(), 0)
output = relay.Tuple([call_12477,])
output2 = relay.Tuple([call_12478,])
func_12479 = relay.Function([], output)
mod['func_12479'] = func_12479
mod = relay.transform.InferType()(mod)
output = func_12479()
func_12480 = relay.Function([], output)
mutated_mod['func_12480'] = func_12480
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11456_call = mod.get_global_var('func_11456')
func_11457_call = mutated_mod.get_global_var('func_11457')
call_12528 = relay.TupleGetItem(func_11456_call(), 2)
call_12529 = relay.TupleGetItem(func_11457_call(), 2)
output = call_12528
output2 = call_12529
func_12536 = relay.Function([], output)
mod['func_12536'] = func_12536
mod = relay.transform.InferType()(mod)
mutated_mod['func_12536'] = func_12536
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12536_call = mutated_mod.get_global_var('func_12536')
call_12537 = func_12536_call()
output = call_12537
func_12538 = relay.Function([], output)
mutated_mod['func_12538'] = func_12538
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10623_call = mod.get_global_var('func_10623')
func_10625_call = mutated_mod.get_global_var('func_10625')
call_12539 = func_10623_call()
call_12540 = func_10623_call()
output = relay.Tuple([call_12539,])
output2 = relay.Tuple([call_12540,])
func_12553 = relay.Function([], output)
mod['func_12553'] = func_12553
mod = relay.transform.InferType()(mod)
mutated_mod['func_12553'] = func_12553
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12553_call = mutated_mod.get_global_var('func_12553')
call_12554 = func_12553_call()
output = call_12554
func_12555 = relay.Function([], output)
mutated_mod['func_12555'] = func_12555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7242_call = mod.get_global_var('func_7242')
func_7243_call = mutated_mod.get_global_var('func_7243')
call_12614 = relay.TupleGetItem(func_7242_call(), 0)
call_12615 = relay.TupleGetItem(func_7243_call(), 0)
func_6354_call = mod.get_global_var('func_6354')
func_6358_call = mutated_mod.get_global_var('func_6358')
const_12620 = relay.const([-5.246721,7.023319,5.976613,-6.199590,4.771951,7.062031,7.507881,5.457446,2.164766,4.494282,4.837730,-5.434522,-1.277619,-8.192392,-7.242017,8.607663,6.753289,8.104540,6.123895,-3.469255,7.969323,-6.158700,-3.684360,6.511546,8.600039,5.626967,1.559004,7.461499,1.274783,4.758407,-3.421889,4.787221,2.169979,1.555850,-5.090355,0.270455,3.690819,-4.534445,0.601773,7.214069,3.864238,4.241668,8.143977,-5.611468,-0.690002,-1.460727,-2.151776,7.927617,-5.002059,-7.804049,-1.492340,6.216818,8.659866,3.519461,0.895503,9.642030,2.223700,8.874488,5.567754,-3.995960,1.168648,0.598814,-2.103420,4.642274,1.266001,6.504765,7.299836,5.620822,-7.960488,-4.750779,-9.394987,-4.546582,-3.999517,-6.237771,5.893869,-8.557455,9.049656,5.033383,-9.687856,4.120283,-4.955758,1.550934,7.988855,0.931420,-8.802049,2.027065,3.235959,-1.609383,8.044456,-1.532925,6.563511,2.220618,-8.383153,-7.748952,1.425348,-9.799923,-9.027176,6.873794,-4.080959,-4.071288,-1.643648,1.960984,8.065163,-3.365435,-1.824808,-6.826411,2.038815,2.334004,-0.993470,-7.857067,2.527157,6.766235,-8.311003,4.377038,4.053916,1.675263,8.909465,-6.138486,7.483877,3.715069,0.355512,4.060169,9.478528,-2.117189,5.369349,1.059005,7.567970,-7.337116,7.184363,-1.697303,1.812053,2.806374,3.261551,-7.425000,-0.490198,-6.326811,6.232048,-7.712784,-9.655136,-6.010515,1.353720,-6.928257,-8.436555,-1.865157,-8.848706,2.000836,4.949648,-8.775931,-1.632196,9.232596,-3.650639,-6.538366,0.011241,-9.414258,9.895414,1.019510,-0.160751,4.656993,5.963688,7.548791,-5.426776,6.966223,7.672361,-6.297785,-2.719586,-0.811911,-3.686039,-0.021741,2.986604,2.611177,6.376357,7.878497,2.511012,3.846735,-9.637771,-6.364399,6.769647,-7.588855,-1.898053,-8.654281,-5.450507,8.939433], dtype = "float32")#candidate|12620|(182,)|const|float32
const_12621 = relay.const(8.913165, dtype = "float64")#candidate|12621|()|const|float64
call_12619 = relay.TupleGetItem(func_6354_call(relay.reshape(const_12620.astype('float32'), [14, 13, 1]), relay.reshape(const_12621.astype('float64'), []), ), 0)
call_12622 = relay.TupleGetItem(func_6358_call(relay.reshape(const_12620.astype('float32'), [14, 13, 1]), relay.reshape(const_12621.astype('float64'), []), ), 0)
output = relay.Tuple([call_12614,call_12619,const_12620,const_12621,])
output2 = relay.Tuple([call_12615,call_12622,const_12620,const_12621,])
func_12626 = relay.Function([], output)
mod['func_12626'] = func_12626
mod = relay.transform.InferType()(mod)
mutated_mod['func_12626'] = func_12626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12626_call = mutated_mod.get_global_var('func_12626')
call_12627 = func_12626_call()
output = call_12627
func_12628 = relay.Function([], output)
mutated_mod['func_12628'] = func_12628
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10685_call = mod.get_global_var('func_10685')
func_10686_call = mutated_mod.get_global_var('func_10686')
call_12706 = relay.TupleGetItem(func_10685_call(), 0)
call_12707 = relay.TupleGetItem(func_10686_call(), 0)
output = call_12706
output2 = call_12707
func_12717 = relay.Function([], output)
mod['func_12717'] = func_12717
mod = relay.transform.InferType()(mod)
mutated_mod['func_12717'] = func_12717
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12717_call = mutated_mod.get_global_var('func_12717')
call_12718 = func_12717_call()
output = call_12718
func_12719 = relay.Function([], output)
mutated_mod['func_12719'] = func_12719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11845_call = mod.get_global_var('func_11845')
func_11846_call = mutated_mod.get_global_var('func_11846')
call_12739 = relay.TupleGetItem(func_11845_call(), 1)
call_12740 = relay.TupleGetItem(func_11846_call(), 1)
output = relay.Tuple([call_12739,])
output2 = relay.Tuple([call_12740,])
func_12756 = relay.Function([], output)
mod['func_12756'] = func_12756
mod = relay.transform.InferType()(mod)
mutated_mod['func_12756'] = func_12756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12756_call = mutated_mod.get_global_var('func_12756')
call_12757 = func_12756_call()
output = call_12757
func_12758 = relay.Function([], output)
mutated_mod['func_12758'] = func_12758
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mod.get_global_var('func_8055')
func_8057_call = mutated_mod.get_global_var('func_8057')
call_12766 = relay.TupleGetItem(func_8055_call(), 0)
call_12767 = relay.TupleGetItem(func_8057_call(), 0)
func_5261_call = mod.get_global_var('func_5261')
func_5265_call = mutated_mod.get_global_var('func_5265')
var_12804 = relay.var("var_12804", dtype = "int32", shape = (36,))#candidate|12804|(36,)|var|int32
var_12805 = relay.var("var_12805", dtype = "int32", shape = (324,))#candidate|12805|(324,)|var|int32
call_12803 = relay.TupleGetItem(func_5261_call(relay.reshape(var_12804.astype('int32'), [6, 6, 1]), relay.reshape(var_12805.astype('int32'), [6, 6, 9]), ), 0)
call_12806 = relay.TupleGetItem(func_5265_call(relay.reshape(var_12804.astype('int32'), [6, 6, 1]), relay.reshape(var_12805.astype('int32'), [6, 6, 9]), ), 0)
func_7005_call = mod.get_global_var('func_7005')
func_7009_call = mutated_mod.get_global_var('func_7009')
const_12817 = relay.const([[False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True],[False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False]], dtype = "bool")#candidate|12817|(2, 24192)|const|bool
const_12818 = relay.const([[10,2,-6,2,7,-5,-4,8,6,-4,-1,8,-3,-8,1,-6,5,-4,-1,4,-10,8,5,-9,-6,-8,6,-6,3,9,-5,6,5,3,-8,3,-8,-2,-6,4,4,10,-9,8,-2,7,-4,-9,5,-4,-1,-1,-9,-1,-3,-7,-6,8,3,9,-5,-5,1,7,-8,-1,1,7,4,-2,-3,-6,8,-6,2,-8,-4,-5,9,-1,4,-5,3,-2,1,5,-5,-5,-7,-3,6,5,4,-5,1,-9,5,9,-7,-4,-6,-4,-10,-5,-10,5,10,6,-7,7,6,-4,-10,-10,5,-7,4,4,-2,2,-7,-10,6,-3,8,2,5,-4,8,-4,-9,-6,4,-7,-10,10,6,4,-7,-5,-6,8,3,-8,7,8,5,-9,3,-7,4,10,-9,-4,-1,1,7,9,-3,-3,-9,8,-4,-2,2,-1,7,10,8,-2,2,6,-5,9,2,-10,-4,2,5,6,5,6,1,-10,10,7,7,1,-8,8,4,-10,6,8,-8,-9,-4,-5,-2,3,6,6,-3,3,-7,3,1,-4,5,-8,-6,6,-3,6,-5,-9,-9,6,2,-5,-4,-4,2,-4,8,10,9,6,8,-1,-1,5,5,-1,-3,-8,7,-2,8,5,-7,3,-2,2,-3,2,3,-3,1,5,-2,-10,7,-7,-7,-4,-9,4,6,-1,9,2,-3,10,8,-7,-10,-1,-9,3,-1,4,-4,3,-4,-8,8,-5,-4,6,-10,-4,1,1,-4,-8,1,-6,8,-4,2,5,1,-4,5,-7,-4,-9,-4,3,-5,4,-2,-9,-8,5,5,3,-2,-9,6,3,-4,-2,-3,8,-5,1,1,-10,-3,10,-4,3,7,-2,7,2,8,-2,9,8,-4,-3,-1,5,-5,3,7,5,8,-8,3,-8,4,-3,-2,8,1,3,4,9,5,1,8,8,3,2,-8,6,-10,8,1,-10,-9,6,10,-5,7,-5,-1,-2,-2,8,-5,-5,-7,-9,-9,3,-9,-1,4,2,-1,-8,-3,-5,-7,7,1,-6,-3,9,3,9,-10,-1,-4,10,1,8,-8,-10,-7,-6,-7,9,9,-3,9,-6,-10,-7,-1,2,5,-7,4,-10,4,-1,10,2,-9,4,7,-7,9,3,-1,4,-6,8,10,-1,6,5,4,-7,-4,-9,3,8,-1,1,-8,7,6,4,-3,-10,6,5,3,-1,3,8,7,7,8,10,-3,-10,2,6,-6,6,-10,-2,-5,1,-2,-5,4,-6,1,8,1,-6,-1,-10,-9,-1,-9,3,5,-1,3,-5,-9,-7,5,6,-3,-10,-5,3,1,2,-8,-4,-8,-9,3,6,-3,2,-10,5,-3,10,-7,1,-9,-8,9,-10,-8,-8,1,5,-10,-1,7,4,10,7,6,-7,-2,-2,8,-8,8,-9,1,-2,-1,1,-6,-10,-8,-4,-5,-9,-8,8,2,-4,3,9,9,4,2,-10,10,-5,-6,-3,1,-10,5,-5,-3,7,-2,9,-8,3,-2,-10,-2,-3,7,-1,-9,7,8,-1,1,-8,-6,6,2,6,2,-6,-5,5,6,10,7,-7,7,8,6,1,-3,-8,6,-10,-1,5,7,8,5,7,3,-7,-4,8,-8,-3,-8,9,4,4,-6,-3,-8,6,-9,5,1,-4,-6,-4,-3,-7,-8,5,-6,7,-8,6,-1,1,-7,4,8,-2,2,9,5,-8,-2,6,4,9,4,-9,-10,-9,-5,-7,-10,-7,7,10,4,6,1,-4,-5,-6,-8,8,-5,7,9,-5,2,-3,-10,2,1,9,-8,-8,6,4,8,4,-8,-5,2,5,-4,5,-9,7,3,-3,-7,-5,-4,-6,2,6,-10,6,3,-8,-10,-10,-7,1,2,-4,3,-3,10,-9,-9,4,-8,-3,-4,7,-3,-2,-3,-2,-5,4,-6,6,6,10,-2,7,7,-2,-9,4,5,2,-9,1,-9,-5,-1,2,-6,-5,9,8,-9,8,9,-10,9,10,-6,-5,7,-1,9,-8,-8,-3,2,-4,2,-9,-5,3,10,-4,-6,3,-7,2,10,10,2,4,5,-2,-9,7,-9,7,-6,8,-10,-7,-7,-4,10,6,9,3,7,2,8,9,-2,7,-7,-1,-7,-3,-9,3,3,1,-1,-8,2,4,9,-7,10,-8,10,4,-10,-4,-6,-10,8,2,8,8,10,-1,-5,-8,4,-10,7,-6,2,8,6,-8,-9,-4,10,6,3,-9,-6,3,-4,8,8,-10,1,8,-6,-4,9,-2,1,1,3,-2,8,1,-8,-3,1,7,-3,-1,-5,4,4,-7,1,-9,-9,-5,8,-8,7,5,7,1,-8,9,-9,9,6,-10,-3,3,-2,8,-8,-10,-10,-2,8,-4,-10,-2,-5,-4,-7,10,-3,-2,3,7,-8,6,-2,4,-4,8,3,-2,-9,9,-1,5,-2,-9,9,-8,-4,7,-3,-8,9,-2,4,-1,10,-8,-9,-5,2,-7,3,-9,10,-5,-7,1,-10,10,-6,-8,1,9,1,-2,-1,3,2,3,10,-4,-2,6,-9,6,7,2,-2,-9,-7,3,10,2,-9,-4,2,7,5,5,-10,-7,-7,-7,2,-9,9,-4,9,10,10,7,2,-5,-9,-10,3,8,-8,8,-4,-8,-10,-1,8,-5,5,-10,9,-5,6,-9,-5,-9,-3,5,-6,2,5,5,7,4,5,1,9,-2,3,6,-10,3,3,-3,-10,5,10,-1,-1,9,10,7,7,-6,5,-10,-8,2,-2,-10,-2,10,-6,-7,7,-10,5,8,-1,6,-8,-2,-1,8,9,-8,7,-3,6,-10,5,1,1,5,6,9,8,-2,4,-4,10,-6,-9,-9,-8,-9,-1,4,-10,6,-10,1,4,1,-5,-5,-9,3,-9,-3,3,1,-10,8,5,7,-8,-5,4,-2,-3,6,-7,7,3,-2,-10,2,7,-2,-5,8,-9,-6,9,4,5,1,8,6,8,10,1,9,-4,-10,2,-4,3,6,8,-3,7,-2,3,-8,8,-10,10,6,-2,4,-6,-5,-6,10,-10,-6,-10,3,8,6,-9,-4,-8,2,-9,-4,-5,-6,1,-5,-1,-7,1,4,-1,-3,9,-1,10,-6,2,-5,-10,-7,9,9,5,10,-8,-5,-7,1,-8,10,8,8,-8,6,-6,-7,7,4,6,7,-10,-4,3,-10,10,10,8,7,-2,3,3,2,8,1,-2,7,-3,9,-6,8,1,-1,7,-4,-10,7,-7,-5,-7,-8,-7,2,-3,7,-8,-5,-4,-7,-4,-9,9,10,-5,10,1,2,2,7,3,-7,10,1,8,-6,10,-9,-1,5,-3,-9,-3,-2,5,2,-5,10,-1,-1,10,5,3,10,-4,10,-2,-4,2,-1,5,-4,4,-8,-4,6,-4,-7,-7,-1,-4,10,1,-10,-10,-7,-4,-7,-4,3,-2,5,2,-3,9,-1,4,-10,5,-6,-10,-2,-6,3,4,10,-7,-1,7,9,7,-2,3,-6,9,-5,-6,3,6,4,2,-5,8,-7,10,-4,5,-8,5,9,5,-5,3,-3,-4,8,-2,6,-8,7,-8,-7,-7,3,6,-6,-6,-1,8,7,-4,9,-9,-6,-7,-7,3,10,-8,2,5,-6,-10,9,5,-2,-4,-3,-8,-1,1,10,3,-6,2,-6,5,-7,1,2,5,-2,-7,-1,-5,1,-10,2,10,-6,-7,7,-4,-8,2,10,-6,-6,9,-9,8,10,1,-3,1,3,-2,9,-7,-3,-7,-6,-7,-7,8,9,-3,5,-3,5,10,2,-10,-1,8,-8,7,7,6,10,-9,3,-8,-8,-9,-4,2,-2,-5,-9,-7,7,1,-7,9,5,6,9,-6,-4,-9,5,-4,-4,-10,-3,2,-10,-5,9,6,-9,-2,6,-3,-5,1,-6,7,-4,-2,3,-7,6,1,6,-1,-10,3,-1,8,-1,-5,4,6,8,-4,-4,7,-7,-7,-8,7,-1,3,1,7,-10,10,6,-1,5,-7,-10,-9,5,-7,-4,8,-9,9,-4,-1,-1,-10,6,-1,-9,-10,-5,4,-4,-2,9,6,-2,-5,1,5,-6,7,4,-3,-10,-2,1,-4,8,5,-7,5,-6,-10,-6,-9,7,6,-5,6,1,10,-5,9,2,1,5,-1,-6,-7,3,9,-1,-3,2,-2,9,-5,8,-6,-7,4,-4,-2,5,5,3,-9,-8,9,-4,-3,4,-5,-3,7,-1,2,3,6,-1,-7,6,9,2,6,-10,9,8,-8,-7,10,3,3,-4,-5,1,-1,2,3,-7,-8,-7,-1,-10,-5,-4,-7,7,-5,7,7,-4,7,6,7,-6,-2,-3,7,4,2,-8,-6,-7,5,-1,-3,9,-10,-7,-10,-2,-7,5,-8,-7,6,-9,8,3,1,-4,-8,4,9,5,-6,10,-1,7,-2,2,-8,2,7,9,-9,2,-7,-5,8,4,8,7,-8,9,-7,-10,1,10,5,-6,2,2,-4,4,9,-6,-3,-6,-7,3,-7,-8,-4,8,10,6,2,1,-6,-10,4,-4,10,8,-7,3,3,-2,-2,6,6,3,-9,6,9,4,1,-10,6,-8,8,-6,-5,-6,1,-8,-4,-5,-3,-10,-6,-4,2,7,2,2,-9,9,-9,10,6,6,-6,5,-3,-10,9,3,-9,-1,8,-9,2,-10,2,10,7,-10,-9,2,9,-1,9,-2,-6,7,4,2,5,-6,5,7,-4,-5,-1,6,-1,10,3,-6,7,-5,-1,-7,-1,3,1,-8,-6,-1,-9,7,-6,-10,3,7,3,-10,-7,1,2,-5,-4,1,5,-5,10,6,2,-4,4,-2,-1,1,9,-7,-4,5,7,-7,9,7,-5,5,1,-10,-9,1,-5,10,-4,7,1,-7,-8,-3,6,6,4,-7,-1,9,-1,9,-3,-10,-8,-7,8,9,6,-5,-1,4,-2,-10,1,-2,2,-8,2,1,4,-1,10,10,-4,-10,6,10,-6,1,-2,10,4,-8,-6,8,-7,-4,-9,-6,-1,-7,2,-7,2,6,10,-7,-1,-3,-5,9,-10,-2,-9,-1,7,-9,7,-5,-5,4,-4,2,-7,-4,-7,-6,-6,-5,9,3,-6,-2,8,4,8,-9,-9,10,9,10,-7,-1,7,7,-4,9,-5,-4,8,-8,-8,-1,-9,4,-6,-2,-3,5,-10,5,3,5,2,-10,-7,-9,5,-3,10,2,2,-9,8,-6,-4,-4,2,4,-9,6,-3,3,2,2,-3,-8,-10,-1,-10,-1,-5,-3,4,-3,-2,-3,4,4,-1,-10,3,-3,-4,5,1,-8,1,-7]], dtype = "int64")#candidate|12818|(1, 2002)|const|int64
call_12816 = relay.TupleGetItem(func_7005_call(relay.reshape(const_12817.astype('bool'), [8, 504, 12]), relay.reshape(const_12817.astype('float64'), [8, 504, 12]), relay.reshape(const_12818.astype('int64'), [2002,]), ), 0)
call_12819 = relay.TupleGetItem(func_7009_call(relay.reshape(const_12817.astype('bool'), [8, 504, 12]), relay.reshape(const_12817.astype('float64'), [8, 504, 12]), relay.reshape(const_12818.astype('int64'), [2002,]), ), 0)
func_10922_call = mod.get_global_var('func_10922')
func_10924_call = mutated_mod.get_global_var('func_10924')
call_12825 = relay.TupleGetItem(func_10922_call(), 0)
call_12826 = relay.TupleGetItem(func_10924_call(), 0)
output = relay.Tuple([call_12766,call_12803,var_12804,var_12805,call_12816,const_12817,const_12818,call_12825,])
output2 = relay.Tuple([call_12767,call_12806,var_12804,var_12805,call_12819,const_12817,const_12818,call_12826,])
func_12827 = relay.Function([var_12804,var_12805,], output)
mod['func_12827'] = func_12827
mod = relay.transform.InferType()(mod)
mutated_mod['func_12827'] = func_12827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12827_call = mutated_mod.get_global_var('func_12827')
var_12829 = relay.var("var_12829", dtype = "int32", shape = (36,))#candidate|12829|(36,)|var|int32
var_12830 = relay.var("var_12830", dtype = "int32", shape = (324,))#candidate|12830|(324,)|var|int32
call_12828 = func_12827_call(var_12829,var_12830,)
output = call_12828
func_12831 = relay.Function([var_12829,var_12830,], output)
mutated_mod['func_12831'] = func_12831
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7499_call = mod.get_global_var('func_7499')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_12837 = relay.TupleGetItem(func_7499_call(), 2)
call_12838 = relay.TupleGetItem(func_7500_call(), 2)
output = call_12837
output2 = call_12838
func_12868 = relay.Function([], output)
mod['func_12868'] = func_12868
mod = relay.transform.InferType()(mod)
output = func_12868()
func_12869 = relay.Function([], output)
mutated_mod['func_12869'] = func_12869
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6965_call = mod.get_global_var('func_6965')
func_6966_call = mutated_mod.get_global_var('func_6966')
call_12873 = func_6965_call()
call_12874 = func_6965_call()
output = call_12873
output2 = call_12874
func_12881 = relay.Function([], output)
mod['func_12881'] = func_12881
mod = relay.transform.InferType()(mod)
mutated_mod['func_12881'] = func_12881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12881_call = mutated_mod.get_global_var('func_12881')
call_12882 = func_12881_call()
output = call_12882
func_12883 = relay.Function([], output)
mutated_mod['func_12883'] = func_12883
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_12929 = relay.TupleGetItem(func_5551_call(), 0)
call_12930 = relay.TupleGetItem(func_5553_call(), 0)
func_11145_call = mod.get_global_var('func_11145')
func_11151_call = mutated_mod.get_global_var('func_11151')
var_12939 = relay.var("var_12939", dtype = "uint16", shape = (450,))#candidate|12939|(450,)|var|uint16
const_12940 = relay.const([7,-7,2,-8,-8,-10,1,10,4,-6,-1,-3,3,4,-9,3,10,6,-9,-1,-5,2,8,9,-3,4,-9,-7,-2,-10,-7,-7,-4,-10,-7,10], dtype = "int32")#candidate|12940|(36,)|const|int32
var_12941 = relay.var("var_12941", dtype = "int32", shape = (1792,))#candidate|12941|(1792,)|var|int32
const_12942 = relay.const([2.546319,-4.753859,-6.372214,4.551103,2.921234,1.558653,-5.781495,-7.588514,5.774542,-8.465406,9.569911,-3.952092,2.853425,-4.492251,-0.677743,9.953904,0.166598,-5.893005,-2.236503,-4.758835,8.851787,8.257672,0.897857,-9.583989,3.480386,-0.652359,-9.435488,-3.349229,-1.278598,5.210046,-9.403043,-6.705720,-9.201916,4.713458,3.536970,-0.346735,-5.360091,-0.306150,0.214222,-1.991948,7.275632,8.501987,3.686501,7.151465,-6.317194,-4.942947,7.221568,-5.705956,2.037629,-6.842109,8.315893,-0.574380,-3.115055,-8.556532,9.744697,-4.107997,3.146542,-8.125926,4.728640,8.740639,-2.735898,1.916784,-7.079329,8.208478,7.699979,-9.186141,6.226990,-3.138365,0.413252,1.000974,9.865810,9.020367,-1.607575,-6.348127,7.482856,3.646275,6.368173,3.883672,7.993711,-8.970181,-7.695345,1.885899,4.000185,-6.341730,-3.775829,9.917605,5.808781,4.835699,-0.402309,-8.197928,0.534283,-1.676706,-7.844309,-0.679809,-9.307272,-3.566824,-6.949974,-1.951208,-5.158091,-5.141130,3.793690,-2.956902,1.393147,-1.128105,2.500945,3.785625,-8.905786,-7.889472,-1.610495,-6.763059,0.828408,5.994164,7.392964,4.883138,-7.344024,-6.879154,0.570720,2.062685,-2.410582,-0.474973,-0.503198,-0.047908,4.208151,8.854673,-2.884259,5.756610,-1.503426,0.473777,-2.682871,0.985337,-5.645902,-4.269715,3.342237,-2.969824,5.817233,6.477100,9.265412,7.540178,-7.324415,-1.168623,-2.558885,-9.596072,-7.061619,-0.909679,-6.343208,-7.234981,-1.203504,-2.236858,-2.810058,4.903955,-4.075250,3.333202,4.859702,-9.105934,0.123968,-2.068577,-2.093645,-4.708574,-1.753086,-0.547258,0.327853,6.774816,0.587198,6.286376,7.912016,-3.012849,2.626701,5.555201,-5.338912,0.528489,-4.316217,8.067786,-7.139392,4.251856,4.475873,-1.293055,-3.758855,-1.000242,0.131627,6.421698,-6.847643,-9.279055,8.115553,-7.103777,-8.779898,3.692736,6.644770,7.805497,5.796630,-2.295141,-3.770216,3.119007,5.025228,9.036376,5.538121,2.492443,-6.043871,0.484948,6.326025,8.881980,2.305407,-1.845775,6.164726,8.549714,-6.553608,1.226876,-9.434897,-0.342337,-8.651477,-4.906855,-8.670519,-9.087188,-2.616638,0.311622,8.248115,8.812963,4.509887,-3.983485,0.808536,2.180846,5.246633,4.963952,4.327754,6.787779,8.634572,5.418216,2.730952,-6.964902,-7.298229,7.186648,-1.342365,-5.530503,-9.851381,-0.824387,-9.587163,-3.570028,2.852895,8.971202,2.280530,-8.622684,7.872570,-3.624044,8.743266,-0.974060,-9.335905,-4.482834,-4.807852,7.653698,6.164156,-4.691212,3.299727,1.341458,-8.717010,-3.804398,-7.773326,-0.462934,-1.730895,-3.207335,6.113881,3.702265,8.419341,-6.518640,5.885726,-6.318147,-8.220453,-9.839885,3.177264,-8.878359,0.432603,6.263302,9.423923,6.155794,7.837655,-9.585019,-1.738187,-3.959260,0.891539,9.927208,-9.174840,7.647192,-3.290985,8.496628,9.286260,-9.494616,-1.076569,-7.159995,7.771721,9.517648,-1.059917,-6.163852,-0.423910,-1.309126,5.307322,-9.575106,7.162220,-0.937528,8.702269,-8.538658,1.406230,3.940283,-3.820497,-4.012945,7.161294,-3.383183,9.329038,-3.192373,-1.002293,4.118950,-6.411984,8.329916,9.962527,-5.212034,1.072128,2.799318,9.246699,-0.903241,8.503792,7.811420,7.685041,-5.893497,-8.158552,-7.733809,0.257765,1.578172,1.991995,2.731425,-2.590526,4.140530,-3.536715,6.617867,-8.870965,-9.211574,-8.416343,-8.061602,0.386424,-7.852235,-8.286098,-0.523968,-4.464358,9.796531,1.034542,-9.920285,-2.790982,6.869753,-4.708813,-5.558313,8.411645,-3.767846,5.864364,0.012613,4.764974,-2.389722,-9.064408,3.675158,-6.302843,-6.347890,-6.377916,-3.625257,-1.384878,4.664577,-1.172796,2.873312,-7.235185,8.919833,6.776916,6.547014,-9.490857,-2.236161,-5.154742,2.203917,-2.456819,-4.919264,-6.356827,-2.598746,9.067719,8.346700,5.682354,6.690950,2.966882,7.401710,9.484929,4.322942,1.410851,-2.280457,-3.559052,-0.492017,6.342302,5.449559,6.270809,-5.967373,0.693281,-0.771890,8.358797,2.880986,-6.285645,8.873087,3.229337,6.585504,-6.934509,-3.732696,6.158524,1.797557,-8.194231,-6.931872,-2.388015,-1.756850,7.182581,6.766541,-4.569634,5.442580,0.738148,-8.326954,1.868997,0.246774,3.706144,-1.577905,1.966111,4.266575,-4.122330,4.785651,-9.392962,7.202827,0.923698,-6.164323,8.873714,-3.157130,-0.974255,2.159729,7.452250,8.483200,-8.280390,6.800070,-3.021389,0.073665,0.146940,0.092094,-6.726457,9.347620,0.353172,7.569925,3.683037,-5.419782,-1.404276,2.031515,-9.168536,-6.041018,8.981588,-2.455345,-7.261103,-8.634059,0.980505,-3.383444,-9.374719,2.992239,3.007691,-6.332782,-5.060555,2.334995,-0.182432,-7.390765,4.017561,-9.461327,3.130442,-1.260568,-8.280427,4.321332,7.578319,-9.762607,0.025963,0.002971,-4.979566,8.312073,-2.461234,-1.669855,1.502056,-5.830402,7.224657,5.417213,0.268923,1.238312,6.309638,5.436285,-1.486986,-0.895675,3.708706,-2.280287,-4.283470,7.644172,-8.915874,8.568399,-1.935344,6.135645,-6.618499,-9.922750,-0.496260,-9.396900,-5.100358,-3.207387,3.842795,-1.990222,4.222579,-7.746933,-9.146521,-0.031460,9.991012,0.633502,4.568406,-8.543478,6.543718,-8.999738,-8.615397,0.724919,-3.991001,9.666573,0.626603,3.631907,-3.274591,-5.536779,5.759893,-5.055580,-0.367627,-8.863232,-5.328797,-0.369508,-8.326874,1.657486,7.643650,2.460263,4.336839,7.606362,9.173466,5.809208,-2.943699,-3.754854,-1.138982,9.181799,-5.897063,6.694498,-3.417828,6.925129,-1.943281,1.530667,8.197642,6.692702,5.972598,4.168586,8.751168,-8.747706,-6.907979,2.120884,7.884283,-1.548244,9.863927,-5.700521,6.291418,-1.040879,2.524997,3.900902,-5.295017,4.497103,9.899599,-3.353242,2.004597,-1.875626,-2.579689,-5.783326,-2.586348,7.672972,-8.543165,8.988923,9.616885,4.268637,0.834486,-5.422883,-4.578043,9.083866,-0.775549,-5.468642,4.362582,-9.327532,7.896212,2.893679,4.413634,8.019861,0.417672,8.565206,-0.897284,1.798332,9.389198,2.324252,3.094445,6.370409,5.110945,6.181153,-6.173522,-5.416967,-3.802082,-3.019008,-4.303316,-9.221848,-5.344559,0.967865,-9.658194,8.255036,-1.261977,2.963754,4.767789,1.696941,2.289824,7.040694,-5.549048,5.949580,-6.036908,-3.476516,3.195248,-4.139796,-9.962937,-3.636864,-8.655920,-5.513277,-5.895610,-7.486219,-0.500099,-7.636650,-1.455663,-5.126287,4.394276,9.522589,4.841996,3.808393,-5.287926,-2.619214,9.165430,-6.012021,-0.696871,-1.804347,-9.235492,4.920321,-2.342646,-4.984528,9.953678,-7.510368,-1.898873,-7.396212,0.307247,-3.228657,2.012139,7.925481,0.774991,-9.255980,-2.684576,8.134051,3.350067,-3.255943,-9.937007,-0.762409,2.844683,0.720165,7.063257,6.810110,6.323695,-5.476845,-1.617447,3.666039,8.707402,-6.423940,-0.729082,2.174353,-7.346150,8.954388,-4.282741,-1.156049,-4.483146,-3.072010,-1.443319,6.554890,6.300416,-1.606260,6.743564,-8.975283,-7.195970,-7.983499,-9.889756,-1.695249,7.804253,8.367192,-3.701126,2.520118,1.719326,-3.574388,4.874065,6.749065,1.579012,2.406061,6.025176,-8.129917,-9.192073,-1.716735,-5.145641,4.347599,7.948013,2.278964,-1.303837,-6.593626,-6.681566,2.966958,-3.428664,8.772743,3.291417,-3.061259,-4.982521,-5.768931,-0.356403,9.139804,6.874156,-4.298040,9.716608,-0.139806,0.279507,-8.321222,2.793454,1.344040,-7.715571,-3.962188,5.949535,3.173572,6.041513,-4.697706,-1.401657,-6.183051,-7.462291,-8.134625,-4.586566,-1.135310,-2.485818,-3.930854,-7.297594,8.484867,-8.624485,-7.155582,3.374443,3.803372,9.206554,-8.853204,1.716590,-4.755288,1.069341,0.926169,4.857405,8.544362,-3.756665,-0.721693,-4.186515,-6.320311,5.281521,-7.576386,-2.329809,2.727323,-6.920417,0.189661,-2.477459,2.960968,8.506882,9.955149,-4.184374,-8.183997,-1.778741,-3.595515,-6.508719,9.198520,0.106880,-0.069096,9.574702,-9.253119,4.776345,0.397945,6.384130,-2.359946,-1.336468,8.551135,-4.966917,3.517036,-4.740038,4.007163,-8.323834,-2.453033,7.890273,7.108144,-0.430405,-0.688253,-7.632171,5.820706,-8.975450,-1.892033,-7.044112,-8.431910,9.386506,6.165800,9.713682,-3.116693,-0.060367,2.775729,-1.750217,-1.606304,-7.684954,-4.248205,5.063597,-7.739660,9.915478,-3.782950,9.449960,1.637969,-1.746552,-2.304796,0.117679,-5.709799,-4.172813,9.069951,-3.878843,3.288740,-1.788020,0.684724,-1.790047,-0.451891,-4.058849,6.298092,4.363306,-0.948755,5.583502,1.162654,-3.641665,-3.861758,4.314105,6.716543,-5.839243,0.329605,-6.408985,-5.689872,-1.077502,1.663068,5.184311,-7.329939,8.406207,-4.971413,-2.172934,5.529968,4.096483,1.293924,-9.600877,5.468800,1.452283,6.738177,4.309672,-3.582947,-1.154442,0.956080,-0.583185,-1.940711,-0.393631,9.775845,-7.903333,6.422732,-4.563505,1.998779,8.894536,1.730812,7.619696,4.503739,-6.541903,-5.637496,6.625878,-7.398253,-7.656786,3.048401,-5.510453,4.399259,0.384652,-9.910845,7.415407,-4.995443,-7.253752,2.966440,5.459018,4.456610,7.984023,-4.098581,9.909914,-3.512960,-3.160383,-7.587764,-5.462052,4.370204,6.263730,-1.369277,2.308703,4.133495,-0.763988,7.258139,8.735472,-5.240800,6.193863,5.155477,6.285863,-8.791528,2.044818,-2.452017,-2.467442,-3.529580,-1.486610,-9.729645,0.010174,9.340860,-6.420985,3.848750,6.414602,-3.970766,3.138504,5.420215,-2.675680,-2.165505,4.511328,2.407206,-9.537700,0.489966,-9.333368,3.887867,4.531987,-5.717099,9.812695,-7.544387,0.972504,4.776112,-4.920213,4.046412,-4.620860,6.079722,1.033175,5.433638,-9.996922,-0.835550,-4.904400,-9.339163,-9.225480,-1.246926,8.794462,7.917281,3.592193,0.130380,2.531805,-7.836835,-3.737603,1.176359,0.335003,2.974867,6.779154,-8.616562,0.192299,-6.879922,6.554138,-7.460729,3.490627,4.734832,-0.024261,-5.246117,-8.868969,-5.379763,-8.200441,-6.366232,-3.666614,7.268863,4.338231,-6.310289,6.657423,-6.889974,1.453754,5.863179,-5.919918,2.568153,8.067199,6.832778,3.398831,-8.272458,6.997771,9.113287,-5.910286,-4.901383,-9.052248,3.485178,9.980716,4.666918,-2.069919,9.892197,5.824813,6.827872,-4.975007,-1.716111,-9.705912,-3.709842,7.317589,-8.961669,-2.860112,6.222332,6.697855,-0.301898,0.137037,4.154233,-3.951966,-9.390691,9.413347,-8.936747,-3.198337,7.402121,5.699658,2.598094,3.122902,2.993614,-9.148336,1.029731,2.788000,-7.933090,8.389049,-0.827773,-4.561768,8.536971,-9.400492,5.169896,2.380067,-5.948683,-1.639501,2.541118,5.704630,-4.877773,-1.061482,6.570576,1.526313,-2.769847,8.366761,4.917775,3.084301,8.941470,-7.652465,1.600982,-0.198158,4.491077,8.923572,-3.878211,8.311338,-9.712810,-1.317017,2.166061,9.947754,-7.453741,-9.967417,-8.055195,2.275021,7.238509,-6.562696,1.469867,-4.085124,-8.023178,9.357745,-8.050361,9.729119,-0.087757,-5.884350,7.788693,7.223527,-3.019669,5.378711,-6.515422,6.924524,9.869601,-7.082080,-7.350076,4.114964,-5.783141,7.247155,9.003742,4.335962,2.268630,9.978754,4.878089,-4.242272,-9.308171,-7.152933,-5.944036,-4.205594,2.370835,-4.043009,-6.459754,-5.283631,1.753675,4.762066,-4.824078,-1.222505,7.203961,5.571822,8.886733,-8.024957,6.494716,-8.596847,-9.025795,9.988545,2.506455,1.623178,4.511293,-6.281407,-6.257321,9.518840,-6.671204,-5.120982,5.648132,-0.948848,7.497590,-8.767652,4.761017,5.806385,-1.701966,7.286264,-6.293654,8.083745,2.840169,-7.284244,6.859979,-4.446513,-4.795156,1.437255,-3.095798,-3.766213,9.046148,6.542609,8.238497,-2.429597,4.469606,4.375663,8.311363,-5.787712,-3.392193,-3.763865,-6.823712,8.130711,8.744412,8.958707,-8.120689,7.796240,-3.125495,-4.357595,7.211137,5.068780,-6.317150,5.842614,4.122252,-5.392733,-9.105987,-3.144607,-6.472654,3.039001,-9.741779,1.068108,-3.922774,-8.163945,9.970625,-6.649511,-9.458335,-3.493699,-7.254895,-2.644550,9.190815,5.636443,4.589055,-3.797248,9.181543,7.969269,-2.013677,-9.378153,5.903513,-3.243969,3.601531,-8.067927,-2.256738,3.479285,-0.110159,6.210943,-9.736447,3.612333,-2.174834,0.991468,-9.685252,8.943983,-3.916878,6.609814,8.286798,-0.375928,5.700505,-1.199232,5.053640,-6.316107,7.104638,4.168769,6.705966,2.440071,1.496206,7.942549,6.639297,-6.332508,8.267703,6.742442,5.688806,0.776916,-9.735853,0.748939,4.331542,7.708048,0.108376,9.251138,-9.804655,-2.465750,9.006089,3.670437,-2.800379,-4.093727,2.068735,-2.346925,-9.572860,9.655534,3.118470,-1.925173,9.200599,5.738692,5.422086,8.532065,2.869275,5.231277,1.764933,2.485172,-8.320926,2.179843,-7.206816,0.940724,-0.952163,0.640329,5.780324,-6.845211,-2.836617,9.708552,-2.241876,8.740111,-6.291409,5.117844,4.639502,8.301841,-3.133636,0.488874,0.937564,5.215161,-2.060486,9.532227,1.943977,-2.866595,-2.382012,1.957137,-9.450749,-0.702077,2.099893,-4.176935,1.133264,-3.404325,1.136743,-7.293278,-9.662195,-1.279298,-2.785016,-5.617789,8.777427,8.321950,-6.856944,8.930734,4.246692,4.564016,8.528707,4.318402,-0.165773,-4.255018,-0.907347,-3.863242,6.264989,3.784812,-9.353241,6.216090,-8.938170,1.574011,1.505659,9.835703,5.573662,3.391062,-8.202890,4.269423,-5.473513,-7.801839,-3.101973,-1.240790,8.033976,3.731471,2.633005,-7.506717,-4.594835,4.999138,-1.388264,-9.527367,9.358882,-0.779561,1.520176,-2.232965,0.478117,-1.763369,6.413543,7.846531,-7.583201,2.619985,5.272102,5.420152,4.356092,7.819468,8.576741,0.645933,1.839503,-1.570371,5.420761,6.224000,-1.282272,-6.990697,-9.181283,-5.391739,6.715581,-9.007453,9.280322,-8.359426,-0.803373,-5.780286,3.678672,5.853728,0.134087,1.720918,-7.276920,-6.095734,-6.651554,6.253729,-6.560137,7.558343,6.342421,3.816971,4.169555,4.510090,1.252507,1.284806,-1.413957,-0.742497,2.682542,-6.336957,-4.785151,-2.684253,-9.989444,1.654221,4.759967,-1.459254,-6.668365,-3.095731,3.955053,-7.182915,3.087521,6.799319,-8.037566,-6.146125,-8.474427,1.129247,7.931951,9.797265,5.169034,-5.468817,-3.013903,6.651154,-7.333117,-2.120673,-0.857032,0.210844,1.486273,4.499221,-3.116190,7.103107,-7.857798,3.003045,-7.863088,8.826565,8.454250,-9.909691,-4.309945,-2.095050,6.528292,-1.961538,4.985035,-7.472271,8.872504,-6.593201,4.658355,-8.303538,3.115839,3.488926,-9.392170,3.515495,-8.381021,5.352289,-8.621447,-9.354060,9.812192,4.748637,-9.197062,9.781931,0.060167,1.590330,2.064976,-3.202890,4.888563,-5.330560,8.750518,0.659564,0.027574,-8.523719,-3.006503,-8.874955,-6.440798,8.911974,4.869366,-9.374506,-6.398855,0.349003,1.046938,-4.229717,9.907975,-0.115152,3.780422,-2.590688,0.845048,-2.093274,5.803990,5.841300,-5.896572,-6.003620,8.497604,-2.965213,-9.748083,0.575430,5.666507,-1.557951,-0.132086,0.854061,-2.644063,-2.740220,5.399934,-2.864197,7.421773,-7.516987,-3.661930,9.266457,0.519028,0.156849,7.476582,7.999797,8.896040,3.890064,-6.536880,2.734842,3.118222,-6.023984,-5.524050,5.959301,-4.972251,1.753897,7.435353,-4.544573,-2.996620,-3.710372,-3.320048,-8.046632,-6.988724,4.974633,8.967370,3.630379,9.974857,8.452007,-1.411289,3.152266,-6.564103,1.401479,-7.070930,-8.816050,-4.729618,-4.892656,-4.074797,-0.338657,7.625124,4.885065,-1.894285,9.024945,5.560218,7.236633,5.350560,-6.771718,8.955931,9.882927,-3.377138,-2.801185,7.828628,3.855996,2.969132,-8.698700,-2.963053,1.633044,-6.952715,-3.319625,0.676269,-0.107918,-0.483899,-1.689852,-8.810186,6.063290,2.544973,4.467171,2.468302,-9.658767,-2.304176,6.849640,9.055282,3.952488,5.130594,9.944060,3.713756,1.303893,-7.685845,8.815976,-3.886602,7.917596,-1.533472,-9.360809,-2.996587,0.603719,3.139581,9.109697,7.783626,-4.852487,-6.349162,-3.496356,6.890739,5.791631,1.806900,5.425686,-5.782822,-6.221264,4.831042,-9.416434,4.610724,4.245857,-0.264498,0.742962,0.529681,-5.172687,1.207796,-8.035214,-5.866942,9.951750,-7.718820,6.511015,9.588847,-2.683605,-0.322970,-3.519106,-4.233149,-9.291711,-5.703623,-8.162464,-5.995570,3.435293,7.513364,-6.963095,-8.341188,-1.793285,-4.407830,1.811073,8.417375,5.282941,-9.998658,0.022311,3.577266,6.695564,-7.504666,9.775803,-1.529869,-4.317684,-3.721475,7.756035,-6.215108,-4.661817,-3.528335,2.634158,7.254387,2.253327,-3.191177,-1.279362,8.986471,-8.809719,4.956629,-0.347534,-3.631053,-1.922501,1.022147,7.881081,2.131709,3.106285,8.976224,6.332613,0.537261,-2.297856,9.538913,0.719160,-0.843982,-3.517158,6.235931,9.328853,-3.219965,6.921795,-6.949851,4.683639,-5.673733,6.545647,6.626185,-9.415259,0.004140,9.133559,4.103066,8.394879,-8.576263,5.736176,-4.536283,5.508058,-1.212517,1.797841,-6.561324,-5.235618,9.872492,-1.942769,-3.030924,8.801116,-8.989759,8.202778,9.809505,5.515560,-1.825860,4.580970,-5.269811,3.267516,4.914437,2.425708,-5.002460,-4.202026,7.212753,-0.823563,3.219629,5.200346,-9.270549,0.106365,-7.331239,1.546257,-3.606165,8.565625,-6.036384,5.860044,6.795404,3.131915,0.271168,5.350096,-7.099739,-8.744501,6.741871,9.449489,-6.020921,6.920300,-3.851464,-5.648962,-3.939431,4.740842,-4.839510,-9.791247,8.774086,9.164265,-7.563585,2.852586,2.330958,-6.354176,4.136203,-1.407546,4.177714,-6.745120,2.000153,-0.910010,5.524622,-4.610953,-5.818634,4.982503,-0.590077,-5.762452,-3.225900,6.057129,-9.132881,-8.243928,-9.760846,7.439560,9.220163,2.583561,-5.811338,-3.765226,2.382417,-7.119386,2.950938,2.400851,-1.156468,-8.991506,4.415420,-7.863510,-0.975035,9.379470,-0.944615,-5.860418,3.712271,-8.907294,0.739807,4.184179,7.656554,-2.337468,0.370489,-3.756702,-2.011844,-7.377966,-4.774873,4.477286,-3.148949,7.853410,2.130176,-0.190814,2.456771,7.294135,5.277253,2.695950,-4.994742,3.188506,8.303012,4.805672,4.088723,8.021692,5.246657,-6.108796,-4.177811,-7.657442,1.615365,-6.165983,5.246328,4.057889,-2.886050,2.182261,-6.988784,-8.378098,-1.511879,3.559496,-6.117382,5.023697,4.016707,5.732516,-0.417580,-7.574635,-2.172518,-9.006480,-1.645120,-2.310086,0.056487,6.449438,-2.656156,5.288019,7.392856,-8.661940,-4.744686,7.600866,0.477435,2.375456,-1.956177,8.002827,-5.377018,-6.115235,6.044927,2.684444,-6.469512,3.293455,-7.711637,6.998083,2.440457,5.498217,-0.663592,-1.352488,5.690244,3.073038,4.464958,-2.024246,-0.004121,-3.851168,9.535474,-4.800477,-6.967551,9.909501,5.037754,-5.918188,-7.252634,-8.627570,4.513702,2.252819,-2.722679,-7.871800,9.260088,1.410321,-5.784773,-6.361603,2.033968,6.439408,-6.116644,-3.813303,-8.331135,-2.121203,9.235457,0.314718,8.730182,2.010116,7.056202,4.560932,8.742126,-9.935341,-8.891557,5.078709,-0.750005,7.580132,1.250612,-9.263702,8.570281,5.020415,1.925470,4.831329,5.973538,-8.579932,-1.078387,6.685181,-2.323877,3.734186,-5.640737,-3.878061,-2.299976,8.639302,6.612491,8.730667,5.253010,6.578867,4.726305,3.955988,-9.094333,7.032817,-8.798385,-6.222569,-8.691385,7.807212,-7.283422,4.872386,-4.744288,5.392962,-0.352399,-5.646211,1.141761,-3.234126,-2.509922,9.212203,7.065704,9.949232,1.680116,-1.204638,-1.549118,2.823574,2.518348,7.022551,9.655219,-3.291942,8.075668,6.673458,-0.056695,9.643181,-3.757737,7.109944,5.371096,0.034915,-2.330982,-8.169714,6.595479,-0.572451,3.992478,-4.398856,-5.573383,-6.688211,5.180680,-5.216813,-3.304460,-7.461808,-2.571640,-8.547815,7.161098,-9.108402,-4.832550,-2.628222,-5.577259,-4.823648,-3.629106,0.428313,8.709158,-5.600803,8.030939,8.803017,-2.209855,-9.004036,3.763009,-9.785161,-3.379593,5.576519,7.774938,0.123727,-2.802533,2.948936,-6.794587,7.584436,1.204865,7.399770,-5.372183,-9.000241,-1.644140,0.101198,1.785775,-1.982884,-2.129926,-6.821682,0.107697], dtype = "float32")#candidate|12942|(1950,)|const|float32
call_12938 = relay.TupleGetItem(func_11145_call(relay.reshape(var_12939.astype('uint16'), [10, 9, 5]), relay.reshape(const_12940.astype('int32'), [36,]), relay.reshape(var_12941.astype('int32'), [1792,]), relay.reshape(const_12942.astype('float32'), [1950, 1]), ), 7)
call_12943 = relay.TupleGetItem(func_11151_call(relay.reshape(var_12939.astype('uint16'), [10, 9, 5]), relay.reshape(const_12940.astype('int32'), [36,]), relay.reshape(var_12941.astype('int32'), [1792,]), relay.reshape(const_12942.astype('float32'), [1950, 1]), ), 7)
output = relay.Tuple([call_12929,call_12938,var_12939,const_12940,var_12941,const_12942,])
output2 = relay.Tuple([call_12930,call_12943,var_12939,const_12940,var_12941,const_12942,])
func_12960 = relay.Function([var_12939,var_12941,], output)
mod['func_12960'] = func_12960
mod = relay.transform.InferType()(mod)
mutated_mod['func_12960'] = func_12960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12960_call = mutated_mod.get_global_var('func_12960')
var_12962 = relay.var("var_12962", dtype = "uint16", shape = (450,))#candidate|12962|(450,)|var|uint16
var_12963 = relay.var("var_12963", dtype = "int32", shape = (1792,))#candidate|12963|(1792,)|var|int32
call_12961 = func_12960_call(var_12962,var_12963,)
output = call_12961
func_12964 = relay.Function([var_12962,var_12963,], output)
mutated_mod['func_12964'] = func_12964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9264_call = mod.get_global_var('func_9264')
func_9265_call = mutated_mod.get_global_var('func_9265')
call_12969 = relay.TupleGetItem(func_9264_call(), 0)
call_12970 = relay.TupleGetItem(func_9265_call(), 0)
output = relay.Tuple([call_12969,])
output2 = relay.Tuple([call_12970,])
func_12973 = relay.Function([], output)
mod['func_12973'] = func_12973
mod = relay.transform.InferType()(mod)
output = func_12973()
func_12974 = relay.Function([], output)
mutated_mod['func_12974'] = func_12974
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_12984 = relay.TupleGetItem(func_9073_call(), 0)
call_12985 = relay.TupleGetItem(func_9075_call(), 0)
func_12553_call = mod.get_global_var('func_12553')
func_12555_call = mutated_mod.get_global_var('func_12555')
call_12996 = relay.TupleGetItem(func_12553_call(), 0)
call_12997 = relay.TupleGetItem(func_12555_call(), 0)
output = relay.Tuple([call_12984,call_12996,])
output2 = relay.Tuple([call_12985,call_12997,])
func_13003 = relay.Function([], output)
mod['func_13003'] = func_13003
mod = relay.transform.InferType()(mod)
output = func_13003()
func_13004 = relay.Function([], output)
mutated_mod['func_13004'] = func_13004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9073_call = mod.get_global_var('func_9073')
func_9075_call = mutated_mod.get_global_var('func_9075')
call_13014 = relay.TupleGetItem(func_9073_call(), 0)
call_13015 = relay.TupleGetItem(func_9075_call(), 0)
output = call_13014
output2 = call_13015
func_13017 = relay.Function([], output)
mod['func_13017'] = func_13017
mod = relay.transform.InferType()(mod)
output = func_13017()
func_13018 = relay.Function([], output)
mutated_mod['func_13018'] = func_13018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12479_call = mod.get_global_var('func_12479')
func_12480_call = mutated_mod.get_global_var('func_12480')
call_13037 = relay.TupleGetItem(func_12479_call(), 0)
call_13038 = relay.TupleGetItem(func_12480_call(), 0)
func_9240_call = mod.get_global_var('func_9240')
func_9243_call = mutated_mod.get_global_var('func_9243')
var_13044 = relay.var("var_13044", dtype = "float32", shape = (1, 42))#candidate|13044|(1, 42)|var|float32
call_13043 = relay.TupleGetItem(func_9240_call(relay.reshape(var_13044.astype('float32'), [42,])), 1)
call_13045 = relay.TupleGetItem(func_9243_call(relay.reshape(var_13044.astype('float32'), [42,])), 1)
output = relay.Tuple([call_13037,call_13043,var_13044,])
output2 = relay.Tuple([call_13038,call_13045,var_13044,])
func_13051 = relay.Function([var_13044,], output)
mod['func_13051'] = func_13051
mod = relay.transform.InferType()(mod)
mutated_mod['func_13051'] = func_13051
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13052 = relay.var("var_13052", dtype = "float32", shape = (1, 42))#candidate|13052|(1, 42)|var|float32
func_13051_call = mutated_mod.get_global_var('func_13051')
call_13053 = func_13051_call(var_13052)
output = call_13053
func_13054 = relay.Function([var_13052], output)
mutated_mod['func_13054'] = func_13054
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8621_call = mod.get_global_var('func_8621')
func_8622_call = mutated_mod.get_global_var('func_8622')
call_13065 = func_8621_call()
call_13066 = func_8621_call()
output = relay.Tuple([call_13065,])
output2 = relay.Tuple([call_13066,])
func_13078 = relay.Function([], output)
mod['func_13078'] = func_13078
mod = relay.transform.InferType()(mod)
mutated_mod['func_13078'] = func_13078
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13078_call = mutated_mod.get_global_var('func_13078')
call_13079 = func_13078_call()
output = call_13079
func_13080 = relay.Function([], output)
mutated_mod['func_13080'] = func_13080
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10457_call = mod.get_global_var('func_10457')
func_10459_call = mutated_mod.get_global_var('func_10459')
call_13114 = relay.TupleGetItem(func_10457_call(), 1)
call_13115 = relay.TupleGetItem(func_10459_call(), 1)
func_11201_call = mod.get_global_var('func_11201')
func_11202_call = mutated_mod.get_global_var('func_11202')
call_13119 = func_11201_call()
call_13120 = func_11201_call()
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_13130 = relay.TupleGetItem(func_5400_call(), 3)
call_13131 = relay.TupleGetItem(func_5402_call(), 3)
uop_13135 = relay.atanh(call_13130.astype('float64')) # shape=(8, 504, 12)
uop_13137 = relay.atanh(call_13131.astype('float64')) # shape=(8, 504, 12)
func_12456_call = mod.get_global_var('func_12456')
func_12461_call = mutated_mod.get_global_var('func_12461')
const_13146 = relay.const([[7.992093,-4.445936,5.357916,-3.553602,0.175400,7.653241,-2.881489,2.669777,7.465057,-2.760270,5.727746,9.070413,1.474159,0.781984,-0.120656,6.732061,-9.230141,9.682014],[4.943663,7.940270,-4.182235,-1.099239,-4.588056,-6.158007,-7.500154,8.086470,4.438091,-9.166824,2.370764,-3.997764,-2.506962,-9.692318,0.732053,0.396406,7.202553,0.535519],[7.888536,-6.254260,2.834608,4.766357,4.940848,-0.289077,-0.016168,-1.038092,-0.195197,6.447768,-8.211224,6.276451,4.902046,-9.730444,5.336363,-7.842968,5.672098,-0.259271]], dtype = "float32")#candidate|13146|(3, 18)|const|float32
const_13147 = relay.const([7,2,10,-2,-3,3,10,-10,2,5,-9,9,7,-2,-1,5,-5,-3,1,8,-10,10,4,-5,9,8,7,1,-1,6,7,9,-8,-9,-10,5], dtype = "int32")#candidate|13147|(36,)|const|int32
const_13148 = relay.const([[-10],[6],[-2],[-5],[4],[10],[5],[-6],[-1],[-6],[4],[4],[2],[9],[-9],[-4],[9],[-7],[6],[-9],[-7],[10],[2],[8],[-3],[-6],[6],[-2],[3],[2],[6],[2],[-5],[-6],[2],[-3],[-4],[-1],[-1],[10],[5],[2],[7],[2],[7],[1],[-1],[9],[-2],[8],[2],[-3],[8],[-5],[-4],[2],[10],[-3],[-2],[-6],[-10],[-2],[-9],[-6],[8],[5],[9],[6],[-3],[-6],[-3],[-6],[-4],[1],[-3],[-5],[-3],[-3],[-10],[3],[5],[7],[7],[9],[4],[7],[-6],[2],[2],[-8],[-8],[8],[-1],[-6],[-10],[-10],[7],[8],[3],[-4],[-5],[-4],[-5],[-2],[10],[4],[2],[1],[-4],[6],[-6],[-8],[-6],[-6],[6],[-5],[4],[3],[-8],[6],[3],[-7],[-3],[8],[-5],[-3],[3],[-3],[10],[9],[1],[8],[-5],[-5],[-5],[2],[3],[5],[-8],[-7],[-9],[2],[-2],[10],[-6],[1],[-5],[5],[9],[5],[-2],[-4],[-8],[3],[1],[-7],[-10],[10],[-5],[7],[1],[1],[4],[-8],[-5],[-9],[-1],[2],[-1],[3],[4],[-10],[-2],[8],[5],[1],[3],[4],[9],[2],[-6],[-10],[5],[6],[6],[-8],[3],[9],[-2],[-3],[2],[5],[-7],[5],[-2],[9],[-10],[-4],[-1],[-1],[-2],[-9],[8],[-10],[-7],[-7],[8],[-6],[-2],[10],[-8],[1],[6],[-2],[-8],[3],[-3],[6],[-2],[-4],[-1],[10],[5],[-4],[-5],[-3],[3],[-10],[1],[-7],[-9],[10],[-7],[-5],[-1],[8],[10],[-1],[3],[1],[2],[-10],[8],[-4],[-6],[-8],[3],[6],[4],[-9],[-8],[7],[4],[-2],[5],[-5],[-7],[-10],[9],[-4],[6],[9],[-1],[9],[6],[-2],[-4],[2],[-9],[7],[8],[-1],[-10],[-10],[6],[5],[9],[3],[-9],[-5],[10],[-1],[8],[-4],[-10],[1],[2],[-2],[2],[3],[-5],[1],[-10],[-4],[-9],[-8],[-8],[-3],[4],[3],[8],[-1],[5],[-5],[3],[-6],[6],[-2],[4],[-7],[-7],[-1],[-4],[3],[-4],[2],[-10],[4],[-6],[10],[-7],[-10],[4],[1],[-10],[-10],[-5],[-3],[-7],[-9],[-3],[-3],[-5],[6],[-6],[-1],[-5],[-7],[-2],[8],[7],[10],[10],[1],[10],[-8],[-10],[-7],[8],[6],[-2],[-8],[-7],[5],[-1],[1],[2],[10],[-5],[-9],[10],[1],[8],[6],[-1],[-9],[-9],[-9],[2],[-4],[-8],[3],[-8],[-10],[-3],[-9],[6],[-4],[8],[-2],[2],[2],[-8],[8],[7],[-5],[10],[-5],[-10],[-1],[-5],[7],[-2],[10],[2],[-9],[-3],[8],[3],[3],[9],[-5],[5],[-7],[-8],[-7],[1],[-6],[6],[-3],[8],[-5],[-2],[-4],[10],[-5],[5],[-9],[-1],[-5],[-5],[1],[6],[-8],[-5],[-3],[2],[6],[2],[9],[9],[-4],[-3],[7],[9],[2],[-4],[-1],[2],[5],[10],[-10],[5],[-4],[-8],[-8],[6],[-1],[4],[4],[8],[1],[-1],[-4],[-2],[10],[-6],[-2],[-8],[5],[-1],[1],[4],[-10],[-8],[4],[-2],[-9],[7],[-4],[4],[-1],[-4],[-9],[-1],[-8],[-9],[4],[1],[-4],[8],[-6],[-2],[1],[-2],[-2],[-1],[-5],[8],[-9],[8],[5],[-4],[-1],[-1],[-5],[-2],[9],[-8],[7],[7],[6],[-2],[5],[5],[-1],[1],[2],[-3],[2],[9],[-4],[10],[9],[6],[-10],[5],[3],[7],[9],[3],[-8],[-6],[-2],[7],[-4],[5],[9],[1],[-3],[-2],[-10],[-9],[6],[10],[-1],[-3],[-7],[-1],[-7],[-7],[5],[9],[5],[-10],[7],[-1],[10],[-9],[-7],[10],[-1],[-7],[4],[-9],[4],[-4],[-8],[-3],[-4],[-3],[-6],[9],[6],[2],[6],[3],[9],[-6],[-8],[5],[-3],[-3],[1],[3],[-8],[6],[1],[-9],[3],[4],[7],[9],[-7],[-8],[1],[1],[2],[4],[9],[-7],[-2],[-10],[-10],[3],[2],[5],[3],[5],[2],[-7],[7],[-9],[-1],[2],[-8],[6],[4],[6],[2],[-7],[5],[4],[-9],[-9],[2],[-4],[-5],[8],[3],[5],[-9],[-5],[6],[-6],[1],[3],[-7],[-5],[5],[7],[-2],[-6],[3],[-5],[6],[-2],[-3],[-9],[-8],[-7],[10],[4],[-6],[6],[-3],[-9],[-4],[-3],[1],[-5],[-8],[-1],[4],[9],[-4],[-1],[-6],[-4],[6],[-6],[-10],[5],[1],[3],[6],[8],[-7],[-6],[-10],[-10],[-1],[1],[-6],[2],[2],[10],[-4],[-10],[-4],[9],[-2],[-5],[-8],[7],[8],[-4],[-10],[8],[9],[-9],[-1],[-7],[-5],[2],[-9],[-9],[-7],[-10],[-7],[-3],[-8],[-8],[2],[-4],[8],[-4],[-2],[6],[5],[7],[10],[-4],[2],[10],[-5],[-6],[9],[-9],[10],[2],[9],[-10],[4],[-10],[-5],[-2],[5],[-2],[4],[-8],[-4],[-9],[-8],[4],[4],[-9],[1],[-5],[5],[-3],[-4],[-5],[-2],[6],[10],[4],[8],[-9],[-2],[8],[8],[-10],[-7],[3],[2],[-4],[2],[5],[-8],[-2],[7],[-4],[-7],[-3],[5],[-8],[9],[3],[3],[-7],[3],[-3],[-3],[-1],[-1],[9],[6],[3],[6],[6],[-7],[6],[10],[-1],[-7],[-2],[-10],[-7],[5],[-5],[-8],[-4],[-10],[2],[3],[9],[10],[-6],[-7],[7],[-5],[-8],[4],[-9],[-3],[5],[1],[-8],[8],[-6],[5],[3],[-1],[8],[-5],[-5],[4],[7],[-7],[6],[3],[1],[-3],[-6],[8],[4],[-7],[9],[-7],[7],[-1],[-4],[4],[-4],[-10],[-10],[6],[-10],[2],[-1],[-5],[-4],[-3],[10],[1],[2],[8],[1],[-7],[-4],[7],[-3],[-7],[1],[-6],[2],[7],[-6],[2],[-8],[3],[-6],[-8],[-4],[2],[-4],[-4],[-2],[-10],[2],[5],[-9],[-3],[-3],[-1],[7],[3],[-7],[-2],[5],[-9],[-5],[-8],[3],[9],[-3],[-1],[-7],[5],[9],[-10],[-10],[-2],[3],[-7],[10],[-9],[-8],[3],[2],[1],[8],[-6],[-6],[4],[-9],[-4],[7],[-5],[1],[-1],[10],[7],[5],[-1],[2],[2],[4],[5],[-1],[9],[-3],[-10],[-8],[5],[10],[10],[5],[10],[-7],[-7],[-5],[-9],[1],[2],[4],[3],[-4],[-2],[-9],[-2],[2],[-9],[-9],[-7],[9],[5],[6],[-4],[-1],[8],[-6],[3],[-3],[4],[1],[-1],[8],[-9],[8],[-5],[-1],[3],[-6],[2],[-3],[-3],[1],[-1],[-10],[-8],[-1],[-3],[10],[7],[-8],[-7],[3],[-8],[-8],[8],[-3],[2],[-4],[10],[-8],[-6],[-7],[7],[1],[-5],[8],[-1],[3],[2],[10],[-3],[-1],[-8],[-8],[1],[-5],[4],[-8],[-9],[-6],[-9],[8],[7],[-1],[-3],[1],[5],[2],[6],[-10],[-5],[-6],[8],[9],[2],[-2],[4],[-2],[3],[2],[-4],[3],[4],[1],[-3],[-9],[-7],[-7],[-6],[2],[6],[10],[6],[-10],[5],[5],[4],[9],[3],[-8],[-2],[-7],[1],[-3],[4],[6],[1],[-9],[9],[-6],[-1],[6],[-10],[5],[-8],[4],[-1],[10],[-6],[-10],[8],[10],[5],[-6],[7],[1],[-4],[-5],[-3],[-10],[3],[-10],[6],[6],[-2],[-4],[-6],[10],[4],[-6],[-10],[10],[3],[10],[6],[-4],[5],[-3],[1],[-7],[-10],[3],[-7],[-7],[-1],[-1],[1],[4],[-9],[-9],[-6],[3],[-6],[-4],[-8],[2],[-2],[-3],[-10],[-8],[-5],[-3],[-4],[-10],[3],[9],[-2],[-1],[-1],[-7],[-4],[8],[-6],[4],[3],[-8],[-5],[-5],[-1],[-4],[-4],[-6],[-5],[7],[1],[-6],[3],[-2],[-7],[4],[2],[-8],[-6],[-6],[10],[1],[-2],[2],[-5],[-3],[1],[3],[3],[2],[6],[10],[9],[-5],[-3],[-1],[-10],[8],[-9],[-9],[-9],[1],[2],[-7],[-3],[-5],[-4],[-5],[4],[-9],[-10],[1],[3],[3],[-2],[-8],[-5],[-5],[5],[1],[1],[-5],[2],[-10],[-1],[-5],[-9],[2],[-8],[4],[7],[4],[-1],[6],[1],[3],[5],[8],[9],[4],[-7],[10],[7],[-10],[7],[8],[-5],[4],[1],[3],[-9],[-3],[6],[2],[9],[3],[6],[4],[5],[10],[-7],[6],[9],[10],[-1],[-2],[-9],[5],[-8],[9],[2],[3],[-7],[-1],[2],[-6],[10],[-1],[-3],[-10],[3],[-5],[9],[-6],[-6],[4],[8],[3],[-6],[-10],[8],[9],[10],[-8],[2],[7],[10],[-6],[3],[-7],[8],[4],[9],[-3],[-6],[5],[-1],[-1],[-4],[-3],[-6],[2],[2],[6],[1],[-4],[-3],[6],[8],[8],[4],[-7],[8],[5],[-6],[10],[9],[-8],[9],[6],[-7],[8],[-9],[-3],[4],[2],[-7],[-3],[8],[8],[-6],[-5],[-2],[6],[9],[1],[4],[-8],[-6],[3],[-2],[-7],[3],[-5],[8],[4],[4],[1],[-4],[-9],[-10],[-9],[-2],[9],[-7],[9],[7],[-10],[8],[1],[1],[-1],[5],[-2],[10],[-10],[-2],[7],[5],[3],[8],[3],[9],[-8],[-9],[4],[2],[-6],[9],[4],[9],[-10],[-6],[-6],[-2],[-2],[10],[8],[9],[8],[-4],[-7],[-10],[-3],[-10],[10],[4],[10],[-6],[-10],[-5],[1],[-8],[-7],[-6],[4],[-9],[-6],[3],[-10],[8],[-2],[-10],[2],[-9],[4],[-3],[-9],[5],[-7],[-3],[9],[-1],[3],[-4],[-8],[-4],[5],[-3],[2],[9],[5],[-1],[4],[-10],[-7],[3],[5],[2],[-9],[2],[1],[10],[-10],[4],[4],[-7],[5],[5],[6],[-2],[8],[-10],[1],[-2],[8],[-10],[2],[6],[-2],[5],[2],[-8],[2],[6],[-9],[-2],[4],[-2],[3],[7],[-10],[2],[-8],[3],[9],[-9],[9],[-9],[9],[10],[6],[4],[3],[-6],[10],[8],[2],[-1],[6],[-10],[1],[7],[-5],[1],[-4],[1],[-3],[1],[-3],[-10],[10],[-4],[-8],[1],[-8],[-1],[10],[-8],[-4],[10],[-10],[-7],[8],[-10],[-5],[-3],[-8],[7],[1],[-2],[-1],[-7],[-8],[-8],[2],[2],[1],[-6],[7],[9],[6],[-7],[10],[-2],[4],[-9],[6],[-7],[-8],[9],[-3],[5],[-2],[2],[-9],[-1],[4],[3],[4],[6],[-1],[4],[-10],[2],[-6],[-2],[-3],[2],[10],[-5],[6],[3],[-4],[5],[-4],[-7],[-5],[-10],[9],[-4],[4],[5],[-1],[-5],[10],[9],[5],[-7],[10],[8],[-10],[-9],[-3],[-9],[3],[-1],[-9],[6],[-1],[10],[-10],[9],[-3],[-4],[-8],[-7],[7],[-3],[-4],[-7],[6],[-6],[2],[7],[-5],[-9],[8],[-8],[-4],[-3],[5],[1],[7],[4],[-8],[10],[9],[-1],[10],[-6],[-4],[7],[3],[-2],[10],[-1],[9],[-8],[-8],[10],[3],[2],[-6],[5],[-8],[10],[-6],[-6],[6],[9],[-5],[-10],[-2],[1],[-3],[6],[10],[10],[-10],[3],[-5],[-1],[-2],[1],[-5],[4],[1],[-4],[-4],[-5],[-7],[5],[-8],[3],[-9],[7],[1],[-5],[5],[3],[-4],[-9],[2],[-8],[-2],[3],[3],[-7],[2],[-10],[-8],[3],[4],[-4],[-3],[8],[3],[2],[5],[-4],[-2],[-8],[-7],[-7],[-7],[-10],[-5],[6],[-10],[-10],[-7],[-10],[-8],[-8],[4],[-1],[10],[-3],[-4],[-8],[9],[-8],[10],[4],[6],[4],[-2],[6],[9],[-4],[7],[-9],[-5],[-6],[3],[2],[3],[-8],[5],[4],[8],[5],[-4],[-2],[6],[-6],[-5],[1],[-7],[1],[-2],[-4],[2],[-7],[-6],[10],[-1],[-3],[-7],[-10],[5],[7],[-2],[10],[-7],[1],[-3],[-4],[9],[-1],[4],[-8],[-6],[4],[8],[-8],[1],[-4],[4],[-2],[4],[-10],[-10],[-1],[-8],[1],[-4],[9],[-10],[5],[8],[-2],[9],[-3],[10],[1],[1],[-1],[8],[8],[-4],[9],[10],[10],[-2],[9],[-10],[-8],[8],[1],[-7],[2],[-6],[6],[4],[-1],[5],[-8],[8],[4]], dtype = "int32")#candidate|13148|(1792, 1)|const|int32
const_13149 = relay.const([-1.651420,-1.575705,1.751301,2.995580,-1.037129,-0.913020,5.928241,-4.136917,4.314006,1.161935,2.433428,-3.134618,1.469582,-1.528185,9.659593,8.161156,-5.927964,-4.824072,7.795945,-2.811121,9.330287,6.452004,8.808936,0.103981,-8.638316,-0.915429,5.757996,6.663959,-2.475018,3.054967,-4.698163,0.533085,7.697552,-7.433912,-1.858233,-8.853880,-1.941241,-6.691979,8.324165,-0.005906,2.169136,-7.573121,6.094795,3.779949,5.304457,2.503655,7.691702,6.683006,-9.565604,-7.089600,-6.658430,1.761171,-7.842043,-1.251670,7.151339,-5.528979,4.402447,6.041285,-0.242910,3.260235,-0.569086,-0.677321,3.679501,-8.560369,8.201969,-5.173630,4.940859,-8.375426,-5.926788,5.673855,4.594842,-7.606823,-1.334074,5.568154,-1.061578,1.452732,9.367738,4.806835,0.655654,1.962674,-3.046671,-6.792533,2.570759,6.023284,-0.251050,8.614825,-8.965170,-9.617731,1.907022,-8.282401,-7.256659,-6.276361,1.378973,8.139700,8.783076,9.229042,-2.130076,9.450620,2.258203,1.518244,-9.033222,3.399441,-1.284786,0.588532,-0.817616,-5.064521,9.771016,-9.548749,-6.352542,1.625732,-0.742246,5.205974,5.110004,-4.831061,6.387243,-7.798747,-0.831369,7.253411,9.500728,0.785645,-9.425646,5.364907,-5.535464,-8.775932,4.944990,5.008811,-0.706164,-2.680154,1.619095,-4.974663,7.093857,-8.325979,2.280170,-0.556434,9.357641,-3.509602,0.999818,9.360178,0.419130,-1.669159,-1.684282,0.735619,-1.582611,-9.006734,-2.424091,1.175918,0.693677,-8.977182,1.980012,7.035423,-7.040908,-6.363349,7.453774,8.973600,6.462554,6.979339,9.893232,-2.302624,9.252965,-7.927313,-3.002132,1.736656,5.440983,-8.878724,-3.560753,4.743001,0.314624,9.574992,-0.024052,5.776905,-8.783626,1.350613,7.677038,-3.379331,-0.776827,6.098764,-9.896627,-4.313835,-3.688503,-9.001233,-7.654179,0.248714], dtype = "float32")#candidate|13149|(182,)|const|float32
call_13145 = relay.TupleGetItem(func_12456_call(relay.reshape(const_13146.astype('float32'), [6, 1, 9]), relay.reshape(const_13147.astype('int32'), [36,]), relay.reshape(const_13148.astype('int32'), [1792,]), relay.reshape(const_13149.astype('float32'), [182,]), ), 4)
call_13150 = relay.TupleGetItem(func_12461_call(relay.reshape(const_13146.astype('float32'), [6, 1, 9]), relay.reshape(const_13147.astype('int32'), [36,]), relay.reshape(const_13148.astype('int32'), [1792,]), relay.reshape(const_13149.astype('float32'), [182,]), ), 4)
uop_13151 = relay.sinh(uop_13135.astype('float64')) # shape=(8, 504, 12)
uop_13153 = relay.sinh(uop_13137.astype('float64')) # shape=(8, 504, 12)
func_8938_call = mod.get_global_var('func_8938')
func_8939_call = mutated_mod.get_global_var('func_8939')
call_13154 = func_8938_call()
call_13155 = func_8938_call()
output = relay.Tuple([call_13114,call_13119,call_13145,const_13146,const_13147,const_13148,const_13149,uop_13151,call_13154,])
output2 = relay.Tuple([call_13115,call_13120,call_13150,const_13146,const_13147,const_13148,const_13149,uop_13153,call_13155,])
func_13156 = relay.Function([], output)
mod['func_13156'] = func_13156
mod = relay.transform.InferType()(mod)
mutated_mod['func_13156'] = func_13156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13156_call = mutated_mod.get_global_var('func_13156')
call_13157 = func_13156_call()
output = call_13157
func_13158 = relay.Function([], output)
mutated_mod['func_13158'] = func_13158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6434_call = mod.get_global_var('func_6434')
func_6435_call = mutated_mod.get_global_var('func_6435')
call_13218 = func_6434_call()
call_13219 = func_6434_call()
func_5551_call = mod.get_global_var('func_5551')
func_5553_call = mutated_mod.get_global_var('func_5553')
call_13225 = relay.TupleGetItem(func_5551_call(), 0)
call_13226 = relay.TupleGetItem(func_5553_call(), 0)
func_12280_call = mod.get_global_var('func_12280')
func_12283_call = mutated_mod.get_global_var('func_12283')
const_13249 = relay.const([[True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True],[True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True],[False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True]], dtype = "bool")#candidate|13249|(3, 396)|const|bool
call_13248 = relay.TupleGetItem(func_12280_call(relay.reshape(const_13249.astype('bool'), [1188,])), 2)
call_13250 = relay.TupleGetItem(func_12283_call(relay.reshape(const_13249.astype('bool'), [1188,])), 2)
output = relay.Tuple([call_13218,call_13225,call_13248,const_13249,])
output2 = relay.Tuple([call_13219,call_13226,call_13250,const_13249,])
func_13257 = relay.Function([], output)
mod['func_13257'] = func_13257
mod = relay.transform.InferType()(mod)
output = func_13257()
func_13258 = relay.Function([], output)
mutated_mod['func_13258'] = func_13258
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6405_call = mod.get_global_var('func_6405')
func_6407_call = mutated_mod.get_global_var('func_6407')
call_13285 = relay.TupleGetItem(func_6405_call(), 0)
call_13286 = relay.TupleGetItem(func_6407_call(), 0)
output = relay.Tuple([call_13285,])
output2 = relay.Tuple([call_13286,])
func_13299 = relay.Function([], output)
mod['func_13299'] = func_13299
mod = relay.transform.InferType()(mod)
output = func_13299()
func_13300 = relay.Function([], output)
mutated_mod['func_13300'] = func_13300
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9264_call = mod.get_global_var('func_9264')
func_9265_call = mutated_mod.get_global_var('func_9265')
call_13322 = relay.TupleGetItem(func_9264_call(), 0)
call_13323 = relay.TupleGetItem(func_9265_call(), 0)
output = call_13322
output2 = call_13323
func_13328 = relay.Function([], output)
mod['func_13328'] = func_13328
mod = relay.transform.InferType()(mod)
mutated_mod['func_13328'] = func_13328
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13328_call = mutated_mod.get_global_var('func_13328')
call_13329 = func_13328_call()
output = call_13329
func_13330 = relay.Function([], output)
mutated_mod['func_13330'] = func_13330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12536_call = mod.get_global_var('func_12536')
func_12538_call = mutated_mod.get_global_var('func_12538')
call_13368 = func_12536_call()
call_13369 = func_12536_call()
output = call_13368
output2 = call_13369
func_13376 = relay.Function([], output)
mod['func_13376'] = func_13376
mod = relay.transform.InferType()(mod)
output = func_13376()
func_13377 = relay.Function([], output)
mutated_mod['func_13377'] = func_13377
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13299_call = mod.get_global_var('func_13299')
func_13300_call = mutated_mod.get_global_var('func_13300')
call_13378 = relay.TupleGetItem(func_13299_call(), 0)
call_13379 = relay.TupleGetItem(func_13300_call(), 0)
output = call_13378
output2 = call_13379
func_13388 = relay.Function([], output)
mod['func_13388'] = func_13388
mod = relay.transform.InferType()(mod)
mutated_mod['func_13388'] = func_13388
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13388_call = mutated_mod.get_global_var('func_13388')
call_13389 = func_13388_call()
output = call_13389
func_13390 = relay.Function([], output)
mutated_mod['func_13390'] = func_13390
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6775_call = mod.get_global_var('func_6775')
func_6777_call = mutated_mod.get_global_var('func_6777')
call_13442 = relay.TupleGetItem(func_6775_call(), 3)
call_13443 = relay.TupleGetItem(func_6777_call(), 3)
func_8055_call = mod.get_global_var('func_8055')
func_8057_call = mutated_mod.get_global_var('func_8057')
call_13454 = relay.TupleGetItem(func_8055_call(), 0)
call_13455 = relay.TupleGetItem(func_8057_call(), 0)
func_12717_call = mod.get_global_var('func_12717')
func_12719_call = mutated_mod.get_global_var('func_12719')
call_13460 = func_12717_call()
call_13461 = func_12717_call()
output = relay.Tuple([call_13442,call_13454,call_13460,])
output2 = relay.Tuple([call_13443,call_13455,call_13461,])
func_13468 = relay.Function([], output)
mod['func_13468'] = func_13468
mod = relay.transform.InferType()(mod)
mutated_mod['func_13468'] = func_13468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13468_call = mutated_mod.get_global_var('func_13468')
call_13469 = func_13468_call()
output = call_13469
func_13470 = relay.Function([], output)
mutated_mod['func_13470'] = func_13470
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13482 = relay.var("var_13482", dtype = "uint8", shape = ())#candidate|13482|()|var|uint8
var_13483 = relay.var("var_13483", dtype = "uint8", shape = (11, 9, 4))#candidate|13483|(11, 9, 4)|var|uint8
bop_13484 = relay.subtract(var_13482.astype('uint8'), var_13483.astype('uint8')) # shape=(11, 9, 4)
uop_13495 = relay.log(bop_13484.astype('float64')) # shape=(11, 9, 4)
output = uop_13495
output2 = uop_13495
func_13506 = relay.Function([var_13482,var_13483,], output)
mod['func_13506'] = func_13506
mod = relay.transform.InferType()(mod)
mutated_mod['func_13506'] = func_13506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13506_call = mutated_mod.get_global_var('func_13506')
var_13508 = relay.var("var_13508", dtype = "uint8", shape = ())#candidate|13508|()|var|uint8
var_13509 = relay.var("var_13509", dtype = "uint8", shape = (11, 9, 4))#candidate|13509|(11, 9, 4)|var|uint8
call_13507 = func_13506_call(var_13508,var_13509,)
output = call_13507
func_13510 = relay.Function([var_13508,var_13509,], output)
mutated_mod['func_13510'] = func_13510
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9264_call = mod.get_global_var('func_9264')
func_9265_call = mutated_mod.get_global_var('func_9265')
call_13519 = relay.TupleGetItem(func_9264_call(), 0)
call_13520 = relay.TupleGetItem(func_9265_call(), 0)
func_6736_call = mod.get_global_var('func_6736')
func_6741_call = mutated_mod.get_global_var('func_6741')
var_13580 = relay.var("var_13580", dtype = "int16", shape = (21, 6))#candidate|13580|(21, 6)|var|int16
const_13581 = relay.const([8,-2,-7,10,8,-5,-7,-9,1,-1,-10,-10,-4,3,9,-2,1,1,-2,6,-7,4,-9,-7,1,-5,-10,9,-5,9,-4,3,6,1,-7,7,-8,-9,7,5,-5,-1,5,-8,-2,-6,-9,-2,-5,2,-2,5,1,-8,10,-6,-6,-10,7,-3,7,7,-10,-1,-4,6,-2,-5,-3,-1,6,7,-4,-5,7,2,-7,1,8,2,-5,-5,9,9,-4,-4,8,4,-8,-3,-5,2,3,-1,7,10,-4,-10,6,-5,-10,1,-10,-7,2,-7,4,10,5,8,-7,-6,5,3,5,-2,-9,-10,9,-1,-7,9,8,-1,-3,6,7,-10,-8,-6,3,8,2,-10,5,-2,-10,8,-2,-2,7,-4,10,7,-9,2,10,3,-6,-4,6,5,-9,-5,-1,-8,5,-3,8,-6,2,6,-6,5,-3,4,5,5,-2,4,5,2,-4,8,4,8,10,9,4,-9,-2,-4,4,-2,-8,-2,10,7,-8,5,-7,-7,8,4,-9,-9,-5,10,4,6,8,-7,1,-2,8,-10,-2,-3,-10,-2,-7,-1,-4,4,1,-10,-9,7,2,8,1,-5,2,3,5,2,-8,6,2,-2,9,3,-10,7,-2,-3,2,5,-8,-7,-8,4,-2,8,10,8,-3,-9,-3,-6,-3,9,-9,-9,-5,-9,-5,-8,5,2,5,9,3,10,4,1,7,3,6,-4,-10,3,7,-4,-7,-10,-8,-2,-6,-7,10,-10,-9,6,6,-6,4,4,1,6,6,-10,-6,5,5,-4,9,-6,10,-4,2,5,-7,9,-8,-6,10,1,8,-10,8,-2,2,7,-7,-8,-1,7,3,6,9,-8,-7,9,-6,2,2,5,9,-6,5,7,9,3,-8,-5,-2,9,3,7,-6,-7,1,2,4,-8,2,-4,-9,-2,6,7,-10,7,6,-7,3,1,-6,5,1,-8,1,3,-8,9,2,-2,-4,-8,-5,3,10,3,6,-5,-1,9,6,-2,-7,-10,8,-1,-3,3,5,7,1,-1,-5,-4,-3,8,7,6,10,-10,10,-1,2,2,-1,5,6,-8,4,7,7,7,-5,9,-10,4,-2,-2,8,-4,-10,10,4,-9,10,-6,-3,-2,-7,-6,1,7,-4,8,3,-2,8,3,9,-10,9,-7,-10,-3,-1,-6,-8,4,3,5,-3,-1,6,-4,-3,4,-2,-4,-2,-1,-5,-5,-9,-4,-2,-8,-5,-7,2,-6,10,9,-2,6,2,-7,4,10,1,-8,5,8,-5,-3,-10,4,-10,2,7,-4,-5,6,10,-5,-3,4,8,-10,-10,-2,1,-10,8,-10,2,-4,4,-10,-7,5,-7,10,2,-8,2,-3,-3,-3,-9,-8,7,-1,3,5,-4,1,-1,7,-10,8,-3,4,-5,1,-10,-6,2,-5,-7,-6,-3,4,-10,7,-6,-4,5,-6,-7,-8,-7,-1,2,-3,-10,-3,10,5,8,1,-7,4,-7,6,-9,-8,-9,-3,-8,-3,7,-9,3,6,8,-5,4,-8,-2,-4,1,5,-4,-2,-9,1,10,5,-8,5,10,-10,1,-7,4,-4,-3,4,9,2,-2,-6,-4,8,-1,7,-4,6,-5,-8,4,4,3,7,-4,2,1,-10,8,-9,10,-8,3,10,9,-8,2,-10,-8,8,7,9,7,-5,7,2,1,2,6,-3,3,-7,1,-1,6,2,9,-3,3,1,-3,-7,-5,-8,2,7,3,10,3,3,-9,5,10,-4,4,-3,10,-1,9,-7,1,6,-8,-7,6,-10,-7,-4,-1,-10,-6,3,-2,-1,4,-4,10,10,-4,8,-7,6,-1,2,9,-8,4,-10,-6,9,-7,-6,3,-6,2,-9,-2,4,-5,7,8,-8,-9,-1,7,6,3,4,9,-2,-4,2,4,-1,-4,-3,-8,-7,9,-1,-7,4,-2,-3,6,3,-6,8,-1,-1,1,-7,6,3,9,-6,4,6,6,-6,7,-6,2,-3,7,8,-9,-5,9,4,4,4,-10,4,10,-2,-7,9,4,-4,7,7,7,3,-1,-3,7,-5,-8,4,-8,4,-5,-5,-5,10,-1,8,-10,-3,9,10,-3,-2,-3,-6,5,6,-3,8,4,-9,-6,4,-9,-9,-2,4,-3,6,-5,8,-2,-9,-9,-4,7,-7,-2,9,7,2,8,-5,-4,-8,3,8,-2,2,-6,-6,2,5,4,7,-3,-1,5,-9,-8,10,5,-9,-7,-2,-9,-5,10,5,4,-5,1,6,-5,6,6,-5,6,-1,8,7,2,10,-1,-7,-9,2,10,5,-4,9,9,-2,9,-9,5,-4,-7,10,-1,3,-7,7,2,3,7,6,5,2,-1,10,-8,-4,1,10,-9,2,-7,-5,3,5,-1,7,-10,3,1,-7,10,-3,-5,2,8,-2,-5,4,-9,9,1,-10,-4,-2,4,5,5,6,-10,6,4,-5,-6,-6,-7,5,-8,10,-5,8,-6,-5,10,-10,10,10,-3,1,-1,2,-2,9,1,-6,4,8,-7,-10,6,7,6,-10,-10,6,-9,-3,-7,-3,-4,7,-2,-9,-1,6,-8,1,-2,-3,-3,-8,-7,-1,3,-3,2,-6,-6,-5,-3,4,6,7,6,2,7,2,-1,8,-9,-3,-2,7,-4,-7,-3,-10,6,-7,-7,2,9,8,6,-3,9,-8,-7,-1,5,-9,6,-7,9,5,-5,10,2,3,5,5,-4,-7,5,-1,3,-9,3,3,10,-8,6,8,-5,8,-6,4,-5,10,-6,-10,-5,1,-7,-10,4,-1,-3,10,1,-7,-2,-7,-1,-7,-2,-9,-10,-4,5,-3,1,1,4,-1,-9,1,1,-6,-9,-9,-4,7,-9,8,-7,4,4,2,-5,2,-3,-5,1,5,8,10,-4,-3,-9,10,-1,-4,10,-4,10,10,7,8,-1,-9,-10,-1,7,9,7,4,2,5,-7,-8,5,10,5,1,2,-3,10,-7,7,6,3,-4,-9,8,7,3,-6,-5,5,-5,7,-9,1,7,2,-2,3,-4,6,-10,-10,7,8,-4,-8,-9,-8,-4,-4,7,-4,5,-6,10,2,4,-3,-7,1,-3,2,-5,-10,-9,2,4,-6,1,-7,3,3,1,-8,-8,-2,9,-2,-4,3,-1,-3,1,4,-3,-5,8,6,5,-8,5,3,-3,8,9,5,8,-5,-5,-3,9,5,-7,9,-4,-4,-8,-3,-1,-8,-4,-10,-1,3,7,-6,-3,6,-3,1,-5,-8,-1,-3,2,1,-4,-10,10,-3,-9,-3,-10,-2,7,10,-8,4,9,-2,-9,-9,-5,-10,-4,2,-9,-6,6,-2,1,5,-10,9,-8,-2,-3,2,2,5,-4,-1,-3,-4,7,4,-7,7,9,7,-8,-4,10,3,7,-1,-6,-6,1,10,7,6,-4,-1,3,-10,-9,-4,-2,4,-6,2,9,-2,9,10,5,-10,-1,2,3,4,8,-2,6,10,10,5,2,-2,1,-9,-8,-5,-3,4,3,-5,-8,1,-2,-8,-3,-2,2,9,5,-10,-8,3,-4,-5,-5,-7,-9,8,9,2,9,-8,9,4,5,9,9,-5,1,1,10,10,6,1,-4,-9,8,-3,7,8,-9,7,1,4,-10,7,-3,-1,4,8,4,10,7,6,-1,7,-5,2,6,7,1,10,-10,-4,-3,-4,-2,-9,-8,-4,-3,-2,7,2,10,-1,-3,4,2,-2,2,3,8,2,7,8,-9,6,-4,9,-10,-4,3,-10,8,1,-6,4,4,-4,2,-1,-2,-6,9,-2,-8,-2,6,6,-4,4,1,5,-5,-8,-9,-9,10,-9,3,-6,10,9,-1,-10,4,-4,5,10,-6,-9,9,-6,-3,6,6,6,1,2,4,7,-7,3,-8,-1,3,-9,-8,-1,-10,9,-10,-2,2,-3,7,4,-10,-7,10,-1,10,7,-5,-10,-5,2,4,8,-7,4,-10,-9,5,-9,6,10,-9,1,-3,-8,-10,6,4,3,5,-7,-6,-5,4,6,3,-5,2,6,-9,-4,7,-4,-3,4,4,3,2,1,-4,-6,-2,9,7,9,-2,-4,6,9,6,-7,9,-10,-8,6,9,-8,3,7,3,-5,-3,-5,8,6,9,4,-3,-8,-5,-2,-6,-7,8,-8,-2,-9,3,-1,7,-3,-1,6,-1,-5,-9,-3,1,-4,6,1,7,10,-3,-1,10,-1,-10,5,3,10,-10,7,-4,10,6,-5,-3,-3,8,1,7,-7,10,10,5,-5,2,-4,-6,-4,8,-5,6,9,3,10,-3,9,-10,-7,9,-9,8,7,10,6,3,-2,9,-3,-3,-2,-1,-10,-2,-7,8,3,-1,-10,6,-10,-7,-9,4,-9,-6,-3,-6,1,7,10,-6,-3,-3,-10,9,7,-2,2,-10,-5,6,5,-1,9,-6,5,-9,-1,-1,3,-10,-4,9,-10,-9,-7,-1,4,-1,-9,-1,1,3,4,4,4,10,-8,-5,7,-1,8,9,5,-4,-8,-1,7,-2,9,-8,10,10,8,6,7,2,-1,-7,8,3,8,-5,-9,6,5,-1,-4,4,-6,7,-8,-1,7,-9,1,3,7,6,6,-6,-8,7,5,3,-2,7,9,-2,3,-5,3,-8,5,8,8,2,8,7,3,-7,2,6,9,10,-9,-10,3,3,-2,9,5,-5,3,8,-3,10,10,-9,-3,-3,-5,5,1,-6,-10,-2,-8,-8,8,-6,3,-8,-1,-4,-7,-7,1,10,9,-6,9,-4,4,10,9,7,-4,-7,-2,-1,7,1,9,10,7,7,-4,5,-2,-2,-10,5,3,-1,2,-6,-10,-6,10,9,2,3,6,5,-4,-8,-7,-10,-4,5,-5,-6,-10,5,10,7,-9,-9,-10,-10,-3,-9,-1,1,2,-3,9,-1,4,8,10,-8,-6,2,3,-10,-2,7,10,3,5,6,-5,-2,-2,3,-4,9,-7,-5,4,-9,6,2,-3,5,-10,2,7,6,-4,9,1,-7,-10,-1,8,1,-5,10,-9,-5,-8,-4,-3,-4,1,-3,3,3,4,8,-3,8,3,3,4,8,-9,7,-7,8,-4,2,-3,-9,-8,-1,-5,6,-6,9,-1,10,-1,1,-7,8,2,-9,5,-3,6,-2,10,10,-9,6,5,-9,4,-4,10,4,-2,-8,2,9,-5,10,9,5,-6,7,8,8,7,-7,-6,1,-4,6,-2,4,6,-7,4,4,-3,-1,-6,-7,3,-9,4,8,9,-4,8,8,-3,-8,7,7,2,2,-9,10,2,-2,7,4,7,-7,-7,-9,-2,-9], dtype = "int64")#candidate|13581|(2002,)|const|int64
const_13582 = relay.const([-9.990437,-5.707320,-0.185744,6.162348,7.810760,-0.514500,5.260707,-8.313586,-1.455647,-4.750677,-4.884536,7.335651,4.567839,1.734159,0.949164,8.037619,9.455852,5.723795,1.954240,1.203366,-8.353097,-2.848458,2.147423,-2.113074,0.269622,-4.994100,-2.438921,6.418425,0.882531,-2.940350,-2.097049,-3.275592,0.493252,4.172942,-1.046636,1.761571,-5.107833,-0.022507,7.018164,9.092759,-3.066196,-9.187175,5.799539,-0.306673,-1.053948,2.701899,-5.612413,6.329313,2.881388,7.498592,7.346759,-8.263848,-2.419414,6.665204,-0.484546,-6.312840,-1.047446,9.854119,-9.623776,-7.456837,-3.524748,0.480431,5.627355,-4.532200,1.140040,0.857712,4.986447,-3.230473,-5.434265,2.051143,-8.111789,0.309541,-1.206828,-4.962045,1.691014,-4.238205,-5.027020,-0.793085,-4.150806,-1.122524,-2.034126,-5.263090,-2.712627,1.892534,1.018911,9.605666,-0.425001,-2.757377,2.719413,-9.384439,-8.630642,-9.363143,-1.513016,-0.211183,6.883457,4.792575,-5.671123,1.724702,-8.849177,-3.612234,4.691159,-1.303848,-2.091602,1.622692,2.383424,-6.140098,-1.842507,9.995056,-6.966682,0.965511,-1.234783,4.345398,-8.060949,1.735055,-3.625394,-3.603994,5.651680,0.774090,-9.143171,3.971674,-5.358919,7.451016,-2.234219,-3.359930,-4.283072,6.517999,-6.603619,-7.519032,7.008288,3.500576,8.262078,-5.657702,-2.343227,-9.687923,-2.883915,6.589539,-7.752584,2.481162,9.055286,9.714414,5.984939,-4.996753,8.834869,-6.132135,3.764213,-7.440339,-8.116525,2.390187,1.859606,9.986444,-0.511009,-4.732182,9.935822,7.068087,1.481645,-3.888617,9.197237,-2.841502,5.064373,-3.732273,3.374828,2.338880,3.527308,-1.821354,7.515158,-0.527516,-4.814740,-9.013634,-8.619967,-7.741247,-0.945854,-4.247540,-8.362677,-9.305208,4.547375,-6.461573,-9.366642,-0.187215,-4.870715,-2.156473,-5.837672,9.350642,2.781241,-1.563876,-3.705956,-1.458140,-0.981274,-1.522297,2.568654,-2.182606,6.115314,0.927246,9.378660,3.281014,2.292828,2.085644,-7.944231,-4.950518,-0.384091,5.137053,-2.572820,5.830253,-8.578035,5.823034,-1.419557,2.266514,-7.994314,1.224198,-9.240800,7.709092,-9.096205,-5.265668,-3.113276,2.494120,9.249631,5.264378,-1.346683,-4.712183,-1.666216,-1.410235,-2.834415,9.839056,5.675627,-1.346739,0.706797,3.196180,-4.683816,9.613699,-0.372514,9.571037,9.361792,8.473334,4.640092,3.196992,0.217826,-0.095460,1.183568,-5.972554,6.196494,-5.038286,5.465668,-2.845040,8.558885,-7.060333,-1.759779,-4.754911,-9.694235,7.840349,4.451840,4.341281,0.560488,-5.152772,7.251669,7.998133,0.238371,-9.671775,6.438882,-4.011756,-0.311165,-9.685977,-1.897156,-0.445164,6.576276,-6.404292,-9.566004,0.973742,-6.072687,-4.311790,2.083485,-8.727567,-1.176869,3.880315,7.449005,-6.707474,-0.399215,0.646505,8.711079,8.961226,4.285852,-6.401870,7.561113,9.270460,9.854217,-4.917100,6.428334,-8.067852,9.015309,3.916405,2.097654,-7.847311,0.558959,0.955945,7.887409,5.187684,-0.281190,5.927561,0.465669,6.605808,-8.906831,3.476590,-6.369496,2.220172,4.780192,2.128115,0.765165,-8.307756,8.077583,6.358854,-5.031196,2.377298,-5.023106,2.036573,-8.752264,0.546241,-7.889243,-0.555565,-5.627825,-0.702986,5.476187,-2.700415,6.788261,0.503923,-0.370605,9.929309,8.112369,-3.489955,8.993149,8.235825,-8.961840,5.741290,-4.626013,-0.713412,0.936803,-7.387656,-7.286747,5.068827,-8.849765,-4.287722,-3.560902,3.731569,-2.317293,6.643726,0.195917,2.110105,4.209255,-1.978811,4.432857,-7.385656,5.881050,4.963169,-7.148476,7.690590,9.462107,8.138795,-0.784051,8.316365,-8.349585,-1.098404,4.601073,-7.087414,-0.519012,-1.874734,9.370980,4.928976,-3.268787,-9.948623,0.303367,4.150251,8.670458,-8.483087,3.174676,-0.190086,2.797918,-7.807051,5.600067,5.901262,3.304342,0.905772,0.877863,-5.212065,7.561197,-6.278046,-5.414516,9.096939,-3.676238,9.588521,4.191632,-0.691800,9.488624,1.140288,9.761138,-3.098981,8.981138,0.293745,-1.678921,-7.621064,-9.437512,3.703189,-6.743912,-2.505950,-2.279886,-1.338847,9.958615,-9.859227,4.802663,4.041846,6.429567,-6.759131,8.818046,3.431567,0.023216,5.061170,-7.686041,-8.855069,5.837465,9.829061,4.125833,1.536019,-5.934137,3.970497,-8.299645,-4.365374,-8.869470,-6.918822,-1.662240,-0.981647,1.165959,6.664235,-6.127365,-2.495868,-7.309865,8.112057,3.375818,2.148542,3.443016,-7.382047,7.164717,9.076866,8.653649,-3.808292,3.399119,5.125182,-4.059997,-5.174983,-3.800881,2.498346,-9.209728,-8.723580,9.831631,-5.227863,-4.057948,-7.600643,6.967821,-5.766816,2.398857,9.456442,7.145301,7.673326,6.878514,-7.882778,-6.348274,6.653669,-9.442860,6.315231,0.096075,-8.413403,-0.602066,6.620377,-5.016863,-8.429453,-8.547968,-6.767588,-0.431358,-4.337645,2.271490,3.166590,-4.158625,6.820022,5.300950,-3.986956,-9.201042,-0.743806,-3.246591,-8.312969,1.614431,-2.446041,-5.669330,8.984620,1.196269,1.995196,-3.908819,-6.589612,4.020381,-8.068424,-7.965375,0.789055,8.881835,4.156851,4.516675,8.465526,-8.832686,5.411292,-2.675103,9.166643,-5.241568,1.960623,-5.668483,7.939739,0.155168,-9.272182,-5.854689,-1.591504,9.917451,4.347274,0.336983,-1.413894,5.959296,3.877803,-6.323077,6.971232,3.352719,-3.431315,-0.724302,3.930504,2.727951,-0.039842,9.395013,4.338164,-7.739434,8.573708,4.052655,-2.262710,1.056009,3.998689,-1.908908,-6.489342,5.987177,3.892615,-1.769734,9.184258,-8.136346,-7.845413,-8.933616,2.567883,-4.509684,-2.488630,-8.548985,-5.551498,-5.371651,1.521640,-0.497834,-7.554737,-8.482476,-9.642993,-4.173750,-9.333746,3.842348,-1.638669,0.683692,-0.835069,1.739845,7.411462,1.656687,6.197740,8.788361,1.560747,9.670333,7.880677,8.371146,-9.299453,8.035317,8.998899,6.128157,-1.977066,1.568771,9.903567,-7.058655,-6.829560,-2.175935,7.887629,-4.118419,-9.069586,1.267256,-5.421017,5.233738,-3.874430,4.609399,0.686024,-1.062029,2.284289,-3.595665,-2.077822,-5.878398,5.290831,-0.101595,-8.794491,9.661000,-2.710990,5.388015,7.870749,-0.543955,6.039417,7.201553,-3.295731,1.087057,9.081212,-1.881619,-7.672885,-6.687306,-9.815401,-1.943407,-7.911826,8.279838,-1.373480,8.950263,3.171294,-8.671332,0.666204,0.134997,3.141295,-9.453414,-3.162677,-1.547366,0.382483,-2.438132,0.034319,-3.481779,-4.409335,6.287011,-3.767712,9.938201,-5.608011,8.792104,3.520436,6.992544,8.098149,-1.225107,9.736660,-3.211386,4.779544,-6.101876,4.041398,-8.489605,-8.378304,3.040179,-4.968072,-8.243656,-9.121670,1.281804,-9.737618,-0.060141,-5.890575,3.355109,2.121986,-5.713562,3.760644,4.581319,1.047473,-3.870972,3.131746,7.097147,-7.926104,-1.522099,4.975288,6.156647,4.514098,1.700987,-7.569095,2.250049,-1.292741,-5.809442,-8.308395,-2.311634,-9.340776,7.666588,-3.361325,1.200140,-0.806580,9.430308,0.817168,8.118785,-5.982425,-1.784608,1.916201,-0.723938,8.982936,6.576235,4.425092,-0.462067,2.847587,5.666257,-5.010150,-6.899315,5.696601,-2.377233,-3.511289,7.298905,-3.309623,1.877671,2.970771,2.236850,3.729808,-4.721975,-6.537001,-7.852477,-2.600584,-6.183593,-3.449850,6.669673,-3.035086,7.528844,5.739624,-7.385371,-6.287978,3.655106,9.251333,2.636073,-1.361585,2.595716,-2.268444,-9.815454,-0.490792,7.204454,8.650866,-7.102732,-5.436610,1.562527,-4.113116,3.514096,8.712633,-4.474680,7.103271,0.811406,7.945891,-6.105745,-9.894545,-3.885585,2.989847,-4.129981,-6.231533,9.316485,-7.738039,-5.859444,-2.339419,6.232327,-8.997900,-8.238284,2.613773,3.193344,2.743142,-7.343043,-6.301757,-7.011656,-8.604056,8.156042,9.881436,0.118716,7.214297,-9.941101,8.062625,9.648148,4.220705,7.001727,-4.940327,7.600752,8.638206,1.028148,-8.135723,6.483159,-0.797932,9.184008,1.485235,0.637628,-2.012289,-6.826933,-4.385790,9.897105,-6.982775,-7.675346,-9.851315,-4.284501,-8.407864,7.826547,7.268981,4.424518,7.352356,5.563286,-5.786232,6.416676,-3.324126,-6.455470,-2.758778,-8.117960,4.121335,6.478432,-3.006173,4.159202,4.418290,8.030124,9.521814,9.570959,7.693687,-5.795191,8.352802,-8.348710,2.896241,-2.066141,-4.146019,-3.608408,-2.775072,7.639633,8.648068,1.320861,-5.989878,7.258740,1.349970,-9.419314,8.032349,-2.435130,0.134994,-9.082259,-1.391909,-2.808454,3.886582,-7.790731,-6.634329,-3.402903,-1.536436,-8.989518,-1.356422,-8.657540,-1.718727,-8.977269,8.965027,8.940100,3.860375,-5.974643,-2.825157,1.597472,5.755576,0.874575,1.054556,-8.675552,3.345774,-6.333623,-1.551417,-8.892112,-9.085932,5.280296,7.727442,-7.742881,-5.411756,-7.720143,9.043289,6.917358,9.271200,-0.082622,-5.706936,-9.006936,9.514179,-8.049150,-9.091468,0.739475,7.816701,-3.235530,2.356879,-0.864257,1.990718,-1.626952,-6.337292,-1.314053,6.861527,-9.793510,0.461559,1.618804,-3.579557,-8.336664,-3.490156,0.927607,-5.042226,8.663299,-2.305505,-0.444311,-6.752352,-1.921208,-6.591799,3.036250,0.744876,5.564671,-4.084398,3.142085,-7.391424,0.017073,9.083525,2.299822,2.803195,9.551953,-3.075345,7.302423,9.113796,6.703609,-5.806484,6.769013,-7.402566,-5.812300,0.516522,9.613126,-6.712225,5.263630,4.447953,8.824183,4.886821,-1.586996,-8.478136,-7.218851,4.660003,6.485248,-5.678181,7.685995,-7.552120,-7.094808,-9.154763,8.258540,-1.857719,-4.205451,6.953808,-2.929255,7.528519,-8.953560,9.041100,3.072166,-1.296774,-5.852063,0.529577,-4.331976,-4.913996,9.301337,-7.478025,4.523268,4.111609,3.159586,6.977206,1.856706,-0.960231,1.562007,9.720515,1.942490,2.592480,-7.070346,4.381901,-9.850832,0.319976,-4.316055,9.334705,3.396087,-0.570806,5.362710,-0.412835,-7.683306,0.406203,-2.132500,-7.609909,-6.389271,-6.809139,-2.417932,8.360689,8.735460,-0.090075,0.555029,0.101813,7.622530,1.245175,6.577233,1.688401,-7.776515,1.750604,0.405165,-9.324747,-6.752082,6.501718,5.436669,5.351392,7.271996,-2.660979,7.360253,8.571910,0.498884,-8.316519,8.784312,-6.519434,-5.683251,-6.849800,4.204385,7.215020,8.856069,-4.632350,-9.166874,7.674231,-1.743676,-1.240058,3.044111,-5.866862,-2.160304,-5.192042,-5.777275,1.192305,-6.735809,3.218715,6.225242,3.869144,7.950123,0.471444,-8.712085,6.446518,-0.676824,-7.601979,-3.463935,8.860857,1.433488,-3.602127,-8.850664,-4.716119,5.488157,1.240692,3.647328,-2.139939,-2.000751,-2.474333,-8.843550,0.252733,1.671547,7.578308,-0.852298,-2.901165,-5.255102,-4.332306,-7.239023,4.527843,-8.825183,-8.398829,-3.854247,-1.371778,-9.724908,2.262660,-5.289053,-6.459967,-4.555551,9.219229,-5.876460,0.989495,-0.821228,9.939629,-1.175200,9.532194,8.442805,-5.636434,-6.913600,9.526702,4.474012,1.583918,9.245495,7.088224,8.293795,0.558698,-4.752931,-7.166819,-0.187871,-8.388612,2.214948,1.430597,7.386693,-0.892133,-4.654126,6.451203,-5.963075,0.863133,-1.039903,2.265115,-4.831286,5.984123,1.365435,4.430455,1.646572,5.366957,3.236010,-8.705913,-4.446198,-1.882031,-2.120152,5.349769,3.583518,-3.481530,0.677391,8.599357,-3.892943,8.806878,7.631939,1.394363,-6.243863,9.372381,3.109788,-8.501554,-7.001898,-1.155265,-7.645512,8.549118,8.539138,9.426880,2.228326,-7.076642,1.025630,-6.244357,-3.036861,-9.115317,-3.175389,2.197536,6.785321,6.074374,-0.489224,-1.591292,4.855478,-0.641512,3.882150,-6.508398,7.371163,6.190480,-3.918398,6.846946,8.378946,8.433885,2.017067,-9.142896,-9.788099,-0.586205,7.294131,-7.952830,-7.729112,7.961381,-2.531404,-3.585247,-8.531621,2.949760,9.164152,-3.417600,-3.066417,-7.691770,-5.264543,-1.173795,7.132689,0.115327,6.247437,3.061981,5.812753,2.843240,-1.004042,2.530232,0.027424,9.134850,6.948260,-0.418661,6.389134,9.530809,7.268769,4.275881,-3.078869,6.249204,-9.224964,6.474678,-4.791668,6.803050,-6.526114,1.375432,9.780424,2.698965,-2.384780,-1.369745,-6.058077,6.187316,9.637520,-3.540961,-8.904095,9.104880,1.901242,-5.264462,-6.838356,-3.737411,-5.520960,-0.290216,8.765153,-2.767227,8.665788,5.746802,-0.688777,7.659030,6.224645,9.702468,-8.583660,-8.319480,8.468508,3.249994,4.405562,-5.580386,7.811652,3.548312,-2.666633,2.915696,9.424381,-6.777112,8.025735,3.167601,0.711877,-5.479503,-9.654432,4.051967,0.028016,5.864394,5.063846,-6.857191,-7.174378,2.552150,0.461747,0.031517,8.048398,-5.036699,8.253413,-4.755601,-2.781932,-5.048624,4.973462,-9.763269,-4.273494,7.246303,-5.426801,9.696573,-4.808136,0.918915,5.494500,-3.116773,-7.387501,0.027721,-7.177378,8.013884,6.031604,9.856425,8.719876,9.196646,0.342986,0.586354,0.173435,2.172167,1.706350,3.363200,4.018296,-6.735187,9.475209,3.501316,8.072486,-7.616681,9.555322,8.098870,-4.317807,-2.794698,-6.334797,9.015040,-3.311239,8.289793,9.545014,-0.686346,-4.211333,0.219020,2.212106,9.242109,0.865754,5.922336,-5.995004,3.073246,2.540842,-9.446259,-3.942515,6.566486,-2.293220,-9.764970,-1.274434,-5.916062,7.684673,-5.869104,0.428221,1.239004,6.897910,9.611301,-5.813016,-0.684097,-2.348985,1.904799,-1.364796,-2.534598,7.170245,2.785459,4.046149,-0.751947,7.353635,9.950722,-1.302832,0.875934,0.561480,1.443808,3.090746,-8.584337,7.439924,-3.810267,-1.290264,-4.521544,-0.732254,9.969605,-6.388066,-4.370276,-5.036944,-4.561480,5.086203,0.410991,-9.196748,-4.860121,-4.332383,7.961898,-2.826235,-6.691968,-2.964898,-6.795709,-1.172549,2.301522,8.990372,-1.299907,8.756952,-3.917243,-0.137620,-8.452709,0.686546,-2.604831,6.812752,4.587298,-6.793924,-4.313189,-8.460925,5.813556,3.303155,8.544512,-4.739829,-2.688264,-8.621623,-6.948034,-8.473218,0.626633,6.660131,-7.028937,-6.350309,-2.304696,6.635720,8.626866,3.062712,-2.760513,4.989279,4.545466,3.771207,-8.253852,6.348832,-9.828359,6.258441,6.301631,7.947416,5.389142,2.816832,-9.539947,-5.549977,-2.132046,-0.649278,-6.520413,4.255196,-1.093055,-4.216248,-6.056059,7.817122,4.287389,9.429621,-1.973855,-2.099029,-5.181272,3.851395,-4.923782,-9.944464,-0.723724,0.344654,1.318651,-4.103173,9.292762,-9.183126,-0.356061,-2.029104,-3.710996,-3.428482,9.054219,-9.827901,-7.255145,-1.153857,1.713128,-4.176173,-3.078896,7.363403,-3.039308,7.970324,-2.729359,4.039709,4.458320,-7.268832,5.931225,-3.502286,-6.364947,-7.981354,6.758794,6.616617,-6.092929,-9.829894,-2.814877,-7.594168,0.669313,-2.954579,5.850133,1.175237,-1.749261,-1.016988,-3.033130,-4.356222,2.298553,-0.847472,9.055008,8.520055,7.750088,-0.526896,7.230567,-3.109150,-7.244832,-7.010918,-0.668997,3.915790,-9.046875,0.068349,-9.140502,1.149033,-0.205151,-0.819420,8.764767,5.007376,6.447532,-9.405036,-6.655125,-8.733942,-8.093831,-7.909504,-1.791533,6.662964,5.385850,5.658789,-5.237274,5.730821,-8.413194,-6.720836,-9.063399,-2.067091,-0.218106,-0.130158,2.684184,4.994418,-1.046809,7.664682,2.945423,0.689922,6.802347,3.702007,6.031624,-8.604243,-3.008427,1.234724,7.048810,3.278122,7.875344,-2.137428,-2.635074,-8.699485,-9.140895,8.619235,-5.816683,-5.356697,8.011233,0.060578,2.362421,8.420638,-6.537092,-7.595239,-9.305543,3.918854,5.278695,7.763332,-6.724672,-2.134978,5.852415,-8.942950,-5.338481,8.737809,-2.850311,-8.447168,-1.374069,-0.474327,4.251720,-0.216206,-3.889607,7.364438,-8.504792,7.401975,-0.204418,0.538724,2.572751,9.107575,-5.255192,0.938822,9.651779,-2.946452,4.521752,-7.736315,7.452972,1.371305,7.348629,-1.400043,8.670951,-6.681368,8.042716,9.595442,1.980343,0.103909,5.139137,2.050568,-0.747754,-0.515570,-2.360719,-5.450728,-4.896499,7.502012,-4.478236,4.581703,8.985033,6.530202,6.194899,2.192616,2.169919,-7.467205,3.153337,0.358293,-3.482382,-6.097691,7.800811,-2.712527,-0.749242,1.764012,8.591714,-2.221556,-9.539058,-6.239241,-7.523951,-0.302148,-8.900055,-4.649838,-6.621816,7.219224,1.387408,1.398240,8.592303,-9.333789,4.764702,-9.463272,-5.212448,0.095118,2.612715,-1.193877,3.202544,9.632829,-0.210827,-1.297021,-5.122290,4.972627,3.485807,-3.221320,-4.419959,-7.509484,-5.224515,0.272704,8.637912,4.991024,-4.890937,-7.212051,-2.495358,8.381494,0.825061,-9.727120,0.767461,4.797962,-9.781324,4.634825,7.029404,5.111594,3.775186,-6.090336,6.847874,2.547527,-8.013363,-2.793706,7.704719,8.629201,4.357950,-5.205763,7.108417,4.682309,7.892472,-4.783531,-5.697096,-5.360188,-9.073147,-4.033123,-5.334486,9.384052,1.880455,-2.724551,9.249258,8.961880,2.016760,-0.627244,5.866743,-4.248203,-2.815500,7.428448,-6.811684,-9.703464,1.549058,5.555774,-7.602893,-6.264307,-8.165895,2.427371,-6.566963,-7.139177,-1.729610,-2.224758,-2.355842,2.995639,8.854764,1.827357,-7.098439,5.628270,-6.732669,-6.626164,4.880922,-8.309587,3.440477,-7.781038,-2.369626,3.550044,0.114325,-4.684797,-8.266217,-4.678093,8.623318,-1.596673,-9.973816,9.567156,-6.246259,7.428987,-9.592206,4.758206,7.728519,1.761128,-1.796717,4.496313,-6.660312,2.238138,3.323635,-4.882148,9.896647,-8.229007,-4.757455,-1.837468,2.244549,7.890959,8.486334,2.760716,-9.725651,-7.344497,5.178282,-2.922392,3.418379,0.290491,7.360525,5.589828,-7.475922,-9.834206,3.014289,1.866151,2.679644,-5.652437,3.722852,8.514542,-9.052897,-4.429966,3.904783,0.617118,-9.041938,2.626175,6.978080,-7.635179,5.660216,-5.288956,9.889991,6.851621,-1.259660,6.146836,-6.201188,9.452466,-6.710836,-0.847559,-9.568339,-7.709895,-0.024375,0.024992,4.181107,9.706009,-4.197699,4.924490,4.458511,-6.178783,2.565570,3.993568,0.294170,-9.005966,-6.657080,8.636291,7.807303,8.224916,-6.176823,0.351518,-4.080624,-6.671411,-9.707608,-7.907717,-8.930713,-4.746373,-1.183916,3.339445,-6.385399,2.563714,0.664987,-2.341005,7.794039,-5.426703,-3.355636,9.216576,8.021637,2.666642,1.558260,4.021021,3.534585,1.860696,-1.332685,7.256391,0.932704,0.677465,2.673842,9.717891,-4.903785,-5.405556,1.472650,5.704420,3.880156,-7.286205,7.150883,2.138877,6.665328,-3.517739,3.650303,9.554930,5.323867,1.352610,-8.712653,9.182249,4.152021,4.809241,6.069082,2.903560,2.059689,1.466723,3.735029,3.109466,-6.190587,-2.904552,3.652274,-0.904049,1.692523,-9.983622,-8.302948,-7.489764,3.931836,-2.350149,-2.076728,-2.118899,5.298785,-5.187074,-2.244704,-2.079167,-4.496742,-8.358838,-0.771226,-0.006699,7.121393,2.925078,-9.830246,6.405791,8.409401,-6.072730,2.536340,8.878706,-7.295413,3.390804,-3.726748,5.128973,9.029456,-0.604011,-1.803219,7.682382,0.991003,0.715456,-3.580003,-0.749333,-0.059622,6.624034,1.912696,5.796039,1.541830,-2.748984,-8.165689,-8.208401,0.095048,0.358222,0.625568,9.701207,2.808487,-1.270969,2.848406,3.651014,1.882738,4.121065,2.698718,-8.698239,-3.171540,-2.628484,4.925729,-7.517811,-9.010127,-6.947321,-4.449461,-2.846832,4.858138,0.681623,7.086787,-7.321600,4.314467,2.603321,-5.984682,5.244158,-1.953826,7.879380,-2.188567,1.053613,7.332073,-3.589191,2.244505,6.010552,7.048649,-2.946923,8.697915,1.175298,-2.568221,-8.505238,1.328721,6.745507,3.034049,9.826938,-9.616837,-2.768753,-6.204447,6.462934,-0.510540,-4.549438,1.114903,-2.670717,-3.396034,-2.484221,1.918427,9.184565,-0.564424,-5.860467,-2.791012,-3.302650,-1.542506,-1.895727,1.678278,2.335690,5.647266,-1.528139,-3.733299,0.695710,-6.972317,5.390333,-9.216414,-3.254985,-2.473086,2.778310,-1.468189,0.052263,-7.690842,-7.590785,-5.042254,8.370602,0.303150,-3.377636,3.320402,-7.501178,0.806325,2.939555,0.029003,3.632198,-5.665281,-3.959697,-5.831655,-9.023523,7.371151,-9.449970,-3.529707,2.586367,7.415851,9.481276,-1.175331,6.258540,0.070337,1.456928,-8.704421], dtype = "float32")#candidate|13582|(1950,)|const|float32
call_13579 = relay.TupleGetItem(func_6736_call(relay.reshape(var_13580.astype('int16'), [126,]), relay.reshape(const_13581.astype('int64'), [2002,]), relay.reshape(const_13582.astype('float32'), [1950,]), ), 2)
call_13583 = relay.TupleGetItem(func_6741_call(relay.reshape(var_13580.astype('int16'), [126,]), relay.reshape(const_13581.astype('int64'), [2002,]), relay.reshape(const_13582.astype('float32'), [1950,]), ), 2)
uop_13584 = relay.exp(const_13581.astype('float64')) # shape=(2002,)
output = relay.Tuple([call_13519,call_13579,var_13580,const_13582,uop_13584,])
output2 = relay.Tuple([call_13520,call_13583,var_13580,const_13582,uop_13584,])
func_13593 = relay.Function([var_13580,], output)
mod['func_13593'] = func_13593
mod = relay.transform.InferType()(mod)
mutated_mod['func_13593'] = func_13593
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13594 = relay.var("var_13594", dtype = "int16", shape = (21, 6))#candidate|13594|(21, 6)|var|int16
func_13593_call = mutated_mod.get_global_var('func_13593')
call_13595 = func_13593_call(var_13594)
output = call_13595
func_13596 = relay.Function([var_13594], output)
mutated_mod['func_13596'] = func_13596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6434_call = mod.get_global_var('func_6434')
func_6435_call = mutated_mod.get_global_var('func_6435')
call_13661 = func_6434_call()
call_13662 = func_6434_call()
output = call_13661
output2 = call_13662
func_13691 = relay.Function([], output)
mod['func_13691'] = func_13691
mod = relay.transform.InferType()(mod)
mutated_mod['func_13691'] = func_13691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13691_call = mutated_mod.get_global_var('func_13691')
call_13692 = func_13691_call()
output = call_13692
func_13693 = relay.Function([], output)
mutated_mod['func_13693'] = func_13693
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13760 = relay.var("var_13760", dtype = "float32", shape = (9, 9, 8))#candidate|13760|(9, 9, 8)|var|float32
uop_13761 = relay.acosh(var_13760.astype('float32')) # shape=(9, 9, 8)
uop_13766 = relay.cosh(uop_13761.astype('float64')) # shape=(9, 9, 8)
output = relay.Tuple([uop_13766,])
output2 = relay.Tuple([uop_13766,])
func_13784 = relay.Function([var_13760,], output)
mod['func_13784'] = func_13784
mod = relay.transform.InferType()(mod)
mutated_mod['func_13784'] = func_13784
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13785 = relay.var("var_13785", dtype = "float32", shape = (9, 9, 8))#candidate|13785|(9, 9, 8)|var|float32
func_13784_call = mutated_mod.get_global_var('func_13784')
call_13786 = func_13784_call(var_13785)
output = call_13786
func_13787 = relay.Function([var_13785], output)
mutated_mod['func_13787'] = func_13787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11090_call = mod.get_global_var('func_11090')
func_11091_call = mutated_mod.get_global_var('func_11091')
call_13849 = func_11090_call()
call_13850 = func_11090_call()
func_9544_call = mod.get_global_var('func_9544')
func_9547_call = mutated_mod.get_global_var('func_9547')
const_13852 = relay.const([[False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False]], dtype = "bool")#candidate|13852|(1, 117)|const|bool
const_13853 = relay.const([-2,9,-8,-10,-3,-6,-4,-1,-6,2,5,-4,-7,-6,-6,4,-3,-1,-4,-6,7,-10,-2,4,6,-4,6,-1,-2,9,-10,-3,-8,4,7,-8,1,-5,-9,-3,-5,-5,4,-3,2,4,7,-5,-4,-4,10,-5,-2,-7,9,5,6,-4,-5,-9,-1,1,2,2,8,7,9,-10,-2,9,7,-5,3,5,8,-9,9,-8,7,-7,5,-2,5,5,-10,-7,10,2,-3,5,3,2,-1,2,-8,2,2,10,-7,3,1,6,3,-5,5,8,4,-9,-8,-3,-8,4,1,5,8,5,9,-1,9,7,-7,-1,4,-6,-9,-1,-5,8,8,6,-3,-7,4,5,3,-7,-8,1,-8,-4,-7,-5,1,-10,7,9,9,-4,-2,-4,2,9,-10,4,9,-7,7,1,-5,9,9,4,1,-8,-7,-2,-6,3,-1,-5,6,-7,4,-1,10,-1,-7,6,-2,-5,-1,-2,-5,-4,-1,-7,1,-10,-1,-5,10,-10,2,-6,-4,-7,-7,-1,-3,9,6,-3,-9,3,5,-10,4,3,-10,2,2,-7,8,3,5,-7,9,9,6,-9,9,-5,1,-1,-9,-5,2,-1,-1,2,-6,8,-3,-5,-8,8,-6,-4,-3,10,-8,4,-6,-2,9,7,-5,3,2,6,2,1,7,5,-10,1,-9,-10,9,-5,6,-6,-7,-8,6,-10,10,-8,-5,-8,-7,5,-3,4,8,2,9,6,6,-4,-10,3,-6,-6,4,-7,2,-9,-8,-8,-2,2,-10,-9,2,9,10,9,-2,8,-6,7,9,-2,-10,-5,3,-6,-4,9,10,8,-9,5,-10,7,10,-4,1,5,-8,-6,8,4,-6,-9,-1,8,4,1,-8,9,-4,4,9,-9,-2,8,6,5,2,-10,-1,-3,4,8,-6,-10,2,-8,-5,-9,-1,-8,-8,-8,-9,3,9,-6,2,2,2,8,6,-6,2,-10,4,-7,3,3,6,-1,-2,7,-10,1,1,-8,3,1,-3,8,1,8,-3,-5,6,5,4,3,-10,-7,-2,-1,-3,2,-3,1,-8,-9,9,3,1,-5,-9,-8,1,-4,-2,-1,5,-9,6,4,9,6,-7,-3,-6,-3,7,5,-7,-2,-4,-2,-8,9,8,-7,-7,5,9,-4,10,-9,-9,4,3,-4,1,-8,-6,-5,10,-3,5,3,-10,9,4,-7,-4,8,-9,6,8,-10,-1,-9,7,10,-2,5,9,1,6,8,-9,1,9,-9,-3,1,6,-7,-4,4,-9,9,5,-3,10,-2,8,-8,-1,3,-9,-10,-6,5,-1,7,8,-9,-8,5,-6,6,10,-2,-4,-7,-1,6,-1,9,-2,3,4,4,-8,9,-7,9,-10,8,-8,-5,-1,6,3,-3,2,6,2,8,-10,4,-4,5,-6,8,-10,-4,-5,3,6,5,-4,5,-1,-5,-10,10,-6,7,-10,7,-9,10,-1,-4,-9,-6,9,8,-4,3,-4,9,-10,1,5,-9,-6,8,2,-4,-2,3,-2,1,3,-4,-1,-6,-3,-2,-4,-1,-1,-6,5,-3,2,8,6,2,5,8,-10,8,1,10,-2,6,3,6,3,5,-7,9,-2,7,-6,-5,9,-10,3,6,2,-1,-3,3,8,1,-10,-3,3,10,-2,8,10,4,7,-1,3,5,8,-3,-7,4,-9,10,4,1,-4,-1,-6,-10,-6,-5,-2,6,8,6,6,-3,-6,6,2,10,-6,-2,6,7,-2,3,-3,-2,8,8,-8,10,-3,-6,6,3,-4,6,7,-4,-6,-3,-5,1,4,1,2,8,10,2,-7,-7,2,-3,-9,-9,3,5,8,-3,-7,6,6,5,-7,3,4,7,5,6,-8,-8,-9,-10,1,1,6,5,3,-9,7,-6,-1,-6,4,10,-6,-2,-3,4,-4,10,-4,5,5,10,5,4,7,-2,-3,-3,-9,6,7,-6,6,-4,-10,-10,2,-8,3,1,-3,3,3,5,-2,6,2,2,-7,-8,5,4,7,-2,-6,-4,-8,-5,2,-5,-2,4,4,-9,4,9,-9,-9,-7,-9,-6,3,10,4,-7,-4,3,-2,6,1,-3,1,5,10,-1,-6,2,10,7,-3,7,7,9,-9,3,5,2,9,4,-3,8,1,-1,3,-6,-4,6,-3,1,10,-5,1,10,7,7,10,-9,7,-1,8,9,-2,-3,1,-8,7,5,1,6,-1,5,-10,2,4,8,-3,-4,-1,10,1,3,3,4,3,-1,-4,-6,3,-2,3,1,-4,-9,-1,6,-8,10,7,5,-5,-6,3,3,-2,-4,-4,1,1,-2,-10,6,7,7,-9,4,9,5,2,9,-3,-8,-10,-5,-8,5,7,-6,-7,-8,7,2,-4,7,5,1,-1,-4,-8,3,-8,-6,2,-1,4,9,3,-9,-8,-2,-4,-2,-2,7,-7,-7,-3,-10,-4,-5,-2,2,-8,2,-7,1,-7,-8,1,-8,10,-3,-8,-7,6,3,-8,3,5,-2,-8,-6,5,-4,1,-7,7,3,5,-10,-4,6,7,8,5,-6,2,-9,-8,-5,5,10,-2,-9,-5,-5,-1,10,2,-2,5,-1,-2,6,-1,8,3,-10,-3,1,10,-6,8,-3,-4,-9,-4,8,1,7,4,-10,5,1,2,5,-9,5,7,-10,-4,9,-1,4,-10,-6,8,3,-7,-1,-8,3,5,5,-7,-2,5,-8,6,-10,5,-3,3,4,2,-1,2,-8,-3,9,-9,2,10,-2,-2,-7,10,9,7,3,9,-10,9,7,2,-3,-9,-4,-5,-9,9,-5,5,-2,9,2,9,-10,9,-2,5,1,-10,-5,1,3,8,-9,-4,-5,-6,3,-8,-6,2,7,3,1,3,8,10,4,-1,-10,5,8,-2,-9,-3,9,-2,3,6,-9,-10,3,-10,7,-9,6,4,-7,4,9,10,-1,6,-8,-9,-1,5,10,-8,-5,-4,3,5,-4,-6,4,-1,-10,10,9,-6,8,-2,-5,5,-9,2,-7,-2,6,6,-5,7,-5,-5,6,-5,-3,3,9,-9,-9,10,8,8,1,-3,4,4,-9,-4,-2,-1,7,-4,-4,-5,-4,8,9,7,2,8,2,-5,-5,-5,-9,-4,10,3,1,-6,4,-8,-10,3,-4,7,-7,6,1,-6,6,9,8,-2,1,-3,-2,8,-7,-3,5,7,-10,1,4,4,-9,-10,6,-5,9,-1,-2,-2,-3,-10,-3,-8,3,6,9,9,-4,7,8,8,2,8,-10,3,-5,10,1,3,-9,1,-1,-8,-7,7,-6,5,-4,-10,-5,-8,5,8,-9,-1,-2,-8,3,9,10,-9,3,-4,9,3,-8,-2,-2,2,3,-10,8,-7,-6,4,6,-4,-7,8,-4,-8,4,7,2,5,-5,-10,5,-5,-8,6,-10,3,-9,-1,-1,-7,-1,-1,6,-10,-1,3,10,6,4,-1,2,-2,-4,8,-4,-10,-1,-9,7,7,10,5,-7,7,4,-6,2,9,-2,3,4,-2,4,-2,-1,-10,-7,2,-7,5,-6,8,-10,-6,-6,10,-2,-4,6,-9,3,7,-6,5,-7,-5,-3,5,-1,-10,1,8,-4,2,-6,-6,-2,-2,3,2,-10,-7,1,8,4,-1,-10,10,9,6,3,-6,-7,3,-8,10,-1,2,-8,4,-10,6,-1,-4,6,-8,1,6,-4,8,4,-9,4,7,-2,3,-5,2,3,6,7,2,10,6,7,-6,-1,-5,6,8,-2,-10,1,-1,-9,6,3,-3,-6,-6,4,-5,7,-1,-2,1,-3,-1,2,-9,-10,-4,-2,7,8,4,-5,9,9,-5,1,6,-4,8,-8,-6,1,3,-8,3,6,-10,-6,-3,8,-7,5,-5,-8,-4,8,-7,1,-2,4,5,-3,-1,1,-4,-3,10,-2,-8,7,-9,3,6,9,10,-3,3,9,7,-7,1,-1,9,-5,8,-8,-7,-4,-2,-10,6,9,-3,3,-2,-10,2,5,9,-6,-2,-5,-5,1,-3,2,-6,1,1,9,4,-8,3,8,3,-10,-10,3,5,3,-7,-9,7,-2,6,2,1,8,3,-9,-2,1,-3,7,10,-7,-8,10,8,4,5,6,7,-1,10,7,8,-3,-2,-2,4,-9,-6,6,3,10,7,4,-7,-4,-7,-10,9,-10,6,3,-9,-2,1,1,-7,4,6,-8,6,-2,3,10,7,-2,1,-5,-8,-7,3,5,-10,6,8,9,-7,7,-2,3,6,-4,-9,-9,-4,-5,6,-8,10,2,-9,-4,-9,8,7,-3,-5,1,-8,10,-9,-10,9,-3,6,-7,-4,1,1,9,1,2,-10,9,-5,9,-7,1,1,-5,9,9,-4,-9,2,-4,9,-6,-10,9,7,3,9,10,-10,-4,-6,2,-7,-4,10,-9,-3,-10,-3,2,6,-4,9,-4,6,8,3,3,-3,-9,4,-4,5,3,2,6,9,5,-3,-5,-9,2,-2,-3,1,-8,2,-5,5,-4,1,6,-1,6,-2,-4,5,-4,-2,-4,1,-9,5,9,-10,-8,5,1,-7,-10,9,1,-10,2,5,5,9,8,-8,5,-2,-10,-9,10,7,6,-6,3,3,7,3,-4,8,8,1,-7,-6,-7,-8,-10,1,-3,2,-2,-1,-3,-3,-7,-6,-8,-8,-9,1,-9,5,4,-7,10,2,6,-10,-10,-3,3,-3,8,5,-8,-3,3,-8,1,-5,7,-4,-3,-2,-5,-3], dtype = "int32")#candidate|13853|(1792,)|const|int32
call_13851 = relay.TupleGetItem(func_9544_call(relay.reshape(const_13852.astype('bool'), [117,]), relay.reshape(const_13853.astype('int32'), [1792,]), ), 0)
call_13854 = relay.TupleGetItem(func_9547_call(relay.reshape(const_13852.astype('bool'), [117,]), relay.reshape(const_13853.astype('int32'), [1792,]), ), 0)
bop_13857 = relay.logical_xor(call_13849.astype('uint16'), const_13852.astype('uint16')) # shape=(1, 117)
bop_13860 = relay.logical_xor(call_13850.astype('uint16'), const_13852.astype('uint16')) # shape=(1, 117)
output = relay.Tuple([call_13851,const_13853,bop_13857,])
output2 = relay.Tuple([call_13854,const_13853,bop_13860,])
func_13872 = relay.Function([], output)
mod['func_13872'] = func_13872
mod = relay.transform.InferType()(mod)
output = func_13872()
func_13873 = relay.Function([], output)
mutated_mod['func_13873'] = func_13873
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10685_call = mod.get_global_var('func_10685')
func_10686_call = mutated_mod.get_global_var('func_10686')
call_13883 = relay.TupleGetItem(func_10685_call(), 1)
call_13884 = relay.TupleGetItem(func_10686_call(), 1)
output = call_13883
output2 = call_13884
func_13885 = relay.Function([], output)
mod['func_13885'] = func_13885
mod = relay.transform.InferType()(mod)
mutated_mod['func_13885'] = func_13885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13885_call = mutated_mod.get_global_var('func_13885')
call_13886 = func_13885_call()
output = call_13886
func_13887 = relay.Function([], output)
mutated_mod['func_13887'] = func_13887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10227_call = mod.get_global_var('func_10227')
func_10229_call = mutated_mod.get_global_var('func_10229')
call_13911 = relay.TupleGetItem(func_10227_call(), 0)
call_13912 = relay.TupleGetItem(func_10229_call(), 0)
func_12248_call = mod.get_global_var('func_12248')
func_12250_call = mutated_mod.get_global_var('func_12250')
call_13945 = relay.TupleGetItem(func_12248_call(), 0)
call_13946 = relay.TupleGetItem(func_12250_call(), 0)
bop_13947 = relay.add(call_13945.astype('float32'), call_13911.astype('float32')) # shape=(5, 9, 11)
bop_13950 = relay.add(call_13946.astype('float32'), call_13912.astype('float32')) # shape=(5, 9, 11)
func_9118_call = mod.get_global_var('func_9118')
func_9119_call = mutated_mod.get_global_var('func_9119')
call_13962 = relay.TupleGetItem(func_9118_call(), 1)
call_13963 = relay.TupleGetItem(func_9119_call(), 1)
func_8012_call = mod.get_global_var('func_8012')
func_8013_call = mutated_mod.get_global_var('func_8013')
call_13984 = func_8012_call()
call_13985 = func_8012_call()
func_9164_call = mod.get_global_var('func_9164')
func_9166_call = mutated_mod.get_global_var('func_9166')
call_13987 = relay.TupleGetItem(func_9164_call(), 0)
call_13988 = relay.TupleGetItem(func_9166_call(), 0)
output = relay.Tuple([bop_13947,call_13962,call_13984,call_13987,])
output2 = relay.Tuple([bop_13950,call_13963,call_13985,call_13988,])
func_14006 = relay.Function([], output)
mod['func_14006'] = func_14006
mod = relay.transform.InferType()(mod)
output = func_14006()
func_14007 = relay.Function([], output)
mutated_mod['func_14007'] = func_14007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_14008 = relay.TupleGetItem(func_5400_call(), 2)
call_14009 = relay.TupleGetItem(func_5402_call(), 2)
func_4627_call = mod.get_global_var('func_4627')
func_4632_call = mutated_mod.get_global_var('func_4632')
const_14019 = relay.const([1,3,-9,-2,10,8,-10,7,7,-3,2,9,6,4,2,7,7,-1,-6,-3,-7,-4,3,-2,-3,-7,6,7,-2,8,-10,9,-5,-4,-5,7,7,6,5,2,2,-3,3,-10,10,-3,3,8,4,10,10,-9,1,8,-5,3,8,-6,7,10,-4,-10,4,-6,1,-6,-3,7,-2,9,-5,-5,-10,8,6,7,-10,8,4,-2,10,-5,5,-5,10,6,-6,-2,1,4,-7,-9,7,-1,-3,-7,1,4,-7,-4,-4,-2,-1,-7,-4,2,-3,8,-2,4,-2,-6,4,-10,10,-5,4,5,4,10,4,-7,6,-10,6,2], dtype = "int16")#candidate|14019|(126,)|const|int16
var_14020 = relay.var("var_14020", dtype = "int64", shape = (2002,))#candidate|14020|(2002,)|var|int64
var_14021 = relay.var("var_14021", dtype = "float32", shape = (1950,))#candidate|14021|(1950,)|var|float32
call_14018 = relay.TupleGetItem(func_4627_call(relay.reshape(call_14008.astype('int16'), []), relay.reshape(const_14019.astype('int16'), [14, 9, 1]), relay.reshape(var_14020.astype('int64'), [2002,]), relay.reshape(var_14021.astype('float32'), [1950,]), ), 2)
call_14022 = relay.TupleGetItem(func_4632_call(relay.reshape(call_14008.astype('int16'), []), relay.reshape(const_14019.astype('int16'), [14, 9, 1]), relay.reshape(var_14020.astype('int64'), [2002,]), relay.reshape(var_14021.astype('float32'), [1950,]), ), 2)
func_11845_call = mod.get_global_var('func_11845')
func_11846_call = mutated_mod.get_global_var('func_11846')
call_14023 = relay.TupleGetItem(func_11845_call(), 1)
call_14024 = relay.TupleGetItem(func_11846_call(), 1)
output = relay.Tuple([call_14008,call_14018,const_14019,var_14020,var_14021,call_14023,])
output2 = relay.Tuple([call_14009,call_14022,const_14019,var_14020,var_14021,call_14024,])
func_14025 = relay.Function([var_14020,var_14021,], output)
mod['func_14025'] = func_14025
mod = relay.transform.InferType()(mod)
var_14026 = relay.var("var_14026", dtype = "int64", shape = (2002,))#candidate|14026|(2002,)|var|int64
var_14027 = relay.var("var_14027", dtype = "float32", shape = (1950,))#candidate|14027|(1950,)|var|float32
output = func_14025(var_14026,var_14027,)
func_14028 = relay.Function([var_14026,var_14027,], output)
mutated_mod['func_14028'] = func_14028
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11201_call = mod.get_global_var('func_11201')
func_11202_call = mutated_mod.get_global_var('func_11202')
call_14099 = func_11201_call()
call_14100 = func_11201_call()
func_10227_call = mod.get_global_var('func_10227')
func_10229_call = mutated_mod.get_global_var('func_10229')
call_14101 = relay.TupleGetItem(func_10227_call(), 1)
call_14102 = relay.TupleGetItem(func_10229_call(), 1)
func_10056_call = mod.get_global_var('func_10056')
func_10058_call = mutated_mod.get_global_var('func_10058')
call_14108 = func_10056_call()
call_14109 = func_10056_call()
output = relay.Tuple([call_14099,call_14101,call_14108,])
output2 = relay.Tuple([call_14100,call_14102,call_14109,])
func_14123 = relay.Function([], output)
mod['func_14123'] = func_14123
mod = relay.transform.InferType()(mod)
mutated_mod['func_14123'] = func_14123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14123_call = mutated_mod.get_global_var('func_14123')
call_14124 = func_14123_call()
output = call_14124
func_14125 = relay.Function([], output)
mutated_mod['func_14125'] = func_14125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6002_call = mod.get_global_var('func_6002')
func_6004_call = mutated_mod.get_global_var('func_6004')
call_14126 = func_6002_call()
call_14127 = func_6002_call()
output = relay.Tuple([call_14126,])
output2 = relay.Tuple([call_14127,])
func_14144 = relay.Function([], output)
mod['func_14144'] = func_14144
mod = relay.transform.InferType()(mod)
mutated_mod['func_14144'] = func_14144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14144_call = mutated_mod.get_global_var('func_14144')
call_14145 = func_14144_call()
output = call_14145
func_14146 = relay.Function([], output)
mutated_mod['func_14146'] = func_14146
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11035_call = mod.get_global_var('func_11035')
func_11036_call = mutated_mod.get_global_var('func_11036')
call_14183 = func_11035_call()
call_14184 = func_11035_call()
func_9446_call = mod.get_global_var('func_9446')
func_9449_call = mutated_mod.get_global_var('func_9449')
var_14205 = relay.var("var_14205", dtype = "float32", shape = (1, 1950))#candidate|14205|(1, 1950)|var|float32
call_14204 = relay.TupleGetItem(func_9446_call(relay.reshape(var_14205.astype('float32'), [1950,])), 4)
call_14206 = relay.TupleGetItem(func_9449_call(relay.reshape(var_14205.astype('float32'), [1950,])), 4)
var_14208 = relay.var("var_14208", dtype = "float32", shape = (9, 6, 13))#candidate|14208|(9, 6, 13)|var|float32
bop_14209 = relay.logical_or(call_14183.astype('bool'), var_14208.astype('bool')) # shape=(9, 6, 13)
bop_14212 = relay.logical_or(call_14184.astype('bool'), var_14208.astype('bool')) # shape=(9, 6, 13)
bop_14216 = relay.floor_divide(call_14183.astype('float32'), var_14208.astype('float32')) # shape=(9, 6, 13)
bop_14219 = relay.floor_divide(call_14184.astype('float32'), var_14208.astype('float32')) # shape=(9, 6, 13)
func_12536_call = mod.get_global_var('func_12536')
func_12538_call = mutated_mod.get_global_var('func_12538')
call_14247 = func_12536_call()
call_14248 = func_12536_call()
func_14025_call = mod.get_global_var('func_14025')
func_14028_call = mutated_mod.get_global_var('func_14028')
const_14251 = relay.const([-10,-6,4,10,4,2,10,10,-4,-4,5,-6,1,3,-3,-9,-9,-9,-10,4,-8,-9,-6,10,6,-6,-3,4,-2,9,1,-8,2,3,8,-6,-4,5,-4,3,8,-10,4,4,-5,1,1,-6,7,-5,-9,-1,9,-6,-2,2,-8,2,10,-10,-1,9,-10,-6,-6,-4,-3,-1,-3,-5,4,7,-2,6,7,7,6,-1,-10,-5,-8,-5,-4,-5,-1,-1,8,9,-5,3,8,1,5,2,6,6,-6,7,7,-6,2,5,3,3,-6,1,6,2,3,9,-1,5,5,-9,6,1,3,10,-10,6,-9,4,1,9,7,-5,-10,-8,-4,7,2,-10,6,1,-2,3,-3,9,10,8,-3,-8,3,9,-2,-7,-6,9,6,-9,-4,4,-9,1,-10,-9,-2,-9,4,4,4,-2,10,-4,1,7,-6,-3,3,-6,-7,-9,5,-5,5,7,-1,-2,10,7,9,-7,6,-10,7,3,3,2,9,-5,7,4,2,-8,3,-6,-3,7,-4,-8,3,5,-5,-1,6,-7,-1,10,-8,-8,8,-3,-8,10,-7,4,-2,-5,-6,1,4,5,-10,7,-7,-1,10,4,4,9,-4,9,-2,3,1,-1,4,8,-5,4,-1,-5,-8,-8,-4,-2,-2,4,-7,3,3,-1,-2,-2,6,-8,-2,-10,5,3,-7,-10,9,-2,-3,2,-10,2,2,10,-10,6,1,-2,-4,-8,3,-9,-3,7,-7,-3,-2,9,-1,-3,-7,-2,-5,-7,-3,-9,4,-7,10,-3,2,3,3,7,3,4,1,8,-2,2,-1,-2,-8,4,-2,4,-2,-8,-1,8,7,3,8,3,-10,7,-5,-8,9,-10,8,-5,-2,-7,9,8,7,-5,5,-7,2,-6,-5,9,-6,-7,2,-9,6,-7,1,-3,7,5,4,8,-8,-3,1,-8,-1,-3,6,7,-8,-7,2,-9,-7,-2,4,9,4,-6,-3,4,-9,7,9,-7,2,7,-5,-4,9,-3,6,7,-3,-5,-5,-10,-5,10,-5,-10,5,1,-4,-10,9,-5,3,-4,-3,3,-7,-4,2,-6,-3,1,6,5,5,10,-9,10,7,8,-5,7,4,4,-5,10,-9,-7,-3,2,10,-5,-8,-10,-10,-4,9,-7,-3,8,3,10,-1,4,9,-5,1,7,6,4,-8,-3,10,-2,2,2,10,-5,9,6,-7,-7,2,8,3,-3,10,10,7,2,-3,-3,8,-5,-9,-3,1,-7,-5,-10,8,-1,-1,-6,-4,6,-5,-2,10,8,-8,10,-4,-2,-3,-7,-6,-9,1,3,-4,-3,-1,1,-2,-1,-3,-10,7,4,-4,2,3,-7,7,-10,-3,9,7,5,1,2,6,-1,-3,4,-7,-9,8,-5,-8,-5,7,6,7,5,-5,2,-8,8,-9,1,1,-8,-6,3,7,8,3,8,-3,-10,2,2,4,-1,2,-8,-2,3,9,-3,-5,10,4,10,5,-6,9,-6,9,7,-9,-6,3,-10,-5,-1,-5,8,3,7,-5,4,2,-10,-7,-4,-6,-1,2,-3,6,7,7,1,5,-7,-2,6,-10,6,-5,-8,-3,-10,-10,-1,-7,8,-6,-5,8,1,2,5,-6,-1,-3,4,8,2,6,-6,4,8,-4,2,4,1,5,-10,-7,3,-10,8,8,-7,5,-9,7,10,-2,-3,-10,-4,10,-5,5,-7,-3,-4,-4,7,-4,8,-6,3,3,-4,-10,-7,2,-9,7,1,-10,-3,6,4,8,3,2,-2,2,9,6,-4,7,-7,-9,6,-5,-6,1,-3,3,3,-2,2,2,-5,9,-9,1,1,-4,1,-6,-10,-6,7,1,-7,-6,-6,-2,9,2,-6,-3,5,3,-9,-1,-7,-4,-6,-4,-7,-2,9,3,5,-5,8,-9,-9,7,1,-9,-6,-3,-7,7,-5,6,-5,1,4,-3,8,-7,6,5,3,6,-6,-2,-5,-6,10,-4,10,-6,-3,-9,3,-8,-10,-6,6,2,2,4,5,-6,1,-9,-7,-5,6,-1,-10,5,1,-10,-5,8,6,-5,-5,5,2,9,1,-10,-10,5,8,-7,-3,-6,9,8,-8,-6,3,-9,9,4,3,-6,-5,-10,-3,3,-4,-6,5,-10,-4,-7,2,-4,5,-1,-4,-9,10,-3,8,8,-5,7,-8,-4,-5,-1,-7,6,-3,-10,3,-3,1,-5,1,3,10,7,-6,10,10,-6,4,-10,-8,3,2,-4,3,-3,3,-2,3,10,-10,9,-4,8,-7,-7,1,-6,-6,-7,10,-3,4,-5,-5,-6,-9,-5,-2,-3,5,3,7,-8,-8,2,-3,-10,-10,-3,3,-10,-6,7,9,-6,7,-10,-9,-7,-3,6,4,4,4,-9,-9,-1,-3,3,-6,8,-10,-8,-9,7,-6,10,10,3,1,1,10,-7,8,-7,-2,-8,5,1,-2,6,3,7,-9,-5,2,-2,-6,5,10,-8,9,5,1,8,6,1,-9,1,9,-10,-4,5,-1,3,4,-6,-9,-9,-6,-6,-2,-2,-7,8,-10,9,1,3,-4,-5,-10,-1,9,9,-8,10,2,-10,-4,5,9,8,-7,1,-7,-10,-7,-4,-3,-4,8,9,-7,-8,-7,4,6,5,-3,5,-5,7,-5,8,3,-9,7,2,-6,6,-3,1,-4,-5,5,7,6,-1,4,-1,5,-10,5,-8,-2,4,5,-9,2,-4,-5,-6,-4,1,10,4,9,8,6,5,-10,-5,6,2,7,6,8,10,1,-7,-3,-6,5,-8,-10,8,6,3,-7,-2,2,4,-2,-1,10,-5,8,-7,3,-3,10,3,5,8,4,6,-7,-5,9,-1,-5,-1,-6,-8,-2,6,-4,-8,6,3,-7,5,1,1,7,6,8,4,6,7,-5,-1,-1,-8,-6,-8,-9,-5,4,-10,-9,2,6,5,10,-9,6,-3,-9,-5,-1,-6,-9,-1,-8,-5,-9,-8,5,-4,-7,1,3,10,3,6,2,4,-4,4,8,-1,-6,-2,2,7,1,3,-10,-5,-2,-8,-3,-6,9,-9,9,2,8,-6,9,2,-9,-3,1,3,1,6,4,-10,-1,-8,10,-4,5,1,-3,-4,-1,1,-7,3,-6,1,-2,2,4,2,1,2,-7,-8,9,3,10,-10,-10,6,-4,7,2,9,-9,-9,8,4,6,8,-7,5,-8,-6,-10,6,1,-1,-5,8,3,4,-9,-9,-4,10,9,-9,-10,7,1,-5,-9,5,1,5,1,7,10,4,-4,-5,8,2,-3,10,-2,-6,5,2,7,10,-1,-9,-3,-6,7,-2,7,5,-10,-4,3,-3,3,4,7,1,9,10,1,10,7,-5,3,4,6,-6,-10,-7,6,-5,5,2,4,-7,6,-4,-7,-7,8,4,9,-5,10,-2,-3,-3,2,4,7,-4,-1,6,-9,8,4,3,5,2,10,-6,-2,-3,4,4,-3,4,7,1,1,-3,-3,-8,-6,6,6,-1,8,-5,-5,4,7,9,-8,-10,-10,-3,1,3,-4,5,8,-10,-2,-1,-4,-5,4,5,-4,10,9,-9,7,-10,-1,-2,-1,-7,7,-1,6,-2,-2,10,-1,10,-4,-2,2,-3,-7,2,-9,-4,-9,-9,-3,-3,7,8,4,10,10,-10,-4,-3,-9,-2,4,-5,10,-7,-5,5,6,2,5,7,-3,-6,-9,9,-6,6,-6,-2,-5,9,-3,-1,-2,-8,-6,2,3,6,1,-10,8,-4,5,1,8,9,8,10,-5,-7,-5,-10,-1,10,6,6,6,-8,-7,-2,-1,-6,-4,-9,7,2,8,-2,-10,8,2,8,5,10,7,9,-4,-8,-3,7,-6,-4,9,-1,8,-5,-5,-10,-10,-2,-2,-6,-8,-3,5,1,-9,6,-10,-8,-8,9,-7,2,7,6,-5,-6,-1,3,10,-7,-10,-6,-2,1,7,-1,-8,4,9,7,-4,-6,-3,-3,7,-10,5,-9,2,4,7,6,10,-3,1,2,2,-2,-1,7,-5,4,5,-6,3,-8,9,8,-5,-8,-10,4,2,-6,-1,10,-10,-7,-10,-3,4,5,-7,-3,-3,-9,-3,2,8,-10,-9,-6,-7,-5,5,1,-1,-1,7,-1,6,3,4,9,-3,1,-1,2,-10,-6,9,2,-2,-8,-10,-1,-10,6,-10,-6,-3,-7,-3,-4,-8,-8,8,6,-5,-2,7,1,-8,1,-3,-2,-3,-1,-8,1,-5,-2,7,4,-6,8,10,1,6,7,-1,6,-6,2,3,-9,-2,-3,10,-2,-4,2,-10,3,6,-5,-6,3,-7,-5,10,-1,4,-3,5,-3,-6,4,-7,-1,-6,-2,-7,-6,3,7,5,8,-5,-8,-4,9,5,7,-10,-8,7,9,-6,10,-6,5,-8,5,-1,2,-1,9,-4,-1,-7,1,9,-1,6,-4,-10,-6,-1,-10,3,10,-2,-1,7,3,10,-9,-3,-4,2,3,-9,10,1,2,3,7,3,4,-1,4,-10,-10,5,-3,-2,-1,-7,-10,-3,2,6,-3,-7,-9,-5,-10,7,-7,-4,9,9,6,3,4,-8,-5,-6,-5,7,-3,-6,5,-3,-4,-7,2,7,1,1,7,2,8,-10,2,5,-10,-8,-2,9,7,-3,9,-6,9,8,9,-9,9,-9,9,-6,-5,-1,-7,-5,6,5,5,8,1,1,7,8,-1,8,-1,6,3,10,-10,6,2,-1,-5,2,-6,-5,-5,10,-9,6,3,3,1,-5,10,-7,5,9,9,-5,6,-10,2,-7,-8,-1,4,8,7,4,-7,2,-1,3,4,-6,9,-1,6,3,2,-5,-8,-2,6,-4,9,4,-7,-9,-6,-1,-1,-5,-4,-10,-10,1,-8,5,-8,-7,-5,6,-10,4,10,-9,10,9,-2,-8,-4,2,-3,7,8,-8,-7,-6,9,-2,-5,-1,7,-9,-1,-3,10,-8,-6,4,-9,6,7,2,10,-7,9,2,-10,-6,9,-5,-9,-10,7,7,-6,-1,-7,-9,7,3,-3,-3,-5,-3,8,-3,-10,2,-7,-3,-3,6,-7,6,10,-1,4,8,-3,-4,-1,-10,10,-10,2,-1,-10,-5,-3,-5,2,-8,10,-6,8,-5,-6,2,6,4,7,-3,2,6,-10,-8,6,9,-3,10,6,2,10,-8,6,-4,-7,2,6,-5,-10,7,9,4,10,5,9,7,-1,-8,9,2,1,-7,3,-1,5,8,5,-5,-4,-2,8,-4,6,-8,4,-3,5,1,-2,-10,4,10,-10,6,-9,-8,-8,8,4,9,7,2,3,-1,-6,3,-10,9], dtype = "int64")#candidate|14251|(2002,)|const|int64
call_14250 = relay.TupleGetItem(func_14025_call(relay.reshape(const_14251.astype('int64'), [2002,]), relay.reshape(var_14205.astype('float32'), [1950,]), ), 2)
call_14252 = relay.TupleGetItem(func_14028_call(relay.reshape(const_14251.astype('int64'), [2002,]), relay.reshape(var_14205.astype('float32'), [1950,]), ), 2)
output = relay.Tuple([call_14204,var_14205,bop_14209,bop_14216,call_14247,call_14250,const_14251,])
output2 = relay.Tuple([call_14206,var_14205,bop_14212,bop_14219,call_14248,call_14252,const_14251,])
func_14260 = relay.Function([var_14205,var_14208,], output)
mod['func_14260'] = func_14260
mod = relay.transform.InferType()(mod)
var_14261 = relay.var("var_14261", dtype = "float32", shape = (1, 1950))#candidate|14261|(1, 1950)|var|float32
var_14262 = relay.var("var_14262", dtype = "float32", shape = (9, 6, 13))#candidate|14262|(9, 6, 13)|var|float32
output = func_14260(var_14261,var_14262,)
func_14263 = relay.Function([var_14261,var_14262,], output)
mutated_mod['func_14263'] = func_14263
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11901_call = mod.get_global_var('func_11901')
func_11902_call = mutated_mod.get_global_var('func_11902')
call_14384 = relay.TupleGetItem(func_11901_call(), 0)
call_14385 = relay.TupleGetItem(func_11902_call(), 0)
func_6965_call = mod.get_global_var('func_6965')
func_6966_call = mutated_mod.get_global_var('func_6966')
call_14394 = func_6965_call()
call_14395 = func_6965_call()
func_12553_call = mod.get_global_var('func_12553')
func_12555_call = mutated_mod.get_global_var('func_12555')
call_14403 = relay.TupleGetItem(func_12553_call(), 0)
call_14404 = relay.TupleGetItem(func_12555_call(), 0)
output = relay.Tuple([call_14384,call_14394,call_14403,])
output2 = relay.Tuple([call_14385,call_14395,call_14404,])
func_14409 = relay.Function([], output)
mod['func_14409'] = func_14409
mod = relay.transform.InferType()(mod)
output = func_14409()
func_14410 = relay.Function([], output)
mutated_mod['func_14410'] = func_14410
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9148_call = mod.get_global_var('func_9148')
func_9150_call = mutated_mod.get_global_var('func_9150')
call_14467 = relay.TupleGetItem(func_9148_call(), 0)
call_14468 = relay.TupleGetItem(func_9150_call(), 0)
func_11809_call = mod.get_global_var('func_11809')
func_11814_call = mutated_mod.get_global_var('func_11814')
var_14475 = relay.var("var_14475", dtype = "int32", shape = (1792,))#candidate|14475|(1792,)|var|int32
const_14476 = relay.const([False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True], dtype = "bool")#candidate|14476|(117,)|const|bool
var_14477 = relay.var("var_14477", dtype = "uint64", shape = (1280,))#candidate|14477|(1280,)|var|uint64
call_14474 = relay.TupleGetItem(func_11809_call(relay.reshape(var_14475.astype('int32'), [1792,]), relay.reshape(const_14476.astype('bool'), [117,]), relay.reshape(var_14477.astype('uint64'), [1280,]), ), 9)
call_14478 = relay.TupleGetItem(func_11814_call(relay.reshape(var_14475.astype('int32'), [1792,]), relay.reshape(const_14476.astype('bool'), [117,]), relay.reshape(var_14477.astype('uint64'), [1280,]), ), 9)
output = relay.Tuple([call_14467,call_14474,var_14475,const_14476,var_14477,])
output2 = relay.Tuple([call_14468,call_14478,var_14475,const_14476,var_14477,])
func_14483 = relay.Function([var_14475,var_14477,], output)
mod['func_14483'] = func_14483
mod = relay.transform.InferType()(mod)
mutated_mod['func_14483'] = func_14483
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14483_call = mutated_mod.get_global_var('func_14483')
var_14485 = relay.var("var_14485", dtype = "int32", shape = (1792,))#candidate|14485|(1792,)|var|int32
var_14486 = relay.var("var_14486", dtype = "uint64", shape = (1280,))#candidate|14486|(1280,)|var|uint64
call_14484 = func_14483_call(var_14485,var_14486,)
output = call_14484
func_14487 = relay.Function([var_14485,var_14486,], output)
mutated_mod['func_14487'] = func_14487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11280_call = mod.get_global_var('func_11280')
func_11282_call = mutated_mod.get_global_var('func_11282')
call_14491 = func_11280_call()
call_14492 = func_11280_call()
func_4660_call = mod.get_global_var('func_4660')
func_4663_call = mutated_mod.get_global_var('func_4663')
const_14496 = relay.const([2.788381,-8.628775,7.333869,-4.485018,-8.109424,-6.367016,9.949296,4.108676,-4.464013,-2.132692,7.242004,-7.578868,-7.479489,3.353055,0.316045,-9.538990,-2.019759,3.558651,-2.285862,-1.791365,-4.976504,-4.709288,-9.837647,9.368582,8.548772,4.489784,0.824235,8.397601,6.915397,9.234037,0.479319,9.882152,-9.437980,1.234079,-0.036995,0.923108,-5.282293,5.526861,2.178052,8.447487,-7.855626,-4.703036,5.241695,4.751407,-5.464652,9.960761,2.332607,9.297857,1.656339,-2.233890,-0.874759,3.314015,6.312087,9.401271,2.282300,5.285195,3.412125,-8.436999,8.022730,0.339734,-8.164743,-7.532971,-1.854626,-0.277400,-2.337800,9.231780,-8.202092,-8.102501,1.858929,1.441001,-6.606397,-9.885739,-9.313947,-7.447919,5.232302,3.185982,0.469119,9.626668,-6.974159,4.040918,-1.357407,9.892208,2.939871,-1.302746,-9.662388,-4.259040,-5.389492,-6.102623,9.947013,0.815413,0.403855,-6.759728,-1.204481,-4.953555,9.356414,4.725500,-5.065998,2.558532], dtype = "float32")#candidate|14496|(98,)|const|float32
call_14495 = func_4660_call(relay.reshape(const_14496.astype('float32'), [7, 2, 7]))
call_14497 = func_4660_call(relay.reshape(const_14496.astype('float32'), [7, 2, 7]))
bop_14527 = relay.not_equal(call_14491.astype('bool'), call_14495.astype('bool')) # shape=(7, 2, 7)
bop_14530 = relay.not_equal(call_14492.astype('bool'), call_14497.astype('bool')) # shape=(7, 2, 7)
func_13388_call = mod.get_global_var('func_13388')
func_13390_call = mutated_mod.get_global_var('func_13390')
call_14531 = func_13388_call()
call_14532 = func_13388_call()
func_7370_call = mod.get_global_var('func_7370')
func_7371_call = mutated_mod.get_global_var('func_7371')
call_14536 = relay.TupleGetItem(func_7370_call(), 2)
call_14537 = relay.TupleGetItem(func_7371_call(), 2)
var_14543 = relay.var("var_14543", dtype = "float32", shape = (8, 4, 6))#candidate|14543|(8, 4, 6)|var|float32
bop_14544 = relay.logical_and(call_14531.astype('bool'), var_14543.astype('bool')) # shape=(8, 4, 6)
bop_14547 = relay.logical_and(call_14532.astype('bool'), var_14543.astype('bool')) # shape=(8, 4, 6)
output = relay.Tuple([const_14496,bop_14527,call_14536,bop_14544,])
output2 = relay.Tuple([const_14496,bop_14530,call_14537,bop_14547,])
func_14559 = relay.Function([var_14543,], output)
mod['func_14559'] = func_14559
mod = relay.transform.InferType()(mod)
var_14560 = relay.var("var_14560", dtype = "float32", shape = (8, 4, 6))#candidate|14560|(8, 4, 6)|var|float32
output = func_14559(var_14560)
func_14561 = relay.Function([var_14560], output)
mutated_mod['func_14561'] = func_14561
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13872_call = mod.get_global_var('func_13872')
func_13873_call = mutated_mod.get_global_var('func_13873')
call_14566 = relay.TupleGetItem(func_13872_call(), 1)
call_14567 = relay.TupleGetItem(func_13873_call(), 1)
output = call_14566
output2 = call_14567
func_14572 = relay.Function([], output)
mod['func_14572'] = func_14572
mod = relay.transform.InferType()(mod)
mutated_mod['func_14572'] = func_14572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14572_call = mutated_mod.get_global_var('func_14572')
call_14573 = func_14572_call()
output = call_14573
func_14574 = relay.Function([], output)
mutated_mod['func_14574'] = func_14574
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13299_call = mod.get_global_var('func_13299')
func_13300_call = mutated_mod.get_global_var('func_13300')
call_14612 = relay.TupleGetItem(func_13299_call(), 0)
call_14613 = relay.TupleGetItem(func_13300_call(), 0)
output = relay.Tuple([call_14612,])
output2 = relay.Tuple([call_14613,])
func_14620 = relay.Function([], output)
mod['func_14620'] = func_14620
mod = relay.transform.InferType()(mod)
output = func_14620()
func_14621 = relay.Function([], output)
mutated_mod['func_14621'] = func_14621
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13376_call = mod.get_global_var('func_13376')
func_13377_call = mutated_mod.get_global_var('func_13377')
call_14650 = func_13376_call()
call_14651 = func_13376_call()
output = relay.Tuple([call_14650,])
output2 = relay.Tuple([call_14651,])
func_14686 = relay.Function([], output)
mod['func_14686'] = func_14686
mod = relay.transform.InferType()(mod)
mutated_mod['func_14686'] = func_14686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14686_call = mutated_mod.get_global_var('func_14686')
call_14687 = func_14686_call()
output = call_14687
func_14688 = relay.Function([], output)
mutated_mod['func_14688'] = func_14688
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14144_call = mod.get_global_var('func_14144')
func_14146_call = mutated_mod.get_global_var('func_14146')
call_14712 = relay.TupleGetItem(func_14144_call(), 0)
call_14713 = relay.TupleGetItem(func_14146_call(), 0)
output = call_14712
output2 = call_14713
func_14717 = relay.Function([], output)
mod['func_14717'] = func_14717
mod = relay.transform.InferType()(mod)
output = func_14717()
func_14718 = relay.Function([], output)
mutated_mod['func_14718'] = func_14718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11456_call = mod.get_global_var('func_11456')
func_11457_call = mutated_mod.get_global_var('func_11457')
call_14740 = relay.TupleGetItem(func_11456_call(), 2)
call_14741 = relay.TupleGetItem(func_11457_call(), 2)
uop_14751 = relay.sigmoid(call_14740.astype('float32')) # shape=(1950,)
uop_14753 = relay.sigmoid(call_14741.astype('float32')) # shape=(1950,)
func_6080_call = mod.get_global_var('func_6080')
func_6082_call = mutated_mod.get_global_var('func_6082')
call_14758 = func_6080_call()
call_14759 = func_6080_call()
func_5899_call = mod.get_global_var('func_5899')
func_5902_call = mutated_mod.get_global_var('func_5902')
var_14761 = relay.var("var_14761", dtype = "uint64", shape = (1280,))#candidate|14761|(1280,)|var|uint64
const_14762 = relay.const([1.403513,-1.713795,8.275660,-9.369618,-7.151713,3.949363,6.032226,2.798585,5.351560,-2.552443,-0.277288,-1.283611,6.807002,3.124369,-0.964384,9.744353,0.778798,3.975775,2.890006,-7.068388,-6.057210,-4.824881,-9.324072,5.141668,-6.977469,-4.382611,8.709080,2.500271,-9.177012,3.427422,2.600480,-5.259076,-2.462918,1.525661,7.414564,9.682293,1.616553,0.621131,-8.691014,1.011423,6.435220,1.931838,0.272705,9.933345,6.980243,-6.261860,5.965151,5.561614,9.016828,-2.285359,3.703788,-6.565258,1.180284,-7.447171,0.088481,-2.052211,1.934418,6.690042,-2.277130,-9.176620,6.867599,-7.747824,2.796728,-1.638300,-7.557143,4.196618,-5.364690,-7.617837,-5.247512,0.502583,5.882479,-3.566184,-1.863712,7.006469,-4.770066,-9.535753,-0.868967,6.352782,7.254901,-9.409128,-8.692852,5.299349,-7.693526,-1.601664,-6.498137,-7.884677,9.788867,-7.723542,-4.531733,-7.876579,2.664206,-7.672012,3.259582,7.546698,5.968102,-6.885892,5.591483,-3.400450,7.393986,-9.937304,6.845492,2.368239,5.821692,-3.092329,9.763796,9.306684,8.348044,4.323922,4.863401,5.663146,-7.747298,-4.956405,2.562998,8.855497,0.489244,-6.543448,-3.008341,4.012709,7.272578,4.566271,-9.275655,6.456478,-8.876956,-5.480664,6.674897,-5.403820,8.702580,-1.574148,-1.914857,9.367375,1.114219,-2.398093,-1.471521,-2.119627,5.898529,-0.425524,-2.720254,9.245546,-4.116253,-5.363558,-8.663417,-3.021622,3.910677,-5.337789,-1.675496,5.753556,-2.649992,-1.334822,7.221904,-9.747929,-0.608082,-2.420458,0.144531,-1.441962,0.425197,6.721536,2.414148,8.711944,-0.221947,-3.007029,5.336690,9.998306,2.095665,-6.037877,-5.983513,6.334862,-6.543519,5.142203,-2.813827,4.655532,-8.525595,0.069610,-3.039407,-7.883616,-7.937660,-7.010836,-5.195018,2.084987,8.175561,-9.520687,5.494375,-3.703446,0.312083,0.822048,7.597057,1.263397,1.053911,-0.777109,3.286086,2.223666,9.522778,8.740588,7.657977,-6.734172,4.384967,-0.038042,-3.529613,-5.300458,-2.887695,0.701126,-9.209386,8.088807,9.937035,-5.643355,-6.163546,8.417159,2.563461,8.309476,1.845985,9.434385,-7.121760,9.210131,-3.528075,-1.564302,9.798688,9.998112,-5.103883,-5.464546,-1.810497,-6.544527,-3.051244,-1.268049,-2.998927,-8.264666,0.645634,-7.873672,5.974744,9.676412,4.615526,-1.000307,3.891146,1.340823,-8.708190,-4.660695,-0.461159,6.435528,-5.851531,-5.069774,9.788059,-5.279125,-8.024947,-3.330588,1.099412,7.898510,5.922523,2.227755,5.975300,-8.818898,-8.519998,-3.369135,4.259052,7.461552,-2.464953,-4.043303,-3.643942,-3.089896,-6.425850,-8.818241,-7.946607,-3.448483,7.519573,2.202460,-4.277924,-7.155658,-2.206440,8.623769,-4.431316,4.444479,-0.516266,-2.398160,-8.858388,2.186860,2.492734,-9.818391,-0.491933,7.724872,6.776283,-3.012024,-4.582692,-0.186524,-0.805246,-1.672816,3.384168,5.244534,-5.925086,-9.577579,-5.390273,3.066185,-0.397213,-3.716178,-3.680332,-4.635184,-6.581800,-0.593894,-0.473787,6.531231,-7.677060,0.227735,5.297046,-2.803548,8.104345,-1.158171,-0.216564,8.669091,-9.114104,3.264365,-9.733397,-5.267415,2.984231,3.814652,2.510287,-9.374790,2.583491,5.412635,-7.553932,-5.073297,9.897873,2.551851,-4.477337,-9.719671,-0.864810,6.918984,7.726640,7.392940,-9.848235,-6.250653,4.160023,-6.684808,2.730177,4.019965,3.141823,9.571999,8.268364,-9.394421,1.818705,-5.107930,4.584627,-7.452541,9.872530,1.513485,4.313344,9.657630,-6.677463,3.604351,-7.299810,4.994751,-8.597214,-3.824327,8.548775,4.604550,7.366008,4.349700,9.386903,2.729722,6.912590,6.372234,5.851071,-5.589728,-7.998442,4.585622,-6.540434,-1.186826,6.417146,-7.796954,9.850459,1.405272,3.656446,9.489596,6.653660,3.080957,9.488821,4.523850,-5.879535,-9.511366,3.698079,6.813933,-4.402208,-6.026560,-9.509879,7.988661,-8.985246,-9.207174,3.256744,-3.483539,-2.234659,2.595280,-7.579731,-4.976511,-7.247170,1.058291,-5.588896,-4.676275,-4.879746,-0.854990,6.233287,1.301590,0.284614,-2.352827,4.581092,3.431694,-3.741091,-2.385114,9.851511,5.763718,8.680539,4.202161,3.759650,5.027598,-3.572550,-7.495276,9.230341,1.366858,7.962682,0.632793,-3.911627,0.038571,3.919617,-1.196577,-2.244446,1.179124,-6.663904,-1.145287,-9.422017,-7.116954,6.935008,-4.212828,-7.863324,6.918036,7.101188,-4.777816,7.395470,6.782655,6.420396,1.214516,5.300319,-0.155470,3.147386,-5.176354,-4.630808,-0.831205,1.787438,-8.885227,-9.676149,-5.035598,-2.942637,-0.179769,-9.723053,-9.959165,6.273433,0.915316,-4.699632,-5.275027,-5.710725,5.596285,9.143522,5.630711,2.344719,-4.192978,0.679389,4.712545,-2.757142,-5.716311,8.179974,-1.268240,-2.016299,-2.040469,8.254390,1.847966,7.633936,-6.395694,-7.917546,6.618004,8.064385,-1.581167,-4.444828,-4.636886,3.622227,9.952268,-1.027614,6.441581,-2.993853,5.108440,-1.140515,1.223722,-0.568016,9.212814,3.324084,-0.458311,-1.546549,-6.623913,-1.351576,3.276650,6.974388,7.271413,1.775644,-7.812253,-6.491826,2.874278,-5.163156,-9.607640,4.123227,-1.759568,-7.860101,2.857894], dtype = "float64")#candidate|14762|(504,)|const|float64
call_14760 = relay.TupleGetItem(func_5899_call(relay.reshape(var_14761.astype('uint64'), [16, 10, 8]), relay.reshape(const_14762.astype('float64'), [504,]), ), 1)
call_14763 = relay.TupleGetItem(func_5902_call(relay.reshape(var_14761.astype('uint64'), [16, 10, 8]), relay.reshape(const_14762.astype('float64'), [504,]), ), 1)
output = relay.Tuple([uop_14751,call_14758,call_14760,var_14761,const_14762,])
output2 = relay.Tuple([uop_14753,call_14759,call_14763,var_14761,const_14762,])
func_14773 = relay.Function([var_14761,], output)
mod['func_14773'] = func_14773
mod = relay.transform.InferType()(mod)
mutated_mod['func_14773'] = func_14773
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14774 = relay.var("var_14774", dtype = "uint64", shape = (1280,))#candidate|14774|(1280,)|var|uint64
func_14773_call = mutated_mod.get_global_var('func_14773')
call_14775 = func_14773_call(var_14774)
output = call_14775
func_14776 = relay.Function([var_14774], output)
mutated_mod['func_14776'] = func_14776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13257_call = mod.get_global_var('func_13257')
func_13258_call = mutated_mod.get_global_var('func_13258')
call_14807 = relay.TupleGetItem(func_13257_call(), 0)
call_14808 = relay.TupleGetItem(func_13258_call(), 0)
output = call_14807
output2 = call_14808
func_14839 = relay.Function([], output)
mod['func_14839'] = func_14839
mod = relay.transform.InferType()(mod)
mutated_mod['func_14839'] = func_14839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14839_call = mutated_mod.get_global_var('func_14839')
call_14840 = func_14839_call()
output = call_14840
func_14841 = relay.Function([], output)
mutated_mod['func_14841'] = func_14841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8876_call = mod.get_global_var('func_8876')
func_8878_call = mutated_mod.get_global_var('func_8878')
call_14859 = func_8876_call()
call_14860 = func_8876_call()
func_7499_call = mod.get_global_var('func_7499')
func_7500_call = mutated_mod.get_global_var('func_7500')
call_14873 = relay.TupleGetItem(func_7499_call(), 1)
call_14874 = relay.TupleGetItem(func_7500_call(), 1)
func_5606_call = mod.get_global_var('func_5606')
func_5608_call = mutated_mod.get_global_var('func_5608')
call_14875 = func_5606_call()
call_14876 = func_5606_call()
output = relay.Tuple([call_14859,call_14873,call_14875,])
output2 = relay.Tuple([call_14860,call_14874,call_14876,])
func_14879 = relay.Function([], output)
mod['func_14879'] = func_14879
mod = relay.transform.InferType()(mod)
mutated_mod['func_14879'] = func_14879
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14879_call = mutated_mod.get_global_var('func_14879')
call_14880 = func_14879_call()
output = call_14880
func_14881 = relay.Function([], output)
mutated_mod['func_14881'] = func_14881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10227_call = mod.get_global_var('func_10227')
func_10229_call = mutated_mod.get_global_var('func_10229')
call_15015 = relay.TupleGetItem(func_10227_call(), 0)
call_15016 = relay.TupleGetItem(func_10229_call(), 0)
output = relay.Tuple([call_15015,])
output2 = relay.Tuple([call_15016,])
func_15019 = relay.Function([], output)
mod['func_15019'] = func_15019
mod = relay.transform.InferType()(mod)
mutated_mod['func_15019'] = func_15019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15019_call = mutated_mod.get_global_var('func_15019')
call_15020 = func_15019_call()
output = call_15020
func_15021 = relay.Function([], output)
mutated_mod['func_15021'] = func_15021
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9164_call = mod.get_global_var('func_9164')
func_9166_call = mutated_mod.get_global_var('func_9166')
call_15027 = relay.TupleGetItem(func_9164_call(), 0)
call_15028 = relay.TupleGetItem(func_9166_call(), 0)
func_14260_call = mod.get_global_var('func_14260')
func_14263_call = mutated_mod.get_global_var('func_14263')
var_15032 = relay.var("var_15032", dtype = "float32", shape = (1950,))#candidate|15032|(1950,)|var|float32
const_15033 = relay.const([3.525398,5.483301,7.708670,-4.983273,1.338768,-5.751327,-2.952923,-4.321824,-5.451415,7.773428,5.337075,-5.431221,1.502651,-5.435733,-8.871580,4.223361,7.595613,-1.181090,-0.847255,-7.934561,9.606833,9.383112,3.442217,-0.680184,8.014474,1.740910,-8.722844,-0.726171,7.330597,-1.894624,-9.294190,3.709058,-4.909368,8.987494,3.882314,-9.899752,-1.663255,-6.902873,-2.022133,5.222505,8.924541,-9.799917,-9.818533,7.168230,8.565658,1.749920,0.593989,-8.336585,7.931479,1.230989,8.903262,8.952481,4.363278,8.256664,-6.073624,-8.009409,9.782155,6.351243,1.347244,3.845170,6.315208,4.712393,9.774982,-6.145564,3.975504,5.757865,-8.378127,-1.303539,0.186687,7.319578,7.829688,8.841006,-4.654934,-0.446311,7.542802,-1.743839,3.776978,-4.347888,2.538555,2.489685,-7.230934,7.259993,9.416988,-4.551312,9.834184,4.560468,4.166848,8.714540,7.382765,-6.400869,7.097666,0.523251,-7.441527,-0.041340,8.095259,-1.634251,-4.469196,-8.028556,2.053150,-7.378649,-5.614863,9.707860,-3.441322,5.248057,9.760392,0.568771,-1.375341,9.441316,-8.654802,5.939012,1.439694,8.472931,5.596011,8.397189,-2.968984,-1.249017,6.535253,6.433717,-7.164749,-2.420281,-3.303588,7.323865,-0.369199,0.142959,-9.675862,-5.386507,-6.941004,1.244673,5.716972,-7.292021,4.344561,-0.192328,3.023411,-5.514754,-2.543897,1.419098,-1.151662,-8.912482,0.716046,6.764576,-6.488593,3.341552,0.561160,-0.841736,1.233350,5.883149,7.895286,-4.853617,1.326491,3.193438,7.858697,-0.100973,4.169299,-1.915241,-7.397174,-4.269920,-2.018141,3.140548,-1.987381,-8.363475,-2.900609,-6.141921,-4.768346,-4.691732,-8.912099,2.299482,-9.798802,4.167572,-3.856390,-2.078337,-9.205185,0.221004,-8.589173,-0.389933,3.836050,6.352073,-1.981906,0.566902,-1.601924,-6.373943,7.079786,-2.427042,1.352886,5.985520,4.162581,-3.894175,-1.784730,-1.022543,-1.728397,-8.242485,-2.830371,-5.531471,8.979848,7.556085,3.938346,-3.211116,1.307915,0.532711,4.852332,1.033528,-3.497930,-6.763999,2.765025,-9.440240,5.570286,4.149708,-5.073008,4.737400,-8.183722,6.466381,-0.019316,-8.815362,-2.472943,7.702128,0.392787,-9.957568,-0.180999,-0.646900,-3.802843,-4.996773,7.156691,4.168041,1.984622,-1.736342,5.030245,8.108031,8.083597,5.771101,6.785399,0.887338,0.871649,2.178756,-6.805948,-3.783044,-6.775720,6.023518,-2.799089,2.662691,8.264130,6.783423,9.421960,-4.275277,4.375910,-2.947431,-3.890486,8.219170,1.434976,-6.284507,-3.201287,-6.236751,4.620433,6.144606,-1.192862,7.118064,-0.254814,-6.654454,5.411226,-9.280572,8.455079,-3.864631,7.782733,2.410491,-0.548674,-8.649566,-0.825625,7.200891,-5.479947,-3.976545,0.517640,-8.636596,-5.416530,3.062364,-9.870865,-2.583576,-5.576846,1.264693,-4.241917,-8.931234,-0.028207,-2.406327,-6.243320,-7.153701,-0.898942,7.061510,-4.201406,3.004591,3.841157,9.117566,-4.169828,1.428184,-7.009617,-7.032455,5.948400,7.373429,-1.673858,9.585012,0.856302,2.786420,-9.928785,4.869403,7.068766,1.862628,1.556225,-2.632272,3.728348,-1.838069,-1.623929,-0.488596,1.173814,-8.705408,3.701393,-1.068009,9.435920,-5.739834,8.023106,4.464434,-9.288395,9.203696,2.607951,-1.619861,9.571541,-3.865327,3.682723,3.118768,-7.047904,-3.651637,3.491812,-5.610787,0.140972,-4.481277,-3.148076,6.057670,8.686274,-8.088125,-7.317289,0.298001,6.255077,3.534409,-1.131664,6.957632,-9.077891,3.247554,0.162688,2.335419,-5.476021,3.977553,8.739909,-7.442636,1.072222,5.472853,1.498607,8.828053,-6.834914,1.065302,3.200645,9.448797,2.051727,-3.481283,-9.530324,4.507162,2.389219,5.461305,3.216272,7.479154,-7.172450,-1.712706,9.796459,-3.569893,-1.391594,9.075384,-9.191750,-9.858264,9.172267,-9.847456,-2.560309,-2.082298,-9.666937,-6.443328,7.670692,-3.794696,-2.851091,4.619872,-2.641254,0.033826,-9.935444,8.475749,9.614013,-0.213606,-0.075727,-3.437418,-8.667892,-1.431573,-4.974215,-0.293315,5.583462,0.362394,6.763612,5.483373,-9.805099,-5.249189,2.429484,0.076076,6.950906,7.570898,7.459327,-8.654313,3.223705,-5.530795,8.380316,5.867120,-2.441743,-0.421830,-2.279874,3.219176,-7.242805,8.649059,2.952640,-5.286789,-2.725337,-0.628545,7.846868,9.550574,-4.422734,-9.690170,-5.348204,-5.604323,-8.910816,-2.722435,-0.827565,4.543564,7.831537,5.119126,-8.119018,-1.898376,4.807914,-4.397184,3.558886,6.789834,6.616556,-1.131381,-0.331126,-0.909573,0.921172,5.495045,9.900204,9.401096,3.051670,2.697111,-3.877643,-2.790976,8.152358,8.924442,-0.516329,-9.826771,-8.101614,1.365430,5.776729,-5.234892,-0.563534,-8.332712,-2.326291,-1.290508,-7.042741,1.253228,2.542648,1.385673,-4.500161,-5.707469,3.104375,5.532453,6.252430,-3.929613,-3.135633,4.549054,-3.129977,-0.790462,5.542476,-6.257333,9.593650,7.273525,1.931640,6.399886,1.489757,-6.923786,-6.911153,-5.460066,-5.112486,-9.248313,0.034162,9.118903,5.142002,1.205565,8.376297,5.436398,7.185737,5.241977,2.743974,4.013021,-6.457608,9.152562,2.285252,-3.819064,2.079227,-9.678055,9.455682,-5.054135,-6.585247,1.849226,-1.359930,-3.414773,8.968986,-0.025698,-0.493647,1.948068,-7.133044,3.453239,0.661807,7.139940,-5.078952,9.946624,-6.994386,-0.688832,3.672911,-3.402363,-4.768105,-1.835924,-2.523126,-4.152850,-3.040909,-0.411992,0.077650,-0.169414,3.399759,6.568401,7.139248,0.601904,-9.320885,-6.062876,-1.337291,6.556751,5.092595,-6.117061,5.449758,-5.593473,0.823418,-9.280253,-5.214452,4.974109,-5.679420,9.981677,7.533012,4.193699,4.882990,-0.035066,-4.790646,-9.616300,1.106681,-6.098093,-3.828760,-6.015274,7.807078,-6.051919,8.717329,6.654815,-7.559060,9.834718,-1.669607,4.186124,2.912198,8.309908,-1.617644,2.558998,-4.248575,-3.581320,4.285067,-4.023039,0.174429,-6.681170,-7.839976,-5.841421,8.324780,1.008375,4.955086,1.790220,-3.974218,-8.327741,-4.439364,-7.073910,8.307010,5.920491,4.810700,3.016005,-1.507611,0.754292,-3.189464,6.895548,1.690801,7.998677,-4.214916,8.933542,2.386256,5.663854,-3.523221,-6.042834,-0.413371,-7.082951,-5.351856,-9.835100,9.216027,8.477409,2.944116,5.951051,4.044767,9.300248,4.273401,-3.068431,6.202790,6.816148,1.104372,4.363530,8.612001,2.468444,-2.371151,5.592775,9.604492,7.709495,6.036408,-3.044501,5.271837,-2.937708,-6.990536,8.320761,-7.927377,1.020522,-5.507482,4.597146,-9.732330,7.304724,-8.132154,0.532372,-0.763951,2.153304,7.797570,-5.842027,7.780134,-5.293978,-2.573583,9.800836,-0.622116,-3.077548,-7.523747,-4.917002,8.868088,4.566173,-7.550655,3.326920,4.229033,5.236817,-6.264571,3.298058,-8.497608,-9.279332,4.244882,-0.700927,-8.817609,-5.700569,-0.141040,-1.691751,9.963285,-9.039116,-8.807280,-8.091190,-7.290622,-5.284357,2.804864,-3.477008,1.658757,-3.775271,2.862186,-4.545579,-7.507736,-6.783992,-2.587933,-2.529157,-9.363687,1.210308,-1.342149,-3.526582,2.165405,-6.128267,-7.596344,5.206617,3.860920,-5.506565,-2.465931,-1.684222,9.371790,0.520699,5.763499,2.934400,-5.322035,-6.084835], dtype = "float32")#candidate|15033|(702,)|const|float32
call_15031 = relay.TupleGetItem(func_14260_call(relay.reshape(var_15032.astype('float32'), [1, 1950]), relay.reshape(const_15033.astype('float32'), [9, 6, 13]), ), 5)
call_15034 = relay.TupleGetItem(func_14263_call(relay.reshape(var_15032.astype('float32'), [1, 1950]), relay.reshape(const_15033.astype('float32'), [9, 6, 13]), ), 5)
output = relay.Tuple([call_15027,call_15031,var_15032,const_15033,])
output2 = relay.Tuple([call_15028,call_15034,var_15032,const_15033,])
func_15038 = relay.Function([var_15032,], output)
mod['func_15038'] = func_15038
mod = relay.transform.InferType()(mod)
var_15039 = relay.var("var_15039", dtype = "float32", shape = (1950,))#candidate|15039|(1950,)|var|float32
output = func_15038(var_15039)
func_15040 = relay.Function([var_15039], output)
mutated_mod['func_15040'] = func_15040
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15146 = relay.var("var_15146", dtype = "uint16", shape = ())#candidate|15146|()|var|uint16
var_15147 = relay.var("var_15147", dtype = "uint16", shape = (7, 13, 10))#candidate|15147|(7, 13, 10)|var|uint16
bop_15148 = relay.bitwise_and(var_15146.astype('uint16'), var_15147.astype('uint16')) # shape=(7, 13, 10)
output = bop_15148
output2 = bop_15148
func_15176 = relay.Function([var_15146,var_15147,], output)
mod['func_15176'] = func_15176
mod = relay.transform.InferType()(mod)
var_15177 = relay.var("var_15177", dtype = "uint16", shape = ())#candidate|15177|()|var|uint16
var_15178 = relay.var("var_15178", dtype = "uint16", shape = (7, 13, 10))#candidate|15178|(7, 13, 10)|var|uint16
output = func_15176(var_15177,var_15178,)
func_15179 = relay.Function([var_15177,var_15178,], output)
mutated_mod['func_15179'] = func_15179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8933_call = mod.get_global_var('func_8933')
func_8935_call = mutated_mod.get_global_var('func_8935')
call_15262 = relay.TupleGetItem(func_8933_call(), 1)
call_15263 = relay.TupleGetItem(func_8935_call(), 1)
func_14025_call = mod.get_global_var('func_14025')
func_14028_call = mutated_mod.get_global_var('func_14028')
const_15288 = relay.const([8,-5,7,-2,-2,2,3,-7,10,9,-8,2,-10,-1,7,-9,3,-4,2,9,-10,1,5,-6,-1,6,9,-7,8,-1,9,-10,6,5,1,1,-6,-5,-2,7,-7,3,2,-6,-7,7,-7,-10,-10,2,-10,-3,7,9,-8,-3,9,2,7,4,-2,-1,8,3,-10,-1,10,-9,9,-6,-6,3,-8,-9,-10,-10,3,-5,-7,-1,5,-7,4,-2,6,4,-9,-7,10,4,8,6,7,4,-10,-1,7,-10,8,7,-9,5,-6,9,-8,-9,6,10,5,-9,1,3,-10,10,-4,1,8,5,6,-1,6,-3,-5,8,-10,-8,9,-8,4,-6,-7,-6,-2,-10,-7,-5,2,7,-4,9,4,-3,-7,-3,-3,1,-5,-4,10,-7,6,9,-1,-7,-3,-9,4,-9,4,-3,-10,-6,3,-4,-7,-9,-5,3,7,3,6,7,3,-2,10,4,2,-7,-4,-10,-5,4,-9,6,-6,-6,-10,-4,-10,9,-4,10,-5,-2,9,7,-3,4,7,8,10,10,8,2,-2,10,4,-3,8,-7,7,2,7,2,7,-9,-5,-6,3,-4,9,-1,3,-1,9,-1,3,6,9,-4,-7,3,10,-6,-9,7,4,10,-4,-10,10,9,5,1,-3,-8,8,2,-5,2,-9,-2,9,-10,-5,-5,-4,-8,10,-10,-4,3,2,-9,-6,-10,2,-7,8,-5,10,9,4,10,7,-7,10,1,7,-8,-1,-7,-4,5,4,4,9,7,-1,9,8,-6,-8,-10,-9,8,-9,-4,-9,-5,-6,-8,-4,-10,1,2,-7,-8,9,10,6,-9,-4,10,-1,-8,-7,4,9,-6,-3,-2,1,5,-7,8,-4,-10,10,-2,6,10,4,5,-9,-6,3,3,9,4,7,-9,10,9,-9,3,-1,-9,6,-10,6,9,7,1,-2,-2,-8,-9,-10,8,-9,7,3,-5,-1,-6,-5,6,7,-8,4,-9,8,-1,-4,2,-2,-3,6,-8,5,7,10,-3,-3,-7,8,-9,2,9,-3,-9,-9,-1,-2,-3,4,-8,3,1,-2,-3,6,9,6,-6,-6,-3,9,9,3,-8,-3,-1,-8,4,-3,-10,-1,-7,-6,7,9,-6,-3,10,10,3,6,2,8,-6,3,10,-7,-4,-3,7,-10,-2,10,1,2,5,-9,4,3,8,7,3,-6,-7,7,-1,-6,9,7,-8,-3,-8,2,-8,3,-2,-6,6,-1,1,6,-2,-6,-2,1,3,5,-4,5,-1,-10,1,-7,9,10,5,-1,2,-9,2,4,-4,5,7,2,10,-10,-9,10,4,-8,-9,7,-8,-4,8,6,-1,10,2,-4,7,5,-1,-5,-6,4,-2,7,-1,2,10,-9,-10,-9,-4,-9,8,-6,1,-4,2,4,-2,8,1,1,2,6,-3,-6,-9,6,9,8,3,8,-3,3,-3,-9,3,-8,1,8,-9,1,-9,7,10,7,7,-1,10,-6,-7,7,-4,-6,1,1,6,9,-10,3,-2,-3,8,9,-10,-8,9,-6,4,-8,-5,6,10,9,2,9,-4,4,8,7,8,2,5,-10,3,-4,8,2,-5,-9,-2,-2,-3,-8,10,7,-3,7,1,6,9,10,8,-9,-2,-2,9,3,-8,10,-8,-10,-8,-8,-6,2,-4,5,6,-7,-2,-5,10,-10,-8,-10,7,-9,7,-5,4,8,-8,2,-7,-2,-7,-10,6,-9,10,3,7,6,9,-9,-7,-3,-10,-10,-3,5,-1,8,7,-2,-5,6,-6,8,-4,-10,-3,-5,-7,1,-7,-1,3,4,7,5,-10,5,-5,-1,1,-9,4,9,-9,5,-7,2,6,-8,-3,-4,-7,-9,4,-3,-1,1,-4,-9,1,9,-10,7,-9,10,9,-5,3,-1,3,-3,-4,-10,-5,3,4,-3,5,2,-7,7,4,-2,-7,-7,-7,-5,-5,1,-7,-7,6,-5,1,6,8,4,5,-3,1,3,2,-10,4,-8,-6,1,-4,5,-4,3,-4,7,3,2,-10,1,-4,9,-2,8,-4,4,-5,-3,-1,2,3,5,-9,-9,5,-1,9,-6,8,1,-4,10,-3,8,-3,-9,8,-2,2,-6,-1,5,-10,3,6,-10,8,-10,6,4,8,6,7,3,-9,-6,9,-10,-10,-4,4,7,-7,2,-6,-5,-10,-10,-8,6,-5,6,2,10,-9,-10,-2,7,-5,5,7,-6,10,4,3,5,-10,2,9,4,8,-10,-3,2,-8,-9,-6,2,3,3,-3,5,-1,5,-1,-5,5,1,-6,7,-9,-9,-3,2,4,-3,-6,-10,3,5,8,-3,9,2,7,9,8,-1,-8,7,8,9,-6,1,8,-5,9,-9,2,-4,-1,-6,-1,-9,2,1,6,6,-2,-3,-4,-5,8,9,-5,10,-8,-6,5,-7,3,-7,-1,3,9,-4,-6,-3,-2,6,-7,-7,3,3,-1,5,2,3,6,-7,-3,7,7,-4,6,10,6,-10,1,9,6,5,7,-9,3,-7,4,-6,7,4,9,7,-1,6,-10,3,-8,-4,-6,7,1,-8,9,-10,5,8,-7,-1,3,8,2,-1,-2,3,-10,-1,-4,7,-4,-8,10,7,4,-4,5,2,5,-6,-10,5,1,4,5,-7,-8,-2,-2,4,6,2,-1,-9,-10,3,7,-4,6,-2,-9,1,-5,-6,3,4,7,3,4,4,8,-6,7,-3,-9,-3,-5,4,9,-10,9,2,-2,5,6,10,9,10,9,7,10,4,4,9,9,6,5,-7,-2,3,-4,-3,-10,-6,-6,-4,-3,-4,-8,2,4,7,-5,-4,-7,-4,-1,-1,-10,9,2,-4,6,3,3,-3,-1,-4,-5,3,7,-2,-4,9,-3,-10,4,1,-2,-3,-8,-1,7,7,-4,-5,-10,9,-1,6,7,-9,9,-10,-4,5,-9,3,2,9,2,8,10,-4,6,-7,5,5,-7,5,7,-3,6,4,10,5,7,4,9,-2,-9,9,6,9,6,-7,4,1,8,10,-9,9,-6,-5,2,-1,6,-6,1,-10,-9,-2,-6,5,-10,-3,-9,5,7,2,9,2,-3,-2,4,-3,-6,8,-10,10,-9,9,5,-5,5,-4,1,2,4,6,5,-1,-4,4,3,4,-7,1,-6,-6,2,-5,-6,6,-4,-6,-2,1,7,2,9,3,6,10,8,2,8,6,-6,-1,-5,-9,-7,4,6,-5,1,-5,-2,6,-2,2,6,3,-10,-4,5,-1,6,6,3,-10,-9,-1,9,1,-6,3,-2,-7,5,7,-7,-2,-6,-4,2,-5,-9,2,-4,1,-7,-3,5,1,-1,9,7,-10,2,3,-10,-4,5,-6,8,-6,-4,-2,-10,8,-1,9,2,2,5,-7,6,-1,7,7,-5,-10,3,-7,-5,4,3,6,5,9,-5,-5,10,-1,5,2,-2,-10,-4,-10,1,-7,-9,10,-2,6,-7,-10,10,6,1,5,10,-10,2,7,6,-8,8,-9,-8,8,7,-4,1,-2,8,6,3,-4,8,8,7,8,-7,4,3,3,-1,-9,-5,-3,-8,-2,-8,8,10,-9,6,-10,8,10,-7,-3,10,-1,3,-9,-4,4,9,-8,-7,-6,8,-6,2,-8,-9,-7,5,5,1,-8,6,9,-1,-4,5,3,-6,8,7,4,8,-6,-9,-10,-4,5,10,5,10,2,-7,-9,-8,-10,-4,10,6,-5,-6,5,-3,1,-6,-7,-6,-6,-5,-8,1,-7,-2,6,-4,5,8,-1,-4,-4,-1,-1,-9,-1,-9,7,-7,-6,3,1,3,-7,-7,1,3,4,-8,10,-1,4,-10,-1,-7,-7,8,-6,-3,-3,-3,6,4,9,-6,-1,-2,8,-8,-10,-7,-3,-5,8,-6,-10,7,-5,5,-3,7,-7,-1,-10,5,3,-6,-7,-9,-1,-5,-4,-7,1,4,-5,10,-1,-9,9,2,-6,-10,1,7,4,3,2,6,-5,9,-5,-4,-9,9,8,2,10,-8,-5,3,7,-7,7,2,8,-4,10,9,-2,9,-10,8,7,2,-1,1,-2,-6,-4,3,-2,4,6,3,-4,9,-7,5,-3,6,-2,3,-5,-3,9,-2,-4,5,2,9,2,9,7,3,-8,5,6,-4,-4,10,6,6,-8,1,9,-3,7,10,3,3,10,3,-3,7,-5,-3,-8,-2,-10,-6,10,9,3,-1,-1,-2,-10,9,2,-3,2,10,6,10,-3,-4,8,-10,5,1,-6,8,-6,3,2,6,3,8,8,-7,4,5,7,7,9,-9,-9,-4,6,6,3,-4,10,10,-9,10,-10,-7,2,-8,-2,-7,4,9,-9,7,-6,2,4,3,-9,-7,6,6,8,9,3,-2,-7,8,-3,-2,8,5,6,-3,9,-1,-6,2,-3,5,-9,2,7,6,4,8,-9,-4,-9,9,-9,-4,9,10,-9,5,-1,5,-8,-7,-8,4,8,-4,5,6,4,-10,5,5,4,-3,-1,-2,-1,1,5,-9,-3,1,-4,3,-6,3,2,9,-1,10,3,9,10,5,5,-8,5,-6,6,-1,2,-8,-5,8,-9,6,-10,-8,-4,4,7,8,1,4,-5,2,10,-2,4,9,-10,-5,-1,-9,-6,-6,6,6,2,-5,-7,-4,4,2,-8,1,-7,8,-1,-2,-3,1,-2,5,7,1,-8,10,3,-1,-2,-8,-1,6,-5,-9,7,-8,-9,5,4,9,-10,-3,3,-5,6,-6,2,-1,10,-7,-1,6,-7,-5,6,2,-7,1,9,-6,1,-4,-6,2,-6,-3,-2,-7,1,-10,6,-4,-7,2,3,2,2,7,-10,3,5,-3,4,-6,9,-1,7,9,-10,-1,1,-7,9,2,-10,-7,1,-2,9,-10,-5,7,-8,-8,-9,3,2,4,1,-3,1,8,10,-6,1,7,-9,-9,-1,7,-8,2,8,3,2,-2,6,4,1,2,8,-7,-4,-5,-5,-6,1,-3,4,8,-2,10,2,3,-5,-7,-6,1,-3,6,-9,1,10,8,-1,-1,-9,-2,-4,6,10,4,2,-8,2,-4,-8,-10,10,2,4,-4,-4,-4,1,-10,5,-9,-1,-1,2,-5,-8,-1,-3,-10,8,-10,10,3,-3,-10,-8,5,-5,4,2,10,-6,-10,7,6,4,8,-9,3,5,-4,4,4,-6,9,-10,7,3,5,-7,-5,-6,-3,5,10,-1,3,-2,7,7,-7,8,-1,3,-10,6,9,8,8,2,-5,2,10,-7,3,4,1,6,-4,-9,-7,-10,8,2,3], dtype = "int64")#candidate|15288|(2002,)|const|int64
const_15289 = relay.const([6.262892,6.758132,-9.773089,-1.332030,8.125920,-4.266469,-3.700232,-5.511373,2.895066,5.921797,-7.094595,5.221806,-1.418354,2.676528,2.872396,2.453191,2.080467,6.909953,-1.855316,5.449539,-8.410950,5.755373,-2.110035,5.515398,-6.917246,-1.105608,6.764071,-9.343057,-9.929053,5.221063,4.475209,-5.576189,3.138711,9.038465,-2.614477,-5.087310,-2.332929,0.767890,1.102610,-7.561812,5.884029,-9.151358,-3.733056,-0.407115,6.153351,-2.347986,6.052670,5.952325,-3.512133,-3.995956,3.644005,0.778112,9.647707,7.703042,4.461819,-5.559455,-7.001453,2.105436,2.519404,8.664360,-5.517239,-8.186668,6.156253,-1.076145,-9.690656,-5.940188,4.598266,4.276155,-3.770567,5.208235,2.606434,-9.985426,6.528631,-2.408589,-4.600827,6.639793,-9.264243,-7.272447,5.893249,2.641371,3.734361,9.466165,-1.874739,9.087596,6.536381,-3.764120,-2.909155,-7.566935,2.041981,2.610750,2.896222,-2.197728,-5.671303,9.662857,6.020730,7.338525,-1.240193,-4.623641,4.464912,5.785773,-2.408274,8.543213,-2.947598,-8.606947,3.571170,9.588794,-1.223838,-3.014778,-2.900751,-8.113013,-3.700463,1.454568,2.974902,7.890053,3.620445,0.112613,2.650984,5.871409,1.525770,1.917823,0.575803,3.249406,-9.793845,-0.183342,6.279215,-3.323575,-1.917492,-0.157770,7.732253,-5.178915,-1.916478,7.550676,5.819971,9.137410,-3.895781,6.473975,-9.184943,-2.590855,-2.634685,2.760002,1.829713,0.542371,3.769842,0.786839,-1.280004,-7.670383,-3.227069,-6.820478,-5.946548,-4.462258,-6.669491,-2.098462,-8.707286,4.793810,9.186126,-9.403060,-4.926453,-5.062669,9.382209,8.689776,1.135540,-7.212593,2.037427,9.480979,-8.515595,-8.586760,6.900722,6.338263,7.000187,-8.003902,-8.584060,-4.535766,0.237652,-2.525901,-4.255563,-1.779530,3.704244,7.687045,5.273192,-1.582897,-6.381169,-6.846422,2.267640,5.077113,-6.024244,1.160672,-6.433674,6.469301,-1.596578,-8.421644,8.334211,2.946347,4.988777,1.081423,3.983525,4.966880,7.238483,-0.617624,9.894324,1.675677,8.411536,-0.541919,-1.117719,5.081128,-4.336282,-6.583125,-0.912398,-4.799734,-3.176963,-6.553322,-1.265554,-2.772798,7.799150,-1.407249,-0.226334,-2.380874,1.041014,-6.851424,4.214958,-3.445165,4.470706,4.889742,-3.665901,-4.198168,-9.413507,0.213707,-4.552517,-6.093386,-0.298785,-7.058026,-4.178502,-2.852349,-5.345826,-1.308185,8.642720,3.123722,4.391826,-5.676102,-1.436815,-5.493887,-4.333893,6.336638,2.462899,-1.695668,7.578353,6.356400,-9.330026,0.168531,-3.128195,-3.882986,-4.132380,-4.369476,-4.820032,-8.967028,8.111468,3.163185,-4.666210,-3.117734,-9.581980,0.605614,-0.528135,-3.520077,-1.914853,2.617440,7.245550,-2.825303,1.636899,0.076443,-1.280587,-8.707546,-0.354649,8.137501,2.068926,9.726436,-7.958049,1.944862,8.305233,9.820358,9.451856,-0.513792,-8.676936,-4.229288,5.157560,-1.915010,7.559647,-9.801623,-7.514797,-3.006841,6.788910,-5.236152,-7.656465,-8.810002,1.070315,-4.772963,-5.238216,5.456727,8.603696,-8.027045,0.221113,-3.463131,-5.028781,-6.298040,-3.080560,-8.877489,-7.572119,-2.604249,-1.391842,-9.276920,-8.660590,-8.515007,7.083196,-6.510242,3.665852,-9.990338,3.164261,-9.479356,4.037421,-2.354833,8.480245,4.374837,5.852119,9.071214,9.893451,2.576283,-6.719301,-2.339337,2.079094,-2.866932,-2.589747,8.197413,-7.515134,4.372490,1.017921,6.705015,-9.862123,-3.852421,-5.330582,4.474317,-1.489220,-2.411970,-1.926809,-0.806405,5.348427,-1.699038,0.241503,6.457228,5.812013,7.918322,-4.801762,-7.024001,-4.045720,0.403914,-6.160398,-5.378493,7.910568,0.016533,1.247498,-9.078434,-6.329327,-1.115382,-8.499826,6.411471,-8.724691,-5.694989,-9.621674,7.072512,-4.913742,6.957596,5.734425,2.798746,-1.336680,-8.384086,-9.812682,-6.259473,-7.255738,4.327265,-8.693021,-1.936437,1.523271,-2.353770,6.388038,-6.506313,-2.138970,-7.588886,8.133779,-7.466158,-2.253713,-2.205298,0.239666,-6.163210,8.704777,6.254310,-7.031633,5.150831,-3.149888,7.747250,8.200406,8.315240,-3.800534,-2.571647,8.064644,6.619583,3.759829,7.712354,7.257290,-7.749186,2.269765,-8.388841,-7.444072,3.038368,0.726735,-8.200783,4.586541,-7.472790,-1.675938,7.943967,-8.593563,4.685334,-2.827287,-7.338871,-1.318337,6.622056,-5.234764,-9.122650,6.506430,-4.302099,-5.949666,3.729591,-9.991052,4.536462,-1.960414,1.201370,-5.585350,2.532651,9.479613,-9.232864,-0.827665,3.337036,2.594275,4.497629,6.233744,-5.392310,3.472523,4.355016,7.480472,-0.842505,-1.807829,-2.281767,-0.029531,3.827244,-3.787917,-3.536120,9.066918,8.860397,4.752975,6.748089,-1.027508,-5.103321,-1.092543,-0.758814,4.031591,6.649706,-5.465544,-2.437035,7.586665,-4.451013,8.940077,2.029070,-1.611662,2.846664,1.594635,-2.984939,-8.411744,4.743635,2.170896,5.861603,-9.901370,-5.655418,-4.603308,-4.191980,-1.636697,0.493408,8.409385,4.563960,-5.375535,6.946268,1.454212,1.205538,-2.566385,-8.111201,-8.848065,-7.272514,1.697660,2.202779,2.692674,8.982737,-7.696993,5.883422,9.917867,2.354771,-6.771589,-6.481563,5.015989,9.809108,-7.843562,7.972877,2.027846,-2.113808,-5.111109,7.266161,6.315211,4.406922,5.208106,5.639245,4.367441,-4.236090,8.194918,-1.560820,0.617083,-9.942738,6.282406,-4.754936,-6.805568,3.532132,8.613012,-9.414848,-3.308035,-2.054017,4.255089,-7.187480,6.937389,-0.662702,1.175936,7.062929,-6.632115,2.056594,2.118549,3.883391,-7.233145,-0.218667,8.905346,-3.891729,-2.825473,2.722855,-9.626602,7.291729,7.895647,-7.825420,-3.091251,6.831281,1.657090,-6.708369,-0.334245,-1.226446,3.871396,-3.370481,-7.059044,-8.701254,-8.547312,-2.618692,2.949486,-7.400802,7.069182,-1.038475,-6.201457,-0.696486,-3.499239,-9.511446,-1.696801,9.919769,3.549194,-0.407004,-9.186250,-8.136970,5.310022,7.698466,-2.446715,2.451844,-4.916479,8.410740,5.836627,-0.171166,9.706261,-3.087304,-6.094323,0.535199,-9.906933,9.922812,-2.311848,0.504048,-3.634147,-6.542766,-9.569917,-9.969698,3.715416,3.822539,7.791671,-1.427416,-0.919612,9.652434,-8.164706,-8.701120,-3.844276,5.608271,1.412795,-2.725700,3.929967,2.553386,-8.417075,-8.933001,1.859880,-0.921170,-9.094970,3.838653,-2.976881,8.796178,5.308103,4.737075,4.048443,-3.328361,2.567829,-8.401325,-5.661445,-1.286929,4.719871,-0.281341,-5.265897,2.100313,-0.925014,7.193603,6.229617,4.768393,-9.642344,5.826989,-2.828187,-7.141729,-3.504227,-1.145378,-0.641880,-1.231410,-7.497101,5.713165,7.496500,9.425135,6.557258,-2.784983,8.310849,-7.128599,-9.800710,8.234702,7.673813,-8.055798,-7.136407,-6.618670,0.845074,-4.841077,-9.150608,-6.192017,-7.289203,9.894238,-7.698596,8.934715,9.665480,0.905338,9.110729,-3.211671,2.170880,-4.522092,-4.627446,-3.690398,6.079217,5.381392,-6.634402,-1.679986,9.092392,9.497727,2.456684,3.967954,-7.439921,4.817778,7.889442,-4.609476,-2.112603,-8.928722,-3.011803,1.493543,7.114219,6.757102,-5.892035,-6.695520,0.327800,-5.655705,-1.376527,4.627261,-1.831117,-6.738566,4.366117,-2.738547,-0.256092,-5.211493,-1.383008,-5.617360,-4.120429,8.590606,7.720233,-3.653640,4.768414,-6.776128,-2.579013,-1.270075,-3.794250,-4.921313,-7.358866,3.864025,2.560006,7.994881,4.618054,3.440236,8.991128,0.526267,-0.566222,5.980641,-2.643103,-2.587740,8.597522,0.578566,6.449952,9.500450,9.085244,-1.476173,-6.314447,-6.400792,-1.482053,3.265215,-4.059300,-3.777912,-8.926901,8.405722,2.316476,3.505112,-1.674947,-6.764415,-8.401003,8.874874,0.542114,-5.679542,8.969424,5.257908,-0.096862,2.666915,2.529974,-2.744232,9.931469,-3.478887,6.572835,-6.074901,2.553603,6.244196,-6.106561,2.146385,4.414165,-2.462414,-4.198546,-8.115526,-1.094278,0.826123,6.541307,-1.773783,4.840904,-7.771772,-1.303133,8.259165,8.155909,-3.501690,8.513779,5.554820,5.718774,-1.842086,-9.462676,3.705746,-6.578721,-1.994191,-3.669640,8.549945,-4.515627,-6.144150,-5.374793,-8.286226,-7.564053,1.428435,-4.853037,-2.496350,-4.792177,9.687159,8.693378,-7.728895,3.885723,-4.478199,1.181622,-8.612600,6.038476,-8.971418,-9.527589,5.237355,8.333679,-9.391258,-3.799725,-0.740344,3.743532,0.452949,-5.209247,0.224176,-7.005308,0.642791,8.875604,9.966422,-7.552493,-1.470118,-7.588799,6.514720,-5.864532,1.951932,6.713986,-7.369195,1.427895,4.100152,1.584565,-2.232564,-3.706711,6.615672,3.394118,-2.414450,-5.030531,-0.372349,5.505852,6.973927,8.449176,-2.243783,-0.268049,-7.211917,-0.262276,3.537492,-6.102763,5.714554,2.345094,-6.075732,-4.615161,-7.565201,7.941994,5.507845,-0.520337,-0.409680,-7.620597,-1.761323,1.422951,-4.824924,5.427056,7.696544,2.951701,-8.205268,6.996016,1.135690,-8.299354,5.179171,-3.809804,-8.851865,9.834326,4.765901,7.189736,-5.337900,-4.932286,-2.040899,-5.845798,6.660237,-8.982832,-4.142858,-2.399586,5.579100,2.941632,-8.911014,-2.742778,-7.083238,1.302718,6.937505,-3.872099,-0.116254,-2.016157,-3.552109,-4.326529,6.082091,1.311092,7.025611,6.986888,-1.866093,0.980577,6.579940,2.516878,2.175731,3.352140,0.864164,-7.528932,-2.950523,-3.484249,3.077166,-4.907339,-5.260913,-9.166245,7.453559,-7.286925,-2.445124,-2.272615,8.834507,1.972876,-3.332691,8.870387,-9.043966,4.039358,5.742479,5.333635,4.648446,4.569281,-5.040054,5.972675,9.249223,1.220779,1.395954,8.369488,-8.005675,5.017122,2.815373,-6.432902,-3.347171,-5.375520,-5.718022,-1.654540,5.251638,7.791053,9.135393,5.621782,-9.166402,-9.649861,-5.333099,8.382840,-9.057894,-0.158657,2.833338,-2.146651,-7.412579,4.556912,-7.538011,-2.173300,7.877148,5.749163,-5.742018,-0.152943,-4.233239,-8.947739,-4.240588,6.220980,-4.083048,4.956312,-8.702675,6.099983,-3.593123,7.982759,-4.262367,9.675964,6.899043,-6.444332,7.834115,1.532273,2.674620,0.098482,3.205848,0.533464,-8.588971,3.314910,-5.966305,7.548934,-3.744671,8.460679,4.937696,-3.862035,-1.730487,-1.706422,3.020797,5.523536,-4.305246,0.995421,6.815494,9.268493,5.788538,-2.824328,-7.251670,-5.159751,4.175774,4.753219,-7.209902,0.307557,8.927685,6.680515,4.915308,8.616972,9.286290,0.878663,6.377303,-6.427303,-8.686618,-0.028345,-2.394604,4.829607,9.338842,-3.451327,-5.842025,-1.115028,-9.386085,6.075873,-7.616075,2.337918,8.649511,-1.809251,0.222059,4.868523,2.694123,-7.089536,-4.467587,2.805817,2.736069,-4.250078,-9.947839,7.901528,-2.955949,-8.308529,2.458032,-4.989911,7.384185,-6.916135,1.202669,-7.870603,1.370046,-2.264346,-7.379947,1.073264,-6.337228,2.696217,-5.259819,0.854948,6.043914,2.666851,0.169643,5.665561,-6.865525,8.250275,3.569419,7.403525,0.665065,8.494587,7.284899,7.093892,-4.874575,-7.302581,6.044273,1.447044,-1.259109,1.715145,-7.881840,-9.039539,-2.189308,-1.162837,7.757056,8.102099,7.845821,-2.997162,0.524505,-6.735968,-0.285088,9.161841,-1.977057,5.223962,4.470516,-8.777231,4.999605,0.738735,7.328902,-9.684518,3.595484,1.949821,-1.133154,2.409991,9.473340,2.363471,7.762301,9.469800,4.128076,-3.728527,3.035944,-9.169769,2.104287,5.942998,7.639424,1.971153,9.627433,9.139499,-9.586990,7.148304,9.468367,8.333096,6.914342,-2.209037,5.318455,-3.239747,-1.417711,-8.591075,-6.639270,-4.959170,7.070354,-6.680347,-7.827696,-4.046724,-7.780211,-1.322038,-8.215935,-7.276062,-5.198488,-8.624301,2.600177,-3.598169,6.750584,3.092455,-2.932686,3.337860,6.557171,-6.515174,4.256415,-1.381999,4.572913,2.794467,5.103699,9.062524,4.315313,4.183189,-4.891260,-5.653163,-9.045153,2.029942,8.949399,-9.783210,-8.709285,-1.312261,3.056079,-2.099502,8.443027,-2.631798,7.258080,-4.122958,5.841916,-2.372219,5.294364,2.414115,-1.113986,7.323529,9.692142,7.152350,-9.006011,-5.725078,-3.691502,-1.855986,-9.613111,-3.226759,2.174815,-9.422919,0.068366,-1.105663,0.359198,-5.760954,4.140458,6.212442,-7.982019,-1.896045,-3.436158,-8.906721,4.479441,-2.795446,-4.869036,-7.933264,2.976882,-8.870891,9.243449,-3.981473,0.290192,-3.816929,-4.970812,8.121111,-2.406329,1.455948,-7.483290,-2.086902,2.073879,-1.525724,4.672220,8.456122,6.440417,8.808836,-0.609101,-7.748787,5.569505,-9.918359,-2.615819,-2.144780,-1.320045,-8.701545,7.506929,-6.731138,2.810907,-9.653934,3.328134,-5.219626,-6.770080,5.598228,5.807547,-3.772943,2.707584,-9.981684,-4.484332,-2.642003,-7.328649,-8.138402,3.174978,-4.008416,8.091021,-4.781058,-1.171849,9.419365,-1.916104,-3.176164,-9.896237,-5.433427,0.076860,-1.140531,4.166753,-0.772895,4.826943,-6.248780,-2.702306,9.188979,4.956084,-6.823720,-4.728822,-3.392449,7.946082,-5.340868,6.338875,1.292042,2.864518,0.987256,-3.560888,9.420307,-2.367594,8.913265,-4.979584,-5.716545,-7.162875,-5.108836,-0.426681,9.635786,6.109819,-7.416805,3.494304,0.590189,4.449268,2.241320,4.724625,1.384990,-4.214210,-0.831483,8.100377,1.500767,9.141960,9.256115,-3.330623,4.239531,-3.022506,2.642027,7.135803,8.321977,2.363584,5.219148,4.114982,-2.567665,4.120956,-1.703171,5.301178,-4.845316,3.434047,-3.679929,-8.120191,4.229706,3.813654,-4.743950,-3.311554,2.867242,0.888359,-0.275418,6.769190,-9.988999,2.103633,-8.925820,-6.837363,2.590102,-6.367982,-2.691787,-5.749322,5.720292,-9.472543,-2.221917,5.501849,-5.167103,-0.078522,9.946466,9.481539,-3.946839,7.372925,7.249083,0.202789,9.623793,-0.219359,4.563998,-3.116215,9.650499,-3.690154,5.054528,0.071459,-7.768301,-4.483265,-5.769637,-4.102317,-0.866939,5.122623,6.906895,-6.686733,-7.314001,-4.581809,9.074901,-5.075215,6.687329,4.969097,2.333769,-5.151247,-1.982158,5.527619,-6.140159,-4.799503,9.892210,-7.592160,-3.415941,-5.769913,-2.543077,-5.404349,8.102418,-9.248899,-2.289770,6.759369,-9.434222,1.491199,-5.107073,0.818034,-1.023385,0.070205,0.331700,7.231194,-6.492576,-8.187282,-8.232233,4.843243,-7.871947,3.436756,9.017865,-5.418992,-0.832155,-9.340903,-7.344797,-4.790199,6.326852,0.780620,6.432670,2.425302,-6.990789,-5.365797,-3.374139,-6.702683,3.598152,0.067531,-6.571896,2.241725,-2.791899,8.392744,2.540621,9.554636,5.060908,-0.962547,9.704769,-1.363145,9.918994,0.823812,-4.115827,-0.567693,8.991702,-1.486077,3.101164,-1.625054,-8.935346,8.422993,7.037130,-9.771588,0.908431,-5.836207,-7.459424,-5.799332,2.135606,-2.451765,5.131116,-3.157366,-1.434221,-7.662923,-0.911374,2.484948,-8.629661,-3.327275,-1.928844,-2.002112,4.647420,-6.475609,2.031835,-8.368769,-8.642784,1.411497,8.542280,-4.384740,-9.812715,-2.860062,-6.652400,3.309665,-2.684518,-9.971492,7.528879,-9.501567,6.391865,-0.067122,2.937911,-4.992766,0.957930,5.201600,4.083147,9.368088,-6.293831,-7.709476,5.546012,5.904286,8.742268,-1.179958,-7.218194,-2.444649,-5.909030,-0.328916,7.226834,2.129640,-4.105312,5.295773,5.833781,-2.725542,-1.603711,-4.284581,-3.247591,3.634846,3.849017,-9.171545,-6.381929,-1.243720,-8.193020,-7.866177,9.991503,-0.445882,-9.405968,4.422399,-0.347547,5.530998,-7.463726,4.400193,0.116065,-5.030639,-8.755901,-6.353028,7.165907,3.774923,-6.408114,4.104263,-9.651328,4.023878,-6.829863,-7.628958,-7.936610,4.729016,0.774070,-1.571085,-0.960828,3.757161,3.264852,9.099826,-0.912118,-3.525885,5.630437,-1.172373,-9.508720,-1.891520,-9.333709,4.612765,4.814222,3.142024,7.331774,4.701931,3.451288,3.882183,6.457693,8.078125,6.981817,-9.366857,-0.094270,-5.628027,-0.509275,0.072826,5.355757,-2.222255,5.359505,3.267806,6.347471,-7.030872,-4.661419,8.979917,8.910937,6.560061,1.914567,6.168092,1.863660,-7.795479,-6.576860,-8.700115,-1.745206,-9.198282,0.599473,1.377508,2.999460,9.830649,4.948628,9.876528,2.952052,4.441744,-7.654599,-6.543041,0.591267,6.789241,-9.789265,1.551968,-9.867787,4.535871,-9.850828,-0.079812,-3.222201,7.012014,2.824268,-7.689800,4.439336,4.509210,-9.260203,2.194210,-8.196774,-8.253228,5.239185,3.786036,8.373676,4.803930,9.150154,5.028923,7.758159,7.714040,0.091227,4.907720,-8.397354,-5.507509,2.805867,-8.672698,9.038913,-3.836719,-3.475631,-9.677355,-2.878176,3.156494,-2.181593,-8.316390,3.846900,-3.325077,3.664378,-8.112409,-1.771331,1.493945,-1.964084,0.922624,-2.135454,-1.105841,8.864631,-7.608371,-8.144284,-4.064289,3.342207,-4.264056,-8.905995,2.412111,9.484221,2.628496,7.688488,8.890244,-7.618949,1.717666,-3.731635,-2.445176,-8.789395,-0.612229,-1.554259,8.588688,2.398443,6.173711,-7.508641,0.944851,-8.922779,4.704824,8.744833,9.110282,6.803911,-3.767553,8.874748,-1.210843,-3.954323,-2.454916,1.436474,-3.066896,-1.335177,-6.622305,-2.925760,-2.202395,7.974280,-6.641071,-9.370224,-8.403363,-5.227084,0.949599,7.028619,-6.036145,-3.385537,8.859381,-3.976358,-9.884391,5.605112,-1.227544,5.574375,-4.329967,-3.970059,9.142900,-0.733057,9.919979,2.229196,-5.478126,-2.391642,-2.852219,-6.111064,-1.800945,0.057923,6.734768,6.591776,-4.294207,-4.201495,3.501765,-3.006921,5.926430,1.907461,6.153363,0.246190,0.120819,-9.792991,1.105442,6.346666,-0.109444,-1.855506,5.662464,8.184756,-6.712412,-6.382950,-8.337340,9.628980,-7.750525,-2.524673,2.907055,1.977102,0.084476,-5.319643,-7.839036,-6.480534,-3.208972,-0.433124,7.319231,4.345305,6.964204,1.911782,-6.327706,2.938123,1.048144,3.753071,-0.801062,-3.411467,-8.359625,-4.246550,-3.218442,8.419442,0.647303,1.267560,4.150626,5.223862,-0.283959,8.649431,7.947088,4.176732,-3.762994,7.424175,-5.137109,3.998143,-6.299994,7.315880,-3.725467,8.879665,0.053932,-5.269683,1.132793,4.685188,6.454659,2.653444,-2.397348,1.126326,4.855956,7.358620,-4.006294,-4.704841,-9.880539,-6.946246,3.291673,-9.822808,-3.081489,1.458913,-7.934666,4.879411,2.437877,-4.811765,-8.741058,6.119936,-6.819922,5.462800,6.941158,5.524718,1.037730,-0.445517,5.159546,6.211938,-5.925384,-6.685315,-5.615539,-2.701855,-1.928350,8.155281,-3.931972,-8.219610,4.360736,-9.349071,7.862200,-6.989204,0.047907,5.180089,4.419264,-6.236113,-0.795140,3.099360,-3.422132,-7.393141,-0.642492,5.585542,-1.117176,-6.833299,4.899934,-1.625552,-2.209793,-2.317632,-3.281014,5.892410,-6.043565,0.574962,-1.764006,0.727225,-9.178960,5.761810,2.527237,7.448146,-0.689872,9.392587,-6.024159,-8.058821,-6.084988,-0.581757,7.506398,3.145748,3.566857,-9.024039,5.400414,3.485679,4.899862,-3.938912,4.145871,0.007844,7.721271,-7.507928,-9.515154,4.090756,2.705680,5.566865,2.309944,-0.588367,6.633256,-7.940382,7.135906,-4.110025,-3.713305,5.494006,0.667957,7.444685,-3.038412,-9.853767,-9.359291,3.729890,-0.544068,-9.132316,5.186753,-6.176876,9.293522,0.481272,-5.802707,-8.689212,7.836803,1.196789,-9.675623,8.360367,-9.176956,9.607471,1.663741,-4.975605,-8.022732,9.659829,9.023998,-4.814145,-4.048642,6.971138,-3.303558,5.429930,-8.693473,-1.949234,7.269517,2.236574,0.468702,1.927536,4.688478,-5.312282,-9.128774,-9.438886,-5.722133,9.625373,-1.773329,4.855498,-6.949660,-7.598319,3.405011,8.533913,4.837567,-0.794188,2.432418,6.130279,0.683833,-3.318938,-2.664043,-9.168958,-2.525478,1.663122,-5.512146,2.272094,-3.696372,0.627935,-0.947560,-9.746779,2.063846,-2.220317,-2.029010,-4.334898,-4.082746,-4.107947,3.494982,1.779011,-3.152314,-5.451092,3.545882,1.283551,-9.649389,-3.148908,0.949638,-7.314514,5.874573,4.393551,-5.134835,-0.624025,8.819975,8.575254,2.705970,-6.548062,-7.547582,-9.557570,-9.941915,5.117982,8.964868,9.696921,-3.299844,3.752250,-5.486572,-1.638828,-6.834483,4.273753,4.043100,-0.379104,7.574762,-6.368838,-0.286124,-1.775296,-4.430955,5.391553,3.835724,-1.931938,-6.360076,6.958344,-9.163897], dtype = "float32")#candidate|15289|(1950,)|const|float32
call_15287 = relay.TupleGetItem(func_14025_call(relay.reshape(const_15288.astype('int64'), [2002,]), relay.reshape(const_15289.astype('float32'), [1950,]), ), 4)
call_15290 = relay.TupleGetItem(func_14028_call(relay.reshape(const_15288.astype('int64'), [2002,]), relay.reshape(const_15289.astype('float32'), [1950,]), ), 4)
output = relay.Tuple([call_15262,call_15287,const_15288,const_15289,])
output2 = relay.Tuple([call_15263,call_15290,const_15288,const_15289,])
func_15292 = relay.Function([], output)
mod['func_15292'] = func_15292
mod = relay.transform.InferType()(mod)
mutated_mod['func_15292'] = func_15292
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15292_call = mutated_mod.get_global_var('func_15292')
call_15293 = func_15292_call()
output = call_15293
func_15294 = relay.Function([], output)
mutated_mod['func_15294'] = func_15294
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13388_call = mod.get_global_var('func_13388')
func_13390_call = mutated_mod.get_global_var('func_13390')
call_15305 = func_13388_call()
call_15306 = func_13388_call()
func_5400_call = mod.get_global_var('func_5400')
func_5402_call = mutated_mod.get_global_var('func_5402')
call_15313 = relay.TupleGetItem(func_5400_call(), 2)
call_15314 = relay.TupleGetItem(func_5402_call(), 2)
func_14879_call = mod.get_global_var('func_14879')
func_14881_call = mutated_mod.get_global_var('func_14881')
call_15319 = relay.TupleGetItem(func_14879_call(), 0)
call_15320 = relay.TupleGetItem(func_14881_call(), 0)
output = relay.Tuple([call_15305,call_15313,call_15319,])
output2 = relay.Tuple([call_15306,call_15314,call_15320,])
func_15329 = relay.Function([], output)
mod['func_15329'] = func_15329
mod = relay.transform.InferType()(mod)
output = func_15329()
func_15330 = relay.Function([], output)
mutated_mod['func_15330'] = func_15330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11035_call = mod.get_global_var('func_11035')
func_11036_call = mutated_mod.get_global_var('func_11036')
call_15341 = func_11035_call()
call_15342 = func_11035_call()
var_15355 = relay.var("var_15355", dtype = "float32", shape = (5, 5, 6))#candidate|15355|(5, 5, 6)|var|float32
bop_15356 = relay.greater_equal(call_15341.astype('bool'), var_15355.astype('bool')) # shape=(5, 5, 6)
bop_15359 = relay.greater_equal(call_15342.astype('bool'), var_15355.astype('bool')) # shape=(5, 5, 6)
func_8055_call = mod.get_global_var('func_8055')
func_8057_call = mutated_mod.get_global_var('func_8057')
call_15363 = relay.TupleGetItem(func_8055_call(), 0)
call_15364 = relay.TupleGetItem(func_8057_call(), 0)
output = relay.Tuple([bop_15356,call_15363,])
output2 = relay.Tuple([bop_15359,call_15364,])
func_15368 = relay.Function([var_15355,], output)
mod['func_15368'] = func_15368
mod = relay.transform.InferType()(mod)
mutated_mod['func_15368'] = func_15368
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15369 = relay.var("var_15369", dtype = "float32", shape = (5, 5, 6))#candidate|15369|(5, 5, 6)|var|float32
func_15368_call = mutated_mod.get_global_var('func_15368')
call_15370 = func_15368_call(var_15369)
output = call_15370
func_15371 = relay.Function([var_15369], output)
mutated_mod['func_15371'] = func_15371
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7223_call = mod.get_global_var('func_7223')
func_7224_call = mutated_mod.get_global_var('func_7224')
call_15388 = relay.TupleGetItem(func_7223_call(), 0)
call_15389 = relay.TupleGetItem(func_7224_call(), 0)
func_10633_call = mod.get_global_var('func_10633')
func_10636_call = mutated_mod.get_global_var('func_10636')
const_15404 = relay.const([7.813342,-9.806752,8.019968,-2.409915,0.702156,5.317647,-1.401113,1.668868,-7.416257,-6.749633,0.790312,9.669525,0.839603,5.283404,7.805022,1.945997,1.753003,4.660205,-0.417828,-7.011138,-0.023654,5.108455,-5.043252,-9.216200,-5.531988,-0.736079,-1.402367,7.236051,-6.942874,2.093411,-9.915241,-8.137593,-4.040815,-3.135428,-6.583192,-0.640821,-0.174948,7.616974,-1.792255,5.376353,-5.111211,2.856098,-5.867575,5.644642,2.674904,-3.936401,3.460101,1.444737,-8.841508,-1.645268,-2.167502,-4.782063,7.424447,3.134118,2.328399,-9.384756,4.940391,0.782439,-4.730574,-0.722772], dtype = "float32")#candidate|15404|(60,)|const|float32
call_15403 = relay.TupleGetItem(func_10633_call(relay.reshape(const_15404.astype('float32'), [1, 6, 10])), 0)
call_15405 = relay.TupleGetItem(func_10636_call(relay.reshape(const_15404.astype('float32'), [1, 6, 10])), 0)
func_7671_call = mod.get_global_var('func_7671')
func_7672_call = mutated_mod.get_global_var('func_7672')
call_15414 = relay.TupleGetItem(func_7671_call(), 0)
call_15415 = relay.TupleGetItem(func_7672_call(), 0)
output = relay.Tuple([call_15388,call_15403,const_15404,call_15414,])
output2 = relay.Tuple([call_15389,call_15405,const_15404,call_15415,])
func_15416 = relay.Function([], output)
mod['func_15416'] = func_15416
mod = relay.transform.InferType()(mod)
mutated_mod['func_15416'] = func_15416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15416_call = mutated_mod.get_global_var('func_15416')
call_15417 = func_15416_call()
output = call_15417
func_15418 = relay.Function([], output)
mutated_mod['func_15418'] = func_15418
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10123_call = mod.get_global_var('func_10123')
func_10124_call = mutated_mod.get_global_var('func_10124')
call_15507 = relay.TupleGetItem(func_10123_call(), 1)
call_15508 = relay.TupleGetItem(func_10124_call(), 1)
uop_15511 = relay.exp(call_15507.astype('float64')) # shape=(8, 504, 12)
uop_15513 = relay.exp(call_15508.astype('float64')) # shape=(8, 504, 12)
func_12248_call = mod.get_global_var('func_12248')
func_12250_call = mutated_mod.get_global_var('func_12250')
call_15520 = relay.TupleGetItem(func_12248_call(), 0)
call_15521 = relay.TupleGetItem(func_12250_call(), 0)
output = relay.Tuple([uop_15511,call_15520,])
output2 = relay.Tuple([uop_15513,call_15521,])
func_15526 = relay.Function([], output)
mod['func_15526'] = func_15526
mod = relay.transform.InferType()(mod)
mutated_mod['func_15526'] = func_15526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15526_call = mutated_mod.get_global_var('func_15526')
call_15527 = func_15526_call()
output = call_15527
func_15528 = relay.Function([], output)
mutated_mod['func_15528'] = func_15528
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15546 = relay.var("var_15546", dtype = "uint32", shape = ())#candidate|15546|()|var|uint32
var_15547 = relay.var("var_15547", dtype = "uint32", shape = (16, 11, 4))#candidate|15547|(16, 11, 4)|var|uint32
bop_15548 = relay.equal(var_15546.astype('bool'), var_15547.astype('bool')) # shape=(16, 11, 4)
uop_15562 = relay.log(bop_15548.astype('float64')) # shape=(16, 11, 4)
uop_15566 = relay.asinh(uop_15562.astype('float32')) # shape=(16, 11, 4)
var_15569 = relay.var("var_15569", dtype = "float32", shape = (16, 11, 4))#candidate|15569|(16, 11, 4)|var|float32
bop_15570 = relay.floor_divide(uop_15566.astype('float32'), relay.reshape(var_15569.astype('float32'), relay.shape_of(uop_15566))) # shape=(16, 11, 4)
uop_15573 = relay.cosh(uop_15566.astype('float64')) # shape=(16, 11, 4)
output = relay.Tuple([bop_15570,uop_15573,])
output2 = relay.Tuple([bop_15570,uop_15573,])
func_15592 = relay.Function([var_15546,var_15547,var_15569,], output)
mod['func_15592'] = func_15592
mod = relay.transform.InferType()(mod)
var_15593 = relay.var("var_15593", dtype = "uint32", shape = ())#candidate|15593|()|var|uint32
var_15594 = relay.var("var_15594", dtype = "uint32", shape = (16, 11, 4))#candidate|15594|(16, 11, 4)|var|uint32
var_15595 = relay.var("var_15595", dtype = "float32", shape = (16, 11, 4))#candidate|15595|(16, 11, 4)|var|float32
output = func_15592(var_15593,var_15594,var_15595,)
func_15596 = relay.Function([var_15593,var_15594,var_15595,], output)
mutated_mod['func_15596'] = func_15596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12479_call = mod.get_global_var('func_12479')
func_12480_call = mutated_mod.get_global_var('func_12480')
call_15616 = relay.TupleGetItem(func_12479_call(), 0)
call_15617 = relay.TupleGetItem(func_12480_call(), 0)
func_14773_call = mod.get_global_var('func_14773')
func_14776_call = mutated_mod.get_global_var('func_14776')
var_15626 = relay.var("var_15626", dtype = "uint64", shape = (16, 80))#candidate|15626|(16, 80)|var|uint64
call_15625 = relay.TupleGetItem(func_14773_call(relay.reshape(var_15626.astype('uint64'), [1280,])), 1)
call_15627 = relay.TupleGetItem(func_14776_call(relay.reshape(var_15626.astype('uint64'), [1280,])), 1)
uop_15637 = relay.exp(var_15626.astype('float32')) # shape=(16, 80)
output = relay.Tuple([call_15616,call_15625,uop_15637,])
output2 = relay.Tuple([call_15617,call_15627,uop_15637,])
F = relay.Function([var_15626,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_15626,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
