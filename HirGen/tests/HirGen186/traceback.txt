==========mod==========
#[version = "0.0.5"]
def @func_5247() -> (Tensor[(5, 8, 13), float32],) {
  %0 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %2 = atanh(%1) /* ty=Tensor[(5, 8, 13), float32] */;
  (%2,)
}

def @func_4344(%var_4240: Tensor[(9, 6, 11), float32], %var_4241: Tensor[(9, 6, 11), float32], %var_4250: Tensor[(104), bool], %var_4284: Tensor[(520), int8], %var_4329: Tensor[(156), float64]) -> (Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) {
  %3 = cast(%var_4250, dtype="bool") /* ty=Tensor[(104), bool] */;
  %4 = cast(%var_4250, dtype="bool") /* ty=Tensor[(104), bool] */;
  %5 = reshape(%3, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %6 = reshape(%4, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %7 = cast(%var_4241, dtype="float32") /* ty=Tensor[(9, 6, 11), float32] */;
  %8 = shape_of(%var_4240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_4240, dtype="float32") /* ty=Tensor[(9, 6, 11), float32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %11 = power(%9, %10) /* ty=Tensor[(9, 6, 11), float32] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
  %13 = acosh(%12) /* ty=Tensor[(9, 6, 11), float64] */;
  %14 = cast(%var_4240, dtype="int32") /* ty=Tensor[(9, 6, 11), int32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="int32") /* ty=Tensor[(9, 6, 11), int32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %18 = cast(%var_4284, dtype="int8") /* ty=Tensor[(520), int8] */;
  %19 = reshape(%18, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %20 = @func_3081(%19) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 6, 11), float64] */, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
  %22 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%13, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %26 = cast(%var_4329, dtype="float64") /* ty=Tensor[(156), float64] */;
  %27 = reshape(%25, newshape=[]) /* ty=int8 */;
  %28 = reshape(%26, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %29 = @func_2722(%27, %28) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
  %30 = @func_1101(%5, %6) /* ty=Tensor[(13, 4, 2), bool] */;
  %31 = minimum(%16, %17) /* ty=Tensor[(9, 6, 11), int32] */;
  %32 = %20.1;
  %33 = equal(%23, %24) /* ty=Tensor[(9, 6, 11), bool] */;
  %34 = %29.2;
  (%30, %var_4250, %31, %32, %var_4284, %33, %34, meta[relay.Constant][1] /* ty=int8 */, %var_4329)
}

def @func_4594(%var_4587: Tensor[(3, 8, 9), uint8], %var_4588: Tensor[(3, 8, 9), uint8]) -> (Tensor[(3, 8, 9), bool],) {
  %35 = cast(%var_4588, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %36 = shape_of(%var_4587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_4587, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = greater(%37, %38) /* ty=Tensor[(3, 8, 9), bool] */;
  (%39,)
}

def @func_8309() -> (Tensor[(5, 8, 13), float64],) {
  %40 = @func_6046() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %41 = %40.0;
  (%41,)
}

def @func_1591() -> Tensor[(5, 8, 13), float64] {
  %42 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %43 = %42.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  asinh(%44) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_2248() -> (Tensor[(5, 8, 13), float64],) {
  %45 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
  (%45,)
}

def @func_4630(%var_4605: Tensor[(12, 14, 8), uint8], %var_4606: Tensor[(12, 14, 8), uint8]) -> (Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) {
  %46 = cast(%var_4606, dtype="uint8") /* ty=Tensor[(12, 14, 8), uint8] */;
  %47 = shape_of(%var_4605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_4605, dtype="uint8") /* ty=Tensor[(12, 14, 8), uint8] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %51 = reshape(%50, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float32] */;
  %52 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %53 = logical_xor(%48, %49) /* ty=Tensor[(12, 14, 8), uint8] */;
  %54 = @func_2448(%51) /* ty=Tensor[(5, 8, 13), int8] */;
  %55 = %52.0;
  (%53, %54, meta[relay.Constant][2] /* ty=Tensor[(520), float32] */, %55)
}

def @func_5166() -> Tensor[(5, 8, 13), float32] {
  %56 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %56.0
}

def @func_6615(%var_6591: int8, %var_6592: Tensor[(8, 78), int8], %var_6594: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(8, 78), float32], Tensor[(5, 8, 13), float32]) {
  %57 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %58 = cast(%var_6591, dtype="int8") /* ty=int8 */;
  %59 = cast(%var_6592, dtype="int8") /* ty=Tensor[(8, 78), int8] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %61 = cast(%var_6594, dtype="float32") /* ty=Tensor[(110), float32] */;
  %62 = reshape(%58, newshape=[]) /* ty=int8 */;
  %63 = reshape(%59, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
  %64 = reshape(%60, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %65 = reshape(%61, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %66 = @func_860(%62, %63, %64, %65) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
  %67 = cast(%var_6592, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
  %68 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %69 = %57.0;
  %70 = %66.3;
  %71 = rsqrt(%67) /* ty=Tensor[(8, 78), float32] */;
  %72 = %68.0;
  (%69, %70, %var_6591, meta[relay.Constant][3] /* ty=Tensor[(156), float64] */, %var_6594, %71, %72)
}

def @func_1940() -> (Tensor[(5, 8, 13), int8],) {
  %73 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  (%73,)
}

def @func_6932() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %74 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %75 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %76 = %74.0;
  %77 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
  %78 = %75.1;
  (%76, %77, %78)
}

def @func_2415(%var_2404: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) {
  %79 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %80 = cast(%var_2404, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 8, 13), float64] */, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %85 = shape_of(%var_2404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_2404, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = bitwise_and(%82, %83) /* ty=Tensor[(5, 8, 13), uint16] */;
  %89 = less(%86, %87) /* ty=Tensor[(5, 8, 13), bool] */;
  (%88, %89)
}

def @func_2308() -> (Tensor[(5, 8, 13), float64],) {
  %90 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %91 = %90.0;
  (%91,)
}

def @func_7372(%var_7363: Tensor[(104), bool], %var_7364: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(6, 99), float32], Tensor[(104), bool], Tensor[(156), float64]) {
  %92 = @func_5748() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 99), float32] */, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 99), float32] */, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %95 = cast(%var_7363, dtype="bool") /* ty=Tensor[(104), bool] */;
  %96 = @func_5683() /* ty=Tensor[(5, 8, 13), bool] */;
  %97 = cast(%96, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %98 = cast(%var_7364, dtype="float64") /* ty=Tensor[(156), float64] */;
  %99 = reshape(%93, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float32] */;
  %100 = reshape(%94, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float32] */;
  %101 = reshape(%95, newshape=[104]) /* ty=Tensor[(104), bool] */;
  %102 = reshape(%97, newshape=[520]) /* ty=Tensor[(520), int8] */;
  %103 = reshape(%98, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %104 = @func_4344(%99, %100, %101, %102, %103) /* ty=(Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) */;
  %105 = %92.1;
  %106 = %104.4;
  (%105, %96, %106, meta[relay.Constant][5] /* ty=Tensor[(6, 99), float32] */, %var_7363, %var_7364)
}

def @func_5748() -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) {
  %107 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
  %108 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %110 = %107.3;
  %111 = cosh(%109) /* ty=Tensor[(5, 8, 13), float64] */;
  (%110, %111)
}

def @func_3401() -> Tensor[(5, 8, 13), float64] {
  %112 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %112.0
}

def @func_2932() -> (Tensor[(5, 8, 13), float64],) {
  %113 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %114 = %113.0;
  (%114,)
}

def @func_8400() -> (Tensor[(5, 8, 13), float32],) {
  %115 = @func_6002() /* ty=Tensor[(5, 8, 13), float32] */;
  (%115,)
}

def @func_5572() -> (Tensor[(5, 8, 13), float64],) {
  %116 = @func_3189() /* ty=Tensor[(5, 8, 13), float64] */;
  (%116,)
}

def @func_6642() -> Tensor[(5, 8, 13), float64] {
  %117 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %117.0
}

def @func_6002() -> Tensor[(5, 8, 13), float32] {
  %118 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %118.1
}

def @func_3169(%var_3120: Tensor[(5, 8, 13), float64], %var_3149: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), uint16]) {
  %119 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %120 = %119.0;
  %121 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %125 = cast(%120, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %126 = reshape(%125, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %127 = @func_2415(%126) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
  %128 = cast(%var_3149, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %129 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%120, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %132 = minimum(%123, %124) /* ty=Tensor[(5, 8, 13), uint16] */;
  %133 = %127.1;
  %134 = maximum(%130, %131) /* ty=Tensor[(5, 8, 13), uint16] */;
  (%132, %133, %134)
}

def @func_4160() -> Tensor[(5, 8, 13), float64] {
  %135 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  atan(%136) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_3363(%var_3358: Tensor[(2, 7, 2), float64]) -> Tensor[(2, 7, 2), float64] {
  %137 = cast(%var_3358, dtype="float64") /* ty=Tensor[(2, 7, 2), float64] */;
  sqrt(%137) /* ty=Tensor[(2, 7, 2), float64] */
}

def @func_2922(%var_2899: Tensor[(12, 14, 2), int32], %var_2900: Tensor[(12, 14, 2), int32]) -> (Tensor[(12, 14, 2), bool], Tensor[(22, 5), int8], Tensor[(110), uint32], Tensor[(5, 8, 13), float64], Tensor[(12, 14, 2), float32]) {
  %138 = cast(%var_2900, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
  %139 = shape_of(%var_2899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_2899, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %143 = reshape(%142, newshape=[110]) /* ty=Tensor[(110), uint32] */;
  %144 = @func_2860(%143) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
  %145 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %146 = cast(%var_2900, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
  %147 = not_equal(%140, %141) /* ty=Tensor[(12, 14, 2), bool] */;
  %148 = %144.1;
  %149 = %145.0;
  %150 = log10(%146) /* ty=Tensor[(12, 14, 2), float32] */;
  (%147, %148, meta[relay.Constant][6] /* ty=Tensor[(110), uint32] */, %149, %150)
}

def @func_7721() -> (Tensor[(5, 8, 13), float64],) {
  %151 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %152 = %151.0;
  (%152,)
}

def @func_5088(%var_5079: Tensor[(5, 8, 13), float64]) -> Tensor[(5, 8, 13), float32] {
  %153 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %154 = cast(%var_5079, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%156, %157) /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_1839() -> Tensor[(5, 8, 13), float64] {
  %158 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %159 = %158.1;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  sqrt(%160) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_7765() -> (Tensor[(5, 8, 13), int8],) {
  %161 = @func_1940() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %162 = %161.0;
  (%162,)
}

def @func_932(%var_916: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  %163 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %166 = cast(%var_916, dtype="float32") /* ty=Tensor[(110), float32] */;
  %167 = reshape(%166, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %168 = @func_54(%167) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %169 = tan(%165) /* ty=Tensor[(5, 8, 13), float32] */;
  %170 = %168.1;
  (%169, %170, %var_916)
}

def @func_5557() -> Tensor[(5, 8, 13), float32] {
  %171 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %171.0
}

def @func_4947() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %172 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %173 = @func_4160() /* ty=Tensor[(5, 8, 13), float64] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_5865(%var_5827: int8, %var_5828: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) {
  %175 = @func_2308() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %176 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %177 = @func_5247() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %178 = cast(%var_5827, dtype="int8") /* ty=int8 */;
  %179 = cast(%var_5828, dtype="float64") /* ty=Tensor[(156), float64] */;
  %180 = reshape(%178, newshape=[]) /* ty=int8 */;
  %181 = reshape(%179, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %182 = @func_2722(%180, %181) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(28, 1), float64] */, dtype="float64") /* ty=Tensor[(28, 1), float64] */;
  %184 = reshape(%183, newshape=[2, 7, 2]) /* ty=Tensor[(2, 7, 2), float64] */;
  %185 = %175.0;
  %186 = %176.0;
  %187 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %188 = %177.0;
  %189 = %182.1;
  %190 = @func_3519() /* ty=Tensor[(5, 8, 13), int8] */;
  %191 = @func_3363(%184) /* ty=Tensor[(2, 7, 2), float64] */;
  (%185, %186, %187, %188, %189, %var_5827, %var_5828, %190, %191, meta[relay.Constant][7] /* ty=Tensor[(28, 1), float64] */)
}

def @func_7832() -> Tensor[(5, 8, 13), float32] {
  @func_7128() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_5919() -> Tensor[(5, 8, 13), float32] {
  %192 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  acosh(%193) /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_3788() -> (Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) {
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 10, 6), int32] */, dtype="bool") /* ty=Tensor[(16, 10, 6), bool] */;
  %195 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="bool") /* ty=Tensor[(16, 10, 6), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 10, 6), int32] */, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %199 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %202 = less(%196, %197) /* ty=Tensor[(16, 10, 6), bool] */;
  %203 = power(%200, %201) /* ty=Tensor[(16, 10, 6), float64] */;
  (%202, %203)
}

def @func_1924() -> (Tensor[(5, 8, 13), float64],) {
  %204 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
  (%204,)
}

def @func_2749() -> (Tensor[(5, 8, 13), float32],) {
  %205 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %206 = %205.1;
  (%206,)
}

def @func_2231() -> (Tensor[(5, 8, 13), int8],) {
  %207 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %208 = %207.0;
  (%208,)
}

def @func_6295(%var_6236: Tensor[(6, 4, 15), uint32]) -> (Tensor[(6, 4, 15), uint32], Tensor[(16, 10, 6), bool], Tensor[(384), uint8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
  %209 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %210 = cast(%var_6236, dtype="uint32") /* ty=Tensor[(6, 4, 15), uint32] */;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), uint8] */, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %212 = reshape(%211, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), uint8] */;
  %213 = @func_5766(%212) /* ty=(Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) */;
  %214 = @func_6046() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %217 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %218 = minimum(%209, %210) /* ty=Tensor[(6, 4, 15), uint32] */;
  %219 = %213.1;
  %220 = log(%216) /* ty=Tensor[(5, 8, 13), float32] */;
  %221 = %217.1;
  (%218, %219, meta[relay.Constant][11] /* ty=Tensor[(384), uint8] */, %220, %221)
}

def @func_6360(%var_6352: Tensor[(336), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(7, 3, 16), float64], Tensor[(336), float64], Tensor[(5, 8, 13), float64]) {
  %222 = @func_3042() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %223 = cast(%var_6352, dtype="float64") /* ty=Tensor[(336), float64] */;
  %224 = reshape(%223, newshape=[7, 3, 16]) /* ty=Tensor[(7, 3, 16), float64] */;
  %225 = %222.1;
  %226 = cast(%225, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %227 = reshape(%226, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %228 = @func_3081(%227) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
  %229 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %230 = @func_4893(%224) /* ty=Tensor[(7, 3, 16), float64] */;
  %231 = %228.0;
  (%229, %225, %230, %var_6352, %231)
}

def @func_3042() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %232 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %233 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
  %234 = %232.0;
  %235 = %233.1;
  (%234, %235)
}

def @func_6707() -> Tensor[(5, 8, 13), float64] {
  @func_3401() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_1234() -> (Tensor[(5, 8, 13), float64],) {
  %236 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %238 = log2(%237) /* ty=Tensor[(5, 8, 13), float64] */;
  (%238,)
}

def @func_2722(%var_2692: int8, %var_2694: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) {
  %239 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %240 = cast(%var_2692, dtype="int8") /* ty=int8 */;
  %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), int8] */, dtype="int8") /* ty=Tensor[(624), int8] */;
  %242 = cast(%var_2694, dtype="float64") /* ty=Tensor[(156), float64] */;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %244 = reshape(%240, newshape=[]) /* ty=int8 */;
  %245 = reshape(%241, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
  %246 = reshape(%242, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %247 = reshape(%243, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %248 = @func_860(%244, %245, %246, %247) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
  %249 = %239.0;
  %250 = cast(%249, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %251 = reshape(%250, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %252 = @func_1447(%251) /* ty=Tensor[(5, 8, 13), bool] */;
  %253 = cast(%var_2692, dtype="float32") /* ty=float32 */;
  %254 = cast(%252, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %255 = %248.1;
  %256 = multiply(%253, %254) /* ty=Tensor[(5, 8, 13), float32] */;
  (%249, %255, meta[relay.Constant][12] /* ty=Tensor[(624), int8] */, %var_2694, meta[relay.Constant][13] /* ty=Tensor[(110), float32] */, %256)
}

def @func_1641() -> (Tensor[(5, 8, 13), int8],) {
  %257 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %258 = %257.1;
  (%258,)
}

def @func_6527() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %259 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %260 = @func_6433() /* ty=Tensor[(5, 8, 13), float64] */;
  %261 = %259.1;
  (%260, %261)
}

def @func_6131(%var_6113: Tensor[(1, 1, 1), float32], %var_6114: Tensor[(15, 1, 4), float32]) -> (Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) {
  %262 = cast(%var_6113, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
  %263 = cast(%var_6114, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %264 = cast(%var_6113, dtype="float64") /* ty=Tensor[(1, 1, 1), float64] */;
  %265 = floor_divide(%262, %263) /* ty=Tensor[(15, 1, 4), float32] */;
  %266 = acos(%264) /* ty=Tensor[(1, 1, 1), float64] */;
  (%265, %266)
}

def @func_3878() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %267 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %268 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %269 = %267.0;
  %270 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %271 = %268.0;
  (%269, %270, %271)
}

def @func_372(%var_347: Tensor[(13, 6, 2), float64]) -> Tensor[(13, 6, 2), float64] {
  %272 = cast(%var_347, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
  %273 = cosh(%272) /* ty=Tensor[(13, 6, 2), float64] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
  exp(%274) /* ty=Tensor[(13, 6, 2), float64] */
}

def @func_6433() -> Tensor[(5, 8, 13), float64] {
  %275 = @func_5232() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %275.0
}

def @func_7599(%var_7536: int16, %var_7537: Tensor[(1, 6, 4), int16]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(6, 6, 4), bool]) {
  %276 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %277 = cast(meta[relay.Constant][14] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %278 = reshape(%277, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %279 = @func_54(%278) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %280 = @func_5339() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %281 = cast(%var_7536, dtype="bool") /* ty=bool */;
  %282 = cast(%var_7537, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %283 = not_equal(%281, %282) /* ty=Tensor[(1, 6, 4), bool] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %285 = sin(%284) /* ty=Tensor[(1, 6, 4), float32] */;
  %286 = cast(%285, dtype="int16") /* ty=Tensor[(1, 6, 4), int16] */;
  %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 6, 4), float32] */, dtype="int16") /* ty=Tensor[(6, 6, 4), int16] */;
  %288 = bitwise_xor(%286, %287) /* ty=Tensor[(6, 6, 4), int16] */;
  %289 = cast(%288, dtype="bool") /* ty=Tensor[(6, 6, 4), bool] */;
  %290 = cast(%283, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %291 = %276.1;
  %292 = %279.0;
  %293 = @func_3778() /* ty=Tensor[(5, 8, 13), float64] */;
  %294 = @func_5557() /* ty=Tensor[(5, 8, 13), float32] */;
  %295 = %280.0;
  %296 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %297 = logical_or(%289, %290) /* ty=Tensor[(6, 6, 4), bool] */;
  (%291, %292, meta[relay.Constant][14] /* ty=Tensor[(110), float32] */, %293, %294, %295, %296, %297)
}

def @func_2860(%var_2857: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) {
  %298 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %299 = cast(%var_2857, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %300 = cast(%var_2857, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %301 = reshape(%299, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %302 = reshape(%300, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
  %303 = @func_2608(%301, %302) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) */;
  %304 = %298.0;
  %305 = %303.2;
  (%304, %305, %var_2857)
}

def @func_147(%var_125: int32, %var_126: Tensor[(11, 16, 8), int32]) -> (Tensor[(11, 16, 8), int32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  %306 = cast(%var_125, dtype="int32") /* ty=int32 */;
  %307 = cast(%var_126, dtype="int32") /* ty=Tensor[(11, 16, 8), int32] */;
  %308 = cast(meta[relay.Constant][16] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %309 = reshape(%308, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %310 = @func_54(%309) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %311 = left_shift(%306, %307) /* ty=Tensor[(11, 16, 8), int32] */;
  %312 = %310.1;
  (%311, %312, meta[relay.Constant][16] /* ty=Tensor[(110), float32] */)
}

def @func_4014(%var_3995: Tensor[(240, 4), float32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) {
  %313 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %314 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %315 = cast(%var_3995, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %316 = reshape(%315, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
  %317 = @func_557(%316) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %318 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 1440), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1440), uint64] */;
  %319 = reshape(%318, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint64] */;
  %320 = @func_1530(%319) /* ty=(Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) */;
  %321 = %313.0;
  %322 = %314.1;
  %323 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %324 = %317.0;
  %325 = %320.0;
  (%321, %322, %323, %324, %var_3995, %325, meta[relay.Constant][17] /* ty=Tensor[(1, 1440), uint64] */)
}

def @func_2183(%var_2174: Tensor[(12, 11, 5), float64], %var_2175: Tensor[(12, 11, 5), float64]) -> (Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) {
  %326 = cast(%var_2175, dtype="float64") /* ty=Tensor[(12, 11, 5), float64] */;
  %327 = shape_of(%var_2174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_2174, dtype="float64") /* ty=Tensor[(12, 11, 5), float64] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %330 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %331 = divide(%328, %329) /* ty=Tensor[(12, 11, 5), float64] */;
  %332 = %330.0;
  (%331, %332)
}

def @func_2274() -> Tensor[(5, 8, 13), float64] {
  %333 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  sin(%335) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_5541(%var_5531: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), float64] {
  %336 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %337 = %336.0;
  %338 = cast(%var_5531, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%340, %341) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_5683() -> Tensor[(5, 8, 13), bool] {
  %342 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %343 = %342.1;
  %344 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %346 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%343, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%347, %348) /* ty=Tensor[(5, 8, 13), bool] */
}

def @func_7336() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %349 = @func_6642() /* ty=Tensor[(5, 8, 13), float64] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %351 = reshape(%350, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %352 = @func_2415(%351) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
  %353 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
  %354 = %352.1;
  (%349, %353, %354)
}

def @func_4235() -> (Tensor[(5, 8, 13), bool], Tensor[(13, 4, 2), bool], Tensor[(104), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %355 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %356 = cast(meta[relay.Constant][18] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
  %357 = cast(meta[relay.Constant][18] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
  %358 = reshape(%356, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %359 = reshape(%357, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %360 = cast(meta[relay.Constant][18] /* ty=Tensor[(104), bool] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %361 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %362 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %363 = %355.2;
  %364 = @func_1101(%358, %359) /* ty=Tensor[(13, 4, 2), bool] */;
  %365 = log10(%360) /* ty=Tensor[(104), float32] */;
  %366 = %361.0;
  %367 = %362.1;
  (%363, %364, %365, %366, %367)
}

def @func_2608(%var_2523: Tensor[(22, 5), uint32], %var_2562: Tensor[(22, 5), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) {
  %368 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %369 = cast(%var_2562, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %370 = shape_of(%var_2523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %371 = cast(%var_2523, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %373 = cast(%var_2523, dtype="uint32") /* ty=Tensor[(22, 5), uint32] */;
  %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(1540), uint32] */, dtype="uint32") /* ty=Tensor[(1540), uint32] */;
  %375 = reshape(%373, newshape=[11, 10, 1]) /* ty=Tensor[(11, 10, 1), uint32] */;
  %376 = reshape(%374, newshape=[11, 10, 14]) /* ty=Tensor[(11, 10, 14), uint32] */;
  %377 = @func_1874(%375, %376) /* ty=Tensor[(11, 10, 14), bool] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(11, 10, 14), float64] */;
  %379 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(1540), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %380 = cast(meta[relay.Constant][19] /* ty=Tensor[(1540), uint32] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), float64] */;
  %382 = minimum(%380, %381) /* ty=Tensor[(1540), float64] */;
  %383 = cast(%382, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %384 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%377, dtype="bool") /* ty=Tensor[(11, 10, 14), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %388 = cast(meta[relay.Constant][20] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %389 = reshape(%388, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
  %390 = @func_557(%389) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %391 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
  %392 = %368.0;
  %393 = minimum(%371, %372) /* ty=Tensor[(22, 5), int8] */;
  %394 = logical_or(%385, %386) /* ty=Tensor[(11, 10, 14), bool] */;
  %395 = %387.0;
  %396 = %390.0;
  (%391, %392, %393, %394, %395, %396, meta[relay.Constant][20] /* ty=Tensor[(960, 1), float32] */)
}

def @func_3338() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) {
  %397 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %398 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %399 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
  %400 = %397.0;
  %401 = %398.0;
  %402 = %399.4;
  (%400, %401, %402)
}

def @func_3893() -> (Tensor[(16, 10, 6), float64],) {
  %403 = @func_3788() /* ty=(Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) */;
  %404 = %403.1;
  (%404,)
}

def @func_6962() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %405 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %406 = @func_3519() /* ty=Tensor[(5, 8, 13), int8] */;
  %407 = %405.1;
  (%406, %407)
}

def @func_7790(%var_7786: Tensor[(7, 11, 3), float32]) -> (Tensor[(7, 11, 3), float32],) {
  %408 = cast(%var_7786, dtype="float32") /* ty=Tensor[(7, 11, 3), float32] */;
  %409 = sin(%408) /* ty=Tensor[(7, 11, 3), float32] */;
  (%409,)
}

def @func_4893(%var_4890: Tensor[(7, 3, 16), float64]) -> Tensor[(7, 3, 16), float64] {
  %410 = cast(%var_4890, dtype="float64") /* ty=Tensor[(7, 3, 16), float64] */;
  exp(%410) /* ty=Tensor[(7, 3, 16), float64] */
}

def @func_7475() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), bool]) {
  %411 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
  %412 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %413 = @func_7128() /* ty=Tensor[(5, 8, 13), float32] */;
  %414 = %411.1;
  %415 = %412.2;
  (%413, %414, %415)
}

def @func_5960(%var_5925: Tensor[(10, 13, 6), int16], %var_5926: Tensor[(10, 13, 6), int16], %var_5951: Tensor[(156), float64]) -> (Tensor[(10, 13, 6), int16], Tensor[(5, 8, 13), float64], Tensor[(28, 1), float64], int8, Tensor[(156), float64]) {
  %416 = cast(%var_5926, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %417 = shape_of(%var_5925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_5925, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %420 = cast(meta[relay.Constant][21] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %421 = cast(%var_5951, dtype="float64") /* ty=Tensor[(156), float64] */;
  %422 = reshape(%420, newshape=[]) /* ty=int8 */;
  %423 = reshape(%421, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %424 = @func_5865(%422, %423) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) */;
  %425 = logical_xor(%418, %419) /* ty=Tensor[(10, 13, 6), int16] */;
  %426 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %427 = %424.9;
  (%425, %426, %427, meta[relay.Constant][21] /* ty=int8 */, %var_5951)
}

def @func_7858() -> (Tensor[(5, 8, 13), int8],) {
  %428 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %429 = %428.0;
  (%429,)
}

def @func_3835() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) {
  %430 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %431 = cast(meta[relay.Constant][22] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %432 = reshape(%431, newshape=[110]) /* ty=Tensor[(110), uint32] */;
  %433 = @func_2860(%432) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
  %434 = %430.0;
  %435 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %436 = %433.2;
  (%434, %435, %436, meta[relay.Constant][22] /* ty=Tensor[(110), uint32] */)
}

def @func_5383(%var_5361: float32) -> (Tensor[(7, 2, 9), float32], Tensor[(5, 8, 13), float64]) {
  %437 = cast(%var_5361, dtype="float32") /* ty=float32 */;
  %438 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %439 = floor_mod(%437, %438) /* ty=Tensor[(7, 2, 9), float32] */;
  %440 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  (%439, %440)
}

def @func_2062() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %441 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %443 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %444 = cos(%442) /* ty=Tensor[(5, 8, 13), float64] */;
  %445 = %443.0;
  (%444, %445)
}

def @func_1209() -> Tensor[(5, 8, 13), float32] {
  %446 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  acos(%447) /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_3575(%var_3568: Tensor[(4, 2, 10), float32], %var_3569: Tensor[(4, 2, 10), float32]) -> Tensor[(4, 2, 10), float32] {
  %448 = cast(%var_3569, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %449 = shape_of(%var_3568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%var_3568, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%450, %451) /* ty=Tensor[(4, 2, 10), float32] */
}

def @func_7524() -> (Tensor[(5, 8, 13), int8],) {
  %452 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %453 = %452.0;
  (%453,)
}

def @func_5339() -> (Tensor[(5, 8, 13), float64],) {
  %454 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %455 = %454.1;
  (%455,)
}

def @func_6998(%var_6975: Tensor[(7, 2, 12), int8], %var_6976: Tensor[(7, 2, 12), int8], %var_6981: Tensor[(156), float64]) -> (Tensor[(7, 2, 12), int8], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(7, 2, 12), uint64]) {
  %456 = cast(%var_6976, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
  %457 = shape_of(%var_6975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_6975, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %460 = cast(%var_6981, dtype="float64") /* ty=Tensor[(156), float64] */;
  %461 = cast(%var_6981, dtype="float64") /* ty=Tensor[(156), float64] */;
  %462 = reshape(%460, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %463 = reshape(%461, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %464 = @func_1773(%462, %463) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %465 = cast(%var_6976, dtype="uint64") /* ty=Tensor[(7, 2, 12), uint64] */;
  %466 = shape_of(%var_6975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%var_6975, dtype="uint64") /* ty=Tensor[(7, 2, 12), uint64] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %469 = right_shift(%458, %459) /* ty=Tensor[(7, 2, 12), int8] */;
  %470 = %464.3;
  %471 = minimum(%467, %468) /* ty=Tensor[(7, 2, 12), uint64] */;
  (%469, %470, %var_6981, %471)
}

def @func_860(%var_839: int8, %var_840: Tensor[(13, 8, 6), int8], %var_852: Tensor[(156), float64], %var_858: Tensor[(110), float32]) -> (Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) {
  %472 = cast(%var_839, dtype="int8") /* ty=int8 */;
  %473 = cast(%var_840, dtype="int8") /* ty=Tensor[(13, 8, 6), int8] */;
  %474 = cast(%var_852, dtype="float64") /* ty=Tensor[(156), float64] */;
  %475 = reshape(%474, newshape=[13, 6, 2]) /* ty=Tensor[(13, 6, 2), float64] */;
  %476 = cast(%var_858, dtype="float32") /* ty=Tensor[(110), float32] */;
  %477 = reshape(%476, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %478 = @func_54(%477) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %479 = logical_xor(%472, %473) /* ty=Tensor[(13, 8, 6), int8] */;
  %480 = @func_372(%475) /* ty=Tensor[(13, 6, 2), float64] */;
  %481 = %478.0;
  (%479, %480, %var_852, %481, %var_858)
}

def @func_6405() -> (Tensor[(5, 8, 13), uint8],) {
  %482 = @func_5247() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %483 = %482.0;
  %484 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 8, 13), float32] */, dtype="uint8") /* ty=Tensor[(5, 8, 13), uint8] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="uint8") /* ty=Tensor[(5, 8, 13), uint8] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %488 = logical_xor(%486, %487) /* ty=Tensor[(5, 8, 13), uint8] */;
  (%488,)
}

def @func_1672() -> (Tensor[(5, 8, 13), float32],) {
  %489 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  (%489,)
}

def @func_557(%var_534: Tensor[(5, 12, 16), float32]) -> (Tensor[(5, 12, 16), bool],) {
  %490 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 12, 16), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %491 = shape_of(%var_534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_534, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = greater(%492, %493) /* ty=Tensor[(5, 12, 16), bool] */;
  (%494,)
}

def @func_7877() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %495 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %496 = @func_6062() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %497 = %495.0;
  %498 = %496.0;
  (%497, %498)
}

def @func_1000() -> Tensor[(5, 8, 13), int8] {
  %499 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %499.1
}

def @main(%var_8486: bool) -> (Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), uint32]) {
  %500 = cast(%var_8486, dtype="bool") /* ty=bool */;
  %501 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 5, 6), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %502 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 5, 6), bool] */, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
  %503 = cast(%var_8486, dtype="uint32") /* ty=uint32 */;
  %504 = logical_or(%500, %501) /* ty=Tensor[(16, 5, 6), bool] */;
  %505 = multiply(%502, %503) /* ty=Tensor[(16, 5, 6), uint32] */;
  (%504, %505)
}

def @func_5316(%var_5300: Tensor[(14, 8, 1), int16], %var_5301: Tensor[(14, 8, 16), int16]) -> (Tensor[(14, 8, 16), int16], Tensor[(5, 8, 13), float64]) {
  %506 = cast(%var_5300, dtype="int16") /* ty=Tensor[(14, 8, 1), int16] */;
  %507 = cast(%var_5301, dtype="int16") /* ty=Tensor[(14, 8, 16), int16] */;
  %508 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %509 = bitwise_and(%506, %507) /* ty=Tensor[(14, 8, 16), int16] */;
  %510 = %508.0;
  (%509, %510)
}

def @func_1530(%var_1514: Tensor[(12, 12, 10), uint64]) -> (Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) {
  %511 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 12, 10), uint64] */, dtype="uint64") /* ty=Tensor[(12, 12, 10), uint64] */;
  %512 = shape_of(%var_1514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_1514, dtype="uint64") /* ty=Tensor[(12, 12, 10), uint64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %515 = cast(%var_1514, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
  %516 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %517 = left_shift(%513, %514) /* ty=Tensor[(12, 12, 10), uint64] */;
  %518 = erf(%515) /* ty=Tensor[(12, 12, 10), float64] */;
  %519 = %516.0;
  (%517, %518, %519)
}

def @func_1874(%var_1854: Tensor[(11, 10, 1), uint32], %var_1855: Tensor[(11, 10, 14), uint32]) -> Tensor[(11, 10, 14), bool] {
  %520 = cast(%var_1854, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
  %521 = cast(%var_1855, dtype="bool") /* ty=Tensor[(11, 10, 14), bool] */;
  less(%520, %521) /* ty=Tensor[(11, 10, 14), bool] */
}

def @func_2511() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %522 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %523 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %524 = %522.1;
  (%523, %524)
}

def @func_7066(%var_7063: Tensor[(13, 2, 11), float64]) -> Tensor[(13, 2, 11), float64] {
  %525 = cast(%var_7063, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  erf(%525) /* ty=Tensor[(13, 2, 11), float64] */
}

def @func_3181() -> Tensor[(5, 8, 13), float32] {
  %526 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %526.0
}

def @func_6893(%var_6855: float32, %var_6856: Tensor[(10, 15, 7), float32]) -> (Tensor[(10, 15, 7), bool], Tensor[(5, 8, 13), uint8], Tensor[(10, 15, 7), float32], Tensor[(5, 8, 13), float64]) {
  %527 = cast(%var_6855, dtype="bool") /* ty=bool */;
  %528 = cast(%var_6856, dtype="bool") /* ty=Tensor[(10, 15, 7), bool] */;
  %529 = @func_6405() /* ty=(Tensor[(5, 8, 13), uint8],) */;
  %530 = cast(%var_6856, dtype="bool") /* ty=Tensor[(10, 15, 7), bool] */;
  %531 = cast(%var_6855, dtype="bool") /* ty=bool */;
  %532 = greater(%530, %531) /* ty=Tensor[(10, 15, 7), bool] */;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
  %534 = less_equal(%527, %528) /* ty=Tensor[(10, 15, 7), bool] */;
  %535 = %529.0;
  %536 = exp(%533) /* ty=Tensor[(10, 15, 7), float32] */;
  %537 = @func_4875() /* ty=Tensor[(5, 8, 13), float64] */;
  (%534, %535, %536, %537)
}

def @func_6046() -> (Tensor[(5, 8, 13), float64],) {
  %538 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %539 = %538.0;
  (%539,)
}

def @func_5013(%var_4987: uint64, %var_4988: Tensor[(3, 1), uint64], %var_5006: Tensor[(960), float32], %var_5010: Tensor[(1, 308), int64]) -> (Tensor[(3, ?), float64], Tensor[(3, ?), int8], Tensor[(1, 1440), uint64], Tensor[(960), float32], Tensor[(11, 2, 14), bool], Tensor[(1, 308), int64]) {
  %540 = cast(%var_4987, dtype="bool") /* ty=bool */;
  %541 = cast(%var_4988, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  %542 = greater_equal(%540, %541) /* ty=Tensor[(3, 1), bool] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %544 = shape_of(%var_4988, dtype="int32") /* ty=Tensor[(2), int32] */;
  %545 = cast(%var_4988, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %547 = cast(%var_4988, dtype="int8") /* ty=Tensor[(3, 1), int8] */;
  %548 = shape_of(%542, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%542, dtype="int8") /* ty=Tensor[(3, 1), int8] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %551 = cast(%var_5006, dtype="float32") /* ty=Tensor[(960), float32] */;
  %552 = reshape(%551, newshape=[240, 4]) /* ty=Tensor[(240, 4), float32] */;
  %553 = @func_4014(%552) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) */;
  %554 = cast(%var_5010, dtype="int64") /* ty=Tensor[(1, 308), int64] */;
  %555 = cast(%var_5010, dtype="int64") /* ty=Tensor[(1, 308), int64] */;
  %556 = reshape(%554, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), int64] */;
  %557 = reshape(%555, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), int64] */;
  %558 = @func_4762(%556, %557) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) */;
  %559 = power(%545, %546) /* ty=Tensor[(3, ?), float64] */;
  %560 = bitwise_or(%549, %550) /* ty=Tensor[(3, ?), int8] */;
  %561 = %553.6;
  %562 = %558.0;
  (%559, %560, %561, %var_5006, %562, %var_5010)
}

def @func_7128() -> Tensor[(5, 8, 13), float32] {
  %563 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %563.0
}

def @func_8261() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %564 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %565 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %566 = %564.0;
  %567 = %565.0;
  %568 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
  (%566, %567, %568)
}

def @func_8469() -> Tensor[(5, 8, 13), int8] {
  %569 = @func_6962() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %569.0
}

def @func_4432(%var_4428: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) {
  %570 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %571 = @func_3878() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %572 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
  %573 = %572.1;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %575 = cast(%var_4428, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %576 = reshape(%575, newshape=[110]) /* ty=Tensor[(110), uint32] */;
  %577 = @func_2860(%576) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
  %578 = %570.0;
  %579 = %571.0;
  %580 = asin(%574) /* ty=Tensor[(5, 8, 13), float64] */;
  %581 = %577.2;
  (%578, %579, %580, %581, %var_4428)
}

def @func_1773(%var_1718: Tensor[(13, 2, 6), float64], %var_1719: Tensor[(13, 2, 6), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %582 = cast(%var_1719, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %583 = shape_of(%var_1718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_1718, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %586 = divide(%584, %585) /* ty=Tensor[(13, 2, 6), float64] */;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %588 = acos(%587) /* ty=Tensor[(13, 2, 6), float64] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %590 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %591 = atan(%589) /* ty=Tensor[(13, 2, 6), float64] */;
  %592 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %593 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  (%590, %591, %592, %593)
}

def @func_1101(%var_1079: Tensor[(13, 4, 2), bool], %var_1080: Tensor[(13, 4, 2), bool]) -> Tensor[(13, 4, 2), bool] {
  %594 = cast(%var_1080, dtype="bool") /* ty=Tensor[(13, 4, 2), bool] */;
  %595 = shape_of(%var_1079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_1079, dtype="bool") /* ty=Tensor[(13, 4, 2), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%596, %597) /* ty=Tensor[(13, 4, 2), bool] */
}

def @func_5023() -> Tensor[(5, 8, 13), int8] {
  %598 = @func_2511() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %598.1
}

def @func_7111(%var_7093: Tensor[(6, 1, 9), float32]) -> (Tensor[(6, 1, 9), float32],) {
  %599 = cast(%var_7093, dtype="float32") /* ty=Tensor[(6, 1, 9), float32] */;
  %600 = sigmoid(%599) /* ty=Tensor[(6, 1, 9), float32] */;
  (%600,)
}

def @func_3420() -> Tensor[(5, 8, 13), float64] {
  @func_3189() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_6175(%var_6159: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(12, 11, 5), float64], Tensor[(5, 132), float64]) {
  %601 = @func_6062() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %602 = cast(%var_6159, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %603 = reshape(%602, newshape=[110]) /* ty=Tensor[(110), uint32] */;
  %604 = @func_4432(%603) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %605 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 132), float64] */, dtype="float64") /* ty=Tensor[(5, 132), float64] */;
  %606 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 132), float64] */, dtype="float64") /* ty=Tensor[(5, 132), float64] */;
  %607 = reshape(%605, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), float64] */;
  %608 = reshape(%606, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), float64] */;
  %609 = @func_2183(%607, %608) /* ty=(Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) */;
  %610 = %601.0;
  %611 = %604.2;
  %612 = %609.0;
  (%610, %611, %var_6159, %612, meta[relay.Constant][28] /* ty=Tensor[(5, 132), float64] */)
}

def @func_3643(%var_3616: Tensor[(5, 8, 13), bool]) -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %613 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %616 = reshape(%615, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %617 = @func_1447(%616) /* ty=Tensor[(5, 8, 13), bool] */;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %619 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%614, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = logical_or(%620, %621) /* ty=Tensor[(5, 8, 13), bool] */;
  %623 = cast(%var_3616, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %627 = greater_equal(%625, %626) /* ty=Tensor[(5, 8, 13), bool] */;
  %628 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %629 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  (%627, %628, %629)
}

def @func_1447(%var_1435: Tensor[(5, 8, 13), int8]) -> Tensor[(5, 8, 13), bool] {
  %630 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  %631 = cast(%var_1435, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%633, %634) /* ty=Tensor[(5, 8, 13), bool] */
}

def @func_4762(%var_4665: Tensor[(11, 2, 14), int64], %var_4666: Tensor[(11, 2, 14), int64]) -> (Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) {
  %635 = cast(%var_4666, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %636 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_4665, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %639 = not_equal(%637, %638) /* ty=Tensor[(11, 2, 14), bool] */;
  %640 = cast(%639, dtype="uint32") /* ty=Tensor[(11, 2, 14), uint32] */;
  %641 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_4665, dtype="uint32") /* ty=Tensor[(11, 2, 14), uint32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %644 = bitwise_or(%642, %643) /* ty=Tensor[(11, 2, 14), uint32] */;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(11, 2, 14), float64] */;
  %646 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_4665, dtype="float64") /* ty=Tensor[(11, 2, 14), float64] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %649 = floor_divide(%647, %648) /* ty=Tensor[(11, 2, 14), float64] */;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %651 = shape_of(%var_4666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_4666, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%644, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
  %655 = log2(%654) /* ty=Tensor[(11, 2, 14), float32] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
  %657 = logical_or(%652, %653) /* ty=Tensor[(11, 2, 14), bool] */;
  %658 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %659 = log(%656) /* ty=Tensor[(11, 2, 14), float32] */;
  (%657, %658, %659)
}

def @func_8369() -> (Tensor[(5, 8, 13), float64],) {
  %660 = @func_8261() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %661 = %660.1;
  (%661,)
}

def @func_4827(%var_4824: int8, %var_4825: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), int8], Tensor[(110), float32], int8, Tensor[(156), float64]) {
  %662 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %663 = cast(%var_4824, dtype="int8") /* ty=int8 */;
  %664 = cast(%var_4825, dtype="float64") /* ty=Tensor[(156), float64] */;
  %665 = reshape(%663, newshape=[]) /* ty=int8 */;
  %666 = reshape(%664, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %667 = @func_2722(%665, %666) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
  %668 = %662.1;
  %669 = %667.4;
  (%668, %669, %var_4824, %var_4825)
}

def @func_5232() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %670 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %671 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
  %672 = %670.0;
  (%671, %672)
}

def @func_5409() -> (Tensor[(5, 8, 13), float64],) {
  %673 = @func_3878() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %674 = %673.1;
  (%674,)
}

def @func_8200() -> (Tensor[(5, 8, 13), float64],) {
  %675 = @func_4160() /* ty=Tensor[(5, 8, 13), float64] */;
  (%675,)
}

def @func_3519() -> Tensor[(5, 8, 13), int8] {
  @func_1481() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_4043() -> (Tensor[(5, 8, 13), float32],) {
  %676 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  (%676,)
}

def @func_3720() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) {
  %677 = @func_2511() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %678 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %679 = %677.1;
  (%678, %679)
}

def @func_7986(%var_7930: Tensor[(24, 26), int8], %var_7940: Tensor[(1344), uint8], %var_7969: Tensor[(24, 26), float32]) -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(13, 8, 6), int8], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), float64], Tensor[(24, 26), float32], Tensor[(24, 26), float64]) {
  %680 = @func_7858() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %681 = cast(meta[relay.Constant][29] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %682 = cast(%var_7930, dtype="int8") /* ty=Tensor[(24, 26), int8] */;
  %683 = cast(meta[relay.Constant][30] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %684 = cast(meta[relay.Constant][31] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %685 = reshape(%681, newshape=[]) /* ty=int8 */;
  %686 = reshape(%682, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
  %687 = reshape(%683, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %688 = reshape(%684, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %689 = @func_860(%685, %686, %687, %688) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
  %690 = cast(%var_7940, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %691 = reshape(%690, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %692 = @func_5888(%691) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) */;
  %693 = @func_5232() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %694 = cast(%var_7930, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %695 = sinh(%694) /* ty=Tensor[(24, 26), float32] */;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %697 = cast(%var_7969, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %698 = shape_of(%695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%695, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %701 = divide(%699, %700) /* ty=Tensor[(24, 26), float64] */;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %703 = %680.0;
  %704 = @func_4875() /* ty=Tensor[(5, 8, 13), float64] */;
  %705 = %689.0;
  %706 = %692.0;
  %707 = %693.0;
  %708 = cosh(%696) /* ty=Tensor[(24, 26), float32] */;
  %709 = acosh(%702) /* ty=Tensor[(24, 26), float64] */;
  (%703, %704, %705, meta[relay.Constant][29] /* ty=int8 */, meta[relay.Constant][30] /* ty=Tensor[(156), float64] */, meta[relay.Constant][31] /* ty=Tensor[(110), float32] */, %706, %var_7940, %707, %708, %709)
}

def @func_8176(%var_8139: Tensor[(1344), uint8], %var_8151: Tensor[(216), uint8]) -> (Tensor[(5, 8, 13), int8], Tensor[(1), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), int8], Tensor[(3, 8, 9), bool], Tensor[(216), uint8], Tensor[(5, 8, 13), float64], Tensor[(60), bool]) {
  %710 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %711 = cast(%var_8139, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %712 = reshape(%711, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %713 = @func_5888(%712) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) */;
  %714 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %715 = cast(%var_8151, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %716 = cast(%var_8151, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %717 = reshape(%715, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), uint8] */;
  %718 = reshape(%716, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), uint8] */;
  %719 = @func_4594(%717, %718) /* ty=(Tensor[(3, 8, 9), bool],) */;
  %720 = cast(meta[relay.Constant][33] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %721 = log(%720) /* ty=Tensor[(60), float32] */;
  %722 = cast(meta[relay.Constant][32] /* ty=Tensor[(1), float32] */, dtype="float32") /* ty=Tensor[(1), float32] */;
  %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %724 = reshape(%722, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), float32] */;
  %725 = reshape(%723, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %726 = @func_6131(%724, %725) /* ty=(Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) */;
  %727 = %726.0;
  %728 = cast(%727, dtype="bool") /* ty=Tensor[(15, 1, 4), bool] */;
  %729 = shape_of(%721, dtype="int32") /* ty=Tensor[(1), int32] */;
  %730 = cast(%721, dtype="bool") /* ty=Tensor[(60), bool] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?), bool] */;
  %732 = %710.0;
  %733 = @func_6707() /* ty=Tensor[(5, 8, 13), float64] */;
  %734 = %713.0;
  %735 = %714.1;
  %736 = %719.0;
  %737 = @func_6642() /* ty=Tensor[(5, 8, 13), float64] */;
  %738 = greater_equal(%730, %731) /* ty=Tensor[(60), bool] */;
  (%732, meta[relay.Constant][32] /* ty=Tensor[(1), float32] */, %733, %734, %var_8139, %735, %736, %var_8151, %737, %738)
}

def @func_7752() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %739 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %740 = @func_5748() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) */;
  %741 = %739.0;
  %742 = %740.0;
  (%741, %742)
}

def @func_5888(%var_5874: Tensor[(1344), uint8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) {
  %743 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %744 = cast(%var_5874, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %745 = cast(%var_5874, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %746 = reshape(%744, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint8] */;
  %747 = reshape(%745, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint8] */;
  %748 = @func_4630(%746, %747) /* ty=(Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) */;
  %749 = %743.0;
  %750 = %748.1;
  (%749, %750, %var_5874)
}

def @func_6094() -> (Tensor[(7, 10, 10), float32],) {
  %751 = @func_5585() /* ty=Tensor[(7, 10, 10), float32] */;
  (%751,)
}

def @func_3323() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) {
  %752 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %753 = cast(meta[relay.Constant][34] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %754 = cast(meta[relay.Constant][34] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %755 = reshape(%753, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %756 = reshape(%754, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %757 = @func_1773(%755, %756) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %758 = %757.3;
  %759 = cast(%758, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %760 = reshape(%759, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %761 = @func_1447(%760) /* ty=Tensor[(5, 8, 13), bool] */;
  %762 = cast(%761, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %763 = reshape(%762, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %764 = @func_3081(%763) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
  %765 = %752.1;
  %766 = %764.1;
  (%765, %758, meta[relay.Constant][34] /* ty=Tensor[(156), float64] */, %761, %766)
}

def @func_5766(%var_5751: Tensor[(16, 6, 4), uint8]) -> (Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) {
  %767 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 6, 4), uint8] */, dtype="uint8") /* ty=Tensor[(16, 6, 4), uint8] */;
  %768 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_5751, dtype="uint8") /* ty=Tensor[(16, 6, 4), uint8] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %771 = @func_3788() /* ty=(Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) */;
  %772 = left_shift(%769, %770) /* ty=Tensor[(16, 6, 4), uint8] */;
  %773 = %771.0;
  (%772, %773)
}

def @func_1481() -> Tensor[(5, 8, 13), int8] {
  %774 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %774.1
}

def @func_3081(%var_3065: Tensor[(5, 8, 13), int8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %775 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %776 = %775.0;
  %777 = cast(%var_3065, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %781 = cast(%var_3065, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %782 = reshape(%781, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %783 = @func_2415(%782) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
  %784 = floor_divide(%779, %780) /* ty=Tensor[(5, 8, 13), float64] */;
  %785 = %783.1;
  (%784, %785)
}

def @func_782() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %786 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %787 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %790 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %791 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %794 = floor_mod(%788, %789) /* ty=Tensor[(5, 8, 13), float64] */;
  %795 = bitwise_or(%792, %793) /* ty=Tensor[(5, 8, 13), int8] */;
  (%794, %795)
}

def @func_4875() -> Tensor[(5, 8, 13), float64] {
  %796 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %796.0
}

def @func_2448(%var_2439: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), int8] {
  %797 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
  %798 = %797.1;
  %799 = cast(%var_2439, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%801, %802) /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_6062() -> (Tensor[(5, 8, 13), float64],) {
  %803 = @func_5409() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %804 = %803.0;
  (%804,)
}

def @func_4970(%var_4962: Tensor[(11, 1, 7), float32]) -> (Tensor[(11, 1, 7), float32],) {
  %805 = cast(%var_4962, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
  %806 = erf(%805) /* ty=Tensor[(11, 1, 7), float32] */;
  (%806,)
}

def @func_3189() -> Tensor[(5, 8, 13), float64] {
  %807 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %807.0
}

def @func_2395() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
  %808 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %809 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %810 = %808.0;
  (%809, %810)
}

def @func_54(%var_21: Tensor[(2, 5, 11), float32]) -> (Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) {
  %811 = cast(%var_21, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
  %812 = cast(%var_21, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %813 = log10(%811) /* ty=Tensor[(2, 5, 11), float32] */;
  %814 = rsqrt(%812) /* ty=Tensor[(2, 5, 11), float64] */;
  (%813, %814)
}

def @func_2648() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %815 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
  %816 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
  %817 = %815.1;
  (%816, %817)
}

def @func_3778() -> Tensor[(5, 8, 13), float64] {
  %818 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %818.0
}

def @func_5585() -> Tensor[(7, 10, 10), float32] {
  %819 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  sinh(%819) /* ty=Tensor[(7, 10, 10), float32] */
}

def @func_1284() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %820 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %821 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %822 = %820.0;
  %823 = %821.1;
  (%822, %823)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5965(%var_5962: Tensor[(10, 13, 6), int16], %var_5963: Tensor[(10, 13, 6), int16], %var_5964: Tensor[(156), float64]) -> (Tensor[(10, 13, 6), int16], Tensor[(5, 8, 13), float64], Tensor[(28, 1), float64], int8, Tensor[(156), float64]) {
  @func_5960(%var_5962, %var_5963, %var_5964) /* ty=(Tensor[(10, 13, 6), int16], Tensor[(5, 8, 13), float64], Tensor[(28, 1), float64], int8, Tensor[(156), float64]) */
}

def @func_7721() -> (Tensor[(5, 8, 13), float64],) {
  %0 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_7599(%var_7536: int16, %var_7537: Tensor[(1, 6, 4), int16]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(6, 6, 4), bool]) {
  %2 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %4 = reshape(%3, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %5 = @func_54(%4) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %6 = @func_5339() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %7 = cast(%var_7536, dtype="bool") /* ty=bool */;
  %8 = cast(%var_7537, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %9 = not_equal(%7, %8) /* ty=Tensor[(1, 6, 4), bool] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %11 = sin(%10) /* ty=Tensor[(1, 6, 4), float32] */;
  %12 = cast(%11, dtype="int16") /* ty=Tensor[(1, 6, 4), int16] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 6, 4), float32] */, dtype="int16") /* ty=Tensor[(6, 6, 4), int16] */;
  %14 = bitwise_xor(%12, %13) /* ty=Tensor[(6, 6, 4), int16] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(6, 6, 4), bool] */;
  %16 = cast(%9, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %17 = %2.1;
  %18 = %5.0;
  %19 = @func_3778() /* ty=Tensor[(5, 8, 13), float64] */;
  %20 = @func_5557() /* ty=Tensor[(5, 8, 13), float32] */;
  %21 = %6.0;
  %22 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %23 = logical_or(%15, %16) /* ty=Tensor[(6, 6, 4), bool] */;
  (%17, %18, meta[relay.Constant][0] /* ty=Tensor[(110), float32] */, %19, %20, %21, %22, %23)
}

def @func_2448(%var_2439: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), int8] {
  %24 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
  %25 = %24.1;
  %26 = cast(%var_2439, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%28, %29) /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_4237() -> (Tensor[(5, 8, 13), bool], Tensor[(13, 4, 2), bool], Tensor[(104), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  @func_4235() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(13, 4, 2), bool], Tensor[(104), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */
}

def @func_3084(%var_3082: Tensor[(5, 8, 13), int8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  @func_3081(%var_3082) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */
}

def @func_2612(%var_2610: Tensor[(22, 5), uint32], %var_2611: Tensor[(22, 5), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) {
  @func_2608(%var_2610, %var_2611) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) */
}

def @func_6095() -> (Tensor[(7, 10, 10), float32],) {
  %31 = fn () -> (Tensor[(7, 10, 10), float32],) {
    %30 = @func_5585() /* ty=Tensor[(7, 10, 10), float32] */;
    (%30,)
  };
  %31() /* ty=(Tensor[(7, 10, 10), float32],) */
}

def @func_5018(%var_5014: uint64, %var_5015: Tensor[(3, 1), uint64], %var_5016: Tensor[(960), float32], %var_5017: Tensor[(1, 308), int64]) -> (Tensor[(3, ?), float64], Tensor[(3, ?), int8], Tensor[(1, 1440), uint64], Tensor[(960), float32], Tensor[(11, 2, 14), bool], Tensor[(1, 308), int64]) {
  %55 = fn (%var_4987: uint64, %var_4988: Tensor[(3, 1), uint64], %var_5006: Tensor[(960), float32], %var_5010: Tensor[(1, 308), int64]) -> (Tensor[(3, ?), float64], Tensor[(3, ?), int8], Tensor[(1, 1440), uint64], Tensor[(960), float32], Tensor[(11, 2, 14), bool], Tensor[(1, 308), int64]) {
    %32 = cast(%var_4987, dtype="bool") /* ty=bool */;
    %33 = cast(%var_4988, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
    %34 = greater_equal(%32, %33) /* ty=Tensor[(3, 1), bool] */;
    %35 = cast(%34, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
    %36 = shape_of(%var_4988, dtype="int32") /* ty=Tensor[(2), int32] */;
    %37 = cast(%var_4988, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %39 = cast(%var_4988, dtype="int8") /* ty=Tensor[(3, 1), int8] */;
    %40 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %41 = cast(%34, dtype="int8") /* ty=Tensor[(3, 1), int8] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %43 = cast(%var_5006, dtype="float32") /* ty=Tensor[(960), float32] */;
    %44 = reshape(%43, newshape=[240, 4]) /* ty=Tensor[(240, 4), float32] */;
    %45 = @func_4014(%44) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) */;
    %46 = cast(%var_5010, dtype="int64") /* ty=Tensor[(1, 308), int64] */;
    %47 = cast(%var_5010, dtype="int64") /* ty=Tensor[(1, 308), int64] */;
    %48 = reshape(%46, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), int64] */;
    %49 = reshape(%47, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), int64] */;
    %50 = @func_4762(%48, %49) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) */;
    %51 = power(%37, %38) /* ty=Tensor[(3, ?), float64] */;
    %52 = bitwise_or(%41, %42) /* ty=Tensor[(3, ?), int8] */;
    %53 = %45.6;
    %54 = %50.0;
    (%51, %52, %53, %var_5006, %54, %var_5010)
  };
  %55(%var_5014, %var_5015, %var_5016, %var_5017) /* ty=(Tensor[(3, ?), float64], Tensor[(3, ?), int8], Tensor[(1, 1440), uint64], Tensor[(960), float32], Tensor[(11, 2, 14), bool], Tensor[(1, 308), int64]) */
}

def @func_3420() -> Tensor[(5, 8, 13), float64] {
  @func_3189() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_2274() -> Tensor[(5, 8, 13), float64] {
  %56 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  sin(%58) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_6004() -> Tensor[(5, 8, 13), float32] {
  @func_6002() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_5960(%var_5925: Tensor[(10, 13, 6), int16], %var_5926: Tensor[(10, 13, 6), int16], %var_5951: Tensor[(156), float64]) -> (Tensor[(10, 13, 6), int16], Tensor[(5, 8, 13), float64], Tensor[(28, 1), float64], int8, Tensor[(156), float64]) {
  %59 = cast(%var_5926, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %60 = shape_of(%var_5925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%var_5925, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %63 = cast(meta[relay.Constant][2] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %64 = cast(%var_5951, dtype="float64") /* ty=Tensor[(156), float64] */;
  %65 = reshape(%63, newshape=[]) /* ty=int8 */;
  %66 = reshape(%64, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %67 = @func_5865(%65, %66) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) */;
  %68 = logical_xor(%61, %62) /* ty=Tensor[(10, 13, 6), int16] */;
  %69 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %70 = %67.9;
  (%68, %69, %70, meta[relay.Constant][2] /* ty=int8 */, %var_5951)
}

def @func_3172(%var_3170: Tensor[(5, 8, 13), float64], %var_3171: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), uint16]) {
  %87 = fn (%var_3120: Tensor[(5, 8, 13), float64], %var_3149: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), uint16]) {
    %71 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %72 = %71.0;
    %73 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
    %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%72, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %77 = cast(%72, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %78 = reshape(%77, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
    %79 = @func_2415(%78) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
    %80 = cast(%var_3149, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
    %81 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%72, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %84 = minimum(%75, %76) /* ty=Tensor[(5, 8, 13), uint16] */;
    %85 = %79.1;
    %86 = maximum(%82, %83) /* ty=Tensor[(5, 8, 13), uint16] */;
    (%84, %85, %86)
  };
  %87(%var_3170, %var_3171) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), uint16]) */
}

def @func_557(%var_534: Tensor[(5, 12, 16), float32]) -> (Tensor[(5, 12, 16), bool],) {
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 12, 16), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %89 = shape_of(%var_534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_534, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = greater(%90, %91) /* ty=Tensor[(5, 12, 16), bool] */;
  (%92,)
}

def @func_560(%var_558: Tensor[(5, 12, 16), float32]) -> (Tensor[(5, 12, 16), bool],) {
  @func_557(%var_558) /* ty=(Tensor[(5, 12, 16), bool],) */
}

def @func_3646(%var_3644: Tensor[(5, 8, 13), bool]) -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  @func_3643(%var_3644) /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */
}

def @func_4597(%var_4595: Tensor[(3, 8, 9), uint8], %var_4596: Tensor[(3, 8, 9), uint8]) -> (Tensor[(3, 8, 9), bool],) {
  %98 = fn (%var_4587: Tensor[(3, 8, 9), uint8], %var_4588: Tensor[(3, 8, 9), uint8]) -> (Tensor[(3, 8, 9), bool],) {
    %93 = cast(%var_4588, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
    %94 = shape_of(%var_4587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%var_4587, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %97 = greater(%95, %96) /* ty=Tensor[(3, 8, 9), bool] */;
    (%97,)
  };
  %98(%var_4595, %var_4596) /* ty=(Tensor[(3, 8, 9), bool],) */
}

def @func_5385(%var_5384: float32) -> (Tensor[(7, 2, 9), float32], Tensor[(5, 8, 13), float64]) {
  %103 = fn (%var_5361: float32) -> (Tensor[(7, 2, 9), float32], Tensor[(5, 8, 13), float64]) {
    %99 = cast(%var_5361, dtype="float32") /* ty=float32 */;
    %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
    %101 = floor_mod(%99, %100) /* ty=Tensor[(7, 2, 9), float32] */;
    %102 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
    (%101, %102)
  };
  %103(%var_5384) /* ty=(Tensor[(7, 2, 9), float32], Tensor[(5, 8, 13), float64]) */
}

def @func_783() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %114 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
    %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %105 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
    %109 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 13), float64] */, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %112 = floor_mod(%106, %107) /* ty=Tensor[(5, 8, 13), float64] */;
    %113 = bitwise_or(%110, %111) /* ty=Tensor[(5, 8, 13), int8] */;
    (%112, %113)
  };
  %114() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */
}

def @func_865(%var_861: int8, %var_862: Tensor[(13, 8, 6), int8], %var_863: Tensor[(156), float64], %var_864: Tensor[(110), float32]) -> (Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) {
  %125 = fn (%var_839: int8, %var_840: Tensor[(13, 8, 6), int8], %var_852: Tensor[(156), float64], %var_858: Tensor[(110), float32]) -> (Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) {
    %115 = cast(%var_839, dtype="int8") /* ty=int8 */;
    %116 = cast(%var_840, dtype="int8") /* ty=Tensor[(13, 8, 6), int8] */;
    %117 = cast(%var_852, dtype="float64") /* ty=Tensor[(156), float64] */;
    %118 = reshape(%117, newshape=[13, 6, 2]) /* ty=Tensor[(13, 6, 2), float64] */;
    %119 = cast(%var_858, dtype="float32") /* ty=Tensor[(110), float32] */;
    %120 = reshape(%119, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
    %121 = @func_54(%120) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
    %122 = logical_xor(%115, %116) /* ty=Tensor[(13, 8, 6), int8] */;
    %123 = @func_372(%118) /* ty=Tensor[(13, 6, 2), float64] */;
    %124 = %121.0;
    (%122, %123, %var_852, %124, %var_858)
  };
  %125(%var_861, %var_862, %var_863, %var_864) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */
}

def @func_3721() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) {
  %129 = fn () -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) {
    %126 = @func_2511() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
    %127 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
    %128 = %126.1;
    (%127, %128)
  };
  %129() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */
}

def @func_5316(%var_5300: Tensor[(14, 8, 1), int16], %var_5301: Tensor[(14, 8, 16), int16]) -> (Tensor[(14, 8, 16), int16], Tensor[(5, 8, 13), float64]) {
  %130 = cast(%var_5300, dtype="int16") /* ty=Tensor[(14, 8, 1), int16] */;
  %131 = cast(%var_5301, dtype="int16") /* ty=Tensor[(14, 8, 16), int16] */;
  %132 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %133 = bitwise_and(%130, %131) /* ty=Tensor[(14, 8, 16), int16] */;
  %134 = %132.0;
  (%133, %134)
}

def @func_4970(%var_4962: Tensor[(11, 1, 7), float32]) -> (Tensor[(11, 1, 7), float32],) {
  %135 = cast(%var_4962, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
  %136 = erf(%135) /* ty=Tensor[(11, 1, 7), float32] */;
  (%136,)
}

def @func_4948() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %140 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
    %137 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
    %138 = @func_4160() /* ty=Tensor[(5, 8, 13), float64] */;
    %139 = %137.0;
    (%138, %139)
  };
  %140() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_1773(%var_1718: Tensor[(13, 2, 6), float64], %var_1719: Tensor[(13, 2, 6), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %141 = cast(%var_1719, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %142 = shape_of(%var_1718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_1718, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %145 = divide(%143, %144) /* ty=Tensor[(13, 2, 6), float64] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %147 = acos(%146) /* ty=Tensor[(13, 2, 6), float64] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %149 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %150 = atan(%148) /* ty=Tensor[(13, 2, 6), float64] */;
  %151 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %152 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  (%149, %150, %151, %152)
}

def @func_5919() -> Tensor[(5, 8, 13), float32] {
  %153 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  acosh(%154) /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_3323() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) {
  %155 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %157 = cast(meta[relay.Constant][7] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %158 = reshape(%156, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %159 = reshape(%157, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
  %160 = @func_1773(%158, %159) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
  %161 = %160.3;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %163 = reshape(%162, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %164 = @func_1447(%163) /* ty=Tensor[(5, 8, 13), bool] */;
  %165 = cast(%164, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %166 = reshape(%165, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %167 = @func_3081(%166) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
  %168 = %155.1;
  %169 = %167.1;
  (%168, %161, meta[relay.Constant][7] /* ty=Tensor[(156), float64] */, %164, %169)
}

def @func_1841() -> Tensor[(5, 8, 13), float64] {
  @func_1839() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_4043() -> (Tensor[(5, 8, 13), float32],) {
  %170 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  (%170,)
}

def @func_2064() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_54(%var_21: Tensor[(2, 5, 11), float32]) -> (Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) {
  %171 = cast(%var_21, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
  %172 = cast(%var_21, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %173 = log10(%171) /* ty=Tensor[(2, 5, 11), float32] */;
  %174 = rsqrt(%172) /* ty=Tensor[(2, 5, 11), float64] */;
  (%173, %174)
}

def @func_2862(%var_2861: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) {
  %183 = fn (%var_2857: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) {
    %175 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
    %176 = cast(%var_2857, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %177 = cast(%var_2857, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %178 = reshape(%176, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
    %179 = reshape(%177, newshape=[22, 5]) /* ty=Tensor[(22, 5), uint32] */;
    %180 = @func_2608(%178, %179) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) */;
    %181 = %175.0;
    %182 = %180.2;
    (%181, %182, %var_2857)
  };
  %183(%var_2861) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */
}

def @func_3788() -> (Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) {
  %184 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 10, 6), int32] */, dtype="bool") /* ty=Tensor[(16, 10, 6), bool] */;
  %185 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="bool") /* ty=Tensor[(16, 10, 6), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 10, 6), int32] */, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %189 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 6), int32] */, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %192 = less(%186, %187) /* ty=Tensor[(16, 10, 6), bool] */;
  %193 = power(%190, %191) /* ty=Tensor[(16, 10, 6), float64] */;
  (%192, %193)
}

def @func_3790() -> (Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) {
  @func_3788() /* ty=(Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) */
}

def @func_7376(%var_7374: Tensor[(104), bool], %var_7375: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(6, 99), float32], Tensor[(104), bool], Tensor[(156), float64]) {
  @func_7372(%var_7374, %var_7375) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(6, 99), float32], Tensor[(104), bool], Tensor[(156), float64]) */
}

def @func_2415(%var_2404: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) {
  %194 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
  %195 = cast(%var_2404, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint16") /* ty=Tensor[(5, 8, 13), uint16] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %199 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 13), float64] */, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %200 = shape_of(%var_2404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_2404, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = bitwise_and(%197, %198) /* ty=Tensor[(5, 8, 13), uint16] */;
  %204 = less(%201, %202) /* ty=Tensor[(5, 8, 13), bool] */;
  (%203, %204)
}

def @func_3519() -> Tensor[(5, 8, 13), int8] {
  @func_1481() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_2608(%var_2523: Tensor[(22, 5), uint32], %var_2562: Tensor[(22, 5), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(22, 5), int8], Tensor[(11, 10, 14), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 12, 16), bool], Tensor[(960, 1), float32]) {
  %205 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %206 = cast(%var_2562, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %207 = shape_of(%var_2523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%var_2523, dtype="int8") /* ty=Tensor[(22, 5), int8] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %210 = cast(%var_2523, dtype="uint32") /* ty=Tensor[(22, 5), uint32] */;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(1540), uint32] */, dtype="uint32") /* ty=Tensor[(1540), uint32] */;
  %212 = reshape(%210, newshape=[11, 10, 1]) /* ty=Tensor[(11, 10, 1), uint32] */;
  %213 = reshape(%211, newshape=[11, 10, 14]) /* ty=Tensor[(11, 10, 14), uint32] */;
  %214 = @func_1874(%212, %213) /* ty=Tensor[(11, 10, 14), bool] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(11, 10, 14), float64] */;
  %216 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1540), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %217 = cast(meta[relay.Constant][11] /* ty=Tensor[(1540), uint32] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?), float64] */;
  %219 = minimum(%217, %218) /* ty=Tensor[(1540), float64] */;
  %220 = cast(%219, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %221 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%214, dtype="bool") /* ty=Tensor[(11, 10, 14), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %226 = reshape(%225, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
  %227 = @func_557(%226) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %228 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
  %229 = %205.0;
  %230 = minimum(%208, %209) /* ty=Tensor[(22, 5), int8] */;
  %231 = logical_or(%222, %223) /* ty=Tensor[(11, 10, 14), bool] */;
  %232 = %224.0;
  %233 = %227.0;
  (%228, %229, %230, %231, %232, %233, meta[relay.Constant][12] /* ty=Tensor[(960, 1), float32] */)
}

def @func_5683() -> Tensor[(5, 8, 13), bool] {
  %234 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %235 = %234.1;
  %236 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %237 = cast(%236, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %238 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%235, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%239, %240) /* ty=Tensor[(5, 8, 13), bool] */
}

def @func_5750() -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) {
  @func_5748() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) */
}

def @func_4434(%var_4433: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) {
  %253 = fn (%var_4428: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) {
    %241 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %242 = @func_3878() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %243 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
    %244 = %243.1;
    %245 = cast(%244, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %246 = cast(%var_4428, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %247 = reshape(%246, newshape=[110]) /* ty=Tensor[(110), uint32] */;
    %248 = @func_2860(%247) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
    %249 = %241.0;
    %250 = %242.0;
    %251 = asin(%245) /* ty=Tensor[(5, 8, 13), float64] */;
    %252 = %248.2;
    (%249, %250, %251, %252, %var_4428)
  };
  %253(%var_4433) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) */
}

def @func_1942() -> (Tensor[(5, 8, 13), int8],) {
  @func_1940() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_3422() -> Tensor[(5, 8, 13), float64] {
  @func_3420() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_1877(%var_1875: Tensor[(11, 10, 1), uint32], %var_1876: Tensor[(11, 10, 14), uint32]) -> Tensor[(11, 10, 14), bool] {
  %256 = fn (%var_1854: Tensor[(11, 10, 1), uint32], %var_1855: Tensor[(11, 10, 14), uint32]) -> Tensor[(11, 10, 14), bool] {
    %254 = cast(%var_1854, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
    %255 = cast(%var_1855, dtype="bool") /* ty=Tensor[(11, 10, 14), bool] */;
    less(%254, %255) /* ty=Tensor[(11, 10, 14), bool] */
  };
  %256(%var_1875, %var_1876) /* ty=Tensor[(11, 10, 14), bool] */
}

def @func_3837() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) {
  @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */
}

def @func_1925() -> (Tensor[(5, 8, 13), float64],) {
  %258 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %257 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
    (%257,)
  };
  %258() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_5574() -> (Tensor[(5, 8, 13), float64],) {
  @func_5572() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_5320(%var_5318: Tensor[(14, 8, 1), int16], %var_5319: Tensor[(14, 8, 16), int16]) -> (Tensor[(14, 8, 16), int16], Tensor[(5, 8, 13), float64]) {
  @func_5316(%var_5318, %var_5319) /* ty=(Tensor[(14, 8, 16), int16], Tensor[(5, 8, 13), float64]) */
}

def @func_1482() -> Tensor[(5, 8, 13), int8] {
  %260 = fn () -> Tensor[(5, 8, 13), int8] {
    %259 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %259.1
  };
  %260() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_6405() -> (Tensor[(5, 8, 13), uint8],) {
  %261 = @func_5247() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %262 = %261.0;
  %263 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 8, 13), float32] */, dtype="uint8") /* ty=Tensor[(5, 8, 13), uint8] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="uint8") /* ty=Tensor[(5, 8, 13), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %267 = logical_xor(%265, %266) /* ty=Tensor[(5, 8, 13), uint8] */;
  (%267,)
}

def @func_8202() -> (Tensor[(5, 8, 13), float64],) {
  @func_8200() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_1532(%var_1531: Tensor[(12, 12, 10), uint64]) -> (Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) {
  %277 = fn (%var_1514: Tensor[(12, 12, 10), uint64]) -> (Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) {
    %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 12, 10), uint64] */, dtype="uint64") /* ty=Tensor[(12, 12, 10), uint64] */;
    %269 = shape_of(%var_1514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%var_1514, dtype="uint64") /* ty=Tensor[(12, 12, 10), uint64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %272 = cast(%var_1514, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
    %273 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %274 = left_shift(%270, %271) /* ty=Tensor[(12, 12, 10), uint64] */;
    %275 = erf(%272) /* ty=Tensor[(12, 12, 10), float64] */;
    %276 = %273.0;
    (%274, %275, %276)
  };
  %277(%var_1531) /* ty=(Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_2418(%var_2416: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) {
  @func_2415(%var_2416) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */
}

def @func_1449(%var_1448: Tensor[(5, 8, 13), int8]) -> Tensor[(5, 8, 13), bool] {
  %283 = fn (%var_1435: Tensor[(5, 8, 13), int8]) -> Tensor[(5, 8, 13), bool] {
    %278 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
    %279 = cast(%var_1435, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
    %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(%278, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%281, %282) /* ty=Tensor[(5, 8, 13), bool] */
  };
  %283(%var_1448) /* ty=Tensor[(5, 8, 13), bool] */
}

def @func_2062() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %284 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %286 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %287 = cos(%285) /* ty=Tensor[(5, 8, 13), float64] */;
  %288 = %286.0;
  (%287, %288)
}

def @func_2750() -> (Tensor[(5, 8, 13), float32],) {
  %291 = fn () -> (Tensor[(5, 8, 13), float32],) {
    %289 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
    %290 = %289.1;
    (%290,)
  };
  %291() /* ty=(Tensor[(5, 8, 13), float32],) */
}

def @func_7753() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %296 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
    %292 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %293 = @func_5748() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) */;
    %294 = %292.0;
    %295 = %293.0;
    (%294, %295)
  };
  %296() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */
}

def @func_3339() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) {
  %303 = fn () -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) {
    %297 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
    %298 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %299 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
    %300 = %297.0;
    %301 = %298.0;
    %302 = %299.4;
    (%300, %301, %302)
  };
  %303() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */
}

def @func_7338() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  @func_7336() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */
}

def @func_7879() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  @func_7877() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_2649() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %307 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
    %304 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
    %305 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
    %306 = %304.1;
    (%305, %306)
  };
  %307() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_5890(%var_5889: Tensor[(1344), uint8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) {
  %316 = fn (%var_5874: Tensor[(1344), uint8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) {
    %308 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %309 = cast(%var_5874, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %310 = cast(%var_5874, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %311 = reshape(%309, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint8] */;
    %312 = reshape(%310, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint8] */;
    %313 = @func_4630(%311, %312) /* ty=(Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) */;
    %314 = %308.0;
    %315 = %313.1;
    (%314, %315, %var_5874)
  };
  %316(%var_5889) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) */
}

def @func_8401() -> (Tensor[(5, 8, 13), float32],) {
  %318 = fn () -> (Tensor[(5, 8, 13), float32],) {
    %317 = @func_6002() /* ty=Tensor[(5, 8, 13), float32] */;
    (%317,)
  };
  %318() /* ty=(Tensor[(5, 8, 13), float32],) */
}

def @func_6047() -> (Tensor[(5, 8, 13), float64],) {
  %321 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %319 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
    %320 = %319.0;
    (%320,)
  };
  %321() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_932(%var_916: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  %322 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %323 = %322.1;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %325 = cast(%var_916, dtype="float32") /* ty=Tensor[(110), float32] */;
  %326 = reshape(%325, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %327 = @func_54(%326) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %328 = tan(%324) /* ty=Tensor[(5, 8, 13), float32] */;
  %329 = %327.1;
  (%328, %329, %var_916)
}

def @func_3521() -> Tensor[(5, 8, 13), int8] {
  @func_3519() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_1642() -> (Tensor[(5, 8, 13), int8],) {
  %332 = fn () -> (Tensor[(5, 8, 13), int8],) {
    %330 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %331 = %330.1;
    (%331,)
  };
  %332() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_7128() -> Tensor[(5, 8, 13), float32] {
  %333 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
  %333.0
}

def @func_7336() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %334 = @func_6642() /* ty=Tensor[(5, 8, 13), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %336 = reshape(%335, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %337 = @func_2415(%336) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
  %338 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
  %339 = %337.1;
  (%334, %338, %339)
}

def @func_8262() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %345 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
    %340 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
    %341 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %342 = %340.0;
    %343 = %341.0;
    %344 = @func_2274() /* ty=Tensor[(5, 8, 13), float64] */;
    (%342, %343, %344)
  };
  %345() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_2232() -> (Tensor[(5, 8, 13), int8],) {
  %348 = fn () -> (Tensor[(5, 8, 13), int8],) {
    %346 = @func_1641() /* ty=(Tensor[(5, 8, 13), int8],) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_4016(%var_4015: Tensor[(240, 4), float32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) {
  %362 = fn (%var_3995: Tensor[(240, 4), float32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) {
    %349 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %350 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %351 = cast(%var_3995, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %352 = reshape(%351, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
    %353 = @func_557(%352) /* ty=(Tensor[(5, 12, 16), bool],) */;
    %354 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1440), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1440), uint64] */;
    %355 = reshape(%354, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint64] */;
    %356 = @func_1530(%355) /* ty=(Tensor[(12, 12, 10), uint64], Tensor[(12, 12, 10), float64], Tensor[(5, 8, 13), float64]) */;
    %357 = %349.0;
    %358 = %350.1;
    %359 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
    %360 = %353.0;
    %361 = %356.0;
    (%357, %358, %359, %360, %var_3995, %361, meta[relay.Constant][15] /* ty=Tensor[(1, 1440), uint64] */)
  };
  %362(%var_4015) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 12, 16), bool], Tensor[(240, 4), float32], Tensor[(12, 12, 10), uint64], Tensor[(1, 1440), uint64]) */
}

def @func_7372(%var_7363: Tensor[(104), bool], %var_7364: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(6, 99), float32], Tensor[(104), bool], Tensor[(156), float64]) {
  %363 = @func_5748() /* ty=(Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) */;
  %364 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 99), float32] */, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %365 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 99), float32] */, dtype="float32") /* ty=Tensor[(6, 99), float32] */;
  %366 = cast(%var_7363, dtype="bool") /* ty=Tensor[(104), bool] */;
  %367 = @func_5683() /* ty=Tensor[(5, 8, 13), bool] */;
  %368 = cast(%367, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %369 = cast(%var_7364, dtype="float64") /* ty=Tensor[(156), float64] */;
  %370 = reshape(%364, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float32] */;
  %371 = reshape(%365, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float32] */;
  %372 = reshape(%366, newshape=[104]) /* ty=Tensor[(104), bool] */;
  %373 = reshape(%368, newshape=[520]) /* ty=Tensor[(520), int8] */;
  %374 = reshape(%369, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %375 = @func_4344(%370, %371, %372, %373, %374) /* ty=(Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) */;
  %376 = %363.1;
  %377 = %375.4;
  (%376, %367, %377, meta[relay.Constant][16] /* ty=Tensor[(6, 99), float32] */, %var_7363, %var_7364)
}

def @func_8310() -> (Tensor[(5, 8, 13), float64],) {
  %380 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %378 = @func_6046() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %379 = %378.0;
    (%379,)
  };
  %380() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_6932() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %381 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %382 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %383 = %381.0;
  %384 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
  %385 = %382.1;
  (%383, %384, %385)
}

def @func_1777(%var_1775: Tensor[(13, 2, 6), float64], %var_1776: Tensor[(13, 2, 6), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  @func_1773(%var_1775, %var_1776) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */
}

def @func_7991(%var_7988: Tensor[(24, 26), int8], %var_7989: Tensor[(1344), uint8], %var_7990: Tensor[(24, 26), float32]) -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(13, 8, 6), int8], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), float64], Tensor[(24, 26), float32], Tensor[(24, 26), float64]) {
  @func_7986(%var_7988, %var_7989, %var_7990) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(13, 8, 6), int8], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), float64], Tensor[(24, 26), float32], Tensor[(24, 26), float64]) */
}

def @func_5339() -> (Tensor[(5, 8, 13), float64],) {
  %386 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %387 = %386.1;
  (%387,)
}

def @func_6298(%var_6296: Tensor[(6, 4, 15), uint32]) -> (Tensor[(6, 4, 15), uint32], Tensor[(16, 10, 6), bool], Tensor[(384), uint8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
  @func_6295(%var_6296) /* ty=(Tensor[(6, 4, 15), uint32], Tensor[(16, 10, 6), bool], Tensor[(384), uint8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */
}

def @func_2726(%var_2724: int8, %var_2725: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) {
  @func_2722(%var_2724, %var_2725) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */
}

def @func_1236() -> (Tensor[(5, 8, 13), float64],) {
  @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_6002() -> Tensor[(5, 8, 13), float32] {
  %388 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %388.1
}

def @func_6709() -> Tensor[(5, 8, 13), float64] {
  @func_6707() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_7986(%var_7930: Tensor[(24, 26), int8], %var_7940: Tensor[(1344), uint8], %var_7969: Tensor[(24, 26), float32]) -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(13, 8, 6), int8], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), float64], Tensor[(24, 26), float32], Tensor[(24, 26), float64]) {
  %389 = @func_7858() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %390 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %391 = cast(%var_7930, dtype="int8") /* ty=Tensor[(24, 26), int8] */;
  %392 = cast(meta[relay.Constant][18] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %393 = cast(meta[relay.Constant][19] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %394 = reshape(%390, newshape=[]) /* ty=int8 */;
  %395 = reshape(%391, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
  %396 = reshape(%392, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %397 = reshape(%393, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %398 = @func_860(%394, %395, %396, %397) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
  %399 = cast(%var_7940, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %400 = reshape(%399, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %401 = @func_5888(%400) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) */;
  %402 = @func_5232() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %403 = cast(%var_7930, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %404 = sinh(%403) /* ty=Tensor[(24, 26), float32] */;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %406 = cast(%var_7969, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %407 = shape_of(%404, dtype="int32") /* ty=Tensor[(2), int32] */;
  %408 = cast(%404, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %410 = divide(%408, %409) /* ty=Tensor[(24, 26), float64] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %412 = %389.0;
  %413 = @func_4875() /* ty=Tensor[(5, 8, 13), float64] */;
  %414 = %398.0;
  %415 = %401.0;
  %416 = %402.0;
  %417 = cosh(%405) /* ty=Tensor[(24, 26), float32] */;
  %418 = acosh(%411) /* ty=Tensor[(24, 26), float64] */;
  (%412, %413, %414, meta[relay.Constant][17] /* ty=int8 */, meta[relay.Constant][18] /* ty=Tensor[(156), float64] */, meta[relay.Constant][19] /* ty=Tensor[(110), float32] */, %415, %var_7940, %416, %417, %418)
}

def @func_2451(%var_2449: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), int8] {
  @func_2448(%var_2449) /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_7476() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), bool]) {
  %424 = fn () -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), bool]) {
    %419 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
    %420 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
    %421 = @func_7128() /* ty=Tensor[(5, 8, 13), float32] */;
    %422 = %419.1;
    %423 = %420.2;
    (%421, %422, %423)
  };
  %424() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), bool]) */
}

def @func_7859() -> (Tensor[(5, 8, 13), int8],) {
  %427 = fn () -> (Tensor[(5, 8, 13), int8],) {
    %425 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
    %426 = %425.0;
    (%426,)
  };
  %427() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_935(%var_933: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  @func_932(%var_933) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) */
}

def @func_5768(%var_5767: Tensor[(16, 6, 4), uint8]) -> (Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) {
  %435 = fn (%var_5751: Tensor[(16, 6, 4), uint8]) -> (Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) {
    %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 6, 4), uint8] */, dtype="uint8") /* ty=Tensor[(16, 6, 4), uint8] */;
    %429 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%var_5751, dtype="uint8") /* ty=Tensor[(16, 6, 4), uint8] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %432 = @func_3788() /* ty=(Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) */;
    %433 = left_shift(%430, %431) /* ty=Tensor[(16, 6, 4), uint8] */;
    %434 = %432.0;
    (%433, %434)
  };
  %435(%var_5767) /* ty=(Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) */
}

def @func_1285() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  %440 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
    %436 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %437 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
    %438 = %436.0;
    %439 = %437.1;
    (%438, %439)
  };
  %440() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */
}

def @func_2933() -> (Tensor[(5, 8, 13), float64],) {
  %443 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %441 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %442 = %441.0;
    (%442,)
  };
  %443() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_2513() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  @func_2511() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */
}

def @func_3880() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  @func_3878() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_6062() -> (Tensor[(5, 8, 13), float64],) {
  %444 = @func_5409() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %445 = %444.0;
  (%445,)
}

def @func_147(%var_125: int32, %var_126: Tensor[(11, 16, 8), int32]) -> (Tensor[(11, 16, 8), int32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  %446 = cast(%var_125, dtype="int32") /* ty=int32 */;
  %447 = cast(%var_126, dtype="int32") /* ty=Tensor[(11, 16, 8), int32] */;
  %448 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %449 = reshape(%448, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), float32] */;
  %450 = @func_54(%449) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */;
  %451 = left_shift(%446, %447) /* ty=Tensor[(11, 16, 8), int32] */;
  %452 = %450.1;
  (%451, %452, meta[relay.Constant][21] /* ty=Tensor[(110), float32] */)
}

def @func_5233() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %456 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
    %453 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %454 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
    %455 = %453.0;
    (%454, %455)
  };
  %456() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_2396() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
  %460 = fn () -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
    %457 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %458 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
    %459 = %457.0;
    (%458, %459)
  };
  %460() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */
}

def @func_5341() -> (Tensor[(5, 8, 13), float64],) {
  @func_5339() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_4161() -> Tensor[(5, 8, 13), float64] {
  %463 = fn () -> Tensor[(5, 8, 13), float64] {
    %461 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
    %462 = cast(%461, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    atan(%462) /* ty=Tensor[(5, 8, 13), float64] */
  };
  %463() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_2248() -> (Tensor[(5, 8, 13), float64],) {
  %464 = @func_1839() /* ty=Tensor[(5, 8, 13), float64] */;
  (%464,)
}

def @func_2186(%var_2184: Tensor[(12, 11, 5), float64], %var_2185: Tensor[(12, 11, 5), float64]) -> (Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) {
  %472 = fn (%var_2174: Tensor[(12, 11, 5), float64], %var_2175: Tensor[(12, 11, 5), float64]) -> (Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) {
    %465 = cast(%var_2175, dtype="float64") /* ty=Tensor[(12, 11, 5), float64] */;
    %466 = shape_of(%var_2174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%var_2174, dtype="float64") /* ty=Tensor[(12, 11, 5), float64] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %469 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %470 = divide(%467, %468) /* ty=Tensor[(12, 11, 5), float64] */;
    %471 = %469.0;
    (%470, %471)
  };
  %472(%var_2184, %var_2185) /* ty=(Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_4893(%var_4890: Tensor[(7, 3, 16), float64]) -> Tensor[(7, 3, 16), float64] {
  %473 = cast(%var_4890, dtype="float64") /* ty=Tensor[(7, 3, 16), float64] */;
  exp(%473) /* ty=Tensor[(7, 3, 16), float64] */
}

def @func_3191() -> Tensor[(5, 8, 13), float64] {
  @func_3189() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_5090(%var_5089: Tensor[(5, 8, 13), float64]) -> Tensor[(5, 8, 13), float32] {
  %479 = fn (%var_5079: Tensor[(5, 8, 13), float64]) -> Tensor[(5, 8, 13), float32] {
    %474 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
    %475 = cast(%var_5079, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
    %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%474, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%477, %478) /* ty=Tensor[(5, 8, 13), float32] */
  };
  %479(%var_5089) /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_5572() -> (Tensor[(5, 8, 13), float64],) {
  %480 = @func_3189() /* ty=Tensor[(5, 8, 13), float64] */;
  (%480,)
}

def @func_6434() -> Tensor[(5, 8, 13), float64] {
  %482 = fn () -> Tensor[(5, 8, 13), float64] {
    %481 = @func_5232() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
    %481.0
  };
  %482() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_8200() -> (Tensor[(5, 8, 13), float64],) {
  %483 = @func_4160() /* ty=Tensor[(5, 8, 13), float64] */;
  (%483,)
}

def @func_5024() -> Tensor[(5, 8, 13), int8] {
  %485 = fn () -> Tensor[(5, 8, 13), int8] {
    %484 = @func_2511() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
    %484.1
  };
  %485() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_7525() -> (Tensor[(5, 8, 13), int8],) {
  %488 = fn () -> (Tensor[(5, 8, 13), int8],) {
    %486 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
    %487 = %486.0;
    (%487,)
  };
  %488() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_8371() -> (Tensor[(5, 8, 13), float64],) {
  @func_8369() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_4830(%var_4828: int8, %var_4829: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), int8], Tensor[(110), float32], int8, Tensor[(156), float64]) {
  %497 = fn (%var_4824: int8, %var_4825: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), int8], Tensor[(110), float32], int8, Tensor[(156), float64]) {
    %489 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
    %490 = cast(%var_4824, dtype="int8") /* ty=int8 */;
    %491 = cast(%var_4825, dtype="float64") /* ty=Tensor[(156), float64] */;
    %492 = reshape(%490, newshape=[]) /* ty=int8 */;
    %493 = reshape(%491, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %494 = @func_2722(%492, %493) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
    %495 = %489.1;
    %496 = %494.4;
    (%495, %496, %var_4824, %var_4825)
  };
  %497(%var_4828, %var_4829) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(110), float32], int8, Tensor[(156), float64]) */
}

def @func_1210() -> Tensor[(5, 8, 13), float32] {
  %500 = fn () -> Tensor[(5, 8, 13), float32] {
    %498 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
    %499 = cast(%498, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
    acos(%499) /* ty=Tensor[(5, 8, 13), float32] */
  };
  %500() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_1593() -> Tensor[(5, 8, 13), float64] {
  @func_1591() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_8176(%var_8139: Tensor[(1344), uint8], %var_8151: Tensor[(216), uint8]) -> (Tensor[(5, 8, 13), int8], Tensor[(1), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), int8], Tensor[(3, 8, 9), bool], Tensor[(216), uint8], Tensor[(5, 8, 13), float64], Tensor[(60), bool]) {
  %501 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %502 = cast(%var_8139, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %503 = reshape(%502, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %504 = @func_5888(%503) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8], Tensor[(1344), uint8]) */;
  %505 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %506 = cast(%var_8151, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %507 = cast(%var_8151, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %508 = reshape(%506, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), uint8] */;
  %509 = reshape(%507, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), uint8] */;
  %510 = @func_4594(%508, %509) /* ty=(Tensor[(3, 8, 9), bool],) */;
  %511 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %512 = log(%511) /* ty=Tensor[(60), float32] */;
  %513 = cast(meta[relay.Constant][22] /* ty=Tensor[(1), float32] */, dtype="float32") /* ty=Tensor[(1), float32] */;
  %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %515 = reshape(%513, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), float32] */;
  %516 = reshape(%514, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %517 = @func_6131(%515, %516) /* ty=(Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="bool") /* ty=Tensor[(15, 1, 4), bool] */;
  %520 = shape_of(%512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %521 = cast(%512, dtype="bool") /* ty=Tensor[(60), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), bool] */;
  %523 = %501.0;
  %524 = @func_6707() /* ty=Tensor[(5, 8, 13), float64] */;
  %525 = %504.0;
  %526 = %505.1;
  %527 = %510.0;
  %528 = @func_6642() /* ty=Tensor[(5, 8, 13), float64] */;
  %529 = greater_equal(%521, %522) /* ty=Tensor[(60), bool] */;
  (%523, meta[relay.Constant][22] /* ty=Tensor[(1), float32] */, %524, %525, %var_8139, %526, %527, %var_8151, %528, %529)
}

def @func_4235() -> (Tensor[(5, 8, 13), bool], Tensor[(13, 4, 2), bool], Tensor[(104), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %530 = @func_3338() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), bool]) */;
  %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
  %533 = reshape(%531, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %534 = reshape(%532, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
  %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(104), bool] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %536 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %537 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %538 = %530.2;
  %539 = @func_1101(%533, %534) /* ty=Tensor[(13, 4, 2), bool] */;
  %540 = log10(%535) /* ty=Tensor[(104), float32] */;
  %541 = %536.0;
  %542 = %537.1;
  (%538, %539, %540, %541, %542)
}

def @func_151(%var_149: int32, %var_150: Tensor[(11, 16, 8), int32]) -> (Tensor[(11, 16, 8), int32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) {
  @func_147(%var_149, %var_150) /* ty=(Tensor[(11, 16, 8), int32], Tensor[(2, 5, 11), float64], Tensor[(110), float32]) */
}

def @func_2309() -> (Tensor[(5, 8, 13), float64],) {
  %545 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %543 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %544 = %543.0;
    (%544,)
  };
  %545() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_6896(%var_6894: float32, %var_6895: Tensor[(10, 15, 7), float32]) -> (Tensor[(10, 15, 7), bool], Tensor[(5, 8, 13), uint8], Tensor[(10, 15, 7), float32], Tensor[(5, 8, 13), float64]) {
  %557 = fn (%var_6855: float32, %var_6856: Tensor[(10, 15, 7), float32]) -> (Tensor[(10, 15, 7), bool], Tensor[(5, 8, 13), uint8], Tensor[(10, 15, 7), float32], Tensor[(5, 8, 13), float64]) {
    %546 = cast(%var_6855, dtype="bool") /* ty=bool */;
    %547 = cast(%var_6856, dtype="bool") /* ty=Tensor[(10, 15, 7), bool] */;
    %548 = @func_6405() /* ty=(Tensor[(5, 8, 13), uint8],) */;
    %549 = cast(%var_6856, dtype="bool") /* ty=Tensor[(10, 15, 7), bool] */;
    %550 = cast(%var_6855, dtype="bool") /* ty=bool */;
    %551 = greater(%549, %550) /* ty=Tensor[(10, 15, 7), bool] */;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
    %553 = less_equal(%546, %547) /* ty=Tensor[(10, 15, 7), bool] */;
    %554 = %548.0;
    %555 = exp(%552) /* ty=Tensor[(10, 15, 7), float32] */;
    %556 = @func_4875() /* ty=Tensor[(5, 8, 13), float64] */;
    (%553, %554, %555, %556)
  };
  %557(%var_6894, %var_6895) /* ty=(Tensor[(10, 15, 7), bool], Tensor[(5, 8, 13), uint8], Tensor[(10, 15, 7), float32], Tensor[(5, 8, 13), float64]) */
}

def @func_4633(%var_4631: Tensor[(12, 14, 8), uint8], %var_4632: Tensor[(12, 14, 8), uint8]) -> (Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) {
  %568 = fn (%var_4605: Tensor[(12, 14, 8), uint8], %var_4606: Tensor[(12, 14, 8), uint8]) -> (Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) {
    %558 = cast(%var_4606, dtype="uint8") /* ty=Tensor[(12, 14, 8), uint8] */;
    %559 = shape_of(%var_4605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%var_4605, dtype="uint8") /* ty=Tensor[(12, 14, 8), uint8] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %562 = cast(meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %563 = reshape(%562, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float32] */;
    %564 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %565 = logical_xor(%560, %561) /* ty=Tensor[(12, 14, 8), uint8] */;
    %566 = @func_2448(%563) /* ty=Tensor[(5, 8, 13), int8] */;
    %567 = %564.0;
    (%565, %566, meta[relay.Constant][25] /* ty=Tensor[(520), float32] */, %567)
  };
  %568(%var_4631, %var_4632) /* ty=(Tensor[(12, 14, 8), uint8], Tensor[(5, 8, 13), int8], Tensor[(520), float32], Tensor[(5, 8, 13), float64]) */
}

def @func_1672() -> (Tensor[(5, 8, 13), float32],) {
  %569 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  (%569,)
}

def @func_2250() -> (Tensor[(5, 8, 13), float64],) {
  @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_2276() -> Tensor[(5, 8, 13), float64] {
  @func_2274() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_3189() -> Tensor[(5, 8, 13), float64] {
  %570 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %570.0
}

def @func_1101(%var_1079: Tensor[(13, 4, 2), bool], %var_1080: Tensor[(13, 4, 2), bool]) -> Tensor[(13, 4, 2), bool] {
  %571 = cast(%var_1080, dtype="bool") /* ty=Tensor[(13, 4, 2), bool] */;
  %572 = shape_of(%var_1079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_1079, dtype="bool") /* ty=Tensor[(13, 4, 2), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%573, %574) /* ty=Tensor[(13, 4, 2), bool] */
}

def @func_5543(%var_5542: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), float64] {
  %581 = fn (%var_5531: Tensor[(5, 8, 13), float32]) -> Tensor[(5, 8, 13), float64] {
    %575 = @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %576 = %575.0;
    %577 = cast(%var_5531, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%579, %580) /* ty=Tensor[(5, 8, 13), float64] */
  };
  %581(%var_5542) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_6362(%var_6361: Tensor[(336), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(7, 3, 16), float64], Tensor[(336), float64], Tensor[(5, 8, 13), float64]) {
  %592 = fn (%var_6352: Tensor[(336), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(7, 3, 16), float64], Tensor[(336), float64], Tensor[(5, 8, 13), float64]) {
    %582 = @func_3042() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
    %583 = cast(%var_6352, dtype="float64") /* ty=Tensor[(336), float64] */;
    %584 = reshape(%583, newshape=[7, 3, 16]) /* ty=Tensor[(7, 3, 16), float64] */;
    %585 = %582.1;
    %586 = cast(%585, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
    %587 = reshape(%586, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
    %588 = @func_3081(%587) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
    %589 = @func_1591() /* ty=Tensor[(5, 8, 13), float64] */;
    %590 = @func_4893(%584) /* ty=Tensor[(7, 3, 16), float64] */;
    %591 = %588.0;
    (%589, %585, %590, %var_6352, %591)
  };
  %592(%var_6361) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(7, 3, 16), float64], Tensor[(336), float64], Tensor[(5, 8, 13), float64]) */
}

def @func_2925(%var_2923: Tensor[(12, 14, 2), int32], %var_2924: Tensor[(12, 14, 2), int32]) -> (Tensor[(12, 14, 2), bool], Tensor[(22, 5), int8], Tensor[(110), uint32], Tensor[(5, 8, 13), float64], Tensor[(12, 14, 2), float32]) {
  %606 = fn (%var_2899: Tensor[(12, 14, 2), int32], %var_2900: Tensor[(12, 14, 2), int32]) -> (Tensor[(12, 14, 2), bool], Tensor[(22, 5), int8], Tensor[(110), uint32], Tensor[(5, 8, 13), float64], Tensor[(12, 14, 2), float32]) {
    %593 = cast(%var_2900, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
    %594 = shape_of(%var_2899, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%var_2899, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %597 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %598 = reshape(%597, newshape=[110]) /* ty=Tensor[(110), uint32] */;
    %599 = @func_2860(%598) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
    %600 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %601 = cast(%var_2900, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
    %602 = not_equal(%595, %596) /* ty=Tensor[(12, 14, 2), bool] */;
    %603 = %599.1;
    %604 = %600.0;
    %605 = log10(%601) /* ty=Tensor[(12, 14, 2), float32] */;
    (%602, %603, meta[relay.Constant][26] /* ty=Tensor[(110), uint32] */, %604, %605)
  };
  %606(%var_2923, %var_2924) /* ty=(Tensor[(12, 14, 2), bool], Tensor[(22, 5), int8], Tensor[(110), uint32], Tensor[(5, 8, 13), float64], Tensor[(12, 14, 2), float32]) */
}

def @func_1591() -> Tensor[(5, 8, 13), float64] {
  %607 = @func_1234() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %608 = %607.0;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  asinh(%609) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_4765(%var_4763: Tensor[(11, 2, 14), int64], %var_4764: Tensor[(11, 2, 14), int64]) -> (Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) {
  %635 = fn (%var_4665: Tensor[(11, 2, 14), int64], %var_4666: Tensor[(11, 2, 14), int64]) -> (Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) {
    %610 = cast(%var_4666, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %611 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%var_4665, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = not_equal(%612, %613) /* ty=Tensor[(11, 2, 14), bool] */;
    %615 = cast(%614, dtype="uint32") /* ty=Tensor[(11, 2, 14), uint32] */;
    %616 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%var_4665, dtype="uint32") /* ty=Tensor[(11, 2, 14), uint32] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %619 = bitwise_or(%617, %618) /* ty=Tensor[(11, 2, 14), uint32] */;
    %620 = cast(%619, dtype="float64") /* ty=Tensor[(11, 2, 14), float64] */;
    %621 = shape_of(%var_4665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%var_4665, dtype="float64") /* ty=Tensor[(11, 2, 14), float64] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %624 = floor_divide(%622, %623) /* ty=Tensor[(11, 2, 14), float64] */;
    %625 = cast(%624, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %626 = shape_of(%var_4666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%var_4666, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = cast(%619, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
    %630 = log2(%629) /* ty=Tensor[(11, 2, 14), float32] */;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
    %632 = logical_or(%627, %628) /* ty=Tensor[(11, 2, 14), bool] */;
    %633 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
    %634 = log(%631) /* ty=Tensor[(11, 2, 14), float32] */;
    (%632, %633, %634)
  };
  %635(%var_4763, %var_4764) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(5, 8, 13), float64], Tensor[(11, 2, 14), float32]) */
}

def @func_4875() -> Tensor[(5, 8, 13), float64] {
  %636 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %636.0
}

def @func_374(%var_373: Tensor[(13, 6, 2), float64]) -> Tensor[(13, 6, 2), float64] {
  %640 = fn (%var_347: Tensor[(13, 6, 2), float64]) -> Tensor[(13, 6, 2), float64] {
    %637 = cast(%var_347, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
    %638 = cosh(%637) /* ty=Tensor[(13, 6, 2), float64] */;
    %639 = cast(%638, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
    exp(%639) /* ty=Tensor[(13, 6, 2), float64] */
  };
  %640(%var_373) /* ty=Tensor[(13, 6, 2), float64] */
}

def @func_6407() -> (Tensor[(5, 8, 13), uint8],) {
  @func_6405() /* ty=(Tensor[(5, 8, 13), uint8],) */
}

def @func_3878() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %641 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
  %642 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %643 = %641.0;
  %644 = @func_3401() /* ty=Tensor[(5, 8, 13), float64] */;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_5921() -> Tensor[(5, 8, 13), float32] {
  @func_5919() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_7066(%var_7063: Tensor[(13, 2, 11), float64]) -> Tensor[(13, 2, 11), float64] {
  %646 = cast(%var_7063, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  erf(%646) /* ty=Tensor[(13, 2, 11), float64] */
}

def @func_1674() -> (Tensor[(5, 8, 13), float32],) {
  @func_1672() /* ty=(Tensor[(5, 8, 13), float32],) */
}

def @func_5685() -> Tensor[(5, 8, 13), bool] {
  @func_5683() /* ty=Tensor[(5, 8, 13), bool] */
}

def @func_3779() -> Tensor[(5, 8, 13), float64] {
  %648 = fn () -> Tensor[(5, 8, 13), float64] {
    %647 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %647.0
  };
  %648() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_4045() -> (Tensor[(5, 8, 13), float32],) {
  @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */
}

def @func_7069(%var_7067: Tensor[(13, 2, 11), float64]) -> Tensor[(13, 2, 11), float64] {
  @func_7066(%var_7067) /* ty=Tensor[(13, 2, 11), float64] */
}

def @main(%var_8486: bool) -> (Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), uint32]) {
  %649 = cast(%var_8486, dtype="bool") /* ty=bool */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 5, 6), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %651 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 5, 6), bool] */, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
  %652 = cast(%var_8486, dtype="uint32") /* ty=uint32 */;
  %653 = logical_or(%649, %650) /* ty=Tensor[(16, 5, 6), bool] */;
  %654 = multiply(%651, %652) /* ty=Tensor[(16, 5, 6), uint32] */;
  (%653, %654)
}

def @func_2511() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %655 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %656 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %657 = %655.1;
  (%656, %657)
}

def @func_5586() -> Tensor[(7, 10, 10), float32] {
  %659 = fn () -> Tensor[(7, 10, 10), float32] {
    %658 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
    sinh(%658) /* ty=Tensor[(7, 10, 10), float32] */
  };
  %659() /* ty=Tensor[(7, 10, 10), float32] */
}

def @func_3325() -> (Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) {
  @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */
}

def @func_57(%var_55: Tensor[(2, 5, 11), float32]) -> (Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) {
  @func_54(%var_55) /* ty=(Tensor[(2, 5, 11), float32], Tensor[(2, 5, 11), float64]) */
}

def @func_4973(%var_4971: Tensor[(11, 1, 7), float32]) -> (Tensor[(11, 1, 7), float32],) {
  @func_4970(%var_4971) /* ty=(Tensor[(11, 1, 7), float32],) */
}

def @func_3895() -> (Tensor[(16, 10, 6), float64],) {
  @func_3893() /* ty=(Tensor[(16, 10, 6), float64],) */
}

def @func_3579(%var_3577: Tensor[(4, 2, 10), float32], %var_3578: Tensor[(4, 2, 10), float32]) -> Tensor[(4, 2, 10), float32] {
  @func_3575(%var_3577, %var_3578) /* ty=Tensor[(4, 2, 10), float32] */
}

def @func_8470() -> Tensor[(5, 8, 13), int8] {
  %661 = fn () -> Tensor[(5, 8, 13), int8] {
    %660 = @func_6962() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
    %660.0
  };
  %661() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_7603(%var_7601: int16, %var_7602: Tensor[(1, 6, 4), int16]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(6, 6, 4), bool]) {
  @func_7599(%var_7601, %var_7602) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], Tensor[(110), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(6, 6, 4), bool]) */
}

def @func_3643(%var_3616: Tensor[(5, 8, 13), bool]) -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %662 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %665 = reshape(%664, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %666 = @func_1447(%665) /* ty=Tensor[(5, 8, 13), bool] */;
  %667 = cast(%666, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %668 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%663, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = logical_or(%669, %670) /* ty=Tensor[(5, 8, 13), bool] */;
  %672 = cast(%var_3616, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="bool") /* ty=Tensor[(5, 8, 13), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %676 = greater_equal(%674, %675) /* ty=Tensor[(5, 8, 13), bool] */;
  %677 = @func_1481() /* ty=Tensor[(5, 8, 13), int8] */;
  %678 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  (%676, %677, %678)
}

def @func_6528() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %682 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
    %679 = @func_3835() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) */;
    %680 = @func_6433() /* ty=Tensor[(5, 8, 13), float64] */;
    %681 = %679.1;
    (%680, %681)
  };
  %682() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_7833() -> Tensor[(5, 8, 13), float32] {
  %683 = fn () -> Tensor[(5, 8, 13), float32] {
    @func_7128() /* ty=Tensor[(5, 8, 13), float32] */
  };
  %683() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_3402() -> Tensor[(5, 8, 13), float64] {
  %685 = fn () -> Tensor[(5, 8, 13), float64] {
    %684 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %684.0
  };
  %685() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_2722(%var_2692: int8, %var_2694: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) {
  %686 = @func_1924() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %687 = cast(%var_2692, dtype="int8") /* ty=int8 */;
  %688 = cast(meta[relay.Constant][29] /* ty=Tensor[(624), int8] */, dtype="int8") /* ty=Tensor[(624), int8] */;
  %689 = cast(%var_2694, dtype="float64") /* ty=Tensor[(156), float64] */;
  %690 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), float32] */, dtype="float32") /* ty=Tensor[(110), float32] */;
  %691 = reshape(%687, newshape=[]) /* ty=int8 */;
  %692 = reshape(%688, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
  %693 = reshape(%689, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %694 = reshape(%690, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %695 = @func_860(%691, %692, %693, %694) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
  %696 = %686.0;
  %697 = cast(%696, dtype="int8") /* ty=Tensor[(5, 8, 13), int8] */;
  %698 = reshape(%697, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
  %699 = @func_1447(%698) /* ty=Tensor[(5, 8, 13), bool] */;
  %700 = cast(%var_2692, dtype="float32") /* ty=float32 */;
  %701 = cast(%699, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %702 = %695.1;
  %703 = multiply(%700, %701) /* ty=Tensor[(5, 8, 13), float32] */;
  (%696, %702, meta[relay.Constant][29] /* ty=Tensor[(624), int8] */, %var_2694, meta[relay.Constant][30] /* ty=Tensor[(110), float32] */, %703)
}

def @func_6295(%var_6236: Tensor[(6, 4, 15), uint32]) -> (Tensor[(6, 4, 15), uint32], Tensor[(16, 10, 6), bool], Tensor[(384), uint8], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) {
  %704 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %705 = cast(%var_6236, dtype="uint32") /* ty=Tensor[(6, 4, 15), uint32] */;
  %706 = cast(meta[relay.Constant][32] /* ty=Tensor[(384), uint8] */, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %707 = reshape(%706, newshape=[16, 6, 4]) /* ty=Tensor[(16, 6, 4), uint8] */;
  %708 = @func_5766(%707) /* ty=(Tensor[(16, 6, 4), uint8], Tensor[(16, 10, 6), bool]) */;
  %709 = @func_6046() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %710 = %709.0;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
  %712 = @func_2648() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */;
  %713 = minimum(%704, %705) /* ty=Tensor[(6, 4, 15), uint32] */;
  %714 = %708.1;
  %715 = log(%711) /* ty=Tensor[(5, 8, 13), float32] */;
  %716 = %712.1;
  (%713, %714, meta[relay.Constant][32] /* ty=Tensor[(384), uint8] */, %715, %716)
}

def @func_1839() -> Tensor[(5, 8, 13), float64] {
  %717 = @func_1284() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %718 = %717.1;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  sqrt(%719) /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_4877() -> Tensor[(5, 8, 13), float64] {
  @func_4875() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_7766() -> (Tensor[(5, 8, 13), int8],) {
  %722 = fn () -> (Tensor[(5, 8, 13), int8],) {
    %720 = @func_1940() /* ty=(Tensor[(5, 8, 13), int8],) */;
    %721 = %720.0;
    (%721,)
  };
  %722() /* ty=(Tensor[(5, 8, 13), int8],) */
}

def @func_6962() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  %723 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
  %724 = @func_3519() /* ty=Tensor[(5, 8, 13), int8] */;
  %725 = %723.1;
  (%724, %725)
}

def @func_3043() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
  %730 = fn () -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) {
    %726 = @func_2932() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %727 = @func_2395() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32]) */;
    %728 = %726.0;
    %729 = %727.1;
    (%728, %729)
  };
  %730() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32]) */
}

def @func_7002(%var_6999: Tensor[(7, 2, 12), int8], %var_7000: Tensor[(7, 2, 12), int8], %var_7001: Tensor[(156), float64]) -> (Tensor[(7, 2, 12), int8], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(7, 2, 12), uint64]) {
  %747 = fn (%var_6975: Tensor[(7, 2, 12), int8], %var_6976: Tensor[(7, 2, 12), int8], %var_6981: Tensor[(156), float64]) -> (Tensor[(7, 2, 12), int8], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(7, 2, 12), uint64]) {
    %731 = cast(%var_6976, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
    %732 = shape_of(%var_6975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%var_6975, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %735 = cast(%var_6981, dtype="float64") /* ty=Tensor[(156), float64] */;
    %736 = cast(%var_6981, dtype="float64") /* ty=Tensor[(156), float64] */;
    %737 = reshape(%735, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
    %738 = reshape(%736, newshape=[13, 2, 6]) /* ty=Tensor[(13, 2, 6), float64] */;
    %739 = @func_1773(%737, %738) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 2, 6), float64], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */;
    %740 = cast(%var_6976, dtype="uint64") /* ty=Tensor[(7, 2, 12), uint64] */;
    %741 = shape_of(%var_6975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%var_6975, dtype="uint64") /* ty=Tensor[(7, 2, 12), uint64] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %744 = right_shift(%733, %734) /* ty=Tensor[(7, 2, 12), int8] */;
    %745 = %739.3;
    %746 = minimum(%742, %743) /* ty=Tensor[(7, 2, 12), uint64] */;
    (%744, %745, %var_6981, %746)
  };
  %747(%var_6999, %var_7000, %var_7001) /* ty=(Tensor[(7, 2, 12), int8], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(7, 2, 12), uint64]) */
}

def @func_3835() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float32], Tensor[(110), uint32], Tensor[(110), uint32]) {
  %748 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %749 = cast(meta[relay.Constant][33] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %750 = reshape(%749, newshape=[110]) /* ty=Tensor[(110), uint32] */;
  %751 = @func_2860(%750) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(22, 5), int8], Tensor[(110), uint32]) */;
  %752 = %748.0;
  %753 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
  %754 = %751.2;
  (%752, %753, %754, meta[relay.Constant][33] /* ty=Tensor[(110), uint32] */)
}

def @func_6064() -> (Tensor[(5, 8, 13), float64],) {
  @func_6062() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_3575(%var_3568: Tensor[(4, 2, 10), float32], %var_3569: Tensor[(4, 2, 10), float32]) -> Tensor[(4, 2, 10), float32] {
  %755 = cast(%var_3569, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %756 = shape_of(%var_3568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_3568, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%757, %758) /* ty=Tensor[(4, 2, 10), float32] */
}

def @func_3893() -> (Tensor[(16, 10, 6), float64],) {
  %759 = @func_3788() /* ty=(Tensor[(16, 10, 6), bool], Tensor[(16, 10, 6), float64]) */;
  %760 = %759.1;
  (%760,)
}

def @func_7877() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) {
  %761 = @func_2248() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %762 = @func_6062() /* ty=(Tensor[(5, 8, 13), float64],) */;
  %763 = %761.0;
  %764 = %762.0;
  (%763, %764)
}

def @func_3081(%var_3065: Tensor[(5, 8, 13), int8]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) {
  %765 = @func_2231() /* ty=(Tensor[(5, 8, 13), int8],) */;
  %766 = %765.0;
  %767 = cast(%var_3065, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %771 = cast(%var_3065, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %772 = reshape(%771, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %773 = @func_2415(%772) /* ty=(Tensor[(5, 8, 13), uint16], Tensor[(5, 8, 13), bool]) */;
  %774 = floor_divide(%769, %770) /* ty=Tensor[(5, 8, 13), float64] */;
  %775 = %773.1;
  (%774, %775)
}

def @func_6177(%var_6176: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(12, 11, 5), float64], Tensor[(5, 132), float64]) {
  %788 = fn (%var_6159: Tensor[(110), uint32]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(12, 11, 5), float64], Tensor[(5, 132), float64]) {
    %776 = @func_6062() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %777 = cast(%var_6159, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %778 = reshape(%777, newshape=[110]) /* ty=Tensor[(110), uint32] */;
    %779 = @func_4432(%778) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(110), uint32]) */;
    %780 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 132), float64] */, dtype="float64") /* ty=Tensor[(5, 132), float64] */;
    %781 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 132), float64] */, dtype="float64") /* ty=Tensor[(5, 132), float64] */;
    %782 = reshape(%780, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), float64] */;
    %783 = reshape(%781, newshape=[12, 11, 5]) /* ty=Tensor[(12, 11, 5), float64] */;
    %784 = @func_2183(%782, %783) /* ty=(Tensor[(12, 11, 5), float64], Tensor[(5, 8, 13), float32]) */;
    %785 = %776.0;
    %786 = %779.2;
    %787 = %784.0;
    (%785, %786, %var_6159, %787, meta[relay.Constant][34] /* ty=Tensor[(5, 132), float64] */)
  };
  %788(%var_6176) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(110), uint32], Tensor[(12, 11, 5), float64], Tensor[(5, 132), float64]) */
}

def @func_7130() -> Tensor[(5, 8, 13), float32] {
  @func_7128() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_8180(%var_8178: Tensor[(1344), uint8], %var_8179: Tensor[(216), uint8]) -> (Tensor[(5, 8, 13), int8], Tensor[(1), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), int8], Tensor[(3, 8, 9), bool], Tensor[(216), uint8], Tensor[(5, 8, 13), float64], Tensor[(60), bool]) {
  @func_8176(%var_8178, %var_8179) /* ty=(Tensor[(5, 8, 13), int8], Tensor[(1), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(1344), uint8], Tensor[(5, 8, 13), int8], Tensor[(3, 8, 9), bool], Tensor[(216), uint8], Tensor[(5, 8, 13), float64], Tensor[(60), bool]) */
}

def @func_1002() -> Tensor[(5, 8, 13), int8] {
  @func_1000() /* ty=Tensor[(5, 8, 13), int8] */
}

def @func_3363(%var_3358: Tensor[(2, 7, 2), float64]) -> Tensor[(2, 7, 2), float64] {
  %789 = cast(%var_3358, dtype="float64") /* ty=Tensor[(2, 7, 2), float64] */;
  sqrt(%789) /* ty=Tensor[(2, 7, 2), float64] */
}

def @func_6707() -> Tensor[(5, 8, 13), float64] {
  @func_3401() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_5868(%var_5866: int8, %var_5867: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) {
  %807 = fn (%var_5827: int8, %var_5828: Tensor[(156), float64]) -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) {
    %790 = @func_2308() /* ty=(Tensor[(5, 8, 13), float64],) */;
    %791 = @func_4043() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %792 = @func_5247() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %793 = cast(%var_5827, dtype="int8") /* ty=int8 */;
    %794 = cast(%var_5828, dtype="float64") /* ty=Tensor[(156), float64] */;
    %795 = reshape(%793, newshape=[]) /* ty=int8 */;
    %796 = reshape(%794, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %797 = @func_2722(%795, %796) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
    %798 = cast(meta[relay.Constant][35] /* ty=Tensor[(28, 1), float64] */, dtype="float64") /* ty=Tensor[(28, 1), float64] */;
    %799 = reshape(%798, newshape=[2, 7, 2]) /* ty=Tensor[(2, 7, 2), float64] */;
    %800 = %790.0;
    %801 = %791.0;
    %802 = @func_3181() /* ty=Tensor[(5, 8, 13), float32] */;
    %803 = %792.0;
    %804 = %797.1;
    %805 = @func_3519() /* ty=Tensor[(5, 8, 13), int8] */;
    %806 = @func_3363(%799) /* ty=Tensor[(2, 7, 2), float64] */;
    (%800, %801, %802, %803, %804, %var_5827, %var_5828, %805, %806, meta[relay.Constant][35] /* ty=Tensor[(28, 1), float64] */)
  };
  %807(%var_5866, %var_5867) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), float32], Tensor[(13, 6, 2), float64], int8, Tensor[(156), float64], Tensor[(5, 8, 13), int8], Tensor[(2, 7, 2), float64], Tensor[(28, 1), float64]) */
}

def @func_5167() -> Tensor[(5, 8, 13), float32] {
  %809 = fn () -> Tensor[(5, 8, 13), float32] {
    %808 = @func_3720() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8]) */;
    %808.0
  };
  %809() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_5248() -> (Tensor[(5, 8, 13), float32],) {
  %813 = fn () -> (Tensor[(5, 8, 13), float32],) {
    %810 = @func_3420() /* ty=Tensor[(5, 8, 13), float64] */;
    %811 = cast(%810, dtype="float32") /* ty=Tensor[(5, 8, 13), float32] */;
    %812 = atanh(%811) /* ty=Tensor[(5, 8, 13), float32] */;
    (%812,)
  };
  %813() /* ty=(Tensor[(5, 8, 13), float32],) */
}

def @func_5410() -> (Tensor[(5, 8, 13), float64],) {
  %816 = fn () -> (Tensor[(5, 8, 13), float64],) {
    %814 = @func_3878() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %815 = %814.1;
    (%815,)
  };
  %816() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_6964() -> (Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) {
  @func_6962() /* ty=(Tensor[(5, 8, 13), int8], Tensor[(5, 8, 13), int8]) */
}

def @func_5558() -> Tensor[(5, 8, 13), float32] {
  %818 = fn () -> Tensor[(5, 8, 13), float32] {
    %817 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %817.0
  };
  %818() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_8369() -> (Tensor[(5, 8, 13), float64],) {
  %819 = @func_8261() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
  %820 = %819.1;
  (%820,)
}

def @func_4350(%var_4345: Tensor[(9, 6, 11), float32], %var_4346: Tensor[(9, 6, 11), float32], %var_4347: Tensor[(104), bool], %var_4348: Tensor[(520), int8], %var_4349: Tensor[(156), float64]) -> (Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) {
  %853 = fn (%var_4240: Tensor[(9, 6, 11), float32], %var_4241: Tensor[(9, 6, 11), float32], %var_4250: Tensor[(104), bool], %var_4284: Tensor[(520), int8], %var_4329: Tensor[(156), float64]) -> (Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) {
    %821 = cast(%var_4250, dtype="bool") /* ty=Tensor[(104), bool] */;
    %822 = cast(%var_4250, dtype="bool") /* ty=Tensor[(104), bool] */;
    %823 = reshape(%821, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
    %824 = reshape(%822, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), bool] */;
    %825 = cast(%var_4241, dtype="float32") /* ty=Tensor[(9, 6, 11), float32] */;
    %826 = shape_of(%var_4240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(%var_4240, dtype="float32") /* ty=Tensor[(9, 6, 11), float32] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %829 = power(%827, %828) /* ty=Tensor[(9, 6, 11), float32] */;
    %830 = cast(%829, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
    %831 = acosh(%830) /* ty=Tensor[(9, 6, 11), float64] */;
    %832 = cast(%var_4240, dtype="int32") /* ty=Tensor[(9, 6, 11), int32] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %834 = cast(%831, dtype="int32") /* ty=Tensor[(9, 6, 11), int32] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %836 = cast(%var_4284, dtype="int8") /* ty=Tensor[(520), int8] */;
    %837 = reshape(%836, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), int8] */;
    %838 = @func_3081(%837) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), bool]) */;
    %839 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 6, 11), float64] */, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
    %840 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(%831, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %843 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %844 = cast(%var_4329, dtype="float64") /* ty=Tensor[(156), float64] */;
    %845 = reshape(%843, newshape=[]) /* ty=int8 */;
    %846 = reshape(%844, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %847 = @func_2722(%845, %846) /* ty=(Tensor[(5, 8, 13), float64], Tensor[(13, 6, 2), float64], Tensor[(624), int8], Tensor[(156), float64], Tensor[(110), float32], Tensor[(5, 8, 13), float32]) */;
    %848 = @func_1101(%823, %824) /* ty=Tensor[(13, 4, 2), bool] */;
    %849 = minimum(%834, %835) /* ty=Tensor[(9, 6, 11), int32] */;
    %850 = %838.1;
    %851 = equal(%841, %842) /* ty=Tensor[(9, 6, 11), bool] */;
    %852 = %847.2;
    (%848, %var_4250, %849, %850, %var_4284, %851, %852, meta[relay.Constant][37] /* ty=int8 */, %var_4329)
  };
  %853(%var_4345, %var_4346, %var_4347, %var_4348, %var_4349) /* ty=(Tensor[(13, 4, 2), bool], Tensor[(104), bool], Tensor[(9, 6, 11), int32], Tensor[(5, 8, 13), bool], Tensor[(520), int8], Tensor[(9, 6, 11), bool], Tensor[(624), int8], int8, Tensor[(156), float64]) */
}

def @func_6134(%var_6132: Tensor[(1, 1, 1), float32], %var_6133: Tensor[(15, 1, 4), float32]) -> (Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) {
  %859 = fn (%var_6113: Tensor[(1, 1, 1), float32], %var_6114: Tensor[(15, 1, 4), float32]) -> (Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) {
    %854 = cast(%var_6113, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
    %855 = cast(%var_6114, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
    %856 = cast(%var_6113, dtype="float64") /* ty=Tensor[(1, 1, 1), float64] */;
    %857 = floor_divide(%854, %855) /* ty=Tensor[(15, 1, 4), float32] */;
    %858 = acos(%856) /* ty=Tensor[(1, 1, 1), float64] */;
    (%857, %858)
  };
  %859(%var_6132, %var_6133) /* ty=(Tensor[(15, 1, 4), float32], Tensor[(1, 1, 1), float64]) */
}

def @func_3366(%var_3364: Tensor[(2, 7, 2), float64]) -> Tensor[(2, 7, 2), float64] {
  @func_3363(%var_3364) /* ty=Tensor[(2, 7, 2), float64] */
}

def @func_1105(%var_1103: Tensor[(13, 4, 2), bool], %var_1104: Tensor[(13, 4, 2), bool]) -> Tensor[(13, 4, 2), bool] {
  @func_1101(%var_1103, %var_1104) /* ty=Tensor[(13, 4, 2), bool] */
}

def @func_7792(%var_7791: Tensor[(7, 11, 3), float32]) -> (Tensor[(7, 11, 3), float32],) {
  %862 = fn (%var_7786: Tensor[(7, 11, 3), float32]) -> (Tensor[(7, 11, 3), float32],) {
    %860 = cast(%var_7786, dtype="float32") /* ty=Tensor[(7, 11, 3), float32] */;
    %861 = sin(%860) /* ty=Tensor[(7, 11, 3), float32] */;
    (%861,)
  };
  %862(%var_7791) /* ty=(Tensor[(7, 11, 3), float32],) */
}

def @func_4896(%var_4894: Tensor[(7, 3, 16), float64]) -> Tensor[(7, 3, 16), float64] {
  @func_4893(%var_4894) /* ty=Tensor[(7, 3, 16), float64] */
}

def @func_3182() -> Tensor[(5, 8, 13), float32] {
  %864 = fn () -> Tensor[(5, 8, 13), float32] {
    %863 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %863.0
  };
  %864() /* ty=Tensor[(5, 8, 13), float32] */
}

def @func_6643() -> Tensor[(5, 8, 13), float64] {
  %866 = fn () -> Tensor[(5, 8, 13), float64] {
    %865 = @func_2062() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64]) */;
    %865.0
  };
  %866() /* ty=Tensor[(5, 8, 13), float64] */
}

def @func_1234() -> (Tensor[(5, 8, 13), float64],) {
  %867 = @func_1209() /* ty=Tensor[(5, 8, 13), float32] */;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %869 = log2(%868) /* ty=Tensor[(5, 8, 13), float64] */;
  (%869,)
}

def @func_7113(%var_7112: Tensor[(6, 1, 9), float32]) -> (Tensor[(6, 1, 9), float32],) {
  %872 = fn (%var_7093: Tensor[(6, 1, 9), float32]) -> (Tensor[(6, 1, 9), float32],) {
    %870 = cast(%var_7093, dtype="float32") /* ty=Tensor[(6, 1, 9), float32] */;
    %871 = sigmoid(%870) /* ty=Tensor[(6, 1, 9), float32] */;
    (%871,)
  };
  %872(%var_7112) /* ty=(Tensor[(6, 1, 9), float32],) */
}

def @func_7723() -> (Tensor[(5, 8, 13), float64],) {
  @func_7721() /* ty=(Tensor[(5, 8, 13), float64],) */
}

def @func_5748() -> (Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), float64]) {
  %873 = @func_3323() /* ty=(Tensor[(5, 8, 13), float32], Tensor[(5, 8, 13), int8], Tensor[(156), float64], Tensor[(5, 8, 13), bool], Tensor[(5, 8, 13), bool]) */;
  %874 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %876 = %873.3;
  %877 = cosh(%875) /* ty=Tensor[(5, 8, 13), float64] */;
  (%876, %877)
}

def @func_1940() -> (Tensor[(5, 8, 13), int8],) {
  %878 = @func_1000() /* ty=Tensor[(5, 8, 13), int8] */;
  (%878,)
}

def @func_6619(%var_6616: int8, %var_6617: Tensor[(8, 78), int8], %var_6618: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(8, 78), float32], Tensor[(5, 8, 13), float32]) {
  %895 = fn (%var_6591: int8, %var_6592: Tensor[(8, 78), int8], %var_6594: Tensor[(110), float32]) -> (Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(8, 78), float32], Tensor[(5, 8, 13), float32]) {
    %879 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %880 = cast(%var_6591, dtype="int8") /* ty=int8 */;
    %881 = cast(%var_6592, dtype="int8") /* ty=Tensor[(8, 78), int8] */;
    %882 = cast(meta[relay.Constant][38] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %883 = cast(%var_6594, dtype="float32") /* ty=Tensor[(110), float32] */;
    %884 = reshape(%880, newshape=[]) /* ty=int8 */;
    %885 = reshape(%881, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int8] */;
    %886 = reshape(%882, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %887 = reshape(%883, newshape=[110]) /* ty=Tensor[(110), float32] */;
    %888 = @func_860(%884, %885, %886, %887) /* ty=(Tensor[(13, 8, 6), int8], Tensor[(13, 6, 2), float64], Tensor[(156), float64], Tensor[(2, 5, 11), float32], Tensor[(110), float32]) */;
    %889 = cast(%var_6592, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
    %890 = @func_2749() /* ty=(Tensor[(5, 8, 13), float32],) */;
    %891 = %879.0;
    %892 = %888.3;
    %893 = rsqrt(%889) /* ty=Tensor[(8, 78), float32] */;
    %894 = %890.0;
    (%891, %892, %var_6591, meta[relay.Constant][38] /* ty=Tensor[(156), float64] */, %var_6594, %893, %894)
  };
  %895(%var_6616, %var_6617, %var_6618) /* ty=(Tensor[(5, 8, 13), float32], Tensor[(2, 5, 11), float32], int8, Tensor[(156), float64], Tensor[(110), float32], Tensor[(8, 78), float32], Tensor[(5, 8, 13), float32]) */
}

def @func_6934() -> (Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) {
  @func_6932() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */
}

def @func_1000() -> Tensor[(5, 8, 13), int8] {
  %896 = @func_782() /* ty=(Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int8]) */;
  %896.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen186/build/output.py:2710: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen186/build/output.py", line 2715, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(480) tvmgen_default_fused_logical_or_kernel0(signed char* __restrict__ T_logical_or, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_or[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(0)]) || ((bool)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(480) tvmgen_default_fused_cast_multiply_kernel0(uint* __restrict__ T_multiply, uint* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * ((uint)((bool)placeholder1[(0)])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

