==========mod==========
#[version = "0.0.5"]
def @func_7268() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %0 = @func_7095() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %2 = reshape(%1, newshape=[]) /* ty=int32 */;
  %3 = @func_1013(%2) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %4 = @func_3031() /* ty=Tensor[(14, 3), int32] */;
  %5 = %0.0;
  %6 = %3.2;
  (%4, %5, %6, 2 /* ty=int32 */)
}

def @func_8403() -> Tensor[(12, 1), int16] {
  %7 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %8 = %7.2;
  %9 = cast(%8, dtype="int16") /* ty=int16 */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 1), int32] */, dtype="int16") /* ty=Tensor[(12, 1), int16] */;
  add(%9, %10) /* ty=Tensor[(12, 1), int16] */
}

def @func_9057() -> (Tensor[(96), uint64],) {
  %11 = @func_6453() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) */;
  %12 = %11.1;
  (%12,)
}

def @func_2039(%var_2004: Tensor[(7, 16, 4), float32], %var_2028: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) {
  %13 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
  %14 = cast(%var_2004, dtype="uint32") /* ty=Tensor[(7, 16, 4), uint32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="uint32") /* ty=Tensor[(7, 16, 4), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = left_shift(%16, %17) /* ty=Tensor[(7, 16, 4), uint32] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 4), uint32] */, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = cast(%var_2028, dtype="uint16") /* ty=Tensor[(7, 16, 4), uint16] */;
  %24 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%13, dtype="uint16") /* ty=Tensor[(7, 16, 4), uint16] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %27 = cast(%var_2028, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %28 = logical_and(%21, %22) /* ty=Tensor[(7, 16, 4), bool] */;
  %29 = right_shift(%25, %26) /* ty=Tensor[(7, 16, 4), uint16] */;
  %30 = tan(%27) /* ty=Tensor[(7, 16, 4), float64] */;
  (%28, %29, %30)
}

def @func_7915(%var_7897: Tensor[(4, 4, 1), float32]) -> (Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) {
  %31 = cast(%var_7897, dtype="float32") /* ty=Tensor[(4, 4, 1), float32] */;
  %32 = @func_7095() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %33 = %32.0;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %35 = reshape(%34, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %36 = @func_2819(%35) /* ty=(Tensor[(7, 16, 4), uint64],) */;
  %37 = acos(%31) /* ty=Tensor[(4, 4, 1), float32] */;
  %38 = %36.0;
  (%37, %33, %38)
}

def @func_4134() -> Tensor[(14, 3), int32] {
  %39 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %39.1
}

def @func_2697(%var_2671: Tensor[(15, 8, 1), uint16], %var_2672: Tensor[(15, 8, 1), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) {
  %40 = cast(%var_2672, dtype="uint16") /* ty=Tensor[(15, 8, 1), uint16] */;
  %41 = shape_of(%var_2671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_2671, dtype="uint16") /* ty=Tensor[(15, 8, 1), uint16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %44 = cast(%var_2672, dtype="float32") /* ty=Tensor[(15, 8, 1), float32] */;
  %45 = cast(%var_2671, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
  %46 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_2672, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = left_shift(%42, %43) /* ty=Tensor[(15, 8, ?), uint16] */;
  %50 = tan(%44) /* ty=Tensor[(15, 8, 1), float32] */;
  %51 = greater_equal(%47, %48) /* ty=Tensor[(15, 8, ?), bool] */;
  (%49, %50, %51)
}

def @func_3031() -> Tensor[(14, 3), int32] {
  @func_2892() /* ty=Tensor[(14, 3), int32] */
}

def @func_2755() -> (Tensor[(7, 16, 4), float32],) {
  %52 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  (%52,)
}

def @func_5668(%var_5655: Tensor[(11, 5, 1), float32], %var_5666: int32) -> (Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) {
  %53 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %54 = asin(%53) /* ty=Tensor[(11, 5, 1), float32] */;
  %55 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = cast(%var_5666, dtype="int32") /* ty=int32 */;
  %60 = reshape(%59, newshape=[]) /* ty=int32 */;
  %61 = @func_2875(%60) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) */;
  %62 = power(%57, %58) /* ty=Tensor[(11, 5, ?), float32] */;
  %63 = %61.1;
  (%62, %63, %var_5666)
}

def @func_786(%var_756: Tensor[(15, 10, 10), int8], %var_757: Tensor[(15, 10, 10), int8], %var_770: Tensor[(15, 10, 10), int8]) -> Tensor[(15, 10, 10), bool] {
  %64 = cast(%var_757, dtype="int8") /* ty=Tensor[(15, 10, 10), int8] */;
  %65 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_756, dtype="int8") /* ty=Tensor[(15, 10, 10), int8] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %68 = right_shift(%66, %67) /* ty=Tensor[(15, 10, 10), int8] */;
  %69 = cast(%var_770, dtype="bool") /* ty=Tensor[(15, 10, 10), bool] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="bool") /* ty=Tensor[(15, 10, 10), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%71, %72) /* ty=Tensor[(15, 10, 10), bool] */
}

def @func_9394() -> (Tensor[(7, 16, 4), float32],) {
  %73 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %74 = %73.0;
  (%74,)
}

def @func_8202() -> Tensor[(7, 16, 4), float32] {
  %75 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %75.0
}

def @func_9521(%var_9484: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(7, 16, 4), float32], Tensor[(1350), int64]) {
  %76 = cast(%var_9484, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %77 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %78 = reshape(%76, newshape=[135, 10]) /* ty=Tensor[(135, 10), int64] */;
  %79 = reshape(%77, newshape=[]) /* ty=int32 */;
  %80 = @func_4789(%78, %79) /* ty=(Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) */;
  %81 = @func_4805() /* ty=(Tensor[(7, 16, 4), float32], int32) */;
  %82 = cast(%var_9484, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %83 = cast(2 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %84 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
  %85 = %80.6;
  %86 = %81.0;
  %87 = bitwise_xor(%82, %83) /* ty=Tensor[(1350), int64] */;
  (%84, %85, %86, %87)
}

def @func_4504(%var_4485: Tensor[(6, 3, 7), float32]) -> (Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) {
  %88 = cast(%var_4485, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
  %89 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %90 = cos(%88) /* ty=Tensor[(6, 3, 7), float32] */;
  %91 = %89.0;
  (%90, %91)
}

def @func_6470(%var_6455: float32, %var_6456: Tensor[(3, 6, 14), float32]) -> (Tensor[(3, 6, 14), float32],) {
  %92 = cast(%var_6455, dtype="float32") /* ty=float32 */;
  %93 = cast(%var_6456, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %94 = floor_mod(%92, %93) /* ty=Tensor[(3, 6, 14), float32] */;
  (%94,)
}

def @func_8297() -> (Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) {
  %95 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %96 = @func_6340() /* ty=Tensor[(14, 9, 12), int8] */;
  %97 = %95.3;
  (%96, %97)
}

def @func_5760() -> (Tensor[(7, 16, 4), float32],) {
  %98 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %101 = sin(%100) /* ty=Tensor[(7, 16, 4), float32] */;
  (%101,)
}

def @func_649() -> Tensor[(7, 16, 4), float32] {
  @func_572() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_6453() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) {
  %102 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %103 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %104 = reshape(%102, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), uint64] */;
  %105 = reshape(%103, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), uint64] */;
  %106 = @func_3123(%104, %105) /* ty=Tensor[(8, 3, 4), uint64] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(8, 3, 4), float32] */;
  %108 = cosh(%107) /* ty=Tensor[(8, 3, 4), float32] */;
  %109 = cast(%106, dtype="int16") /* ty=Tensor[(8, 3, 4), int16] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="int16") /* ty=Tensor[(8, 3, 4), int16] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %113 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %114 = cast(%108, dtype="float64") /* ty=Tensor[(8, 3, 4), float64] */;
  %115 = @func_4937() /* ty=Tensor[(7, 16, 4), float32] */;
  %116 = bitwise_xor(%111, %112) /* ty=Tensor[(8, 3, 4), int16] */;
  %117 = %113.0;
  %118 = asin(%114) /* ty=Tensor[(8, 3, 4), float64] */;
  (%115, meta[relay.Constant][2] /* ty=Tensor[(96), uint64] */, %116, %117, %118)
}

def @func_6911() -> Tensor[(7, 16, 4), float32] {
  %119 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %119.0
}

def @func_8104() -> (Tensor[(7, 16, 4), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 156), float32]) {
  %120 = @func_5610() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 156), float32] */, dtype="float32") /* ty=Tensor[(6, 156), float32] */;
  %122 = reshape(%121, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %123 = %120.0;
  %124 = @func_1058(%122) /* ty=Tensor[(6, 12, 13), float32] */;
  (%123, %124, meta[relay.Constant][3] /* ty=Tensor[(6, 156), float32] */)
}

def @func_8075() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(6, 4, 4), float32]) {
  %125 = @func_5325() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %127 = reshape(%126, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %128 = @func_3282(%127) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %129 = %128.2;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
  %131 = %125.1;
  %132 = asinh(%130) /* ty=Tensor[(6, 4, 4), float32] */;
  (%131, meta[relay.Constant][4] /* ty=Tensor[(96), uint64] */, %132)
}

def @func_1206(%var_1189: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int16],) {
  %133 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %134 = %133.1;
  %135 = cast(%var_1189, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %139 = minimum(%137, %138) /* ty=Tensor[(7, 16, 4), int16] */;
  (%139,)
}

def @func_2875(%var_2869: int32) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) {
  %140 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %143 = cast(%var_2869, dtype="int32") /* ty=int32 */;
  %144 = reshape(%143, newshape=[]) /* ty=int32 */;
  %145 = @func_1013(%144) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %146 = log10(%142) /* ty=Tensor[(7, 16, 4), float64] */;
  %147 = %145.4;
  (%146, %147, %var_2869)
}

def @func_3282(%var_3258: Tensor[(6, 4, 4), uint64]) -> (Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) {
  %148 = cast(%var_3258, dtype="bool") /* ty=Tensor[(6, 4, 4), bool] */;
  %149 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="bool") /* ty=Tensor[(6, 4, 4), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %153 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
  %154 = sin(%153) /* ty=Tensor[(6, 4, 4), float32] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
  %156 = greater(%150, %151) /* ty=Tensor[(6, 4, 4), bool] */;
  %157 = %152.0;
  %158 = exp(%155) /* ty=Tensor[(6, 4, 4), float32] */;
  (%156, %157, %158)
}

def @func_7017() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
  %159 = @func_6453() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) */;
  %160 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %161 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %162 = reshape(%161, newshape=[]) /* ty=int32 */;
  %163 = @func_4282(%162) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) */;
  %164 = %159.0;
  %165 = %160.0;
  %166 = %163.0;
  (%164, %165, %166, -4 /* ty=int32 */)
}

def @func_630(%var_586: Tensor[(7, 16, 4), float32], %var_599: Tensor[(7, 16, 4), bool], %var_610: Tensor[(135), float64]) -> (Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) {
  %167 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %168 = cast(%167, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %169 = shape_of(%var_586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_586, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(%var_610, dtype="float64") /* ty=Tensor[(135), float64] */;
  %173 = cast(meta[relay.Constant][6] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %174 = reshape(%172, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %175 = reshape(%173, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %176 = @func_360(%174, %175) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %177 = cast(%var_586, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %178 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%167, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = logical_or(%179, %180) /* ty=Tensor[(7, 16, 4), bool] */;
  %182 = cast(%var_599, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%181, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %186 = power(%184, %185) /* ty=Tensor[(7, 16, 4), float64] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %188 = greater_equal(%170, %171) /* ty=Tensor[(7, 16, 4), bool] */;
  %189 = %176.3;
  %190 = rsqrt(%187) /* ty=Tensor[(7, 16, 4), float64] */;
  (%188, %189, %var_610, meta[relay.Constant][6] /* ty=Tensor[(1512), int8] */, %190)
}

def @func_6671(%var_6664: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64], Tensor[(15, 10, 10), bool], Tensor[(1500), int8]) {
  %191 = cast(%var_6664, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
  %192 = cast(meta[relay.Constant][7] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
  %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
  %194 = cast(meta[relay.Constant][7] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
  %195 = reshape(%192, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
  %196 = reshape(%193, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
  %197 = reshape(%194, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
  %198 = acosh(%191) /* ty=Tensor[(6, 14, 16), float64] */;
  %199 = @func_786(%195, %196, %197) /* ty=Tensor[(15, 10, 10), bool] */;
  (%198, %199, meta[relay.Constant][7] /* ty=Tensor[(1500), int8] */)
}

def @func_1662() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) {
  %200 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %202 = reshape(%201, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %203 = @func_1267(%202) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) */;
  %204 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(448), float32] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %206 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(448), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %207 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), float32] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %209 = %200.1;
  %210 = %203.0;
  %211 = %204.0;
  %212 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %213 = multiply(%207, %208) /* ty=Tensor[(448), uint8] */;
  (%209, %210, %211, %212, %213)
}

def @func_1985(%var_1977: Tensor[(2, 6, 14), int16]) -> Tensor[(2, 6, 14), int16] {
  %214 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 6, 14), int16] */, dtype="int16") /* ty=Tensor[(2, 6, 14), int16] */;
  %215 = shape_of(%var_1977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%var_1977, dtype="int16") /* ty=Tensor[(2, 6, 14), int16] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%216, %217) /* ty=Tensor[(2, 6, 14), int16] */
}

def @func_6104() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %218 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %219 = %218.1;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %221 = atanh(%220) /* ty=Tensor[(7, 16, 4), float32] */;
  %222 = @func_3031() /* ty=Tensor[(14, 3), int32] */;
  (%221, %222)
}

def @func_9640() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64]) {
  %223 = @func_9057() /* ty=(Tensor[(96), uint64],) */;
  %224 = @func_2343() /* ty=Tensor[(7, 16, 4), float32] */;
  %225 = %223.0;
  (%224, %225)
}

def @func_401() -> (Tensor[(7, 16, 4), float32],) {
  %226 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %227 = %226.1;
  (%227,)
}

def @func_3396() -> Tensor[(7, 16, 4), float32] {
  %228 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %228.0
}

def @func_4580() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16], Tensor[(135), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(1350), int64], Tensor[(1350), int64], Tensor[(7, 16, 4), float32]) {
  %229 = @func_3396() /* ty=Tensor[(7, 16, 4), float32] */;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %231 = reshape(%230, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %232 = @func_1206(%231) /* ty=(Tensor[(7, 16, 4), int16],) */;
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %234 = reshape(%233, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %235 = @func_4474(%234) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
  %236 = %232.0;
  %237 = @func_1593() /* ty=Tensor[(135), float64] */;
  %238 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  %239 = @func_3138() /* ty=Tensor[(7, 16, 4), float32] */;
  %240 = %235.2;
  %241 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  (%229, %236, %237, %238, %239, %240, meta[relay.Constant][11] /* ty=Tensor[(1350), int64] */, %241)
}

def @func_10005() -> (Tensor[(7, 16, 4), float32],) {
  %242 = @func_6488() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %243 = %242.0;
  (%243,)
}

def @func_8246() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) {
  %244 = @func_1840() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %245 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1350), int64] */, dtype="int64") /* ty=Tensor[(1, 1350), int64] */;
  %246 = reshape(%245, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %247 = @func_3969(%246) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
  %248 = @func_5200() /* ty=Tensor[(7, 16, 4), float32] */;
  %249 = %244.0;
  %250 = %247.0;
  %251 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  (%248, %249, %250, meta[relay.Constant][12] /* ty=Tensor[(1, 1350), int64] */, %251)
}

def @func_9141() -> (Tensor[(7, 16, 4), float32],) {
  %252 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %253 = %252.2;
  (%253,)
}

def @func_3204() -> (Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) {
  %254 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %255 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %256 = reshape(%254, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %257 = reshape(%255, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %258 = @func_2697(%256, %257) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) */;
  %259 = cast(meta[relay.Constant][14] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %260 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(120), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %261 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %263 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %264 = %258.2;
  %265 = bitwise_or(%261, %262) /* ty=Tensor[(120), uint16] */;
  (%263, %264, %265)
}

def @func_2134() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
  %266 = @func_1778() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %267 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %268 = %267.2;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %270 = log10(%269) /* ty=Tensor[(14, 9, 12), float64] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
  %272 = %266.0;
  %273 = acos(%271) /* ty=Tensor[(14, 9, 12), float32] */;
  (%272, %273)
}

def @func_6599(%var_6585: int32) -> (Tensor[(12, 9, 16), int64], Tensor[(7, 16, 4), uint16], int32) {
  %274 = cast(%var_6585, dtype="int32") /* ty=int32 */;
  %275 = reshape(%274, newshape=[]) /* ty=int32 */;
  %276 = @func_6275(%275) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) */;
  %277 = @func_5680() /* ty=Tensor[(12, 9, 16), int64] */;
  %278 = %276.1;
  (%277, %278, %var_6585)
}

def @func_270() -> Tensor[(7, 16, 4), float32] {
  @func_209() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9619() -> Tensor[(7, 16, 4), float32] {
  @func_649() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_6561() -> Tensor[(7, 16, 4), float32] {
  %279 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %279.0
}

def @func_10408() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %280 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
  %281 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
  (%280, %281)
}

def @func_10595(%var_10574: Tensor[(14, 9, 12), float64]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), bool]) {
  %282 = @func_9192() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) */;
  %283 = %282.1;
  %284 = cast(%var_10574, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = @func_5200() /* ty=Tensor[(7, 16, 4), float32] */;
  %289 = logical_and(%286, %287) /* ty=Tensor[(14, 9, 12), bool] */;
  (%288, %289)
}

def @func_1058(%var_1053: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float32] {
  %290 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %291 = shape_of(%var_1053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_1053, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%292, %293) /* ty=Tensor[(6, 12, 13), float32] */
}

def @func_1918() -> Tensor[(7, 16, 4), float32] {
  @func_1297() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4955() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) {
  %294 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %295 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %296 = reshape(%295, newshape=[]) /* ty=int32 */;
  %297 = @func_4282(%296) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) */;
  %298 = %294.0;
  %299 = %297.4;
  (%298, %299, -6 /* ty=int32 */)
}

def @func_6315() -> Tensor[(7, 16, 4), float32] {
  %300 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %300.0
}

def @func_4837() -> Tensor[(7, 16, 4), float32] {
  @func_3354() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_1553(%var_1539: Tensor[(135, 1), float64], %var_1540: Tensor[(1512), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  %301 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %302 = cast(%var_1539, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %303 = cast(%var_1540, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %304 = reshape(%302, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %305 = reshape(%303, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %306 = @func_360(%304, %305) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %307 = cast(%var_1539, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %308 = cast(%var_1540, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %309 = reshape(%307, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %310 = reshape(%308, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %311 = @func_360(%309, %310) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %312 = @func_649() /* ty=Tensor[(7, 16, 4), float32] */;
  %313 = %301.1;
  %314 = %306.2;
  %315 = %311.2;
  (%312, %313, %314, %var_1539, %var_1540, %315)
}

def @func_7654() -> (Tensor[(14, 3), int32],) {
  %316 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %317 = %316.2;
  (%317,)
}

def @func_6630() -> (Tensor[(7, 16, 4), float32],) {
  %318 = @func_4837() /* ty=Tensor[(7, 16, 4), float32] */;
  (%318,)
}

def @func_5531() -> (Tensor[(1, 14, 11), float64],) {
  %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
  %320 = acos(%319) /* ty=Tensor[(1, 14, 11), float64] */;
  (%320,)
}

def @func_10259() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], int32) {
  %321 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %322 = reshape(%321, newshape=[]) /* ty=int32 */;
  %323 = @func_749(%322) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %324 = @func_2892() /* ty=Tensor[(14, 3), int32] */;
  %325 = %323.0;
  (%324, %325, -10 /* ty=int32 */)
}

def @func_10444(%var_10437: int8, %var_10438: Tensor[(8, 7, 5), int8]) -> (Tensor[(8, 7, 5), bool],) {
  %326 = cast(%var_10437, dtype="bool") /* ty=bool */;
  %327 = cast(%var_10438, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %328 = less_equal(%326, %327) /* ty=Tensor[(8, 7, 5), bool] */;
  (%328,)
}

def @func_4414() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %329 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %330 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  (%329, %330)
}

def @func_5325() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %331 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %332 = %331.1;
  %333 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
  (%332, %333)
}

def @func_8475() -> (Tensor[(7, 16, 4), float32],) {
  %334 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %335 = %334.2;
  (%335,)
}

def @func_732() -> (Tensor[(7, 16, 4), float32],) {
  %336 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %337 = %336.1;
  (%337,)
}

def @func_9112(%var_9073: Tensor[(10, 11, 7), float64], %var_9083: Tensor[(1056), float64]) -> (Tensor[(10, 11, 7), float64], Tensor[(6, 11, 16), float64], float64, Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  %338 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 7), bool] */;
  %339 = shape_of(%var_9073, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_9073, dtype="bool") /* ty=Tensor[(10, 11, 7), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = equal(%340, %341) /* ty=Tensor[(10, 11, 7), bool] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(10, 11, 7), float64] */;
  %344 = cast(8.37809f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %345 = cast(%var_9083, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %346 = reshape(%344, newshape=[]) /* ty=float64 */;
  %347 = reshape(%345, newshape=[6, 11, 16]) /* ty=Tensor[(6, 11, 16), float64] */;
  %348 = @func_3004(%346, %347) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) */;
  %349 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %350 = atan(%343) /* ty=Tensor[(10, 11, 7), float64] */;
  %351 = %348.0;
  %352 = %349.0;
  (%350, %351, 8.37809f64 /* ty=float64 */, %var_9083, %352)
}

def @func_4153() -> (Tensor[(7, 16, 4), float32],) {
  %353 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %354 = %353.1;
  (%354,)
}

def @func_3004(%var_2980: float64, %var_2981: Tensor[(6, 11, 16), float64]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) {
  %355 = cast(%var_2980, dtype="float64") /* ty=float64 */;
  %356 = cast(%var_2981, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
  %357 = cast(%var_2980, dtype="int32") /* ty=int32 */;
  %358 = reshape(%357, newshape=[]) /* ty=int32 */;
  %359 = mod(%355, %356) /* ty=Tensor[(6, 11, 16), float64] */;
  %360 = @func_523(%358) /* ty=Tensor[(14, 3), int32] */;
  (%359, %360)
}

def @func_4373() -> (Tensor[(7, 16, 4), float32],) {
  %361 = @func_3138() /* ty=Tensor[(7, 16, 4), float32] */;
  (%361,)
}

def @func_2819(%var_2809: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), uint64],) {
  %362 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  %363 = cast(%var_2809, dtype="uint64") /* ty=Tensor[(7, 16, 4), uint64] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="uint64") /* ty=Tensor[(7, 16, 4), uint64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %367 = bitwise_xor(%365, %366) /* ty=Tensor[(7, 16, 4), uint64] */;
  (%367,)
}

def @func_9968(%var_9962: Tensor[(11, 14, 11), int8]) -> (Tensor[(11, 14, 11), bool],) {
  %368 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
  %369 = shape_of(%var_9962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_9962, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = not_equal(%370, %371) /* ty=Tensor[(11, 14, 11), bool] */;
  (%372,)
}

def @func_2658() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %373 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %376 = cast(%374, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %377 = reshape(%375, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %378 = reshape(%376, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %379 = @func_2039(%377, %378) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) */;
  %380 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %381 = %379.1;
  (%380, %374, %381)
}

def @func_5680() -> Tensor[(12, 9, 16), int64] {
  %382 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 16), int64] */;
  %383 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 16), int64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%384, %385) /* ty=Tensor[(12, 9, 16), int64] */
}

def @func_6275(%var_6256: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) {
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %387 = cast(%var_6256, dtype="int32") /* ty=int32 */;
  %388 = reshape(%386, newshape=[135, 10]) /* ty=Tensor[(135, 10), int64] */;
  %389 = reshape(%387, newshape=[]) /* ty=int32 */;
  %390 = @func_4789(%388, %389) /* ty=(Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) */;
  %391 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
  %392 = %390.4;
  (%391, %392, meta[relay.Constant][21] /* ty=Tensor[(1350), int64] */, %var_6256)
}

def @func_4282(%var_4273: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) {
  %393 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
  %396 = reshape(%395, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
  %397 = @func_4014(%396) /* ty=(Tensor[(7, 16, 4), bool],) */;
  %398 = cast(%var_4273, dtype="int32") /* ty=int32 */;
  %399 = reshape(%398, newshape=[]) /* ty=int32 */;
  %400 = @func_3498(%399) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %401 = @func_4165() /* ty=(Tensor[(14, 9, 12), float64],) */;
  %402 = %397.0;
  %403 = %400.3;
  %404 = %401.0;
  (%394, %402, %403, %var_4273, %404)
}

def @func_5643(%var_5631: Tensor[(3, 16, 3), int32], %var_5632: Tensor[(3, 16, 3), int32]) -> (Tensor[(3, 16, 3), int32],) {
  %405 = cast(%var_5632, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %406 = shape_of(%var_5631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_5631, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %409 = right_shift(%407, %408) /* ty=Tensor[(3, 16, 3), int32] */;
  (%409,)
}

def @func_5703(%var_5682: Tensor[(13, 5, 5), int8], %var_5683: Tensor[(13, 5, 5), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(13, 5, 5), float64], Tensor[(7, 16, 4), float64]) {
  %410 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %411 = cast(%var_5683, dtype="int8") /* ty=Tensor[(13, 5, 5), int8] */;
  %412 = shape_of(%var_5682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_5682, dtype="int8") /* ty=Tensor[(13, 5, 5), int8] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %415 = logical_xor(%413, %414) /* ty=Tensor[(13, 5, 5), int8] */;
  %416 = cast(%var_5683, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %420 = %410.0;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %422 = cast(%420, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %423 = reshape(%421, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %424 = reshape(%422, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %425 = @func_2039(%423, %424) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) */;
  %426 = power(%418, %419) /* ty=Tensor[(13, 5, 5), float64] */;
  %427 = %425.2;
  (%420, %426, %427)
}

def @func_6379() -> Tensor[(7, 16, 4), float32] {
  @func_2538() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7584(%var_7577: Tensor[(55, 1), float32]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(55, 1), float32], int32) {
  %428 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %429 = cast(%var_7577, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
  %430 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %431 = reshape(%429, newshape=[11, 5, 1]) /* ty=Tensor[(11, 5, 1), float32] */;
  %432 = reshape(%430, newshape=[]) /* ty=int32 */;
  %433 = @func_5668(%431, %432) /* ty=(Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) */;
  %434 = %428.0;
  %435 = %433.2;
  (%434, %435, %var_7577, 5 /* ty=int32 */)
}

def @func_1859() -> Tensor[(7, 16, 4), float32] {
  @func_1297() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_6216() -> Tensor[(7, 16, 4), float32] {
  %436 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %436.1
}

def @func_10193() -> Tensor[(7, 16, 4), float32] {
  %437 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %437.0
}

def @func_9589() -> Tensor[(7, 16, 4), float32] {
  %438 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %438.0
}

def @func_3498(%var_3459: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %439 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %440 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %441 = cast(%var_3459, dtype="int32") /* ty=int32 */;
  %442 = reshape(%441, newshape=[]) /* ty=int32 */;
  %443 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %444 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %445 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %446 = %439.0;
  %447 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
  %448 = %440.0;
  %449 = @func_523(%442) /* ty=Tensor[(14, 3), int32] */;
  %450 = %443.0;
  %451 = %444.0;
  %452 = %445.0;
  (%446, %447, %448, %449, %var_3459, %450, %451, %452)
}

def @func_4124() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %453 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %454 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %455 = %453.0;
  (%454, %455)
}

def @main() -> (Tensor[(7, 16, 4), float32],) {
  %456 = @func_8246() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) */;
  %457 = %456.4;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %459 = sinh(%458) /* ty=Tensor[(7, 16, 4), float32] */;
  (%459,)
}

def @func_1751() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) {
  %460 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %461 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %462 = cast(meta[relay.Constant][22] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %463 = cast(meta[relay.Constant][23] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %464 = reshape(%462, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %465 = reshape(%463, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %466 = @func_360(%464, %465) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %467 = %460.0;
  %468 = %461.1;
  %469 = %466.2;
  (%467, %468, %469, meta[relay.Constant][22] /* ty=Tensor[(135), float64] */, meta[relay.Constant][23] /* ty=Tensor[(1512), int8] */)
}

def @func_6340() -> Tensor[(14, 9, 12), int8] {
  %470 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %470.2
}

def @func_2343() -> Tensor[(7, 16, 4), float32] {
  @func_209() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7095() -> (Tensor[(7, 16, 4), float32],) {
  %471 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
  (%471,)
}

def @func_4253() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %472 = @func_3757() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %473 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_523(%var_508: int32) -> Tensor[(14, 3), int32] {
  %475 = cast(%var_508, dtype="int32") /* ty=int32 */;
  %476 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 3), int32] */, dtype="int32") /* ty=Tensor[(14, 3), int32] */;
  logical_xor(%475, %476) /* ty=Tensor[(14, 3), int32] */
}

def @func_3088(%var_3060: Tensor[(4, 15, 6), float32]) -> (Tensor[(4, 15, 6), int16],) {
  %477 = cast(%var_3060, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
  %478 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %481 = minimum(%479, %480) /* ty=Tensor[(4, 15, 6), float32] */;
  %482 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 6), float32] */, dtype="int16") /* ty=Tensor[(4, 15, 6), int16] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="int16") /* ty=Tensor[(4, 15, 6), int16] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %486 = maximum(%484, %485) /* ty=Tensor[(4, 15, 6), int16] */;
  (%486,)
}

def @func_8531() -> Tensor[(7, 15, 16), uint64] {
  %487 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %488 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %491 = divide(%489, %490) /* ty=Tensor[(7, 15, 16), float32] */;
  %492 = cast(%491, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %493 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 16), float32] */, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %496 = subtract(%494, %495) /* ty=Tensor[(7, 15, 16), uint16] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %498 = cos(%497) /* ty=Tensor[(7, 15, 16), float32] */;
  %499 = cast(%491, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%501, %502) /* ty=Tensor[(7, 15, 16), uint64] */
}

def @func_7129() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %503 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %504 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %505 = %503.0;
  (%504, %505)
}

def @func_8007(%var_7946: Tensor[(2, 13, 12), float32], %var_7959: int32, %var_7989: Tensor[(8, 2), float32]) -> (Tensor[(2, 13, 12), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(8, 2), float32]) {
  %506 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 13, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
  %507 = shape_of(%var_7946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_7946, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = cast(%var_7959, dtype="int32") /* ty=int32 */;
  %511 = reshape(%510, newshape=[]) /* ty=int32 */;
  %512 = @func_3695() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %513 = cast(%var_7989, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %514 = reshape(%513, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float32] */;
  %515 = @func_7915(%514) /* ty=(Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) */;
  %516 = floor_mod(%508, %509) /* ty=Tensor[(2, 13, 12), float32] */;
  %517 = @func_523(%511) /* ty=Tensor[(14, 3), int32] */;
  %518 = %512.0;
  %519 = @func_7642() /* ty=Tensor[(7, 16, 4), float32] */;
  %520 = %515.1;
  (%516, %517, %var_7959, %518, %519, %520, %var_7989)
}

def @func_4200() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %521 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
  %522 = @func_3873() /* ty=Tensor[(7, 16, 4), float32] */;
  %523 = %521.0;
  (%522, %523)
}

def @func_2726() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) {
  %524 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %525 = %524.1;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %527 = reshape(%526, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %528 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %529 = @func_1104(%527) /* ty=Tensor[(7, 16, 4), float64] */;
  %530 = %528.2;
  (%525, %529, %530)
}

def @func_9716() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %531 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %532 = @func_5813() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %533 = %531.3;
  %534 = %532.0;
  (%533, %534)
}

def @func_1013(%var_977: int32) -> (Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
  %535 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %536 = cast(%var_977, dtype="int32") /* ty=int32 */;
  %537 = reshape(%536, newshape=[]) /* ty=int32 */;
  %538 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %539 = %535.7;
  %540 = cast(%539, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %541 = reshape(%538, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %542 = reshape(%540, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %543 = @func_360(%541, %542) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %544 = %543.2;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %546 = asin(%545) /* ty=Tensor[(14, 9, 12), float64] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
  %548 = acosh(%547) /* ty=Tensor[(14, 9, 12), float32] */;
  %549 = cast(%548, dtype="int16") /* ty=Tensor[(14, 9, 12), int16] */;
  %550 = cast(%var_977, dtype="int16") /* ty=int16 */;
  %551 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %552 = cast(%546, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %553 = cosh(%552) /* ty=Tensor[(14, 9, 12), float64] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
  %555 = cast(%var_977, dtype="float32") /* ty=float32 */;
  %556 = @func_523(%537) /* ty=Tensor[(14, 3), int32] */;
  %557 = left_shift(%549, %550) /* ty=Tensor[(14, 9, 12), int16] */;
  %558 = %551.0;
  %559 = minimum(%554, %555) /* ty=Tensor[(14, 9, 12), float32] */;
  (%539, meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, %556, %557, %558, %559)
}

def @func_4514() -> Tensor[(7, 16, 4), float32] {
  %560 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %560.1
}

def @func_4165() -> (Tensor[(14, 9, 12), float64],) {
  %561 = @func_3986() /* ty=Tensor[(14, 9, 12), int8] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %563 = sinh(%562) /* ty=Tensor[(14, 9, 12), float64] */;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %565 = exp(%564) /* ty=Tensor[(14, 9, 12), float64] */;
  (%565,)
}

def @func_8379() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %566 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %567 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %568 = %566.0;
  %569 = %567.0;
  (%568, %569)
}

def @func_5200() -> Tensor[(7, 16, 4), float32] {
  %570 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %570.0
}

def @func_360(%var_340: Tensor[(3, 15, 3), float64], %var_352: Tensor[(1512), int8]) -> (Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) {
  %571 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %572 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_340, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %575 = cast(%var_340, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %576 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(3, 15, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(%var_352, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %580 = reshape(%579, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
  %581 = subtract(%573, %574) /* ty=Tensor[(3, 15, 3), float64] */;
  %582 = greater_equal(%577, %578) /* ty=Tensor[(3, 15, 3), bool] */;
  %583 = @func_108(%580) /* ty=Tensor[(14, 9, 12), int8] */;
  (%581, %582, %583, %var_352)
}

def @func_8895() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %584 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %585 = @func_4153() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %586 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %587 = %584.0;
  %588 = @func_6911() /* ty=Tensor[(7, 16, 4), float32] */;
  %589 = %585.0;
  %590 = %586.0;
  (%587, %588, %589, %590)
}

def @func_8942() -> (Tensor[(7, 16, 4), float32], int32) {
  %591 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %592 = @func_4805() /* ty=(Tensor[(7, 16, 4), float32], int32) */;
  %593 = %591.2;
  %594 = %592.1;
  (%593, %594)
}

def @func_914() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  %595 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %597 = reshape(%596, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %598 = @func_493(%597) /* ty=(Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) */;
  %599 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %600 = cast(%595, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %601 = %599.0;
  %602 = cast(%601, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %603 = cast(meta[relay.Constant][31] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %604 = reshape(%600, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %605 = reshape(%602, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), bool] */;
  %606 = reshape(%603, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %607 = @func_630(%604, %605, %606) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) */;
  %608 = cast(meta[relay.Constant][31] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %609 = %598.2;
  %610 = cast(%609, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %611 = reshape(%608, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %612 = reshape(%610, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %613 = @func_360(%611, %612) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %614 = %613.3;
  %615 = cast(%614, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %616 = reshape(%615, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
  %617 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %618 = %607.2;
  %619 = @func_108(%616) /* ty=Tensor[(14, 9, 12), int8] */;
  (%595, %617, %609, %601, %618, meta[relay.Constant][31] /* ty=Tensor[(135), float64] */, %614, %619)
}

def @func_1451(%var_1439: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), uint8] {
  %620 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %621 = %620.0;
  %622 = cast(%var_1439, dtype="uint8") /* ty=Tensor[(7, 16, 4), uint8] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="uint8") /* ty=Tensor[(7, 16, 4), uint8] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  maximum(%624, %625) /* ty=Tensor[(7, 16, 4), uint8] */
}

def @func_1593() -> Tensor[(135), float64] {
  %626 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %626.4
}

def @func_2267() -> (Tensor[(7, 16, 4), float32],) {
  %627 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
  (%627,)
}

def @func_2951() -> Tensor[(7, 16, 4), float32] {
  @func_572() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7642() -> Tensor[(7, 16, 4), float32] {
  %628 = @func_5325() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %628.1
}

def @func_1343() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
  %629 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %631 = reshape(%630, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %632 = @func_1206(%631) /* ty=(Tensor[(7, 16, 4), int16],) */;
  %633 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %634 = %632.0;
  (%633, %629, %634)
}

def @func_4621(%var_4613: Tensor[(135), float64], %var_4617: Tensor[(448), float32]) -> (Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) {
  %635 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %636 = @func_2134() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %637 = cast(%var_4613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %638 = %636.1;
  %639 = cast(%638, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %640 = reshape(%637, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %641 = reshape(%639, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %642 = @func_360(%640, %641) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %643 = cast(%var_4617, dtype="float32") /* ty=Tensor[(448), float32] */;
  %644 = cast(%var_4617, dtype="bool") /* ty=Tensor[(448), bool] */;
  %645 = %642.0;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %647 = reshape(%643, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %648 = reshape(%644, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), bool] */;
  %649 = reshape(%646, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %650 = @func_630(%647, %648, %649) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) */;
  %651 = %650.0;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %653 = reshape(%652, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %654 = %635.1;
  %655 = @func_1104(%653) /* ty=Tensor[(7, 16, 4), float64] */;
  (%654, %638, %645, %var_4613, %651, %var_4617, %655)
}

def @func_5991() -> (Tensor[(7, 16, 4), float32],) {
  %656 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %657 = %656.0;
  (%657,)
}

def @func_3313(%var_3303: Tensor[(135), float64]) -> Tensor[(135), bool] {
  %658 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %659 = %658.3;
  %660 = cast(%var_3303, dtype="bool") /* ty=Tensor[(135), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(1), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(135), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?), bool] */;
  less(%662, %663) /* ty=Tensor[(135), bool] */
}

def @func_4805() -> (Tensor[(7, 16, 4), float32], int32) {
  %664 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %665 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  %666 = %664.2;
  (%665, %666)
}

def @func_3539() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %667 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %670 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %671 = sigmoid(%669) /* ty=Tensor[(7, 16, 4), float32] */;
  (%670, %671)
}

def @func_3757() -> (Tensor[(7, 16, 4), float32],) {
  %672 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %673 = %672.3;
  (%673,)
}

def @func_3873() -> Tensor[(7, 16, 4), float32] {
  %674 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %674.0
}

def @func_3986() -> Tensor[(14, 9, 12), int8] {
  %675 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %675.2
}

def @func_2625() -> (Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  %676 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %677 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %678 = reshape(%677, newshape=[]) /* ty=int32 */;
  %679 = @func_1013(%678) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %680 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %681 = %676.0;
  %682 = %679.2;
  %683 = %680.0;
  %684 = @func_1593() /* ty=Tensor[(135), float64] */;
  (%681, %682, 5 /* ty=int32 */, %683, %684)
}

def @func_1778() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %685 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %686 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %687 = %685.0;
  %688 = %686.1;
  (%687, %688)
}

def @func_6720() -> Tensor[(7, 16, 4), float32] {
  %689 = @func_1840() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %689.0
}

def @func_1840() -> (Tensor[(7, 16, 4), float32],) {
  %690 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
  (%690,)
}

def @func_3415() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %691 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %692 = %691.0;
  %693 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
  (%692, %693)
}

def @func_4874(%var_4862: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
  %694 = cast(%var_4862, dtype="int32") /* ty=int32 */;
  %695 = reshape(%694, newshape=[]) /* ty=int32 */;
  %696 = @func_1013(%695) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %697 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
  %698 = %696.4;
  (%697, %698, %var_4862)
}

def @func_5813() -> (Tensor[(7, 16, 4), float32],) {
  %699 = @func_3873() /* ty=Tensor[(7, 16, 4), float32] */;
  (%699,)
}

def @func_1883() -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
  %700 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %701 = %700.2;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %703 = reshape(%702, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %704 = @func_1206(%703) /* ty=(Tensor[(7, 16, 4), int16],) */;
  %705 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %706 = %704.0;
  (%701, %705, %706)
}

def @func_6883(%var_6862: Tensor[(12, 4, 8), int8], %var_6863: Tensor[(12, 4, 8), int8]) -> (Tensor[(12, 4, 8), int8], Tensor[(7, 16, 4), float32]) {
  %707 = cast(%var_6863, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %708 = shape_of(%var_6862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_6862, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %711 = left_shift(%709, %710) /* ty=Tensor[(12, 4, 8), int8] */;
  %712 = @func_5473() /* ty=Tensor[(7, 16, 4), float32] */;
  (%711, %712)
}

def @func_5929() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(14, 9, 12), float32], Tensor[(135), float64], Tensor[(7, 16, 4), float32]) {
  %713 = cast(meta[relay.Constant][32] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %714 = reshape(%713, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %715 = @func_3282(%714) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %716 = cast(meta[relay.Constant][33] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %717 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %719 = reshape(%716, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %720 = reshape(%718, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %721 = @func_4621(%719, %720) /* ty=(Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) */;
  %722 = %715.1;
  %723 = %721.1;
  %724 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  (%717, %722, meta[relay.Constant][32] /* ty=Tensor[(96), uint64] */, %723, meta[relay.Constant][33] /* ty=Tensor[(135), float64] */, %724)
}

def @func_9335(%var_9307: Tensor[(11, 7, 14), float64], %var_9328: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(11, 7, 14), float64]) {
  %725 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 7, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
  %726 = cast(%var_9307, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %727 = cast(%var_9328, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %728 = shape_of(%var_9307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_9307, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %731 = multiply(%725, %726) /* ty=Tensor[(11, 7, 14), float64] */;
  %732 = mod(%729, %730) /* ty=Tensor[(11, 7, 14), float64] */;
  (%731, %732)
}

def @func_9658() -> Tensor[(15, 2, 9), float32] {
  @func_7280() /* ty=Tensor[(15, 2, 9), float32] */
}

def @func_7423(%var_7324: int32, %var_7341: Tensor[(96), uint64]) -> (Tensor[(15, 2, 9), float32], Tensor[(7, 16, 4), int16], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %733 = cast(%var_7324, dtype="int32") /* ty=int32 */;
  %734 = reshape(%733, newshape=[]) /* ty=int32 */;
  %735 = @func_3498(%734) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %736 = @func_7017() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %737 = @func_5085() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %738 = cast(%var_7341, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %739 = reshape(%738, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %740 = @func_3282(%739) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %741 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %742 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %743 = cast(meta[relay.Constant][35] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %744 = cast(meta[relay.Constant][35] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %745 = reshape(%743, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %746 = reshape(%744, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %747 = @func_2169(%745, %746) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %748 = @func_7280() /* ty=Tensor[(15, 2, 9), float32] */;
  %749 = %735.5;
  %750 = %736.2;
  %751 = %737.3;
  %752 = %740.1;
  %753 = %741.0;
  %754 = %742.0;
  %755 = @func_6315() /* ty=Tensor[(7, 16, 4), float32] */;
  %756 = %747.1;
  (%748, %749, %var_7324, %750, %751, %752, %var_7341, %753, %754, %755, %756, meta[relay.Constant][35] /* ty=Tensor[(1350), int64] */)
}

def @func_7745() -> (Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 9, 12), float64], Tensor[(14, 9, 12), float64]) {
  %757 = @func_4200() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %758 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %759 = reshape(%758, newshape=[]) /* ty=int32 */;
  %760 = @func_2875(%759) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) */;
  %761 = @func_4165() /* ty=(Tensor[(14, 9, 12), float64],) */;
  %762 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %763 = %757.1;
  %764 = %760.1;
  %765 = %761.0;
  %766 = %762.1;
  (%763, %764, -2 /* ty=int32 */, %765, %766)
}

def @func_7842(%var_7760: Tensor[(1350), int64]) -> (Tensor[(15, 6, 15), float64], Tensor[(1350), int64], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(12, 9, 16), int64], Tensor[(4, 14, 15), float64]) {
  %767 = cast(%var_7760, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %768 = cast(%var_7760, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %769 = reshape(%767, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %770 = reshape(%768, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %771 = @func_2169(%769, %770) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %772 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %773 = @func_4066() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %774 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %775 = @func_4066() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %776 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %777 = rsqrt(%776) /* ty=Tensor[(4, 14, 15), float64] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %779 = %771.1;
  %780 = %772.1;
  %781 = %773.0;
  %782 = %774.1;
  %783 = %775.0;
  %784 = @func_5680() /* ty=Tensor[(12, 9, 16), int64] */;
  %785 = cos(%778) /* ty=Tensor[(4, 14, 15), float64] */;
  (%779, %var_7760, %780, %781, %782, %783, %784, %785)
}

def @func_9917() -> (Tensor[(7, 16, 4), float32], Tensor[(1350, 1), int64], float64, Tensor[(6, 11, 16), float64], Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  %786 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
  %787 = cast(0.265355f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %788 = reshape(%787, newshape=[]) /* ty=float64 */;
  %789 = @func_9044(%788) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) */;
  %790 = cast(0.265355f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %791 = cast(meta[relay.Constant][37] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %792 = reshape(%790, newshape=[]) /* ty=float64 */;
  %793 = reshape(%791, newshape=[6, 11, 16]) /* ty=Tensor[(6, 11, 16), float64] */;
  %794 = @func_3004(%792, %793) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) */;
  %795 = cast(0.265355f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %796 = reshape(%795, newshape=[]) /* ty=int32 */;
  %797 = @func_4874(%796) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %798 = %786.0;
  %799 = %789.2;
  %800 = %794.0;
  %801 = %797.1;
  (%798, %799, 0.265355f64 /* ty=float64 */, %800, meta[relay.Constant][37] /* ty=Tensor[(1056), float64] */, %801)
}

def @func_4072() -> (Tensor[(7, 16, 4), uint16],) {
  %802 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %803 = %802.2;
  (%803,)
}

def @func_10065() -> Tensor[(7, 16, 4), float32] {
  %804 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %804.1
}

def @func_2337(%var_2328: Tensor[(1512), int8]) -> (int32, Tensor[(45, 3), float64], Tensor[(1512), int8], Tensor[(1512), float32]) {
  %805 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %806 = cast(meta[relay.Constant][38] /* ty=Tensor[(45, 3), float64] */, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %807 = cast(%var_2328, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %808 = reshape(%806, newshape=[135, 1]) /* ty=Tensor[(135, 1), float64] */;
  %809 = reshape(%807, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %810 = @func_1553(%808, %809) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %811 = %810.4;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %813 = %805.2;
  %814 = cos(%812) /* ty=Tensor[(1512), float32] */;
  (%813, meta[relay.Constant][38] /* ty=Tensor[(45, 3), float64] */, %var_2328, %814)
}

def @func_6488() -> (Tensor[(7, 16, 4), float32],) {
  %815 = @func_3757() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %816 = %815.0;
  (%816,)
}

def @func_4177() -> (Tensor[(7, 16, 4), float32],) {
  %817 = @func_2343() /* ty=Tensor[(7, 16, 4), float32] */;
  (%817,)
}

def @func_6180() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %818 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %819 = @func_3396() /* ty=Tensor[(7, 16, 4), float32] */;
  %820 = @func_2951() /* ty=Tensor[(7, 16, 4), float32] */;
  (%818, %819, %820)
}

def @func_7606(%var_7591: Tensor[(11, 12, 16), int16], %var_7592: Tensor[(11, 12, 16), int16], %var_7598: Tensor[(120), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(120), uint16], Tensor[(11, 12, 16), int16]) {
  %821 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %822 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %823 = reshape(%821, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %824 = reshape(%822, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %825 = @func_2697(%823, %824) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) */;
  %826 = cast(%var_7592, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %827 = shape_of(%var_7591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%var_7591, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %830 = maximum(%828, %829) /* ty=Tensor[(11, 12, 16), int16] */;
  %831 = cast(%var_7592, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%830, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %835 = %825.0;
  %836 = add(%833, %834) /* ty=Tensor[(11, 12, 16), int16] */;
  (%835, %var_7598, %836)
}

def @func_384() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %837 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %838 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  (%837, %838)
}

def @func_8786() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %839 = @func_5473() /* ty=Tensor[(7, 16, 4), float32] */;
  %840 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  (%839, %840)
}

def @func_3695() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %841 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %842 = %841.1;
  %843 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  (%842, %843)
}

def @func_6517() -> Tensor[(14, 3), int32] {
  %844 = @func_6104() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %844.1
}

def @func_5610() -> (Tensor[(7, 16, 4), float32],) {
  %845 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %846 = %845.0;
  (%846,)
}

def @func_2972() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %847 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %848 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
  %849 = %847.0;
  (%848, %849)
}

def @func_3969(%var_3956: Tensor[(1350), int64]) -> (Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %850 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %851 = cast(%var_3956, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %852 = cast(%var_3956, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %853 = reshape(%851, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %854 = reshape(%852, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %855 = @func_2169(%853, %854) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %856 = %850.2;
  %857 = %855.1;
  (%856, %857, %var_3956)
}

def @func_5031() -> Tensor[(7, 16, 4), float32] {
  @func_4837() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9689() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %858 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %859 = %858.0;
  %860 = @func_6379() /* ty=Tensor[(7, 16, 4), float32] */;
  (%859, %860)
}

def @func_5567() -> Tensor[(14, 9, 12), int8] {
  %861 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %861.2
}

def @func_9192() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) {
  %862 = @func_8297() /* ty=(Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) */;
  %863 = @func_5567() /* ty=Tensor[(14, 9, 12), int8] */;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %865 = atanh(%864) /* ty=Tensor[(14, 9, 12), float64] */;
  %866 = cast(%863, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %870 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %871 = %862.1;
  %872 = power(%868, %869) /* ty=Tensor[(14, 9, 12), float64] */;
  %873 = %870.0;
  (%871, %872, %873)
}

def @func_8562() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %874 = @func_5610() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %875 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %876 = %874.0;
  %877 = %875.0;
  (%876, %877)
}

def @func_2538() -> Tensor[(7, 16, 4), float32] {
  %878 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %878.1
}

def @func_4937() -> Tensor[(7, 16, 4), float32] {
  %879 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %879.0
}

def @func_7280() -> Tensor[(15, 2, 9), float32] {
  %880 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
  sin(%880) /* ty=Tensor[(15, 2, 9), float32] */
}

def @func_572() -> Tensor[(7, 16, 4), float32] {
  @func_209() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3138() -> Tensor[(7, 16, 4), float32] {
  %881 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %881.0
}

def @func_1104(%var_1094: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), float64] {
  %882 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %883 = cast(%var_1094, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%885, %886) /* ty=Tensor[(7, 16, 4), float64] */
}

def @func_4789(%var_4733: Tensor[(135, 10), int64], %var_4787: int32) -> (Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) {
  %887 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %888 = cast(%var_4733, dtype="int64") /* ty=Tensor[(135, 10), int64] */;
  %889 = cast(%var_4733, dtype="int64") /* ty=Tensor[(135, 10), int64] */;
  %890 = reshape(%888, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %891 = reshape(%889, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %892 = @func_2169(%890, %891) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %893 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
  %894 = cast(%var_4787, dtype="int32") /* ty=int32 */;
  %895 = reshape(%894, newshape=[]) /* ty=int32 */;
  %896 = @func_749(%895) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %897 = %887.4;
  %898 = @func_1593() /* ty=Tensor[(135), float64] */;
  %899 = %892.0;
  %900 = %893.0;
  %901 = %896.1;
  (%897, %898, %899, %var_4733, %900, %901, %var_4787)
}

def @func_6757() -> Tensor[(120), uint16] {
  %902 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
  %902.2
}

def @func_749(%var_739: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %903 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %904 = cast(%var_739, dtype="int32") /* ty=int32 */;
  %905 = reshape(%904, newshape=[]) /* ty=int32 */;
  %906 = %903.0;
  %907 = @func_523(%905) /* ty=Tensor[(14, 3), int32] */;
  (%906, %907, %var_739)
}

def @func_493(%var_479: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) {
  %908 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %909 = cast(%var_479, dtype="int64") /* ty=Tensor[(7, 16, 4), int64] */;
  %910 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%908, dtype="int64") /* ty=Tensor[(7, 16, 4), int64] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %913 = cast(meta[relay.Constant][40] /* ty=Tensor[(126, 12), int8] */, dtype="int8") /* ty=Tensor[(126, 12), int8] */;
  %914 = reshape(%913, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
  %915 = subtract(%911, %912) /* ty=Tensor[(7, 16, 4), int64] */;
  %916 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %917 = @func_108(%914) /* ty=Tensor[(14, 9, 12), int8] */;
  (%915, %916, %917, meta[relay.Constant][40] /* ty=Tensor[(126, 12), int8] */)
}

def @func_3123(%var_3114: Tensor[(8, 3, 4), uint64], %var_3115: Tensor[(8, 3, 4), uint64]) -> Tensor[(8, 3, 4), uint64] {
  %918 = cast(%var_3115, dtype="uint64") /* ty=Tensor[(8, 3, 4), uint64] */;
  %919 = shape_of(%var_3114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%var_3114, dtype="uint64") /* ty=Tensor[(8, 3, 4), uint64] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%920, %921) /* ty=Tensor[(8, 3, 4), uint64] */
}

def @func_4014(%var_4009: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
  %922 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %923 = %922.0;
  %924 = cast(%var_4009, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%923, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = greater(%926, %927) /* ty=Tensor[(7, 16, 4), bool] */;
  (%928,)
}

def @func_1267(%var_1242: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) {
  %929 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %930 = %929.0;
  %931 = cast(%var_1242, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %935 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %936 = floor_divide(%933, %934) /* ty=Tensor[(7, 16, 4), float64] */;
  %937 = %935.3;
  (%936, %937)
}

def @func_5473() -> Tensor[(7, 16, 4), float32] {
  %938 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %938.0
}

def @func_2082() -> (Tensor[(7, 16, 4), float32],) {
  %939 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %940 = %939.3;
  (%940,)
}

def @func_8602() -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32]) {
  %941 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %942 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
  %943 = %941.2;
  %944 = %942.0;
  (%943, %944)
}

def @func_3647() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %945 = @func_1778() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %946 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  %947 = %945.0;
  (%946, %947)
}

def @func_8694() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %948 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %949 = @func_8562() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %950 = %948.0;
  %951 = %949.1;
  (%950, %951)
}

def @func_5085() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %952 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %953 = @func_4124() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %954 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %955 = %952.1;
  %956 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
  %957 = %953.0;
  %958 = %954.0;
  (%955, %956, %957, %958)
}

def @func_209() -> Tensor[(7, 16, 4), float32] {
  %959 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %960 = sqrt(%959) /* ty=Tensor[(7, 16, 4), float64] */;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  acos(%961) /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_1041() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  %962 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %963 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %964 = reshape(%963, newshape=[]) /* ty=int32 */;
  %965 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %966 = %962.1;
  %967 = @func_523(%964) /* ty=Tensor[(14, 3), int32] */;
  %968 = @func_649() /* ty=Tensor[(7, 16, 4), float32] */;
  %969 = %965.5;
  (%966, %967, 1 /* ty=int32 */, %968, %969)
}

def @func_7933() -> (Tensor[(7, 16, 4), float32],) {
  %970 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
  (%970,)
}

def @func_2892() -> Tensor[(14, 3), int32] {
  %971 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %971.0
}

def @func_4474(%var_4463: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %972 = cast(%var_4463, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %973 = cast(%var_4463, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %974 = reshape(%972, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %975 = reshape(%973, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %976 = @func_2169(%974, %975) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %977 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  %978 = %976.1;
  (%977, %978, %var_4463)
}

def @func_5269(%var_5214: Tensor[(2, 14, 4), uint16], %var_5215: Tensor[(2, 14, 4), uint16], %var_5226: Tensor[(135), float64], %var_5227: Tensor[(1512, 1), int8], %var_5236: Tensor[(2, 14, 4), uint16]) -> (Tensor[(2, 14, 4), uint16], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512, 1), int8], Tensor[(14, 9, 12), int8], Tensor[(2, 14, 4), bool], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 3), int32]) {
  %979 = cast(%var_5215, dtype="uint16") /* ty=Tensor[(2, 14, 4), uint16] */;
  %980 = shape_of(%var_5214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_5214, dtype="uint16") /* ty=Tensor[(2, 14, 4), uint16] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %983 = cast(%var_5226, dtype="float64") /* ty=Tensor[(135), float64] */;
  %984 = cast(%var_5227, dtype="int8") /* ty=Tensor[(1512, 1), int8] */;
  %985 = reshape(%983, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %986 = reshape(%984, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %987 = @func_360(%985, %986) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %988 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %989 = cast(%var_5236, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %990 = shape_of(%var_5214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(%var_5214, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %993 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %994 = reshape(%993, newshape=[]) /* ty=int32 */;
  %995 = @func_4874(%994) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %996 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %997 = reshape(%996, newshape=[]) /* ty=int32 */;
  %998 = bitwise_and(%981, %982) /* ty=Tensor[(2, 14, 4), uint16] */;
  %999 = %987.3;
  %1000 = %988.7;
  %1001 = not_equal(%991, %992) /* ty=Tensor[(2, 14, 4), bool] */;
  %1002 = %995.1;
  %1003 = @func_523(%997) /* ty=Tensor[(14, 3), int32] */;
  (%998, %999, %var_5226, %var_5227, %1000, %1001, %1002, 8 /* ty=int32 */, %1003)
}

def @func_4066() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %1004 = @func_3695() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1005 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1006 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %1007 = %1004.1;
  %1008 = %1005.0;
  %1009 = %1006.0;
  (%1007, %1008, %1009)
}

def @func_9271() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %1010 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
  %1011 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
  %1012 = %1010.0;
  (%1011, %1012)
}

def @func_2169(%var_2153: Tensor[(15, 6, 15), int64], %var_2154: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) {
  %1013 = cast(%var_2154, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
  %1014 = shape_of(%var_2153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1015 = cast(%var_2153, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1017 = cast(%var_2153, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %1018 = shape_of(%var_2154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(%var_2154, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1021 = minimum(%1015, %1016) /* ty=Tensor[(15, 6, 15), int64] */;
  %1022 = floor_divide(%1019, %1020) /* ty=Tensor[(15, 6, 15), float64] */;
  (%1021, %1022)
}

def @func_6809() -> Tensor[(7, 16, 4), float32] {
  @func_3138() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9044(%var_9016: float64) -> (Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) {
  %1023 = cast(%var_9016, dtype="float64") /* ty=float64 */;
  %1024 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  %1025 = cast(meta[relay.Constant][43] /* ty=Tensor[(1350, 1), int64] */, dtype="int64") /* ty=Tensor[(1350, 1), int64] */;
  %1026 = reshape(%1025, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %1027 = @func_3969(%1026) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
  %1028 = power(%1023, %1024) /* ty=Tensor[(9, 12, 8), float64] */;
  %1029 = %1027.0;
  (%1028, %1029, meta[relay.Constant][43] /* ty=Tensor[(1350, 1), int64] */)
}

def @func_9880(%var_9756: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float64], Tensor[(7, 16, 4), float32], Tensor[(126), float32], Tensor[(15, 2, 6), float32], Tensor[(15, 2, 6), float32]) {
  %1030 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %1031 = shape_of(%var_9756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1032 = cast(%var_9756, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1034 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %1035 = cast(meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1036 = reshape(%1035, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %1037 = @func_4504(%1036) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) */;
  %1038 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %1039 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %1040 = exp(%1039) /* ty=Tensor[(15, 2, 6), float64] */;
  %1041 = cast(%1040, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %1042 = power(%1032, %1033) /* ty=Tensor[(15, 2, 6), float64] */;
  %1043 = acos(%1034) /* ty=Tensor[(15, 2, 6), float64] */;
  %1044 = %1037.1;
  %1045 = log10(%1038) /* ty=Tensor[(15, 2, 6), float32] */;
  %1046 = atan(%1041) /* ty=Tensor[(15, 2, 6), float32] */;
  (%1042, %1043, %1044, meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, %1045, %1046)
}

def @func_10483() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %1047 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1048 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %1049 = %1047.0;
  %1050 = @func_6517() /* ty=Tensor[(14, 3), int32] */;
  %1051 = %1048.3;
  (%1049, %1050, %1051)
}

def @func_3354() -> Tensor[(7, 16, 4), float32] {
  @func_3138() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_1297() -> Tensor[(7, 16, 4), float32] {
  @func_649() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7546(%var_7528: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(120), uint16], Tensor[(14, 3), int32], int32) {
  %1052 = @func_4373() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1053 = cast(%var_7528, dtype="int32") /* ty=int32 */;
  %1054 = reshape(%1053, newshape=[]) /* ty=int32 */;
  %1055 = %1052.0;
  %1056 = @func_6757() /* ty=Tensor[(120), uint16] */;
  %1057 = @func_523(%1054) /* ty=Tensor[(14, 3), int32] */;
  (%1055, %1056, %1057, %var_7528)
}

def @func_108(%var_100: Tensor[(14, 9, 12), int8]) -> Tensor[(14, 9, 12), int8] {
  %1058 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 9, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %1059 = shape_of(%var_100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(%var_100, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%1060, %1061) /* ty=Tensor[(14, 9, 12), int8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4017(%var_4015: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
  @func_4014(%var_4015) /* ty=(Tensor[(7, 16, 4), bool],) */
}

def @func_2755() -> (Tensor[(7, 16, 4), float32],) {
  %0 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  (%0,)
}

def @func_2892() -> Tensor[(14, 3), int32] {
  %1 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %1.0
}

def @func_3315(%var_3314: Tensor[(135), float64]) -> Tensor[(135), bool] {
  %8 = fn (%var_3303: Tensor[(135), float64]) -> Tensor[(135), bool] {
    %2 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
    %3 = %2.3;
    %4 = cast(%var_3303, dtype="bool") /* ty=Tensor[(135), bool] */;
    %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(1), int32] */;
    %6 = cast(%3, dtype="bool") /* ty=Tensor[(135), bool] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?), bool] */;
    less(%6, %7) /* ty=Tensor[(135), bool] */
  };
  %8(%var_3314) /* ty=Tensor[(135), bool] */
}

def @func_1778() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %9 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %10 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %11 = %9.0;
  %12 = %10.1;
  (%11, %12)
}

def @func_2951() -> Tensor[(7, 16, 4), float32] {
  @func_572() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_2726() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) {
  %13 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %14 = %13.1;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %16 = reshape(%15, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %17 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %18 = @func_1104(%16) /* ty=Tensor[(7, 16, 4), float64] */;
  %19 = %17.2;
  (%14, %18, %19)
}

def @func_7845(%var_7843: Tensor[(1350), int64]) -> (Tensor[(15, 6, 15), float64], Tensor[(1350), int64], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(12, 9, 16), int64], Tensor[(4, 14, 15), float64]) {
  @func_7842(%var_7843) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(1350), int64], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(12, 9, 16), int64], Tensor[(4, 14, 15), float64]) */
}

def @func_7269() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %27 = fn () -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
    %20 = @func_7095() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %21 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %22 = reshape(%21, newshape=[]) /* ty=int32 */;
    %23 = @func_1013(%22) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
    %24 = @func_3031() /* ty=Tensor[(14, 3), int32] */;
    %25 = %20.0;
    %26 = %23.2;
    (%24, %25, %26, 2 /* ty=int32 */)
  };
  %27() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */
}

def @func_1663() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) {
  %42 = fn () -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) {
    %28 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
    %30 = reshape(%29, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %31 = @func_1267(%30) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) */;
    %32 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(448), float32] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %34 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(448), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(448), float32] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %37 = %28.1;
    %38 = %31.0;
    %39 = %32.0;
    %40 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    %41 = multiply(%35, %36) /* ty=Tensor[(448), uint8] */;
    (%37, %38, %39, %40, %41)
  };
  %42() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */
}

def @func_7655() -> (Tensor[(14, 3), int32],) {
  %45 = fn () -> (Tensor[(14, 3), int32],) {
    %43 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
    %44 = %43.2;
    (%44,)
  };
  %45() /* ty=(Tensor[(14, 3), int32],) */
}

def @func_9919() -> (Tensor[(7, 16, 4), float32], Tensor[(1350, 1), int64], float64, Tensor[(6, 11, 16), float64], Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  @func_9917() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(1350, 1), int64], float64, Tensor[(6, 11, 16), float64], Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) */
}

def @func_493(%var_479: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) {
  %46 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %47 = cast(%var_479, dtype="int64") /* ty=Tensor[(7, 16, 4), int64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int64") /* ty=Tensor[(7, 16, 4), int64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(126, 12), int8] */, dtype="int8") /* ty=Tensor[(126, 12), int8] */;
  %52 = reshape(%51, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
  %53 = subtract(%49, %50) /* ty=Tensor[(7, 16, 4), int64] */;
  %54 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %55 = @func_108(%52) /* ty=Tensor[(14, 9, 12), int8] */;
  (%53, %54, %55, meta[relay.Constant][2] /* ty=Tensor[(126, 12), int8] */)
}

def @func_2082() -> (Tensor[(7, 16, 4), float32],) {
  %56 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %57 = %56.3;
  (%57,)
}

def @func_7096() -> (Tensor[(7, 16, 4), float32],) {
  %59 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %58 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
    (%58,)
  };
  %59() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_496(%var_494: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) {
  @func_493(%var_494) /* ty=(Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) */
}

def @func_1557(%var_1555: Tensor[(135, 1), float64], %var_1556: Tensor[(1512), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  @func_1553(%var_1555, %var_1556) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */
}

def @func_4072() -> (Tensor[(7, 16, 4), uint16],) {
  %60 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %61 = %60.2;
  (%61,)
}

def @func_3284(%var_3283: Tensor[(6, 4, 4), uint64]) -> (Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) {
  %73 = fn (%var_3258: Tensor[(6, 4, 4), uint64]) -> (Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) {
    %62 = cast(%var_3258, dtype="bool") /* ty=Tensor[(6, 4, 4), bool] */;
    %63 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="bool") /* ty=Tensor[(6, 4, 4), bool] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %66 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 4, 4), uint64] */, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
    %68 = sin(%67) /* ty=Tensor[(6, 4, 4), float32] */;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
    %70 = greater(%64, %65) /* ty=Tensor[(6, 4, 4), bool] */;
    %71 = %66.0;
    %72 = exp(%69) /* ty=Tensor[(6, 4, 4), float32] */;
    (%70, %71, %72)
  };
  %73(%var_3283) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */
}

def @func_2625() -> (Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  %74 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %75 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %76 = reshape(%75, newshape=[]) /* ty=int32 */;
  %77 = @func_1013(%76) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %78 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %79 = %74.0;
  %80 = %77.2;
  %81 = %78.0;
  %82 = @func_1593() /* ty=Tensor[(135), float64] */;
  (%79, %80, 5 /* ty=int32 */, %81, %82)
}

def @func_1107(%var_1105: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), float64] {
  @func_1104(%var_1105) /* ty=Tensor[(7, 16, 4), float64] */
}

def @func_2173(%var_2171: Tensor[(15, 6, 15), int64], %var_2172: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) {
  @func_2169(%var_2171, %var_2172) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */
}

def @func_572() -> Tensor[(7, 16, 4), float32] {
  @func_209() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_2953() -> Tensor[(7, 16, 4), float32] {
  @func_2951() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_5815() -> (Tensor[(7, 16, 4), float32],) {
  @func_5813() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_9338(%var_9336: Tensor[(11, 7, 14), float64], %var_9337: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(11, 7, 14), float64]) {
  %91 = fn (%var_9307: Tensor[(11, 7, 14), float64], %var_9328: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(11, 7, 14), float64]) {
    %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 7, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
    %84 = cast(%var_9307, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
    %85 = cast(%var_9328, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
    %86 = shape_of(%var_9307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(%var_9307, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %89 = multiply(%83, %84) /* ty=Tensor[(11, 7, 14), float64] */;
    %90 = mod(%87, %88) /* ty=Tensor[(11, 7, 14), float64] */;
    (%89, %90)
  };
  %91(%var_9336, %var_9337) /* ty=(Tensor[(11, 7, 14), float64], Tensor[(11, 7, 14), float64]) */
}

def @func_3649() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_7747() -> (Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 9, 12), float64], Tensor[(14, 9, 12), float64]) {
  @func_7745() /* ty=(Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 9, 12), float64], Tensor[(14, 9, 12), float64]) */
}

def @func_2894() -> Tensor[(14, 3), int32] {
  @func_2892() /* ty=Tensor[(14, 3), int32] */
}

def @func_6180() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %92 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %93 = @func_3396() /* ty=Tensor[(7, 16, 4), float32] */;
  %94 = @func_2951() /* ty=Tensor[(7, 16, 4), float32] */;
  (%92, %93, %94)
}

def @func_4074() -> (Tensor[(7, 16, 4), uint16],) {
  @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */
}

def @func_3757() -> (Tensor[(7, 16, 4), float32],) {
  %95 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %96 = %95.3;
  (%96,)
}

def @func_1860() -> Tensor[(7, 16, 4), float32] {
  %97 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_1297() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %97() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4515() -> Tensor[(7, 16, 4), float32] {
  %99 = fn () -> Tensor[(7, 16, 4), float32] {
    %98 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %98.1
  };
  %99() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4200() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %100 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
  %101 = @func_3873() /* ty=Tensor[(7, 16, 4), float32] */;
  %102 = %100.0;
  (%101, %102)
}

def @func_649() -> Tensor[(7, 16, 4), float32] {
  @func_572() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4416() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_4414() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_1884() -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
  %110 = fn () -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
    %103 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
    %104 = %103.2;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %106 = reshape(%105, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %107 = @func_1206(%106) /* ty=(Tensor[(7, 16, 4), int16],) */;
    %108 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    %109 = %107.0;
    (%104, %108, %109)
  };
  %110() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */
}

def @func_6454() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) {
  %128 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) {
    %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
    %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
    %113 = reshape(%111, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), uint64] */;
    %114 = reshape(%112, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), uint64] */;
    %115 = @func_3123(%113, %114) /* ty=Tensor[(8, 3, 4), uint64] */;
    %116 = cast(%115, dtype="float32") /* ty=Tensor[(8, 3, 4), float32] */;
    %117 = cosh(%116) /* ty=Tensor[(8, 3, 4), float32] */;
    %118 = cast(%115, dtype="int16") /* ty=Tensor[(8, 3, 4), int16] */;
    %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%117, dtype="int16") /* ty=Tensor[(8, 3, 4), int16] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %122 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
    %123 = cast(%117, dtype="float64") /* ty=Tensor[(8, 3, 4), float64] */;
    %124 = @func_4937() /* ty=Tensor[(7, 16, 4), float32] */;
    %125 = bitwise_xor(%120, %121) /* ty=Tensor[(8, 3, 4), int16] */;
    %126 = %122.0;
    %127 = asin(%123) /* ty=Tensor[(8, 3, 4), float64] */;
    (%124, meta[relay.Constant][5] /* ty=Tensor[(96), uint64] */, %125, %126, %127)
  };
  %128() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) */
}

def @func_5681() -> Tensor[(12, 9, 16), int64] {
  %133 = fn () -> Tensor[(12, 9, 16), int64] {
    %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 16), int64] */;
    %130 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 16), int64] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    right_shift(%131, %132) /* ty=Tensor[(12, 9, 16), int64] */
  };
  %133() /* ty=Tensor[(12, 9, 16), int64] */
}

def @func_6561() -> Tensor[(7, 16, 4), float32] {
  %134 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %134.0
}

def @func_402() -> (Tensor[(7, 16, 4), float32],) {
  %137 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %135 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %136 = %135.1;
    (%136,)
  };
  %137() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_1841() -> (Tensor[(7, 16, 4), float32],) {
  %139 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %138 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
    (%138,)
  };
  %139() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_2268() -> (Tensor[(7, 16, 4), float32],) {
  %141 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %140 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
    (%140,)
  };
  %141() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_2169(%var_2153: Tensor[(15, 6, 15), int64], %var_2154: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) {
  %142 = cast(%var_2154, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
  %143 = shape_of(%var_2153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_2153, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %146 = cast(%var_2153, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %147 = shape_of(%var_2154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_2154, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %150 = minimum(%144, %145) /* ty=Tensor[(15, 6, 15), int64] */;
  %151 = floor_divide(%148, %149) /* ty=Tensor[(15, 6, 15), float64] */;
  (%150, %151)
}

def @func_916() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */
}

def @func_3695() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %152 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %153 = %152.1;
  %154 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  (%153, %154)
}

def @func_5671(%var_5669: Tensor[(11, 5, 1), float32], %var_5670: int32) -> (Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) {
  %166 = fn (%var_5655: Tensor[(11, 5, 1), float32], %var_5666: int32) -> (Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) {
    %155 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
    %156 = asin(%155) /* ty=Tensor[(11, 5, 1), float32] */;
    %157 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
    %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%156, dtype="float32") /* ty=Tensor[(11, 5, 1), float32] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %161 = cast(%var_5666, dtype="int32") /* ty=int32 */;
    %162 = reshape(%161, newshape=[]) /* ty=int32 */;
    %163 = @func_2875(%162) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) */;
    %164 = power(%159, %160) /* ty=Tensor[(11, 5, ?), float32] */;
    %165 = %163.1;
    (%164, %165, %var_5666)
  };
  %166(%var_5669, %var_5670) /* ty=(Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) */
}

def @func_9396() -> (Tensor[(7, 16, 4), float32],) {
  @func_9394() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_2728() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) {
  @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */
}

def @func_4621(%var_4613: Tensor[(135), float64], %var_4617: Tensor[(448), float32]) -> (Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) {
  %167 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %168 = @func_2134() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %169 = cast(%var_4613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %170 = %168.1;
  %171 = cast(%170, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %172 = reshape(%169, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %173 = reshape(%171, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %174 = @func_360(%172, %173) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %175 = cast(%var_4617, dtype="float32") /* ty=Tensor[(448), float32] */;
  %176 = cast(%var_4617, dtype="bool") /* ty=Tensor[(448), bool] */;
  %177 = %174.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %179 = reshape(%175, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %180 = reshape(%176, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), bool] */;
  %181 = reshape(%178, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %182 = @func_630(%179, %180, %181) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %185 = reshape(%184, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %186 = %167.1;
  %187 = @func_1104(%185) /* ty=Tensor[(7, 16, 4), float64] */;
  (%186, %170, %177, %var_4613, %183, %var_4617, %187)
}

def @func_7642() -> Tensor[(7, 16, 4), float32] {
  %188 = @func_5325() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %188.1
}

def @func_9640() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64]) {
  %189 = @func_9057() /* ty=(Tensor[(96), uint64],) */;
  %190 = @func_2343() /* ty=Tensor[(7, 16, 4), float32] */;
  %191 = %189.0;
  (%190, %191)
}

def @func_8564() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_8562() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_5087() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_5085() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_751(%var_750: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %197 = fn (%var_739: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
    %192 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %193 = cast(%var_739, dtype="int32") /* ty=int32 */;
    %194 = reshape(%193, newshape=[]) /* ty=int32 */;
    %195 = %192.0;
    %196 = @func_523(%194) /* ty=Tensor[(14, 3), int32] */;
    (%195, %196, %var_739)
  };
  %197(%var_750) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */
}

def @func_1451(%var_1439: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), uint8] {
  %198 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %199 = %198.0;
  %200 = cast(%var_1439, dtype="uint8") /* ty=Tensor[(7, 16, 4), uint8] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="uint8") /* ty=Tensor[(7, 16, 4), uint8] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  maximum(%202, %203) /* ty=Tensor[(7, 16, 4), uint8] */
}

def @func_10447(%var_10445: int8, %var_10446: Tensor[(8, 7, 5), int8]) -> (Tensor[(8, 7, 5), bool],) {
  %207 = fn (%var_10437: int8, %var_10438: Tensor[(8, 7, 5), int8]) -> (Tensor[(8, 7, 5), bool],) {
    %204 = cast(%var_10437, dtype="bool") /* ty=bool */;
    %205 = cast(%var_10438, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
    %206 = less_equal(%204, %205) /* ty=Tensor[(8, 7, 5), bool] */;
    (%206,)
  };
  %207(%var_10445, %var_10446) /* ty=(Tensor[(8, 7, 5), bool],) */
}

def @func_9059() -> (Tensor[(96), uint64],) {
  @func_9057() /* ty=(Tensor[(96), uint64],) */
}

def @func_8075() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(6, 4, 4), float32]) {
  %208 = @func_5325() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %210 = reshape(%209, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %211 = @func_3282(%210) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %212 = %211.2;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(6, 4, 4), float32] */;
  %214 = %208.1;
  %215 = asinh(%213) /* ty=Tensor[(6, 4, 4), float32] */;
  (%214, meta[relay.Constant][8] /* ty=Tensor[(96), uint64] */, %215)
}

def @func_6720() -> Tensor[(7, 16, 4), float32] {
  %216 = @func_1840() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %216.0
}

def @func_1919() -> Tensor[(7, 16, 4), float32] {
  %217 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_1297() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %217() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3759() -> (Tensor[(7, 16, 4), float32],) {
  @func_3757() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_4625(%var_4623: Tensor[(135), float64], %var_4624: Tensor[(448), float32]) -> (Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) {
  @func_4621(%var_4623, %var_4624) /* ty=(Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) */
}

def @func_6315() -> Tensor[(7, 16, 4), float32] {
  %218 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %218.0
}

def @func_6631() -> (Tensor[(7, 16, 4), float32],) {
  %220 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %219 = @func_4837() /* ty=Tensor[(7, 16, 4), float32] */;
    (%219,)
  };
  %220() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_7935() -> (Tensor[(7, 16, 4), float32],) {
  @func_7933() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_1752() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) {
  %231 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) {
    %221 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %222 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
    %225 = reshape(%223, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
    %226 = reshape(%224, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
    %227 = @func_360(%225, %226) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
    %228 = %221.0;
    %229 = %222.1;
    %230 = %227.2;
    (%228, %229, %230, meta[relay.Constant][9] /* ty=Tensor[(135), float64] */, meta[relay.Constant][10] /* ty=Tensor[(1512), int8] */)
  };
  %231() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */
}

def @func_3647() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %232 = @func_1778() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %233 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  %234 = %232.0;
  (%233, %234)
}

def @func_2822(%var_2820: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), uint64],) {
  @func_2819(%var_2820) /* ty=(Tensor[(7, 16, 4), uint64],) */
}

def @func_5813() -> (Tensor[(7, 16, 4), float32],) {
  %235 = @func_3873() /* ty=Tensor[(7, 16, 4), float32] */;
  (%235,)
}

def @func_4876(%var_4875: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
  %241 = fn (%var_4862: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
    %236 = cast(%var_4862, dtype="int32") /* ty=int32 */;
    %237 = reshape(%236, newshape=[]) /* ty=int32 */;
    %238 = @func_1013(%237) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
    %239 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
    %240 = %238.4;
    (%239, %240, %var_4862)
  };
  %241(%var_4875) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */
}

def @func_7427(%var_7425: int32, %var_7426: Tensor[(96), uint64]) -> (Tensor[(15, 2, 9), float32], Tensor[(7, 16, 4), int16], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  @func_7423(%var_7425, %var_7426) /* ty=(Tensor[(15, 2, 9), float32], Tensor[(7, 16, 4), int16], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */
}

def @func_9589() -> Tensor[(7, 16, 4), float32] {
  %242 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %242.0
}

def @func_5703(%var_5682: Tensor[(13, 5, 5), int8], %var_5683: Tensor[(13, 5, 5), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(13, 5, 5), float64], Tensor[(7, 16, 4), float64]) {
  %243 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %244 = cast(%var_5683, dtype="int8") /* ty=Tensor[(13, 5, 5), int8] */;
  %245 = shape_of(%var_5682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_5682, dtype="int8") /* ty=Tensor[(13, 5, 5), int8] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %248 = logical_xor(%246, %247) /* ty=Tensor[(13, 5, 5), int8] */;
  %249 = cast(%var_5683, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %253 = %243.0;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %255 = cast(%253, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %256 = reshape(%254, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %257 = reshape(%255, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %258 = @func_2039(%256, %257) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) */;
  %259 = power(%251, %252) /* ty=Tensor[(13, 5, 5), float64] */;
  %260 = %258.2;
  (%253, %259, %260)
}

def @func_3123(%var_3114: Tensor[(8, 3, 4), uint64], %var_3115: Tensor[(8, 3, 4), uint64]) -> Tensor[(8, 3, 4), uint64] {
  %261 = cast(%var_3115, dtype="uint64") /* ty=Tensor[(8, 3, 4), uint64] */;
  %262 = shape_of(%var_3114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_3114, dtype="uint64") /* ty=Tensor[(8, 3, 4), uint64] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%263, %264) /* ty=Tensor[(8, 3, 4), uint64] */
}

def @func_4476(%var_4475: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %272 = fn (%var_4463: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
    %265 = cast(%var_4463, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %266 = cast(%var_4463, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %267 = reshape(%265, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %268 = reshape(%266, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %269 = @func_2169(%267, %268) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
    %270 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
    %271 = %269.1;
    (%270, %271, %var_4463)
  };
  %272(%var_4475) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */
}

def @func_9689() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %273 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %274 = %273.0;
  %275 = @func_6379() /* ty=Tensor[(7, 16, 4), float32] */;
  (%274, %275)
}

def @func_791(%var_788: Tensor[(15, 10, 10), int8], %var_789: Tensor[(15, 10, 10), int8], %var_790: Tensor[(15, 10, 10), int8]) -> Tensor[(15, 10, 10), bool] {
  @func_786(%var_788, %var_789, %var_790) /* ty=Tensor[(15, 10, 10), bool] */
}

def @func_8106() -> (Tensor[(7, 16, 4), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 156), float32]) {
  @func_8104() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 156), float32]) */
}

def @func_7586(%var_7585: Tensor[(55, 1), float32]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(55, 1), float32], int32) {
  %284 = fn (%var_7577: Tensor[(55, 1), float32]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(55, 1), float32], int32) {
    %276 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %277 = cast(%var_7577, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
    %278 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %279 = reshape(%277, newshape=[11, 5, 1]) /* ty=Tensor[(11, 5, 1), float32] */;
    %280 = reshape(%278, newshape=[]) /* ty=int32 */;
    %281 = @func_5668(%279, %280) /* ty=(Tensor[(11, 5, ?), float32], Tensor[(7, 16, 4), float32], int32) */;
    %282 = %276.0;
    %283 = %281.2;
    (%282, %283, %var_7577, 5 /* ty=int32 */)
  };
  %284(%var_7585) /* ty=(Tensor[(7, 16, 4), float32], int32, Tensor[(55, 1), float32], int32) */
}

def @func_9591() -> Tensor[(7, 16, 4), float32] {
  @func_9589() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4792(%var_4790: Tensor[(135, 10), int64], %var_4791: int32) -> (Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) {
  %300 = fn (%var_4733: Tensor[(135, 10), int64], %var_4787: int32) -> (Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) {
    %285 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
    %286 = cast(%var_4733, dtype="int64") /* ty=Tensor[(135, 10), int64] */;
    %287 = cast(%var_4733, dtype="int64") /* ty=Tensor[(135, 10), int64] */;
    %288 = reshape(%286, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %289 = reshape(%287, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %290 = @func_2169(%288, %289) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
    %291 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
    %292 = cast(%var_4787, dtype="int32") /* ty=int32 */;
    %293 = reshape(%292, newshape=[]) /* ty=int32 */;
    %294 = @func_749(%293) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
    %295 = %285.4;
    %296 = @func_1593() /* ty=Tensor[(135), float64] */;
    %297 = %290.0;
    %298 = %291.0;
    %299 = %294.1;
    (%295, %296, %297, %var_4733, %298, %299, %var_4787)
  };
  %300(%var_4790, %var_4791) /* ty=(Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) */
}

def @func_8380() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %305 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
    %301 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %302 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %303 = %301.0;
    %304 = %302.0;
    (%303, %304)
  };
  %305() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_3697() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_3695() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_651() -> Tensor[(7, 16, 4), float32] {
  @func_649() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9194() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) {
  @func_9192() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) */
}

def @func_4014(%var_4009: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
  %306 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
  %307 = %306.0;
  %308 = cast(%var_4009, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = greater(%310, %311) /* ty=Tensor[(7, 16, 4), bool] */;
  (%312,)
}

def @func_10410() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_10408() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_1345() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
  @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */
}

def @func_4839() -> Tensor[(7, 16, 4), float32] {
  @func_4837() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_2819(%var_2809: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), uint64],) {
  %313 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  %314 = cast(%var_2809, dtype="uint64") /* ty=Tensor[(7, 16, 4), uint64] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="uint64") /* ty=Tensor[(7, 16, 4), uint64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %318 = bitwise_xor(%316, %317) /* ty=Tensor[(7, 16, 4), uint64] */;
  (%318,)
}

def @func_9691() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_9689() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_8696() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_8694() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_2659() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %328 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
    %319 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %320 = %319.0;
    %321 = cast(%320, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %322 = cast(%320, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %323 = reshape(%321, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %324 = reshape(%322, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %325 = @func_2039(%323, %324) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) */;
    %326 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
    %327 = %325.1;
    (%326, %320, %327)
  };
  %328() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */
}

def @func_7131() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_7129() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_6340() -> Tensor[(14, 9, 12), int8] {
  %329 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %329.2
}

def @func_733() -> (Tensor[(7, 16, 4), float32],) {
  %332 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %330 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %331 = %330.1;
    (%331,)
  };
  %332() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_8788() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_8786() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_6490() -> (Tensor[(7, 16, 4), float32],) {
  @func_6488() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_5475() -> Tensor[(7, 16, 4), float32] {
  @func_5473() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_5568() -> Tensor[(14, 9, 12), int8] {
  %334 = fn () -> Tensor[(14, 9, 12), int8] {
    %333 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %333.2
  };
  %334() /* ty=Tensor[(14, 9, 12), int8] */
}

def @func_5531() -> (Tensor[(1, 14, 11), float64],) {
  %335 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
  %336 = acos(%335) /* ty=Tensor[(1, 14, 11), float64] */;
  (%336,)
}

def @func_7842(%var_7760: Tensor[(1350), int64]) -> (Tensor[(15, 6, 15), float64], Tensor[(1350), int64], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(12, 9, 16), int64], Tensor[(4, 14, 15), float64]) {
  %337 = cast(%var_7760, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %338 = cast(%var_7760, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %339 = reshape(%337, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %340 = reshape(%338, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %341 = @func_2169(%339, %340) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %342 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
  %343 = @func_4066() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %344 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %345 = @func_4066() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %346 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %347 = rsqrt(%346) /* ty=Tensor[(4, 14, 15), float64] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %349 = %341.1;
  %350 = %342.1;
  %351 = %343.0;
  %352 = %344.1;
  %353 = %345.0;
  %354 = @func_5680() /* ty=Tensor[(12, 9, 16), int64] */;
  %355 = cos(%348) /* ty=Tensor[(4, 14, 15), float64] */;
  (%349, %var_7760, %350, %351, %352, %353, %354, %355)
}

def @func_914() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  %356 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %358 = reshape(%357, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %359 = @func_493(%358) /* ty=(Tensor[(7, 16, 4), int64], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(126, 12), int8]) */;
  %360 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %361 = cast(%356, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %362 = %360.0;
  %363 = cast(%362, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %364 = cast(meta[relay.Constant][13] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %365 = reshape(%361, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %366 = reshape(%363, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), bool] */;
  %367 = reshape(%364, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %368 = @func_630(%365, %366, %367) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) */;
  %369 = cast(meta[relay.Constant][13] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %370 = %359.2;
  %371 = cast(%370, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %372 = reshape(%369, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %373 = reshape(%371, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %374 = @func_360(%372, %373) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %375 = %374.3;
  %376 = cast(%375, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %377 = reshape(%376, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
  %378 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %379 = %368.2;
  %380 = @func_108(%377) /* ty=Tensor[(14, 9, 12), int8] */;
  (%356, %378, %370, %362, %379, meta[relay.Constant][13] /* ty=Tensor[(135), float64] */, %375, %380)
}

def @func_4202() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  @func_4200() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */
}

def @func_6673(%var_6672: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64], Tensor[(15, 10, 10), bool], Tensor[(1500), int8]) {
  %390 = fn (%var_6664: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64], Tensor[(15, 10, 10), bool], Tensor[(1500), int8]) {
    %381 = cast(%var_6664, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
    %382 = cast(meta[relay.Constant][14] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
    %383 = cast(meta[relay.Constant][14] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
    %384 = cast(meta[relay.Constant][14] /* ty=Tensor[(1500), int8] */, dtype="int8") /* ty=Tensor[(1500), int8] */;
    %385 = reshape(%382, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
    %386 = reshape(%383, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
    %387 = reshape(%384, newshape=[15, 10, 10]) /* ty=Tensor[(15, 10, 10), int8] */;
    %388 = acosh(%381) /* ty=Tensor[(6, 14, 16), float64] */;
    %389 = @func_786(%385, %386, %387) /* ty=Tensor[(15, 10, 10), bool] */;
    (%388, %389, meta[relay.Constant][14] /* ty=Tensor[(1500), int8] */)
  };
  %390(%var_6672) /* ty=(Tensor[(6, 14, 16), float64], Tensor[(15, 10, 10), bool], Tensor[(1500), int8]) */
}

def @func_6758() -> Tensor[(120), uint16] {
  %392 = fn () -> Tensor[(120), uint16] {
    %391 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
    %391.2
  };
  %392() /* ty=Tensor[(120), uint16] */
}

def @func_9272() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
  %396 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) {
    %393 = @func_4072() /* ty=(Tensor[(7, 16, 4), uint16],) */;
    %394 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
    %395 = %393.0;
    (%394, %395)
  };
  %396() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */
}

def @func_10259() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], int32) {
  %397 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %398 = reshape(%397, newshape=[]) /* ty=int32 */;
  %399 = @func_749(%398) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %400 = @func_2892() /* ty=Tensor[(14, 3), int32] */;
  %401 = %399.0;
  (%400, %401, -10 /* ty=int32 */)
}

def @func_6912() -> Tensor[(7, 16, 4), float32] {
  %403 = fn () -> Tensor[(7, 16, 4), float32] {
    %402 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %402.0
  };
  %403() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7606(%var_7591: Tensor[(11, 12, 16), int16], %var_7592: Tensor[(11, 12, 16), int16], %var_7598: Tensor[(120), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(120), uint16], Tensor[(11, 12, 16), int16]) {
  %404 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %405 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %406 = reshape(%404, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %407 = reshape(%405, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %408 = @func_2697(%406, %407) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) */;
  %409 = cast(%var_7592, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %410 = shape_of(%var_7591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_7591, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %413 = maximum(%411, %412) /* ty=Tensor[(11, 12, 16), int16] */;
  %414 = cast(%var_7592, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %418 = %408.0;
  %419 = add(%416, %417) /* ty=Tensor[(11, 12, 16), int16] */;
  (%418, %var_7598, %419)
}

def @func_8603() -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32]) {
  %424 = fn () -> (Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32]) {
    %420 = @func_1343() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
    %421 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
    %422 = %420.2;
    %423 = %421.0;
    (%422, %423)
  };
  %424() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32]) */
}

def @func_363(%var_361: Tensor[(3, 15, 3), float64], %var_362: Tensor[(1512), int8]) -> (Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) {
  %438 = fn (%var_340: Tensor[(3, 15, 3), float64], %var_352: Tensor[(1512), int8]) -> (Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) {
    %425 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
    %426 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%var_340, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %429 = cast(%var_340, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
    %430 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(3, 15, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %433 = cast(%var_352, dtype="int8") /* ty=Tensor[(1512), int8] */;
    %434 = reshape(%433, newshape=[14, 9, 12]) /* ty=Tensor[(14, 9, 12), int8] */;
    %435 = subtract(%427, %428) /* ty=Tensor[(3, 15, 3), float64] */;
    %436 = greater_equal(%431, %432) /* ty=Tensor[(3, 15, 3), bool] */;
    %437 = @func_108(%434) /* ty=Tensor[(14, 9, 12), int8] */;
    (%435, %436, %437, %var_352)
  };
  %438(%var_361, %var_362) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */
}

def @func_2344() -> Tensor[(7, 16, 4), float32] {
  %439 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_209() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %439() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4506(%var_4505: Tensor[(6, 3, 7), float32]) -> (Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) {
  %444 = fn (%var_4485: Tensor[(6, 3, 7), float32]) -> (Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) {
    %440 = cast(%var_4485, dtype="float32") /* ty=Tensor[(6, 3, 7), float32] */;
    %441 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %442 = cos(%440) /* ty=Tensor[(6, 3, 7), float32] */;
    %443 = %441.0;
    (%442, %443)
  };
  %444(%var_4505) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_9968(%var_9962: Tensor[(11, 14, 11), int8]) -> (Tensor[(11, 14, 11), bool],) {
  %445 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
  %446 = shape_of(%var_9962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_9962, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = not_equal(%447, %448) /* ty=Tensor[(11, 14, 11), bool] */;
  (%449,)
}

def @func_7917(%var_7916: Tensor[(4, 4, 1), float32]) -> (Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) {
  %458 = fn (%var_7897: Tensor[(4, 4, 1), float32]) -> (Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) {
    %450 = cast(%var_7897, dtype="float32") /* ty=Tensor[(4, 4, 1), float32] */;
    %451 = @func_7095() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %454 = reshape(%453, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %455 = @func_2819(%454) /* ty=(Tensor[(7, 16, 4), uint64],) */;
    %456 = acos(%450) /* ty=Tensor[(4, 4, 1), float32] */;
    %457 = %455.0;
    (%456, %452, %457)
  };
  %458(%var_7916) /* ty=(Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) */
}

def @func_1780() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_1778() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_4837() -> Tensor[(7, 16, 4), float32] {
  @func_3354() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3355() -> Tensor[(7, 16, 4), float32] {
  %459 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_3138() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %459() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9971(%var_9969: Tensor[(11, 14, 11), int8]) -> (Tensor[(11, 14, 11), bool],) {
  @func_9968(%var_9969) /* ty=(Tensor[(11, 14, 11), bool],) */
}

def @func_4806() -> (Tensor[(7, 16, 4), float32], int32) {
  %463 = fn () -> (Tensor[(7, 16, 4), float32], int32) {
    %460 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %461 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
    %462 = %460.2;
    (%461, %462)
  };
  %463() /* ty=(Tensor[(7, 16, 4), float32], int32) */
}

def @func_6104() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %464 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %465 = %464.1;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %467 = atanh(%466) /* ty=Tensor[(7, 16, 4), float32] */;
  %468 = @func_3031() /* ty=Tensor[(14, 3), int32] */;
  (%467, %468)
}

def @func_209() -> Tensor[(7, 16, 4), float32] {
  %469 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %470 = sqrt(%469) /* ty=Tensor[(7, 16, 4), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  acos(%471) /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4126() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_4124() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_5325() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %472 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %473 = %472.1;
  %474 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
  (%473, %474)
}

def @func_5929() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(14, 9, 12), float32], Tensor[(135), float64], Tensor[(7, 16, 4), float32]) {
  %475 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %476 = reshape(%475, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %477 = @func_3282(%476) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %478 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %479 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %481 = reshape(%478, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %482 = reshape(%480, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %483 = @func_4621(%481, %482) /* ty=(Tensor[(14, 3), int32], Tensor[(14, 9, 12), float32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(7, 16, 4), bool], Tensor[(448), float32], Tensor[(7, 16, 4), float64]) */;
  %484 = %477.1;
  %485 = %483.1;
  %486 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  (%479, %484, meta[relay.Constant][18] /* ty=Tensor[(96), uint64] */, %485, meta[relay.Constant][19] /* ty=Tensor[(135), float64] */, %486)
}

def @func_5993() -> (Tensor[(7, 16, 4), float32],) {
  @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_7129() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %487 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %488 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %489 = %487.0;
  (%488, %489)
}

def @func_5031() -> Tensor[(7, 16, 4), float32] {
  @func_4837() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_8897() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_8895() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_8531() -> Tensor[(7, 15, 16), uint64] {
  %490 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %491 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(7, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %494 = divide(%492, %493) /* ty=Tensor[(7, 15, 16), float32] */;
  %495 = cast(%494, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %496 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 15, 16), float32] */, dtype="uint16") /* ty=Tensor[(7, 15, 16), uint16] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %499 = subtract(%497, %498) /* ty=Tensor[(7, 15, 16), uint16] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %501 = cos(%500) /* ty=Tensor[(7, 15, 16), float32] */;
  %502 = cast(%494, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%504, %505) /* ty=Tensor[(7, 15, 16), uint64] */
}

def @func_4938() -> Tensor[(7, 16, 4), float32] {
  %507 = fn () -> Tensor[(7, 16, 4), float32] {
    %506 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %506.0
  };
  %507() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_10597(%var_10596: Tensor[(14, 9, 12), float64]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), bool]) {
  %516 = fn (%var_10574: Tensor[(14, 9, 12), float64]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), bool]) {
    %508 = @func_9192() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) */;
    %509 = %508.1;
    %510 = cast(%var_10574, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
    %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%509, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %514 = @func_5200() /* ty=Tensor[(7, 16, 4), float32] */;
    %515 = logical_and(%512, %513) /* ty=Tensor[(14, 9, 12), bool] */;
    (%514, %515)
  };
  %516(%var_10596) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), bool]) */
}

def @main() -> (Tensor[(7, 16, 4), float32],) {
  %517 = @func_8247() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) */;
  %518 = %517.4;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %520 = sinh(%519) /* ty=Tensor[(7, 16, 4), float32] */;
  (%520,)
}

def @func_4284(%var_4283: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) {
  %533 = fn (%var_4273: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) {
    %521 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
    %524 = reshape(%523, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
    %525 = @func_4014(%524) /* ty=(Tensor[(7, 16, 4), bool],) */;
    %526 = cast(%var_4273, dtype="int32") /* ty=int32 */;
    %527 = reshape(%526, newshape=[]) /* ty=int32 */;
    %528 = @func_3498(%527) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
    %529 = @func_4165() /* ty=(Tensor[(14, 9, 12), float64],) */;
    %530 = %525.0;
    %531 = %528.3;
    %532 = %529.0;
    (%522, %530, %531, %var_4273, %532)
  };
  %533(%var_4283) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) */
}

def @func_8476() -> (Tensor[(7, 16, 4), float32],) {
  %536 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %534 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %535 = %534.2;
    (%535,)
  };
  %536() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_6473(%var_6471: float32, %var_6472: Tensor[(3, 6, 14), float32]) -> (Tensor[(3, 6, 14), float32],) {
  %540 = fn (%var_6455: float32, %var_6456: Tensor[(3, 6, 14), float32]) -> (Tensor[(3, 6, 14), float32],) {
    %537 = cast(%var_6455, dtype="float32") /* ty=float32 */;
    %538 = cast(%var_6456, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
    %539 = floor_mod(%537, %538) /* ty=Tensor[(3, 6, 14), float32] */;
    (%539,)
  };
  %540(%var_6471, %var_6472) /* ty=(Tensor[(3, 6, 14), float32],) */
}

def @func_4414() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %541 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %542 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
  (%541, %542)
}

def @func_8077() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(6, 4, 4), float32]) {
  @func_8075() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(6, 4, 4), float32]) */
}

def @func_3417() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_5269(%var_5214: Tensor[(2, 14, 4), uint16], %var_5215: Tensor[(2, 14, 4), uint16], %var_5226: Tensor[(135), float64], %var_5227: Tensor[(1512, 1), int8], %var_5236: Tensor[(2, 14, 4), uint16]) -> (Tensor[(2, 14, 4), uint16], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512, 1), int8], Tensor[(14, 9, 12), int8], Tensor[(2, 14, 4), bool], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 3), int32]) {
  %543 = cast(%var_5215, dtype="uint16") /* ty=Tensor[(2, 14, 4), uint16] */;
  %544 = shape_of(%var_5214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_5214, dtype="uint16") /* ty=Tensor[(2, 14, 4), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %547 = cast(%var_5226, dtype="float64") /* ty=Tensor[(135), float64] */;
  %548 = cast(%var_5227, dtype="int8") /* ty=Tensor[(1512, 1), int8] */;
  %549 = reshape(%547, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %550 = reshape(%548, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %551 = @func_360(%549, %550) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %552 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %553 = cast(%var_5236, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %554 = shape_of(%var_5214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_5214, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %558 = reshape(%557, newshape=[]) /* ty=int32 */;
  %559 = @func_4874(%558) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %560 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %561 = reshape(%560, newshape=[]) /* ty=int32 */;
  %562 = bitwise_and(%545, %546) /* ty=Tensor[(2, 14, 4), uint16] */;
  %563 = %551.3;
  %564 = %552.7;
  %565 = not_equal(%555, %556) /* ty=Tensor[(2, 14, 4), bool] */;
  %566 = %559.1;
  %567 = @func_523(%561) /* ty=Tensor[(14, 3), int32] */;
  (%562, %563, %var_5226, %var_5227, %564, %565, %566, 8 /* ty=int32 */, %567)
}

def @func_2697(%var_2671: Tensor[(15, 8, 1), uint16], %var_2672: Tensor[(15, 8, 1), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) {
  %568 = cast(%var_2672, dtype="uint16") /* ty=Tensor[(15, 8, 1), uint16] */;
  %569 = shape_of(%var_2671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_2671, dtype="uint16") /* ty=Tensor[(15, 8, 1), uint16] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %572 = cast(%var_2672, dtype="float32") /* ty=Tensor[(15, 8, 1), float32] */;
  %573 = cast(%var_2671, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
  %574 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_2672, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = left_shift(%570, %571) /* ty=Tensor[(15, 8, ?), uint16] */;
  %578 = tan(%572) /* ty=Tensor[(15, 8, 1), float32] */;
  %579 = greater_equal(%575, %576) /* ty=Tensor[(15, 8, ?), bool] */;
  (%577, %578, %579)
}

def @func_5646(%var_5644: Tensor[(3, 16, 3), int32], %var_5645: Tensor[(3, 16, 3), int32]) -> (Tensor[(3, 16, 3), int32],) {
  %585 = fn (%var_5631: Tensor[(3, 16, 3), int32], %var_5632: Tensor[(3, 16, 3), int32]) -> (Tensor[(3, 16, 3), int32],) {
    %580 = cast(%var_5632, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %581 = shape_of(%var_5631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(%var_5631, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %584 = right_shift(%582, %583) /* ty=Tensor[(3, 16, 3), int32] */;
    (%584,)
  };
  %585(%var_5644, %var_5645) /* ty=(Tensor[(3, 16, 3), int32],) */
}

def @func_3206() -> (Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) {
  @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */
}

def @func_6380() -> Tensor[(7, 16, 4), float32] {
  %586 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_2538() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %586() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3397() -> Tensor[(7, 16, 4), float32] {
  %588 = fn () -> Tensor[(7, 16, 4), float32] {
    %587 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %587.0
  };
  %588() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_8533() -> Tensor[(7, 15, 16), uint64] {
  @func_8531() /* ty=Tensor[(7, 15, 16), uint64] */
}

def @func_786(%var_756: Tensor[(15, 10, 10), int8], %var_757: Tensor[(15, 10, 10), int8], %var_770: Tensor[(15, 10, 10), int8]) -> Tensor[(15, 10, 10), bool] {
  %589 = cast(%var_757, dtype="int8") /* ty=Tensor[(15, 10, 10), int8] */;
  %590 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_756, dtype="int8") /* ty=Tensor[(15, 10, 10), int8] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %593 = right_shift(%591, %592) /* ty=Tensor[(15, 10, 10), int8] */;
  %594 = cast(%var_770, dtype="bool") /* ty=Tensor[(15, 10, 10), bool] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%593, dtype="bool") /* ty=Tensor[(15, 10, 10), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%596, %597) /* ty=Tensor[(15, 10, 10), bool] */
}

def @func_1208(%var_1207: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int16],) {
  %605 = fn (%var_1189: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), int16],) {
    %598 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %599 = %598.1;
    %600 = cast(%var_1189, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="int16") /* ty=Tensor[(7, 16, 4), int16] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %604 = minimum(%602, %603) /* ty=Tensor[(7, 16, 4), int16] */;
    (%604,)
  };
  %605(%var_1207) /* ty=(Tensor[(7, 16, 4), int16],) */
}

def @func_4124() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %606 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %607 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
  %608 = %606.0;
  (%607, %608)
}

def @func_8786() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %609 = @func_5473() /* ty=Tensor[(7, 16, 4), float32] */;
  %610 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
  (%609, %610)
}

def @func_9057() -> (Tensor[(96), uint64],) {
  %611 = @func_6453() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) */;
  %612 = %611.1;
  (%612,)
}

def @func_3874() -> Tensor[(7, 16, 4), float32] {
  %614 = fn () -> Tensor[(7, 16, 4), float32] {
    %613 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %613.0
  };
  %614() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3032() -> Tensor[(14, 3), int32] {
  %615 = fn () -> Tensor[(14, 3), int32] {
    @func_2892() /* ty=Tensor[(14, 3), int32] */
  };
  %615() /* ty=Tensor[(14, 3), int32] */
}

def @func_1298() -> Tensor[(7, 16, 4), float32] {
  %616 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_649() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %616() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4179() -> (Tensor[(7, 16, 4), float32],) {
  @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_7281() -> Tensor[(15, 2, 9), float32] {
  %618 = fn () -> Tensor[(15, 2, 9), float32] {
    %617 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 9), float32] */;
    sin(%617) /* ty=Tensor[(15, 2, 9), float32] */
  };
  %618() /* ty=Tensor[(15, 2, 9), float32] */
}

def @func_10408() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %619 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
  %620 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
  (%619, %620)
}

def @func_8247() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) {
  %629 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) {
    %621 = @func_1840() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %622 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1350), int64] */, dtype="int64") /* ty=Tensor[(1, 1350), int64] */;
    %623 = reshape(%622, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
    %624 = @func_3969(%623) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
    %625 = @func_5200() /* ty=Tensor[(7, 16, 4), float32] */;
    %626 = %621.0;
    %627 = %624.0;
    %628 = @func_1859() /* ty=Tensor[(7, 16, 4), float32] */;
    (%625, %626, %627, meta[relay.Constant][23] /* ty=Tensor[(1, 1350), int64] */, %628)
  };
  %629() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(1, 1350), int64], Tensor[(7, 16, 4), float32]) */
}

def @func_1043() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */
}

def @func_9192() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], Tensor[(14, 3), int32]) {
  %630 = @func_8297() /* ty=(Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) */;
  %631 = @func_5567() /* ty=Tensor[(14, 9, 12), int8] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %633 = atanh(%632) /* ty=Tensor[(14, 9, 12), float64] */;
  %634 = cast(%631, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
  %639 = %630.1;
  %640 = power(%636, %637) /* ty=Tensor[(14, 9, 12), float64] */;
  %641 = %638.0;
  (%639, %640, %641)
}

def @func_10484() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
  %647 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) {
    %642 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %643 = @func_7268() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */;
    %644 = %642.0;
    %645 = @func_6517() /* ty=Tensor[(14, 3), int32] */;
    %646 = %643.3;
    (%644, %645, %646)
  };
  %647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32) */
}

def @func_8895() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %648 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %649 = @func_4153() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %650 = @func_4177() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %651 = %648.0;
  %652 = @func_6911() /* ty=Tensor[(7, 16, 4), float32] */;
  %653 = %649.0;
  %654 = %650.0;
  (%651, %652, %653, %654)
}

def @func_8562() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %655 = @func_5610() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %656 = @func_2658() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %657 = %655.0;
  %658 = %656.0;
  (%657, %658)
}

def @func_3204() -> (Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) {
  %659 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %660 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %661 = reshape(%659, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %662 = reshape(%660, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), uint16] */;
  %663 = @func_2697(%661, %662) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) */;
  %664 = cast(meta[relay.Constant][25] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %665 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(120), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %666 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %668 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %669 = %663.2;
  %670 = bitwise_or(%666, %667) /* ty=Tensor[(120), uint16] */;
  (%668, %669, %670)
}

def @func_7018() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
  %679 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) {
    %671 = @func_6453() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(8, 3, 4), int16], Tensor[(7, 16, 4), int16], Tensor[(8, 3, 4), float64]) */;
    %672 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %673 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %674 = reshape(%673, newshape=[]) /* ty=int32 */;
    %675 = @func_4282(%674) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) */;
    %676 = %671.0;
    %677 = %672.0;
    %678 = %675.0;
    (%676, %677, %678, -4 /* ty=int32 */)
  };
  %679() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */
}

def @func_10065() -> Tensor[(7, 16, 4), float32] {
  %680 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %680.1
}

def @func_2540() -> Tensor[(7, 16, 4), float32] {
  @func_2538() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_4254() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %684 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
    %681 = @func_3757() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %682 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    %683 = %681.0;
    (%682, %683)
  };
  %684() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_4177() -> (Tensor[(7, 16, 4), float32],) {
  %685 = @func_2343() /* ty=Tensor[(7, 16, 4), float32] */;
  (%685,)
}

def @func_2875(%var_2869: int32) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) {
  %686 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %687 = %686.0;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %689 = cast(%var_2869, dtype="int32") /* ty=int32 */;
  %690 = reshape(%689, newshape=[]) /* ty=int32 */;
  %691 = @func_1013(%690) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */;
  %692 = log10(%688) /* ty=Tensor[(7, 16, 4), float64] */;
  %693 = %691.4;
  (%692, %693, %var_2869)
}

def @func_9717() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %698 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
    %694 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
    %695 = @func_5813() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %696 = %694.3;
    %697 = %695.0;
    (%696, %697)
  };
  %698() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_4955() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) {
  %699 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %700 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %701 = reshape(%700, newshape=[]) /* ty=int32 */;
  %702 = @func_4282(%701) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), bool], Tensor[(14, 3), int32], int32, Tensor[(14, 9, 12), float64]) */;
  %703 = %699.0;
  %704 = %702.4;
  (%703, %704, -6 /* ty=int32 */)
}

def @func_6886(%var_6884: Tensor[(12, 4, 8), int8], %var_6885: Tensor[(12, 4, 8), int8]) -> (Tensor[(12, 4, 8), int8], Tensor[(7, 16, 4), float32]) {
  %711 = fn (%var_6862: Tensor[(12, 4, 8), int8], %var_6863: Tensor[(12, 4, 8), int8]) -> (Tensor[(12, 4, 8), int8], Tensor[(7, 16, 4), float32]) {
    %705 = cast(%var_6863, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
    %706 = shape_of(%var_6862, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%var_6862, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %709 = left_shift(%707, %708) /* ty=Tensor[(12, 4, 8), int8] */;
    %710 = @func_5473() /* ty=Tensor[(7, 16, 4), float32] */;
    (%709, %710)
  };
  %711(%var_6884, %var_6885) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(7, 16, 4), float32]) */
}

def @func_1041() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  %712 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %713 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %714 = reshape(%713, newshape=[]) /* ty=int32 */;
  %715 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %716 = %712.1;
  %717 = @func_523(%714) /* ty=Tensor[(14, 3), int32] */;
  %718 = @func_649() /* ty=Tensor[(7, 16, 4), float32] */;
  %719 = %715.5;
  (%716, %717, 1 /* ty=int32 */, %718, %719)
}

def @func_2973() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %723 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
    %720 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
    %721 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
    %722 = %720.0;
    (%721, %722)
  };
  %723() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_4374() -> (Tensor[(7, 16, 4), float32],) {
  %725 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %724 = @func_3138() /* ty=Tensor[(7, 16, 4), float32] */;
    (%724,)
  };
  %725() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_9917() -> (Tensor[(7, 16, 4), float32], Tensor[(1350, 1), int64], float64, Tensor[(6, 11, 16), float64], Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  %726 = @func_3204() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 8, ?), bool], Tensor[(120), uint16]) */;
  %727 = cast(0.265355f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %728 = reshape(%727, newshape=[]) /* ty=float64 */;
  %729 = @func_9044(%728) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) */;
  %730 = cast(0.265355f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %731 = cast(meta[relay.Constant][26] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %732 = reshape(%730, newshape=[]) /* ty=float64 */;
  %733 = reshape(%731, newshape=[6, 11, 16]) /* ty=Tensor[(6, 11, 16), float64] */;
  %734 = @func_3004(%732, %733) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) */;
  %735 = cast(0.265355f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %736 = reshape(%735, newshape=[]) /* ty=int32 */;
  %737 = @func_4874(%736) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %738 = %726.0;
  %739 = %729.2;
  %740 = %734.0;
  %741 = %737.1;
  (%738, %739, 0.265355f64 /* ty=float64 */, %740, meta[relay.Constant][26] /* ty=Tensor[(1056), float64] */, %741)
}

def @func_1594() -> Tensor[(135), float64] {
  %743 = fn () -> Tensor[(135), float64] {
    %742 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %742.4
  };
  %743() /* ty=Tensor[(135), float64] */
}

def @func_4581() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16], Tensor[(135), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(1350), int64], Tensor[(1350), int64], Tensor[(7, 16, 4), float32]) {
  %757 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16], Tensor[(135), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(1350), int64], Tensor[(1350), int64], Tensor[(7, 16, 4), float32]) {
    %744 = @func_3396() /* ty=Tensor[(7, 16, 4), float32] */;
    %745 = cast(%744, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %746 = reshape(%745, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
    %747 = @func_1206(%746) /* ty=(Tensor[(7, 16, 4), int16],) */;
    %748 = cast(meta[relay.Constant][27] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %749 = reshape(%748, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
    %750 = @func_4474(%749) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
    %751 = %747.0;
    %752 = @func_1593() /* ty=Tensor[(135), float64] */;
    %753 = @func_2538() /* ty=Tensor[(7, 16, 4), float32] */;
    %754 = @func_3138() /* ty=Tensor[(7, 16, 4), float32] */;
    %755 = %750.2;
    %756 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    (%744, %751, %752, %753, %754, %755, meta[relay.Constant][27] /* ty=Tensor[(1350), int64] */, %756)
  };
  %757() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16], Tensor[(135), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(1350), int64], Tensor[(1350), int64], Tensor[(7, 16, 4), float32]) */
}

def @func_1343() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) {
  %758 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %760 = reshape(%759, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), float32] */;
  %761 = @func_1206(%760) /* ty=(Tensor[(7, 16, 4), int16],) */;
  %762 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %763 = %761.0;
  (%762, %758, %763)
}

def @func_6106() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  @func_6104() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */
}

def @func_5761() -> (Tensor[(7, 16, 4), float32],) {
  %768 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %764 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %765 = %764.0;
    %766 = cast(%765, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
    %767 = sin(%766) /* ty=Tensor[(7, 16, 4), float32] */;
    (%767,)
  };
  %768() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_211() -> Tensor[(7, 16, 4), float32] {
  @func_209() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_8944() -> (Tensor[(7, 16, 4), float32], int32) {
  @func_8942() /* ty=(Tensor[(7, 16, 4), float32], int32) */
}

def @func_3007(%var_3005: float64, %var_3006: Tensor[(6, 11, 16), float64]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) {
  %775 = fn (%var_2980: float64, %var_2981: Tensor[(6, 11, 16), float64]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) {
    %769 = cast(%var_2980, dtype="float64") /* ty=float64 */;
    %770 = cast(%var_2981, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
    %771 = cast(%var_2980, dtype="int32") /* ty=int32 */;
    %772 = reshape(%771, newshape=[]) /* ty=int32 */;
    %773 = mod(%769, %770) /* ty=Tensor[(6, 11, 16), float64] */;
    %774 = @func_523(%772) /* ty=Tensor[(14, 3), int32] */;
    (%773, %774)
  };
  %775(%var_3005, %var_3006) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) */
}

def @func_9659() -> Tensor[(15, 2, 9), float32] {
  %776 = fn () -> Tensor[(15, 2, 9), float32] {
    @func_7280() /* ty=Tensor[(15, 2, 9), float32] */
  };
  %776() /* ty=Tensor[(15, 2, 9), float32] */
}

def @func_6517() -> Tensor[(14, 3), int32] {
  %777 = @func_6104() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %777.1
}

def @func_9620() -> Tensor[(7, 16, 4), float32] {
  %778 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_649() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %778() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_9394() -> (Tensor[(7, 16, 4), float32],) {
  %779 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %780 = %779.0;
  (%780,)
}

def @func_2135() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
  %789 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
    %781 = @func_1778() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %782 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %783 = %782.2;
    %784 = cast(%783, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %785 = log10(%784) /* ty=Tensor[(14, 9, 12), float64] */;
    %786 = cast(%785, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
    %787 = %781.0;
    %788 = acos(%786) /* ty=Tensor[(14, 9, 12), float32] */;
    (%787, %788)
  };
  %789() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */
}

def @func_5327() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_5325() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_2084() -> (Tensor[(7, 16, 4), float32],) {
  @func_2082() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_7745() -> (Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 9, 12), float64], Tensor[(14, 9, 12), float64]) {
  %790 = @func_4200() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16]) */;
  %791 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %792 = reshape(%791, newshape=[]) /* ty=int32 */;
  %793 = @func_2875(%792) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) */;
  %794 = @func_4165() /* ty=(Tensor[(14, 9, 12), float64],) */;
  %795 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %796 = %790.1;
  %797 = %793.1;
  %798 = %794.0;
  %799 = %795.1;
  (%796, %797, -2 /* ty=int32 */, %798, %799)
}

def @func_2042(%var_2040: Tensor[(7, 16, 4), float32], %var_2041: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) {
  %818 = fn (%var_2004: Tensor[(7, 16, 4), float32], %var_2028: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) {
    %800 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
    %801 = cast(%var_2004, dtype="uint32") /* ty=Tensor[(7, 16, 4), uint32] */;
    %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%800, dtype="uint32") /* ty=Tensor[(7, 16, 4), uint32] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %805 = left_shift(%803, %804) /* ty=Tensor[(7, 16, 4), uint32] */;
    %806 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 16, 4), uint32] */, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
    %808 = cast(%805, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %810 = cast(%var_2028, dtype="uint16") /* ty=Tensor[(7, 16, 4), uint16] */;
    %811 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%800, dtype="uint16") /* ty=Tensor[(7, 16, 4), uint16] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %814 = cast(%var_2028, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %815 = logical_and(%808, %809) /* ty=Tensor[(7, 16, 4), bool] */;
    %816 = right_shift(%812, %813) /* ty=Tensor[(7, 16, 4), uint16] */;
    %817 = tan(%814) /* ty=Tensor[(7, 16, 4), float64] */;
    (%815, %816, %817)
  };
  %818(%var_2040, %var_2041) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(7, 16, 4), uint16], Tensor[(7, 16, 4), float64]) */
}

def @func_8694() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %819 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %820 = @func_8562() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %821 = %819.0;
  %822 = %820.1;
  (%821, %822)
}

def @func_3987() -> Tensor[(14, 9, 12), int8] {
  %824 = fn () -> Tensor[(14, 9, 12), int8] {
    %823 = @func_2726() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float64], Tensor[(14, 9, 12), int8]) */;
    %823.2
  };
  %824() /* ty=Tensor[(14, 9, 12), int8] */
}

def @func_1553(%var_1539: Tensor[(135, 1), float64], %var_1540: Tensor[(1512), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) {
  %825 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %826 = cast(%var_1539, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %827 = cast(%var_1540, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %828 = reshape(%826, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %829 = reshape(%827, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %830 = @func_360(%828, %829) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %831 = cast(%var_1539, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %832 = cast(%var_1540, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %833 = reshape(%831, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %834 = reshape(%832, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
  %835 = @func_360(%833, %834) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
  %836 = @func_649() /* ty=Tensor[(7, 16, 4), float32] */;
  %837 = %825.1;
  %838 = %830.2;
  %839 = %835.2;
  (%836, %837, %838, %var_1539, %var_1540, %839)
}

def @func_4957() -> (Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) {
  @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */
}

def @func_4068() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  @func_4066() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */
}

def @func_9044(%var_9016: float64) -> (Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) {
  %840 = cast(%var_9016, dtype="float64") /* ty=float64 */;
  %841 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  %842 = cast(meta[relay.Constant][30] /* ty=Tensor[(1350, 1), int64] */, dtype="int64") /* ty=Tensor[(1350, 1), int64] */;
  %843 = reshape(%842, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %844 = @func_3969(%843) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */;
  %845 = power(%840, %841) /* ty=Tensor[(9, 12, 8), float64] */;
  %846 = %844.0;
  (%845, %846, meta[relay.Constant][30] /* ty=Tensor[(1350, 1), int64] */)
}

def @func_6277(%var_6276: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) {
  %854 = fn (%var_6256: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) {
    %847 = cast(meta[relay.Constant][31] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %848 = cast(%var_6256, dtype="int32") /* ty=int32 */;
    %849 = reshape(%847, newshape=[135, 10]) /* ty=Tensor[(135, 10), int64] */;
    %850 = reshape(%848, newshape=[]) /* ty=int32 */;
    %851 = @func_4789(%849, %850) /* ty=(Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) */;
    %852 = @func_5031() /* ty=Tensor[(7, 16, 4), float32] */;
    %853 = %851.4;
    (%852, %853, meta[relay.Constant][31] /* ty=Tensor[(1350), int64] */, %var_6256)
  };
  %854(%var_6276) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) */
}

def @func_9642() -> (Tensor[(7, 16, 4), float32], Tensor[(96), uint64]) {
  @func_9640() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(96), uint64]) */
}

def @func_3140() -> Tensor[(7, 16, 4), float32] {
  @func_3138() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_574() -> Tensor[(7, 16, 4), float32] {
  @func_572() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_2878(%var_2876: int32) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) {
  @func_2875(%var_2876) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], int32) */
}

def @func_6599(%var_6585: int32) -> (Tensor[(12, 9, 16), int64], Tensor[(7, 16, 4), uint16], int32) {
  %855 = cast(%var_6585, dtype="int32") /* ty=int32 */;
  %856 = reshape(%855, newshape=[]) /* ty=int32 */;
  %857 = @func_6275(%856) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint16], Tensor[(1350), int64], int32) */;
  %858 = @func_5680() /* ty=Tensor[(12, 9, 16), int64] */;
  %859 = %857.1;
  (%858, %859, %var_6585)
}

def @func_10193() -> Tensor[(7, 16, 4), float32] {
  %860 = @func_5991() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %860.0
}

def @func_525(%var_524: int32) -> Tensor[(14, 3), int32] {
  %863 = fn (%var_508: int32) -> Tensor[(14, 3), int32] {
    %861 = cast(%var_508, dtype="int32") /* ty=int32 */;
    %862 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 3), int32] */, dtype="int32") /* ty=Tensor[(14, 3), int32] */;
    logical_xor(%861, %862) /* ty=Tensor[(14, 3), int32] */
  };
  %863(%var_524) /* ty=Tensor[(14, 3), int32] */
}

def @func_4155() -> (Tensor[(7, 16, 4), float32],) {
  @func_4153() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_3138() -> Tensor[(7, 16, 4), float32] {
  %864 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %864.0
}

def @func_6810() -> Tensor[(7, 16, 4), float32] {
  %865 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_3138() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %865() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_2538() -> Tensor[(7, 16, 4), float32] {
  %866 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %866.1
}

def @func_10261() -> (Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], int32) {
  @func_10259() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float32], int32) */
}

def @func_3972(%var_3970: Tensor[(1350), int64]) -> (Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  @func_3969(%var_3970) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) */
}

def @func_271() -> Tensor[(7, 16, 4), float32] {
  %867 = fn () -> Tensor[(7, 16, 4), float32] {
    @func_209() /* ty=Tensor[(7, 16, 4), float32] */
  };
  %867() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_1015(%var_1014: int32) -> (Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
  %893 = fn (%var_977: int32) -> (Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) {
    %868 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %869 = cast(%var_977, dtype="int32") /* ty=int32 */;
    %870 = reshape(%869, newshape=[]) /* ty=int32 */;
    %871 = cast(meta[relay.Constant][33] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %872 = %868.7;
    %873 = cast(%872, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
    %874 = reshape(%871, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
    %875 = reshape(%873, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
    %876 = @func_360(%874, %875) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
    %877 = %876.2;
    %878 = cast(%877, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %879 = asin(%878) /* ty=Tensor[(14, 9, 12), float64] */;
    %880 = cast(%879, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
    %881 = acosh(%880) /* ty=Tensor[(14, 9, 12), float32] */;
    %882 = cast(%881, dtype="int16") /* ty=Tensor[(14, 9, 12), int16] */;
    %883 = cast(%var_977, dtype="int16") /* ty=int16 */;
    %884 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %885 = cast(%879, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %886 = cosh(%885) /* ty=Tensor[(14, 9, 12), float64] */;
    %887 = cast(%886, dtype="float32") /* ty=Tensor[(14, 9, 12), float32] */;
    %888 = cast(%var_977, dtype="float32") /* ty=float32 */;
    %889 = @func_523(%870) /* ty=Tensor[(14, 3), int32] */;
    %890 = left_shift(%882, %883) /* ty=Tensor[(14, 9, 12), int16] */;
    %891 = %884.0;
    %892 = minimum(%887, %888) /* ty=Tensor[(14, 9, 12), float32] */;
    (%872, meta[relay.Constant][33] /* ty=Tensor[(135), float64] */, %889, %890, %891, %892)
  };
  %893(%var_1014) /* ty=(Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float32]) */
}

def @func_10067() -> Tensor[(7, 16, 4), float32] {
  @func_10065() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_385() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %896 = fn () -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
    %894 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    %895 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
    (%894, %895)
  };
  %896() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_9142() -> (Tensor[(7, 16, 4), float32],) {
  %899 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %897 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
    %898 = %897.2;
    (%898,)
  };
  %899() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_6563() -> Tensor[(7, 16, 4), float32] {
  @func_6561() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_5533() -> (Tensor[(1, 14, 11), float64],) {
  @func_5531() /* ty=(Tensor[(1, 14, 11), float64],) */
}

def @func_4153() -> (Tensor[(7, 16, 4), float32],) {
  %900 = @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %901 = %900.1;
  (%901,)
}

def @func_7611(%var_7608: Tensor[(11, 12, 16), int16], %var_7609: Tensor[(11, 12, 16), int16], %var_7610: Tensor[(120), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(120), uint16], Tensor[(11, 12, 16), int16]) {
  @func_7606(%var_7608, %var_7609, %var_7610) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(120), uint16], Tensor[(11, 12, 16), int16]) */
}

def @func_9112(%var_9073: Tensor[(10, 11, 7), float64], %var_9083: Tensor[(1056), float64]) -> (Tensor[(10, 11, 7), float64], Tensor[(6, 11, 16), float64], float64, Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  %902 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 11, 7), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 7), bool] */;
  %903 = shape_of(%var_9073, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%var_9073, dtype="bool") /* ty=Tensor[(10, 11, 7), bool] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %906 = equal(%904, %905) /* ty=Tensor[(10, 11, 7), bool] */;
  %907 = cast(%906, dtype="float64") /* ty=Tensor[(10, 11, 7), float64] */;
  %908 = cast(8.37809f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %909 = cast(%var_9083, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %910 = reshape(%908, newshape=[]) /* ty=float64 */;
  %911 = reshape(%909, newshape=[6, 11, 16]) /* ty=Tensor[(6, 11, 16), float64] */;
  %912 = @func_3004(%910, %911) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 3), int32]) */;
  %913 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %914 = atan(%907) /* ty=Tensor[(10, 11, 7), float64] */;
  %915 = %912.0;
  %916 = %913.0;
  (%914, %915, 8.37809f64 /* ty=float64 */, %var_9083, %916)
}

def @func_7548(%var_7547: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(120), uint16], Tensor[(14, 3), int32], int32) {
  %923 = fn (%var_7528: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(120), uint16], Tensor[(14, 3), int32], int32) {
    %917 = @func_4373() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %918 = cast(%var_7528, dtype="int32") /* ty=int32 */;
    %919 = reshape(%918, newshape=[]) /* ty=int32 */;
    %920 = %917.0;
    %921 = @func_6757() /* ty=Tensor[(120), uint16] */;
    %922 = @func_523(%919) /* ty=Tensor[(14, 3), int32] */;
    (%920, %921, %922, %var_7528)
  };
  %923(%var_7547) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(120), uint16], Tensor[(14, 3), int32], int32) */
}

def @func_6602(%var_6600: int32) -> (Tensor[(12, 9, 16), int64], Tensor[(7, 16, 4), uint16], int32) {
  @func_6599(%var_6600) /* ty=(Tensor[(12, 9, 16), int64], Tensor[(7, 16, 4), uint16], int32) */
}

def @func_5612() -> (Tensor[(7, 16, 4), float32],) {
  @func_5610() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_5473() -> Tensor[(7, 16, 4), float32] {
  %924 = @func_401() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %924.0
}

def @func_3500(%var_3499: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %939 = fn (%var_3459: int32) -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
    %925 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %926 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %927 = cast(%var_3459, dtype="int32") /* ty=int32 */;
    %928 = reshape(%927, newshape=[]) /* ty=int32 */;
    %929 = @func_1883() /* ty=(Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), int16]) */;
    %930 = @func_732() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %931 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %932 = %925.0;
    %933 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
    %934 = %926.0;
    %935 = @func_523(%928) /* ty=Tensor[(14, 3), int32] */;
    %936 = %929.0;
    %937 = %930.0;
    %938 = %931.0;
    (%932, %933, %934, %935, %var_3459, %936, %937, %938)
  };
  %939(%var_3499) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */
}

def @func_3090(%var_3089: Tensor[(4, 15, 6), float32]) -> (Tensor[(4, 15, 6), int16],) {
  %950 = fn (%var_3060: Tensor[(4, 15, 6), float32]) -> (Tensor[(4, 15, 6), int16],) {
    %940 = cast(%var_3060, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
    %941 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %942 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
    %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %944 = minimum(%942, %943) /* ty=Tensor[(4, 15, 6), float32] */;
    %945 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 6), float32] */, dtype="int16") /* ty=Tensor[(4, 15, 6), int16] */;
    %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
    %947 = cast(%944, dtype="int16") /* ty=Tensor[(4, 15, 6), int16] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %949 = maximum(%947, %948) /* ty=Tensor[(4, 15, 6), int16] */;
    (%949,)
  };
  %950(%var_3089) /* ty=(Tensor[(4, 15, 6), int16],) */
}

def @func_9047(%var_9045: float64) -> (Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) {
  @func_9044(%var_9045) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(14, 9, 12), int8], Tensor[(1350, 1), int64]) */
}

def @func_5276(%var_5271: Tensor[(2, 14, 4), uint16], %var_5272: Tensor[(2, 14, 4), uint16], %var_5273: Tensor[(135), float64], %var_5274: Tensor[(1512, 1), int8], %var_5275: Tensor[(2, 14, 4), uint16]) -> (Tensor[(2, 14, 4), uint16], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512, 1), int8], Tensor[(14, 9, 12), int8], Tensor[(2, 14, 4), bool], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 3), int32]) {
  @func_5269(%var_5271, %var_5272, %var_5273, %var_5274, %var_5275) /* ty=(Tensor[(2, 14, 4), uint16], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512, 1), int8], Tensor[(14, 9, 12), int8], Tensor[(2, 14, 4), bool], Tensor[(7, 16, 4), float32], int32, Tensor[(14, 3), int32]) */
}

def @func_6342() -> Tensor[(14, 9, 12), int8] {
  @func_6340() /* ty=Tensor[(14, 9, 12), int8] */
}

def @func_5991() -> (Tensor[(7, 16, 4), float32],) {
  %951 = @func_2267() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %952 = %951.0;
  (%952,)
}

def @func_8403() -> Tensor[(12, 1), int16] {
  %953 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %954 = %953.2;
  %955 = cast(%954, dtype="int16") /* ty=int16 */;
  %956 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 1), int32] */, dtype="int16") /* ty=Tensor[(12, 1), int16] */;
  add(%955, %956) /* ty=Tensor[(12, 1), int16] */
}

def @func_8942() -> (Tensor[(7, 16, 4), float32], int32) {
  %957 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %958 = @func_4805() /* ty=(Tensor[(7, 16, 4), float32], int32) */;
  %959 = %957.2;
  %960 = %958.1;
  (%959, %960)
}

def @func_9880(%var_9756: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float64], Tensor[(7, 16, 4), float32], Tensor[(126), float32], Tensor[(15, 2, 6), float32], Tensor[(15, 2, 6), float32]) {
  %961 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %962 = shape_of(%var_9756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %963 = cast(%var_9756, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %965 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %966 = cast(meta[relay.Constant][38] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %967 = reshape(%966, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), float32] */;
  %968 = @func_4504(%967) /* ty=(Tensor[(6, 3, 7), float32], Tensor[(7, 16, 4), float32]) */;
  %969 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %970 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %971 = exp(%970) /* ty=Tensor[(15, 2, 6), float64] */;
  %972 = cast(%971, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %973 = power(%963, %964) /* ty=Tensor[(15, 2, 6), float64] */;
  %974 = acos(%965) /* ty=Tensor[(15, 2, 6), float64] */;
  %975 = %968.1;
  %976 = log10(%969) /* ty=Tensor[(15, 2, 6), float32] */;
  %977 = atan(%972) /* ty=Tensor[(15, 2, 6), float32] */;
  (%973, %974, %975, meta[relay.Constant][38] /* ty=Tensor[(126), float32] */, %976, %977)
}

def @func_7423(%var_7324: int32, %var_7341: Tensor[(96), uint64]) -> (Tensor[(15, 2, 9), float32], Tensor[(7, 16, 4), int16], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %978 = cast(%var_7324, dtype="int32") /* ty=int32 */;
  %979 = reshape(%978, newshape=[]) /* ty=int32 */;
  %980 = @func_3498(%979) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), int16], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) */;
  %981 = @func_7017() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], int32) */;
  %982 = @func_5085() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %983 = cast(%var_7341, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %984 = reshape(%983, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), uint64] */;
  %985 = @func_3282(%984) /* ty=(Tensor[(6, 4, 4), bool], Tensor[(7, 16, 4), float32], Tensor[(6, 4, 4), float32]) */;
  %986 = @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %987 = @func_2972() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %988 = cast(meta[relay.Constant][39] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %989 = cast(meta[relay.Constant][39] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %990 = reshape(%988, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %991 = reshape(%989, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %992 = @func_2169(%990, %991) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %993 = @func_7280() /* ty=Tensor[(15, 2, 9), float32] */;
  %994 = %980.5;
  %995 = %981.2;
  %996 = %982.3;
  %997 = %985.1;
  %998 = %986.0;
  %999 = %987.0;
  %1000 = @func_6315() /* ty=Tensor[(7, 16, 4), float32] */;
  %1001 = %992.1;
  (%993, %994, %var_7324, %995, %996, %997, %var_7341, %998, %999, %1000, %1001, meta[relay.Constant][39] /* ty=Tensor[(1350), int64] */)
}

def @func_1987(%var_1986: Tensor[(2, 6, 14), int16]) -> Tensor[(2, 6, 14), int16] {
  %1006 = fn (%var_1977: Tensor[(2, 6, 14), int16]) -> Tensor[(2, 6, 14), int16] {
    %1002 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 6, 14), int16] */, dtype="int16") /* ty=Tensor[(2, 6, 14), int16] */;
    %1003 = shape_of(%var_1977, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1004 = cast(%var_1977, dtype="int16") /* ty=Tensor[(2, 6, 14), int16] */;
    %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_or(%1004, %1005) /* ty=Tensor[(2, 6, 14), int16] */
  };
  %1006(%var_1986) /* ty=Tensor[(2, 6, 14), int16] */
}

def @func_110(%var_109: Tensor[(14, 9, 12), int8]) -> Tensor[(14, 9, 12), int8] {
  %1011 = fn (%var_100: Tensor[(14, 9, 12), int8]) -> Tensor[(14, 9, 12), int8] {
    %1007 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 9, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
    %1008 = shape_of(%var_100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1009 = cast(%var_100, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
    %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_xor(%1009, %1010) /* ty=Tensor[(14, 9, 12), int8] */
  };
  %1011(%var_109) /* ty=Tensor[(14, 9, 12), int8] */
}

def @func_5033() -> Tensor[(7, 16, 4), float32] {
  @func_5031() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_8203() -> Tensor[(7, 16, 4), float32] {
  %1013 = fn () -> Tensor[(7, 16, 4), float32] {
    %1012 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %1012.0
  };
  %1013() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_1104(%var_1094: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), float64] {
  %1014 = @func_270() /* ty=Tensor[(7, 16, 4), float32] */;
  %1015 = cast(%var_1094, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%1014, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%1017, %1018) /* ty=Tensor[(7, 16, 4), float64] */
}

def @func_8011(%var_8008: Tensor[(2, 13, 12), float32], %var_8009: int32, %var_8010: Tensor[(8, 2), float32]) -> (Tensor[(2, 13, 12), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(8, 2), float32]) {
  %1034 = fn (%var_7946: Tensor[(2, 13, 12), float32], %var_7959: int32, %var_7989: Tensor[(8, 2), float32]) -> (Tensor[(2, 13, 12), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(8, 2), float32]) {
    %1019 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 13, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
    %1020 = shape_of(%var_7946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1021 = cast(%var_7946, dtype="float32") /* ty=Tensor[(2, 13, 12), float32] */;
    %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1023 = cast(%var_7959, dtype="int32") /* ty=int32 */;
    %1024 = reshape(%1023, newshape=[]) /* ty=int32 */;
    %1025 = @func_3695() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %1026 = cast(%var_7989, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
    %1027 = reshape(%1026, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float32] */;
    %1028 = @func_7915(%1027) /* ty=(Tensor[(4, 4, 1), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), uint64]) */;
    %1029 = floor_mod(%1021, %1022) /* ty=Tensor[(2, 13, 12), float32] */;
    %1030 = @func_523(%1024) /* ty=Tensor[(14, 3), int32] */;
    %1031 = %1025.0;
    %1032 = @func_7642() /* ty=Tensor[(7, 16, 4), float32] */;
    %1033 = %1028.1;
    (%1029, %1030, %var_7959, %1031, %1032, %1033, %var_7989)
  };
  %1034(%var_8008, %var_8009, %var_8010) /* ty=(Tensor[(2, 13, 12), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(8, 2), float32]) */
}

def @func_3969(%var_3956: Tensor[(1350), int64]) -> (Tensor[(14, 9, 12), int8], Tensor[(15, 6, 15), float64], Tensor[(1350), int64]) {
  %1035 = @func_1751() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(135), float64], Tensor[(1512), int8]) */;
  %1036 = cast(%var_3956, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %1037 = cast(%var_3956, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %1038 = reshape(%1036, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %1039 = reshape(%1037, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %1040 = @func_2169(%1038, %1039) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float64]) */;
  %1041 = %1035.2;
  %1042 = %1040.1;
  (%1041, %1042, %var_3956)
}

def @func_2701(%var_2699: Tensor[(15, 8, 1), uint16], %var_2700: Tensor[(15, 8, 1), uint16]) -> (Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) {
  @func_2697(%var_2699, %var_2700) /* ty=(Tensor[(15, 8, ?), uint16], Tensor[(15, 8, 1), float32], Tensor[(15, 8, ?), bool]) */
}

def @func_4066() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32]) {
  %1043 = @func_3695() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1044 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1045 = @func_1662() /* ty=(Tensor[(14, 3), int32], Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(448), uint8]) */;
  %1046 = %1043.1;
  %1047 = %1044.0;
  %1048 = %1045.0;
  (%1046, %1047, %1048)
}

def @func_4166() -> (Tensor[(14, 9, 12), float64],) {
  %1054 = fn () -> (Tensor[(14, 9, 12), float64],) {
    %1049 = @func_3986() /* ty=Tensor[(14, 9, 12), int8] */;
    %1050 = cast(%1049, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %1051 = sinh(%1050) /* ty=Tensor[(14, 9, 12), float64] */;
    %1052 = cast(%1051, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %1053 = exp(%1052) /* ty=Tensor[(14, 9, 12), float64] */;
    (%1053,)
  };
  %1054() /* ty=(Tensor[(14, 9, 12), float64],) */
}

def @func_8297() -> (Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) {
  %1055 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
  %1056 = @func_6340() /* ty=Tensor[(14, 9, 12), int8] */;
  %1057 = %1055.3;
  (%1056, %1057)
}

def @func_6519() -> Tensor[(14, 3), int32] {
  @func_6517() /* ty=Tensor[(14, 3), int32] */
}

def @func_5931() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(14, 9, 12), float32], Tensor[(135), float64], Tensor[(7, 16, 4), float32]) {
  @func_5929() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(96), uint64], Tensor[(14, 9, 12), float32], Tensor[(135), float64], Tensor[(7, 16, 4), float32]) */
}

def @func_5085() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %1058 = @func_3415() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1059 = @func_4124() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1060 = @func_4955() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), float64], int32) */;
  %1061 = %1058.1;
  %1062 = @func_3354() /* ty=Tensor[(7, 16, 4), float32] */;
  %1063 = %1059.0;
  %1064 = %1060.0;
  (%1061, %1062, %1063, %1064)
}

def @func_634(%var_631: Tensor[(7, 16, 4), float32], %var_632: Tensor[(7, 16, 4), bool], %var_633: Tensor[(135), float64]) -> (Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) {
  %1089 = fn (%var_586: Tensor[(7, 16, 4), float32], %var_599: Tensor[(7, 16, 4), bool], %var_610: Tensor[(135), float64]) -> (Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) {
    %1065 = @func_209() /* ty=Tensor[(7, 16, 4), float32] */;
    %1066 = cast(%1065, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %1067 = shape_of(%var_586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1068 = cast(%var_586, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1070 = cast(%var_610, dtype="float64") /* ty=Tensor[(135), float64] */;
    %1071 = cast(meta[relay.Constant][43] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
    %1072 = reshape(%1070, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
    %1073 = reshape(%1071, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
    %1074 = @func_360(%1072, %1073) /* ty=(Tensor[(3, 15, 3), float64], Tensor[(3, 15, 3), bool], Tensor[(14, 9, 12), int8], Tensor[(1512), int8]) */;
    %1075 = cast(%var_586, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %1076 = shape_of(%1065, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1077 = cast(%1065, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %1078 = dyn.reshape(%1075, %1076, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1079 = logical_or(%1077, %1078) /* ty=Tensor[(7, 16, 4), bool] */;
    %1080 = cast(%var_599, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %1081 = shape_of(%1079, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1082 = cast(%1079, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1084 = power(%1082, %1083) /* ty=Tensor[(7, 16, 4), float64] */;
    %1085 = cast(%1084, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %1086 = greater_equal(%1068, %1069) /* ty=Tensor[(7, 16, 4), bool] */;
    %1087 = %1074.3;
    %1088 = rsqrt(%1085) /* ty=Tensor[(7, 16, 4), float64] */;
    (%1086, %1087, %var_610, meta[relay.Constant][43] /* ty=Tensor[(1512), int8] */, %1088)
  };
  %1089(%var_631, %var_632, %var_633) /* ty=(Tensor[(7, 16, 4), bool], Tensor[(1512), int8], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(7, 16, 4), float64]) */
}

def @func_8299() -> (Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) {
  @func_8297() /* ty=(Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32]) */
}

def @func_3127(%var_3125: Tensor[(8, 3, 4), uint64], %var_3126: Tensor[(8, 3, 4), uint64]) -> Tensor[(8, 3, 4), uint64] {
  @func_3123(%var_3125, %var_3126) /* ty=Tensor[(8, 3, 4), uint64] */
}

def @func_3541() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_3539() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

def @func_9116(%var_9114: Tensor[(10, 11, 7), float64], %var_9115: Tensor[(1056), float64]) -> (Tensor[(10, 11, 7), float64], Tensor[(6, 11, 16), float64], float64, Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) {
  @func_9112(%var_9114, %var_9115) /* ty=(Tensor[(10, 11, 7), float64], Tensor[(6, 11, 16), float64], float64, Tensor[(1056), float64], Tensor[(7, 16, 4), float32]) */
}

def @func_1269(%var_1268: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) {
  %1099 = fn (%var_1242: Tensor[(7, 16, 4), float32]) -> (Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) {
    %1090 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %1091 = %1090.0;
    %1092 = cast(%var_1242, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %1093 = shape_of(%1091, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1094 = cast(%1091, dtype="float64") /* ty=Tensor[(7, 16, 4), float64] */;
    %1095 = dyn.reshape(%1092, %1093, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1096 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %1097 = floor_divide(%1094, %1095) /* ty=Tensor[(7, 16, 4), float64] */;
    %1098 = %1096.3;
    (%1097, %1098)
  };
  %1099(%var_1268) /* ty=(Tensor[(7, 16, 4), float64], Tensor[(7, 16, 4), float32]) */
}

def @func_1060(%var_1059: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float32] {
  %1104 = fn (%var_1053: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float32] {
    %1100 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %1101 = shape_of(%var_1053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1102 = cast(%var_1053, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%1102, %1103) /* ty=Tensor[(6, 12, 13), float32] */
  };
  %1104(%var_1059) /* ty=Tensor[(6, 12, 13), float32] */
}

def @func_2757() -> (Tensor[(7, 16, 4), float32],) {
  @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_4135() -> Tensor[(14, 3), int32] {
  %1106 = fn () -> Tensor[(14, 3), int32] {
    %1105 = @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %1105.1
  };
  %1106() /* ty=Tensor[(14, 3), int32] */
}

def @func_8104() -> (Tensor[(7, 16, 4), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 156), float32]) {
  %1107 = @func_5610() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1108 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 156), float32] */, dtype="float32") /* ty=Tensor[(6, 156), float32] */;
  %1109 = reshape(%1108, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %1110 = %1107.0;
  %1111 = @func_1058(%1109) /* ty=Tensor[(6, 12, 13), float32] */;
  (%1110, %1111, meta[relay.Constant][45] /* ty=Tensor[(6, 156), float32] */)
}

def @func_6317() -> Tensor[(7, 16, 4), float32] {
  @func_6315() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_10006() -> (Tensor[(7, 16, 4), float32],) {
  %1114 = fn () -> (Tensor[(7, 16, 4), float32],) {
    %1112 = @func_6488() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %1113 = %1112.0;
    (%1113,)
  };
  %1114() /* ty=(Tensor[(7, 16, 4), float32],) */
}

def @func_10195() -> Tensor[(7, 16, 4), float32] {
  @func_10193() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_7933() -> (Tensor[(7, 16, 4), float32],) {
  %1115 = @func_1297() /* ty=Tensor[(7, 16, 4), float32] */;
  (%1115,)
}

def @func_8405() -> Tensor[(12, 1), int16] {
  @func_8403() /* ty=Tensor[(12, 1), int16] */
}

def @func_5610() -> (Tensor[(7, 16, 4), float32],) {
  %1116 = @func_3647() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
  %1117 = %1116.0;
  (%1117,)
}

def @func_2339(%var_2338: Tensor[(1512), int8]) -> (int32, Tensor[(45, 3), float64], Tensor[(1512), int8], Tensor[(1512), float32]) {
  %1128 = fn (%var_2328: Tensor[(1512), int8]) -> (int32, Tensor[(45, 3), float64], Tensor[(1512), int8], Tensor[(1512), float32]) {
    %1118 = @func_1041() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */;
    %1119 = cast(meta[relay.Constant][46] /* ty=Tensor[(45, 3), float64] */, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
    %1120 = cast(%var_2328, dtype="int8") /* ty=Tensor[(1512), int8] */;
    %1121 = reshape(%1119, newshape=[135, 1]) /* ty=Tensor[(135, 1), float64] */;
    %1122 = reshape(%1120, newshape=[1512]) /* ty=Tensor[(1512), int8] */;
    %1123 = @func_1553(%1121, %1122) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(14, 3), int32], Tensor[(14, 9, 12), int8], Tensor[(135, 1), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
    %1124 = %1123.4;
    %1125 = cast(%1124, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %1126 = %1118.2;
    %1127 = cos(%1125) /* ty=Tensor[(1512), float32] */;
    (%1126, meta[relay.Constant][46] /* ty=Tensor[(45, 3), float64] */, %var_2328, %1127)
  };
  %1128(%var_2338) /* ty=(int32, Tensor[(45, 3), float64], Tensor[(1512), int8], Tensor[(1512), float32]) */
}

def @func_5707(%var_5705: Tensor[(13, 5, 5), int8], %var_5706: Tensor[(13, 5, 5), int8]) -> (Tensor[(7, 16, 4), float32], Tensor[(13, 5, 5), float64], Tensor[(7, 16, 4), float64]) {
  @func_5703(%var_5705, %var_5706) /* ty=(Tensor[(7, 16, 4), float32], Tensor[(13, 5, 5), float64], Tensor[(7, 16, 4), float64]) */
}

def @func_9523(%var_9522: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(7, 16, 4), float32], Tensor[(1350), int64]) {
  %1141 = fn (%var_9484: Tensor[(1350), int64]) -> (Tensor[(7, 16, 4), float32], int32, Tensor[(7, 16, 4), float32], Tensor[(1350), int64]) {
    %1129 = cast(%var_9484, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %1130 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1131 = reshape(%1129, newshape=[135, 10]) /* ty=Tensor[(135, 10), int64] */;
    %1132 = reshape(%1130, newshape=[]) /* ty=int32 */;
    %1133 = @func_4789(%1131, %1132) /* ty=(Tensor[(448), uint8], Tensor[(135), float64], Tensor[(15, 6, 15), int64], Tensor[(135, 10), int64], Tensor[(7, 16, 4), uint16], Tensor[(14, 3), int32], int32) */;
    %1134 = @func_4805() /* ty=(Tensor[(7, 16, 4), float32], int32) */;
    %1135 = cast(%var_9484, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %1136 = cast(2 /* ty=int32 */, dtype="int64") /* ty=int64 */;
    %1137 = @func_8202() /* ty=Tensor[(7, 16, 4), float32] */;
    %1138 = %1133.6;
    %1139 = %1134.0;
    %1140 = bitwise_xor(%1135, %1136) /* ty=Tensor[(1350), int64] */;
    (%1137, %1138, %1139, %1140)
  };
  %1141(%var_9522) /* ty=(Tensor[(7, 16, 4), float32], int32, Tensor[(7, 16, 4), float32], Tensor[(1350), int64]) */
}

def @func_6722() -> Tensor[(7, 16, 4), float32] {
  @func_6720() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3539() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %1142 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1143 = %1142.0;
  %1144 = cast(%1143, dtype="float32") /* ty=Tensor[(7, 16, 4), float32] */;
  %1145 = @func_572() /* ty=Tensor[(7, 16, 4), float32] */;
  %1146 = sigmoid(%1144) /* ty=Tensor[(7, 16, 4), float32] */;
  (%1145, %1146)
}

def @func_2627() -> (Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) {
  @func_2625() /* ty=(Tensor[(14, 3), int32], Tensor[(14, 3), int32], int32, Tensor[(7, 16, 4), float32], Tensor[(135), float64]) */
}

def @func_1454(%var_1452: Tensor[(7, 16, 4), float32]) -> Tensor[(7, 16, 4), uint8] {
  @func_1451(%var_1452) /* ty=Tensor[(7, 16, 4), uint8] */
}

def @func_9883(%var_9881: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float64], Tensor[(7, 16, 4), float32], Tensor[(126), float32], Tensor[(15, 2, 6), float32], Tensor[(15, 2, 6), float32]) {
  @func_9880(%var_9881) /* ty=(Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float64], Tensor[(7, 16, 4), float32], Tensor[(126), float32], Tensor[(15, 2, 6), float32], Tensor[(15, 2, 6), float32]) */
}

def @func_7644() -> Tensor[(7, 16, 4), float32] {
  @func_7642() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_6488() -> (Tensor[(7, 16, 4), float32],) {
  %1147 = @func_3757() /* ty=(Tensor[(7, 16, 4), float32],) */;
  %1148 = %1147.0;
  (%1148,)
}

def @func_5201() -> Tensor[(7, 16, 4), float32] {
  %1150 = fn () -> Tensor[(7, 16, 4), float32] {
    %1149 = @func_2755() /* ty=(Tensor[(7, 16, 4), float32],) */;
    %1149.0
  };
  %1150() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_6217() -> Tensor[(7, 16, 4), float32] {
  %1152 = fn () -> Tensor[(7, 16, 4), float32] {
    %1151 = @func_384() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */;
    %1151.1
  };
  %1152() /* ty=Tensor[(7, 16, 4), float32] */
}

def @func_3415() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  %1153 = @func_914() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(14, 9, 12), int8], Tensor[(7, 16, 4), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(1512), int8], Tensor[(14, 9, 12), int8]) */;
  %1154 = %1153.0;
  %1155 = @func_1918() /* ty=Tensor[(7, 16, 4), float32] */;
  (%1154, %1155)
}

def @func_6182() -> (Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) {
  @func_6180() /* ty=(Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32], Tensor[(7, 16, 4), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen252/build/output.py", line 3798, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:01:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

