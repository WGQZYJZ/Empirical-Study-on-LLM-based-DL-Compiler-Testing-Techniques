==========mod==========
#[version = "0.0.5"]
def @func_3655(%var_3653: Tensor[(270), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
  %0 = @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %1 = cast(%var_3653, dtype="float64") /* ty=Tensor[(270), float64] */;
  %2 = reshape(%1, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
  %3 = %0.1;
  %4 = @func_2515(%2) /* ty=Tensor[(3, 15, 6), float32] */;
  (%3, %4, %var_3653)
}

def @func_5134() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %5 = @func_1226() /* ty=Tensor[(6, 2, 1), float64] */;
  %6 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  (%5, %6)
}

def @func_1527() -> Tensor[(6, 2, ?), float32] {
  %7 = @func_1226() /* ty=Tensor[(6, 2, 1), float64] */;
  %8 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %9 = %8.2;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %11 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%7, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%12, %13) /* ty=Tensor[(6, 2, ?), float32] */
}

def @func_5814() -> (Tensor[(6, 2, ?), int16], Tensor[(270), float64], Tensor[(3, 15, 6), float32]) {
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %15 = reshape(%14, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
  %16 = @func_2515(%15) /* ty=Tensor[(3, 15, 6), float32] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  %18 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %19 = asinh(%17) /* ty=Tensor[(3, 15, 6), float32] */;
  (%18, meta[relay.Constant][0] /* ty=Tensor[(270), float64] */, %19)
}

def @func_4545(%var_4514: Tensor[(6, 2, 12), float32], %var_4536: Tensor[(104), uint32]) -> (Tensor[(6, 2, 12), int64], Tensor[(6, 2, 12), float32], Tensor[(10, 13, 8), uint32], Tensor[(104), uint32]) {
  %20 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %21 = %20.0;
  %22 = cast(%21, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
  %23 = cast(%var_4514, dtype="int64") /* ty=Tensor[(6, 2, 12), int64] */;
  %24 = cast(%var_4514, dtype="float32") /* ty=Tensor[(6, 2, 12), float32] */;
  %25 = cast(%var_4536, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %26 = reshape(%25, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %27 = left_shift(%22, %23) /* ty=Tensor[(6, 2, 12), int64] */;
  %28 = log(%24) /* ty=Tensor[(6, 2, 12), float32] */;
  %29 = @func_984(%26) /* ty=Tensor[(10, 13, 8), uint32] */;
  (%27, %28, %29, %var_4536)
}

def @func_5847() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %30 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %31 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %32 = %30.0;
  (%31, %32)
}

def @func_2778(%var_2769: Tensor[(8, 5, 11), uint16], %var_2770: Tensor[(8, 5, 11), uint16]) -> (Tensor[(8, 5, 11), uint16],) {
  %33 = cast(%var_2770, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %34 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_2769, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %37 = multiply(%35, %36) /* ty=Tensor[(8, 5, 11), uint16] */;
  (%37,)
}

def @func_2907(%var_2837: Tensor[(6, 2, 16), float32], %var_2851: Tensor[(48), float64], %var_2892: float64) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  %38 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %40 = cast(%var_2837, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %41 = cast(%38, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %42 = cast(%var_2851, dtype="float64") /* ty=Tensor[(48), float64] */;
  %43 = reshape(%42, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %44 = @func_1883(%43) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %45 = @func_2596() /* ty=(Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) */;
  %46 = cast(%var_2892, dtype="float64") /* ty=float64 */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %48 = reshape(%46, newshape=[]) /* ty=float64 */;
  %49 = reshape(%47, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %50 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %51 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %52 = less(%39, %40) /* ty=Tensor[(6, 2, 16), bool] */;
  %53 = cos(%41) /* ty=Tensor[(6, 2, 1), float64] */;
  %54 = %44.0;
  %55 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %56 = %45.1;
  %57 = @func_535(%48, %49) /* ty=Tensor[(3, 2, 15), bool] */;
  %58 = %50.1;
  (%51, %52, %53, %54, %var_2851, %55, %56, %57, %var_2892, meta[relay.Constant][1] /* ty=Tensor[(90), float64] */, %58)
}

def @func_6792(%var_6790: Tensor[(810), float32]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 9, 15), float64], Tensor[(810), float32]) {
  %59 = cast(%var_6790, dtype="float32") /* ty=Tensor[(810), float32] */;
  %60 = reshape(%59, newshape=[6, 9, 15]) /* ty=Tensor[(6, 9, 15), float32] */;
  %61 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  %62 = @func_3139(%60) /* ty=Tensor[(6, 9, 15), float64] */;
  (%61, %62, %var_6790)
}

def @func_1275() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
  %63 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %64 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %65 = %63.0;
  (%64, %65)
}

def @func_2066(%var_2056: Tensor[(6, 2, 15), bool]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) {
  %66 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(6, 2, ?), float32] */;
  %68 = cast(%var_2056, dtype="float32") /* ty=Tensor[(6, 2, 15), float32] */;
  %69 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %70 = power(%67, %68) /* ty=Tensor[(6, 2, 15), float32] */;
  (%69, %70)
}

def @func_623(%var_614: Tensor[(6, 3, 1), uint8], %var_615: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float32] {
  %71 = cast(%var_614, dtype="uint8") /* ty=Tensor[(6, 3, 1), uint8] */;
  %72 = cast(%var_615, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
  %73 = bitwise_or(%71, %72) /* ty=Tensor[(6, 3, 6), uint8] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  sin(%74) /* ty=Tensor[(6, 3, 6), float32] */
}

def @func_1970(%var_1958: Tensor[(13, 15, 8), float64]) -> Tensor[(13, 15, 8), int8] {
  %75 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
  %76 = %75.0;
  %77 = cast(%var_1958, dtype="int8") /* ty=Tensor[(13, 15, 8), int8] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int8") /* ty=Tensor[(13, 15, 8), int8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%79, %80) /* ty=Tensor[(13, 15, 8), int8] */
}

def @func_5667() -> Tensor[(6, 2, ?), int16] {
  @func_2361() /* ty=Tensor[(6, 2, ?), int16] */
}

def @func_448() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  %81 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %82 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %85 = sin(%84) /* ty=Tensor[(6, 2, 1), float64] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = %81.1;
  %91 = greater_equal(%88, %89) /* ty=Tensor[(6, 2, ?), bool] */;
  (%90, %91)
}

def @func_2019() -> (Tensor[(6, 2, ?), bool],) {
  %92 = @func_1330() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %93 = %92.1;
  (%93,)
}

def @func_4207() -> (Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) {
  %94 = @func_1415() /* ty=Tensor[(14, 11, 6), float64] */;
  %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = cast(%94, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %100 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 11, 6), float64] */, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %103 = less(%97, %98) /* ty=Tensor[(14, 11, 6), bool] */;
  %104 = maximum(%101, %102) /* ty=Tensor[(14, 11, 6), int8] */;
  %105 = @func_4148() /* ty=Tensor[(6, 2, ?), bool] */;
  %106 = @func_3484() /* ty=Tensor[(6, 2, ?), float64] */;
  (%103, %104, %105, %106)
}

def @func_1345(%var_1338: Tensor[(11, 4, 12), float32]) -> (Tensor[(11, 4, 12), float32],) {
  %107 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 1), float32] */;
  %108 = cast(%var_1338, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
  %109 = floor_mod(%107, %108) /* ty=Tensor[(11, 4, 12), float32] */;
  (%109,)
}

def @func_1616(%var_1602: float64, %var_1605: Tensor[(6, 2, 1), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  %110 = cast(%var_1602, dtype="float64") /* ty=float64 */;
  %111 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %112 = reshape(%110, newshape=[]) /* ty=float64 */;
  %113 = reshape(%111, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %114 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %115 = %114.0;
  %116 = cast(%115, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %117 = exp(%116) /* ty=Tensor[(6, 2, ?), float64] */;
  %118 = cast(%var_1605, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
  %123 = @func_535(%112, %113) /* ty=Tensor[(3, 2, 15), bool] */;
  %124 = less_equal(%120, %121) /* ty=Tensor[(6, 2, ?), bool] */;
  (%122, %123, %var_1602, meta[relay.Constant][4] /* ty=Tensor[(90), float64] */, %124)
}

def @func_3206() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_566() -> Tensor[(6, 2, ?), bool] {
  %125 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %126 = %125.2;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2, 1), float32] */, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %131 = logical_xor(%129, %130) /* ty=Tensor[(6, 2, ?), uint8] */;
  %132 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%134, %135) /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_891(%var_790: Tensor[(12, 11, 3), float64], %var_865: Tensor[(6, 3), uint8], %var_866: Tensor[(108), uint8]) -> (Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) {
  %136 = cast(%var_790, dtype="float64") /* ty=Tensor[(12, 11, 3), float64] */;
  %137 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %138 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %139 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %142 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%138, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %145 = cast(%var_865, dtype="uint8") /* ty=Tensor[(6, 3), uint8] */;
  %146 = cast(%var_866, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %147 = reshape(%145, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %148 = reshape(%146, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %149 = cosh(%136) /* ty=Tensor[(12, 11, 3), float64] */;
  %150 = %137.1;
  %151 = power(%143, %144) /* ty=Tensor[(6, 2, ?), float64] */;
  %152 = @func_623(%147, %148) /* ty=Tensor[(6, 3, 6), float32] */;
  (%149, %150, %151, %152, %var_865, %var_866)
}

def @func_2596() -> (Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) {
  %153 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
  %154 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %156 = %153.1;
  %157 = cos(%155) /* ty=Tensor[(13, 15, 8), float32] */;
  (%156, %157)
}

def @func_5499(%var_5485: Tensor[(1024), int16]) -> (Tensor[(6, 2, ?), bool], Tensor[(16, 16, 4), int16], Tensor[(1024), int16]) {
  %158 = cast(%var_5485, dtype="int16") /* ty=Tensor[(1024), int16] */;
  %159 = reshape(%158, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), int16] */;
  %160 = @func_2397(%159) /* ty=(Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) */;
  %161 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %162 = %160.0;
  (%161, %162, %var_5485)
}

def @func_964() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_2042() -> (Tensor[(6, 2, 1), float32],) {
  %163 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %164 = %163.1;
  (%164,)
}

def @func_3708() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %165 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %166 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %167 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %168 = %165.0;
  %169 = %166.0;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_5009() -> (Tensor[(6, 2, 1), float64],) {
  %171 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %172 = %171.0;
  (%172,)
}

def @func_465() -> Tensor[(6, 2, 1), float64] {
  %173 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %173.1
}

def @func_1415() -> Tensor[(14, 11, 6), float64] {
  %174 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 6), float64] */;
  sinh(%174) /* ty=Tensor[(14, 11, 6), float64] */
}

def @func_535(%var_530: float64, %var_531: Tensor[(3, 2, 15), float64]) -> Tensor[(3, 2, 15), bool] {
  %175 = cast(%var_530, dtype="bool") /* ty=bool */;
  %176 = cast(%var_531, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
  equal(%175, %176) /* ty=Tensor[(3, 2, 15), bool] */
}

def @func_6063(%var_6022: Tensor[(180), bool], %var_6046: Tensor[(364), float32]) -> (Tensor[(6, 2, 180), uint32], Tensor[(6, 2, 180), bool], Tensor[(13, 4, 7), float32], Tensor[(364), float32]) {
  %177 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %178 = reshape(%177, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %179 = @func_2066(%178) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %180 = %179.0;
  %181 = cast(%180, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %182 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %183 = logical_or(%181, %182) /* ty=Tensor[(6, 2, 180), bool] */;
  %184 = cast(%183, dtype="uint32") /* ty=Tensor[(6, 2, 180), uint32] */;
  %185 = cast(%var_6022, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %186 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %187 = cast(%186, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %188 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %189 = cast(%var_6046, dtype="float32") /* ty=Tensor[(364), float32] */;
  %190 = reshape(%189, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %191 = @func_525(%190) /* ty=(Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) */;
  %192 = left_shift(%184, %185) /* ty=Tensor[(6, 2, 180), uint32] */;
  %193 = not_equal(%187, %188) /* ty=Tensor[(6, 2, 180), bool] */;
  %194 = %191.0;
  (%192, %193, %194, %var_6046)
}

def @func_4600() -> Tensor[(6, 2, 1), float32] {
  @func_2751() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_6686(%var_6657: Tensor[(1, 4, 4), int16], %var_6673: Tensor[(180), bool]) -> (Tensor[(10, 4, 4), bool], Tensor[(6, 2, 1), float64], Tensor[(180), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %195 = cast(%var_6657, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %196 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 4, 4), int16] */, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
  %197 = cast(%var_6673, dtype="bool") /* ty=Tensor[(180), bool] */;
  %198 = reshape(%197, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %199 = @func_2066(%198) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %200 = @func_5847() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
  %201 = less(%195, %196) /* ty=Tensor[(10, 4, 4), bool] */;
  %202 = %199.0;
  %203 = %200.1;
  %204 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  (%201, %202, %var_6673, %203, %204)
}

def @func_1084() -> Tensor[(6, 2, 1), float32] {
  %205 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %205.1
}

def @func_1793() -> Tensor[(6, 2, ?), bool] {
  %206 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %206.1
}

def @func_2625(%var_2613: Tensor[(2, 52), uint32]) -> Tensor[(2, 52), bool] {
  %207 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %208 = %207.3;
  %209 = cast(%var_2613, dtype="bool") /* ty=Tensor[(2, 52), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(2), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(2, 52), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%211, %212) /* ty=Tensor[(2, 52), bool] */
}

def @func_1986() -> (Tensor[(6, 2, 1), float64],) {
  %213 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %214 = %213.0;
  (%214,)
}

def @func_2361() -> Tensor[(6, 2, ?), int16] {
  %215 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %216 = %215.0;
  %217 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %218 = cast(%217, dtype="int16") /* ty=Tensor[(6, 2, ?), int16] */;
  %219 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%216, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%220, %221) /* ty=Tensor[(6, 2, ?), int16] */
}

def @func_2223() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) {
  %222 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %223 = %222.0;
  %224 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  (%223, %224)
}

def @func_1924() -> (Tensor[(13, 15, 8), float64],) {
  %225 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %226 = sqrt(%225) /* ty=Tensor[(13, 15, 8), float64] */;
  (%226,)
}

def @func_691() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %227 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %228 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %229 = %227.0;
  %230 = %228.2;
  (%229, %230)
}

def @func_2726(%var_2657: Tensor[(144), bool]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 12), int64], Tensor[(11, 4, 12), float32], Tensor[(528), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 144), bool]) {
  %231 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %232 = cast(%var_2657, dtype="bool") /* ty=Tensor[(144), bool] */;
  %233 = reshape(%232, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), bool] */;
  %234 = @func_2491(%233) /* ty=(Tensor[(6, 2, 12), int64],) */;
  %235 = cast(meta[relay.Constant][9] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %236 = reshape(%235, newshape=[11, 4, 12]) /* ty=Tensor[(11, 4, 12), float32] */;
  %237 = @func_1345(%236) /* ty=(Tensor[(11, 4, 12), float32],) */;
  %238 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %239 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %240 = cast(%239, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %241 = cast(%var_2657, dtype="bool") /* ty=Tensor[(144), bool] */;
  %242 = %231.0;
  %243 = %234.0;
  %244 = %237.0;
  %245 = %238.0;
  %246 = logical_and(%240, %241) /* ty=Tensor[(6, 2, 144), bool] */;
  (%242, %243, %244, meta[relay.Constant][9] /* ty=Tensor[(528), float32] */, %245, %246)
}

def @func_3058(%var_3006: Tensor[(1, 14, 7), float32], %var_3022: Tensor[(1024), int16], %var_3043: Tensor[(90), float64]) -> (Tensor[(6, 2, 3), int32], Tensor[(16, 16, 4), int16], Tensor[(?, 14, 7), uint8], Tensor[(6, 2, 1024), float64], Tensor[(6, 2, 1), float32], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1, 14, 7), float32]) {
  %247 = @func_2479() /* ty=(Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) */;
  %248 = cast(%var_3022, dtype="int16") /* ty=Tensor[(1024), int16] */;
  %249 = reshape(%248, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), int16] */;
  %250 = @func_2397(%249) /* ty=(Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) */;
  %251 = cast(%var_3006, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %252 = exp(%251) /* ty=Tensor[(1, 14, 7), float32] */;
  %253 = cast(%var_3006, dtype="uint8") /* ty=Tensor[(1, 14, 7), uint8] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="uint8") /* ty=Tensor[(1, 14, 7), uint8] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %257 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %258 = cast(%var_3022, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %259 = cast(%257, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %260 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %261 = cast(%var_3043, dtype="float64") /* ty=Tensor[(90), float64] */;
  %262 = reshape(%261, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %263 = @func_2326(%262) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
  %264 = cast(%252, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %265 = %247.0;
  %266 = %250.0;
  %267 = multiply(%255, %256) /* ty=Tensor[(?, 14, 7), uint8] */;
  %268 = divide(%258, %259) /* ty=Tensor[(6, 2, 1024), float64] */;
  %269 = %260.0;
  %270 = %263.8;
  %271 = sigmoid(%264) /* ty=Tensor[(1, 14, 7), float32] */;
  (%265, %266, %267, %268, %269, %270, %var_3043, %271)
}

def @func_4148() -> Tensor[(6, 2, ?), bool] {
  %272 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %272.0
}

def @func_1186() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) {
  %273 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %274 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %275 = %274.0;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %277 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 52), uint32] */, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
  %278 = reshape(%277, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %279 = %273.0;
  %280 = asin(%276) /* ty=Tensor[(6, 2, 1), float32] */;
  %281 = @func_984(%278) /* ty=Tensor[(10, 13, 8), uint32] */;
  (%279, %280, %281, meta[relay.Constant][10] /* ty=Tensor[(2, 52), uint32] */)
}

def @func_3956(%var_3907: Tensor[(220, 2), uint16], %var_3926: Tensor[(1, 48), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(8, 5, 11), uint16], Tensor[(220, 2), uint16], Tensor[(6, 2, ?), int16], Tensor[(192), float32], Tensor[(1, 48), float64], float64, Tensor[(6, 2, 3), bool], Tensor[(36, 1), bool], Tensor[(6, 2, ?), bool]) {
  %282 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %283 = cast(%var_3907, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %284 = cast(%var_3907, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %285 = reshape(%283, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %286 = reshape(%284, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %287 = @func_2778(%285, %286) /* ty=(Tensor[(8, 5, 11), uint16],) */;
  %288 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %289 = cast(%var_3926, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %290 = cast(-5.66722f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %291 = reshape(%288, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %292 = reshape(%289, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %293 = reshape(%290, newshape=[]) /* ty=float64 */;
  %294 = @func_2907(%291, %292, %293) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 1), bool] */, dtype="bool") /* ty=Tensor[(36, 1), bool] */;
  %296 = reshape(%295, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %297 = %282.0;
  %298 = %287.0;
  %299 = %294.5;
  %300 = @func_3793(%296) /* ty=Tensor[(6, 2, 3), bool] */;
  %301 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%297, %298, %var_3907, %299, meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, %var_3926, -5.66722f64 /* ty=float64 */, %300, meta[relay.Constant][12] /* ty=Tensor[(36, 1), bool] */, %301)
}

def @func_1139() -> (Tensor[(6, 2, 1), float64],) {
  %302 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  (%302,)
}

def @func_995() -> Tensor[(6, 2, 1), float64] {
  @func_941() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_1330() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
  %303 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %304 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %305 = %303.0;
  %306 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  (%304, %305, %306)
}

def @func_5361(%var_5304: Tensor[(10, 13, 8), uint32]) -> (Tensor[(14, 11, 6), float64], Tensor[(6, 2, ?), bool], Tensor[(26, 4), uint32], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(14, 11, 6), int8]) {
  %307 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %308 = cast(meta[relay.Constant][13] /* ty=Tensor[(26, 4), uint32] */, dtype="uint32") /* ty=Tensor[(26, 4), uint32] */;
  %309 = reshape(%308, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %310 = @func_984(%309) /* ty=Tensor[(10, 13, 8), uint32] */;
  %311 = cast(%var_5304, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %315 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %316 = cast(%310, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %317 = acosh(%316) /* ty=Tensor[(10, 13, 8), float32] */;
  %318 = cast(%var_5304, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %322 = @func_1415() /* ty=Tensor[(14, 11, 6), float64] */;
  %323 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %324 = %307.0;
  %325 = bitwise_xor(%313, %314) /* ty=Tensor[(10, 13, 8), uint64] */;
  %326 = %315.0;
  %327 = right_shift(%320, %321) /* ty=Tensor[(10, 13, 8), uint64] */;
  %328 = @func_4266() /* ty=Tensor[(14, 11, 6), int8] */;
  (%322, %323, meta[relay.Constant][13] /* ty=Tensor[(26, 4), uint32] */, %324, %325, %326, %327, %328)
}

def @func_5615() -> (Tensor[(6, 2, ?), bool],) {
  %329 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %330 = %329.0;
  (%330,)
}

def @func_3793(%var_3780: Tensor[(6, 2, 3), bool]) -> Tensor[(6, 2, 3), bool] {
  %331 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %332 = cast(%331, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %333 = cast(%var_3780, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
  greater(%332, %333) /* ty=Tensor[(6, 2, 3), bool] */
}

def @func_3484() -> Tensor[(6, 2, ?), float64] {
  %334 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
  %335 = %334.1;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  atanh(%336) /* ty=Tensor[(6, 2, ?), float64] */
}

def @func_3422(%var_3337: Tensor[(104), uint32], %var_3351: Tensor[(104), uint32], %var_3411: Tensor[(10, 3, 3), float64]) -> (Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) {
  %337 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %338 = erf(%337) /* ty=Tensor[(10, 3, 3), float64] */;
  %339 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %340 = cosh(%339) /* ty=Tensor[(10, 3, 3), float64] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %342 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%338, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %345 = cast(%var_3337, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %346 = reshape(%345, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %347 = cast(%var_3351, dtype="bool") /* ty=Tensor[(104), bool] */;
  %348 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(1), int32] */;
  %349 = cast(%var_3337, dtype="bool") /* ty=Tensor[(104), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?), bool] */;
  %351 = @func_723() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
  %352 = cast(%var_3411, dtype="int32") /* ty=Tensor[(10, 3, 3), int32] */;
  %353 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%338, dtype="int32") /* ty=Tensor[(10, 3, 3), int32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %356 = floor_mod(%343, %344) /* ty=Tensor[(10, 3, 3), float64] */;
  %357 = @func_984(%346) /* ty=Tensor[(10, 13, 8), uint32] */;
  %358 = logical_or(%349, %350) /* ty=Tensor[(104), bool] */;
  %359 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %360 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %361 = %351.0;
  %362 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %363 = subtract(%354, %355) /* ty=Tensor[(10, 3, 3), int32] */;
  (%356, %357, %358, %359, %360, %361, %362, %363)
}

def @func_3891(%var_3862: Tensor[(7, 6), uint32], %var_3878: Tensor[(210, 13), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(7, 6), uint32], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(210, 13), bool], Tensor[(12, 15, 9), uint8], Tensor[(1620), uint8]) {
  %364 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %365 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %366 = reshape(%365, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %367 = @func_1883(%366) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %368 = cast(%var_3862, dtype="uint32") /* ty=Tensor[(7, 6), uint32] */;
  %369 = reshape(%368, newshape=[14, 3]) /* ty=Tensor[(14, 3), uint32] */;
  %370 = @func_2534(%369) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) */;
  %371 = %370.3;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %373 = atanh(%372) /* ty=Tensor[(210, 1), float64] */;
  %374 = cast(%373, dtype="bool") /* ty=Tensor[(210, 1), bool] */;
  %375 = cast(%var_3878, dtype="bool") /* ty=Tensor[(210, 13), bool] */;
  %376 = cast(meta[relay.Constant][16] /* ty=Tensor[(1620), uint8] */, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %377 = reshape(%376, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %378 = %364.0;
  %379 = %367.2;
  %380 = less_equal(%374, %375) /* ty=Tensor[(210, 13), bool] */;
  %381 = @func_3184(%377) /* ty=Tensor[(12, 15, 9), uint8] */;
  (%378, %var_3862, %379, meta[relay.Constant][15] /* ty=Tensor[(48), float64] */, %380, %381, meta[relay.Constant][16] /* ty=Tensor[(1620), uint8] */)
}

def @func_984(%var_976: Tensor[(1, 13, 8), uint32]) -> Tensor[(10, 13, 8), uint32] {
  %382 = cast(%var_976, dtype="uint32") /* ty=Tensor[(1, 13, 8), uint32] */;
  %383 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  bitwise_or(%382, %383) /* ty=Tensor[(10, 13, 8), uint32] */
}

def @func_5446(%var_5411: Tensor[(48), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(14, 5, 4), float32], Tensor[(280), float32], Tensor[(6, 2, 48), int64]) {
  %384 = cast(%var_5411, dtype="float64") /* ty=Tensor[(48), float64] */;
  %385 = reshape(%384, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %386 = @func_1883(%385) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %388 = reshape(%387, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %389 = @func_3852(%388) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) */;
  %390 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %391 = %390.1;
  %392 = cast(%var_5411, dtype="int64") /* ty=Tensor[(48), int64] */;
  %393 = cast(%391, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
  %394 = %386.2;
  %395 = %389.0;
  %396 = bitwise_or(%392, %393) /* ty=Tensor[(6, 2, 48), int64] */;
  (%394, %395, meta[relay.Constant][18] /* ty=Tensor[(280), float32] */, %396)
}

def @func_5734() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %397 = @func_5134() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %398 = %397.1;
  %399 = @func_3206() /* ty=Tensor[(6, 2, 1), float64] */;
  (%398, %399)
}

def @func_5987() -> Tensor[(6, 2, 1), float32] {
  %400 = @func_3708() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %400.2
}

def @func_3852(%var_3837: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) {
  %401 = cast(%var_3837, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %402 = cast(meta[relay.Constant][19] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %403 = reshape(%402, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %404 = @func_2326(%403) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
  %405 = sqrt(%401) /* ty=Tensor[(14, 5, 4), float32] */;
  %406 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %407 = %404.1;
  %408 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  (%405, %406, %407, meta[relay.Constant][19] /* ty=Tensor[(90), float64] */, %408)
}

def @func_2203(%var_2166: Tensor[(14, 3, 1), uint32], %var_2167: Tensor[(14, 3, 5), uint32]) -> (Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) {
  %409 = cast(%var_2166, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %410 = cast(%var_2167, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
  %411 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 6), uint8] */, dtype="uint8") /* ty=Tensor[(3, 6), uint8] */;
  %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %413 = reshape(%411, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %414 = reshape(%412, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %415 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %416 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %417 = cast(%416, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %418 = cast(meta[relay.Constant][21] /* ty=Tensor[(108), uint8] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %419 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 3, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
  %420 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %423 = greater_equal(%409, %410) /* ty=Tensor[(14, 3, 5), bool] */;
  %424 = @func_623(%413, %414) /* ty=Tensor[(6, 3, 6), float32] */;
  %425 = %415.0;
  %426 = greater(%417, %418) /* ty=Tensor[(6, 2, 108), bool] */;
  %427 = minimum(%421, %422) /* ty=Tensor[(14, 3, 5), uint32] */;
  (%423, %424, meta[relay.Constant][20] /* ty=Tensor[(3, 6), uint8] */, %425, %426, %427)
}

def @func_2161(%var_2143: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  %428 = cast(%var_2143, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %429 = atanh(%428) /* ty=Tensor[(4, 2, 15), float32] */;
  (%429,)
}

def @func_5978() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %430 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %431 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
  %432 = %430.1;
  (%431, %432)
}

def @func_6636(%var_6572: Tensor[(1620), uint8], %var_6609: Tensor[(1620), uint8]) -> (Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float64], Tensor[(14, 11, 6), int8], Tensor[(1620), float32], Tensor[(10, 13, 8), uint32], Tensor[(104, 1), uint32], Tensor[(12, 15, 9), float64], Tensor[(6, 2, ?), uint16]) {
  %433 = @func_4994() /* ty=Tensor[(6, 2, ?), float32] */;
  %434 = @func_2223() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) */;
  %435 = %434.1;
  %436 = cast(%435, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %437 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%433, dtype="int16") /* ty=Tensor[(6, 2, ?), int16] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %440 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %441 = cast(%var_6609, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %442 = shape_of(%var_6572, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(%var_6572, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), float32] */;
  %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(104, 1), uint32] */, dtype="uint32") /* ty=Tensor[(104, 1), uint32] */;
  %446 = reshape(%445, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %447 = cast(%var_6572, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %448 = reshape(%447, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %449 = @func_3184(%448) /* ty=Tensor[(12, 15, 9), uint8] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %451 = cos(%450) /* ty=Tensor[(12, 15, 9), float64] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %453 = cast(%435, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %454 = reshape(%453, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %455 = right_shift(%438, %439) /* ty=Tensor[(6, 2, ?), int16] */;
  %456 = %440.0;
  %457 = @func_4266() /* ty=Tensor[(14, 11, 6), int8] */;
  %458 = maximum(%443, %444) /* ty=Tensor[(1620), float32] */;
  %459 = @func_984(%446) /* ty=Tensor[(10, 13, 8), uint32] */;
  %460 = asinh(%452) /* ty=Tensor[(12, 15, 9), float64] */;
  %461 = @func_4795(%454) /* ty=Tensor[(6, 2, ?), uint16] */;
  (%455, %456, %457, %458, %459, meta[relay.Constant][23] /* ty=Tensor[(104, 1), uint32] */, %460, %461)
}

def @func_4940(%var_4935: Tensor[(9, 14, 12), float64]) -> Tensor[(9, 14, 12), float64] {
  %462 = cast(%var_4935, dtype="float64") /* ty=Tensor[(9, 14, 12), float64] */;
  log10(%462) /* ty=Tensor[(9, 14, 12), float64] */
}

def @func_1751() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) {
  %463 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %464 = %463.0;
  %465 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %466 = cast(%464, dtype="int8") /* ty=Tensor[(6, 2, 1), int8] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int8") /* ty=Tensor[(6, 2, 1), int8] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %470 = add(%468, %469) /* ty=Tensor[(6, 2, ?), int8] */;
  %471 = cast(%470, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %472 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%464, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = greater(%473, %474) /* ty=Tensor[(6, 2, ?), bool] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %477 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  %478 = acosh(%476) /* ty=Tensor[(6, 2, ?), float64] */;
  (%477, %478)
}

def @func_3184(%var_3177: Tensor[(12, 15, 9), uint8]) -> Tensor[(12, 15, 9), uint8] {
  %479 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %480 = shape_of(%var_3177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_3177, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%481, %482) /* ty=Tensor[(12, 15, 9), uint8] */
}

def @func_6372(%var_6370: Tensor[(1, 90), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 13), bool], Tensor[(3, 2, 15), bool], Tensor[(1, 90), float64]) {
  %483 = cast(%var_6370, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %484 = reshape(%483, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %485 = @func_2326(%484) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
  %486 = @func_1793() /* ty=Tensor[(6, 2, ?), bool] */;
  %487 = @func_6287() /* ty=Tensor[(6, 2, 13), bool] */;
  %488 = %485.6;
  (%486, %487, %488, %var_6370)
}

def @func_2576() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_3248() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  %489 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %490 = %489.1;
  %491 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %492 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%490, %491, %492)
}

def @func_6082() -> (Tensor[(6, 2, 1), float64],) {
  %493 = @func_941() /* ty=Tensor[(6, 2, 1), float64] */;
  (%493,)
}

def @func_237() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %494 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %495 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %496 = log2(%494) /* ty=Tensor[(6, 2, 1), float32] */;
  %497 = cosh(%495) /* ty=Tensor[(6, 2, 1), float32] */;
  (%496, %497)
}

def @func_5906() -> Tensor[(6, 2, 1), float64] {
  %498 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %498.0
}

def @func_941() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_5387() -> Tensor[(6, 2, 1), float64] {
  %499 = @func_5134() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %499.0
}

def @func_2326(%var_2321: Tensor[(90), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) {
  %500 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %501 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
  %502 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
  %503 = cast(meta[relay.Constant][26] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %504 = reshape(%503, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %505 = @func_1883(%504) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %506 = cast(-5.27018f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %507 = cast(%var_2321, dtype="float64") /* ty=Tensor[(90), float64] */;
  %508 = reshape(%506, newshape=[]) /* ty=float64 */;
  %509 = reshape(%507, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %510 = %500.2;
  %511 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %512 = %501.0;
  %513 = %502.0;
  %514 = %505.2;
  %515 = @func_535(%508, %509) /* ty=Tensor[(3, 2, 15), bool] */;
  (%510, %511, %512, %513, %514, meta[relay.Constant][26] /* ty=Tensor[(48), float64] */, %515, -5.27018f64 /* ty=float64 */, %var_2321)
}

def @func_4795(%var_4788: Tensor[(6, 2, 1), float32]) -> Tensor[(6, 2, ?), uint16] {
  %516 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %517 = %516.1;
  %518 = cast(%var_4788, dtype="uint16") /* ty=Tensor[(6, 2, 1), uint16] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="uint16") /* ty=Tensor[(6, 2, 1), uint16] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%520, %521) /* ty=Tensor[(6, 2, ?), uint16] */
}

def @func_6824(%var_6821: Tensor[(2, 52), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(2, 52), uint32], Tensor[(90), float64]) {
  %522 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %523 = cast(%var_6821, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
  %524 = cast(%var_6821, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
  %525 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %526 = reshape(%523, newshape=[104]) /* ty=Tensor[(104), uint32] */;
  %527 = reshape(%524, newshape=[104]) /* ty=Tensor[(104), uint32] */;
  %528 = reshape(%525, newshape=[10, 3, 3]) /* ty=Tensor[(10, 3, 3), float64] */;
  %529 = @func_3422(%526, %527, %528) /* ty=(Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) */;
  %530 = %522.0;
  %531 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %532 = %529.3;
  (%530, %531, %532, %var_6821, meta[relay.Constant][27] /* ty=Tensor[(90), float64] */)
}

def @func_1883(%var_1844: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) {
  %533 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %535 = cast(%var_1844, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
  %536 = logical_and(%534, %535) /* ty=Tensor[(6, 2, 4), bool] */;
  %537 = cast(%533, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %538 = cast(%536, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
  %539 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %540 = power(%537, %538) /* ty=Tensor[(6, 2, 4), float64] */;
  %541 = %539.1;
  %542 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
  (%540, %541, %542)
}

def @func_4436(%var_4405: Tensor[(6, 2, 10), float32]) -> (Tensor[(6, 2, 10), bool], Tensor[(4, 2, 15), float32], Tensor[(6, 2, 10), float32]) {
  %543 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %546 = cast(%var_4405, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %547 = equal(%545, %546) /* ty=Tensor[(6, 2, 10), bool] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
  %549 = reshape(%548, newshape=[4, 2, 15]) /* ty=Tensor[(4, 2, 15), float32] */;
  %550 = @func_2161(%549) /* ty=(Tensor[(4, 2, 15), float32],) */;
  %551 = cast(%var_4405, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
  %552 = %550.0;
  %553 = log2(%551) /* ty=Tensor[(6, 2, 10), float32] */;
  (%547, %552, %553)
}

def @func_6170() -> (Tensor[(6, 2, ?), float32],) {
  %554 = @func_4994() /* ty=Tensor[(6, 2, ?), float32] */;
  (%554,)
}

def @func_4896() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %555 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %556 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %557 = %555.0;
  %558 = %556.0;
  (%557, %558)
}

def @func_1039(%var_1025: float64, %var_1026: Tensor[(90), float64], %var_1032: Tensor[(6, 2, 10), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 10), uint32]) {
  %559 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %560 = cast(%var_1025, dtype="float64") /* ty=float64 */;
  %561 = cast(%var_1026, dtype="float64") /* ty=Tensor[(90), float64] */;
  %562 = reshape(%560, newshape=[]) /* ty=float64 */;
  %563 = reshape(%561, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %564 = @func_723() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
  %565 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %566 = cast(%565, dtype="uint32") /* ty=Tensor[(6, 2, 1), uint32] */;
  %567 = cast(%var_1032, dtype="uint32") /* ty=Tensor[(6, 2, 10), uint32] */;
  %568 = %559.1;
  %569 = @func_535(%562, %563) /* ty=Tensor[(3, 2, 15), bool] */;
  %570 = %564.1;
  %571 = bitwise_or(%566, %567) /* ty=Tensor[(6, 2, 10), uint32] */;
  (%568, %569, %var_1025, %var_1026, %570, %571)
}

def @func_1388(%var_1373: Tensor[(396), float64], %var_1374: Tensor[(18), uint8], %var_1375: Tensor[(108), uint8]) -> (Tensor[(10, 13, 8), uint32], Tensor[(6, 2, ?), bool], Tensor[(396), float64], Tensor[(18), uint8], Tensor[(108), uint8]) {
  %572 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %573 = cast(%var_1373, dtype="float64") /* ty=Tensor[(396), float64] */;
  %574 = cast(%var_1374, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %575 = cast(%var_1375, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %576 = reshape(%573, newshape=[12, 11, 3]) /* ty=Tensor[(12, 11, 3), float64] */;
  %577 = reshape(%574, newshape=[6, 3]) /* ty=Tensor[(6, 3), uint8] */;
  %578 = reshape(%575, newshape=[108]) /* ty=Tensor[(108), uint8] */;
  %579 = @func_891(%576, %577, %578) /* ty=(Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) */;
  %580 = %572.2;
  %581 = %579.1;
  (%580, %581, %var_1373, %var_1374, %var_1375)
}

def @func_2397(%var_2391: Tensor[(16, 16, 4), int16]) -> (Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) {
  %582 = cast(%var_2391, dtype="int16") /* ty=Tensor[(16, 16, 4), int16] */;
  %583 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 16, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 16, 4), int16] */, dtype="int16") /* ty=Tensor[(16, 16, 4), int16] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %586 = cast(%var_2391, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
  %587 = right_shift(%584, %585) /* ty=Tensor[(16, 16, 4), int16] */;
  %588 = atan(%586) /* ty=Tensor[(16, 16, 4), float64] */;
  (%587, %588)
}

def @func_4266() -> Tensor[(14, 11, 6), int8] {
  %589 = @func_4207() /* ty=(Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) */;
  %589.1
}

def @func_1654() -> Tensor[(6, 2, ?), bool] {
  %590 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %590.1
}

def @func_4753() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(1, 180), bool], Tensor[(6, 2, ?), bool]) {
  %591 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 180), bool] */, dtype="bool") /* ty=Tensor[(1, 180), bool] */;
  %592 = reshape(%591, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %593 = @func_2066(%592) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %594 = @func_4148() /* ty=Tensor[(6, 2, ?), bool] */;
  %595 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %596 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %597 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
  %598 = %593.0;
  %599 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%594, %595, %596, %597, %598, meta[relay.Constant][29] /* ty=Tensor[(1, 180), bool] */, %599)
}

def @func_2534(%var_2531: Tensor[(14, 3), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) {
  %600 = cast(%var_2531, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
  %601 = cast(meta[relay.Constant][30] /* ty=Tensor[(210, 1), uint32] */, dtype="uint32") /* ty=Tensor[(210, 1), uint32] */;
  %602 = reshape(%600, newshape=[14, 3, 1]) /* ty=Tensor[(14, 3, 1), uint32] */;
  %603 = reshape(%601, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), uint32] */;
  %604 = @func_2203(%602, %603) /* ty=(Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) */;
  %605 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %606 = %604.2;
  (%605, %606, %var_2531, meta[relay.Constant][30] /* ty=Tensor[(210, 1), uint32] */)
}

def @func_4632() -> Tensor[(6, 2, 1), float32] {
  %607 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %607.1
}

def @func_4242(%var_4232: Tensor[(15, 6, 15), float64], %var_4240: Tensor[(270), float64]) -> (Tensor[(15, 6, 15), float64], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
  %608 = cast(%var_4232, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %609 = cast(%var_4240, dtype="float64") /* ty=Tensor[(270), float64] */;
  %610 = reshape(%609, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %611 = @func_3655(%610) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) */;
  %612 = sqrt(%608) /* ty=Tensor[(15, 6, 15), float64] */;
  %613 = %611.1;
  (%612, %613, %var_4240)
}

def @func_6135() -> (Tensor[(6, 2, 1), float32], Tensor[(104), uint32], Tensor[(10, 13, 8), float32]) {
  %614 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %615 = cast(meta[relay.Constant][31] /* ty=Tensor[(104), uint32] */, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %616 = reshape(%615, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %617 = @func_984(%616) /* ty=Tensor[(10, 13, 8), uint32] */;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %619 = %614.0;
  %620 = erf(%618) /* ty=Tensor[(10, 13, 8), float32] */;
  (%619, meta[relay.Constant][31] /* ty=Tensor[(104), uint32] */, %620)
}

def @func_1582() -> (Tensor[(6, 2, 1), float32],) {
  %621 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %622 = %621.0;
  (%622,)
}

def @func_2515(%var_2508: Tensor[(3, 15, 6), float64]) -> Tensor[(3, 15, 6), float32] {
  %623 = cast(%var_2508, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %624 = log2(%623) /* ty=Tensor[(3, 15, 6), float64] */;
  %625 = cast(%624, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  atan(%625) /* ty=Tensor[(3, 15, 6), float32] */
}

def @func_4100(%var_4033: Tensor[(36), bool], %var_4037: Tensor[(104), uint32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, ?), uint8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(2, 52), bool], Tensor[(104), uint32], Tensor[(3, 2, 15), bool], float64, Tensor[(6, 2, 1), float32], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %626 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %627 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %628 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %629 = cast(%628, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %630 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%627, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %633 = cast(%var_4033, dtype="bool") /* ty=Tensor[(36), bool] */;
  %634 = reshape(%633, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %635 = cast(%var_4037, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %636 = reshape(%635, newshape=[2, 52]) /* ty=Tensor[(2, 52), uint32] */;
  %637 = cast(-2.42725f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %638 = cast(%627, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %639 = reshape(%637, newshape=[]) /* ty=float64 */;
  %640 = reshape(%638, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float64] */;
  %641 = @func_1616(%639, %640) /* ty=(Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */;
  %642 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %643 = cast(meta[relay.Constant][32] /* ty=Tensor[(18), uint8] */, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %645 = reshape(%643, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %646 = reshape(%644, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %647 = %626.2;
  %648 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
  %649 = left_shift(%631, %632) /* ty=Tensor[(6, 2, ?), uint8] */;
  %650 = @func_3793(%634) /* ty=Tensor[(6, 2, 3), bool] */;
  %651 = @func_2625(%636) /* ty=Tensor[(2, 52), bool] */;
  %652 = %641.1;
  %653 = %642.1;
  %654 = @func_623(%645, %646) /* ty=Tensor[(6, 3, 6), float32] */;
  %655 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %656 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  (%647, %648, %649, %650, %var_4033, %651, %var_4037, %652, -2.42725f64 /* ty=float64 */, %653, %654, meta[relay.Constant][32] /* ty=Tensor[(18), uint8] */, meta[relay.Constant][33] /* ty=Tensor[(108), uint8] */, %655, %656)
}

def @func_1700() -> (Tensor[(6, 2, 1), float32],) {
  %657 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  (%657,)
}

def @func_6318() -> (Tensor[(6, 2, 1), float64],) {
  %658 = @func_5387() /* ty=Tensor[(6, 2, 1), float64] */;
  (%658,)
}

def @func_2491(%var_2486: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), int64],) {
  %659 = @func_2019() /* ty=(Tensor[(6, 2, ?), bool],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="int64") /* ty=Tensor[(6, 2, ?), int64] */;
  %662 = cast(%var_2486, dtype="int64") /* ty=Tensor[(6, 2, 12), int64] */;
  %663 = minimum(%661, %662) /* ty=Tensor[(6, 2, 12), int64] */;
  (%663,)
}

def @func_3522() -> Tensor[(6, 2, 1), float32] {
  @func_1084() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_6287() -> Tensor[(6, 2, 13), bool] {
  %664 = @func_5906() /* ty=Tensor[(6, 2, 1), float64] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %666 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 2, 13), float64] */, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  less(%665, %666) /* ty=Tensor[(6, 2, 13), bool] */
}

def @main(%var_6924: Tensor[(18), uint8], %var_6925: Tensor[(108), uint8]) -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64], Tensor[(6, 2, 1), float64], Tensor[(18), uint8], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, ?), int32]) {
  %667 = @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %668 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  %669 = @func_5906() /* ty=Tensor[(6, 2, 1), float64] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %671 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%668, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %674 = cast(%var_6924, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %675 = cast(%var_6925, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %676 = reshape(%674, newshape=[18]) /* ty=Tensor[(18), uint8] */;
  %677 = reshape(%675, newshape=[54, 2]) /* ty=Tensor[(54, 2), uint8] */;
  %678 = @func_5067(%676, %677) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) */;
  %679 = @func_1330() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %680 = %679.2;
  %681 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %682 = %681.1;
  %683 = cast(%682, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %684 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%680, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %687 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %688 = %667.0;
  %689 = floor_mod(%672, %673) /* ty=Tensor[(6, 2, ?), float64] */;
  %690 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %691 = %678.2;
  %692 = minimum(%685, %686) /* ty=Tensor[(6, 2, ?), int32] */;
  (%687, %688, %689, %690, %691, %var_6924, %var_6925, %692)
}

def @func_6543() -> (Tensor[(6, 2, 1), float32],) {
  %693 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
  (%693,)
}

def @func_341() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %694 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %695 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %696 = %695.1;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %698 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %699 = %694.0;
  %700 = atan(%697) /* ty=Tensor[(6, 2, 1), float64] */;
  %701 = %698.1;
  (%699, %700, %701)
}

def @func_5034() -> (Tensor[(6, 2, 1), float64],) {
  %702 = @func_941() /* ty=Tensor[(6, 2, 1), float64] */;
  (%702,)
}

def @func_1226() -> Tensor[(6, 2, 1), float64] {
  @func_941() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_3139(%var_3124: Tensor[(6, 9, 15), float32]) -> Tensor[(6, 9, 15), float64] {
  %703 = cast(%var_3124, dtype="float32") /* ty=Tensor[(6, 9, 15), float32] */;
  %704 = rsqrt(%703) /* ty=Tensor[(6, 9, 15), float32] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  atan(%705) /* ty=Tensor[(6, 9, 15), float64] */
}

def @func_3108() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %706 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %707 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %708 = %706.0;
  (%707, %708)
}

def @func_525(%var_505: Tensor[(13, 4, 7), float32]) -> (Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) {
  %709 = cast(%var_505, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %710 = cast(%var_505, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %711 = sinh(%709) /* ty=Tensor[(13, 4, 7), float32] */;
  %712 = sin(%710) /* ty=Tensor[(13, 4, 7), float32] */;
  (%711, %712)
}

def @func_2751() -> Tensor[(6, 2, 1), float32] {
  %713 = @func_1700() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %713.0
}

def @func_4380(%var_4368: Tensor[(6, 2, 6), float64], %var_4374: Tensor[(6, 2, 15), float64]) -> (Tensor[(6, 2, 6), int16], Tensor[(6, 2, 15), int16]) {
  %714 = @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %717 = cast(%var_4368, dtype="int16") /* ty=Tensor[(6, 2, 6), int16] */;
  %718 = cast(%715, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %719 = cast(%var_4374, dtype="int16") /* ty=Tensor[(6, 2, 15), int16] */;
  %720 = add(%716, %717) /* ty=Tensor[(6, 2, 6), int16] */;
  %721 = maximum(%718, %719) /* ty=Tensor[(6, 2, 15), int16] */;
  (%720, %721)
}

def @func_5067(%var_5061: Tensor[(18), uint8], %var_5062: Tensor[(54, 2), uint8]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) {
  %722 = @func_3108() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %723 = cast(%var_5061, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %724 = cast(%var_5062, dtype="uint8") /* ty=Tensor[(54, 2), uint8] */;
  %725 = reshape(%723, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %726 = reshape(%724, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %727 = %722.0;
  %728 = @func_623(%725, %726) /* ty=Tensor[(6, 3, 6), float32] */;
  (%727, %728, %var_5061, %var_5062)
}

def @func_2426() -> (Tensor[(6, 2, 1), float64],) {
  %729 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  (%729,)
}

def @func_723() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %730 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %731 = %730.0;
  %732 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  (%731, %732)
}

def @func_2985() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) {
  %733 = @func_1330() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %736 = sinh(%735) /* ty=Tensor[(6, 2, 1), float64] */;
  %737 = cast(%736, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %738 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%734, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %742 = logical_and(%739, %740) /* ty=Tensor[(6, 2, ?), bool] */;
  %743 = %741.0;
  (%742, %743)
}

def @func_2479() -> (Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) {
  %744 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
  %745 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(6, 2, 3), int32] */;
  %746 = cast(%744, dtype="int32") /* ty=Tensor[(6, 2, ?), int32] */;
  %747 = cast(%744, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %748 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
  %749 = less(%747, %748) /* ty=Tensor[(6, 2, 3), bool] */;
  %750 = cast(%744, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %751 = cast(%749, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
  %752 = greater_equal(%750, %751) /* ty=Tensor[(6, 2, 3), bool] */;
  %753 = cast(%749, dtype="int64") /* ty=Tensor[(6, 2, 3), int64] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="int64") /* ty=Tensor[(6, 2, 3), int64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %757 = subtract(%745, %746) /* ty=Tensor[(6, 2, 3), int32] */;
  %758 = bitwise_xor(%755, %756) /* ty=Tensor[(6, 2, 3), int64] */;
  (%757, %758)
}

def @func_2121() -> Tensor[(13, 15, 8), float64] {
  %759 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
  %759.0
}

def @func_4994() -> Tensor[(6, 2, ?), float32] {
  %760 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %761 = %760.1;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %763 = log10(%762) /* ty=Tensor[(6, 2, 1), float32] */;
  %764 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %766 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%763, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%767, %768) /* ty=Tensor[(6, 2, ?), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_566() -> Tensor[(6, 2, ?), bool] {
  %0 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %1 = %0.2;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 2, 1), float32] */, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %6 = logical_xor(%4, %5) /* ty=Tensor[(6, 2, ?), uint8] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 2, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%9, %10) /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_2019() -> (Tensor[(6, 2, ?), bool],) {
  %11 = @func_1330() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %12 = %11.1;
  (%12,)
}

def @func_4795(%var_4788: Tensor[(6, 2, 1), float32]) -> Tensor[(6, 2, ?), uint16] {
  %13 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %14 = %13.1;
  %15 = cast(%var_4788, dtype="uint16") /* ty=Tensor[(6, 2, 1), uint16] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="uint16") /* ty=Tensor[(6, 2, 1), uint16] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%17, %18) /* ty=Tensor[(6, 2, ?), uint16] */
}

def @func_941() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_4383(%var_4381: Tensor[(6, 2, 6), float64], %var_4382: Tensor[(6, 2, 15), float64]) -> (Tensor[(6, 2, 6), int16], Tensor[(6, 2, 15), int16]) {
  %27 = fn (%var_4368: Tensor[(6, 2, 6), float64], %var_4374: Tensor[(6, 2, 15), float64]) -> (Tensor[(6, 2, 6), int16], Tensor[(6, 2, 15), int16]) {
    %19 = @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %20 = %19.0;
    %21 = cast(%20, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
    %22 = cast(%var_4368, dtype="int16") /* ty=Tensor[(6, 2, 6), int16] */;
    %23 = cast(%20, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
    %24 = cast(%var_4374, dtype="int16") /* ty=Tensor[(6, 2, 15), int16] */;
    %25 = add(%21, %22) /* ty=Tensor[(6, 2, 6), int16] */;
    %26 = maximum(%23, %24) /* ty=Tensor[(6, 2, 15), int16] */;
    (%25, %26)
  };
  %27(%var_4381, %var_4382) /* ty=(Tensor[(6, 2, 6), int16], Tensor[(6, 2, 15), int16]) */
}

def @func_3795(%var_3794: Tensor[(6, 2, 3), bool]) -> Tensor[(6, 2, 3), bool] {
  %31 = fn (%var_3780: Tensor[(6, 2, 3), bool]) -> Tensor[(6, 2, 3), bool] {
    %28 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
    %29 = cast(%28, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
    %30 = cast(%var_3780, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
    greater(%29, %30) /* ty=Tensor[(6, 2, 3), bool] */
  };
  %31(%var_3794) /* ty=Tensor[(6, 2, 3), bool] */
}

def @func_3187(%var_3185: Tensor[(12, 15, 9), uint8]) -> Tensor[(12, 15, 9), uint8] {
  @func_3184(%var_3185) /* ty=Tensor[(12, 15, 9), uint8] */
}

def @func_6172() -> (Tensor[(6, 2, ?), float32],) {
  @func_6170() /* ty=(Tensor[(6, 2, ?), float32],) */
}

def @func_1529() -> Tensor[(6, 2, ?), float32] {
  @func_1527() /* ty=Tensor[(6, 2, ?), float32] */
}

def @func_4267() -> Tensor[(14, 11, 6), int8] {
  %33 = fn () -> Tensor[(14, 11, 6), int8] {
    %32 = @func_4207() /* ty=(Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) */;
    %32.1
  };
  %33() /* ty=Tensor[(14, 11, 6), int8] */
}

def @func_3891(%var_3862: Tensor[(7, 6), uint32], %var_3878: Tensor[(210, 13), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(7, 6), uint32], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(210, 13), bool], Tensor[(12, 15, 9), uint8], Tensor[(1620), uint8]) {
  %34 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %36 = reshape(%35, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %37 = @func_1883(%36) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %38 = cast(%var_3862, dtype="uint32") /* ty=Tensor[(7, 6), uint32] */;
  %39 = reshape(%38, newshape=[14, 3]) /* ty=Tensor[(14, 3), uint32] */;
  %40 = @func_2534(%39) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) */;
  %41 = %40.3;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %43 = atanh(%42) /* ty=Tensor[(210, 1), float64] */;
  %44 = cast(%43, dtype="bool") /* ty=Tensor[(210, 1), bool] */;
  %45 = cast(%var_3878, dtype="bool") /* ty=Tensor[(210, 13), bool] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(1620), uint8] */, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %47 = reshape(%46, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %48 = %34.0;
  %49 = %37.2;
  %50 = less_equal(%44, %45) /* ty=Tensor[(210, 13), bool] */;
  %51 = @func_3184(%47) /* ty=Tensor[(12, 15, 9), uint8] */;
  (%48, %var_3862, %49, meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, %50, %51, meta[relay.Constant][2] /* ty=Tensor[(1620), uint8] */)
}

def @func_3960(%var_3958: Tensor[(220, 2), uint16], %var_3959: Tensor[(1, 48), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(8, 5, 11), uint16], Tensor[(220, 2), uint16], Tensor[(6, 2, ?), int16], Tensor[(192), float32], Tensor[(1, 48), float64], float64, Tensor[(6, 2, 3), bool], Tensor[(36, 1), bool], Tensor[(6, 2, ?), bool]) {
  @func_3956(%var_3958, %var_3959) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(8, 5, 11), uint16], Tensor[(220, 2), uint16], Tensor[(6, 2, ?), int16], Tensor[(192), float32], Tensor[(1, 48), float64], float64, Tensor[(6, 2, 3), bool], Tensor[(36, 1), bool], Tensor[(6, 2, ?), bool]) */
}

def @func_4439(%var_4437: Tensor[(6, 2, 10), float32]) -> (Tensor[(6, 2, 10), bool], Tensor[(4, 2, 15), float32], Tensor[(6, 2, 10), float32]) {
  @func_4436(%var_4437) /* ty=(Tensor[(6, 2, 10), bool], Tensor[(4, 2, 15), float32], Tensor[(6, 2, 10), float32]) */
}

def @func_568() -> Tensor[(6, 2, ?), bool] {
  @func_566() /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_1227() -> Tensor[(6, 2, 1), float64] {
  %52 = fn () -> Tensor[(6, 2, 1), float64] {
    @func_941() /* ty=Tensor[(6, 2, 1), float64] */
  };
  %52() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_5987() -> Tensor[(6, 2, 1), float32] {
  %53 = @func_3708() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %53.2
}

def @func_525(%var_505: Tensor[(13, 4, 7), float32]) -> (Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) {
  %54 = cast(%var_505, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %55 = cast(%var_505, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %56 = sinh(%54) /* ty=Tensor[(13, 4, 7), float32] */;
  %57 = sin(%55) /* ty=Tensor[(13, 4, 7), float32] */;
  (%56, %57)
}

def @func_3657(%var_3656: Tensor[(270), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
  %63 = fn (%var_3653: Tensor[(270), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
    %58 = @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %59 = cast(%var_3653, dtype="float64") /* ty=Tensor[(270), float64] */;
    %60 = reshape(%59, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
    %61 = %58.1;
    %62 = @func_2515(%60) /* ty=Tensor[(3, 15, 6), float32] */;
    (%61, %62, %var_3653)
  };
  %63(%var_3656) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) */
}

def @func_3422(%var_3337: Tensor[(104), uint32], %var_3351: Tensor[(104), uint32], %var_3411: Tensor[(10, 3, 3), float64]) -> (Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) {
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %65 = erf(%64) /* ty=Tensor[(10, 3, 3), float64] */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %67 = cosh(%66) /* ty=Tensor[(10, 3, 3), float64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %69 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%65, dtype="float64") /* ty=Tensor[(10, 3, 3), float64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %72 = cast(%var_3337, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %73 = reshape(%72, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %74 = cast(%var_3351, dtype="bool") /* ty=Tensor[(104), bool] */;
  %75 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(%var_3337, dtype="bool") /* ty=Tensor[(104), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), bool] */;
  %78 = @func_723() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
  %79 = cast(%var_3411, dtype="int32") /* ty=Tensor[(10, 3, 3), int32] */;
  %80 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%65, dtype="int32") /* ty=Tensor[(10, 3, 3), int32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %83 = floor_mod(%70, %71) /* ty=Tensor[(10, 3, 3), float64] */;
  %84 = @func_984(%73) /* ty=Tensor[(10, 13, 8), uint32] */;
  %85 = logical_or(%76, %77) /* ty=Tensor[(104), bool] */;
  %86 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %87 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %88 = %78.0;
  %89 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %90 = subtract(%81, %82) /* ty=Tensor[(10, 3, 3), int32] */;
  (%83, %84, %85, %86, %87, %88, %89, %90)
}

def @func_6827(%var_6825: Tensor[(2, 52), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(2, 52), uint32], Tensor[(90), float64]) {
  @func_6824(%var_6825) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(2, 52), uint32], Tensor[(90), float64]) */
}

def @func_3956(%var_3907: Tensor[(220, 2), uint16], %var_3926: Tensor[(1, 48), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(8, 5, 11), uint16], Tensor[(220, 2), uint16], Tensor[(6, 2, ?), int16], Tensor[(192), float32], Tensor[(1, 48), float64], float64, Tensor[(6, 2, 3), bool], Tensor[(36, 1), bool], Tensor[(6, 2, ?), bool]) {
  %91 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %92 = cast(%var_3907, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %93 = cast(%var_3907, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %94 = reshape(%92, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %95 = reshape(%93, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %96 = @func_2778(%94, %95) /* ty=(Tensor[(8, 5, 11), uint16],) */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %98 = cast(%var_3926, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %99 = cast(-5.66722f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %100 = reshape(%97, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %101 = reshape(%98, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %102 = reshape(%99, newshape=[]) /* ty=float64 */;
  %103 = @func_2907(%100, %101, %102) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */;
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(36, 1), bool] */, dtype="bool") /* ty=Tensor[(36, 1), bool] */;
  %105 = reshape(%104, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %106 = %91.0;
  %107 = %96.0;
  %108 = %103.5;
  %109 = @func_3793(%105) /* ty=Tensor[(6, 2, 3), bool] */;
  %110 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%106, %107, %var_3907, %108, meta[relay.Constant][4] /* ty=Tensor[(192), float32] */, %var_3926, -5.66722f64 /* ty=float64 */, %109, meta[relay.Constant][5] /* ty=Tensor[(36, 1), bool] */, %110)
}

def @func_6686(%var_6657: Tensor[(1, 4, 4), int16], %var_6673: Tensor[(180), bool]) -> (Tensor[(10, 4, 4), bool], Tensor[(6, 2, 1), float64], Tensor[(180), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %111 = cast(%var_6657, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 4, 4), int16] */, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
  %113 = cast(%var_6673, dtype="bool") /* ty=Tensor[(180), bool] */;
  %114 = reshape(%113, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %115 = @func_2066(%114) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %116 = @func_5847() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
  %117 = less(%111, %112) /* ty=Tensor[(10, 4, 4), bool] */;
  %118 = %115.0;
  %119 = %116.1;
  %120 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  (%117, %118, %var_6673, %119, %120)
}

def @func_996() -> Tensor[(6, 2, 1), float64] {
  %121 = fn () -> Tensor[(6, 2, 1), float64] {
    @func_941() /* ty=Tensor[(6, 2, 1), float64] */
  };
  %121() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_691() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %122 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %123 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %124 = %122.0;
  %125 = %123.2;
  (%124, %125)
}

def @func_1973(%var_1971: Tensor[(13, 15, 8), float64]) -> Tensor[(13, 15, 8), int8] {
  @func_1970(%var_1971) /* ty=Tensor[(13, 15, 8), int8] */
}

def @func_2225() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) {
  @func_2223() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) */
}

def @func_1331() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
  %130 = fn () -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
    %126 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
    %127 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
    %128 = %126.0;
    %129 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    (%127, %128, %129)
  };
  %130() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */
}

def @func_2161(%var_2143: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  %131 = cast(%var_2143, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %132 = atanh(%131) /* ty=Tensor[(4, 2, 15), float32] */;
  (%132,)
}

def @func_3709() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %139 = fn () -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
    %133 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
    %134 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
    %135 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
    %136 = %133.0;
    %137 = %134.0;
    %138 = %135.0;
    (%136, %137, %138)
  };
  %139() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_4798(%var_4796: Tensor[(6, 2, 1), float32]) -> Tensor[(6, 2, ?), uint16] {
  @func_4795(%var_4796) /* ty=Tensor[(6, 2, ?), uint16] */
}

def @func_4632() -> Tensor[(6, 2, 1), float32] {
  %140 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %140.1
}

def @func_4995() -> Tensor[(6, 2, ?), float32] {
  %150 = fn () -> Tensor[(6, 2, ?), float32] {
    %141 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
    %142 = %141.1;
    %143 = cast(%142, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
    %144 = log10(%143) /* ty=Tensor[(6, 2, 1), float32] */;
    %145 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
    %146 = cast(%145, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
    %147 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%144, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%148, %149) /* ty=Tensor[(6, 2, ?), float32] */
  };
  %150() /* ty=Tensor[(6, 2, ?), float32] */
}

def @func_891(%var_790: Tensor[(12, 11, 3), float64], %var_865: Tensor[(6, 3), uint8], %var_866: Tensor[(108), uint8]) -> (Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) {
  %151 = cast(%var_790, dtype="float64") /* ty=Tensor[(12, 11, 3), float64] */;
  %152 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %153 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %154 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %157 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%153, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %160 = cast(%var_865, dtype="uint8") /* ty=Tensor[(6, 3), uint8] */;
  %161 = cast(%var_866, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %162 = reshape(%160, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %163 = reshape(%161, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %164 = cosh(%151) /* ty=Tensor[(12, 11, 3), float64] */;
  %165 = %152.1;
  %166 = power(%158, %159) /* ty=Tensor[(6, 2, ?), float64] */;
  %167 = @func_623(%162, %163) /* ty=Tensor[(6, 3, 6), float32] */;
  (%164, %165, %166, %167, %var_865, %var_866)
}

def @func_1085() -> Tensor[(6, 2, 1), float32] {
  %169 = fn () -> Tensor[(6, 2, 1), float32] {
    %168 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %168.1
  };
  %169() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_2912(%var_2909: Tensor[(6, 2, 16), float32], %var_2910: Tensor[(48), float64], %var_2911: float64) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  @func_2907(%var_2909, %var_2910, %var_2911) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */
}

def @func_4436(%var_4405: Tensor[(6, 2, 10), float32]) -> (Tensor[(6, 2, 10), bool], Tensor[(4, 2, 15), float32], Tensor[(6, 2, 10), float32]) {
  %170 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %173 = cast(%var_4405, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %174 = equal(%172, %173) /* ty=Tensor[(6, 2, 10), bool] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
  %176 = reshape(%175, newshape=[4, 2, 15]) /* ty=Tensor[(4, 2, 15), float32] */;
  %177 = @func_2161(%176) /* ty=(Tensor[(4, 2, 15), float32],) */;
  %178 = cast(%var_4405, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
  %179 = %177.0;
  %180 = log2(%178) /* ty=Tensor[(6, 2, 10), float32] */;
  (%174, %179, %180)
}

def @func_5499(%var_5485: Tensor[(1024), int16]) -> (Tensor[(6, 2, ?), bool], Tensor[(16, 16, 4), int16], Tensor[(1024), int16]) {
  %181 = cast(%var_5485, dtype="int16") /* ty=Tensor[(1024), int16] */;
  %182 = reshape(%181, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), int16] */;
  %183 = @func_2397(%182) /* ty=(Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) */;
  %184 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %185 = %183.0;
  (%184, %185, %var_5485)
}

def @func_4943(%var_4941: Tensor[(9, 14, 12), float64]) -> Tensor[(9, 14, 12), float64] {
  @func_4940(%var_4941) /* ty=Tensor[(9, 14, 12), float64] */
}

def @func_1751() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) {
  %186 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %187 = %186.0;
  %188 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %189 = cast(%187, dtype="int8") /* ty=Tensor[(6, 2, 1), int8] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="int8") /* ty=Tensor[(6, 2, 1), int8] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %193 = add(%191, %192) /* ty=Tensor[(6, 2, ?), int8] */;
  %194 = cast(%193, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %195 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%187, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = greater(%196, %197) /* ty=Tensor[(6, 2, ?), bool] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %200 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  %201 = acosh(%199) /* ty=Tensor[(6, 2, ?), float64] */;
  (%200, %201)
}

def @func_1753() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) {
  @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */
}

def @func_2729(%var_2727: Tensor[(144), bool]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 12), int64], Tensor[(11, 4, 12), float32], Tensor[(528), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 144), bool]) {
  @func_2726(%var_2727) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 12), int64], Tensor[(11, 4, 12), float32], Tensor[(528), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 144), bool]) */
}

def @func_6083() -> (Tensor[(6, 2, 1), float64],) {
  %203 = fn () -> (Tensor[(6, 2, 1), float64],) {
    %202 = @func_941() /* ty=Tensor[(6, 2, 1), float64] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_5908() -> Tensor[(6, 2, 1), float64] {
  @func_5906() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_2361() -> Tensor[(6, 2, ?), int16] {
  %204 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %205 = %204.0;
  %206 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
  %207 = cast(%206, dtype="int16") /* ty=Tensor[(6, 2, ?), int16] */;
  %208 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%205, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%209, %210) /* ty=Tensor[(6, 2, ?), int16] */
}

def @func_538(%var_536: float64, %var_537: Tensor[(3, 2, 15), float64]) -> Tensor[(3, 2, 15), bool] {
  %213 = fn (%var_530: float64, %var_531: Tensor[(3, 2, 15), float64]) -> Tensor[(3, 2, 15), bool] {
    %211 = cast(%var_530, dtype="bool") /* ty=bool */;
    %212 = cast(%var_531, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
    equal(%211, %212) /* ty=Tensor[(3, 2, 15), bool] */
  };
  %213(%var_536, %var_537) /* ty=Tensor[(3, 2, 15), bool] */
}

def @func_3522() -> Tensor[(6, 2, 1), float32] {
  @func_1084() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_528(%var_526: Tensor[(13, 4, 7), float32]) -> (Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) {
  @func_525(%var_526) /* ty=(Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) */
}

def @func_2400(%var_2398: Tensor[(16, 16, 4), int16]) -> (Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) {
  @func_2397(%var_2398) /* ty=(Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) */
}

def @func_5364(%var_5362: Tensor[(10, 13, 8), uint32]) -> (Tensor[(14, 11, 6), float64], Tensor[(6, 2, ?), bool], Tensor[(26, 4), uint32], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(14, 11, 6), int8]) {
  @func_5361(%var_5362) /* ty=(Tensor[(14, 11, 6), float64], Tensor[(6, 2, ?), bool], Tensor[(26, 4), uint32], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(14, 11, 6), int8]) */
}

def @func_4150() -> Tensor[(6, 2, ?), bool] {
  @func_4148() /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_6137() -> (Tensor[(6, 2, 1), float32], Tensor[(104), uint32], Tensor[(10, 13, 8), float32]) {
  @func_6135() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(104), uint32], Tensor[(10, 13, 8), float32]) */
}

def @func_4103(%var_4101: Tensor[(36), bool], %var_4102: Tensor[(104), uint32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, ?), uint8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(2, 52), bool], Tensor[(104), uint32], Tensor[(3, 2, 15), bool], float64, Tensor[(6, 2, 1), float32], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %245 = fn (%var_4033: Tensor[(36), bool], %var_4037: Tensor[(104), uint32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, ?), uint8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(2, 52), bool], Tensor[(104), uint32], Tensor[(3, 2, 15), bool], float64, Tensor[(6, 2, 1), float32], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
    %214 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
    %215 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %216 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
    %217 = cast(%216, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
    %218 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
    %219 = cast(%215, dtype="uint8") /* ty=Tensor[(6, 2, 1), uint8] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %221 = cast(%var_4033, dtype="bool") /* ty=Tensor[(36), bool] */;
    %222 = reshape(%221, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
    %223 = cast(%var_4037, dtype="uint32") /* ty=Tensor[(104), uint32] */;
    %224 = reshape(%223, newshape=[2, 52]) /* ty=Tensor[(2, 52), uint32] */;
    %225 = cast(-2.42725f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %226 = cast(%215, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
    %227 = reshape(%225, newshape=[]) /* ty=float64 */;
    %228 = reshape(%226, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float64] */;
    %229 = @func_1616(%227, %228) /* ty=(Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */;
    %230 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
    %231 = cast(meta[relay.Constant][7] /* ty=Tensor[(18), uint8] */, dtype="uint8") /* ty=Tensor[(18), uint8] */;
    %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
    %233 = reshape(%231, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
    %234 = reshape(%232, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
    %235 = %214.2;
    %236 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
    %237 = left_shift(%219, %220) /* ty=Tensor[(6, 2, ?), uint8] */;
    %238 = @func_3793(%222) /* ty=Tensor[(6, 2, 3), bool] */;
    %239 = @func_2625(%224) /* ty=Tensor[(2, 52), bool] */;
    %240 = %229.1;
    %241 = %230.1;
    %242 = @func_623(%233, %234) /* ty=Tensor[(6, 3, 6), float32] */;
    %243 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %244 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
    (%235, %236, %237, %238, %var_4033, %239, %var_4037, %240, -2.42725f64 /* ty=float64 */, %241, %242, meta[relay.Constant][7] /* ty=Tensor[(18), uint8] */, meta[relay.Constant][8] /* ty=Tensor[(108), uint8] */, %243, %244)
  };
  %245(%var_4101, %var_4102) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, ?), uint8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(2, 52), bool], Tensor[(104), uint32], Tensor[(3, 2, 15), bool], float64, Tensor[(6, 2, 1), float32], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_5035() -> (Tensor[(6, 2, 1), float64],) {
  %247 = fn () -> (Tensor[(6, 2, 1), float64],) {
    %246 = @func_941() /* ty=Tensor[(6, 2, 1), float64] */;
    (%246,)
  };
  %247() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_1925() -> (Tensor[(13, 15, 8), float64],) {
  %250 = fn () -> (Tensor[(13, 15, 8), float64],) {
    %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
    %249 = sqrt(%248) /* ty=Tensor[(13, 15, 8), float64] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(13, 15, 8), float64],) */
}

def @func_2536(%var_2535: Tensor[(14, 3), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) {
  %258 = fn (%var_2531: Tensor[(14, 3), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) {
    %251 = cast(%var_2531, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
    %252 = cast(meta[relay.Constant][10] /* ty=Tensor[(210, 1), uint32] */, dtype="uint32") /* ty=Tensor[(210, 1), uint32] */;
    %253 = reshape(%251, newshape=[14, 3, 1]) /* ty=Tensor[(14, 3, 1), uint32] */;
    %254 = reshape(%252, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), uint32] */;
    %255 = @func_2203(%253, %254) /* ty=(Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) */;
    %256 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %257 = %255.2;
    (%256, %257, %var_2531, meta[relay.Constant][10] /* ty=Tensor[(210, 1), uint32] */)
  };
  %258(%var_2535) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(3, 6), uint8], Tensor[(14, 3), uint32], Tensor[(210, 1), uint32]) */
}

def @func_6543() -> (Tensor[(6, 2, 1), float32],) {
  %259 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
  (%259,)
}

def @func_6636(%var_6572: Tensor[(1620), uint8], %var_6609: Tensor[(1620), uint8]) -> (Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float64], Tensor[(14, 11, 6), int8], Tensor[(1620), float32], Tensor[(10, 13, 8), uint32], Tensor[(104, 1), uint32], Tensor[(12, 15, 9), float64], Tensor[(6, 2, ?), uint16]) {
  %260 = @func_4994() /* ty=Tensor[(6, 2, ?), float32] */;
  %261 = @func_2223() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) */;
  %262 = %261.1;
  %263 = cast(%262, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %264 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%260, dtype="int16") /* ty=Tensor[(6, 2, ?), int16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %267 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %268 = cast(%var_6609, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %269 = shape_of(%var_6572, dtype="int32") /* ty=Tensor[(1), int32] */;
  %270 = cast(%var_6572, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?), float32] */;
  %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(104, 1), uint32] */, dtype="uint32") /* ty=Tensor[(104, 1), uint32] */;
  %273 = reshape(%272, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %274 = cast(%var_6572, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %275 = reshape(%274, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %276 = @func_3184(%275) /* ty=Tensor[(12, 15, 9), uint8] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %278 = cos(%277) /* ty=Tensor[(12, 15, 9), float64] */;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %280 = cast(%262, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %281 = reshape(%280, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %282 = right_shift(%265, %266) /* ty=Tensor[(6, 2, ?), int16] */;
  %283 = %267.0;
  %284 = @func_4266() /* ty=Tensor[(14, 11, 6), int8] */;
  %285 = maximum(%270, %271) /* ty=Tensor[(1620), float32] */;
  %286 = @func_984(%273) /* ty=Tensor[(10, 13, 8), uint32] */;
  %287 = asinh(%279) /* ty=Tensor[(12, 15, 9), float64] */;
  %288 = @func_4795(%281) /* ty=Tensor[(6, 2, ?), uint16] */;
  (%282, %283, %284, %285, %286, meta[relay.Constant][11] /* ty=Tensor[(104, 1), uint32] */, %287, %288)
}

def @func_2598() -> (Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) {
  @func_2596() /* ty=(Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) */
}

def @func_5446(%var_5411: Tensor[(48), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(14, 5, 4), float32], Tensor[(280), float32], Tensor[(6, 2, 48), int64]) {
  %289 = cast(%var_5411, dtype="float64") /* ty=Tensor[(48), float64] */;
  %290 = reshape(%289, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %291 = @func_1883(%290) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %292 = cast(meta[relay.Constant][12] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %293 = reshape(%292, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %294 = @func_3852(%293) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) */;
  %295 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %296 = %295.1;
  %297 = cast(%var_5411, dtype="int64") /* ty=Tensor[(48), int64] */;
  %298 = cast(%296, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
  %299 = %291.2;
  %300 = %294.0;
  %301 = bitwise_or(%297, %298) /* ty=Tensor[(6, 2, 48), int64] */;
  (%299, %300, meta[relay.Constant][12] /* ty=Tensor[(280), float32] */, %301)
}

def @func_4148() -> Tensor[(6, 2, ?), bool] {
  %302 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %302.0
}

def @func_4755() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(1, 180), bool], Tensor[(6, 2, ?), bool]) {
  @func_4753() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(1, 180), bool], Tensor[(6, 2, ?), bool]) */
}

def @func_2068(%var_2067: Tensor[(6, 2, 15), bool]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) {
  %308 = fn (%var_2056: Tensor[(6, 2, 15), bool]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) {
    %303 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(6, 2, ?), float32] */;
    %305 = cast(%var_2056, dtype="float32") /* ty=Tensor[(6, 2, 15), float32] */;
    %306 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %307 = power(%304, %305) /* ty=Tensor[(6, 2, 15), float32] */;
    (%306, %307)
  };
  %308(%var_2067) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */
}

def @func_5010() -> (Tensor[(6, 2, 1), float64],) {
  %311 = fn () -> (Tensor[(6, 2, 1), float64],) {
    %309 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
    %310 = %309.0;
    (%310,)
  };
  %311() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_5847() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %312 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %313 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %314 = %312.0;
  (%313, %314)
}

def @main(%var_6924: Tensor[(18), uint8], %var_6925: Tensor[(108), uint8]) -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64], Tensor[(6, 2, 1), float64], Tensor[(18), uint8], Tensor[(18), uint8], Tensor[(108), uint8], Tensor[(6, 2, ?), int32]) {
  %315 = @func_3250() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %316 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  %317 = @func_5906() /* ty=Tensor[(6, 2, 1), float64] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %319 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%316, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(%var_6924, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %323 = cast(%var_6925, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %324 = reshape(%322, newshape=[18]) /* ty=Tensor[(18), uint8] */;
  %325 = reshape(%323, newshape=[54, 2]) /* ty=Tensor[(54, 2), uint8] */;
  %326 = @func_5071(%324, %325) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) */;
  %327 = @func_1331() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %328 = %327.2;
  %329 = @func_4897() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %330 = %329.1;
  %331 = cast(%330, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %332 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%328, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %335 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %336 = %315.0;
  %337 = floor_mod(%320, %321) /* ty=Tensor[(6, 2, ?), float64] */;
  %338 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  %339 = %326.2;
  %340 = minimum(%333, %334) /* ty=Tensor[(6, 2, ?), int32] */;
  (%335, %336, %337, %338, %339, %var_6924, %var_6925, %340)
}

def @func_1701() -> (Tensor[(6, 2, 1), float32],) {
  %342 = fn () -> (Tensor[(6, 2, 1), float32],) {
    %341 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
    (%341,)
  };
  %342() /* ty=(Tensor[(6, 2, 1), float32],) */
}

def @func_5617() -> (Tensor[(6, 2, ?), bool],) {
  @func_5615() /* ty=(Tensor[(6, 2, ?), bool],) */
}

def @func_2577() -> Tensor[(6, 2, 1), float64] {
  %343 = fn () -> Tensor[(6, 2, 1), float64] {
    @func_465() /* ty=Tensor[(6, 2, 1), float64] */
  };
  %343() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_2781(%var_2779: Tensor[(8, 5, 11), uint16], %var_2780: Tensor[(8, 5, 11), uint16]) -> (Tensor[(8, 5, 11), uint16],) {
  %349 = fn (%var_2769: Tensor[(8, 5, 11), uint16], %var_2770: Tensor[(8, 5, 11), uint16]) -> (Tensor[(8, 5, 11), uint16],) {
    %344 = cast(%var_2770, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
    %345 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_2769, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %348 = multiply(%346, %347) /* ty=Tensor[(8, 5, 11), uint16] */;
    (%348,)
  };
  %349(%var_2779, %var_2780) /* ty=(Tensor[(8, 5, 11), uint16],) */
}

def @func_1986() -> (Tensor[(6, 2, 1), float64],) {
  %350 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %351 = %350.0;
  (%351,)
}

def @func_3109() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %355 = fn () -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
    %352 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %353 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %354 = %352.0;
    (%353, %354)
  };
  %355() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_3206() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_724() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %359 = fn () -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
    %356 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %357 = %356.0;
    %358 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
    (%357, %358)
  };
  %359() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */
}

def @func_4600() -> Tensor[(6, 2, 1), float32] {
  @func_2751() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_5387() -> Tensor[(6, 2, 1), float64] {
  %360 = @func_5134() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %360.0
}

def @func_5067(%var_5061: Tensor[(18), uint8], %var_5062: Tensor[(54, 2), uint8]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) {
  %361 = @func_3108() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %362 = cast(%var_5061, dtype="uint8") /* ty=Tensor[(18), uint8] */;
  %363 = cast(%var_5062, dtype="uint8") /* ty=Tensor[(54, 2), uint8] */;
  %364 = reshape(%362, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
  %365 = reshape(%363, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %366 = %361.0;
  %367 = @func_623(%364, %365) /* ty=Tensor[(6, 3, 6), float32] */;
  (%366, %367, %var_5061, %var_5062)
}

def @func_6135() -> (Tensor[(6, 2, 1), float32], Tensor[(104), uint32], Tensor[(10, 13, 8), float32]) {
  %368 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %369 = cast(meta[relay.Constant][13] /* ty=Tensor[(104), uint32] */, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %370 = reshape(%369, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %371 = @func_984(%370) /* ty=Tensor[(10, 13, 8), uint32] */;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %373 = %368.0;
  %374 = erf(%372) /* ty=Tensor[(10, 13, 8), float32] */;
  (%373, meta[relay.Constant][13] /* ty=Tensor[(104), uint32] */, %374)
}

def @func_2223() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float64]) {
  %375 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %376 = %375.0;
  %377 = @func_964() /* ty=Tensor[(6, 2, 1), float64] */;
  (%376, %377)
}

def @func_4897() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %382 = fn () -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
    %378 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
    %379 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
    %380 = %378.0;
    %381 = %379.0;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_3139(%var_3124: Tensor[(6, 9, 15), float32]) -> Tensor[(6, 9, 15), float64] {
  %383 = cast(%var_3124, dtype="float32") /* ty=Tensor[(6, 9, 15), float32] */;
  %384 = rsqrt(%383) /* ty=Tensor[(6, 9, 15), float32] */;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  atan(%385) /* ty=Tensor[(6, 9, 15), float64] */
}

def @func_5449(%var_5447: Tensor[(48), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(14, 5, 4), float32], Tensor[(280), float32], Tensor[(6, 2, 48), int64]) {
  @func_5446(%var_5447) /* ty=(Tensor[(6, 2, ?), float32], Tensor[(14, 5, 4), float32], Tensor[(280), float32], Tensor[(6, 2, 48), int64]) */
}

def @func_4245(%var_4243: Tensor[(15, 6, 15), float64], %var_4244: Tensor[(270), float64]) -> (Tensor[(15, 6, 15), float64], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
  %392 = fn (%var_4232: Tensor[(15, 6, 15), float64], %var_4240: Tensor[(270), float64]) -> (Tensor[(15, 6, 15), float64], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) {
    %386 = cast(%var_4232, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
    %387 = cast(%var_4240, dtype="float64") /* ty=Tensor[(270), float64] */;
    %388 = reshape(%387, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %389 = @func_3655(%388) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) */;
    %390 = sqrt(%386) /* ty=Tensor[(15, 6, 15), float64] */;
    %391 = %389.1;
    (%390, %391, %var_4240)
  };
  %392(%var_4243, %var_4244) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(3, 15, 6), float32], Tensor[(270), float64]) */
}

def @func_6640(%var_6638: Tensor[(1620), uint8], %var_6639: Tensor[(1620), uint8]) -> (Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float64], Tensor[(14, 11, 6), int8], Tensor[(1620), float32], Tensor[(10, 13, 8), uint32], Tensor[(104, 1), uint32], Tensor[(12, 15, 9), float64], Tensor[(6, 2, ?), uint16]) {
  @func_6636(%var_6638, %var_6639) /* ty=(Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float64], Tensor[(14, 11, 6), int8], Tensor[(1620), float32], Tensor[(10, 13, 8), uint32], Tensor[(104, 1), uint32], Tensor[(12, 15, 9), float64], Tensor[(6, 2, ?), uint16]) */
}

def @func_1141() -> (Tensor[(6, 2, 1), float64],) {
  @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_4940(%var_4935: Tensor[(9, 14, 12), float64]) -> Tensor[(9, 14, 12), float64] {
  %393 = cast(%var_4935, dtype="float64") /* ty=Tensor[(9, 14, 12), float64] */;
  log10(%393) /* ty=Tensor[(9, 14, 12), float64] */
}

def @func_4602() -> Tensor[(6, 2, 1), float32] {
  @func_4600() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_5389() -> Tensor[(6, 2, 1), float64] {
  @func_5387() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_3062(%var_3059: Tensor[(1, 14, 7), float32], %var_3060: Tensor[(1024), int16], %var_3061: Tensor[(90), float64]) -> (Tensor[(6, 2, 3), int32], Tensor[(16, 16, 4), int16], Tensor[(?, 14, 7), uint8], Tensor[(6, 2, 1024), float64], Tensor[(6, 2, 1), float32], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1, 14, 7), float32]) {
  %419 = fn (%var_3006: Tensor[(1, 14, 7), float32], %var_3022: Tensor[(1024), int16], %var_3043: Tensor[(90), float64]) -> (Tensor[(6, 2, 3), int32], Tensor[(16, 16, 4), int16], Tensor[(?, 14, 7), uint8], Tensor[(6, 2, 1024), float64], Tensor[(6, 2, 1), float32], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1, 14, 7), float32]) {
    %394 = @func_2479() /* ty=(Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) */;
    %395 = cast(%var_3022, dtype="int16") /* ty=Tensor[(1024), int16] */;
    %396 = reshape(%395, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), int16] */;
    %397 = @func_2397(%396) /* ty=(Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) */;
    %398 = cast(%var_3006, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
    %399 = exp(%398) /* ty=Tensor[(1, 14, 7), float32] */;
    %400 = cast(%var_3006, dtype="uint8") /* ty=Tensor[(1, 14, 7), uint8] */;
    %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%399, dtype="uint8") /* ty=Tensor[(1, 14, 7), uint8] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %404 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
    %405 = cast(%var_3022, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %406 = cast(%404, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
    %407 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %408 = cast(%var_3043, dtype="float64") /* ty=Tensor[(90), float64] */;
    %409 = reshape(%408, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %410 = @func_2326(%409) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
    %411 = cast(%399, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
    %412 = %394.0;
    %413 = %397.0;
    %414 = multiply(%402, %403) /* ty=Tensor[(?, 14, 7), uint8] */;
    %415 = divide(%405, %406) /* ty=Tensor[(6, 2, 1024), float64] */;
    %416 = %407.0;
    %417 = %410.8;
    %418 = sigmoid(%411) /* ty=Tensor[(1, 14, 7), float32] */;
    (%412, %413, %414, %415, %416, %417, %var_3043, %418)
  };
  %419(%var_3059, %var_3060, %var_3061) /* ty=(Tensor[(6, 2, 3), int32], Tensor[(16, 16, 4), int16], Tensor[(?, 14, 7), uint8], Tensor[(6, 2, 1024), float64], Tensor[(6, 2, 1), float32], Tensor[(90), float64], Tensor[(90), float64], Tensor[(1, 14, 7), float32]) */
}

def @func_6794(%var_6793: Tensor[(810), float32]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 9, 15), float64], Tensor[(810), float32]) {
  %424 = fn (%var_6790: Tensor[(810), float32]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 9, 15), float64], Tensor[(810), float32]) {
    %420 = cast(%var_6790, dtype="float32") /* ty=Tensor[(810), float32] */;
    %421 = reshape(%420, newshape=[6, 9, 15]) /* ty=Tensor[(6, 9, 15), float32] */;
    %422 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
    %423 = @func_3139(%421) /* ty=Tensor[(6, 9, 15), float64] */;
    (%422, %423, %var_6790)
  };
  %424(%var_6793) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 9, 15), float64], Tensor[(810), float32]) */
}

def @func_342() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %433 = fn () -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
    %425 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %426 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %427 = %426.1;
    %428 = cast(%427, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
    %429 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %430 = %425.0;
    %431 = atan(%428) /* ty=Tensor[(6, 2, 1), float64] */;
    %432 = %429.1;
    (%430, %431, %432)
  };
  %433() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_2726(%var_2657: Tensor[(144), bool]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 12), int64], Tensor[(11, 4, 12), float32], Tensor[(528), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 144), bool]) {
  %434 = @func_1582() /* ty=(Tensor[(6, 2, 1), float32],) */;
  %435 = cast(%var_2657, dtype="bool") /* ty=Tensor[(144), bool] */;
  %436 = reshape(%435, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), bool] */;
  %437 = @func_2491(%436) /* ty=(Tensor[(6, 2, 12), int64],) */;
  %438 = cast(meta[relay.Constant][14] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %439 = reshape(%438, newshape=[11, 4, 12]) /* ty=Tensor[(11, 4, 12), float32] */;
  %440 = @func_1345(%439) /* ty=(Tensor[(11, 4, 12), float32],) */;
  %441 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %442 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %443 = cast(%442, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %444 = cast(%var_2657, dtype="bool") /* ty=Tensor[(144), bool] */;
  %445 = %434.0;
  %446 = %437.0;
  %447 = %440.0;
  %448 = %441.0;
  %449 = logical_and(%443, %444) /* ty=Tensor[(6, 2, 144), bool] */;
  (%445, %446, %447, meta[relay.Constant][14] /* ty=Tensor[(528), float32] */, %448, %449)
}

def @func_2752() -> Tensor[(6, 2, 1), float32] {
  %451 = fn () -> Tensor[(6, 2, 1), float32] {
    %450 = @func_1700() /* ty=(Tensor[(6, 2, 1), float32],) */;
    %450.0
  };
  %451() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_5615() -> (Tensor[(6, 2, ?), bool],) {
  %452 = @func_2985() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */;
  %453 = %452.0;
  (%453,)
}

def @func_6545() -> (Tensor[(6, 2, 1), float32],) {
  @func_6543() /* ty=(Tensor[(6, 2, 1), float32],) */
}

def @func_1885(%var_1884: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) {
  %464 = fn (%var_1844: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) {
    %454 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %455 = cast(%454, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
    %456 = cast(%var_1844, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
    %457 = logical_and(%455, %456) /* ty=Tensor[(6, 2, 4), bool] */;
    %458 = cast(%454, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
    %459 = cast(%457, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
    %460 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %461 = power(%458, %459) /* ty=Tensor[(6, 2, 4), float64] */;
    %462 = %460.1;
    %463 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
    (%461, %462, %463)
  };
  %464(%var_1884) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */
}

def @func_943() -> Tensor[(6, 2, 1), float64] {
  @func_941() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_1616(%var_1602: float64, %var_1605: Tensor[(6, 2, 1), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  %465 = cast(%var_1602, dtype="float64") /* ty=float64 */;
  %466 = cast(meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %467 = reshape(%465, newshape=[]) /* ty=float64 */;
  %468 = reshape(%466, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %469 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
  %472 = exp(%471) /* ty=Tensor[(6, 2, ?), float64] */;
  %473 = cast(%var_1605, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %477 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
  %478 = @func_535(%467, %468) /* ty=Tensor[(3, 2, 15), bool] */;
  %479 = less_equal(%475, %476) /* ty=Tensor[(6, 2, ?), bool] */;
  (%477, %478, %var_1602, meta[relay.Constant][15] /* ty=Tensor[(90), float64] */, %479)
}

def @func_3427(%var_3424: Tensor[(104), uint32], %var_3425: Tensor[(104), uint32], %var_3426: Tensor[(10, 3, 3), float64]) -> (Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) {
  @func_3422(%var_3424, %var_3425, %var_3426) /* ty=(Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) */
}

def @func_6170() -> (Tensor[(6, 2, ?), float32],) {
  %480 = @func_4994() /* ty=Tensor[(6, 2, ?), float32] */;
  (%480,)
}

def @func_1392(%var_1389: Tensor[(396), float64], %var_1390: Tensor[(18), uint8], %var_1391: Tensor[(108), uint8]) -> (Tensor[(10, 13, 8), uint32], Tensor[(6, 2, ?), bool], Tensor[(396), float64], Tensor[(18), uint8], Tensor[(108), uint8]) {
  %491 = fn (%var_1373: Tensor[(396), float64], %var_1374: Tensor[(18), uint8], %var_1375: Tensor[(108), uint8]) -> (Tensor[(10, 13, 8), uint32], Tensor[(6, 2, ?), bool], Tensor[(396), float64], Tensor[(18), uint8], Tensor[(108), uint8]) {
    %481 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
    %482 = cast(%var_1373, dtype="float64") /* ty=Tensor[(396), float64] */;
    %483 = cast(%var_1374, dtype="uint8") /* ty=Tensor[(18), uint8] */;
    %484 = cast(%var_1375, dtype="uint8") /* ty=Tensor[(108), uint8] */;
    %485 = reshape(%482, newshape=[12, 11, 3]) /* ty=Tensor[(12, 11, 3), float64] */;
    %486 = reshape(%483, newshape=[6, 3]) /* ty=Tensor[(6, 3), uint8] */;
    %487 = reshape(%484, newshape=[108]) /* ty=Tensor[(108), uint8] */;
    %488 = @func_891(%485, %486, %487) /* ty=(Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) */;
    %489 = %481.2;
    %490 = %488.1;
    (%489, %490, %var_1373, %var_1374, %var_1375)
  };
  %491(%var_1389, %var_1390, %var_1391) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(6, 2, ?), bool], Tensor[(396), float64], Tensor[(18), uint8], Tensor[(108), uint8]) */
}

def @func_2428() -> (Tensor[(6, 2, 1), float64],) {
  @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_3184(%var_3177: Tensor[(12, 15, 9), uint8]) -> Tensor[(12, 15, 9), uint8] {
  %492 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %493 = shape_of(%var_3177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_3177, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%494, %495) /* ty=Tensor[(12, 15, 9), uint8] */
}

def @func_4545(%var_4514: Tensor[(6, 2, 12), float32], %var_4536: Tensor[(104), uint32]) -> (Tensor[(6, 2, 12), int64], Tensor[(6, 2, 12), float32], Tensor[(10, 13, 8), uint32], Tensor[(104), uint32]) {
  %496 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
  %499 = cast(%var_4514, dtype="int64") /* ty=Tensor[(6, 2, 12), int64] */;
  %500 = cast(%var_4514, dtype="float32") /* ty=Tensor[(6, 2, 12), float32] */;
  %501 = cast(%var_4536, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %502 = reshape(%501, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %503 = left_shift(%498, %499) /* ty=Tensor[(6, 2, 12), int64] */;
  %504 = log(%500) /* ty=Tensor[(6, 2, 12), float32] */;
  %505 = @func_984(%502) /* ty=Tensor[(10, 13, 8), uint32] */;
  (%503, %504, %505, %var_4536)
}

def @func_6375(%var_6373: Tensor[(1, 90), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 13), bool], Tensor[(3, 2, 15), bool], Tensor[(1, 90), float64]) {
  @func_6372(%var_6373) /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 13), bool], Tensor[(3, 2, 15), bool], Tensor[(1, 90), float64]) */
}

def @func_3250() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  @func_3248() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */
}

def @func_1043(%var_1040: float64, %var_1041: Tensor[(90), float64], %var_1042: Tensor[(6, 2, 10), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 10), uint32]) {
  %519 = fn (%var_1025: float64, %var_1026: Tensor[(90), float64], %var_1032: Tensor[(6, 2, 10), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 10), uint32]) {
    %506 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %507 = cast(%var_1025, dtype="float64") /* ty=float64 */;
    %508 = cast(%var_1026, dtype="float64") /* ty=Tensor[(90), float64] */;
    %509 = reshape(%507, newshape=[]) /* ty=float64 */;
    %510 = reshape(%508, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
    %511 = @func_723() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */;
    %512 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
    %513 = cast(%512, dtype="uint32") /* ty=Tensor[(6, 2, 1), uint32] */;
    %514 = cast(%var_1032, dtype="uint32") /* ty=Tensor[(6, 2, 10), uint32] */;
    %515 = %506.1;
    %516 = @func_535(%509, %510) /* ty=Tensor[(3, 2, 15), bool] */;
    %517 = %511.1;
    %518 = bitwise_or(%513, %514) /* ty=Tensor[(6, 2, 10), uint32] */;
    (%515, %516, %var_1025, %var_1026, %517, %518)
  };
  %519(%var_1040, %var_1041, %var_1042) /* ty=(Tensor[(6, 2, ?), bool], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 10), uint32]) */
}

def @func_3485() -> Tensor[(6, 2, ?), float64] {
  %523 = fn () -> Tensor[(6, 2, ?), float64] {
    %520 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
    %521 = %520.1;
    %522 = cast(%521, dtype="float64") /* ty=Tensor[(6, 2, ?), float64] */;
    atanh(%522) /* ty=Tensor[(6, 2, ?), float64] */
  };
  %523() /* ty=Tensor[(6, 2, ?), float64] */
}

def @func_693() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */
}

def @func_6690(%var_6688: Tensor[(1, 4, 4), int16], %var_6689: Tensor[(180), bool]) -> (Tensor[(10, 4, 4), bool], Tensor[(6, 2, 1), float64], Tensor[(180), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  @func_6686(%var_6688, %var_6689) /* ty=(Tensor[(10, 4, 4), bool], Tensor[(6, 2, 1), float64], Tensor[(180), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_2042() -> (Tensor[(6, 2, 1), float32],) {
  %524 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %525 = %524.1;
  (%525,)
}

def @func_896(%var_893: Tensor[(12, 11, 3), float64], %var_894: Tensor[(6, 3), uint8], %var_895: Tensor[(108), uint8]) -> (Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) {
  @func_891(%var_893, %var_894, %var_895) /* ty=(Tensor[(12, 11, 3), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64], Tensor[(6, 3, 6), float32], Tensor[(6, 3), uint8], Tensor[(108), uint8]) */
}

def @func_6067(%var_6065: Tensor[(180), bool], %var_6066: Tensor[(364), float32]) -> (Tensor[(6, 2, 180), uint32], Tensor[(6, 2, 180), bool], Tensor[(13, 4, 7), float32], Tensor[(364), float32]) {
  @func_6063(%var_6065, %var_6066) /* ty=(Tensor[(6, 2, 180), uint32], Tensor[(6, 2, 180), bool], Tensor[(13, 4, 7), float32], Tensor[(364), float32]) */
}

def @func_1583() -> (Tensor[(6, 2, 1), float32],) {
  %528 = fn () -> (Tensor[(6, 2, 1), float32],) {
    %526 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %527 = %526.0;
    (%527,)
  };
  %528() /* ty=(Tensor[(6, 2, 1), float32],) */
}

def @func_5668() -> Tensor[(6, 2, ?), int16] {
  %529 = fn () -> Tensor[(6, 2, ?), int16] {
    @func_2361() /* ty=Tensor[(6, 2, ?), int16] */
  };
  %529() /* ty=Tensor[(6, 2, ?), int16] */
}

def @func_5906() -> Tensor[(6, 2, 1), float64] {
  %530 = @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %530.0
}

def @func_3142(%var_3140: Tensor[(6, 9, 15), float32]) -> Tensor[(6, 9, 15), float64] {
  @func_3139(%var_3140) /* ty=Tensor[(6, 9, 15), float64] */
}

def @func_2986() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) {
  %542 = fn () -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) {
    %531 = @func_1330() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
    %532 = %531.0;
    %533 = cast(%532, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
    %534 = sinh(%533) /* ty=Tensor[(6, 2, 1), float64] */;
    %535 = cast(%534, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
    %536 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%532, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
    %540 = logical_and(%537, %538) /* ty=Tensor[(6, 2, ?), bool] */;
    %541 = %539.0;
    (%540, %541)
  };
  %542() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float32]) */
}

def @func_2596() -> (Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) {
  %543 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
  %544 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %546 = %543.1;
  %547 = cos(%545) /* ty=Tensor[(13, 15, 8), float32] */;
  (%546, %547)
}

def @func_237() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %548 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %549 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %550 = log2(%548) /* ty=Tensor[(6, 2, 1), float32] */;
  %551 = cosh(%549) /* ty=Tensor[(6, 2, 1), float32] */;
  (%550, %551)
}

def @func_4753() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(1, 180), bool], Tensor[(6, 2, ?), bool]) {
  %552 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 180), bool] */, dtype="bool") /* ty=Tensor[(1, 180), bool] */;
  %553 = reshape(%552, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %554 = @func_2066(%553) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %555 = @func_4148() /* ty=Tensor[(6, 2, ?), bool] */;
  %556 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %557 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %558 = @func_2121() /* ty=Tensor[(13, 15, 8), float64] */;
  %559 = %554.0;
  %560 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%555, %556, %557, %558, %559, meta[relay.Constant][18] /* ty=Tensor[(1, 180), bool] */, %560)
}

def @func_4634() -> Tensor[(6, 2, 1), float32] {
  @func_4632() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_5134() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  %561 = @func_1226() /* ty=Tensor[(6, 2, 1), float64] */;
  %562 = @func_3522() /* ty=Tensor[(6, 2, 1), float32] */;
  (%561, %562)
}

def @func_467() -> Tensor[(6, 2, 1), float64] {
  @func_465() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_2493(%var_2492: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), int64],) {
  %568 = fn (%var_2486: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), int64],) {
    %563 = @func_2019() /* ty=(Tensor[(6, 2, ?), bool],) */;
    %564 = %563.0;
    %565 = cast(%564, dtype="int64") /* ty=Tensor[(6, 2, ?), int64] */;
    %566 = cast(%var_2486, dtype="int64") /* ty=Tensor[(6, 2, 12), int64] */;
    %567 = minimum(%565, %566) /* ty=Tensor[(6, 2, 12), int64] */;
    (%567,)
  };
  %568(%var_2492) /* ty=(Tensor[(6, 2, 12), int64],) */
}

def @func_6372(%var_6370: Tensor[(1, 90), float64]) -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 13), bool], Tensor[(3, 2, 15), bool], Tensor[(1, 90), float64]) {
  %569 = cast(%var_6370, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %570 = reshape(%569, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %571 = @func_2326(%570) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
  %572 = @func_1793() /* ty=Tensor[(6, 2, ?), bool] */;
  %573 = @func_6287() /* ty=Tensor[(6, 2, 13), bool] */;
  %574 = %571.6;
  (%572, %573, %574, %var_6370)
}

def @func_1988() -> (Tensor[(6, 2, 1), float64],) {
  @func_1986() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_1970(%var_1958: Tensor[(13, 15, 8), float64]) -> Tensor[(13, 15, 8), int8] {
  %575 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
  %576 = %575.0;
  %577 = cast(%var_1958, dtype="int8") /* ty=Tensor[(13, 15, 8), int8] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="int8") /* ty=Tensor[(13, 15, 8), int8] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%579, %580) /* ty=Tensor[(13, 15, 8), int8] */
}

def @func_3208() -> Tensor[(6, 2, 1), float64] {
  @func_3206() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_3524() -> Tensor[(6, 2, 1), float32] {
  @func_3522() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_626(%var_624: Tensor[(6, 3, 1), uint8], %var_625: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float32] {
  %585 = fn (%var_614: Tensor[(6, 3, 1), uint8], %var_615: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float32] {
    %581 = cast(%var_614, dtype="uint8") /* ty=Tensor[(6, 3, 1), uint8] */;
    %582 = cast(%var_615, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
    %583 = bitwise_or(%581, %582) /* ty=Tensor[(6, 3, 6), uint8] */;
    %584 = cast(%583, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
    sin(%584) /* ty=Tensor[(6, 3, 6), float32] */
  };
  %585(%var_624, %var_625) /* ty=Tensor[(6, 3, 6), float32] */
}

def @func_2122() -> Tensor[(13, 15, 8), float64] {
  %587 = fn () -> Tensor[(13, 15, 8), float64] {
    %586 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
    %586.0
  };
  %587() /* ty=Tensor[(13, 15, 8), float64] */
}

def @func_1655() -> Tensor[(6, 2, ?), bool] {
  %589 = fn () -> Tensor[(6, 2, ?), bool] {
    %588 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %588.1
  };
  %589() /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_2397(%var_2391: Tensor[(16, 16, 4), int16]) -> (Tensor[(16, 16, 4), int16], Tensor[(16, 16, 4), float64]) {
  %590 = cast(%var_2391, dtype="int16") /* ty=Tensor[(16, 16, 4), int16] */;
  %591 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 4), int16] */, dtype="int16") /* ty=Tensor[(16, 16, 4), int16] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %594 = cast(%var_2391, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
  %595 = right_shift(%592, %593) /* ty=Tensor[(16, 16, 4), int16] */;
  %596 = atan(%594) /* ty=Tensor[(16, 16, 4), float64] */;
  (%595, %596)
}

def @func_5979() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  %600 = fn () -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
    %597 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %598 = @func_4600() /* ty=Tensor[(6, 2, 1), float32] */;
    %599 = %597.1;
    (%598, %599)
  };
  %600() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */
}

def @func_1187() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) {
  %610 = fn () -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) {
    %601 = @func_691() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
    %602 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
    %603 = %602.0;
    %604 = cast(%603, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
    %605 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 52), uint32] */, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
    %606 = reshape(%605, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
    %607 = %601.0;
    %608 = asin(%604) /* ty=Tensor[(6, 2, 1), float32] */;
    %609 = @func_984(%606) /* ty=Tensor[(10, 13, 8), uint32] */;
    (%607, %608, %609, meta[relay.Constant][20] /* ty=Tensor[(2, 52), uint32] */)
  };
  %610() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */
}

def @func_1527() -> Tensor[(6, 2, ?), float32] {
  %611 = @func_1226() /* ty=Tensor[(6, 2, 1), float64] */;
  %612 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %613 = %612.2;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %615 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%611, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%616, %617) /* ty=Tensor[(6, 2, ?), float32] */
}

def @func_465() -> Tensor[(6, 2, 1), float64] {
  %618 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %618.1
}

def @func_5849() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  @func_5847() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */
}

def @func_4208() -> (Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) {
  %632 = fn () -> (Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) {
    %619 = @func_1415() /* ty=Tensor[(14, 11, 6), float64] */;
    %620 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %624 = cast(%619, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
    %625 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 11, 6), float64] */, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %628 = less(%622, %623) /* ty=Tensor[(14, 11, 6), bool] */;
    %629 = maximum(%626, %627) /* ty=Tensor[(14, 11, 6), int8] */;
    %630 = @func_4148() /* ty=Tensor[(6, 2, ?), bool] */;
    %631 = @func_3484() /* ty=Tensor[(6, 2, ?), float64] */;
    (%628, %629, %630, %631)
  };
  %632() /* ty=(Tensor[(14, 11, 6), bool], Tensor[(14, 11, 6), int8], Tensor[(6, 2, ?), bool], Tensor[(6, 2, ?), float64]) */
}

def @func_1276() -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
  %636 = fn () -> (Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) {
    %633 = @func_1139() /* ty=(Tensor[(6, 2, 1), float64],) */;
    %634 = @func_566() /* ty=Tensor[(6, 2, ?), bool] */;
    %635 = %633.0;
    (%634, %635)
  };
  %636() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */
}

def @func_5361(%var_5304: Tensor[(10, 13, 8), uint32]) -> (Tensor[(14, 11, 6), float64], Tensor[(6, 2, ?), bool], Tensor[(26, 4), uint32], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(6, 2, 1), float64], Tensor[(10, 13, 8), uint64], Tensor[(14, 11, 6), int8]) {
  %637 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %638 = cast(meta[relay.Constant][22] /* ty=Tensor[(26, 4), uint32] */, dtype="uint32") /* ty=Tensor[(26, 4), uint32] */;
  %639 = reshape(%638, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), uint32] */;
  %640 = @func_984(%639) /* ty=Tensor[(10, 13, 8), uint32] */;
  %641 = cast(%var_5304, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %645 = @func_4896() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %646 = cast(%640, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %647 = acosh(%646) /* ty=Tensor[(10, 13, 8), float32] */;
  %648 = cast(%var_5304, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %652 = @func_1415() /* ty=Tensor[(14, 11, 6), float64] */;
  %653 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  %654 = %637.0;
  %655 = bitwise_xor(%643, %644) /* ty=Tensor[(10, 13, 8), uint64] */;
  %656 = %645.0;
  %657 = right_shift(%650, %651) /* ty=Tensor[(10, 13, 8), uint64] */;
  %658 = @func_4266() /* ty=Tensor[(14, 11, 6), int8] */;
  (%652, %653, meta[relay.Constant][22] /* ty=Tensor[(26, 4), uint32] */, %654, %655, %656, %657, %658)
}

def @func_1794() -> Tensor[(6, 2, ?), bool] {
  %660 = fn () -> Tensor[(6, 2, ?), bool] {
    %659 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
    %659.1
  };
  %660() /* ty=Tensor[(6, 2, ?), bool] */
}

def @func_987(%var_985: Tensor[(1, 13, 8), uint32]) -> Tensor[(10, 13, 8), uint32] {
  @func_984(%var_985) /* ty=Tensor[(10, 13, 8), uint32] */
}

def @func_5502(%var_5500: Tensor[(1024), int16]) -> (Tensor[(6, 2, ?), bool], Tensor[(16, 16, 4), int16], Tensor[(1024), int16]) {
  @func_5499(%var_5500) /* ty=(Tensor[(6, 2, ?), bool], Tensor[(16, 16, 4), int16], Tensor[(1024), int16]) */
}

def @func_6824(%var_6821: Tensor[(2, 52), uint32]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(2, 52), uint32], Tensor[(90), float64]) {
  %661 = @func_2426() /* ty=(Tensor[(6, 2, 1), float64],) */;
  %662 = cast(%var_6821, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
  %663 = cast(%var_6821, dtype="uint32") /* ty=Tensor[(2, 52), uint32] */;
  %664 = cast(meta[relay.Constant][23] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %665 = reshape(%662, newshape=[104]) /* ty=Tensor[(104), uint32] */;
  %666 = reshape(%663, newshape=[104]) /* ty=Tensor[(104), uint32] */;
  %667 = reshape(%664, newshape=[10, 3, 3]) /* ty=Tensor[(10, 3, 3), float64] */;
  %668 = @func_3422(%665, %666, %667) /* ty=(Tensor[(10, 3, 3), float64], Tensor[(10, 13, 8), uint32], Tensor[(104), bool], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), int16], Tensor[(10, 3, 3), int32]) */;
  %669 = %661.0;
  %670 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %671 = %668.3;
  (%669, %670, %671, %var_6821, meta[relay.Constant][23] /* ty=Tensor[(90), float64] */)
}

def @func_2206(%var_2204: Tensor[(14, 3, 1), uint32], %var_2205: Tensor[(14, 3, 5), uint32]) -> (Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) {
  %691 = fn (%var_2166: Tensor[(14, 3, 1), uint32], %var_2167: Tensor[(14, 3, 5), uint32]) -> (Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) {
    %672 = cast(%var_2166, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
    %673 = cast(%var_2167, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
    %674 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 6), uint8] */, dtype="uint8") /* ty=Tensor[(3, 6), uint8] */;
    %675 = cast(meta[relay.Constant][25] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
    %676 = reshape(%674, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), uint8] */;
    %677 = reshape(%675, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
    %678 = @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */;
    %679 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %680 = cast(%679, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
    %681 = cast(meta[relay.Constant][25] /* ty=Tensor[(108), uint8] */, dtype="bool") /* ty=Tensor[(108), bool] */;
    %682 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 3, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
    %683 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %686 = greater_equal(%672, %673) /* ty=Tensor[(14, 3, 5), bool] */;
    %687 = @func_623(%676, %677) /* ty=Tensor[(6, 3, 6), float32] */;
    %688 = %678.0;
    %689 = greater(%680, %681) /* ty=Tensor[(6, 2, 108), bool] */;
    %690 = minimum(%684, %685) /* ty=Tensor[(14, 3, 5), uint32] */;
    (%686, %687, meta[relay.Constant][24] /* ty=Tensor[(3, 6), uint8] */, %688, %689, %690)
  };
  %691(%var_2204, %var_2205) /* ty=(Tensor[(14, 3, 5), bool], Tensor[(6, 3, 6), float32], Tensor[(3, 6), uint8], Tensor[(6, 2, 1), float32], Tensor[(6, 2, 108), bool], Tensor[(14, 3, 5), uint32]) */
}

def @func_450() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */
}

def @func_5989() -> Tensor[(6, 2, 1), float32] {
  @func_5987() /* ty=Tensor[(6, 2, 1), float32] */
}

def @func_2625(%var_2613: Tensor[(2, 52), uint32]) -> Tensor[(2, 52), bool] {
  %692 = @func_1186() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32], Tensor[(10, 13, 8), uint32], Tensor[(2, 52), uint32]) */;
  %693 = %692.3;
  %694 = cast(%var_2613, dtype="bool") /* ty=Tensor[(2, 52), bool] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(2), int32] */;
  %696 = cast(%693, dtype="bool") /* ty=Tensor[(2, 52), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%696, %697) /* ty=Tensor[(2, 52), bool] */
}

def @func_239() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) {
  @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */
}

def @func_2907(%var_2837: Tensor[(6, 2, 16), float32], %var_2851: Tensor[(48), float64], %var_2892: float64) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 16), bool], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 4), float64], Tensor[(48), float64], Tensor[(6, 2, ?), int16], Tensor[(13, 15, 8), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  %698 = @func_2751() /* ty=Tensor[(6, 2, 1), float32] */;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %700 = cast(%var_2837, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %701 = cast(%698, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %702 = cast(%var_2851, dtype="float64") /* ty=Tensor[(48), float64] */;
  %703 = reshape(%702, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %704 = @func_1883(%703) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
  %705 = @func_2596() /* ty=(Tensor[(6, 2, ?), float64], Tensor[(13, 15, 8), float32]) */;
  %706 = cast(%var_2892, dtype="float64") /* ty=float64 */;
  %707 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %708 = reshape(%706, newshape=[]) /* ty=float64 */;
  %709 = reshape(%707, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
  %710 = @func_448() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) */;
  %711 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
  %712 = less(%699, %700) /* ty=Tensor[(6, 2, 16), bool] */;
  %713 = cos(%701) /* ty=Tensor[(6, 2, 1), float64] */;
  %714 = %704.0;
  %715 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
  %716 = %705.1;
  %717 = @func_535(%708, %709) /* ty=Tensor[(3, 2, 15), bool] */;
  %718 = %710.1;
  (%711, %712, %713, %714, %var_2851, %715, %716, %717, %var_2892, meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, %718)
}

def @func_2164(%var_2162: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  @func_2161(%var_2162) /* ty=(Tensor[(4, 2, 15), float32],) */
}

def @func_1620(%var_1618: float64, %var_1619: Tensor[(6, 2, 1), float64]) -> (Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) {
  @func_1616(%var_1618, %var_1619) /* ty=(Tensor[(6, 2, ?), float32], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64], Tensor[(6, 2, ?), bool]) */
}

def @func_3895(%var_3893: Tensor[(7, 6), uint32], %var_3894: Tensor[(210, 13), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(7, 6), uint32], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(210, 13), bool], Tensor[(12, 15, 9), uint8], Tensor[(1620), uint8]) {
  @func_3891(%var_3893, %var_3894) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(7, 6), uint32], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(210, 13), bool], Tensor[(12, 15, 9), uint8], Tensor[(1620), uint8]) */
}

def @func_2363() -> Tensor[(6, 2, ?), int16] {
  @func_2361() /* ty=Tensor[(6, 2, ?), int16] */
}

def @func_2628(%var_2626: Tensor[(2, 52), uint32]) -> Tensor[(2, 52), bool] {
  @func_2625(%var_2626) /* ty=Tensor[(2, 52), bool] */
}

def @func_6320() -> (Tensor[(6, 2, 1), float64],) {
  @func_6318() /* ty=(Tensor[(6, 2, 1), float64],) */
}

def @func_1347(%var_1346: Tensor[(11, 4, 12), float32]) -> (Tensor[(11, 4, 12), float32],) {
  %722 = fn (%var_1338: Tensor[(11, 4, 12), float32]) -> (Tensor[(11, 4, 12), float32],) {
    %719 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 1), float32] */;
    %720 = cast(%var_1338, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
    %721 = floor_mod(%719, %720) /* ty=Tensor[(11, 4, 12), float32] */;
    (%721,)
  };
  %722(%var_1346) /* ty=(Tensor[(11, 4, 12), float32],) */
}

def @func_984(%var_976: Tensor[(1, 13, 8), uint32]) -> Tensor[(10, 13, 8), uint32] {
  %723 = cast(%var_976, dtype="uint32") /* ty=Tensor[(1, 13, 8), uint32] */;
  %724 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  bitwise_or(%723, %724) /* ty=Tensor[(10, 13, 8), uint32] */
}

def @func_1416() -> Tensor[(14, 11, 6), float64] {
  %726 = fn () -> Tensor[(14, 11, 6), float64] {
    %725 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 6), float64] */;
    sinh(%725) /* ty=Tensor[(14, 11, 6), float64] */
  };
  %726() /* ty=Tensor[(14, 11, 6), float64] */
}

def @func_965() -> Tensor[(6, 2, 1), float64] {
  %727 = fn () -> Tensor[(6, 2, 1), float64] {
    @func_465() /* ty=Tensor[(6, 2, 1), float64] */
  };
  %727() /* ty=Tensor[(6, 2, 1), float64] */
}

def @func_6288() -> Tensor[(6, 2, 13), bool] {
  %731 = fn () -> Tensor[(6, 2, 13), bool] {
    %728 = @func_5906() /* ty=Tensor[(6, 2, 1), float64] */;
    %729 = cast(%728, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
    %730 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 2, 13), float64] */, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
    less(%729, %730) /* ty=Tensor[(6, 2, 13), bool] */
  };
  %731() /* ty=Tensor[(6, 2, 13), bool] */
}

def @func_2480() -> (Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) {
  %747 = fn () -> (Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) {
    %732 = @func_1527() /* ty=Tensor[(6, 2, ?), float32] */;
    %733 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(6, 2, 3), int32] */;
    %734 = cast(%732, dtype="int32") /* ty=Tensor[(6, 2, ?), int32] */;
    %735 = cast(%732, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
    %736 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
    %737 = less(%735, %736) /* ty=Tensor[(6, 2, 3), bool] */;
    %738 = cast(%732, dtype="bool") /* ty=Tensor[(6, 2, ?), bool] */;
    %739 = cast(%737, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
    %740 = greater_equal(%738, %739) /* ty=Tensor[(6, 2, 3), bool] */;
    %741 = cast(%737, dtype="int64") /* ty=Tensor[(6, 2, 3), int64] */;
    %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%740, dtype="int64") /* ty=Tensor[(6, 2, 3), int64] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %745 = subtract(%733, %734) /* ty=Tensor[(6, 2, 3), int32] */;
    %746 = bitwise_xor(%743, %744) /* ty=Tensor[(6, 2, 3), int64] */;
    (%745, %746)
  };
  %747() /* ty=(Tensor[(6, 2, 3), int32], Tensor[(6, 2, 3), int64]) */
}

def @func_3248() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  %748 = @func_1275() /* ty=(Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64]) */;
  %749 = %748.1;
  %750 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %751 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
  (%749, %750, %751)
}

def @func_3854(%var_3853: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) {
  %760 = fn (%var_3837: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) {
    %752 = cast(%var_3837, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
    %753 = cast(meta[relay.Constant][33] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %754 = reshape(%753, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %755 = @func_2326(%754) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */;
    %756 = sqrt(%752) /* ty=Tensor[(14, 5, 4), float32] */;
    %757 = @func_1654() /* ty=Tensor[(6, 2, ?), bool] */;
    %758 = %755.1;
    %759 = @func_465() /* ty=Tensor[(6, 2, 1), float64] */;
    (%756, %757, %758, meta[relay.Constant][33] /* ty=Tensor[(90), float64] */, %759)
  };
  %760(%var_3853) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(6, 2, ?), bool], Tensor[(6, 2, 1), float64], Tensor[(90), float64], Tensor[(6, 2, 1), float64]) */
}

def @func_2515(%var_2508: Tensor[(3, 15, 6), float64]) -> Tensor[(3, 15, 6), float32] {
  %761 = cast(%var_2508, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %762 = log2(%761) /* ty=Tensor[(3, 15, 6), float64] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  atan(%763) /* ty=Tensor[(3, 15, 6), float32] */
}

def @func_2518(%var_2516: Tensor[(3, 15, 6), float64]) -> Tensor[(3, 15, 6), float32] {
  @func_2515(%var_2516) /* ty=Tensor[(3, 15, 6), float32] */
}

def @func_2044() -> (Tensor[(6, 2, 1), float32],) {
  @func_2042() /* ty=(Tensor[(6, 2, 1), float32],) */
}

def @func_2426() -> (Tensor[(6, 2, 1), float64],) {
  %764 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  (%764,)
}

def @func_448() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), bool]) {
  %765 = @func_237() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float32]) */;
  %766 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
  %767 = %766.0;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %769 = sin(%768) /* ty=Tensor[(6, 2, 1), float64] */;
  %770 = cast(%767, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = %765.1;
  %775 = greater_equal(%772, %773) /* ty=Tensor[(6, 2, ?), bool] */;
  (%774, %775)
}

def @func_1139() -> (Tensor[(6, 2, 1), float64],) {
  %776 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
  (%776,)
}

def @func_6063(%var_6022: Tensor[(180), bool], %var_6046: Tensor[(364), float32]) -> (Tensor[(6, 2, 180), uint32], Tensor[(6, 2, 180), bool], Tensor[(13, 4, 7), float32], Tensor[(364), float32]) {
  %777 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %778 = reshape(%777, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), bool] */;
  %779 = @func_2066(%778) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 15), float32]) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %782 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %783 = logical_or(%781, %782) /* ty=Tensor[(6, 2, 180), bool] */;
  %784 = cast(%783, dtype="uint32") /* ty=Tensor[(6, 2, 180), uint32] */;
  %785 = cast(%var_6022, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %786 = @func_1084() /* ty=Tensor[(6, 2, 1), float32] */;
  %787 = cast(%786, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %788 = cast(%var_6022, dtype="bool") /* ty=Tensor[(180), bool] */;
  %789 = cast(%var_6046, dtype="float32") /* ty=Tensor[(364), float32] */;
  %790 = reshape(%789, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %791 = @func_525(%790) /* ty=(Tensor[(13, 4, 7), float32], Tensor[(13, 4, 7), float32]) */;
  %792 = left_shift(%784, %785) /* ty=Tensor[(6, 2, 180), uint32] */;
  %793 = not_equal(%787, %788) /* ty=Tensor[(6, 2, 180), bool] */;
  %794 = %791.0;
  (%792, %793, %794, %var_6046)
}

def @func_2021() -> (Tensor[(6, 2, ?), bool],) {
  @func_2019() /* ty=(Tensor[(6, 2, ?), bool],) */
}

def @func_5735() -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
  %798 = fn () -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) {
    %795 = @func_5134() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
    %796 = %795.1;
    %797 = @func_3206() /* ty=Tensor[(6, 2, 1), float64] */;
    (%796, %797)
  };
  %798() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64]) */
}

def @func_5815() -> (Tensor[(6, 2, ?), int16], Tensor[(270), float64], Tensor[(3, 15, 6), float32]) {
  %805 = fn () -> (Tensor[(6, 2, ?), int16], Tensor[(270), float64], Tensor[(3, 15, 6), float32]) {
    %799 = cast(meta[relay.Constant][34] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %800 = reshape(%799, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
    %801 = @func_2515(%800) /* ty=Tensor[(3, 15, 6), float32] */;
    %802 = cast(%801, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
    %803 = @func_2361() /* ty=Tensor[(6, 2, ?), int16] */;
    %804 = asinh(%802) /* ty=Tensor[(3, 15, 6), float32] */;
    (%803, meta[relay.Constant][34] /* ty=Tensor[(270), float64] */, %804)
  };
  %805() /* ty=(Tensor[(6, 2, ?), int16], Tensor[(270), float64], Tensor[(3, 15, 6), float32]) */
}

def @func_2328(%var_2327: Tensor[(90), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) {
  %822 = fn (%var_2321: Tensor[(90), float64]) -> (Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) {
    %806 = @func_341() /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */;
    %807 = @func_1924() /* ty=(Tensor[(13, 15, 8), float64],) */;
    %808 = @func_1751() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float64]) */;
    %809 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %810 = reshape(%809, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
    %811 = @func_1883(%810) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 1), float32], Tensor[(6, 2, ?), float32]) */;
    %812 = cast(-5.27018f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %813 = cast(%var_2321, dtype="float64") /* ty=Tensor[(90), float64] */;
    %814 = reshape(%812, newshape=[]) /* ty=float64 */;
    %815 = reshape(%813, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float64] */;
    %816 = %806.2;
    %817 = @func_995() /* ty=Tensor[(6, 2, 1), float64] */;
    %818 = %807.0;
    %819 = %808.0;
    %820 = %811.2;
    %821 = @func_535(%814, %815) /* ty=Tensor[(3, 2, 15), bool] */;
    (%816, %817, %818, %819, %820, meta[relay.Constant][35] /* ty=Tensor[(48), float64] */, %821, -5.27018f64 /* ty=float64 */, %var_2321)
  };
  %822(%var_2327) /* ty=(Tensor[(6, 2, 1), float32], Tensor[(6, 2, 1), float64], Tensor[(13, 15, 8), float64], Tensor[(6, 2, 1), float64], Tensor[(6, 2, ?), float32], Tensor[(48), float64], Tensor[(3, 2, 15), bool], float64, Tensor[(90), float64]) */
}

def @func_5071(%var_5069: Tensor[(18), uint8], %var_5070: Tensor[(54, 2), uint8]) -> (Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) {
  @func_5067(%var_5069, %var_5070) /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 3, 6), float32], Tensor[(18), uint8], Tensor[(54, 2), uint8]) */
}

def @func_4549(%var_4547: Tensor[(6, 2, 12), float32], %var_4548: Tensor[(104), uint32]) -> (Tensor[(6, 2, 12), int64], Tensor[(6, 2, 12), float32], Tensor[(10, 13, 8), uint32], Tensor[(104), uint32]) {
  @func_4545(%var_4547, %var_4548) /* ty=(Tensor[(6, 2, 12), int64], Tensor[(6, 2, 12), float32], Tensor[(10, 13, 8), uint32], Tensor[(104), uint32]) */
}

def @func_5136() -> (Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) {
  @func_5134() /* ty=(Tensor[(6, 2, 1), float64], Tensor[(6, 2, 1), float32]) */
}

def @func_6318() -> (Tensor[(6, 2, 1), float64],) {
  %823 = @func_5387() /* ty=Tensor[(6, 2, 1), float64] */;
  (%823,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen372/build/output.py", line 2602, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:11:23] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

