==========mod==========
#[version = "0.0.5"]
def @func_2406() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %0 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %1 = %0.0;
  %2 = @func_1663() /* ty=Tensor[(16, 8, 2), bool] */;
  %3 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  (%1, %2, %3)
}

def @func_4813(%var_4798: Tensor[(16, 8, 2), int32]) -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), uint8]) {
  %4 = @func_1825() /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) */;
  %5 = %4.2;
  %6 = cast(%var_4798, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %10 = mod(%8, %9) /* ty=Tensor[(16, 8, 2), float64] */;
  %11 = cast(%10, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %12 = reshape(%11, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %13 = @func_4269(%12) /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) */;
  %14 = %13.1;
  (%10, %14)
}

def @func_5420(%var_5388: Tensor[(1, 15, 8), float64]) -> (Tensor[(1, 15, 8), float64], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(3, 2, 7), float64], Tensor[(7, 6), uint8]) {
  %15 = cast(%var_5388, dtype="float64") /* ty=Tensor[(1, 15, 8), float64] */;
  %16 = @func_4000() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) */;
  %17 = @func_4976() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(7, 6), uint8] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(7, 6), uint8] */;
  %20 = reshape(%18, newshape=[3, 2, 7]) /* ty=Tensor[(3, 2, 7), uint8] */;
  %21 = reshape(%19, newshape=[3, 2, 7]) /* ty=Tensor[(3, 2, 7), uint8] */;
  %22 = @func_2984(%20, %21) /* ty=(Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) */;
  %23 = sinh(%15) /* ty=Tensor[(1, 15, 8), float64] */;
  %24 = %16.0;
  %25 = %17.0;
  %26 = %22.1;
  (%23, %24, %25, %26, meta[relay.Constant][0] /* ty=Tensor[(7, 6), uint8] */)
}

def @func_3867(%var_3849: Tensor[(4, 2, 5), int32], %var_3850: Tensor[(4, 2, 5), int32]) -> (Tensor[(4, 2, 5), bool], Tensor[(16, 8, 2), bool]) {
  %27 = cast(%var_3850, dtype="int32") /* ty=Tensor[(4, 2, 5), int32] */;
  %28 = shape_of(%var_3849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_3849, dtype="int32") /* ty=Tensor[(4, 2, 5), int32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %31 = minimum(%29, %30) /* ty=Tensor[(4, 2, 5), int32] */;
  %32 = cast(%var_3849, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %37 = greater_equal(%34, %35) /* ty=Tensor[(4, 2, 5), bool] */;
  %38 = %36.1;
  (%37, %38)
}

def @func_347(%var_345: Tensor[(3, 135), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) {
  %39 = cast(%var_345, dtype="float32") /* ty=Tensor[(3, 135), float32] */;
  %40 = reshape(%39, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %41 = @func_140(%40) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %42 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %43 = %41.1;
  (%42, %43, %var_345)
}

def @func_1339(%var_1325: Tensor[(13, 4, 11), bool]) -> (Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) {
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 4, 11), bool] */, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  %45 = shape_of(%var_1325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_1325, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %49 = reshape(%48, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
  %50 = @func_897(%49) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
  %51 = %50.3;
  %52 = cast(%51, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %53 = reshape(%52, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %54 = @func_764(%53) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %55 = logical_or(%46, %47) /* ty=Tensor[(13, 4, 11), bool] */;
  %56 = %54.0;
  (%55, %51, meta[relay.Constant][2] /* ty=Tensor[(144), uint8] */, %56)
}

def @func_1663() -> Tensor[(16, 8, 2), bool] {
  @func_922() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4441(%var_4429: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
  %57 = cast(%var_4429, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
  log(%57) /* ty=Tensor[(11, 5, 9), float64] */
}

def @func_5221(%var_5198: Tensor[(11, 8, 10), float64], %var_5199: Tensor[(11, 8, 10), float64], %var_5205: Tensor[(8, 32), bool], %var_5206: Tensor[(405), float32]) -> (Tensor[(11, 8, 10), float64], Tensor[(16, 8, 2), float32], Tensor[(8, 32), bool], Tensor[(405), float32], Tensor[(16, 8, 2), bool], Tensor[(11, 8, 10), uint32]) {
  %58 = cast(%var_5199, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
  %59 = shape_of(%var_5198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_5198, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = cast(%var_5205, dtype="bool") /* ty=Tensor[(8, 32), bool] */;
  %63 = cast(%var_5206, dtype="float32") /* ty=Tensor[(405), float32] */;
  %64 = reshape(%62, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %65 = reshape(%63, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
  %66 = @func_471(%64, %65) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
  %67 = @func_4791() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 8, 10), float64] */, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %69 = shape_of(%var_5199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_5199, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %72 = divide(%60, %61) /* ty=Tensor[(11, 8, 10), float64] */;
  %73 = %66.3;
  %74 = %67.0;
  %75 = bitwise_or(%70, %71) /* ty=Tensor[(11, 8, 10), uint32] */;
  (%72, %73, %var_5205, %var_5206, %74, %75)
}

def @func_586() -> (Tensor[(16, 8, 2), bool],) {
  %76 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %77 = %76.0;
  (%77,)
}

def @func_555(%var_550: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  %78 = cast(%var_550, dtype="float32") /* ty=Tensor[(405), float32] */;
  %79 = reshape(%78, newshape=[3, 135]) /* ty=Tensor[(3, 135), float32] */;
  %80 = @func_347(%79) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) */;
  %81 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %82 = %80.1;
  (%81, %82, %var_550)
}

def @func_5155() -> (Tensor[(16, 8, 2), float64],) {
  %83 = @func_3910() /* ty=Tensor[(16, 8, 2), float64] */;
  (%83,)
}

def @func_5809(%var_5805: Tensor[(77, 1), float64]) -> (Tensor[(11, 2, 7), float32], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64]) {
  %84 = cast(%var_5805, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %85 = reshape(%84, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %86 = @func_377(%85) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %87 = @func_4075() /* ty=Tensor[(11, 2, 7), float32] */;
  %88 = %86.0;
  (%87, %88, %var_5805)
}

def @func_4481() -> Tensor[(16, 8, 2), bool] {
  %89 = @func_2406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %89.0
}

def @func_2486() -> (Tensor[(16, 8, 2), bool],) {
  %90 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  (%90,)
}

def @func_5554(%var_5551: Tensor[(540), float64]) -> (Tensor[(77, 1), float64], Tensor[(9, 6, 10), float64], Tensor[(540), float64]) {
  %91 = @func_2895() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %94 = cast(%var_5551, dtype="float64") /* ty=Tensor[(540), float64] */;
  %95 = reshape(%94, newshape=[9, 6, 10]) /* ty=Tensor[(9, 6, 10), float64] */;
  %96 = acos(%93) /* ty=Tensor[(77, 1), float64] */;
  %97 = @func_3451(%95) /* ty=Tensor[(9, 6, 10), float64] */;
  (%96, %97, %var_5551)
}

def @func_2048() -> Tensor[(16, 8, 2), bool] {
  @func_1663() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4269(%var_4264: Tensor[(16, 8, 2), bool]) -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) {
  %98 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %99 = @func_1423() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %100 = %99.0;
  %101 = cast(%var_4264, dtype="uint8") /* ty=Tensor[(16, 8, 2), uint8] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="uint8") /* ty=Tensor[(16, 8, 2), uint8] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %105 = %98.0;
  %106 = subtract(%103, %104) /* ty=Tensor[(16, 8, 2), uint8] */;
  (%105, %106)
}

def @func_3927() -> Tensor[(77, 1), float64] {
  %107 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %107.2
}

def @func_3156(%var_3145: Tensor[(9, 10, 2), float64], %var_3150: Tensor[(1512), uint32]) -> (Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) {
  %108 = cast(%var_3145, dtype="float64") /* ty=Tensor[(9, 10, 2), float64] */;
  %109 = cast(%var_3150, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
  %110 = reshape(%109, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint32] */;
  %111 = @func_1219(%110) /* ty=(Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) */;
  %112 = acos(%108) /* ty=Tensor[(9, 10, 2), float64] */;
  %113 = %111.4;
  (%112, %113, %var_3150)
}

def @func_3406() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  %114 = @func_2406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %115 = cast(meta[relay.Constant][4] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %116 = reshape(%115, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %117 = @func_555(%116) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(405), float32] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %119 = rsqrt(%118) /* ty=Tensor[(405), float64] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(405), float32] */;
  %121 = @func_3112() /* ty=Tensor[(16, 8, 2), bool] */;
  %122 = %114.2;
  %123 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
  %124 = %117.1;
  %125 = atanh(%120) /* ty=Tensor[(405), float32] */;
  (%121, %122, %123, %124, %125)
}

def @func_2946(%var_2924: Tensor[(2, 2, 6), uint64]) -> (Tensor[(2, 2, 6), bool], Tensor[(2, 2, 6), float64]) {
  %126 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %127 = cast(%var_2924, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %128 = cast(%var_2924, dtype="float64") /* ty=Tensor[(2, 2, 6), float64] */;
  %129 = less_equal(%126, %127) /* ty=Tensor[(2, 2, 6), bool] */;
  %130 = sigmoid(%128) /* ty=Tensor[(2, 2, 6), float64] */;
  (%129, %130)
}

def @func_5046(%var_5040: Tensor[(5, 7, 4), int64], %var_5041: Tensor[(5, 7, 4), int64]) -> Tensor[(5, 7, 4), int64] {
  %131 = cast(%var_5041, dtype="int64") /* ty=Tensor[(5, 7, 4), int64] */;
  %132 = shape_of(%var_5040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%var_5040, dtype="int64") /* ty=Tensor[(5, 7, 4), int64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%133, %134) /* ty=Tensor[(5, 7, 4), int64] */
}

def @main(%var_5922: Tensor[(15, 9, 3), bool], %var_5963: Tensor[(15, 9, 3), bool], %var_6024: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), bool], Tensor[(1512, 1), uint32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(15, 9, 3), uint64], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), int8], Tensor[(15, 9, 3), int32]) {
  %135 = @func_5765() /* ty=Tensor[(15, 9, 3), bool] */;
  %136 = cast(%var_5922, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %141 = @func_5183() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %142 = cast(%var_5922, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %143 = asinh(%142) /* ty=Tensor[(15, 9, 3), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %145 = exp(%144) /* ty=Tensor[(15, 9, 3), float32] */;
  %146 = cast(%var_5963, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %147 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%135, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = logical_or(%148, %149) /* ty=Tensor[(15, 9, 3), bool] */;
  %151 = cast(%150, dtype="uint64") /* ty=Tensor[(15, 9, 3), uint64] */;
  %152 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%145, dtype="uint64") /* ty=Tensor[(15, 9, 3), uint64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %155 = %141.0;
  %156 = cast(%155, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %157 = reshape(%156, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %158 = @func_3503(%157) /* ty=(Tensor[(16, 8, 2), bool],) */;
  %159 = cast(%145, dtype="int8") /* ty=Tensor[(15, 9, 3), int8] */;
  %160 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%143, dtype="int8") /* ty=Tensor[(15, 9, 3), int8] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %163 = cast(%var_6024, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %164 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%143, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %167 = greater_equal(%138, %139) /* ty=Tensor[(15, 9, 3), bool] */;
  %168 = %140.3;
  %169 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %170 = @func_3910() /* ty=Tensor[(16, 8, 2), float64] */;
  %171 = right_shift(%153, %154) /* ty=Tensor[(15, 9, 3), uint64] */;
  %172 = %158.0;
  %173 = subtract(%161, %162) /* ty=Tensor[(15, 9, 3), int8] */;
  %174 = left_shift(%165, %166) /* ty=Tensor[(15, 9, 3), int32] */;
  (%167, %168, %155, %169, %170, %171, %172, %173, %174)
}

def @func_922() -> Tensor[(16, 8, 2), bool] {
  @func_666() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1423() -> (Tensor[(16, 8, 2), bool],) {
  %175 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %176 = %175.0;
  (%176,)
}

def @func_3112() -> Tensor[(16, 8, 2), bool] {
  %177 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %178 = %177.0;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %180 = atan(%179) /* ty=Tensor[(16, 8, 2), float64] */;
  %181 = cast(%178, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%183, %184) /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3660() -> (Tensor[(16, 8, 2), bool],) {
  %185 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %186 = %185.1;
  (%186,)
}

def @func_4929(%var_4898: Tensor[(77, 13), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(77, 13), uint16]) {
  %187 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
  %189 = cast(%var_4898, dtype="float32") /* ty=Tensor[(77, 13), float32] */;
  %190 = power(%188, %189) /* ty=Tensor[(77, 13), float32] */;
  %191 = cast(%187, dtype="bool") /* ty=Tensor[(77, 1), bool] */;
  %192 = cast(%var_4898, dtype="bool") /* ty=Tensor[(77, 13), bool] */;
  %193 = less_equal(%191, %192) /* ty=Tensor[(77, 13), bool] */;
  %194 = cast(%193, dtype="uint16") /* ty=Tensor[(77, 13), uint16] */;
  %195 = shape_of(%190, dtype="int32") /* ty=Tensor[(2), int32] */;
  %196 = cast(%190, dtype="uint16") /* ty=Tensor[(77, 13), uint16] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %198 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
  %199 = subtract(%196, %197) /* ty=Tensor[(77, 13), uint16] */;
  (%198, %199)
}

def @func_5465() -> Tensor[(16, 8, 2), float32] {
  %200 = @func_1884() /* ty=Tensor[(16, 8, 2), bool] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  asin(%201) /* ty=Tensor[(16, 8, 2), float32] */
}

def @func_3214() -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) {
  %202 = @func_2033() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) */;
  %203 = cast(meta[relay.Constant][6] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %204 = cast(meta[relay.Constant][7] /* ty=Tensor[(1512, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1512, 1), uint32] */;
  %205 = reshape(%203, newshape=[9, 10, 2]) /* ty=Tensor[(9, 10, 2), float64] */;
  %206 = reshape(%204, newshape=[1512]) /* ty=Tensor[(1512), uint32] */;
  %207 = @func_3156(%205, %206) /* ty=(Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) */;
  %208 = %202.1;
  %209 = %207.1;
  (%208, %209, meta[relay.Constant][6] /* ty=Tensor[(180, 1), float64] */, meta[relay.Constant][7] /* ty=Tensor[(1512, 1), uint32] */)
}

def @func_5283(%var_5265: Tensor[(6, 3, 14), float64]) -> (Tensor[(6, 3, 14), bool], Tensor[(11, 2, 7), float64], Tensor[(77), float64]) {
  %210 = cast(%var_5265, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %211 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 3, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 3, 14), float64] */, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %215 = reshape(%214, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %216 = @func_377(%215) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %217 = equal(%212, %213) /* ty=Tensor[(6, 3, 14), bool] */;
  %218 = %216.0;
  (%217, %218, meta[relay.Constant][9] /* ty=Tensor[(77), float64] */)
}

def @func_3643() -> Tensor[(16, 8, 2), bool] {
  @func_1592() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1528() -> (Tensor[(16, 8, 2), bool],) {
  %219 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %220 = %219.0;
  (%220,)
}

def @func_1915() -> (Tensor[(16, 8, 2), bool],) {
  %221 = @func_1884() /* ty=Tensor[(16, 8, 2), bool] */;
  (%221,)
}

def @func_1110(%var_1010: bool, %var_1011: Tensor[(12, 1), bool]) -> (Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) {
  %222 = cast(%var_1010, dtype="bool") /* ty=bool */;
  %223 = cast(%var_1011, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %224 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %225 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %226 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %227 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %229 = acos(%228) /* ty=Tensor[(16, 8, 2), float32] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %231 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 77), float64] */, dtype="float64") /* ty=Tensor[(1, 77), float64] */;
  %232 = reshape(%231, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %233 = @func_377(%232) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %234 = logical_or(%222, %223) /* ty=Tensor[(12, 1), bool] */;
  %235 = %224.0;
  %236 = %225.0;
  %237 = %226.0;
  %238 = acosh(%230) /* ty=Tensor[(16, 8, 2), float64] */;
  %239 = %233.0;
  (%234, %235, %236, %237, %238, %239, meta[relay.Constant][10] /* ty=Tensor[(1, 77), float64] */)
}

def @func_2984(%var_2957: Tensor[(3, 2, 7), uint8], %var_2958: Tensor[(3, 2, 7), uint8]) -> (Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) {
  %240 = cast(%var_2958, dtype="bool") /* ty=Tensor[(3, 2, 7), bool] */;
  %241 = shape_of(%var_2957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_2957, dtype="bool") /* ty=Tensor[(3, 2, 7), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = cast(%var_2957, dtype="float64") /* ty=Tensor[(3, 2, 7), float64] */;
  %245 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
  %246 = less(%242, %243) /* ty=Tensor[(3, 2, 7), bool] */;
  %247 = sqrt(%244) /* ty=Tensor[(3, 2, 7), float64] */;
  %248 = %245.0;
  (%246, %247, %248)
}

def @func_1219(%var_1185: Tensor[(14, 12, 9), uint32]) -> (Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) {
  %249 = cast(%var_1185, dtype="uint32") /* ty=Tensor[(14, 12, 9), uint32] */;
  %250 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(14, 12, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(14, 12, 9), uint32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %253 = cast(%var_1185, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 405), float32] */, dtype="float32") /* ty=Tensor[(1, 405), float32] */;
  %255 = reshape(%254, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %256 = @func_555(%255) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %257 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %258 = bitwise_or(%251, %252) /* ty=Tensor[(14, 12, 9), uint32] */;
  %259 = tan(%253) /* ty=Tensor[(14, 12, 9), float32] */;
  %260 = %256.1;
  %261 = %257.0;
  (%258, %259, %260, meta[relay.Constant][12] /* ty=Tensor[(1, 405), float32] */, %261)
}

def @func_2859() -> (Tensor[(15, 9, 3), float32],) {
  %262 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %265 = sigmoid(%264) /* ty=Tensor[(15, 9, 3), float32] */;
  (%265,)
}

def @func_3478() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %266 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %267 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %268 = %266.0;
  (%267, %268)
}

def @func_316() -> Tensor[(16, 8, 2), bool] {
  %269 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %270 = asinh(%269) /* ty=Tensor[(16, 8, 2), float64] */;
  %271 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %275 = power(%273, %274) /* ty=Tensor[(16, 8, 2), float32] */;
  %276 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %277 = rsqrt(%276) /* ty=Tensor[(16, 8, 2), float64] */;
  %278 = cast(%277, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %279 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%275, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%280, %281) /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_2777(%var_2771: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), uint16],) {
  %282 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %283 = %282.0;
  %284 = cast(%var_2771, dtype="uint16") /* ty=Tensor[(16, 8, 2), uint16] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="uint16") /* ty=Tensor[(16, 8, 2), uint16] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %288 = logical_xor(%286, %287) /* ty=Tensor[(16, 8, 2), uint16] */;
  (%288,)
}

def @func_2291(%var_2265: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
  %289 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %290 = %289.0;
  %291 = cast(%var_2265, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %295 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %297 = left_shift(%293, %294) /* ty=Tensor[(16, 8, 2), int32] */;
  %298 = sqrt(%296) /* ty=Tensor[(16, 8, 2), float32] */;
  %299 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  (%297, %298, %299)
}

def @func_2686() -> (Tensor[(16, 8, 2), bool],) {
  %300 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %301 = %300.1;
  (%301,)
}

def @func_5183() -> (Tensor[(16, 8, 2), bool],) {
  %302 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
  (%302,)
}

def @func_2916() -> Tensor[(16, 8, 2), bool] {
  @func_922() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3282() -> Tensor[(16, 8, 2), bool] {
  @func_1354() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3765() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) {
  %303 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %304 = %303.0;
  %305 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 2), bool] */, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 2), bool] */, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %310 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%304, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %313 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %314 = %313.4;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %316 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%304, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 18), float32] */, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %320 = reshape(%319, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), float32] */;
  %321 = @func_2542(%320) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) */;
  %322 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
  %323 = not_equal(%307, %308) /* ty=Tensor[(16, 8, 2), bool] */;
  %324 = floor_mod(%311, %312) /* ty=Tensor[(16, 8, 2), float32] */;
  %325 = less_equal(%317, %318) /* ty=Tensor[(16, 8, 2), bool] */;
  %326 = %321.0;
  (%322, %323, %324, %325, %326, meta[relay.Constant][15] /* ty=Tensor[(1, 18), float32] */)
}

def @func_4492() -> (Tensor[(5, 6, 5), float32],) {
  %327 = @func_4475() /* ty=Tensor[(5, 6, 5), float32] */;
  (%327,)
}

def @func_2134(%var_2085: Tensor[(16, 8, 2), bool], %var_2091: Tensor[(77), float64], %var_2105: Tensor[(77), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) {
  %328 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %329 = cast(%var_2085, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = cast(%var_2091, dtype="float64") /* ty=Tensor[(77), float64] */;
  %334 = reshape(%333, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %335 = @func_377(%334) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %336 = cast(meta[relay.Constant][16] /* ty=Tensor[(572), bool] */, dtype="bool") /* ty=Tensor[(572), bool] */;
  %337 = reshape(%336, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), bool] */;
  %338 = @func_1339(%337) /* ty=(Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) */;
  %339 = cast(%var_2105, dtype="bool") /* ty=Tensor[(77), bool] */;
  %340 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(1), int32] */;
  %341 = cast(%var_2091, dtype="bool") /* ty=Tensor[(77), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), bool] */;
  %343 = cast(meta[relay.Constant][17] /* ty=Tensor[(77), float64] */, dtype="bool") /* ty=Tensor[(77), bool] */;
  %344 = shape_of(%var_2105, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%var_2105, dtype="bool") /* ty=Tensor[(77), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), bool] */;
  %347 = logical_or(%331, %332) /* ty=Tensor[(16, 8, 2), bool] */;
  %348 = %335.0;
  %349 = %338.2;
  %350 = greater_equal(%341, %342) /* ty=Tensor[(77), bool] */;
  %351 = less_equal(%345, %346) /* ty=Tensor[(77), bool] */;
  %352 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  (%347, %348, %349, meta[relay.Constant][16] /* ty=Tensor[(572), bool] */, %350, %351, %352)
}

def @func_4178() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %353 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
  %354 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  (%353, %354)
}

def @func_1825() -> (Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) {
  %355 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 405), float32] */, dtype="float32") /* ty=Tensor[(1, 405), float32] */;
  %356 = reshape(%355, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %357 = @func_140(%356) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %358 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %359 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %360 = cast(%359, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %361 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%358, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %364 = %357.0;
  %365 = bitwise_xor(%362, %363) /* ty=Tensor[(16, 8, 2), int32] */;
  (%364, meta[relay.Constant][18] /* ty=Tensor[(1, 405), float32] */, %365)
}

def @func_4959() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %366 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %367 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %368 = %366.1;
  %369 = %367.1;
  (%368, %369)
}

def @func_1321(%var_1317: Tensor[(405), float32]) -> (Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) {
  %370 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 2), float32] */;
  %371 = cast(meta[relay.Constant][20] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %372 = cast(%var_1317, dtype="float32") /* ty=Tensor[(405), float32] */;
  %373 = reshape(%371, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %374 = reshape(%372, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
  %375 = @func_471(%373, %374) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
  %376 = cosh(%370) /* ty=Tensor[(12, 10, 2), float32] */;
  %377 = %375.1;
  (%376, %377, meta[relay.Constant][20] /* ty=Tensor[(256), bool] */, %var_1317)
}

def @func_5851() -> (Tensor[(15, 9, 3), float32],) {
  %378 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
  %379 = %378.0;
  (%379,)
}

def @func_5912() -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32]) {
  %380 = @func_4677() /* ty=(Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */;
  %381 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
  %382 = %380.1;
  %383 = %381.0;
  (%382, %383)
}

def @func_4159() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) {
  %384 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %385 = %384.3;
  %386 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
  %387 = cast(%386, dtype="uint64") /* ty=Tensor[(16, 8, 2), uint64] */;
  %388 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%385, dtype="uint64") /* ty=Tensor[(16, 8, 2), uint64] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %391 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
  %392 = minimum(%389, %390) /* ty=Tensor[(16, 8, 2), uint64] */;
  (%391, %392)
}

def @func_3001() -> Tensor[(16, 8, 2), bool] {
  @func_2048() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1725() -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) {
  %393 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %396 = reshape(%395, newshape=[32, 8]) /* ty=Tensor[(32, 8), bool] */;
  %397 = @func_1618(%396) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) */;
  %398 = %397.1;
  %399 = cast(%394, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %401 = cast(%398, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %403 = logical_or(%401, %402) /* ty=Tensor[(32, 8), bool] */;
  %404 = cast(%394, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %405 = shape_of(%398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%398, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %408 = logical_and(%406, %407) /* ty=Tensor[(32, 8), bool] */;
  %409 = cast(%408, dtype="int32") /* ty=Tensor[(32, 8), int32] */;
  %410 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %411 = cast(%403, dtype="int32") /* ty=Tensor[(32, 8), int32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %413 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %414 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %415 = reshape(%413, newshape=[]) /* ty=bool */;
  %416 = reshape(%414, newshape=[12, 1]) /* ty=Tensor[(12, 1), bool] */;
  %417 = @func_1110(%415, %416) /* ty=(Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) */;
  %418 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %419 = bitwise_or(%411, %412) /* ty=Tensor[(32, 8), int32] */;
  %420 = %417.3;
  %421 = %418.0;
  (%419, %420, False /* ty=bool */, meta[relay.Constant][21] /* ty=Tensor[(12, 1), bool] */, %421)
}

def @func_3340(%var_3315: Tensor[(7, 1, 12), float32]) -> (Tensor[(7, 1, 12), float32], Tensor[(16, 8, 2), bool]) {
  %422 = cast(%var_3315, dtype="float32") /* ty=Tensor[(7, 1, 12), float32] */;
  %423 = log10(%422) /* ty=Tensor[(7, 1, 12), float32] */;
  %424 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  (%423, %424)
}

def @func_897(%var_881: Tensor[(9, 8, 2), uint8]) -> (Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) {
  %425 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(9, 8, 2), uint8] */;
  %426 = shape_of(%var_881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_881, dtype="uint8") /* ty=Tensor[(9, 8, 2), uint8] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %429 = cast(meta[relay.Constant][23] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %430 = reshape(%429, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %431 = @func_764(%430) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %432 = right_shift(%427, %428) /* ty=Tensor[(9, 8, 2), uint8] */;
  %433 = %431.0;
  %434 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
  (%432, %433, meta[relay.Constant][23] /* ty=Tensor[(256), bool] */, %434)
}

def @func_5510() -> Tensor[(16, 8, 2), uint64] {
  %435 = @func_4159() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) */;
  %435.1
}

def @func_4791() -> (Tensor[(16, 8, 2), bool],) {
  %436 = @func_4481() /* ty=Tensor[(16, 8, 2), bool] */;
  (%436,)
}

def @func_4976() -> (Tensor[(16, 8, 2), bool],) {
  %437 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %438 = %437.1;
  (%438,)
}

def @func_2542(%var_2499: Tensor[(6, 3, 1), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) {
  %439 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %440 = reshape(%439, newshape=[8, 18]) /* ty=Tensor[(8, 18), uint8] */;
  %441 = @func_2460(%440) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) */;
  %442 = cast(%var_2499, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
  %443 = sinh(%442) /* ty=Tensor[(6, 3, 1), float32] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
  %445 = cast(%443, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
  %446 = cast(%443, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
  %447 = %441.0;
  %448 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %449 = cosh(%444) /* ty=Tensor[(6, 3, 1), float64] */;
  %450 = erf(%445) /* ty=Tensor[(6, 3, 1), float64] */;
  %451 = rsqrt(%446) /* ty=Tensor[(6, 3, 1), float32] */;
  (%447, meta[relay.Constant][24] /* ty=Tensor[(144), uint8] */, %448, %449, %450, %451)
}

def @func_1354() -> Tensor[(16, 8, 2), bool] {
  @func_666() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_5534() -> (Tensor[(16, 8, 2), bool],) {
  %452 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %453 = %452.0;
  (%453,)
}

def @func_1618(%var_1611: Tensor[(32, 8), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) {
  %454 = cast(%var_1611, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %455 = reshape(%454, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %456 = @func_764(%455) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %457 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %458 = atanh(%457) /* ty=Tensor[(2, 12, 10), float64] */;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
  %460 = %456.0;
  %461 = log10(%459) /* ty=Tensor[(2, 12, 10), float32] */;
  (%460, %var_1611, %461)
}

def @func_2605(%var_2590: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(405), float32], Tensor[(405), float32], Tensor[(16, 8, 2), bool]) {
  %462 = @func_2486() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %463 = cast(%var_2590, dtype="float32") /* ty=Tensor[(405), float32] */;
  %464 = reshape(%463, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %465 = @func_1321(%464) /* ty=(Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) */;
  %466 = @func_2486() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %467 = %462.0;
  %468 = %465.3;
  %469 = %466.0;
  (%467, %468, %var_2590, %469)
}

def @func_3611(%var_3595: Tensor[(4, 12, 9), float64], %var_3607: Tensor[(144, 1), uint8]) -> (Tensor[(4, 12, 9), float64], Tensor[(16, 8, 2), bool], Tensor[(144, 1), uint8]) {
  %470 = cast(%var_3595, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
  %471 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %474 = cast(%var_3607, dtype="uint8") /* ty=Tensor[(144, 1), uint8] */;
  %475 = reshape(%474, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
  %476 = @func_897(%475) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
  %477 = multiply(%472, %473) /* ty=Tensor[(4, 12, 9), float64] */;
  %478 = %476.3;
  (%477, %478, %var_3607)
}

def @func_5038() -> Tensor[(16, 8, 2), bool] {
  @func_922() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4000() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) {
  %479 = @func_3112() /* ty=Tensor[(16, 8, 2), bool] */;
  %480 = cast(%479, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %481 = cast(meta[relay.Constant][27] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %482 = reshape(%480, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %483 = reshape(%481, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
  %484 = @func_471(%482, %483) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
  %485 = cast(meta[relay.Constant][28] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %486 = reshape(%485, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %487 = @func_2744(%486) /* ty=(Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) */;
  %488 = cast(meta[relay.Constant][28] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %489 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %490 = %484.3;
  %491 = %487.0;
  %492 = sin(%488) /* ty=Tensor[(77), float64] */;
  (%489, %479, %490, meta[relay.Constant][27] /* ty=Tensor[(405), float32] */, %491, %492)
}

def @func_5626() -> (Tensor[(15, 9, 3), float32],) {
  %493 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
  %494 = %493.0;
  (%494,)
}

def @func_5644(%var_5638: int16, %var_5639: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 11), bool],) {
  %495 = cast(%var_5638, dtype="bool") /* ty=bool */;
  %496 = cast(%var_5639, dtype="bool") /* ty=Tensor[(12, 5, 11), bool] */;
  %497 = not_equal(%495, %496) /* ty=Tensor[(12, 5, 11), bool] */;
  (%497,)
}

def @func_4733(%var_4709: Tensor[(2, 4, 15), float32]) -> (Tensor[(180, 1), float64], Tensor[(2, 4, 15), float32]) {
  %498 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %499 = cast(%var_4709, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
  %500 = tan(%499) /* ty=Tensor[(2, 4, 15), float32] */;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(2, 4, 15), float64] */;
  %502 = erf(%501) /* ty=Tensor[(2, 4, 15), float64] */;
  %503 = cast(%500, dtype="uint16") /* ty=Tensor[(2, 4, 15), uint16] */;
  %504 = shape_of(%var_4709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_4709, dtype="uint16") /* ty=Tensor[(2, 4, 15), uint16] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %507 = minimum(%505, %506) /* ty=Tensor[(2, 4, 15), uint16] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
  %509 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%502, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %512 = %498.2;
  %513 = floor_mod(%510, %511) /* ty=Tensor[(2, 4, 15), float32] */;
  (%512, %513)
}

def @func_2875(%var_2869: Tensor[(2, 15, 8), float32]) -> Tensor[(2, 15, 8), float32] {
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 15, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %515 = shape_of(%var_2869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_2869, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%516, %517) /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_4075() -> Tensor[(11, 2, 7), float32] {
  %518 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %519 = %518.1;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
  log10(%520) /* ty=Tensor[(11, 2, 7), float32] */
}

def @func_3451(%var_3446: Tensor[(9, 6, 10), float64]) -> Tensor[(9, 6, 10), float64] {
  %521 = cast(%var_3446, dtype="float64") /* ty=Tensor[(9, 6, 10), float64] */;
  sinh(%521) /* ty=Tensor[(9, 6, 10), float64] */
}

def @func_1949(%var_1941: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float64],) {
  %522 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
  %523 = %522.0;
  %524 = cast(%var_1941, dtype="float64") /* ty=Tensor[(15, 9, 3), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(15, 9, 3), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = divide(%526, %527) /* ty=Tensor[(15, 9, 3), float64] */;
  (%528,)
}

def @func_5006() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), uint8]) {
  %529 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %531 = reshape(%530, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %532 = @func_4269(%531) /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) */;
  %533 = %532.1;
  (%529, %533)
}

def @func_3503(%var_3491: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), bool],) {
  %534 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
  %535 = cast(%var_3491, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = equal(%537, %538) /* ty=Tensor[(16, 8, 2), bool] */;
  (%539,)
}

def @func_2828() -> (Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %540 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %541 = %540.2;
  %542 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %543 = cast(%541, dtype="float64") /* ty=float64 */;
  %544 = cast(%542, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %545 = cast(%542, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %546 = cast(meta[relay.Constant][30] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %547 = cast(meta[relay.Constant][30] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %548 = reshape(%545, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %549 = reshape(%546, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %550 = reshape(%547, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %551 = @func_2134(%548, %549, %550) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) */;
  %552 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %553 = maximum(%543, %544) /* ty=Tensor[(16, 8, 2), float64] */;
  %554 = %551.1;
  %555 = %552.0;
  (%553, %554, meta[relay.Constant][30] /* ty=Tensor[(77, 1), float64] */, %555)
}

def @func_2168() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %556 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %557 = @func_1663() /* ty=Tensor[(16, 8, 2), bool] */;
  (%556, %557)
}

def @func_2033() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) {
  %558 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %559 = %558.0;
  %560 = cast(%559, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %561 = reshape(%560, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %562 = @func_764(%561) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %563 = %562.1;
  (%559, %563)
}

def @func_1575() -> (Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) {
  %564 = cast(meta[relay.Constant][31] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %565 = reshape(%564, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %566 = @func_140(%565) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %567 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %569 = %566.1;
  %570 = sigmoid(%568) /* ty=Tensor[(16, 8, 2), float64] */;
  (%569, meta[relay.Constant][31] /* ty=Tensor[(405), float32] */, %570)
}

def @func_4405() -> Tensor[(16, 8, 2), bool] {
  %571 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %571.4
}

def @func_5096(%var_5092: Tensor[(10, 4, 14), float32]) -> Tensor[(10, 4, 14), float32] {
  %572 = cast(%var_5092, dtype="float32") /* ty=Tensor[(10, 4, 14), float32] */;
  log(%572) /* ty=Tensor[(10, 4, 14), float32] */
}

def @func_4981() -> Tensor[(16, 8, 2), bool] {
  @func_1663() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4500() -> (Tensor[(16, 8, 2), float32],) {
  %573 = @func_3765() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) */;
  %574 = %573.2;
  (%574,)
}

def @func_377(%var_363: Tensor[(11, 1, 7), float64]) -> (Tensor[(11, 2, 7), float64],) {
  %575 = cast(%var_363, dtype="float64") /* ty=Tensor[(11, 1, 7), float64] */;
  %576 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %577 = divide(%575, %576) /* ty=Tensor[(11, 2, 7), float64] */;
  (%577,)
}

def @func_5839() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %578 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %579 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %580 = %578.0;
  %581 = %579.1;
  (%580, %581)
}

def @func_140(%var_88: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) {
  %582 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %583 = tan(%582) /* ty=Tensor[(15, 9, 3), float32] */;
  %584 = cast(%var_88, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %588 = cast(%583, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %589 = bitwise_and(%586, %587) /* ty=Tensor[(15, 9, 3), uint32] */;
  %590 = acosh(%588) /* ty=Tensor[(15, 9, 3), float32] */;
  (%589, %590)
}

def @func_3808() -> Tensor[(16, 8, 2), bool] {
  %591 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %591.0
}

def @func_3910() -> Tensor[(16, 8, 2), float64] {
  %592 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  log2(%594) /* ty=Tensor[(16, 8, 2), float64] */
}

def @func_2744(%var_2705: Tensor[(77), float64]) -> (Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) {
  %595 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %598 = cast(%var_2705, dtype="float64") /* ty=Tensor[(77), float64] */;
  %599 = cast(%var_2705, dtype="float64") /* ty=Tensor[(77), float64] */;
  %600 = reshape(%597, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %601 = reshape(%598, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %602 = reshape(%599, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %603 = @func_2134(%600, %601, %602) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) */;
  %604 = %603.5;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(77), float32] */;
  %606 = shape_of(%var_2705, dtype="int32") /* ty=Tensor[(1), int32] */;
  %607 = cast(%var_2705, dtype="float32") /* ty=Tensor[(77), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?), float32] */;
  %609 = cast(%604, dtype="float32") /* ty=Tensor[(77), float32] */;
  %610 = cast(%596, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %611 = atanh(%610) /* ty=Tensor[(16, 8, 2), float32] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %613 = cast(%var_2705, dtype="float32") /* ty=Tensor[(77), float32] */;
  %614 = power(%607, %608) /* ty=Tensor[(77), float32] */;
  %615 = sinh(%609) /* ty=Tensor[(77), float32] */;
  %616 = cos(%612) /* ty=Tensor[(16, 8, 2), float32] */;
  %617 = atanh(%613) /* ty=Tensor[(77), float32] */;
  (%614, %615, %616, %617)
}

def @func_5603() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(18), float32]) {
  %618 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %619 = @func_5534() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %620 = cast(meta[relay.Constant][33] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %621 = reshape(%620, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), float32] */;
  %622 = @func_2542(%621) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) */;
  %623 = %618.1;
  %624 = %619.0;
  %625 = %622.2;
  (%623, %624, %625, meta[relay.Constant][33] /* ty=Tensor[(18), float32] */)
}

def @func_764(%var_756: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) {
  %626 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
  %627 = cast(%var_756, dtype="int64") /* ty=Tensor[(16, 8, 2), int64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="int64") /* ty=Tensor[(16, 8, 2), int64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %631 = cast(%var_756, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %632 = right_shift(%629, %630) /* ty=Tensor[(16, 8, 2), int64] */;
  %633 = exp(%631) /* ty=Tensor[(16, 8, 2), float64] */;
  (%632, %633)
}

def @func_4677() -> (Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
  %634 = @func_4500() /* ty=(Tensor[(16, 8, 2), float32],) */;
  %635 = %634.0;
  %636 = @func_3282() /* ty=Tensor[(16, 8, 2), bool] */;
  (%635, %636)
}

def @func_2460(%var_2427: Tensor[(8, 18), uint8]) -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) {
  %637 = cast(%var_2427, dtype="uint8") /* ty=Tensor[(8, 18), uint8] */;
  %638 = reshape(%637, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
  %639 = @func_897(%638) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
  %640 = cast(%var_2427, dtype="float32") /* ty=Tensor[(8, 18), float32] */;
  %641 = erf(%640) /* ty=Tensor[(8, 18), float32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(8, 18), float32] */;
  %643 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %644 = %639.1;
  %645 = rsqrt(%642) /* ty=Tensor[(8, 18), float32] */;
  (%643, %644, %645)
}

def @func_2895() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %646 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %647 = @func_2033() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) */;
  %648 = %646.2;
  %649 = %647.0;
  (%648, %649)
}

def @func_4622() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %650 = @func_3660() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %651 = %650.0;
  %652 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
  (%651, %652)
}

def @func_471(%var_428: Tensor[(16, 8, 2), bool], %var_446: Tensor[(405, 1), float32]) -> (Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) {
  %653 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %654 = cast(%var_428, dtype="uint32") /* ty=Tensor[(16, 8, 2), uint32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="uint32") /* ty=Tensor[(16, 8, 2), uint32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %658 = cast(%var_446, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %659 = reshape(%658, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %660 = @func_140(%659) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %661 = cast(%var_428, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %662 = %660.1;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %664 = reshape(%663, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %665 = @func_140(%664) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %666 = bitwise_or(%656, %657) /* ty=Tensor[(16, 8, 2), uint32] */;
  %667 = erf(%661) /* ty=Tensor[(16, 8, 2), float32] */;
  %668 = %665.0;
  (%666, %662, %var_446, %667, %668)
}

def @func_666() -> Tensor[(16, 8, 2), bool] {
  %669 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %669.0
}

def @func_1592() -> Tensor[(16, 8, 2), bool] {
  @func_316() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4086() -> (Tensor[(16, 8, 2), bool],) {
  %670 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %671 = %670.1;
  (%671,)
}

def @func_569() -> (Tensor[(16, 8, 2), bool],) {
  %672 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  (%672,)
}

def @func_5765() -> Tensor[(15, 9, 3), bool] {
  %673 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
  %674 = %673.0;
  %675 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%677, %678) /* ty=Tensor[(15, 9, 3), bool] */
}

def @func_3076(%var_3065: Tensor[(15, 1, 15), int8], %var_3066: Tensor[(15, 12, 15), int8], %var_3074: Tensor[(256), bool]) -> (Tensor[(15, 12, 15), int8], Tensor[(15, 12, 15), float32], Tensor[(16, 8, 2), int32], Tensor[(256), bool]) {
  %679 = cast(%var_3065, dtype="int8") /* ty=Tensor[(15, 1, 15), int8] */;
  %680 = cast(%var_3066, dtype="int8") /* ty=Tensor[(15, 12, 15), int8] */;
  %681 = cast(%var_3066, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %682 = cast(%var_3074, dtype="bool") /* ty=Tensor[(256), bool] */;
  %683 = reshape(%682, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %684 = @func_2291(%683) /* ty=(Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */;
  %685 = bitwise_xor(%679, %680) /* ty=Tensor[(15, 12, 15), int8] */;
  %686 = sin(%681) /* ty=Tensor[(15, 12, 15), float32] */;
  %687 = %684.0;
  (%685, %686, %687, %var_3074)
}

def @func_4475() -> Tensor[(5, 6, 5), float32] {
  %688 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 5), float32] */;
  sinh(%688) /* ty=Tensor[(5, 6, 5), float32] */
}

def @func_1884() -> Tensor[(16, 8, 2), bool] {
  %689 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %689.0
}

def @func_4108() -> Tensor[(16, 8, 2), bool] {
  %690 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %690.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5812(%var_5810: Tensor[(77, 1), float64]) -> (Tensor[(11, 2, 7), float32], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64]) {
  @func_5809(%var_5810) /* ty=(Tensor[(11, 2, 7), float32], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64]) */
}

def @func_5839() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %0 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %1 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %2 = %0.0;
  %3 = %1.1;
  (%2, %3)
}

def @func_4180() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  @func_4178() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */
}

def @func_3867(%var_3849: Tensor[(4, 2, 5), int32], %var_3850: Tensor[(4, 2, 5), int32]) -> (Tensor[(4, 2, 5), bool], Tensor[(16, 8, 2), bool]) {
  %4 = cast(%var_3850, dtype="int32") /* ty=Tensor[(4, 2, 5), int32] */;
  %5 = shape_of(%var_3849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_3849, dtype="int32") /* ty=Tensor[(4, 2, 5), int32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %8 = minimum(%6, %7) /* ty=Tensor[(4, 2, 5), int32] */;
  %9 = cast(%var_3849, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %14 = greater_equal(%11, %12) /* ty=Tensor[(4, 2, 5), bool] */;
  %15 = %13.1;
  (%14, %15)
}

def @func_5766() -> Tensor[(15, 9, 3), bool] {
  %22 = fn () -> Tensor[(15, 9, 3), bool] {
    %16 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
    %17 = %16.0;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
    %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
    %20 = cast(%17, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
    %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%20, %21) /* ty=Tensor[(15, 9, 3), bool] */
  };
  %22() /* ty=Tensor[(15, 9, 3), bool] */
}

def @func_1826() -> (Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) {
  %34 = fn () -> (Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) {
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 405), float32] */, dtype="float32") /* ty=Tensor[(1, 405), float32] */;
    %24 = reshape(%23, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
    %25 = @func_140(%24) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
    %26 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
    %27 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
    %28 = cast(%27, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
    %29 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%26, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %32 = %25.0;
    %33 = bitwise_xor(%30, %31) /* ty=Tensor[(16, 8, 2), int32] */;
    (%32, meta[relay.Constant][1] /* ty=Tensor[(1, 405), float32] */, %33)
  };
  %34() /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) */
}

def @func_471(%var_428: Tensor[(16, 8, 2), bool], %var_446: Tensor[(405, 1), float32]) -> (Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) {
  %35 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %36 = cast(%var_428, dtype="uint32") /* ty=Tensor[(16, 8, 2), uint32] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="uint32") /* ty=Tensor[(16, 8, 2), uint32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %40 = cast(%var_446, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %41 = reshape(%40, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %42 = @func_140(%41) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %43 = cast(%var_428, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %44 = %42.1;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %46 = reshape(%45, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %47 = @func_140(%46) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %48 = bitwise_or(%38, %39) /* ty=Tensor[(16, 8, 2), uint32] */;
  %49 = erf(%43) /* ty=Tensor[(16, 8, 2), float32] */;
  %50 = %47.0;
  (%48, %44, %var_446, %49, %50)
}

def @func_897(%var_881: Tensor[(9, 8, 2), uint8]) -> (Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) {
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(9, 8, 2), uint8] */;
  %52 = shape_of(%var_881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_881, dtype="uint8") /* ty=Tensor[(9, 8, 2), uint8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %56 = reshape(%55, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %57 = @func_764(%56) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %58 = right_shift(%53, %54) /* ty=Tensor[(9, 8, 2), uint8] */;
  %59 = %57.0;
  %60 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
  (%58, %59, meta[relay.Constant][3] /* ty=Tensor[(256), bool] */, %60)
}

def @func_1915() -> (Tensor[(16, 8, 2), bool],) {
  %61 = @func_1884() /* ty=Tensor[(16, 8, 2), bool] */;
  (%61,)
}

def @func_764(%var_756: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) {
  %62 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
  %63 = cast(%var_756, dtype="int64") /* ty=Tensor[(16, 8, 2), int64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="int64") /* ty=Tensor[(16, 8, 2), int64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %67 = cast(%var_756, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %68 = right_shift(%65, %66) /* ty=Tensor[(16, 8, 2), int64] */;
  %69 = exp(%67) /* ty=Tensor[(16, 8, 2), float64] */;
  (%68, %69)
}

def @func_4493() -> (Tensor[(5, 6, 5), float32],) {
  %71 = fn () -> (Tensor[(5, 6, 5), float32],) {
    %70 = @func_4475() /* ty=Tensor[(5, 6, 5), float32] */;
    (%70,)
  };
  %71() /* ty=(Tensor[(5, 6, 5), float32],) */
}

def @func_4624() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  @func_4622() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_2033() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) {
  %72 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %75 = reshape(%74, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %76 = @func_764(%75) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %77 = %76.1;
  (%73, %77)
}

def @func_1114(%var_1112: bool, %var_1113: Tensor[(12, 1), bool]) -> (Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) {
  @func_1110(%var_1112, %var_1113) /* ty=(Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) */
}

def @main(%var_5922: Tensor[(15, 9, 3), bool], %var_5963: Tensor[(15, 9, 3), bool], %var_6024: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), bool], Tensor[(1512, 1), uint32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(15, 9, 3), uint64], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), int8], Tensor[(15, 9, 3), int32]) {
  %78 = @func_5765() /* ty=Tensor[(15, 9, 3), bool] */;
  %79 = cast(%var_5922, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = @func_3216() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %84 = @func_5184() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %85 = cast(%var_5922, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %86 = asinh(%85) /* ty=Tensor[(15, 9, 3), float32] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %88 = exp(%87) /* ty=Tensor[(15, 9, 3), float32] */;
  %89 = cast(%var_5963, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %90 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%78, dtype="bool") /* ty=Tensor[(15, 9, 3), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = logical_or(%91, %92) /* ty=Tensor[(15, 9, 3), bool] */;
  %94 = cast(%93, dtype="uint64") /* ty=Tensor[(15, 9, 3), uint64] */;
  %95 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%88, dtype="uint64") /* ty=Tensor[(15, 9, 3), uint64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %98 = @func_5183() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %101 = reshape(%100, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %102 = @func_3505(%101) /* ty=(Tensor[(16, 8, 2), bool],) */;
  %103 = cast(%88, dtype="int8") /* ty=Tensor[(15, 9, 3), int8] */;
  %104 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%86, dtype="int8") /* ty=Tensor[(15, 9, 3), int8] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %107 = cast(%var_6024, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %108 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%86, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %111 = greater_equal(%81, %82) /* ty=Tensor[(15, 9, 3), bool] */;
  %112 = %83.3;
  %113 = %84.0;
  %114 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %115 = @func_3910() /* ty=Tensor[(16, 8, 2), float64] */;
  %116 = right_shift(%96, %97) /* ty=Tensor[(15, 9, 3), uint64] */;
  %117 = %102.0;
  %118 = subtract(%105, %106) /* ty=Tensor[(15, 9, 3), int8] */;
  %119 = left_shift(%109, %110) /* ty=Tensor[(15, 9, 3), int32] */;
  (%111, %112, %113, %114, %115, %116, %117, %118, %119)
}

def @func_347(%var_345: Tensor[(3, 135), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) {
  %120 = cast(%var_345, dtype="float32") /* ty=Tensor[(3, 135), float32] */;
  %121 = reshape(%120, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
  %122 = @func_140(%121) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
  %123 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %124 = %122.1;
  (%123, %124, %var_345)
}

def @func_5006() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), uint8]) {
  %125 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %126 = cast(%125, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %127 = reshape(%126, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %128 = @func_4269(%127) /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) */;
  %129 = %128.1;
  (%125, %129)
}

def @func_4406() -> Tensor[(16, 8, 2), bool] {
  %131 = fn () -> Tensor[(16, 8, 2), bool] {
    %130 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
    %130.4
  };
  %131() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_475(%var_473: Tensor[(16, 8, 2), bool], %var_474: Tensor[(405, 1), float32]) -> (Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) {
  @func_471(%var_473, %var_474) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */
}

def @func_4960() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %136 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
    %132 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
    %133 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
    %134 = %132.1;
    %135 = %133.1;
    (%134, %135)
  };
  %136() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_571() -> (Tensor[(16, 8, 2), bool],) {
  @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_5644(%var_5638: int16, %var_5639: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 11), bool],) {
  %137 = cast(%var_5638, dtype="bool") /* ty=bool */;
  %138 = cast(%var_5639, dtype="bool") /* ty=Tensor[(12, 5, 11), bool] */;
  %139 = not_equal(%137, %138) /* ty=Tensor[(12, 5, 11), bool] */;
  (%139,)
}

def @func_4087() -> (Tensor[(16, 8, 2), bool],) {
  %142 = fn () -> (Tensor[(16, 8, 2), bool],) {
    %140 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
    %141 = %140.1;
    (%141,)
  };
  %142() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_1339(%var_1325: Tensor[(13, 4, 11), bool]) -> (Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) {
  %143 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 4, 11), bool] */, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  %144 = shape_of(%var_1325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_1325, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %148 = reshape(%147, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
  %149 = @func_897(%148) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
  %150 = %149.3;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %152 = reshape(%151, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %153 = @func_764(%152) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %154 = logical_or(%145, %146) /* ty=Tensor[(13, 4, 11), bool] */;
  %155 = %153.0;
  (%154, %150, meta[relay.Constant][5] /* ty=Tensor[(144), uint8] */, %155)
}

def @func_2035() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) {
  @func_2033() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) */
}

def @func_588() -> (Tensor[(16, 8, 2), bool],) {
  @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_3660() -> (Tensor[(16, 8, 2), bool],) {
  %156 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
  %157 = %156.1;
  (%157,)
}

def @func_350(%var_348: Tensor[(3, 135), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) {
  @func_347(%var_348) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) */
}

def @func_1727() -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) {
  @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_3927() -> Tensor[(77, 1), float64] {
  %158 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %158.2
}

def @func_2917() -> Tensor[(16, 8, 2), bool] {
  %159 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_922() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %159() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_5648(%var_5646: int16, %var_5647: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 11), bool],) {
  @func_5644(%var_5646, %var_5647) /* ty=(Tensor[(12, 5, 11), bool],) */
}

def @func_2860() -> (Tensor[(15, 9, 3), float32],) {
  %164 = fn () -> (Tensor[(15, 9, 3), float32],) {
    %160 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
    %161 = %160.0;
    %162 = cast(%161, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
    %163 = sigmoid(%162) /* ty=Tensor[(15, 9, 3), float32] */;
    (%163,)
  };
  %164() /* ty=(Tensor[(15, 9, 3), float32],) */
}

def @func_3478() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %165 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %166 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %167 = %165.0;
  (%166, %167)
}

def @func_1110(%var_1010: bool, %var_1011: Tensor[(12, 1), bool]) -> (Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) {
  %168 = cast(%var_1010, dtype="bool") /* ty=bool */;
  %169 = cast(%var_1011, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %170 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %171 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %172 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %173 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  %174 = cast(%173, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %175 = acos(%174) /* ty=Tensor[(16, 8, 2), float32] */;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
  %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 77), float64] */, dtype="float64") /* ty=Tensor[(1, 77), float64] */;
  %178 = reshape(%177, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %179 = @func_377(%178) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %180 = logical_or(%168, %169) /* ty=Tensor[(12, 1), bool] */;
  %181 = %170.0;
  %182 = %171.0;
  %183 = %172.0;
  %184 = acosh(%176) /* ty=Tensor[(16, 8, 2), float64] */;
  %185 = %179.0;
  (%180, %181, %182, %183, %184, %185, meta[relay.Constant][6] /* ty=Tensor[(1, 77), float64] */)
}

def @func_1917() -> (Tensor[(16, 8, 2), bool],) {
  @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_558(%var_556: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  @func_555(%var_556) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */
}

def @func_1949(%var_1941: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float64],) {
  %186 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
  %187 = %186.0;
  %188 = cast(%var_1941, dtype="float64") /* ty=Tensor[(15, 9, 3), float64] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="float64") /* ty=Tensor[(15, 9, 3), float64] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %192 = divide(%190, %191) /* ty=Tensor[(15, 9, 3), float64] */;
  (%192,)
}

def @func_3929() -> Tensor[(77, 1), float64] {
  @func_3927() /* ty=Tensor[(77, 1), float64] */
}

def @func_1355() -> Tensor[(16, 8, 2), bool] {
  %193 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_666() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %193() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1665() -> Tensor[(16, 8, 2), bool] {
  @func_1663() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4483() -> Tensor[(16, 8, 2), bool] {
  @func_4481() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4929(%var_4898: Tensor[(77, 13), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(77, 13), uint16]) {
  %194 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(77, 1), float32] */;
  %196 = cast(%var_4898, dtype="float32") /* ty=Tensor[(77, 13), float32] */;
  %197 = power(%195, %196) /* ty=Tensor[(77, 13), float32] */;
  %198 = cast(%194, dtype="bool") /* ty=Tensor[(77, 1), bool] */;
  %199 = cast(%var_4898, dtype="bool") /* ty=Tensor[(77, 13), bool] */;
  %200 = less_equal(%198, %199) /* ty=Tensor[(77, 13), bool] */;
  %201 = cast(%200, dtype="uint16") /* ty=Tensor[(77, 13), uint16] */;
  %202 = shape_of(%197, dtype="int32") /* ty=Tensor[(2), int32] */;
  %203 = cast(%197, dtype="uint16") /* ty=Tensor[(77, 13), uint16] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %205 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
  %206 = subtract(%203, %204) /* ty=Tensor[(77, 13), uint16] */;
  (%205, %206)
}

def @func_4272(%var_4270: Tensor[(16, 8, 2), bool]) -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) {
  @func_4269(%var_4270) /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) */
}

def @func_2877(%var_2876: Tensor[(2, 15, 8), float32]) -> Tensor[(2, 15, 8), float32] {
  %211 = fn (%var_2869: Tensor[(2, 15, 8), float32]) -> Tensor[(2, 15, 8), float32] {
    %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 15, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
    %208 = shape_of(%var_2869, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%var_2869, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%209, %210) /* ty=Tensor[(2, 15, 8), float32] */
  };
  %211(%var_2876) /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_3081(%var_3078: Tensor[(15, 1, 15), int8], %var_3079: Tensor[(15, 12, 15), int8], %var_3080: Tensor[(256), bool]) -> (Tensor[(15, 12, 15), int8], Tensor[(15, 12, 15), float32], Tensor[(16, 8, 2), int32], Tensor[(256), bool]) {
  @func_3076(%var_3078, %var_3079, %var_3080) /* ty=(Tensor[(15, 12, 15), int8], Tensor[(15, 12, 15), float32], Tensor[(16, 8, 2), int32], Tensor[(256), bool]) */
}

def @func_4269(%var_4264: Tensor[(16, 8, 2), bool]) -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) {
  %212 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
  %213 = @func_1423() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %214 = %213.0;
  %215 = cast(%var_4264, dtype="uint8") /* ty=Tensor[(16, 8, 2), uint8] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="uint8") /* ty=Tensor[(16, 8, 2), uint8] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %219 = %212.0;
  %220 = subtract(%217, %218) /* ty=Tensor[(16, 8, 2), uint8] */;
  (%219, %220)
}

def @func_5008() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), uint8]) {
  @func_5006() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), uint8]) */
}

def @func_4983() -> Tensor[(16, 8, 2), bool] {
  @func_4981() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_2746(%var_2745: Tensor[(77), float64]) -> (Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) {
  %244 = fn (%var_2705: Tensor[(77), float64]) -> (Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) {
    %221 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %222 = %221.0;
    %223 = cast(%222, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %224 = cast(%var_2705, dtype="float64") /* ty=Tensor[(77), float64] */;
    %225 = cast(%var_2705, dtype="float64") /* ty=Tensor[(77), float64] */;
    %226 = reshape(%223, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %227 = reshape(%224, newshape=[77]) /* ty=Tensor[(77), float64] */;
    %228 = reshape(%225, newshape=[77]) /* ty=Tensor[(77), float64] */;
    %229 = @func_2134(%226, %227, %228) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) */;
    %230 = %229.5;
    %231 = cast(%230, dtype="float32") /* ty=Tensor[(77), float32] */;
    %232 = shape_of(%var_2705, dtype="int32") /* ty=Tensor[(1), int32] */;
    %233 = cast(%var_2705, dtype="float32") /* ty=Tensor[(77), float32] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?), float32] */;
    %235 = cast(%230, dtype="float32") /* ty=Tensor[(77), float32] */;
    %236 = cast(%222, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %237 = atanh(%236) /* ty=Tensor[(16, 8, 2), float32] */;
    %238 = cast(%237, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %239 = cast(%var_2705, dtype="float32") /* ty=Tensor[(77), float32] */;
    %240 = power(%233, %234) /* ty=Tensor[(77), float32] */;
    %241 = sinh(%235) /* ty=Tensor[(77), float32] */;
    %242 = cos(%238) /* ty=Tensor[(16, 8, 2), float32] */;
    %243 = atanh(%239) /* ty=Tensor[(77), float32] */;
    (%240, %241, %242, %243)
  };
  %244(%var_2745) /* ty=(Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) */
}

def @func_1884() -> Tensor[(16, 8, 2), bool] {
  %245 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %245.0
}

def @func_1886() -> Tensor[(16, 8, 2), bool] {
  @func_1884() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_380(%var_378: Tensor[(11, 1, 7), float64]) -> (Tensor[(11, 2, 7), float64],) {
  @func_377(%var_378) /* ty=(Tensor[(11, 2, 7), float64],) */
}

def @func_569() -> (Tensor[(16, 8, 2), bool],) {
  %246 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  (%246,)
}

def @func_2407() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %251 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
    %247 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %248 = %247.0;
    %249 = @func_1663() /* ty=Tensor[(16, 8, 2), bool] */;
    %250 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
    (%248, %249, %250)
  };
  %251() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_3809() -> Tensor[(16, 8, 2), bool] {
  %253 = fn () -> Tensor[(16, 8, 2), bool] {
    %252 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
    %252.0
  };
  %253() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1618(%var_1611: Tensor[(32, 8), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) {
  %254 = cast(%var_1611, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %255 = reshape(%254, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %256 = @func_764(%255) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */;
  %257 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %258 = atanh(%257) /* ty=Tensor[(2, 12, 10), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
  %260 = %256.0;
  %261 = log10(%259) /* ty=Tensor[(2, 12, 10), float32] */;
  (%260, %var_1611, %261)
}

def @func_2291(%var_2265: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
  %262 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %263 = %262.0;
  %264 = cast(%var_2265, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="int32") /* ty=Tensor[(16, 8, 2), int32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %268 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
  %270 = left_shift(%266, %267) /* ty=Tensor[(16, 8, 2), int32] */;
  %271 = sqrt(%269) /* ty=Tensor[(16, 8, 2), float32] */;
  %272 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  (%270, %271, %272)
}

def @func_2780(%var_2778: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), uint16],) {
  @func_2777(%var_2778) /* ty=(Tensor[(16, 8, 2), uint16],) */
}

def @func_4981() -> Tensor[(16, 8, 2), bool] {
  @func_1663() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3406() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  %273 = @func_2406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %274 = cast(meta[relay.Constant][9] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %275 = reshape(%274, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %276 = @func_555(%275) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
  %277 = cast(meta[relay.Constant][9] /* ty=Tensor[(405), float32] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %278 = rsqrt(%277) /* ty=Tensor[(405), float64] */;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(405), float32] */;
  %280 = @func_3112() /* ty=Tensor[(16, 8, 2), bool] */;
  %281 = %273.2;
  %282 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
  %283 = %276.1;
  %284 = atanh(%279) /* ty=Tensor[(405), float32] */;
  (%280, %281, %282, %283, %284)
}

def @func_4735(%var_4734: Tensor[(2, 4, 15), float32]) -> (Tensor[(180, 1), float64], Tensor[(2, 4, 15), float32]) {
  %301 = fn (%var_4709: Tensor[(2, 4, 15), float32]) -> (Tensor[(180, 1), float64], Tensor[(2, 4, 15), float32]) {
    %285 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
    %286 = cast(%var_4709, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
    %287 = tan(%286) /* ty=Tensor[(2, 4, 15), float32] */;
    %288 = cast(%287, dtype="float64") /* ty=Tensor[(2, 4, 15), float64] */;
    %289 = erf(%288) /* ty=Tensor[(2, 4, 15), float64] */;
    %290 = cast(%287, dtype="uint16") /* ty=Tensor[(2, 4, 15), uint16] */;
    %291 = shape_of(%var_4709, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%var_4709, dtype="uint16") /* ty=Tensor[(2, 4, 15), uint16] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %294 = minimum(%292, %293) /* ty=Tensor[(2, 4, 15), uint16] */;
    %295 = cast(%294, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
    %296 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%289, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %299 = %285.2;
    %300 = floor_mod(%297, %298) /* ty=Tensor[(2, 4, 15), float32] */;
    (%299, %300)
  };
  %301(%var_4734) /* ty=(Tensor[(180, 1), float64], Tensor[(2, 4, 15), float32]) */
}

def @func_4075() -> Tensor[(11, 2, 7), float32] {
  %302 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %303 = %302.1;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(11, 2, 7), float32] */;
  log10(%304) /* ty=Tensor[(11, 2, 7), float32] */
}

def @func_2948(%var_2947: Tensor[(2, 2, 6), uint64]) -> (Tensor[(2, 2, 6), bool], Tensor[(2, 2, 6), float64]) {
  %310 = fn (%var_2924: Tensor[(2, 2, 6), uint64]) -> (Tensor[(2, 2, 6), bool], Tensor[(2, 2, 6), float64]) {
    %305 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %306 = cast(%var_2924, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
    %307 = cast(%var_2924, dtype="float64") /* ty=Tensor[(2, 2, 6), float64] */;
    %308 = less_equal(%305, %306) /* ty=Tensor[(2, 2, 6), bool] */;
    %309 = sigmoid(%307) /* ty=Tensor[(2, 2, 6), float64] */;
    (%308, %309)
  };
  %310(%var_2947) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(2, 2, 6), float64]) */
}

def @func_2984(%var_2957: Tensor[(3, 2, 7), uint8], %var_2958: Tensor[(3, 2, 7), uint8]) -> (Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) {
  %311 = cast(%var_2958, dtype="bool") /* ty=Tensor[(3, 2, 7), bool] */;
  %312 = shape_of(%var_2957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%var_2957, dtype="bool") /* ty=Tensor[(3, 2, 7), bool] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %315 = cast(%var_2957, dtype="float64") /* ty=Tensor[(3, 2, 7), float64] */;
  %316 = @func_1575() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */;
  %317 = less(%313, %314) /* ty=Tensor[(3, 2, 7), bool] */;
  %318 = sqrt(%315) /* ty=Tensor[(3, 2, 7), float64] */;
  %319 = %316.0;
  (%317, %318, %319)
}

def @func_5627() -> (Tensor[(15, 9, 3), float32],) {
  %322 = fn () -> (Tensor[(15, 9, 3), float32],) {
    %320 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
    %321 = %320.0;
    (%321,)
  };
  %322() /* ty=(Tensor[(15, 9, 3), float32],) */
}

def @func_5913() -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32]) {
  %327 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32]) {
    %323 = @func_4677() /* ty=(Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */;
    %324 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
    %325 = %323.1;
    %326 = %324.0;
    (%325, %326)
  };
  %327() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32]) */
}

def @func_3214() -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) {
  %328 = @func_2033() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) */;
  %329 = cast(meta[relay.Constant][11] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %330 = cast(meta[relay.Constant][12] /* ty=Tensor[(1512, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1512, 1), uint32] */;
  %331 = reshape(%329, newshape=[9, 10, 2]) /* ty=Tensor[(9, 10, 2), float64] */;
  %332 = reshape(%330, newshape=[1512]) /* ty=Tensor[(1512), uint32] */;
  %333 = @func_3156(%331, %332) /* ty=(Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) */;
  %334 = %328.1;
  %335 = %333.1;
  (%334, %335, meta[relay.Constant][11] /* ty=Tensor[(180, 1), float64] */, meta[relay.Constant][12] /* ty=Tensor[(1512, 1), uint32] */)
}

def @func_3614(%var_3612: Tensor[(4, 12, 9), float64], %var_3613: Tensor[(144, 1), uint8]) -> (Tensor[(4, 12, 9), float64], Tensor[(16, 8, 2), bool], Tensor[(144, 1), uint8]) {
  %345 = fn (%var_3595: Tensor[(4, 12, 9), float64], %var_3607: Tensor[(144, 1), uint8]) -> (Tensor[(4, 12, 9), float64], Tensor[(16, 8, 2), bool], Tensor[(144, 1), uint8]) {
    %336 = cast(%var_3595, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
    %337 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(4, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %340 = cast(%var_3607, dtype="uint8") /* ty=Tensor[(144, 1), uint8] */;
    %341 = reshape(%340, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
    %342 = @func_897(%341) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
    %343 = multiply(%338, %339) /* ty=Tensor[(4, 12, 9), float64] */;
    %344 = %342.3;
    (%343, %344, %var_3607)
  };
  %345(%var_3612, %var_3613) /* ty=(Tensor[(4, 12, 9), float64], Tensor[(16, 8, 2), bool], Tensor[(144, 1), uint8]) */
}

def @func_5046(%var_5040: Tensor[(5, 7, 4), int64], %var_5041: Tensor[(5, 7, 4), int64]) -> Tensor[(5, 7, 4), int64] {
  %346 = cast(%var_5041, dtype="int64") /* ty=Tensor[(5, 7, 4), int64] */;
  %347 = shape_of(%var_5040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_5040, dtype="int64") /* ty=Tensor[(5, 7, 4), int64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%348, %349) /* ty=Tensor[(5, 7, 4), int64] */
}

def @func_1621(%var_1619: Tensor[(32, 8), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) {
  @func_1618(%var_1619) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) */
}

def @func_2169() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %352 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
    %350 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
    %351 = @func_1663() /* ty=Tensor[(16, 8, 2), bool] */;
    (%350, %351)
  };
  %352() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_4178() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %353 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
  %354 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  (%353, %354)
}

def @func_4622() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  %355 = @func_3660() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %356 = %355.0;
  %357 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
  (%356, %357)
}

def @func_2294(%var_2292: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
  @func_2291(%var_2292) /* ty=(Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */
}

def @func_4443(%var_4442: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
  %359 = fn (%var_4429: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
    %358 = cast(%var_4429, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
    log(%358) /* ty=Tensor[(11, 5, 9), float64] */
  };
  %359(%var_4442) /* ty=Tensor[(11, 5, 9), float64] */
}

def @func_5841() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  @func_5839() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_3453(%var_3452: Tensor[(9, 6, 10), float64]) -> Tensor[(9, 6, 10), float64] {
  %361 = fn (%var_3446: Tensor[(9, 6, 10), float64]) -> Tensor[(9, 6, 10), float64] {
    %360 = cast(%var_3446, dtype="float64") /* ty=Tensor[(9, 6, 10), float64] */;
    sinh(%360) /* ty=Tensor[(9, 6, 10), float64] */
  };
  %361(%var_3452) /* ty=Tensor[(9, 6, 10), float64] */
}

def @func_3766() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) {
  %386 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) {
    %362 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %363 = %362.0;
    %364 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 2), bool] */, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%363, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %368 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 8, 2), bool] */, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %369 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%363, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %372 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
    %373 = %372.4;
    %374 = cast(%373, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %375 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%363, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %378 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 18), float32] */, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
    %379 = reshape(%378, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), float32] */;
    %380 = @func_2542(%379) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) */;
    %381 = @func_2916() /* ty=Tensor[(16, 8, 2), bool] */;
    %382 = not_equal(%366, %367) /* ty=Tensor[(16, 8, 2), bool] */;
    %383 = floor_mod(%370, %371) /* ty=Tensor[(16, 8, 2), float32] */;
    %384 = less_equal(%376, %377) /* ty=Tensor[(16, 8, 2), bool] */;
    %385 = %380.0;
    (%381, %382, %383, %384, %385, meta[relay.Constant][15] /* ty=Tensor[(1, 18), float32] */)
  };
  %386() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) */
}

def @func_4815(%var_4814: Tensor[(16, 8, 2), int32]) -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), uint8]) {
  %398 = fn (%var_4798: Tensor[(16, 8, 2), int32]) -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), uint8]) {
    %387 = @func_1825() /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), int32]) */;
    %388 = %387.2;
    %389 = cast(%var_4798, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %393 = mod(%391, %392) /* ty=Tensor[(16, 8, 2), float64] */;
    %394 = cast(%393, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %395 = reshape(%394, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %396 = @func_4269(%395) /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), uint8]) */;
    %397 = %396.1;
    (%393, %397)
  };
  %398(%var_4814) /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), uint8]) */
}

def @func_923() -> Tensor[(16, 8, 2), bool] {
  %399 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_666() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %399() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_5184() -> (Tensor[(16, 8, 2), bool],) {
  %401 = fn () -> (Tensor[(16, 8, 2), bool],) {
    %400 = @func_666() /* ty=Tensor[(16, 8, 2), bool] */;
    (%400,)
  };
  %401() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_5557(%var_5555: Tensor[(540), float64]) -> (Tensor[(77, 1), float64], Tensor[(9, 6, 10), float64], Tensor[(540), float64]) {
  @func_5554(%var_5555) /* ty=(Tensor[(77, 1), float64], Tensor[(9, 6, 10), float64], Tensor[(540), float64]) */
}

def @func_1342(%var_1340: Tensor[(13, 4, 11), bool]) -> (Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) {
  @func_1339(%var_1340) /* ty=(Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) */
}

def @func_5554(%var_5551: Tensor[(540), float64]) -> (Tensor[(77, 1), float64], Tensor[(9, 6, 10), float64], Tensor[(540), float64]) {
  %402 = @func_2895() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %405 = cast(%var_5551, dtype="float64") /* ty=Tensor[(540), float64] */;
  %406 = reshape(%405, newshape=[9, 6, 10]) /* ty=Tensor[(9, 6, 10), float64] */;
  %407 = acos(%404) /* ty=Tensor[(77, 1), float64] */;
  %408 = @func_3451(%406) /* ty=Tensor[(9, 6, 10), float64] */;
  (%407, %408, %var_5551)
}

def @func_2896() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %413 = fn () -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
    %409 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
    %410 = @func_2033() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64]) */;
    %411 = %409.2;
    %412 = %410.0;
    (%411, %412)
  };
  %413() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */
}

def @func_5096(%var_5092: Tensor[(10, 4, 14), float32]) -> Tensor[(10, 4, 14), float32] {
  %414 = cast(%var_5092, dtype="float32") /* ty=Tensor[(10, 4, 14), float32] */;
  log(%414) /* ty=Tensor[(10, 4, 14), float32] */
}

def @func_586() -> (Tensor[(16, 8, 2), bool],) {
  %415 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %416 = %415.0;
  (%416,)
}

def @func_3216() -> (Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) {
  @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */
}

def @func_2829() -> (Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
  %433 = fn () -> (Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) {
    %417 = @func_1725() /* ty=(Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) */;
    %418 = %417.2;
    %419 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
    %420 = cast(%418, dtype="float64") /* ty=float64 */;
    %421 = cast(%419, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %422 = cast(%419, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
    %424 = cast(meta[relay.Constant][16] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
    %425 = reshape(%422, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %426 = reshape(%423, newshape=[77]) /* ty=Tensor[(77), float64] */;
    %427 = reshape(%424, newshape=[77]) /* ty=Tensor[(77), float64] */;
    %428 = @func_2134(%425, %426, %427) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) */;
    %429 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %430 = maximum(%420, %421) /* ty=Tensor[(16, 8, 2), float64] */;
    %431 = %428.1;
    %432 = %429.0;
    (%430, %431, meta[relay.Constant][16] /* ty=Tensor[(77, 1), float64] */, %432)
  };
  %433() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */
}

def @func_5511() -> Tensor[(16, 8, 2), uint64] {
  %435 = fn () -> Tensor[(16, 8, 2), uint64] {
    %434 = @func_4159() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) */;
    %434.1
  };
  %435() /* ty=Tensor[(16, 8, 2), uint64] */
}

def @func_1323(%var_1322: Tensor[(405), float32]) -> (Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) {
  %444 = fn (%var_1317: Tensor[(405), float32]) -> (Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) {
    %436 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 2), float32] */;
    %437 = cast(meta[relay.Constant][18] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
    %438 = cast(%var_1317, dtype="float32") /* ty=Tensor[(405), float32] */;
    %439 = reshape(%437, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %440 = reshape(%438, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
    %441 = @func_471(%439, %440) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
    %442 = cosh(%436) /* ty=Tensor[(12, 10, 2), float32] */;
    %443 = %441.1;
    (%442, %443, meta[relay.Constant][18] /* ty=Tensor[(256), bool] */, %var_1317)
  };
  %444(%var_1322) /* ty=(Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) */
}

def @func_1663() -> Tensor[(16, 8, 2), bool] {
  @func_922() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3871(%var_3869: Tensor[(4, 2, 5), int32], %var_3870: Tensor[(4, 2, 5), int32]) -> (Tensor[(4, 2, 5), bool], Tensor[(16, 8, 2), bool]) {
  @func_3867(%var_3869, %var_3870) /* ty=(Tensor[(4, 2, 5), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_5099(%var_5097: Tensor[(10, 4, 14), float32]) -> Tensor[(10, 4, 14), float32] {
  @func_5096(%var_5097) /* ty=Tensor[(10, 4, 14), float32] */
}

def @func_555(%var_550: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  %445 = cast(%var_550, dtype="float32") /* ty=Tensor[(405), float32] */;
  %446 = reshape(%445, newshape=[3, 135]) /* ty=Tensor[(3, 135), float32] */;
  %447 = @func_347(%446) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(3, 135), float32]) */;
  %448 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
  %449 = %447.1;
  (%448, %449, %var_550)
}

def @func_5422(%var_5421: Tensor[(1, 15, 8), float64]) -> (Tensor[(1, 15, 8), float64], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(3, 2, 7), float64], Tensor[(7, 6), uint8]) {
  %462 = fn (%var_5388: Tensor[(1, 15, 8), float64]) -> (Tensor[(1, 15, 8), float64], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(3, 2, 7), float64], Tensor[(7, 6), uint8]) {
    %450 = cast(%var_5388, dtype="float64") /* ty=Tensor[(1, 15, 8), float64] */;
    %451 = @func_4000() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) */;
    %452 = @func_4976() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %453 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(7, 6), uint8] */;
    %454 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(7, 6), uint8] */;
    %455 = reshape(%453, newshape=[3, 2, 7]) /* ty=Tensor[(3, 2, 7), uint8] */;
    %456 = reshape(%454, newshape=[3, 2, 7]) /* ty=Tensor[(3, 2, 7), uint8] */;
    %457 = @func_2984(%455, %456) /* ty=(Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) */;
    %458 = sinh(%450) /* ty=Tensor[(1, 15, 8), float64] */;
    %459 = %451.0;
    %460 = %452.0;
    %461 = %457.1;
    (%458, %459, %460, %461, meta[relay.Constant][19] /* ty=Tensor[(7, 6), uint8] */)
  };
  %462(%var_5421) /* ty=(Tensor[(1, 15, 8), float64], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(3, 2, 7), float64], Tensor[(7, 6), uint8]) */
}

def @func_2134(%var_2085: Tensor[(16, 8, 2), bool], %var_2091: Tensor[(77), float64], %var_2105: Tensor[(77), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) {
  %463 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
  %464 = cast(%var_2085, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = cast(%var_2091, dtype="float64") /* ty=Tensor[(77), float64] */;
  %469 = reshape(%468, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %470 = @func_377(%469) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %471 = cast(meta[relay.Constant][20] /* ty=Tensor[(572), bool] */, dtype="bool") /* ty=Tensor[(572), bool] */;
  %472 = reshape(%471, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), bool] */;
  %473 = @func_1339(%472) /* ty=(Tensor[(13, 4, 11), bool], Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), int64]) */;
  %474 = cast(%var_2105, dtype="bool") /* ty=Tensor[(77), bool] */;
  %475 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(1), int32] */;
  %476 = cast(%var_2091, dtype="bool") /* ty=Tensor[(77), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?), bool] */;
  %478 = cast(meta[relay.Constant][21] /* ty=Tensor[(77), float64] */, dtype="bool") /* ty=Tensor[(77), bool] */;
  %479 = shape_of(%var_2105, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(%var_2105, dtype="bool") /* ty=Tensor[(77), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), bool] */;
  %482 = logical_or(%466, %467) /* ty=Tensor[(16, 8, 2), bool] */;
  %483 = %470.0;
  %484 = %473.2;
  %485 = greater_equal(%476, %477) /* ty=Tensor[(77), bool] */;
  %486 = less_equal(%480, %481) /* ty=Tensor[(77), bool] */;
  %487 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
  (%482, %483, %484, meta[relay.Constant][20] /* ty=Tensor[(572), bool] */, %485, %486, %487)
}

def @func_1528() -> (Tensor[(16, 8, 2), bool],) {
  %488 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %489 = %488.0;
  (%489,)
}

def @func_5466() -> Tensor[(16, 8, 2), float32] {
  %492 = fn () -> Tensor[(16, 8, 2), float32] {
    %490 = @func_1884() /* ty=Tensor[(16, 8, 2), bool] */;
    %491 = cast(%490, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    asin(%491) /* ty=Tensor[(16, 8, 2), float32] */
  };
  %492() /* ty=Tensor[(16, 8, 2), float32] */
}

def @func_4678() -> (Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
  %496 = fn () -> (Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) {
    %493 = @func_4500() /* ty=(Tensor[(16, 8, 2), float32],) */;
    %494 = %493.0;
    %495 = @func_3282() /* ty=Tensor[(16, 8, 2), bool] */;
    (%494, %495)
  };
  %496() /* ty=(Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */
}

def @func_142(%var_141: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) {
  %506 = fn (%var_88: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) {
    %497 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
    %498 = tan(%497) /* ty=Tensor[(15, 9, 3), float32] */;
    %499 = cast(%var_88, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
    %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%498, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %503 = cast(%498, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
    %504 = bitwise_and(%501, %502) /* ty=Tensor[(15, 9, 3), uint32] */;
    %505 = acosh(%503) /* ty=Tensor[(15, 9, 3), float32] */;
    (%504, %505)
  };
  %506(%var_141) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */
}

def @func_4502() -> (Tensor[(16, 8, 2), float32],) {
  @func_4500() /* ty=(Tensor[(16, 8, 2), float32],) */
}

def @func_4500() -> (Tensor[(16, 8, 2), float32],) {
  %507 = @func_3765() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(1, 18), float32]) */;
  %508 = %507.2;
  (%508,)
}

def @func_5535() -> (Tensor[(16, 8, 2), bool],) {
  %511 = fn () -> (Tensor[(16, 8, 2), bool],) {
    %509 = @func_1915() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_667() -> Tensor[(16, 8, 2), bool] {
  %513 = fn () -> Tensor[(16, 8, 2), bool] {
    %512 = @func_569() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %512.0
  };
  %513() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1221(%var_1220: Tensor[(14, 12, 9), uint32]) -> (Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) {
  %527 = fn (%var_1185: Tensor[(14, 12, 9), uint32]) -> (Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) {
    %514 = cast(%var_1185, dtype="uint32") /* ty=Tensor[(14, 12, 9), uint32] */;
    %515 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(14, 12, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(14, 12, 9), uint32] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %518 = cast(%var_1185, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
    %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 405), float32] */, dtype="float32") /* ty=Tensor[(1, 405), float32] */;
    %520 = reshape(%519, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %521 = @func_555(%520) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
    %522 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %523 = bitwise_or(%516, %517) /* ty=Tensor[(14, 12, 9), uint32] */;
    %524 = tan(%518) /* ty=Tensor[(14, 12, 9), float32] */;
    %525 = %521.1;
    %526 = %522.0;
    (%523, %524, %525, meta[relay.Constant][23] /* ty=Tensor[(1, 405), float32] */, %526)
  };
  %527(%var_1220) /* ty=(Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) */
}

def @func_317() -> Tensor[(16, 8, 2), bool] {
  %541 = fn () -> Tensor[(16, 8, 2), bool] {
    %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %529 = asinh(%528) /* ty=Tensor[(16, 8, 2), float64] */;
    %530 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="float32") /* ty=Tensor[(16, 8, 2), float32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %534 = power(%532, %533) /* ty=Tensor[(16, 8, 2), float32] */;
    %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %536 = rsqrt(%535) /* ty=Tensor[(16, 8, 2), float64] */;
    %537 = cast(%536, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %538 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%534, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%539, %540) /* ty=Tensor[(16, 8, 2), bool] */
  };
  %541() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_2687() -> (Tensor[(16, 8, 2), bool],) {
  %544 = fn () -> (Tensor[(16, 8, 2), bool],) {
    %542 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
    %543 = %542.1;
    (%543,)
  };
  %544() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_3076(%var_3065: Tensor[(15, 1, 15), int8], %var_3066: Tensor[(15, 12, 15), int8], %var_3074: Tensor[(256), bool]) -> (Tensor[(15, 12, 15), int8], Tensor[(15, 12, 15), float32], Tensor[(16, 8, 2), int32], Tensor[(256), bool]) {
  %545 = cast(%var_3065, dtype="int8") /* ty=Tensor[(15, 1, 15), int8] */;
  %546 = cast(%var_3066, dtype="int8") /* ty=Tensor[(15, 12, 15), int8] */;
  %547 = cast(%var_3066, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %548 = cast(%var_3074, dtype="bool") /* ty=Tensor[(256), bool] */;
  %549 = reshape(%548, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
  %550 = @func_2291(%549) /* ty=(Tensor[(16, 8, 2), int32], Tensor[(16, 8, 2), float32], Tensor[(16, 8, 2), bool]) */;
  %551 = bitwise_xor(%545, %546) /* ty=Tensor[(15, 12, 15), int8] */;
  %552 = sin(%547) /* ty=Tensor[(15, 12, 15), float32] */;
  %553 = %550.0;
  (%551, %552, %553, %var_3074)
}

def @func_4976() -> (Tensor[(16, 8, 2), bool],) {
  %554 = @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %555 = %554.1;
  (%555,)
}

def @func_4932(%var_4930: Tensor[(77, 13), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(77, 13), uint16]) {
  @func_4929(%var_4930) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(77, 13), uint16]) */
}

def @func_2607(%var_2606: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(405), float32], Tensor[(405), float32], Tensor[(16, 8, 2), bool]) {
  %564 = fn (%var_2590: Tensor[(405), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(405), float32], Tensor[(405), float32], Tensor[(16, 8, 2), bool]) {
    %556 = @func_2486() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %557 = cast(%var_2590, dtype="float32") /* ty=Tensor[(405), float32] */;
    %558 = reshape(%557, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %559 = @func_1321(%558) /* ty=(Tensor[(12, 10, 2), float32], Tensor[(15, 9, 3), float32], Tensor[(256), bool], Tensor[(405), float32]) */;
    %560 = @func_2486() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %561 = %556.0;
    %562 = %559.3;
    %563 = %560.0;
    (%561, %562, %var_2590, %563)
  };
  %564(%var_2606) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(405), float32], Tensor[(405), float32], Tensor[(16, 8, 2), bool]) */
}

def @func_1530() -> (Tensor[(16, 8, 2), bool],) {
  @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_3911() -> Tensor[(16, 8, 2), float64] {
  %568 = fn () -> Tensor[(16, 8, 2), float64] {
    %565 = @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */;
    %566 = %565.0;
    %567 = cast(%566, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    log2(%567) /* ty=Tensor[(16, 8, 2), float64] */
  };
  %568() /* ty=Tensor[(16, 8, 2), float64] */
}

def @func_5050(%var_5048: Tensor[(5, 7, 4), int64], %var_5049: Tensor[(5, 7, 4), int64]) -> Tensor[(5, 7, 4), int64] {
  @func_5046(%var_5048, %var_5049) /* ty=Tensor[(5, 7, 4), int64] */
}

def @func_5603() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(18), float32]) {
  %569 = @func_2168() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %570 = @func_5534() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %571 = cast(meta[relay.Constant][25] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %572 = reshape(%571, newshape=[6, 3, 1]) /* ty=Tensor[(6, 3, 1), float32] */;
  %573 = @func_2542(%572) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) */;
  %574 = %569.1;
  %575 = %570.0;
  %576 = %573.2;
  (%574, %575, %576, meta[relay.Constant][25] /* ty=Tensor[(18), float32] */)
}

def @func_5605() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(18), float32]) {
  @func_5603() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(18), float32]) */
}

def @func_1576() -> (Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) {
  %584 = fn () -> (Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) {
    %577 = cast(meta[relay.Constant][26] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %578 = reshape(%577, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), float32] */;
    %579 = @func_140(%578) /* ty=(Tensor[(15, 9, 3), uint32], Tensor[(15, 9, 3), float32]) */;
    %580 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
    %581 = cast(%580, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %582 = %579.1;
    %583 = sigmoid(%581) /* ty=Tensor[(16, 8, 2), float64] */;
    (%582, meta[relay.Constant][26] /* ty=Tensor[(405), float32] */, %583)
  };
  %584() /* ty=(Tensor[(15, 9, 3), float32], Tensor[(405), float32], Tensor[(16, 8, 2), float64]) */
}

def @func_5809(%var_5805: Tensor[(77, 1), float64]) -> (Tensor[(11, 2, 7), float32], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64]) {
  %585 = cast(%var_5805, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %586 = reshape(%585, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %587 = @func_377(%586) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %588 = @func_4075() /* ty=Tensor[(11, 2, 7), float32] */;
  %589 = %587.0;
  (%588, %589, %var_5805)
}

def @func_2486() -> (Tensor[(16, 8, 2), bool],) {
  %590 = @func_922() /* ty=Tensor[(16, 8, 2), bool] */;
  (%590,)
}

def @func_377(%var_363: Tensor[(11, 1, 7), float64]) -> (Tensor[(11, 2, 7), float64],) {
  %591 = cast(%var_363, dtype="float64") /* ty=Tensor[(11, 1, 7), float64] */;
  %592 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %593 = divide(%591, %592) /* ty=Tensor[(11, 2, 7), float64] */;
  (%593,)
}

def @func_3644() -> Tensor[(16, 8, 2), bool] {
  %594 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_1592() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %594() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4481() -> Tensor[(16, 8, 2), bool] {
  %595 = @func_2406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */;
  %595.0
}

def @func_1425() -> (Tensor[(16, 8, 2), bool],) {
  @func_1423() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_1592() -> Tensor[(16, 8, 2), bool] {
  @func_316() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_1594() -> Tensor[(16, 8, 2), bool] {
  @func_1592() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3480() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) {
  @func_3478() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_4109() -> Tensor[(16, 8, 2), bool] {
  %597 = fn () -> Tensor[(16, 8, 2), bool] {
    %596 = @func_3214() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(180, 1), float64], Tensor[(1512, 1), uint32]) */;
    %596.1
  };
  %597() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_5852() -> (Tensor[(15, 9, 3), float32],) {
  %600 = fn () -> (Tensor[(15, 9, 3), float32],) {
    %598 = @func_2859() /* ty=(Tensor[(15, 9, 3), float32],) */;
    %599 = %598.0;
    (%599,)
  };
  %600() /* ty=(Tensor[(15, 9, 3), float32],) */
}

def @func_2777(%var_2771: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), uint16],) {
  %601 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %602 = %601.0;
  %603 = cast(%var_2771, dtype="uint16") /* ty=Tensor[(16, 8, 2), uint16] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="uint16") /* ty=Tensor[(16, 8, 2), uint16] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %607 = logical_xor(%605, %606) /* ty=Tensor[(16, 8, 2), uint16] */;
  (%607,)
}

def @func_3408() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) {
  @func_3406() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(15, 9, 3), float32], Tensor[(405), float32]) */
}

def @func_1423() -> (Tensor[(16, 8, 2), bool],) {
  %608 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %609 = %608.0;
  (%609,)
}

def @func_5285(%var_5284: Tensor[(6, 3, 14), float64]) -> (Tensor[(6, 3, 14), bool], Tensor[(11, 2, 7), float64], Tensor[(77), float64]) {
  %619 = fn (%var_5265: Tensor[(6, 3, 14), float64]) -> (Tensor[(6, 3, 14), bool], Tensor[(11, 2, 7), float64], Tensor[(77), float64]) {
    %610 = cast(%var_5265, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
    %611 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 3, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 3, 14), float64] */, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = cast(meta[relay.Constant][29] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %615 = reshape(%614, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
    %616 = @func_377(%615) /* ty=(Tensor[(11, 2, 7), float64],) */;
    %617 = equal(%612, %613) /* ty=Tensor[(6, 3, 14), bool] */;
    %618 = %616.0;
    (%617, %618, meta[relay.Constant][29] /* ty=Tensor[(77), float64] */)
  };
  %619(%var_5284) /* ty=(Tensor[(6, 3, 14), bool], Tensor[(11, 2, 7), float64], Tensor[(77), float64]) */
}

def @func_5156() -> (Tensor[(16, 8, 2), float64],) {
  %621 = fn () -> (Tensor[(16, 8, 2), float64],) {
    %620 = @func_3910() /* ty=Tensor[(16, 8, 2), float64] */;
    (%620,)
  };
  %621() /* ty=(Tensor[(16, 8, 2), float64],) */
}

def @func_3159(%var_3157: Tensor[(9, 10, 2), float64], %var_3158: Tensor[(1512), uint32]) -> (Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) {
  %628 = fn (%var_3145: Tensor[(9, 10, 2), float64], %var_3150: Tensor[(1512), uint32]) -> (Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) {
    %622 = cast(%var_3145, dtype="float64") /* ty=Tensor[(9, 10, 2), float64] */;
    %623 = cast(%var_3150, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
    %624 = reshape(%623, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint32] */;
    %625 = @func_1219(%624) /* ty=(Tensor[(14, 12, 9), uint32], Tensor[(14, 12, 9), float32], Tensor[(15, 9, 3), float32], Tensor[(1, 405), float32], Tensor[(16, 8, 2), bool]) */;
    %626 = acos(%622) /* ty=Tensor[(9, 10, 2), float64] */;
    %627 = %625.4;
    (%626, %627, %var_3150)
  };
  %628(%var_3157, %var_3158) /* ty=(Tensor[(9, 10, 2), float64], Tensor[(16, 8, 2), bool], Tensor[(1512), uint32]) */
}

def @func_3283() -> Tensor[(16, 8, 2), bool] {
  %629 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_1354() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %629() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4978() -> (Tensor[(16, 8, 2), bool],) {
  @func_4976() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_1725() -> (Tensor[(32, 8), int32], Tensor[(16, 8, 2), bool], bool, Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool]) {
  %630 = @func_586() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %633 = reshape(%632, newshape=[32, 8]) /* ty=Tensor[(32, 8), bool] */;
  %634 = @func_1618(%633) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(32, 8), bool], Tensor[(2, 12, 10), float32]) */;
  %635 = %634.1;
  %636 = cast(%631, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %640 = logical_or(%638, %639) /* ty=Tensor[(32, 8), bool] */;
  %641 = cast(%631, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
  %642 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %643 = cast(%635, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %645 = logical_and(%643, %644) /* ty=Tensor[(32, 8), bool] */;
  %646 = cast(%645, dtype="int32") /* ty=Tensor[(32, 8), int32] */;
  %647 = shape_of(%640, dtype="int32") /* ty=Tensor[(2), int32] */;
  %648 = cast(%640, dtype="int32") /* ty=Tensor[(32, 8), int32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %650 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %651 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %652 = reshape(%650, newshape=[]) /* ty=bool */;
  %653 = reshape(%651, newshape=[12, 1]) /* ty=Tensor[(12, 1), bool] */;
  %654 = @func_1110(%652, %653) /* ty=(Tensor[(12, 1), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(1, 77), float64]) */;
  %655 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
  %656 = bitwise_or(%648, %649) /* ty=Tensor[(32, 8), int32] */;
  %657 = %654.3;
  %658 = %655.0;
  (%656, %657, False /* ty=bool */, meta[relay.Constant][30] /* ty=Tensor[(12, 1), bool] */, %658)
}

def @func_4476() -> Tensor[(5, 6, 5), float32] {
  %660 = fn () -> Tensor[(5, 6, 5), float32] {
    %659 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 5), float32] */;
    sinh(%659) /* ty=Tensor[(5, 6, 5), float32] */
  };
  %660() /* ty=Tensor[(5, 6, 5), float32] */
}

def @func_2488() -> (Tensor[(16, 8, 2), bool],) {
  @func_2486() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_4160() -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) {
  %670 = fn () -> (Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) {
    %661 = @func_2828() /* ty=(Tensor[(16, 8, 2), float64], Tensor[(11, 2, 7), float64], Tensor[(77, 1), float64], Tensor[(16, 8, 2), bool]) */;
    %662 = %661.3;
    %663 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
    %664 = cast(%663, dtype="uint64") /* ty=Tensor[(16, 8, 2), uint64] */;
    %665 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%662, dtype="uint64") /* ty=Tensor[(16, 8, 2), uint64] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %668 = @func_3927() /* ty=Tensor[(77, 1), float64] */;
    %669 = minimum(%666, %667) /* ty=Tensor[(16, 8, 2), uint64] */;
    (%668, %669)
  };
  %670() /* ty=(Tensor[(77, 1), float64], Tensor[(16, 8, 2), uint64]) */
}

def @func_2049() -> Tensor[(16, 8, 2), bool] {
  %671 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_1663() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %671() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_4792() -> (Tensor[(16, 8, 2), bool],) {
  %673 = fn () -> (Tensor[(16, 8, 2), bool],) {
    %672 = @func_4481() /* ty=Tensor[(16, 8, 2), bool] */;
    (%672,)
  };
  %673() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_5039() -> Tensor[(16, 8, 2), bool] {
  %674 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_922() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %674() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_767(%var_765: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) {
  @func_764(%var_765) /* ty=(Tensor[(16, 8, 2), int64], Tensor[(16, 8, 2), float64]) */
}

def @func_5226(%var_5222: Tensor[(11, 8, 10), float64], %var_5223: Tensor[(11, 8, 10), float64], %var_5224: Tensor[(8, 32), bool], %var_5225: Tensor[(405), float32]) -> (Tensor[(11, 8, 10), float64], Tensor[(16, 8, 2), float32], Tensor[(8, 32), bool], Tensor[(405), float32], Tensor[(16, 8, 2), bool], Tensor[(11, 8, 10), uint32]) {
  %693 = fn (%var_5198: Tensor[(11, 8, 10), float64], %var_5199: Tensor[(11, 8, 10), float64], %var_5205: Tensor[(8, 32), bool], %var_5206: Tensor[(405), float32]) -> (Tensor[(11, 8, 10), float64], Tensor[(16, 8, 2), float32], Tensor[(8, 32), bool], Tensor[(405), float32], Tensor[(16, 8, 2), bool], Tensor[(11, 8, 10), uint32]) {
    %675 = cast(%var_5199, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
    %676 = shape_of(%var_5198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%var_5198, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %679 = cast(%var_5205, dtype="bool") /* ty=Tensor[(8, 32), bool] */;
    %680 = cast(%var_5206, dtype="float32") /* ty=Tensor[(405), float32] */;
    %681 = reshape(%679, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %682 = reshape(%680, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
    %683 = @func_471(%681, %682) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
    %684 = @func_4791() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %685 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 8, 10), float64] */, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %686 = shape_of(%var_5199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_5199, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %689 = divide(%677, %678) /* ty=Tensor[(11, 8, 10), float64] */;
    %690 = %683.3;
    %691 = %684.0;
    %692 = bitwise_or(%687, %688) /* ty=Tensor[(11, 8, 10), uint32] */;
    (%689, %690, %var_5205, %var_5206, %691, %692)
  };
  %693(%var_5222, %var_5223, %var_5224, %var_5225) /* ty=(Tensor[(11, 8, 10), float64], Tensor[(16, 8, 2), float32], Tensor[(8, 32), bool], Tensor[(405), float32], Tensor[(16, 8, 2), bool], Tensor[(11, 8, 10), uint32]) */
}

def @func_2988(%var_2986: Tensor[(3, 2, 7), uint8], %var_2987: Tensor[(3, 2, 7), uint8]) -> (Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) {
  @func_2984(%var_2986, %var_2987) /* ty=(Tensor[(3, 2, 7), bool], Tensor[(3, 2, 7), float64], Tensor[(15, 9, 3), float32]) */
}

def @func_3505(%var_3504: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), bool],) {
  %700 = fn (%var_3491: Tensor[(16, 8, 2), bool]) -> (Tensor[(16, 8, 2), bool],) {
    %694 = @func_3001() /* ty=Tensor[(16, 8, 2), bool] */;
    %695 = cast(%var_3491, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%694, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %699 = equal(%697, %698) /* ty=Tensor[(16, 8, 2), bool] */;
    (%699,)
  };
  %700(%var_3504) /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_3113() -> Tensor[(16, 8, 2), bool] {
  %709 = fn () -> Tensor[(16, 8, 2), bool] {
    %701 = @func_1528() /* ty=(Tensor[(16, 8, 2), bool],) */;
    %702 = %701.0;
    %703 = cast(%702, dtype="float64") /* ty=Tensor[(16, 8, 2), float64] */;
    %704 = atan(%703) /* ty=Tensor[(16, 8, 2), float64] */;
    %705 = cast(%702, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%704, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%707, %708) /* ty=Tensor[(16, 8, 2), bool] */
  };
  %709() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_2139(%var_2136: Tensor[(16, 8, 2), bool], %var_2137: Tensor[(77), float64], %var_2138: Tensor[(77), float64]) -> (Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) {
  @func_2134(%var_2136, %var_2137, %var_2138) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(11, 2, 7), float64], Tensor[(144), uint8], Tensor[(572), bool], Tensor[(77), bool], Tensor[(77), bool], Tensor[(16, 8, 2), bool]) */
}

def @func_4077() -> Tensor[(11, 2, 7), float32] {
  @func_4075() /* ty=Tensor[(11, 2, 7), float32] */
}

def @func_4001() -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) {
  %724 = fn () -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) {
    %710 = @func_3112() /* ty=Tensor[(16, 8, 2), bool] */;
    %711 = cast(%710, dtype="bool") /* ty=Tensor[(16, 8, 2), bool] */;
    %712 = cast(meta[relay.Constant][33] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %713 = reshape(%711, newshape=[16, 8, 2]) /* ty=Tensor[(16, 8, 2), bool] */;
    %714 = reshape(%712, newshape=[405, 1]) /* ty=Tensor[(405, 1), float32] */;
    %715 = @func_471(%713, %714) /* ty=(Tensor[(16, 8, 2), uint32], Tensor[(15, 9, 3), float32], Tensor[(405, 1), float32], Tensor[(16, 8, 2), float32], Tensor[(15, 9, 3), uint32]) */;
    %716 = cast(meta[relay.Constant][34] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %717 = reshape(%716, newshape=[77]) /* ty=Tensor[(77), float64] */;
    %718 = @func_2744(%717) /* ty=(Tensor[(77), float32], Tensor[(77), float32], Tensor[(16, 8, 2), float32], Tensor[(77), float32]) */;
    %719 = cast(meta[relay.Constant][34] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %720 = @func_1592() /* ty=Tensor[(16, 8, 2), bool] */;
    %721 = %715.3;
    %722 = %718.0;
    %723 = sin(%719) /* ty=Tensor[(77), float64] */;
    (%720, %710, %721, meta[relay.Constant][33] /* ty=Tensor[(405), float32] */, %722, %723)
  };
  %724() /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), float32], Tensor[(405), float32], Tensor[(77), float32], Tensor[(77), float64]) */
}

def @func_3342(%var_3341: Tensor[(7, 1, 12), float32]) -> (Tensor[(7, 1, 12), float32], Tensor[(16, 8, 2), bool]) {
  %728 = fn (%var_3315: Tensor[(7, 1, 12), float32]) -> (Tensor[(7, 1, 12), float32], Tensor[(16, 8, 2), bool]) {
    %725 = cast(%var_3315, dtype="float32") /* ty=Tensor[(7, 1, 12), float32] */;
    %726 = log10(%725) /* ty=Tensor[(7, 1, 12), float32] */;
    %727 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
    (%726, %727)
  };
  %728(%var_3341) /* ty=(Tensor[(7, 1, 12), float32], Tensor[(16, 8, 2), bool]) */
}

def @func_3002() -> Tensor[(16, 8, 2), bool] {
  %729 = fn () -> Tensor[(16, 8, 2), bool] {
    @func_2048() /* ty=Tensor[(16, 8, 2), bool] */
  };
  %729() /* ty=Tensor[(16, 8, 2), bool] */
}

def @func_3662() -> (Tensor[(16, 8, 2), bool],) {
  @func_3660() /* ty=(Tensor[(16, 8, 2), bool],) */
}

def @func_1952(%var_1950: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float64],) {
  @func_1949(%var_1950) /* ty=(Tensor[(15, 9, 3), float64],) */
}

def @func_2462(%var_2461: Tensor[(8, 18), uint8]) -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) {
  %739 = fn (%var_2427: Tensor[(8, 18), uint8]) -> (Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) {
    %730 = cast(%var_2427, dtype="uint8") /* ty=Tensor[(8, 18), uint8] */;
    %731 = reshape(%730, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint8] */;
    %732 = @func_897(%731) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */;
    %733 = cast(%var_2427, dtype="float32") /* ty=Tensor[(8, 18), float32] */;
    %734 = erf(%733) /* ty=Tensor[(8, 18), float32] */;
    %735 = cast(%734, dtype="float32") /* ty=Tensor[(8, 18), float32] */;
    %736 = @func_1354() /* ty=Tensor[(16, 8, 2), bool] */;
    %737 = %732.1;
    %738 = rsqrt(%735) /* ty=Tensor[(8, 18), float32] */;
    (%736, %737, %738)
  };
  %739(%var_2461) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) */
}

def @func_2544(%var_2543: Tensor[(6, 3, 1), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) {
  %753 = fn (%var_2499: Tensor[(6, 3, 1), float32]) -> (Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) {
    %740 = cast(meta[relay.Constant][35] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
    %741 = reshape(%740, newshape=[8, 18]) /* ty=Tensor[(8, 18), uint8] */;
    %742 = @func_2460(%741) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(16, 8, 2), int64], Tensor[(8, 18), float32]) */;
    %743 = cast(%var_2499, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
    %744 = sinh(%743) /* ty=Tensor[(6, 3, 1), float32] */;
    %745 = cast(%744, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
    %746 = cast(%744, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
    %747 = cast(%744, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
    %748 = %742.0;
    %749 = @func_316() /* ty=Tensor[(16, 8, 2), bool] */;
    %750 = cosh(%745) /* ty=Tensor[(6, 3, 1), float64] */;
    %751 = erf(%746) /* ty=Tensor[(6, 3, 1), float64] */;
    %752 = rsqrt(%747) /* ty=Tensor[(6, 3, 1), float32] */;
    (%748, meta[relay.Constant][35] /* ty=Tensor[(144), uint8] */, %749, %750, %751, %752)
  };
  %753(%var_2543) /* ty=(Tensor[(16, 8, 2), bool], Tensor[(144), uint8], Tensor[(16, 8, 2), bool], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float64], Tensor[(6, 3, 1), float32]) */
}

def @func_900(%var_898: Tensor[(9, 8, 2), uint8]) -> (Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) {
  @func_897(%var_898) /* ty=(Tensor[(9, 8, 2), uint8], Tensor[(16, 8, 2), int64], Tensor[(256), bool], Tensor[(16, 8, 2), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen34/build/output.py", line 2184, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:26] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

