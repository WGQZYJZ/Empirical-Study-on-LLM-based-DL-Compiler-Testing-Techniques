==========mod==========
#[version = "0.0.5"]
def @func_9466() -> (Tensor[(?, 12, 5), int16],) {
  %0 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
  %3 = cos(%2) /* ty=Tensor[(?, 12, 5), float32] */;
  %4 = cast(%1, dtype="int16") /* ty=Tensor[(?, 12, 5), int16] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="int16") /* ty=Tensor[(?, 12, 5), int16] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %8 = multiply(%6, %7) /* ty=Tensor[(?, 12, 5), int16] */;
  (%8,)
}

def @func_4444(%var_4431: Tensor[(6, 5, 2), uint8], %var_4441: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
  %9 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %10 = %9.0;
  %11 = cast(%var_4431, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %15 = cast(%var_4441, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %16 = cast(%var_4441, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %17 = reshape(%15, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %18 = reshape(%16, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %19 = @func_1562(%17, %18) /* ty=(Tensor[(10, 6, 11), uint8],) */;
  %20 = left_shift(%13, %14) /* ty=Tensor[(6, 5, 2), int8] */;
  %21 = %19.0;
  (%20, %21, %var_4441)
}

def @func_10216() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %22 = @func_9831() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %23 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %24 = %22.0;
  %25 = %23.4;
  (%24, %25)
}

def @func_4766() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %26 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %27 = %26.2;
  %28 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  (%27, %28)
}

def @func_12092() -> Tensor[(?, 12, 5), int16] {
  %29 = @func_9466() /* ty=(Tensor[(?, 12, 5), int16],) */;
  %29.0
}

def @func_13401() -> Tensor[(6, 15, 16), uint8] {
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 16), uint8] */;
  %31 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 16), uint8] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%32, %33) /* ty=Tensor[(6, 15, 16), uint8] */
}

def @func_983() -> Tensor[(6, 5, 2), float32] {
  %34 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %34.0
}

def @func_4157() -> Tensor[(6, 5, 2), bool] {
  %35 = @func_3800() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %35.0
}

def @func_12020() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %36 = @func_3276() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) */;
  %37 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %38 = %36.2;
  %39 = %37.2;
  (%38, %39)
}

def @func_12682() -> Tensor[(6, 5, 2), bool] {
  %40 = @func_3785() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) */;
  %40.0
}

def @func_5996() -> Tensor[(6, 5, 2), bool] {
  @func_5740() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_5876(%var_5779: Tensor[(1, 64), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(?, 64), uint16]) {
  %41 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %42 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %43 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %46 = cast(%var_5779, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %47 = cast(%var_5779, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %48 = reshape(%46, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %49 = reshape(%47, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %50 = @func_908(%48, %49) /* ty=Tensor[(2, 16, 2), bool] */;
  %51 = cast(%50, dtype="uint16") /* ty=Tensor[(2, 16, 2), uint16] */;
  %52 = shape_of(%var_5779, dtype="int32") /* ty=Tensor[(2), int32] */;
  %53 = cast(%var_5779, dtype="uint16") /* ty=Tensor[(1, 64), uint16] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %55 = %41.0;
  %56 = %42.1;
  %57 = cosh(%45) /* ty=Tensor[(6, 5, 2), float64] */;
  %58 = @func_4157() /* ty=Tensor[(6, 5, 2), bool] */;
  %59 = subtract(%53, %54) /* ty=Tensor[(?, 64), uint16] */;
  (%55, %56, %57, %58, %59)
}

def @func_857() -> Tensor[(6, 5, 2), bool] {
  %60 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %60.1
}

def @func_9032() -> (Tensor[(6, 5, 2), float32], Tensor[(4, 11, 4), float32], Tensor[(176), float32]) {
  %61 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %63 = reshape(%62, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float32] */;
  %64 = %61.0;
  %65 = @func_6985(%63) /* ty=Tensor[(4, 11, 4), float32] */;
  (%64, %65, meta[relay.Constant][2] /* ty=Tensor[(176), float32] */)
}

def @func_576(%var_569: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int64] {
  %66 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %67 = %66.0;
  %68 = cast(%var_569, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%70, %71) /* ty=Tensor[(6, 5, 2), int64] */
}

def @func_3372() -> (Tensor[(6, 5, 2), float32],) {
  %72 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  (%72,)
}

def @func_12144() -> Tensor[(6, 5, 2), float64] {
  %73 = @func_5983() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %73.1
}

def @func_2659() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %74 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %75 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %76 = %74.1;
  (%75, %76)
}

def @func_3316(%var_3290: uint32, %var_3291: Tensor[(13, 10, 6), uint32]) -> (Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) {
  %77 = cast(%var_3290, dtype="bool") /* ty=bool */;
  %78 = cast(%var_3291, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %79 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %80 = less(%77, %78) /* ty=Tensor[(13, 10, 6), bool] */;
  %81 = %79.0;
  (%80, %81)
}

def @func_12955() -> (Tensor[(6, 5, 2), bool],) {
  %82 = @func_3800() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %83 = %82.0;
  (%83,)
}

def @func_5692() -> (Tensor[(6, 5, 2), bool],) {
  %84 = @func_4752() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %85 = %84.0;
  (%85,)
}

def @func_1699(%var_1693: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int32] {
  %86 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
  %87 = cast(%var_1693, dtype="int32") /* ty=Tensor[(6, 5, 2), int32] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="int32") /* ty=Tensor[(6, 5, 2), int32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%89, %90) /* ty=Tensor[(6, 5, 2), int32] */
}

def @func_2643() -> Tensor[(6, 5, 2), float64] {
  @func_2223() /* ty=Tensor[(6, 5, 2), float64] */
}

def @main(%var_13721: Tensor[(16, 7, 10), float64]) -> Tensor[(16, 7, 10), float64] {
  %91 = cast(%var_13721, dtype="float64") /* ty=Tensor[(16, 7, 10), float64] */;
  %92 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 7, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 7, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 7, 10), float64] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%93, %94) /* ty=Tensor[(16, 7, 10), float64] */
}

def @func_13193() -> (Tensor[(6, 5, 2), float64],) {
  %95 = @func_7525() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %96 = %95.0;
  (%96,)
}

def @func_12630(%var_12585: Tensor[(5, 9, 2), uint32], %var_12586: Tensor[(5, 9, 2), uint32]) -> (Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %97 = cast(%var_12586, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
  %98 = shape_of(%var_12585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_12585, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %101 = bitwise_and(%99, %100) /* ty=Tensor[(5, 9, 2), uint32] */;
  %102 = cast(%var_12585, dtype="uint64") /* ty=Tensor[(5, 9, 2), uint64] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint64") /* ty=Tensor[(5, 9, 2), uint64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %106 = @func_6978() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %107 = @func_9771() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %108 = bitwise_or(%104, %105) /* ty=Tensor[(5, 9, 2), uint64] */;
  %109 = %106.0;
  %110 = %107.0;
  (%108, %109, %110)
}

def @func_3164() -> (Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %111 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %112 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %113 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %114 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %115 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %116 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
  %117 = %111.0;
  %118 = %112.1;
  %119 = %113.0;
  %120 = %114.1;
  %121 = %115.0;
  (%116, %117, %118, %119, %120, %121)
}

def @func_9944() -> (Tensor[(6, 5, 2), float32],) {
  %122 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %123 = %122.0;
  (%123,)
}

def @func_11851(%var_11843: float64, %var_11844: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, 1), float64],) {
  %124 = cast(%var_11843, dtype="float64") /* ty=float64 */;
  %125 = cast(%var_11844, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %126 = power(%124, %125) /* ty=Tensor[(5, 8, 1), float64] */;
  (%126,)
}

def @func_7785() -> (Tensor[(3, 13, 8), float64],) {
  %127 = @func_4926() /* ty=(Tensor[(3, 13, 8), uint16],) */;
  %128 = %127.0;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %130 = sin(%129) /* ty=Tensor[(3, 13, 8), float64] */;
  (%130,)
}

def @func_953() -> (Tensor[(6, 5, 2), float32],) {
  %131 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %132 = %131.0;
  (%132,)
}

def @func_9831() -> (Tensor[(6, 5, 2), bool],) {
  %133 = @func_8908() /* ty=Tensor[(6, 5, 2), bool] */;
  (%133,)
}

def @func_10100() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
  %134 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %135 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %136 = %134.0;
  %137 = %135.0;
  (%136, %137)
}

def @func_10358() -> Tensor[(6, 5, 2), float32] {
  %138 = @func_3063() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %138.0
}

def @func_11380() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %139 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %140 = @func_7712() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %141 = %139.0;
  %142 = %140.1;
  (%141, %142)
}

def @func_13300(%var_13258: Tensor[(416), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64], Tensor[(4, 13, 8), float64], Tensor[(416), float64], Tensor[(16, 10, 15), float32], Tensor[(?, 12, 5), int8], Tensor[(6, 5, 2), float64], Tensor[(90), uint32]) {
  %143 = @func_12675() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) */;
  %144 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %145 = %144.1;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
  %147 = log(%146) /* ty=Tensor[(?, 12, 5), float32] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
  %149 = cast(%var_13258, dtype="float64") /* ty=Tensor[(416), float64] */;
  %150 = reshape(%149, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float64] */;
  %151 = @func_9059(%150) /* ty=(Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) */;
  %152 = @func_11318() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) */;
  %153 = cast(%145, dtype="int8") /* ty=Tensor[(?, 12, 5), int8] */;
  %154 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%147, dtype="int8") /* ty=Tensor[(?, 12, 5), int8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %157 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %159 = reshape(%157, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
  %160 = reshape(%158, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
  %161 = @func_12630(%159, %160) /* ty=(Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %162 = %143.1;
  %163 = tan(%148) /* ty=Tensor[(?, 12, 5), float64] */;
  %164 = %151.0;
  %165 = %152.1;
  %166 = right_shift(%155, %156) /* ty=Tensor[(?, 12, 5), int8] */;
  %167 = %161.2;
  (%162, %163, %164, %var_13258, %165, %166, %167, meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */)
}

def @func_4305() -> Tensor[(6, 5, 2), float64] {
  %168 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  sin(%170) /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_9914() -> Tensor[(6, 5, 2), float32] {
  %171 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %171.0
}

def @func_10821() -> (Tensor[(2, 16, 8), float64],) {
  %172 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %173 = cosh(%172) /* ty=Tensor[(2, 16, 8), float64] */;
  (%173,)
}

def @func_789() -> (Tensor[(6, 5, 2), float64],) {
  %174 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %175 = %174.0;
  (%175,)
}

def @func_2808() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %176 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %177 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %178 = %176.0;
  %179 = %177.0;
  (%178, %179)
}

def @func_4340() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %180 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %181 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %182 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %183 = @func_4305() /* ty=Tensor[(6, 5, 2), float64] */;
  %184 = %180.2;
  %185 = %181.1;
  %186 = %182.4;
  (%183, %184, %185, %186)
}

def @func_12675() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) {
  %187 = @func_7401() /* ty=Tensor[(6, 5, 2), float64] */;
  %188 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
  %189 = @func_5286() /* ty=Tensor[(16, 10, 15), float32] */;
  (%187, %188, %189)
}

def @func_3035() -> (Tensor[(6, 5, 2), bool],) {
  %190 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %191 = %190.0;
  (%191,)
}

def @func_897() -> (Tensor[(6, 5, 2), float32],) {
  %192 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %193 = %192.0;
  %194 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 5, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %198 = mod(%196, %197) /* ty=Tensor[(6, 5, 2), float32] */;
  (%198,)
}

def @func_3635() -> Tensor[(6, 5, 2), float32] {
  %199 = @func_2710() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %199.2
}

def @func_11660(%var_11637: Tensor[(1, 26), bool], %var_11642: Tensor[(7, 26), bool]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(7, 26), bool], Tensor[(6, 5, 2), float32]) {
  %200 = @func_10314() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %201 = cast(%var_11637, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
  %202 = reshape(%201, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
  %203 = @func_5362(%202) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
  %204 = cast(%var_11637, dtype="int16") /* ty=Tensor[(1, 26), int16] */;
  %205 = cast(%var_11642, dtype="int16") /* ty=Tensor[(7, 26), int16] */;
  %206 = bitwise_and(%204, %205) /* ty=Tensor[(7, 26), int16] */;
  %207 = cast(%206, dtype="bool") /* ty=Tensor[(7, 26), bool] */;
  %208 = cast(%var_11637, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
  %209 = @func_11318() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) */;
  %210 = %200.0;
  %211 = %203.1;
  %212 = less(%207, %208) /* ty=Tensor[(7, 26), bool] */;
  %213 = %209.0;
  (%210, %211, %212, %213)
}

def @func_9600() -> Tensor[(6, 5, 2), float64] {
  %214 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %214.0
}

def @func_4512(%var_4484: Tensor[(14, 9, 9), uint8], %var_4485: Tensor[(14, 9, 9), uint8]) -> (Tensor[(14, 9, 9), bool], Tensor[(14, 9, 9), bool]) {
  %215 = cast(%var_4485, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %216 = shape_of(%var_4484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_4484, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = cast(%var_4484, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %220 = shape_of(%var_4485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_4485, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = not_equal(%217, %218) /* ty=Tensor[(14, 9, 9), bool] */;
  %224 = logical_and(%221, %222) /* ty=Tensor[(14, 9, 9), bool] */;
  (%223, %224)
}

def @func_13652(%var_13629: Tensor[(1, 5, 7), float64]) -> (Tensor[(1, 5, 7), float64], Tensor[(6, 5, 2), bool]) {
  %225 = cast(%var_13629, dtype="float64") /* ty=Tensor[(1, 5, 7), float64] */;
  %226 = @func_9227() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) */;
  %227 = sin(%225) /* ty=Tensor[(1, 5, 7), float64] */;
  %228 = %226.2;
  (%227, %228)
}

def @func_8351(%var_8343: Tensor[(5, 8, 4), bool]) -> (Tensor[(5, 8, 4), bool],) {
  %229 = cast(%var_8343, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
  %230 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(5, 8, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 8, 4), bool] */, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %233 = logical_and(%231, %232) /* ty=Tensor[(5, 8, 4), bool] */;
  (%233,)
}

def @func_9484() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %234 = @func_8738() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) */;
  %235 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %236 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %237 = %234.2;
  %238 = %235.1;
  %239 = %236.1;
  (%237, %238, %239)
}

def @func_13598() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %240 = @func_11380() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %241 = @func_9914() /* ty=Tensor[(6, 5, 2), float32] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_1328() -> (Tensor[(6, 5, 2), bool],) {
  %243 = @func_857() /* ty=Tensor[(6, 5, 2), bool] */;
  (%243,)
}

def @func_2710() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %244 = @func_1726() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %245 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %246 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %247 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %248 = %244.0;
  %249 = %245.0;
  %250 = %246.0;
  %251 = %247.1;
  (%248, %249, %250, %251)
}

def @func_12565() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64]) {
  %252 = @func_9771() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %253 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %254 = @func_10100() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %255 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %256 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %257 = %252.0;
  %258 = %253.2;
  %259 = %254.0;
  %260 = %255.0;
  %261 = %256.1;
  (%257, %258, %259, %260, %261)
}

def @func_10284() -> (Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) {
  %262 = cast(meta[relay.Constant][8] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %263 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 16, 1), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 1), int8] */;
  %264 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %265 = bitwise_xor(%262, %263) /* ty=Tensor[(14, 16, 1), int8] */;
  %266 = %264.0;
  (%265, %266)
}

def @func_12407(%var_12376: Tensor[(5, 1, 11), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(5, 1, 11), float64]) {
  %267 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %268 = cast(%var_12376, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
  %269 = sqrt(%268) /* ty=Tensor[(5, 1, 11), float32] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %271 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
  %272 = %267.0;
  %273 = asinh(%270) /* ty=Tensor[(5, 1, 11), float64] */;
  (%271, %272, %273)
}

def @func_13471() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64]) {
  %274 = @func_6332() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) */;
  %275 = @func_8475() /* ty=Tensor[(6, 5, 2), float32] */;
  %276 = %274.1;
  (%275, %276)
}

def @func_2485() -> (Tensor[(6, 5, 2), float32],) {
  %277 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %278 = %277.1;
  (%278,)
}

def @func_9136() -> Tensor[(6, 5, 2), float32] {
  %279 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %279.0
}

def @func_2223() -> Tensor[(6, 5, 2), float64] {
  %280 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %280.2
}

def @func_4971() -> (Tensor[(6, 5, 2), float64],) {
  %281 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %282 = %281.0;
  (%282,)
}

def @func_3063() -> (Tensor[(6, 5, 2), float32],) {
  %283 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %284 = %283.0;
  (%284,)
}

def @func_6985(%var_6981: Tensor[(4, 11, 4), float32]) -> Tensor[(4, 11, 4), float32] {
  %285 = cast(%var_6981, dtype="float32") /* ty=Tensor[(4, 11, 4), float32] */;
  sinh(%285) /* ty=Tensor[(4, 11, 4), float32] */
}

def @func_1616() -> (Tensor[(6, 5, 2), float32],) {
  %286 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %287 = %286.0;
  (%287,)
}

def @func_3817() -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) {
  %288 = @func_3208() /* ty=Tensor[(6, 5, 2), float64] */;
  %289 = cast(%288, dtype="int16") /* ty=Tensor[(6, 5, 2), int16] */;
  %290 = reshape(%289, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
  %291 = @func_1359(%290) /* ty=Tensor[(?, 12, 5), uint32] */;
  (%288, %291)
}

def @func_7830() -> Tensor[(6, 5, 2), float32] {
  %292 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %292.0
}

def @func_8208() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(12, 15, 12), float64]) {
  %293 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %295 = reshape(%294, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
  %296 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %299 = @func_3531(%295) /* ty=Tensor[(6, 5, 2), int64] */;
  %300 = acos(%298) /* ty=Tensor[(12, 15, 12), float64] */;
  (%293, %299, %300)
}

def @func_3395() -> Tensor[(6, 5, 2), float32] {
  %301 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %301.0
}

def @func_10433() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %302 = @func_9484() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %303 = @func_6274() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %304 = %302.1;
  %305 = %303.0;
  (%304, %305)
}

def @func_11048() -> Tensor[(6, 5, 2), bool] {
  @func_857() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_8860() -> Tensor[(6, 5, 2), float32] {
  @func_3350() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_12816(%var_12813: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(54), float64]) {
  %306 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %307 = cast(%var_12813, dtype="float64") /* ty=Tensor[(54), float64] */;
  %308 = reshape(%307, newshape=[27, 2]) /* ty=Tensor[(27, 2), float64] */;
  %309 = @func_7572(%308) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %310 = %306.0;
  %311 = %309.3;
  (%310, %311, %var_12813)
}

def @func_10868(%var_10847: Tensor[(15, 15, 15), float32]) -> Tensor[(15, 15, 15), float32] {
  %312 = cast(%var_10847, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  sinh(%312) /* ty=Tensor[(15, 15, 15), float32] */
}

def @func_11883() -> Tensor[(6, 5, 2), float32] {
  @func_6811() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_1339(%var_1334: Tensor[(2, 6, 2), float64]) -> (Tensor[(2, 6, 2), float64],) {
  %313 = cast(%var_1334, dtype="float64") /* ty=Tensor[(2, 6, 2), float64] */;
  %314 = acos(%313) /* ty=Tensor[(2, 6, 2), float64] */;
  (%314,)
}

def @func_2154() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %315 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %316 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %317 = %315.2;
  %318 = %316.0;
  (%317, %318)
}

def @func_9424() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) {
  %319 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %320 = %319.1;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %322 = reshape(%321, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %323 = @func_8376() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %324 = @func_576(%322) /* ty=Tensor[(6, 5, 2), int64] */;
  %325 = %323.0;
  (%320, %324, %325)
}

def @func_11003() -> (Tensor[(6, 5, 2), bool], Tensor[(24, 1), float64], Tensor[(24), float64]) {
  %326 = cast(meta[relay.Constant][10] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %327 = reshape(%326, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %328 = @func_4685(%327) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) */;
  %329 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  %330 = %328.1;
  (%329, %330, meta[relay.Constant][10] /* ty=Tensor[(24), float64] */)
}

def @func_12189() -> (Tensor[(6, 5, 2), float64],) {
  %331 = @func_9600() /* ty=Tensor[(6, 5, 2), float64] */;
  (%331,)
}

def @func_2910(%var_2898: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), float64],) {
  %332 = cast(%var_2898, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %333 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 15, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = floor_divide(%334, %335) /* ty=Tensor[(12, 15, 12), float64] */;
  (%336,)
}

def @func_2800() -> (Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %337 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 10), float32] */;
  %338 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %339 = reshape(%338, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
  %340 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %341 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %342 = asin(%337) /* ty=Tensor[(16, 5, 10), float32] */;
  %343 = @func_1359(%339) /* ty=Tensor[(?, 12, 5), uint32] */;
  %344 = %340.1;
  %345 = %341.0;
  (%342, %343, meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, %344, %345)
}

def @func_1463() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
  %346 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %347 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %348 = cast(meta[relay.Constant][14] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %349 = reshape(%348, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
  %350 = @func_1339(%349) /* ty=(Tensor[(2, 6, 2), float64],) */;
  %351 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %352 = %346.0;
  %353 = cast(%352, dtype="int16") /* ty=Tensor[(6, 5, 2), int16] */;
  %354 = reshape(%353, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
  %355 = @func_1359(%354) /* ty=Tensor[(?, 12, 5), uint32] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
  %357 = atan(%356) /* ty=Tensor[(?, 12, 5), float64] */;
  %358 = cast(%355, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = less(%360, %361) /* ty=Tensor[(?, 12, 5), bool] */;
  %363 = cast(%362, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %364 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%357, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = %347.0;
  %368 = %350.0;
  %369 = %351.0;
  %370 = logical_or(%365, %366) /* ty=Tensor[(?, 12, 5), bool] */;
  (%352, %367, %368, meta[relay.Constant][14] /* ty=Tensor[(24), float64] */, %369, %370)
}

def @func_7572(%var_7540: Tensor[(27, 2), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) {
  %371 = cast(%var_7540, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
  %372 = reshape(%371, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float64] */;
  %373 = @func_5320(%372) /* ty=(Tensor[(3, 9, 2), float64],) */;
  %374 = @func_7401() /* ty=Tensor[(6, 5, 2), float64] */;
  %375 = %373.0;
  %376 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  (%374, %375, %var_7540, %376)
}

def @func_3194() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %377 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %378 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %379 = %377.0;
  %380 = %378.0;
  (%379, %380)
}

def @func_2566() -> (Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) {
  %381 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 13), float32] */;
  %382 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %383 = log(%381) /* ty=Tensor[(16, 16, 13), float32] */;
  %384 = %382.4;
  (%383, %384)
}

def @func_11568() -> Tensor[(6, 5, 2), float32] {
  @func_9171() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_11715(%var_11705: Tensor[(780), uint32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], uint32, Tensor[(780), uint32]) {
  %385 = cast(meta[relay.Constant][16] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %386 = cast(%var_11705, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %387 = reshape(%385, newshape=[]) /* ty=uint32 */;
  %388 = reshape(%386, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint32] */;
  %389 = @func_3316(%387, %388) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) */;
  %390 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  %391 = %389.1;
  (%390, %391, meta[relay.Constant][16] /* ty=uint32 */, %var_11705)
}

def @func_10518(%var_10510: Tensor[(7, 4, 3), float32]) -> Tensor[(7, 4, 3), float32] {
  %392 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 3), float32] */;
  %393 = shape_of(%var_10510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_10510, dtype="float32") /* ty=Tensor[(7, 4, 3), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%394, %395) /* ty=Tensor[(7, 4, 3), float32] */
}

def @func_6751(%var_6719: Tensor[(270), float32]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(270), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %396 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %397 = @func_6217() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %398 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %399 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %400 = cast(%var_6719, dtype="float32") /* ty=Tensor[(270), float32] */;
  %401 = reshape(%400, newshape=[2, 9, 15]) /* ty=Tensor[(2, 9, 15), float32] */;
  %402 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %403 = @func_5507() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %404 = %396.1;
  %405 = %397.1;
  %406 = %398.0;
  %407 = %399.1;
  %408 = @func_2136(%401) /* ty=Tensor[(2, 9, 15), bool] */;
  %409 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
  %410 = %402.2;
  %411 = %403.1;
  (%404, %405, %406, %407, %408, %var_6719, %409, %410, %411)
}

def @func_11226() -> (Tensor[(6, 5, 2), float64],) {
  %412 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %413 = %412.1;
  (%413,)
}

def @func_10919() -> (Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) {
  %414 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %415 = cos(%414) /* ty=Tensor[(11, 13, 14), float64] */;
  %416 = cast(%415, dtype="bool") /* ty=Tensor[(11, 13, 14), bool] */;
  %417 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 14), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = @func_8738() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) */;
  %421 = logical_or(%418, %419) /* ty=Tensor[(11, 13, 14), bool] */;
  %422 = %420.2;
  (%421, %422)
}

def @func_7712() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %423 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %424 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %425 = @func_6550() /* ty=(Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %426 = %423.0;
  %427 = %424.0;
  %428 = %425.2;
  (%426, %427, %428)
}

def @func_2520() -> (Tensor[(6, 5, 2), float32],) {
  %429 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %430 = %429.0;
  (%430,)
}

def @func_11105(%var_11103: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64]) {
  %431 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %432 = cast(%var_11103, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %433 = reshape(%432, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %434 = @func_2910(%433) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %435 = %431.1;
  %436 = %434.0;
  (%435, %436, %var_11103)
}

def @func_10051() -> Tensor[(6, 5, 2), float32] {
  %437 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %437.3
}

def @func_10314() -> (Tensor[(6, 5, 2), bool],) {
  %438 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  (%438,)
}

def @func_12035() -> (Tensor[(6, 5, 2), float64],) {
  %439 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %440 = %439.0;
  (%440,)
}

def @func_6217() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %441 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %442 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
  %443 = %441.0;
  (%442, %443)
}

def @func_11939() -> (Tensor[(6, 5, 2), float32],) {
  %444 = @func_11423() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %445 = %444.0;
  (%445,)
}

def @func_4053() -> (Tensor[(6, 5, 2), float64],) {
  %446 = @func_3164() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %447 = %446.4;
  (%447,)
}

def @func_2968() -> (Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %448 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %449 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %450 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %451 = %448.1;
  %452 = %449.0;
  %453 = %450.0;
  (%451, %452, %453)
}

def @func_1079() -> (Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %454 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %455 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %456 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %457 = reshape(%455, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %458 = reshape(%456, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %459 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %460 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %461 = %454.0;
  %462 = @func_908(%457, %458) /* ty=Tensor[(2, 16, 2), bool] */;
  %463 = %459.0;
  %464 = %460.0;
  (%461, %462, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, %463, %464)
}

def @func_5263(%var_5255: Tensor[(13, 3, 11), float64]) -> (Tensor[(13, 3, 11), float64],) {
  %465 = cast(%var_5255, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %466 = acos(%465) /* ty=Tensor[(13, 3, 11), float64] */;
  (%466,)
}

def @func_1867() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %467 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %468 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %469 = %467.4;
  %470 = %468.0;
  (%469, %470)
}

def @func_5507() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %471 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %472 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %473 = %471.0;
  %474 = %472.0;
  (%473, %474)
}

def @func_4191() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  %475 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %476 = %475.1;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %478 = reshape(%477, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %479 = @func_576(%478) /* ty=Tensor[(6, 5, 2), int64] */;
  (%476, %479)
}

def @func_5144() -> Tensor[(6, 5, 2), float64] {
  @func_4601() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_2101(%var_2094: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
  %480 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %481 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %482 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %483 = reshape(%481, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %484 = reshape(%482, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %485 = @func_1562(%483, %484) /* ty=(Tensor[(10, 6, 11), uint8],) */;
  %486 = %480.0;
  %487 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %488 = %485.0;
  (%486, %487, %488, %var_2094)
}

def @func_1515() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %489 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %490 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %491 = %489.0;
  %492 = %490.1;
  (%491, %492)
}

def @func_2601() -> (Tensor[(6, 5, 2), float32],) {
  %493 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %494 = %493.1;
  (%494,)
}

def @func_7092(%var_7074: Tensor[(24), float32], %var_7077: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool], Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(4, 2, 3), float32], Tensor[(24), float32], Tensor[(660), uint8], Tensor[(660), uint8]) {
  %495 = @func_4752() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %496 = @func_6901() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %497 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %498 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %499 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %500 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %501 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %502 = cast(%var_7074, dtype="float32") /* ty=Tensor[(24), float32] */;
  %503 = reshape(%502, newshape=[4, 2, 3]) /* ty=Tensor[(4, 2, 3), float32] */;
  %504 = %496.0;
  %505 = cast(%504, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
  %506 = cast(%var_7077, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %507 = reshape(%505, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), uint8] */;
  %508 = reshape(%506, newshape=[660]) /* ty=Tensor[(660), uint8] */;
  %509 = @func_4444(%507, %508) /* ty=(Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) */;
  %510 = %495.0;
  %511 = %497.1;
  %512 = %498.0;
  %513 = %499.1;
  %514 = %500.0;
  %515 = %501.1;
  %516 = @func_2238(%503) /* ty=Tensor[(4, 2, 3), float32] */;
  %517 = %509.2;
  (%510, %504, %511, %512, %513, %514, %515, %516, %var_7074, %517, %var_7077)
}

def @func_2945(%var_2942: Tensor[(8, 1, 2), float64]) -> (Tensor[(8, 1, 2), float64],) {
  %518 = cast(%var_2942, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
  %519 = log10(%518) /* ty=Tensor[(8, 1, 2), float64] */;
  (%519,)
}

def @func_3487() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %520 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %521 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %522 = %520.0;
  %523 = %521.1;
  (%522, %523)
}

def @func_3800() -> (Tensor[(6, 5, 2), bool],) {
  %524 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %525 = %524.1;
  (%525,)
}

def @func_7762() -> Tensor[(6, 5, 2), float32] {
  @func_4383() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_7133(%var_7122: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(16, 16, 13), float32]) {
  %526 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %527 = cast(%var_7122, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %528 = reshape(%527, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %529 = @func_2910(%528) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %530 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %531 = %526.2;
  %532 = %529.0;
  %533 = %530.0;
  (%531, %532, %var_7122, %533)
}

def @func_3905(%var_3898: Tensor[(16), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) {
  %534 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
  %535 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %536 = cast(%var_3898, dtype="float64") /* ty=Tensor[(16), float64] */;
  %537 = reshape(%536, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %538 = @func_2945(%537) /* ty=(Tensor[(8, 1, 2), float64],) */;
  %539 = %534.0;
  %540 = @func_3350() /* ty=Tensor[(6, 5, 2), float32] */;
  %541 = %535.0;
  %542 = %538.0;
  (%539, %540, %541, %542, %var_3898)
}

def @func_3930(%var_3920: Tensor[(24, 1), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) {
  %543 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %544 = cast(%var_3920, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
  %545 = reshape(%544, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
  %546 = @func_1339(%545) /* ty=(Tensor[(2, 6, 2), float64],) */;
  %547 = %543.0;
  %548 = %546.0;
  (%547, %548, %var_3920)
}

def @func_10957() -> (Tensor[(6, 5, 2), float64],) {
  %549 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %550 = %549.1;
  (%550,)
}

def @func_4257() -> (Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) {
  %551 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %552 = %551.1;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
  %554 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %555 = cast(%552, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
  %556 = atanh(%553) /* ty=Tensor[(?, 12, 5), float32] */;
  %557 = %554.0;
  %558 = acos(%555) /* ty=Tensor[(?, 12, 5), float64] */;
  (%556, %557, %558)
}

def @func_8619() -> Tensor[(6, 5, 2), float64] {
  %559 = @func_7585() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %559.0
}

def @func_7007() -> (Tensor[(6, 5, 2), float32],) {
  %560 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %561 = %560.0;
  (%561,)
}

def @func_4103(%var_4085: int32) -> (Tensor[(1, 14), int32],) {
  %562 = cast(%var_4085, dtype="int32") /* ty=int32 */;
  %563 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 14), int32] */, dtype="int32") /* ty=Tensor[(1, 14), int32] */;
  %564 = maximum(%562, %563) /* ty=Tensor[(1, 14), int32] */;
  (%564,)
}

def @func_3700() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %565 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %566 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %567 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %568 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
  %569 = %565.0;
  %570 = %566.0;
  %571 = %567.0;
  (%568, %569, %570, %571)
}

def @func_13228() -> (Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(1, 270), float32]) {
  %572 = @func_6550() /* ty=(Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %573 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
  %574 = reshape(%573, newshape=[2, 9, 15]) /* ty=Tensor[(2, 9, 15), float32] */;
  %575 = %572.4;
  %576 = @func_2136(%574) /* ty=Tensor[(2, 9, 15), bool] */;
  (%575, %576, meta[relay.Constant][21] /* ty=Tensor[(1, 270), float32] */)
}

def @func_12317() -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float64]) {
  %577 = @func_10638() /* ty=(Tensor[(?, 12, 5), float64],) */;
  %578 = %577.0;
  %579 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %582 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%578, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = greater_equal(%583, %584) /* ty=Tensor[(?, 12, 5), bool] */;
  %586 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
  (%585, %586)
}

def @func_11318() -> (Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) {
  %587 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
  %588 = @func_5286() /* ty=Tensor[(16, 10, 15), float32] */;
  (%587, %588)
}

def @func_7525() -> (Tensor[(6, 5, 2), float64],) {
  %589 = @func_5232() /* ty=Tensor[(6, 5, 2), float64] */;
  (%589,)
}

def @func_7872() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %590 = @func_5507() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %591 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %592 = %590.0;
  %593 = %591.0;
  (%592, %593)
}

def @func_11423() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %594 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %595 = @func_6901() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %596 = %594.0;
  %597 = %595.0;
  (%596, %597)
}

def @func_4685(%var_4674: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) {
  %598 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %599 = cast(%var_4674, dtype="float64") /* ty=Tensor[(24), float64] */;
  %600 = reshape(%599, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %601 = @func_3930(%600) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) */;
  %602 = %598.0;
  %603 = %601.2;
  (%602, %603, %var_4674)
}

def @func_4383() -> Tensor[(6, 5, 2), float32] {
  %604 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %604.0
}

def @func_3785() -> (Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) {
  %605 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %606 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %607 = %605.0;
  %608 = %606.1;
  (%607, %608)
}

def @func_8496() -> Tensor[(6, 5, 2), float64] {
  %609 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
  %609.0
}

def @func_13170() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int32]) {
  %610 = @func_3276() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) */;
  %611 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
  %612 = @func_857() /* ty=Tensor[(6, 5, 2), bool] */;
  %613 = @func_8475() /* ty=Tensor[(6, 5, 2), float32] */;
  %614 = %610.1;
  (%611, %612, %613, %614)
}

def @func_11212() -> (Tensor[(6, 5, 2), uint16],) {
  %615 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %616 = %615.0;
  %617 = @func_10314() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %618 = %617.0;
  %619 = cast(%618, dtype="uint16") /* ty=Tensor[(6, 5, 2), uint16] */;
  %620 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%616, dtype="uint16") /* ty=Tensor[(6, 5, 2), uint16] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %623 = bitwise_or(%621, %622) /* ty=Tensor[(6, 5, 2), uint16] */;
  (%623,)
}

def @func_9359(%var_9328: Tensor[(16, 11, 5), float32], %var_9329: Tensor[(16, 11, 5), float32], %var_9355: Tensor[(16, 11, 5), float32]) -> (Tensor[(16, 11, 5), int16],) {
  %624 = cast(%var_9329, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %625 = shape_of(%var_9328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_9328, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %628 = floor_mod(%626, %627) /* ty=Tensor[(16, 11, 5), float32] */;
  %629 = cast(%var_9329, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %633 = power(%631, %632) /* ty=Tensor[(16, 11, 5), float32] */;
  %634 = cast(%var_9355, dtype="int16") /* ty=Tensor[(16, 11, 5), int16] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="int16") /* ty=Tensor[(16, 11, 5), int16] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %638 = add(%636, %637) /* ty=Tensor[(16, 11, 5), int16] */;
  (%638,)
}

def @func_11964() -> (Tensor[(6, 5, 2), float64],) {
  %639 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %640 = %639.0;
  (%640,)
}

def @func_3276() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) {
  %641 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %642 = %641.1;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %644 = reshape(%643, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %645 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %646 = @func_1699(%644) /* ty=Tensor[(6, 5, 2), int32] */;
  %647 = %645.0;
  (%642, %646, %647)
}

def @func_7486() -> Tensor[(6, 5, 2), float32] {
  %648 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %648.0
}

def @func_6978() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %649 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %650 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %651 = %649.1;
  %652 = %650.0;
  (%651, %652)
}

def @func_4214() -> Tensor[(6, 5, 2), float32] {
  %653 = @func_2440() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %653.1
}

def @func_732() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %654 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %655 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %656 = %654.2;
  %657 = %655.3;
  (%656, %657)
}

def @func_7401() -> Tensor[(6, 5, 2), float64] {
  %658 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %658.1
}

def @func_8088(%var_8012: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) {
  %659 = cast(%var_8012, dtype="float64") /* ty=Tensor[(12, 2, 8), float64] */;
  %660 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %661 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %662 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %663 = cast(meta[relay.Constant][22] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %664 = reshape(%663, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %665 = @func_3905(%664) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) */;
  %666 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %667 = atanh(%659) /* ty=Tensor[(12, 2, 8), float64] */;
  %668 = %660.1;
  %669 = %661.0;
  %670 = %662.2;
  %671 = %665.3;
  %672 = %666.1;
  (%667, %668, %669, %670, %671, meta[relay.Constant][22] /* ty=Tensor[(16), float64] */, %672)
}

def @func_8908() -> Tensor[(6, 5, 2), bool] {
  %673 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %673.2
}

def @func_7585() -> (Tensor[(6, 5, 2), float64],) {
  %674 = @func_4305() /* ty=Tensor[(6, 5, 2), float64] */;
  (%674,)
}

def @func_1726() -> (Tensor[(6, 5, 2), float32],) {
  %675 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %677 = log(%676) /* ty=Tensor[(6, 5, 2), float32] */;
  (%677,)
}

def @func_2238(%var_2232: Tensor[(4, 2, 3), float32]) -> Tensor[(4, 2, 3), float32] {
  %678 = cast(%var_2232, dtype="float32") /* ty=Tensor[(4, 2, 3), float32] */;
  tan(%678) /* ty=Tensor[(4, 2, 3), float32] */
}

def @func_10638() -> (Tensor[(?, 12, 5), float64],) {
  %679 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %680 = %679.2;
  (%680,)
}

def @func_10618() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(192), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
  %681 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %682 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %683 = reshape(%682, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float64] */;
  %684 = @func_8088(%683) /* ty=(Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) */;
  %685 = @func_9484() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %686 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %687 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %688 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %689 = reshape(%687, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
  %690 = reshape(%688, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
  %691 = @func_7383(%689, %690) /* ty=(Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) */;
  %692 = %681.2;
  %693 = %684.1;
  %694 = %685.2;
  %695 = %686.1;
  %696 = %691.1;
  (%692, %693, meta[relay.Constant][23] /* ty=Tensor[(192), float64] */, %694, %695, %696, meta[relay.Constant][24] /* ty=Tensor[(72), float32] */)
}

def @func_1562(%var_1552: Tensor[(10, 6, 11), uint8], %var_1553: Tensor[(10, 6, 11), uint8]) -> (Tensor[(10, 6, 11), uint8],) {
  %697 = cast(%var_1553, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %698 = shape_of(%var_1552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_1552, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %701 = logical_xor(%699, %700) /* ty=Tensor[(10, 6, 11), uint8] */;
  (%701,)
}

def @func_4637() -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
  %702 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %704 = reshape(%703, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
  %705 = @func_4000(%704) /* ty=(Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %706 = %705.0;
  (%702, %706)
}

def @func_908(%var_902: Tensor[(2, 16, 2), float32], %var_903: Tensor[(2, 16, 2), float32]) -> Tensor[(2, 16, 2), bool] {
  %707 = cast(%var_903, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %708 = shape_of(%var_902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_902, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%709, %710) /* ty=Tensor[(2, 16, 2), bool] */
}

def @func_4926() -> (Tensor[(3, 13, 8), uint16],) {
  %711 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="uint16") /* ty=Tensor[(3, 13, 8), uint16] */;
  %712 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="uint16") /* ty=Tensor[(3, 13, 8), uint16] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %715 = right_shift(%713, %714) /* ty=Tensor[(3, 13, 8), uint16] */;
  (%715,)
}

def @func_5467() -> (Tensor[(6, 5, 2), float32],) {
  %716 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %717 = %716.0;
  (%717,)
}

def @func_4353() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %718 = @func_4053() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %719 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
  %720 = %718.0;
  (%719, %720)
}

def @func_1136() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %721 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %722 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %723 = %721.1;
  %724 = %722.0;
  (%723, %724)
}

def @func_4752() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
  %725 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %726 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %727 = %725.2;
  %728 = %726.0;
  (%727, %728)
}

def @func_6901() -> (Tensor[(6, 5, 2), float64],) {
  %729 = @func_4053() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %730 = %729.0;
  (%730,)
}

def @func_4801() -> (Tensor[(6, 5, 2), float32],) {
  %731 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %732 = %731.0;
  (%732,)
}

def @func_5183() -> (Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) {
  %733 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %734 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %735 = sigmoid(%733) /* ty=Tensor[(11, 10, 13), float32] */;
  %736 = %734.1;
  (%735, %736)
}

def @func_534() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
  %737 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %738 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %739 = %737.1;
  %740 = %738.1;
  (%739, %740)
}

def @func_11514() -> Tensor[(6, 5, 2), float64] {
  %741 = @func_7430() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) */;
  %741.1
}

def @func_2862() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %742 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %743 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %744 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %745 = %742.0;
  %746 = %743.0;
  %747 = %744.3;
  (%745, %746, %747)
}

def @func_5003() -> Tensor[(6, 5, 2), bool] {
  %748 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %748.1
}

def @func_747() -> (Tensor[(6, 5, 2), float64],) {
  %749 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %750 = %749.1;
  (%750,)
}

def @func_2440() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %751 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %752 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %753 = %751.1;
  %754 = %752.0;
  (%753, %754)
}

def @func_4000(%var_3946: Tensor[(6, 5, 2), float32]) -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %755 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %756 = %755.1;
  %757 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %758 = %757.1;
  %759 = cast(%var_3946, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %763 = divide(%761, %762) /* ty=Tensor[(6, 5, 2), float64] */;
  %764 = cast(%763, dtype="uint32") /* ty=Tensor[(6, 5, 2), uint32] */;
  %765 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%756, dtype="uint32") /* ty=Tensor[(?, 12, 5), uint32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %768 = subtract(%766, %767) /* ty=Tensor[(?, 12, 5), uint32] */;
  %769 = cast(%756, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %774 = @func_3063() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %775 = logical_and(%771, %772) /* ty=Tensor[(?, 12, 5), bool] */;
  %776 = @func_3395() /* ty=Tensor[(6, 5, 2), float32] */;
  %777 = %773.0;
  %778 = %774.0;
  (%775, %776, %777, %778)
}

def @func_5926() -> Tensor[(6, 5, 2), bool] {
  %779 = @func_3785() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) */;
  %779.0
}

def @func_4287() -> (Tensor[(6, 5, 2), float32],) {
  %780 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  (%780,)
}

def @func_5740() -> Tensor[(6, 5, 2), bool] {
  %781 = @func_2440() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %781.0
}

def @func_4601() -> Tensor[(6, 5, 2), float64] {
  %782 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %782.0
}

def @func_9227() -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) {
  %783 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %784 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %785 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %786 = %783.5;
  %787 = %784.2;
  (%785, %786, %787)
}

def @func_5320(%var_5308: Tensor[(3, 9, 2), float64]) -> (Tensor[(3, 9, 2), float64],) {
  %788 = cast(%var_5308, dtype="float64") /* ty=Tensor[(3, 9, 2), float64] */;
  %789 = rsqrt(%788) /* ty=Tensor[(3, 9, 2), float64] */;
  (%789,)
}

def @func_7383(%var_7366: Tensor[(9, 8, 1), float32], %var_7367: Tensor[(9, 8, 1), float32]) -> (Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) {
  %790 = cast(%var_7367, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %791 = shape_of(%var_7366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_7366, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = @func_5983() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %795 = mod(%792, %793) /* ty=Tensor[(9, 8, ?), float32] */;
  %796 = %794.1;
  (%795, %796)
}

def @func_8475() -> Tensor[(6, 5, 2), float32] {
  %797 = @func_3164() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %797.5
}

def @func_6673() -> (Tensor[(6, 5, 2), float32],) {
  %798 = @func_4214() /* ty=Tensor[(6, 5, 2), float32] */;
  (%798,)
}

def @func_9059(%var_9054: Tensor[(4, 13, 8), float64]) -> (Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) {
  %799 = cast(%var_9054, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
  %800 = cast(%var_9054, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
  %801 = erf(%799) /* ty=Tensor[(4, 13, 8), float64] */;
  %802 = rsqrt(%800) /* ty=Tensor[(4, 13, 8), float64] */;
  (%801, %802)
}

def @func_7992() -> (Tensor[(3, 13, 8), uint16],) {
  %803 = @func_4926() /* ty=(Tensor[(3, 13, 8), uint16],) */;
  %804 = %803.0;
  (%804,)
}

def @func_5232() -> Tensor[(6, 5, 2), float64] {
  %805 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %805.0
}

def @func_6550() -> (Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
  %806 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %809 = reshape(%808, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
  %810 = @func_3531(%809) /* ty=Tensor[(6, 5, 2), int64] */;
  %811 = cast(%810, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %812 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%807, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %815 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %816 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %817 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %818 = maximum(%813, %814) /* ty=Tensor[(6, 5, 2), int8] */;
  %819 = %815.0;
  %820 = %816.0;
  %821 = @func_4383() /* ty=Tensor[(6, 5, 2), float32] */;
  %822 = %817.4;
  %823 = @func_5926() /* ty=Tensor[(6, 5, 2), bool] */;
  (%818, %819, %820, %821, %822, %823)
}

def @func_10304(%var_10297: Tensor[(2, 16, 12), float64]) -> (Tensor[(2, 16, 12), float64], Tensor[(6, 5, 2), float32]) {
  %824 = cast(%var_10297, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %825 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %826 = atan(%824) /* ty=Tensor[(2, 16, 12), float64] */;
  %827 = %825.1;
  (%826, %827)
}

def @func_9771() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %828 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %829 = @func_8496() /* ty=Tensor[(6, 5, 2), float64] */;
  %830 = %828.1;
  (%829, %830)
}

def @func_3531(%var_3519: Tensor[(6, 5, 2), float32]) -> Tensor[(6, 5, 2), int64] {
  %831 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %832 = %831.0;
  %833 = cast(%var_3519, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%835, %836) /* ty=Tensor[(6, 5, 2), int64] */
}

def @func_9887(%var_9837: Tensor[(13, 6, 5), bool]) -> (Tensor[(13, 6, 5), bool], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), uint8], Tensor[(13, 3, 11), float64], Tensor[(429), float64], Tensor[(6, 5, 2), float32]) {
  %837 = cast(%var_9837, dtype="bool") /* ty=Tensor[(13, 6, 5), bool] */;
  %838 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 6, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 6, 5), bool] */, dtype="bool") /* ty=Tensor[(13, 6, 5), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = cast(meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %842 = cast(meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %843 = reshape(%841, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %844 = reshape(%842, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %845 = @func_6217() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %846 = cast(meta[relay.Constant][30] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %847 = reshape(%846, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
  %848 = @func_5263(%847) /* ty=(Tensor[(13, 3, 11), float64],) */;
  %849 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %850 = logical_and(%839, %840) /* ty=Tensor[(13, 6, 5), bool] */;
  %851 = @func_908(%843, %844) /* ty=Tensor[(2, 16, 2), bool] */;
  %852 = %845.1;
  %853 = %848.0;
  %854 = %849.0;
  (%850, %851, meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, %852, %853, meta[relay.Constant][30] /* ty=Tensor[(429), float64] */, %854)
}

def @func_4469() -> (Tensor[(6, 5, 2), float32],) {
  %855 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %856 = %855.0;
  (%856,)
}

def @func_13142() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %857 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %858 = @func_10100() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %859 = %857.1;
  %860 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
  %861 = %858.1;
  (%859, %860, %861)
}

def @func_9326() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) {
  %862 = @func_7607() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %863 = @func_7712() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %864 = cast(meta[relay.Constant][31] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %865 = reshape(%864, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
  %866 = @func_1339(%865) /* ty=(Tensor[(2, 6, 2), float64],) */;
  %867 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
  %868 = %862.1;
  %869 = %863.0;
  %870 = %866.0;
  (%867, %868, %869, %870, meta[relay.Constant][31] /* ty=Tensor[(24), float64] */)
}

def @func_13391(%var_13386: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(24), float64]) {
  %871 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %872 = @func_9326() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) */;
  %873 = cast(%var_13386, dtype="float64") /* ty=Tensor[(24), float64] */;
  %874 = reshape(%873, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %875 = @func_3930(%874) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) */;
  %876 = %871.0;
  %877 = %872.2;
  %878 = %875.0;
  (%876, %877, %878, %var_13386)
}

def @func_10808() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64]) {
  %879 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %880 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %881 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %882 = %879.0;
  %883 = %880.0;
  %884 = %881.1;
  (%882, %883, %884)
}

def @func_514() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) {
  %885 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %886 = %885.1;
  %887 = cast(%886, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %888 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %889 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %890 = %889.1;
  %891 = cast(%890, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %892 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %893 = %892.0;
  %894 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 2), float32] */, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %898 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %899 = cos(%887) /* ty=Tensor[(6, 5, 2), float64] */;
  %900 = %888.2;
  %901 = atanh(%891) /* ty=Tensor[(6, 5, 2), float32] */;
  %902 = logical_xor(%896, %897) /* ty=Tensor[(6, 5, 2), uint8] */;
  %903 = %898.1;
  (%899, %900, %901, %902, %903)
}

def @func_8664(%var_8653: Tensor[(13, 2), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(2, 7, 13), bool], Tensor[(13, 2), bool], Tensor[(6, 5, 2), float64]) {
  %904 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %905 = cast(%var_8653, dtype="bool") /* ty=Tensor[(13, 2), bool] */;
  %906 = reshape(%905, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
  %907 = @func_5362(%906) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
  %908 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %909 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  %910 = %904.1;
  %911 = %907.0;
  %912 = %908.0;
  (%909, %910, %911, %var_8653, %912)
}

def @func_2315() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %913 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %914 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %915 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %916 = %913.0;
  %917 = %914.0;
  %918 = %915.0;
  (%916, %917, %918)
}

def @func_13526() -> (Tensor[(6, 5, 2), float64], Tensor[(2160), float64], Tensor[(24), float64], Tensor[(14, 16, 1), int8]) {
  %919 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %920 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %921 = @func_10284() /* ty=(Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) */;
  %922 = @func_9600() /* ty=Tensor[(6, 5, 2), float64] */;
  %923 = %919.2;
  %924 = %920.3;
  %925 = %921.0;
  (%922, %923, %924, %925)
}

def @func_5983() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %926 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %927 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %928 = %926.2;
  %929 = %927.0;
  (%928, %929)
}

def @func_1005() -> Tensor[(6, 5, 2), float64] {
  %930 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %930.0
}

def @func_11832(%var_11796: Tensor[(15, 5, 5), uint8], %var_11828: Tensor[(110, 6), uint8]) -> (Tensor[(6, 5, 2), float32], Tensor[(15, 5, ?), bool], Tensor[(15, 5, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(10, 6, 11), uint8], Tensor[(110, 6), uint8]) {
  %931 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %932 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %933 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 1), uint8] */;
  %934 = left_shift(%932, %933) /* ty=Tensor[(15, 5, 1), uint8] */;
  %935 = cast(%934, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %936 = log(%935) /* ty=Tensor[(15, 5, 1), float64] */;
  %937 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %942 = cast(%var_11796, dtype="bool") /* ty=Tensor[(15, 5, 5), bool] */;
  %943 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %944 = cast(%var_11828, dtype="uint8") /* ty=Tensor[(110, 6), uint8] */;
  %945 = cast(%var_11828, dtype="uint8") /* ty=Tensor[(110, 6), uint8] */;
  %946 = reshape(%944, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %947 = reshape(%945, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %948 = @func_1562(%946, %947) /* ty=(Tensor[(10, 6, 11), uint8],) */;
  %949 = %931.0;
  %950 = greater(%939, %940) /* ty=Tensor[(15, 5, ?), bool] */;
  %951 = less_equal(%941, %942) /* ty=Tensor[(15, 5, 5), bool] */;
  %952 = %943.0;
  %953 = @func_5232() /* ty=Tensor[(6, 5, 2), float64] */;
  %954 = %948.0;
  (%949, %950, %951, %952, %953, %954, %var_11828)
}

def @func_6811() -> Tensor[(6, 5, 2), float32] {
  @func_983() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_9192() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %955 = @func_7607() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %956 = %955.1;
  %957 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
  (%956, %957)
}

def @func_397() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %958 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %959 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %960 = erf(%959) /* ty=Tensor[(6, 5, 2), float32] */;
  %961 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %962 = shape_of(%960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %963 = cast(%960, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %965 = cast(%960, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %966 = acosh(%958) /* ty=Tensor[(6, 5, 2), float32] */;
  %967 = less(%963, %964) /* ty=Tensor[(6, 5, 2), bool] */;
  %968 = acos(%965) /* ty=Tensor[(6, 5, 2), float64] */;
  (%966, %967, %968)
}

def @func_6870() -> (Tensor[(6, 5, 2), float32],) {
  %969 = @func_2710() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %970 = %969.0;
  (%970,)
}

def @func_4579(%var_4572: int32) -> (Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16, 1), float64], Tensor[(6, 5, 2), float32], Tensor[(1, 14), int32], int32, Tensor[(6, 5, 2), bool]) {
  %971 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %972 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
  %973 = reshape(%972, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %974 = @func_2945(%973) /* ty=(Tensor[(8, 1, 2), float64],) */;
  %975 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %976 = cast(%var_4572, dtype="int32") /* ty=int32 */;
  %977 = reshape(%976, newshape=[]) /* ty=int32 */;
  %978 = @func_4103(%977) /* ty=(Tensor[(1, 14), int32],) */;
  %979 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %980 = %971.0;
  %981 = %974.0;
  %982 = %975.0;
  %983 = %978.0;
  %984 = %979.2;
  (%980, %981, meta[relay.Constant][36] /* ty=Tensor[(16, 1), float64] */, %982, %983, %var_4572, %984)
}

def @func_2461() -> (Tensor[(6, 5, 2), float32],) {
  %985 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %986 = %985.0;
  (%986,)
}

def @func_8780() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %987 = @func_7872() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %988 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %989 = @func_3208() /* ty=Tensor[(6, 5, 2), float64] */;
  %990 = %987.0;
  (%988, %989, %990)
}

def @func_1924() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %991 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %992 = %991.0;
  %993 = cast(%992, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %994 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %995 = atan(%993) /* ty=Tensor[(6, 5, 2), float32] */;
  %996 = %994.0;
  (%995, %996)
}

def @func_1810() -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) {
  %997 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %998 = %997.0;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %1000 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %1001 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %1002 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %1003 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1004 = log10(%999) /* ty=Tensor[(6, 5, 2), float32] */;
  %1005 = %1000.5;
  %1006 = %1001.0;
  %1007 = %1002.3;
  %1008 = %1003.0;
  (%1004, %1005, %1006, %1007, %1008)
}

def @func_1296() -> (Tensor[(6, 5, 2), float32],) {
  %1009 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1010 = %1009.0;
  (%1010,)
}

def @func_6452() -> (Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) {
  %1011 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %1012 = cast(meta[relay.Constant][37] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %1013 = reshape(%1012, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %1014 = @func_2910(%1013) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %1015 = cast(meta[relay.Constant][37] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %1016 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1017 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %1018 = %1011.1;
  %1019 = %1014.0;
  %1020 = sinh(%1015) /* ty=Tensor[(2160), float64] */;
  %1021 = %1016.0;
  %1022 = %1017.2;
  (%1018, %1019, %1020, %1021, %1022)
}

def @func_11747() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %1023 = @func_10919() /* ty=(Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) */;
  %1024 = @func_4157() /* ty=Tensor[(6, 5, 2), bool] */;
  %1025 = %1023.1;
  (%1024, %1025)
}

def @func_5286() -> Tensor[(16, 10, 15), float32] {
  %1026 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
  sigmoid(%1026) /* ty=Tensor[(16, 10, 15), float32] */
}

def @func_2136(%var_2130: Tensor[(2, 9, 15), float32]) -> Tensor[(2, 9, 15), bool] {
  %1027 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 9, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %1028 = shape_of(%var_2130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(%var_2130, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%1029, %1030) /* ty=Tensor[(2, 9, 15), bool] */
}

def @func_8309(%var_8273: uint32, %var_8274: Tensor[(5, 156), uint32]) -> (Tensor[(6, 5, 2), float32], Tensor[(13, 10, 6), bool], uint32, Tensor[(5, 156), uint32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %1031 = cast(%var_8273, dtype="uint32") /* ty=uint32 */;
  %1032 = cast(%var_8274, dtype="uint32") /* ty=Tensor[(5, 156), uint32] */;
  %1033 = reshape(%1031, newshape=[]) /* ty=uint32 */;
  %1034 = reshape(%1032, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint32] */;
  %1035 = @func_3316(%1033, %1034) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) */;
  %1036 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1037 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1038 = @func_4383() /* ty=Tensor[(6, 5, 2), float32] */;
  %1039 = %1035.0;
  %1040 = %1036.0;
  %1041 = %1037.0;
  (%1038, %1039, %var_8273, %var_8274, %1040, %1041)
}

def @func_2496(%var_2490: Tensor[(12, 6, 9), float32], %var_2491: Tensor[(12, 6, 9), float32]) -> (Tensor[(12, 6, 9), bool],) {
  %1042 = cast(%var_2491, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %1043 = shape_of(%var_2490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%var_2490, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1046 = equal(%1044, %1045) /* ty=Tensor[(12, 6, 9), bool] */;
  (%1046,)
}

def @func_4612() -> (Tensor[(6, 5, 2), float32],) {
  %1047 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1048 = %1047.0;
  (%1048,)
}

def @func_5524() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %1049 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %1050 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %1051 = %1049.1;
  %1052 = %1050.1;
  (%1051, %1052)
}

def @func_7430() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
  %1053 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %1054 = cast(meta[relay.Constant][40] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1055 = cast(meta[relay.Constant][40] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1056 = reshape(%1054, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
  %1057 = reshape(%1055, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
  %1058 = @func_7383(%1056, %1057) /* ty=(Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) */;
  %1059 = %1053.0;
  %1060 = %1058.1;
  (%1059, %1060, meta[relay.Constant][40] /* ty=Tensor[(72), float32] */)
}

def @func_11730() -> (Tensor[(6, 5, 2), bool],) {
  %1061 = @func_5740() /* ty=Tensor[(6, 5, 2), bool] */;
  (%1061,)
}

def @func_5362(%var_5347: Tensor[(2, 1, 13), bool]) -> (Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) {
  %1062 = cast(%var_5347, dtype="bool") /* ty=Tensor[(2, 1, 13), bool] */;
  %1063 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %1064 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %1065 = logical_or(%1062, %1063) /* ty=Tensor[(2, 7, 13), bool] */;
  %1066 = %1064.1;
  (%1065, %1066)
}

def @func_6178(%var_6114: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(54), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %1067 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %1068 = cast(%var_6114, dtype="float64") /* ty=Tensor[(54), float64] */;
  %1069 = reshape(%1068, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float64] */;
  %1070 = @func_5320(%1069) /* ty=(Tensor[(3, 9, 2), float64],) */;
  %1071 = @func_4469() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1072 = %1067.1;
  %1073 = %1070.0;
  %1074 = %1071.0;
  %1075 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  (%1072, %1073, %var_6114, %1074, %1075)
}

def @func_6274() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %1076 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
  %1077 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %1078 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1079 = %1076.0;
  %1080 = %1077.0;
  %1081 = %1078.0;
  (%1079, %1080, %1081)
}

def @func_8738() -> (Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) {
  %1082 = @func_7992() /* ty=(Tensor[(3, 13, 8), uint16],) */;
  %1083 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1084 = @func_5740() /* ty=Tensor[(6, 5, 2), bool] */;
  %1085 = %1082.0;
  %1086 = %1083.0;
  (%1084, %1085, %1086)
}

def @func_3208() -> Tensor[(6, 5, 2), float64] {
  %1087 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %1087.1
}

def @func_9171() -> Tensor[(6, 5, 2), float32] {
  @func_3635() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_6332() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) {
  %1088 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %1090 = reshape(%1089, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %1091 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1092 = @func_576(%1090) /* ty=Tensor[(6, 5, 2), int64] */;
  %1093 = %1091.0;
  (%1088, %1092, %1093)
}

def @func_3350() -> Tensor[(6, 5, 2), float32] {
  @func_983() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_8257() -> Tensor[(6, 5, 2), float32] {
  %1094 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  %1095 = cast(%1094, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  log2(%1095) /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_7607() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %1096 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %1097 = @func_4214() /* ty=Tensor[(6, 5, 2), float32] */;
  %1098 = %1096.3;
  (%1097, %1098)
}

def @func_10382() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  %1099 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %1100 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %1101 = @func_9424() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) */;
  %1102 = %1099.0;
  %1103 = %1100.1;
  %1104 = %1101.1;
  (%1102, %1103, %1104)
}

def @func_8376() -> (Tensor[(6, 5, 2), bool],) {
  %1105 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %1106 = %1105.0;
  (%1106,)
}

def @func_10478(%var_10456: Tensor[(14, 15, 12), float32], %var_10472: Tensor[(26), bool], %var_10473: Tensor[(234), bool]) -> (Tensor[(6, 5, 2), float32], Tensor[(26), bool], Tensor[(234), bool], Tensor[(14, 15, 12), float32]) {
  %1107 = cast(%var_10472, dtype="bool") /* ty=Tensor[(26), bool] */;
  %1108 = cast(%var_10473, dtype="bool") /* ty=Tensor[(234), bool] */;
  %1109 = reshape(%1107, newshape=[1, 26]) /* ty=Tensor[(1, 26), bool] */;
  %1110 = reshape(%1108, newshape=[9, 26]) /* ty=Tensor[(9, 26), bool] */;
  %1111 = @func_9015(%1109, %1110) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) */;
  %1112 = cast(%var_10456, dtype="float32") /* ty=Tensor[(14, 15, 12), float32] */;
  %1113 = asinh(%1112) /* ty=Tensor[(14, 15, 12), float32] */;
  %1114 = cast(%1113, dtype="float32") /* ty=Tensor[(14, 15, 12), float32] */;
  %1115 = %1111.1;
  %1116 = cosh(%1114) /* ty=Tensor[(14, 15, 12), float32] */;
  (%1115, %var_10472, %var_10473, %1116)
}

def @func_13070(%var_13011: Tensor[(3, 30), uint32]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(3, 30), bool], Tensor[(?, 12, 5), float64], Tensor[(3, 30), float64], Tensor[(3, 30), float64]) {
  %1117 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %1118 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1119 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
  %1120 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
  %1121 = reshape(%1119, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
  %1122 = reshape(%1120, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
  %1123 = @func_12630(%1121, %1122) /* ty=(Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %1124 = %1123.0;
  %1125 = cast(%1124, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
  %1126 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1127 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
  %1128 = dyn.reshape(%1125, %1126, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1129 = bitwise_and(%1127, %1128) /* ty=Tensor[(3, 30), uint32] */;
  %1130 = cast(%1129, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
  %1131 = shape_of(%var_13011, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1132 = cast(%var_13011, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
  %1133 = dyn.reshape(%1130, %1131, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1134 = @func_10638() /* ty=(Tensor[(?, 12, 5), float64],) */;
  %1135 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %1136 = shape_of(%1129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1137 = cast(%1129, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %1138 = dyn.reshape(%1135, %1136, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1139 = cast(%var_13011, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
  %1140 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1141 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1143 = logical_xor(%1141, %1142) /* ty=Tensor[(3, 30), uint32] */;
  %1144 = cast(%var_13011, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1146 = cast(%1143, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1148 = %1117.0;
  %1149 = @func_7486() /* ty=Tensor[(6, 5, 2), float32] */;
  %1150 = %1118.0;
  %1151 = greater(%1132, %1133) /* ty=Tensor[(3, 30), bool] */;
  %1152 = %1134.0;
  %1153 = floor_mod(%1137, %1138) /* ty=Tensor[(3, 30), float64] */;
  %1154 = minimum(%1146, %1147) /* ty=Tensor[(3, 30), float64] */;
  (%1148, %1149, %1150, %1151, %1152, %1153, %1154)
}

def @func_13365() -> Tensor[(6, 5, 2), float32] {
  %1155 = @func_2485() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1155.0
}

def @func_1359(%var_1349: Tensor[(1, 12, 5), int16]) -> Tensor[(?, 12, 5), uint32] {
  %1156 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 12, 5), int16] */, dtype="int16") /* ty=Tensor[(1, 12, 5), int16] */;
  %1157 = shape_of(%var_1349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1158 = cast(%var_1349, dtype="int16") /* ty=Tensor[(1, 12, 5), int16] */;
  %1159 = dyn.reshape(%1156, %1157, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1160 = add(%1158, %1159) /* ty=Tensor[(?, 12, 5), int16] */;
  %1161 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 12, 5), int16] */, dtype="uint32") /* ty=Tensor[(1, 12, 5), uint32] */;
  %1162 = shape_of(%1160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1163 = cast(%1160, dtype="uint32") /* ty=Tensor[(?, 12, 5), uint32] */;
  %1164 = dyn.reshape(%1161, %1162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%1163, %1164) /* ty=Tensor[(?, 12, 5), uint32] */
}

def @func_11497(%var_11479: Tensor[(14, 12, 5), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(14, 12, 5), bool]) {
  %1165 = @func_8780() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1166 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %1167 = %1166.4;
  %1168 = cast(%1167, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %1169 = cast(%var_11479, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
  %1170 = %1165.2;
  %1171 = logical_and(%1168, %1169) /* ty=Tensor[(14, 12, 5), bool] */;
  (%1170, %1171)
}

def @func_9015(%var_8988: Tensor[(1, 26), bool], %var_8996: Tensor[(9, 26), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) {
  %1172 = @func_6978() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1173 = cast(%var_8988, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
  %1174 = reshape(%1173, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
  %1175 = @func_5362(%1174) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
  %1176 = cast(%var_8988, dtype="int8") /* ty=Tensor[(1, 26), int8] */;
  %1177 = cast(%var_8996, dtype="int8") /* ty=Tensor[(9, 26), int8] */;
  %1178 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1179 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %1180 = %1172.0;
  %1181 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
  %1182 = %1175.0;
  %1183 = bitwise_and(%1176, %1177) /* ty=Tensor[(9, 26), int8] */;
  %1184 = %1178.0;
  %1185 = %1179.0;
  (%1180, %1181, %1182, %1183, %1184, %1185)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6811() -> Tensor[(6, 5, 2), float32] {
  @func_983() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_11049() -> Tensor[(6, 5, 2), bool] {
  %0 = fn () -> Tensor[(6, 5, 2), bool] {
    @func_857() /* ty=Tensor[(6, 5, 2), bool] */
  };
  %0() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_7872() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %1 = @func_5507() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %2 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %3 = %1.0;
  %4 = %2.0;
  (%3, %4)
}

def @func_11318() -> (Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) {
  %5 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
  %6 = @func_5286() /* ty=Tensor[(16, 10, 15), float32] */;
  (%5, %6)
}

def @func_10217() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %11 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
    %7 = @func_9831() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %8 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
    %9 = %7.0;
    %10 = %8.4;
    (%9, %10)
  };
  %11() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_2947(%var_2946: Tensor[(8, 1, 2), float64]) -> (Tensor[(8, 1, 2), float64],) {
  %14 = fn (%var_2942: Tensor[(8, 1, 2), float64]) -> (Tensor[(8, 1, 2), float64],) {
    %12 = cast(%var_2942, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
    %13 = log10(%12) /* ty=Tensor[(8, 1, 2), float64] */;
    (%13,)
  };
  %14(%var_2946) /* ty=(Tensor[(8, 1, 2), float64],) */
}

def @func_13655(%var_13653: Tensor[(1, 5, 7), float64]) -> (Tensor[(1, 5, 7), float64], Tensor[(6, 5, 2), bool]) {
  @func_13652(%var_13653) /* ty=(Tensor[(1, 5, 7), float64], Tensor[(6, 5, 2), bool]) */
}

def @func_6872() -> (Tensor[(6, 5, 2), float32],) {
  @func_6870() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_2223() -> Tensor[(6, 5, 2), float64] {
  %15 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %15.2
}

def @func_8259() -> Tensor[(6, 5, 2), float32] {
  @func_8257() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_5525() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %20 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
    %16 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %17 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %18 = %16.1;
    %19 = %17.1;
    (%18, %19)
  };
  %20() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_10360() -> Tensor[(6, 5, 2), float32] {
  @func_10358() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_8909() -> Tensor[(6, 5, 2), bool] {
  %22 = fn () -> Tensor[(6, 5, 2), bool] {
    %21 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %21.2
  };
  %22() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_7133(%var_7122: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(16, 16, 13), float32]) {
  %23 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %24 = cast(%var_7122, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %25 = reshape(%24, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %26 = @func_2910(%25) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %27 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %28 = %23.2;
  %29 = %26.0;
  %30 = %27.0;
  (%28, %29, %var_7122, %30)
}

def @func_2864() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_7136(%var_7134: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(16, 16, 13), float32]) {
  @func_7133(%var_7134) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(16, 16, 13), float32]) */
}

def @func_4305() -> Tensor[(6, 5, 2), float64] {
  %31 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  sin(%33) /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_2800() -> (Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 10), float32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %36 = reshape(%35, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
  %37 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %38 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %39 = asin(%34) /* ty=Tensor[(16, 5, 10), float32] */;
  %40 = @func_1359(%36) /* ty=Tensor[(?, 12, 5), uint32] */;
  %41 = %37.1;
  %42 = %38.0;
  (%39, %40, meta[relay.Constant][1] /* ty=Tensor[(60), int16] */, %41, %42)
}

def @func_4927() -> (Tensor[(3, 13, 8), uint16],) {
  %48 = fn () -> (Tensor[(3, 13, 8), uint16],) {
    %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="uint16") /* ty=Tensor[(3, 13, 8), uint16] */;
    %44 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 13, 8), uint16] */, dtype="uint16") /* ty=Tensor[(3, 13, 8), uint16] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %47 = right_shift(%45, %46) /* ty=Tensor[(3, 13, 8), uint16] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(3, 13, 8), uint16],) */
}

def @func_6552() -> (Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
  @func_6550() /* ty=(Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */
}

def @func_2241(%var_2239: Tensor[(4, 2, 3), float32]) -> Tensor[(4, 2, 3), float32] {
  @func_2238(%var_2239) /* ty=Tensor[(4, 2, 3), float32] */
}

def @func_13302(%var_13301: Tensor[(416), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64], Tensor[(4, 13, 8), float64], Tensor[(416), float64], Tensor[(16, 10, 15), float32], Tensor[(?, 12, 5), int8], Tensor[(6, 5, 2), float64], Tensor[(90), uint32]) {
  %74 = fn (%var_13258: Tensor[(416), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64], Tensor[(4, 13, 8), float64], Tensor[(416), float64], Tensor[(16, 10, 15), float32], Tensor[(?, 12, 5), int8], Tensor[(6, 5, 2), float64], Tensor[(90), uint32]) {
    %49 = @func_12675() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) */;
    %50 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %51 = %50.1;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
    %53 = log(%52) /* ty=Tensor[(?, 12, 5), float32] */;
    %54 = cast(%53, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
    %55 = cast(%var_13258, dtype="float64") /* ty=Tensor[(416), float64] */;
    %56 = reshape(%55, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float64] */;
    %57 = @func_9059(%56) /* ty=(Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) */;
    %58 = @func_11318() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) */;
    %59 = cast(%51, dtype="int8") /* ty=Tensor[(?, 12, 5), int8] */;
    %60 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%53, dtype="int8") /* ty=Tensor[(?, 12, 5), int8] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %65 = reshape(%63, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
    %66 = reshape(%64, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
    %67 = @func_12630(%65, %66) /* ty=(Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %68 = %49.1;
    %69 = tan(%54) /* ty=Tensor[(?, 12, 5), float64] */;
    %70 = %57.0;
    %71 = %58.1;
    %72 = right_shift(%61, %62) /* ty=Tensor[(?, 12, 5), int8] */;
    %73 = %67.2;
    (%68, %69, %70, %var_13258, %71, %72, %73, meta[relay.Constant][4] /* ty=Tensor[(90), uint32] */)
  };
  %74(%var_13301) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64], Tensor[(4, 13, 8), float64], Tensor[(416), float64], Tensor[(16, 10, 15), float32], Tensor[(?, 12, 5), int8], Tensor[(6, 5, 2), float64], Tensor[(90), uint32]) */
}

def @func_2810() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  @func_2808() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_3165() -> (Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %86 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
    %75 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
    %76 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %77 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
    %78 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %79 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %80 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
    %81 = %75.0;
    %82 = %76.1;
    %83 = %77.0;
    %84 = %78.1;
    %85 = %79.0;
    (%80, %81, %82, %83, %84, %85)
  };
  %86() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_6870() -> (Tensor[(6, 5, 2), float32],) {
  %87 = @func_2710() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %88 = %87.0;
  (%88,)
}

def @func_6550() -> (Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
  %89 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %92 = reshape(%91, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
  %93 = @func_3531(%92) /* ty=Tensor[(6, 5, 2), int64] */;
  %94 = cast(%93, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %95 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%90, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %98 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %99 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %100 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %101 = maximum(%96, %97) /* ty=Tensor[(6, 5, 2), int8] */;
  %102 = %98.0;
  %103 = %99.0;
  %104 = @func_4383() /* ty=Tensor[(6, 5, 2), float32] */;
  %105 = %100.4;
  %106 = @func_5926() /* ty=Tensor[(6, 5, 2), bool] */;
  (%101, %102, %103, %104, %105, %106)
}

def @func_733() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %111 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
    %107 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %108 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
    %109 = %107.2;
    %110 = %108.3;
    (%109, %110)
  };
  %111() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */
}

def @func_9484() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %112 = @func_8738() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) */;
  %113 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %114 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %115 = %112.2;
  %116 = %113.1;
  %117 = %114.1;
  (%115, %116, %117)
}

def @func_9773() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  @func_9771() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */
}

def @func_1616() -> (Tensor[(6, 5, 2), float32],) {
  %118 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_9600() -> Tensor[(6, 5, 2), float64] {
  %120 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %120.0
}

def @func_7609() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  @func_7607() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_9327() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) {
  %130 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) {
    %121 = @func_7607() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
    %122 = @func_7712() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
    %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %124 = reshape(%123, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
    %125 = @func_1339(%124) /* ty=(Tensor[(2, 6, 2), float64],) */;
    %126 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
    %127 = %121.1;
    %128 = %122.0;
    %129 = %125.0;
    (%126, %127, %128, %129, meta[relay.Constant][5] /* ty=Tensor[(24), float64] */)
  };
  %130() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) */
}

def @func_9228() -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) {
  %136 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) {
    %131 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %132 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %133 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
    %134 = %131.5;
    %135 = %132.2;
    (%133, %134, %135)
  };
  %136() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) */
}

def @func_9889(%var_9888: Tensor[(13, 6, 5), bool]) -> (Tensor[(13, 6, 5), bool], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), uint8], Tensor[(13, 3, 11), float64], Tensor[(429), float64], Tensor[(6, 5, 2), float32]) {
  %155 = fn (%var_9837: Tensor[(13, 6, 5), bool]) -> (Tensor[(13, 6, 5), bool], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), uint8], Tensor[(13, 3, 11), float64], Tensor[(429), float64], Tensor[(6, 5, 2), float32]) {
    %137 = cast(%var_9837, dtype="bool") /* ty=Tensor[(13, 6, 5), bool] */;
    %138 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 5), bool] */, dtype="bool") /* ty=Tensor[(13, 6, 5), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %143 = reshape(%141, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
    %144 = reshape(%142, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
    %145 = @func_6217() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
    %147 = reshape(%146, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
    %148 = @func_5263(%147) /* ty=(Tensor[(13, 3, 11), float64],) */;
    %149 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %150 = logical_and(%139, %140) /* ty=Tensor[(13, 6, 5), bool] */;
    %151 = @func_908(%143, %144) /* ty=Tensor[(2, 16, 2), bool] */;
    %152 = %145.1;
    %153 = %148.0;
    %154 = %149.0;
    (%150, %151, meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, %152, %153, meta[relay.Constant][8] /* ty=Tensor[(429), float64] */, %154)
  };
  %155(%var_9888) /* ty=(Tensor[(13, 6, 5), bool], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), uint8], Tensor[(13, 3, 11), float64], Tensor[(429), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_12819(%var_12817: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(54), float64]) {
  @func_12816(%var_12817) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(54), float64]) */
}

def @func_6980() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  @func_6978() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_2970() -> (Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_2225() -> Tensor[(6, 5, 2), float64] {
  @func_2223() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_13394(%var_13392: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(24), float64]) {
  @func_13391(%var_13392) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(24), float64]) */
}

def @func_4688(%var_4686: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) {
  @func_4685(%var_4686) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) */
}

def @func_6452() -> (Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) {
  %156 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %158 = reshape(%157, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %159 = @func_2910(%158) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %161 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %162 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %163 = %156.1;
  %164 = %159.0;
  %165 = sinh(%160) /* ty=Tensor[(2160), float64] */;
  %166 = %161.0;
  %167 = %162.2;
  (%163, %164, %165, %166, %167)
}

def @func_6275() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %174 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
    %168 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
    %169 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %170 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %171 = %168.0;
    %172 = %169.0;
    %173 = %170.0;
    (%171, %172, %173)
  };
  %174() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_10053() -> Tensor[(6, 5, 2), float32] {
  @func_10051() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_12816(%var_12813: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(54), float64]) {
  %175 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %176 = cast(%var_12813, dtype="float64") /* ty=Tensor[(54), float64] */;
  %177 = reshape(%176, newshape=[27, 2]) /* ty=Tensor[(27, 2), float64] */;
  %178 = @func_7572(%177) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %179 = %175.0;
  %180 = %178.3;
  (%179, %180, %var_12813)
}

def @func_4603() -> Tensor[(6, 5, 2), float64] {
  @func_4601() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_11663(%var_11661: Tensor[(1, 26), bool], %var_11662: Tensor[(7, 26), bool]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(7, 26), bool], Tensor[(6, 5, 2), float32]) {
  %195 = fn (%var_11637: Tensor[(1, 26), bool], %var_11642: Tensor[(7, 26), bool]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(7, 26), bool], Tensor[(6, 5, 2), float32]) {
    %181 = @func_10314() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %182 = cast(%var_11637, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
    %183 = reshape(%182, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
    %184 = @func_5362(%183) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
    %185 = cast(%var_11637, dtype="int16") /* ty=Tensor[(1, 26), int16] */;
    %186 = cast(%var_11642, dtype="int16") /* ty=Tensor[(7, 26), int16] */;
    %187 = bitwise_and(%185, %186) /* ty=Tensor[(7, 26), int16] */;
    %188 = cast(%187, dtype="bool") /* ty=Tensor[(7, 26), bool] */;
    %189 = cast(%var_11637, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
    %190 = @func_11318() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) */;
    %191 = %181.0;
    %192 = %184.1;
    %193 = less(%188, %189) /* ty=Tensor[(7, 26), bool] */;
    %194 = %190.0;
    (%191, %192, %193, %194)
  };
  %195(%var_11661, %var_11662) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(7, 26), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_7831() -> Tensor[(6, 5, 2), float32] {
  %197 = fn () -> Tensor[(6, 5, 2), float32] {
    %196 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %196.0
  };
  %197() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_2862() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %198 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %199 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %200 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %201 = %198.0;
  %202 = %199.0;
  %203 = %200.3;
  (%201, %202, %203)
}

def @func_10810() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64]) {
  @func_10808() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64]) */
}

def @func_11568() -> Tensor[(6, 5, 2), float32] {
  @func_9171() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_536() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
  @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */
}

def @func_10871(%var_10869: Tensor[(15, 15, 15), float32]) -> Tensor[(15, 15, 15), float32] {
  @func_10868(%var_10869) /* ty=Tensor[(15, 15, 15), float32] */
}

def @func_11320() -> (Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) {
  @func_11318() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(16, 10, 15), float32]) */
}

def @func_6332() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) {
  %204 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %206 = reshape(%205, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %207 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %208 = @func_576(%206) /* ty=Tensor[(6, 5, 2), int64] */;
  %209 = %207.0;
  (%204, %208, %209)
}

def @func_5693() -> (Tensor[(6, 5, 2), bool],) {
  %212 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %210 = @func_4752() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
    %211 = %210.0;
    (%211,)
  };
  %212() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_8088(%var_8012: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) {
  %213 = cast(%var_8012, dtype="float64") /* ty=Tensor[(12, 2, 8), float64] */;
  %214 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %215 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %216 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %217 = cast(meta[relay.Constant][10] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %218 = reshape(%217, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %219 = @func_3905(%218) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) */;
  %220 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %221 = atanh(%213) /* ty=Tensor[(12, 2, 8), float64] */;
  %222 = %214.1;
  %223 = %215.0;
  %224 = %216.2;
  %225 = %219.3;
  %226 = %220.1;
  (%221, %222, %223, %224, %225, meta[relay.Constant][10] /* ty=Tensor[(16), float64] */, %226)
}

def @func_791() -> (Tensor[(6, 5, 2), float64],) {
  @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_5322(%var_5321: Tensor[(3, 9, 2), float64]) -> (Tensor[(3, 9, 2), float64],) {
  %229 = fn (%var_5308: Tensor[(3, 9, 2), float64]) -> (Tensor[(3, 9, 2), float64],) {
    %227 = cast(%var_5308, dtype="float64") /* ty=Tensor[(3, 9, 2), float64] */;
    %228 = rsqrt(%227) /* ty=Tensor[(3, 9, 2), float64] */;
    (%228,)
  };
  %229(%var_5321) /* ty=(Tensor[(3, 9, 2), float64],) */
}

def @func_11748() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %233 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
    %230 = @func_10919() /* ty=(Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) */;
    %231 = @func_4157() /* ty=Tensor[(6, 5, 2), bool] */;
    %232 = %230.1;
    (%231, %232)
  };
  %233() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_8476() -> Tensor[(6, 5, 2), float32] {
  %235 = fn () -> Tensor[(6, 5, 2), float32] {
    %234 = @func_3164() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %234.5
  };
  %235() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_13072(%var_13071: Tensor[(3, 30), uint32]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(3, 30), bool], Tensor[(?, 12, 5), float64], Tensor[(3, 30), float64], Tensor[(3, 30), float64]) {
  %274 = fn (%var_13011: Tensor[(3, 30), uint32]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(3, 30), bool], Tensor[(?, 12, 5), float64], Tensor[(3, 30), float64], Tensor[(3, 30), float64]) {
    %236 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
    %237 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
    %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
    %240 = reshape(%238, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
    %241 = reshape(%239, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), uint32] */;
    %242 = @func_12630(%240, %241) /* ty=(Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
    %245 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %248 = bitwise_and(%246, %247) /* ty=Tensor[(3, 30), uint32] */;
    %249 = cast(%248, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
    %250 = shape_of(%var_13011, dtype="int32") /* ty=Tensor[(2), int32] */;
    %251 = cast(%var_13011, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %253 = @func_10638() /* ty=(Tensor[(?, 12, 5), float64],) */;
    %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %255 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
    %256 = cast(%248, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %258 = cast(%var_13011, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
    %259 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %260 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 30), uint32] */, dtype="uint32") /* ty=Tensor[(3, 30), uint32] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %262 = logical_xor(%260, %261) /* ty=Tensor[(3, 30), uint32] */;
    %263 = cast(%var_13011, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(2), int32] */;
    %265 = cast(%262, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %267 = %236.0;
    %268 = @func_7486() /* ty=Tensor[(6, 5, 2), float32] */;
    %269 = %237.0;
    %270 = greater(%251, %252) /* ty=Tensor[(3, 30), bool] */;
    %271 = %253.0;
    %272 = floor_mod(%256, %257) /* ty=Tensor[(3, 30), float64] */;
    %273 = minimum(%265, %266) /* ty=Tensor[(3, 30), float64] */;
    (%267, %268, %269, %270, %271, %272, %273)
  };
  %274(%var_13071) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(3, 30), bool], Tensor[(?, 12, 5), float64], Tensor[(3, 30), float64], Tensor[(3, 30), float64]) */
}

def @func_11884() -> Tensor[(6, 5, 2), float32] {
  %275 = fn () -> Tensor[(6, 5, 2), float32] {
    @func_6811() /* ty=Tensor[(6, 5, 2), float32] */
  };
  %275() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_9467() -> (Tensor[(?, 12, 5), int16],) {
  %285 = fn () -> (Tensor[(?, 12, 5), int16],) {
    %276 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
    %277 = %276.0;
    %278 = cast(%277, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
    %279 = cos(%278) /* ty=Tensor[(?, 12, 5), float32] */;
    %280 = cast(%277, dtype="int16") /* ty=Tensor[(?, 12, 5), int16] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="int16") /* ty=Tensor[(?, 12, 5), int16] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %284 = multiply(%282, %283) /* ty=Tensor[(?, 12, 5), int16] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(?, 12, 5), int16],) */
}

def @func_7763() -> Tensor[(6, 5, 2), float32] {
  %286 = fn () -> Tensor[(6, 5, 2), float32] {
    @func_4383() /* ty=Tensor[(6, 5, 2), float32] */
  };
  %286() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_4512(%var_4484: Tensor[(14, 9, 9), uint8], %var_4485: Tensor[(14, 9, 9), uint8]) -> (Tensor[(14, 9, 9), bool], Tensor[(14, 9, 9), bool]) {
  %287 = cast(%var_4485, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %288 = shape_of(%var_4484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_4484, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = cast(%var_4484, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %292 = shape_of(%var_4485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_4485, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %295 = not_equal(%289, %290) /* ty=Tensor[(14, 9, 9), bool] */;
  %296 = logical_and(%293, %294) /* ty=Tensor[(14, 9, 9), bool] */;
  (%295, %296)
}

def @func_4385() -> Tensor[(6, 5, 2), float32] {
  @func_4383() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_1137() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %301 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
    %297 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %298 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %299 = %297.1;
    %300 = %298.0;
    (%299, %300)
  };
  %301() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_8209() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(12, 15, 12), float64]) {
  %310 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(12, 15, 12), float64]) {
    %302 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
    %303 = cast(%302, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %304 = reshape(%303, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
    %305 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
    %306 = %305.1;
    %307 = cast(%306, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
    %308 = @func_3531(%304) /* ty=Tensor[(6, 5, 2), int64] */;
    %309 = acos(%307) /* ty=Tensor[(12, 15, 12), float64] */;
    (%302, %308, %309)
  };
  %310() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(12, 15, 12), float64]) */
}

def @func_9138() -> Tensor[(6, 5, 2), float32] {
  @func_9136() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_6813() -> Tensor[(6, 5, 2), float32] {
  @func_6811() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_515() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) {
  %330 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) {
    %311 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %312 = %311.1;
    %313 = cast(%312, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
    %314 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %315 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %316 = %315.1;
    %317 = cast(%316, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %318 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %319 = %318.0;
    %320 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 5, 2), float32] */, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %324 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %325 = cos(%313) /* ty=Tensor[(6, 5, 2), float64] */;
    %326 = %314.2;
    %327 = atanh(%317) /* ty=Tensor[(6, 5, 2), float32] */;
    %328 = logical_xor(%322, %323) /* ty=Tensor[(6, 5, 2), uint8] */;
    %329 = %324.1;
    (%325, %326, %327, %328, %329)
  };
  %330() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */
}

def @func_9916() -> Tensor[(6, 5, 2), float32] {
  @func_9914() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_9171() -> Tensor[(6, 5, 2), float32] {
  @func_3635() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_11108(%var_11106: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64]) {
  @func_11105(%var_11106) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64]) */
}

def @func_10619() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(192), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
  %347 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(192), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
    %331 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %332 = cast(meta[relay.Constant][13] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %333 = reshape(%332, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), float64] */;
    %334 = @func_8088(%333) /* ty=(Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) */;
    %335 = @func_9484() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %336 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %337 = cast(meta[relay.Constant][14] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %338 = cast(meta[relay.Constant][14] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %339 = reshape(%337, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
    %340 = reshape(%338, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
    %341 = @func_7383(%339, %340) /* ty=(Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) */;
    %342 = %331.2;
    %343 = %334.1;
    %344 = %335.2;
    %345 = %336.1;
    %346 = %341.1;
    (%342, %343, meta[relay.Constant][13] /* ty=Tensor[(192), float64] */, %344, %345, %346, meta[relay.Constant][14] /* ty=Tensor[(72), float32] */)
  };
  %347() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(192), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) */
}

def @func_3930(%var_3920: Tensor[(24, 1), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) {
  %348 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %349 = cast(%var_3920, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
  %350 = reshape(%349, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
  %351 = @func_1339(%350) /* ty=(Tensor[(2, 6, 2), float64],) */;
  %352 = %348.0;
  %353 = %351.0;
  (%352, %353, %var_3920)
}

def @func_6218() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %357 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
    %354 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %355 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
    %356 = %354.0;
    (%355, %356)
  };
  %357() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */
}

def @func_5509() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_5507() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_2499(%var_2497: Tensor[(12, 6, 9), float32], %var_2498: Tensor[(12, 6, 9), float32]) -> (Tensor[(12, 6, 9), bool],) {
  %363 = fn (%var_2490: Tensor[(12, 6, 9), float32], %var_2491: Tensor[(12, 6, 9), float32]) -> (Tensor[(12, 6, 9), bool],) {
    %358 = cast(%var_2491, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
    %359 = shape_of(%var_2490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%var_2490, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %362 = equal(%360, %361) /* ty=Tensor[(12, 6, 9), bool] */;
    (%362,)
  };
  %363(%var_2497, %var_2498) /* ty=(Tensor[(12, 6, 9), bool],) */
}

def @func_11965() -> (Tensor[(6, 5, 2), float64],) {
  %366 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %364 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %365 = %364.0;
    (%365,)
  };
  %366() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_6334() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) {
  @func_6332() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) */
}

def @func_1516() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %371 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
    %367 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %368 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %369 = %367.0;
    %370 = %368.1;
    (%369, %370)
  };
  %371() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */
}

def @func_4216() -> Tensor[(6, 5, 2), float32] {
  @func_4214() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_12677() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) {
  @func_12675() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) */
}

def @func_3276() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) {
  %372 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %373 = %372.1;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %375 = reshape(%374, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %376 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %377 = @func_1699(%375) /* ty=Tensor[(6, 5, 2), int32] */;
  %378 = %376.0;
  (%373, %377, %378)
}

def @func_8353(%var_8352: Tensor[(5, 8, 4), bool]) -> (Tensor[(5, 8, 4), bool],) {
  %384 = fn (%var_8343: Tensor[(5, 8, 4), bool]) -> (Tensor[(5, 8, 4), bool],) {
    %379 = cast(%var_8343, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
    %380 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 8, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 8, 4), bool] */, dtype="bool") /* ty=Tensor[(5, 8, 4), bool] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %383 = logical_and(%381, %382) /* ty=Tensor[(5, 8, 4), bool] */;
    (%383,)
  };
  %384(%var_8352) /* ty=(Tensor[(5, 8, 4), bool],) */
}

def @func_4637() -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
  %385 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %387 = reshape(%386, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float32] */;
  %388 = @func_4000(%387) /* ty=(Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %389 = %388.0;
  (%385, %389)
}

def @func_12319() -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float64]) {
  @func_12317() /* ty=(Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_10958() -> (Tensor[(6, 5, 2), float64],) {
  %392 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %390 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %391 = %390.1;
    (%391,)
  };
  %392() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_13366() -> Tensor[(6, 5, 2), float32] {
  %394 = fn () -> Tensor[(6, 5, 2), float32] {
    %393 = @func_2485() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %393.0
  };
  %394() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_6754(%var_6752: Tensor[(270), float32]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(270), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  @func_6751(%var_6752) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(270), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_7786() -> (Tensor[(3, 13, 8), float64],) {
  %399 = fn () -> (Tensor[(3, 13, 8), float64],) {
    %395 = @func_4926() /* ty=(Tensor[(3, 13, 8), uint16],) */;
    %396 = %395.0;
    %397 = cast(%396, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
    %398 = sin(%397) /* ty=Tensor[(3, 13, 8), float64] */;
    (%398,)
  };
  %399() /* ty=(Tensor[(3, 13, 8), float64],) */
}

def @func_4685(%var_4674: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) {
  %400 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %401 = cast(%var_4674, dtype="float64") /* ty=Tensor[(24), float64] */;
  %402 = reshape(%401, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %403 = @func_3930(%402) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) */;
  %404 = %400.0;
  %405 = %403.2;
  (%404, %405, %var_4674)
}

def @func_12189() -> (Tensor[(6, 5, 2), float64],) {
  %406 = @func_9600() /* ty=Tensor[(6, 5, 2), float64] */;
  (%406,)
}

def @func_4342() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_7574(%var_7573: Tensor[(27, 2), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) {
  %413 = fn (%var_7540: Tensor[(27, 2), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) {
    %407 = cast(%var_7540, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
    %408 = reshape(%407, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float64] */;
    %409 = @func_5320(%408) /* ty=(Tensor[(3, 9, 2), float64],) */;
    %410 = @func_7401() /* ty=Tensor[(6, 5, 2), float64] */;
    %411 = %409.0;
    %412 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
    (%410, %411, %var_7540, %412)
  };
  %413(%var_7573) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(27, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_9359(%var_9328: Tensor[(16, 11, 5), float32], %var_9329: Tensor[(16, 11, 5), float32], %var_9355: Tensor[(16, 11, 5), float32]) -> (Tensor[(16, 11, 5), int16],) {
  %414 = cast(%var_9329, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %415 = shape_of(%var_9328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_9328, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %418 = floor_mod(%416, %417) /* ty=Tensor[(16, 11, 5), float32] */;
  %419 = cast(%var_9329, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %423 = power(%421, %422) /* ty=Tensor[(16, 11, 5), float32] */;
  %424 = cast(%var_9355, dtype="int16") /* ty=Tensor[(16, 11, 5), int16] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int16") /* ty=Tensor[(16, 11, 5), int16] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %428 = add(%426, %427) /* ty=Tensor[(16, 11, 5), int16] */;
  (%428,)
}

def @func_7096(%var_7094: Tensor[(24), float32], %var_7095: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool], Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(4, 2, 3), float32], Tensor[(24), float32], Tensor[(660), uint8], Tensor[(660), uint8]) {
  @func_7092(%var_7094, %var_7095) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool], Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(4, 2, 3), float32], Tensor[(24), float32], Tensor[(660), uint8], Tensor[(660), uint8]) */
}

def @func_6178(%var_6114: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(54), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %429 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %430 = cast(%var_6114, dtype="float64") /* ty=Tensor[(54), float64] */;
  %431 = reshape(%430, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float64] */;
  %432 = @func_5320(%431) /* ty=(Tensor[(3, 9, 2), float64],) */;
  %433 = @func_4469() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %434 = %429.1;
  %435 = %432.0;
  %436 = %433.0;
  %437 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  (%434, %435, %var_6114, %436, %437)
}

def @func_6978() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %438 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %439 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %440 = %438.1;
  %441 = %439.0;
  (%440, %441)
}

def @func_12035() -> (Tensor[(6, 5, 2), float64],) {
  %442 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %443 = %442.0;
  (%443,)
}

def @func_789() -> (Tensor[(6, 5, 2), float64],) {
  %444 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %445 = %444.0;
  (%445,)
}

def @func_11226() -> (Tensor[(6, 5, 2), float64],) {
  %446 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %447 = %446.1;
  (%447,)
}

def @func_3036() -> (Tensor[(6, 5, 2), bool],) {
  %450 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %448 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %449 = %448.0;
    (%449,)
  };
  %450() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_2808() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %451 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %452 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %453 = %451.0;
  %454 = %452.0;
  (%453, %454)
}

def @func_3702() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_2567() -> (Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) {
  %459 = fn () -> (Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) {
    %455 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 13), float32] */;
    %456 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
    %457 = log(%455) /* ty=Tensor[(16, 16, 13), float32] */;
    %458 = %456.4;
    (%457, %458)
  };
  %459() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_10639() -> (Tensor[(?, 12, 5), float64],) {
  %462 = fn () -> (Tensor[(?, 12, 5), float64],) {
    %460 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
    %461 = %460.2;
    (%461,)
  };
  %462() /* ty=(Tensor[(?, 12, 5), float64],) */
}

def @func_4000(%var_3946: Tensor[(6, 5, 2), float32]) -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %463 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %464 = %463.1;
  %465 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %466 = %465.1;
  %467 = cast(%var_3946, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %471 = divide(%469, %470) /* ty=Tensor[(6, 5, 2), float64] */;
  %472 = cast(%471, dtype="uint32") /* ty=Tensor[(6, 5, 2), uint32] */;
  %473 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%464, dtype="uint32") /* ty=Tensor[(?, 12, 5), uint32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %476 = subtract(%474, %475) /* ty=Tensor[(?, 12, 5), uint32] */;
  %477 = cast(%464, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %482 = @func_3063() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %483 = logical_and(%479, %480) /* ty=Tensor[(?, 12, 5), bool] */;
  %484 = @func_3395() /* ty=Tensor[(6, 5, 2), float32] */;
  %485 = %481.0;
  %486 = %482.0;
  (%483, %484, %485, %486)
}

def @func_5233() -> Tensor[(6, 5, 2), float64] {
  %488 = fn () -> Tensor[(6, 5, 2), float64] {
    %487 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %487.0
  };
  %488() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_12317() -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float64]) {
  %489 = @func_10638() /* ty=(Tensor[(?, 12, 5), float64],) */;
  %490 = %489.0;
  %491 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %494 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%490, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = greater_equal(%495, %496) /* ty=Tensor[(?, 12, 5), bool] */;
  %498 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
  (%497, %498)
}

def @func_12683() -> Tensor[(6, 5, 2), bool] {
  %500 = fn () -> Tensor[(6, 5, 2), bool] {
    %499 = @func_3785() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) */;
    %499.0
  };
  %500() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_4105(%var_4104: int32) -> (Tensor[(1, 14), int32],) {
  %504 = fn (%var_4085: int32) -> (Tensor[(1, 14), int32],) {
    %501 = cast(%var_4085, dtype="int32") /* ty=int32 */;
    %502 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 14), int32] */, dtype="int32") /* ty=Tensor[(1, 14), int32] */;
    %503 = maximum(%501, %502) /* ty=Tensor[(1, 14), int32] */;
    (%503,)
  };
  %504(%var_4104) /* ty=(Tensor[(1, 14), int32],) */
}

def @func_6181(%var_6179: Tensor[(54), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(54), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  @func_6178(%var_6179) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(3, 9, 2), float64], Tensor[(54), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_13473() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64]) {
  @func_13471() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64]) */
}

def @func_8620() -> Tensor[(6, 5, 2), float64] {
  %506 = fn () -> Tensor[(6, 5, 2), float64] {
    %505 = @func_7585() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %505.0
  };
  %506() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_10868(%var_10847: Tensor[(15, 15, 15), float32]) -> Tensor[(15, 15, 15), float32] {
  %507 = cast(%var_10847, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  sinh(%507) /* ty=Tensor[(15, 15, 15), float32] */
}

def @func_954() -> (Tensor[(6, 5, 2), float32],) {
  %510 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %508 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %509 = %508.0;
    (%509,)
  };
  %510() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_1867() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %511 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %512 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %513 = %511.4;
  %514 = %512.0;
  (%513, %514)
}

def @func_9192() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %515 = @func_7607() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %516 = %515.1;
  %517 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
  (%516, %517)
}

def @func_2660() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %521 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
    %518 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %519 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
    %520 = %518.1;
    (%519, %520)
  };
  %521() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_3350() -> Tensor[(6, 5, 2), float32] {
  @func_983() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_2154() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %522 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %523 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %524 = %522.2;
  %525 = %523.0;
  (%524, %525)
}

def @func_11854(%var_11852: float64, %var_11853: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, 1), float64],) {
  %529 = fn (%var_11843: float64, %var_11844: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, 1), float64],) {
    %526 = cast(%var_11843, dtype="float64") /* ty=float64 */;
    %527 = cast(%var_11844, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %528 = power(%526, %527) /* ty=Tensor[(5, 8, 1), float64] */;
    (%528,)
  };
  %529(%var_11852, %var_11853) /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_12957() -> (Tensor[(6, 5, 2), bool],) {
  @func_12955() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_4447(%var_4445: Tensor[(6, 5, 2), uint8], %var_4446: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
  %543 = fn (%var_4431: Tensor[(6, 5, 2), uint8], %var_4441: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
    %530 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %531 = %530.0;
    %532 = cast(%var_4431, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
    %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%531, dtype="int8") /* ty=Tensor[(6, 5, 2), int8] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %536 = cast(%var_4441, dtype="uint8") /* ty=Tensor[(660), uint8] */;
    %537 = cast(%var_4441, dtype="uint8") /* ty=Tensor[(660), uint8] */;
    %538 = reshape(%536, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
    %539 = reshape(%537, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
    %540 = @func_1562(%538, %539) /* ty=(Tensor[(10, 6, 11), uint8],) */;
    %541 = left_shift(%534, %535) /* ty=Tensor[(6, 5, 2), int8] */;
    %542 = %540.0;
    (%541, %542, %var_4441)
  };
  %543(%var_4445, %var_4446) /* ty=(Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) */
}

def @func_6675() -> (Tensor[(6, 5, 2), float32],) {
  @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_11941() -> (Tensor[(6, 5, 2), float32],) {
  @func_11939() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_1562(%var_1552: Tensor[(10, 6, 11), uint8], %var_1553: Tensor[(10, 6, 11), uint8]) -> (Tensor[(10, 6, 11), uint8],) {
  %544 = cast(%var_1553, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %545 = shape_of(%var_1552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_1552, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %548 = logical_xor(%546, %547) /* ty=Tensor[(10, 6, 11), uint8] */;
  (%548,)
}

def @func_1330() -> (Tensor[(6, 5, 2), bool],) {
  @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_1080() -> (Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %560 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
    %549 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %550 = cast(meta[relay.Constant][18] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %551 = cast(meta[relay.Constant][18] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %552 = reshape(%550, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
    %553 = reshape(%551, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
    %554 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %555 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %556 = %549.0;
    %557 = @func_908(%552, %553) /* ty=Tensor[(2, 16, 2), bool] */;
    %558 = %554.0;
    %559 = %555.0;
    (%556, %557, meta[relay.Constant][18] /* ty=Tensor[(64), float32] */, %558, %559)
  };
  %560() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_4753() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
  %565 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) {
    %561 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %562 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %563 = %561.2;
    %564 = %562.0;
    (%563, %564)
  };
  %565() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */
}

def @func_9832() -> (Tensor[(6, 5, 2), bool],) {
  %567 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %566 = @func_8908() /* ty=Tensor[(6, 5, 2), bool] */;
    (%566,)
  };
  %567() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_10821() -> (Tensor[(2, 16, 8), float64],) {
  %568 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %569 = cosh(%568) /* ty=Tensor[(2, 16, 8), float64] */;
  (%569,)
}

def @func_6988(%var_6986: Tensor[(4, 11, 4), float32]) -> Tensor[(4, 11, 4), float32] {
  @func_6985(%var_6986) /* ty=Tensor[(4, 11, 4), float32] */
}

def @func_8862() -> Tensor[(6, 5, 2), float32] {
  @func_8860() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_12633(%var_12631: Tensor[(5, 9, 2), uint32], %var_12632: Tensor[(5, 9, 2), uint32]) -> (Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %584 = fn (%var_12585: Tensor[(5, 9, 2), uint32], %var_12586: Tensor[(5, 9, 2), uint32]) -> (Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
    %570 = cast(%var_12586, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
    %571 = shape_of(%var_12585, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%var_12585, dtype="uint32") /* ty=Tensor[(5, 9, 2), uint32] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %574 = bitwise_and(%572, %573) /* ty=Tensor[(5, 9, 2), uint32] */;
    %575 = cast(%var_12585, dtype="uint64") /* ty=Tensor[(5, 9, 2), uint64] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="uint64") /* ty=Tensor[(5, 9, 2), uint64] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %579 = @func_6978() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %580 = @func_9771() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %581 = bitwise_or(%577, %578) /* ty=Tensor[(5, 9, 2), uint64] */;
    %582 = %579.0;
    %583 = %580.0;
    (%581, %582, %583)
  };
  %584(%var_12631, %var_12632) /* ty=(Tensor[(5, 9, 2), uint64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_5740() -> Tensor[(6, 5, 2), bool] {
  %585 = @func_2440() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %585.0
}

def @func_4383() -> Tensor[(6, 5, 2), float32] {
  %586 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %586.0
}

def @func_11514() -> Tensor[(6, 5, 2), float64] {
  %587 = @func_7430() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) */;
  %587.1
}

def @func_8312(%var_8310: uint32, %var_8311: Tensor[(5, 156), uint32]) -> (Tensor[(6, 5, 2), float32], Tensor[(13, 10, 6), bool], uint32, Tensor[(5, 156), uint32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %599 = fn (%var_8273: uint32, %var_8274: Tensor[(5, 156), uint32]) -> (Tensor[(6, 5, 2), float32], Tensor[(13, 10, 6), bool], uint32, Tensor[(5, 156), uint32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
    %588 = cast(%var_8273, dtype="uint32") /* ty=uint32 */;
    %589 = cast(%var_8274, dtype="uint32") /* ty=Tensor[(5, 156), uint32] */;
    %590 = reshape(%588, newshape=[]) /* ty=uint32 */;
    %591 = reshape(%589, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint32] */;
    %592 = @func_3316(%590, %591) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) */;
    %593 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %594 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %595 = @func_4383() /* ty=Tensor[(6, 5, 2), float32] */;
    %596 = %592.0;
    %597 = %593.0;
    %598 = %594.0;
    (%595, %596, %var_8273, %var_8274, %597, %598)
  };
  %599(%var_8310, %var_8311) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(13, 10, 6), bool], uint32, Tensor[(5, 156), uint32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_1618() -> (Tensor[(6, 5, 2), float32],) {
  @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_9364(%var_9361: Tensor[(16, 11, 5), float32], %var_9362: Tensor[(16, 11, 5), float32], %var_9363: Tensor[(16, 11, 5), float32]) -> (Tensor[(16, 11, 5), int16],) {
  @func_9359(%var_9361, %var_9362, %var_9363) /* ty=(Tensor[(16, 11, 5), int16],) */
}

def @func_10483(%var_10480: Tensor[(14, 15, 12), float32], %var_10481: Tensor[(26), bool], %var_10482: Tensor[(234), bool]) -> (Tensor[(6, 5, 2), float32], Tensor[(26), bool], Tensor[(234), bool], Tensor[(14, 15, 12), float32]) {
  @func_10478(%var_10480, %var_10481, %var_10482) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(26), bool], Tensor[(234), bool], Tensor[(14, 15, 12), float32]) */
}

def @func_4470() -> (Tensor[(6, 5, 2), float32],) {
  %602 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %600 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %601 = %600.0;
    (%601,)
  };
  %602() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_2463() -> (Tensor[(6, 5, 2), float32],) {
  @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_2315() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %603 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %604 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %605 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %606 = %603.0;
  %607 = %604.0;
  %608 = %605.0;
  (%606, %607, %608)
}

def @func_858() -> Tensor[(6, 5, 2), bool] {
  %610 = fn () -> Tensor[(6, 5, 2), bool] {
    %609 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %609.1
  };
  %610() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_7008() -> (Tensor[(6, 5, 2), float32],) {
  %613 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %611 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %612 = %611.0;
    (%612,)
  };
  %613() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_11004() -> (Tensor[(6, 5, 2), bool], Tensor[(24, 1), float64], Tensor[(24), float64]) {
  %619 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(24, 1), float64], Tensor[(24), float64]) {
    %614 = cast(meta[relay.Constant][20] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %615 = reshape(%614, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %616 = @func_4685(%615) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(24, 1), float64], Tensor[(24), float64]) */;
    %617 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
    %618 = %616.1;
    (%617, %618, meta[relay.Constant][20] /* ty=Tensor[(24), float64] */)
  };
  %619() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(24, 1), float64], Tensor[(24), float64]) */
}

def @func_4003(%var_4001: Tensor[(6, 5, 2), float32]) -> (Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  @func_4000(%var_4001) /* ty=(Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_11499(%var_11498: Tensor[(14, 12, 5), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(14, 12, 5), bool]) {
  %627 = fn (%var_11479: Tensor[(14, 12, 5), float64]) -> (Tensor[(6, 5, 2), float32], Tensor[(14, 12, 5), bool]) {
    %620 = @func_8780() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %621 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
    %622 = %621.4;
    %623 = cast(%622, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
    %624 = cast(%var_11479, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
    %625 = %620.2;
    %626 = logical_and(%623, %624) /* ty=Tensor[(14, 12, 5), bool] */;
    (%625, %626)
  };
  %627(%var_11498) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(14, 12, 5), bool]) */
}

def @func_12675() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(16, 10, 15), float32]) {
  %628 = @func_7401() /* ty=Tensor[(6, 5, 2), float64] */;
  %629 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
  %630 = @func_5286() /* ty=Tensor[(16, 10, 15), float32] */;
  (%628, %629, %630)
}

def @func_2136(%var_2130: Tensor[(2, 9, 15), float32]) -> Tensor[(2, 9, 15), bool] {
  %631 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 9, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %632 = shape_of(%var_2130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_2130, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%633, %634) /* ty=Tensor[(2, 9, 15), bool] */
}

def @func_4582(%var_4580: int32) -> (Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16, 1), float64], Tensor[(6, 5, 2), float32], Tensor[(1, 14), int32], int32, Tensor[(6, 5, 2), bool]) {
  @func_4579(%var_4580) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16, 1), float64], Tensor[(6, 5, 2), float32], Tensor[(1, 14), int32], int32, Tensor[(6, 5, 2), bool]) */
}

def @func_4601() -> Tensor[(6, 5, 2), float64] {
  %635 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %635.0
}

def @func_4766() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %636 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %637 = %636.2;
  %638 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  (%637, %638)
}

def @func_6751(%var_6719: Tensor[(270), float32]) -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(270), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %639 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %640 = @func_6217() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %641 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %642 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %643 = cast(%var_6719, dtype="float32") /* ty=Tensor[(270), float32] */;
  %644 = reshape(%643, newshape=[2, 9, 15]) /* ty=Tensor[(2, 9, 15), float32] */;
  %645 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %646 = @func_5507() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %647 = %639.1;
  %648 = %640.1;
  %649 = %641.0;
  %650 = %642.1;
  %651 = @func_2136(%644) /* ty=Tensor[(2, 9, 15), bool] */;
  %652 = @func_2223() /* ty=Tensor[(6, 5, 2), float64] */;
  %653 = %645.2;
  %654 = %646.1;
  (%647, %648, %649, %650, %651, %var_6719, %652, %653, %654)
}

def @func_4258() -> (Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) {
  %663 = fn () -> (Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) {
    %655 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
    %656 = %655.1;
    %657 = cast(%656, dtype="float32") /* ty=Tensor[(?, 12, 5), float32] */;
    %658 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %659 = cast(%656, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
    %660 = atanh(%657) /* ty=Tensor[(?, 12, 5), float32] */;
    %661 = %658.0;
    %662 = acos(%659) /* ty=Tensor[(?, 12, 5), float64] */;
    (%660, %661, %662)
  };
  %663() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */
}

def @func_5365(%var_5363: Tensor[(2, 1, 13), bool]) -> (Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) {
  @func_5362(%var_5363) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_1728() -> (Tensor[(6, 5, 2), float32],) {
  @func_1726() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_4802() -> (Tensor[(6, 5, 2), float32],) {
  %666 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %664 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %665 = %664.0;
    (%665,)
  };
  %666() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_985() -> Tensor[(6, 5, 2), float32] {
  @func_983() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_1701(%var_1700: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int32] {
  %672 = fn (%var_1693: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int32] {
    %667 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
    %668 = cast(%var_1693, dtype="int32") /* ty=Tensor[(6, 5, 2), int32] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="int32") /* ty=Tensor[(6, 5, 2), int32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%670, %671) /* ty=Tensor[(6, 5, 2), int32] */
  };
  %672(%var_1700) /* ty=Tensor[(6, 5, 2), int32] */
}

def @func_2711() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %681 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
    %673 = @func_1726() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %674 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %675 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %676 = @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %677 = %673.0;
    %678 = %674.0;
    %679 = %675.0;
    %680 = %676.1;
    (%677, %678, %679, %680)
  };
  %681() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_8780() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %682 = @func_7872() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %683 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %684 = @func_3208() /* ty=Tensor[(6, 5, 2), float64] */;
  %685 = %682.0;
  (%683, %684, %685)
}

def @func_9136() -> Tensor[(6, 5, 2), float32] {
  %686 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %686.0
}

def @func_8738() -> (Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) {
  %687 = @func_7992() /* ty=(Tensor[(3, 13, 8), uint16],) */;
  %688 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %689 = @func_5740() /* ty=Tensor[(6, 5, 2), bool] */;
  %690 = %687.0;
  %691 = %688.0;
  (%689, %690, %691)
}

def @func_3905(%var_3898: Tensor[(16), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) {
  %692 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
  %693 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %694 = cast(%var_3898, dtype="float64") /* ty=Tensor[(16), float64] */;
  %695 = reshape(%694, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %696 = @func_2945(%695) /* ty=(Tensor[(8, 1, 2), float64],) */;
  %697 = %692.0;
  %698 = @func_3350() /* ty=Tensor[(6, 5, 2), float32] */;
  %699 = %693.0;
  %700 = %696.0;
  (%697, %698, %699, %700, %var_3898)
}

def @func_9424() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) {
  %701 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %702 = %701.1;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %704 = reshape(%703, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %705 = @func_8376() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %706 = @func_576(%704) /* ty=Tensor[(6, 5, 2), int64] */;
  %707 = %705.0;
  (%702, %706, %707)
}

def @func_912(%var_910: Tensor[(2, 16, 2), float32], %var_911: Tensor[(2, 16, 2), float32]) -> Tensor[(2, 16, 2), bool] {
  @func_908(%var_910, %var_911) /* ty=Tensor[(2, 16, 2), bool] */
}

def @func_8664(%var_8653: Tensor[(13, 2), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(2, 7, 13), bool], Tensor[(13, 2), bool], Tensor[(6, 5, 2), float64]) {
  %708 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %709 = cast(%var_8653, dtype="bool") /* ty=Tensor[(13, 2), bool] */;
  %710 = reshape(%709, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
  %711 = @func_5362(%710) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
  %712 = @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %713 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  %714 = %708.1;
  %715 = %711.0;
  %716 = %712.0;
  (%713, %714, %715, %var_8653, %716)
}

def @func_1464() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
  %742 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
    %717 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %718 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %719 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %720 = reshape(%719, newshape=[2, 6, 2]) /* ty=Tensor[(2, 6, 2), float64] */;
    %721 = @func_1339(%720) /* ty=(Tensor[(2, 6, 2), float64],) */;
    %722 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %723 = %717.0;
    %724 = cast(%723, dtype="int16") /* ty=Tensor[(6, 5, 2), int16] */;
    %725 = reshape(%724, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
    %726 = @func_1359(%725) /* ty=Tensor[(?, 12, 5), uint32] */;
    %727 = cast(%726, dtype="float64") /* ty=Tensor[(?, 12, 5), float64] */;
    %728 = atan(%727) /* ty=Tensor[(?, 12, 5), float64] */;
    %729 = cast(%726, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %733 = less(%731, %732) /* ty=Tensor[(?, 12, 5), bool] */;
    %734 = cast(%733, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
    %735 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %736 = cast(%728, dtype="bool") /* ty=Tensor[(?, 12, 5), bool] */;
    %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %738 = %718.0;
    %739 = %721.0;
    %740 = %722.0;
    %741 = logical_or(%736, %737) /* ty=Tensor[(?, 12, 5), bool] */;
    (%723, %738, %739, meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, %740, %741)
  };
  %742() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */
}

def @func_3487() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %743 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %744 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %745 = %743.0;
  %746 = %744.1;
  (%745, %746)
}

def @func_9945() -> (Tensor[(6, 5, 2), float32],) {
  %749 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %747 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %748 = %747.0;
    (%748,)
  };
  %749() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_3636() -> Tensor[(6, 5, 2), float32] {
  %751 = fn () -> Tensor[(6, 5, 2), float32] {
    %750 = @func_2710() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
    %750.2
  };
  %751() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_983() -> Tensor[(6, 5, 2), float32] {
  %752 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %752.0
}

def @func_7607() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %753 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %754 = @func_4214() /* ty=Tensor[(6, 5, 2), float32] */;
  %755 = %753.3;
  (%754, %755)
}

def @func_8740() -> (Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) {
  @func_8738() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) */
}

def @func_1342(%var_1340: Tensor[(2, 6, 2), float64]) -> (Tensor[(2, 6, 2), float64],) {
  @func_1339(%var_1340) /* ty=(Tensor[(2, 6, 2), float64],) */
}

def @func_3319(%var_3317: uint32, %var_3318: Tensor[(13, 10, 6), uint32]) -> (Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) {
  %761 = fn (%var_3290: uint32, %var_3291: Tensor[(13, 10, 6), uint32]) -> (Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) {
    %756 = cast(%var_3290, dtype="bool") /* ty=bool */;
    %757 = cast(%var_3291, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
    %758 = @func_2601() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %759 = less(%756, %757) /* ty=Tensor[(13, 10, 6), bool] */;
    %760 = %758.0;
    (%759, %760)
  };
  %761(%var_3317, %var_3318) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_6673() -> (Tensor[(6, 5, 2), float32],) {
  %762 = @func_4214() /* ty=Tensor[(6, 5, 2), float32] */;
  (%762,)
}

def @func_9059(%var_9054: Tensor[(4, 13, 8), float64]) -> (Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) {
  %763 = cast(%var_9054, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
  %764 = cast(%var_9054, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
  %765 = erf(%763) /* ty=Tensor[(4, 13, 8), float64] */;
  %766 = rsqrt(%764) /* ty=Tensor[(4, 13, 8), float64] */;
  (%765, %766)
}

def @func_13599() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %770 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
    %767 = @func_11380() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
    %768 = @func_9914() /* ty=Tensor[(6, 5, 2), float32] */;
    %769 = %767.0;
    (%768, %769)
  };
  %770() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_5996() -> Tensor[(6, 5, 2), bool] {
  @func_5740() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_10919() -> (Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) {
  %771 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %772 = cos(%771) /* ty=Tensor[(11, 13, 14), float64] */;
  %773 = cast(%772, dtype="bool") /* ty=Tensor[(11, 13, 14), bool] */;
  %774 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 14), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = @func_8738() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(3, 13, 8), uint16], Tensor[(6, 5, 2), float32]) */;
  %778 = logical_or(%775, %776) /* ty=Tensor[(11, 13, 14), bool] */;
  %779 = %777.2;
  (%778, %779)
}

def @func_11423() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %780 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %781 = @func_6901() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %782 = %780.0;
  %783 = %781.0;
  (%782, %783)
}

def @func_4191() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  %784 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %785 = %784.1;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %787 = reshape(%786, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), float64] */;
  %788 = @func_576(%787) /* ty=Tensor[(6, 5, 2), int64] */;
  (%785, %788)
}

def @func_1566(%var_1564: Tensor[(10, 6, 11), uint8], %var_1565: Tensor[(10, 6, 11), uint8]) -> (Tensor[(10, 6, 11), uint8],) {
  @func_1562(%var_1564, %var_1565) /* ty=(Tensor[(10, 6, 11), uint8],) */
}

def @func_4613() -> (Tensor[(6, 5, 2), float32],) {
  %791 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %789 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %790 = %789.0;
    (%790,)
  };
  %791() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_2913(%var_2911: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), float64],) {
  @func_2910(%var_2911) /* ty=(Tensor[(12, 15, 12), float64],) */
}

def @func_5145() -> Tensor[(6, 5, 2), float64] {
  %792 = fn () -> Tensor[(6, 5, 2), float64] {
    @func_4601() /* ty=Tensor[(6, 5, 2), float64] */
  };
  %792() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_7431() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
  %801 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) {
    %793 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %794 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %795 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %796 = reshape(%794, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
    %797 = reshape(%795, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float32] */;
    %798 = @func_7383(%796, %797) /* ty=(Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) */;
    %799 = %793.0;
    %800 = %798.1;
    (%799, %800, meta[relay.Constant][24] /* ty=Tensor[(72), float32] */)
  };
  %801() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(72), float32]) */
}

def @func_4289() -> (Tensor[(6, 5, 2), float32],) {
  @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_8860() -> Tensor[(6, 5, 2), float32] {
  @func_3350() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_11731() -> (Tensor[(6, 5, 2), bool],) {
  %803 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %802 = @func_5740() /* ty=Tensor[(6, 5, 2), bool] */;
    (%802,)
  };
  %803() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_8257() -> Tensor[(6, 5, 2), float32] {
  %804 = @func_4601() /* ty=Tensor[(6, 5, 2), float64] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  log2(%805) /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_1007() -> Tensor[(6, 5, 2), float64] {
  @func_1005() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_10520(%var_10519: Tensor[(7, 4, 3), float32]) -> Tensor[(7, 4, 3), float32] {
  %810 = fn (%var_10510: Tensor[(7, 4, 3), float32]) -> Tensor[(7, 4, 3), float32] {
    %806 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 3), float32] */;
    %807 = shape_of(%var_10510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %808 = cast(%var_10510, dtype="float32") /* ty=Tensor[(7, 4, 3), float32] */;
    %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%808, %809) /* ty=Tensor[(7, 4, 3), float32] */
  };
  %810(%var_10519) /* ty=Tensor[(7, 4, 3), float32] */
}

def @func_13652(%var_13629: Tensor[(1, 5, 7), float64]) -> (Tensor[(1, 5, 7), float64], Tensor[(6, 5, 2), bool]) {
  %811 = cast(%var_13629, dtype="float64") /* ty=Tensor[(1, 5, 7), float64] */;
  %812 = @func_9227() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool]) */;
  %813 = sin(%811) /* ty=Tensor[(1, 5, 7), float64] */;
  %814 = %812.2;
  (%813, %814)
}

def @func_3489() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  @func_3487() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_6454() -> (Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) {
  @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */
}

def @func_9771() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) {
  %815 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %816 = @func_8496() /* ty=Tensor[(6, 5, 2), float64] */;
  %817 = %815.1;
  (%816, %817)
}

def @func_3209() -> Tensor[(6, 5, 2), float64] {
  %819 = fn () -> Tensor[(6, 5, 2), float64] {
    %818 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
    %818.1
  };
  %819() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_4579(%var_4572: int32) -> (Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16, 1), float64], Tensor[(6, 5, 2), float32], Tensor[(1, 14), int32], int32, Tensor[(6, 5, 2), bool]) {
  %820 = @func_3035() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %821 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
  %822 = reshape(%821, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %823 = @func_2945(%822) /* ty=(Tensor[(8, 1, 2), float64],) */;
  %824 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %825 = cast(%var_4572, dtype="int32") /* ty=int32 */;
  %826 = reshape(%825, newshape=[]) /* ty=int32 */;
  %827 = @func_4103(%826) /* ty=(Tensor[(1, 14), int32],) */;
  %828 = @func_4340() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %829 = %820.0;
  %830 = %823.0;
  %831 = %824.0;
  %832 = %827.0;
  %833 = %828.2;
  (%829, %830, meta[relay.Constant][26] /* ty=Tensor[(16, 1), float64] */, %831, %832, %var_4572, %833)
}

def @func_5742() -> Tensor[(6, 5, 2), bool] {
  @func_5740() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_3372() -> (Tensor[(6, 5, 2), float32],) {
  %834 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  (%834,)
}

def @func_3908(%var_3906: Tensor[(16), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) {
  @func_3905(%var_3906) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(8, 1, 2), float64], Tensor[(16), float64]) */
}

def @func_4768() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_4766() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_7527() -> (Tensor[(6, 5, 2), float64],) {
  @func_7525() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_10434() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %839 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
    %835 = @func_9484() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %836 = @func_6274() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %837 = %835.1;
    %838 = %836.0;
    (%837, %838)
  };
  %839() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_7874() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_7872() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_10307(%var_10305: Tensor[(2, 16, 12), float64]) -> (Tensor[(2, 16, 12), float64], Tensor[(6, 5, 2), float32]) {
  @func_10304(%var_10305) /* ty=(Tensor[(2, 16, 12), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_3374() -> (Tensor[(6, 5, 2), float32],) {
  @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_7487() -> Tensor[(6, 5, 2), float32] {
  %841 = fn () -> Tensor[(6, 5, 2), float32] {
    %840 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %840.0
  };
  %841() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_9602() -> Tensor[(6, 5, 2), float64] {
  @func_9600() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_2968() -> (Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %842 = @func_732() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %843 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %844 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %845 = %842.1;
  %846 = %843.0;
  %847 = %844.0;
  (%845, %846, %847)
}

def @func_4973() -> (Tensor[(6, 5, 2), float64],) {
  @func_4971() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_3352() -> Tensor[(6, 5, 2), float32] {
  @func_3350() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_397() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %848 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %849 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %850 = erf(%849) /* ty=Tensor[(6, 5, 2), float32] */;
  %851 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 5, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%850, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %855 = cast(%850, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %856 = acosh(%848) /* ty=Tensor[(6, 5, 2), float32] */;
  %857 = less(%853, %854) /* ty=Tensor[(6, 5, 2), bool] */;
  %858 = acos(%855) /* ty=Tensor[(6, 5, 2), float64] */;
  (%856, %857, %858)
}

def @func_10384() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  @func_10382() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) */
}

def @func_12145() -> Tensor[(6, 5, 2), float64] {
  %860 = fn () -> Tensor[(6, 5, 2), float64] {
    %859 = @func_5983() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %859.1
  };
  %860() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_3801() -> (Tensor[(6, 5, 2), bool],) {
  %863 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %861 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %862 = %861.1;
    (%862,)
  };
  %863() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_13471() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64]) {
  %864 = @func_6332() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), float32]) */;
  %865 = @func_8475() /* ty=Tensor[(6, 5, 2), float32] */;
  %866 = %864.1;
  (%865, %866)
}

def @func_3395() -> Tensor[(6, 5, 2), float32] {
  %867 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %867.0
}

def @func_5004() -> Tensor[(6, 5, 2), bool] {
  %869 = fn () -> Tensor[(6, 5, 2), bool] {
    %868 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %868.1
  };
  %869() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_12566() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64]) {
  %880 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64]) {
    %870 = @func_9771() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
    %871 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %872 = @func_10100() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %873 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %874 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %875 = %870.0;
    %876 = %871.2;
    %877 = %872.0;
    %878 = %873.0;
    %879 = %874.1;
    (%875, %876, %877, %878, %879)
  };
  %880() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float64]) */
}

def @func_10315() -> (Tensor[(6, 5, 2), bool],) {
  %882 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %881 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
    (%881,)
  };
  %882() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_2156() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_748() -> (Tensor[(6, 5, 2), float64],) {
  %885 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %883 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
    %884 = %883.1;
    (%884,)
  };
  %885() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_2486() -> (Tensor[(6, 5, 2), float32],) {
  %888 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %886 = @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %887 = %886.1;
    (%887,)
  };
  %888() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_10304(%var_10297: Tensor[(2, 16, 12), float64]) -> (Tensor[(2, 16, 12), float64], Tensor[(6, 5, 2), float32]) {
  %889 = cast(%var_10297, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %890 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %891 = atan(%889) /* ty=Tensor[(2, 16, 12), float64] */;
  %892 = %890.1;
  (%891, %892)
}

def @func_5469() -> (Tensor[(6, 5, 2), float32],) {
  @func_5467() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_8091(%var_8089: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) {
  @func_8088(%var_8089) /* ty=(Tensor[(12, 2, 8), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_10101() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
  %897 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
    %893 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
    %894 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %895 = %893.0;
    %896 = %894.0;
    (%895, %896)
  };
  %897() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */
}

def @func_3195() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %902 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
    %898 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
    %899 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %900 = %898.0;
    %901 = %899.0;
    (%900, %901)
  };
  %902() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_7992() -> (Tensor[(3, 13, 8), uint16],) {
  %903 = @func_4926() /* ty=(Tensor[(3, 13, 8), uint16],) */;
  %904 = %903.0;
  (%904,)
}

def @func_3933(%var_3931: Tensor[(24, 1), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) {
  @func_3930(%var_3931) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) */
}

def @func_1328() -> (Tensor[(6, 5, 2), bool],) {
  %905 = @func_857() /* ty=Tensor[(6, 5, 2), bool] */;
  (%905,)
}

def @func_7712() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  %906 = @func_6673() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %907 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %908 = @func_6550() /* ty=(Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %909 = %906.0;
  %910 = %907.0;
  %911 = %908.2;
  (%909, %910, %911)
}

def @func_8377() -> (Tensor[(6, 5, 2), bool],) {
  %914 = fn () -> (Tensor[(6, 5, 2), bool],) {
    %912 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %913 = %912.0;
    (%913,)
  };
  %914() /* ty=(Tensor[(6, 5, 2), bool],) */
}

def @func_11212() -> (Tensor[(6, 5, 2), uint16],) {
  %915 = @func_2461() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %916 = %915.0;
  %917 = @func_10314() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %918 = %917.0;
  %919 = cast(%918, dtype="uint16") /* ty=Tensor[(6, 5, 2), uint16] */;
  %920 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%916, dtype="uint16") /* ty=Tensor[(6, 5, 2), uint16] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %923 = bitwise_or(%921, %922) /* ty=Tensor[(6, 5, 2), uint16] */;
  (%923,)
}

def @func_4193() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  @func_4191() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) */
}

def @func_5266(%var_5264: Tensor[(13, 3, 11), float64]) -> (Tensor[(13, 3, 11), float64],) {
  @func_5263(%var_5264) /* ty=(Tensor[(13, 3, 11), float64],) */
}

def @func_10382() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64]) {
  %924 = @func_1924() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %925 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %926 = @func_9424() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) */;
  %927 = %924.0;
  %928 = %925.1;
  %929 = %926.1;
  (%927, %928, %929)
}

def @func_13527() -> (Tensor[(6, 5, 2), float64], Tensor[(2160), float64], Tensor[(24), float64], Tensor[(14, 16, 1), int8]) {
  %937 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(2160), float64], Tensor[(24), float64], Tensor[(14, 16, 1), int8]) {
    %930 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
    %931 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %932 = @func_10284() /* ty=(Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) */;
    %933 = @func_9600() /* ty=Tensor[(6, 5, 2), float64] */;
    %934 = %930.2;
    %935 = %931.3;
    %936 = %932.0;
    (%933, %934, %935, %936)
  };
  %937() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2160), float64], Tensor[(24), float64], Tensor[(14, 16, 1), int8]) */
}

def @func_1005() -> Tensor[(6, 5, 2), float64] {
  %938 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %938.0
}

def @func_6985(%var_6981: Tensor[(4, 11, 4), float32]) -> Tensor[(4, 11, 4), float32] {
  %939 = cast(%var_6981, dtype="float32") /* ty=Tensor[(4, 11, 4), float32] */;
  sinh(%939) /* ty=Tensor[(4, 11, 4), float32] */
}

def @func_12955() -> (Tensor[(6, 5, 2), bool],) {
  %940 = @func_3800() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %941 = %940.0;
  (%941,)
}

def @func_8782() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  @func_8780() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_7714() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) {
  @func_7712() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */
}

def @func_11715(%var_11705: Tensor[(780), uint32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], uint32, Tensor[(780), uint32]) {
  %942 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %943 = cast(%var_11705, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %944 = reshape(%942, newshape=[]) /* ty=uint32 */;
  %945 = reshape(%943, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint32] */;
  %946 = @func_3316(%944, %945) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(6, 5, 2), float32]) */;
  %947 = @func_5003() /* ty=Tensor[(6, 5, 2), bool] */;
  %948 = %946.1;
  (%947, %948, meta[relay.Constant][28] /* ty=uint32 */, %var_11705)
}

def @func_7994() -> (Tensor[(3, 13, 8), uint16],) {
  @func_7992() /* ty=(Tensor[(3, 13, 8), uint16],) */
}

def @func_5879(%var_5877: Tensor[(1, 64), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(?, 64), uint16]) {
  @func_5876(%var_5877) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(?, 64), uint16]) */
}

def @func_908(%var_902: Tensor[(2, 16, 2), float32], %var_903: Tensor[(2, 16, 2), float32]) -> Tensor[(2, 16, 2), bool] {
  %949 = cast(%var_903, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %950 = shape_of(%var_902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_902, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%951, %952) /* ty=Tensor[(2, 16, 2), bool] */
}

def @func_1361(%var_1360: Tensor[(1, 12, 5), int16]) -> Tensor[(?, 12, 5), uint32] {
  %962 = fn (%var_1349: Tensor[(1, 12, 5), int16]) -> Tensor[(?, 12, 5), uint32] {
    %953 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 12, 5), int16] */, dtype="int16") /* ty=Tensor[(1, 12, 5), int16] */;
    %954 = shape_of(%var_1349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%var_1349, dtype="int16") /* ty=Tensor[(1, 12, 5), int16] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %957 = add(%955, %956) /* ty=Tensor[(?, 12, 5), int16] */;
    %958 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 12, 5), int16] */, dtype="uint32") /* ty=Tensor[(1, 12, 5), uint32] */;
    %959 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %960 = cast(%957, dtype="uint32") /* ty=Tensor[(?, 12, 5), uint32] */;
    %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%960, %961) /* ty=Tensor[(?, 12, 5), uint32] */
  };
  %962(%var_1360) /* ty=Tensor[(?, 12, 5), uint32] */
}

def @func_4971() -> (Tensor[(6, 5, 2), float64],) {
  %963 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %964 = %963.0;
  (%964,)
}

def @func_11570() -> Tensor[(6, 5, 2), float32] {
  @func_11568() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_2238(%var_2232: Tensor[(4, 2, 3), float32]) -> Tensor[(4, 2, 3), float32] {
  %965 = cast(%var_2232, dtype="float32") /* ty=Tensor[(4, 2, 3), float32] */;
  tan(%965) /* ty=Tensor[(4, 2, 3), float32] */
}

def @func_13194() -> (Tensor[(6, 5, 2), float64],) {
  %968 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %966 = @func_7525() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %967 = %966.0;
    (%967,)
  };
  %968() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_11214() -> (Tensor[(6, 5, 2), uint16],) {
  @func_11212() /* ty=(Tensor[(6, 5, 2), uint16],) */
}

def @func_10358() -> Tensor[(6, 5, 2), float32] {
  %969 = @func_3063() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %969.0
}

def @func_11939() -> (Tensor[(6, 5, 2), float32],) {
  %970 = @func_11423() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %971 = %970.0;
  (%971,)
}

def @func_7092(%var_7074: Tensor[(24), float32], %var_7077: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool], Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(4, 2, 3), float32], Tensor[(24), float32], Tensor[(660), uint8], Tensor[(660), uint8]) {
  %972 = @func_4752() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
  %973 = @func_6901() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %974 = @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %975 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %976 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %977 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %978 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
  %979 = cast(%var_7074, dtype="float32") /* ty=Tensor[(24), float32] */;
  %980 = reshape(%979, newshape=[4, 2, 3]) /* ty=Tensor[(4, 2, 3), float32] */;
  %981 = %973.0;
  %982 = cast(%981, dtype="uint8") /* ty=Tensor[(6, 5, 2), uint8] */;
  %983 = cast(%var_7077, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %984 = reshape(%982, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), uint8] */;
  %985 = reshape(%983, newshape=[660]) /* ty=Tensor[(660), uint8] */;
  %986 = @func_4444(%984, %985) /* ty=(Tensor[(6, 5, 2), int8], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) */;
  %987 = %972.0;
  %988 = %974.1;
  %989 = %975.0;
  %990 = %976.1;
  %991 = %977.0;
  %992 = %978.1;
  %993 = @func_2238(%980) /* ty=Tensor[(4, 2, 3), float32] */;
  %994 = %986.2;
  (%987, %981, %988, %989, %990, %991, %992, %993, %var_7074, %994, %var_7077)
}

def @func_11516() -> Tensor[(6, 5, 2), float64] {
  @func_11514() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_12410(%var_12408: Tensor[(5, 1, 11), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(5, 1, 11), float64]) {
  @func_12407(%var_12408) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(5, 1, 11), float64]) */
}

def @func_7586() -> (Tensor[(6, 5, 2), float64],) {
  %996 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %995 = @func_4305() /* ty=Tensor[(6, 5, 2), float64] */;
    (%995,)
  };
  %996() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_5183() -> (Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) {
  %997 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %998 = @func_4257() /* ty=(Tensor[(?, 12, 5), float32], Tensor[(6, 5, 2), bool], Tensor[(?, 12, 5), float64]) */;
  %999 = sigmoid(%997) /* ty=Tensor[(11, 10, 13), float32] */;
  %1000 = %998.1;
  (%999, %1000)
}

def @func_11425() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_11423() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_10478(%var_10456: Tensor[(14, 15, 12), float32], %var_10472: Tensor[(26), bool], %var_10473: Tensor[(234), bool]) -> (Tensor[(6, 5, 2), float32], Tensor[(26), bool], Tensor[(234), bool], Tensor[(14, 15, 12), float32]) {
  %1001 = cast(%var_10472, dtype="bool") /* ty=Tensor[(26), bool] */;
  %1002 = cast(%var_10473, dtype="bool") /* ty=Tensor[(234), bool] */;
  %1003 = reshape(%1001, newshape=[1, 26]) /* ty=Tensor[(1, 26), bool] */;
  %1004 = reshape(%1002, newshape=[9, 26]) /* ty=Tensor[(9, 26), bool] */;
  %1005 = @func_9015(%1003, %1004) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) */;
  %1006 = cast(%var_10456, dtype="float32") /* ty=Tensor[(14, 15, 12), float32] */;
  %1007 = asinh(%1006) /* ty=Tensor[(14, 15, 12), float32] */;
  %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(14, 15, 12), float32] */;
  %1009 = %1005.1;
  %1010 = cosh(%1008) /* ty=Tensor[(14, 15, 12), float32] */;
  (%1009, %var_10472, %var_10473, %1010)
}

def @func_9914() -> Tensor[(6, 5, 2), float32] {
  %1011 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1011.0
}

def @func_12093() -> Tensor[(?, 12, 5), int16] {
  %1013 = fn () -> Tensor[(?, 12, 5), int16] {
    %1012 = @func_9466() /* ty=(Tensor[(?, 12, 5), int16],) */;
    %1012.0
  };
  %1013() /* ty=Tensor[(?, 12, 5), int16] */
}

def @func_2101(%var_2094: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
  %1014 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %1015 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %1016 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(660), uint8] */;
  %1017 = reshape(%1015, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %1018 = reshape(%1016, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %1019 = @func_1562(%1017, %1018) /* ty=(Tensor[(10, 6, 11), uint8],) */;
  %1020 = %1014.0;
  %1021 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  %1022 = %1019.0;
  (%1020, %1021, %1022, %var_2094)
}

def @func_534() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) {
  %1023 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
  %1024 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %1025 = %1023.1;
  %1026 = %1024.1;
  (%1025, %1026)
}

def @func_4639() -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) {
  @func_4637() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */
}

def @func_4287() -> (Tensor[(6, 5, 2), float32],) {
  %1027 = @func_983() /* ty=Tensor[(6, 5, 2), float32] */;
  (%1027,)
}

def @func_10921() -> (Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) {
  @func_10919() /* ty=(Tensor[(11, 13, 14), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_4354() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  %1031 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
    %1028 = @func_4053() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %1029 = @func_2643() /* ty=Tensor[(6, 5, 2), float64] */;
    %1030 = %1028.0;
    (%1029, %1030)
  };
  %1031() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_3533(%var_3532: Tensor[(6, 5, 2), float32]) -> Tensor[(6, 5, 2), int64] {
  %1038 = fn (%var_3519: Tensor[(6, 5, 2), float32]) -> Tensor[(6, 5, 2), int64] {
    %1032 = @func_1616() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1033 = %1032.0;
    %1034 = cast(%var_3519, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
    %1035 = shape_of(%1033, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1036 = cast(%1033, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
    %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%1036, %1037) /* ty=Tensor[(6, 5, 2), int64] */
  };
  %1038(%var_3532) /* ty=Tensor[(6, 5, 2), int64] */
}

def @func_5185() -> (Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) {
  @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_11381() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %1043 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
    %1039 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %1040 = @func_7712() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
    %1041 = %1039.0;
    %1042 = %1040.1;
    (%1041, %1042)
  };
  %1043() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_2602() -> (Tensor[(6, 5, 2), float32],) {
  %1046 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %1044 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
    %1045 = %1044.1;
    (%1045,)
  };
  %1046() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_13402() -> Tensor[(6, 15, 16), uint8] {
  %1051 = fn () -> Tensor[(6, 15, 16), uint8] {
    %1047 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 16), uint8] */;
    %1048 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1049 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 15, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 16), uint8] */;
    %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%1049, %1050) /* ty=Tensor[(6, 15, 16), uint8] */
  };
  %1051() /* ty=Tensor[(6, 15, 16), uint8] */
}

def @func_12191() -> (Tensor[(6, 5, 2), float64],) {
  @func_12189() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_13229() -> (Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(1, 270), float32]) {
  %1057 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(1, 270), float32]) {
    %1052 = @func_6550() /* ty=(Tensor[(6, 5, 2), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool]) */;
    %1053 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
    %1054 = reshape(%1053, newshape=[2, 9, 15]) /* ty=Tensor[(2, 9, 15), float32] */;
    %1055 = %1052.4;
    %1056 = @func_2136(%1054) /* ty=Tensor[(2, 9, 15), bool] */;
    (%1055, %1056, meta[relay.Constant][33] /* ty=Tensor[(1, 270), float32] */)
  };
  %1057() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 9, 15), bool], Tensor[(1, 270), float32]) */
}

def @func_5998() -> Tensor[(6, 5, 2), bool] {
  @func_5996() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_1869() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  @func_1867() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_2104(%var_2102: Tensor[(660), uint8]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) {
  @func_2101(%var_2102) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(10, 6, 11), uint8], Tensor[(660), uint8]) */
}

def @func_6902() -> (Tensor[(6, 5, 2), float64],) {
  %1060 = fn () -> (Tensor[(6, 5, 2), float64],) {
    %1058 = @func_4053() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %1059 = %1058.0;
    (%1059,)
  };
  %1060() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_2441() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %1065 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
    %1061 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %1062 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1063 = %1061.1;
    %1064 = %1062.0;
    (%1063, %1064)
  };
  %1065() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */
}

def @func_7386(%var_7384: Tensor[(9, 8, 1), float32], %var_7385: Tensor[(9, 8, 1), float32]) -> (Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) {
  %1073 = fn (%var_7366: Tensor[(9, 8, 1), float32], %var_7367: Tensor[(9, 8, 1), float32]) -> (Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) {
    %1066 = cast(%var_7367, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
    %1067 = shape_of(%var_7366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1068 = cast(%var_7366, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
    %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1070 = @func_5983() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %1071 = mod(%1068, %1069) /* ty=Tensor[(9, 8, ?), float32] */;
    %1072 = %1070.1;
    (%1071, %1072)
  };
  %1073(%var_7384, %var_7385) /* ty=(Tensor[(9, 8, ?), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_11836(%var_11834: Tensor[(15, 5, 5), uint8], %var_11835: Tensor[(110, 6), uint8]) -> (Tensor[(6, 5, 2), float32], Tensor[(15, 5, ?), bool], Tensor[(15, 5, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(10, 6, 11), uint8], Tensor[(110, 6), uint8]) {
  @func_11832(%var_11834, %var_11835) /* ty=(Tensor[(6, 5, 2), float32], Tensor[(15, 5, ?), bool], Tensor[(15, 5, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(10, 6, 11), uint8], Tensor[(110, 6), uint8]) */
}

def @func_12407(%var_12376: Tensor[(5, 1, 11), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), bool], Tensor[(5, 1, 11), float64]) {
  %1074 = @func_5692() /* ty=(Tensor[(6, 5, 2), bool],) */;
  %1075 = cast(%var_12376, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
  %1076 = sqrt(%1075) /* ty=Tensor[(5, 1, 11), float32] */;
  %1077 = cast(%1076, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %1078 = @func_5996() /* ty=Tensor[(6, 5, 2), bool] */;
  %1079 = %1074.0;
  %1080 = asinh(%1077) /* ty=Tensor[(5, 1, 11), float64] */;
  (%1078, %1079, %1080)
}

def @func_5876(%var_5779: Tensor[(1, 64), float32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(?, 64), uint16]) {
  %1081 = @func_5524() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %1082 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %1083 = @func_3194() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %1084 = %1083.1;
  %1085 = cast(%1084, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %1086 = cast(%var_5779, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %1087 = cast(%var_5779, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %1088 = reshape(%1086, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %1089 = reshape(%1087, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float32] */;
  %1090 = @func_908(%1088, %1089) /* ty=Tensor[(2, 16, 2), bool] */;
  %1091 = cast(%1090, dtype="uint16") /* ty=Tensor[(2, 16, 2), uint16] */;
  %1092 = shape_of(%var_5779, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1093 = cast(%var_5779, dtype="uint16") /* ty=Tensor[(1, 64), uint16] */;
  %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %1095 = %1081.0;
  %1096 = %1082.1;
  %1097 = cosh(%1085) /* ty=Tensor[(6, 5, 2), float64] */;
  %1098 = @func_4157() /* ty=Tensor[(6, 5, 2), bool] */;
  %1099 = subtract(%1093, %1094) /* ty=Tensor[(?, 64), uint16] */;
  (%1095, %1096, %1097, %1098, %1099)
}

def @func_9486() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) {
  @func_9484() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */
}

def @func_1925() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %1106 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
    %1100 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %1101 = %1100.0;
    %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %1103 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
    %1104 = atan(%1102) /* ty=Tensor[(6, 5, 2), float32] */;
    %1105 = %1103.0;
    (%1104, %1105)
  };
  %1106() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_2910(%var_2898: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), float64],) {
  %1107 = cast(%var_2898, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %1108 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(12, 15, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1109 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %1110 = dyn.reshape(%1107, %1108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1111 = floor_divide(%1109, %1110) /* ty=Tensor[(12, 15, 12), float64] */;
  (%1111,)
}

def @func_5984() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %1116 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
    %1112 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %1113 = @func_2154() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64]) */;
    %1114 = %1112.2;
    %1115 = %1113.0;
    (%1114, %1115)
  };
  %1116() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_2644() -> Tensor[(6, 5, 2), float64] {
  %1117 = fn () -> Tensor[(6, 5, 2), float64] {
    @func_2223() /* ty=Tensor[(6, 5, 2), float64] */
  };
  %1117() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_3787() -> (Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) {
  @func_3785() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) */
}

def @func_9033() -> (Tensor[(6, 5, 2), float32], Tensor[(4, 11, 4), float32], Tensor[(176), float32]) {
  %1123 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(4, 11, 4), float32], Tensor[(176), float32]) {
    %1118 = @func_3372() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1119 = cast(meta[relay.Constant][35] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
    %1120 = reshape(%1119, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float32] */;
    %1121 = %1118.0;
    %1122 = @func_6985(%1120) /* ty=Tensor[(4, 11, 4), float32] */;
    (%1121, %1122, meta[relay.Constant][35] /* ty=Tensor[(176), float32] */)
  };
  %1123() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(4, 11, 4), float32], Tensor[(176), float32]) */
}

def @func_3397() -> Tensor[(6, 5, 2), float32] {
  @func_3395() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_4055() -> (Tensor[(6, 5, 2), float64],) {
  @func_4053() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_8667(%var_8665: Tensor[(13, 2), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(2, 7, 13), bool], Tensor[(13, 2), bool], Tensor[(6, 5, 2), float64]) {
  @func_8664(%var_8665) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(2, 7, 13), bool], Tensor[(13, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_5362(%var_5347: Tensor[(2, 1, 13), bool]) -> (Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) {
  %1124 = cast(%var_5347, dtype="bool") /* ty=Tensor[(2, 1, 13), bool] */;
  %1125 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %1126 = @func_2566() /* ty=(Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float32]) */;
  %1127 = logical_or(%1124, %1125) /* ty=Tensor[(2, 7, 13), bool] */;
  %1128 = %1126.1;
  (%1127, %1128)
}

def @func_11228() -> (Tensor[(6, 5, 2), float64],) {
  @func_11226() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_10808() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64]) {
  %1129 = @func_2862() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1130 = @func_1515() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), uint8]) */;
  %1131 = @func_6452() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(12, 15, 12), float64], Tensor[(2160), float64], Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), float64]) */;
  %1132 = %1129.0;
  %1133 = %1130.0;
  %1134 = %1131.1;
  (%1132, %1133, %1134)
}

def @func_5263(%var_5255: Tensor[(13, 3, 11), float64]) -> (Tensor[(13, 3, 11), float64],) {
  %1135 = cast(%var_5255, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %1136 = acos(%1135) /* ty=Tensor[(13, 3, 11), float64] */;
  (%1136,)
}

def @func_7401() -> Tensor[(6, 5, 2), float64] {
  %1137 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
  %1137.1
}

def @func_7403() -> Tensor[(6, 5, 2), float64] {
  @func_7401() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_1297() -> (Tensor[(6, 5, 2), float32],) {
  %1140 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %1138 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1139 = %1138.0;
    (%1139,)
  };
  %1140() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_897() -> (Tensor[(6, 5, 2), float32],) {
  %1141 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
  %1142 = %1141.0;
  %1143 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 5, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %1144 = shape_of(%1142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1145 = cast(%1142, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %1146 = dyn.reshape(%1143, %1144, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1147 = mod(%1145, %1146) /* ty=Tensor[(6, 5, 2), float32] */;
  (%1147,)
}

def @func_1726() -> (Tensor[(6, 5, 2), float32],) {
  %1148 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
  %1149 = cast(%1148, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
  %1150 = log(%1149) /* ty=Tensor[(6, 5, 2), float32] */;
  (%1150,)
}

def @func_4158() -> Tensor[(6, 5, 2), bool] {
  %1152 = fn () -> Tensor[(6, 5, 2), bool] {
    %1151 = @func_3800() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %1151.0
  };
  %1152() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_10051() -> Tensor[(6, 5, 2), float32] {
  %1153 = @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */;
  %1153.3
}

def @func_3278() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) {
  @func_3276() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) */
}

def @func_4307() -> Tensor[(6, 5, 2), float64] {
  @func_4305() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_11832(%var_11796: Tensor[(15, 5, 5), uint8], %var_11828: Tensor[(110, 6), uint8]) -> (Tensor[(6, 5, 2), float32], Tensor[(15, 5, ?), bool], Tensor[(15, 5, 5), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(10, 6, 11), uint8], Tensor[(110, 6), uint8]) {
  %1154 = @func_4287() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1155 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1156 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 1), uint8] */;
  %1157 = left_shift(%1155, %1156) /* ty=Tensor[(15, 5, 1), uint8] */;
  %1158 = cast(%1157, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %1159 = log(%1158) /* ty=Tensor[(15, 5, 1), float64] */;
  %1160 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1161 = shape_of(%1159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1162 = cast(%1159, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1164 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1165 = cast(%var_11796, dtype="bool") /* ty=Tensor[(15, 5, 5), bool] */;
  %1166 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1167 = cast(%var_11828, dtype="uint8") /* ty=Tensor[(110, 6), uint8] */;
  %1168 = cast(%var_11828, dtype="uint8") /* ty=Tensor[(110, 6), uint8] */;
  %1169 = reshape(%1167, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %1170 = reshape(%1168, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), uint8] */;
  %1171 = @func_1562(%1169, %1170) /* ty=(Tensor[(10, 6, 11), uint8],) */;
  %1172 = %1154.0;
  %1173 = greater(%1162, %1163) /* ty=Tensor[(15, 5, ?), bool] */;
  %1174 = less_equal(%1164, %1165) /* ty=Tensor[(15, 5, 5), bool] */;
  %1175 = %1166.0;
  %1176 = @func_5232() /* ty=Tensor[(6, 5, 2), float64] */;
  %1177 = %1171.0;
  (%1172, %1173, %1174, %1175, %1176, %1177, %var_11828)
}

def @func_13391(%var_13386: Tensor[(24), float64]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(24), float64]) {
  %1178 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1179 = @func_9326() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32], Tensor[(2, 6, 2), float64], Tensor[(24), float64]) */;
  %1180 = cast(%var_13386, dtype="float64") /* ty=Tensor[(24), float64] */;
  %1181 = reshape(%1180, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %1182 = @func_3930(%1181) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24, 1), float64]) */;
  %1183 = %1178.0;
  %1184 = %1179.2;
  %1185 = %1182.0;
  (%1183, %1184, %1185, %var_13386)
}

def @func_10823() -> (Tensor[(2, 16, 8), float64],) {
  @func_10821() /* ty=(Tensor[(2, 16, 8), float64],) */
}

def @func_13171() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int32]) {
  %1191 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int32]) {
    %1186 = @func_3276() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) */;
    %1187 = @func_8619() /* ty=Tensor[(6, 5, 2), float64] */;
    %1188 = @func_857() /* ty=Tensor[(6, 5, 2), bool] */;
    %1189 = @func_8475() /* ty=Tensor[(6, 5, 2), float32] */;
    %1190 = %1186.1;
    (%1187, %1188, %1189, %1190)
  };
  %1191() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), int32]) */
}

def @func_3064() -> (Tensor[(6, 5, 2), float32],) {
  %1194 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %1192 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1193 = %1192.0;
    (%1193,)
  };
  %1194() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_9194() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_9192() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_4516(%var_4514: Tensor[(14, 9, 9), uint8], %var_4515: Tensor[(14, 9, 9), uint8]) -> (Tensor[(14, 9, 9), bool], Tensor[(14, 9, 9), bool]) {
  @func_4512(%var_4514, %var_4515) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(14, 9, 9), bool]) */
}

def @func_12037() -> (Tensor[(6, 5, 2), float64],) {
  @func_12035() /* ty=(Tensor[(6, 5, 2), float64],) */
}

def @func_578(%var_577: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int64] {
  %1201 = fn (%var_569: Tensor[(6, 5, 2), float64]) -> Tensor[(6, 5, 2), int64] {
    %1195 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %1196 = %1195.0;
    %1197 = cast(%var_569, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
    %1198 = shape_of(%1196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1199 = cast(%1196, dtype="int64") /* ty=Tensor[(6, 5, 2), int64] */;
    %1200 = dyn.reshape(%1197, %1198, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%1199, %1200) /* ty=Tensor[(6, 5, 2), int64] */
  };
  %1201(%var_577) /* ty=Tensor[(6, 5, 2), int64] */
}

def @func_1339(%var_1334: Tensor[(2, 6, 2), float64]) -> (Tensor[(2, 6, 2), float64],) {
  %1202 = cast(%var_1334, dtype="float64") /* ty=Tensor[(2, 6, 2), float64] */;
  %1203 = acos(%1202) /* ty=Tensor[(2, 6, 2), float64] */;
  (%1203,)
}

def @func_5927() -> Tensor[(6, 5, 2), bool] {
  %1205 = fn () -> Tensor[(6, 5, 2), bool] {
    %1204 = @func_3785() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) */;
    %1204.0
  };
  %1205() /* ty=Tensor[(6, 5, 2), bool] */
}

def @func_2802() -> (Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  @func_2800() /* ty=(Tensor[(16, 5, 10), float32], Tensor[(?, 12, 5), uint32], Tensor[(60), int16], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) */
}

def @func_2317() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  @func_2315() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_4214() -> Tensor[(6, 5, 2), float32] {
  %1206 = @func_2440() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) */;
  %1206.1
}

def @func_9018(%var_9016: Tensor[(1, 26), bool], %var_9017: Tensor[(9, 26), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) {
  %1221 = fn (%var_8988: Tensor[(1, 26), bool], %var_8996: Tensor[(9, 26), bool]) -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) {
    %1207 = @func_6978() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
    %1208 = cast(%var_8988, dtype="bool") /* ty=Tensor[(1, 26), bool] */;
    %1209 = reshape(%1208, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), bool] */;
    %1210 = @func_5362(%1209) /* ty=(Tensor[(2, 7, 13), bool], Tensor[(6, 5, 2), float32]) */;
    %1211 = cast(%var_8988, dtype="int8") /* ty=Tensor[(1, 26), int8] */;
    %1212 = cast(%var_8996, dtype="int8") /* ty=Tensor[(9, 26), int8] */;
    %1213 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1214 = @func_2968() /* ty=(Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
    %1215 = %1207.0;
    %1216 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
    %1217 = %1210.0;
    %1218 = bitwise_and(%1211, %1212) /* ty=Tensor[(9, 26), int8] */;
    %1219 = %1213.0;
    %1220 = %1214.0;
    (%1215, %1216, %1217, %1218, %1219, %1220)
  };
  %1221(%var_9016, %var_9017) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(2, 7, 13), bool], Tensor[(9, 26), int8], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8]) */
}

def @func_5467() -> (Tensor[(6, 5, 2), float32],) {
  %1222 = @func_4612() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1223 = %1222.0;
  (%1223,)
}

def @func_9426() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) {
  @func_9424() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), int64], Tensor[(6, 5, 2), bool]) */
}

def @func_4340() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32]) {
  %1224 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1225 = @func_2659() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */;
  %1226 = @func_1810() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */;
  %1227 = @func_4305() /* ty=Tensor[(6, 5, 2), float64] */;
  %1228 = %1224.2;
  %1229 = %1225.1;
  %1230 = %1226.4;
  (%1227, %1228, %1229, %1230)
}

def @func_2139(%var_2137: Tensor[(2, 9, 15), float32]) -> Tensor[(2, 9, 15), bool] {
  @func_2136(%var_2137) /* ty=Tensor[(2, 9, 15), bool] */
}

def @func_2461() -> (Tensor[(6, 5, 2), float32],) {
  %1231 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1232 = %1231.0;
  (%1232,)
}

def @func_5507() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64]) {
  %1233 = @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1234 = @func_3700() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1235 = %1233.0;
  %1236 = %1234.0;
  (%1235, %1236)
}

def @func_399() -> (Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

def @func_1811() -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) {
  %1249 = fn () -> (Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) {
    %1237 = @func_534() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %1238 = %1237.0;
    %1239 = cast(%1238, dtype="float32") /* ty=Tensor[(6, 5, 2), float32] */;
    %1240 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %1241 = @func_1328() /* ty=(Tensor[(6, 5, 2), bool],) */;
    %1242 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %1243 = @func_1296() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1244 = log10(%1239) /* ty=Tensor[(6, 5, 2), float32] */;
    %1245 = %1240.5;
    %1246 = %1241.0;
    %1247 = %1242.3;
    %1248 = %1243.0;
    (%1244, %1245, %1246, %1247, %1248)
  };
  %1249() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(?, 12, 5), bool], Tensor[(6, 5, 2), bool], Tensor[(24), float64], Tensor[(6, 5, 2), float32]) */
}

def @func_7525() -> (Tensor[(6, 5, 2), float64],) {
  %1250 = @func_5232() /* ty=Tensor[(6, 5, 2), float64] */;
  (%1250,)
}

def @func_3700() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) {
  %1251 = @func_789() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %1252 = @func_747() /* ty=(Tensor[(6, 5, 2), float64],) */;
  %1253 = @func_2520() /* ty=(Tensor[(6, 5, 2), float32],) */;
  %1254 = @func_1005() /* ty=Tensor[(6, 5, 2), float64] */;
  %1255 = %1251.0;
  %1256 = %1252.0;
  %1257 = %1253.0;
  (%1254, %1255, %1256, %1257)
}

def @func_899() -> (Tensor[(6, 5, 2), float32],) {
  @func_897() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_11105(%var_11103: Tensor[(2160), float64]) -> (Tensor[(6, 5, 2), bool], Tensor[(12, 15, 12), float64], Tensor[(2160), float64]) {
  %1258 = @func_5183() /* ty=(Tensor[(11, 10, 13), float32], Tensor[(6, 5, 2), bool]) */;
  %1259 = cast(%var_11103, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %1260 = reshape(%1259, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %1261 = @func_2910(%1260) /* ty=(Tensor[(12, 15, 12), float64],) */;
  %1262 = %1258.1;
  %1263 = %1261.0;
  (%1262, %1263, %var_11103)
}

def @func_13143() -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
  %1269 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) {
    %1264 = @func_1463() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(2, 6, 2), float64], Tensor[(24), float64], Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), bool]) */;
    %1265 = @func_10100() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), bool]) */;
    %1266 = %1264.1;
    %1267 = @func_6811() /* ty=Tensor[(6, 5, 2), float32] */;
    %1268 = %1265.1;
    (%1266, %1267, %1268)
  };
  %1269() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool]) */
}

def @func_11718(%var_11716: Tensor[(780), uint32]) -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], uint32, Tensor[(780), uint32]) {
  @func_11715(%var_11716) /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float32], uint32, Tensor[(780), uint32]) */
}

def @func_5287() -> Tensor[(16, 10, 15), float32] {
  %1271 = fn () -> Tensor[(16, 10, 15), float32] {
    %1270 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
    sigmoid(%1270) /* ty=Tensor[(16, 10, 15), float32] */
  };
  %1271() /* ty=Tensor[(16, 10, 15), float32] */
}

def @func_3785() -> (Tensor[(6, 5, 2), bool], Tensor[(2, 16, 2), bool]) {
  %1272 = @func_1136() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
  %1273 = @func_1079() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(2, 16, 2), bool], Tensor[(64), float32], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float32]) */;
  %1274 = %1272.0;
  %1275 = %1273.1;
  (%1274, %1275)
}

def @func_9062(%var_9060: Tensor[(4, 13, 8), float64]) -> (Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) {
  @func_9059(%var_9060) /* ty=(Tensor[(4, 13, 8), float64], Tensor[(4, 13, 8), float64]) */
}

def @func_2521() -> (Tensor[(6, 5, 2), float32],) {
  %1278 = fn () -> (Tensor[(6, 5, 2), float32],) {
    %1276 = @func_953() /* ty=(Tensor[(6, 5, 2), float32],) */;
    %1277 = %1276.0;
    (%1277,)
  };
  %1278() /* ty=(Tensor[(6, 5, 2), float32],) */
}

def @func_3818() -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) {
  %1283 = fn () -> (Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) {
    %1279 = @func_3208() /* ty=Tensor[(6, 5, 2), float64] */;
    %1280 = cast(%1279, dtype="int16") /* ty=Tensor[(6, 5, 2), int16] */;
    %1281 = reshape(%1280, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), int16] */;
    %1282 = @func_1359(%1281) /* ty=Tensor[(?, 12, 5), uint32] */;
    (%1279, %1282)
  };
  %1283() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */
}

def @main(%var_13721: Tensor[(16, 7, 10), float64]) -> Tensor[(16, 7, 10), float64] {
  %1284 = cast(%var_13721, dtype="float64") /* ty=Tensor[(16, 7, 10), float64] */;
  %1285 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 7, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1286 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 7, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 7, 10), float64] */;
  %1287 = dyn.reshape(%1284, %1285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%1286, %1287) /* ty=Tensor[(16, 7, 10), float64] */
}

def @func_9173() -> Tensor[(6, 5, 2), float32] {
  @func_9171() /* ty=Tensor[(6, 5, 2), float32] */
}

def @func_8497() -> Tensor[(6, 5, 2), float64] {
  %1289 = fn () -> Tensor[(6, 5, 2), float64] {
    %1288 = @func_3817() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(?, 12, 5), uint32]) */;
    %1288.0
  };
  %1289() /* ty=Tensor[(6, 5, 2), float64] */
}

def @func_10285() -> (Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) {
  %1295 = fn () -> (Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) {
    %1290 = cast(meta[relay.Constant][42] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %1291 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 16, 1), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 1), int8] */;
    %1292 = @func_514() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), uint8], Tensor[(6, 5, 2), bool]) */;
    %1293 = bitwise_xor(%1290, %1291) /* ty=Tensor[(14, 16, 1), int8] */;
    %1294 = %1292.0;
    (%1293, %1294)
  };
  %1295() /* ty=(Tensor[(14, 16, 1), int8], Tensor[(6, 5, 2), float64]) */
}

def @func_4053() -> (Tensor[(6, 5, 2), float64],) {
  %1296 = @func_3164() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(16, 16, 13), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), float32]) */;
  %1297 = %1296.4;
  (%1297,)
}

def @func_12021() -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
  %1302 = fn () -> (Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) {
    %1298 = @func_3276() /* ty=(Tensor[(6, 5, 2), float64], Tensor[(6, 5, 2), int32], Tensor[(6, 5, 2), bool]) */;
    %1299 = @func_397() /* ty=(Tensor[(6, 5, 2), float32], Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */;
    %1300 = %1298.2;
    %1301 = %1299.2;
    (%1300, %1301)
  };
  %1302() /* ty=(Tensor[(6, 5, 2), bool], Tensor[(6, 5, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen529/build/output.py:4685: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen529/build/output.py", line 4690, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_add_kernel0(double* __restrict__ T_add, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1120) {
    T_add[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] + placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

