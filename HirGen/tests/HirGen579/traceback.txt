==========mod==========
#[version = "0.0.5"]
def @func_6120(%var_6096: Tensor[(3, 10, 2), float32], %var_6112: Tensor[(1, 135), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %1 = shape_of(%var_6096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6096, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %4 = cast(%var_6112, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %5 = reshape(%4, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %6 = @func_435(%5) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %7 = mod(%2, %3) /* ty=Tensor[(3, 10, 2), float32] */;
  %8 = %6.2;
  (%7, %8, %var_6112)
}

def @func_970() -> (Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
  %9 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %10 = %9.0;
  %11 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  (%10, %11)
}

def @func_2360() -> (Tensor[(15, 9, 2), int16],) {
  %12 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %13 = %12.1;
  (%13,)
}

def @func_3365() -> Tensor[(16, 4, 4), float32] {
  %14 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %14.0
}

def @func_8035() -> Tensor[(16, 4, 4), float32] {
  %15 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %15.0
}

def @func_3136() -> (Tensor[(1, 324), float32],) {
  %16 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %17 = %16.2;
  (%17,)
}

def @func_1854() -> Tensor[(16, 4, 4), float32] {
  %18 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %18.0
}

def @func_3316() -> (Tensor[(16, 4, 4), float32],) {
  %19 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %20 = %19.3;
  (%20,)
}

def @func_4891() -> (Tensor[(15, 9, 2), float64], Tensor[(3, 45), float32], Tensor[(1, 135), float32], Tensor[(16, 4, 4), float32]) {
  %21 = @func_3762() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %23 = reshape(%22, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %24 = @func_435(%23) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %25 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %26 = %21.0;
  %27 = %24.4;
  %28 = %25.1;
  (%26, %27, meta[relay.Constant][1] /* ty=Tensor[(1, 135), float32] */, %28)
}

def @func_5615() -> (Tensor[(15, 9, 2), float32], Tensor[(15, 9, 2), float64]) {
  %29 = @func_4304() /* ty=(Tensor[(15, 9, 2), float32],) */;
  %30 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %31 = %29.0;
  %32 = %30.2;
  (%31, %32)
}

def @func_4254() -> (Tensor[(5, 4, 2), float32], Tensor[(15, 9, 2), float64]) {
  %33 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %34 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %35 = %33.0;
  (%34, %35)
}

def @func_6547() -> (Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) {
  %36 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %37 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %38 = %36.1;
  %39 = %37.0;
  (%38, %39)
}

def @func_483(%var_447: uint32, %var_463: Tensor[(2, 16, 8), uint32]) -> (Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) {
  %40 = cast(%var_447, dtype="uint16") /* ty=uint16 */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %43 = cast(%var_463, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %44 = cast(%var_447, dtype="uint32") /* ty=uint32 */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="uint32") /* ty=Tensor[(2, 1, 8), uint32] */;
  %46 = maximum(%44, %45) /* ty=Tensor[(2, 1, 8), uint32] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %48 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %49 = left_shift(%40, %41) /* ty=Tensor[(2, 1, 8), uint16] */;
  %50 = logical_or(%42, %43) /* ty=Tensor[(2, 16, 8), bool] */;
  %51 = rsqrt(%47) /* ty=Tensor[(2, 1, 8), float32] */;
  %52 = %48.1;
  (%49, %50, %51, %52)
}

def @main(%var_9158: Tensor[(45, 3), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(135), float64], Tensor[(45, 3), float64]) {
  %53 = cast(%var_9158, dtype="float32") /* ty=Tensor[(45, 3), float32] */;
  %54 = reshape(%53, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %55 = @func_7737(%54) /* ty=(Tensor[(135), float64],) */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(45, 3), float32] */, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %57 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(2), int32] */;
  %58 = cast(%var_9158, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %60 = @func_7870() /* ty=Tensor[(16, 4, 4), float32] */;
  %61 = %55.0;
  %62 = mod(%58, %59) /* ty=Tensor[(45, 3), float64] */;
  (%60, %61, %62)
}

def @func_5685(%var_5647: Tensor[(13, 2, 13), float32]) -> (Tensor[(13, 2, 13), bool],) {
  %63 = cast(%var_5647, dtype="float32") /* ty=Tensor[(13, 2, 13), float32] */;
  %64 = log(%63) /* ty=Tensor[(13, 2, 13), float32] */;
  %65 = cast(%64, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %66 = shape_of(%var_5647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_5647, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = greater(%67, %68) /* ty=Tensor[(13, 2, 13), bool] */;
  (%69,)
}

def @func_349() -> (Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
  %70 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %71 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %72 = %70.3;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(135), float32] */;
  %74 = reshape(%73, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %75 = @func_99(%74) /* ty=Tensor[(9, 1, 15), float32] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %77 = %71.0;
  %78 = cosh(%76) /* ty=Tensor[(9, 1, 15), float32] */;
  (%72, %77, %78)
}

def @func_4692() -> (Tensor[(15, 9, 2), float64], Tensor[(1, 324), float32]) {
  %79 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %80 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %81 = %79.0;
  %82 = %80.0;
  (%81, %82)
}

def @func_2285() -> (Tensor[(16, 4, 4), float32],) {
  %83 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
  (%83,)
}

def @func_663() -> Tensor[(16, 4, 4), float32] {
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 4, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  log10(%84) /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_5266(%var_5250: Tensor[(13, 3, 16), float32], %var_5251: Tensor[(13, 3, 16), float32]) -> (Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  %85 = cast(%var_5251, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %86 = shape_of(%var_5250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_5250, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %90 = reshape(%89, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %91 = @func_435(%90) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %92 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %93 = greater_equal(%87, %88) /* ty=Tensor[(13, 3, 16), bool] */;
  %94 = %91.0;
  %95 = %92.0;
  (%93, %94, meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, %95)
}

def @func_8879() -> (Tensor[(16, 16), float32],) {
  %96 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
  %97 = %96.1;
  (%97,)
}

def @func_8668() -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
  %98 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %99 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %100 = %98.0;
  %101 = @func_8104() /* ty=Tensor[(16, 4, 4), float32] */;
  %102 = @func_6701() /* ty=Tensor[(15, 9, 2), float64] */;
  %103 = %99.0;
  (%100, %101, %102, %103)
}

def @func_2736() -> (Tensor[(15, 9, 2), float64],) {
  %104 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %105 = %104.0;
  (%105,)
}

def @func_4412() -> Tensor[(15, 9, 2), float64] {
  %106 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %106.0
}

def @func_7769() -> (Tensor[(16, 4, 4), float32], uint32, Tensor[(140), float32], Tensor[(16, 4, 4), float32]) {
  %107 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
  %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %109 = %107.0;
  %110 = cast(%109, dtype="uint32") /* ty=Tensor[(16, 4, 4), uint32] */;
  %111 = reshape(%108, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
  %112 = reshape(%110, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %113 = @func_6240(%111, %112) /* ty=(Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) */;
  %114 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
  %115 = %113.2;
  %116 = %114.0;
  (%109, %115, meta[relay.Constant][6] /* ty=Tensor[(140), float32] */, %116)
}

def @func_435(%var_431: Tensor[(3, 45), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) {
  %117 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %120 = cast(%118, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %121 = sinh(%120) /* ty=Tensor[(15, 9, 2), float64] */;
  %122 = cast(%118, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %127 = cast(%var_431, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %128 = reshape(%127, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %129 = sqrt(%119) /* ty=Tensor[(15, 9, 2), float64] */;
  %130 = logical_or(%124, %125) /* ty=Tensor[(15, 9, 2), bool] */;
  %131 = %126.0;
  %132 = @func_99(%128) /* ty=Tensor[(9, 1, 15), float32] */;
  (%129, %130, %131, %132, %var_431)
}

def @func_5483(%var_5453: int64, %var_5454: Tensor[(5, 11, 9), int64]) -> (Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) {
  %133 = cast(%var_5453, dtype="int64") /* ty=int64 */;
  %134 = cast(%var_5454, dtype="int64") /* ty=Tensor[(5, 11, 9), int64] */;
  %135 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %136 = maximum(%133, %134) /* ty=Tensor[(5, 11, 9), int64] */;
  %137 = %135.0;
  (%136, %137)
}

def @func_3916() -> (Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) {
  %138 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %140 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  %141 = log10(%139) /* ty=Tensor[(9, 1, 15), float32] */;
  (%140, %141)
}

def @func_1272(%var_1268: Tensor[(3, 5, 16), uint8]) -> Tensor[(3, 5, 16), bool] {
  %142 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %143 = cast(%var_1268, dtype="bool") /* ty=Tensor[(3, 5, 16), bool] */;
  greater(%142, %143) /* ty=Tensor[(3, 5, 16), bool] */
}

def @func_4967(%var_4960: Tensor[(9, 5, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(9, 5, 15), bool]) {
  %144 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %145 = @func_1656() /* ty=Tensor[(9, 1, 15), float32] */;
  %146 = cast(%145, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %147 = cast(%var_4960, dtype="bool") /* ty=Tensor[(9, 5, 15), bool] */;
  %148 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  %149 = %144.0;
  %150 = not_equal(%146, %147) /* ty=Tensor[(9, 5, 15), bool] */;
  (%148, %149, %150)
}

def @func_2972() -> Tensor[(16, 4, 4), float32] {
  @func_2255() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_3344(%var_3325: Tensor[(64, 4), float32], %var_3336: Tensor[(540), float32]) -> (Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) {
  %151 = cast(%var_3325, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
  %152 = reshape(%151, newshape=[32, 8]) /* ty=Tensor[(32, 8), float32] */;
  %153 = @func_3053(%152) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) */;
  %154 = cast(%var_3336, dtype="float32") /* ty=Tensor[(540), float32] */;
  %155 = reshape(%154, newshape=[540]) /* ty=Tensor[(540), float32] */;
  %156 = @func_2595(%155) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) */;
  %157 = @func_2031() /* ty=Tensor[(135), float32] */;
  %158 = %153.5;
  %159 = %156.0;
  (%157, %158, %var_3325, %159, %var_3336)
}

def @func_6266() -> (Tensor[(42), float64],) {
  %160 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %161 = %160.2;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(42), float64] */;
  %163 = tan(%162) /* ty=Tensor[(42), float64] */;
  (%163,)
}

def @func_7532() -> Tensor[(16, 4, 4), float32] {
  %164 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
  %164.0
}

def @func_1538() -> (Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) {
  %165 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %168 = cast(meta[relay.Constant][8] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %169 = reshape(%168, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
  %170 = acos(%167) /* ty=Tensor[(15, 9, 2), float64] */;
  %171 = @func_681(%169) /* ty=Tensor[(3, 14, 1), float64] */;
  (%170, %171, meta[relay.Constant][8] /* ty=Tensor[(42), float64] */)
}

def @func_9137() -> Tensor[(16, 4, 4), float32] {
  @func_2972() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_7954() -> (Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
  %172 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %173 = @func_6547() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) */;
  %174 = %172.0;
  %175 = %173.1;
  (%174, %175)
}

def @func_2595(%var_2591: Tensor[(540), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) {
  %176 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %178 = reshape(%177, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
  %179 = @func_2430(%178) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) */;
  %180 = cast(%var_2591, dtype="float32") /* ty=Tensor[(540), float32] */;
  %181 = reshape(%180, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float32] */;
  %182 = @func_1196(%181) /* ty=(Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) */;
  %183 = %179.0;
  %184 = %182.0;
  (%176, %183, %184, %var_2591)
}

def @func_5795(%var_5769: Tensor[(16, 4, 4), float32]) -> (Tensor[(16, 4, 4), uint64], Tensor[(16, 4, 4), float32]) {
  %185 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %186 = %185.0;
  %187 = cast(%var_5769, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %191 = minimum(%189, %190) /* ty=Tensor[(16, 4, 4), uint64] */;
  %192 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  (%191, %192)
}

def @func_8743(%var_8736: Tensor[(135), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
  %193 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %194 = @func_7479() /* ty=(Tensor[(1, 324), float32],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %197 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %198 = cast(%var_8736, dtype="float32") /* ty=Tensor[(135), float32] */;
  %199 = reshape(%198, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %200 = %193.1;
  %201 = log(%196) /* ty=Tensor[(1, 324), float32] */;
  %202 = %197.0;
  %203 = @func_99(%199) /* ty=Tensor[(9, 1, 15), float32] */;
  (%200, %201, %202, %203, %var_8736)
}

def @func_5414() -> (Tensor[(9, 405, 15), float32],) {
  %204 = @func_5409() /* ty=Tensor[(9, 405, 15), float32] */;
  (%204,)
}

def @func_5409() -> Tensor[(9, 405, 15), float32] {
  %205 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
  %205.1
}

def @func_4383(%var_4324: Tensor[(1, 324), float32], %var_4340: Tensor[(42), float64]) -> (Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
  %206 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %207 = %206.0;
  %208 = cast(%var_4324, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(2), int32] */;
  %210 = cast(%207, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %213 = reshape(%212, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %214 = @func_4061(%213) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
  %215 = cast(%var_4340, dtype="float64") /* ty=Tensor[(42), float64] */;
  %216 = reshape(%215, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %217 = @func_2680(%216) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) */;
  %218 = cast(%var_4340, dtype="float64") /* ty=Tensor[(42), float64] */;
  %219 = cast(%207, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %220 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %221 = divide(%210, %211) /* ty=Tensor[(?, 324), float64] */;
  %222 = %214.2;
  %223 = %217.3;
  %224 = sin(%218) /* ty=Tensor[(42), float64] */;
  %225 = asinh(%219) /* ty=Tensor[(1, 324), float32] */;
  %226 = %220.0;
  (%221, %222, meta[relay.Constant][9] /* ty=Tensor[(20), float64] */, %223, %224, %225, %226)
}

def @func_7010() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32]) {
  %227 = @func_6859() /* ty=Tensor[(16, 4, 4), float32] */;
  %228 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  (%227, %228)
}

def @func_7350() -> (Tensor[(12, 16, 15), float64],) {
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
  %230 = log10(%229) /* ty=Tensor[(12, 16, 15), float64] */;
  (%230,)
}

def @func_3795() -> Tensor[(16, 4, 4), float32] {
  %231 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %231.0
}

def @func_2094(%var_2075: Tensor[(405), float32]) -> (Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) {
  %232 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %233 = %232.0;
  %234 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 9, 2), float64] */, dtype="int32") /* ty=Tensor[(15, 9, 2), int32] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="int32") /* ty=Tensor[(15, 9, 2), int32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %238 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %239 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %240 = cast(%var_2075, dtype="float32") /* ty=Tensor[(405), float32] */;
  %241 = reshape(%240, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float32] */;
  %242 = @func_1480(%241) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) */;
  %243 = %242.1;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(9, 3, 15), float32] */;
  %245 = shape_of(%var_2075, dtype="int32") /* ty=Tensor[(1), int32] */;
  %246 = cast(%var_2075, dtype="float32") /* ty=Tensor[(405), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?), float32] */;
  %248 = logical_xor(%236, %237) /* ty=Tensor[(15, 9, 2), int32] */;
  %249 = %238.1;
  %250 = %239.1;
  %251 = mod(%246, %247) /* ty=Tensor[(405), float32] */;
  (%248, %249, %250, %251)
}

def @func_2543() -> (Tensor[(15, 9, 2), float64],) {
  %252 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %253 = %252.0;
  (%253,)
}

def @func_625() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) {
  %254 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %255 = %254.0;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %257 = reshape(%256, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float64] */;
  %258 = @func_378(%257) /* ty=(Tensor[(15, 9, 2), int16],) */;
  %259 = %258.0;
  (%255, %259)
}

def @func_1319(%var_1308: Tensor[(12, 3, 9), float32], %var_1309: Tensor[(12, 3, 9), float32]) -> (Tensor[(12, 3, 9), float32],) {
  %260 = cast(%var_1309, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %261 = shape_of(%var_1308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_1308, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %264 = floor_divide(%262, %263) /* ty=Tensor[(12, 3, 9), float32] */;
  (%264,)
}

def @func_1877() -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
  %265 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %266 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %267 = %265.0;
  %268 = %266.0;
  (%267, %268)
}

def @func_3570(%var_3510: Tensor[(9, 1, 15), float32], %var_3532: Tensor[(405), float32], %var_3550: Tensor[(660), int64], %var_3551: Tensor[(392), float32]) -> (Tensor[(9, ?, 15), float64], Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(405), float32], Tensor[(11, 4, 15), bool], Tensor[(660), int64], Tensor[(392), float32], Tensor[(9, 60), float32], Tensor[(15, 9, 2), int16], Tensor[(15, 9, 2), int16]) {
  %269 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %270 = cast(%var_3510, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %274 = cast(%var_3532, dtype="float32") /* ty=Tensor[(405), float32] */;
  %275 = reshape(%274, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %276 = @func_2094(%275) /* ty=(Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) */;
  %277 = cast(%var_3550, dtype="int64") /* ty=Tensor[(660), int64] */;
  %278 = cast(%var_3550, dtype="int64") /* ty=Tensor[(660), int64] */;
  %279 = cast(%var_3551, dtype="float32") /* ty=Tensor[(392), float32] */;
  %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 60), float32] */, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %281 = reshape(%277, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %282 = reshape(%278, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %283 = reshape(%279, newshape=[196, 2]) /* ty=Tensor[(196, 2), float32] */;
  %284 = reshape(%280, newshape=[1, 540]) /* ty=Tensor[(1, 540), float32] */;
  %285 = @func_3466(%281, %282, %283, %284) /* ty=(Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) */;
  %286 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %287 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %288 = floor_mod(%272, %273) /* ty=Tensor[(9, ?, 15), float64] */;
  %289 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %290 = %276.2;
  %291 = %285.0;
  %292 = %286.0;
  %293 = %287.0;
  (%288, %289, %290, %var_3532, %291, %var_3550, %var_3551, meta[relay.Constant][12] /* ty=Tensor[(9, 60), float32] */, %292, %293)
}

def @func_7263() -> (Tensor[(9, 1, 15), float32],) {
  %294 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %295 = %294.2;
  (%295,)
}

def @func_1392() -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) {
  %296 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %297 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %298 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %299 = reshape(%297, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %300 = reshape(%298, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %301 = @func_1319(%299, %300) /* ty=(Tensor[(12, 3, 9), float32],) */;
  %302 = %296.1;
  %303 = %301.0;
  (%302, %303, meta[relay.Constant][13] /* ty=Tensor[(1, 324), float32] */)
}

def @func_5181(%var_5175: Tensor[(7, 16, 15), int32]) -> Tensor[(7, 16, 15), bool] {
  %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 16, 15), int32] */, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %305 = shape_of(%var_5175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_5175, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%306, %307) /* ty=Tensor[(7, 16, 15), bool] */
}

def @func_5928(%var_5909: Tensor[(10, 6, 4), uint64]) -> (Tensor[(10, 6, 4), bool], Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64]) {
  %308 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 6, 4), uint64] */, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %309 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_5909, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %313 = cast(meta[relay.Constant][16] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %314 = cast(meta[relay.Constant][16] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %315 = reshape(%313, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %316 = reshape(%314, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %317 = @func_5641(%315, %316) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
  %318 = greater_equal(%310, %311) /* ty=Tensor[(10, 6, 4), bool] */;
  %319 = %312.0;
  %320 = %317.0;
  (%318, %319, %320, meta[relay.Constant][16] /* ty=Tensor[(400), float64] */)
}

def @func_5587(%var_5570: Tensor[(1680), int32]) -> (Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) {
  %321 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %322 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(5, 4, 2), int32] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="int32") /* ty=Tensor[(5, 4, 2), int32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %326 = cast(%var_5570, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %327 = reshape(%326, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), int32] */;
  %328 = add(%324, %325) /* ty=Tensor[(5, 4, 2), int32] */;
  %329 = @func_5181(%327) /* ty=Tensor[(7, 16, 15), bool] */;
  (%328, %329, %var_5570)
}

def @func_1137() -> (Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) {
  %330 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %331 = %330.1;
  %332 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  (%331, %332)
}

def @func_7491(%var_7484: Tensor[(15, 7, 13), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(16, 4, 4), float32]) {
  %333 = cast(%var_7484, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
  %334 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %335 = acos(%333) /* ty=Tensor[(15, 7, 13), float32] */;
  %336 = %334.0;
  (%335, %336)
}

def @func_6885() -> (Tensor[(15, 9, 2), float64],) {
  %337 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %338 = %337.0;
  (%338,)
}

def @func_7585() -> Tensor[(16, 4, 4), float32] {
  %339 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %339.0
}

def @func_676() -> Tensor[(9, 1, 15), float32] {
  %340 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %340.2
}

def @func_2031() -> Tensor[(135), float32] {
  %341 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %341.2
}

def @func_8104() -> Tensor[(16, 4, 4), float32] {
  %342 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %342.3
}

def @func_2430(%var_2417: Tensor[(16, 4, 4), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) {
  %343 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %344 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %345 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %346 = %345.1;
  %347 = cast(%var_2417, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = %343.1;
  %352 = %344.0;
  %353 = greater(%349, %350) /* ty=Tensor[(16, 4, 4), bool] */;
  %354 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %355 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
  (%351, %352, %353, %354, %355)
}

def @func_6161() -> Tensor[(9, 1, 15), float32] {
  %356 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %356.2
}

def @func_1701(%var_1687: Tensor[(16, 4, 4), float32], %var_1693: Tensor[(54, 6), float32]) -> (Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) {
  %357 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  %358 = cast(%var_1687, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(%var_1693, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
  %363 = cast(%var_1693, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
  %364 = reshape(%362, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %365 = reshape(%363, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %366 = @func_1319(%364, %365) /* ty=(Tensor[(12, 3, 9), float32],) */;
  %367 = logical_or(%360, %361) /* ty=Tensor[(16, 4, 4), bool] */;
  %368 = %366.0;
  (%367, %368, %var_1693)
}

def @func_681(%var_678: Tensor[(3, 14, 1), float64]) -> Tensor[(3, 14, 1), float64] {
  %369 = cast(%var_678, dtype="float64") /* ty=Tensor[(3, 14, 1), float64] */;
  atanh(%369) /* ty=Tensor[(3, 14, 1), float64] */
}

def @func_5163(%var_5146: Tensor[(15, 9, 2), float64]) -> Tensor[(15, 9, 2), uint16] {
  %370 = @func_4412() /* ty=Tensor[(15, 9, 2), float64] */;
  %371 = cast(%var_5146, dtype="uint16") /* ty=Tensor[(15, 9, 2), uint16] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="uint16") /* ty=Tensor[(15, 9, 2), uint16] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%373, %374) /* ty=Tensor[(15, 9, 2), uint16] */
}

def @func_3403(%var_3398: Tensor[(2, 324), float32]) -> (Tensor[(15, 9, 2), int16], Tensor[(2, 324), int16]) {
  %375 = @func_2264() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %376 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="int16") /* ty=Tensor[(1, 324), int16] */;
  %379 = cast(%var_3398, dtype="int16") /* ty=Tensor[(2, 324), int16] */;
  %380 = %375.0;
  %381 = multiply(%378, %379) /* ty=Tensor[(2, 324), int16] */;
  (%380, %381)
}

def @func_6701() -> Tensor[(15, 9, 2), float64] {
  @func_4412() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_8441() -> (Tensor[(16, 4, 4), float32],) {
  %382 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  (%382,)
}

def @func_1615() -> Tensor[(15, 9, 2), float64] {
  %383 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %383.1
}

def @func_4824(%var_4781: Tensor[(42), float64]) -> (Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) {
  %384 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %385 = cast(%var_4781, dtype="float64") /* ty=Tensor[(42), float64] */;
  %386 = reshape(%385, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
  %387 = @func_681(%386) /* ty=Tensor[(3, 14, 1), float64] */;
  %388 = cast(%var_4781, dtype="bool") /* ty=Tensor[(42), bool] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(3, 14, 1), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %393 = %384.1;
  %394 = logical_or(%390, %391) /* ty=Tensor[(3, 14, ?), bool] */;
  %395 = %392.0;
  (%393, %394, %395)
}

def @func_2255() -> Tensor[(16, 4, 4), float32] {
  %396 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %396.0
}

def @func_4174(%var_4142: Tensor[(9, 15, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) {
  %397 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %398 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %399 = @func_676() /* ty=Tensor[(9, 1, 15), float32] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %401 = cast(%var_4142, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
  %402 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(3, 14, 1), float32] */;
  %405 = %397.0;
  %406 = %398.0;
  %407 = subtract(%400, %401) /* ty=Tensor[(9, 15, 15), float32] */;
  %408 = sinh(%404) /* ty=Tensor[(3, 14, 1), float32] */;
  (%405, %406, %407, %408)
}

def @func_1196(%var_1175: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) {
  %409 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %410 = %409.1;
  %411 = cast(%410, dtype="int64") /* ty=Tensor[(9, 1, 15), int64] */;
  %412 = cast(%var_1175, dtype="int64") /* ty=Tensor[(9, 4, 15), int64] */;
  %413 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %414 = left_shift(%411, %412) /* ty=Tensor[(9, 4, 15), int64] */;
  %415 = %413.2;
  (%414, %415)
}

def @func_7962(%var_7956: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
  %416 = cast(%var_7956, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
  exp(%416) /* ty=Tensor[(1, 6, 2), float64] */
}

def @func_7988() -> Tensor[(15, 9, 2), float64] {
  %417 = @func_6885() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %417.0
}

def @func_5641(%var_5625: Tensor[(4, 10, 10), float64], %var_5626: Tensor[(4, 10, 10), float64]) -> (Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) {
  %418 = cast(%var_5626, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %419 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_5625, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %422 = divide(%420, %421) /* ty=Tensor[(4, 10, 10), float64] */;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %424 = shape_of(%var_5626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%var_5626, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(%422, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %428 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_5625, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = equal(%425, %426) /* ty=Tensor[(4, 10, 10), bool] */;
  %432 = greater(%429, %430) /* ty=Tensor[(4, 10, 10), bool] */;
  (%431, %432)
}

def @func_5938() -> (Tensor[(15, 9, 2), int16],) {
  %433 = @func_5418() /* ty=Tensor[(15, 9, 2), int16] */;
  (%433,)
}

def @func_7103(%var_7053: uint32, %var_7054: Tensor[(256), uint32]) -> (Tensor[(9, 1, 15), float32], uint32, uint32, Tensor[(256), uint32], Tensor[(3, 14, 1), float64], Tensor[(42), float64], Tensor[(10, ?, 6), float64], Tensor[(15, 4), int32], Tensor[(9, 1, 15), float32], Tensor[(3, 14, 1), float64], Tensor[(135), float32]) {
  %434 = cast(%var_7053, dtype="uint32") /* ty=uint32 */;
  %435 = cast(%var_7054, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %436 = reshape(%434, newshape=[]) /* ty=uint32 */;
  %437 = reshape(%435, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %438 = @func_2153(%436, %437) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %439 = cast(meta[relay.Constant][18] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %440 = reshape(%439, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
  %441 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 4), int32] */, dtype="int32") /* ty=Tensor[(15, 4), int32] */;
  %442 = reshape(%441, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), int32] */;
  %443 = @func_6066(%442) /* ty=(Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) */;
  %444 = @func_681(%440) /* ty=Tensor[(3, 14, 1), float64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(3, 14, 1), float64] */;
  %446 = reshape(%445, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
  %447 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %448 = @func_6161() /* ty=Tensor[(9, 1, 15), float32] */;
  %449 = %438.2;
  %450 = %443.1;
  %451 = @func_6161() /* ty=Tensor[(9, 1, 15), float32] */;
  %452 = @func_681(%446) /* ty=Tensor[(3, 14, 1), float64] */;
  %453 = %447.2;
  (%448, %449, %var_7053, %var_7054, %444, meta[relay.Constant][18] /* ty=Tensor[(42), float64] */, %450, meta[relay.Constant][19] /* ty=Tensor[(15, 4), int32] */, %451, %452, %453)
}

def @func_225() -> (Tensor[(15, 9, 2), float64],) {
  %454 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %455 = asinh(%454) /* ty=Tensor[(15, 9, 2), float64] */;
  (%455,)
}

def @func_99(%var_69: Tensor[(9, 1, 15), float32]) -> Tensor[(9, 1, 15), float32] {
  %456 = cast(%var_69, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  cos(%456) /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_2680(%var_2620: Tensor[(42), float64]) -> (Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) {
  %457 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %458 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %459 = cast(%var_2620, dtype="float64") /* ty=Tensor[(42), float64] */;
  %460 = reshape(%459, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %461 = @func_2013(%460) /* ty=(Tensor[(42), int32],) */;
  %462 = %461.0;
  %463 = cast(meta[relay.Constant][21] /* ty=Tensor[(42), int32] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(1), int32] */;
  %465 = cast(%462, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %467 = %457.0;
  %468 = %458.2;
  %469 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
  %470 = minimum(%465, %466) /* ty=Tensor[(42), uint8] */;
  (%467, %var_2620, %468, %469, %470)
}

def @func_6836() -> (Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64], Tensor[(4, 10, 10), bool]) {
  %471 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %472 = cast(meta[relay.Constant][22] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %473 = cast(meta[relay.Constant][22] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %474 = reshape(%472, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %475 = reshape(%473, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %476 = @func_5641(%474, %475) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
  %477 = cast(meta[relay.Constant][22] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %478 = %476.1;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %480 = reshape(%477, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %481 = reshape(%479, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
  %482 = @func_5641(%480, %481) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
  %483 = %471.0;
  %484 = %482.0;
  (%483, %478, meta[relay.Constant][22] /* ty=Tensor[(400), float64] */, %484)
}

def @func_8129() -> (Tensor[(135), float32], Tensor[(1, 324), float32]) {
  %485 = @func_3762() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) */;
  %486 = @func_7479() /* ty=(Tensor[(1, 324), float32],) */;
  %487 = %485.1;
  %488 = %486.0;
  (%487, %488)
}

def @func_787(%var_772: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) {
  %489 = cast(%var_772, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %490 = cast(%var_772, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %491 = asinh(%489) /* ty=Tensor[(14, 2, 14), float32] */;
  %492 = sinh(%490) /* ty=Tensor[(14, 2, 14), float64] */;
  (%491, %492)
}

def @func_813() -> Tensor[(9, 1, 15), float32] {
  %493 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %493.2
}

def @func_3815() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %494 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %495 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %496 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %497 = @func_2736() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %498 = %494.3;
  %499 = %495.0;
  %500 = %496.0;
  %501 = %497.0;
  (%498, %499, %500, %501)
}

def @func_6859() -> Tensor[(16, 4, 4), float32] {
  %502 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %502.0
}

def @func_378(%var_369: Tensor[(15, 9, 2), float64]) -> (Tensor[(15, 9, 2), int16],) {
  %503 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %504 = %503.0;
  %505 = cast(%var_369, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %509 = minimum(%507, %508) /* ty=Tensor[(15, 9, 2), int16] */;
  (%509,)
}

def @func_7737(%var_7726: Tensor[(135), float32]) -> (Tensor[(135), float64],) {
  %510 = @func_2031() /* ty=Tensor[(135), float32] */;
  %511 = cast(%var_7726, dtype="float64") /* ty=Tensor[(135), float64] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%510, dtype="float64") /* ty=Tensor[(135), float64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), float64] */;
  %515 = divide(%513, %514) /* ty=Tensor[(135), float64] */;
  (%515,)
}

def @func_1970() -> Tensor[(5, 4, 2), float32] {
  %516 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
  acos(%516) /* ty=Tensor[(5, 4, 2), float32] */
}

def @func_8950(%var_8942: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), bool],) {
  %517 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %518 = cast(%var_8942, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = equal(%520, %521) /* ty=Tensor[(5, 4, 2), bool] */;
  (%522,)
}

def @func_269() -> (Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  %523 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %524 = %523.0;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 9, 2), float64] */, dtype="uint8") /* ty=Tensor[(15, 9, 2), uint8] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="uint8") /* ty=Tensor[(15, 9, 2), uint8] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %529 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %530 = cast(meta[relay.Constant][25] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %531 = reshape(%530, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %533 = left_shift(%527, %528) /* ty=Tensor[(15, 9, 2), uint8] */;
  %534 = %529.0;
  %535 = @func_99(%531) /* ty=Tensor[(9, 1, 15), float32] */;
  %536 = cos(%532) /* ty=Tensor[(15, 9, 2), float64] */;
  (%533, %534, %535, meta[relay.Constant][25] /* ty=Tensor[(135), float32] */, %536)
}

def @func_5418() -> Tensor[(15, 9, 2), int16] {
  %537 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %537.1
}

def @func_5548() -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
  %538 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %539 = @func_3795() /* ty=Tensor[(16, 4, 4), float32] */;
  %540 = %538.0;
  (%539, %540)
}

def @func_3166(%var_3150: Tensor[(324), float32], %var_3161: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(324), float32], Tensor[(12, 3, 9), float64], uint32, uint32, Tensor[(256), uint32]) {
  %541 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %542 = cast(%var_3150, dtype="float32") /* ty=Tensor[(324), float32] */;
  %543 = cast(%var_3150, dtype="float32") /* ty=Tensor[(324), float32] */;
  %544 = reshape(%542, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %545 = reshape(%543, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %546 = @func_1319(%544, %545) /* ty=(Tensor[(12, 3, 9), float32],) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %549 = cast(%var_3161, dtype="uint32") /* ty=uint32 */;
  %550 = cast(meta[relay.Constant][26] /* ty=Tensor[(256), uint32] */, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %551 = reshape(%549, newshape=[]) /* ty=uint32 */;
  %552 = reshape(%550, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %553 = @func_2153(%551, %552) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %554 = %541.0;
  %555 = log(%548) /* ty=Tensor[(12, 3, 9), float64] */;
  %556 = %553.2;
  (%554, %var_3150, %555, %556, %var_3161, meta[relay.Constant][26] /* ty=Tensor[(256), uint32] */)
}

def @func_5400() -> (Tensor[(15, 9, 2), float64],) {
  %557 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %558 = %557.0;
  (%558,)
}

def @func_8232() -> Tensor[(135), float64] {
  %559 = @func_8129() /* ty=(Tensor[(135), float32], Tensor[(1, 324), float32]) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(135), float64] */;
  log(%561) /* ty=Tensor[(135), float64] */
}

def @func_888() -> (Tensor[(15, 9, 2), float64],) {
  %562 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %563 = %562.0;
  (%563,)
}

def @func_7708() -> (Tensor[(15, 9, 2), float64],) {
  %564 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_6240(%var_6231: Tensor[(1, 14, 10), float32], %var_6237: Tensor[(256), uint32]) -> (Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) {
  %566 = cast(%var_6231, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %567 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %568 = cast(%var_6237, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %569 = reshape(%567, newshape=[]) /* ty=uint32 */;
  %570 = reshape(%568, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %571 = @func_2153(%569, %570) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %572 = tan(%566) /* ty=Tensor[(1, 14, 10), float32] */;
  %573 = %571.2;
  (%572, %573, meta[relay.Constant][27] /* ty=uint32 */, %var_6237)
}

def @func_3762() -> (Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) {
  %574 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %575 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
  %576 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %577 = %574.0;
  %578 = %575.1;
  %579 = %576.0;
  (%577, %578, %579)
}

def @func_2153(%var_2130: uint32, %var_2131: Tensor[(256), uint32]) -> (Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) {
  %580 = @func_1661() /* ty=(Tensor[(135), float32],) */;
  %581 = cast(%var_2130, dtype="uint32") /* ty=uint32 */;
  %582 = cast(%var_2131, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %583 = reshape(%581, newshape=[]) /* ty=uint32 */;
  %584 = reshape(%582, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint32] */;
  %585 = @func_483(%583, %584) /* ty=(Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) */;
  %586 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %587 = reshape(%586, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float64] */;
  %588 = @func_378(%587) /* ty=(Tensor[(15, 9, 2), int16],) */;
  %589 = %580.0;
  %590 = %585.1;
  %591 = %588.0;
  (%589, %590, %var_2130, %var_2131, %591, meta[relay.Constant][28] /* ty=Tensor[(270), float64] */)
}

def @func_2264() -> (Tensor[(15, 9, 2), int16],) {
  %592 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %593 = %592.1;
  (%593,)
}

def @func_5893(%var_5882: Tensor[(1680), int32]) -> (Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(1680), int32], Tensor[(1680), int32]) {
  %594 = cast(%var_5882, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %595 = reshape(%594, newshape=[1680]) /* ty=Tensor[(1680), int32] */;
  %596 = @func_5587(%595) /* ty=(Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) */;
  %597 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %598 = @func_1656() /* ty=Tensor[(9, 1, 15), float32] */;
  %599 = %596.2;
  (%597, %598, %599, %var_5882)
}

def @func_5052() -> (Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) {
  %600 = cast(meta[relay.Constant][29] /* ty=Tensor[(405, 1), float32] */, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %601 = reshape(%600, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float32] */;
  %602 = @func_1480(%601) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) */;
  %603 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %604 = %603.2;
  %605 = cast(meta[relay.Constant][29] /* ty=Tensor[(405, 1), float32] */, dtype="bool") /* ty=Tensor[(405, 1), bool] */;
  %606 = cast(%604, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %607 = logical_and(%605, %606) /* ty=Tensor[(9, 405, 15), bool] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %609 = %602.0;
  %610 = tan(%608) /* ty=Tensor[(9, 405, 15), float32] */;
  (%609, %610)
}

def @func_6977() -> (Tensor[(15, 9, 2), int16], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32], Tensor[(135), float32], Tensor[(20), float64]) {
  %611 = @func_5938() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %612 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %613 = reshape(%612, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %614 = cast(meta[relay.Constant][31] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %615 = reshape(%614, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %616 = @func_4061(%615) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
  %617 = %611.0;
  %618 = @func_99(%613) /* ty=Tensor[(9, 1, 15), float32] */;
  %619 = %616.2;
  (%617, %618, meta[relay.Constant][30] /* ty=Tensor[(3, 45), float32] */, %619, meta[relay.Constant][31] /* ty=Tensor[(20), float64] */)
}

def @func_6176(%var_6173: Tensor[(392), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) {
  %620 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %621 = cast(meta[relay.Constant][32] /* ty=Tensor[(330, 2), int64] */, dtype="int64") /* ty=Tensor[(330, 2), int64] */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(330, 2), int64] */, dtype="int64") /* ty=Tensor[(330, 2), int64] */;
  %623 = cast(%var_6173, dtype="float32") /* ty=Tensor[(392), float32] */;
  %624 = cast(meta[relay.Constant][33] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %625 = reshape(%621, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %626 = reshape(%622, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %627 = reshape(%623, newshape=[196, 2]) /* ty=Tensor[(196, 2), float32] */;
  %628 = reshape(%624, newshape=[1, 540]) /* ty=Tensor[(1, 540), float32] */;
  %629 = @func_3466(%625, %626, %627, %628) /* ty=(Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) */;
  %630 = %620.1;
  %631 = %629.3;
  (%630, %631, meta[relay.Constant][32] /* ty=Tensor[(330, 2), int64] */, %var_6173, meta[relay.Constant][33] /* ty=Tensor[(540), float32] */)
}

def @func_2776(%var_2766: Tensor[(16, 16), float32]) -> (Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) {
  %632 = cast(%var_2766, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %633 = cast(meta[relay.Constant][34] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %634 = reshape(%632, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
  %635 = reshape(%633, newshape=[54, 6]) /* ty=Tensor[(54, 6), float32] */;
  %636 = @func_1701(%634, %635) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) */;
  %637 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %638 = %636.0;
  %639 = @func_2031() /* ty=Tensor[(135), float32] */;
  (%637, %638, %var_2766, meta[relay.Constant][34] /* ty=Tensor[(324), float32] */, %639)
}

def @func_4500(%var_4475: Tensor[(14, 12, 11), float32], %var_4476: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), float32], Tensor[(15, 9, 2), float64]) {
  %640 = cast(%var_4476, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %641 = shape_of(%var_4475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_4475, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %644 = power(%642, %643) /* ty=Tensor[(14, 12, 11), float32] */;
  %645 = @func_4412() /* ty=Tensor[(15, 9, 2), float64] */;
  (%644, %645)
}

def @func_7870() -> Tensor[(16, 4, 4), float32] {
  @func_6419() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_8408(%var_8381: Tensor[(3, 108), float32], %var_8386: Tensor[(135), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(42), float64], Tensor[(3, 108), float32], Tensor[(42), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(3, 45), uint8]) {
  %646 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %647 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %648 = cast(%var_8381, dtype="float32") /* ty=Tensor[(3, 108), float32] */;
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %650 = reshape(%648, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
  %651 = reshape(%649, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %652 = @func_4383(%650, %651) /* ty=(Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) */;
  %653 = cast(%var_8386, dtype="float32") /* ty=Tensor[(135), float32] */;
  %654 = reshape(%653, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %655 = @func_435(%654) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %656 = %655.4;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %658 = exp(%657) /* ty=Tensor[(3, 45), float32] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %660 = sqrt(%659) /* ty=Tensor[(3, 45), float64] */;
  %661 = cast(%656, dtype="uint8") /* ty=Tensor[(3, 45), uint8] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(2), int32] */;
  %663 = cast(%660, dtype="uint8") /* ty=Tensor[(3, 45), uint8] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %665 = %646.1;
  %666 = %647.0;
  %667 = %652.4;
  %668 = @func_8232() /* ty=Tensor[(135), float64] */;
  %669 = right_shift(%663, %664) /* ty=Tensor[(3, 45), uint8] */;
  (%665, %666, %667, %var_8381, meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, %var_8386, %668, %669)
}

def @func_2013(%var_2002: Tensor[(42), float64]) -> (Tensor[(42), int32],) {
  %670 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %671 = %670.2;
  %672 = cast(%var_2002, dtype="int32") /* ty=Tensor[(42), int32] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(1), int32] */;
  %674 = cast(%671, dtype="int32") /* ty=Tensor[(42), int32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?), int32] */;
  %676 = left_shift(%674, %675) /* ty=Tensor[(42), int32] */;
  (%676,)
}

def @func_6665(%var_6658: int64, %var_6659: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) {
  %677 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %678 = cast(%var_6658, dtype="int64") /* ty=int64 */;
  %679 = cast(%var_6659, dtype="int64") /* ty=Tensor[(495), int64] */;
  %680 = reshape(%678, newshape=[]) /* ty=int64 */;
  %681 = reshape(%679, newshape=[5, 11, 9]) /* ty=Tensor[(5, 11, 9), int64] */;
  %682 = @func_5483(%680, %681) /* ty=(Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) */;
  %683 = %677.0;
  %684 = %682.0;
  (%683, %684, %var_6658, %var_6659)
}

def @func_4560(%var_4540: float64) -> (Tensor[(13, 13, 7), float64], Tensor[(9, 1, 15), float32]) {
  %685 = cast(%var_4540, dtype="float64") /* ty=float64 */;
  %686 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
  %687 = floor_divide(%685, %686) /* ty=Tensor[(13, 13, 7), float64] */;
  %688 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
  (%687, %688)
}

def @func_7612() -> (Tensor[(15, 9, 2), float32],) {
  %689 = @func_4304() /* ty=(Tensor[(15, 9, 2), float32],) */;
  %690 = %689.0;
  (%690,)
}

def @func_4304() -> (Tensor[(15, 9, 2), float32],) {
  %691 = @func_1615() /* ty=Tensor[(15, 9, 2), float64] */;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
  %693 = log10(%692) /* ty=Tensor[(15, 9, 2), float32] */;
  (%693,)
}

def @func_1656() -> Tensor[(9, 1, 15), float32] {
  @func_813() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_6324(%var_6303: Tensor[(5, 4), float64]) -> (Tensor[(1, 135), float32], Tensor[(60), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(5, 4), float64], Tensor[(9, 405, 15), float32]) {
  %694 = cast(meta[relay.Constant][37] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %695 = cast(meta[relay.Constant][38] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %696 = reshape(%694, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %697 = reshape(%695, newshape=[1, 135]) /* ty=Tensor[(1, 135), float32] */;
  %698 = @func_6120(%696, %697) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) */;
  %699 = cast(%var_6303, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %700 = reshape(%699, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %701 = @func_4061(%700) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
  %702 = @func_5414() /* ty=(Tensor[(9, 405, 15), float32],) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(9, 405, 15), float64] */;
  %705 = acosh(%704) /* ty=Tensor[(9, 405, 15), float64] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(9, 405, 15), float64] */;
  %707 = log10(%706) /* ty=Tensor[(9, 405, 15), float64] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %709 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%705, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %712 = %698.2;
  %713 = @func_2031() /* ty=Tensor[(135), float32] */;
  %714 = %701.2;
  %715 = add(%710, %711) /* ty=Tensor[(9, 405, 15), float32] */;
  (%712, meta[relay.Constant][37] /* ty=Tensor[(60), float32] */, meta[relay.Constant][38] /* ty=Tensor[(135), float32] */, %713, %714, %var_6303, %715)
}

def @func_8202() -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(42), float64]) {
  %716 = @func_2972() /* ty=Tensor[(16, 4, 4), float32] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %718 = cast(meta[relay.Constant][39] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %719 = reshape(%718, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %720 = @func_4824(%719) /* ty=(Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) */;
  %721 = cos(%717) /* ty=Tensor[(16, 4, 4), float32] */;
  %722 = %720.2;
  (%721, %722, meta[relay.Constant][39] /* ty=Tensor[(42), float64] */)
}

def @func_4600(%var_4579: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(256), uint32], uint32) {
  %723 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %724 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %725 = cast(%var_4579, dtype="uint32") /* ty=uint32 */;
  %726 = %724.0;
  %727 = cast(%726, dtype="uint32") /* ty=Tensor[(16, 4, 4), uint32] */;
  %728 = reshape(%725, newshape=[]) /* ty=uint32 */;
  %729 = reshape(%727, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %730 = @func_2153(%728, %729) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %731 = %723.1;
  %732 = %730.3;
  (%731, %726, %732, %var_4579)
}

def @func_1914() -> (Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
  %733 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %736 = cast(meta[relay.Constant][40] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %737 = reshape(%736, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %738 = exp(%735) /* ty=Tensor[(16, 4, 4), float64] */;
  %739 = @func_99(%737) /* ty=Tensor[(9, 1, 15), float32] */;
  (%738, %739, meta[relay.Constant][40] /* ty=Tensor[(135), float32] */)
}

def @func_3938(%var_3935: Tensor[(10, 3, 14), float64]) -> Tensor[(10, 3, 14), float64] {
  %740 = cast(%var_3935, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  asinh(%740) /* ty=Tensor[(10, 3, 14), float64] */
}

def @func_7458(%var_7420: Tensor[(448), uint32], %var_7425: Tensor[(2025), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(2, 16, 14), uint32], Tensor[(448), uint32], Tensor[(2025), float32], Tensor[(9, 15, 15), float64], Tensor[(16, 4, 4), float32]) {
  %741 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %742 = cast(%var_7420, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %743 = reshape(%742, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
  %744 = @func_5294(%743) /* ty=(Tensor[(2, 16, 14), uint32],) */;
  %745 = cast(%var_7425, dtype="float32") /* ty=Tensor[(2025), float32] */;
  %746 = reshape(%745, newshape=[9, 15, 15]) /* ty=Tensor[(9, 15, 15), float32] */;
  %747 = @func_4174(%746) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) */;
  %748 = %747.2;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %750 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
  %751 = %741.0;
  %752 = %744.0;
  %753 = acosh(%749) /* ty=Tensor[(9, 15, 15), float64] */;
  %754 = %750.0;
  (%751, %752, %var_7420, %var_7425, %753, %754)
}

def @func_7182(%var_7170: Tensor[(1, 15, 3), float32]) -> Tensor[(?, 15, 3), bool] {
  %755 = cast(%var_7170, dtype="float32") /* ty=Tensor[(1, 15, 3), float32] */;
  %756 = exp(%755) /* ty=Tensor[(1, 15, 3), float32] */;
  %757 = cast(%var_7170, dtype="bool") /* ty=Tensor[(1, 15, 3), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(1, 15, 3), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%759, %760) /* ty=Tensor[(?, 15, 3), bool] */
}

def @func_1661() -> (Tensor[(135), float32],) {
  %761 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %762 = %761.3;
  (%762,)
}

def @func_2536() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
  %763 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
  %765 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %766 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %767 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  %768 = sqrt(%764) /* ty=Tensor[(16, 4, 4), float64] */;
  %769 = %765.0;
  %770 = %766.0;
  (%767, %768, %769, %770)
}

def @func_9112(%var_9045: Tensor[(448), uint32], %var_9090: int64, %var_9091: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(135), float32], Tensor[(448), uint32], Tensor[(3, 10, 2), float32], Tensor[(60), float32], Tensor[(16, 4, 4), float32], int64, int64, Tensor[(495), int64], Tensor[(16, 4, 4), float32], Tensor[(2, 16, 14), float64]) {
  %771 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %772 = reshape(%771, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %773 = @func_8743(%772) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %774 = cast(meta[relay.Constant][42] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %775 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %776 = reshape(%774, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %777 = reshape(%775, newshape=[1, 135]) /* ty=Tensor[(1, 135), float32] */;
  %778 = @func_6120(%776, %777) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) */;
  %779 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %780 = cast(%var_9090, dtype="int64") /* ty=int64 */;
  %781 = cast(%var_9091, dtype="int64") /* ty=Tensor[(495), int64] */;
  %782 = reshape(%780, newshape=[]) /* ty=int64 */;
  %783 = reshape(%781, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %784 = @func_6665(%782, %783) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) */;
  %785 = cast(%var_9045, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %786 = reshape(%785, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
  %787 = @func_5294(%786) /* ty=(Tensor[(2, 16, 14), uint32],) */;
  %788 = %787.0;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %790 = cos(%789) /* ty=Tensor[(2, 16, 14), float64] */;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %792 = @func_4213() /* ty=Tensor[(16, 4, 4), float32] */;
  %793 = %773.1;
  %794 = %778.0;
  %795 = %779.0;
  %796 = %784.2;
  %797 = @func_1854() /* ty=Tensor[(16, 4, 4), float32] */;
  %798 = atanh(%791) /* ty=Tensor[(2, 16, 14), float64] */;
  (%792, %793, meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, %var_9045, %794, meta[relay.Constant][42] /* ty=Tensor[(60), float32] */, %795, %796, %var_9090, %var_9091, %797, %798)
}

def @func_2330() -> Tensor[(9, 1, 15), float32] {
  @func_1656() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_4008() -> (Tensor[(1, 324), float64],) {
  %799 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
  %802 = sin(%801) /* ty=Tensor[(1, 324), float64] */;
  (%802,)
}

def @func_2938() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %803 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %804 = %803.0;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %806 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %807 = log(%805) /* ty=Tensor[(15, 9, 2), float64] */;
  %808 = %806.1;
  (%807, %808)
}

def @func_1086() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %809 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %810 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %811 = %809.0;
  %812 = %810.0;
  (%811, %812)
}

def @func_6392(%var_6371: Tensor[(312, 2), float32]) -> (Tensor[(16, 16), float32], Tensor[(15, 9, 2), float64], Tensor[(312, 2), float32], Tensor[(5, 4, 2), float32], Tensor[(330, 2), int64], Tensor[(392), float32]) {
  %813 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
  %814 = cast(%var_6371, dtype="float32") /* ty=Tensor[(312, 2), float32] */;
  %815 = cast(%var_6371, dtype="float32") /* ty=Tensor[(312, 2), float32] */;
  %816 = reshape(%814, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float32] */;
  %817 = reshape(%815, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float32] */;
  %818 = @func_5266(%816, %817) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %819 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
  %821 = cosh(%820) /* ty=Tensor[(5, 4, 2), float32] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
  %823 = cast(meta[relay.Constant][43] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %824 = reshape(%823, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %825 = @func_6176(%824) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) */;
  %826 = %813.1;
  %827 = %818.3;
  %828 = tan(%822) /* ty=Tensor[(5, 4, 2), float32] */;
  %829 = %825.2;
  (%826, %827, %var_6371, %828, %829, meta[relay.Constant][43] /* ty=Tensor[(392), float32] */)
}

def @func_848() -> (Tensor[(16, 4, 4), float32],) {
  %830 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  (%830,)
}

def @func_5294(%var_5284: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), uint32],) {
  %831 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %832 = cast(%var_5284, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %833 = bitwise_or(%831, %832) /* ty=Tensor[(2, 16, 14), uint32] */;
  (%833,)
}

def @func_1439() -> Tensor[(16, 4, 4), float32] {
  %834 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %834.0
}

def @func_6066(%var_6026: Tensor[(10, 1, 6), int32]) -> (Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) {
  %835 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
  %836 = cast(%var_6026, dtype="bool") /* ty=Tensor[(10, 1, 6), bool] */;
  %837 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(10, 1, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 1, 6), int32] */, dtype="bool") /* ty=Tensor[(10, 1, 6), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %840 = less(%838, %839) /* ty=Tensor[(10, ?, 6), bool] */;
  %841 = cast(%840, dtype="uint16") /* ty=Tensor[(10, ?, 6), uint16] */;
  %842 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(10, 1, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 1, 6), int32] */, dtype="uint16") /* ty=Tensor[(10, 1, 6), uint16] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %845 = bitwise_xor(%843, %844) /* ty=Tensor[(10, ?, 6), uint16] */;
  %846 = cast(%845, dtype="float32") /* ty=Tensor[(10, ?, 6), float32] */;
  %847 = sigmoid(%846) /* ty=Tensor[(10, ?, 6), float32] */;
  %848 = cast(%845, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %852 = cast(%847, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
  %853 = %835.0;
  %854 = minimum(%850, %851) /* ty=Tensor[(10, ?, 6), float64] */;
  %855 = sqrt(%852) /* ty=Tensor[(10, ?, 6), float64] */;
  (%853, %854, %855)
}

def @func_6419() -> Tensor[(16, 4, 4), float32] {
  @func_4213() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_4213() -> Tensor[(16, 4, 4), float32] {
  %856 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %856.0
}

def @func_2845() -> (Tensor[(16, 4, 4), float32], Tensor[(135), float32]) {
  %857 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %858 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  %859 = %857.2;
  (%858, %859)
}

def @func_7479() -> (Tensor[(1, 324), float32],) {
  %860 = @func_4008() /* ty=(Tensor[(1, 324), float64],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %863 = cos(%862) /* ty=Tensor[(1, 324), float32] */;
  (%863,)
}

def @func_6619() -> Tensor[(15, 9, 2), float64] {
  %864 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %864.1
}

def @func_1480(%var_1472: Tensor[(9, 3, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) {
  %865 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %866 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %867 = %866.2;
  %868 = cast(%867, dtype="int16") /* ty=Tensor[(9, 1, 15), int16] */;
  %869 = cast(%var_1472, dtype="int16") /* ty=Tensor[(9, 3, 15), int16] */;
  %870 = cast(%var_1472, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %871 = %865.0;
  %872 = bitwise_xor(%868, %869) /* ty=Tensor[(9, 3, 15), int16] */;
  %873 = asinh(%870) /* ty=Tensor[(9, 3, 15), float64] */;
  (%871, %872, %873)
}

def @func_4061(%var_4022: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) {
  %874 = cast(%var_4022, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
  %875 = cast(meta[relay.Constant][46] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %876 = reshape(%875, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %877 = @func_3916() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) */;
  %878 = rsqrt(%874) /* ty=Tensor[(5, 2, 2), float64] */;
  %879 = @func_99(%876) /* ty=Tensor[(9, 1, 15), float32] */;
  %880 = %877.0;
  (%878, %879, meta[relay.Constant][46] /* ty=Tensor[(135), float32] */, %880)
}

def @func_7406(%var_7394: Tensor[(9, 405, 15), float32]) -> Tensor[(9, 405, 15), bool] {
  %881 = @func_5414() /* ty=(Tensor[(9, 405, 15), float32],) */;
  %882 = %881.0;
  %883 = cast(%var_7394, dtype="bool") /* ty=Tensor[(9, 405, 15), bool] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="bool") /* ty=Tensor[(9, 405, 15), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%885, %886) /* ty=Tensor[(9, 405, 15), bool] */
}

def @func_3466(%var_3412: Tensor[(11, 4, 15), int64], %var_3413: Tensor[(11, 4, 15), int64], %var_3453: Tensor[(196, 2), float32], %var_3464: Tensor[(1, 540), float32]) -> (Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) {
  %887 = cast(%var_3413, dtype="bool") /* ty=Tensor[(11, 4, 15), bool] */;
  %888 = shape_of(%var_3412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%var_3412, dtype="bool") /* ty=Tensor[(11, 4, 15), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = cast(meta[relay.Constant][47] /* ty=Tensor[(196, 2), float32] */, dtype="float32") /* ty=Tensor[(196, 2), float32] */;
  %892 = reshape(%891, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
  %893 = @func_787(%892) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) */;
  %894 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %895 = cast(%var_3453, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %896 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(196, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %897 = cast(meta[relay.Constant][47] /* ty=Tensor[(196, 2), float32] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %899 = %894.1;
  %900 = cast(%899, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %901 = cast(%var_3464, dtype="float32") /* ty=Tensor[(1, 540), float32] */;
  %902 = reshape(%900, newshape=[64, 4]) /* ty=Tensor[(64, 4), float32] */;
  %903 = reshape(%901, newshape=[540]) /* ty=Tensor[(540), float32] */;
  %904 = @func_3344(%902, %903) /* ty=(Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) */;
  %905 = greater_equal(%889, %890) /* ty=Tensor[(11, 4, 15), bool] */;
  %906 = %893.1;
  %907 = power(%897, %898) /* ty=Tensor[(196, 2), float64] */;
  %908 = %904.1;
  (%905, %906, %899, %907, %908, %var_3464)
}

def @func_2896() -> (Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) {
  %909 = @func_676() /* ty=Tensor[(9, 1, 15), float32] */;
  %910 = cast(%909, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %911 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 15), bool] */;
  %912 = cast(meta[relay.Constant][49] /* ty=Tensor[(32, 8), float32] */, dtype="float32") /* ty=Tensor[(32, 8), float32] */;
  %913 = reshape(%912, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %914 = @func_2776(%913) /* ty=(Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) */;
  %915 = greater_equal(%910, %911) /* ty=Tensor[(9, 2, 15), bool] */;
  %916 = %914.2;
  (%915, %916, meta[relay.Constant][49] /* ty=Tensor[(32, 8), float32] */)
}

def @func_3053(%var_3046: Tensor[(32, 8), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) {
  %917 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %918 = cast(meta[relay.Constant][50] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %919 = reshape(%918, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
  %920 = @func_787(%919) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) */;
  %921 = cast(%var_3046, dtype="float32") /* ty=Tensor[(32, 8), float32] */;
  %922 = cast(meta[relay.Constant][51] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %923 = reshape(%921, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
  %924 = reshape(%922, newshape=[54, 6]) /* ty=Tensor[(54, 6), float32] */;
  %925 = @func_1701(%923, %924) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) */;
  %926 = %917.0;
  %927 = %920.1;
  %928 = %925.1;
  (%926, %927, meta[relay.Constant][50] /* ty=Tensor[(392), float32] */, %928, %var_3046, meta[relay.Constant][51] /* ty=Tensor[(324), float32] */)
}

def @func_8897() -> Tensor[(9, 1, 15), float32] {
  %929 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %929.2
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6268() -> (Tensor[(42), float64],) {
  @func_6266() /* ty=(Tensor[(42), float64],) */
}

def @func_7011() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32]) {
  %2 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32]) {
    %0 = @func_6859() /* ty=Tensor[(16, 4, 4), float32] */;
    %1 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
    (%0, %1)
  };
  %2() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_677() -> Tensor[(9, 1, 15), float32] {
  %4 = fn () -> Tensor[(9, 1, 15), float32] {
    %3 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %3.2
  };
  %4() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_6619() -> Tensor[(15, 9, 2), float64] {
  %5 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %5.1
}

def @func_5930(%var_5929: Tensor[(10, 6, 4), uint64]) -> (Tensor[(10, 6, 4), bool], Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64]) {
  %19 = fn (%var_5909: Tensor[(10, 6, 4), uint64]) -> (Tensor[(10, 6, 4), bool], Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64]) {
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 6, 4), uint64] */, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
    %7 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%var_5909, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %10 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %13 = reshape(%11, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %14 = reshape(%12, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %15 = @func_5641(%13, %14) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
    %16 = greater_equal(%8, %9) /* ty=Tensor[(10, 6, 4), bool] */;
    %17 = %10.0;
    %18 = %15.0;
    (%16, %17, %18, meta[relay.Constant][1] /* ty=Tensor[(400), float64] */)
  };
  %19(%var_5929) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64]) */
}

def @func_1856() -> Tensor[(16, 4, 4), float32] {
  @func_1854() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_3405(%var_3404: Tensor[(2, 324), float32]) -> (Tensor[(15, 9, 2), int16], Tensor[(2, 324), int16]) {
  %27 = fn (%var_3398: Tensor[(2, 324), float32]) -> (Tensor[(15, 9, 2), int16], Tensor[(2, 324), int16]) {
    %20 = @func_2264() /* ty=(Tensor[(15, 9, 2), int16],) */;
    %21 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
    %22 = %21.0;
    %23 = cast(%22, dtype="int16") /* ty=Tensor[(1, 324), int16] */;
    %24 = cast(%var_3398, dtype="int16") /* ty=Tensor[(2, 324), int16] */;
    %25 = %20.0;
    %26 = multiply(%23, %24) /* ty=Tensor[(2, 324), int16] */;
    (%25, %26)
  };
  %27(%var_3404) /* ty=(Tensor[(15, 9, 2), int16], Tensor[(2, 324), int16]) */
}

def @func_6068(%var_6067: Tensor[(10, 1, 6), int32]) -> (Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) {
  %49 = fn (%var_6026: Tensor[(10, 1, 6), int32]) -> (Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) {
    %28 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
    %29 = cast(%var_6026, dtype="bool") /* ty=Tensor[(10, 1, 6), bool] */;
    %30 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(10, 1, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 1, 6), int32] */, dtype="bool") /* ty=Tensor[(10, 1, 6), bool] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %33 = less(%31, %32) /* ty=Tensor[(10, ?, 6), bool] */;
    %34 = cast(%33, dtype="uint16") /* ty=Tensor[(10, ?, 6), uint16] */;
    %35 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(10, 1, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 1, 6), int32] */, dtype="uint16") /* ty=Tensor[(10, 1, 6), uint16] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %38 = bitwise_xor(%36, %37) /* ty=Tensor[(10, ?, 6), uint16] */;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(10, ?, 6), float32] */;
    %40 = sigmoid(%39) /* ty=Tensor[(10, ?, 6), float32] */;
    %41 = cast(%38, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%40, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %45 = cast(%40, dtype="float64") /* ty=Tensor[(10, ?, 6), float64] */;
    %46 = %28.0;
    %47 = minimum(%43, %44) /* ty=Tensor[(10, ?, 6), float64] */;
    %48 = sqrt(%45) /* ty=Tensor[(10, ?, 6), float64] */;
    (%46, %47, %48)
  };
  %49(%var_6067) /* ty=(Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) */
}

def @func_5688(%var_5686: Tensor[(13, 2, 13), float32]) -> (Tensor[(13, 2, 13), bool],) {
  @func_5685(%var_5686) /* ty=(Tensor[(13, 2, 13), bool],) */
}

def @func_6548() -> (Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) {
  %54 = fn () -> (Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) {
    %50 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
    %51 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %52 = %50.1;
    %53 = %51.0;
    (%52, %53)
  };
  %54() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) */
}

def @func_7614() -> (Tensor[(15, 9, 2), float32],) {
  @func_7612() /* ty=(Tensor[(15, 9, 2), float32],) */
}

def @func_2031() -> Tensor[(135), float32] {
  %55 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %55.2
}

def @func_3576(%var_3572: Tensor[(9, 1, 15), float32], %var_3573: Tensor[(405), float32], %var_3574: Tensor[(660), int64], %var_3575: Tensor[(392), float32]) -> (Tensor[(9, ?, 15), float64], Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(405), float32], Tensor[(11, 4, 15), bool], Tensor[(660), int64], Tensor[(392), float32], Tensor[(9, 60), float32], Tensor[(15, 9, 2), int16], Tensor[(15, 9, 2), int16]) {
  @func_3570(%var_3572, %var_3573, %var_3574, %var_3575) /* ty=(Tensor[(9, ?, 15), float64], Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(405), float32], Tensor[(11, 4, 15), bool], Tensor[(660), int64], Tensor[(392), float32], Tensor[(9, 60), float32], Tensor[(15, 9, 2), int16], Tensor[(15, 9, 2), int16]) */
}

def @func_7769() -> (Tensor[(16, 4, 4), float32], uint32, Tensor[(140), float32], Tensor[(16, 4, 4), float32]) {
  %56 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %58 = %56.0;
  %59 = cast(%58, dtype="uint32") /* ty=Tensor[(16, 4, 4), uint32] */;
  %60 = reshape(%57, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
  %61 = reshape(%59, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %62 = @func_6240(%60, %61) /* ty=(Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) */;
  %63 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
  %64 = %62.2;
  %65 = %63.0;
  (%58, %64, meta[relay.Constant][3] /* ty=Tensor[(140), float32] */, %65)
}

def @func_4386(%var_4384: Tensor[(1, 324), float32], %var_4385: Tensor[(42), float64]) -> (Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
  %87 = fn (%var_4324: Tensor[(1, 324), float32], %var_4340: Tensor[(42), float64]) -> (Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
    %66 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
    %67 = %66.0;
    %68 = cast(%var_4324, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
    %70 = cast(%67, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %73 = reshape(%72, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
    %74 = @func_4061(%73) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
    %75 = cast(%var_4340, dtype="float64") /* ty=Tensor[(42), float64] */;
    %76 = reshape(%75, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %77 = @func_2680(%76) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) */;
    %78 = cast(%var_4340, dtype="float64") /* ty=Tensor[(42), float64] */;
    %79 = cast(%67, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
    %80 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
    %81 = divide(%70, %71) /* ty=Tensor[(?, 324), float64] */;
    %82 = %74.2;
    %83 = %77.3;
    %84 = sin(%78) /* ty=Tensor[(42), float64] */;
    %85 = asinh(%79) /* ty=Tensor[(1, 324), float32] */;
    %86 = %80.0;
    (%81, %82, meta[relay.Constant][4] /* ty=Tensor[(20), float64] */, %83, %84, %85, %86)
  };
  %87(%var_4384, %var_4385) /* ty=(Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_5054() -> (Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) {
  @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */
}

def @func_6621() -> Tensor[(15, 9, 2), float64] {
  @func_6619() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_6886() -> (Tensor[(15, 9, 2), float64],) {
  %90 = fn () -> (Tensor[(15, 9, 2), float64],) {
    %88 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
    %89 = %88.0;
    (%89,)
  };
  %90() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_8411(%var_8409: Tensor[(3, 108), float32], %var_8410: Tensor[(135), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(42), float64], Tensor[(3, 108), float32], Tensor[(42), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(3, 45), uint8]) {
  %115 = fn (%var_8381: Tensor[(3, 108), float32], %var_8386: Tensor[(135), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(42), float64], Tensor[(3, 108), float32], Tensor[(42), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(3, 45), uint8]) {
    %91 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
    %92 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %93 = cast(%var_8381, dtype="float32") /* ty=Tensor[(3, 108), float32] */;
    %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %95 = reshape(%93, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
    %96 = reshape(%94, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %97 = @func_4383(%95, %96) /* ty=(Tensor[(?, 324), float64], Tensor[(135), float32], Tensor[(20), float64], Tensor[(9, 1, 15), float32], Tensor[(42), float64], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) */;
    %98 = cast(%var_8386, dtype="float32") /* ty=Tensor[(135), float32] */;
    %99 = reshape(%98, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
    %100 = @func_435(%99) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
    %101 = %100.4;
    %102 = cast(%101, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
    %103 = exp(%102) /* ty=Tensor[(3, 45), float32] */;
    %104 = cast(%103, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
    %105 = sqrt(%104) /* ty=Tensor[(3, 45), float64] */;
    %106 = cast(%101, dtype="uint8") /* ty=Tensor[(3, 45), uint8] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(2), int32] */;
    %108 = cast(%105, dtype="uint8") /* ty=Tensor[(3, 45), uint8] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %110 = %91.1;
    %111 = %92.0;
    %112 = %97.4;
    %113 = @func_8232() /* ty=Tensor[(135), float64] */;
    %114 = right_shift(%108, %109) /* ty=Tensor[(3, 45), uint8] */;
    (%110, %111, %112, %var_8381, meta[relay.Constant][5] /* ty=Tensor[(42), float64] */, %var_8386, %113, %114)
  };
  %115(%var_8409, %var_8410) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(42), float64], Tensor[(3, 108), float32], Tensor[(42), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(3, 45), uint8]) */
}

def @func_8204() -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(42), float64]) {
  @func_8202() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(42), float64]) */
}

def @func_6240(%var_6231: Tensor[(1, 14, 10), float32], %var_6237: Tensor[(256), uint32]) -> (Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) {
  %116 = cast(%var_6231, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %117 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %118 = cast(%var_6237, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %119 = reshape(%117, newshape=[]) /* ty=uint32 */;
  %120 = reshape(%118, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %121 = @func_2153(%119, %120) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %122 = tan(%116) /* ty=Tensor[(1, 14, 10), float32] */;
  %123 = %121.2;
  (%122, %123, meta[relay.Constant][6] /* ty=uint32 */, %var_6237)
}

def @func_8670() -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
  @func_8668() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */
}

def @func_1656() -> Tensor[(9, 1, 15), float32] {
  @func_813() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_1540() -> (Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) {
  @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */
}

def @func_790(%var_788: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) {
  @func_787(%var_788) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) */
}

def @func_683(%var_682: Tensor[(3, 14, 1), float64]) -> Tensor[(3, 14, 1), float64] {
  %125 = fn (%var_678: Tensor[(3, 14, 1), float64]) -> Tensor[(3, 14, 1), float64] {
    %124 = cast(%var_678, dtype="float64") /* ty=Tensor[(3, 14, 1), float64] */;
    atanh(%124) /* ty=Tensor[(3, 14, 1), float64] */
  };
  %125(%var_682) /* ty=Tensor[(3, 14, 1), float64] */
}

def @func_6124(%var_6122: Tensor[(3, 10, 2), float32], %var_6123: Tensor[(1, 135), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) {
  @func_6120(%var_6122, %var_6123) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) */
}

def @func_1538() -> (Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) {
  %126 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %130 = reshape(%129, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
  %131 = acos(%128) /* ty=Tensor[(15, 9, 2), float64] */;
  %132 = @func_681(%130) /* ty=Tensor[(3, 14, 1), float64] */;
  (%131, %132, meta[relay.Constant][7] /* ty=Tensor[(42), float64] */)
}

def @func_6979() -> (Tensor[(15, 9, 2), int16], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32], Tensor[(135), float32], Tensor[(20), float64]) {
  @func_6977() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32], Tensor[(135), float32], Tensor[(20), float64]) */
}

def @func_5270(%var_5268: Tensor[(13, 3, 16), float32], %var_5269: Tensor[(13, 3, 16), float32]) -> (Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  @func_5266(%var_5268, %var_5269) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_9137() -> Tensor[(16, 4, 4), float32] {
  @func_2972() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_4215() -> Tensor[(16, 4, 4), float32] {
  @func_4213() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_381(%var_379: Tensor[(15, 9, 2), float64]) -> (Tensor[(15, 9, 2), int16],) {
  @func_378(%var_379) /* ty=(Tensor[(15, 9, 2), int16],) */
}

def @func_2013(%var_2002: Tensor[(42), float64]) -> (Tensor[(42), int32],) {
  %133 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %134 = %133.2;
  %135 = cast(%var_2002, dtype="int32") /* ty=Tensor[(42), int32] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(1), int32] */;
  %137 = cast(%134, dtype="int32") /* ty=Tensor[(42), int32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?), int32] */;
  %139 = left_shift(%137, %138) /* ty=Tensor[(42), int32] */;
  (%139,)
}

def @func_2847() -> (Tensor[(16, 4, 4), float32], Tensor[(135), float32]) {
  @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */
}

def @func_4694() -> (Tensor[(15, 9, 2), float64], Tensor[(1, 324), float32]) {
  @func_4692() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(1, 324), float32]) */
}

def @func_378(%var_369: Tensor[(15, 9, 2), float64]) -> (Tensor[(15, 9, 2), int16],) {
  %140 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %141 = %140.0;
  %142 = cast(%var_369, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="int16") /* ty=Tensor[(15, 9, 2), int16] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %146 = minimum(%144, %145) /* ty=Tensor[(15, 9, 2), int16] */;
  (%146,)
}

def @func_4176(%var_4175: Tensor[(9, 15, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) {
  %159 = fn (%var_4142: Tensor[(9, 15, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) {
    %147 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %148 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
    %149 = @func_676() /* ty=Tensor[(9, 1, 15), float32] */;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
    %151 = cast(%var_4142, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
    %152 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
    %153 = %152.1;
    %154 = cast(%153, dtype="float32") /* ty=Tensor[(3, 14, 1), float32] */;
    %155 = %147.0;
    %156 = %148.0;
    %157 = subtract(%150, %151) /* ty=Tensor[(9, 15, 15), float32] */;
    %158 = sinh(%154) /* ty=Tensor[(3, 14, 1), float32] */;
    (%155, %156, %157, %158)
  };
  %159(%var_4175) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) */
}

def @func_5181(%var_5175: Tensor[(7, 16, 15), int32]) -> Tensor[(7, 16, 15), bool] {
  %160 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 16, 15), int32] */, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %161 = shape_of(%var_5175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_5175, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%162, %163) /* ty=Tensor[(7, 16, 15), bool] */
}

def @func_1615() -> Tensor[(15, 9, 2), float64] {
  %164 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %164.1
}

def @func_8035() -> Tensor[(16, 4, 4), float32] {
  %165 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %165.0
}

def @func_4064(%var_4062: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) {
  @func_4061(%var_4062) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_487(%var_485: uint32, %var_486: Tensor[(2, 16, 8), uint32]) -> (Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) {
  @func_483(%var_485, %var_486) /* ty=(Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_7106(%var_7104: uint32, %var_7105: Tensor[(256), uint32]) -> (Tensor[(9, 1, 15), float32], uint32, uint32, Tensor[(256), uint32], Tensor[(3, 14, 1), float64], Tensor[(42), float64], Tensor[(10, ?, 6), float64], Tensor[(15, 4), int32], Tensor[(9, 1, 15), float32], Tensor[(3, 14, 1), float64], Tensor[(135), float32]) {
  %186 = fn (%var_7053: uint32, %var_7054: Tensor[(256), uint32]) -> (Tensor[(9, 1, 15), float32], uint32, uint32, Tensor[(256), uint32], Tensor[(3, 14, 1), float64], Tensor[(42), float64], Tensor[(10, ?, 6), float64], Tensor[(15, 4), int32], Tensor[(9, 1, 15), float32], Tensor[(3, 14, 1), float64], Tensor[(135), float32]) {
    %166 = cast(%var_7053, dtype="uint32") /* ty=uint32 */;
    %167 = cast(%var_7054, dtype="uint32") /* ty=Tensor[(256), uint32] */;
    %168 = reshape(%166, newshape=[]) /* ty=uint32 */;
    %169 = reshape(%167, newshape=[256]) /* ty=Tensor[(256), uint32] */;
    %170 = @func_2153(%168, %169) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
    %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %172 = reshape(%171, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
    %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 4), int32] */, dtype="int32") /* ty=Tensor[(15, 4), int32] */;
    %174 = reshape(%173, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), int32] */;
    %175 = @func_6066(%174) /* ty=(Tensor[(9, 2, 15), bool], Tensor[(10, ?, 6), float64], Tensor[(10, ?, 6), float64]) */;
    %176 = @func_681(%172) /* ty=Tensor[(3, 14, 1), float64] */;
    %177 = cast(%176, dtype="float64") /* ty=Tensor[(3, 14, 1), float64] */;
    %178 = reshape(%177, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
    %179 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
    %180 = @func_6161() /* ty=Tensor[(9, 1, 15), float32] */;
    %181 = %170.2;
    %182 = %175.1;
    %183 = @func_6161() /* ty=Tensor[(9, 1, 15), float32] */;
    %184 = @func_681(%178) /* ty=Tensor[(3, 14, 1), float64] */;
    %185 = %179.2;
    (%180, %181, %var_7053, %var_7054, %176, meta[relay.Constant][9] /* ty=Tensor[(42), float64] */, %182, meta[relay.Constant][10] /* ty=Tensor[(15, 4), int32] */, %183, %184, %185)
  };
  %186(%var_7104, %var_7105) /* ty=(Tensor[(9, 1, 15), float32], uint32, uint32, Tensor[(256), uint32], Tensor[(3, 14, 1), float64], Tensor[(42), float64], Tensor[(10, ?, 6), float64], Tensor[(15, 4), int32], Tensor[(9, 1, 15), float32], Tensor[(3, 14, 1), float64], Tensor[(135), float32]) */
}

def @func_5798(%var_5796: Tensor[(16, 4, 4), float32]) -> (Tensor[(16, 4, 4), uint64], Tensor[(16, 4, 4), float32]) {
  @func_5795(%var_5796) /* ty=(Tensor[(16, 4, 4), uint64], Tensor[(16, 4, 4), float32]) */
}

def @func_6266() -> (Tensor[(42), float64],) {
  %187 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %188 = %187.2;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(42), float64] */;
  %190 = tan(%189) /* ty=Tensor[(42), float64] */;
  (%190,)
}

def @func_3318() -> (Tensor[(16, 4, 4), float32],) {
  @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */
}

def @func_101(%var_100: Tensor[(9, 1, 15), float32]) -> Tensor[(9, 1, 15), float32] {
  %192 = fn (%var_69: Tensor[(9, 1, 15), float32]) -> Tensor[(9, 1, 15), float32] {
    %191 = cast(%var_69, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
    cos(%191) /* ty=Tensor[(9, 1, 15), float32] */
  };
  %192(%var_100) /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_7461(%var_7459: Tensor[(448), uint32], %var_7460: Tensor[(2025), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(2, 16, 14), uint32], Tensor[(448), uint32], Tensor[(2025), float32], Tensor[(9, 15, 15), float64], Tensor[(16, 4, 4), float32]) {
  %207 = fn (%var_7420: Tensor[(448), uint32], %var_7425: Tensor[(2025), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(2, 16, 14), uint32], Tensor[(448), uint32], Tensor[(2025), float32], Tensor[(9, 15, 15), float64], Tensor[(16, 4, 4), float32]) {
    %193 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
    %194 = cast(%var_7420, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %195 = reshape(%194, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
    %196 = @func_5294(%195) /* ty=(Tensor[(2, 16, 14), uint32],) */;
    %197 = cast(%var_7425, dtype="float32") /* ty=Tensor[(2025), float32] */;
    %198 = reshape(%197, newshape=[9, 15, 15]) /* ty=Tensor[(9, 15, 15), float32] */;
    %199 = @func_4174(%198) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 15, 15), float32], Tensor[(3, 14, 1), float32]) */;
    %200 = %199.2;
    %201 = cast(%200, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
    %202 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
    %203 = %193.0;
    %204 = %196.0;
    %205 = acosh(%201) /* ty=Tensor[(9, 15, 15), float64] */;
    %206 = %202.0;
    (%203, %204, %var_7420, %var_7425, %205, %206)
  };
  %207(%var_7459, %var_7460) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(2, 16, 14), uint32], Tensor[(448), uint32], Tensor[(2025), float32], Tensor[(9, 15, 15), float64], Tensor[(16, 4, 4), float32]) */
}

def @func_1480(%var_1472: Tensor[(9, 3, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) {
  %208 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %209 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %210 = %209.2;
  %211 = cast(%210, dtype="int16") /* ty=Tensor[(9, 1, 15), int16] */;
  %212 = cast(%var_1472, dtype="int16") /* ty=Tensor[(9, 3, 15), int16] */;
  %213 = cast(%var_1472, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %214 = %208.0;
  %215 = bitwise_xor(%211, %212) /* ty=Tensor[(9, 3, 15), int16] */;
  %216 = asinh(%213) /* ty=Tensor[(9, 3, 15), float64] */;
  (%214, %215, %216)
}

def @func_1323(%var_1321: Tensor[(12, 3, 9), float32], %var_1322: Tensor[(12, 3, 9), float32]) -> (Tensor[(12, 3, 9), float32],) {
  @func_1319(%var_1321, %var_1322) /* ty=(Tensor[(12, 3, 9), float32],) */
}

def @func_8879() -> (Tensor[(16, 16), float32],) {
  %217 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
  %218 = %217.1;
  (%218,)
}

def @func_7708() -> (Tensor[(15, 9, 2), float64],) {
  %219 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %220 = %219.0;
  (%220,)
}

def @func_3764() -> (Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) {
  @func_3762() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) */
}

def @func_6244(%var_6242: Tensor[(1, 14, 10), float32], %var_6243: Tensor[(256), uint32]) -> (Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) {
  @func_6240(%var_6242, %var_6243) /* ty=(Tensor[(1, 14, 10), float32], uint32, uint32, Tensor[(256), uint32]) */
}

def @func_4306() -> (Tensor[(15, 9, 2), float32],) {
  @func_4304() /* ty=(Tensor[(15, 9, 2), float32],) */
}

def @func_5418() -> Tensor[(15, 9, 2), int16] {
  %221 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %221.1
}

def @func_1272(%var_1268: Tensor[(3, 5, 16), uint8]) -> Tensor[(3, 5, 16), bool] {
  %222 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %223 = cast(%var_1268, dtype="bool") /* ty=Tensor[(3, 5, 16), bool] */;
  greater(%222, %223) /* ty=Tensor[(3, 5, 16), bool] */
}

def @func_9112(%var_9045: Tensor[(448), uint32], %var_9090: int64, %var_9091: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(135), float32], Tensor[(448), uint32], Tensor[(3, 10, 2), float32], Tensor[(60), float32], Tensor[(16, 4, 4), float32], int64, int64, Tensor[(495), int64], Tensor[(16, 4, 4), float32], Tensor[(2, 16, 14), float64]) {
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %225 = reshape(%224, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %226 = @func_8743(%225) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %228 = cast(meta[relay.Constant][12] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %229 = reshape(%227, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %230 = reshape(%228, newshape=[1, 135]) /* ty=Tensor[(1, 135), float32] */;
  %231 = @func_6120(%229, %230) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) */;
  %232 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %233 = cast(%var_9090, dtype="int64") /* ty=int64 */;
  %234 = cast(%var_9091, dtype="int64") /* ty=Tensor[(495), int64] */;
  %235 = reshape(%233, newshape=[]) /* ty=int64 */;
  %236 = reshape(%234, newshape=[495]) /* ty=Tensor[(495), int64] */;
  %237 = @func_6665(%235, %236) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) */;
  %238 = cast(%var_9045, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %239 = reshape(%238, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
  %240 = @func_5294(%239) /* ty=(Tensor[(2, 16, 14), uint32],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %243 = cos(%242) /* ty=Tensor[(2, 16, 14), float64] */;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %245 = @func_4213() /* ty=Tensor[(16, 4, 4), float32] */;
  %246 = %226.1;
  %247 = %231.0;
  %248 = %232.0;
  %249 = %237.2;
  %250 = @func_1854() /* ty=Tensor[(16, 4, 4), float32] */;
  %251 = atanh(%244) /* ty=Tensor[(2, 16, 14), float64] */;
  (%245, %246, meta[relay.Constant][12] /* ty=Tensor[(135), float32] */, %var_9045, %247, meta[relay.Constant][13] /* ty=Tensor[(60), float32] */, %248, %249, %var_9090, %var_9091, %250, %251)
}

def @func_7872() -> Tensor[(16, 4, 4), float32] {
  @func_7870() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_1971() -> Tensor[(5, 4, 2), float32] {
  %253 = fn () -> Tensor[(5, 4, 2), float32] {
    %252 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
    acos(%252) /* ty=Tensor[(5, 4, 2), float32] */
  };
  %253() /* ty=Tensor[(5, 4, 2), float32] */
}

def @func_2776(%var_2766: Tensor[(16, 16), float32]) -> (Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) {
  %254 = cast(%var_2766, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %256 = reshape(%254, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
  %257 = reshape(%255, newshape=[54, 6]) /* ty=Tensor[(54, 6), float32] */;
  %258 = @func_1701(%256, %257) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) */;
  %259 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %260 = %258.0;
  %261 = @func_2031() /* ty=Tensor[(135), float32] */;
  (%259, %260, %var_2766, meta[relay.Constant][15] /* ty=Tensor[(324), float32] */, %261)
}

def @func_3344(%var_3325: Tensor[(64, 4), float32], %var_3336: Tensor[(540), float32]) -> (Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) {
  %262 = cast(%var_3325, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
  %263 = reshape(%262, newshape=[32, 8]) /* ty=Tensor[(32, 8), float32] */;
  %264 = @func_3053(%263) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) */;
  %265 = cast(%var_3336, dtype="float32") /* ty=Tensor[(540), float32] */;
  %266 = reshape(%265, newshape=[540]) /* ty=Tensor[(540), float32] */;
  %267 = @func_2595(%266) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) */;
  %268 = @func_2031() /* ty=Tensor[(135), float32] */;
  %269 = %264.5;
  %270 = %267.0;
  (%268, %269, %var_3325, %270, %var_3336)
}

def @func_6179(%var_6177: Tensor[(392), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) {
  @func_6176(%var_6177) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) */
}

def @func_5896(%var_5894: Tensor[(1680), int32]) -> (Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(1680), int32], Tensor[(1680), int32]) {
  @func_5893(%var_5894) /* ty=(Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(1680), int32], Tensor[(1680), int32]) */
}

def @func_5893(%var_5882: Tensor[(1680), int32]) -> (Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(1680), int32], Tensor[(1680), int32]) {
  %271 = cast(%var_5882, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %272 = reshape(%271, newshape=[1680]) /* ty=Tensor[(1680), int32] */;
  %273 = @func_5587(%272) /* ty=(Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) */;
  %274 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %275 = @func_1656() /* ty=Tensor[(9, 1, 15), float32] */;
  %276 = %273.2;
  (%274, %275, %276, %var_5882)
}

def @func_483(%var_447: uint32, %var_463: Tensor[(2, 16, 8), uint32]) -> (Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) {
  %277 = cast(%var_447, dtype="uint16") /* ty=uint16 */;
  %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %280 = cast(%var_463, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %281 = cast(%var_447, dtype="uint32") /* ty=uint32 */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 1, 8), uint32] */, dtype="uint32") /* ty=Tensor[(2, 1, 8), uint32] */;
  %283 = maximum(%281, %282) /* ty=Tensor[(2, 1, 8), uint32] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %285 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %286 = left_shift(%277, %278) /* ty=Tensor[(2, 1, 8), uint16] */;
  %287 = logical_or(%279, %280) /* ty=Tensor[(2, 16, 8), bool] */;
  %288 = rsqrt(%284) /* ty=Tensor[(2, 1, 8), float32] */;
  %289 = %285.1;
  (%286, %287, %288, %289)
}

def @func_7264() -> (Tensor[(9, 1, 15), float32],) {
  %292 = fn () -> (Tensor[(9, 1, 15), float32],) {
    %290 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %291 = %290.2;
    (%291,)
  };
  %292() /* ty=(Tensor[(9, 1, 15), float32],) */
}

def @func_7739(%var_7738: Tensor[(135), float32]) -> (Tensor[(135), float64],) {
  %299 = fn (%var_7726: Tensor[(135), float32]) -> (Tensor[(135), float64],) {
    %293 = @func_2031() /* ty=Tensor[(135), float32] */;
    %294 = cast(%var_7726, dtype="float64") /* ty=Tensor[(135), float64] */;
    %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(1), int32] */;
    %296 = cast(%293, dtype="float64") /* ty=Tensor[(135), float64] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), float64] */;
    %298 = divide(%296, %297) /* ty=Tensor[(135), float64] */;
    (%298,)
  };
  %299(%var_7738) /* ty=(Tensor[(135), float64],) */
}

def @func_5184(%var_5182: Tensor[(7, 16, 15), int32]) -> Tensor[(7, 16, 15), bool] {
  @func_5181(%var_5182) /* ty=Tensor[(7, 16, 15), bool] */
}

def @func_3365() -> Tensor[(16, 4, 4), float32] {
  %300 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %300.0
}

def @func_2331() -> Tensor[(9, 1, 15), float32] {
  %301 = fn () -> Tensor[(9, 1, 15), float32] {
    @func_1656() /* ty=Tensor[(9, 1, 15), float32] */
  };
  %301() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_4503(%var_4501: Tensor[(14, 12, 11), float32], %var_4502: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), float32], Tensor[(15, 9, 2), float64]) {
  %308 = fn (%var_4475: Tensor[(14, 12, 11), float32], %var_4476: Tensor[(14, 12, 11), float32]) -> (Tensor[(14, 12, 11), float32], Tensor[(15, 9, 2), float64]) {
    %302 = cast(%var_4476, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %303 = shape_of(%var_4475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%var_4475, dtype="float32") /* ty=Tensor[(14, 12, 11), float32] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %306 = power(%304, %305) /* ty=Tensor[(14, 12, 11), float32] */;
    %307 = @func_4412() /* ty=Tensor[(15, 9, 2), float64] */;
    (%306, %307)
  };
  %308(%var_4501, %var_4502) /* ty=(Tensor[(14, 12, 11), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_5166(%var_5164: Tensor[(15, 9, 2), float64]) -> Tensor[(15, 9, 2), uint16] {
  @func_5163(%var_5164) /* ty=Tensor[(15, 9, 2), uint16] */
}

def @func_8130() -> (Tensor[(135), float32], Tensor[(1, 324), float32]) {
  %313 = fn () -> (Tensor[(135), float32], Tensor[(1, 324), float32]) {
    %309 = @func_3762() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) */;
    %310 = @func_7479() /* ty=(Tensor[(1, 324), float32],) */;
    %311 = %309.1;
    %312 = %310.0;
    (%311, %312)
  };
  %313() /* ty=(Tensor[(135), float32], Tensor[(1, 324), float32]) */
}

def @func_8232() -> Tensor[(135), float64] {
  %314 = @func_8129() /* ty=(Tensor[(135), float32], Tensor[(1, 324), float32]) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(135), float64] */;
  log(%316) /* ty=Tensor[(135), float64] */
}

def @func_6701() -> Tensor[(15, 9, 2), float64] {
  @func_4412() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_3762() -> (Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) {
  %317 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %318 = @func_2845() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(135), float32]) */;
  %319 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %320 = %317.0;
  %321 = %318.1;
  %322 = %319.0;
  (%320, %321, %322)
}

def @func_5410() -> Tensor[(9, 405, 15), float32] {
  %324 = fn () -> Tensor[(9, 405, 15), float32] {
    %323 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
    %323.1
  };
  %324() /* ty=Tensor[(9, 405, 15), float32] */
}

def @func_7612() -> (Tensor[(15, 9, 2), float32],) {
  %325 = @func_4304() /* ty=(Tensor[(15, 9, 2), float32],) */;
  %326 = %325.0;
  (%326,)
}

def @func_4970(%var_4968: Tensor[(9, 5, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(9, 5, 15), bool]) {
  @func_4967(%var_4968) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(9, 5, 15), bool]) */
}

def @func_8950(%var_8942: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), bool],) {
  %327 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %328 = cast(%var_8942, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = equal(%330, %331) /* ty=Tensor[(5, 4, 2), bool] */;
  (%332,)
}

def @func_8234() -> Tensor[(135), float64] {
  @func_8232() /* ty=Tensor[(135), float64] */
}

def @func_1658() -> Tensor[(9, 1, 15), float32] {
  @func_1656() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_435(%var_431: Tensor[(3, 45), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) {
  %333 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %336 = cast(%334, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %337 = sinh(%336) /* ty=Tensor[(15, 9, 2), float64] */;
  %338 = cast(%334, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(15, 9, 2), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %343 = cast(%var_431, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %344 = reshape(%343, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %345 = sqrt(%335) /* ty=Tensor[(15, 9, 2), float64] */;
  %346 = logical_or(%340, %341) /* ty=Tensor[(15, 9, 2), bool] */;
  %347 = %342.0;
  %348 = @func_99(%344) /* ty=Tensor[(9, 1, 15), float32] */;
  (%345, %346, %347, %348, %var_431)
}

def @func_6394(%var_6393: Tensor[(312, 2), float32]) -> (Tensor[(16, 16), float32], Tensor[(15, 9, 2), float64], Tensor[(312, 2), float32], Tensor[(5, 4, 2), float32], Tensor[(330, 2), int64], Tensor[(392), float32]) {
  %366 = fn (%var_6371: Tensor[(312, 2), float32]) -> (Tensor[(16, 16), float32], Tensor[(15, 9, 2), float64], Tensor[(312, 2), float32], Tensor[(5, 4, 2), float32], Tensor[(330, 2), int64], Tensor[(392), float32]) {
    %349 = @func_2896() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */;
    %350 = cast(%var_6371, dtype="float32") /* ty=Tensor[(312, 2), float32] */;
    %351 = cast(%var_6371, dtype="float32") /* ty=Tensor[(312, 2), float32] */;
    %352 = reshape(%350, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float32] */;
    %353 = reshape(%351, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float32] */;
    %354 = @func_5266(%352, %353) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
    %355 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
    %356 = cast(%355, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
    %357 = cosh(%356) /* ty=Tensor[(5, 4, 2), float32] */;
    %358 = cast(%357, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
    %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %360 = reshape(%359, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %361 = @func_6176(%360) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) */;
    %362 = %349.1;
    %363 = %354.3;
    %364 = tan(%358) /* ty=Tensor[(5, 4, 2), float32] */;
    %365 = %361.2;
    (%362, %363, %var_6371, %364, %365, meta[relay.Constant][17] /* ty=Tensor[(392), float32] */)
  };
  %366(%var_6393) /* ty=(Tensor[(16, 16), float32], Tensor[(15, 9, 2), float64], Tensor[(312, 2), float32], Tensor[(5, 4, 2), float32], Tensor[(330, 2), int64], Tensor[(392), float32]) */
}

def @func_1661() -> (Tensor[(135), float32],) {
  %367 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %368 = %367.3;
  (%368,)
}

def @func_6162() -> Tensor[(9, 1, 15), float32] {
  %370 = fn () -> Tensor[(9, 1, 15), float32] {
    %369 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
    %369.2
  };
  %370() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_6324(%var_6303: Tensor[(5, 4), float64]) -> (Tensor[(1, 135), float32], Tensor[(60), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(5, 4), float64], Tensor[(9, 405, 15), float32]) {
  %371 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %372 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %373 = reshape(%371, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %374 = reshape(%372, newshape=[1, 135]) /* ty=Tensor[(1, 135), float32] */;
  %375 = @func_6120(%373, %374) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) */;
  %376 = cast(%var_6303, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %377 = reshape(%376, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %378 = @func_4061(%377) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
  %379 = @func_5414() /* ty=(Tensor[(9, 405, 15), float32],) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(9, 405, 15), float64] */;
  %382 = acosh(%381) /* ty=Tensor[(9, 405, 15), float64] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(9, 405, 15), float64] */;
  %384 = log10(%383) /* ty=Tensor[(9, 405, 15), float64] */;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %386 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%382, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %389 = %375.2;
  %390 = @func_2031() /* ty=Tensor[(135), float32] */;
  %391 = %378.2;
  %392 = add(%387, %388) /* ty=Tensor[(9, 405, 15), float32] */;
  (%389, meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, meta[relay.Constant][19] /* ty=Tensor[(135), float32] */, %390, %391, %var_6303, %392)
}

def @func_6176(%var_6173: Tensor[(392), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(196, 2), float64], Tensor[(330, 2), int64], Tensor[(392), float32], Tensor[(540), float32]) {
  %393 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %394 = cast(meta[relay.Constant][20] /* ty=Tensor[(330, 2), int64] */, dtype="int64") /* ty=Tensor[(330, 2), int64] */;
  %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(330, 2), int64] */, dtype="int64") /* ty=Tensor[(330, 2), int64] */;
  %396 = cast(%var_6173, dtype="float32") /* ty=Tensor[(392), float32] */;
  %397 = cast(meta[relay.Constant][21] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %398 = reshape(%394, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %399 = reshape(%395, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %400 = reshape(%396, newshape=[196, 2]) /* ty=Tensor[(196, 2), float32] */;
  %401 = reshape(%397, newshape=[1, 540]) /* ty=Tensor[(1, 540), float32] */;
  %402 = @func_3466(%398, %399, %400, %401) /* ty=(Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) */;
  %403 = %393.1;
  %404 = %402.3;
  (%403, %404, meta[relay.Constant][20] /* ty=Tensor[(330, 2), int64] */, %var_6173, meta[relay.Constant][21] /* ty=Tensor[(540), float32] */)
}

def @func_8441() -> (Tensor[(16, 4, 4), float32],) {
  %405 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  (%405,)
}

def @func_1878() -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
  %410 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
    %406 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %407 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
    %408 = %406.0;
    %409 = %407.0;
    (%408, %409)
  };
  %410() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_3166(%var_3150: Tensor[(324), float32], %var_3161: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(324), float32], Tensor[(12, 3, 9), float64], uint32, uint32, Tensor[(256), uint32]) {
  %411 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %412 = cast(%var_3150, dtype="float32") /* ty=Tensor[(324), float32] */;
  %413 = cast(%var_3150, dtype="float32") /* ty=Tensor[(324), float32] */;
  %414 = reshape(%412, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %415 = reshape(%413, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
  %416 = @func_1319(%414, %415) /* ty=(Tensor[(12, 3, 9), float32],) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %419 = cast(%var_3161, dtype="uint32") /* ty=uint32 */;
  %420 = cast(meta[relay.Constant][22] /* ty=Tensor[(256), uint32] */, dtype="uint32") /* ty=Tensor[(256), uint32] */;
  %421 = reshape(%419, newshape=[]) /* ty=uint32 */;
  %422 = reshape(%420, newshape=[256]) /* ty=Tensor[(256), uint32] */;
  %423 = @func_2153(%421, %422) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
  %424 = %411.0;
  %425 = log(%418) /* ty=Tensor[(12, 3, 9), float64] */;
  %426 = %423.2;
  (%424, %var_3150, %425, %426, %var_3161, meta[relay.Constant][22] /* ty=Tensor[(256), uint32] */)
}

def @func_4892() -> (Tensor[(15, 9, 2), float64], Tensor[(3, 45), float32], Tensor[(1, 135), float32], Tensor[(16, 4, 4), float32]) {
  %435 = fn () -> (Tensor[(15, 9, 2), float64], Tensor[(3, 45), float32], Tensor[(1, 135), float32], Tensor[(16, 4, 4), float32]) {
    %427 = @func_3762() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), int16]) */;
    %428 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
    %429 = reshape(%428, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
    %430 = @func_435(%429) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
    %431 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
    %432 = %427.0;
    %433 = %430.4;
    %434 = %431.1;
    (%432, %433, meta[relay.Constant][23] /* ty=Tensor[(1, 135), float32] */, %434)
  };
  %435() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 45), float32], Tensor[(1, 135), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_8668() -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
  %436 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %437 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %438 = %436.0;
  %439 = @func_8104() /* ty=Tensor[(16, 4, 4), float32] */;
  %440 = @func_6701() /* ty=Tensor[(15, 9, 2), float64] */;
  %441 = %437.0;
  (%438, %439, %440, %441)
}

def @func_2973() -> Tensor[(16, 4, 4), float32] {
  %442 = fn () -> Tensor[(16, 4, 4), float32] {
    @func_2255() /* ty=Tensor[(16, 4, 4), float32] */
  };
  %442() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_5420() -> Tensor[(15, 9, 2), int16] {
  @func_5418() /* ty=Tensor[(15, 9, 2), int16] */
}

def @func_5685(%var_5647: Tensor[(13, 2, 13), float32]) -> (Tensor[(13, 2, 13), bool],) {
  %443 = cast(%var_5647, dtype="float32") /* ty=Tensor[(13, 2, 13), float32] */;
  %444 = log(%443) /* ty=Tensor[(13, 2, 13), float32] */;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %446 = shape_of(%var_5647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_5647, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = greater(%447, %448) /* ty=Tensor[(13, 2, 13), bool] */;
  (%449,)
}

def @func_6327(%var_6325: Tensor[(5, 4), float64]) -> (Tensor[(1, 135), float32], Tensor[(60), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(5, 4), float64], Tensor[(9, 405, 15), float32]) {
  @func_6324(%var_6325) /* ty=(Tensor[(1, 135), float32], Tensor[(60), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(135), float32], Tensor[(5, 4), float64], Tensor[(9, 405, 15), float32]) */
}

def @func_7493(%var_7492: Tensor[(15, 7, 13), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(16, 4, 4), float32]) {
  %454 = fn (%var_7484: Tensor[(15, 7, 13), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(16, 4, 4), float32]) {
    %450 = cast(%var_7484, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
    %451 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %452 = acos(%450) /* ty=Tensor[(15, 7, 13), float32] */;
    %453 = %451.0;
    (%452, %453)
  };
  %454(%var_7492) /* ty=(Tensor[(15, 7, 13), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_350() -> (Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
  %464 = fn () -> (Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
    %455 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
    %456 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %457 = %455.3;
    %458 = cast(%457, dtype="float32") /* ty=Tensor[(135), float32] */;
    %459 = reshape(%458, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
    %460 = @func_99(%459) /* ty=Tensor[(9, 1, 15), float32] */;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
    %462 = %456.0;
    %463 = cosh(%461) /* ty=Tensor[(9, 1, 15), float32] */;
    (%457, %462, %463)
  };
  %464() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */
}

def @func_2543() -> (Tensor[(15, 9, 2), float64],) {
  %465 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %466 = %465.0;
  (%466,)
}

def @func_6977() -> (Tensor[(15, 9, 2), int16], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32], Tensor[(135), float32], Tensor[(20), float64]) {
  %467 = @func_5938() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %468 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %469 = reshape(%468, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %471 = reshape(%470, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %472 = @func_4061(%471) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) */;
  %473 = %467.0;
  %474 = @func_99(%469) /* ty=Tensor[(9, 1, 15), float32] */;
  %475 = %472.2;
  (%473, %474, meta[relay.Constant][24] /* ty=Tensor[(3, 45), float32] */, %475, meta[relay.Constant][25] /* ty=Tensor[(20), float64] */)
}

def @func_7184(%var_7183: Tensor[(1, 15, 3), float32]) -> Tensor[(?, 15, 3), bool] {
  %482 = fn (%var_7170: Tensor[(1, 15, 3), float32]) -> Tensor[(?, 15, 3), bool] {
    %476 = cast(%var_7170, dtype="float32") /* ty=Tensor[(1, 15, 3), float32] */;
    %477 = exp(%476) /* ty=Tensor[(1, 15, 3), float32] */;
    %478 = cast(%var_7170, dtype="bool") /* ty=Tensor[(1, 15, 3), bool] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%477, dtype="bool") /* ty=Tensor[(1, 15, 3), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%480, %481) /* ty=Tensor[(?, 15, 3), bool] */
  };
  %482(%var_7183) /* ty=Tensor[(?, 15, 3), bool] */
}

def @func_9117(%var_9114: Tensor[(448), uint32], %var_9115: int64, %var_9116: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(135), float32], Tensor[(448), uint32], Tensor[(3, 10, 2), float32], Tensor[(60), float32], Tensor[(16, 4, 4), float32], int64, int64, Tensor[(495), int64], Tensor[(16, 4, 4), float32], Tensor[(2, 16, 14), float64]) {
  @func_9112(%var_9114, %var_9115, %var_9116) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(135), float32], Tensor[(448), uint32], Tensor[(3, 10, 2), float32], Tensor[(60), float32], Tensor[(16, 4, 4), float32], int64, int64, Tensor[(495), int64], Tensor[(16, 4, 4), float32], Tensor[(2, 16, 14), float64]) */
}

def @func_814() -> Tensor[(9, 1, 15), float32] {
  %484 = fn () -> Tensor[(9, 1, 15), float32] {
    %483 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %483.2
  };
  %484() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_3466(%var_3412: Tensor[(11, 4, 15), int64], %var_3413: Tensor[(11, 4, 15), int64], %var_3453: Tensor[(196, 2), float32], %var_3464: Tensor[(1, 540), float32]) -> (Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) {
  %485 = cast(%var_3413, dtype="bool") /* ty=Tensor[(11, 4, 15), bool] */;
  %486 = shape_of(%var_3412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_3412, dtype="bool") /* ty=Tensor[(11, 4, 15), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = cast(meta[relay.Constant][26] /* ty=Tensor[(196, 2), float32] */, dtype="float32") /* ty=Tensor[(196, 2), float32] */;
  %490 = reshape(%489, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
  %491 = @func_787(%490) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) */;
  %492 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %493 = cast(%var_3453, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %494 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(196, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(196, 2), float32] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %497 = %492.1;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %499 = cast(%var_3464, dtype="float32") /* ty=Tensor[(1, 540), float32] */;
  %500 = reshape(%498, newshape=[64, 4]) /* ty=Tensor[(64, 4), float32] */;
  %501 = reshape(%499, newshape=[540]) /* ty=Tensor[(540), float32] */;
  %502 = @func_3344(%500, %501) /* ty=(Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) */;
  %503 = greater_equal(%487, %488) /* ty=Tensor[(11, 4, 15), bool] */;
  %504 = %491.1;
  %505 = power(%495, %496) /* ty=Tensor[(196, 2), float64] */;
  %506 = %502.1;
  (%503, %504, %497, %505, %506, %var_3464)
}

def @func_5589(%var_5588: Tensor[(1680), int32]) -> (Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) {
  %516 = fn (%var_5570: Tensor[(1680), int32]) -> (Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) {
    %507 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
    %508 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(5, 4, 2), int32] */;
    %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(%507, dtype="int32") /* ty=Tensor[(5, 4, 2), int32] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %512 = cast(%var_5570, dtype="int32") /* ty=Tensor[(1680), int32] */;
    %513 = reshape(%512, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), int32] */;
    %514 = add(%510, %511) /* ty=Tensor[(5, 4, 2), int32] */;
    %515 = @func_5181(%513) /* ty=Tensor[(7, 16, 15), bool] */;
    (%514, %515, %var_5570)
  };
  %516(%var_5588) /* ty=(Tensor[(5, 4, 2), int32], Tensor[(7, 16, 15), bool], Tensor[(1680), int32]) */
}

def @func_970() -> (Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
  %517 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %518 = %517.0;
  %519 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  (%518, %519)
}

def @func_5641(%var_5625: Tensor[(4, 10, 10), float64], %var_5626: Tensor[(4, 10, 10), float64]) -> (Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) {
  %520 = cast(%var_5626, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %521 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_5625, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %524 = divide(%522, %523) /* ty=Tensor[(4, 10, 10), float64] */;
  %525 = cast(%524, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %526 = shape_of(%var_5626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_5626, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = cast(%524, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %530 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_5625, dtype="bool") /* ty=Tensor[(4, 10, 10), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = equal(%527, %528) /* ty=Tensor[(4, 10, 10), bool] */;
  %534 = greater(%531, %532) /* ty=Tensor[(4, 10, 10), bool] */;
  (%533, %534)
}

def @func_1275(%var_1273: Tensor[(3, 5, 16), uint8]) -> Tensor[(3, 5, 16), bool] {
  @func_1272(%var_1273) /* ty=Tensor[(3, 5, 16), bool] */
}

def @func_7771() -> (Tensor[(16, 4, 4), float32], uint32, Tensor[(140), float32], Tensor[(16, 4, 4), float32]) {
  @func_7769() /* ty=(Tensor[(16, 4, 4), float32], uint32, Tensor[(140), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_7955() -> (Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
  %539 = fn () -> (Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) {
    %535 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
    %536 = @func_6547() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(16, 4, 4), float32]) */;
    %537 = %535.0;
    %538 = %536.1;
    (%537, %538)
  };
  %539() /* ty=(Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_7479() -> (Tensor[(1, 324), float32],) {
  %540 = @func_4008() /* ty=(Tensor[(1, 324), float64],) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %543 = cos(%542) /* ty=Tensor[(1, 324), float32] */;
  (%543,)
}

def @func_889() -> (Tensor[(15, 9, 2), float64],) {
  %546 = fn () -> (Tensor[(15, 9, 2), float64],) {
    %544 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %545 = %544.0;
    (%545,)
  };
  %546() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_626() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) {
  %553 = fn () -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) {
    %547 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %548 = %547.0;
    %549 = cast(%548, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
    %550 = reshape(%549, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float64] */;
    %551 = @func_378(%550) /* ty=(Tensor[(15, 9, 2), int16],) */;
    %552 = %551.0;
    (%548, %552)
  };
  %553() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */
}

def @func_6419() -> Tensor[(16, 4, 4), float32] {
  @func_4213() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_6703() -> Tensor[(15, 9, 2), float64] {
  @func_6701() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_2432(%var_2431: Tensor[(16, 4, 4), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) {
  %567 = fn (%var_2417: Tensor[(16, 4, 4), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) {
    %554 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
    %555 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
    %556 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
    %557 = %556.1;
    %558 = cast(%var_2417, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %562 = %554.1;
    %563 = %555.0;
    %564 = greater(%560, %561) /* ty=Tensor[(16, 4, 4), bool] */;
    %565 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
    %566 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
    (%562, %563, %564, %565, %566)
  };
  %567(%var_2431) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) */
}

def @func_665() -> Tensor[(16, 4, 4), float32] {
  @func_663() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_1915() -> (Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
  %575 = fn () -> (Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
    %568 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
    %571 = cast(meta[relay.Constant][28] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %572 = reshape(%571, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
    %573 = exp(%570) /* ty=Tensor[(16, 4, 4), float64] */;
    %574 = @func_99(%572) /* ty=Tensor[(9, 1, 15), float32] */;
    (%573, %574, meta[relay.Constant][28] /* ty=Tensor[(135), float32] */)
  };
  %575() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */
}

def @func_4061(%var_4022: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(16, 4, 4), float32]) {
  %576 = cast(%var_4022, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
  %577 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %578 = reshape(%577, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %579 = @func_3916() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) */;
  %580 = rsqrt(%576) /* ty=Tensor[(5, 2, 2), float64] */;
  %581 = @func_99(%578) /* ty=Tensor[(9, 1, 15), float32] */;
  %582 = %579.0;
  (%580, %581, meta[relay.Constant][29] /* ty=Tensor[(135), float32] */, %582)
}

def @func_7406(%var_7394: Tensor[(9, 405, 15), float32]) -> Tensor[(9, 405, 15), bool] {
  %583 = @func_5414() /* ty=(Tensor[(9, 405, 15), float32],) */;
  %584 = %583.0;
  %585 = cast(%var_7394, dtype="bool") /* ty=Tensor[(9, 405, 15), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(9, 405, 15), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%587, %588) /* ty=Tensor[(9, 405, 15), bool] */
}

def @func_8443() -> (Tensor[(16, 4, 4), float32],) {
  @func_8441() /* ty=(Tensor[(16, 4, 4), float32],) */
}

def @func_849() -> (Tensor[(16, 4, 4), float32],) {
  %590 = fn () -> (Tensor[(16, 4, 4), float32],) {
    %589 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
    (%589,)
  };
  %590() /* ty=(Tensor[(16, 4, 4), float32],) */
}

def @func_2597(%var_2596: Tensor[(540), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) {
  %600 = fn (%var_2591: Tensor[(540), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) {
    %591 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
    %592 = cast(%591, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
    %593 = reshape(%592, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
    %594 = @func_2430(%593) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), bool], Tensor[(9, 1, 15), float32], Tensor[(16, 4, 4), float32]) */;
    %595 = cast(%var_2591, dtype="float32") /* ty=Tensor[(540), float32] */;
    %596 = reshape(%595, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float32] */;
    %597 = @func_1196(%596) /* ty=(Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) */;
    %598 = %594.0;
    %599 = %597.0;
    (%591, %598, %599, %var_2591)
  };
  %600(%var_2596) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(9, 4, 15), int64], Tensor[(540), float32]) */
}

def @func_6860() -> Tensor[(16, 4, 4), float32] {
  %602 = fn () -> Tensor[(16, 4, 4), float32] {
    %601 = @func_5548() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
    %601.0
  };
  %602() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_7351() -> (Tensor[(12, 16, 15), float64],) {
  %605 = fn () -> (Tensor[(12, 16, 15), float64],) {
    %603 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
    %604 = log10(%603) /* ty=Tensor[(12, 16, 15), float64] */;
    (%604,)
  };
  %605() /* ty=(Tensor[(12, 16, 15), float64],) */
}

def @func_3917() -> (Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) {
  %610 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) {
    %606 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
    %607 = cast(%606, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
    %608 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
    %609 = log10(%607) /* ty=Tensor[(9, 1, 15), float32] */;
    (%608, %609)
  };
  %610() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32]) */
}

def @func_1086() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %611 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %612 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %613 = %611.0;
  %614 = %612.0;
  (%613, %614)
}

def @func_8881() -> (Tensor[(16, 16), float32],) {
  @func_8879() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_8743(%var_8736: Tensor[(135), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
  %615 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %616 = @func_7479() /* ty=(Tensor[(1, 324), float32],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %619 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %620 = cast(%var_8736, dtype="float32") /* ty=Tensor[(135), float32] */;
  %621 = reshape(%620, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %622 = %615.1;
  %623 = log(%618) /* ty=Tensor[(1, 324), float32] */;
  %624 = %619.0;
  %625 = @func_99(%621) /* ty=Tensor[(9, 1, 15), float32] */;
  (%622, %623, %624, %625, %var_8736)
}

def @func_2156(%var_2154: uint32, %var_2155: Tensor[(256), uint32]) -> (Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) {
  %638 = fn (%var_2130: uint32, %var_2131: Tensor[(256), uint32]) -> (Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) {
    %626 = @func_1661() /* ty=(Tensor[(135), float32],) */;
    %627 = cast(%var_2130, dtype="uint32") /* ty=uint32 */;
    %628 = cast(%var_2131, dtype="uint32") /* ty=Tensor[(256), uint32] */;
    %629 = reshape(%627, newshape=[]) /* ty=uint32 */;
    %630 = reshape(%628, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint32] */;
    %631 = @func_483(%629, %630) /* ty=(Tensor[(2, 1, 8), uint16], Tensor[(2, 16, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(15, 9, 2), float64]) */;
    %632 = cast(meta[relay.Constant][31] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %633 = reshape(%632, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float64] */;
    %634 = @func_378(%633) /* ty=(Tensor[(15, 9, 2), int16],) */;
    %635 = %626.0;
    %636 = %631.1;
    %637 = %634.0;
    (%635, %636, %var_2130, %var_2131, %637, meta[relay.Constant][31] /* ty=Tensor[(270), float64] */)
  };
  %638(%var_2154, %var_2155) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */
}

def @func_6120(%var_6096: Tensor[(3, 10, 2), float32], %var_6112: Tensor[(1, 135), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(15, 9, 2), float64], Tensor[(1, 135), float32]) {
  %639 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %640 = shape_of(%var_6096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%var_6096, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %643 = cast(%var_6112, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %644 = reshape(%643, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %645 = @func_435(%644) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %646 = mod(%641, %642) /* ty=Tensor[(3, 10, 2), float32] */;
  %647 = %645.2;
  (%646, %647, %var_6112)
}

def @func_9139() -> Tensor[(16, 4, 4), float32] {
  @func_9137() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_2286() -> (Tensor[(16, 4, 4), float32],) {
  %649 = fn () -> (Tensor[(16, 4, 4), float32],) {
    %648 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
    (%648,)
  };
  %649() /* ty=(Tensor[(16, 4, 4), float32],) */
}

def @func_5795(%var_5769: Tensor[(16, 4, 4), float32]) -> (Tensor[(16, 4, 4), uint64], Tensor[(16, 4, 4), float32]) {
  %650 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %651 = %650.0;
  %652 = cast(%var_5769, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %656 = minimum(%654, %655) /* ty=Tensor[(16, 4, 4), uint64] */;
  %657 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  (%656, %657)
}

def @func_7964(%var_7963: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
  %659 = fn (%var_7956: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
    %658 = cast(%var_7956, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
    exp(%658) /* ty=Tensor[(1, 6, 2), float64] */
  };
  %659(%var_7963) /* ty=Tensor[(1, 6, 2), float64] */
}

def @func_3570(%var_3510: Tensor[(9, 1, 15), float32], %var_3532: Tensor[(405), float32], %var_3550: Tensor[(660), int64], %var_3551: Tensor[(392), float32]) -> (Tensor[(9, ?, 15), float64], Tensor[(9, 1, 15), float32], Tensor[(9, 1, 15), float32], Tensor[(405), float32], Tensor[(11, 4, 15), bool], Tensor[(660), int64], Tensor[(392), float32], Tensor[(9, 60), float32], Tensor[(15, 9, 2), int16], Tensor[(15, 9, 2), int16]) {
  %660 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %661 = cast(%var_3510, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %665 = cast(%var_3532, dtype="float32") /* ty=Tensor[(405), float32] */;
  %666 = reshape(%665, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %667 = @func_2094(%666) /* ty=(Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) */;
  %668 = cast(%var_3550, dtype="int64") /* ty=Tensor[(660), int64] */;
  %669 = cast(%var_3550, dtype="int64") /* ty=Tensor[(660), int64] */;
  %670 = cast(%var_3551, dtype="float32") /* ty=Tensor[(392), float32] */;
  %671 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 60), float32] */, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %672 = reshape(%668, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %673 = reshape(%669, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), int64] */;
  %674 = reshape(%670, newshape=[196, 2]) /* ty=Tensor[(196, 2), float32] */;
  %675 = reshape(%671, newshape=[1, 540]) /* ty=Tensor[(1, 540), float32] */;
  %676 = @func_3466(%672, %673, %674, %675) /* ty=(Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) */;
  %677 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
  %678 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
  %679 = floor_mod(%663, %664) /* ty=Tensor[(9, ?, 15), float64] */;
  %680 = @func_813() /* ty=Tensor[(9, 1, 15), float32] */;
  %681 = %667.2;
  %682 = %676.0;
  %683 = %677.0;
  %684 = %678.0;
  (%679, %680, %681, %var_3532, %682, %var_3550, %var_3551, meta[relay.Constant][33] /* ty=Tensor[(9, 60), float32] */, %683, %684)
}

def @func_8746(%var_8744: Tensor[(135), float32]) -> (Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) {
  @func_8743(%var_8744) /* ty=(Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32], Tensor[(16, 4, 4), float32], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */
}

def @func_7990() -> Tensor[(15, 9, 2), float64] {
  @func_7988() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_1663() -> (Tensor[(135), float32],) {
  @func_1661() /* ty=(Tensor[(135), float32],) */
}

def @func_3817() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  @func_3815() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */
}

def @func_2033() -> Tensor[(135), float32] {
  @func_2031() /* ty=Tensor[(135), float32] */
}

def @func_2938() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %685 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %688 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
  %689 = log(%687) /* ty=Tensor[(15, 9, 2), float64] */;
  %690 = %688.1;
  (%689, %690)
}

def @func_3055(%var_3054: Tensor[(32, 8), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) {
  %703 = fn (%var_3046: Tensor[(32, 8), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) {
    %691 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %692 = cast(meta[relay.Constant][34] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %693 = reshape(%692, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float32] */;
    %694 = @func_787(%693) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) */;
    %695 = cast(%var_3046, dtype="float32") /* ty=Tensor[(32, 8), float32] */;
    %696 = cast(meta[relay.Constant][35] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %697 = reshape(%695, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
    %698 = reshape(%696, newshape=[54, 6]) /* ty=Tensor[(54, 6), float32] */;
    %699 = @func_1701(%697, %698) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) */;
    %700 = %691.0;
    %701 = %694.1;
    %702 = %699.1;
    (%700, %701, meta[relay.Constant][34] /* ty=Tensor[(392), float32] */, %702, %var_3046, meta[relay.Constant][35] /* ty=Tensor[(324), float32] */)
  };
  %703(%var_3054) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(14, 2, 14), float64], Tensor[(392), float32], Tensor[(12, 3, 9), float32], Tensor[(32, 8), float32], Tensor[(324), float32]) */
}

def @func_3796() -> Tensor[(16, 4, 4), float32] {
  %705 = fn () -> Tensor[(16, 4, 4), float32] {
    %704 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %704.0
  };
  %705() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_7988() -> Tensor[(15, 9, 2), float64] {
  %706 = @func_6885() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %706.0
}

def @func_8202() -> (Tensor[(16, 4, 4), float32], Tensor[(1, 324), float32], Tensor[(42), float64]) {
  %707 = @func_2972() /* ty=Tensor[(16, 4, 4), float32] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %709 = cast(meta[relay.Constant][36] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %710 = reshape(%709, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %711 = @func_4824(%710) /* ty=(Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) */;
  %712 = cos(%708) /* ty=Tensor[(16, 4, 4), float32] */;
  %713 = %711.2;
  (%712, %713, meta[relay.Constant][36] /* ty=Tensor[(42), float64] */)
}

def @func_8037() -> Tensor[(16, 4, 4), float32] {
  @func_8035() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_5645(%var_5643: Tensor[(4, 10, 10), float64], %var_5644: Tensor[(4, 10, 10), float64]) -> (Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) {
  @func_5641(%var_5643, %var_5644) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */
}

def @func_2845() -> (Tensor[(16, 4, 4), float32], Tensor[(135), float32]) {
  %714 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %715 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
  %716 = %714.2;
  (%715, %716)
}

def @func_2257() -> Tensor[(16, 4, 4), float32] {
  @func_2255() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_4967(%var_4960: Tensor[(9, 5, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(9, 5, 15), bool]) {
  %717 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %718 = @func_1656() /* ty=Tensor[(9, 1, 15), float32] */;
  %719 = cast(%718, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %720 = cast(%var_4960, dtype="bool") /* ty=Tensor[(9, 5, 15), bool] */;
  %721 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
  %722 = %717.0;
  %723 = not_equal(%719, %720) /* ty=Tensor[(9, 5, 15), bool] */;
  (%721, %722, %723)
}

def @func_2545() -> (Tensor[(15, 9, 2), float64],) {
  @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_4826(%var_4825: Tensor[(42), float64]) -> (Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) {
  %736 = fn (%var_4781: Tensor[(42), float64]) -> (Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) {
    %724 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %725 = cast(%var_4781, dtype="float64") /* ty=Tensor[(42), float64] */;
    %726 = reshape(%725, newshape=[3, 14, 1]) /* ty=Tensor[(3, 14, 1), float64] */;
    %727 = @func_681(%726) /* ty=Tensor[(3, 14, 1), float64] */;
    %728 = cast(%var_4781, dtype="bool") /* ty=Tensor[(42), bool] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="bool") /* ty=Tensor[(3, 14, 1), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %732 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
    %733 = %724.1;
    %734 = logical_or(%730, %731) /* ty=Tensor[(3, 14, ?), bool] */;
    %735 = %732.0;
    (%733, %734, %735)
  };
  %736(%var_4825) /* ty=(Tensor[(9, 1, 15), float32], Tensor[(3, 14, ?), bool], Tensor[(1, 324), float32]) */
}

def @func_4213() -> Tensor[(16, 4, 4), float32] {
  %737 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %737.0
}

def @func_4414() -> Tensor[(15, 9, 2), float64] {
  @func_4412() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_5400() -> (Tensor[(15, 9, 2), float64],) {
  %738 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %739 = %738.0;
  (%739,)
}

def @func_6421() -> Tensor[(16, 4, 4), float32] {
  @func_6419() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_4412() -> Tensor[(15, 9, 2), float64] {
  %740 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %740.0
}

def @func_6837() -> (Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64], Tensor[(4, 10, 10), bool]) {
  %755 = fn () -> (Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64], Tensor[(4, 10, 10), bool]) {
    %741 = @func_888() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %742 = cast(meta[relay.Constant][37] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %743 = cast(meta[relay.Constant][37] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %744 = reshape(%742, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %745 = reshape(%743, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %746 = @func_5641(%744, %745) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
    %747 = cast(meta[relay.Constant][37] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %748 = %746.1;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
    %750 = reshape(%747, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %751 = reshape(%749, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float64] */;
    %752 = @func_5641(%750, %751) /* ty=(Tensor[(4, 10, 10), bool], Tensor[(4, 10, 10), bool]) */;
    %753 = %741.0;
    %754 = %752.0;
    (%753, %748, meta[relay.Constant][37] /* ty=Tensor[(400), float64] */, %754)
  };
  %755() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(4, 10, 10), bool], Tensor[(400), float64], Tensor[(4, 10, 10), bool]) */
}

def @func_4256() -> (Tensor[(5, 4, 2), float32], Tensor[(15, 9, 2), float64]) {
  @func_4254() /* ty=(Tensor[(5, 4, 2), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_2940() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  @func_2938() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */
}

def @func_7870() -> Tensor[(16, 4, 4), float32] {
  @func_6419() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_7409(%var_7407: Tensor[(9, 405, 15), float32]) -> Tensor[(9, 405, 15), bool] {
  @func_7406(%var_7407) /* ty=Tensor[(9, 405, 15), bool] */
}

def @func_4009() -> (Tensor[(1, 324), float64],) {
  %760 = fn () -> (Tensor[(1, 324), float64],) {
    %756 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
    %757 = %756.0;
    %758 = cast(%757, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
    %759 = sin(%758) /* ty=Tensor[(1, 324), float64] */;
    (%759,)
  };
  %760() /* ty=(Tensor[(1, 324), float64],) */
}

def @func_4304() -> (Tensor[(15, 9, 2), float32],) {
  %761 = @func_1615() /* ty=Tensor[(15, 9, 2), float64] */;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
  %763 = log10(%762) /* ty=Tensor[(15, 9, 2), float32] */;
  (%763,)
}

def @func_1138() -> (Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) {
  %767 = fn () -> (Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) {
    %764 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
    %765 = %764.1;
    %766 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
    (%765, %766)
  };
  %767() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */
}

def @func_2779(%var_2777: Tensor[(16, 16), float32]) -> (Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) {
  @func_2776(%var_2777) /* ty=(Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) */
}

def @func_2737() -> (Tensor[(15, 9, 2), float64],) {
  %770 = fn () -> (Tensor[(15, 9, 2), float64],) {
    %768 = @func_2543() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %769 = %768.0;
    (%769,)
  };
  %770() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_2897() -> (Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) {
  %779 = fn () -> (Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) {
    %771 = @func_676() /* ty=Tensor[(9, 1, 15), float32] */;
    %772 = cast(%771, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
    %773 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 15), bool] */;
    %774 = cast(meta[relay.Constant][39] /* ty=Tensor[(32, 8), float32] */, dtype="float32") /* ty=Tensor[(32, 8), float32] */;
    %775 = reshape(%774, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
    %776 = @func_2776(%775) /* ty=(Tensor[(5, 4, 2), float32], Tensor[(16, 4, 4), bool], Tensor[(16, 16), float32], Tensor[(324), float32], Tensor[(135), float32]) */;
    %777 = greater_equal(%772, %773) /* ty=Tensor[(9, 2, 15), bool] */;
    %778 = %776.2;
    (%777, %778, meta[relay.Constant][39] /* ty=Tensor[(32, 8), float32] */)
  };
  %779() /* ty=(Tensor[(9, 2, 15), bool], Tensor[(16, 16), float32], Tensor[(32, 8), float32]) */
}

def @func_269() -> (Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  %780 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %781 = %780.0;
  %782 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 9, 2), float64] */, dtype="uint8") /* ty=Tensor[(15, 9, 2), uint8] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="uint8") /* ty=Tensor[(15, 9, 2), uint8] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %786 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %787 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %788 = reshape(%787, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %789 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %790 = left_shift(%784, %785) /* ty=Tensor[(15, 9, 2), uint8] */;
  %791 = %786.0;
  %792 = @func_99(%788) /* ty=Tensor[(9, 1, 15), float32] */;
  %793 = cos(%789) /* ty=Tensor[(15, 9, 2), float64] */;
  (%790, %791, %792, meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, %793)
}

def @func_3472(%var_3468: Tensor[(11, 4, 15), int64], %var_3469: Tensor[(11, 4, 15), int64], %var_3470: Tensor[(196, 2), float32], %var_3471: Tensor[(1, 540), float32]) -> (Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) {
  @func_3466(%var_3468, %var_3469, %var_3470, %var_3471) /* ty=(Tensor[(11, 4, 15), bool], Tensor[(14, 2, 14), float64], Tensor[(16, 4, 4), float64], Tensor[(196, 2), float64], Tensor[(324), float32], Tensor[(1, 540), float32]) */
}

def @func_3136() -> (Tensor[(1, 324), float32],) {
  %794 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
  %795 = %794.2;
  (%795,)
}

def @func_3316() -> (Tensor[(16, 4, 4), float32],) {
  %796 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %797 = %796.3;
  (%797,)
}

def @func_8953(%var_8951: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), bool],) {
  @func_8950(%var_8951) /* ty=(Tensor[(5, 4, 2), bool],) */
}

def @func_6668(%var_6666: int64, %var_6667: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) {
  %806 = fn (%var_6658: int64, %var_6659: Tensor[(495), int64]) -> (Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) {
    %798 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %799 = cast(%var_6658, dtype="int64") /* ty=int64 */;
    %800 = cast(%var_6659, dtype="int64") /* ty=Tensor[(495), int64] */;
    %801 = reshape(%799, newshape=[]) /* ty=int64 */;
    %802 = reshape(%800, newshape=[5, 11, 9]) /* ty=Tensor[(5, 11, 9), int64] */;
    %803 = @func_5483(%801, %802) /* ty=(Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) */;
    %804 = %798.0;
    %805 = %803.0;
    (%804, %805, %var_6658, %var_6659)
  };
  %806(%var_6666, %var_6667) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(5, 11, 9), int64], int64, Tensor[(495), int64]) */
}

def @func_7534() -> Tensor[(16, 4, 4), float32] {
  @func_7532() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_972() -> (Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) {
  @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */
}

def @func_2265() -> (Tensor[(15, 9, 2), int16],) {
  %809 = fn () -> (Tensor[(15, 9, 2), int16],) {
    %807 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
    %808 = %807.1;
    (%808,)
  };
  %809() /* ty=(Tensor[(15, 9, 2), int16],) */
}

def @func_7586() -> Tensor[(16, 4, 4), float32] {
  %811 = fn () -> Tensor[(16, 4, 4), float32] {
    %810 = @func_1392() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */;
    %810.0
  };
  %811() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_8104() -> Tensor[(16, 4, 4), float32] {
  %812 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %812.3
}

def @func_8106() -> Tensor[(16, 4, 4), float32] {
  @func_8104() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_4254() -> (Tensor[(5, 4, 2), float32], Tensor[(15, 9, 2), float64]) {
  %813 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %814 = @func_1970() /* ty=Tensor[(5, 4, 2), float32] */;
  %815 = %813.0;
  (%814, %815)
}

def @func_3348(%var_3346: Tensor[(64, 4), float32], %var_3347: Tensor[(540), float32]) -> (Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) {
  @func_3344(%var_3346, %var_3347) /* ty=(Tensor[(135), float32], Tensor[(324), float32], Tensor[(64, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(540), float32]) */
}

def @func_7710() -> (Tensor[(15, 9, 2), float64],) {
  @func_7708() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_1483(%var_1481: Tensor[(9, 3, 15), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) {
  @func_1480(%var_1481) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) */
}

def @func_7532() -> Tensor[(16, 4, 4), float32] {
  %816 = @func_5052() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) */;
  %816.0
}

def @func_8898() -> Tensor[(9, 1, 15), float32] {
  %818 = fn () -> Tensor[(9, 1, 15), float32] {
    %817 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
    %817.2
  };
  %818() /* ty=Tensor[(9, 1, 15), float32] */
}

def @func_1704(%var_1702: Tensor[(16, 4, 4), float32], %var_1703: Tensor[(54, 6), float32]) -> (Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) {
  %831 = fn (%var_1687: Tensor[(16, 4, 4), float32], %var_1693: Tensor[(54, 6), float32]) -> (Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) {
    %819 = @func_1439() /* ty=Tensor[(16, 4, 4), float32] */;
    %820 = cast(%var_1687, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
    %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(%819, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %824 = cast(%var_1693, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
    %825 = cast(%var_1693, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
    %826 = reshape(%824, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
    %827 = reshape(%825, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
    %828 = @func_1319(%826, %827) /* ty=(Tensor[(12, 3, 9), float32],) */;
    %829 = logical_or(%822, %823) /* ty=Tensor[(16, 4, 4), bool] */;
    %830 = %828.0;
    (%829, %830, %var_1693)
  };
  %831(%var_1702, %var_1703) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(12, 3, 9), float32], Tensor[(54, 6), float32]) */
}

def @func_2255() -> Tensor[(16, 4, 4), float32] {
  %832 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %832.0
}

def @main(%var_9158: Tensor[(45, 3), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(135), float64], Tensor[(45, 3), float64]) {
  %833 = cast(%var_9158, dtype="float32") /* ty=Tensor[(45, 3), float32] */;
  %834 = reshape(%833, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %835 = @func_7739(%834) /* ty=(Tensor[(135), float64],) */;
  %836 = cast(meta[relay.Constant][42] /* ty=Tensor[(45, 3), float32] */, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %837 = shape_of(%var_9158, dtype="int32") /* ty=Tensor[(2), int32] */;
  %838 = cast(%var_9158, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %840 = @func_7870() /* ty=Tensor[(16, 4, 4), float32] */;
  %841 = %835.0;
  %842 = mod(%838, %839) /* ty=Tensor[(45, 3), float64] */;
  (%840, %841, %842)
}

def @func_438(%var_436: Tensor[(3, 45), float32]) -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) {
  @func_435(%var_436) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */
}

def @func_5415() -> (Tensor[(9, 405, 15), float32],) {
  %844 = fn () -> (Tensor[(9, 405, 15), float32],) {
    %843 = @func_5409() /* ty=Tensor[(9, 405, 15), float32] */;
    (%843,)
  };
  %844() /* ty=(Tensor[(9, 405, 15), float32],) */
}

def @func_1617() -> Tensor[(15, 9, 2), float64] {
  @func_1615() /* ty=Tensor[(15, 9, 2), float64] */
}

def @func_7481() -> (Tensor[(1, 324), float32],) {
  @func_7479() /* ty=(Tensor[(1, 324), float32],) */
}

def @func_2016(%var_2014: Tensor[(42), float64]) -> (Tensor[(42), int32],) {
  @func_2013(%var_2014) /* ty=(Tensor[(42), int32],) */
}

def @func_1319(%var_1308: Tensor[(12, 3, 9), float32], %var_1309: Tensor[(12, 3, 9), float32]) -> (Tensor[(12, 3, 9), float32],) {
  %845 = cast(%var_1309, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %846 = shape_of(%var_1308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_1308, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %849 = floor_divide(%847, %848) /* ty=Tensor[(12, 3, 9), float32] */;
  (%849,)
}

def @func_3138() -> (Tensor[(1, 324), float32],) {
  @func_3136() /* ty=(Tensor[(1, 324), float32],) */
}

def @func_5939() -> (Tensor[(15, 9, 2), int16],) {
  %851 = fn () -> (Tensor[(15, 9, 2), int16],) {
    %850 = @func_5418() /* ty=Tensor[(15, 9, 2), int16] */;
    (%850,)
  };
  %851() /* ty=(Tensor[(15, 9, 2), int16],) */
}

def @func_4602(%var_4601: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(256), uint32], uint32) {
  %862 = fn (%var_4579: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(256), uint32], uint32) {
    %852 = @func_1877() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */;
    %853 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %854 = cast(%var_4579, dtype="uint32") /* ty=uint32 */;
    %855 = %853.0;
    %856 = cast(%855, dtype="uint32") /* ty=Tensor[(16, 4, 4), uint32] */;
    %857 = reshape(%854, newshape=[]) /* ty=uint32 */;
    %858 = reshape(%856, newshape=[256]) /* ty=Tensor[(256), uint32] */;
    %859 = @func_2153(%857, %858) /* ty=(Tensor[(135), float32], Tensor[(2, 16, 8), bool], uint32, Tensor[(256), uint32], Tensor[(15, 9, 2), int16], Tensor[(270), float64]) */;
    %860 = %852.1;
    %861 = %859.3;
    (%860, %855, %861, %var_4579)
  };
  %862(%var_4601) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32], Tensor[(256), uint32], uint32) */
}

def @func_3815() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  %863 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
  %864 = @func_3316() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %865 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %866 = @func_2736() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %867 = %863.3;
  %868 = %864.0;
  %869 = %865.0;
  %870 = %866.0;
  (%867, %868, %869, %870)
}

def @func_3367() -> Tensor[(16, 4, 4), float32] {
  @func_3365() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_2682(%var_2681: Tensor[(42), float64]) -> (Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) {
  %885 = fn (%var_2620: Tensor[(42), float64]) -> (Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) {
    %871 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %872 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
    %873 = cast(%var_2620, dtype="float64") /* ty=Tensor[(42), float64] */;
    %874 = reshape(%873, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %875 = @func_2013(%874) /* ty=(Tensor[(42), int32],) */;
    %876 = %875.0;
    %877 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), int32] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(1), int32] */;
    %879 = cast(%876, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %881 = %871.0;
    %882 = %872.2;
    %883 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
    %884 = minimum(%879, %880) /* ty=Tensor[(42), uint8] */;
    (%881, %var_2620, %882, %883, %884)
  };
  %885(%var_2681) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(42), float64], Tensor[(135), float32], Tensor[(9, 1, 15), float32], Tensor[(42), uint8]) */
}

def @func_226() -> (Tensor[(15, 9, 2), float64],) {
  %888 = fn () -> (Tensor[(15, 9, 2), float64],) {
    %886 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
    %887 = asinh(%886) /* ty=Tensor[(15, 9, 2), float64] */;
    (%887,)
  };
  %888() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_1440() -> Tensor[(16, 4, 4), float32] {
  %890 = fn () -> Tensor[(16, 4, 4), float32] {
    %889 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %889.0
  };
  %890() /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_5486(%var_5484: int64, %var_5485: Tensor[(5, 11, 9), int64]) -> (Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) {
  %896 = fn (%var_5453: int64, %var_5454: Tensor[(5, 11, 9), int64]) -> (Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) {
    %891 = cast(%var_5453, dtype="int64") /* ty=int64 */;
    %892 = cast(%var_5454, dtype="int64") /* ty=Tensor[(5, 11, 9), int64] */;
    %893 = @func_2360() /* ty=(Tensor[(15, 9, 2), int16],) */;
    %894 = maximum(%891, %892) /* ty=Tensor[(5, 11, 9), int64] */;
    %895 = %893.0;
    (%894, %895)
  };
  %896(%var_5484, %var_5485) /* ty=(Tensor[(5, 11, 9), int64], Tensor[(15, 9, 2), int16]) */
}

def @func_1198(%var_1197: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) {
  %904 = fn (%var_1175: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) {
    %897 = @func_970() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %898 = %897.1;
    %899 = cast(%898, dtype="int64") /* ty=Tensor[(9, 1, 15), int64] */;
    %900 = cast(%var_1175, dtype="int64") /* ty=Tensor[(9, 4, 15), int64] */;
    %901 = @func_349() /* ty=(Tensor[(135), float32], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32]) */;
    %902 = left_shift(%899, %900) /* ty=Tensor[(9, 4, 15), int64] */;
    %903 = %901.2;
    (%902, %903)
  };
  %904(%var_1197) /* ty=(Tensor[(9, 4, 15), int64], Tensor[(9, 1, 15), float32]) */
}

def @func_5266(%var_5250: Tensor[(13, 3, 16), float32], %var_5251: Tensor[(13, 3, 16), float32]) -> (Tensor[(13, 3, 16), bool], Tensor[(15, 9, 2), float64], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  %905 = cast(%var_5251, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %906 = shape_of(%var_5250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%var_5250, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %909 = cast(meta[relay.Constant][45] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %910 = reshape(%909, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %911 = @func_435(%910) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), bool], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(3, 45), float32]) */;
  %912 = @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */;
  %913 = greater_equal(%907, %908) /* ty=Tensor[(13, 3, 16), bool] */;
  %914 = %911.0;
  %915 = %912.0;
  (%913, %914, meta[relay.Constant][45] /* ty=Tensor[(135), float32] */, %915)
}

def @func_5296(%var_5295: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), uint32],) {
  %919 = fn (%var_5284: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), uint32],) {
    %916 = cast(meta[relay.Constant][46] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %917 = cast(%var_5284, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
    %918 = bitwise_or(%916, %917) /* ty=Tensor[(2, 16, 14), uint32] */;
    (%918,)
  };
  %919(%var_5295) /* ty=(Tensor[(2, 16, 14), uint32],) */
}

def @func_1393() -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) {
  %928 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) {
    %920 = @func_1137() /* ty=(Tensor[(15, 9, 2), int16], Tensor[(16, 4, 4), float32]) */;
    %921 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
    %922 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
    %923 = reshape(%921, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
    %924 = reshape(%922, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float32] */;
    %925 = @func_1319(%923, %924) /* ty=(Tensor[(12, 3, 9), float32],) */;
    %926 = %920.1;
    %927 = %925.0;
    (%926, %927, meta[relay.Constant][47] /* ty=Tensor[(1, 324), float32] */)
  };
  %928() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(12, 3, 9), float32], Tensor[(1, 324), float32]) */
}

def @func_787(%var_772: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float64]) {
  %929 = cast(%var_772, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %930 = cast(%var_772, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %931 = asinh(%929) /* ty=Tensor[(14, 2, 14), float32] */;
  %932 = sinh(%930) /* ty=Tensor[(14, 2, 14), float64] */;
  (%931, %932)
}

def @func_3170(%var_3168: Tensor[(324), float32], %var_3169: uint32) -> (Tensor[(15, 9, 2), float64], Tensor[(324), float32], Tensor[(12, 3, 9), float64], uint32, uint32, Tensor[(256), uint32]) {
  @func_3166(%var_3168, %var_3169) /* ty=(Tensor[(15, 9, 2), float64], Tensor[(324), float32], Tensor[(12, 3, 9), float64], uint32, uint32, Tensor[(256), uint32]) */
}

def @func_5549() -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
  %936 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) {
    %933 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %934 = @func_3795() /* ty=Tensor[(16, 4, 4), float32] */;
    %935 = %933.0;
    (%934, %935)
  };
  %936() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_5616() -> (Tensor[(15, 9, 2), float32], Tensor[(15, 9, 2), float64]) {
  %941 = fn () -> (Tensor[(15, 9, 2), float32], Tensor[(15, 9, 2), float64]) {
    %937 = @func_4304() /* ty=(Tensor[(15, 9, 2), float32],) */;
    %938 = @func_2536() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */;
    %939 = %937.0;
    %940 = %938.2;
    (%939, %940)
  };
  %941() /* ty=(Tensor[(15, 9, 2), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_2094(%var_2075: Tensor[(405), float32]) -> (Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) {
  %942 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
  %943 = %942.0;
  %944 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 9, 2), float64] */, dtype="int32") /* ty=Tensor[(15, 9, 2), int32] */;
  %945 = shape_of(%943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %946 = cast(%943, dtype="int32") /* ty=Tensor[(15, 9, 2), int32] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %948 = @func_1538() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(3, 14, 1), float64], Tensor[(42), float64]) */;
  %949 = @func_1914() /* ty=(Tensor[(16, 4, 4), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32]) */;
  %950 = cast(%var_2075, dtype="float32") /* ty=Tensor[(405), float32] */;
  %951 = reshape(%950, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float32] */;
  %952 = @func_1480(%951) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) */;
  %953 = %952.1;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(9, 3, 15), float32] */;
  %955 = shape_of(%var_2075, dtype="int32") /* ty=Tensor[(1), int32] */;
  %956 = cast(%var_2075, dtype="float32") /* ty=Tensor[(405), float32] */;
  %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?), float32] */;
  %958 = logical_xor(%946, %947) /* ty=Tensor[(15, 9, 2), int32] */;
  %959 = %948.1;
  %960 = %949.1;
  %961 = mod(%956, %957) /* ty=Tensor[(405), float32] */;
  (%958, %959, %960, %961)
}

def @func_1088() -> (Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) {
  @func_1086() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), float64]) */
}

def @func_2361() -> (Tensor[(15, 9, 2), int16],) {
  %964 = fn () -> (Tensor[(15, 9, 2), int16],) {
    %962 = @func_625() /* ty=(Tensor[(15, 9, 2), float64], Tensor[(15, 9, 2), int16]) */;
    %963 = %962.1;
    (%963,)
  };
  %964() /* ty=(Tensor[(15, 9, 2), int16],) */
}

def @func_5052() -> (Tensor[(16, 4, 4), float32], Tensor[(9, 405, 15), float32]) {
  %965 = cast(meta[relay.Constant][49] /* ty=Tensor[(405, 1), float32] */, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %966 = reshape(%965, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float32] */;
  %967 = @func_1480(%966) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(9, 3, 15), int16], Tensor[(9, 3, 15), float64]) */;
  %968 = @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */;
  %969 = %968.2;
  %970 = cast(meta[relay.Constant][49] /* ty=Tensor[(405, 1), float32] */, dtype="bool") /* ty=Tensor[(405, 1), bool] */;
  %971 = cast(%969, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %972 = logical_and(%970, %971) /* ty=Tensor[(9, 405, 15), bool] */;
  %973 = cast(%972, dtype="float32") /* ty=Tensor[(9, 405, 15), float32] */;
  %974 = %967.0;
  %975 = tan(%973) /* ty=Tensor[(9, 405, 15), float32] */;
  (%974, %975)
}

def @func_2097(%var_2095: Tensor[(405), float32]) -> (Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) {
  @func_2094(%var_2095) /* ty=(Tensor[(15, 9, 2), int32], Tensor[(3, 14, 1), float64], Tensor[(9, 1, 15), float32], Tensor[(405), float32]) */
}

def @func_4692() -> (Tensor[(15, 9, 2), float64], Tensor[(1, 324), float32]) {
  %976 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
  %977 = @func_3136() /* ty=(Tensor[(1, 324), float32],) */;
  %978 = %976.0;
  %979 = %977.0;
  (%978, %979)
}

def @func_5402() -> (Tensor[(15, 9, 2), float64],) {
  @func_5400() /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_4562(%var_4561: float64) -> (Tensor[(13, 13, 7), float64], Tensor[(9, 1, 15), float32]) {
  %984 = fn (%var_4540: float64) -> (Tensor[(13, 13, 7), float64], Tensor[(9, 1, 15), float32]) {
    %980 = cast(%var_4540, dtype="float64") /* ty=float64 */;
    %981 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
    %982 = floor_divide(%980, %981) /* ty=Tensor[(13, 13, 7), float64] */;
    %983 = @func_2330() /* ty=Tensor[(9, 1, 15), float32] */;
    (%982, %983)
  };
  %984(%var_4561) /* ty=(Tensor[(13, 13, 7), float64], Tensor[(9, 1, 15), float32]) */
}

def @func_1854() -> Tensor[(16, 4, 4), float32] {
  %985 = @func_848() /* ty=(Tensor[(16, 4, 4), float32],) */;
  %985.0
}

def @func_3940(%var_3939: Tensor[(10, 3, 14), float64]) -> Tensor[(10, 3, 14), float64] {
  %987 = fn (%var_3935: Tensor[(10, 3, 14), float64]) -> Tensor[(10, 3, 14), float64] {
    %986 = cast(%var_3935, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
    asinh(%986) /* ty=Tensor[(10, 3, 14), float64] */
  };
  %987(%var_3939) /* ty=Tensor[(10, 3, 14), float64] */
}

def @func_663() -> Tensor[(16, 4, 4), float32] {
  %988 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 4, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  log10(%988) /* ty=Tensor[(16, 4, 4), float32] */
}

def @func_271() -> (Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) {
  @func_269() /* ty=(Tensor[(15, 9, 2), uint8], Tensor[(15, 9, 2), float64], Tensor[(9, 1, 15), float32], Tensor[(135), float32], Tensor[(15, 9, 2), float64]) */
}

def @func_5163(%var_5146: Tensor[(15, 9, 2), float64]) -> Tensor[(15, 9, 2), uint16] {
  %989 = @func_4412() /* ty=Tensor[(15, 9, 2), float64] */;
  %990 = cast(%var_5146, dtype="uint16") /* ty=Tensor[(15, 9, 2), uint16] */;
  %991 = shape_of(%989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %992 = cast(%989, dtype="uint16") /* ty=Tensor[(15, 9, 2), uint16] */;
  %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%992, %993) /* ty=Tensor[(15, 9, 2), uint16] */
}

def @func_2537() -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
  %1002 = fn () -> (Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) {
    %994 = @func_2255() /* ty=Tensor[(16, 4, 4), float32] */;
    %995 = cast(%994, dtype="float64") /* ty=Tensor[(16, 4, 4), float64] */;
    %996 = @func_225() /* ty=(Tensor[(15, 9, 2), float64],) */;
    %997 = @func_2285() /* ty=(Tensor[(16, 4, 4), float32],) */;
    %998 = @func_663() /* ty=Tensor[(16, 4, 4), float32] */;
    %999 = sqrt(%995) /* ty=Tensor[(16, 4, 4), float64] */;
    %1000 = %996.0;
    %1001 = %997.0;
    (%998, %999, %1000, %1001)
  };
  %1002() /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 4, 4), float64], Tensor[(15, 9, 2), float64], Tensor[(16, 4, 4), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen579/build/output.py", line 3139, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:35:17] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

