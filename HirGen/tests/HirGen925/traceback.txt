==========mod==========
#[version = "0.0.5"]
def @func_6886() -> Tensor[(1, 16, 4), float32] {
  %0 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %0.0
}

def @func_16105() -> (Tensor[(1092), uint32], Tensor[(900), float64]) {
  %1 = @func_16037() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) */;
  %2 = %1.3;
  %3 = @func_10708() /* ty=Tensor[(900), float64] */;
  (%2, %3)
}

def @func_2341(%var_2333: Tensor[(7, 2, 8), uint32]) -> (Tensor[(7, 2, 8), int32],) {
  %4 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %5 = cast(%var_2333, dtype="bool") /* ty=Tensor[(7, 2, 8), bool] */;
  %6 = greater(%4, %5) /* ty=Tensor[(7, 2, 8), bool] */;
  %7 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="int32") /* ty=int32 */;
  %8 = cast(%6, dtype="int32") /* ty=Tensor[(7, 2, 8), int32] */;
  %9 = logical_xor(%7, %8) /* ty=Tensor[(7, 2, 8), int32] */;
  (%9,)
}

def @func_13514() -> (Tensor[(1, 16, 4), float32],) {
  %10 = @func_12546() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %11 = %10.0;
  (%11,)
}

def @func_5759() -> (Tensor[(1, 16, 4), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 70), int32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  %12 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 70), int32] */, dtype="int32") /* ty=Tensor[(1, 70), int32] */;
  %14 = reshape(%13, newshape=[5, 2, 7]) /* ty=Tensor[(5, 2, 7), int32] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(112), uint32] */, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %16 = reshape(%15, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %17 = @func_2985(%16) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %18 = %12.0;
  %19 = @func_3539(%14) /* ty=Tensor[(5, 2, 7), int32] */;
  %20 = %17.1;
  (%18, %19, meta[relay.Constant][1] /* ty=Tensor[(1, 70), int32] */, %20, meta[relay.Constant][2] /* ty=Tensor[(112), uint32] */)
}

def @func_3119() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %21 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %22 = %21.1;
  %23 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  (%22, %23)
}

def @func_4335() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) {
  %24 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %25 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
  %26 = %24.0;
  %27 = %25.5;
  (%26, %27)
}

def @func_8329() -> (Tensor[(12, 5, 15), float64],) {
  %28 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %29 = %28.0;
  (%29,)
}

def @func_3039() -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) {
  %30 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %32 = reshape(%31, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %33 = @func_2649(%32) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %34 = %30.0;
  %35 = %33.4;
  (%34, %35, meta[relay.Constant][3] /* ty=Tensor[(624), float32] */)
}

def @func_12365() -> (Tensor[(1, 16, 4), float32],) {
  %36 = @func_9782() /* ty=(Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %37 = %36.2;
  (%37,)
}

def @func_7134() -> (Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) {
  %38 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %39 = %38.0;
  %40 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %41 = %40.1;
  %42 = cast(%41, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %43 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%39, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %46 = cast(%39, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %47 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%41, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = cast(%41, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %51 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%39, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = bitwise_xor(%44, %45) /* ty=Tensor[(?, 16, 4), uint64] */;
  %55 = not_equal(%48, %49) /* ty=Tensor[(?, 16, 4), bool] */;
  %56 = logical_or(%52, %53) /* ty=Tensor[(?, 16, 4), bool] */;
  (%54, %55, %56)
}

def @func_12700() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 16, 4), float64], Tensor[(1320), bool], Tensor[(900), float64]) {
  %57 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %59 = reshape(%58, newshape=[2, 660]) /* ty=Tensor[(2, 660), bool] */;
  %60 = @func_11410(%59) /* ty=(Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) */;
  %61 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %62 = %57.1;
  %63 = %60.3;
  %64 = %61.1;
  (%62, %63, meta[relay.Constant][4] /* ty=Tensor[(1320), bool] */, %64)
}

def @func_6002(%var_5994: Tensor[(11, 10, 15), float64]) -> (Tensor[(11, 10, 15), float64],) {
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %66 = cast(%var_5994, dtype="float64") /* ty=Tensor[(11, 10, 15), float64] */;
  %67 = floor_divide(%65, %66) /* ty=Tensor[(11, 10, 15), float64] */;
  (%67,)
}

def @func_11090() -> (Tensor[(1, 16, 4), float32], Tensor[(624), float32]) {
  %68 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %69 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %70 = %68.0;
  %71 = %69.2;
  (%70, %71)
}

def @func_6745() -> (Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) {
  %72 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %73 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %74 = %72.0;
  (%73, %74)
}

def @func_8611() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %75 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %76 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %77 = %75.0;
  %78 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %79 = @func_8052() /* ty=Tensor[(1, 16, 4), float32] */;
  %80 = %76.0;
  (%77, %78, %79, %80)
}

def @func_15261() -> (Tensor[(300), uint8],) {
  %81 = @func_14886() /* ty=Tensor[(300), uint8] */;
  (%81,)
}

def @func_9232(%var_9219: int32, %var_9220: Tensor[(2, 2, 11), int32]) -> (Tensor[(2, 2, 11), bool], Tensor[(624), float32]) {
  %82 = cast(%var_9219, dtype="bool") /* ty=bool */;
  %83 = cast(%var_9220, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %84 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %85 = greater(%82, %83) /* ty=Tensor[(2, 2, 11), bool] */;
  %86 = %84.2;
  (%85, %86)
}

def @func_9003() -> Tensor[(1, 16, 4), float32] {
  %87 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %87.0
}

def @func_13372() -> (Tensor[(1, 16, 4), float32],) {
  %88 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  (%88,)
}

def @func_15741() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
  %89 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %90 = %89.1;
  %91 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  (%90, %91)
}

def @func_11927() -> (Tensor[(900), float64],) {
  %92 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
  %93 = %92.0;
  (%93,)
}

def @func_8052() -> Tensor[(1, 16, 4), float32] {
  %94 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %94.0
}

def @func_16996() -> (Tensor[(1, 16, 4), float32],) {
  %95 = @func_15559() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) */;
  %96 = %95.0;
  (%96,)
}

def @func_15724() -> (Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %97 = @func_14196() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
  %101 = @func_7606() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %102 = divide(%99, %100) /* ty=Tensor[(14, 16, 4), float32] */;
  %103 = %101.0;
  (%102, %103)
}

def @func_4612() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %104 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %105 = @func_2616() /* ty=Tensor[(900), float64] */;
  %106 = %104.0;
  (%105, %106)
}

def @func_14732(%var_14726: Tensor[(2, 56), uint32]) -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) {
  %107 = cast(%var_14726, dtype="uint32") /* ty=Tensor[(2, 56), uint32] */;
  %108 = reshape(%107, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %109 = @func_2985(%108) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %110 = @func_10220() /* ty=Tensor[(8, 6, 13), float32] */;
  %111 = %109.0;
  (%110, %111, %var_14726)
}

def @func_3336(%var_3302: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) {
  %112 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %113 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %114 = reshape(%112, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %115 = reshape(%113, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %116 = @func_827(%114, %115) /* ty=Tensor[(2, 15, 10), uint8] */;
  %117 = cast(%116, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %118 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %119 = reshape(%117, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %120 = reshape(%118, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %121 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  %122 = @func_2616() /* ty=Tensor[(900), float64] */;
  %123 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  %124 = @func_827(%119, %120) /* ty=Tensor[(2, 15, 10), uint8] */;
  (%121, %122, %116, %var_3302, %123, %124)
}

def @func_2661() -> Tensor[(1, 16, 4), float32] {
  %125 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %125.0
}

def @func_14159() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float64], Tensor[(900), float64]) {
  %126 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %127 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %128 = %127.0;
  %129 = cast(%128, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %130 = reshape(%129, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %131 = @func_2649(%130) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %132 = %126.0;
  %133 = %131.0;
  (%132, %128, %133)
}

def @func_12546() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
  %134 = @func_12365() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %135 = %134.0;
  %136 = @func_9932() /* ty=Tensor[(900), float64] */;
  (%135, %136)
}

def @func_14806(%var_14787: Tensor[(2, 312), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(2, 312), float64], Tensor[(2, 312), float32]) {
  %137 = @func_11783() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) */;
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %139 = reshape(%138, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %140 = @func_3437(%139) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) */;
  %141 = cast(%var_14787, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
  %142 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(2, 312), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 312), float32] */, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %145 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %146 = %137.1;
  %147 = %140.1;
  %148 = divide(%143, %144) /* ty=Tensor[(2, 312), float64] */;
  %149 = cos(%145) /* ty=Tensor[(2, 312), float32] */;
  (%146, %147, %148, %149)
}

def @func_16899() -> (Tensor[(1, 16, 4), float64],) {
  %150 = @func_15977() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %151 = %150.0;
  (%151,)
}

def @func_15600() -> (Tensor[(70), int32], Tensor[(?, 16, 4), bool]) {
  %152 = @func_15356() /* ty=Tensor[(70), int32] */;
  %153 = @func_13612() /* ty=Tensor[(?, 16, 4), bool] */;
  (%152, %153)
}

def @func_15140(%var_15100: Tensor[(8, 16, 4), float32], %var_15110: Tensor[(1650), float64], %var_15114: Tensor[(378), int32], %var_15124: Tensor[(3, 52), float32]) -> (Tensor[(8, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(11, 10, 15), float64], Tensor[(1650), float64], Tensor[(9, 3, 14), int32], Tensor[(378), int32], Tensor[(6, 2, 13), float32], Tensor[(3, 52), float32]) {
  %154 = cast(%var_15100, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %155 = cast(%var_15110, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %156 = reshape(%155, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %157 = @func_8630(%156) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
  %158 = cast(%var_15114, dtype="int32") /* ty=Tensor[(378), int32] */;
  %159 = reshape(%158, newshape=[9, 3, 14]) /* ty=Tensor[(9, 3, 14), int32] */;
  %160 = @func_12775(%159) /* ty=(Tensor[(9, 3, 14), int32],) */;
  %161 = cast(%var_15124, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %162 = reshape(%161, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %163 = @func_13536(%162) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %164 = log(%154) /* ty=Tensor[(8, 16, 4), float32] */;
  %165 = @func_10910() /* ty=Tensor[(12, 5, 15), float64] */;
  %166 = %157.1;
  %167 = %160.0;
  %168 = %163.0;
  (%164, %165, %166, %var_15110, %167, %var_15114, %168, %var_15124)
}

def @func_16339() -> (Tensor[(70), int32], Tensor[(1, 16, 4), float64]) {
  %169 = @func_15600() /* ty=(Tensor[(70), int32], Tensor[(?, 16, 4), bool]) */;
  %170 = @func_15724() /* ty=(Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %171 = %169.0;
  %172 = %170.1;
  (%171, %172)
}

def @func_4744() -> (Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %174 = reshape(%173, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float64] */;
  %175 = @func_3567(%174) /* ty=(Tensor[(6, 10, 15), float64],) */;
  %176 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %177 = %175.0;
  %178 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  (%176, %177, meta[relay.Constant][8] /* ty=Tensor[(900), float64] */, %178)
}

def @func_5110(%var_5027: Tensor[(6, 10, 15), float64], %var_5079: Tensor[(9, 16, 4), float64], %var_5095: Tensor[(8, 16, 4), float64]) -> (Tensor[(?, 16, 4), bool], Tensor[(8, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 78), uint32], Tensor[(1, 16, 4), float64], Tensor[(6, 10, 15), float64], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(9, 16, 4), bool], Tensor[(1092), uint32], Tensor[(8, 16, 4), bool]) {
  %179 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %180 = %179.0;
  %181 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%180, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
  %188 = reshape(%187, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
  %189 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %190 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %191 = %190.1;
  %192 = cast(%var_5027, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %196 = cast(meta[relay.Constant][10] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
  %198 = reshape(%196, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %199 = reshape(%197, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %200 = @func_1081(%198, %199) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %201 = cast(%180, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %202 = tan(%201) /* ty=Tensor[(1, 16, 4), float64] */;
  %203 = cast(%182, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %207 = maximum(%205, %206) /* ty=Tensor[(?, 16, 4), float64] */;
  %208 = cast(%207, dtype="bool") /* ty=Tensor[(?, 16, 4), bool] */;
  %209 = cast(%var_5079, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
  %210 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
  %211 = cast(meta[relay.Constant][10] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %212 = reshape(%210, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %213 = reshape(%211, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %214 = @func_3878(%212, %213) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) */;
  %215 = cast(%202, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %216 = cast(%var_5095, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
  %217 = less_equal(%185, %186) /* ty=Tensor[(?, 16, 4), bool] */;
  %218 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %219 = @func_844(%188) /* ty=Tensor[(14, 6, 13), bool] */;
  %220 = %189.0;
  %221 = add(%194, %195) /* ty=Tensor[(6, 10, 15), float64] */;
  %222 = %200.4;
  %223 = greater_equal(%208, %209) /* ty=Tensor[(9, 16, 4), bool] */;
  %224 = %214.3;
  %225 = greater(%215, %216) /* ty=Tensor[(8, 16, 4), bool] */;
  (%217, %218, %219, meta[relay.Constant][9] /* ty=Tensor[(14, 78), uint32] */, %220, %221, %222, meta[relay.Constant][10] /* ty=Tensor[(405), float32] */, %223, %224, %225)
}

def @func_5377() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) {
  %226 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %227 = cast(meta[relay.Constant][11] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %228 = reshape(%227, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %229 = @func_3917(%228) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %230 = %226.0;
  %231 = %229.3;
  (%230, %231, meta[relay.Constant][11] /* ty=Tensor[(300), uint8] */)
}

def @func_8126() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %232 = @func_4612() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %233 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %234 = %232.1;
  %235 = %233.0;
  (%234, %235)
}

def @func_12775(%var_12767: Tensor[(9, 3, 14), int32]) -> (Tensor[(9, 3, 14), int32],) {
  %236 = cast(%var_12767, dtype="int32") /* ty=Tensor[(9, 3, 14), int32] */;
  %237 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(9, 3, 14), int32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %240 = multiply(%238, %239) /* ty=Tensor[(9, 3, 14), int32] */;
  (%240,)
}

def @func_12447() -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(1092), uint32]) {
  %241 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %242 = cast(meta[relay.Constant][13] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %243 = reshape(%242, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %244 = @func_3962(%243) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %245 = %241.0;
  %246 = %244.2;
  (%245, %246, meta[relay.Constant][13] /* ty=Tensor[(1092), uint32] */)
}

def @func_15756() -> Tensor[(8, 6, 13), float32] {
  %247 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %247.2
}

def @func_4347() -> (Tensor[(900), float64],) {
  %248 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %249 = %248.0;
  (%249,)
}

def @func_12302() -> (Tensor[(1, 16, 4), float32],) {
  %250 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
  %251 = %250.0;
  (%251,)
}

def @func_15526() -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %252 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %253 = @func_13372() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %254 = %252.0;
  %255 = %253.0;
  (%254, %255)
}

def @func_15559() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) {
  %256 = @func_7457() /* ty=(Tensor[(4, 11, 11), float64],) */;
  %257 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %258 = @func_11026() /* ty=Tensor[(1, 16, 4), float32] */;
  %259 = %256.0;
  %260 = %257.1;
  (%258, %259, %260)
}

def @func_8965(%var_8962: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
  %261 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %262 = cast(meta[relay.Constant][14] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %263 = reshape(%262, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %264 = cast(%var_8962, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %265 = reshape(%264, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %266 = @func_2819(%265) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
  %267 = %261.0;
  %268 = @func_2541(%263) /* ty=Tensor[(8, 6, 13), float32] */;
  %269 = @func_5227() /* ty=Tensor[(900), float64] */;
  %270 = %266.5;
  (%267, %268, meta[relay.Constant][14] /* ty=Tensor[(624), float32] */, %269, %270, %var_8962)
}

def @func_10023() -> (Tensor[(1, 16, 4), float64],) {
  %271 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %272 = %271.3;
  (%272,)
}

def @func_9782() -> (Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %273 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 13), uint16] */;
  %275 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %276 = bitwise_or(%273, %274) /* ty=Tensor[(1, 13), uint16] */;
  %277 = %275.0;
  %278 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  (%276, %277, %278)
}

def @func_15640() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %279 = @func_14694() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %280 = @func_15383() /* ty=Tensor[(1, 16, 4), float32] */;
  %281 = %279.0;
  (%280, %281)
}

def @func_16930() -> Tensor[(1, 16, 4), float64] {
  @func_9475() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_11842() -> (Tensor[(1, 16, 4), float64],) {
  %282 = @func_11594() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %283 = %282.0;
  (%283,)
}

def @func_11890() -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) {
  %284 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %285 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %286 = %284.0;
  %287 = @func_11826() /* ty=Tensor[(?, 16, 4), bool] */;
  %288 = %285.1;
  (%286, %287, %288)
}

def @func_13891() -> Tensor[(1, 16, 4), float64] {
  %289 = @func_11562() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) */;
  %289.0
}

def @func_3364() -> (Tensor[(1, 16, 4), float64],) {
  %290 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %293 = sin(%292) /* ty=Tensor[(1, 16, 4), float64] */;
  (%293,)
}

def @func_4536() -> (Tensor[(1, 16, 4), float32],) {
  %294 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %295 = %294.0;
  (%295,)
}

def @func_3094(%var_3083: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(5, 14, 12), float32], Tensor[(1092), uint32]) {
  %296 = cast(%var_3083, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %297 = reshape(%296, newshape=[1092, 1]) /* ty=Tensor[(1092, 1), uint32] */;
  %298 = @func_2252(%297) /* ty=(Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) */;
  %299 = @func_2592() /* ty=Tensor[(900), float64] */;
  %300 = %298.0;
  (%299, %300, %var_3083)
}

def @func_13536(%var_13531: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32],) {
  %301 = cast(%var_13531, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %302 = cos(%301) /* ty=Tensor[(6, 2, 13), float32] */;
  (%302,)
}

def @func_11341() -> (Tensor[(1, 16, 4), float32],) {
  %303 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  (%303,)
}

def @func_15874() -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) {
  %304 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %305 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %306 = %304.0;
  %307 = %305.0;
  (%306, %307)
}

def @func_15423() -> (Tensor[(1, 16, 4), float32],) {
  %308 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %309 = %308.0;
  (%309,)
}

def @func_11639() -> Tensor[(900), float64] {
  %310 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %310.1
}

def @func_16559() -> (Tensor[(1, 16, 4), float32],) {
  %311 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
  %312 = %311.0;
  (%312,)
}

def @func_12072() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %313 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %314 = @func_11842() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %315 = %313.0;
  %316 = %314.0;
  (%315, %316)
}

def @func_3684() -> Tensor[(12, 5, 15), float64] {
  %317 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %317.3
}

def @func_14833() -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %318 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %319 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %320 = @func_9555() /* ty=(Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) */;
  %321 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %322 = %318.0;
  %323 = %319.0;
  %324 = @func_2592() /* ty=Tensor[(900), float64] */;
  %325 = %320.7;
  %326 = %321.0;
  (%322, %323, %324, %325, %326)
}

def @func_16390() -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
  %327 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %328 = @func_13970() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %329 = %327.0;
  %330 = %328.0;
  (%329, %330)
}

def @func_2297(%var_2295: Tensor[(1092), uint32]) -> (Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %331 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %332 = exp(%331) /* ty=Tensor[(15, 2, 1), float32] */;
  %333 = cast(%332, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
  %334 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 2, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 2, 1), float32] */, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %337 = cast(%var_2295, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %338 = reshape(%337, newshape=[1092, 1]) /* ty=Tensor[(1092, 1), uint32] */;
  %339 = @func_2252(%338) /* ty=(Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) */;
  %340 = bitwise_xor(%335, %336) /* ty=Tensor[(15, 2, ?), uint64] */;
  %341 = %339.1;
  (%340, %341, %var_2295)
}

def @func_5227() -> Tensor[(900), float64] {
  %342 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %342.0
}

def @func_12036() -> (Tensor[(1, 16, 4), float32],) {
  %343 = @func_10995() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %344 = %343.2;
  (%344,)
}

def @func_14577() -> (Tensor[(1, 16, 4), float64],) {
  %345 = @func_2904() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %348 = cosh(%347) /* ty=Tensor[(1, 16, 4), float64] */;
  (%348,)
}

def @func_6558() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) {
  %349 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %350 = @func_4452() /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %351 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %352 = reshape(%351, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %353 = @func_3336(%352) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) */;
  %354 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %355 = %349.3;
  %356 = %350.1;
  %357 = %353.3;
  %358 = %354.0;
  (%355, %356, %357, meta[relay.Constant][18] /* ty=Tensor[(300), uint8] */, %358)
}

def @func_15839() -> (Tensor[(1, 16, 4), float64],) {
  %359 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %360 = %359.0;
  (%360,)
}

def @func_844(%var_838: Tensor[(14, 6, 13), uint32]) -> Tensor[(14, 6, 13), bool] {
  %361 = cast(%var_838, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %362 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 6, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 6, 13), uint32] */, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%363, %364) /* ty=Tensor[(14, 6, 13), bool] */
}

def @func_827(%var_819: Tensor[(2, 15, 10), uint8], %var_820: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
  %365 = cast(%var_820, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %366 = shape_of(%var_819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_819, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%367, %368) /* ty=Tensor[(2, 15, 10), uint8] */
}

def @func_6158(%var_6136: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) {
  %369 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %370 = cast(%var_6136, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
  %371 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(3, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %374 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
  %375 = acos(%369) /* ty=Tensor[(3, 6, 8), float32] */;
  %376 = divide(%372, %373) /* ty=Tensor[(3, 6, 8), float64] */;
  %377 = %374.2;
  (%375, %376, %377)
}

def @func_14592(%var_14589: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) {
  %378 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %379 = cast(%var_14589, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %380 = reshape(%379, newshape=[14, 78]) /* ty=Tensor[(14, 78), uint32] */;
  %381 = @func_11172(%380) /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) */;
  %382 = %378.0;
  %383 = @func_12152() /* ty=Tensor[(1, 16, 4), float32] */;
  %384 = %381.2;
  (%382, %383, %384, %var_14589)
}

def @func_13596() -> Tensor[(1, 16, 4), float64] {
  %385 = @func_7606() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %385.0
}

def @func_16613(%var_16608: Tensor[(156), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(8, 6, 13), int8], Tensor[(6, 2, 13), float32], Tensor[(156), float32]) {
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), uint32] */, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %387 = reshape(%386, newshape=[2, 56]) /* ty=Tensor[(2, 56), uint32] */;
  %388 = @func_14732(%387) /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) */;
  %389 = @func_15756() /* ty=Tensor[(8, 6, 13), float32] */;
  %390 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 6, 13), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 13), int8] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="int8") /* ty=Tensor[(8, 6, 13), int8] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %394 = cast(%var_16608, dtype="float32") /* ty=Tensor[(156), float32] */;
  %395 = reshape(%394, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %396 = @func_13536(%395) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %397 = %388.1;
  %398 = bitwise_and(%392, %393) /* ty=Tensor[(8, 6, 13), int8] */;
  %399 = %396.0;
  (%397, meta[relay.Constant][21] /* ty=Tensor[(112), uint32] */, %398, %399, %var_16608)
}

def @func_13327() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %400 = @func_9932() /* ty=Tensor[(900), float64] */;
  %401 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %402 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  (%400, %401, %402)
}

def @func_9455() -> Tensor[(?, 16, 4), bool] {
  %403 = @func_7134() /* ty=(Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) */;
  %403.1
}

def @func_4169() -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) {
  %404 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %406 = reshape(%405, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %407 = %404.0;
  %408 = @func_2541(%406) /* ty=Tensor[(8, 6, 13), float32] */;
  %409 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  (%407, %408, meta[relay.Constant][23] /* ty=Tensor[(624), float32] */, %409)
}

def @func_12569() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) {
  %410 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %411 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %412 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %413 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %414 = %410.1;
  %415 = %411.0;
  %416 = %412.3;
  %417 = %413.1;
  %418 = @func_9932() /* ty=Tensor[(900), float64] */;
  (%414, %415, %416, %417, %418)
}

def @func_11616() -> (Tensor[(8, 6, 13), float32],) {
  %419 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %420 = %419.1;
  (%420,)
}

def @func_2701() -> (Tensor[(1, 16, 4), float32],) {
  %421 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %422 = %421.0;
  (%422,)
}

def @func_14196() -> (Tensor[(1, 16, 4), float32],) {
  %423 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  (%423,)
}

def @func_10191() -> Tensor[(?, 16, 4), bool] {
  %424 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
  %424.0
}

def @func_15356() -> Tensor[(70), int32] {
  %425 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %425.2
}

def @func_16700(%var_16695: Tensor[(3, 3, 10), float64]) -> (Tensor[(3, 3, 10), float64],) {
  %426 = cast(%var_16695, dtype="float64") /* ty=Tensor[(3, 3, 10), float64] */;
  %427 = sin(%426) /* ty=Tensor[(3, 3, 10), float64] */;
  (%427,)
}

def @func_7269() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %428 = @func_7146() /* ty=(Tensor[(900), float64],) */;
  %429 = @func_7146() /* ty=(Tensor[(900), float64],) */;
  %430 = %428.0;
  %431 = %429.0;
  (%430, %431)
}

def @func_8289(%var_8278: Tensor[(6, 12, 5), float32], %var_8284: Tensor[(6, 12, 5), bool]) -> (Tensor[(1, 16, 4), float32], Tensor[(6, 12, 5), float64]) {
  %432 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %433 = cast(%var_8278, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %434 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 12, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = less(%435, %436) /* ty=Tensor[(6, 12, 5), bool] */;
  %438 = cast(%var_8284, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %442 = %432.0;
  %443 = floor_mod(%440, %441) /* ty=Tensor[(6, 12, 5), float64] */;
  (%442, %443)
}

def @func_3246() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %444 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %445 = %444.0;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %447 = cast(%445, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %448 = sigmoid(%446) /* ty=Tensor[(1, 16, 4), float64] */;
  %449 = acosh(%447) /* ty=Tensor[(1, 16, 4), float32] */;
  (%448, %449)
}

def @func_11653(%var_11641: Tensor[(9, 5, 16), uint8], %var_11642: Tensor[(9, 5, 16), uint8], %var_11648: Tensor[(9, 5, 16), uint8]) -> (Tensor[(9, 5, 16), bool], Tensor[(9, 5, 16), bool]) {
  %450 = cast(%var_11642, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %451 = shape_of(%var_11641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_11641, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = cast(%var_11648, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %455 = shape_of(%var_11641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_11641, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = not_equal(%452, %453) /* ty=Tensor[(9, 5, 16), bool] */;
  %459 = logical_or(%456, %457) /* ty=Tensor[(9, 5, 16), bool] */;
  (%458, %459)
}

def @func_2819(%var_2762: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) {
  %460 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
  %462 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
  %463 = cast(%var_2762, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %464 = cast(meta[relay.Constant][26] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %465 = reshape(%461, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
  %466 = reshape(%462, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
  %467 = reshape(%463, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %468 = reshape(%464, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %469 = @func_2144(%465, %466, %467, %468) /* ty=(Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) */;
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
  %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
  %472 = cast(%var_2762, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %473 = cast(meta[relay.Constant][26] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %474 = reshape(%470, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
  %475 = reshape(%471, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
  %476 = reshape(%472, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %477 = reshape(%473, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %478 = @func_2144(%474, %475, %476, %477) /* ty=(Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) */;
  %479 = %478.4;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
  %481 = %460.0;
  %482 = %469.7;
  %483 = log10(%480) /* ty=Tensor[(7, 13, 11), float64] */;
  (%481, %482, meta[relay.Constant][25] /* ty=Tensor[(56), uint16] */, %var_2762, meta[relay.Constant][26] /* ty=Tensor[(300), uint8] */, %483)
}

def @func_7170() -> Tensor[(1, 16, 4), float64] {
  %484 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %484.0
}

def @func_7314() -> (Tensor[(12, 5, 15), float64],) {
  %485 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %486 = %485.1;
  (%486,)
}

def @func_8411() -> (Tensor[(?, 16, 4), bool],) {
  %487 = @func_6467() /* ty=Tensor[(?, 16, 4), bool] */;
  (%487,)
}

def @func_4966() -> (Tensor[(1, 16, 4), float32],) {
  %488 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %489 = %488.0;
  (%489,)
}

def @func_5458(%var_5444: uint64, %var_5445: Tensor[(7, 6, 5), uint64]) -> (Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) {
  %490 = cast(%var_5444, dtype="uint64") /* ty=uint64 */;
  %491 = cast(%var_5445, dtype="uint64") /* ty=Tensor[(7, 6, 5), uint64] */;
  %492 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 330), float32] */, dtype="float32") /* ty=Tensor[(5, 330), float32] */;
  %493 = reshape(%492, newshape=[11, 10, 15]) /* ty=Tensor[(11, 10, 15), float32] */;
  %494 = left_shift(%490, %491) /* ty=Tensor[(7, 6, 5), uint64] */;
  %495 = @func_4836(%493) /* ty=Tensor[(11, 10, 15), float32] */;
  (%494, %495, meta[relay.Constant][27] /* ty=Tensor[(5, 330), float32] */)
}

def @func_9182(%var_9161: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(1, 16, 4), float32]) {
  %496 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %497 = shape_of(%var_9161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_9161, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %500 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %501 = mod(%498, %499) /* ty=Tensor[(16, 15, 14), float64] */;
  %502 = %500.0;
  (%501, %502)
}

def @func_4836(%var_4832: Tensor[(11, 10, 15), float32]) -> Tensor[(11, 10, 15), float32] {
  %503 = cast(%var_4832, dtype="float32") /* ty=Tensor[(11, 10, 15), float32] */;
  rsqrt(%503) /* ty=Tensor[(11, 10, 15), float32] */
}

def @func_12485() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
  %504 = @func_4612() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %505 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %506 = %504.1;
  %507 = %505.0;
  (%506, %507)
}

def @func_2884() -> (Tensor[(1, 16, 4), float32],) {
  %508 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %509 = %508.1;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %511 = sinh(%510) /* ty=Tensor[(1, 16, 4), float32] */;
  (%511,)
}

def @func_10125() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  %512 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %513 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  %514 = %512.2;
  (%513, %514)
}

def @func_12812() -> (Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) {
  %515 = @func_12569() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) */;
  %516 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  %517 = log2(%516) /* ty=Tensor[(15, 1, 6), float64] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
  %519 = %515.3;
  %520 = sinh(%518) /* ty=Tensor[(15, 1, 6), float32] */;
  %521 = @func_11500() /* ty=Tensor[(1, 16, 4), float32] */;
  (%519, %520, %521)
}

def @func_12833() -> (Tensor[(900), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
  %522 = @func_4347() /* ty=(Tensor[(900), float64],) */;
  %523 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %524 = @func_10708() /* ty=Tensor[(900), float64] */;
  %525 = %522.0;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_2864() -> (Tensor[(1, 16, 4), float32],) {
  %527 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %528 = %527.1;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %530 = exp(%529) /* ty=Tensor[(1, 16, 4), float32] */;
  (%530,)
}

def @func_2904() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %531 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %532 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %533 = %531.0;
  %534 = %532.1;
  (%533, %534)
}

def @func_12152() -> Tensor[(1, 16, 4), float32] {
  %535 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %535.0
}

def @func_13084() -> (Tensor[(900), float64],) {
  %536 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %537 = %536.0;
  (%537,)
}

def @func_10953() -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  %538 = @func_8802() /* ty=Tensor[(1, 16, 4), float64] */;
  %539 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  (%538, %539)
}

def @func_15304() -> Tensor[(1, 16, 4), float32] {
  %540 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %540.1
}

def @func_11594() -> (Tensor[(1, 16, 4), float64],) {
  %541 = @func_8224() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %542 = %541.0;
  (%542,)
}

def @func_10322(%var_10256: Tensor[(4, 16, 4), float32], %var_10317: Tensor[(8, 78), float32]) -> (Tensor[(1092), uint32], Tensor[(546, 2), uint32], Tensor[(4, 16, 4), float64], Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(8, 78), float32]) {
  %543 = cast(meta[relay.Constant][30] /* ty=Tensor[(546, 2), uint32] */, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
  %544 = reshape(%543, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %545 = @func_9688(%544) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) */;
  %546 = cast(%var_10256, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %547 = cos(%546) /* ty=Tensor[(4, 16, 4), float64] */;
  %548 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  %549 = cast(%548, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %550 = cast(%var_10256, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %551 = less_equal(%549, %550) /* ty=Tensor[(4, 16, 4), bool] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %553 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%547, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %556 = @func_7212() /* ty=(Tensor[(900), float64],) */;
  %557 = cast(%var_10317, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
  %558 = reshape(%557, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %559 = @func_2649(%558) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %560 = %545.2;
  %561 = minimum(%554, %555) /* ty=Tensor[(4, 16, 4), float64] */;
  %562 = %556.0;
  %563 = %559.4;
  (%560, meta[relay.Constant][30] /* ty=Tensor[(546, 2), uint32] */, %561, %562, %563, %var_10317)
}

def @func_13258(%var_13255: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
  %564 = cast(%var_13255, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %565 = reshape(%564, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %566 = @func_8965(%565) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */;
  %567 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %568 = %566.4;
  (%567, %568, %var_13255)
}

def @func_15383() -> Tensor[(1, 16, 4), float32] {
  @func_12152() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_15043(%var_15039: Tensor[(3, 2, 5), float64]) -> Tensor[(3, 2, 5), float64] {
  %569 = cast(%var_15039, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
  cos(%569) /* ty=Tensor[(3, 2, 5), float64] */
}

def @func_3260() -> (Tensor[(1, 16, 4), float32],) {
  %570 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %571 = %570.0;
  (%571,)
}

def @func_4943() -> (Tensor[(12, 5, 15), float64],) {
  %572 = @func_4452() /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %573 = %572.1;
  (%573,)
}

def @func_8802() -> Tensor[(1, 16, 4), float64] {
  %574 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %576 = log10(%575) /* ty=Tensor[(1, 16, 4), float32] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  cos(%577) /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_4046() -> (Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) {
  %578 = cast(meta[relay.Constant][31] /* ty=Tensor[(1092, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1092, 1), uint32] */;
  %579 = reshape(%578, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %580 = @func_1614(%579) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %581 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %582 = cast(meta[relay.Constant][32] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %583 = reshape(%582, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %584 = @func_3917(%583) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %585 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
  %586 = sigmoid(%585) /* ty=Tensor[(4, 11, 11), float32] */;
  %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float64") /* ty=Tensor[(4, 11, 11), float64] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="float64") /* ty=Tensor[(4, 11, 11), float64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %591 = %580.3;
  %592 = %581.0;
  %593 = %584.0;
  %594 = power(%589, %590) /* ty=Tensor[(4, 11, 11), float64] */;
  (%591, meta[relay.Constant][31] /* ty=Tensor[(1092, 1), uint32] */, %592, %593, meta[relay.Constant][32] /* ty=Tensor[(300), uint8] */, %594)
}

def @func_3475() -> Tensor[(1, 16, 4), float64] {
  %595 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %595.0
}

def @func_4452() -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %596 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %597 = %596.0;
  %598 = @func_3684() /* ty=Tensor[(12, 5, 15), float64] */;
  (%597, %598)
}

def @func_4380() -> Tensor[(8, 6, 13), float32] {
  %599 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %599.1
}

def @func_16444() -> Tensor[(1, 16, 4), float32] {
  @func_15304() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_16294() -> (Tensor[(?, 16, 4), bool], Tensor[(300), uint8]) {
  %600 = @func_10879() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */;
  %601 = @func_13838() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %602 = %600.0;
  %603 = %601.1;
  (%602, %603)
}

def @func_16656(%var_16638: Tensor[(4, 12, 12), float32]) -> Tensor[(4, 12, 12), float32] {
  %604 = cast(%var_16638, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  log2(%604) /* ty=Tensor[(4, 12, 12), float32] */
}

def @func_3437(%var_3411: Tensor[(624), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) {
  %605 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %606 = cast(%var_3411, dtype="float32") /* ty=Tensor[(624), float32] */;
  %607 = reshape(%606, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %608 = @func_2649(%607) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %609 = %605.0;
  %610 = %608.0;
  (%609, %610, %var_3411)
}

def @func_12864() -> Tensor[(1, 16, 4), float32] {
  %611 = @func_12365() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %611.0
}

def @func_10220() -> Tensor[(8, 6, 13), float32] {
  %612 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %612.1
}

def @func_5574() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) {
  %613 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %614 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %615 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %616 = %615.0;
  %617 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 13), float32] */, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %622 = %613.0;
  %623 = %614.0;
  %624 = greater_equal(%619, %620) /* ty=Tensor[(8, 6, 13), bool] */;
  %625 = %621.3;
  (%622, %623, %624, %625)
}

def @func_16238() -> (Tensor[(1, 16, 4), float64], Tensor[(300), uint8], Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %626 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %627 = @func_14694() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %628 = %626.1;
  %629 = cast(%628, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %630 = reshape(%629, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %631 = @func_3336(%630) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) */;
  %632 = @func_8773() /* ty=Tensor[(1, 16, 4), float64] */;
  %633 = @func_9932() /* ty=Tensor[(900), float64] */;
  %634 = %627.0;
  %635 = %631.4;
  (%632, %628, %633, %634, %635)
}

def @func_14248() -> (Tensor[(1, 16, 4), float64],) {
  %636 = @func_7170() /* ty=Tensor[(1, 16, 4), float64] */;
  (%636,)
}

def @func_14657() -> Tensor[(?, 16, 4), bool] {
  @func_10191() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_16751() -> Tensor[(1, 16, 4), float32] {
  %637 = @func_16559() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %637.0
}

def @func_16726() -> (Tensor[(1, 16, 4), float32],) {
  %638 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %639 = %638.0;
  (%639,)
}

def @func_16882() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  %640 = @func_13514() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %641 = @func_14833() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %642 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %645 = sqrt(%644) /* ty=Tensor[(1, 16, 4), float64] */;
  %646 = cast(%645, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %647 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%643, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %650 = bitwise_and(%648, %649) /* ty=Tensor[(?, 16, 4), uint64] */;
  %651 = cast(%645, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="bool") /* ty=Tensor[(?, 16, 4), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = %640.0;
  %656 = %641.0;
  %657 = greater(%653, %654) /* ty=Tensor[(?, 16, 4), bool] */;
  (%655, %656, %657)
}

def @func_2252(%var_2250: Tensor[(1092, 1), uint32]) -> (Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) {
  %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
  %659 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %662 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(1092, 1), uint32] */;
  %663 = reshape(%662, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %664 = @func_1614(%663) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %665 = mod(%660, %661) /* ty=Tensor[(5, 14, 12), float32] */;
  %666 = %664.1;
  (%665, %666, %var_2250)
}

def @func_12590() -> Tensor[(900), float64] {
  %667 = @func_11927() /* ty=(Tensor[(900), float64],) */;
  %667.0
}

def @func_9932() -> Tensor[(900), float64] {
  %668 = @func_7146() /* ty=(Tensor[(900), float64],) */;
  %668.0
}

def @func_2616() -> Tensor[(900), float64] {
  @func_2592() /* ty=Tensor[(900), float64] */
}

def @func_7823(%var_7786: Tensor[(10, 16, 4), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) {
  %669 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %670 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  %671 = cast(%670, dtype="uint32") /* ty=Tensor[(1, 16, 4), uint32] */;
  %672 = cast(%var_7786, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
  %673 = cast(%var_7786, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %674 = %669.0;
  %675 = left_shift(%671, %672) /* ty=Tensor[(10, 16, 4), uint32] */;
  %676 = acos(%673) /* ty=Tensor[(10, 16, 4), float32] */;
  (%674, %675, %676)
}

def @func_11562() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) {
  %677 = @func_9555() /* ty=(Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) */;
  %678 = %677.5;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %680 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %681 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  %682 = atan(%679) /* ty=Tensor[(1, 16, 4), float64] */;
  %683 = %680.3;
  %684 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %685 = @func_5227() /* ty=Tensor[(900), float64] */;
  %686 = @func_5227() /* ty=Tensor[(900), float64] */;
  (%681, %682, %683, %684, %685, %686)
}

def @func_14094() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %687 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %688 = %687.0;
  %689 = @func_13596() /* ty=Tensor[(1, 16, 4), float64] */;
  (%688, %689)
}

def @func_5219() -> Tensor[(1, 16, 4), float32] {
  %690 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %690.0
}

def @func_6060() -> Tensor[(1, 16, 4), float32] {
  %691 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %691.0
}

def @func_798(%var_768: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64],) {
  %692 = cast(%var_768, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %693 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(12, 5, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %696 = mod(%694, %695) /* ty=Tensor[(12, 5, 15), float64] */;
  (%696,)
}

def @func_7457() -> (Tensor[(4, 11, 11), float64],) {
  %697 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %698 = %697.1;
  (%698,)
}

def @func_2144(%var_2056: Tensor[(4, 7, 2), uint16], %var_2057: Tensor[(4, 7, 2), uint16], %var_2078: Tensor[(1092), uint32], %var_2095: Tensor[(300), uint8]) -> (Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) {
  %699 = cast(%var_2057, dtype="bool") /* ty=Tensor[(4, 7, 2), bool] */;
  %700 = shape_of(%var_2056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_2056, dtype="bool") /* ty=Tensor[(4, 7, 2), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = cast(meta[relay.Constant][38] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %704 = cast(%var_2078, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %705 = reshape(%703, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %706 = reshape(%704, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %707 = @func_1081(%705, %706) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %708 = %707.4;
  %709 = cast(%708, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %710 = reshape(%709, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %711 = @func_1614(%710) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %712 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %713 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %714 = reshape(%712, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %715 = reshape(%713, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %716 = cast(%708, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %717 = reshape(%716, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %718 = @func_1614(%717) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %719 = less(%701, %702) /* ty=Tensor[(4, 7, 2), bool] */;
  %720 = %711.0;
  %721 = @func_827(%714, %715) /* ty=Tensor[(2, 15, 10), uint8] */;
  %722 = %718.2;
  (%719, %708, meta[relay.Constant][38] /* ty=Tensor[(405), float32] */, %var_2078, %720, %721, %var_2095, %722)
}

def @func_10011(%var_9974: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(112), uint32]) {
  %723 = cast(%var_9974, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %724 = reshape(%723, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %725 = @func_2985(%724) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %726 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %727 = %725.2;
  (%726, %727, %var_9974)
}

def @func_11410(%var_11376: Tensor[(2, 660), bool]) -> (Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) {
  %728 = @func_7146() /* ty=(Tensor[(900), float64],) */;
  %729 = cast(%var_11376, dtype="bool") /* ty=Tensor[(2, 660), bool] */;
  %730 = cast(%var_11376, dtype="bool") /* ty=Tensor[(2, 660), bool] */;
  %731 = reshape(%729, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), bool] */;
  %732 = reshape(%730, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), bool] */;
  %733 = cast(%var_11376, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
  %734 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
  %735 = %734.3;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %737 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
  %738 = floor_mod(%736, %737) /* ty=Tensor[(4, 16, 4), float32] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %740 = %728.0;
  %741 = @func_7902(%731, %732) /* ty=Tensor[(11, 10, 12), bool] */;
  %742 = rsqrt(%733) /* ty=Tensor[(2, 660), float64] */;
  %743 = sqrt(%739) /* ty=Tensor[(4, 16, 4), float64] */;
  (%740, %741, %742, %743)
}

def @func_12942() -> (Tensor[(8, 6, 13), float32],) {
  %744 = @func_12812() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) */;
  %745 = %744.0;
  (%745,)
}

def @func_4241() -> (Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) {
  %746 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %747 = cast(meta[relay.Constant][40] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
  %748 = reshape(%747, newshape=[5, 2, 7]) /* ty=Tensor[(5, 2, 7), int32] */;
  %749 = %746.1;
  %750 = @func_3539(%748) /* ty=Tensor[(5, 2, 7), int32] */;
  (%749, %750, meta[relay.Constant][40] /* ty=Tensor[(70), int32] */)
}

def @func_3917(%var_3912: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) {
  %751 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %752 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %753 = cast(%var_3912, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %754 = cast(%var_3912, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %755 = reshape(%753, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %756 = reshape(%754, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %757 = %751.0;
  %758 = %752.0;
  %759 = @func_827(%755, %756) /* ty=Tensor[(2, 15, 10), uint8] */;
  (%757, %758, %759, %var_3912)
}

def @func_13916() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  %760 = @func_12302() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %761 = @func_10550() /* ty=(Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) */;
  %762 = %760.0;
  %763 = %761.0;
  (%762, %763)
}

def @func_10550() -> (Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) {
  %764 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %765 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %766 = %765.2;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %768 = asinh(%767) /* ty=Tensor[(8, 6, 13), float64] */;
  %769 = cast(%768, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %770 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %771 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %772 = cast(meta[relay.Constant][41] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %773 = reshape(%772, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
  %774 = @func_6158(%773) /* ty=(Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) */;
  %775 = %764.2;
  %776 = log(%769) /* ty=Tensor[(8, 6, 13), float64] */;
  %777 = %770.1;
  %778 = %771.1;
  %779 = %774.2;
  (%775, %776, %777, %778, %779, meta[relay.Constant][41] /* ty=Tensor[(144), float32] */)
}

def @func_14035(%var_14016: Tensor[(13, 12, 10), int8]) -> (Tensor[(13, 12, 10), float32],) {
  %780 = cast(%var_14016, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
  %781 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(13, 12, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %784 = right_shift(%782, %783) /* ty=Tensor[(13, 12, 10), int8] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %786 = rsqrt(%785) /* ty=Tensor[(13, 12, 10), float32] */;
  (%786,)
}

def @func_3878(%var_3833: Tensor[(1092), uint32], %var_3865: Tensor[(405), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) {
  %787 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %788 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
  %789 = asinh(%788) /* ty=Tensor[(12, 14, 12), float32] */;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %791 = cast(%var_3833, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %792 = reshape(%791, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %793 = @func_2819(%792) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
  %794 = cast(%var_3865, dtype="float32") /* ty=Tensor[(405), float32] */;
  %795 = cast(%var_3833, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %796 = reshape(%794, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %797 = reshape(%795, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %798 = @func_1081(%796, %797) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %799 = asin(%787) /* ty=Tensor[(12, 14, 12), float64] */;
  %800 = tan(%790) /* ty=Tensor[(12, 14, 12), float64] */;
  %801 = %793.2;
  %802 = %798.1;
  (%799, %800, %801, %var_3833, %802, %var_3865)
}

def @func_2730() -> Tensor[(1, 16, 4), float32] {
  @func_2661() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_14401() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(624), float32], Tensor[(210), uint64], Tensor[(210), uint64], Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float64]) {
  %803 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %804 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %805 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %806 = cast(meta[relay.Constant][44] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %807 = reshape(%806, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %808 = @func_6271(%807) /* ty=(Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) */;
  %809 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %810 = @func_10953() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) */;
  %811 = %803.1;
  %812 = %804.0;
  %813 = %805.2;
  %814 = %808.2;
  %815 = %809.0;
  %816 = %810.0;
  (%811, %812, %813, %814, meta[relay.Constant][44] /* ty=Tensor[(210), uint64] */, %815, %816)
}

def @func_13231() -> Tensor[(1, 16, 4), float32] {
  %817 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
  %817.0
}

def @func_14498(%var_14469: float32, %var_14470: Tensor[(10, 12, 6), float32], %var_14496: Tensor[(1650), float64]) -> (Tensor[(10, 12, 6), bool], Tensor[(1, 16, 4), float32], Tensor[(1650), float64], Tensor[(1650), float64]) {
  %818 = cast(%var_14469, dtype="bool") /* ty=bool */;
  %819 = cast(%var_14470, dtype="bool") /* ty=Tensor[(10, 12, 6), bool] */;
  %820 = @func_13970() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %821 = cast(%var_14496, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %822 = reshape(%821, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %823 = @func_8630(%822) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
  %824 = greater(%818, %819) /* ty=Tensor[(10, 12, 6), bool] */;
  %825 = %820.0;
  %826 = %823.2;
  (%824, %825, %826, %var_14496)
}

def @func_10910() -> Tensor[(12, 5, 15), float64] {
  %827 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %827.0
}

def @func_15023() -> (Tensor[(1, 16, 4), float64],) {
  %828 = @func_11594() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %829 = %828.0;
  (%829,)
}

def @func_4810() -> (Tensor[(1, 16, 4), float32],) {
  %830 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %831 = %830.1;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %833 = acos(%832) /* ty=Tensor[(1, 16, 4), float32] */;
  (%833,)
}

def @func_10686(%var_10675: uint64, %var_10676: Tensor[(1, 210), uint64]) -> (Tensor[(11, 10, 15), float32], Tensor[(1, 210), uint64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(1, 16, 4), uint8]) {
  %834 = cast(%var_10675, dtype="uint64") /* ty=uint64 */;
  %835 = cast(%var_10676, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %836 = reshape(%834, newshape=[]) /* ty=uint64 */;
  %837 = reshape(%835, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), uint64] */;
  %838 = @func_5458(%836, %837) /* ty=(Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) */;
  %839 = cast(meta[relay.Constant][45] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %840 = reshape(%839, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %841 = @func_2819(%840) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
  %842 = @func_7170() /* ty=Tensor[(1, 16, 4), float64] */;
  %843 = cast(%842, dtype="uint8") /* ty=Tensor[(1, 16, 4), uint8] */;
  %844 = cast(%var_10675, dtype="uint8") /* ty=uint8 */;
  %845 = %838.1;
  %846 = %841.2;
  %847 = add(%843, %844) /* ty=Tensor[(1, 16, 4), uint8] */;
  (%845, %var_10676, %846, meta[relay.Constant][45] /* ty=Tensor[(1092), uint32] */, %847)
}

def @func_6623() -> (Tensor[(1, 16, 4), float32],) {
  %848 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
  (%848,)
}

def @func_8516(%var_8498: Tensor[(100), float64]) -> (Tensor[(8, 6, 13), float32], Tensor[(10, 2, 5), float64], Tensor[(100), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 16, 4), float32]) {
  %849 = @func_6786() /* ty=(Tensor[(8, 6, 13), float32],) */;
  %850 = cast(%var_8498, dtype="float64") /* ty=Tensor[(100), float64] */;
  %851 = reshape(%850, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), float64] */;
  %852 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %853 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %854 = %849.0;
  %855 = @func_3053(%851) /* ty=Tensor[(10, 2, 5), float64] */;
  %856 = %852.1;
  %857 = %853.0;
  (%854, %855, %var_8498, %856, %857)
}

def @func_2541(%var_2525: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  %858 = cast(%var_2525, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  erf(%858) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_5431() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %859 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %860 = %859.0;
  %861 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  (%860, %861)
}

def @func_9555() -> (Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) {
  %862 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %863 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %864 = %863.1;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %866 = exp(%865) /* ty=Tensor[(8, 6, 13), float32] */;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %868 = @func_8611() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %869 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %870 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %871 = cast(%866, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %872 = %862.1;
  %873 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %874 = acos(%867) /* ty=Tensor[(8, 6, 13), float32] */;
  %875 = @func_3684() /* ty=Tensor[(12, 5, 15), float64] */;
  %876 = %868.1;
  %877 = %869.1;
  %878 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  %879 = %870.1;
  %880 = log10(%871) /* ty=Tensor[(8, 6, 13), float64] */;
  (%872, %873, %874, %875, %876, %877, %878, %879, %880)
}

def @func_3539(%var_3531: Tensor[(5, 2, 7), int32]) -> Tensor[(5, 2, 7), int32] {
  %881 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %882 = cast(%var_3531, dtype="int32") /* ty=Tensor[(5, 2, 7), int32] */;
  bitwise_or(%881, %882) /* ty=Tensor[(5, 2, 7), int32] */
}

def @func_5321() -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %883 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %884 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %885 = %883.0;
  (%884, %885)
}

def @func_10074() -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
  %886 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %887 = @func_9705() /* ty=Tensor[(12, 5, 15), float64] */;
  %888 = %886.0;
  (%887, %888)
}

def @func_3053(%var_3049: Tensor[(10, 2, 5), float64]) -> Tensor[(10, 2, 5), float64] {
  %889 = cast(%var_3049, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %890 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%891, %892) /* ty=Tensor[(10, 2, 5), float64] */
}

def @func_7520() -> (Tensor[(8, 6, 13), float64], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64]) {
  %893 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %894 = %893.0;
  %895 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 6, 13), float32] */, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %899 = subtract(%897, %898) /* ty=Tensor[(8, 6, 13), float64] */;
  %900 = cast(%899, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %901 = reshape(%900, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %902 = @func_2649(%901) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %903 = %902.5;
  %904 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  (%899, %903, %904)
}

def @func_11725(%var_11695: Tensor[(7, 13, 3), uint32], %var_11696: Tensor[(7, 13, 3), uint32]) -> (Tensor[(7, 13, 3), uint32],) {
  %905 = cast(%var_11696, dtype="uint32") /* ty=Tensor[(7, 13, 3), uint32] */;
  %906 = shape_of(%var_11695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%var_11695, dtype="uint32") /* ty=Tensor[(7, 13, 3), uint32] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %909 = logical_xor(%907, %908) /* ty=Tensor[(7, 13, 3), uint32] */;
  (%909,)
}

def @func_16792(%var_16755: Tensor[(6, 16, 14), float64], %var_16774: Tensor[(6, 16, 14), float64]) -> Tensor[(6, 16, 14), bool] {
  %910 = cast(%var_16755, dtype="float64") /* ty=Tensor[(6, 16, 14), float64] */;
  %911 = sin(%910) /* ty=Tensor[(6, 16, 14), float64] */;
  %912 = cast(%var_16774, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %913 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%911, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%914, %915) /* ty=Tensor[(6, 16, 14), bool] */
}

def @func_6970(%var_6941: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %916 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %917 = cast(%var_6941, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %918 = reshape(%917, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
  %919 = %916.0;
  %920 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  %921 = @func_844(%918) /* ty=Tensor[(14, 6, 13), bool] */;
  (%919, %920, %921, %var_6941)
}

def @func_2835() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %922 = @func_2592() /* ty=Tensor[(900), float64] */;
  %923 = @func_2616() /* ty=Tensor[(900), float64] */;
  (%922, %923)
}

def @func_4624() -> Tensor[(8, 6, 13), float64] {
  %924 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  atan(%925) /* ty=Tensor[(8, 6, 13), float64] */
}

def @func_9373(%var_9321: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) {
  %926 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %927 = @func_8329() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %928 = cast(%var_9321, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %929 = reshape(%928, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %930 = @func_6970(%929) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %931 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
  %932 = %926.0;
  %933 = %927.0;
  %934 = %930.2;
  %935 = %931.0;
  %936 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  (%932, %933, %934, %var_9321, %935, %936)
}

def @func_14886() -> Tensor[(300), uint8] {
  %937 = @func_6558() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) */;
  %937.2
}

def @func_11172(%var_11161: Tensor[(14, 78), uint32]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) {
  %938 = @func_7269() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %939 = cast(%var_11161, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
  %940 = reshape(%939, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %941 = @func_8965(%940) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */;
  %942 = %938.1;
  %943 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  %944 = %941.0;
  (%942, %943, %944, %var_11161)
}

def @func_12008() -> (Tensor[(1, 16, 4), float32],) {
  %945 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %946 = %945.0;
  (%946,)
}

def @func_11026() -> Tensor[(1, 16, 4), float32] {
  %947 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %947.0
}

def @func_11783() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) {
  %948 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %949 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %950 = %948.0;
  %951 = %949.0;
  (%950, %951)
}

def @func_5650() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
  %952 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %953 = @func_5170() /* ty=(Tensor[(8, 6, 13), float32],) */;
  %954 = %952.0;
  %955 = @func_2592() /* ty=Tensor[(900), float64] */;
  %956 = %953.0;
  (%954, %955, %956)
}

def @func_9075(%var_9045: Tensor[(300), uint8]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %957 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %958 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %959 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %960 = cast(%var_9045, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %961 = reshape(%960, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %962 = @func_3917(%961) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %963 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %964 = @func_6623() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %965 = @func_8611() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %966 = %957.0;
  %967 = @func_6060() /* ty=Tensor[(1, 16, 4), float32] */;
  %968 = %958.0;
  %969 = %959.1;
  %970 = %962.0;
  %971 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  %972 = %963.1;
  %973 = %964.0;
  %974 = %965.3;
  (%966, %967, %968, %969, %970, %var_9045, %971, %972, %973, %974)
}

def @func_5833() -> (Tensor[(900), float64],) {
  %975 = @func_5227() /* ty=Tensor[(900), float64] */;
  (%975,)
}

def @func_16019() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %976 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %977 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %978 = %976.0;
  %979 = %977.0;
  (%978, %979)
}

def @func_13838() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  %980 = @func_11890() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) */;
  %981 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %982 = %980.2;
  %983 = %981.2;
  (%982, %983)
}

def @func_13738() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %984 = @func_5227() /* ty=Tensor[(900), float64] */;
  %985 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
  (%984, %985)
}

def @func_2518() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %986 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %987 = cast(meta[relay.Constant][48] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %988 = reshape(%987, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %989 = @func_798(%988) /* ty=(Tensor[(12, 5, 15), float64],) */;
  %990 = cast(meta[relay.Constant][48] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %991 = reshape(%990, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %992 = @func_798(%991) /* ty=(Tensor[(12, 5, 15), float64],) */;
  %993 = %986.1;
  %994 = %989.0;
  %995 = %992.0;
  (%993, %994, meta[relay.Constant][48] /* ty=Tensor[(900), float64] */, %995)
}

def @func_10995() -> (Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %996 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %997 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  %998 = @func_9932() /* ty=Tensor[(900), float64] */;
  %999 = %996.1;
  (%997, %998, %999)
}

def @func_16037() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) {
  %1000 = @func_15839() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1001 = cast(meta[relay.Constant][49] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1002 = reshape(%1001, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1003 = @func_9373(%1002) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) */;
  %1004 = %1000.0;
  %1005 = @func_8802() /* ty=Tensor[(1, 16, 4), float64] */;
  %1006 = %1003.5;
  (%1004, %1005, %1006, meta[relay.Constant][49] /* ty=Tensor[(1092), uint32] */)
}

def @func_3962(%var_3953: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %1007 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1008 = cast(%var_3953, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1009 = reshape(%1008, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
  %1010 = %1007.1;
  %1011 = @func_844(%1009) /* ty=Tensor[(14, 6, 13), bool] */;
  (%1010, %1011, %var_3953)
}

def @func_15472() -> Tensor[(1, 16, 4), float32] {
  %1012 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %1012.0
}

def @func_14957() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %1013 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1014 = %1013.0;
  %1015 = @func_13231() /* ty=Tensor[(1, 16, 4), float32] */;
  (%1014, %1015)
}

def @func_12750() -> Tensor[(12, 5, 15), float64] {
  @func_3684() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_16630() -> (Tensor[(1, 16, 4), float32],) {
  %1016 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
  %1017 = %1016.1;
  (%1017,)
}

def @func_12627() -> Tensor[(8, 6, 13), float32] {
  %1018 = @func_12569() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) */;
  %1018.3
}

def @main(%var_17035: Tensor[(12, 7, 3), int8], %var_17036: Tensor[(12, 7, 3), int8]) -> (Tensor[(12, 7, 3), int8],) {
  %1019 = cast(%var_17036, dtype="int8") /* ty=Tensor[(12, 7, 3), int8] */;
  %1020 = shape_of(%var_17035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1021 = cast(%var_17035, dtype="int8") /* ty=Tensor[(12, 7, 3), int8] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1023 = bitwise_and(%1021, %1022) /* ty=Tensor[(12, 7, 3), int8] */;
  (%1023,)
}

def @func_6467() -> Tensor[(?, 16, 4), bool] {
  %1024 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1025 = %1024.0;
  %1026 = cast(%1025, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %1027 = erf(%1026) /* ty=Tensor[(1, 16, 4), float64] */;
  %1028 = cast(%1025, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%1027, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%1030, %1031) /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_6698(%var_6646: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %1032 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %1033 = cast(%var_6646, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1034 = reshape(%1033, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1035 = @func_2297(%1034) /* ty=(Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %1036 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %1037 = %1032.0;
  %1038 = %1035.1;
  %1039 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %1040 = @func_2592() /* ty=Tensor[(900), float64] */;
  %1041 = %1036.0;
  (%1037, %1038, %var_6646, %1039, %1040, %1041)
}

def @func_13612() -> Tensor[(?, 16, 4), bool] {
  %1042 = @func_10995() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %1042.0
}

def @func_6271(%var_6219: Tensor[(210), uint64]) -> (Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) {
  %1043 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %1044 = cast(meta[relay.Constant][50] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1045 = cast(%var_6219, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %1046 = reshape(%1044, newshape=[]) /* ty=uint64 */;
  %1047 = reshape(%1045, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), uint64] */;
  %1048 = @func_5458(%1046, %1047) /* ty=(Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) */;
  %1049 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1050 = %1049.1;
  %1051 = cast(%1050, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %1052 = cast(meta[relay.Constant][50] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %1053 = cast(meta[relay.Constant][51] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1054 = reshape(%1053, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %1055 = @func_3917(%1054) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %1056 = %1043.0;
  %1057 = cast(%1056, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1058 = reshape(%1057, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %1059 = @func_798(%1058) /* ty=(Tensor[(12, 5, 15), float64],) */;
  %1060 = %1048.2;
  %1061 = less(%1051, %1052) /* ty=Tensor[(1, 16, 4), bool] */;
  %1062 = %1055.3;
  %1063 = %1059.0;
  (%1056, %1060, %var_6219, %1061, %1062, meta[relay.Constant][51] /* ty=Tensor[(300), uint8] */, %1063)
}

def @func_10634() -> Tensor[(8, 6, 13), float32] {
  %1064 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %1064.0
}

def @func_11826() -> Tensor[(?, 16, 4), bool] {
  %1065 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
  %1065.0
}

def @func_9901() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), int16], Tensor[(900), float64]) {
  %1066 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  %1067 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1068 = %1067.0;
  %1069 = cast(%1068, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
  %1070 = shape_of(%1066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1071 = cast(%1066, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
  %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1073 = @func_4347() /* ty=(Tensor[(900), float64],) */;
  %1074 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %1075 = minimum(%1071, %1072) /* ty=Tensor[(?, 16, 4), int16] */;
  %1076 = %1073.0;
  (%1074, %1075, %1076)
}

def @func_11500() -> Tensor[(1, 16, 4), float32] {
  @func_6886() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_13504() -> (Tensor[(1, 16, 4), float32],) {
  %1077 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1078 = %1077.1;
  (%1078,)
}

def @func_5170() -> (Tensor[(8, 6, 13), float32],) {
  %1079 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  (%1079,)
}

def @func_8773() -> Tensor[(1, 16, 4), float64] {
  %1080 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1080.0
}

def @func_14694() -> (Tensor[(1, 16, 4), float64],) {
  %1081 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1082 = %1081.0;
  (%1082,)
}

def @func_15977() -> (Tensor[(1, 16, 4), float64],) {
  %1083 = @func_15874() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) */;
  %1084 = %1083.0;
  (%1084,)
}

def @func_13970() -> (Tensor[(1, 16, 4), float32],) {
  %1085 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %1086 = %1085.1;
  (%1086,)
}

def @func_5506() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %1087 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %1088 = %1087.1;
  %1089 = @func_5227() /* ty=Tensor[(900), float64] */;
  (%1088, %1089)
}

def @func_2985(%var_2981: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  %1090 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1091 = cast(%var_2981, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %1092 = reshape(%1091, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), uint32] */;
  %1093 = @func_2341(%1092) /* ty=(Tensor[(7, 2, 8), int32],) */;
  %1094 = %1090.0;
  %1095 = %1093.0;
  (%1094, %1095, %var_2981)
}

def @func_6786() -> (Tensor[(8, 6, 13), float32],) {
  %1096 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %1097 = %1096.2;
  (%1097,)
}

def @func_3467() -> Tensor[(1, 16, 4), float64] {
  %1098 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %1098.0
}

def @func_3008() -> Tensor[(1, 16, 4), float32] {
  %1099 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1099.0
}

def @func_8722(%var_8640: Tensor[(12, 8, 4), float32]) -> (Tensor[(12, 8, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(640), float64], Tensor[(1650), float64], Tensor[(1650), float64]) {
  %1100 = cast(%var_8640, dtype="float32") /* ty=Tensor[(12, 8, 4), float32] */;
  %1101 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %1102 = reshape(%1101, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
  %1103 = @func_7823(%1102) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) */;
  %1104 = cast(meta[relay.Constant][53] /* ty=Tensor[(1650), float64] */, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %1105 = reshape(%1104, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %1106 = @func_8630(%1105) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
  %1107 = sigmoid(%1100) /* ty=Tensor[(12, 8, 4), float32] */;
  %1108 = %1103.0;
  %1109 = %1106.2;
  (%1107, %1108, meta[relay.Constant][52] /* ty=Tensor[(640), float64] */, %1109, meta[relay.Constant][53] /* ty=Tensor[(1650), float64] */)
}

def @func_9705() -> Tensor[(12, 5, 15), float64] {
  @func_3684() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_4133() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %1110 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
  %1111 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1112 = %1110.2;
  %1113 = %1111.0;
  (%1112, %1113)
}

def @func_10708() -> Tensor[(900), float64] {
  @func_5227() /* ty=Tensor[(900), float64] */
}

def @func_16359() -> (Tensor[(900), float64], Tensor[(?, 16, 4), bool], Tensor[(15, 1, 6), float32]) {
  %1114 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %1115 = @func_15600() /* ty=(Tensor[(70), int32], Tensor[(?, 16, 4), bool]) */;
  %1116 = @func_12812() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) */;
  %1117 = %1114.1;
  %1118 = %1115.1;
  %1119 = %1116.1;
  (%1117, %1118, %1119)
}

def @func_2649(%var_2628: Tensor[(624), float32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %1120 = @func_2592() /* ty=Tensor[(900), float64] */;
  %1121 = cast(%1120, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1122 = reshape(%1121, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %1123 = @func_798(%1122) /* ty=(Tensor[(12, 5, 15), float64],) */;
  %1124 = cast(%var_2628, dtype="float32") /* ty=Tensor[(624), float32] */;
  %1125 = reshape(%1124, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %1126 = cast(meta[relay.Constant][54] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1127 = reshape(%1126, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1128 = @func_1614(%1127) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %1129 = %1123.0;
  %1130 = @func_2541(%1125) /* ty=Tensor[(8, 6, 13), float32] */;
  %1131 = %1128.1;
  (%1120, %1129, %1130, %var_2628, %1131, meta[relay.Constant][54] /* ty=Tensor[(1092), uint32] */)
}

def @func_1614(%var_1595: Tensor[(1092), uint32]) -> (Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) {
  %1132 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
  %1133 = cast(meta[relay.Constant][56] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %1134 = cast(%var_1595, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1135 = reshape(%1133, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %1136 = reshape(%1134, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1137 = @func_1081(%1135, %1136) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %1138 = atan(%1132) /* ty=Tensor[(7, 13, 11), float64] */;
  %1139 = %1137.3;
  (%1138, %1139, meta[relay.Constant][56] /* ty=Tensor[(405), float32] */, %var_1595)
}

def @func_14989() -> Tensor[(1, 16, 4), float32] {
  %1140 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1140.0
}

def @func_7146() -> (Tensor[(900), float64],) {
  %1141 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %1142 = %1141.0;
  (%1142,)
}

def @func_5780() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
  %1143 = @func_4347() /* ty=(Tensor[(900), float64],) */;
  %1144 = @func_5170() /* ty=(Tensor[(8, 6, 13), float32],) */;
  %1145 = %1143.0;
  %1146 = %1144.0;
  (%1145, %1146)
}

def @func_11971(%var_11931: Tensor[(14, 10, 5), uint16]) -> (Tensor[(14, 10, 5), uint16], Tensor[(624), float32]) {
  %1147 = cast(%var_11931, dtype="uint16") /* ty=Tensor[(14, 10, 5), uint16] */;
  %1148 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(14, 10, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1149 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 10, 5), uint16] */;
  %1150 = dyn.reshape(%1147, %1148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1151 = @func_10125() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */;
  %1152 = minimum(%1149, %1150) /* ty=Tensor[(14, 10, 5), uint16] */;
  %1153 = %1151.1;
  (%1152, %1153)
}

def @func_7212() -> (Tensor[(900), float64],) {
  %1154 = @func_2592() /* ty=Tensor[(900), float64] */;
  (%1154,)
}

def @func_9475() -> Tensor[(1, 16, 4), float64] {
  %1155 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1155.0
}

def @func_4829() -> (Tensor[(1, 16, 4), float64],) {
  %1156 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %1157 = %1156.0;
  (%1157,)
}

def @func_1081(%var_1059: Tensor[(9, 5, 9), float32], %var_1079: Tensor[(1092), uint32]) -> (Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %1158 = cast(%var_1059, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %1159 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(9, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1160 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 5, 9), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1162 = cast(meta[relay.Constant][59] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1163 = cast(meta[relay.Constant][59] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1164 = reshape(%1162, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %1165 = reshape(%1163, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %1166 = cast(%var_1079, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1167 = reshape(%1166, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
  %1168 = equal(%1160, %1161) /* ty=Tensor[(9, 5, 9), bool] */;
  %1169 = @func_827(%1164, %1165) /* ty=Tensor[(2, 15, 10), uint8] */;
  %1170 = @func_844(%1167) /* ty=Tensor[(14, 6, 13), bool] */;
  (%1168, %1169, meta[relay.Constant][59] /* ty=Tensor[(300), uint8] */, %1170, %var_1079)
}

def @func_9688(%var_9680: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) {
  %1171 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1172 = reshape(%1171, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1173 = @func_6698(%1172) /* ty=(Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %1174 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1175 = reshape(%1174, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1176 = @func_9373(%1175) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) */;
  %1177 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
  %1178 = %1173.0;
  %1179 = %1176.4;
  (%1177, %1178, %var_9680, %1179)
}

def @func_16956() -> (Tensor[(4, 11, 11), float64],) {
  %1180 = @func_7457() /* ty=(Tensor[(4, 11, 11), float64],) */;
  %1181 = %1180.0;
  (%1181,)
}

def @func_2592() -> Tensor[(900), float64] {
  %1182 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %1182.2
}

def @func_8224() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %1183 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1184 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1185 = %1183.0;
  %1186 = %1184.0;
  (%1185, %1186)
}

def @func_8630(%var_8619: Tensor[(1650), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) {
  %1187 = cast(%var_8619, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %1188 = reshape(%1187, newshape=[11, 10, 15]) /* ty=Tensor[(11, 10, 15), float64] */;
  %1189 = @func_6002(%1188) /* ty=(Tensor[(11, 10, 15), float64],) */;
  %1190 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %1191 = %1189.0;
  (%1190, %1191, %var_8619)
}

def @func_2456() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %1192 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %1193 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %1194 = rsqrt(%1192) /* ty=Tensor[(1, 16, 4), float32] */;
  %1195 = log(%1193) /* ty=Tensor[(1, 16, 4), float32] */;
  (%1194, %1195)
}

def @func_10830() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) {
  %1196 = @func_2904() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1197 = %1196.1;
  %1198 = @func_10191() /* ty=Tensor[(?, 16, 4), bool] */;
  %1199 = @func_2592() /* ty=Tensor[(900), float64] */;
  (%1197, %1198, %1199)
}

def @func_8844() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %1200 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1201 = %1200.0;
  %1202 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  (%1201, %1202)
}

def @func_10879() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  %1203 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %1204 = @func_10191() /* ty=Tensor[(?, 16, 4), bool] */;
  %1205 = %1203.2;
  (%1204, %1205)
}

def @func_7770() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %1206 = @func_7212() /* ty=(Tensor[(900), float64],) */;
  %1207 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1208 = %1206.0;
  %1209 = %1207.0;
  (%1208, %1209)
}

def @func_7606() -> (Tensor[(1, 16, 4), float64],) {
  %1210 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %1211 = %1210.3;
  (%1211,)
}

def @func_7902(%var_7889: Tensor[(11, 10, 12), bool], %var_7890: Tensor[(11, 10, 12), bool]) -> Tensor[(11, 10, 12), bool] {
  %1212 = cast(%var_7890, dtype="bool") /* ty=Tensor[(11, 10, 12), bool] */;
  %1213 = shape_of(%var_7889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1214 = cast(%var_7889, dtype="bool") /* ty=Tensor[(11, 10, 12), bool] */;
  %1215 = dyn.reshape(%1212, %1213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%1214, %1215) /* ty=Tensor[(11, 10, 12), bool] */
}

def @func_9424(%var_9416: Tensor[(7, 156), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(7, 156), uint32]) {
  %1216 = cast(%var_9416, dtype="uint32") /* ty=Tensor[(7, 156), uint32] */;
  %1217 = reshape(%1216, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1218 = @func_2297(%1217) /* ty=(Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %1219 = @func_6060() /* ty=Tensor[(1, 16, 4), float32] */;
  %1220 = %1218.2;
  (%1219, %1220, %var_9416)
}

def @func_3567(%var_3547: Tensor[(6, 10, 15), float64]) -> (Tensor[(6, 10, 15), float64],) {
  %1221 = cast(%var_3547, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
  %1222 = exp(%1221) /* ty=Tensor[(6, 10, 15), float64] */;
  (%1222,)
}

def @func_16508(%var_16488: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(14, 6, 13), bool]) {
  %1223 = @func_12546() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %1224 = cast(%var_16488, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1225 = reshape(%1224, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1226 = @func_14592(%1225) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) */;
  %1227 = cast(%var_16488, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1228 = reshape(%1227, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1229 = @func_6698(%1228) /* ty=(Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %1230 = %1223.0;
  %1231 = %1226.1;
  %1232 = %1229.1;
  (%1230, %1231, %var_16488, %1232)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3685() -> Tensor[(12, 5, 15), float64] {
  %1 = fn () -> Tensor[(12, 5, 15), float64] {
    %0 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
    %0.3
  };
  %1() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_6788() -> (Tensor[(8, 6, 13), float32],) {
  @func_6786() /* ty=(Tensor[(8, 6, 13), float32],) */
}

def @func_4133() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %2 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
  %3 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %4 = %2.2;
  %5 = %3.0;
  (%4, %5)
}

def @func_11412(%var_11411: Tensor[(2, 660), bool]) -> (Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) {
  %22 = fn (%var_11376: Tensor[(2, 660), bool]) -> (Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) {
    %6 = @func_7146() /* ty=(Tensor[(900), float64],) */;
    %7 = cast(%var_11376, dtype="bool") /* ty=Tensor[(2, 660), bool] */;
    %8 = cast(%var_11376, dtype="bool") /* ty=Tensor[(2, 660), bool] */;
    %9 = reshape(%7, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), bool] */;
    %10 = reshape(%8, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), bool] */;
    %11 = cast(%var_11376, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
    %12 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
    %13 = %12.3;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
    %16 = floor_mod(%14, %15) /* ty=Tensor[(4, 16, 4), float32] */;
    %17 = cast(%16, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
    %18 = %6.0;
    %19 = @func_7902(%9, %10) /* ty=Tensor[(11, 10, 12), bool] */;
    %20 = rsqrt(%11) /* ty=Tensor[(2, 660), float64] */;
    %21 = sqrt(%17) /* ty=Tensor[(4, 16, 4), float64] */;
    (%18, %19, %20, %21)
  };
  %22(%var_11411) /* ty=(Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) */
}

def @func_16296() -> (Tensor[(?, 16, 4), bool], Tensor[(300), uint8]) {
  @func_16294() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(300), uint8]) */
}

def @func_4612() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %23 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %24 = @func_2616() /* ty=Tensor[(900), float64] */;
  %25 = %23.0;
  (%24, %25)
}

def @func_3339(%var_3337: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) {
  @func_3336(%var_3337) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) */
}

def @func_13233() -> Tensor[(1, 16, 4), float32] {
  @func_13231() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_4967() -> (Tensor[(1, 16, 4), float32],) {
  %28 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %26 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %27 = %26.0;
    (%27,)
  };
  %28() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_2836() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %31 = fn () -> (Tensor[(900), float64], Tensor[(900), float64]) {
    %29 = @func_2592() /* ty=Tensor[(900), float64] */;
    %30 = @func_2616() /* ty=Tensor[(900), float64] */;
    (%29, %30)
  };
  %31() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */
}

def @func_16795(%var_16793: Tensor[(6, 16, 14), float64], %var_16794: Tensor[(6, 16, 14), float64]) -> Tensor[(6, 16, 14), bool] {
  %38 = fn (%var_16755: Tensor[(6, 16, 14), float64], %var_16774: Tensor[(6, 16, 14), float64]) -> Tensor[(6, 16, 14), bool] {
    %32 = cast(%var_16755, dtype="float64") /* ty=Tensor[(6, 16, 14), float64] */;
    %33 = sin(%32) /* ty=Tensor[(6, 16, 14), float64] */;
    %34 = cast(%var_16774, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
    %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%33, dtype="bool") /* ty=Tensor[(6, 16, 14), bool] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%36, %37) /* ty=Tensor[(6, 16, 14), bool] */
  };
  %38(%var_16793, %var_16794) /* ty=Tensor[(6, 16, 14), bool] */
}

def @func_10710() -> Tensor[(900), float64] {
  @func_10708() /* ty=Tensor[(900), float64] */
}

def @func_13596() -> Tensor[(1, 16, 4), float64] {
  %39 = @func_7606() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %39.0
}

def @func_2985(%var_2981: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  %40 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %41 = cast(%var_2981, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %42 = reshape(%41, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), uint32] */;
  %43 = @func_2341(%42) /* ty=(Tensor[(7, 2, 8), int32],) */;
  %44 = %40.0;
  %45 = %43.0;
  (%44, %45, %var_2981)
}

def @func_6624() -> (Tensor[(1, 16, 4), float32],) {
  %47 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %46 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
    (%46,)
  };
  %47() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_10221() -> Tensor[(8, 6, 13), float32] {
  %49 = fn () -> Tensor[(8, 6, 13), float32] {
    %48 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
    %48.1
  };
  %49() /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_7270() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %54 = fn () -> (Tensor[(900), float64], Tensor[(900), float64]) {
    %50 = @func_7146() /* ty=(Tensor[(900), float64],) */;
    %51 = @func_7146() /* ty=(Tensor[(900), float64],) */;
    %52 = %50.0;
    %53 = %51.0;
    (%52, %53)
  };
  %54() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */
}

def @func_7135() -> (Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) {
  %74 = fn () -> (Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) {
    %55 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %56 = %55.0;
    %57 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %58 = %57.1;
    %59 = cast(%58, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
    %60 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%56, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %63 = cast(%56, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %64 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%58, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = cast(%58, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %68 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%56, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %71 = bitwise_xor(%61, %62) /* ty=Tensor[(?, 16, 4), uint64] */;
    %72 = not_equal(%65, %66) /* ty=Tensor[(?, 16, 4), bool] */;
    %73 = logical_or(%69, %70) /* ty=Tensor[(?, 16, 4), bool] */;
    (%71, %72, %73)
  };
  %74() /* ty=(Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) */
}

def @func_16106() -> (Tensor[(1092), uint32], Tensor[(900), float64]) {
  %78 = fn () -> (Tensor[(1092), uint32], Tensor[(900), float64]) {
    %75 = @func_16037() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) */;
    %76 = %75.3;
    %77 = @func_10708() /* ty=Tensor[(900), float64] */;
    (%76, %77)
  };
  %78() /* ty=(Tensor[(1092), uint32], Tensor[(900), float64]) */
}

def @func_5461(%var_5459: uint64, %var_5460: Tensor[(7, 6, 5), uint64]) -> (Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) {
  %85 = fn (%var_5444: uint64, %var_5445: Tensor[(7, 6, 5), uint64]) -> (Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) {
    %79 = cast(%var_5444, dtype="uint64") /* ty=uint64 */;
    %80 = cast(%var_5445, dtype="uint64") /* ty=Tensor[(7, 6, 5), uint64] */;
    %81 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 330), float32] */, dtype="float32") /* ty=Tensor[(5, 330), float32] */;
    %82 = reshape(%81, newshape=[11, 10, 15]) /* ty=Tensor[(11, 10, 15), float32] */;
    %83 = left_shift(%79, %80) /* ty=Tensor[(7, 6, 5), uint64] */;
    %84 = @func_4836(%82) /* ty=Tensor[(11, 10, 15), float32] */;
    (%83, %84, meta[relay.Constant][1] /* ty=Tensor[(5, 330), float32] */)
  };
  %85(%var_5459, %var_5460) /* ty=(Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) */
}

def @func_11729(%var_11727: Tensor[(7, 13, 3), uint32], %var_11728: Tensor[(7, 13, 3), uint32]) -> (Tensor[(7, 13, 3), uint32],) {
  @func_11725(%var_11727, %var_11728) /* ty=(Tensor[(7, 13, 3), uint32],) */
}

def @func_16703(%var_16701: Tensor[(3, 3, 10), float64]) -> (Tensor[(3, 3, 10), float64],) {
  @func_16700(%var_16701) /* ty=(Tensor[(3, 3, 10), float64],) */
}

def @func_10023() -> (Tensor[(1, 16, 4), float64],) {
  %86 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %87 = %86.3;
  (%87,)
}

def @func_16021() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  @func_16019() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_8052() -> Tensor[(1, 16, 4), float32] {
  %88 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %88.0
}

def @func_2905() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %93 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
    %89 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %90 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %91 = %89.0;
    %92 = %90.1;
    (%91, %92)
  };
  %93() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_16294() -> (Tensor[(?, 16, 4), bool], Tensor[(300), uint8]) {
  %94 = @func_10879() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */;
  %95 = @func_13838() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %96 = %94.0;
  %97 = %95.1;
  (%96, %97)
}

def @func_4382() -> Tensor[(8, 6, 13), float32] {
  @func_4380() /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_12750() -> Tensor[(12, 5, 15), float64] {
  @func_3684() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_13916() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  %98 = @func_12302() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %99 = @func_10550() /* ty=(Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) */;
  %100 = %98.0;
  %101 = %99.0;
  (%100, %101)
}

def @func_3261() -> (Tensor[(1, 16, 4), float32],) {
  %104 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %102 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %103 = %102.0;
    (%103,)
  };
  %104() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_4746() -> (Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_10634() -> Tensor[(8, 6, 13), float32] {
  %105 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %105.0
}

def @func_2702() -> (Tensor[(1, 16, 4), float32],) {
  %108 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %106 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %107 = %106.0;
    (%107,)
  };
  %108() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_9476() -> Tensor[(1, 16, 4), float64] {
  %110 = fn () -> Tensor[(1, 16, 4), float64] {
    %109 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %109.0
  };
  %110() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_14958() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %114 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
    %111 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %112 = %111.0;
    %113 = @func_13231() /* ty=Tensor[(1, 16, 4), float32] */;
    (%112, %113)
  };
  %114() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_15528() -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  @func_15526() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_14657() -> Tensor[(?, 16, 4), bool] {
  @func_10191() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_4348() -> (Tensor[(900), float64],) {
  %117 = fn () -> (Tensor[(900), float64],) {
    %115 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %116 = %115.0;
    (%116,)
  };
  %117() /* ty=(Tensor[(900), float64],) */
}

def @func_10912() -> Tensor[(12, 5, 15), float64] {
  @func_10910() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_2821(%var_2820: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) {
  %142 = fn (%var_2762: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) {
    %118 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %119 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
    %120 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
    %121 = cast(%var_2762, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %122 = cast(meta[relay.Constant][3] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %123 = reshape(%119, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
    %124 = reshape(%120, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
    %125 = reshape(%121, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %126 = reshape(%122, newshape=[300]) /* ty=Tensor[(300), uint8] */;
    %127 = @func_2144(%123, %124, %125, %126) /* ty=(Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) */;
    %128 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
    %129 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), uint16] */, dtype="uint16") /* ty=Tensor[(56), uint16] */;
    %130 = cast(%var_2762, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %131 = cast(meta[relay.Constant][3] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %132 = reshape(%128, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
    %133 = reshape(%129, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), uint16] */;
    %134 = reshape(%130, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %135 = reshape(%131, newshape=[300]) /* ty=Tensor[(300), uint8] */;
    %136 = @func_2144(%132, %133, %134, %135) /* ty=(Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) */;
    %137 = %136.4;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
    %139 = %118.0;
    %140 = %127.7;
    %141 = log10(%138) /* ty=Tensor[(7, 13, 11), float64] */;
    (%139, %140, meta[relay.Constant][2] /* ty=Tensor[(56), uint16] */, %var_2762, meta[relay.Constant][3] /* ty=Tensor[(300), uint8] */, %141)
  };
  %142(%var_2820) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */
}

def @func_8226() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  @func_8224() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_5759() -> (Tensor[(1, 16, 4), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 70), int32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  %143 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %144 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 70), int32] */, dtype="int32") /* ty=Tensor[(1, 70), int32] */;
  %145 = reshape(%144, newshape=[5, 2, 7]) /* ty=Tensor[(5, 2, 7), int32] */;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), uint32] */, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %147 = reshape(%146, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %148 = @func_2985(%147) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %149 = %143.0;
  %150 = @func_3539(%145) /* ty=Tensor[(5, 2, 7), int32] */;
  %151 = %148.1;
  (%149, %150, meta[relay.Constant][4] /* ty=Tensor[(1, 70), int32] */, %151, meta[relay.Constant][5] /* ty=Tensor[(112), uint32] */)
}

def @func_8967(%var_8966: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
  %162 = fn (%var_8962: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
    %152 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %153 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %154 = reshape(%153, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
    %155 = cast(%var_8962, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %156 = reshape(%155, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %157 = @func_2819(%156) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
    %158 = %152.0;
    %159 = @func_2541(%154) /* ty=Tensor[(8, 6, 13), float32] */;
    %160 = @func_5227() /* ty=Tensor[(900), float64] */;
    %161 = %157.5;
    (%158, %159, meta[relay.Constant][6] /* ty=Tensor[(624), float32] */, %160, %161, %var_8962)
  };
  %162(%var_8966) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */
}

def @func_15024() -> (Tensor[(1, 16, 4), float64],) {
  %165 = fn () -> (Tensor[(1, 16, 4), float64],) {
    %163 = @func_11594() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %164 = %163.0;
    (%164,)
  };
  %165() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_15261() -> (Tensor[(300), uint8],) {
  %166 = @func_14886() /* ty=Tensor[(300), uint8] */;
  (%166,)
}

def @func_15743() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
  @func_15741() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float64]) */
}

def @func_15306() -> Tensor[(1, 16, 4), float32] {
  @func_15304() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_9077(%var_9076: Tensor[(300), uint8]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %185 = fn (%var_9045: Tensor[(300), uint8]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
    %167 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %168 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %169 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %170 = cast(%var_9045, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %171 = reshape(%170, newshape=[300]) /* ty=Tensor[(300), uint8] */;
    %172 = @func_3917(%171) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
    %173 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %174 = @func_6623() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %175 = @func_8611() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %176 = %167.0;
    %177 = @func_6060() /* ty=Tensor[(1, 16, 4), float32] */;
    %178 = %168.0;
    %179 = %169.1;
    %180 = %172.0;
    %181 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
    %182 = %173.1;
    %183 = %174.0;
    %184 = %175.3;
    (%176, %177, %178, %179, %180, %var_9045, %181, %182, %183, %184)
  };
  %185(%var_9076) /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_13838() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  %186 = @func_11890() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) */;
  %187 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %188 = %186.2;
  %189 = %187.2;
  (%188, %189)
}

def @func_15601() -> (Tensor[(70), int32], Tensor[(?, 16, 4), bool]) {
  %192 = fn () -> (Tensor[(70), int32], Tensor[(?, 16, 4), bool]) {
    %190 = @func_15356() /* ty=Tensor[(70), int32] */;
    %191 = @func_13612() /* ty=Tensor[(?, 16, 4), bool] */;
    (%190, %191)
  };
  %192() /* ty=(Tensor[(70), int32], Tensor[(?, 16, 4), bool]) */
}

def @func_8632(%var_8631: Tensor[(1650), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) {
  %198 = fn (%var_8619: Tensor[(1650), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) {
    %193 = cast(%var_8619, dtype="float64") /* ty=Tensor[(1650), float64] */;
    %194 = reshape(%193, newshape=[11, 10, 15]) /* ty=Tensor[(11, 10, 15), float64] */;
    %195 = @func_6002(%194) /* ty=(Tensor[(11, 10, 15), float64],) */;
    %196 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
    %197 = %195.0;
    (%196, %197, %var_8619)
  };
  %198(%var_8631) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */
}

def @func_5219() -> Tensor[(1, 16, 4), float32] {
  %199 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %199.0
}

def @func_5650() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
  %200 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %201 = @func_5170() /* ty=(Tensor[(8, 6, 13), float32],) */;
  %202 = %200.0;
  %203 = @func_2592() /* ty=Tensor[(900), float64] */;
  %204 = %201.0;
  (%202, %203, %204)
}

def @func_10636() -> Tensor[(8, 6, 13), float32] {
  @func_10634() /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_3336(%var_3302: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) {
  %205 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %206 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %207 = reshape(%205, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %208 = reshape(%206, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %209 = @func_827(%207, %208) /* ty=Tensor[(2, 15, 10), uint8] */;
  %210 = cast(%209, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %211 = cast(%var_3302, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %212 = reshape(%210, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %213 = reshape(%211, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %214 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  %215 = @func_2616() /* ty=Tensor[(900), float64] */;
  %216 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  %217 = @func_827(%212, %213) /* ty=Tensor[(2, 15, 10), uint8] */;
  (%214, %215, %209, %var_3302, %216, %217)
}

def @func_3962(%var_3953: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %218 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %219 = cast(%var_3953, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %220 = reshape(%219, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
  %221 = %218.1;
  %222 = @func_844(%220) /* ty=Tensor[(14, 6, 13), bool] */;
  (%221, %222, %var_3953)
}

def @func_14248() -> (Tensor[(1, 16, 4), float64],) {
  %223 = @func_7170() /* ty=Tensor[(1, 16, 4), float64] */;
  (%223,)
}

def @func_16613(%var_16608: Tensor[(156), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(8, 6, 13), int8], Tensor[(6, 2, 13), float32], Tensor[(156), float32]) {
  %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), uint32] */, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %225 = reshape(%224, newshape=[2, 56]) /* ty=Tensor[(2, 56), uint32] */;
  %226 = @func_14732(%225) /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) */;
  %227 = @func_15756() /* ty=Tensor[(8, 6, 13), float32] */;
  %228 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 6, 13), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 13), int8] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="int8") /* ty=Tensor[(8, 6, 13), int8] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %232 = cast(%var_16608, dtype="float32") /* ty=Tensor[(156), float32] */;
  %233 = reshape(%232, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %234 = @func_13536(%233) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %235 = %226.1;
  %236 = bitwise_and(%230, %231) /* ty=Tensor[(8, 6, 13), int8] */;
  %237 = %234.0;
  (%235, meta[relay.Constant][7] /* ty=Tensor[(112), uint32] */, %236, %237, %var_16608)
}

def @func_9184(%var_9183: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(1, 16, 4), float32]) {
  %245 = fn (%var_9161: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(1, 16, 4), float32]) {
    %238 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %239 = shape_of(%var_9161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%var_9161, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %242 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
    %243 = mod(%240, %241) /* ty=Tensor[(16, 15, 14), float64] */;
    %244 = %242.0;
    (%243, %244)
  };
  %245(%var_9183) /* ty=(Tensor[(16, 15, 14), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_15840() -> (Tensor[(1, 16, 4), float64],) {
  %248 = fn () -> (Tensor[(1, 16, 4), float64],) {
    %246 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %247 = %246.0;
    (%247,)
  };
  %248() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_15472() -> Tensor[(1, 16, 4), float32] {
  %249 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %249.0
}

def @func_13739() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %252 = fn () -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
    %250 = @func_5227() /* ty=Tensor[(900), float64] */;
    %251 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
    (%250, %251)
  };
  %252() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_16340() -> (Tensor[(70), int32], Tensor[(1, 16, 4), float64]) {
  %257 = fn () -> (Tensor[(70), int32], Tensor[(1, 16, 4), float64]) {
    %253 = @func_15600() /* ty=(Tensor[(70), int32], Tensor[(?, 16, 4), bool]) */;
    %254 = @func_15724() /* ty=(Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
    %255 = %253.0;
    %256 = %254.1;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(70), int32], Tensor[(1, 16, 4), float64]) */
}

def @func_6160(%var_6159: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) {
  %267 = fn (%var_6136: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) {
    %258 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
    %259 = cast(%var_6136, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
    %260 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(3, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %263 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
    %264 = acos(%258) /* ty=Tensor[(3, 6, 8), float32] */;
    %265 = divide(%261, %262) /* ty=Tensor[(3, 6, 8), float64] */;
    %266 = %263.2;
    (%264, %265, %266)
  };
  %267(%var_6159) /* ty=(Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) */
}

def @func_4625() -> Tensor[(8, 6, 13), float64] {
  %270 = fn () -> Tensor[(8, 6, 13), float64] {
    %268 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
    %269 = cast(%268, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
    atan(%269) /* ty=Tensor[(8, 6, 13), float64] */
  };
  %270() /* ty=Tensor[(8, 6, 13), float64] */
}

def @func_5379() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) {
  @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */
}

def @func_10192() -> Tensor[(?, 16, 4), bool] {
  %272 = fn () -> Tensor[(?, 16, 4), bool] {
    %271 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
    %271.0
  };
  %272() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_3965(%var_3963: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  @func_3962(%var_3963) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */
}

def @func_6061() -> Tensor[(1, 16, 4), float32] {
  %274 = fn () -> Tensor[(1, 16, 4), float32] {
    %273 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %273.0
  };
  %274() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_6888() -> Tensor[(1, 16, 4), float32] {
  @func_6886() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_5432() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %278 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
    %275 = @func_3260() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %276 = %275.0;
    %277 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
    (%276, %277)
  };
  %278() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_11657(%var_11654: Tensor[(9, 5, 16), uint8], %var_11655: Tensor[(9, 5, 16), uint8], %var_11656: Tensor[(9, 5, 16), uint8]) -> (Tensor[(9, 5, 16), bool], Tensor[(9, 5, 16), bool]) {
  %289 = fn (%var_11641: Tensor[(9, 5, 16), uint8], %var_11642: Tensor[(9, 5, 16), uint8], %var_11648: Tensor[(9, 5, 16), uint8]) -> (Tensor[(9, 5, 16), bool], Tensor[(9, 5, 16), bool]) {
    %279 = cast(%var_11642, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %280 = shape_of(%var_11641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(%var_11641, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %283 = cast(%var_11648, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %284 = shape_of(%var_11641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %285 = cast(%var_11641, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %287 = not_equal(%281, %282) /* ty=Tensor[(9, 5, 16), bool] */;
    %288 = logical_or(%285, %286) /* ty=Tensor[(9, 5, 16), bool] */;
    (%287, %288)
  };
  %289(%var_11654, %var_11655, %var_11656) /* ty=(Tensor[(9, 5, 16), bool], Tensor[(9, 5, 16), bool]) */
}

def @func_5833() -> (Tensor[(900), float64],) {
  %290 = @func_5227() /* ty=Tensor[(900), float64] */;
  (%290,)
}

def @func_6004(%var_6003: Tensor[(11, 10, 15), float64]) -> (Tensor[(11, 10, 15), float64],) {
  %294 = fn (%var_5994: Tensor[(11, 10, 15), float64]) -> (Tensor[(11, 10, 15), float64],) {
    %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
    %292 = cast(%var_5994, dtype="float64") /* ty=Tensor[(11, 10, 15), float64] */;
    %293 = floor_divide(%291, %292) /* ty=Tensor[(11, 10, 15), float64] */;
    (%293,)
  };
  %294(%var_6003) /* ty=(Tensor[(11, 10, 15), float64],) */
}

def @func_15425() -> (Tensor[(1, 16, 4), float32],) {
  @func_15423() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_7212() -> (Tensor[(900), float64],) {
  %295 = @func_2592() /* ty=Tensor[(900), float64] */;
  (%295,)
}

def @func_4538() -> (Tensor[(1, 16, 4), float32],) {
  @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_7606() -> (Tensor[(1, 16, 4), float64],) {
  %296 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %297 = %296.3;
  (%297,)
}

def @func_8331() -> (Tensor[(12, 5, 15), float64],) {
  @func_8329() /* ty=(Tensor[(12, 5, 15), float64],) */
}

def @func_14990() -> Tensor[(1, 16, 4), float32] {
  %299 = fn () -> Tensor[(1, 16, 4), float32] {
    %298 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %298.0
  };
  %299() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_12590() -> Tensor[(900), float64] {
  %300 = @func_11927() /* ty=(Tensor[(900), float64],) */;
  %300.0
}

def @func_10551() -> (Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) {
  %317 = fn () -> (Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) {
    %301 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
    %302 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
    %303 = %302.2;
    %304 = cast(%303, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
    %305 = asinh(%304) /* ty=Tensor[(8, 6, 13), float64] */;
    %306 = cast(%305, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
    %307 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %308 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %309 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %310 = reshape(%309, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
    %311 = @func_6158(%310) /* ty=(Tensor[(3, 6, 8), float32], Tensor[(3, 6, 8), float64], Tensor[(8, 6, 13), bool]) */;
    %312 = %301.2;
    %313 = log(%306) /* ty=Tensor[(8, 6, 13), float64] */;
    %314 = %307.1;
    %315 = %308.1;
    %316 = %311.2;
    (%312, %313, %314, %315, %316, meta[relay.Constant][12] /* ty=Tensor[(144), float32] */)
  };
  %317() /* ty=(Tensor[(300), uint8], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(144), float32]) */
}

def @func_9003() -> Tensor[(1, 16, 4), float32] {
  %318 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
  %318.0
}

def @func_9690(%var_9689: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) {
  %328 = fn (%var_9680: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) {
    %319 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %320 = reshape(%319, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %321 = @func_6698(%320) /* ty=(Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
    %322 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %323 = reshape(%322, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %324 = @func_9373(%323) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) */;
    %325 = @func_2661() /* ty=Tensor[(1, 16, 4), float32] */;
    %326 = %321.0;
    %327 = %324.4;
    (%325, %326, %var_9680, %327)
  };
  %328(%var_9689) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) */
}

def @func_8722(%var_8640: Tensor[(12, 8, 4), float32]) -> (Tensor[(12, 8, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(640), float64], Tensor[(1650), float64], Tensor[(1650), float64]) {
  %329 = cast(%var_8640, dtype="float32") /* ty=Tensor[(12, 8, 4), float32] */;
  %330 = cast(meta[relay.Constant][13] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %331 = reshape(%330, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
  %332 = @func_7823(%331) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) */;
  %333 = cast(meta[relay.Constant][14] /* ty=Tensor[(1650), float64] */, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %334 = reshape(%333, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %335 = @func_8630(%334) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
  %336 = sigmoid(%329) /* ty=Tensor[(12, 8, 4), float32] */;
  %337 = %332.0;
  %338 = %335.2;
  (%336, %337, meta[relay.Constant][13] /* ty=Tensor[(640), float64] */, %338, meta[relay.Constant][14] /* ty=Tensor[(1650), float64] */)
}

def @func_2732() -> Tensor[(1, 16, 4), float32] {
  @func_2730() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_8803() -> Tensor[(1, 16, 4), float64] {
  %343 = fn () -> Tensor[(1, 16, 4), float64] {
    %339 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %341 = log10(%340) /* ty=Tensor[(1, 16, 4), float32] */;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    cos(%342) /* ty=Tensor[(1, 16, 4), float64] */
  };
  %343() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_9706() -> Tensor[(12, 5, 15), float64] {
  %344 = fn () -> Tensor[(12, 5, 15), float64] {
    @func_3684() /* ty=Tensor[(12, 5, 15), float64] */
  };
  %344() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_3920(%var_3918: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) {
  @func_3917(%var_3918) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */
}

def @func_6274(%var_6272: Tensor[(210), uint64]) -> (Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) {
  @func_6271(%var_6272) /* ty=(Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) */
}

def @func_9782() -> (Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %345 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %346 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 13), uint16] */;
  %347 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %348 = bitwise_or(%345, %346) /* ty=Tensor[(1, 13), uint16] */;
  %349 = %347.0;
  %350 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  (%348, %349, %350)
}

def @func_11827() -> Tensor[(?, 16, 4), bool] {
  %352 = fn () -> Tensor[(?, 16, 4), bool] {
    %351 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
    %351.0
  };
  %352() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_9901() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), int16], Tensor[(900), float64]) {
  %353 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  %354 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
  %357 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%353, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %360 = @func_4347() /* ty=(Tensor[(900), float64],) */;
  %361 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %362 = minimum(%358, %359) /* ty=Tensor[(?, 16, 4), int16] */;
  %363 = %360.0;
  (%361, %362, %363)
}

def @func_12942() -> (Tensor[(8, 6, 13), float32],) {
  %364 = @func_12812() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) */;
  %365 = %364.0;
  (%365,)
}

def @func_2662() -> Tensor[(1, 16, 4), float32] {
  %367 = fn () -> Tensor[(1, 16, 4), float32] {
    %366 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
    %366.0
  };
  %367() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_12486() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
  %372 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
    %368 = @func_4612() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %369 = @func_5833() /* ty=(Tensor[(900), float64],) */;
    %370 = %368.1;
    %371 = %369.0;
    (%370, %371)
  };
  %372() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */
}

def @func_5229() -> Tensor[(900), float64] {
  @func_5227() /* ty=Tensor[(900), float64] */
}

def @func_12592() -> Tensor[(900), float64] {
  @func_12590() /* ty=Tensor[(900), float64] */
}

def @func_3881(%var_3879: Tensor[(1092), uint32], %var_3880: Tensor[(405), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) {
  %389 = fn (%var_3833: Tensor[(1092), uint32], %var_3865: Tensor[(405), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) {
    %373 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
    %374 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 14, 12), float64] */, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
    %375 = asinh(%374) /* ty=Tensor[(12, 14, 12), float32] */;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
    %377 = cast(%var_3833, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %378 = reshape(%377, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %379 = @func_2819(%378) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
    %380 = cast(%var_3865, dtype="float32") /* ty=Tensor[(405), float32] */;
    %381 = cast(%var_3833, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %382 = reshape(%380, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
    %383 = reshape(%381, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %384 = @func_1081(%382, %383) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %385 = asin(%373) /* ty=Tensor[(12, 14, 12), float64] */;
    %386 = tan(%376) /* ty=Tensor[(12, 14, 12), float64] */;
    %387 = %379.2;
    %388 = %384.1;
    (%385, %386, %387, %var_3833, %388, %var_3865)
  };
  %389(%var_3879, %var_3880) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) */
}

def @func_10011(%var_9974: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(112), uint32]) {
  %390 = cast(%var_9974, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %391 = reshape(%390, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %392 = @func_2985(%391) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %393 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %394 = %392.2;
  (%393, %394, %var_9974)
}

def @func_8412() -> (Tensor[(?, 16, 4), bool],) {
  %396 = fn () -> (Tensor[(?, 16, 4), bool],) {
    %395 = @func_6467() /* ty=Tensor[(?, 16, 4), bool] */;
    (%395,)
  };
  %396() /* ty=(Tensor[(?, 16, 4), bool],) */
}

def @func_2344(%var_2342: Tensor[(7, 2, 8), uint32]) -> (Tensor[(7, 2, 8), int32],) {
  @func_2341(%var_2342) /* ty=(Tensor[(7, 2, 8), int32],) */
}

def @func_15725() -> (Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %404 = fn () -> (Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
    %397 = @func_14196() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %398 = %397.0;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
    %401 = @func_7606() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %402 = divide(%399, %400) /* ty=Tensor[(14, 16, 4), float32] */;
    %403 = %401.0;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(14, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_13506() -> (Tensor[(1, 16, 4), float32],) {
  @func_13504() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_15642() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  @func_15640() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_15560() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) {
  %410 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) {
    %405 = @func_7457() /* ty=(Tensor[(4, 11, 11), float64],) */;
    %406 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
    %407 = @func_11026() /* ty=Tensor[(1, 16, 4), float32] */;
    %408 = %405.0;
    %409 = %406.1;
    (%407, %408, %409)
  };
  %410() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) */
}

def @func_10326(%var_10324: Tensor[(4, 16, 4), float32], %var_10325: Tensor[(8, 78), float32]) -> (Tensor[(1092), uint32], Tensor[(546, 2), uint32], Tensor[(4, 16, 4), float64], Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(8, 78), float32]) {
  @func_10322(%var_10324, %var_10325) /* ty=(Tensor[(1092), uint32], Tensor[(546, 2), uint32], Tensor[(4, 16, 4), float64], Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(8, 78), float32]) */
}

def @func_6271(%var_6219: Tensor[(210), uint64]) -> (Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) {
  %411 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %412 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %413 = cast(%var_6219, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %414 = reshape(%412, newshape=[]) /* ty=uint64 */;
  %415 = reshape(%413, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), uint64] */;
  %416 = @func_5458(%414, %415) /* ty=(Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) */;
  %417 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %418 = %417.1;
  %419 = cast(%418, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %420 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %421 = cast(meta[relay.Constant][20] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %422 = reshape(%421, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %423 = @func_3917(%422) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %424 = %411.0;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(900), float64] */;
  %426 = reshape(%425, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %427 = @func_798(%426) /* ty=(Tensor[(12, 5, 15), float64],) */;
  %428 = %416.2;
  %429 = less(%419, %420) /* ty=Tensor[(1, 16, 4), bool] */;
  %430 = %423.3;
  %431 = %427.0;
  (%424, %428, %var_6219, %429, %430, meta[relay.Constant][20] /* ty=Tensor[(300), uint8] */, %431)
}

def @func_12628() -> Tensor[(8, 6, 13), float32] {
  %433 = fn () -> Tensor[(8, 6, 13), float32] {
    %432 = @func_12569() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) */;
    %432.3
  };
  %433() /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_12571() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) {
  @func_12569() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) */
}

def @func_14402() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(624), float32], Tensor[(210), uint64], Tensor[(210), uint64], Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float64]) {
  %448 = fn () -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(624), float32], Tensor[(210), uint64], Tensor[(210), uint64], Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float64]) {
    %434 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
    %435 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %436 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
    %437 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %438 = reshape(%437, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %439 = @func_6271(%438) /* ty=(Tensor[(900), float64], Tensor[(5, 330), float32], Tensor[(210), uint64], Tensor[(1, 16, 4), bool], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(12, 5, 15), float64]) */;
    %440 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
    %441 = @func_10953() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) */;
    %442 = %434.1;
    %443 = %435.0;
    %444 = %436.2;
    %445 = %439.2;
    %446 = %440.0;
    %447 = %441.0;
    (%442, %443, %444, %445, meta[relay.Constant][21] /* ty=Tensor[(210), uint64] */, %446, %447)
  };
  %448() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(624), float32], Tensor[(210), uint64], Tensor[(210), uint64], Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float64]) */
}

def @func_16932() -> Tensor[(1, 16, 4), float64] {
  @func_16930() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_7520() -> (Tensor[(8, 6, 13), float64], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64]) {
  %449 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %450 = %449.0;
  %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 6, 13), float32] */, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %455 = subtract(%453, %454) /* ty=Tensor[(8, 6, 13), float64] */;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %457 = reshape(%456, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %458 = @func_2649(%457) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %459 = %458.5;
  %460 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  (%455, %459, %460)
}

def @func_12812() -> (Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) {
  %461 = @func_12569() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) */;
  %462 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  %463 = log2(%462) /* ty=Tensor[(15, 1, 6), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
  %465 = %461.3;
  %466 = sinh(%464) /* ty=Tensor[(15, 1, 6), float32] */;
  %467 = @func_11500() /* ty=Tensor[(1, 16, 4), float32] */;
  (%465, %466, %467)
}

def @func_14659() -> Tensor[(?, 16, 4), bool] {
  @func_14657() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_7170() -> Tensor[(1, 16, 4), float64] {
  %468 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %468.0
}

def @func_14595(%var_14593: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) {
  @func_14592(%var_14593) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) */
}

def @func_11843() -> (Tensor[(1, 16, 4), float64],) {
  %471 = fn () -> (Tensor[(1, 16, 4), float64],) {
    %469 = @func_11594() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %470 = %469.0;
    (%470,)
  };
  %471() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_13514() -> (Tensor[(1, 16, 4), float32],) {
  %472 = @func_12546() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %473 = %472.0;
  (%473,)
}

def @func_5221() -> Tensor[(1, 16, 4), float32] {
  @func_5219() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_14886() -> Tensor[(300), uint8] {
  %474 = @func_6558() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) */;
  %474.2
}

def @func_6558() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) {
  %475 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %476 = @func_4452() /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %477 = cast(meta[relay.Constant][24] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %478 = reshape(%477, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %479 = @func_3336(%478) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) */;
  %480 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %481 = %475.3;
  %482 = %476.1;
  %483 = %479.3;
  %484 = %480.0;
  (%481, %482, %483, meta[relay.Constant][24] /* ty=Tensor[(300), uint8] */, %484)
}

def @func_10025() -> (Tensor[(1, 16, 4), float64],) {
  @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_3468() -> Tensor[(1, 16, 4), float64] {
  %486 = fn () -> Tensor[(1, 16, 4), float64] {
    %485 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
    %485.0
  };
  %486() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_15304() -> Tensor[(1, 16, 4), float32] {
  %487 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %487.1
}

def @func_8725(%var_8723: Tensor[(12, 8, 4), float32]) -> (Tensor[(12, 8, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(640), float64], Tensor[(1650), float64], Tensor[(1650), float64]) {
  @func_8722(%var_8723) /* ty=(Tensor[(12, 8, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(640), float64], Tensor[(1650), float64], Tensor[(1650), float64]) */
}

def @func_16956() -> (Tensor[(4, 11, 11), float64],) {
  %488 = @func_7457() /* ty=(Tensor[(4, 11, 11), float64],) */;
  %489 = %488.0;
  (%489,)
}

def @func_12153() -> Tensor[(1, 16, 4), float32] {
  %491 = fn () -> Tensor[(1, 16, 4), float32] {
    %490 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %490.0
  };
  %491() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_8846() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_14696() -> (Tensor[(1, 16, 4), float64],) {
  @func_14694() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_16726() -> (Tensor[(1, 16, 4), float32],) {
  %492 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %493 = %492.0;
  (%493,)
}

def @func_8844() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %494 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %495 = %494.0;
  %496 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  (%495, %496)
}

def @func_4171() -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) {
  @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_12775(%var_12767: Tensor[(9, 3, 14), int32]) -> (Tensor[(9, 3, 14), int32],) {
  %497 = cast(%var_12767, dtype="int32") /* ty=Tensor[(9, 3, 14), int32] */;
  %498 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(9, 3, 14), int32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %501 = multiply(%499, %500) /* ty=Tensor[(9, 3, 14), int32] */;
  (%501,)
}

def @func_11341() -> (Tensor[(1, 16, 4), float32],) {
  %502 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  (%502,)
}

def @func_3365() -> (Tensor[(1, 16, 4), float64],) {
  %507 = fn () -> (Tensor[(1, 16, 4), float64],) {
    %503 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %506 = sin(%505) /* ty=Tensor[(1, 16, 4), float64] */;
    (%506,)
  };
  %507() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_9784() -> (Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  @func_9782() /* ty=(Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_11172(%var_11161: Tensor[(14, 78), uint32]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) {
  %508 = @func_7269() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %509 = cast(%var_11161, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
  %510 = reshape(%509, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %511 = @func_8965(%510) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */;
  %512 = %508.1;
  %513 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  %514 = %511.0;
  (%512, %513, %514, %var_11161)
}

def @func_11501() -> Tensor[(1, 16, 4), float32] {
  %515 = fn () -> Tensor[(1, 16, 4), float32] {
    @func_6886() /* ty=Tensor[(1, 16, 4), float32] */
  };
  %515() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_13918() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */
}

def @func_14502(%var_14499: float32, %var_14500: Tensor[(10, 12, 6), float32], %var_14501: Tensor[(1650), float64]) -> (Tensor[(10, 12, 6), bool], Tensor[(1, 16, 4), float32], Tensor[(1650), float64], Tensor[(1650), float64]) {
  %525 = fn (%var_14469: float32, %var_14470: Tensor[(10, 12, 6), float32], %var_14496: Tensor[(1650), float64]) -> (Tensor[(10, 12, 6), bool], Tensor[(1, 16, 4), float32], Tensor[(1650), float64], Tensor[(1650), float64]) {
    %516 = cast(%var_14469, dtype="bool") /* ty=bool */;
    %517 = cast(%var_14470, dtype="bool") /* ty=Tensor[(10, 12, 6), bool] */;
    %518 = @func_13970() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %519 = cast(%var_14496, dtype="float64") /* ty=Tensor[(1650), float64] */;
    %520 = reshape(%519, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
    %521 = @func_8630(%520) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
    %522 = greater(%516, %517) /* ty=Tensor[(10, 12, 6), bool] */;
    %523 = %518.0;
    %524 = %521.2;
    (%522, %523, %524, %var_14496)
  };
  %525(%var_14499, %var_14500, %var_14501) /* ty=(Tensor[(10, 12, 6), bool], Tensor[(1, 16, 4), float32], Tensor[(1650), float64], Tensor[(1650), float64]) */
}

def @func_15140(%var_15100: Tensor[(8, 16, 4), float32], %var_15110: Tensor[(1650), float64], %var_15114: Tensor[(378), int32], %var_15124: Tensor[(3, 52), float32]) -> (Tensor[(8, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(11, 10, 15), float64], Tensor[(1650), float64], Tensor[(9, 3, 14), int32], Tensor[(378), int32], Tensor[(6, 2, 13), float32], Tensor[(3, 52), float32]) {
  %526 = cast(%var_15100, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %527 = cast(%var_15110, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %528 = reshape(%527, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %529 = @func_8630(%528) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(11, 10, 15), float64], Tensor[(1650), float64]) */;
  %530 = cast(%var_15114, dtype="int32") /* ty=Tensor[(378), int32] */;
  %531 = reshape(%530, newshape=[9, 3, 14]) /* ty=Tensor[(9, 3, 14), int32] */;
  %532 = @func_12775(%531) /* ty=(Tensor[(9, 3, 14), int32],) */;
  %533 = cast(%var_15124, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %534 = reshape(%533, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %535 = @func_13536(%534) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %536 = log(%526) /* ty=Tensor[(8, 16, 4), float32] */;
  %537 = @func_10910() /* ty=Tensor[(12, 5, 15), float64] */;
  %538 = %529.1;
  %539 = %532.0;
  %540 = %535.0;
  (%536, %537, %538, %var_15110, %539, %var_15114, %540, %var_15124)
}

def @func_7608() -> (Tensor[(1, 16, 4), float64],) {
  @func_7606() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_16038() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) {
  %548 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) {
    %541 = @func_15839() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %543 = reshape(%542, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %544 = @func_9373(%543) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) */;
    %545 = %541.0;
    %546 = @func_8802() /* ty=Tensor[(1, 16, 4), float64] */;
    %547 = %544.5;
    (%545, %546, %547, meta[relay.Constant][26] /* ty=Tensor[(1092), uint32] */)
  };
  %548() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1092), uint32]) */
}

def @func_2541(%var_2525: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  %549 = cast(%var_2525, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  erf(%549) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_3010() -> Tensor[(1, 16, 4), float32] {
  @func_3008() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_11784() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) {
  %554 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) {
    %550 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %551 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
    %552 = %550.0;
    %553 = %551.0;
    (%552, %553)
  };
  %554() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) */
}

def @func_4046() -> (Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) {
  %555 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1092, 1), uint32] */;
  %556 = reshape(%555, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %557 = @func_1614(%556) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
  %558 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %559 = cast(meta[relay.Constant][28] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %560 = reshape(%559, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %561 = @func_3917(%560) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %562 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
  %563 = sigmoid(%562) /* ty=Tensor[(4, 11, 11), float32] */;
  %564 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float64") /* ty=Tensor[(4, 11, 11), float64] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="float64") /* ty=Tensor[(4, 11, 11), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %568 = %557.3;
  %569 = %558.0;
  %570 = %561.0;
  %571 = power(%566, %567) /* ty=Tensor[(4, 11, 11), float64] */;
  (%568, meta[relay.Constant][27] /* ty=Tensor[(1092, 1), uint32] */, %569, %570, meta[relay.Constant][28] /* ty=Tensor[(300), uint8] */, %571)
}

def @func_10832() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) {
  @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */
}

def @func_16019() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %572 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %573 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %574 = %572.0;
  %575 = %573.0;
  (%574, %575)
}

def @func_3476() -> Tensor[(1, 16, 4), float64] {
  %577 = fn () -> Tensor[(1, 16, 4), float64] {
    %576 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %576.0
  };
  %577() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_16899() -> (Tensor[(1, 16, 4), float64],) {
  %578 = @func_15977() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %579 = %578.0;
  (%579,)
}

def @func_9557() -> (Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) {
  @func_9555() /* ty=(Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) */
}

def @func_2885() -> (Tensor[(1, 16, 4), float32],) {
  %584 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %580 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %581 = %580.1;
    %582 = cast(%581, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %583 = sinh(%582) /* ty=Tensor[(1, 16, 4), float32] */;
    (%583,)
  };
  %584() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_15741() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
  %585 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %586 = %585.1;
  %587 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  (%586, %587)
}

def @func_12303() -> (Tensor[(1, 16, 4), float32],) {
  %590 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %588 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
    %589 = %588.0;
    (%589,)
  };
  %590() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_2730() -> Tensor[(1, 16, 4), float32] {
  @func_2661() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_13539(%var_13537: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32],) {
  @func_13536(%var_13537) /* ty=(Tensor[(6, 2, 13), float32],) */
}

def @func_4241() -> (Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) {
  %591 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %592 = cast(meta[relay.Constant][30] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
  %593 = reshape(%592, newshape=[5, 2, 7]) /* ty=Tensor[(5, 2, 7), int32] */;
  %594 = %591.1;
  %595 = @func_3539(%593) /* ty=Tensor[(5, 2, 7), int32] */;
  (%594, %595, meta[relay.Constant][30] /* ty=Tensor[(70), int32] */)
}

def @func_10881() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  @func_10879() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */
}

def @func_12865() -> Tensor[(1, 16, 4), float32] {
  %597 = fn () -> Tensor[(1, 16, 4), float32] {
    %596 = @func_12365() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %596.0
  };
  %597() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_11927() -> (Tensor[(900), float64],) {
  %598 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
  %599 = %598.0;
  (%599,)
}

def @func_3247() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %606 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
    %600 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %601 = %600.0;
    %602 = cast(%601, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %603 = cast(%601, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %604 = sigmoid(%602) /* ty=Tensor[(1, 16, 4), float64] */;
    %605 = acosh(%603) /* ty=Tensor[(1, 16, 4), float32] */;
    (%604, %605)
  };
  %606() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_14834() -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %616 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
    %607 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %608 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
    %609 = @func_9555() /* ty=(Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) */;
    %610 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %611 = %607.0;
    %612 = %608.0;
    %613 = @func_2592() /* ty=Tensor[(900), float64] */;
    %614 = %609.7;
    %615 = %610.0;
    (%611, %612, %613, %614, %615)
  };
  %616() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_15358() -> Tensor[(70), int32] {
  @func_15356() /* ty=Tensor[(70), int32] */
}

def @func_3040() -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) {
  %623 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) {
    %617 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %618 = cast(meta[relay.Constant][31] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %619 = reshape(%618, newshape=[624]) /* ty=Tensor[(624), float32] */;
    %620 = @func_2649(%619) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %621 = %617.0;
    %622 = %620.4;
    (%621, %622, meta[relay.Constant][31] /* ty=Tensor[(624), float32] */)
  };
  %623() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */
}

def @func_8054() -> Tensor[(1, 16, 4), float32] {
  @func_8052() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_12448() -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(1092), uint32]) {
  %630 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(1092), uint32]) {
    %624 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %625 = cast(meta[relay.Constant][32] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %626 = reshape(%625, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %627 = @func_3962(%626) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %628 = %624.0;
    %629 = %627.2;
    (%628, %629, meta[relay.Constant][32] /* ty=Tensor[(1092), uint32] */)
  };
  %630() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(1092), uint32]) */
}

def @func_5652() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
  @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */
}

def @func_4243() -> (Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) {
  @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */
}

def @func_6700(%var_6699: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %641 = fn (%var_6646: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
    %631 = @func_5833() /* ty=(Tensor[(900), float64],) */;
    %632 = cast(%var_6646, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %633 = reshape(%632, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %634 = @func_2297(%633) /* ty=(Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %635 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
    %636 = %631.0;
    %637 = %634.1;
    %638 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
    %639 = @func_2592() /* ty=Tensor[(900), float64] */;
    %640 = %635.0;
    (%636, %637, %var_6646, %638, %639, %640)
  };
  %641(%var_6699) /* ty=(Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */
}

def @func_5835() -> (Tensor[(900), float64],) {
  @func_5833() /* ty=(Tensor[(900), float64],) */
}

def @func_10955() -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  @func_10953() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) */
}

def @func_11343() -> (Tensor[(1, 16, 4), float32],) {
  @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_4169() -> (Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) {
  %642 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %643 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %644 = reshape(%643, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %645 = %642.0;
  %646 = @func_2541(%644) /* ty=Tensor[(8, 6, 13), float32] */;
  %647 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
  (%645, %646, meta[relay.Constant][33] /* ty=Tensor[(624), float32] */, %647)
}

def @func_10322(%var_10256: Tensor[(4, 16, 4), float32], %var_10317: Tensor[(8, 78), float32]) -> (Tensor[(1092), uint32], Tensor[(546, 2), uint32], Tensor[(4, 16, 4), float64], Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(8, 78), float32]) {
  %648 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 2), uint32] */, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
  %649 = reshape(%648, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %650 = @func_9688(%649) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool]) */;
  %651 = cast(%var_10256, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %652 = cos(%651) /* ty=Tensor[(4, 16, 4), float64] */;
  %653 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  %654 = cast(%653, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %655 = cast(%var_10256, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %656 = less_equal(%654, %655) /* ty=Tensor[(4, 16, 4), bool] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %658 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%652, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %661 = @func_7212() /* ty=(Tensor[(900), float64],) */;
  %662 = cast(%var_10317, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
  %663 = reshape(%662, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %664 = @func_2649(%663) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %665 = %650.2;
  %666 = minimum(%659, %660) /* ty=Tensor[(4, 16, 4), float64] */;
  %667 = %661.0;
  %668 = %664.4;
  (%665, meta[relay.Constant][34] /* ty=Tensor[(546, 2), uint32] */, %666, %667, %668, %var_10317)
}

def @func_3120() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %672 = fn () -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
    %669 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %670 = %669.1;
    %671 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
    (%670, %671)
  };
  %672() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_5170() -> (Tensor[(8, 6, 13), float32],) {
  %673 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  (%673,)
}

def @func_13258(%var_13255: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
  %674 = cast(%var_13255, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %675 = reshape(%674, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %676 = @func_8965(%675) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(900), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */;
  %677 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %678 = %676.4;
  (%677, %678, %var_13255)
}

def @func_13614() -> Tensor[(?, 16, 4), bool] {
  @func_13612() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_7459() -> (Tensor[(4, 11, 11), float64],) {
  @func_7457() /* ty=(Tensor[(4, 11, 11), float64],) */
}

def @func_14160() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float64], Tensor[(900), float64]) {
  %687 = fn () -> (Tensor[(900), float64], Tensor[(8, 6, 13), float64], Tensor[(900), float64]) {
    %679 = @func_5833() /* ty=(Tensor[(900), float64],) */;
    %680 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
    %681 = %680.0;
    %682 = cast(%681, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
    %683 = reshape(%682, newshape=[624]) /* ty=Tensor[(624), float32] */;
    %684 = @func_2649(%683) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %685 = %679.0;
    %686 = %684.0;
    (%685, %681, %686)
  };
  %687() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float64], Tensor[(900), float64]) */
}

def @func_15356() -> Tensor[(70), int32] {
  %688 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %688.2
}

def @func_12778(%var_12776: Tensor[(9, 3, 14), int32]) -> (Tensor[(9, 3, 14), int32],) {
  @func_12775(%var_12776) /* ty=(Tensor[(9, 3, 14), int32],) */
}

def @func_14196() -> (Tensor[(1, 16, 4), float32],) {
  %689 = @func_2730() /* ty=Tensor[(1, 16, 4), float32] */;
  (%689,)
}

def @func_12700() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 16, 4), float64], Tensor[(1320), bool], Tensor[(900), float64]) {
  %690 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %691 = cast(meta[relay.Constant][35] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %692 = reshape(%691, newshape=[2, 660]) /* ty=Tensor[(2, 660), bool] */;
  %693 = @func_11410(%692) /* ty=(Tensor[(900), float64], Tensor[(11, 10, 12), bool], Tensor[(2, 660), float64], Tensor[(4, 16, 4), float64]) */;
  %694 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %695 = %690.1;
  %696 = %693.3;
  %697 = %694.1;
  (%695, %696, meta[relay.Constant][35] /* ty=Tensor[(1320), bool] */, %697)
}

def @func_830(%var_828: Tensor[(2, 15, 10), uint8], %var_829: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
  %702 = fn (%var_819: Tensor[(2, 15, 10), uint8], %var_820: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
    %698 = cast(%var_820, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
    %699 = shape_of(%var_819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%var_819, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%700, %701) /* ty=Tensor[(2, 15, 10), uint8] */
  };
  %702(%var_828, %var_829) /* ty=Tensor[(2, 15, 10), uint8] */
}

def @func_2594() -> Tensor[(900), float64] {
  @func_2592() /* ty=Tensor[(900), float64] */
}

def @func_2300(%var_2298: Tensor[(1092), uint32]) -> (Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  @func_2297(%var_2298) /* ty=(Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */
}

def @func_4839(%var_4837: Tensor[(11, 10, 15), float32]) -> Tensor[(11, 10, 15), float32] {
  @func_4836(%var_4837) /* ty=Tensor[(11, 10, 15), float32] */
}

def @func_4829() -> (Tensor[(1, 16, 4), float64],) {
  %703 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %704 = %703.0;
  (%704,)
}

def @func_14735(%var_14733: Tensor[(2, 56), uint32]) -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) {
  @func_14732(%var_14733) /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) */
}

def @func_14579() -> (Tensor[(1, 16, 4), float64],) {
  @func_14577() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_16958() -> (Tensor[(4, 11, 11), float64],) {
  @func_16956() /* ty=(Tensor[(4, 11, 11), float64],) */
}

def @func_10997() -> (Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  @func_10995() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_16359() -> (Tensor[(900), float64], Tensor[(?, 16, 4), bool], Tensor[(15, 1, 6), float32]) {
  %705 = @func_12485() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
  %706 = @func_15600() /* ty=(Tensor[(70), int32], Tensor[(?, 16, 4), bool]) */;
  %707 = @func_12812() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) */;
  %708 = %705.1;
  %709 = %706.1;
  %710 = %707.1;
  (%708, %709, %710)
}

def @func_8518(%var_8517: Tensor[(100), float64]) -> (Tensor[(8, 6, 13), float32], Tensor[(10, 2, 5), float64], Tensor[(100), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 16, 4), float32]) {
  %720 = fn (%var_8498: Tensor[(100), float64]) -> (Tensor[(8, 6, 13), float32], Tensor[(10, 2, 5), float64], Tensor[(100), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 16, 4), float32]) {
    %711 = @func_6786() /* ty=(Tensor[(8, 6, 13), float32],) */;
    %712 = cast(%var_8498, dtype="float64") /* ty=Tensor[(100), float64] */;
    %713 = reshape(%712, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), float64] */;
    %714 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
    %715 = @func_5431() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */;
    %716 = %711.0;
    %717 = @func_3053(%713) /* ty=Tensor[(10, 2, 5), float64] */;
    %718 = %714.1;
    %719 = %715.0;
    (%716, %717, %var_8498, %718, %719)
  };
  %720(%var_8517) /* ty=(Tensor[(8, 6, 13), float32], Tensor[(10, 2, 5), float64], Tensor[(100), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 16, 4), float32]) */
}

def @func_15977() -> (Tensor[(1, 16, 4), float64],) {
  %721 = @func_15874() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) */;
  %722 = %721.0;
  (%722,)
}

def @func_7172() -> Tensor[(1, 16, 4), float64] {
  @func_7170() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_2254(%var_2253: Tensor[(1092, 1), uint32]) -> (Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) {
  %732 = fn (%var_2250: Tensor[(1092, 1), uint32]) -> (Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) {
    %723 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
    %724 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 12), float32] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %727 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(1092, 1), uint32] */;
    %728 = reshape(%727, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %729 = @func_1614(%728) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
    %730 = mod(%725, %726) /* ty=Tensor[(5, 14, 12), float32] */;
    %731 = %729.1;
    (%730, %731, %var_2250)
  };
  %732(%var_2253) /* ty=(Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) */
}

def @func_10689(%var_10687: uint64, %var_10688: Tensor[(1, 210), uint64]) -> (Tensor[(11, 10, 15), float32], Tensor[(1, 210), uint64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(1, 16, 4), uint8]) {
  %747 = fn (%var_10675: uint64, %var_10676: Tensor[(1, 210), uint64]) -> (Tensor[(11, 10, 15), float32], Tensor[(1, 210), uint64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(1, 16, 4), uint8]) {
    %733 = cast(%var_10675, dtype="uint64") /* ty=uint64 */;
    %734 = cast(%var_10676, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
    %735 = reshape(%733, newshape=[]) /* ty=uint64 */;
    %736 = reshape(%734, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), uint64] */;
    %737 = @func_5458(%735, %736) /* ty=(Tensor[(7, 6, 5), uint64], Tensor[(11, 10, 15), float32], Tensor[(5, 330), float32]) */;
    %738 = cast(meta[relay.Constant][38] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %739 = reshape(%738, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %740 = @func_2819(%739) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(405), float32], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(300), uint8], Tensor[(7, 13, 11), float64]) */;
    %741 = @func_7170() /* ty=Tensor[(1, 16, 4), float64] */;
    %742 = cast(%741, dtype="uint8") /* ty=Tensor[(1, 16, 4), uint8] */;
    %743 = cast(%var_10675, dtype="uint8") /* ty=uint8 */;
    %744 = %737.1;
    %745 = %740.2;
    %746 = add(%742, %743) /* ty=Tensor[(1, 16, 4), uint8] */;
    (%744, %var_10676, %745, meta[relay.Constant][38] /* ty=Tensor[(1092), uint32] */, %746)
  };
  %747(%var_10687, %var_10688) /* ty=(Tensor[(11, 10, 15), float32], Tensor[(1, 210), uint64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(1, 16, 4), uint8]) */
}

def @func_5507() -> (Tensor[(900), float64], Tensor[(900), float64]) {
  %751 = fn () -> (Tensor[(900), float64], Tensor[(900), float64]) {
    %748 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %749 = %748.1;
    %750 = @func_5227() /* ty=Tensor[(900), float64] */;
    (%749, %750)
  };
  %751() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */
}

def @func_8774() -> Tensor[(1, 16, 4), float64] {
  %753 = fn () -> Tensor[(1, 16, 4), float64] {
    %752 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %752.0
  };
  %753() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_10995() -> (Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %754 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
  %755 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  %756 = @func_9932() /* ty=Tensor[(900), float64] */;
  %757 = %754.1;
  (%755, %756, %757)
}

def @func_14250() -> (Tensor[(1, 16, 4), float64],) {
  @func_14248() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_14095() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %761 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
    %758 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %759 = %758.0;
    %760 = @func_13596() /* ty=Tensor[(1, 16, 4), float64] */;
    (%759, %760)
  };
  %761() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_13892() -> Tensor[(1, 16, 4), float64] {
  %763 = fn () -> Tensor[(1, 16, 4), float64] {
    %762 = @func_11562() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) */;
    %762.0
  };
  %763() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_12073() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %768 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
    %764 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %765 = @func_11842() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %766 = %764.0;
    %767 = %765.0;
    (%766, %767)
  };
  %768() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_1614(%var_1595: Tensor[(1092), uint32]) -> (Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) {
  %769 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
  %770 = cast(meta[relay.Constant][40] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %771 = cast(%var_1595, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %772 = reshape(%770, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %773 = reshape(%771, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %774 = @func_1081(%772, %773) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %775 = atan(%769) /* ty=Tensor[(7, 13, 11), float64] */;
  %776 = %774.3;
  (%775, %776, meta[relay.Constant][40] /* ty=Tensor[(405), float32] */, %var_1595)
}

def @func_10830() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) {
  %777 = @func_2904() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %778 = %777.1;
  %779 = @func_10191() /* ty=Tensor[(?, 16, 4), bool] */;
  %780 = @func_2592() /* ty=Tensor[(900), float64] */;
  (%778, %779, %780)
}

def @func_13840() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) {
  @func_13838() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */
}

def @func_5227() -> Tensor[(900), float64] {
  %781 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %781.0
}

def @func_11026() -> Tensor[(1, 16, 4), float32] {
  %782 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %782.0
}

def @func_3439(%var_3438: Tensor[(624), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) {
  %789 = fn (%var_3411: Tensor[(624), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) {
    %783 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %784 = cast(%var_3411, dtype="float32") /* ty=Tensor[(624), float32] */;
    %785 = reshape(%784, newshape=[624]) /* ty=Tensor[(624), float32] */;
    %786 = @func_2649(%785) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %787 = %783.0;
    %788 = %786.0;
    (%787, %788, %var_3411)
  };
  %789(%var_3438) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) */
}

def @func_7314() -> (Tensor[(12, 5, 15), float64],) {
  %790 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %791 = %790.1;
  (%791,)
}

def @func_7316() -> (Tensor[(12, 5, 15), float64],) {
  @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */
}

def @func_9373(%var_9321: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) {
  %792 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %793 = @func_8329() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %794 = cast(%var_9321, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %795 = reshape(%794, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %796 = @func_6970(%795) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %797 = @func_8411() /* ty=(Tensor[(?, 16, 4), bool],) */;
  %798 = %792.0;
  %799 = %793.0;
  %800 = %796.2;
  %801 = %797.0;
  %802 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  (%798, %799, %800, %var_9321, %801, %802)
}

def @func_4811() -> (Tensor[(1, 16, 4), float32],) {
  %807 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %803 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %804 = %803.1;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %806 = acos(%805) /* ty=Tensor[(1, 16, 4), float32] */;
    (%806,)
  };
  %807() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_7771() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %812 = fn () -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
    %808 = @func_7212() /* ty=(Tensor[(900), float64],) */;
    %809 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %810 = %808.0;
    %811 = %809.0;
    (%810, %811)
  };
  %812() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_10910() -> Tensor[(12, 5, 15), float64] {
  %813 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %813.0
}

def @func_11175(%var_11173: Tensor[(14, 78), uint32]) -> (Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) {
  @func_11172(%var_11173) /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) */
}

def @func_13536(%var_13531: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32],) {
  %814 = cast(%var_13531, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %815 = cos(%814) /* ty=Tensor[(6, 2, 13), float32] */;
  (%815,)
}

def @func_4453() -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %819 = fn () -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
    %816 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %817 = %816.0;
    %818 = @func_3684() /* ty=Tensor[(12, 5, 15), float64] */;
    (%817, %818)
  };
  %819() /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */
}

def @func_844(%var_838: Tensor[(14, 6, 13), uint32]) -> Tensor[(14, 6, 13), bool] {
  %820 = cast(%var_838, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %821 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 6, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 6, 13), uint32] */, dtype="bool") /* ty=Tensor[(14, 6, 13), bool] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%822, %823) /* ty=Tensor[(14, 6, 13), bool] */
}

def @func_2988(%var_2986: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  @func_2985(%var_2986) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */
}

def @func_9235(%var_9233: int32, %var_9234: Tensor[(2, 2, 11), int32]) -> (Tensor[(2, 2, 11), bool], Tensor[(624), float32]) {
  %829 = fn (%var_9219: int32, %var_9220: Tensor[(2, 2, 11), int32]) -> (Tensor[(2, 2, 11), bool], Tensor[(624), float32]) {
    %824 = cast(%var_9219, dtype="bool") /* ty=bool */;
    %825 = cast(%var_9220, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
    %826 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
    %827 = greater(%824, %825) /* ty=Tensor[(2, 2, 11), bool] */;
    %828 = %826.2;
    (%827, %828)
  };
  %829(%var_9233, %var_9234) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(624), float32]) */
}

def @func_4536() -> (Tensor[(1, 16, 4), float32],) {
  %830 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %831 = %830.0;
  (%831,)
}

def @func_13598() -> Tensor[(1, 16, 4), float64] {
  @func_13596() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_12366() -> (Tensor[(1, 16, 4), float32],) {
  %834 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %832 = @func_9782() /* ty=(Tensor[(1, 13), uint16], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %833 = %832.2;
    (%833,)
  };
  %834() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_14694() -> (Tensor[(1, 16, 4), float64],) {
  %835 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %836 = %835.0;
  (%836,)
}

def @func_4836(%var_4832: Tensor[(11, 10, 15), float32]) -> Tensor[(11, 10, 15), float32] {
  %837 = cast(%var_4832, dtype="float32") /* ty=Tensor[(11, 10, 15), float32] */;
  rsqrt(%837) /* ty=Tensor[(11, 10, 15), float32] */
}

def @func_12569() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64]) {
  %838 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %839 = @func_5321() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %840 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %841 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %842 = %838.1;
  %843 = %839.0;
  %844 = %840.3;
  %845 = %841.1;
  %846 = @func_9932() /* ty=Tensor[(900), float64] */;
  (%842, %843, %844, %845, %846)
}

def @func_3055(%var_3054: Tensor[(10, 2, 5), float64]) -> Tensor[(10, 2, 5), float64] {
  %851 = fn (%var_3049: Tensor[(10, 2, 5), float64]) -> Tensor[(10, 2, 5), float64] {
    %847 = cast(%var_3049, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
    %848 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(10, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%849, %850) /* ty=Tensor[(10, 2, 5), float64] */
  };
  %851(%var_3054) /* ty=Tensor[(10, 2, 5), float64] */
}

def @func_2865() -> (Tensor[(1, 16, 4), float32],) {
  %856 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %852 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %853 = %852.1;
    %854 = cast(%853, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %855 = exp(%854) /* ty=Tensor[(1, 16, 4), float32] */;
    (%855,)
  };
  %856() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_16616(%var_16614: Tensor[(156), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(8, 6, 13), int8], Tensor[(6, 2, 13), float32], Tensor[(156), float32]) {
  @func_16613(%var_16614) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(8, 6, 13), int8], Tensor[(6, 2, 13), float32], Tensor[(156), float32]) */
}

def @func_7146() -> (Tensor[(900), float64],) {
  %857 = @func_2835() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
  %858 = %857.0;
  (%858,)
}

def @func_16240() -> (Tensor[(1, 16, 4), float64], Tensor[(300), uint8], Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  @func_16238() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(300), uint8], Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_10879() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  %859 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %860 = @func_10191() /* ty=Tensor[(?, 16, 4), bool] */;
  %861 = %859.2;
  (%860, %861)
}

def @func_16658(%var_16657: Tensor[(4, 12, 12), float32]) -> Tensor[(4, 12, 12), float32] {
  %863 = fn (%var_16638: Tensor[(4, 12, 12), float32]) -> Tensor[(4, 12, 12), float32] {
    %862 = cast(%var_16638, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
    log2(%862) /* ty=Tensor[(4, 12, 12), float32] */
  };
  %863(%var_16657) /* ty=Tensor[(4, 12, 12), float32] */
}

def @func_4048() -> (Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) {
  @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */
}

def @func_4336() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) {
  %868 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) {
    %864 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %865 = @func_4046() /* ty=(Tensor[(1092), uint32], Tensor[(1092, 1), uint32], Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(4, 11, 11), float64]) */;
    %866 = %864.0;
    %867 = %865.5;
    (%866, %867)
  };
  %868() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */
}

def @func_3096(%var_3095: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(5, 14, 12), float32], Tensor[(1092), uint32]) {
  %874 = fn (%var_3083: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(5, 14, 12), float32], Tensor[(1092), uint32]) {
    %869 = cast(%var_3083, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %870 = reshape(%869, newshape=[1092, 1]) /* ty=Tensor[(1092, 1), uint32] */;
    %871 = @func_2252(%870) /* ty=(Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) */;
    %872 = @func_2592() /* ty=Tensor[(900), float64] */;
    %873 = %871.0;
    (%872, %873, %var_3083)
  };
  %874(%var_3095) /* ty=(Tensor[(900), float64], Tensor[(5, 14, 12), float32], Tensor[(1092), uint32]) */
}

def @func_9555() -> (Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) {
  %875 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %876 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %877 = %876.1;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %879 = exp(%878) /* ty=Tensor[(8, 6, 13), float32] */;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %881 = @func_8611() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %882 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %883 = @func_5780() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %884 = cast(%879, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %885 = %875.1;
  %886 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %887 = acos(%880) /* ty=Tensor[(8, 6, 13), float32] */;
  %888 = @func_3684() /* ty=Tensor[(12, 5, 15), float64] */;
  %889 = %881.1;
  %890 = %882.1;
  %891 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
  %892 = %883.1;
  %893 = log10(%884) /* ty=Tensor[(8, 6, 13), float64] */;
  (%885, %886, %887, %888, %889, %890, %891, %892, %893)
}

def @func_10014(%var_10012: Tensor[(112), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(112), uint32]) {
  @func_10011(%var_10012) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(112), uint32], Tensor[(112), uint32]) */
}

def @func_8224() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %894 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %895 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %896 = %894.0;
  %897 = %895.0;
  (%896, %897)
}

def @func_3570(%var_3568: Tensor[(6, 10, 15), float64]) -> (Tensor[(6, 10, 15), float64],) {
  @func_3567(%var_3568) /* ty=(Tensor[(6, 10, 15), float64],) */
}

def @func_6747() -> (Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) {
  @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */
}

def @func_16884() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  @func_16882() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) */
}

def @func_9376(%var_9374: Tensor[(1092), uint32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) {
  @func_9373(%var_9374) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float64]) */
}

def @func_12546() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
  %898 = @func_12365() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %899 = %898.0;
  %900 = @func_9932() /* ty=Tensor[(900), float64] */;
  (%899, %900)
}

def @func_16930() -> Tensor[(1, 16, 4), float64] {
  @func_9475() /* ty=Tensor[(1, 16, 4), float64] */
}

def @func_16510(%var_16509: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(14, 6, 13), bool]) {
  %911 = fn (%var_16488: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(14, 6, 13), bool]) {
    %901 = @func_12546() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */;
    %902 = cast(%var_16488, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %903 = reshape(%902, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %904 = @func_14592(%903) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) */;
    %905 = cast(%var_16488, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %906 = reshape(%905, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %907 = @func_6698(%906) /* ty=(Tensor[(900), float64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
    %908 = %901.0;
    %909 = %904.1;
    %910 = %907.1;
    (%908, %909, %var_16488, %910)
  };
  %911(%var_16509) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(14, 6, 13), bool]) */
}

def @func_12752() -> Tensor[(12, 5, 15), float64] {
  @func_12750() /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_2651(%var_2650: Tensor[(624), float32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %924 = fn (%var_2628: Tensor[(624), float32]) -> (Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
    %912 = @func_2592() /* ty=Tensor[(900), float64] */;
    %913 = cast(%912, dtype="float64") /* ty=Tensor[(900), float64] */;
    %914 = reshape(%913, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
    %915 = @func_798(%914) /* ty=(Tensor[(12, 5, 15), float64],) */;
    %916 = cast(%var_2628, dtype="float32") /* ty=Tensor[(624), float32] */;
    %917 = reshape(%916, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
    %918 = cast(meta[relay.Constant][43] /* ty=Tensor[(1092), uint32] */, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %919 = reshape(%918, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %920 = @func_1614(%919) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
    %921 = %915.0;
    %922 = @func_2541(%917) /* ty=Tensor[(8, 6, 13), float32] */;
    %923 = %920.1;
    (%912, %921, %922, %var_2628, %923, meta[relay.Constant][43] /* ty=Tensor[(1092), uint32] */)
  };
  %924(%var_2650) /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */
}

def @func_10708() -> Tensor[(900), float64] {
  @func_5227() /* ty=Tensor[(900), float64] */
}

def @func_13329() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  @func_13327() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) */
}

def @func_800(%var_799: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64],) {
  %930 = fn (%var_768: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64],) {
    %925 = cast(%var_768, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %926 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %927 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %929 = mod(%927, %928) /* ty=Tensor[(12, 5, 15), float64] */;
    (%929,)
  };
  %930(%var_799) /* ty=(Tensor[(12, 5, 15), float64],) */
}

def @func_4831() -> (Tensor[(1, 16, 4), float64],) {
  @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_5377() -> (Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) {
  %931 = @func_4810() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %932 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %933 = reshape(%932, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %934 = @func_3917(%933) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) */;
  %935 = %931.0;
  %936 = %934.3;
  (%935, %936, meta[relay.Constant][45] /* ty=Tensor[(300), uint8] */)
}

def @func_8613() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  @func_8611() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_14577() -> (Tensor[(1, 16, 4), float64],) {
  %937 = @func_2904() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %938 = %937.0;
  %939 = cast(%938, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %940 = cosh(%939) /* ty=Tensor[(1, 16, 4), float64] */;
  (%940,)
}

def @func_15146(%var_15142: Tensor[(8, 16, 4), float32], %var_15143: Tensor[(1650), float64], %var_15144: Tensor[(378), int32], %var_15145: Tensor[(3, 52), float32]) -> (Tensor[(8, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(11, 10, 15), float64], Tensor[(1650), float64], Tensor[(9, 3, 14), int32], Tensor[(378), int32], Tensor[(6, 2, 13), float32], Tensor[(3, 52), float32]) {
  @func_15140(%var_15142, %var_15143, %var_15144, %var_15145) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(11, 10, 15), float64], Tensor[(1650), float64], Tensor[(9, 3, 14), int32], Tensor[(378), int32], Tensor[(6, 2, 13), float32], Tensor[(3, 52), float32]) */
}

def @func_7905(%var_7903: Tensor[(11, 10, 12), bool], %var_7904: Tensor[(11, 10, 12), bool]) -> Tensor[(11, 10, 12), bool] {
  %945 = fn (%var_7889: Tensor[(11, 10, 12), bool], %var_7890: Tensor[(11, 10, 12), bool]) -> Tensor[(11, 10, 12), bool] {
    %941 = cast(%var_7890, dtype="bool") /* ty=Tensor[(11, 10, 12), bool] */;
    %942 = shape_of(%var_7889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%var_7889, dtype="bool") /* ty=Tensor[(11, 10, 12), bool] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%943, %944) /* ty=Tensor[(11, 10, 12), bool] */
  };
  %945(%var_7903, %var_7904) /* ty=Tensor[(11, 10, 12), bool] */
}

def @func_15979() -> (Tensor[(1, 16, 4), float64],) {
  @func_15977() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_7214() -> (Tensor[(900), float64],) {
  @func_7212() /* ty=(Tensor[(900), float64],) */
}

def @func_10125() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  %946 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %947 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  %948 = %946.2;
  (%947, %948)
}

def @func_5576() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) {
  @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */
}

def @func_10076() -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
  @func_10074() /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_9005() -> Tensor[(1, 16, 4), float32] {
  @func_9003() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_2297(%var_2295: Tensor[(1092), uint32]) -> (Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %949 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %950 = exp(%949) /* ty=Tensor[(15, 2, 1), float32] */;
  %951 = cast(%950, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
  %952 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(15, 2, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 2, 1), float32] */, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %955 = cast(%var_2295, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %956 = reshape(%955, newshape=[1092, 1]) /* ty=Tensor[(1092, 1), uint32] */;
  %957 = @func_2252(%956) /* ty=(Tensor[(5, 14, 12), float32], Tensor[(14, 6, 13), bool], Tensor[(1092, 1), uint32]) */;
  %958 = bitwise_xor(%953, %954) /* ty=Tensor[(15, 2, ?), uint64] */;
  %959 = %957.1;
  (%958, %959, %var_2295)
}

def @func_15526() -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %960 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %961 = @func_13372() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %962 = %960.0;
  %963 = %961.0;
  (%962, %963)
}

def @func_15640() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %964 = @func_14694() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %965 = @func_15383() /* ty=Tensor[(1, 16, 4), float32] */;
  %966 = %964.0;
  (%965, %966)
}

def @func_6560() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) {
  @func_6558() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(300), uint8], Tensor[(300), uint8], Tensor[(900), float64]) */
}

def @func_8292(%var_8290: Tensor[(6, 12, 5), float32], %var_8291: Tensor[(6, 12, 5), bool]) -> (Tensor[(1, 16, 4), float32], Tensor[(6, 12, 5), float64]) {
  %979 = fn (%var_8278: Tensor[(6, 12, 5), float32], %var_8284: Tensor[(6, 12, 5), bool]) -> (Tensor[(1, 16, 4), float32], Tensor[(6, 12, 5), float64]) {
    %967 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %968 = cast(%var_8278, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
    %969 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(6, 12, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %972 = less(%970, %971) /* ty=Tensor[(6, 12, 5), bool] */;
    %973 = cast(%var_8284, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
    %974 = shape_of(%972, dtype="int32") /* ty=Tensor[(3), int32] */;
    %975 = cast(%972, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
    %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %977 = %967.0;
    %978 = floor_mod(%975, %976) /* ty=Tensor[(6, 12, 5), float64] */;
    (%977, %978)
  };
  %979(%var_8290, %var_8291) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(6, 12, 5), float64]) */
}

def @func_6745() -> (Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) {
  %980 = @func_4943() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %981 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
  %982 = %980.0;
  (%981, %982)
}

def @func_10953() -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  %983 = @func_8802() /* ty=Tensor[(1, 16, 4), float64] */;
  %984 = @func_9455() /* ty=Tensor[(?, 16, 4), bool] */;
  (%983, %984)
}

def @func_13612() -> Tensor[(?, 16, 4), bool] {
  %985 = @func_10995() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %985.0
}

def @func_16560() -> (Tensor[(1, 16, 4), float32],) {
  %988 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %986 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
    %987 = %986.0;
    (%987,)
  };
  %988() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_8127() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %993 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
    %989 = @func_4612() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %990 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %991 = %989.1;
    %992 = %990.0;
    (%991, %992)
  };
  %993() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_15474() -> Tensor[(1, 16, 4), float32] {
  @func_15472() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_14198() -> (Tensor[(1, 16, 4), float32],) {
  @func_14196() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_4380() -> Tensor[(8, 6, 13), float32] {
  %994 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %994.1
}

def @func_11091() -> (Tensor[(1, 16, 4), float32], Tensor[(624), float32]) {
  %999 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(624), float32]) {
    %995 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %996 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
    %997 = %995.0;
    %998 = %996.2;
    (%997, %998)
  };
  %999() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(624), float32]) */
}

def @func_14888() -> Tensor[(300), uint8] {
  @func_14886() /* ty=Tensor[(300), uint8] */
}

def @func_15875() -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) {
  %1004 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) {
    %1000 = @func_10023() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %1001 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
    %1002 = %1000.0;
    %1003 = %1001.0;
    (%1002, %1003)
  };
  %1004() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float64]) */
}

def @func_16361() -> (Tensor[(900), float64], Tensor[(?, 16, 4), bool], Tensor[(15, 1, 6), float32]) {
  @func_16359() /* ty=(Tensor[(900), float64], Tensor[(?, 16, 4), bool], Tensor[(15, 1, 6), float32]) */
}

def @func_15045(%var_15044: Tensor[(3, 2, 5), float64]) -> Tensor[(3, 2, 5), float64] {
  %1006 = fn (%var_15039: Tensor[(3, 2, 5), float64]) -> Tensor[(3, 2, 5), float64] {
    %1005 = cast(%var_15039, dtype="float64") /* ty=Tensor[(3, 2, 5), float64] */;
    cos(%1005) /* ty=Tensor[(3, 2, 5), float64] */
  };
  %1006(%var_15044) /* ty=Tensor[(3, 2, 5), float64] */
}

def @func_13084() -> (Tensor[(900), float64],) {
  %1007 = @func_5833() /* ty=(Tensor[(900), float64],) */;
  %1008 = %1007.0;
  (%1008,)
}

def @func_8329() -> (Tensor[(12, 5, 15), float64],) {
  %1009 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
  %1010 = %1009.0;
  (%1010,)
}

def @func_2617() -> Tensor[(900), float64] {
  %1011 = fn () -> Tensor[(900), float64] {
    @func_2592() /* ty=Tensor[(900), float64] */
  };
  %1011() /* ty=Tensor[(900), float64] */
}

def @func_9933() -> Tensor[(900), float64] {
  %1013 = fn () -> Tensor[(900), float64] {
    %1012 = @func_7146() /* ty=(Tensor[(900), float64],) */;
    %1012.0
  };
  %1013() /* ty=Tensor[(900), float64] */
}

def @func_16445() -> Tensor[(1, 16, 4), float32] {
  %1014 = fn () -> Tensor[(1, 16, 4), float32] {
    @func_15304() /* ty=Tensor[(1, 16, 4), float32] */
  };
  %1014() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_1617(%var_1615: Tensor[(1092), uint32]) -> (Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) {
  @func_1614(%var_1615) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */
}

def @func_5574() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) {
  %1015 = @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %1016 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %1017 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %1018 = %1017.0;
  %1019 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 6, 13), float32] */, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %1020 = shape_of(%1018, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1021 = cast(%1018, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1023 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
  %1024 = %1015.0;
  %1025 = %1016.0;
  %1026 = greater_equal(%1021, %1022) /* ty=Tensor[(8, 6, 13), bool] */;
  %1027 = %1023.3;
  (%1024, %1025, %1026, %1027)
}

def @func_3567(%var_3547: Tensor[(6, 10, 15), float64]) -> (Tensor[(6, 10, 15), float64],) {
  %1028 = cast(%var_3547, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
  %1029 = exp(%1028) /* ty=Tensor[(6, 10, 15), float64] */;
  (%1029,)
}

def @func_15423() -> (Tensor[(1, 16, 4), float32],) {
  %1030 = @func_11341() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_2592() -> Tensor[(900), float64] {
  %1032 = @func_2518() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
  %1032.2
}

def @func_6972(%var_6971: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %1039 = fn (%var_6941: Tensor[(1092), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
    %1033 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1034 = cast(%var_6941, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %1035 = reshape(%1034, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
    %1036 = %1033.0;
    %1037 = @func_5219() /* ty=Tensor[(1, 16, 4), float32] */;
    %1038 = @func_844(%1035) /* ty=Tensor[(14, 6, 13), bool] */;
    (%1036, %1037, %1038, %var_6941)
  };
  %1039(%var_6971) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */
}

def @func_9903() -> (Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), int16], Tensor[(900), float64]) {
  @func_9901() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), int16], Tensor[(900), float64]) */
}

def @func_13504() -> (Tensor[(1, 16, 4), float32],) {
  %1040 = @func_8844() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1041 = %1040.1;
  (%1041,)
}

def @func_13516() -> (Tensor[(1, 16, 4), float32],) {
  @func_13514() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_14592(%var_14589: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(1092), uint32]) {
  %1042 = @func_6745() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(12, 5, 15), float64]) */;
  %1043 = cast(%var_14589, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
  %1044 = reshape(%1043, newshape=[14, 78]) /* ty=Tensor[(14, 78), uint32] */;
  %1045 = @func_11172(%1044) /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(14, 78), uint32]) */;
  %1046 = %1042.0;
  %1047 = @func_12152() /* ty=Tensor[(1, 16, 4), float32] */;
  %1048 = %1045.2;
  (%1046, %1047, %1048, %var_14589)
}

def @func_11640() -> Tensor[(900), float64] {
  %1050 = fn () -> Tensor[(900), float64] {
    %1049 = @func_5506() /* ty=(Tensor[(900), float64], Tensor[(900), float64]) */;
    %1049.1
  };
  %1050() /* ty=Tensor[(900), float64] */
}

def @func_15384() -> Tensor[(1, 16, 4), float32] {
  %1051 = fn () -> Tensor[(1, 16, 4), float32] {
    @func_12152() /* ty=Tensor[(1, 16, 4), float32] */
  };
  %1051() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_16882() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool]) {
  %1052 = @func_13514() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1053 = @func_14833() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(8, 6, 13), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */;
  %1054 = @func_4966() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1055 = %1054.0;
  %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
  %1057 = sqrt(%1056) /* ty=Tensor[(1, 16, 4), float64] */;
  %1058 = cast(%1057, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %1059 = shape_of(%1055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(%1055, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1062 = bitwise_and(%1060, %1061) /* ty=Tensor[(?, 16, 4), uint64] */;
  %1063 = cast(%1057, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %1064 = shape_of(%1062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(%1062, dtype="bool") /* ty=Tensor[(?, 16, 4), bool] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1067 = %1052.0;
  %1068 = %1053.0;
  %1069 = greater(%1065, %1066) /* ty=Tensor[(?, 16, 4), bool] */;
  (%1067, %1068, %1069)
}

def @func_3008() -> Tensor[(1, 16, 4), float32] {
  %1070 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1070.0
}

def @func_9457() -> Tensor[(?, 16, 4), bool] {
  @func_9455() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_16901() -> (Tensor[(1, 16, 4), float64],) {
  @func_16899() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_3539(%var_3531: Tensor[(5, 2, 7), int32]) -> Tensor[(5, 2, 7), int32] {
  %1071 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1072 = cast(%var_3531, dtype="int32") /* ty=Tensor[(5, 2, 7), int32] */;
  bitwise_or(%1071, %1072) /* ty=Tensor[(5, 2, 7), int32] */
}

def @func_5172() -> (Tensor[(8, 6, 13), float32],) {
  @func_5170() /* ty=(Tensor[(8, 6, 13), float32],) */
}

def @func_3917(%var_3912: Tensor[(300), uint8]) -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8]) {
  %1073 = @func_3039() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(14, 6, 13), bool], Tensor[(624), float32]) */;
  %1074 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
  %1075 = cast(%var_3912, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1076 = cast(%var_3912, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1077 = reshape(%1075, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %1078 = reshape(%1076, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %1079 = %1073.0;
  %1080 = %1074.0;
  %1081 = @func_827(%1077, %1078) /* ty=Tensor[(2, 15, 10), uint8] */;
  (%1079, %1080, %1081, %var_3912)
}

def @main(%var_17035: Tensor[(12, 7, 3), int8], %var_17036: Tensor[(12, 7, 3), int8]) -> (Tensor[(12, 7, 3), int8],) {
  %1082 = cast(%var_17036, dtype="int8") /* ty=Tensor[(12, 7, 3), int8] */;
  %1083 = shape_of(%var_17035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1084 = cast(%var_17035, dtype="int8") /* ty=Tensor[(12, 7, 3), int8] */;
  %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1086 = bitwise_and(%1084, %1085) /* ty=Tensor[(12, 7, 3), int8] */;
  (%1086,)
}

def @func_12037() -> (Tensor[(1, 16, 4), float32],) {
  %1089 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %1087 = @func_10995() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %1088 = %1087.2;
    (%1088,)
  };
  %1089() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_5322() -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
  %1093 = fn () -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) {
    %1090 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1091 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
    %1092 = %1090.0;
    (%1091, %1092)
  };
  %1093() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_847(%var_845: Tensor[(14, 6, 13), uint32]) -> Tensor[(14, 6, 13), bool] {
  @func_844(%var_845) /* ty=Tensor[(14, 6, 13), bool] */
}

def @func_16391() -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
  %1098 = fn () -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
    %1094 = @func_7314() /* ty=(Tensor[(12, 5, 15), float64],) */;
    %1095 = @func_13970() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1096 = %1094.0;
    %1097 = %1095.0;
    (%1096, %1097)
  };
  %1098() /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_2341(%var_2333: Tensor[(7, 2, 8), uint32]) -> (Tensor[(7, 2, 8), int32],) {
  %1099 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %1100 = cast(%var_2333, dtype="bool") /* ty=Tensor[(7, 2, 8), bool] */;
  %1101 = greater(%1099, %1100) /* ty=Tensor[(7, 2, 8), bool] */;
  %1102 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="int32") /* ty=int32 */;
  %1103 = cast(%1101, dtype="int32") /* ty=Tensor[(7, 2, 8), int32] */;
  %1104 = logical_xor(%1102, %1103) /* ty=Tensor[(7, 2, 8), int32] */;
  (%1104,)
}

def @func_16728() -> (Tensor[(1, 16, 4), float32],) {
  @func_16726() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_16632() -> (Tensor[(1, 16, 4), float32],) {
  @func_16630() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_5781() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
  %1109 = fn () -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32]) {
    %1105 = @func_4347() /* ty=(Tensor[(900), float64],) */;
    %1106 = @func_5170() /* ty=(Tensor[(8, 6, 13), float32],) */;
    %1107 = %1105.0;
    %1108 = %1106.0;
    (%1107, %1108)
  };
  %1109() /* ty=(Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */
}

def @func_14732(%var_14726: Tensor[(2, 56), uint32]) -> (Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(2, 56), uint32]) {
  %1110 = cast(%var_14726, dtype="uint32") /* ty=Tensor[(2, 56), uint32] */;
  %1111 = reshape(%1110, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %1112 = @func_2985(%1111) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */;
  %1113 = @func_10220() /* ty=Tensor[(8, 6, 13), float32] */;
  %1114 = %1112.0;
  (%1113, %1114, %var_14726)
}

def @func_16700(%var_16695: Tensor[(3, 3, 10), float64]) -> (Tensor[(3, 3, 10), float64],) {
  %1115 = cast(%var_16695, dtype="float64") /* ty=Tensor[(3, 3, 10), float64] */;
  %1116 = sin(%1115) /* ty=Tensor[(3, 3, 10), float64] */;
  (%1116,)
}

def @func_11616() -> (Tensor[(8, 6, 13), float32],) {
  %1117 = @func_4169() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(624), float32], Tensor[(1, 16, 4), float64]) */;
  %1118 = %1117.1;
  (%1118,)
}

def @func_14037(%var_14036: Tensor[(13, 12, 10), int8]) -> (Tensor[(13, 12, 10), float32],) {
  %1126 = fn (%var_14016: Tensor[(13, 12, 10), int8]) -> (Tensor[(13, 12, 10), float32],) {
    %1119 = cast(%var_14016, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
    %1120 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(13, 12, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1121 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
    %1122 = dyn.reshape(%1119, %1120, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1123 = right_shift(%1121, %1122) /* ty=Tensor[(13, 12, 10), int8] */;
    %1124 = cast(%1123, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %1125 = rsqrt(%1124) /* ty=Tensor[(13, 12, 10), float32] */;
    (%1125,)
  };
  %1126(%var_14036) /* ty=(Tensor[(13, 12, 10), float32],) */
}

def @func_12009() -> (Tensor[(1, 16, 4), float32],) {
  %1129 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %1127 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1128 = %1127.0;
    (%1128,)
  };
  %1129() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_5761() -> (Tensor[(1, 16, 4), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 70), int32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) {
  @func_5759() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(5, 2, 7), int32], Tensor[(1, 70), int32], Tensor[(7, 2, 8), int32], Tensor[(112), uint32]) */
}

def @func_11973(%var_11972: Tensor[(14, 10, 5), uint16]) -> (Tensor[(14, 10, 5), uint16], Tensor[(624), float32]) {
  %1137 = fn (%var_11931: Tensor[(14, 10, 5), uint16]) -> (Tensor[(14, 10, 5), uint16], Tensor[(624), float32]) {
    %1130 = cast(%var_11931, dtype="uint16") /* ty=Tensor[(14, 10, 5), uint16] */;
    %1131 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(14, 10, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1132 = cast(meta[relay.Constant][51] /* ty=Tensor[(14, 10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 10, 5), uint16] */;
    %1133 = dyn.reshape(%1130, %1131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1134 = @func_10125() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */;
    %1135 = minimum(%1132, %1133) /* ty=Tensor[(14, 10, 5), uint16] */;
    %1136 = %1134.1;
    (%1135, %1136)
  };
  %1137(%var_11972) /* ty=(Tensor[(14, 10, 5), uint16], Tensor[(624), float32]) */
}

def @func_11891() -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) {
  %1143 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) {
    %1138 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %1139 = @func_3119() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %1140 = %1138.0;
    %1141 = @func_11826() /* ty=Tensor[(?, 16, 4), bool] */;
    %1142 = %1139.1;
    (%1140, %1141, %1142)
  };
  %1143() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(?, 16, 4), bool], Tensor[(1, 16, 4), float32]) */
}

def @func_11618() -> (Tensor[(8, 6, 13), float32],) {
  @func_11616() /* ty=(Tensor[(8, 6, 13), float32],) */
}

def @func_4744() -> (Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  %1144 = cast(meta[relay.Constant][52] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1145 = reshape(%1144, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float64] */;
  %1146 = @func_3567(%1145) /* ty=(Tensor[(6, 10, 15), float64],) */;
  %1147 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %1148 = %1146.0;
  %1149 = @func_3008() /* ty=Tensor[(1, 16, 4), float32] */;
  (%1147, %1148, meta[relay.Constant][52] /* ty=Tensor[(900), float64] */, %1149)
}

def @func_11929() -> (Tensor[(900), float64],) {
  @func_11927() /* ty=(Tensor[(900), float64],) */
}

def @func_11725(%var_11695: Tensor[(7, 13, 3), uint32], %var_11696: Tensor[(7, 13, 3), uint32]) -> (Tensor[(7, 13, 3), uint32],) {
  %1150 = cast(%var_11696, dtype="uint32") /* ty=Tensor[(7, 13, 3), uint32] */;
  %1151 = shape_of(%var_11695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1152 = cast(%var_11695, dtype="uint32") /* ty=Tensor[(7, 13, 3), uint32] */;
  %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1154 = logical_xor(%1152, %1153) /* ty=Tensor[(7, 13, 3), uint32] */;
  (%1154,)
}

def @func_5114(%var_5111: Tensor[(6, 10, 15), float64], %var_5112: Tensor[(9, 16, 4), float64], %var_5113: Tensor[(8, 16, 4), float64]) -> (Tensor[(?, 16, 4), bool], Tensor[(8, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 78), uint32], Tensor[(1, 16, 4), float64], Tensor[(6, 10, 15), float64], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(9, 16, 4), bool], Tensor[(1092), uint32], Tensor[(8, 16, 4), bool]) {
  %1202 = fn (%var_5027: Tensor[(6, 10, 15), float64], %var_5079: Tensor[(9, 16, 4), float64], %var_5095: Tensor[(8, 16, 4), float64]) -> (Tensor[(?, 16, 4), bool], Tensor[(8, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 78), uint32], Tensor[(1, 16, 4), float64], Tensor[(6, 10, 15), float64], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(9, 16, 4), bool], Tensor[(1092), uint32], Tensor[(8, 16, 4), bool]) {
    %1155 = @func_3364() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %1156 = %1155.0;
    %1157 = @func_2701() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1158 = %1157.0;
    %1159 = cast(%1158, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %1160 = shape_of(%1156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1161 = cast(%1156, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %1162 = dyn.reshape(%1159, %1160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1163 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
    %1164 = reshape(%1163, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
    %1165 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %1166 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %1167 = %1166.1;
    %1168 = cast(%var_5027, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
    %1169 = shape_of(%1167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1170 = cast(%1167, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
    %1171 = dyn.reshape(%1168, %1169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1172 = cast(meta[relay.Constant][54] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %1173 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
    %1174 = reshape(%1172, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
    %1175 = reshape(%1173, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %1176 = @func_1081(%1174, %1175) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %1177 = cast(%1156, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %1178 = tan(%1177) /* ty=Tensor[(1, 16, 4), float64] */;
    %1179 = cast(%1158, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %1180 = shape_of(%1178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1181 = cast(%1178, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1183 = maximum(%1181, %1182) /* ty=Tensor[(?, 16, 4), float64] */;
    %1184 = cast(%1183, dtype="bool") /* ty=Tensor[(?, 16, 4), bool] */;
    %1185 = cast(%var_5079, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
    %1186 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 78), uint32] */, dtype="uint32") /* ty=Tensor[(14, 78), uint32] */;
    %1187 = cast(meta[relay.Constant][54] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %1188 = reshape(%1186, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %1189 = reshape(%1187, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %1190 = @func_3878(%1188, %1189) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(12, 14, 12), float64], Tensor[(56), uint16], Tensor[(1092), uint32], Tensor[(2, 15, 10), uint8], Tensor[(405), float32]) */;
    %1191 = cast(%1178, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %1192 = cast(%var_5095, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
    %1193 = less_equal(%1161, %1162) /* ty=Tensor[(?, 16, 4), bool] */;
    %1194 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
    %1195 = @func_844(%1164) /* ty=Tensor[(14, 6, 13), bool] */;
    %1196 = %1165.0;
    %1197 = add(%1170, %1171) /* ty=Tensor[(6, 10, 15), float64] */;
    %1198 = %1176.4;
    %1199 = greater_equal(%1184, %1185) /* ty=Tensor[(9, 16, 4), bool] */;
    %1200 = %1190.3;
    %1201 = greater(%1191, %1192) /* ty=Tensor[(8, 16, 4), bool] */;
    (%1193, %1194, %1195, meta[relay.Constant][53] /* ty=Tensor[(14, 78), uint32] */, %1196, %1197, %1198, meta[relay.Constant][54] /* ty=Tensor[(405), float32] */, %1199, %1200, %1201)
  };
  %1202(%var_5111, %var_5112, %var_5113) /* ty=(Tensor[(?, 16, 4), bool], Tensor[(8, 6, 13), float64], Tensor[(14, 6, 13), bool], Tensor[(14, 78), uint32], Tensor[(1, 16, 4), float64], Tensor[(6, 10, 15), float64], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(9, 16, 4), bool], Tensor[(1092), uint32], Tensor[(8, 16, 4), bool]) */
}

def @func_4614() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  @func_4612() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_13373() -> (Tensor[(1, 16, 4), float32],) {
  %1204 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %1203 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
    (%1203,)
  };
  %1204() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_7457() -> (Tensor[(4, 11, 11), float64],) {
  %1205 = @func_4335() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64]) */;
  %1206 = %1205.1;
  (%1206,)
}

def @func_13327() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float64]) {
  %1207 = @func_9932() /* ty=Tensor[(900), float64] */;
  %1208 = @func_6886() /* ty=Tensor[(1, 16, 4), float32] */;
  %1209 = @func_3475() /* ty=Tensor[(1, 16, 4), float64] */;
  (%1207, %1208, %1209)
}

def @func_14808(%var_14807: Tensor[(2, 312), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(2, 312), float64], Tensor[(2, 312), float32]) {
  %1223 = fn (%var_14787: Tensor[(2, 312), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(2, 312), float64], Tensor[(2, 312), float32]) {
    %1210 = @func_11783() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64]) */;
    %1211 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
    %1212 = reshape(%1211, newshape=[624]) /* ty=Tensor[(624), float32] */;
    %1213 = @func_3437(%1212) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(624), float32]) */;
    %1214 = cast(%var_14787, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
    %1215 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(2, 312), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1216 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 312), float32] */, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
    %1217 = dyn.reshape(%1214, %1215, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1218 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
    %1219 = %1210.1;
    %1220 = %1213.1;
    %1221 = divide(%1216, %1217) /* ty=Tensor[(2, 312), float64] */;
    %1222 = cos(%1218) /* ty=Tensor[(2, 312), float32] */;
    (%1219, %1220, %1221, %1222)
  };
  %1223(%var_14807) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(2, 312), float64], Tensor[(2, 312), float32]) */
}

def @func_6786() -> (Tensor[(8, 6, 13), float32],) {
  %1224 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
  %1225 = %1224.2;
  (%1225,)
}

def @func_2544(%var_2542: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  @func_2541(%var_2542) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_7148() -> (Tensor[(900), float64],) {
  @func_7146() /* ty=(Tensor[(900), float64],) */
}

def @func_4944() -> (Tensor[(12, 5, 15), float64],) {
  %1228 = fn () -> (Tensor[(12, 5, 15), float64],) {
    %1226 = @func_4452() /* ty=(Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */;
    %1227 = %1226.1;
    (%1227,)
  };
  %1228() /* ty=(Tensor[(12, 5, 15), float64],) */
}

def @func_9424(%var_9416: Tensor[(7, 156), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(7, 156), uint32]) {
  %1229 = cast(%var_9416, dtype="uint32") /* ty=Tensor[(7, 156), uint32] */;
  %1230 = reshape(%1229, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
  %1231 = @func_2297(%1230) /* ty=(Tensor[(15, 2, ?), uint64], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
  %1232 = @func_6060() /* ty=Tensor[(1, 16, 4), float32] */;
  %1233 = %1231.2;
  (%1232, %1233, %var_9416)
}

def @func_16996() -> (Tensor[(1, 16, 4), float32],) {
  %1234 = @func_15559() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 11, 11), float64], Tensor[(12, 5, 15), float64]) */;
  %1235 = %1234.0;
  (%1235,)
}

def @func_9455() -> Tensor[(?, 16, 4), bool] {
  %1236 = @func_7134() /* ty=(Tensor[(?, 16, 4), uint64], Tensor[(?, 16, 4), bool], Tensor[(?, 16, 4), bool]) */;
  %1236.1
}

def @func_7522() -> (Tensor[(8, 6, 13), float64], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64]) {
  @func_7520() /* ty=(Tensor[(8, 6, 13), float64], Tensor[(1092), uint32], Tensor[(8, 6, 13), float64]) */
}

def @func_1084(%var_1082: Tensor[(9, 5, 9), float32], %var_1083: Tensor[(1092), uint32]) -> (Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
  %1250 = fn (%var_1059: Tensor[(9, 5, 9), float32], %var_1079: Tensor[(1092), uint32]) -> (Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) {
    %1237 = cast(%var_1059, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
    %1238 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(9, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1239 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 5, 9), float32] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
    %1240 = dyn.reshape(%1237, %1238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1241 = cast(meta[relay.Constant][57] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %1242 = cast(meta[relay.Constant][57] /* ty=Tensor[(300), uint8] */, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %1243 = reshape(%1241, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1244 = reshape(%1242, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1245 = cast(%var_1079, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %1246 = reshape(%1245, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), uint32] */;
    %1247 = equal(%1239, %1240) /* ty=Tensor[(9, 5, 9), bool] */;
    %1248 = @func_827(%1243, %1244) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1249 = @func_844(%1246) /* ty=Tensor[(14, 6, 13), bool] */;
    (%1247, %1248, meta[relay.Constant][57] /* ty=Tensor[(300), uint8] */, %1249, %var_1079)
  };
  %1250(%var_1082, %var_1083) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */
}

def @func_8611() -> (Tensor[(900), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %1251 = @func_4241() /* ty=(Tensor[(900), float64], Tensor[(5, 2, 7), int32], Tensor[(70), int32]) */;
  %1252 = @func_5377() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8], Tensor[(300), uint8]) */;
  %1253 = %1251.0;
  %1254 = @func_4380() /* ty=Tensor[(8, 6, 13), float32] */;
  %1255 = @func_8052() /* ty=Tensor[(1, 16, 4), float32] */;
  %1256 = %1252.0;
  (%1253, %1254, %1255, %1256)
}

def @func_13086() -> (Tensor[(900), float64],) {
  @func_13084() /* ty=(Tensor[(900), float64],) */
}

def @func_3542(%var_3540: Tensor[(5, 2, 7), int32]) -> Tensor[(5, 2, 7), int32] {
  @func_3539(%var_3540) /* ty=Tensor[(5, 2, 7), int32] */
}

def @func_13261(%var_13259: Tensor[(1092), uint32]) -> (Tensor[(8, 6, 13), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) {
  @func_13258(%var_13259) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(7, 13, 11), float64], Tensor[(1092), uint32]) */
}

def @func_12944() -> (Tensor[(8, 6, 13), float32],) {
  @func_12942() /* ty=(Tensor[(8, 6, 13), float32],) */
}

def @func_13971() -> (Tensor[(1, 16, 4), float32],) {
  %1259 = fn () -> (Tensor[(1, 16, 4), float32],) {
    %1257 = @func_3246() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
    %1258 = %1257.1;
    (%1258,)
  };
  %1259() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_11595() -> (Tensor[(1, 16, 4), float64],) {
  %1262 = fn () -> (Tensor[(1, 16, 4), float64],) {
    %1260 = @func_8224() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) */;
    %1261 = %1260.0;
    (%1261,)
  };
  %1262() /* ty=(Tensor[(1, 16, 4), float64],) */
}

def @func_6886() -> Tensor[(1, 16, 4), float32] {
  %1263 = @func_4536() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1263.0
}

def @func_12702() -> (Tensor[(1, 16, 4), float32], Tensor[(4, 16, 4), float64], Tensor[(1320), bool], Tensor[(900), float64]) {
  @func_12700() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(4, 16, 4), float64], Tensor[(1320), bool], Tensor[(900), float64]) */
}

def @func_12814() -> (Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) {
  @func_12812() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(15, 1, 6), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_6468() -> Tensor[(?, 16, 4), bool] {
  %1272 = fn () -> Tensor[(?, 16, 4), bool] {
    %1264 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1265 = %1264.0;
    %1266 = cast(%1265, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %1267 = erf(%1266) /* ty=Tensor[(1, 16, 4), float64] */;
    %1268 = cast(%1265, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %1269 = shape_of(%1267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1270 = cast(%1267, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%1270, %1271) /* ty=Tensor[(?, 16, 4), bool] */
  };
  %1272() /* ty=Tensor[(?, 16, 4), bool] */
}

def @func_13231() -> Tensor[(1, 16, 4), float32] {
  %1273 = @func_10830() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(?, 16, 4), bool], Tensor[(900), float64]) */;
  %1273.0
}

def @func_9427(%var_9425: Tensor[(7, 156), uint32]) -> (Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(7, 156), uint32]) {
  @func_9424(%var_9425) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1092), uint32], Tensor[(7, 156), uint32]) */
}

def @func_11028() -> Tensor[(1, 16, 4), float32] {
  @func_11026() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_2519() -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
  %1284 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) {
    %1274 = @func_2456() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */;
    %1275 = cast(meta[relay.Constant][58] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %1276 = reshape(%1275, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
    %1277 = @func_798(%1276) /* ty=(Tensor[(12, 5, 15), float64],) */;
    %1278 = cast(meta[relay.Constant][58] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %1279 = reshape(%1278, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
    %1280 = @func_798(%1279) /* ty=(Tensor[(12, 5, 15), float64],) */;
    %1281 = %1274.1;
    %1282 = %1277.0;
    %1283 = %1280.0;
    (%1281, %1282, meta[relay.Constant][58] /* ty=Tensor[(900), float64] */, %1283)
  };
  %1284() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(12, 5, 15), float64], Tensor[(900), float64], Tensor[(12, 5, 15), float64]) */
}

def @func_11563() -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) {
  %1295 = fn () -> (Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) {
    %1285 = @func_9555() /* ty=(Tensor[(5, 2, 7), int32], Tensor[(8, 6, 13), float64], Tensor[(8, 6, 13), float32], Tensor[(12, 5, 15), float64], Tensor[(8, 6, 13), float32], Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float32], Tensor[(8, 6, 13), float64]) */;
    %1286 = %1285.5;
    %1287 = cast(%1286, dtype="float64") /* ty=Tensor[(1, 16, 4), float64] */;
    %1288 = @func_4744() /* ty=(Tensor[(8, 6, 13), float32], Tensor[(6, 10, 15), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */;
    %1289 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
    %1290 = atan(%1287) /* ty=Tensor[(1, 16, 4), float64] */;
    %1291 = %1288.3;
    %1292 = @func_4624() /* ty=Tensor[(8, 6, 13), float64] */;
    %1293 = @func_5227() /* ty=Tensor[(900), float64] */;
    %1294 = @func_5227() /* ty=Tensor[(900), float64] */;
    (%1289, %1290, %1291, %1292, %1293, %1294)
  };
  %1295() /* ty=(Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), float64], Tensor[(900), float64], Tensor[(900), float64]) */
}

def @func_4135() -> (Tensor[(900), float64], Tensor[(1, 16, 4), float32]) {
  @func_4133() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32]) */
}

def @func_16630() -> (Tensor[(1, 16, 4), float32],) {
  %1296 = @func_5574() /* ty=(Tensor[(900), float64], Tensor[(1, 16, 4), float32], Tensor[(8, 6, 13), bool], Tensor[(1, 16, 4), float32]) */;
  %1297 = %1296.1;
  (%1297,)
}

def @func_12548() -> (Tensor[(1, 16, 4), float32], Tensor[(900), float64]) {
  @func_12546() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64]) */
}

def @func_12834() -> (Tensor[(900), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
  %1303 = fn () -> (Tensor[(900), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float64]) {
    %1298 = @func_4347() /* ty=(Tensor[(900), float64],) */;
    %1299 = @func_4829() /* ty=(Tensor[(1, 16, 4), float64],) */;
    %1300 = @func_10708() /* ty=Tensor[(900), float64] */;
    %1301 = %1298.0;
    %1302 = %1299.0;
    (%1300, %1301, %1302)
  };
  %1303() /* ty=(Tensor[(900), float64], Tensor[(900), float64], Tensor[(1, 16, 4), float64]) */
}

def @func_7825(%var_7824: Tensor[(10, 16, 4), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) {
  %1312 = fn (%var_7786: Tensor[(10, 16, 4), float64]) -> (Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) {
    %1304 = @func_2864() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1305 = @func_3467() /* ty=Tensor[(1, 16, 4), float64] */;
    %1306 = cast(%1305, dtype="uint32") /* ty=Tensor[(1, 16, 4), uint32] */;
    %1307 = cast(%var_7786, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
    %1308 = cast(%var_7786, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
    %1309 = %1304.0;
    %1310 = left_shift(%1306, %1307) /* ty=Tensor[(10, 16, 4), uint32] */;
    %1311 = acos(%1308) /* ty=Tensor[(10, 16, 4), float32] */;
    (%1309, %1310, %1311)
  };
  %1312(%var_7824) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(10, 16, 4), uint32], Tensor[(10, 16, 4), float32]) */
}

def @func_16238() -> (Tensor[(1, 16, 4), float64], Tensor[(300), uint8], Tensor[(900), float64], Tensor[(1, 16, 4), float64], Tensor[(1, 16, 4), float32]) {
  %1313 = @func_13916() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(300), uint8]) */;
  %1314 = @func_14694() /* ty=(Tensor[(1, 16, 4), float64],) */;
  %1315 = %1313.1;
  %1316 = cast(%1315, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %1317 = reshape(%1316, newshape=[300]) /* ty=Tensor[(300), uint8] */;
  %1318 = @func_3336(%1317) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(1, 16, 4), float32], Tensor[(2, 15, 10), uint8]) */;
  %1319 = @func_8773() /* ty=Tensor[(1, 16, 4), float64] */;
  %1320 = @func_9932() /* ty=Tensor[(900), float64] */;
  %1321 = %1314.0;
  %1322 = %1318.4;
  (%1319, %1315, %1320, %1321, %1322)
}

def @func_16998() -> (Tensor[(1, 16, 4), float32],) {
  @func_16996() /* ty=(Tensor[(1, 16, 4), float32],) */
}

def @func_10074() -> (Tensor[(12, 5, 15), float64], Tensor[(1, 16, 4), float32]) {
  %1323 = @func_2884() /* ty=(Tensor[(1, 16, 4), float32],) */;
  %1324 = @func_9705() /* ty=Tensor[(12, 5, 15), float64] */;
  %1325 = %1323.0;
  (%1324, %1325)
}

def @func_2457() -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
  %1330 = fn () -> (Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) {
    %1326 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %1327 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %1328 = rsqrt(%1326) /* ty=Tensor[(1, 16, 4), float32] */;
    %1329 = log(%1327) /* ty=Tensor[(1, 16, 4), float32] */;
    (%1328, %1329)
  };
  %1330() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(1, 16, 4), float32]) */
}

def @func_15263() -> (Tensor[(300), uint8],) {
  @func_15261() /* ty=(Tensor[(300), uint8],) */
}

def @func_2149(%var_2145: Tensor[(4, 7, 2), uint16], %var_2146: Tensor[(4, 7, 2), uint16], %var_2147: Tensor[(1092), uint32], %var_2148: Tensor[(300), uint8]) -> (Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) {
  %1355 = fn (%var_2056: Tensor[(4, 7, 2), uint16], %var_2057: Tensor[(4, 7, 2), uint16], %var_2078: Tensor[(1092), uint32], %var_2095: Tensor[(300), uint8]) -> (Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) {
    %1331 = cast(%var_2057, dtype="bool") /* ty=Tensor[(4, 7, 2), bool] */;
    %1332 = shape_of(%var_2056, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1333 = cast(%var_2056, dtype="bool") /* ty=Tensor[(4, 7, 2), bool] */;
    %1334 = dyn.reshape(%1331, %1332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1335 = cast(meta[relay.Constant][60] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %1336 = cast(%var_2078, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %1337 = reshape(%1335, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
    %1338 = reshape(%1336, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %1339 = @func_1081(%1337, %1338) /* ty=(Tensor[(9, 5, 9), bool], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(14, 6, 13), bool], Tensor[(1092), uint32]) */;
    %1340 = %1339.4;
    %1341 = cast(%1340, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %1342 = reshape(%1341, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %1343 = @func_1614(%1342) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
    %1344 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %1345 = cast(%var_2095, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %1346 = reshape(%1344, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1347 = reshape(%1345, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1348 = cast(%1340, dtype="uint32") /* ty=Tensor[(1092), uint32] */;
    %1349 = reshape(%1348, newshape=[1092]) /* ty=Tensor[(1092), uint32] */;
    %1350 = @func_1614(%1349) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(14, 6, 13), bool], Tensor[(405), float32], Tensor[(1092), uint32]) */;
    %1351 = less(%1333, %1334) /* ty=Tensor[(4, 7, 2), bool] */;
    %1352 = %1343.0;
    %1353 = @func_827(%1346, %1347) /* ty=Tensor[(2, 15, 10), uint8] */;
    %1354 = %1350.2;
    (%1351, %1340, meta[relay.Constant][60] /* ty=Tensor[(405), float32] */, %var_2078, %1352, %1353, %var_2095, %1354)
  };
  %1355(%var_2145, %var_2146, %var_2147, %var_2148) /* ty=(Tensor[(4, 7, 2), bool], Tensor[(1092), uint32], Tensor[(405), float32], Tensor[(1092), uint32], Tensor[(7, 13, 11), float64], Tensor[(2, 15, 10), uint8], Tensor[(300), uint8], Tensor[(405), float32]) */
}

def @func_15757() -> Tensor[(8, 6, 13), float32] {
  %1357 = fn () -> Tensor[(8, 6, 13), float32] {
    %1356 = @func_5650() /* ty=(Tensor[(1, 16, 4), float32], Tensor[(900), float64], Tensor[(8, 6, 13), float32]) */;
    %1356.2
  };
  %1357() /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_16752() -> Tensor[(1, 16, 4), float32] {
  %1359 = fn () -> Tensor[(1, 16, 4), float32] {
    %1358 = @func_16559() /* ty=(Tensor[(1, 16, 4), float32],) */;
    %1358.0
  };
  %1359() /* ty=Tensor[(1, 16, 4), float32] */
}

def @func_10127() -> (Tensor[(?, 16, 4), bool], Tensor[(624), float32]) {
  @func_10125() /* ty=(Tensor[(?, 16, 4), bool], Tensor[(624), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen925/build/output.py:4955: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen925/build/output.py", line 4960, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(252) tvmgen_default_fused_reshape_bitwise_and_kernel0(signed char* __restrict__ T_bitwise_and, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_bitwise_and[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] & placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

