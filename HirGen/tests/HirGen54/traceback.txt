==========mod==========
#[version = "0.0.5"]
def @func_2773() -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %1 = reshape(%0, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %2 = @func_824(%1) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %3 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %4 = %2.0;
  (%3, %4, meta[relay.Constant][0] /* ty=Tensor[(264), float64] */)
}

def @func_1991(%var_1962: Tensor[(12, 11, 2), int64]) -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), float32], Tensor[(12, 11, 2), bool]) {
  %5 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %6 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %7 = %6.1;
  %8 = cast(%var_1962, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %12 = cast(%7, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %13 = acosh(%12) /* ty=Tensor[(12, 11, 2), float64] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = %5.1;
  %19 = floor_divide(%10, %11) /* ty=Tensor[(12, 11, 2), float32] */;
  %20 = not_equal(%16, %17) /* ty=Tensor[(12, 11, 2), bool] */;
  (%18, %19, %20)
}

def @func_1621(%var_1578: Tensor[(16, 5, 6), float64], %var_1602: Tensor[(975), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) {
  %21 = cast(%var_1602, dtype="float32") /* ty=Tensor[(975), float32] */;
  %22 = reshape(%21, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %23 = @func_971(%22) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) */;
  %24 = cast(%var_1602, dtype="float32") /* ty=Tensor[(975), float32] */;
  %25 = cast(%var_1578, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %26 = sqrt(%25) /* ty=Tensor[(16, 5, 6), float64] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %28 = %23.0;
  %29 = tan(%24) /* ty=Tensor[(975), float32] */;
  %30 = asin(%27) /* ty=Tensor[(16, 5, 6), float32] */;
  (%28, %29, %30)
}

def @func_5259(%var_5254: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  %31 = cast(%var_5254, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %32 = cos(%31) /* ty=Tensor[(14, 5, 6), float64] */;
  (%32,)
}

def @func_3932() -> (Tensor[(1, 9, 4), float32],) {
  %33 = @func_3893() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %34 = %33.0;
  (%34,)
}

def @func_1145() -> (Tensor[(1, 9, 4), float64],) {
  %35 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %38 = cos(%37) /* ty=Tensor[(1, 9, 4), float64] */;
  (%38,)
}

def @func_2280(%var_2239: Tensor[(16, 9, 4), float64], %var_2278: Tensor[(6), int16]) -> (Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) {
  %39 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %40 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
  %41 = %40.1;
  %42 = cast(%41, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %43 = cast(%var_2239, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %44 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %47 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %48 = cast(%var_2278, dtype="int16") /* ty=Tensor[(6), int16] */;
  %49 = cast(%var_2278, dtype="int16") /* ty=Tensor[(6), int16] */;
  %50 = reshape(%48, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %51 = reshape(%49, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %52 = @func_139(%50, %51) /* ty=(Tensor[(2, 3), int16],) */;
  %53 = %39.0;
  %54 = greater_equal(%42, %43) /* ty=Tensor[(16, 9, 4), bool] */;
  %55 = atanh(%46) /* ty=Tensor[(1, 9, 4), float32] */;
  %56 = %47.0;
  %57 = %52.0;
  (%53, %54, %55, %56, %57, %var_2278)
}

def @func_3905() -> Tensor[(12, 11, 2), int64] {
  %58 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
  %58.2
}

def @func_2211() -> Tensor[(?, 9, 4), int32] {
  %59 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %59.0
}

def @func_5654(%var_5652: Tensor[(616, 2), float32]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(11, 8, 14), float32], Tensor[(616, 2), float32]) {
  %60 = cast(%var_5652, dtype="float32") /* ty=Tensor[(616, 2), float32] */;
  %61 = reshape(%60, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %62 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %63 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %64 = @func_352(%61) /* ty=Tensor[(11, 8, 14), float32] */;
  (%62, %63, %64, %var_5652)
}

def @func_5147() -> (Tensor[(16, 9, 4), int32],) {
  %65 = @func_4666() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) */;
  %66 = %65.1;
  %67 = cast(%66, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
  %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 9, 4), float64] */, dtype="int32") /* ty=Tensor[(16, 9, 4), int32] */;
  %69 = right_shift(%67, %68) /* ty=Tensor[(16, 9, 4), int32] */;
  (%69,)
}

def @func_1261() -> (Tensor[(1, 9, 4), float32],) {
  %70 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %71 = %70.0;
  (%71,)
}

def @func_593(%var_588: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), bool],) {
  %72 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %73 = cast(%72, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %74 = cast(%var_588, dtype="bool") /* ty=Tensor[(9, 9, 4), bool] */;
  %75 = greater(%73, %74) /* ty=Tensor[(9, 9, 4), bool] */;
  (%75,)
}

def @func_3608(%var_3589: Tensor[(10, 10, 6), uint32]) -> (Tensor[(10, 10, 6), uint32],) {
  %76 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 10, 6), uint32] */, dtype="uint32") /* ty=Tensor[(10, 10, 6), uint32] */;
  %77 = shape_of(%var_3589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_3589, dtype="uint32") /* ty=Tensor[(10, 10, 6), uint32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %80 = logical_xor(%78, %79) /* ty=Tensor[(10, 10, 6), uint32] */;
  (%80,)
}

def @func_2827(%var_2792: Tensor[(10, 9, 2), float64]) -> Tensor[(10, 9, 2), float32] {
  %81 = cast(%var_2792, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %82 = tan(%81) /* ty=Tensor[(10, 9, 2), float64] */;
  %83 = cast(%var_2792, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%85, %86) /* ty=Tensor[(10, 9, 2), float32] */
}

def @func_2158(%var_2095: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(3, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
  %87 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %88 = %87.1;
  %89 = cast(%var_2095, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %90 = cast(%88, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %91 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %92 = cast(%88, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %93 = cast(%var_2095, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %94 = divide(%92, %93) /* ty=Tensor[(3, 9, 4), float32] */;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
  %96 = sqrt(%95) /* ty=Tensor[(3, 9, 4), float64] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %100 = reshape(%98, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %101 = reshape(%99, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %102 = greater_equal(%89, %90) /* ty=Tensor[(3, 9, 4), bool] */;
  %103 = %91.0;
  %104 = atanh(%97) /* ty=Tensor[(3, 9, 4), float64] */;
  %105 = @func_1472(%100, %101) /* ty=Tensor[(4, 13), float64] */;
  (%102, %103, %104, %105, meta[relay.Constant][4] /* ty=Tensor[(52), float64] */)
}

def @func_1472(%var_1466: Tensor[(4, 13), float64], %var_1467: Tensor[(4, 13), float64]) -> Tensor[(4, 13), float64] {
  %106 = cast(%var_1467, dtype="float64") /* ty=Tensor[(4, 13), float64] */;
  %107 = shape_of(%var_1466, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%var_1466, dtype="float64") /* ty=Tensor[(4, 13), float64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%108, %109) /* ty=Tensor[(4, 13), float64] */
}

def @func_1698(%var_1661: Tensor[(8, 3, 7), float64], %var_1685: Tensor[(480), float64], %var_1686: Tensor[(975), float32]) -> (Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) {
  %110 = cast(%var_1661, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
  %111 = atanh(%110) /* ty=Tensor[(8, 3, 7), float64] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
  %113 = shape_of(%var_1661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_1661, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %116 = cast(%var_1685, dtype="float64") /* ty=Tensor[(480), float64] */;
  %117 = cast(%var_1686, dtype="float32") /* ty=Tensor[(975), float32] */;
  %118 = reshape(%116, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
  %119 = reshape(%117, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %120 = @func_1621(%118, %119) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
  %121 = cast(%111, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 84), float64] */, dtype="float64") /* ty=Tensor[(9, 84), float64] */;
  %123 = reshape(%122, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float64] */;
  %124 = @func_525(%123) /* ty=(Tensor[(9, 14, 6), float64],) */;
  %125 = floor_divide(%114, %115) /* ty=Tensor[(8, 3, 7), float32] */;
  %126 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
  %127 = %120.1;
  %128 = sin(%121) /* ty=Tensor[(8, 3, 7), float32] */;
  %129 = %124.0;
  (%125, %126, %127, %var_1685, %var_1686, %128, %129, meta[relay.Constant][5] /* ty=Tensor[(9, 84), float64] */)
}

def @func_4818() -> (Tensor[(?, 9, 4), uint64],) {
  %130 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
  %131 = %130.1;
  (%131,)
}

def @func_4941(%var_4935: Tensor[(600), uint32]) -> (Tensor[(?, 9, 4), int32], Tensor[(10, 10, 6), uint32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(600), bool]) {
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %133 = reshape(%132, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), uint32] */;
  %134 = @func_3608(%133) /* ty=(Tensor[(10, 10, 6), uint32],) */;
  %135 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %136 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %137 = cast(%var_4935, dtype="bool") /* ty=Tensor[(600), bool] */;
  %138 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(600), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(600), uint32] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?), bool] */;
  %141 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %142 = %134.0;
  %143 = %135.3;
  %144 = %136.1;
  %145 = less_equal(%139, %140) /* ty=Tensor[(600), bool] */;
  (%141, %142, %143, %144, %145)
}

def @func_352(%var_325: Tensor[(11, 8, 14), float32]) -> Tensor[(11, 8, 14), float32] {
  %146 = cast(%var_325, dtype="float32") /* ty=Tensor[(11, 8, 14), float32] */;
  %147 = log(%146) /* ty=Tensor[(11, 8, 14), float32] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(11, 8, 14), float32] */;
  log2(%148) /* ty=Tensor[(11, 8, 14), float32] */
}

def @func_2409() -> Tensor[(1, 9, 4), float64] {
  %149 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
  %149.1
}

def @func_4302(%var_4230: Tensor[(3, 9, 4), float64], %var_4261: Tensor[(3, 9, 4), float32], %var_4286: Tensor[(168), float64], %var_4287: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(3, 9, 4), float32], Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(975), float32]) {
  %150 = @func_3893() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %151 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %152 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %155 = cast(%var_4230, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %156 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %157 = %156.5;
  %158 = cast(%157, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %159 = cast(%var_4261, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %160 = cast(%var_4286, dtype="float64") /* ty=Tensor[(168), float64] */;
  %161 = cast(%var_4287, dtype="float64") /* ty=Tensor[(480), float64] */;
  %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %163 = reshape(%160, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), float64] */;
  %164 = reshape(%161, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %165 = reshape(%162, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %166 = @func_1698(%163, %164, %165) /* ty=(Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) */;
  %167 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %168 = %150.0;
  %169 = %151.0;
  %170 = floor_mod(%154, %155) /* ty=Tensor[(3, 9, 4), float32] */;
  %171 = less(%158, %159) /* ty=Tensor[(3, 9, 4), bool] */;
  %172 = %166.1;
  (%167, %168, %169, %170, %171, %172, %var_4286, %var_4287, meta[relay.Constant][7] /* ty=Tensor[(975), float32] */)
}

def @func_5306() -> (Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(4, 120), bool]) {
  %173 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %175 = reshape(%174, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %176 = @func_2193(%175) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 120), float64] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %178 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(4, 120), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 120), float64] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %181 = %173.6;
  %182 = %176.4;
  %183 = logical_or(%179, %180) /* ty=Tensor[(4, 120), bool] */;
  (%181, %182, %183)
}

def @func_2784() -> Tensor[(1, 9, 4), float32] {
  %184 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %184.0
}

def @func_1313() -> (Tensor[(1, 9, 4), float64],) {
  %185 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %188 = asinh(%187) /* ty=Tensor[(1, 9, 4), float32] */;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %190 = cosh(%189) /* ty=Tensor[(1, 9, 4), float64] */;
  (%190,)
}

def @func_2193(%var_2190: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) {
  %191 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %192 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %193 = cast(%var_2190, dtype="float64") /* ty=Tensor[(480), float64] */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %195 = reshape(%193, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
  %196 = reshape(%194, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %197 = @func_1621(%195, %196) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
  %198 = %191.0;
  %199 = %192.0;
  %200 = %197.0;
  (%198, %199, %200, %var_2190, meta[relay.Constant][10] /* ty=Tensor[(975), float32] */)
}

def @func_240(%var_194: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) {
  %201 = cast(%var_194, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
  %202 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 7, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 7, 3), int8] */, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %207 = reshape(%205, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %208 = reshape(%206, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %209 = @func_139(%207, %208) /* ty=(Tensor[(2, 3), int16],) */;
  %210 = greater(%203, %204) /* ty=Tensor[(7, 7, 3), bool] */;
  %211 = %209.0;
  (%210, %211, meta[relay.Constant][12] /* ty=Tensor[(6), int16] */)
}

def @func_3198() -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) {
  %212 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %213 = %212.4;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %215 = acos(%214) /* ty=Tensor[(1, 9, 4), float64] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = less(%218, %219) /* ty=Tensor[(?, 9, 4), bool] */;
  %221 = cast(%215, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %225 = floor_divide(%223, %224) /* ty=Tensor[(?, 9, 4), float32] */;
  %226 = cast(%225, dtype="int32") /* ty=Tensor[(?, 9, 4), int32] */;
  %227 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%213, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %230 = cast(%215, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %231 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%225, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %234 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %235 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %237 = reshape(%236, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %238 = @func_2919(%237) /* ty=(Tensor[(16, 3, 16), bool],) */;
  %239 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 132), float32] */, dtype="float32") /* ty=Tensor[(4, 132), float32] */;
  %241 = reshape(%240, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
  %242 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %243 = right_shift(%228, %229) /* ty=Tensor[(?, 9, 4), int32] */;
  %244 = divide(%232, %233) /* ty=Tensor[(?, 9, 4), float32] */;
  %245 = %234.0;
  %246 = %235.1;
  %247 = %238.0;
  %248 = %239.1;
  %249 = @func_2395(%241) /* ty=Tensor[(11, 8, 6), float32] */;
  (%242, %243, %244, %245, %246, %247, meta[relay.Constant][13] /* ty=Tensor[(768), float64] */, %248, %249, meta[relay.Constant][14] /* ty=Tensor[(4, 132), float32] */)
}

def @func_3464(%var_3443: Tensor[(1, 9, 4), float32]) -> (Tensor[(?, 9, 4), uint16], Tensor[(1, 9, 4), float32], Tensor[(208), float64], Tensor[(104, 2), float64]) {
  %250 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %251 = %250.0;
  %252 = cast(%var_3443, dtype="uint16") /* ty=Tensor[(1, 9, 4), uint16] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint16") /* ty=Tensor[(1, 9, 4), uint16] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %256 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %257 = cast(meta[relay.Constant][15] /* ty=Tensor[(104, 2), float64] */, dtype="float64") /* ty=Tensor[(104, 2), float64] */;
  %258 = reshape(%257, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %259 = @func_3319(%258) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
  %260 = multiply(%254, %255) /* ty=Tensor[(?, 9, 4), uint16] */;
  %261 = %256.0;
  %262 = %259.2;
  (%260, %261, %262, meta[relay.Constant][15] /* ty=Tensor[(104, 2), float64] */)
}

def @func_2919(%var_2913: Tensor[(16, 3, 16), float64]) -> (Tensor[(16, 3, 16), bool],) {
  %263 = cast(%var_2913, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %264 = sqrt(%263) /* ty=Tensor[(16, 3, 16), float64] */;
  %265 = cast(%var_2913, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %269 = logical_or(%267, %268) /* ty=Tensor[(16, 3, 16), bool] */;
  (%269,)
}

def @func_1043() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %270 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %273 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %274 = sinh(%272) /* ty=Tensor[(1, 9, 4), float32] */;
  %275 = %273.0;
  (%274, %275)
}

def @func_4323() -> (Tensor[(1, 9, 4), float32],) {
  %276 = @func_3583() /* ty=Tensor[(1, 9, 4), float32] */;
  (%276,)
}

def @func_2352(%var_2331: Tensor[(11, 11, 4), float64]) -> (Tensor[(11, 11, 4), float64],) {
  %277 = cast(%var_2331, dtype="float64") /* ty=Tensor[(11, 11, 4), float64] */;
  %278 = log2(%277) /* ty=Tensor[(11, 11, 4), float64] */;
  (%278,)
}

def @func_2642(%var_2637: Tensor[(8, 11, 16), float64]) -> (Tensor[(8, 11, 16), float64],) {
  %279 = cast(%var_2637, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %280 = asinh(%279) /* ty=Tensor[(8, 11, 16), float64] */;
  (%280,)
}

def @func_2624(%var_2616: Tensor[(52), float64]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), float64], Tensor[(6), int16], Tensor[(1, 9, 4), float32], Tensor[(4, 13), float64], Tensor[(?, 9, 4), int32], Tensor[(52), bool]) {
  %281 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %283 = reshape(%282, newshape=[6]) /* ty=Tensor[(6), int16] */;
  %284 = @func_2570(%283) /* ty=(Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) */;
  %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %286 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %287 = reshape(%285, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %288 = reshape(%286, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %289 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %291 = log10(%290) /* ty=Tensor[(52), float64] */;
  %292 = cast(%var_2616, dtype="bool") /* ty=Tensor[(52), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(1), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(52), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?), bool] */;
  %296 = %281.1;
  %297 = %284.0;
  %298 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  %299 = @func_1472(%287, %288) /* ty=Tensor[(4, 13), float64] */;
  %300 = %289.0;
  %301 = less(%294, %295) /* ty=Tensor[(52), bool] */;
  (%296, %297, meta[relay.Constant][16] /* ty=Tensor[(6), int16] */, %298, %299, %300, %301)
}

def @func_2570(%var_2562: Tensor[(6), int16]) -> (Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) {
  %302 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %303 = cast(meta[relay.Constant][18] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %304 = cast(%var_2562, dtype="int16") /* ty=Tensor[(6), int16] */;
  %305 = reshape(%303, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
  %306 = reshape(%304, newshape=[6]) /* ty=Tensor[(6), int16] */;
  %307 = @func_2280(%305, %306) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
  %308 = %302.2;
  %309 = %307.4;
  (%308, %309, meta[relay.Constant][18] /* ty=Tensor[(576), float64] */, %var_2562)
}

def @func_857() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %310 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %311 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  (%310, %311)
}

def @func_1872(%var_1838: Tensor[(13, 9, 4), float32], %var_1850: Tensor[(324), float32]) -> (Tensor[(13, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(1, 9, 4), float64]) {
  %312 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %315 = cast(%var_1838, dtype="bool") /* ty=Tensor[(13, 9, 4), bool] */;
  %316 = cast(%var_1850, dtype="float32") /* ty=Tensor[(324), float32] */;
  %317 = reshape(%316, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %318 = @func_593(%317) /* ty=(Tensor[(9, 9, 4), bool],) */;
  %319 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %320 = less(%314, %315) /* ty=Tensor[(13, 9, 4), bool] */;
  %321 = %318.0;
  %322 = %319.0;
  (%320, %321, %var_1850, %322)
}

def @func_5401() -> (Tensor[(12, 11, 2), float32], Tensor[(1, 9, 4), float64]) {
  %323 = @func_3208() /* ty=(Tensor[(12, 11, 2), int64],) */;
  %324 = %323.0;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %326 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %327 = sqrt(%325) /* ty=Tensor[(12, 11, 2), float32] */;
  %328 = %326.0;
  (%327, %328)
}

def @func_2325() -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %329 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %330 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %331 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %332 = %329.0;
  %333 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %334 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %335 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %336 = %330.0;
  %337 = %331.0;
  (%332, %333, %334, %335, %336, %337)
}

def @func_3583() -> Tensor[(1, 9, 4), float32] {
  @func_779() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_5084(%var_5054: Tensor[(5, 9, 4), float32]) -> (Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) {
  %338 = @func_4323() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %339 = @func_4767() /* ty=(Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) */;
  %340 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %341 = cast(%340, dtype="int8") /* ty=Tensor[(1, 9, 4), int8] */;
  %342 = cast(%var_5054, dtype="int8") /* ty=Tensor[(5, 9, 4), int8] */;
  %343 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %344 = %338.0;
  %345 = %339.4;
  %346 = right_shift(%341, %342) /* ty=Tensor[(5, 9, 4), int8] */;
  %347 = %343.0;
  (%344, %345, %346, %347)
}

def @func_3208() -> (Tensor[(12, 11, 2), int64],) {
  %348 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %349 = %348.1;
  (%349,)
}

def @func_1788() -> (Tensor[(1, 9, 4), float32],) {
  %350 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %351 = %350.0;
  (%351,)
}

def @func_1822() -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) {
  %352 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %353 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
  %354 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %355 = %352.1;
  %356 = %353.2;
  %357 = %354.1;
  (%355, %356, %357)
}

def @func_5620() -> Tensor[(4, 9, 4), int64] {
  %358 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %359 = cast(%358, dtype="int64") /* ty=Tensor[(?, 9, 4), int64] */;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 9, 4), int32] */, dtype="int64") /* ty=Tensor[(4, 9, 4), int64] */;
  bitwise_xor(%359, %360) /* ty=Tensor[(4, 9, 4), int64] */
}

def @func_931() -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) {
  %361 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %362 = cast(meta[relay.Constant][20] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %363 = reshape(%362, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %364 = @func_593(%363) /* ty=(Tensor[(9, 9, 4), bool],) */;
  %365 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %367 = acosh(%366) /* ty=Tensor[(1, 9, 4), float64] */;
  %368 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %369 = %368.0;
  %370 = cast(%369, dtype="int64") /* ty=Tensor[(1, 9, 4), int64] */;
  %371 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%367, dtype="int64") /* ty=Tensor[(1, 9, 4), int64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %374 = bitwise_or(%372, %373) /* ty=Tensor[(?, 9, 4), int64] */;
  %375 = cast(%369, dtype="uint64") /* ty=Tensor[(1, 9, 4), uint64] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="uint64") /* ty=Tensor[(?, 9, 4), uint64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %379 = cast(%365, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %380 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%367, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = less_equal(%381, %382) /* ty=Tensor[(?, 9, 4), bool] */;
  %384 = cast(%374, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = %361.0;
  %389 = %364.0;
  %390 = bitwise_xor(%377, %378) /* ty=Tensor[(?, 9, 4), uint64] */;
  %391 = greater(%386, %387) /* ty=Tensor[(?, 9, 4), bool] */;
  (%388, %389, meta[relay.Constant][20] /* ty=Tensor[(324), float32] */, %390, %391)
}

def @func_4432() -> Tensor[(?, 9, 4), int32] {
  %392 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %392.0
}

def @func_4666() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) {
  %393 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
  %394 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
  %395 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %396 = %393.1;
  %397 = %394.1;
  (%395, %396, %397)
}

def @func_5675() -> (Tensor[(1, 9, 4), float32],) {
  %398 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %399 = %398.0;
  (%399,)
}

def @func_2700() -> Tensor[(?, 9, 4), int32] {
  %400 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %400.0
}

def @func_5492(%var_5469: Tensor[(176, 8), float64], %var_5489: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(11, 8, 6), float32], Tensor[(756), float64], Tensor[(147), int8], Tensor[(176, 8), float64], Tensor[(72, 8), float64], Tensor[(768), float64], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(208), float64]) {
  %401 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %402 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %403 = cast(meta[relay.Constant][22] /* ty=Tensor[(147), int8] */, dtype="int8") /* ty=Tensor[(147), int8] */;
  %404 = cast(%var_5469, dtype="float64") /* ty=Tensor[(176, 8), float64] */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(72, 8), float64] */, dtype="float64") /* ty=Tensor[(72, 8), float64] */;
  %406 = cast(meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %407 = cast(meta[relay.Constant][25] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %408 = reshape(%402, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %409 = reshape(%403, newshape=[147]) /* ty=Tensor[(147), int8] */;
  %410 = reshape(%404, newshape=[704, 2]) /* ty=Tensor[(704, 2), float64] */;
  %411 = reshape(%405, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %412 = reshape(%406, newshape=[768]) /* ty=Tensor[(768), float64] */;
  %413 = reshape(%407, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %414 = @func_3868(%408, %409, %410, %411, %412, %413) /* ty=(Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) */;
  %415 = cast(%var_5489, dtype="float64") /* ty=Tensor[(208), float64] */;
  %416 = reshape(%415, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %417 = @func_3319(%416) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
  %418 = %401.0;
  %419 = %414.14;
  %420 = %417.0;
  (%418, %419, meta[relay.Constant][21] /* ty=Tensor[(756), float64] */, meta[relay.Constant][22] /* ty=Tensor[(147), int8] */, %var_5469, meta[relay.Constant][23] /* ty=Tensor[(72, 8), float64] */, meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, meta[relay.Constant][25] /* ty=Tensor[(528), float32] */, %420, %var_5489)
}

def @func_5334() -> Tensor[(1, 9, 4), float32] {
  %421 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %421.0
}

def @func_578() -> Tensor[(1, 9, 4), float32] {
  %422 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  exp(%422) /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_971(%var_954: Tensor[(5, 13, 15), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) {
  %423 = cast(%var_954, dtype="float32") /* ty=Tensor[(5, 13, 15), float32] */;
  %424 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %425 = sqrt(%423) /* ty=Tensor[(5, 13, 15), float32] */;
  %426 = %424.3;
  (%425, %426)
}

def @func_2684(%var_2663: Tensor[(10, 9, 2), float32]) -> Tensor[(10, 9, 2), float64] {
  %427 = cast(%var_2663, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %428 = asin(%427) /* ty=Tensor[(10, 9, 2), float32] */;
  %429 = cast(%var_2663, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%431, %432) /* ty=Tensor[(10, 9, 2), float64] */
}

def @func_5992() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32]) {
  %433 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %434 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %435 = %433.0;
  %436 = %434.0;
  (%435, %436)
}

def @func_4988() -> (Tensor[(1, 9, 4), float32],) {
  %437 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
  %438 = %437.4;
  (%438,)
}

def @func_5723() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %439 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %440 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %441 = %439.0;
  %442 = %440.3;
  (%441, %442)
}

def @func_1389() -> (Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
  %443 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
  %444 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %445 = %443.3;
  %446 = %444.0;
  (%445, %446)
}

def @func_4070() -> Tensor[(?, 9, 4), int32] {
  @func_2700() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_2753(%var_2715: Tensor[(16, 1, 13), float64], %var_2716: Tensor[(16, 14, 13), float64]) -> (Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %447 = cast(%var_2715, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %448 = cast(%var_2716, dtype="float64") /* ty=Tensor[(16, 14, 13), float64] */;
  %449 = cast(meta[relay.Constant][27] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %450 = reshape(%449, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %451 = @func_824(%450) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %452 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %455 = subtract(%447, %448) /* ty=Tensor[(16, 14, 13), float64] */;
  %456 = %451.0;
  %457 = acos(%454) /* ty=Tensor[(9, 9, 4), float32] */;
  %458 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  (%455, %456, meta[relay.Constant][27] /* ty=Tensor[(264), float64] */, %457, %458)
}

def @func_5575() -> Tensor[(12, 9, 4), int32] {
  %459 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %460 = %459.4;
  %461 = cast(%460, dtype="int32") /* ty=Tensor[(?, 9, 4), int32] */;
  %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 9, 4), bool] */, dtype="int32") /* ty=Tensor[(12, 9, 4), int32] */;
  logical_xor(%461, %462) /* ty=Tensor[(12, 9, 4), int32] */
}

def @func_3982() -> (Tensor[(1, 9, 4), float64],) {
  %463 = @func_2409() /* ty=Tensor[(1, 9, 4), float64] */;
  (%463,)
}

def @func_6107() -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(2, 104), float64], Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 104), float64] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
  %465 = reshape(%464, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %466 = @func_3319(%465) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
  %467 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %468 = reshape(%467, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %469 = @func_5114(%468) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) */;
  %470 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %471 = %466.4;
  %472 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %473 = %469.2;
  (%470, %471, meta[relay.Constant][29] /* ty=Tensor[(2, 104), float64] */, %472, %473, meta[relay.Constant][30] /* ty=Tensor[(480), float64] */)
}

def @func_5689() -> Tensor[(264), float64] {
  %474 = @func_5232() /* ty=(Tensor[(264), float64],) */;
  %474.0
}

def @func_4802() -> Tensor[(1, 9, 4), float32] {
  %475 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %475.0
}

def @func_5910() -> (Tensor[(975), float64],) {
  %476 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
  %477 = %476.5;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(975), float32] */;
  %479 = sin(%478) /* ty=Tensor[(975), float32] */;
  %480 = cast(%477, dtype="float64") /* ty=Tensor[(975), float64] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(1), int32] */;
  %482 = cast(%479, dtype="float64") /* ty=Tensor[(975), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?), float64] */;
  %484 = mod(%482, %483) /* ty=Tensor[(975), float64] */;
  (%484,)
}

def @func_5232() -> (Tensor[(264), float64],) {
  %485 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %486 = %485.2;
  (%486,)
}

def @func_4767() -> (Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) {
  %487 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %489 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 9, 4), int32] */, dtype="bool") /* ty=Tensor[(10, 9, 4), bool] */;
  %490 = cast(meta[relay.Constant][33] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %491 = reshape(%490, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %492 = @func_2455(%491) /* ty=(Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) */;
  %493 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %494 = reshape(%493, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), uint32] */;
  %495 = @func_3608(%494) /* ty=(Tensor[(10, 10, 6), uint32],) */;
  %496 = %495.0;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(10, 10, 6), float32] */;
  %498 = rsqrt(%497) /* ty=Tensor[(10, 10, 6), float32] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(10, 10, 6), float64] */;
  %500 = not_equal(%488, %489) /* ty=Tensor[(10, 9, 4), bool] */;
  %501 = %492.0;
  %502 = sinh(%499) /* ty=Tensor[(10, 10, 6), float64] */;
  (meta[relay.Constant][31] /* ty=Tensor[(600), uint32] */, %500, %501, meta[relay.Constant][33] /* ty=Tensor[(52), float64] */, %502)
}

def @func_298(%var_285: Tensor[(6), int16]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(2, 3), int16], Tensor[(6), int16], Tensor[(15, 3, 13), uint64]) {
  %503 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %504 = sigmoid(%503) /* ty=Tensor[(15, 3, 13), float32] */;
  %505 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %509 = mod(%507, %508) /* ty=Tensor[(15, 3, 13), float64] */;
  %510 = cast(%504, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %514 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %515 = cast(%var_285, dtype="int16") /* ty=Tensor[(6), int16] */;
  %516 = cast(%var_285, dtype="int16") /* ty=Tensor[(6), int16] */;
  %517 = reshape(%515, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %518 = reshape(%516, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %519 = @func_139(%517, %518) /* ty=(Tensor[(2, 3), int16],) */;
  %520 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 3, 13), float32] */, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %521 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%504, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %524 = right_shift(%512, %513) /* ty=Tensor[(15, 3, 13), uint16] */;
  %525 = log(%514) /* ty=Tensor[(15, 3, 13), float32] */;
  %526 = %519.0;
  %527 = subtract(%522, %523) /* ty=Tensor[(15, 3, 13), uint64] */;
  (%524, %525, %526, %var_285, %527)
}

def @func_1074() -> (Tensor[(1, 9, 4), float32],) {
  %528 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_779() -> Tensor[(1, 9, 4), float32] {
  @func_578() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_2001() -> Tensor[(1, 9, 4), float32] {
  @func_779() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_1948() -> (Tensor[(1, 9, 4), float32],) {
  %530 = @func_1788() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %531 = %530.0;
  (%531,)
}

def @func_2381(%var_2377: Tensor[(15, 1, 5), float64]) -> (Tensor[(15, 1, 5), float64],) {
  %532 = cast(%var_2377, dtype="float64") /* ty=Tensor[(15, 1, 5), float64] */;
  %533 = acosh(%532) /* ty=Tensor[(15, 1, 5), float64] */;
  (%533,)
}

def @func_1531() -> (Tensor[(1, 9, 4), float32],) {
  %534 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %535 = %534.0;
  (%535,)
}

def @func_1200() -> (Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) {
  %536 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %537 = %536.1;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %539 = reshape(%538, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %540 = @func_593(%539) /* ty=(Tensor[(9, 9, 4), bool],) */;
  %541 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %542 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %543 = cast(meta[relay.Constant][36] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %544 = reshape(%543, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %545 = @func_971(%544) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) */;
  %546 = %540.0;
  %547 = %541.3;
  %548 = %542.0;
  %549 = %545.1;
  (%537, %546, %547, %548, %549, meta[relay.Constant][36] /* ty=Tensor[(975), float32] */)
}

def @func_5114(%var_5110: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) {
  %550 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %551 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %552 = cast(%var_5110, dtype="float64") /* ty=Tensor[(480), float64] */;
  %553 = reshape(%552, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %554 = @func_4869(%553) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) */;
  %555 = %550.1;
  %556 = %551.0;
  %557 = %554.1;
  (%555, %556, %557, %var_5110)
}

def @func_2479() -> (Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) {
  %558 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
  %559 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %560 = %558.1;
  %561 = %559.0;
  (%560, %561)
}

def @func_3348() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
  %562 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %563 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %564 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %565 = %562.0;
  %566 = %563.0;
  %567 = %564.0;
  (%565, %566, %567)
}

def @func_1360() -> (Tensor[(1, 9, 4), float32],) {
  %568 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  (%568,)
}

def @func_864() -> (Tensor[(1, 9, 4), float32],) {
  %569 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  (%569,)
}

def @main(%var_6133: Tensor[(484, 1), float64], %var_6148: Tensor[(180), float32]) -> (Tensor[(1, 9, 4), float32], Tensor[(5, 9, 4), int8], Tensor[(180), float32], Tensor[(484, ?), float64], Tensor[(10, 3, 10), int64]) {
  %570 = cast(%var_6148, dtype="float32") /* ty=Tensor[(180), float32] */;
  %571 = reshape(%570, newshape=[5, 9, 4]) /* ty=Tensor[(5, 9, 4), float32] */;
  %572 = @func_5084(%571) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) */;
  %573 = cast(%var_6133, dtype="float64") /* ty=Tensor[(484, 1), float64] */;
  %574 = reshape(%573, newshape=[11, 11, 4]) /* ty=Tensor[(11, 11, 4), float64] */;
  %575 = @func_2352(%574) /* ty=(Tensor[(11, 11, 4), float64],) */;
  %576 = %575.0;
  %577 = cast(%576, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %578 = shape_of(%var_6133, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%var_6133, dtype="bool") /* ty=Tensor[(484, 1), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %581 = logical_and(%579, %580) /* ty=Tensor[(484, ?), bool] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(484, ?), float64] */;
  %583 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 10), float32] */;
  %584 = erf(%583) /* ty=Tensor[(10, 3, 10), float32] */;
  %585 = cast(%584, dtype="int64") /* ty=Tensor[(10, 3, 10), int64] */;
  %586 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(10, 3, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 3, 10), float32] */, dtype="int64") /* ty=Tensor[(10, 3, 10), int64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %589 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  %590 = %572.2;
  %591 = sinh(%582) /* ty=Tensor[(484, ?), float64] */;
  %592 = logical_xor(%587, %588) /* ty=Tensor[(10, 3, 10), int64] */;
  (%589, %590, %var_6148, %591, %592)
}

def @func_4525(%var_4499: Tensor[(3, 4, 3), float64], %var_4513: Tensor[(3, 4, 3), float64]) -> (Tensor[(3, 4, 3), bool],) {
  %593 = cast(%var_4499, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %594 = log(%593) /* ty=Tensor[(3, 4, 3), float64] */;
  %595 = cast(%var_4513, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = greater_equal(%597, %598) /* ty=Tensor[(3, 4, 3), bool] */;
  (%599,)
}

def @func_824(%var_810: Tensor[(12, 11, 2), float64]) -> (Tensor[(12, 11, 2), int64],) {
  %600 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 1), float64] */;
  %601 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %602 = power(%600, %601) /* ty=Tensor[(12, 11, 2), float64] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %604 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 1), float64] */;
  %605 = mod(%603, %604) /* ty=Tensor[(12, 11, 2), float64] */;
  %606 = cast(%var_810, dtype="int64") /* ty=Tensor[(12, 11, 2), int64] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="int64") /* ty=Tensor[(12, 11, 2), int64] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %610 = right_shift(%608, %609) /* ty=Tensor[(12, 11, 2), int64] */;
  (%610,)
}

def @func_2395(%var_2389: Tensor[(11, 8, 6), float32]) -> Tensor[(11, 8, 6), float32] {
  %611 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
  %612 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(11, 8, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%613, %614) /* ty=Tensor[(11, 8, 6), float32] */
}

def @func_4559(%var_4553: int64, %var_4554: Tensor[(7, 15, 10), int64]) -> Tensor[(7, 15, 10), bool] {
  %615 = cast(%var_4553, dtype="bool") /* ty=bool */;
  %616 = cast(%var_4554, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  less(%615, %616) /* ty=Tensor[(7, 15, 10), bool] */
}

def @func_4494(%var_4483: Tensor[(12, 15, 2), int32], %var_4490: Tensor[(12, 15, 2), int32]) -> (Tensor[(12, 15, 2), bool], Tensor[(12, 15, 2), bool]) {
  %617 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %618 = shape_of(%var_4483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_4483, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(%var_4490, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %622 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(12, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = greater_equal(%619, %620) /* ty=Tensor[(12, 15, 2), bool] */;
  %626 = not_equal(%623, %624) /* ty=Tensor[(12, 15, 2), bool] */;
  (%625, %626)
}

def @func_3516() -> (Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %627 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %629 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 195), float32] */, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %630 = reshape(%628, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
  %631 = reshape(%629, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %632 = @func_1621(%630, %631) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
  %633 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %634 = %627.0;
  %635 = %632.0;
  %636 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %637 = %633.0;
  %638 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  (%634, %635, meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, meta[relay.Constant][43] /* ty=Tensor[(5, 195), float32] */, %636, %637, %638)
}

def @func_1902() -> (Tensor[(?, 9, 4), int32],) {
  %639 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
  %640 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %641 = %640.0;
  %642 = cast(%641, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
  %643 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%639, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %646 = maximum(%644, %645) /* ty=Tensor[(?, 9, 4), int32] */;
  (%646,)
}

def @func_4420(%var_4386: Tensor[(9, 9, 4), int32]) -> (Tensor[(9, 9, 4), uint64], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %647 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %648 = %647.0;
  %649 = cast(%648, dtype="uint64") /* ty=Tensor[(?, 9, 4), uint64] */;
  %650 = cast(%var_4386, dtype="uint64") /* ty=Tensor[(9, 9, 4), uint64] */;
  %651 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %652 = maximum(%649, %650) /* ty=Tensor[(9, 9, 4), uint64] */;
  %653 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  %654 = %651.1;
  (%652, %653, %654)
}

def @func_2455(%var_2453: Tensor[(52), float64]) -> (Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
  %655 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %658 = cast(%var_2453, dtype="float64") /* ty=Tensor[(52), float64] */;
  %659 = cast(%var_2453, dtype="float64") /* ty=Tensor[(52), float64] */;
  %660 = reshape(%658, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %661 = reshape(%659, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %662 = tan(%657) /* ty=Tensor[(1, 9, 4), float64] */;
  %663 = @func_1472(%660, %661) /* ty=Tensor[(4, 13), float64] */;
  (%662, %663, %var_2453)
}

def @func_4643() -> (Tensor[(1, 9, 4), float64],) {
  %664 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
  %665 = %664.3;
  (%665,)
}

def @func_4028() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %666 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %667 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  %668 = %666.0;
  (%667, %668)
}

def @func_3319(%var_3287: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) {
  %669 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %670 = cast(%var_3287, dtype="float64") /* ty=Tensor[(208), float64] */;
  %671 = cast(meta[relay.Constant][44] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %672 = reshape(%670, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), float64] */;
  %673 = reshape(%671, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float64] */;
  %674 = @func_2753(%672, %673) /* ty=(Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %675 = %669.0;
  %676 = %674.3;
  %677 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  (%675, %676, %var_3287, meta[relay.Constant][44] /* ty=Tensor[(2912), float64] */, %677)
}

def @func_3868(%var_3718: Tensor[(756), float64], %var_3731: Tensor[(147), int8], %var_3742: Tensor[(704, 2), float64], %var_3783: Tensor[(576), float64], %var_3825: Tensor[(768), float64], %var_3838: Tensor[(528), float32]) -> (Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) {
  %678 = cast(%var_3718, dtype="float64") /* ty=Tensor[(756), float64] */;
  %679 = reshape(%678, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float64] */;
  %680 = @func_525(%679) /* ty=(Tensor[(9, 14, 6), float64],) */;
  %681 = cast(%var_3731, dtype="int8") /* ty=Tensor[(147), int8] */;
  %682 = reshape(%681, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), int8] */;
  %683 = @func_240(%682) /* ty=(Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
  %684 = cast(%var_3742, dtype="float64") /* ty=Tensor[(704, 2), float64] */;
  %685 = reshape(%684, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float64] */;
  %686 = @func_2642(%685) /* ty=(Tensor[(8, 11, 16), float64],) */;
  %687 = cast(%var_3783, dtype="float64") /* ty=Tensor[(576), float64] */;
  %688 = %683.1;
  %689 = cast(%688, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
  %690 = reshape(%687, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
  %691 = reshape(%689, newshape=[6]) /* ty=Tensor[(6), int16] */;
  %692 = @func_2280(%690, %691) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
  %693 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %694 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %695 = cast(%var_3825, dtype="float64") /* ty=Tensor[(768), float64] */;
  %696 = reshape(%695, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %697 = @func_2919(%696) /* ty=(Tensor[(16, 3, 16), bool],) */;
  %698 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 154), float32] */, dtype="float32") /* ty=Tensor[(8, 154), float32] */;
  %699 = reshape(%698, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %700 = cast(%var_3838, dtype="float32") /* ty=Tensor[(528), float32] */;
  %701 = reshape(%700, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
  %702 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %703 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %705 = erf(%704) /* ty=Tensor[(?, 9, 4), float32] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %707 = log10(%706) /* ty=Tensor[(?, 9, 4), float32] */;
  %708 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %711 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%707, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %714 = @func_2395(%701) /* ty=Tensor[(11, 8, 6), float32] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
  %716 = reshape(%715, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
  %717 = %680.0;
  %718 = %686.0;
  %719 = %692.0;
  %720 = %693.0;
  %721 = %694.3;
  %722 = %697.0;
  %723 = @func_352(%699) /* ty=Tensor[(11, 8, 14), float32] */;
  %724 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  %725 = %702.0;
  %726 = power(%712, %713) /* ty=Tensor[(?, 9, 4), float32] */;
  %727 = @func_2395(%716) /* ty=Tensor[(11, 8, 6), float32] */;
  (%717, %var_3718, %688, %var_3731, %718, %var_3742, %719, %var_3783, %720, %721, %722, %var_3825, %723, meta[relay.Constant][45] /* ty=Tensor[(8, 154), float32] */, %714, %var_3838, %724, %725, %726, %727)
}

def @func_2073() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
  %728 = @func_1788() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %729 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %730 = %728.0;
  %731 = %729.0;
  (%730, %731)
}

def @func_5830() -> Tensor[(12, 11, 2), int64] {
  %732 = @func_3208() /* ty=(Tensor[(12, 11, 2), int64],) */;
  %732.0
}

def @func_5865() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %733 = @func_4323() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %734 = @func_5723() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %735 = %733.0;
  %736 = %734.1;
  (%735, %736)
}

def @func_4869(%var_4850: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
  %737 = @func_4666() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) */;
  %738 = cast(%var_4850, dtype="float64") /* ty=Tensor[(480), float64] */;
  %739 = reshape(%738, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %740 = @func_2193(%739) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) */;
  %741 = %737.2;
  %742 = %740.3;
  (%741, %742, %var_4850)
}

def @func_5208(%var_5153: Tensor[(3, 4, 16), bool], %var_5154: Tensor[(3, 4, 16), bool], %var_5168: Tensor[(3, 4, 16), bool], %var_5200: Tensor[(3, 4, 16), uint16]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), float64], Tensor[(3, 4, 16), int64]) {
  %743 = cast(%var_5154, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %744 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_5153, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %747 = cast(%var_5168, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %748 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_5154, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = cast(%var_5168, dtype="uint16") /* ty=Tensor[(3, 4, 16), uint16] */;
  %752 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(3, 4, 16), uint16] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %755 = bitwise_or(%753, %754) /* ty=Tensor[(3, 4, 16), uint16] */;
  %756 = cast(%var_5200, dtype="int64") /* ty=Tensor[(3, 4, 16), int64] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="int64") /* ty=Tensor[(3, 4, 16), int64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %760 = logical_and(%745, %746) /* ty=Tensor[(3, 4, 16), bool] */;
  %761 = mod(%749, %750) /* ty=Tensor[(3, 4, 16), float64] */;
  %762 = logical_xor(%758, %759) /* ty=Tensor[(3, 4, 16), int64] */;
  (%760, %761, %762)
}

def @func_525(%var_522: Tensor[(9, 14, 6), float64]) -> (Tensor[(9, 14, 6), float64],) {
  %763 = cast(%var_522, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
  %764 = tan(%763) /* ty=Tensor[(9, 14, 6), float64] */;
  (%764,)
}

def @func_1756() -> (Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  %765 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %766 = cast(meta[relay.Constant][46] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %767 = reshape(%766, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %768 = @func_824(%767) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %769 = %765.0;
  %770 = %768.0;
  (%769, %770, meta[relay.Constant][46] /* ty=Tensor[(264), float64] */)
}

def @func_5805(%var_5751: Tensor[(264), float64], %var_5785: Tensor[(1, 975), float32]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), bool], Tensor[(975), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(1, 975), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
  %771 = @func_4818() /* ty=(Tensor[(?, 9, 4), uint64],) */;
  %772 = @func_5689() /* ty=Tensor[(264), float64] */;
  %773 = cast(%var_5751, dtype="int32") /* ty=Tensor[(264), int32] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(1), int32] */;
  %775 = cast(%772, dtype="int32") /* ty=Tensor[(264), int32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?), int32] */;
  %777 = right_shift(%775, %776) /* ty=Tensor[(264), int32] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(264), float64] */;
  %779 = cos(%778) /* ty=Tensor[(264), float64] */;
  %780 = cast(%779, dtype="bool") /* ty=Tensor[(264), bool] */;
  %781 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(%var_5751, dtype="bool") /* ty=Tensor[(264), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), bool] */;
  %784 = cast(meta[relay.Constant][47] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %785 = cast(meta[relay.Constant][48] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %786 = cast(%var_5785, dtype="float32") /* ty=Tensor[(1, 975), float32] */;
  %787 = reshape(%784, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), float64] */;
  %788 = reshape(%785, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %789 = reshape(%786, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %790 = @func_1698(%787, %788, %789) /* ty=(Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) */;
  %791 = @func_4643() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %792 = %771.0;
  %793 = not_equal(%782, %783) /* ty=Tensor[(264), bool] */;
  %794 = %790.2;
  %795 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  %796 = %791.0;
  (%792, %793, %794, meta[relay.Constant][47] /* ty=Tensor[(168), float64] */, meta[relay.Constant][48] /* ty=Tensor[(480), float64] */, %var_5785, %795, %796)
}

def @func_139(%var_124: Tensor[(2, 3), int16], %var_125: Tensor[(2, 3), int16]) -> (Tensor[(2, 3), int16],) {
  %797 = cast(%var_125, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
  %798 = shape_of(%var_124, dtype="int32") /* ty=Tensor[(2), int32] */;
  %799 = cast(%var_124, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %801 = bitwise_or(%799, %800) /* ty=Tensor[(2, 3), int16] */;
  (%801,)
}

def @func_3893() -> (Tensor[(1, 9, 4), float32],) {
  %802 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %803 = %802.0;
  (%803,)
}

def @func_4882() -> Tensor[(1, 9, 4), float32] {
  %804 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %804.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4324() -> (Tensor[(1, 9, 4), float32],) {
  %1 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %0 = @func_3583() /* ty=Tensor[(1, 9, 4), float32] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_6108() -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(2, 104), float64], Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
  %12 = fn () -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(2, 104), float64], Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 104), float64] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
    %3 = reshape(%2, newshape=[208]) /* ty=Tensor[(208), float64] */;
    %4 = @func_3319(%3) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
    %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %6 = reshape(%5, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %7 = @func_5114(%6) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) */;
    %8 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
    %9 = %4.4;
    %10 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
    %11 = %7.2;
    (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(2, 104), float64] */, %10, %11, meta[relay.Constant][1] /* ty=Tensor[(480), float64] */)
  };
  %12() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(2, 104), float64], Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) */
}

def @func_5675() -> (Tensor[(1, 9, 4), float32],) {
  %13 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %14 = %13.0;
  (%14,)
}

def @func_352(%var_325: Tensor[(11, 8, 14), float32]) -> Tensor[(11, 8, 14), float32] {
  %15 = cast(%var_325, dtype="float32") /* ty=Tensor[(11, 8, 14), float32] */;
  %16 = log(%15) /* ty=Tensor[(11, 8, 14), float32] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(11, 8, 14), float32] */;
  log2(%17) /* ty=Tensor[(11, 8, 14), float32] */
}

def @func_355(%var_353: Tensor[(11, 8, 14), float32]) -> Tensor[(11, 8, 14), float32] {
  @func_352(%var_353) /* ty=Tensor[(11, 8, 14), float32] */
}

def @func_931() -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) {
  %18 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %20 = reshape(%19, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %21 = @func_593(%20) /* ty=(Tensor[(9, 9, 4), bool],) */;
  %22 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %24 = acosh(%23) /* ty=Tensor[(1, 9, 4), float64] */;
  %25 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="int64") /* ty=Tensor[(1, 9, 4), int64] */;
  %28 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%24, dtype="int64") /* ty=Tensor[(1, 9, 4), int64] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %31 = bitwise_or(%29, %30) /* ty=Tensor[(?, 9, 4), int64] */;
  %32 = cast(%26, dtype="uint64") /* ty=Tensor[(1, 9, 4), uint64] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="uint64") /* ty=Tensor[(?, 9, 4), uint64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %36 = cast(%22, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %37 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%24, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = less_equal(%38, %39) /* ty=Tensor[(?, 9, 4), bool] */;
  %41 = cast(%31, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = %18.0;
  %46 = %21.0;
  %47 = bitwise_xor(%34, %35) /* ty=Tensor[(?, 9, 4), uint64] */;
  %48 = greater(%43, %44) /* ty=Tensor[(?, 9, 4), bool] */;
  (%45, %46, meta[relay.Constant][2] /* ty=Tensor[(324), float32] */, %47, %48)
}

def @func_4644() -> (Tensor[(1, 9, 4), float64],) {
  %51 = fn () -> (Tensor[(1, 9, 4), float64],) {
    %49 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
    %50 = %49.3;
    (%50,)
  };
  %51() /* ty=(Tensor[(1, 9, 4), float64],) */
}

def @func_1045() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_933() -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) {
  @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */
}

def @func_1201() -> (Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) {
  %66 = fn () -> (Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) {
    %52 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
    %53 = %52.1;
    %54 = cast(%53, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
    %55 = reshape(%54, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
    %56 = @func_593(%55) /* ty=(Tensor[(9, 9, 4), bool],) */;
    %57 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
    %58 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %60 = reshape(%59, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %61 = @func_971(%60) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) */;
    %62 = %56.0;
    %63 = %57.3;
    %64 = %58.0;
    %65 = %61.1;
    (%53, %62, %63, %64, %65, meta[relay.Constant][3] /* ty=Tensor[(975), float32] */)
  };
  %66() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */
}

def @func_4667() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) {
  %72 = fn () -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) {
    %67 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
    %68 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
    %69 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
    %70 = %67.1;
    %71 = %68.1;
    (%69, %70, %71)
  };
  %72() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) */
}

def @func_3876(%var_3870: Tensor[(756), float64], %var_3871: Tensor[(147), int8], %var_3872: Tensor[(704, 2), float64], %var_3873: Tensor[(576), float64], %var_3874: Tensor[(768), float64], %var_3875: Tensor[(528), float32]) -> (Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) {
  @func_3868(%var_3870, %var_3871, %var_3872, %var_3873, %var_3874, %var_3875) /* ty=(Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) */
}

def @func_5114(%var_5110: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) {
  %73 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %74 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %75 = cast(%var_5110, dtype="float64") /* ty=Tensor[(480), float64] */;
  %76 = reshape(%75, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %77 = @func_4869(%76) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) */;
  %78 = %73.1;
  %79 = %74.0;
  %80 = %77.1;
  (%78, %79, %80, %var_5110)
}

def @func_2213() -> Tensor[(?, 9, 4), int32] {
  @func_2211() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_3319(%var_3287: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) {
  %81 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %82 = cast(%var_3287, dtype="float64") /* ty=Tensor[(208), float64] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %84 = reshape(%82, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), float64] */;
  %85 = reshape(%83, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float64] */;
  %86 = @func_2753(%84, %85) /* ty=(Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %87 = %81.0;
  %88 = %86.3;
  %89 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  (%87, %88, %var_3287, meta[relay.Constant][4] /* ty=Tensor[(2912), float64] */, %89)
}

def @func_5402() -> (Tensor[(12, 11, 2), float32], Tensor[(1, 9, 4), float64]) {
  %96 = fn () -> (Tensor[(12, 11, 2), float32], Tensor[(1, 9, 4), float64]) {
    %90 = @func_3208() /* ty=(Tensor[(12, 11, 2), int64],) */;
    %91 = %90.0;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
    %93 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
    %94 = sqrt(%92) /* ty=Tensor[(12, 11, 2), float32] */;
    %95 = %93.0;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(12, 11, 2), float32], Tensor[(1, 9, 4), float64]) */
}

def @func_2074() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
  %101 = fn () -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
    %97 = @func_1788() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %98 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
    %99 = %97.0;
    %100 = %98.0;
    (%99, %100)
  };
  %101() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */
}

def @func_580() -> Tensor[(1, 9, 4), float32] {
  @func_578() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_2830(%var_2828: Tensor[(10, 9, 2), float64]) -> Tensor[(10, 9, 2), float32] {
  @func_2827(%var_2828) /* ty=Tensor[(10, 9, 2), float32] */
}

def @func_4072() -> Tensor[(?, 9, 4), int32] {
  @func_4070() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_1789() -> (Tensor[(1, 9, 4), float32],) {
  %104 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %102 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %103 = %102.0;
    (%103,)
  };
  %104() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_1948() -> (Tensor[(1, 9, 4), float32],) {
  %105 = @func_1788() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %106 = %105.0;
  (%106,)
}

def @func_5654(%var_5652: Tensor[(616, 2), float32]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(11, 8, 14), float32], Tensor[(616, 2), float32]) {
  %107 = cast(%var_5652, dtype="float32") /* ty=Tensor[(616, 2), float32] */;
  %108 = reshape(%107, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %109 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %110 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %111 = @func_352(%108) /* ty=Tensor[(11, 8, 14), float32] */;
  (%109, %110, %111, %var_5652)
}

def @func_3608(%var_3589: Tensor[(10, 10, 6), uint32]) -> (Tensor[(10, 10, 6), uint32],) {
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 10, 6), uint32] */, dtype="uint32") /* ty=Tensor[(10, 10, 6), uint32] */;
  %113 = shape_of(%var_3589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_3589, dtype="uint32") /* ty=Tensor[(10, 10, 6), uint32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %116 = logical_xor(%114, %115) /* ty=Tensor[(10, 10, 6), uint32] */;
  (%116,)
}

def @func_4559(%var_4553: int64, %var_4554: Tensor[(7, 15, 10), int64]) -> Tensor[(7, 15, 10), bool] {
  %117 = cast(%var_4553, dtype="bool") /* ty=bool */;
  %118 = cast(%var_4554, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  less(%117, %118) /* ty=Tensor[(7, 15, 10), bool] */
}

def @func_2411() -> Tensor[(1, 9, 4), float64] {
  @func_2409() /* ty=Tensor[(1, 9, 4), float64] */
}

def @func_2211() -> Tensor[(?, 9, 4), int32] {
  %119 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %119.0
}

def @func_1475(%var_1473: Tensor[(4, 13), float64], %var_1474: Tensor[(4, 13), float64]) -> Tensor[(4, 13), float64] {
  %124 = fn (%var_1466: Tensor[(4, 13), float64], %var_1467: Tensor[(4, 13), float64]) -> Tensor[(4, 13), float64] {
    %120 = cast(%var_1467, dtype="float64") /* ty=Tensor[(4, 13), float64] */;
    %121 = shape_of(%var_1466, dtype="int32") /* ty=Tensor[(2), int32] */;
    %122 = cast(%var_1466, dtype="float64") /* ty=Tensor[(4, 13), float64] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    power(%122, %123) /* ty=Tensor[(4, 13), float64] */
  };
  %124(%var_1473, %var_1474) /* ty=Tensor[(4, 13), float64] */
}

def @func_4563(%var_4561: int64, %var_4562: Tensor[(7, 15, 10), int64]) -> Tensor[(7, 15, 10), bool] {
  @func_4559(%var_4561, %var_4562) /* ty=Tensor[(7, 15, 10), bool] */
}

def @func_1903() -> (Tensor[(?, 9, 4), int32],) {
  %133 = fn () -> (Tensor[(?, 9, 4), int32],) {
    %125 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
    %126 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %127 = %126.0;
    %128 = cast(%127, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
    %129 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %130 = cast(%125, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %132 = maximum(%130, %131) /* ty=Tensor[(?, 9, 4), int32] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(?, 9, 4), int32],) */
}

def @func_2753(%var_2715: Tensor[(16, 1, 13), float64], %var_2716: Tensor[(16, 14, 13), float64]) -> (Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %134 = cast(%var_2715, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %135 = cast(%var_2716, dtype="float64") /* ty=Tensor[(16, 14, 13), float64] */;
  %136 = cast(meta[relay.Constant][6] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %137 = reshape(%136, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %138 = @func_824(%137) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %139 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %142 = subtract(%134, %135) /* ty=Tensor[(16, 14, 13), float64] */;
  %143 = %138.0;
  %144 = acos(%141) /* ty=Tensor[(9, 9, 4), float32] */;
  %145 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  (%142, %143, meta[relay.Constant][6] /* ty=Tensor[(264), float64] */, %144, %145)
}

def @func_1531() -> (Tensor[(1, 9, 4), float32],) {
  %146 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %147 = %146.0;
  (%147,)
}

def @func_3464(%var_3443: Tensor[(1, 9, 4), float32]) -> (Tensor[(?, 9, 4), uint16], Tensor[(1, 9, 4), float32], Tensor[(208), float64], Tensor[(104, 2), float64]) {
  %148 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %149 = %148.0;
  %150 = cast(%var_3443, dtype="uint16") /* ty=Tensor[(1, 9, 4), uint16] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="uint16") /* ty=Tensor[(1, 9, 4), uint16] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %154 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %155 = cast(meta[relay.Constant][7] /* ty=Tensor[(104, 2), float64] */, dtype="float64") /* ty=Tensor[(104, 2), float64] */;
  %156 = reshape(%155, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %157 = @func_3319(%156) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
  %158 = multiply(%152, %153) /* ty=Tensor[(?, 9, 4), uint16] */;
  %159 = %154.0;
  %160 = %157.2;
  (%158, %159, %160, meta[relay.Constant][7] /* ty=Tensor[(104, 2), float64] */)
}

def @func_1702(%var_1699: Tensor[(8, 3, 7), float64], %var_1700: Tensor[(480), float64], %var_1701: Tensor[(975), float32]) -> (Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) {
  %181 = fn (%var_1661: Tensor[(8, 3, 7), float64], %var_1685: Tensor[(480), float64], %var_1686: Tensor[(975), float32]) -> (Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) {
    %161 = cast(%var_1661, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
    %162 = atanh(%161) /* ty=Tensor[(8, 3, 7), float64] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
    %164 = shape_of(%var_1661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%var_1661, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %167 = cast(%var_1685, dtype="float64") /* ty=Tensor[(480), float64] */;
    %168 = cast(%var_1686, dtype="float32") /* ty=Tensor[(975), float32] */;
    %169 = reshape(%167, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
    %170 = reshape(%168, newshape=[975]) /* ty=Tensor[(975), float32] */;
    %171 = @func_1621(%169, %170) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
    %172 = cast(%162, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
    %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 84), float64] */, dtype="float64") /* ty=Tensor[(9, 84), float64] */;
    %174 = reshape(%173, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float64] */;
    %175 = @func_525(%174) /* ty=(Tensor[(9, 14, 6), float64],) */;
    %176 = floor_divide(%165, %166) /* ty=Tensor[(8, 3, 7), float32] */;
    %177 = @func_779() /* ty=Tensor[(1, 9, 4), float32] */;
    %178 = %171.1;
    %179 = sin(%172) /* ty=Tensor[(8, 3, 7), float32] */;
    %180 = %175.0;
    (%176, %177, %178, %var_1685, %var_1686, %179, %180, meta[relay.Constant][8] /* ty=Tensor[(9, 84), float64] */)
  };
  %181(%var_1699, %var_1700, %var_1701) /* ty=(Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) */
}

def @func_1043() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %182 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %183 = %182.1;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %185 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %186 = sinh(%184) /* ty=Tensor[(1, 9, 4), float32] */;
  %187 = %185.0;
  (%186, %187)
}

def @func_4802() -> Tensor[(1, 9, 4), float32] {
  %188 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %188.0
}

def @func_4804() -> Tensor[(1, 9, 4), float32] {
  @func_4802() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_5087(%var_5085: Tensor[(5, 9, 4), float32]) -> (Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) {
  @func_5084(%var_5085) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) */
}

def @func_2701() -> Tensor[(?, 9, 4), int32] {
  %190 = fn () -> Tensor[(?, 9, 4), int32] {
    %189 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
    %189.0
  };
  %190() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_5576() -> Tensor[(12, 9, 4), int32] {
  %195 = fn () -> Tensor[(12, 9, 4), int32] {
    %191 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
    %192 = %191.4;
    %193 = cast(%192, dtype="int32") /* ty=Tensor[(?, 9, 4), int32] */;
    %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 9, 4), bool] */, dtype="int32") /* ty=Tensor[(12, 9, 4), int32] */;
    logical_xor(%193, %194) /* ty=Tensor[(12, 9, 4), int32] */
  };
  %195() /* ty=Tensor[(12, 9, 4), int32] */
}

def @func_3933() -> (Tensor[(1, 9, 4), float32],) {
  %198 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %196 = @func_3893() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %197 = %196.0;
    (%197,)
  };
  %198() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_2773() -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  %199 = cast(meta[relay.Constant][10] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %200 = reshape(%199, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %201 = @func_824(%200) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %202 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %203 = %201.0;
  (%202, %203, meta[relay.Constant][10] /* ty=Tensor[(264), float64] */)
}

def @func_3895() -> (Tensor[(1, 9, 4), float32],) {
  @func_3893() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_2284(%var_2282: Tensor[(16, 9, 4), float64], %var_2283: Tensor[(6), int16]) -> (Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) {
  @func_2280(%var_2282, %var_2283) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) */
}

def @func_4820() -> (Tensor[(?, 9, 4), uint64],) {
  @func_4818() /* ty=(Tensor[(?, 9, 4), uint64],) */
}

def @func_5084(%var_5054: Tensor[(5, 9, 4), float32]) -> (Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) {
  %204 = @func_4323() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %205 = @func_4767() /* ty=(Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) */;
  %206 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  %207 = cast(%206, dtype="int8") /* ty=Tensor[(1, 9, 4), int8] */;
  %208 = cast(%var_5054, dtype="int8") /* ty=Tensor[(5, 9, 4), int8] */;
  %209 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %210 = %204.0;
  %211 = %205.4;
  %212 = right_shift(%207, %208) /* ty=Tensor[(5, 9, 4), int8] */;
  %213 = %209.0;
  (%210, %211, %212, %213)
}

def @func_595(%var_594: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), bool],) {
  %218 = fn (%var_588: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), bool],) {
    %214 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    %215 = cast(%214, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
    %216 = cast(%var_588, dtype="bool") /* ty=Tensor[(9, 9, 4), bool] */;
    %217 = greater(%215, %216) /* ty=Tensor[(9, 9, 4), bool] */;
    (%217,)
  };
  %218(%var_594) /* ty=(Tensor[(9, 9, 4), bool],) */
}

def @func_1360() -> (Tensor[(1, 9, 4), float32],) {
  %219 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
  (%219,)
}

def @func_2786() -> Tensor[(1, 9, 4), float32] {
  @func_2784() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_2195(%var_2194: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) {
  %230 = fn (%var_2190: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) {
    %220 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %221 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %222 = cast(%var_2190, dtype="float64") /* ty=Tensor[(480), float64] */;
    %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %224 = reshape(%222, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
    %225 = reshape(%223, newshape=[975]) /* ty=Tensor[(975), float32] */;
    %226 = @func_1621(%224, %225) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
    %227 = %220.0;
    %228 = %221.0;
    %229 = %226.0;
    (%227, %228, %229, %var_2190, meta[relay.Constant][11] /* ty=Tensor[(975), float32] */)
  };
  %230(%var_2194) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) */
}

def @func_1950() -> (Tensor[(1, 9, 4), float32],) {
  @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_1533() -> (Tensor[(1, 9, 4), float32],) {
  @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_3893() -> (Tensor[(1, 9, 4), float32],) {
  %231 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_1261() -> (Tensor[(1, 9, 4), float32],) {
  %233 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %234 = %233.0;
  (%234,)
}

def @func_3583() -> Tensor[(1, 9, 4), float32] {
  @func_779() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_5809(%var_5807: Tensor[(264), float64], %var_5808: Tensor[(1, 975), float32]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), bool], Tensor[(975), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(1, 975), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
  @func_5805(%var_5807, %var_5808) /* ty=(Tensor[(?, 9, 4), uint64], Tensor[(264), bool], Tensor[(975), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(1, 975), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */
}

def @func_578() -> Tensor[(1, 9, 4), float32] {
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  exp(%235) /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_1075() -> (Tensor[(1, 9, 4), float32],) {
  %238 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %236 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %237 = %236.0;
    (%237,)
  };
  %238() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_858() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %241 = fn () -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
    %239 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    %240 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    (%239, %240)
  };
  %241() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_1263() -> (Tensor[(1, 9, 4), float32],) {
  @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_1362() -> (Tensor[(1, 9, 4), float32],) {
  @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_527(%var_526: Tensor[(9, 14, 6), float64]) -> (Tensor[(9, 14, 6), float64],) {
  %244 = fn (%var_522: Tensor[(9, 14, 6), float64]) -> (Tensor[(9, 14, 6), float64],) {
    %242 = cast(%var_522, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
    %243 = tan(%242) /* ty=Tensor[(9, 14, 6), float64] */;
    (%243,)
  };
  %244(%var_526) /* ty=(Tensor[(9, 14, 6), float64],) */
}

def @func_3611(%var_3609: Tensor[(10, 10, 6), uint32]) -> (Tensor[(10, 10, 6), uint32],) {
  @func_3608(%var_3609) /* ty=(Tensor[(10, 10, 6), uint32],) */
}

def @func_2160(%var_2159: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(3, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
  %264 = fn (%var_2095: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(3, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
    %245 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %246 = %245.1;
    %247 = cast(%var_2095, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
    %248 = cast(%246, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
    %249 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %250 = cast(%246, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
    %251 = cast(%var_2095, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
    %252 = divide(%250, %251) /* ty=Tensor[(3, 9, 4), float32] */;
    %253 = cast(%252, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
    %254 = sqrt(%253) /* ty=Tensor[(3, 9, 4), float64] */;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
    %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %257 = cast(meta[relay.Constant][13] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %258 = reshape(%256, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
    %259 = reshape(%257, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
    %260 = greater_equal(%247, %248) /* ty=Tensor[(3, 9, 4), bool] */;
    %261 = %249.0;
    %262 = atanh(%255) /* ty=Tensor[(3, 9, 4), float64] */;
    %263 = @func_1472(%258, %259) /* ty=Tensor[(4, 13), float64] */;
    (%260, %261, %262, %263, meta[relay.Constant][13] /* ty=Tensor[(52), float64] */)
  };
  %264(%var_2159) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(3, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) */
}

def @func_5620() -> Tensor[(4, 9, 4), int64] {
  %265 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %266 = cast(%265, dtype="int64") /* ty=Tensor[(?, 9, 4), int64] */;
  %267 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 9, 4), int32] */, dtype="int64") /* ty=Tensor[(4, 9, 4), int64] */;
  bitwise_xor(%266, %267) /* ty=Tensor[(4, 9, 4), int64] */
}

def @func_5496(%var_5494: Tensor[(176, 8), float64], %var_5495: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(11, 8, 6), float32], Tensor[(756), float64], Tensor[(147), int8], Tensor[(176, 8), float64], Tensor[(72, 8), float64], Tensor[(768), float64], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(208), float64]) {
  @func_5492(%var_5494, %var_5495) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(11, 8, 6), float32], Tensor[(756), float64], Tensor[(147), int8], Tensor[(176, 8), float64], Tensor[(72, 8), float64], Tensor[(768), float64], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(208), float64]) */
}

def @func_4883() -> Tensor[(1, 9, 4), float32] {
  %269 = fn () -> Tensor[(1, 9, 4), float32] {
    %268 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %268.1
  };
  %269() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_2827(%var_2792: Tensor[(10, 9, 2), float64]) -> Tensor[(10, 9, 2), float32] {
  %270 = cast(%var_2792, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %271 = tan(%270) /* ty=Tensor[(10, 9, 2), float64] */;
  %272 = cast(%var_2792, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%274, %275) /* ty=Tensor[(10, 9, 2), float32] */
}

def @func_2352(%var_2331: Tensor[(11, 11, 4), float64]) -> (Tensor[(11, 11, 4), float64],) {
  %276 = cast(%var_2331, dtype="float64") /* ty=Tensor[(11, 11, 4), float64] */;
  %277 = log2(%276) /* ty=Tensor[(11, 11, 4), float64] */;
  (%277,)
}

def @func_5677() -> (Tensor[(1, 9, 4), float32],) {
  @func_5675() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_301(%var_299: Tensor[(6), int16]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(2, 3), int16], Tensor[(6), int16], Tensor[(15, 3, 13), uint64]) {
  @func_298(%var_299) /* ty=(Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(2, 3), int16], Tensor[(6), int16], Tensor[(15, 3, 13), uint64]) */
}

def @func_4528(%var_4526: Tensor[(3, 4, 3), float64], %var_4527: Tensor[(3, 4, 3), float64]) -> (Tensor[(3, 4, 3), bool],) {
  %285 = fn (%var_4499: Tensor[(3, 4, 3), float64], %var_4513: Tensor[(3, 4, 3), float64]) -> (Tensor[(3, 4, 3), bool],) {
    %278 = cast(%var_4499, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
    %279 = log(%278) /* ty=Tensor[(3, 4, 3), float64] */;
    %280 = cast(%var_4513, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %284 = greater_equal(%282, %283) /* ty=Tensor[(3, 4, 3), bool] */;
    (%284,)
  };
  %285(%var_4526, %var_4527) /* ty=(Tensor[(3, 4, 3), bool],) */
}

def @func_142(%var_140: Tensor[(2, 3), int16], %var_141: Tensor[(2, 3), int16]) -> (Tensor[(2, 3), int16],) {
  %291 = fn (%var_124: Tensor[(2, 3), int16], %var_125: Tensor[(2, 3), int16]) -> (Tensor[(2, 3), int16],) {
    %286 = cast(%var_125, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
    %287 = shape_of(%var_124, dtype="int32") /* ty=Tensor[(2), int32] */;
    %288 = cast(%var_124, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %290 = bitwise_or(%288, %289) /* ty=Tensor[(2, 3), int16] */;
    (%290,)
  };
  %291(%var_140, %var_141) /* ty=(Tensor[(2, 3), int16],) */
}

def @func_5307() -> (Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(4, 120), bool]) {
  %303 = fn () -> (Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(4, 120), bool]) {
    %292 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %293 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %294 = reshape(%293, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %295 = @func_2193(%294) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) */;
    %296 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 120), float64] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
    %297 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 120), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 120), float64] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %300 = %292.6;
    %301 = %295.4;
    %302 = logical_or(%298, %299) /* ty=Tensor[(4, 120), bool] */;
    (%300, %301, %302)
  };
  %303() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(4, 120), bool]) */
}

def @func_3983() -> (Tensor[(1, 9, 4), float64],) {
  %305 = fn () -> (Tensor[(1, 9, 4), float64],) {
    %304 = @func_2409() /* ty=Tensor[(1, 9, 4), float64] */;
    (%304,)
  };
  %305() /* ty=(Tensor[(1, 9, 4), float64],) */
}

def @func_3906() -> Tensor[(12, 11, 2), int64] {
  %307 = fn () -> Tensor[(12, 11, 2), int64] {
    %306 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
    %306.2
  };
  %307() /* ty=Tensor[(12, 11, 2), int64] */
}

def @func_2684(%var_2663: Tensor[(10, 9, 2), float32]) -> Tensor[(10, 9, 2), float64] {
  %308 = cast(%var_2663, dtype="float32") /* ty=Tensor[(10, 9, 2), float32] */;
  %309 = asin(%308) /* ty=Tensor[(10, 9, 2), float32] */;
  %310 = cast(%var_2663, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%312, %313) /* ty=Tensor[(10, 9, 2), float64] */
}

def @func_3585() -> Tensor[(1, 9, 4), float32] {
  @func_3583() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_2626(%var_2625: Tensor[(52), float64]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), float64], Tensor[(6), int16], Tensor[(1, 9, 4), float32], Tensor[(4, 13), float64], Tensor[(?, 9, 4), int32], Tensor[(52), bool]) {
  %335 = fn (%var_2616: Tensor[(52), float64]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), float64], Tensor[(6), int16], Tensor[(1, 9, 4), float32], Tensor[(4, 13), float64], Tensor[(?, 9, 4), int32], Tensor[(52), bool]) {
    %314 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
    %315 = cast(meta[relay.Constant][17] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
    %316 = reshape(%315, newshape=[6]) /* ty=Tensor[(6), int16] */;
    %317 = @func_2570(%316) /* ty=(Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) */;
    %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %320 = reshape(%318, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
    %321 = reshape(%319, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
    %322 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
    %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %324 = log10(%323) /* ty=Tensor[(52), float64] */;
    %325 = cast(%var_2616, dtype="bool") /* ty=Tensor[(52), bool] */;
    %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(1), int32] */;
    %327 = cast(%324, dtype="bool") /* ty=Tensor[(52), bool] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?), bool] */;
    %329 = %314.1;
    %330 = %317.0;
    %331 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
    %332 = @func_1472(%320, %321) /* ty=Tensor[(4, 13), float64] */;
    %333 = %322.0;
    %334 = less(%327, %328) /* ty=Tensor[(52), bool] */;
    (%329, %330, meta[relay.Constant][17] /* ty=Tensor[(6), int16] */, %331, %332, %333, %334)
  };
  %335(%var_2625) /* ty=(Tensor[(?, 9, 4), uint64], Tensor[(264), float64], Tensor[(6), int16], Tensor[(1, 9, 4), float32], Tensor[(4, 13), float64], Tensor[(?, 9, 4), int32], Tensor[(52), bool]) */
}

def @func_1872(%var_1838: Tensor[(13, 9, 4), float32], %var_1850: Tensor[(324), float32]) -> (Tensor[(13, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(1, 9, 4), float64]) {
  %336 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %339 = cast(%var_1838, dtype="bool") /* ty=Tensor[(13, 9, 4), bool] */;
  %340 = cast(%var_1850, dtype="float32") /* ty=Tensor[(324), float32] */;
  %341 = reshape(%340, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %342 = @func_593(%341) /* ty=(Tensor[(9, 9, 4), bool],) */;
  %343 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %344 = less(%338, %339) /* ty=Tensor[(13, 9, 4), bool] */;
  %345 = %342.0;
  %346 = %343.0;
  (%344, %345, %var_1850, %346)
}

def @func_5805(%var_5751: Tensor[(264), float64], %var_5785: Tensor[(1, 975), float32]) -> (Tensor[(?, 9, 4), uint64], Tensor[(264), bool], Tensor[(975), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(1, 975), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) {
  %347 = @func_4818() /* ty=(Tensor[(?, 9, 4), uint64],) */;
  %348 = @func_5689() /* ty=Tensor[(264), float64] */;
  %349 = cast(%var_5751, dtype="int32") /* ty=Tensor[(264), int32] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(1), int32] */;
  %351 = cast(%348, dtype="int32") /* ty=Tensor[(264), int32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?), int32] */;
  %353 = right_shift(%351, %352) /* ty=Tensor[(264), int32] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(264), float64] */;
  %355 = cos(%354) /* ty=Tensor[(264), float64] */;
  %356 = cast(%355, dtype="bool") /* ty=Tensor[(264), bool] */;
  %357 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(1), int32] */;
  %358 = cast(%var_5751, dtype="bool") /* ty=Tensor[(264), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?), bool] */;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %361 = cast(meta[relay.Constant][20] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %362 = cast(%var_5785, dtype="float32") /* ty=Tensor[(1, 975), float32] */;
  %363 = reshape(%360, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), float64] */;
  %364 = reshape(%361, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %365 = reshape(%362, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %366 = @func_1698(%363, %364, %365) /* ty=(Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) */;
  %367 = @func_4643() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %368 = %347.0;
  %369 = not_equal(%358, %359) /* ty=Tensor[(264), bool] */;
  %370 = %366.2;
  %371 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  %372 = %367.0;
  (%368, %369, %370, meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, meta[relay.Constant][20] /* ty=Tensor[(480), float64] */, %var_5785, %371, %372)
}

def @func_4818() -> (Tensor[(?, 9, 4), uint64],) {
  %373 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
  %374 = %373.1;
  (%374,)
}

def @func_2383(%var_2382: Tensor[(15, 1, 5), float64]) -> (Tensor[(15, 1, 5), float64],) {
  %377 = fn (%var_2377: Tensor[(15, 1, 5), float64]) -> (Tensor[(15, 1, 5), float64],) {
    %375 = cast(%var_2377, dtype="float64") /* ty=Tensor[(15, 1, 5), float64] */;
    %376 = acosh(%375) /* ty=Tensor[(15, 1, 5), float64] */;
    (%376,)
  };
  %377(%var_2382) /* ty=(Tensor[(15, 1, 5), float64],) */
}

def @func_5147() -> (Tensor[(16, 9, 4), int32],) {
  %378 = @func_4666() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) */;
  %379 = %378.1;
  %380 = cast(%379, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
  %381 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 9, 4), float64] */, dtype="int32") /* ty=Tensor[(16, 9, 4), int32] */;
  %382 = right_shift(%380, %381) /* ty=Tensor[(16, 9, 4), int32] */;
  (%382,)
}

def @func_5622() -> Tensor[(4, 9, 4), int64] {
  @func_5620() /* ty=Tensor[(4, 9, 4), int64] */
}

def @func_3210() -> (Tensor[(12, 11, 2), int64],) {
  @func_3208() /* ty=(Tensor[(12, 11, 2), int64],) */
}

def @func_5910() -> (Tensor[(975), float64],) {
  %383 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
  %384 = %383.5;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(975), float32] */;
  %386 = sin(%385) /* ty=Tensor[(975), float32] */;
  %387 = cast(%384, dtype="float64") /* ty=Tensor[(975), float64] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(1), int32] */;
  %389 = cast(%386, dtype="float64") /* ty=Tensor[(975), float64] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?), float64] */;
  %391 = mod(%389, %390) /* ty=Tensor[(975), float64] */;
  (%391,)
}

def @func_3350() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
  @func_3348() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */
}

def @func_2775() -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  @func_2773() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */
}

def @func_3518() -> (Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_5259(%var_5254: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  %392 = cast(%var_5254, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %393 = cos(%392) /* ty=Tensor[(14, 5, 6), float64] */;
  (%393,)
}

def @func_2922(%var_2920: Tensor[(16, 3, 16), float64]) -> (Tensor[(16, 3, 16), bool],) {
  @func_2919(%var_2920) /* ty=(Tensor[(16, 3, 16), bool],) */
}

def @func_5867() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_5865() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_3348() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
  %394 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %395 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %396 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %397 = %394.0;
  %398 = %395.0;
  %399 = %396.0;
  (%397, %398, %399)
}

def @func_5233() -> (Tensor[(264), float64],) {
  %402 = fn () -> (Tensor[(264), float64],) {
    %400 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
    %401 = %400.2;
    (%401,)
  };
  %402() /* ty=(Tensor[(264), float64],) */
}

def @func_2458(%var_2456: Tensor[(52), float64]) -> (Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
  @func_2455(%var_2456) /* ty=(Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) */
}

def @func_4941(%var_4935: Tensor[(600), uint32]) -> (Tensor[(?, 9, 4), int32], Tensor[(10, 10, 6), uint32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(600), bool]) {
  %403 = cast(meta[relay.Constant][22] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %404 = reshape(%403, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), uint32] */;
  %405 = @func_3608(%404) /* ty=(Tensor[(10, 10, 6), uint32],) */;
  %406 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %407 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %408 = cast(%var_4935, dtype="bool") /* ty=Tensor[(600), bool] */;
  %409 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(600), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %410 = cast(meta[relay.Constant][22] /* ty=Tensor[(600), uint32] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?), bool] */;
  %412 = @func_4432() /* ty=Tensor[(?, 9, 4), int32] */;
  %413 = %405.0;
  %414 = %406.3;
  %415 = %407.1;
  %416 = less_equal(%410, %411) /* ty=Tensor[(600), bool] */;
  (%412, %413, %414, %415, %416)
}

def @func_1624(%var_1622: Tensor[(16, 5, 6), float64], %var_1623: Tensor[(975), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) {
  %427 = fn (%var_1578: Tensor[(16, 5, 6), float64], %var_1602: Tensor[(975), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) {
    %417 = cast(%var_1602, dtype="float32") /* ty=Tensor[(975), float32] */;
    %418 = reshape(%417, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %419 = @func_971(%418) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) */;
    %420 = cast(%var_1602, dtype="float32") /* ty=Tensor[(975), float32] */;
    %421 = cast(%var_1578, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
    %422 = sqrt(%421) /* ty=Tensor[(16, 5, 6), float64] */;
    %423 = cast(%422, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    %424 = %419.0;
    %425 = tan(%420) /* ty=Tensor[(975), float32] */;
    %426 = asin(%423) /* ty=Tensor[(16, 5, 6), float32] */;
    (%424, %425, %426)
  };
  %427(%var_1622, %var_1623) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */
}

def @func_1876(%var_1874: Tensor[(13, 9, 4), float32], %var_1875: Tensor[(324), float32]) -> (Tensor[(13, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(1, 9, 4), float64]) {
  @func_1872(%var_1874, %var_1875) /* ty=(Tensor[(13, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(1, 9, 4), float64]) */
}

def @func_5865() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %428 = @func_4323() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %429 = @func_5723() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %430 = %428.0;
  %431 = %429.1;
  (%430, %431)
}

def @func_2455(%var_2453: Tensor[(52), float64]) -> (Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) {
  %432 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
  %435 = cast(%var_2453, dtype="float64") /* ty=Tensor[(52), float64] */;
  %436 = cast(%var_2453, dtype="float64") /* ty=Tensor[(52), float64] */;
  %437 = reshape(%435, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %438 = reshape(%436, newshape=[4, 13]) /* ty=Tensor[(4, 13), float64] */;
  %439 = tan(%434) /* ty=Tensor[(1, 9, 4), float64] */;
  %440 = @func_1472(%437, %438) /* ty=Tensor[(4, 13), float64] */;
  (%439, %440, %var_2453)
}

def @func_4422(%var_4421: Tensor[(9, 9, 4), int32]) -> (Tensor[(9, 9, 4), uint64], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %449 = fn (%var_4386: Tensor[(9, 9, 4), int32]) -> (Tensor[(9, 9, 4), uint64], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
    %441 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
    %442 = %441.0;
    %443 = cast(%442, dtype="uint64") /* ty=Tensor[(?, 9, 4), uint64] */;
    %444 = cast(%var_4386, dtype="uint64") /* ty=Tensor[(9, 9, 4), uint64] */;
    %445 = @func_857() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %446 = maximum(%443, %444) /* ty=Tensor[(9, 9, 4), uint64] */;
    %447 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
    %448 = %445.1;
    (%446, %447, %448)
  };
  %449(%var_4421) /* ty=(Tensor[(9, 9, 4), uint64], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_4308(%var_4304: Tensor[(3, 9, 4), float64], %var_4305: Tensor[(3, 9, 4), float32], %var_4306: Tensor[(168), float64], %var_4307: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(3, 9, 4), float32], Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(975), float32]) {
  @func_4302(%var_4304, %var_4305, %var_4306, %var_4307) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(3, 9, 4), float32], Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(975), float32]) */
}

def @func_2355(%var_2353: Tensor[(11, 11, 4), float64]) -> (Tensor[(11, 11, 4), float64],) {
  @func_2352(%var_2353) /* ty=(Tensor[(11, 11, 4), float64],) */
}

def @func_4302(%var_4230: Tensor[(3, 9, 4), float64], %var_4261: Tensor[(3, 9, 4), float32], %var_4286: Tensor[(168), float64], %var_4287: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(3, 9, 4), float32], Tensor[(3, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(168), float64], Tensor[(480), float64], Tensor[(975), float32]) {
  %450 = @func_3893() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %451 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %452 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %455 = cast(%var_4230, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %456 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %457 = %456.5;
  %458 = cast(%457, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %459 = cast(%var_4261, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %460 = cast(%var_4286, dtype="float64") /* ty=Tensor[(168), float64] */;
  %461 = cast(%var_4287, dtype="float64") /* ty=Tensor[(480), float64] */;
  %462 = cast(meta[relay.Constant][23] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %463 = reshape(%460, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), float64] */;
  %464 = reshape(%461, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %465 = reshape(%462, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %466 = @func_1698(%463, %464, %465) /* ty=(Tensor[(8, 3, 7), float32], Tensor[(1, 9, 4), float32], Tensor[(975), float32], Tensor[(480), float64], Tensor[(975), float32], Tensor[(8, 3, 7), float32], Tensor[(9, 14, 6), float64], Tensor[(9, 84), float64]) */;
  %467 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %468 = %450.0;
  %469 = %451.0;
  %470 = floor_mod(%454, %455) /* ty=Tensor[(3, 9, 4), float32] */;
  %471 = less(%458, %459) /* ty=Tensor[(3, 9, 4), bool] */;
  %472 = %466.1;
  (%467, %468, %469, %470, %471, %472, %var_4286, %var_4287, meta[relay.Constant][23] /* ty=Tensor[(975), float32] */)
}

def @func_2645(%var_2643: Tensor[(8, 11, 16), float64]) -> (Tensor[(8, 11, 16), float64],) {
  @func_2642(%var_2643) /* ty=(Tensor[(8, 11, 16), float64],) */
}

def @func_3516() -> (Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %473 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
  %474 = cast(meta[relay.Constant][24] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %475 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 195), float32] */, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %476 = reshape(%474, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float64] */;
  %477 = reshape(%475, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %478 = @func_1621(%476, %477) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(975), float32], Tensor[(16, 5, 6), float32]) */;
  %479 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %480 = %473.0;
  %481 = %478.0;
  %482 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
  %483 = %479.0;
  %484 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  (%480, %481, meta[relay.Constant][24] /* ty=Tensor[(480), float64] */, meta[relay.Constant][25] /* ty=Tensor[(5, 195), float32] */, %482, %483, %484)
}

def @func_5690() -> Tensor[(264), float64] {
  %486 = fn () -> Tensor[(264), float64] {
    %485 = @func_5232() /* ty=(Tensor[(264), float64],) */;
    %485.0
  };
  %486() /* ty=Tensor[(264), float64] */
}

def @func_4871(%var_4870: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
  %493 = fn (%var_4850: Tensor[(480), float64]) -> (Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) {
    %487 = @func_4666() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), int32]) */;
    %488 = cast(%var_4850, dtype="float64") /* ty=Tensor[(480), float64] */;
    %489 = reshape(%488, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %490 = @func_2193(%489) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(975), float32]) */;
    %491 = %487.2;
    %492 = %490.3;
    (%491, %492, %var_4850)
  };
  %493(%var_4870) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(480), float64], Tensor[(480), float64]) */
}

def @func_5992() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32]) {
  %494 = @func_3516() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(5, 13, 15), float32], Tensor[(480), float64], Tensor[(5, 195), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %495 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %496 = %494.0;
  %497 = %495.0;
  (%496, %497)
}

def @func_5213(%var_5209: Tensor[(3, 4, 16), bool], %var_5210: Tensor[(3, 4, 16), bool], %var_5211: Tensor[(3, 4, 16), bool], %var_5212: Tensor[(3, 4, 16), uint16]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), float64], Tensor[(3, 4, 16), int64]) {
  %518 = fn (%var_5153: Tensor[(3, 4, 16), bool], %var_5154: Tensor[(3, 4, 16), bool], %var_5168: Tensor[(3, 4, 16), bool], %var_5200: Tensor[(3, 4, 16), uint16]) -> (Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), float64], Tensor[(3, 4, 16), int64]) {
    %498 = cast(%var_5154, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
    %499 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%var_5153, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %502 = cast(%var_5168, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
    %503 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%var_5154, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %506 = cast(%var_5168, dtype="uint16") /* ty=Tensor[(3, 4, 16), uint16] */;
    %507 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(3, 4, 16), uint16] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %510 = bitwise_or(%508, %509) /* ty=Tensor[(3, 4, 16), uint16] */;
    %511 = cast(%var_5200, dtype="int64") /* ty=Tensor[(3, 4, 16), int64] */;
    %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%510, dtype="int64") /* ty=Tensor[(3, 4, 16), int64] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %515 = logical_and(%500, %501) /* ty=Tensor[(3, 4, 16), bool] */;
    %516 = mod(%504, %505) /* ty=Tensor[(3, 4, 16), float64] */;
    %517 = logical_xor(%513, %514) /* ty=Tensor[(3, 4, 16), int64] */;
    (%515, %516, %517)
  };
  %518(%var_5209, %var_5210, %var_5211, %var_5212) /* ty=(Tensor[(3, 4, 16), bool], Tensor[(3, 4, 16), float64], Tensor[(3, 4, 16), int64]) */
}

def @func_3322(%var_3320: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) {
  @func_3319(%var_3320) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */
}

def @func_5262(%var_5260: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  @func_5259(%var_5260) /* ty=(Tensor[(14, 5, 6), float64],) */
}

def @func_242(%var_241: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) {
  %530 = fn (%var_194: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) {
    %519 = cast(%var_194, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
    %520 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 7, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 7, 3), int8] */, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %523 = cast(meta[relay.Constant][27] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
    %524 = cast(meta[relay.Constant][27] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
    %525 = reshape(%523, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
    %526 = reshape(%524, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
    %527 = @func_139(%525, %526) /* ty=(Tensor[(2, 3), int16],) */;
    %528 = greater(%521, %522) /* ty=Tensor[(7, 7, 3), bool] */;
    %529 = %527.0;
    (%528, %529, meta[relay.Constant][27] /* ty=Tensor[(6), int16] */)
  };
  %530(%var_241) /* ty=(Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) */
}

def @func_5657(%var_5655: Tensor[(616, 2), float32]) -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(11, 8, 14), float32], Tensor[(616, 2), float32]) {
  @func_5654(%var_5655) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(11, 8, 14), float32], Tensor[(616, 2), float32]) */
}

def @func_1314() -> (Tensor[(1, 9, 4), float64],) {
  %537 = fn () -> (Tensor[(1, 9, 4), float64],) {
    %531 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %532 = %531.0;
    %533 = cast(%532, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
    %534 = asinh(%533) /* ty=Tensor[(1, 9, 4), float32] */;
    %535 = cast(%534, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
    %536 = cosh(%535) /* ty=Tensor[(1, 9, 4), float64] */;
    (%536,)
  };
  %537() /* ty=(Tensor[(1, 9, 4), float64],) */
}

def @func_4989() -> (Tensor[(1, 9, 4), float32],) {
  %540 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %538 = @func_3198() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */;
    %539 = %538.4;
    (%539,)
  };
  %540() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_5117(%var_5115: Tensor[(480), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) {
  @func_5114(%var_5115) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(480), float64], Tensor[(480), float64]) */
}

def @func_4030() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_4028() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_824(%var_810: Tensor[(12, 11, 2), float64]) -> (Tensor[(12, 11, 2), int64],) {
  %541 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 1), float64] */;
  %542 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %543 = power(%541, %542) /* ty=Tensor[(12, 11, 2), float64] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %545 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 1), float64] */;
  %546 = mod(%544, %545) /* ty=Tensor[(12, 11, 2), float64] */;
  %547 = cast(%var_810, dtype="int64") /* ty=Tensor[(12, 11, 2), int64] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="int64") /* ty=Tensor[(12, 11, 2), int64] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %551 = right_shift(%549, %550) /* ty=Tensor[(12, 11, 2), int64] */;
  (%551,)
}

def @func_1758() -> (Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */
}

def @func_2480() -> (Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) {
  %556 = fn () -> (Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) {
    %552 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
    %553 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %554 = %552.1;
    %555 = %553.0;
    (%554, %555)
  };
  %556() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */
}

def @func_2409() -> Tensor[(1, 9, 4), float64] {
  %557 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
  %557.1
}

def @func_4769() -> (Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) {
  @func_4767() /* ty=(Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) */
}

def @func_865() -> (Tensor[(1, 9, 4), float32],) {
  %559 = fn () -> (Tensor[(1, 9, 4), float32],) {
    %558 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(1, 9, 4), float32],) */
}

def @func_2002() -> Tensor[(1, 9, 4), float32] {
  %560 = fn () -> Tensor[(1, 9, 4), float32] {
    @func_779() /* ty=Tensor[(1, 9, 4), float32] */
  };
  %560() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_5149() -> (Tensor[(16, 9, 4), int32],) {
  @func_5147() /* ty=(Tensor[(16, 9, 4), int32],) */
}

def @func_4028() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %561 = @func_1531() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %562 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  %563 = %561.0;
  (%562, %563)
}

def @func_3199() -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) {
  %602 = fn () -> (Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) {
    %564 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %565 = %564.4;
    %566 = cast(%565, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
    %567 = acos(%566) /* ty=Tensor[(1, 9, 4), float64] */;
    %568 = cast(%565, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%567, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %572 = less(%570, %571) /* ty=Tensor[(?, 9, 4), bool] */;
    %573 = cast(%567, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
    %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%572, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %577 = floor_divide(%575, %576) /* ty=Tensor[(?, 9, 4), float32] */;
    %578 = cast(%577, dtype="int32") /* ty=Tensor[(?, 9, 4), int32] */;
    %579 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%565, dtype="int32") /* ty=Tensor[(1, 9, 4), int32] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %582 = cast(%567, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
    %583 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%577, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %586 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
    %587 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %588 = cast(meta[relay.Constant][30] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %589 = reshape(%588, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
    %590 = @func_2919(%589) /* ty=(Tensor[(16, 3, 16), bool],) */;
    %591 = @func_1822() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */;
    %592 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 132), float32] */, dtype="float32") /* ty=Tensor[(4, 132), float32] */;
    %593 = reshape(%592, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
    %594 = @func_2700() /* ty=Tensor[(?, 9, 4), int32] */;
    %595 = right_shift(%580, %581) /* ty=Tensor[(?, 9, 4), int32] */;
    %596 = divide(%584, %585) /* ty=Tensor[(?, 9, 4), float32] */;
    %597 = %586.0;
    %598 = %587.1;
    %599 = %590.0;
    %600 = %591.1;
    %601 = @func_2395(%593) /* ty=Tensor[(11, 8, 6), float32] */;
    (%594, %595, %596, %597, %598, %599, meta[relay.Constant][30] /* ty=Tensor[(768), float64] */, %600, %601, meta[relay.Constant][31] /* ty=Tensor[(4, 132), float32] */)
  };
  %602() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), int32], Tensor[(?, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float32], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(?, 9, 4), uint64], Tensor[(11, 8, 6), float32], Tensor[(4, 132), float32]) */
}

def @func_2280(%var_2239: Tensor[(16, 9, 4), float64], %var_2278: Tensor[(6), int16]) -> (Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) {
  %603 = @func_1948() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %604 = @func_2073() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %607 = cast(%var_2239, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %608 = @func_1261() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %611 = @func_1145() /* ty=(Tensor[(1, 9, 4), float64],) */;
  %612 = cast(%var_2278, dtype="int16") /* ty=Tensor[(6), int16] */;
  %613 = cast(%var_2278, dtype="int16") /* ty=Tensor[(6), int16] */;
  %614 = reshape(%612, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %615 = reshape(%613, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %616 = @func_139(%614, %615) /* ty=(Tensor[(2, 3), int16],) */;
  %617 = %603.0;
  %618 = greater_equal(%606, %607) /* ty=Tensor[(16, 9, 4), bool] */;
  %619 = atanh(%610) /* ty=Tensor[(1, 9, 4), float32] */;
  %620 = %611.0;
  %621 = %616.0;
  (%617, %618, %619, %620, %621, %var_2278)
}

def @func_4944(%var_4942: Tensor[(600), uint32]) -> (Tensor[(?, 9, 4), int32], Tensor[(10, 10, 6), uint32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(600), bool]) {
  @func_4941(%var_4942) /* ty=(Tensor[(?, 9, 4), int32], Tensor[(10, 10, 6), uint32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(600), bool]) */
}

def @func_5912() -> (Tensor[(975), float64],) {
  @func_5910() /* ty=(Tensor[(975), float64],) */
}

def @func_4070() -> Tensor[(?, 9, 4), int32] {
  @func_2700() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_1993(%var_1992: Tensor[(12, 11, 2), int64]) -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), float32], Tensor[(12, 11, 2), bool]) {
  %638 = fn (%var_1962: Tensor[(12, 11, 2), int64]) -> (Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), float32], Tensor[(12, 11, 2), bool]) {
    %622 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %623 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
    %624 = %623.1;
    %625 = cast(%var_1962, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%624, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %629 = cast(%624, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
    %630 = acosh(%629) /* ty=Tensor[(12, 11, 2), float64] */;
    %631 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %635 = %622.1;
    %636 = floor_divide(%627, %628) /* ty=Tensor[(12, 11, 2), float32] */;
    %637 = not_equal(%633, %634) /* ty=Tensor[(12, 11, 2), bool] */;
    (%635, %636, %637)
  };
  %638(%var_1992) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(12, 11, 2), float32], Tensor[(12, 11, 2), bool]) */
}

def @func_2687(%var_2685: Tensor[(10, 9, 2), float32]) -> Tensor[(10, 9, 2), float64] {
  @func_2684(%var_2685) /* ty=Tensor[(10, 9, 2), float64] */
}

def @func_5723() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %639 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %640 = @func_2325() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %641 = %639.0;
  %642 = %640.3;
  (%641, %642)
}

def @func_3208() -> (Tensor[(12, 11, 2), int64],) {
  %643 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
  %644 = %643.1;
  (%644,)
}

def @func_4433() -> Tensor[(?, 9, 4), int32] {
  %646 = fn () -> Tensor[(?, 9, 4), int32] {
    %645 = @func_1902() /* ty=(Tensor[(?, 9, 4), int32],) */;
    %645.0
  };
  %646() /* ty=Tensor[(?, 9, 4), int32] */
}

def @func_5725() -> (Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_5723() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_5831() -> Tensor[(12, 11, 2), int64] {
  %648 = fn () -> Tensor[(12, 11, 2), int64] {
    %647 = @func_3208() /* ty=(Tensor[(12, 11, 2), int64],) */;
    %647.0
  };
  %648() /* ty=Tensor[(12, 11, 2), int64] */
}

def @func_2757(%var_2755: Tensor[(16, 1, 13), float64], %var_2756: Tensor[(16, 14, 13), float64]) -> (Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  @func_2753(%var_2755, %var_2756) /* ty=(Tensor[(16, 14, 13), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64], Tensor[(9, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_5335() -> Tensor[(1, 9, 4), float32] {
  %650 = fn () -> Tensor[(1, 9, 4), float32] {
    %649 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
    %649.0
  };
  %650() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_780() -> Tensor[(1, 9, 4), float32] {
  %651 = fn () -> Tensor[(1, 9, 4), float32] {
    @func_578() /* ty=Tensor[(1, 9, 4), float32] */
  };
  %651() /* ty=Tensor[(1, 9, 4), float32] */
}

def @func_1756() -> (Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) {
  %652 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %653 = cast(meta[relay.Constant][33] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %654 = reshape(%653, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %655 = @func_824(%654) /* ty=(Tensor[(12, 11, 2), int64],) */;
  %656 = %652.0;
  %657 = %655.0;
  (%656, %657, meta[relay.Constant][33] /* ty=Tensor[(264), float64] */)
}

def @func_827(%var_825: Tensor[(12, 11, 2), float64]) -> (Tensor[(12, 11, 2), int64],) {
  @func_824(%var_825) /* ty=(Tensor[(12, 11, 2), int64],) */
}

def @func_3467(%var_3465: Tensor[(1, 9, 4), float32]) -> (Tensor[(?, 9, 4), uint16], Tensor[(1, 9, 4), float32], Tensor[(208), float64], Tensor[(104, 2), float64]) {
  @func_3464(%var_3465) /* ty=(Tensor[(?, 9, 4), uint16], Tensor[(1, 9, 4), float32], Tensor[(208), float64], Tensor[(104, 2), float64]) */
}

def @main(%var_6133: Tensor[(484, 1), float64], %var_6148: Tensor[(180), float32]) -> (Tensor[(1, 9, 4), float32], Tensor[(5, 9, 4), int8], Tensor[(180), float32], Tensor[(484, ?), float64], Tensor[(10, 3, 10), int64]) {
  %658 = cast(%var_6148, dtype="float32") /* ty=Tensor[(180), float32] */;
  %659 = reshape(%658, newshape=[5, 9, 4]) /* ty=Tensor[(5, 9, 4), float32] */;
  %660 = @func_5087(%659) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(10, 10, 6), float64], Tensor[(5, 9, 4), int8], Tensor[(1, 9, 4), float32]) */;
  %661 = cast(%var_6133, dtype="float64") /* ty=Tensor[(484, 1), float64] */;
  %662 = reshape(%661, newshape=[11, 11, 4]) /* ty=Tensor[(11, 11, 4), float64] */;
  %663 = @func_2355(%662) /* ty=(Tensor[(11, 11, 4), float64],) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %666 = shape_of(%var_6133, dtype="int32") /* ty=Tensor[(2), int32] */;
  %667 = cast(%var_6133, dtype="bool") /* ty=Tensor[(484, 1), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %669 = logical_and(%667, %668) /* ty=Tensor[(484, ?), bool] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(484, ?), float64] */;
  %671 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 10), float32] */;
  %672 = erf(%671) /* ty=Tensor[(10, 3, 10), float32] */;
  %673 = cast(%672, dtype="int64") /* ty=Tensor[(10, 3, 10), int64] */;
  %674 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10, 3, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 3, 10), float32] */, dtype="int64") /* ty=Tensor[(10, 3, 10), int64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %677 = @func_2784() /* ty=Tensor[(1, 9, 4), float32] */;
  %678 = %660.2;
  %679 = sinh(%670) /* ty=Tensor[(484, ?), float64] */;
  %680 = logical_xor(%675, %676) /* ty=Tensor[(10, 3, 10), int64] */;
  (%677, %678, %var_6148, %679, %680)
}

def @func_2572(%var_2571: Tensor[(6), int16]) -> (Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) {
  %689 = fn (%var_2562: Tensor[(6), int16]) -> (Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) {
    %681 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
    %682 = cast(meta[relay.Constant][35] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %683 = cast(%var_2562, dtype="int16") /* ty=Tensor[(6), int16] */;
    %684 = reshape(%682, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
    %685 = reshape(%683, newshape=[6]) /* ty=Tensor[(6), int16] */;
    %686 = @func_2280(%684, %685) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
    %687 = %681.2;
    %688 = %686.4;
    (%687, %688, meta[relay.Constant][35] /* ty=Tensor[(576), float64] */, %var_2562)
  };
  %689(%var_2571) /* ty=(Tensor[(264), float64], Tensor[(2, 3), int16], Tensor[(576), float64], Tensor[(6), int16]) */
}

def @func_5492(%var_5469: Tensor[(176, 8), float64], %var_5489: Tensor[(208), float64]) -> (Tensor[(1, 9, 4), float32], Tensor[(11, 8, 6), float32], Tensor[(756), float64], Tensor[(147), int8], Tensor[(176, 8), float64], Tensor[(72, 8), float64], Tensor[(768), float64], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(208), float64]) {
  %690 = @func_1360() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %691 = cast(meta[relay.Constant][36] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %692 = cast(meta[relay.Constant][37] /* ty=Tensor[(147), int8] */, dtype="int8") /* ty=Tensor[(147), int8] */;
  %693 = cast(%var_5469, dtype="float64") /* ty=Tensor[(176, 8), float64] */;
  %694 = cast(meta[relay.Constant][38] /* ty=Tensor[(72, 8), float64] */, dtype="float64") /* ty=Tensor[(72, 8), float64] */;
  %695 = cast(meta[relay.Constant][39] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %696 = cast(meta[relay.Constant][40] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %697 = reshape(%691, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %698 = reshape(%692, newshape=[147]) /* ty=Tensor[(147), int8] */;
  %699 = reshape(%693, newshape=[704, 2]) /* ty=Tensor[(704, 2), float64] */;
  %700 = reshape(%694, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %701 = reshape(%695, newshape=[768]) /* ty=Tensor[(768), float64] */;
  %702 = reshape(%696, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %703 = @func_3868(%697, %698, %699, %700, %701, %702) /* ty=(Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) */;
  %704 = cast(%var_5489, dtype="float64") /* ty=Tensor[(208), float64] */;
  %705 = reshape(%704, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %706 = @func_3319(%705) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(208), float64], Tensor[(2912), float64], Tensor[(?, 9, 4), int32]) */;
  %707 = %690.0;
  %708 = %703.14;
  %709 = %706.0;
  (%707, %708, meta[relay.Constant][36] /* ty=Tensor[(756), float64] */, meta[relay.Constant][37] /* ty=Tensor[(147), int8] */, %var_5469, meta[relay.Constant][38] /* ty=Tensor[(72, 8), float64] */, meta[relay.Constant][39] /* ty=Tensor[(768), float64] */, meta[relay.Constant][40] /* ty=Tensor[(528), float32] */, %709, %var_5489)
}

def @func_2397(%var_2396: Tensor[(11, 8, 6), float32]) -> Tensor[(11, 8, 6), float32] {
  %714 = fn (%var_2389: Tensor[(11, 8, 6), float32]) -> Tensor[(11, 8, 6), float32] {
    %710 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
    %711 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(11, 8, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%712, %713) /* ty=Tensor[(11, 8, 6), float32] */
  };
  %714(%var_2396) /* ty=Tensor[(11, 8, 6), float32] */
}

def @func_5994() -> (Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32]) {
  @func_5992() /* ty=(Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32]) */
}

def @func_973(%var_972: Tensor[(5, 13, 15), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) {
  %719 = fn (%var_954: Tensor[(5, 13, 15), float32]) -> (Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) {
    %715 = cast(%var_954, dtype="float32") /* ty=Tensor[(5, 13, 15), float32] */;
    %716 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
    %717 = sqrt(%715) /* ty=Tensor[(5, 13, 15), float32] */;
    %718 = %716.3;
    (%717, %718)
  };
  %719(%var_972) /* ty=(Tensor[(5, 13, 15), float32], Tensor[(?, 9, 4), uint64]) */
}

def @func_2784() -> Tensor[(1, 9, 4), float32] {
  %720 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
  %720.0
}

def @func_2919(%var_2913: Tensor[(16, 3, 16), float64]) -> (Tensor[(16, 3, 16), bool],) {
  %721 = cast(%var_2913, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %722 = sqrt(%721) /* ty=Tensor[(16, 3, 16), float64] */;
  %723 = cast(%var_2913, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %727 = logical_or(%725, %726) /* ty=Tensor[(16, 3, 16), bool] */;
  (%727,)
}

def @func_1823() -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) {
  %734 = fn () -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) {
    %728 = @func_1043() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */;
    %729 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
    %730 = @func_1756() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(12, 11, 2), int64], Tensor[(264), float64]) */;
    %731 = %728.1;
    %732 = %729.2;
    %733 = %730.1;
    (%731, %732, %733)
  };
  %734() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), uint64], Tensor[(12, 11, 2), int64]) */
}

def @func_4767() -> (Tensor[(600), uint32], Tensor[(10, 9, 4), bool], Tensor[(1, 9, 4), float64], Tensor[(52), float64], Tensor[(10, 10, 6), float64]) {
  %735 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %736 = cast(%735, dtype="bool") /* ty=Tensor[(?, 9, 4), bool] */;
  %737 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 9, 4), int32] */, dtype="bool") /* ty=Tensor[(10, 9, 4), bool] */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %739 = reshape(%738, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %740 = @func_2455(%739) /* ty=(Tensor[(1, 9, 4), float64], Tensor[(4, 13), float64], Tensor[(52), float64]) */;
  %741 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %742 = reshape(%741, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), uint32] */;
  %743 = @func_3608(%742) /* ty=(Tensor[(10, 10, 6), uint32],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(10, 10, 6), float32] */;
  %746 = rsqrt(%745) /* ty=Tensor[(10, 10, 6), float32] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(10, 10, 6), float64] */;
  %748 = not_equal(%736, %737) /* ty=Tensor[(10, 9, 4), bool] */;
  %749 = %740.0;
  %750 = sinh(%747) /* ty=Tensor[(10, 10, 6), float64] */;
  (meta[relay.Constant][42] /* ty=Tensor[(600), uint32] */, %748, %749, meta[relay.Constant][44] /* ty=Tensor[(52), float64] */, %750)
}

def @func_1390() -> (Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
  %755 = fn () -> (Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) {
    %751 = @func_1200() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), uint64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(975), float32]) */;
    %752 = @func_1313() /* ty=(Tensor[(1, 9, 4), float64],) */;
    %753 = %751.3;
    %754 = %752.0;
    (%753, %754)
  };
  %755() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */
}

def @func_3868(%var_3718: Tensor[(756), float64], %var_3731: Tensor[(147), int8], %var_3742: Tensor[(704, 2), float64], %var_3783: Tensor[(576), float64], %var_3825: Tensor[(768), float64], %var_3838: Tensor[(528), float32]) -> (Tensor[(9, 14, 6), float64], Tensor[(756), float64], Tensor[(2, 3), int16], Tensor[(147), int8], Tensor[(8, 11, 16), float64], Tensor[(704, 2), float64], Tensor[(1, 9, 4), float32], Tensor[(576), float64], Tensor[(1, 9, 4), float64], Tensor[(?, 9, 4), uint64], Tensor[(16, 3, 16), bool], Tensor[(768), float64], Tensor[(11, 8, 14), float32], Tensor[(8, 154), float32], Tensor[(11, 8, 6), float32], Tensor[(528), float32], Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(?, 9, 4), float32], Tensor[(11, 8, 6), float32]) {
  %756 = cast(%var_3718, dtype="float64") /* ty=Tensor[(756), float64] */;
  %757 = reshape(%756, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float64] */;
  %758 = @func_525(%757) /* ty=(Tensor[(9, 14, 6), float64],) */;
  %759 = cast(%var_3731, dtype="int8") /* ty=Tensor[(147), int8] */;
  %760 = reshape(%759, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), int8] */;
  %761 = @func_240(%760) /* ty=(Tensor[(7, 7, 3), bool], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
  %762 = cast(%var_3742, dtype="float64") /* ty=Tensor[(704, 2), float64] */;
  %763 = reshape(%762, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float64] */;
  %764 = @func_2642(%763) /* ty=(Tensor[(8, 11, 16), float64],) */;
  %765 = cast(%var_3783, dtype="float64") /* ty=Tensor[(576), float64] */;
  %766 = %761.1;
  %767 = cast(%766, dtype="int16") /* ty=Tensor[(2, 3), int16] */;
  %768 = reshape(%765, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
  %769 = reshape(%767, newshape=[6]) /* ty=Tensor[(6), int16] */;
  %770 = @func_2280(%768, %769) /* ty=(Tensor[(1, 9, 4), float32], Tensor[(16, 9, 4), bool], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float64], Tensor[(2, 3), int16], Tensor[(6), int16]) */;
  %771 = @func_1389() /* ty=(Tensor[(1, 9, 4), float64], Tensor[(1, 9, 4), float64]) */;
  %772 = @func_931() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(9, 9, 4), bool], Tensor[(324), float32], Tensor[(?, 9, 4), uint64], Tensor[(?, 9, 4), bool]) */;
  %773 = cast(%var_3825, dtype="float64") /* ty=Tensor[(768), float64] */;
  %774 = reshape(%773, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %775 = @func_2919(%774) /* ty=(Tensor[(16, 3, 16), bool],) */;
  %776 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 154), float32] */, dtype="float32") /* ty=Tensor[(8, 154), float32] */;
  %777 = reshape(%776, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %778 = cast(%var_3838, dtype="float32") /* ty=Tensor[(528), float32] */;
  %779 = reshape(%778, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
  %780 = @func_2479() /* ty=(Tensor[(9, 9, 4), bool], Tensor[(1, 9, 4), float32]) */;
  %781 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %783 = erf(%782) /* ty=Tensor[(?, 9, 4), float32] */;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %785 = log10(%784) /* ty=Tensor[(?, 9, 4), float32] */;
  %786 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
  %787 = %786.0;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(1, 9, 4), float32] */;
  %789 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%785, dtype="float32") /* ty=Tensor[(?, 9, 4), float32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %792 = @func_2395(%779) /* ty=Tensor[(11, 8, 6), float32] */;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
  %794 = reshape(%793, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), float32] */;
  %795 = %758.0;
  %796 = %764.0;
  %797 = %770.0;
  %798 = %771.0;
  %799 = %772.3;
  %800 = %775.0;
  %801 = @func_352(%777) /* ty=Tensor[(11, 8, 14), float32] */;
  %802 = @func_2001() /* ty=Tensor[(1, 9, 4), float32] */;
  %803 = %780.0;
  %804 = power(%790, %791) /* ty=Tensor[(?, 9, 4), float32] */;
  %805 = @func_2395(%794) /* ty=Tensor[(11, 8, 6), float32] */;
  (%795, %var_3718, %766, %var_3731, %796, %var_3742, %797, %var_3783, %798, %799, %800, %var_3825, %801, meta[relay.Constant][45] /* ty=Tensor[(8, 154), float32] */, %792, %var_3838, %802, %803, %804, %805)
}

def @func_2326() -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
  %815 = fn () -> (Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) {
    %806 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %807 = @func_1074() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %808 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %809 = %806.0;
    %810 = @func_2211() /* ty=Tensor[(?, 9, 4), int32] */;
    %811 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    %812 = @func_578() /* ty=Tensor[(1, 9, 4), float32] */;
    %813 = %807.0;
    %814 = %808.0;
    (%809, %810, %811, %812, %813, %814)
  };
  %815() /* ty=(Tensor[(1, 9, 4), float32], Tensor[(?, 9, 4), int32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32], Tensor[(1, 9, 4), float32]) */
}

def @func_4497(%var_4495: Tensor[(12, 15, 2), int32], %var_4496: Tensor[(12, 15, 2), int32]) -> (Tensor[(12, 15, 2), bool], Tensor[(12, 15, 2), bool]) {
  %826 = fn (%var_4483: Tensor[(12, 15, 2), int32], %var_4490: Tensor[(12, 15, 2), int32]) -> (Tensor[(12, 15, 2), bool], Tensor[(12, 15, 2), bool]) {
    %816 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %817 = shape_of(%var_4483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %818 = cast(%var_4483, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %820 = cast(%var_4490, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %821 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(12, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %824 = greater_equal(%818, %819) /* ty=Tensor[(12, 15, 2), bool] */;
    %825 = not_equal(%822, %823) /* ty=Tensor[(12, 15, 2), bool] */;
    (%824, %825)
  };
  %826(%var_4495, %var_4496) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(12, 15, 2), bool]) */
}

def @func_1146() -> (Tensor[(1, 9, 4), float64],) {
  %831 = fn () -> (Tensor[(1, 9, 4), float64],) {
    %827 = @func_864() /* ty=(Tensor[(1, 9, 4), float32],) */;
    %828 = %827.0;
    %829 = cast(%828, dtype="float64") /* ty=Tensor[(1, 9, 4), float64] */;
    %830 = cos(%829) /* ty=Tensor[(1, 9, 4), float64] */;
    (%830,)
  };
  %831() /* ty=(Tensor[(1, 9, 4), float64],) */
}

def @func_2642(%var_2637: Tensor[(8, 11, 16), float64]) -> (Tensor[(8, 11, 16), float64],) {
  %832 = cast(%var_2637, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %833 = asinh(%832) /* ty=Tensor[(8, 11, 16), float64] */;
  (%833,)
}

def @func_298(%var_285: Tensor[(6), int16]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(2, 3), int16], Tensor[(6), int16], Tensor[(15, 3, 13), uint64]) {
  %834 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %835 = sigmoid(%834) /* ty=Tensor[(15, 3, 13), float32] */;
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %840 = mod(%838, %839) /* ty=Tensor[(15, 3, 13), float64] */;
  %841 = cast(%835, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%840, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %845 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %846 = cast(%var_285, dtype="int16") /* ty=Tensor[(6), int16] */;
  %847 = cast(%var_285, dtype="int16") /* ty=Tensor[(6), int16] */;
  %848 = reshape(%846, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %849 = reshape(%847, newshape=[2, 3]) /* ty=Tensor[(2, 3), int16] */;
  %850 = @func_139(%848, %849) /* ty=(Tensor[(2, 3), int16],) */;
  %851 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 3, 13), float32] */, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %852 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%835, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %855 = right_shift(%843, %844) /* ty=Tensor[(15, 3, 13), uint16] */;
  %856 = log(%845) /* ty=Tensor[(15, 3, 13), float32] */;
  %857 = %850.0;
  %858 = subtract(%853, %854) /* ty=Tensor[(15, 3, 13), uint64] */;
  (%855, %856, %857, %var_285, %858)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen54/build/output.py", line 2353, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:46:41] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

